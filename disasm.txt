
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 be c2 00 00       	call   c000c2de <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 f5 01 00       	call   c001f5e8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 72 01 02 c0       	mov    ebx,0xc0020172
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 7c 01 02 c0    	cmp    ebx,0xc002017c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 4c 3f 02 c0       	mov    eax,0xc0023f4c
c0000049:	3d 4c 3f 02 c0       	cmp    eax,0xc0023f4c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 4c 3f 02 c0       	push   0xc0023f4c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 4c 3f 02 c0       	mov    eax,0xc0023f4c
c0000075:	2d 4c 3f 02 c0       	sub    eax,0xc0023f4c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 4c 3f 02 c0       	push   0xc0023f4c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d ec 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240ec,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 84 01 02 c0       	mov    ebx,0xc0020184
c00000bb:	81 eb 80 01 02 c0    	sub    ebx,0xc0020180
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 80 01 02 c0       	mov    esi,0xc0020180
c00000ca:	a1 f0 40 02 c0       	mov    eax,ds:0xc00240f0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 f0 40 02 c0       	mov    ds:0xc00240f0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 f0 40 02 c0       	mov    eax,ds:0xc00240f0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 4c 3f 02 c0       	push   0xc0023f4c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 ec 40 02 c0 01 	mov    BYTE PTR ds:0xc00240ec,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f4 40 02 c0       	push   0xc00240f4
c000012c:	68 4c 3f 02 c0       	push   0xc0023f4c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 fe 01 00 c0    	mov    DWORD PTR ds:0xc00001fe,esi
c0000169:	89 25 fa 01 00 c0    	mov    DWORD PTR ds:0xc00001fa,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf e1 01 00 c0       	mov    edi,0xc00001e1
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	b1 90                	mov    cl,0x90
c0000197:	85 db                	test   ebx,ebx
c0000199:	74 06                	je     c00001a1 <voodooXADD.skipChange>
c000019b:	8a 8b d0 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe30]

c00001a1 <voodooXADD.skipChange>:
c00001a1:	88 8b d1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe2f],cl
c00001a7:	80 ab d2 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe2e],0x3a
c00001ae:	88 8b e1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe1f],cl
c00001b4:	80 ab e2 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe1e],0xbe
c00001bb:	89 c4                	mov    esp,eax
c00001bd:	81 c4 10 00 00 00    	add    esp,0x10
c00001c3:	5f                   	pop    edi
c00001c4:	5e                   	pop    esi
c00001c5:	5d                   	pop    ebp
c00001c6:	5b                   	pop    ebx
c00001c7:	5b                   	pop    ebx
c00001c8:	5a                   	pop    edx
c00001c9:	59                   	pop    ecx
c00001ca:	58                   	pop    eax
c00001cb:	8b 25 fe 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fe

c00001d1 <voodooXADD.helper>:
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	8b 25 fa 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fa
c00001f7:	61                   	popa   
c00001f8:	c9                   	leave  
c00001f9:	c3                   	ret    

c00001fa <voodooXADD.oldStack>:
c00001fa:	00 00                	add    BYTE PTR [eax],al
	...

c00001fe <voodooXADD.newStack>:
c00001fe:	00 00                	add    BYTE PTR [eax],al
	...

c0000202 <doTPAUSE>:
c0000202:	fb                   	sti    
c0000203:	31 c0                	xor    eax,eax
c0000205:	31 d2                	xor    edx,edx
c0000207:	66 0f ae f0          	tpause eax
c000020b:	c3                   	ret    

c000020c <hasLegacyFPU>:
c000020c:	0f 20 c2             	mov    edx,cr0
c000020f:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000215:	0f 22 c2             	mov    cr0,edx
c0000218:	db e3                	fninit 
c000021a:	dd 3d 2f 02 00 c0    	fnstsw WORD PTR ds:0xc000022f
c0000220:	31 c0                	xor    eax,eax
c0000222:	66 81 3d 2f 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000022f,0x0
c000022b:	75 01                	jne    c000022e <hasLegacyFPU.nofpu>

c000022d <hasLegacyFPU.hasfpu>:
c000022d:	40                   	inc    eax

c000022e <hasLegacyFPU.nofpu>:
c000022e:	c3                   	ret    

c000022f <testword>:
c000022f:	aa                   	stos   BYTE PTR es:[edi],al
c0000230:	55                   	push   ebp

c0000231 <is486>:
c0000231:	0f 09                	wbinvd 
c0000233:	31 c0                	xor    eax,eax
c0000235:	40                   	inc    eax
c0000236:	c3                   	ret    
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	31 c0                	xor    eax,eax
c0000266:	c3                   	ret    

c0000267 <goToVM86>:
c0000267:	fa                   	cli    
c0000268:	55                   	push   ebp
c0000269:	89 e5                	mov    ebp,esp
c000026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000026e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000271:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000274:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000277:	25 ff ff 00 00       	and    eax,0xffff
c000027c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000282:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000288:	81 e2 ff ff 00 00    	and    edx,0xffff
c000028e:	52                   	push   edx
c000028f:	51                   	push   ecx
c0000290:	68 02 02 02 00       	push   0x20202
c0000295:	53                   	push   ebx
c0000296:	50                   	push   eax
c0000297:	cf                   	iret   

c0000298 <goToUsermode>:
c0000298:	fa                   	cli    
c0000299:	55                   	push   ebp
c000029a:	89 e5                	mov    ebp,esp
c000029c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000029f:	66 b8 23 00          	mov    ax,0x23
c00002a3:	66 8e d8             	mov    ds,ax
c00002a6:	66 8e c0             	mov    es,ax
c00002a9:	66 8e e0             	mov    fs,ax
c00002ac:	66 8e e8             	mov    gs,ax
c00002af:	89 e0                	mov    eax,esp
c00002b1:	68 23 00 00 00       	push   0x23
c00002b6:	50                   	push   eax
c00002b7:	68 02 02 00 00       	push   0x202
c00002bc:	68 1b 00 00 00       	push   0x1b
c00002c1:	53                   	push   ebx
c00002c2:	cf                   	iret   

c00002c3 <switchToThreadASMFirstTime>:
c00002c3:	9c                   	pushf  
c00002c4:	fa                   	cli    
c00002c5:	50                   	push   eax
c00002c6:	53                   	push   ebx
c00002c7:	51                   	push   ecx
c00002c8:	52                   	push   edx
c00002c9:	56                   	push   esi
c00002ca:	57                   	push   edi
c00002cb:	55                   	push   ebp
c00002cc:	e9 11 00 00 00       	jmp    c00002e2 <commonThreadSwitch>

c00002d1 <switchToThreadASM>:
c00002d1:	9c                   	pushf  
c00002d2:	50                   	push   eax
c00002d3:	53                   	push   ebx
c00002d4:	51                   	push   ecx
c00002d5:	52                   	push   edx
c00002d6:	56                   	push   esi
c00002d7:	57                   	push   edi
c00002d8:	55                   	push   ebp
c00002d9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002df:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002e2 <commonThreadSwitch>:
c00002e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002e6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00002ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002f4:	0f 20 d9             	mov    ecx,cr3
c00002f7:	39 c8                	cmp    eax,ecx
c00002f9:	74 03                	je     c00002fe <commonThreadSwitch.doneVAS>
c00002fb:	0f 22 d8             	mov    cr3,eax

c00002fe <commonThreadSwitch.doneVAS>:
c00002fe:	85 d2                	test   edx,edx
c0000300:	74 4e                	je     c0000350 <commonThreadSwitch.notFirstTime>
c0000302:	fa                   	cli    
c0000303:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000306:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000030b:	60                   	pusha  
c000030c:	e8 bf eb 00 00       	call   c000eed0 <mapVASFirstTime>
c0000311:	61                   	popa   
c0000312:	89 c4                	mov    esp,eax
c0000314:	56                   	push   esi
c0000315:	52                   	push   edx
c0000316:	e8 e9 81 01 00       	call   c0018504 <changeTSS>
c000031b:	5a                   	pop    edx
c000031c:	5e                   	pop    esi
c000031d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000324:	81 fa 01 00 00 00    	cmp    edx,0x1
c000032a:	74 39                	je     c0000365 <commonThreadSwitch.cameOffAFork>
c000032c:	5d                   	pop    ebp
c000032d:	5f                   	pop    edi
c000032e:	5e                   	pop    esi
c000032f:	59                   	pop    ecx
c0000330:	59                   	pop    ecx
c0000331:	5b                   	pop    ebx
c0000332:	58                   	pop    eax
c0000333:	81 c4 04 00 00 00    	add    esp,0x4
c0000339:	6a 02                	push   0x2
c000033b:	9d                   	popf   
c000033c:	52                   	push   edx
c000033d:	e8 ef 85 01 00       	call   c0018931 <taskStartupFunction>
c0000342:	5a                   	pop    edx
c0000343:	50                   	push   eax
c0000344:	ff d2                	call   edx
c0000346:	e8 a4 8b 01 00       	call   c0018eef <taskReturned>
c000034b:	e9 fb ff ff ff       	jmp    c000034b <commonThreadSwitch.doneVAS+0x4d>

c0000350 <commonThreadSwitch.notFirstTime>:
c0000350:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000353:	56                   	push   esi
c0000354:	52                   	push   edx
c0000355:	e8 aa 81 01 00       	call   c0018504 <changeTSS>
c000035a:	5a                   	pop    edx
c000035b:	5e                   	pop    esi
c000035c:	5d                   	pop    ebp
c000035d:	5f                   	pop    edi
c000035e:	5e                   	pop    esi
c000035f:	5a                   	pop    edx
c0000360:	59                   	pop    ecx
c0000361:	5b                   	pop    ebx
c0000362:	58                   	pop    eax
c0000363:	9d                   	popf   
c0000364:	c3                   	ret    

c0000365 <commonThreadSwitch.cameOffAFork>:
c0000365:	31 c0                	xor    eax,eax
c0000367:	31 d2                	xor    edx,edx
c0000369:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000036c:	e9 a2 02 00 00       	jmp    c0000613 <offAForkJumpThingy>

c0000371 <detectCPUID>:
c0000371:	9c                   	pushf  
c0000372:	9c                   	pushf  
c0000373:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c000037a:	9d                   	popf   
c000037b:	9c                   	pushf  
c000037c:	58                   	pop    eax
c000037d:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000380:	9d                   	popf   
c0000381:	25 00 00 20 00       	and    eax,0x200000
c0000386:	c3                   	ret    

c0000387 <asmQuickAcquireLock>:
c0000387:	55                   	push   ebp
c0000388:	89 e5                	mov    ebp,esp
c000038a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000038d <asmQuickAcquireLock.retry>:
c000038d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000392:	72 02                	jb     c0000396 <asmQuickAcquireLock.spin_with_pause>
c0000394:	fa                   	cli    
c0000395:	c3                   	ret    

c0000396 <asmQuickAcquireLock.spin_with_pause>:
c0000396:	f3 90                	pause  
c0000398:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000039e:	75 f6                	jne    c0000396 <asmQuickAcquireLock.spin_with_pause>
c00003a0:	e9 e8 ff ff ff       	jmp    c000038d <asmQuickAcquireLock.retry>

c00003a5 <asmQuickReleaseLock>:
c00003a5:	55                   	push   ebp
c00003a6:	89 e5                	mov    ebp,esp
c00003a8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003af:	5d                   	pop    ebp
c00003b0:	c3                   	ret    

c00003b1 <asmAcquireLock>:
c00003b1:	55                   	push   ebp
c00003b2:	89 e5                	mov    ebp,esp
c00003b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b7 <asmAcquireLock.retry>:
c00003b7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003bc:	72 05                	jb     c00003c3 <asmAcquireLock.spin_with_pause>
c00003be:	9c                   	pushf  
c00003bf:	58                   	pop    eax
c00003c0:	fa                   	cli    
c00003c1:	5d                   	pop    ebp
c00003c2:	c3                   	ret    

c00003c3 <asmAcquireLock.spin_with_pause>:
c00003c3:	f3 90                	pause  
c00003c5:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003cb:	75 f6                	jne    c00003c3 <asmAcquireLock.spin_with_pause>
c00003cd:	e9 e5 ff ff ff       	jmp    c00003b7 <asmAcquireLock.retry>

c00003d2 <asmReleaseLock>:
c00003d2:	55                   	push   ebp
c00003d3:	89 e5                	mov    ebp,esp
c00003d5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003e1:	52                   	push   edx
c00003e2:	9d                   	popf   
c00003e3:	5d                   	pop    ebp
c00003e4:	c3                   	ret    

c00003e5 <loadGDT>:
c00003e5:	0f 01 15 30 45 02 c0 	lgdtd  ds:0xc0024530
c00003ec:	66 b8 10 00          	mov    ax,0x10
c00003f0:	66 8e d8             	mov    ds,ax
c00003f3:	66 8e c0             	mov    es,ax
c00003f6:	66 8e e0             	mov    fs,ax
c00003f9:	66 8e e8             	mov    gs,ax
c00003fc:	66 8e d0             	mov    ss,ax
c00003ff:	e9 00 00 00 00       	jmp    c0000404 <flush2>

c0000404 <flush2>:
c0000404:	c3                   	ret    

c0000405 <isr0>:
c0000405:	fa                   	cli    
c0000406:	68 00 00 00 00       	push   0x0
c000040b:	68 00 00 00 00       	push   0x0
c0000410:	e9 a2 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000415 <isr1>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 01                	push   0x1
c000041a:	e9 98 01 00 00       	jmp    c00005b7 <int_common_stub>

c000041f <isr2>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 02                	push   0x2
c0000424:	e9 8e 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000429 <isr3>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 03                	push   0x3
c000042e:	e9 84 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000433 <isr4>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 04                	push   0x4
c0000438:	e9 7a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000043d <isr5>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 05                	push   0x5
c0000442:	e9 70 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000447 <isr6>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 06                	push   0x6
c000044c:	e9 66 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000451 <isr7>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 07                	push   0x7
c0000456:	e9 5c 01 00 00       	jmp    c00005b7 <int_common_stub>

c000045b <isr8>:
c000045b:	fa                   	cli    
c000045c:	6a 08                	push   0x8
c000045e:	e9 54 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000463 <isr9>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 09                	push   0x9
c0000468:	e9 4a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000046d <isr10>:
c000046d:	fa                   	cli    
c000046e:	6a 0a                	push   0xa
c0000470:	e9 42 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000475 <isr11>:
c0000475:	fa                   	cli    
c0000476:	6a 0b                	push   0xb
c0000478:	e9 3a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000047d <isr12>:
c000047d:	fa                   	cli    
c000047e:	6a 0c                	push   0xc
c0000480:	e9 32 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000485 <isr13>:
c0000485:	fa                   	cli    
c0000486:	6a 0d                	push   0xd
c0000488:	e9 2a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000048d <isr14>:
c000048d:	fa                   	cli    
c000048e:	6a 0e                	push   0xe
c0000490:	e9 22 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000495 <isr15>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 0f                	push   0xf
c000049a:	e9 18 01 00 00       	jmp    c00005b7 <int_common_stub>

c000049f <isr16>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 10                	push   0x10
c00004a4:	e9 0e 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004a9 <isr17>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 11                	push   0x11
c00004ae:	e9 04 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004b3 <isr18>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 12                	push   0x12
c00004b8:	e9 fa 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004bd <isr96>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 60                	push   0x60
c00004c2:	e9 20 01 00 00       	jmp    c00005e7 <syscall_common_stub>

c00004c7 <irq0>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 20                	push   0x20
c00004cc:	e9 e6 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004d1 <irq1>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 21                	push   0x21
c00004d6:	e9 dc 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004db <irq2>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 22                	push   0x22
c00004e0:	e9 d2 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004e5 <irq3>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 23                	push   0x23
c00004ea:	e9 c8 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004ef <irq4>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 24                	push   0x24
c00004f4:	e9 be 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004f9 <irq5>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 25                	push   0x25
c00004fe:	e9 b4 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000503 <irq6>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 26                	push   0x26
c0000508:	e9 aa 00 00 00       	jmp    c00005b7 <int_common_stub>

c000050d <irq7>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 27                	push   0x27
c0000512:	e9 a0 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000517 <irq8>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 28                	push   0x28
c000051c:	e9 96 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000521 <irq9>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 29                	push   0x29
c0000526:	e9 8c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000052b <irq10>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 2a                	push   0x2a
c0000530:	e9 82 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000535 <irq11>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 2b                	push   0x2b
c000053a:	e9 78 00 00 00       	jmp    c00005b7 <int_common_stub>

c000053f <irq12>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 2c                	push   0x2c
c0000544:	e9 6e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000549 <irq13>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 2d                	push   0x2d
c000054e:	e9 64 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000553 <irq14>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 2e                	push   0x2e
c0000558:	e9 5a 00 00 00       	jmp    c00005b7 <int_common_stub>

c000055d <irq15>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2f                	push   0x2f
c0000562:	e9 50 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000567 <irq16>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 30                	push   0x30
c000056c:	e9 46 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000571 <irq17>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 31                	push   0x31
c0000576:	e9 3c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000057b <irq18>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 32                	push   0x32
c0000580:	e9 32 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000585 <irq19>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 33                	push   0x33
c000058a:	e9 28 00 00 00       	jmp    c00005b7 <int_common_stub>

c000058f <irq20>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 34                	push   0x34
c0000594:	e9 1e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000599 <irq21>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 35                	push   0x35
c000059e:	e9 14 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005a3 <irq22>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 36                	push   0x36
c00005a8:	e9 0a 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005ad <irq23>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 37                	push   0x37
c00005b2:	e9 00 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005b7 <int_common_stub>:
c00005b7:	60                   	pusha  
c00005b8:	1e                   	push   ds
c00005b9:	06                   	push   es
c00005ba:	0f a0                	push   fs
c00005bc:	0f a8                	push   gs
c00005be:	66 b8 10 00          	mov    ax,0x10
c00005c2:	66 8e d8             	mov    ds,ax
c00005c5:	66 8e c0             	mov    es,ax
c00005c8:	66 8e e0             	mov    fs,ax
c00005cb:	66 8e e8             	mov    gs,ax
c00005ce:	89 e1                	mov    ecx,esp
c00005d0:	51                   	push   ecx
c00005d1:	b9 f9 0d 01 c0       	mov    ecx,0xc0010df9
c00005d6:	ff d1                	call   ecx
c00005d8:	59                   	pop    ecx
c00005d9:	0f a9                	pop    gs
c00005db:	0f a1                	pop    fs
c00005dd:	07                   	pop    es
c00005de:	1f                   	pop    ds
c00005df:	61                   	popa   
c00005e0:	81 c4 08 00 00 00    	add    esp,0x8
c00005e6:	cf                   	iret   

c00005e7 <syscall_common_stub>:
c00005e7:	60                   	pusha  
c00005e8:	1e                   	push   ds
c00005e9:	06                   	push   es
c00005ea:	0f a0                	push   fs
c00005ec:	0f a8                	push   gs
c00005ee:	66 b8 10 00          	mov    ax,0x10
c00005f2:	66 8e d8             	mov    ds,ax
c00005f5:	66 8e c0             	mov    es,ax
c00005f8:	66 8e e0             	mov    fs,ax
c00005fb:	66 8e e8             	mov    gs,ax
c00005fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000604:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000607:	89 e1                	mov    ecx,esp
c0000609:	51                   	push   ecx
c000060a:	fb                   	sti    
c000060b:	b9 f9 0d 01 c0       	mov    ecx,0xc0010df9
c0000610:	ff d1                	call   ecx
c0000612:	59                   	pop    ecx

c0000613 <offAForkJumpThingy>:
c0000613:	0f a9                	pop    gs
c0000615:	0f a1                	pop    fs
c0000617:	07                   	pop    es
c0000618:	1f                   	pop    ds
c0000619:	61                   	popa   
c000061a:	81 c4 08 00 00 00    	add    esp,0x8
c0000620:	cf                   	iret   

c0000621 <memcmp>:
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000062f:	01 d6                	add    esi,edx
c0000631:	39 f2                	cmp    edx,esi
c0000633:	74 0e                	je     c0000643 <memcmp+0x22>
c0000635:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000638:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000063b:	38 c8                	cmp    al,cl
c000063d:	75 08                	jne    c0000647 <memcmp+0x26>
c000063f:	42                   	inc    edx
c0000640:	43                   	inc    ebx
c0000641:	eb ee                	jmp    c0000631 <memcmp+0x10>
c0000643:	31 c0                	xor    eax,eax
c0000645:	eb 02                	jmp    c0000649 <memcmp+0x28>
c0000647:	29 c8                	sub    eax,ecx
c0000649:	5b                   	pop    ebx
c000064a:	5e                   	pop    esi
c000064b:	c3                   	ret    

c000064c <memmove>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000065a:	39 c8                	cmp    eax,ecx
c000065c:	73 12                	jae    c0000670 <memmove+0x24>
c000065e:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000661:	89 c3                	mov    ebx,eax
c0000663:	39 f1                	cmp    ecx,esi
c0000665:	74 1a                	je     c0000681 <memmove+0x35>
c0000667:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000669:	43                   	inc    ebx
c000066a:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000066d:	41                   	inc    ecx
c000066e:	eb f3                	jmp    c0000663 <memmove+0x17>
c0000670:	76 0f                	jbe    c0000681 <memmove+0x35>
c0000672:	85 d2                	test   edx,edx
c0000674:	74 0b                	je     c0000681 <memmove+0x35>
c0000676:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000067a:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000067e:	4a                   	dec    edx
c000067f:	eb f1                	jmp    c0000672 <memmove+0x26>
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memcpy>:
c0000684:	57                   	push   edi
c0000685:	56                   	push   esi
c0000686:	53                   	push   ebx
c0000687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000068f:	89 da                	mov    edx,ebx
c0000691:	89 d9                	mov    ecx,ebx
c0000693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000697:	83 e2 fc             	and    edx,0xfffffffc
c000069a:	c1 e9 02             	shr    ecx,0x2
c000069d:	89 c7                	mov    edi,eax
c000069f:	fc                   	cld    
c00006a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006a2:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006a5:	01 c2                	add    edx,eax
c00006a7:	01 de                	add    esi,ebx
c00006a9:	39 f1                	cmp    ecx,esi
c00006ab:	74 09                	je     c00006b6 <memcpy+0x32>
c00006ad:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006af:	42                   	inc    edx
c00006b0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006b3:	41                   	inc    ecx
c00006b4:	eb f3                	jmp    c00006a9 <memcpy+0x25>
c00006b6:	5b                   	pop    ebx
c00006b7:	5e                   	pop    esi
c00006b8:	5f                   	pop    edi
c00006b9:	c3                   	ret    

c00006ba <memset>:
c00006ba:	53                   	push   ebx
c00006bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c3:	01 c1                	add    ecx,eax
c00006c5:	89 c2                	mov    edx,eax
c00006c7:	39 ca                	cmp    edx,ecx
c00006c9:	74 0a                	je     c00006d5 <memset+0x1b>
c00006cb:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006cf:	42                   	inc    edx
c00006d0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d3:	eb f2                	jmp    c00006c7 <memset+0xd>
c00006d5:	5b                   	pop    ebx
c00006d6:	c3                   	ret    

c00006d7 <strlen>:
c00006d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006db:	31 c0                	xor    eax,eax
c00006dd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e1:	74 03                	je     c00006e6 <strlen+0xf>
c00006e3:	40                   	inc    eax
c00006e4:	eb f7                	jmp    c00006dd <strlen+0x6>
c00006e6:	c3                   	ret    

c00006e7 <strpbrk>:
c00006e7:	53                   	push   ebx
c00006e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ec:	8a 08                	mov    cl,BYTE PTR [eax]
c00006ee:	84 c9                	test   cl,cl
c00006f0:	74 14                	je     c0000706 <strpbrk+0x1f>
c00006f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006f8:	84 db                	test   bl,bl
c00006fa:	74 07                	je     c0000703 <strpbrk+0x1c>
c00006fc:	38 cb                	cmp    bl,cl
c00006fe:	74 08                	je     c0000708 <strpbrk+0x21>
c0000700:	42                   	inc    edx
c0000701:	eb f3                	jmp    c00006f6 <strpbrk+0xf>
c0000703:	40                   	inc    eax
c0000704:	eb e6                	jmp    c00006ec <strpbrk+0x5>
c0000706:	31 c0                	xor    eax,eax
c0000708:	5b                   	pop    ebx
c0000709:	c3                   	ret    

c000070a <strtok>:
c000070a:	56                   	push   esi
c000070b:	53                   	push   ebx
c000070c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000710:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000714:	85 db                	test   ebx,ebx
c0000716:	75 0e                	jne    c0000726 <strtok+0x1c>
c0000718:	8b 1d 0c 41 02 c0    	mov    ebx,DWORD PTR ds:0xc002410c
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 04                	jne    c0000726 <strtok+0x1c>
c0000722:	31 db                	xor    ebx,ebx
c0000724:	eb 2e                	jmp    c0000754 <strtok+0x4a>
c0000726:	56                   	push   esi
c0000727:	53                   	push   ebx
c0000728:	e8 ba ff ff ff       	call   c00006e7 <strpbrk>
c000072d:	a3 0c 41 02 c0       	mov    ds:0xc002410c,eax
c0000732:	5a                   	pop    edx
c0000733:	a1 0c 41 02 c0       	mov    eax,ds:0xc002410c
c0000738:	59                   	pop    ecx
c0000739:	39 d8                	cmp    eax,ebx
c000073b:	75 07                	jne    c0000744 <strtok+0x3a>
c000073d:	43                   	inc    ebx
c000073e:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000742:	eb e2                	jmp    c0000726 <strtok+0x1c>
c0000744:	85 c0                	test   eax,eax
c0000746:	74 da                	je     c0000722 <strtok+0x18>
c0000748:	8d 50 01             	lea    edx,[eax+0x1]
c000074b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000074e:	89 15 0c 41 02 c0    	mov    DWORD PTR ds:0xc002410c,edx
c0000754:	89 d8                	mov    eax,ebx
c0000756:	5b                   	pop    ebx
c0000757:	5e                   	pop    esi
c0000758:	c3                   	ret    

c0000759 <strcpy>:
c0000759:	53                   	push   ebx
c000075a:	31 d2                	xor    edx,edx
c000075c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000764:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000767:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000076a:	84 c9                	test   cl,cl
c000076c:	74 06                	je     c0000774 <strcpy+0x1b>
c000076e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000771:	42                   	inc    edx
c0000772:	eb ec                	jmp    c0000760 <strcpy+0x7>
c0000774:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000777:	5b                   	pop    ebx
c0000778:	c3                   	ret    

c0000779 <strncpy>:
c0000779:	56                   	push   esi
c000077a:	53                   	push   ebx
c000077b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000783:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000787:	89 c3                	mov    ebx,eax
c0000789:	85 c9                	test   ecx,ecx
c000078b:	74 1a                	je     c00007a7 <strncpy+0x2e>
c000078d:	46                   	inc    esi
c000078e:	43                   	inc    ebx
c000078f:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000792:	49                   	dec    ecx
c0000793:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000796:	84 d2                	test   dl,dl
c0000798:	75 ef                	jne    c0000789 <strncpy+0x10>
c000079a:	31 d2                	xor    edx,edx
c000079c:	39 d1                	cmp    ecx,edx
c000079e:	74 07                	je     c00007a7 <strncpy+0x2e>
c00007a0:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a4:	42                   	inc    edx
c00007a5:	eb f5                	jmp    c000079c <strncpy+0x23>
c00007a7:	5b                   	pop    ebx
c00007a8:	5e                   	pop    esi
c00007a9:	c3                   	ret    

c00007aa <strcmp>:
c00007aa:	31 c9                	xor    ecx,ecx
c00007ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007b8:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007bc:	38 d0                	cmp    al,dl
c00007be:	75 08                	jne    c00007c8 <strcmp+0x1e>
c00007c0:	41                   	inc    ecx
c00007c1:	84 c0                	test   al,al
c00007c3:	75 e7                	jne    c00007ac <strcmp+0x2>
c00007c5:	31 c0                	xor    eax,eax
c00007c7:	c3                   	ret    
c00007c8:	29 d0                	sub    eax,edx
c00007ca:	c3                   	ret    

c00007cb <strchr>:
c00007cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007cf:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d1:	84 d2                	test   dl,dl
c00007d3:	74 09                	je     c00007de <strchr+0x13>
c00007d5:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007d9:	74 05                	je     c00007e0 <strchr+0x15>
c00007db:	40                   	inc    eax
c00007dc:	eb f1                	jmp    c00007cf <strchr+0x4>
c00007de:	31 c0                	xor    eax,eax
c00007e0:	c3                   	ret    

c00007e1 <strncmp>:
c00007e1:	56                   	push   esi
c00007e2:	53                   	push   ebx
c00007e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ef:	01 d6                	add    esi,edx
c00007f1:	39 f2                	cmp    edx,esi
c00007f3:	74 12                	je     c0000807 <strncmp+0x26>
c00007f5:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007f8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007fb:	38 c8                	cmp    al,cl
c00007fd:	75 0c                	jne    c000080b <strncmp+0x2a>
c00007ff:	42                   	inc    edx
c0000800:	84 c0                	test   al,al
c0000802:	74 03                	je     c0000807 <strncmp+0x26>
c0000804:	43                   	inc    ebx
c0000805:	eb ea                	jmp    c00007f1 <strncmp+0x10>
c0000807:	31 c0                	xor    eax,eax
c0000809:	eb 02                	jmp    c000080d <strncmp+0x2c>
c000080b:	29 c8                	sub    eax,ecx
c000080d:	5b                   	pop    ebx
c000080e:	5e                   	pop    esi
c000080f:	c3                   	ret    

c0000810 <strcat>:
c0000810:	53                   	push   ebx
c0000811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000815:	89 c1                	mov    ecx,eax
c0000817:	8d 51 01             	lea    edx,[ecx+0x1]
c000081a:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000081e:	74 04                	je     c0000824 <strcat+0x14>
c0000820:	89 d1                	mov    ecx,edx
c0000822:	eb f3                	jmp    c0000817 <strcat+0x7>
c0000824:	31 d2                	xor    edx,edx
c0000826:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000082a:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000082d:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000830:	42                   	inc    edx
c0000831:	84 db                	test   bl,bl
c0000833:	75 f1                	jne    c0000826 <strcat+0x16>
c0000835:	5b                   	pop    ebx
c0000836:	c3                   	ret    

c0000837 <strncat>:
c0000837:	56                   	push   esi
c0000838:	53                   	push   ebx
c0000839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000083d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000845:	89 c2                	mov    edx,eax
c0000847:	85 db                	test   ebx,ebx
c0000849:	74 23                	je     c000086e <strncat+0x37>
c000084b:	8d 72 01             	lea    esi,[edx+0x1]
c000084e:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000852:	74 04                	je     c0000858 <strncat+0x21>
c0000854:	89 f2                	mov    edx,esi
c0000856:	eb f3                	jmp    c000084b <strncat+0x14>
c0000858:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000085b:	41                   	inc    ecx
c000085c:	42                   	inc    edx
c000085d:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000860:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000863:	84 db                	test   bl,bl
c0000865:	74 07                	je     c000086e <strncat+0x37>
c0000867:	39 f1                	cmp    ecx,esi
c0000869:	75 f0                	jne    c000085b <strncat+0x24>
c000086b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000086e:	5b                   	pop    ebx
c000086f:	5e                   	pop    esi
c0000870:	c3                   	ret    

c0000871 <strstr>:
c0000871:	57                   	push   edi
c0000872:	56                   	push   esi
c0000873:	53                   	push   ebx
c0000874:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000087c:	57                   	push   edi
c000087d:	e8 55 fe ff ff       	call   c00006d7 <strlen>
c0000882:	59                   	pop    ecx
c0000883:	89 c6                	mov    esi,eax
c0000885:	85 c0                	test   eax,eax
c0000887:	74 1f                	je     c00008a8 <strstr+0x37>
c0000889:	53                   	push   ebx
c000088a:	e8 48 fe ff ff       	call   c00006d7 <strlen>
c000088f:	5a                   	pop    edx
c0000890:	39 f0                	cmp    eax,esi
c0000892:	72 12                	jb     c00008a6 <strstr+0x35>
c0000894:	56                   	push   esi
c0000895:	57                   	push   edi
c0000896:	53                   	push   ebx
c0000897:	e8 85 fd ff ff       	call   c0000621 <memcmp>
c000089c:	83 c4 0c             	add    esp,0xc
c000089f:	85 c0                	test   eax,eax
c00008a1:	74 05                	je     c00008a8 <strstr+0x37>
c00008a3:	43                   	inc    ebx
c00008a4:	eb e3                	jmp    c0000889 <strstr+0x18>
c00008a6:	31 db                	xor    ebx,ebx
c00008a8:	89 d8                	mov    eax,ebx
c00008aa:	5b                   	pop    ebx
c00008ab:	5e                   	pop    esi
c00008ac:	5f                   	pop    edi
c00008ad:	c3                   	ret    

c00008ae <toupper>:
c00008ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b2:	0f b6 d0             	movzx  edx,al
c00008b5:	f6 82 a0 01 02 c0 02 	test   BYTE PTR [edx-0x3ffdfe60],0x2
c00008bc:	74 03                	je     c00008c1 <toupper+0x13>
c00008be:	83 e8 20             	sub    eax,0x20
c00008c1:	c3                   	ret    

c00008c2 <tolower>:
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	0f b6 d0             	movzx  edx,al
c00008c9:	f6 82 a0 01 02 c0 01 	test   BYTE PTR [edx-0x3ffdfe60],0x1
c00008d0:	74 03                	je     c00008d5 <tolower+0x13>
c00008d2:	83 c0 20             	add    eax,0x20
c00008d5:	c3                   	ret    

c00008d6 <simple_strtoul>:
c00008d6:	55                   	push   ebp
c00008d7:	57                   	push   edi
c00008d8:	56                   	push   esi
c00008d9:	53                   	push   ebx
c00008da:	83 ec 08             	sub    esp,0x8
c00008dd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008e8:	f6 82 a0 01 02 c0 08 	test   BYTE PTR [edx-0x3ffdfe60],0x8
c00008ef:	74 03                	je     c00008f4 <simple_strtoul+0x1e>
c00008f1:	41                   	inc    ecx
c00008f2:	eb f1                	jmp    c00008e5 <simple_strtoul+0xf>
c00008f4:	80 fa 09             	cmp    dl,0x9
c00008f7:	74 f8                	je     c00008f1 <simple_strtoul+0x1b>
c00008f9:	80 fa 2d             	cmp    dl,0x2d
c00008fc:	75 0b                	jne    c0000909 <simple_strtoul+0x33>
c00008fe:	41                   	inc    ecx
c00008ff:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000907:	eb 0e                	jmp    c0000917 <simple_strtoul+0x41>
c0000909:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000911:	80 fa 2b             	cmp    dl,0x2b
c0000914:	75 01                	jne    c0000917 <simple_strtoul+0x41>
c0000916:	41                   	inc    ecx
c0000917:	85 f6                	test   esi,esi
c0000919:	75 22                	jne    c000093d <simple_strtoul+0x67>
c000091b:	be 0a 00 00 00       	mov    esi,0xa
c0000920:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000923:	75 5a                	jne    c000097f <simple_strtoul+0xa9>
c0000925:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000929:	50                   	push   eax
c000092a:	e8 93 ff ff ff       	call   c00008c2 <tolower>
c000092f:	5a                   	pop    edx
c0000930:	83 f8 78             	cmp    eax,0x78
c0000933:	74 03                	je     c0000938 <simple_strtoul+0x62>
c0000935:	41                   	inc    ecx
c0000936:	eb 16                	jmp    c000094e <simple_strtoul+0x78>
c0000938:	83 c1 02             	add    ecx,0x2
c000093b:	eb 22                	jmp    c000095f <simple_strtoul+0x89>
c000093d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000940:	83 f8 22             	cmp    eax,0x22
c0000943:	0f 87 ab 00 00 00    	ja     c00009f4 <simple_strtoul+0x11e>
c0000949:	83 fe 08             	cmp    esi,0x8
c000094c:	75 0c                	jne    c000095a <simple_strtoul+0x84>
c000094e:	be 08 00 00 00       	mov    esi,0x8
c0000953:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000956:	75 27                	jne    c000097f <simple_strtoul+0xa9>
c0000958:	eb 1f                	jmp    c0000979 <simple_strtoul+0xa3>
c000095a:	83 fe 10             	cmp    esi,0x10
c000095d:	75 20                	jne    c000097f <simple_strtoul+0xa9>
c000095f:	be 10 00 00 00       	mov    esi,0x10
c0000964:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000967:	75 16                	jne    c000097f <simple_strtoul+0xa9>
c0000969:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000096d:	50                   	push   eax
c000096e:	e8 4f ff ff ff       	call   c00008c2 <tolower>
c0000973:	5d                   	pop    ebp
c0000974:	83 f8 78             	cmp    eax,0x78
c0000977:	74 03                	je     c000097c <simple_strtoul+0xa6>
c0000979:	41                   	inc    ecx
c000097a:	eb 03                	jmp    c000097f <simple_strtoul+0xa9>
c000097c:	83 c1 02             	add    ecx,0x2
c000097f:	31 ed                	xor    ebp,ebp
c0000981:	31 db                	xor    ebx,ebx
c0000983:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000098a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000098c:	84 d2                	test   dl,dl
c000098e:	74 27                	je     c00009b7 <simple_strtoul+0xe1>
c0000990:	0f b6 fa             	movzx  edi,dl
c0000993:	f6 87 a0 01 02 c0 04 	test   BYTE PTR [edi-0x3ffdfe60],0x4
c000099a:	74 05                	je     c00009a1 <simple_strtoul+0xcb>
c000099c:	83 ef 30             	sub    edi,0x30
c000099f:	eb 22                	jmp    c00009c3 <simple_strtoul+0xed>
c00009a1:	0f be d2             	movsx  edx,dl
c00009a4:	52                   	push   edx
c00009a5:	e8 04 ff ff ff       	call   c00008ae <toupper>
c00009aa:	0f b6 d0             	movzx  edx,al
c00009ad:	5f                   	pop    edi
c00009ae:	f6 82 a0 01 02 c0 01 	test   BYTE PTR [edx-0x3ffdfe60],0x1
c00009b5:	75 09                	jne    c00009c0 <simple_strtoul+0xea>
c00009b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009bc:	75 2d                	jne    c00009eb <simple_strtoul+0x115>
c00009be:	eb 59                	jmp    c0000a19 <simple_strtoul+0x143>
c00009c0:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c3:	39 f7                	cmp    edi,esi
c00009c5:	73 f0                	jae    c00009b7 <simple_strtoul+0xe1>
c00009c7:	89 f8                	mov    eax,edi
c00009c9:	31 d2                	xor    edx,edx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 d8                	cmp    eax,ebx
c00009d1:	72 0e                	jb     c00009e1 <simple_strtoul+0x10b>
c00009d3:	0f af de             	imul   ebx,esi
c00009d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009dd:	01 fb                	add    ebx,edi
c00009df:	eb 07                	jmp    c00009e8 <simple_strtoul+0x112>
c00009e1:	bd 01 00 00 00       	mov    ebp,0x1
c00009e6:	31 db                	xor    ebx,ebx
c00009e8:	41                   	inc    ecx
c00009e9:	eb 9f                	jmp    c000098a <simple_strtoul+0xb4>
c00009eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009ee:	09 d8                	or     eax,ebx
c00009f0:	75 21                	jne    c0000a13 <simple_strtoul+0x13d>
c00009f2:	eb 11                	jmp    c0000a05 <simple_strtoul+0x12f>
c00009f4:	31 db                	xor    ebx,ebx
c00009f6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009fb:	74 22                	je     c0000a1f <simple_strtoul+0x149>
c00009fd:	31 ed                	xor    ebp,ebp
c00009ff:	31 db                	xor    ebx,ebx
c0000a01:	85 c9                	test   ecx,ecx
c0000a03:	74 0e                	je     c0000a13 <simple_strtoul+0x13d>
c0000a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a0d:	31 db                	xor    ebx,ebx
c0000a0f:	89 38                	mov    DWORD PTR [eax],edi
c0000a11:	eb 06                	jmp    c0000a19 <simple_strtoul+0x143>
c0000a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a17:	89 08                	mov    DWORD PTR [eax],ecx
c0000a19:	4d                   	dec    ebp
c0000a1a:	75 03                	jne    c0000a1f <simple_strtoul+0x149>
c0000a1c:	83 cb ff             	or     ebx,0xffffffff
c0000a1f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a24:	75 02                	jne    c0000a28 <simple_strtoul+0x152>
c0000a26:	f7 db                	neg    ebx
c0000a28:	83 c4 08             	add    esp,0x8
c0000a2b:	89 d8                	mov    eax,ebx
c0000a2d:	5b                   	pop    ebx
c0000a2e:	5e                   	pop    esi
c0000a2f:	5f                   	pop    edi
c0000a30:	5d                   	pop    ebp
c0000a31:	c3                   	ret    

c0000a32 <largebin_index>:
c0000a32:	89 c2                	mov    edx,eax
c0000a34:	c1 ea 08             	shr    edx,0x8
c0000a37:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a3d:	77 10                	ja     c0000a4f <largebin_index+0x1d>
c0000a3f:	0f bd d2             	bsr    edx,edx
c0000a42:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a45:	d3 e8                	shr    eax,cl
c0000a47:	83 e0 03             	and    eax,0x3
c0000a4a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a4e:	c3                   	ret    
c0000a4f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a54:	c3                   	ret    

c0000a55 <malloc_init_state>:
c0000a55:	8d 50 34             	lea    edx,[eax+0x34]
c0000a58:	53                   	push   ebx
c0000a59:	89 d1                	mov    ecx,edx
c0000a5b:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a61:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a64:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a67:	83 c2 08             	add    edx,0x8
c0000a6a:	39 da                	cmp    edx,ebx
c0000a6c:	75 f3                	jne    c0000a61 <malloc_init_state+0xc>
c0000a6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a70:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a7a:	83 e2 03             	and    edx,0x3
c0000a7d:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a87:	83 ca 48             	or     edx,0x48
c0000a8a:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a94:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa7:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aaa:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab4:	5b                   	pop    ebx
c0000ab5:	c3                   	ret    

c0000ab6 <malloc_consolidate>:
c0000ab6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab8:	85 d2                	test   edx,edx
c0000aba:	0f 84 d8 00 00 00    	je     c0000b98 <malloc_consolidate+0xe2>
c0000ac0:	55                   	push   ebp
c0000ac1:	83 e2 fd             	and    edx,0xfffffffd
c0000ac4:	57                   	push   edi
c0000ac5:	8d 78 34             	lea    edi,[eax+0x34]
c0000ac8:	56                   	push   esi
c0000ac9:	89 c5                	mov    ebp,eax
c0000acb:	53                   	push   ebx
c0000acc:	83 ec 10             	sub    esp,0x10
c0000acf:	89 10                	mov    DWORD PTR [eax],edx
c0000ad1:	c1 ea 03             	shr    edx,0x3
c0000ad4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad8:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000adc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae3:	85 d2                	test   edx,edx
c0000ae5:	0f 84 98 00 00 00    	je     c0000b83 <malloc_consolidate+0xcd>
c0000aeb:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af2:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af5:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000afc:	89 f9                	mov    ecx,edi
c0000afe:	83 e1 fe             	and    ecx,0xfffffffe
c0000b01:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b04:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b07:	83 e3 fc             	and    ebx,0xfffffffc
c0000b0a:	83 e7 01             	and    edi,0x1
c0000b0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b10:	75 14                	jne    c0000b26 <malloc_consolidate+0x70>
c0000b12:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b14:	29 fa                	sub    edx,edi
c0000b16:	01 f9                	add    ecx,edi
c0000b18:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b1b:	89 fb                	mov    ebx,edi
c0000b1d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b20:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b23:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b26:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b29:	74 40                	je     c0000b6b <malloc_consolidate+0xb5>
c0000b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b2e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b31:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b35:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b38:	83 e7 01             	and    edi,0x1
c0000b3b:	75 0e                	jne    c0000b4b <malloc_consolidate+0x95>
c0000b3d:	01 d9                	add    ecx,ebx
c0000b3f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b42:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b45:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b48:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b4b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b4e:	89 ce                	mov    esi,ecx
c0000b50:	83 ce 01             	or     esi,0x1
c0000b53:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b56:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b59:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b5c:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b60:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b63:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b66:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b69:	eb 0c                	jmp    c0000b77 <malloc_consolidate+0xc1>
c0000b6b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b6e:	83 c9 01             	or     ecx,0x1
c0000b71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b7b:	85 d2                	test   edx,edx
c0000b7d:	0f 85 6f ff ff ff    	jne    c0000af2 <malloc_consolidate+0x3c>
c0000b83:	83 c5 04             	add    ebp,0x4
c0000b86:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b8a:	0f 85 50 ff ff ff    	jne    c0000ae0 <malloc_consolidate+0x2a>
c0000b90:	83 c4 10             	add    esp,0x10
c0000b93:	5b                   	pop    ebx
c0000b94:	5e                   	pop    esi
c0000b95:	5f                   	pop    edi
c0000b96:	5d                   	pop    ebp
c0000b97:	c3                   	ret    
c0000b98:	e9 b8 fe ff ff       	jmp    c0000a55 <malloc_init_state>

c0000b9d <dlfree>:
c0000b9d:	57                   	push   edi
c0000b9e:	56                   	push   esi
c0000b9f:	53                   	push   ebx
c0000ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba4:	85 db                	test   ebx,ebx
c0000ba6:	0f 84 e2 00 00 00    	je     c0000c8e <dlfree+0xf1>
c0000bac:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000baf:	8b 0d 20 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024120
c0000bb5:	89 f0                	mov    eax,esi
c0000bb7:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bba:	83 e0 fc             	and    eax,0xfffffffc
c0000bbd:	39 c1                	cmp    ecx,eax
c0000bbf:	72 24                	jb     c0000be5 <dlfree+0x48>
c0000bc1:	c1 e8 03             	shr    eax,0x3
c0000bc4:	83 c9 03             	or     ecx,0x3
c0000bc7:	83 e8 02             	sub    eax,0x2
c0000bca:	89 0d 20 41 02 c0    	mov    DWORD PTR ds:0xc0024120,ecx
c0000bd0:	8b 0c 85 24 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbedc]
c0000bd7:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd9:	89 14 85 24 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbedc],edx
c0000be0:	e9 a9 00 00 00       	jmp    c0000c8e <dlfree+0xf1>
c0000be5:	83 e6 02             	and    esi,0x2
c0000be8:	0f 85 a0 00 00 00    	jne    c0000c8e <dlfree+0xf1>
c0000bee:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf1:	83 c9 01             	or     ecx,0x1
c0000bf4:	89 0d 20 41 02 c0    	mov    DWORD PTR ds:0xc0024120,ecx
c0000bfa:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bfd:	83 e1 fc             	and    ecx,0xfffffffc
c0000c00:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c04:	75 13                	jne    c0000c19 <dlfree+0x7c>
c0000c06:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c09:	29 da                	sub    edx,ebx
c0000c0b:	01 d8                	add    eax,ebx
c0000c0d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c10:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c13:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c16:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c19:	39 35 4c 41 02 c0    	cmp    DWORD PTR ds:0xc002414c,esi
c0000c1f:	74 40                	je     c0000c61 <dlfree+0xc4>
c0000c21:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c25:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c28:	80 e3 01             	and    bl,0x1
c0000c2b:	75 0e                	jne    c0000c3b <dlfree+0x9e>
c0000c2d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c30:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c33:	01 c8                	add    eax,ecx
c0000c35:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c38:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c3b:	8b 0d 5c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002415c
c0000c41:	c7 42 0c 54 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024154
c0000c48:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c4b:	89 15 5c 41 02 c0    	mov    DWORD PTR ds:0xc002415c,edx
c0000c51:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c54:	89 c1                	mov    ecx,eax
c0000c56:	83 c9 01             	or     ecx,0x1
c0000c59:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c5c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5f:	eb 10                	jmp    c0000c71 <dlfree+0xd4>
c0000c61:	01 c8                	add    eax,ecx
c0000c63:	89 c1                	mov    ecx,eax
c0000c65:	83 c9 01             	or     ecx,0x1
c0000c68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c6b:	89 15 4c 41 02 c0    	mov    DWORD PTR ds:0xc002414c,edx
c0000c71:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c76:	76 16                	jbe    c0000c8e <dlfree+0xf1>
c0000c78:	f6 05 20 41 02 c0 02 	test   BYTE PTR ds:0xc0024120,0x2
c0000c7f:	74 0d                	je     c0000c8e <dlfree+0xf1>
c0000c81:	5b                   	pop    ebx
c0000c82:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0000c87:	5e                   	pop    esi
c0000c88:	5f                   	pop    edi
c0000c89:	e9 28 fe ff ff       	jmp    c0000ab6 <malloc_consolidate>
c0000c8e:	5b                   	pop    ebx
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	c3                   	ret    

c0000c92 <sYSMALLOc>:
c0000c92:	55                   	push   ebp
c0000c93:	57                   	push   edi
c0000c94:	56                   	push   esi
c0000c95:	53                   	push   ebx
c0000c96:	89 d3                	mov    ebx,edx
c0000c98:	83 ec 2c             	sub    esp,0x2c
c0000c9b:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ca1:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000ca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ca8:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000caf:	74 1f                	je     c0000cd0 <sYSMALLOc+0x3e>
c0000cb1:	89 d0                	mov    eax,edx
c0000cb3:	e8 fe fd ff ff       	call   c0000ab6 <malloc_consolidate>
c0000cb8:	83 ec 0c             	sub    esp,0xc
c0000cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cbf:	83 e8 07             	sub    eax,0x7
c0000cc2:	50                   	push   eax
c0000cc3:	e8 33 02 00 00       	call   c0000efb <dlmalloc>
c0000cc8:	83 c4 10             	add    esp,0x10
c0000ccb:	e9 23 02 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000cd0:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cd7:	83 c0 10             	add    eax,0x10
c0000cda:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ce0:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ce3:	01 c2                	add    edx,eax
c0000ce5:	83 e5 fc             	and    ebp,0xfffffffc
c0000ce8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf3:	74 02                	je     c0000cf7 <sYSMALLOc+0x65>
c0000cf5:	29 ea                	sub    edx,ebp
c0000cf7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000cfb:	f7 d9                	neg    ecx
c0000cfd:	21 ca                	and    edx,ecx
c0000cff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d07:	7f 07                	jg     c0000d10 <sYSMALLOc+0x7e>
c0000d09:	31 c0                	xor    eax,eax
c0000d0b:	e9 e3 01 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000d10:	83 ec 0c             	sub    esp,0xc
c0000d13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d17:	e8 05 b1 00 00       	call   c000be21 <sbrk>
c0000d1c:	83 c4 10             	add    esp,0x10
c0000d1f:	89 c6                	mov    esi,eax
c0000d21:	83 f8 ff             	cmp    eax,0xffffffff
c0000d24:	74 e3                	je     c0000d09 <sYSMALLOc+0x77>
c0000d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d2a:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d2d:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d33:	39 c2                	cmp    edx,eax
c0000d35:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d3b:	75 11                	jne    c0000d4e <sYSMALLOc+0xbc>
c0000d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d41:	01 e8                	add    eax,ebp
c0000d43:	83 c8 01             	or     eax,0x1
c0000d46:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d49:	e9 93 00 00 00       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000d4e:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d54:	a8 01                	test   al,0x1
c0000d56:	0f 84 73 01 00 00    	je     c0000ecf <sYSMALLOc+0x23d>
c0000d5c:	85 ed                	test   ebp,ebp
c0000d5e:	74 12                	je     c0000d72 <sYSMALLOc+0xe0>
c0000d60:	39 f2                	cmp    edx,esi
c0000d62:	76 0e                	jbe    c0000d72 <sYSMALLOc+0xe0>
c0000d64:	83 e0 fe             	and    eax,0xfffffffe
c0000d67:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d6d:	e9 5d 01 00 00       	jmp    c0000ecf <sYSMALLOc+0x23d>
c0000d72:	85 ed                	test   ebp,ebp
c0000d74:	74 0c                	je     c0000d82 <sYSMALLOc+0xf0>
c0000d76:	89 f0                	mov    eax,esi
c0000d78:	29 d0                	sub    eax,edx
c0000d7a:	01 c1                	add    ecx,eax
c0000d7c:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d82:	89 f2                	mov    edx,esi
c0000d84:	83 e2 07             	and    edx,0x7
c0000d87:	0f 84 b1 00 00 00    	je     c0000e3e <sYSMALLOc+0x1ac>
c0000d8d:	b8 08 00 00 00       	mov    eax,0x8
c0000d92:	29 d0                	sub    eax,edx
c0000d94:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000d97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d9f:	01 e8                	add    eax,ebp
c0000da1:	83 ec 0c             	sub    esp,0xc
c0000da4:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000da7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000dab:	01 f2                	add    edx,esi
c0000dad:	01 d1                	add    ecx,edx
c0000daf:	29 d0                	sub    eax,edx
c0000db1:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000db5:	01 c1                	add    ecx,eax
c0000db7:	51                   	push   ecx
c0000db8:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dbc:	e8 60 b0 00 00       	call   c000be21 <sbrk>
c0000dc1:	83 c4 10             	add    esp,0x10
c0000dc4:	83 f8 ff             	cmp    eax,0xffffffff
c0000dc7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dcb:	75 7c                	jne    c0000e49 <sYSMALLOc+0x1b7>
c0000dcd:	83 ec 0c             	sub    esp,0xc
c0000dd0:	6a 00                	push   0x0
c0000dd2:	e8 4a b0 00 00       	call   c000be21 <sbrk>
c0000dd7:	83 c4 10             	add    esp,0x10
c0000dda:	31 c9                	xor    ecx,ecx
c0000ddc:	83 f8 ff             	cmp    eax,0xffffffff
c0000ddf:	75 7e                	jne    c0000e5f <sYSMALLOc+0x1cd>
c0000de1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000de7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ded:	73 06                	jae    c0000df5 <sYSMALLOc+0x163>
c0000def:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfb:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e01:	73 06                	jae    c0000e09 <sYSMALLOc+0x177>
c0000e03:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e09:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e0f:	83 e2 fc             	and    edx,0xfffffffc
c0000e12:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e16:	0f 87 ed fe ff ff    	ja     c0000d09 <sYSMALLOc+0x77>
c0000e1c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e20:	29 fa                	sub    edx,edi
c0000e22:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e25:	83 ca 01             	or     edx,0x1
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	89 fb                	mov    ebx,edi
c0000e2d:	83 cb 01             	or     ebx,0x1
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e39:	e9 b5 00 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000e3e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e42:	31 c0                	xor    eax,eax
c0000e44:	e9 52 ff ff ff       	jmp    c0000d9b <sYSMALLOc+0x109>
c0000e49:	39 c6                	cmp    esi,eax
c0000e4b:	76 12                	jbe    c0000e5f <sYSMALLOc+0x1cd>
c0000e4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e51:	01 f0                	add    eax,esi
c0000e53:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e5a:	e9 7b ff ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000e5f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e63:	29 f0                	sub    eax,esi
c0000e65:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e68:	01 c8                	add    eax,ecx
c0000e6a:	83 c8 01             	or     eax,0x1
c0000e6d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e70:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e76:	85 ed                	test   ebp,ebp
c0000e78:	0f 84 63 ff ff ff    	je     c0000de1 <sYSMALLOc+0x14f>
c0000e7e:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e81:	83 e0 f8             	and    eax,0xfffffff8
c0000e84:	89 c2                	mov    edx,eax
c0000e86:	83 ca 01             	or     edx,0x1
c0000e89:	83 f8 0f             	cmp    eax,0xf
c0000e8c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e8f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e97:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e9f:	0f 86 3c ff ff ff    	jbe    c0000de1 <sYSMALLOc+0x14f>
c0000ea5:	83 ec 0c             	sub    esp,0xc
c0000ea8:	83 c7 08             	add    edi,0x8
c0000eab:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000eb1:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ebb:	57                   	push   edi
c0000ebc:	e8 dc fc ff ff       	call   c0000b9d <dlfree>
c0000ec1:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ec7:	83 c4 10             	add    esp,0x10
c0000eca:	e9 12 ff ff ff       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000ecf:	83 ec 0c             	sub    esp,0xc
c0000ed2:	6a 00                	push   0x0
c0000ed4:	e8 48 af 00 00       	call   c000be21 <sbrk>
c0000ed9:	89 c2                	mov    edx,eax
c0000edb:	29 f2                	sub    edx,esi
c0000edd:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000ee1:	83 c4 10             	add    esp,0x10
c0000ee4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000eea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000eee:	e9 e7 fe ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000ef3:	83 c4 2c             	add    esp,0x2c
c0000ef6:	5b                   	pop    ebx
c0000ef7:	5e                   	pop    esi
c0000ef8:	5f                   	pop    edi
c0000ef9:	5d                   	pop    ebp
c0000efa:	c3                   	ret    

c0000efb <dlmalloc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	83 ec 1c             	sub    esp,0x1c
c0000f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f06:	83 f8 df             	cmp    eax,0xffffffdf
c0000f09:	0f 87 70 03 00 00    	ja     c000127f <dlmalloc+0x384>
c0000f0f:	83 c0 0b             	add    eax,0xb
c0000f12:	be 10 00 00 00       	mov    esi,0x10
c0000f17:	83 f8 0f             	cmp    eax,0xf
c0000f1a:	76 05                	jbe    c0000f21 <dlmalloc+0x26>
c0000f1c:	83 e0 f8             	and    eax,0xfffffff8
c0000f1f:	89 c6                	mov    esi,eax
c0000f21:	8b 3d 20 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024120
c0000f27:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f2d:	75 17                	jne    c0000f46 <dlmalloc+0x4b>
c0000f2f:	85 ff                	test   edi,edi
c0000f31:	0f 85 05 03 00 00    	jne    c000123c <dlmalloc+0x341>
c0000f37:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0000f3c:	e8 75 fb ff ff       	call   c0000ab6 <malloc_consolidate>
c0000f41:	e9 f6 02 00 00       	jmp    c000123c <dlmalloc+0x341>
c0000f46:	39 f7                	cmp    edi,esi
c0000f48:	72 1f                	jb     c0000f69 <dlmalloc+0x6e>
c0000f4a:	89 f2                	mov    edx,esi
c0000f4c:	c1 ea 03             	shr    edx,0x3
c0000f4f:	83 ea 02             	sub    edx,0x2
c0000f52:	8b 04 95 24 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbedc]
c0000f59:	85 c0                	test   eax,eax
c0000f5b:	74 0c                	je     c0000f69 <dlmalloc+0x6e>
c0000f5d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f60:	89 0c 95 24 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbedc],ecx
c0000f67:	eb 30                	jmp    c0000f99 <dlmalloc+0x9e>
c0000f69:	89 f0                	mov    eax,esi
c0000f6b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f71:	77 2e                	ja     c0000fa1 <dlmalloc+0xa6>
c0000f73:	c1 e8 03             	shr    eax,0x3
c0000f76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7a:	8d 14 c5 54 41 02 c0 	lea    edx,[eax*8-0x3ffdbeac]
c0000f81:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f84:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f87:	39 c3                	cmp    ebx,eax
c0000f89:	74 2e                	je     c0000fb9 <dlmalloc+0xbe>
c0000f8b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f8e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f96:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f99:	83 c0 08             	add    eax,0x8
c0000f9c:	e9 e0 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0000fa1:	e8 8c fa ff ff       	call   c0000a32 <largebin_index>
c0000fa6:	83 e7 02             	and    edi,0x2
c0000fa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fad:	74 0a                	je     c0000fb9 <dlmalloc+0xbe>
c0000faf:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0000fb4:	e8 fd fa ff ff       	call   c0000ab6 <malloc_consolidate>
c0000fb9:	8d 46 10             	lea    eax,[esi+0x10]
c0000fbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc0:	8b 1d 60 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024160
c0000fc6:	81 fb 54 41 02 c0    	cmp    ebx,0xc0024154
c0000fcc:	0f 84 13 01 00 00    	je     c00010e5 <dlmalloc+0x1ea>
c0000fd2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd8:	83 e7 fc             	and    edi,0xfffffffc
c0000fdb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe1:	77 4c                	ja     c000102f <dlmalloc+0x134>
c0000fe3:	3d 54 41 02 c0       	cmp    eax,0xc0024154
c0000fe8:	75 45                	jne    c000102f <dlmalloc+0x134>
c0000fea:	39 1d 50 41 02 c0    	cmp    DWORD PTR ds:0xc0024150,ebx
c0000ff0:	75 3d                	jne    c000102f <dlmalloc+0x134>
c0000ff2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff6:	73 37                	jae    c000102f <dlmalloc+0x134>
c0000ff8:	89 fa                	mov    edx,edi
c0000ffa:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ffd:	29 f2                	sub    edx,esi
c0000fff:	83 ce 01             	or     esi,0x1
c0001002:	89 d1                	mov    ecx,edx
c0001004:	a3 5c 41 02 c0       	mov    ds:0xc002415c,eax
c0001009:	83 c9 01             	or     ecx,0x1
c000100c:	a3 60 41 02 c0       	mov    ds:0xc0024160,eax
c0001011:	a3 50 41 02 c0       	mov    ds:0xc0024150,eax
c0001016:	c7 40 08 54 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024154
c000101d:	c7 40 0c 54 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024154
c0001024:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001027:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000102d:	eb 15                	jmp    c0001044 <dlmalloc+0x149>
c000102f:	a3 60 41 02 c0       	mov    ds:0xc0024160,eax
c0001034:	39 fe                	cmp    esi,edi
c0001036:	c7 40 08 54 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024154
c000103d:	75 0d                	jne    c000104c <dlmalloc+0x151>
c000103f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001044:	8d 43 08             	lea    eax,[ebx+0x8]
c0001047:	e9 35 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000104c:	89 f8                	mov    eax,edi
c000104e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001054:	77 19                	ja     c000106f <dlmalloc+0x174>
c0001056:	c1 e8 03             	shr    eax,0x3
c0001059:	8d 14 00             	lea    edx,[eax+eax*1]
c000105c:	83 c2 0d             	add    edx,0xd
c000105f:	8d 2c 95 18 41 02 c0 	lea    ebp,[edx*4-0x3ffdbee8]
c0001066:	8b 14 95 20 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbee0]
c000106d:	eb 46                	jmp    c00010b5 <dlmalloc+0x1ba>
c000106f:	e8 be f9 ff ff       	call   c0000a32 <largebin_index>
c0001074:	8d 14 00             	lea    edx,[eax+eax*1]
c0001077:	83 c2 0d             	add    edx,0xd
c000107a:	8d 0c 95 20 41 02 c0 	lea    ecx,[edx*4-0x3ffdbee0]
c0001081:	8b 14 95 20 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbee0]
c0001088:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000108b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000108f:	89 d5                	mov    ebp,edx
c0001091:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001095:	74 1e                	je     c00010b5 <dlmalloc+0x1ba>
c0001097:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000109d:	77 12                	ja     c00010b1 <dlmalloc+0x1b6>
c000109f:	83 cf 01             	or     edi,0x1
c00010a2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a5:	76 05                	jbe    c00010ac <dlmalloc+0x1b1>
c00010a7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010aa:	eb f6                	jmp    c00010a2 <dlmalloc+0x1a7>
c00010ac:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010af:	eb 04                	jmp    c00010b5 <dlmalloc+0x1ba>
c00010b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b5:	89 c7                	mov    edi,eax
c00010b7:	88 c1                	mov    cl,al
c00010b9:	c1 ff 05             	sar    edi,0x5
c00010bc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c0:	bf 01 00 00 00       	mov    edi,0x1
c00010c5:	d3 e7                	shl    edi,cl
c00010c7:	89 f8                	mov    eax,edi
c00010c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cd:	09 04 bd 54 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbac],eax
c00010d4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010da:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010dd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e0:	e9 db fe ff ff       	jmp    c0000fc0 <dlmalloc+0xc5>
c00010e5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010eb:	76 78                	jbe    c0001165 <dlmalloc+0x26a>
c00010ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f1:	8d 04 c5 54 41 02 c0 	lea    eax,[eax*8-0x3ffdbeac]
c00010f8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010fe:	39 ca                	cmp    edx,ecx
c0001100:	74 63                	je     c0001165 <dlmalloc+0x26a>
c0001102:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001105:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001108:	83 e3 fc             	and    ebx,0xfffffffc
c000110b:	39 de                	cmp    esi,ebx
c000110d:	77 52                	ja     c0001161 <dlmalloc+0x266>
c000110f:	89 df                	mov    edi,ebx
c0001111:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001114:	29 f7                	sub    edi,esi
c0001116:	01 d3                	add    ebx,edx
c0001118:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111b:	83 ff 0f             	cmp    edi,0xf
c000111e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001121:	8d 42 08             	lea    eax,[edx+0x8]
c0001124:	77 09                	ja     c000112f <dlmalloc+0x234>
c0001126:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112a:	e9 52 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000112f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001132:	83 ce 01             	or     esi,0x1
c0001135:	89 0d 5c 41 02 c0    	mov    DWORD PTR ds:0xc002415c,ecx
c000113b:	89 0d 60 41 02 c0    	mov    DWORD PTR ds:0xc0024160,ecx
c0001141:	c7 41 08 54 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024154
c0001148:	c7 41 0c 54 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024154
c000114f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001152:	89 fa                	mov    edx,edi
c0001154:	83 ca 01             	or     edx,0x1
c0001157:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115a:	89 3b                	mov    DWORD PTR [ebx],edi
c000115c:	e9 20 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0001161:	89 c2                	mov    edx,eax
c0001163:	eb 99                	jmp    c00010fe <dlmalloc+0x203>
c0001165:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001169:	b8 01 00 00 00       	mov    eax,0x1
c000116e:	41                   	inc    ecx
c000116f:	89 cb                	mov    ebx,ecx
c0001171:	c1 eb 05             	shr    ebx,0x5
c0001174:	8d 14 cd 4c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbeb4]
c000117b:	d3 e0                	shl    eax,cl
c000117d:	8b 3c 9d 54 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbac]
c0001184:	39 f8                	cmp    eax,edi
c0001186:	77 04                	ja     c000118c <dlmalloc+0x291>
c0001188:	85 c0                	test   eax,eax
c000118a:	75 26                	jne    c00011b2 <dlmalloc+0x2b7>
c000118c:	43                   	inc    ebx
c000118d:	83 fb 02             	cmp    ebx,0x2
c0001190:	0f 87 a6 00 00 00    	ja     c000123c <dlmalloc+0x341>
c0001196:	8b 3c 9d 54 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbac]
c000119d:	85 ff                	test   edi,edi
c000119f:	74 eb                	je     c000118c <dlmalloc+0x291>
c00011a1:	89 d8                	mov    eax,ebx
c00011a3:	c1 e0 06             	shl    eax,0x6
c00011a6:	8d 14 85 4c 41 02 c0 	lea    edx,[eax*4-0x3ffdbeb4]
c00011ad:	b8 01 00 00 00       	mov    eax,0x1
c00011b2:	85 f8                	test   eax,edi
c00011b4:	75 07                	jne    c00011bd <dlmalloc+0x2c2>
c00011b6:	83 c2 08             	add    edx,0x8
c00011b9:	01 c0                	add    eax,eax
c00011bb:	eb f5                	jmp    c00011b2 <dlmalloc+0x2b7>
c00011bd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c0:	39 ca                	cmp    edx,ecx
c00011c2:	75 14                	jne    c00011d8 <dlmalloc+0x2dd>
c00011c4:	89 c1                	mov    ecx,eax
c00011c6:	83 c2 08             	add    edx,0x8
c00011c9:	f7 d1                	not    ecx
c00011cb:	21 cf                	and    edi,ecx
c00011cd:	01 c0                	add    eax,eax
c00011cf:	89 3c 9d 54 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbac],edi
c00011d6:	eb ac                	jmp    c0001184 <dlmalloc+0x289>
c00011d8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011db:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011de:	83 e0 fc             	and    eax,0xfffffffc
c00011e1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e4:	89 c3                	mov    ebx,eax
c00011e6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e9:	29 f3                	sub    ebx,esi
c00011eb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ee:	83 fb 0f             	cmp    ebx,0xf
c00011f1:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f4:	77 09                	ja     c00011ff <dlmalloc+0x304>
c00011f6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011fa:	e9 82 00 00 00       	jmp    c0001281 <dlmalloc+0x386>
c00011ff:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001202:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001208:	89 3d 5c 41 02 c0    	mov    DWORD PTR ds:0xc002415c,edi
c000120e:	89 3d 60 41 02 c0    	mov    DWORD PTR ds:0xc0024160,edi
c0001214:	c7 47 08 54 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024154
c000121b:	c7 47 0c 54 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024154
c0001222:	77 06                	ja     c000122a <dlmalloc+0x32f>
c0001224:	89 3d 50 41 02 c0    	mov    DWORD PTR ds:0xc0024150,edi
c000122a:	83 ce 01             	or     esi,0x1
c000122d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001230:	89 d9                	mov    ecx,ebx
c0001232:	83 c9 01             	or     ecx,0x1
c0001235:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001238:	89 1a                	mov    DWORD PTR [edx],ebx
c000123a:	eb 45                	jmp    c0001281 <dlmalloc+0x386>
c000123c:	a1 4c 41 02 c0       	mov    eax,ds:0xc002414c
c0001241:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001244:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001247:	83 e2 fc             	and    edx,0xfffffffc
c000124a:	39 d1                	cmp    ecx,edx
c000124c:	77 1e                	ja     c000126c <dlmalloc+0x371>
c000124e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001251:	89 f3                	mov    ebx,esi
c0001253:	29 f2                	sub    edx,esi
c0001255:	83 cb 01             	or     ebx,0x1
c0001258:	83 ca 01             	or     edx,0x1
c000125b:	89 0d 4c 41 02 c0    	mov    DWORD PTR ds:0xc002414c,ecx
c0001261:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001264:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001267:	e9 2d fd ff ff       	jmp    c0000f99 <dlmalloc+0x9e>
c000126c:	83 c4 1c             	add    esp,0x1c
c000126f:	89 f0                	mov    eax,esi
c0001271:	ba 20 41 02 c0       	mov    edx,0xc0024120
c0001276:	5b                   	pop    ebx
c0001277:	5e                   	pop    esi
c0001278:	5f                   	pop    edi
c0001279:	5d                   	pop    ebp
c000127a:	e9 13 fa ff ff       	jmp    c0000c92 <sYSMALLOc>
c000127f:	31 c0                	xor    eax,eax
c0001281:	83 c4 1c             	add    esp,0x1c
c0001284:	5b                   	pop    ebx
c0001285:	5e                   	pop    esi
c0001286:	5f                   	pop    edi
c0001287:	5d                   	pop    ebp
c0001288:	c3                   	ret    

c0001289 <iALLOc>:
c0001289:	55                   	push   ebp
c000128a:	89 c5                	mov    ebp,eax
c000128c:	57                   	push   edi
c000128d:	56                   	push   esi
c000128e:	53                   	push   ebx
c000128f:	83 ec 2c             	sub    esp,0x2c
c0001292:	83 3d 20 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024120,0x0
c0001299:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a5:	75 12                	jne    c00012b9 <iALLOc+0x30>
c00012a7:	b8 20 41 02 c0       	mov    eax,0xc0024120
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	e8 01 f8 ff ff       	call   c0000ab6 <malloc_consolidate>
c00012b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012be:	74 12                	je     c00012d2 <iALLOc+0x49>
c00012c0:	85 ed                	test   ebp,ebp
c00012c2:	0f 84 64 01 00 00    	je     c000142c <iALLOc+0x1a3>
c00012c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d0:	eb 33                	jmp    c0001305 <iALLOc+0x7c>
c00012d2:	85 ed                	test   ebp,ebp
c00012d4:	75 14                	jne    c00012ea <iALLOc+0x61>
c00012d6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012de:	83 c4 2c             	add    esp,0x2c
c00012e1:	5b                   	pop    ebx
c00012e2:	5e                   	pop    esi
c00012e3:	5f                   	pop    edi
c00012e4:	5d                   	pop    ebp
c00012e5:	e9 11 fc ff ff       	jmp    c0000efb <dlmalloc>
c00012ea:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f9:	83 f8 0f             	cmp    eax,0xf
c00012fc:	76 07                	jbe    c0001305 <iALLOc+0x7c>
c00012fe:	83 e0 f8             	and    eax,0xfffffff8
c0001301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001305:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130a:	75 09                	jne    c0001315 <iALLOc+0x8c>
c000130c:	89 d0                	mov    eax,edx
c000130e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001311:	31 f6                	xor    esi,esi
c0001313:	eb 3b                	jmp    c0001350 <iALLOc+0xc7>
c0001315:	8b 02                	mov    eax,DWORD PTR [edx]
c0001317:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000131f:	83 c0 0b             	add    eax,0xb
c0001322:	83 f8 0f             	cmp    eax,0xf
c0001325:	76 07                	jbe    c000132e <iALLOc+0xa5>
c0001327:	83 e0 f8             	and    eax,0xfffffff8
c000132a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000132e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001332:	0f af f5             	imul   esi,ebp
c0001335:	eb 25                	jmp    c000135c <iALLOc+0xd3>
c0001337:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001339:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000133c:	bb 10 00 00 00       	mov    ebx,0x10
c0001341:	83 f9 0f             	cmp    ecx,0xf
c0001344:	76 05                	jbe    c000134b <iALLOc+0xc2>
c0001346:	83 e1 f8             	and    ecx,0xfffffff8
c0001349:	89 cb                	mov    ebx,ecx
c000134b:	01 de                	add    esi,ebx
c000134d:	83 c0 04             	add    eax,0x4
c0001350:	39 c7                	cmp    edi,eax
c0001352:	75 e3                	jne    c0001337 <iALLOc+0xae>
c0001354:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000135c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001360:	83 ec 0c             	sub    esp,0xc
c0001363:	8b 1d 74 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024474
c0001369:	c7 05 74 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024474,0x0
c0001373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001377:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000137b:	50                   	push   eax
c000137c:	e8 7a fb ff ff       	call   c0000efb <dlmalloc>
c0001381:	83 c4 10             	add    esp,0x10
c0001384:	89 1d 74 44 02 c0    	mov    DWORD PTR ds:0xc0024474,ebx
c000138a:	85 c0                	test   eax,eax
c000138c:	0f 84 92 00 00 00    	je     c0001424 <iALLOc+0x19b>
c0001392:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001395:	8d 78 f8             	lea    edi,[eax-0x8]
c0001398:	83 e3 fc             	and    ebx,0xfffffffc
c000139b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000139f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a4:	74 1e                	je     c00013c4 <iALLOc+0x13b>
c00013a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013aa:	89 d9                	mov    ecx,ebx
c00013ac:	52                   	push   edx
c00013ad:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b1:	83 e9 04             	sub    ecx,0x4
c00013b4:	51                   	push   ecx
c00013b5:	6a 00                	push   0x0
c00013b7:	50                   	push   eax
c00013b8:	e8 fd f2 ff ff       	call   c00006ba <memset>
c00013bd:	83 c4 10             	add    esp,0x10
c00013c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c9:	75 14                	jne    c00013df <iALLOc+0x156>
c00013cb:	8d 04 37             	lea    eax,[edi+esi*1]
c00013ce:	29 f3                	sub    ebx,esi
c00013d0:	83 cb 01             	or     ebx,0x1
c00013d3:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013dd:	89 f3                	mov    ebx,esi
c00013df:	31 c0                	xor    eax,eax
c00013e1:	4d                   	dec    ebp
c00013e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e9:	39 c5                	cmp    ebp,eax
c00013eb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ee:	74 2c                	je     c000141c <iALLOc+0x193>
c00013f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f4:	85 c9                	test   ecx,ecx
c00013f6:	75 15                	jne    c000140d <iALLOc+0x184>
c00013f8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013fb:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013fe:	b9 10 00 00 00       	mov    ecx,0x10
c0001403:	83 fe 0f             	cmp    esi,0xf
c0001406:	76 05                	jbe    c000140d <iALLOc+0x184>
c0001408:	83 e6 f8             	and    esi,0xfffffff8
c000140b:	89 f1                	mov    ecx,esi
c000140d:	89 ce                	mov    esi,ecx
c000140f:	29 cb                	sub    ebx,ecx
c0001411:	83 ce 01             	or     esi,0x1
c0001414:	40                   	inc    eax
c0001415:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001418:	01 cf                	add    edi,ecx
c000141a:	eb c6                	jmp    c00013e2 <iALLOc+0x159>
c000141c:	83 cb 01             	or     ebx,0x1
c000141f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001422:	eb 08                	jmp    c000142c <iALLOc+0x1a3>
c0001424:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000142c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001430:	83 c4 2c             	add    esp,0x2c
c0001433:	5b                   	pop    ebx
c0001434:	5e                   	pop    esi
c0001435:	5f                   	pop    edi
c0001436:	5d                   	pop    ebp
c0001437:	c3                   	ret    

c0001438 <dlrealloc>:
c0001438:	55                   	push   ebp
c0001439:	57                   	push   edi
c000143a:	56                   	push   esi
c000143b:	53                   	push   ebx
c000143c:	83 ec 1c             	sub    esp,0x1c
c000143f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001443:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001447:	85 db                	test   ebx,ebx
c0001449:	75 10                	jne    c000145b <dlrealloc+0x23>
c000144b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000144f:	83 c4 1c             	add    esp,0x1c
c0001452:	5b                   	pop    ebx
c0001453:	5e                   	pop    esi
c0001454:	5f                   	pop    edi
c0001455:	5d                   	pop    ebp
c0001456:	e9 a0 fa ff ff       	jmp    c0000efb <dlmalloc>
c000145b:	83 f8 df             	cmp    eax,0xffffffdf
c000145e:	76 07                	jbe    c0001467 <dlrealloc+0x2f>
c0001460:	31 db                	xor    ebx,ebx
c0001462:	e9 7c 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c0001467:	83 c0 0b             	add    eax,0xb
c000146a:	bf 10 00 00 00       	mov    edi,0x10
c000146f:	83 f8 0f             	cmp    eax,0xf
c0001472:	76 05                	jbe    c0001479 <dlrealloc+0x41>
c0001474:	83 e0 f8             	and    eax,0xfffffff8
c0001477:	89 c7                	mov    edi,eax
c0001479:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000147c:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000147f:	89 c6                	mov    esi,eax
c0001481:	83 e6 fc             	and    esi,0xfffffffc
c0001484:	a8 02                	test   al,0x2
c0001486:	75 d8                	jne    c0001460 <dlrealloc+0x28>
c0001488:	39 f7                	cmp    edi,esi
c000148a:	0f 86 15 01 00 00    	jbe    c00015a5 <dlrealloc+0x16d>
c0001490:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001494:	39 15 4c 41 02 c0    	cmp    DWORD PTR ds:0xc002414c,edx
c000149a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149d:	75 33                	jne    c00014d2 <dlrealloc+0x9a>
c000149f:	83 e1 fc             	and    ecx,0xfffffffc
c00014a2:	01 f1                	add    ecx,esi
c00014a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a8:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014ab:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014af:	77 49                	ja     c00014fa <dlrealloc+0xc2>
c00014b1:	83 e0 01             	and    eax,0x1
c00014b4:	01 fd                	add    ebp,edi
c00014b6:	09 f8                	or     eax,edi
c00014b8:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014bf:	29 f8                	sub    eax,edi
c00014c1:	89 2d 4c 41 02 c0    	mov    DWORD PTR ds:0xc002414c,ebp
c00014c7:	83 c8 01             	or     eax,0x1
c00014ca:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014cd:	e9 11 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c00014d2:	89 c8                	mov    eax,ecx
c00014d4:	83 e0 fe             	and    eax,0xfffffffe
c00014d7:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014dc:	75 1c                	jne    c00014fa <dlrealloc+0xc2>
c00014de:	83 e1 fc             	and    ecx,0xfffffffc
c00014e1:	01 f1                	add    ecx,esi
c00014e3:	39 cf                	cmp    edi,ecx
c00014e5:	77 13                	ja     c00014fa <dlrealloc+0xc2>
c00014e7:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ea:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ed:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f0:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f3:	89 ce                	mov    esi,ecx
c00014f5:	e9 ab 00 00 00       	jmp    c00015a5 <dlrealloc+0x16d>
c00014fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014fe:	83 ec 0c             	sub    esp,0xc
c0001501:	8d 47 f9             	lea    eax,[edi-0x7]
c0001504:	50                   	push   eax
c0001505:	e8 f1 f9 ff ff       	call   c0000efb <dlmalloc>
c000150a:	83 c4 10             	add    esp,0x10
c000150d:	89 c1                	mov    ecx,eax
c000150f:	85 c0                	test   eax,eax
c0001511:	0f 84 49 ff ff ff    	je     c0001460 <dlrealloc+0x28>
c0001517:	8d 40 f8             	lea    eax,[eax-0x8]
c000151a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000151e:	39 c2                	cmp    edx,eax
c0001520:	75 0a                	jne    c000152c <dlrealloc+0xf4>
c0001522:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001525:	83 e0 fc             	and    eax,0xfffffffc
c0001528:	01 c6                	add    esi,eax
c000152a:	eb 79                	jmp    c00015a5 <dlrealloc+0x16d>
c000152c:	83 ee 04             	sub    esi,0x4
c000152f:	83 fe 27             	cmp    esi,0x27
c0001532:	76 16                	jbe    c000154a <dlrealloc+0x112>
c0001534:	50                   	push   eax
c0001535:	56                   	push   esi
c0001536:	53                   	push   ebx
c0001537:	51                   	push   ecx
c0001538:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000153c:	e8 43 f1 ff ff       	call   c0000684 <memcpy>
c0001541:	83 c4 10             	add    esp,0x10
c0001544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001548:	eb 43                	jmp    c000158d <dlrealloc+0x155>
c000154a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000154c:	83 fe 13             	cmp    esi,0x13
c000154f:	89 01                	mov    DWORD PTR [ecx],eax
c0001551:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001554:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001557:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000155d:	76 2e                	jbe    c000158d <dlrealloc+0x155>
c000155f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001562:	83 fe 1b             	cmp    esi,0x1b
c0001565:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000156b:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000156e:	76 1d                	jbe    c000158d <dlrealloc+0x155>
c0001570:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001573:	83 fe 23             	cmp    esi,0x23
c0001576:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001579:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000157c:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000157f:	76 0c                	jbe    c000158d <dlrealloc+0x155>
c0001581:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001584:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001587:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158a:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000158d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	53                   	push   ebx
c0001595:	e8 03 f6 ff ff       	call   c0000b9d <dlfree>
c000159a:	83 c4 10             	add    esp,0x10
c000159d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a1:	89 cb                	mov    ebx,ecx
c00015a3:	eb 3e                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015a5:	89 f2                	mov    edx,esi
c00015a7:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015aa:	29 fa                	sub    edx,edi
c00015ac:	83 e1 01             	and    ecx,0x1
c00015af:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b3:	83 fa 0f             	cmp    edx,0xf
c00015b6:	77 0b                	ja     c00015c3 <dlrealloc+0x18b>
c00015b8:	09 ce                	or     esi,ecx
c00015ba:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c1:	eb 20                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015c3:	01 fd                	add    ebp,edi
c00015c5:	83 ca 01             	or     edx,0x1
c00015c8:	09 cf                	or     edi,ecx
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d7:	83 c5 08             	add    ebp,0x8
c00015da:	55                   	push   ebp
c00015db:	e8 bd f5 ff ff       	call   c0000b9d <dlfree>
c00015e0:	83 c4 10             	add    esp,0x10
c00015e3:	83 c4 1c             	add    esp,0x1c
c00015e6:	89 d8                	mov    eax,ebx
c00015e8:	5b                   	pop    ebx
c00015e9:	5e                   	pop    esi
c00015ea:	5f                   	pop    edi
c00015eb:	5d                   	pop    ebp
c00015ec:	c3                   	ret    

c00015ed <dlmemalign>:
c00015ed:	55                   	push   ebp
c00015ee:	57                   	push   edi
c00015ef:	56                   	push   esi
c00015f0:	53                   	push   ebx
c00015f1:	83 ec 0c             	sub    esp,0xc
c00015f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015fc:	83 fa 08             	cmp    edx,0x8
c00015ff:	77 10                	ja     c0001611 <dlmemalign+0x24>
c0001601:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001605:	83 c4 0c             	add    esp,0xc
c0001608:	5b                   	pop    ebx
c0001609:	5e                   	pop    esi
c000160a:	5f                   	pop    edi
c000160b:	5d                   	pop    ebp
c000160c:	e9 ea f8 ff ff       	jmp    c0000efb <dlmalloc>
c0001611:	bf 10 00 00 00       	mov    edi,0x10
c0001616:	83 fa 0f             	cmp    edx,0xf
c0001619:	76 13                	jbe    c000162e <dlmemalign+0x41>
c000161b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000161e:	85 d1                	test   ecx,edx
c0001620:	75 04                	jne    c0001626 <dlmemalign+0x39>
c0001622:	89 d7                	mov    edi,edx
c0001624:	eb 08                	jmp    c000162e <dlmemalign+0x41>
c0001626:	39 d7                	cmp    edi,edx
c0001628:	73 04                	jae    c000162e <dlmemalign+0x41>
c000162a:	01 ff                	add    edi,edi
c000162c:	eb f8                	jmp    c0001626 <dlmemalign+0x39>
c000162e:	83 f8 df             	cmp    eax,0xffffffdf
c0001631:	76 07                	jbe    c000163a <dlmemalign+0x4d>
c0001633:	31 c0                	xor    eax,eax
c0001635:	e9 ce 00 00 00       	jmp    c0001708 <dlmemalign+0x11b>
c000163a:	83 c0 0b             	add    eax,0xb
c000163d:	bd 10 00 00 00       	mov    ebp,0x10
c0001642:	83 f8 0f             	cmp    eax,0xf
c0001645:	76 05                	jbe    c000164c <dlmemalign+0x5f>
c0001647:	83 e0 f8             	and    eax,0xfffffff8
c000164a:	89 c5                	mov    ebp,eax
c000164c:	83 ec 0c             	sub    esp,0xc
c000164f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001653:	50                   	push   eax
c0001654:	e8 a2 f8 ff ff       	call   c0000efb <dlmalloc>
c0001659:	83 c4 10             	add    esp,0x10
c000165c:	89 c1                	mov    ecx,eax
c000165e:	85 c0                	test   eax,eax
c0001660:	74 d1                	je     c0001633 <dlmemalign+0x46>
c0001662:	31 d2                	xor    edx,edx
c0001664:	8d 70 f8             	lea    esi,[eax-0x8]
c0001667:	f7 f7                	div    edi
c0001669:	85 d2                	test   edx,edx
c000166b:	74 62                	je     c00016cf <dlmemalign+0xe2>
c000166d:	89 f8                	mov    eax,edi
c000166f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001673:	f7 d8                	neg    eax
c0001675:	21 c3                	and    ebx,eax
c0001677:	83 eb 08             	sub    ebx,0x8
c000167a:	89 d8                	mov    eax,ebx
c000167c:	29 f0                	sub    eax,esi
c000167e:	83 f8 0f             	cmp    eax,0xf
c0001681:	77 02                	ja     c0001685 <dlmemalign+0x98>
c0001683:	01 fb                	add    ebx,edi
c0001685:	89 d8                	mov    eax,ebx
c0001687:	29 f0                	sub    eax,esi
c0001689:	89 c6                	mov    esi,eax
c000168b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000168e:	89 c2                	mov    edx,eax
c0001690:	83 e2 fc             	and    edx,0xfffffffc
c0001693:	29 f2                	sub    edx,esi
c0001695:	a8 02                	test   al,0x2
c0001697:	74 10                	je     c00016a9 <dlmemalign+0xbc>
c0001699:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000169c:	83 ca 02             	or     edx,0x2
c000169f:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a2:	89 33                	mov    DWORD PTR [ebx],esi
c00016a4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a7:	eb 5f                	jmp    c0001708 <dlmemalign+0x11b>
c00016a9:	89 d0                	mov    eax,edx
c00016ab:	83 ec 0c             	sub    esp,0xc
c00016ae:	83 c8 01             	or     eax,0x1
c00016b1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b4:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016bc:	83 e0 01             	and    eax,0x1
c00016bf:	09 f0                	or     eax,esi
c00016c1:	89 de                	mov    esi,ebx
c00016c3:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c6:	51                   	push   ecx
c00016c7:	e8 d1 f4 ff ff       	call   c0000b9d <dlfree>
c00016cc:	83 c4 10             	add    esp,0x10
c00016cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d2:	a8 02                	test   al,0x2
c00016d4:	75 2f                	jne    c0001705 <dlmemalign+0x118>
c00016d6:	83 e0 fc             	and    eax,0xfffffffc
c00016d9:	8d 55 10             	lea    edx,[ebp+0x10]
c00016dc:	39 c2                	cmp    edx,eax
c00016de:	73 25                	jae    c0001705 <dlmemalign+0x118>
c00016e0:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e3:	29 e8                	sub    eax,ebp
c00016e5:	83 c8 01             	or     eax,0x1
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016ee:	83 c2 08             	add    edx,0x8
c00016f1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f4:	83 e0 01             	and    eax,0x1
c00016f7:	09 c5                	or     ebp,eax
c00016f9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016fc:	52                   	push   edx
c00016fd:	e8 9b f4 ff ff       	call   c0000b9d <dlfree>
c0001702:	83 c4 10             	add    esp,0x10
c0001705:	8d 46 08             	lea    eax,[esi+0x8]
c0001708:	83 c4 0c             	add    esp,0xc
c000170b:	5b                   	pop    ebx
c000170c:	5e                   	pop    esi
c000170d:	5f                   	pop    edi
c000170e:	5d                   	pop    ebp
c000170f:	c3                   	ret    

c0001710 <dlcalloc>:
c0001710:	53                   	push   ebx
c0001711:	83 ec 14             	sub    esp,0x14
c0001714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001718:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000171d:	50                   	push   eax
c000171e:	e8 d8 f7 ff ff       	call   c0000efb <dlmalloc>
c0001723:	83 c4 10             	add    esp,0x10
c0001726:	89 c3                	mov    ebx,eax
c0001728:	85 c0                	test   eax,eax
c000172a:	74 77                	je     c00017a3 <dlcalloc+0x93>
c000172c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000172f:	89 d0                	mov    eax,edx
c0001731:	83 e0 fc             	and    eax,0xfffffffc
c0001734:	80 e2 02             	and    dl,0x2
c0001737:	75 5a                	jne    c0001793 <dlcalloc+0x83>
c0001739:	83 e8 04             	sub    eax,0x4
c000173c:	83 f8 27             	cmp    eax,0x27
c000173f:	76 03                	jbe    c0001744 <dlcalloc+0x34>
c0001741:	51                   	push   ecx
c0001742:	eb 53                	jmp    c0001797 <dlcalloc+0x87>
c0001744:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001751:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001758:	83 f8 13             	cmp    eax,0x13
c000175b:	76 46                	jbe    c00017a3 <dlcalloc+0x93>
c000175d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001764:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000176b:	83 f8 1b             	cmp    eax,0x1b
c000176e:	76 33                	jbe    c00017a3 <dlcalloc+0x93>
c0001770:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001777:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000177e:	83 f8 23             	cmp    eax,0x23
c0001781:	76 20                	jbe    c00017a3 <dlcalloc+0x93>
c0001783:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001791:	eb 10                	jmp    c00017a3 <dlcalloc+0x93>
c0001793:	83 e8 08             	sub    eax,0x8
c0001796:	52                   	push   edx
c0001797:	50                   	push   eax
c0001798:	6a 00                	push   0x0
c000179a:	53                   	push   ebx
c000179b:	e8 1a ef ff ff       	call   c00006ba <memset>
c00017a0:	83 c4 10             	add    esp,0x10
c00017a3:	83 c4 08             	add    esp,0x8
c00017a6:	89 d8                	mov    eax,ebx
c00017a8:	5b                   	pop    ebx
c00017a9:	c3                   	ret    

c00017aa <dlcfree>:
c00017aa:	e9 ee f3 ff ff       	jmp    c0000b9d <dlfree>

c00017af <dlindependent_calloc>:
c00017af:	83 ec 28             	sub    esp,0x28
c00017b2:	b9 03 00 00 00       	mov    ecx,0x3
c00017b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cb:	e8 b9 fa ff ff       	call   c0001289 <iALLOc>
c00017d0:	83 c4 2c             	add    esp,0x2c
c00017d3:	c3                   	ret    

c00017d4 <dlindependent_comalloc>:
c00017d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017dc:	31 c9                	xor    ecx,ecx
c00017de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e6:	e9 9e fa ff ff       	jmp    c0001289 <iALLOc>

c00017eb <dlvalloc>:
c00017eb:	83 ec 0c             	sub    esp,0xc
c00017ee:	83 3d 20 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024120,0x0
c00017f5:	75 0a                	jne    c0001801 <dlvalloc+0x16>
c00017f7:	b8 20 41 02 c0       	mov    eax,0xc0024120
c00017fc:	e8 b5 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001801:	50                   	push   eax
c0001802:	50                   	push   eax
c0001803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001807:	ff 35 7c 44 02 c0    	push   DWORD PTR ds:0xc002447c
c000180d:	e8 db fd ff ff       	call   c00015ed <dlmemalign>
c0001812:	83 c4 1c             	add    esp,0x1c
c0001815:	c3                   	ret    

c0001816 <dlpvalloc>:
c0001816:	83 ec 0c             	sub    esp,0xc
c0001819:	83 3d 20 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024120,0x0
c0001820:	75 0a                	jne    c000182c <dlpvalloc+0x16>
c0001822:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0001827:	e8 8a f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c000182c:	52                   	push   edx
c000182d:	a1 7c 44 02 c0       	mov    eax,ds:0xc002447c
c0001832:	52                   	push   edx
c0001833:	89 c1                	mov    ecx,eax
c0001835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001839:	f7 d9                	neg    ecx
c000183b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000183f:	21 ca                	and    edx,ecx
c0001841:	52                   	push   edx
c0001842:	50                   	push   eax
c0001843:	e8 a5 fd ff ff       	call   c00015ed <dlmemalign>
c0001848:	83 c4 1c             	add    esp,0x1c
c000184b:	c3                   	ret    

c000184c <dlmalloc_trim>:
c000184c:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0001851:	e8 60 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001856:	31 c0                	xor    eax,eax
c0001858:	c3                   	ret    

c0001859 <dlmalloc_usable_size>:
c0001859:	53                   	push   ebx
c000185a:	31 c0                	xor    eax,eax
c000185c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001860:	85 c9                	test   ecx,ecx
c0001862:	74 24                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001864:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001867:	f6 c2 02             	test   dl,0x2
c000186a:	74 08                	je     c0001874 <dlmalloc_usable_size+0x1b>
c000186c:	83 e2 fc             	and    edx,0xfffffffc
c000186f:	8d 42 f8             	lea    eax,[edx-0x8]
c0001872:	eb 14                	jmp    c0001888 <dlmalloc_usable_size+0x2f>
c0001874:	89 d3                	mov    ebx,edx
c0001876:	31 c0                	xor    eax,eax
c0001878:	83 e3 fe             	and    ebx,0xfffffffe
c000187b:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001880:	74 06                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001882:	83 e2 fc             	and    edx,0xfffffffc
c0001885:	8d 42 fc             	lea    eax,[edx-0x4]
c0001888:	5b                   	pop    ebx
c0001889:	c3                   	ret    

c000188a <dlmallinfo>:
c000188a:	55                   	push   ebp
c000188b:	57                   	push   edi
c000188c:	56                   	push   esi
c000188d:	53                   	push   ebx
c000188e:	83 ec 08             	sub    esp,0x8
c0001891:	83 3d 4c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002414c,0x0
c0001898:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189c:	75 0a                	jne    c00018a8 <dlmallinfo+0x1e>
c000189e:	b8 20 41 02 c0       	mov    eax,0xc0024120
c00018a3:	e8 0e f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c00018a8:	a1 4c 41 02 c0       	mov    eax,ds:0xc002414c
c00018ad:	31 ed                	xor    ebp,ebp
c00018af:	31 c9                	xor    ecx,ecx
c00018b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b4:	83 e0 fc             	and    eax,0xfffffffc
c00018b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018bb:	31 c0                	xor    eax,eax
c00018bd:	8b 14 85 24 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbedc]
c00018c4:	85 d2                	test   edx,edx
c00018c6:	74 0e                	je     c00018d6 <dlmallinfo+0x4c>
c00018c8:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018cb:	45                   	inc    ebp
c00018cc:	83 e6 fc             	and    esi,0xfffffffc
c00018cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d2:	01 f1                	add    ecx,esi
c00018d4:	eb ee                	jmp    c00018c4 <dlmallinfo+0x3a>
c00018d6:	40                   	inc    eax
c00018d7:	83 f8 0a             	cmp    eax,0xa
c00018da:	75 e1                	jne    c00018bd <dlmallinfo+0x33>
c00018dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ea:	b8 54 41 02 c0       	mov    eax,0xc0024154
c00018ef:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f2:	39 f0                	cmp    eax,esi
c00018f4:	74 10                	je     c0001906 <dlmallinfo+0x7c>
c00018f6:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f9:	ff 04 24             	inc    DWORD PTR [esp]
c00018fc:	83 e7 fc             	and    edi,0xfffffffc
c00018ff:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001902:	01 fa                	add    edx,edi
c0001904:	eb ec                	jmp    c00018f2 <dlmallinfo+0x68>
c0001906:	83 c0 08             	add    eax,0x8
c0001909:	3d 4c 44 02 c0       	cmp    eax,0xc002444c
c000190e:	75 df                	jne    c00018ef <dlmallinfo+0x65>
c0001910:	a1 88 44 02 c0       	mov    eax,ds:0xc0024488
c0001915:	8b 35 70 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024470
c000191b:	89 03                	mov    DWORD PTR [ebx],eax
c000191d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001920:	29 d0                	sub    eax,edx
c0001922:	8b 35 84 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024484
c0001928:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000192b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000192e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001931:	8b 35 94 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024494
c0001937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000193b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000193e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001941:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001944:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001947:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000194a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000194d:	83 c4 08             	add    esp,0x8
c0001950:	89 d8                	mov    eax,ebx
c0001952:	5b                   	pop    ebx
c0001953:	5e                   	pop    esi
c0001954:	5f                   	pop    edi
c0001955:	5d                   	pop    ebp
c0001956:	c2 04 00             	ret    0x4

c0001959 <dlmalloc_stats>:
c0001959:	83 ec 30             	sub    esp,0x30
c000195c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001960:	50                   	push   eax
c0001961:	e8 24 ff ff ff       	call   c000188a <dlmallinfo>
c0001966:	83 c4 30             	add    esp,0x30
c0001969:	c3                   	ret    

c000196a <dlmallopt>:
c000196a:	56                   	push   esi
c000196b:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0001970:	53                   	push   ebx
c0001971:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001979:	e8 38 f1 ff ff       	call   c0000ab6 <malloc_consolidate>
c000197e:	8d 46 04             	lea    eax,[esi+0x4]
c0001981:	83 f8 05             	cmp    eax,0x5
c0001984:	77 67                	ja     c00019ed <dlmallopt+0x83>
c0001986:	ff 24 85 a4 02 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfd5c]
c000198d:	83 fb 50             	cmp    ebx,0x50
c0001990:	77 5b                	ja     c00019ed <dlmallopt+0x83>
c0001992:	ba 08 00 00 00       	mov    edx,0x8
c0001997:	85 db                	test   ebx,ebx
c0001999:	74 12                	je     c00019ad <dlmallopt+0x43>
c000199b:	83 c3 0b             	add    ebx,0xb
c000199e:	ba 10 00 00 00       	mov    edx,0x10
c00019a3:	83 fb 0f             	cmp    ebx,0xf
c00019a6:	76 05                	jbe    c00019ad <dlmallopt+0x43>
c00019a8:	89 da                	mov    edx,ebx
c00019aa:	83 e2 f8             	and    edx,0xfffffff8
c00019ad:	a1 20 41 02 c0       	mov    eax,ds:0xc0024120
c00019b2:	83 e0 03             	and    eax,0x3
c00019b5:	09 d0                	or     eax,edx
c00019b7:	a3 20 41 02 c0       	mov    ds:0xc0024120,eax
c00019bc:	eb 31                	jmp    c00019ef <dlmallopt+0x85>
c00019be:	89 1d 64 44 02 c0    	mov    DWORD PTR ds:0xc0024464,ebx
c00019c4:	eb 06                	jmp    c00019cc <dlmallopt+0x62>
c00019c6:	89 1d 68 44 02 c0    	mov    DWORD PTR ds:0xc0024468,ebx
c00019cc:	be 01 00 00 00       	mov    esi,0x1
c00019d1:	eb 1c                	jmp    c00019ef <dlmallopt+0x85>
c00019d3:	89 1d 6c 44 02 c0    	mov    DWORD PTR ds:0xc002446c,ebx
c00019d9:	eb f1                	jmp    c00019cc <dlmallopt+0x62>
c00019db:	31 f6                	xor    esi,esi
c00019dd:	85 db                	test   ebx,ebx
c00019df:	75 0e                	jne    c00019ef <dlmallopt+0x85>
c00019e1:	c7 05 74 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024474,0x0
c00019eb:	eb df                	jmp    c00019cc <dlmallopt+0x62>
c00019ed:	31 f6                	xor    esi,esi
c00019ef:	5b                   	pop    ebx
c00019f0:	89 f0                	mov    eax,esi
c00019f2:	5e                   	pop    esi
c00019f3:	c3                   	ret    

c00019f4 <disk_status>:
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <disk_initialize>:
c00019f7:	31 c0                	xor    eax,eax
c00019f9:	c3                   	ret    

c00019fa <disk_read>:
c00019fa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019ff:	0f b6 04 85 40 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda5c0]
c0001a07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0b:	e9 5a 8c 01 00       	jmp    c001a66a <fatWrapperReadDisk>

c0001a10 <disk_write>:
c0001a10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a15:	0f b6 04 85 40 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda5c0]
c0001a1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a21:	e9 8f 8c 01 00       	jmp    c001a6b5 <fatWrapperWriteDisk>

c0001a26 <disk_ioctl>:
c0001a26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a2f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a34:	0f b6 04 85 40 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda5c0]
c0001a3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a40:	e9 bb 8c 01 00       	jmp    c001a700 <fatWrapperIoctl>

c0001a45 <ld_word>:
c0001a45:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a49:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a4c:	c1 e2 08             	shl    edx,0x8
c0001a4f:	09 d0                	or     eax,edx
c0001a51:	c3                   	ret    

c0001a52 <ld_dword>:
c0001a52:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a56:	89 d1                	mov    ecx,edx
c0001a58:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a5c:	c1 e1 08             	shl    ecx,0x8
c0001a5f:	09 ca                	or     edx,ecx
c0001a61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a64:	c1 e2 08             	shl    edx,0x8
c0001a67:	09 d0                	or     eax,edx
c0001a69:	c3                   	ret    

c0001a6a <ld_qword>:
c0001a6a:	57                   	push   edi
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	31 db                	xor    ebx,ebx
c0001a6f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a72:	89 df                	mov    edi,ebx
c0001a74:	89 ce                	mov    esi,ecx
c0001a76:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a7e:	c1 e6 08             	shl    esi,0x8
c0001a81:	09 f2                	or     edx,esi
c0001a83:	89 d6                	mov    esi,edx
c0001a85:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a89:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a8d:	c1 e6 08             	shl    esi,0x8
c0001a90:	09 f2                	or     edx,esi
c0001a92:	89 d6                	mov    esi,edx
c0001a94:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a98:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a9c:	c1 e6 08             	shl    esi,0x8
c0001a9f:	89 fb                	mov    ebx,edi
c0001aa1:	09 f2                	or     edx,esi
c0001aa3:	89 d1                	mov    ecx,edx
c0001aa5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa9:	89 da                	mov    edx,ebx
c0001aab:	5b                   	pop    ebx
c0001aac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aaf:	c1 e1 08             	shl    ecx,0x8
c0001ab2:	5e                   	pop    esi
c0001ab3:	09 c8                	or     eax,ecx
c0001ab5:	5f                   	pop    edi
c0001ab6:	c3                   	ret    

c0001ab7 <st_word>:
c0001ab7:	66 89 10             	mov    WORD PTR [eax],dx
c0001aba:	c3                   	ret    

c0001abb <st_dword>:
c0001abb:	89 10                	mov    DWORD PTR [eax],edx
c0001abd:	c3                   	ret    

c0001abe <st_qword>:
c0001abe:	89 10                	mov    DWORD PTR [eax],edx
c0001ac0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac3:	c3                   	ret    

c0001ac4 <mem_cpy>:
c0001ac4:	85 c9                	test   ecx,ecx
c0001ac6:	74 10                	je     c0001ad8 <mem_cpy+0x14>
c0001ac8:	57                   	push   edi
c0001ac9:	01 c1                	add    ecx,eax
c0001acb:	56                   	push   esi
c0001acc:	89 c7                	mov    edi,eax
c0001ace:	89 d6                	mov    esi,edx
c0001ad0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad1:	39 f9                	cmp    ecx,edi
c0001ad3:	75 fb                	jne    c0001ad0 <mem_cpy+0xc>
c0001ad5:	5e                   	pop    esi
c0001ad6:	5f                   	pop    edi
c0001ad7:	c3                   	ret    
c0001ad8:	c3                   	ret    

c0001ad9 <mem_set>:
c0001ad9:	01 c1                	add    ecx,eax
c0001adb:	40                   	inc    eax
c0001adc:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001adf:	39 c8                	cmp    eax,ecx
c0001ae1:	75 f8                	jne    c0001adb <mem_set+0x2>
c0001ae3:	c3                   	ret    

c0001ae4 <mem_cmp>:
c0001ae4:	57                   	push   edi
c0001ae5:	56                   	push   esi
c0001ae6:	89 c6                	mov    esi,eax
c0001ae8:	53                   	push   ebx
c0001ae9:	46                   	inc    esi
c0001aea:	42                   	inc    edx
c0001aeb:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aef:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af3:	29 fb                	sub    ebx,edi
c0001af5:	89 cf                	mov    edi,ecx
c0001af7:	29 f7                	sub    edi,esi
c0001af9:	01 c7                	add    edi,eax
c0001afb:	74 04                	je     c0001b01 <mem_cmp+0x1d>
c0001afd:	85 db                	test   ebx,ebx
c0001aff:	74 e8                	je     c0001ae9 <mem_cmp+0x5>
c0001b01:	89 d8                	mov    eax,ebx
c0001b03:	5b                   	pop    ebx
c0001b04:	5e                   	pop    esi
c0001b05:	5f                   	pop    edi
c0001b06:	c3                   	ret    

c0001b07 <chk_chr>:
c0001b07:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b0d:	74 07                	je     c0001b16 <chk_chr+0xf>
c0001b0f:	39 d1                	cmp    ecx,edx
c0001b11:	74 03                	je     c0001b16 <chk_chr+0xf>
c0001b13:	40                   	inc    eax
c0001b14:	eb f1                	jmp    c0001b07 <chk_chr>
c0001b16:	89 c8                	mov    eax,ecx
c0001b18:	c3                   	ret    

c0001b19 <dbc_1st>:
c0001b19:	31 c0                	xor    eax,eax
c0001b1b:	c3                   	ret    

c0001b1c <dbc_2nd>:
c0001b1c:	31 c0                	xor    eax,eax
c0001b1e:	c3                   	ret    

c0001b1f <tchar2uni>:
c0001b1f:	57                   	push   edi
c0001b20:	89 c7                	mov    edi,eax
c0001b22:	56                   	push   esi
c0001b23:	53                   	push   ebx
c0001b24:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b26:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b28:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b2b:	84 c9                	test   cl,cl
c0001b2d:	78 0a                	js     c0001b39 <tchar2uni+0x1a>
c0001b2f:	0f b6 d1             	movzx  edx,cl
c0001b32:	89 f3                	mov    ebx,esi
c0001b34:	e9 9f 00 00 00       	jmp    c0001bd8 <tchar2uni+0xb9>
c0001b39:	88 ca                	mov    dl,cl
c0001b3b:	83 e2 e0             	and    edx,0xffffffe0
c0001b3e:	80 fa c0             	cmp    dl,0xc0
c0001b41:	75 0c                	jne    c0001b4f <tchar2uni+0x30>
c0001b43:	89 ca                	mov    edx,ecx
c0001b45:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4a:	83 e2 1f             	and    edx,0x1f
c0001b4d:	eb 2e                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b4f:	88 ca                	mov    dl,cl
c0001b51:	83 e2 f0             	and    edx,0xfffffff0
c0001b54:	80 fa e0             	cmp    dl,0xe0
c0001b57:	75 0c                	jne    c0001b65 <tchar2uni+0x46>
c0001b59:	89 ca                	mov    edx,ecx
c0001b5b:	b9 02 00 00 00       	mov    ecx,0x2
c0001b60:	83 e2 0f             	and    edx,0xf
c0001b63:	eb 18                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b65:	88 ca                	mov    dl,cl
c0001b67:	83 e2 f8             	and    edx,0xfffffff8
c0001b6a:	88 d0                	mov    al,dl
c0001b6c:	83 ca ff             	or     edx,0xffffffff
c0001b6f:	3c f0                	cmp    al,0xf0
c0001b71:	75 6c                	jne    c0001bdf <tchar2uni+0xc0>
c0001b73:	89 ca                	mov    edx,ecx
c0001b75:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7a:	83 e2 07             	and    edx,0x7
c0001b7d:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b81:	46                   	inc    esi
c0001b82:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b85:	88 c8                	mov    al,cl
c0001b87:	83 e0 c0             	and    eax,0xffffffc0
c0001b8a:	3c 80                	cmp    al,0x80
c0001b8c:	75 4e                	jne    c0001bdc <tchar2uni+0xbd>
c0001b8e:	c1 e2 06             	shl    edx,0x6
c0001b91:	83 e1 3f             	and    ecx,0x3f
c0001b94:	09 ca                	or     edx,ecx
c0001b96:	39 de                	cmp    esi,ebx
c0001b98:	75 e7                	jne    c0001b81 <tchar2uni+0x62>
c0001b9a:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ba6:	76 34                	jbe    c0001bdc <tchar2uni+0xbd>
c0001ba8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb1:	77 29                	ja     c0001bdc <tchar2uni+0xbd>
c0001bb3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb9:	76 1d                	jbe    c0001bd8 <tchar2uni+0xb9>
c0001bbb:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc1:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc7:	c1 e1 06             	shl    ecx,0x6
c0001bca:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd0:	09 ca                	or     edx,ecx
c0001bd2:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd8:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bda:	eb 03                	jmp    c0001bdf <tchar2uni+0xc0>
c0001bdc:	83 ca ff             	or     edx,0xffffffff
c0001bdf:	5b                   	pop    ebx
c0001be0:	89 d0                	mov    eax,edx
c0001be2:	5e                   	pop    esi
c0001be3:	5f                   	pop    edi
c0001be4:	c3                   	ret    

c0001be5 <put_utf>:
c0001be5:	53                   	push   ebx
c0001be6:	83 f8 7f             	cmp    eax,0x7f
c0001be9:	89 c3                	mov    ebx,eax
c0001beb:	b0 00                	mov    al,0x0
c0001bed:	77 11                	ja     c0001c00 <put_utf+0x1b>
c0001bef:	85 c9                	test   ecx,ecx
c0001bf1:	0f 84 e5 00 00 00    	je     c0001cdc <put_utf+0xf7>
c0001bf7:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf9:	b0 01                	mov    al,0x1
c0001bfb:	e9 dc 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c00:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c06:	77 23                	ja     c0001c2b <put_utf+0x46>
c0001c08:	83 f9 01             	cmp    ecx,0x1
c0001c0b:	0f 86 cb 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c11:	89 d8                	mov    eax,ebx
c0001c13:	83 e3 3f             	and    ebx,0x3f
c0001c16:	c1 e8 06             	shr    eax,0x6
c0001c19:	83 cb 80             	or     ebx,0xffffff80
c0001c1c:	83 c8 c0             	or     eax,0xffffffc0
c0001c1f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	b0 02                	mov    al,0x2
c0001c26:	e9 b1 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c2b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c31:	77 40                	ja     c0001c73 <put_utf+0x8e>
c0001c33:	83 f9 02             	cmp    ecx,0x2
c0001c36:	0f 86 a0 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c3c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c42:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c48:	0f 86 8e 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c4e:	89 d8                	mov    eax,ebx
c0001c50:	c1 e8 0c             	shr    eax,0xc
c0001c53:	83 c8 e0             	or     eax,0xffffffe0
c0001c56:	88 02                	mov    BYTE PTR [edx],al
c0001c58:	89 d8                	mov    eax,ebx
c0001c5a:	c1 e8 06             	shr    eax,0x6
c0001c5d:	83 e3 3f             	and    ebx,0x3f
c0001c60:	83 e0 3f             	and    eax,0x3f
c0001c63:	83 cb 80             	or     ebx,0xffffff80
c0001c66:	83 c8 80             	or     eax,0xffffff80
c0001c69:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c6f:	b0 03                	mov    al,0x3
c0001c71:	eb 69                	jmp    c0001cdc <put_utf+0xf7>
c0001c73:	83 f9 03             	cmp    ecx,0x3
c0001c76:	76 64                	jbe    c0001cdc <put_utf+0xf7>
c0001c78:	89 d9                	mov    ecx,ebx
c0001c7a:	66 31 c9             	xor    cx,cx
c0001c7d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c83:	0f b7 c3             	movzx  eax,bx
c0001c86:	c1 e9 06             	shr    ecx,0x6
c0001c89:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8f:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c95:	77 43                	ja     c0001cda <put_utf+0xf5>
c0001c97:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9d:	77 3b                	ja     c0001cda <put_utf+0xf5>
c0001c9f:	09 cb                	or     ebx,ecx
c0001ca1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca7:	89 d8                	mov    eax,ebx
c0001ca9:	c1 e8 12             	shr    eax,0x12
c0001cac:	83 c8 f0             	or     eax,0xfffffff0
c0001caf:	88 02                	mov    BYTE PTR [edx],al
c0001cb1:	89 d8                	mov    eax,ebx
c0001cb3:	c1 e8 0c             	shr    eax,0xc
c0001cb6:	83 e0 3f             	and    eax,0x3f
c0001cb9:	83 c8 80             	or     eax,0xffffff80
c0001cbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cbf:	89 d8                	mov    eax,ebx
c0001cc1:	c1 e8 06             	shr    eax,0x6
c0001cc4:	83 e3 3f             	and    ebx,0x3f
c0001cc7:	83 e0 3f             	and    eax,0x3f
c0001cca:	83 cb 80             	or     ebx,0xffffff80
c0001ccd:	83 c8 80             	or     eax,0xffffff80
c0001cd0:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd3:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd6:	b0 04                	mov    al,0x4
c0001cd8:	eb 02                	jmp    c0001cdc <put_utf+0xf7>
c0001cda:	31 c0                	xor    eax,eax
c0001cdc:	5b                   	pop    ebx
c0001cdd:	c3                   	ret    

c0001cde <clst2sect>:
c0001cde:	89 c1                	mov    ecx,eax
c0001ce0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce3:	83 ea 02             	sub    edx,0x2
c0001ce6:	83 e8 02             	sub    eax,0x2
c0001ce9:	39 d0                	cmp    eax,edx
c0001ceb:	76 0d                	jbe    c0001cfa <clst2sect+0x1c>
c0001ced:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf1:	f7 e2                	mul    edx
c0001cf3:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf6:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf9:	c3                   	ret    
c0001cfa:	31 c0                	xor    eax,eax
c0001cfc:	31 d2                	xor    edx,edx
c0001cfe:	c3                   	ret    

c0001cff <clmt_clust>:
c0001cff:	57                   	push   edi
c0001d00:	89 cf                	mov    edi,ecx
c0001d02:	56                   	push   esi
c0001d03:	89 d6                	mov    esi,edx
c0001d05:	53                   	push   ebx
c0001d06:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	c1 ef 09             	shr    edi,0x9
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d17:	89 f9                	mov    ecx,edi
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	31 ff                	xor    edi,edi
c0001d1f:	57                   	push   edi
c0001d20:	56                   	push   esi
c0001d21:	51                   	push   ecx
c0001d22:	52                   	push   edx
c0001d23:	e8 64 d6 01 00       	call   c001f38c <__udivdi3>
c0001d28:	83 c4 10             	add    esp,0x10
c0001d2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d2d:	85 d2                	test   edx,edx
c0001d2f:	74 10                	je     c0001d41 <clmt_clust+0x42>
c0001d31:	39 d0                	cmp    eax,edx
c0001d33:	72 07                	jb     c0001d3c <clmt_clust+0x3d>
c0001d35:	29 d0                	sub    eax,edx
c0001d37:	83 c3 08             	add    ebx,0x8
c0001d3a:	eb ef                	jmp    c0001d2b <clmt_clust+0x2c>
c0001d3c:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d3f:	89 c2                	mov    edx,eax
c0001d41:	5b                   	pop    ebx
c0001d42:	89 d0                	mov    eax,edx
c0001d44:	5e                   	pop    esi
c0001d45:	5f                   	pop    edi
c0001d46:	c3                   	ret    

c0001d47 <pick_lfn>:
c0001d47:	55                   	push   ebp
c0001d48:	57                   	push   edi
c0001d49:	56                   	push   esi
c0001d4a:	89 d6                	mov    esi,edx
c0001d4c:	53                   	push   ebx
c0001d4d:	89 c3                	mov    ebx,eax
c0001d4f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d52:	e8 ee fc ff ff       	call   c0001a45 <ld_word>
c0001d57:	66 85 c0             	test   ax,ax
c0001d5a:	74 04                	je     c0001d60 <pick_lfn+0x19>
c0001d5c:	31 c0                	xor    eax,eax
c0001d5e:	eb 5c                	jmp    c0001dbc <pick_lfn+0x75>
c0001d60:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d63:	83 e1 bf             	and    ecx,0xffffffbf
c0001d66:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6b:	49                   	dec    ecx
c0001d6c:	31 ff                	xor    edi,edi
c0001d6e:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d71:	0f b6 87 c0 03 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfc40]
c0001d78:	01 f0                	add    eax,esi
c0001d7a:	e8 c6 fc ff ff       	call   c0001a45 <ld_word>
c0001d7f:	66 85 ed             	test   bp,bp
c0001d82:	74 11                	je     c0001d95 <pick_lfn+0x4e>
c0001d84:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8a:	77 d0                	ja     c0001d5c <pick_lfn+0x15>
c0001d8c:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d90:	89 c5                	mov    ebp,eax
c0001d92:	41                   	inc    ecx
c0001d93:	eb 04                	jmp    c0001d99 <pick_lfn+0x52>
c0001d95:	66 40                	inc    ax
c0001d97:	75 c3                	jne    c0001d5c <pick_lfn+0x15>
c0001d99:	47                   	inc    edi
c0001d9a:	83 ff 0d             	cmp    edi,0xd
c0001d9d:	75 d2                	jne    c0001d71 <pick_lfn+0x2a>
c0001d9f:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da2:	74 13                	je     c0001db7 <pick_lfn+0x70>
c0001da4:	66 85 ed             	test   bp,bp
c0001da7:	74 0e                	je     c0001db7 <pick_lfn+0x70>
c0001da9:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001daf:	77 ab                	ja     c0001d5c <pick_lfn+0x15>
c0001db1:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db7:	b8 01 00 00 00       	mov    eax,0x1
c0001dbc:	5b                   	pop    ebx
c0001dbd:	5e                   	pop    esi
c0001dbe:	5f                   	pop    edi
c0001dbf:	5d                   	pop    ebp
c0001dc0:	c3                   	ret    

c0001dc1 <put_lfn>:
c0001dc1:	55                   	push   ebp
c0001dc2:	31 ed                	xor    ebp,ebp
c0001dc4:	57                   	push   edi
c0001dc5:	89 d7                	mov    edi,edx
c0001dc7:	56                   	push   esi
c0001dc8:	31 f6                	xor    esi,esi
c0001dca:	53                   	push   ebx
c0001dcb:	83 ec 08             	sub    esp,0x8
c0001dce:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dd8:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dde:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de1:	31 d2                	xor    edx,edx
c0001de3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001de7:	e8 cb fc ff ff       	call   c0001ab7 <st_word>
c0001dec:	0f b6 d9             	movzx  ebx,cl
c0001def:	4b                   	dec    ebx
c0001df0:	6b db 0d             	imul   ebx,ebx,0xd
c0001df3:	66 83 fe ff          	cmp    si,0xffff
c0001df7:	74 08                	je     c0001e01 <put_lfn+0x40>
c0001df9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dfc:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e00:	43                   	inc    ebx
c0001e01:	0f b6 85 c0 03 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfc40]
c0001e08:	0f b7 d6             	movzx  edx,si
c0001e0b:	01 f8                	add    eax,edi
c0001e0d:	e8 a5 fc ff ff       	call   c0001ab7 <st_word>
c0001e12:	66 85 f6             	test   si,si
c0001e15:	75 03                	jne    c0001e1a <put_lfn+0x59>
c0001e17:	83 ce ff             	or     esi,0xffffffff
c0001e1a:	45                   	inc    ebp
c0001e1b:	83 fd 0d             	cmp    ebp,0xd
c0001e1e:	75 d3                	jne    c0001df3 <put_lfn+0x32>
c0001e20:	66 46                	inc    si
c0001e22:	74 0a                	je     c0001e2e <put_lfn+0x6d>
c0001e24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e27:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e2c:	75 09                	jne    c0001e37 <put_lfn+0x76>
c0001e2e:	88 c8                	mov    al,cl
c0001e30:	83 c8 40             	or     eax,0x40
c0001e33:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e37:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e3b:	88 07                	mov    BYTE PTR [edi],al
c0001e3d:	83 c4 08             	add    esp,0x8
c0001e40:	5b                   	pop    ebx
c0001e41:	5e                   	pop    esi
c0001e42:	5f                   	pop    edi
c0001e43:	5d                   	pop    ebp
c0001e44:	c3                   	ret    

c0001e45 <gen_numname>:
c0001e45:	57                   	push   edi
c0001e46:	89 cf                	mov    edi,ecx
c0001e48:	56                   	push   esi
c0001e49:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e4e:	53                   	push   ebx
c0001e4f:	89 c6                	mov    esi,eax
c0001e51:	83 ec 10             	sub    esp,0x10
c0001e54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e58:	e8 67 fc ff ff       	call   c0001ac4 <mem_cpy>
c0001e5d:	83 fb 05             	cmp    ebx,0x5
c0001e60:	76 2d                	jbe    c0001e8f <gen_numname+0x4a>
c0001e62:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 25                	je     c0001e8f <gen_numname+0x4a>
c0001e6a:	83 c7 02             	add    edi,0x2
c0001e6d:	ba 10 00 00 00       	mov    edx,0x10
c0001e72:	89 c1                	mov    ecx,eax
c0001e74:	01 db                	add    ebx,ebx
c0001e76:	66 d1 e8             	shr    ax,1
c0001e79:	83 e1 01             	and    ecx,0x1
c0001e7c:	01 cb                	add    ebx,ecx
c0001e7e:	0f ba e3 10          	bt     ebx,0x10
c0001e82:	73 06                	jae    c0001e8a <gen_numname+0x45>
c0001e84:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8a:	4a                   	dec    edx
c0001e8b:	75 e5                	jne    c0001e72 <gen_numname+0x2d>
c0001e8d:	eb d3                	jmp    c0001e62 <gen_numname+0x1d>
c0001e8f:	b8 07 00 00 00       	mov    eax,0x7
c0001e94:	88 d9                	mov    cl,bl
c0001e96:	83 e1 0f             	and    ecx,0xf
c0001e99:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e9c:	80 fa 39             	cmp    dl,0x39
c0001e9f:	76 03                	jbe    c0001ea4 <gen_numname+0x5f>
c0001ea1:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea7:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eab:	89 da                	mov    edx,ebx
c0001ead:	c1 ea 04             	shr    edx,0x4
c0001eb0:	83 fb 0f             	cmp    ebx,0xf
c0001eb3:	76 06                	jbe    c0001ebb <gen_numname+0x76>
c0001eb5:	89 c8                	mov    eax,ecx
c0001eb7:	89 d3                	mov    ebx,edx
c0001eb9:	eb d9                	jmp    c0001e94 <gen_numname+0x4f>
c0001ebb:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec0:	31 d2                	xor    edx,edx
c0001ec2:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec5:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec8:	39 ca                	cmp    edx,ecx
c0001eca:	73 18                	jae    c0001ee4 <gen_numname+0x9f>
c0001ecc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ecf:	3c 20                	cmp    al,0x20
c0001ed1:	74 11                	je     c0001ee4 <gen_numname+0x9f>
c0001ed3:	e8 41 fc ff ff       	call   c0001b19 <dbc_1st>
c0001ed8:	85 c0                	test   eax,eax
c0001eda:	74 05                	je     c0001ee1 <gen_numname+0x9c>
c0001edc:	39 d3                	cmp    ebx,edx
c0001ede:	74 04                	je     c0001ee4 <gen_numname+0x9f>
c0001ee0:	42                   	inc    edx
c0001ee1:	42                   	inc    edx
c0001ee2:	eb e1                	jmp    c0001ec5 <gen_numname+0x80>
c0001ee4:	b0 20                	mov    al,0x20
c0001ee6:	83 f9 07             	cmp    ecx,0x7
c0001ee9:	77 05                	ja     c0001ef0 <gen_numname+0xab>
c0001eeb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eef:	41                   	inc    ecx
c0001ef0:	42                   	inc    edx
c0001ef1:	83 fa 07             	cmp    edx,0x7
c0001ef4:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef8:	76 ea                	jbe    c0001ee4 <gen_numname+0x9f>
c0001efa:	83 c4 10             	add    esp,0x10
c0001efd:	5b                   	pop    ebx
c0001efe:	5e                   	pop    esi
c0001eff:	5f                   	pop    edi
c0001f00:	c3                   	ret    

c0001f01 <sum_sfn>:
c0001f01:	31 c9                	xor    ecx,ecx
c0001f03:	31 d2                	xor    edx,edx
c0001f05:	d0 ca                	ror    dl,1
c0001f07:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0a:	41                   	inc    ecx
c0001f0b:	83 f9 0b             	cmp    ecx,0xb
c0001f0e:	75 f5                	jne    c0001f05 <sum_sfn+0x4>
c0001f10:	88 d0                	mov    al,dl
c0001f12:	c3                   	ret    

c0001f13 <xdir_sum>:
c0001f13:	56                   	push   esi
c0001f14:	31 c9                	xor    ecx,ecx
c0001f16:	53                   	push   ebx
c0001f17:	31 d2                	xor    edx,edx
c0001f19:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f1d:	43                   	inc    ebx
c0001f1e:	c1 e3 05             	shl    ebx,0x5
c0001f21:	83 fa 02             	cmp    edx,0x2
c0001f24:	74 0b                	je     c0001f31 <xdir_sum+0x1e>
c0001f26:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2a:	66 d1 c9             	ror    cx,1
c0001f2d:	01 f1                	add    ecx,esi
c0001f2f:	eb 05                	jmp    c0001f36 <xdir_sum+0x23>
c0001f31:	ba 03 00 00 00       	mov    edx,0x3
c0001f36:	42                   	inc    edx
c0001f37:	39 d3                	cmp    ebx,edx
c0001f39:	77 e6                	ja     c0001f21 <xdir_sum+0xe>
c0001f3b:	5b                   	pop    ebx
c0001f3c:	89 c8                	mov    eax,ecx
c0001f3e:	5e                   	pop    esi
c0001f3f:	c3                   	ret    

c0001f40 <xsum32>:
c0001f40:	d1 ca                	ror    edx,1
c0001f42:	0f b6 c0             	movzx  eax,al
c0001f45:	01 d0                	add    eax,edx
c0001f47:	c3                   	ret    

c0001f48 <get_xfileinfo>:
c0001f48:	55                   	push   ebp
c0001f49:	31 c9                	xor    ecx,ecx
c0001f4b:	57                   	push   edi
c0001f4c:	bd 40 00 00 00       	mov    ebp,0x40
c0001f51:	56                   	push   esi
c0001f52:	31 ff                	xor    edi,edi
c0001f54:	53                   	push   ebx
c0001f55:	89 c6                	mov    esi,eax
c0001f57:	83 ec 0c             	sub    esp,0xc
c0001f5a:	89 d3                	mov    ebx,edx
c0001f5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f63:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f67:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6a:	76 6d                	jbe    c0001fd9 <get_xfileinfo+0x91>
c0001f6c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f72:	76 0b                	jbe    c0001f7f <get_xfileinfo+0x37>
c0001f74:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f78:	bf 01 00 00 00       	mov    edi,0x1
c0001f7d:	eb 63                	jmp    c0001fe2 <get_xfileinfo+0x9a>
c0001f7f:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f85:	75 03                	jne    c0001f8a <get_xfileinfo+0x42>
c0001f87:	83 c5 02             	add    ebp,0x2
c0001f8a:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f8d:	83 c5 02             	add    ebp,0x2
c0001f90:	e8 b0 fa ff ff       	call   c0001a45 <ld_word>
c0001f95:	ff 04 24             	inc    DWORD PTR [esp]
c0001f98:	66 85 c9             	test   cx,cx
c0001f9b:	75 0d                	jne    c0001faa <get_xfileinfo+0x62>
c0001f9d:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa3:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa8:	76 2b                	jbe    c0001fd5 <get_xfileinfo+0x8d>
c0001faa:	c1 e1 10             	shl    ecx,0x10
c0001fad:	ba ff 00 00 00       	mov    edx,0xff
c0001fb2:	29 fa                	sub    edx,edi
c0001fb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fb8:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fbc:	0f b7 c0             	movzx  eax,ax
c0001fbf:	09 c8                	or     eax,ecx
c0001fc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc5:	e8 1b fc ff ff       	call   c0001be5 <put_utf>
c0001fca:	84 c0                	test   al,al
c0001fcc:	74 a6                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fce:	0f b6 c0             	movzx  eax,al
c0001fd1:	01 c7                	add    edi,eax
c0001fd3:	31 c0                	xor    eax,eax
c0001fd5:	89 c1                	mov    ecx,eax
c0001fd7:	eb 8a                	jmp    c0001f63 <get_xfileinfo+0x1b>
c0001fd9:	85 ff                	test   edi,edi
c0001fdb:	74 97                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fdd:	66 85 c9             	test   cx,cx
c0001fe0:	75 92                	jne    c0001f74 <get_xfileinfo+0x2c>
c0001fe2:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001feb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fee:	31 c0                	xor    eax,eax
c0001ff0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff3:	31 d2                	xor    edx,edx
c0001ff5:	80 e1 10             	and    cl,0x10
c0001ff8:	75 08                	jne    c0002002 <get_xfileinfo+0xba>
c0001ffa:	8d 46 38             	lea    eax,[esi+0x38]
c0001ffd:	e8 68 fa ff ff       	call   c0001a6a <ld_qword>
c0002002:	89 03                	mov    DWORD PTR [ebx],eax
c0002004:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002007:	8d 46 0c             	lea    eax,[esi+0xc]
c000200a:	e8 36 fa ff ff       	call   c0001a45 <ld_word>
c000200f:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002013:	8d 46 0e             	lea    eax,[esi+0xe]
c0002016:	e8 2a fa ff ff       	call   c0001a45 <ld_word>
c000201b:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000201f:	83 c4 0c             	add    esp,0xc
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <get_ldnumber>:
c0002027:	57                   	push   edi
c0002028:	56                   	push   esi
c0002029:	53                   	push   ebx
c000202a:	83 cb ff             	or     ebx,0xffffffff
c000202d:	8b 10                	mov    edx,DWORD PTR [eax]
c000202f:	85 d2                	test   edx,edx
c0002031:	74 34                	je     c0002067 <get_ldnumber+0x40>
c0002033:	89 c7                	mov    edi,eax
c0002035:	89 d1                	mov    ecx,edx
c0002037:	41                   	inc    ecx
c0002038:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c000203b:	3c 1f                	cmp    al,0x1f
c000203d:	76 04                	jbe    c0002043 <get_ldnumber+0x1c>
c000203f:	3c 3a                	cmp    al,0x3a
c0002041:	75 f4                	jne    c0002037 <get_ldnumber+0x10>
c0002043:	31 db                	xor    ebx,ebx
c0002045:	3c 3a                	cmp    al,0x3a
c0002047:	75 1e                	jne    c0002067 <get_ldnumber+0x40>
c0002049:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000204c:	83 cb ff             	or     ebx,0xffffffff
c000204f:	8d 46 d0             	lea    eax,[esi-0x30]
c0002052:	3c 09                	cmp    al,0x9
c0002054:	77 11                	ja     c0002067 <get_ldnumber+0x40>
c0002056:	83 c2 02             	add    edx,0x2
c0002059:	39 d1                	cmp    ecx,edx
c000205b:	75 0a                	jne    c0002067 <get_ldnumber+0x40>
c000205d:	89 f0                	mov    eax,esi
c000205f:	89 0f                	mov    DWORD PTR [edi],ecx
c0002061:	0f be d8             	movsx  ebx,al
c0002064:	83 eb 30             	sub    ebx,0x30
c0002067:	89 d8                	mov    eax,ebx
c0002069:	5b                   	pop    ebx
c000206a:	5e                   	pop    esi
c000206b:	5f                   	pop    edi
c000206c:	c3                   	ret    

c000206d <crc32>:
c000206d:	56                   	push   esi
c000206e:	89 d6                	mov    esi,edx
c0002070:	53                   	push   ebx
c0002071:	b2 01                	mov    dl,0x1
c0002073:	bb 08 00 00 00       	mov    ebx,0x8
c0002078:	89 f1                	mov    ecx,esi
c000207a:	84 d1                	test   cl,dl
c000207c:	0f 95 c1             	setne  cl
c000207f:	0f b6 c9             	movzx  ecx,cl
c0002082:	31 c1                	xor    ecx,eax
c0002084:	89 c8                	mov    eax,ecx
c0002086:	d1 e8                	shr    eax,1
c0002088:	80 e1 01             	and    cl,0x1
c000208b:	74 05                	je     c0002092 <crc32+0x25>
c000208d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002092:	01 d2                	add    edx,edx
c0002094:	4b                   	dec    ebx
c0002095:	75 e1                	jne    c0002078 <crc32+0xb>
c0002097:	5b                   	pop    ebx
c0002098:	5e                   	pop    esi
c0002099:	c3                   	ret    

c000209a <test_gpt_header>:
c000209a:	55                   	push   ebp
c000209b:	b9 10 00 00 00       	mov    ecx,0x10
c00020a0:	57                   	push   edi
c00020a1:	ba c0 02 02 c0       	mov    edx,0xc00202c0
c00020a6:	56                   	push   esi
c00020a7:	31 ff                	xor    edi,edi
c00020a9:	53                   	push   ebx
c00020aa:	89 c3                	mov    ebx,eax
c00020ac:	e8 33 fa ff ff       	call   c0001ae4 <mem_cmp>
c00020b1:	85 c0                	test   eax,eax
c00020b3:	75 55                	jne    c000210a <test_gpt_header+0x70>
c00020b5:	89 c7                	mov    edi,eax
c00020b7:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020bc:	83 ce ff             	or     esi,0xffffffff
c00020bf:	31 d2                	xor    edx,edx
c00020c1:	83 fd 03             	cmp    ebp,0x3
c00020c4:	76 05                	jbe    c00020cb <test_gpt_header+0x31>
c00020c6:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020cb:	89 f0                	mov    eax,esi
c00020cd:	45                   	inc    ebp
c00020ce:	e8 9a ff ff ff       	call   c000206d <crc32>
c00020d3:	83 fd 4c             	cmp    ebp,0x4c
c00020d6:	89 c6                	mov    esi,eax
c00020d8:	75 e5                	jne    c00020bf <test_gpt_header+0x25>
c00020da:	8d 43 10             	lea    eax,[ebx+0x10]
c00020dd:	e8 70 f9 ff ff       	call   c0001a52 <ld_dword>
c00020e2:	f7 d6                	not    esi
c00020e4:	39 c6                	cmp    esi,eax
c00020e6:	75 22                	jne    c000210a <test_gpt_header+0x70>
c00020e8:	8d 43 54             	lea    eax,[ebx+0x54]
c00020eb:	e8 62 f9 ff ff       	call   c0001a52 <ld_dword>
c00020f0:	83 c0 80             	add    eax,0xffffff80
c00020f3:	75 15                	jne    c000210a <test_gpt_header+0x70>
c00020f5:	8d 43 50             	lea    eax,[ebx+0x50]
c00020f8:	e8 55 f9 ff ff       	call   c0001a52 <ld_dword>
c00020fd:	3d 80 00 00 00       	cmp    eax,0x80
c0002102:	0f 96 c0             	setbe  al
c0002105:	0f b6 c0             	movzx  eax,al
c0002108:	89 c7                	mov    edi,eax
c000210a:	5b                   	pop    ebx
c000210b:	89 f8                	mov    eax,edi
c000210d:	5e                   	pop    esi
c000210e:	5f                   	pop    edi
c000210f:	5d                   	pop    ebp
c0002110:	c3                   	ret    

c0002111 <make_rand>:
c0002111:	56                   	push   esi
c0002112:	85 c0                	test   eax,eax
c0002114:	53                   	push   ebx
c0002115:	75 05                	jne    c000211c <make_rand+0xb>
c0002117:	b8 01 00 00 00       	mov    eax,0x1
c000211c:	01 d1                	add    ecx,edx
c000211e:	bb 08 00 00 00       	mov    ebx,0x8
c0002123:	89 c6                	mov    esi,eax
c0002125:	d1 e8                	shr    eax,1
c0002127:	83 e6 01             	and    esi,0x1
c000212a:	85 f6                	test   esi,esi
c000212c:	74 05                	je     c0002133 <make_rand+0x22>
c000212e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002133:	4b                   	dec    ebx
c0002134:	75 ed                	jne    c0002123 <make_rand+0x12>
c0002136:	42                   	inc    edx
c0002137:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213a:	39 ca                	cmp    edx,ecx
c000213c:	75 e0                	jne    c000211e <make_rand+0xd>
c000213e:	5b                   	pop    ebx
c000213f:	5e                   	pop    esi
c0002140:	c3                   	ret    

c0002141 <validate>:
c0002141:	56                   	push   esi
c0002142:	89 d6                	mov    esi,edx
c0002144:	53                   	push   ebx
c0002145:	85 c0                	test   eax,eax
c0002147:	51                   	push   ecx
c0002148:	75 09                	jne    c0002153 <validate+0x12>
c000214a:	b8 09 00 00 00       	mov    eax,0x9
c000214f:	31 c9                	xor    ecx,ecx
c0002151:	eb 2f                	jmp    c0002182 <validate+0x41>
c0002153:	89 c3                	mov    ebx,eax
c0002155:	8b 00                	mov    eax,DWORD PTR [eax]
c0002157:	85 c0                	test   eax,eax
c0002159:	74 ef                	je     c000214a <validate+0x9>
c000215b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000215e:	74 ea                	je     c000214a <validate+0x9>
c0002160:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002164:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002168:	75 e0                	jne    c000214a <validate+0x9>
c000216a:	83 ec 0c             	sub    esp,0xc
c000216d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002171:	50                   	push   eax
c0002172:	e8 7d f8 ff ff       	call   c00019f4 <disk_status>
c0002177:	83 c4 10             	add    esp,0x10
c000217a:	a8 01                	test   al,0x1
c000217c:	75 cc                	jne    c000214a <validate+0x9>
c000217e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002180:	31 c0                	xor    eax,eax
c0002182:	89 0e                	mov    DWORD PTR [esi],ecx
c0002184:	5a                   	pop    edx
c0002185:	5b                   	pop    ebx
c0002186:	5e                   	pop    esi
c0002187:	c3                   	ret    

c0002188 <sync_window>:
c0002188:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000218c:	0f 84 85 00 00 00    	je     c0002217 <sync_window+0x8f>
c0002192:	55                   	push   ebp
c0002193:	8d 68 54             	lea    ebp,[eax+0x54]
c0002196:	57                   	push   edi
c0002197:	56                   	push   esi
c0002198:	53                   	push   ebx
c0002199:	89 c3                	mov    ebx,eax
c000219b:	83 ec 28             	sub    esp,0x28
c000219e:	6a 01                	push   0x1
c00021a0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021a6:	55                   	push   ebp
c00021a7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ab:	50                   	push   eax
c00021ac:	e8 5f f8 ff ff       	call   c0001a10 <disk_write>
c00021b1:	83 c4 20             	add    esp,0x20
c00021b4:	ba 01 00 00 00       	mov    edx,0x1
c00021b9:	85 c0                	test   eax,eax
c00021bb:	75 50                	jne    c000220d <sync_window+0x85>
c00021bd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c0:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021c3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021c7:	89 c6                	mov    esi,eax
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021ce:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d5:	89 d7                	mov    edi,edx
c00021d7:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021db:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021de:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e2:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021e6:	73 23                	jae    c000220b <sync_window+0x83>
c00021e8:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021ec:	75 1d                	jne    c000220b <sync_window+0x83>
c00021ee:	83 ec 0c             	sub    esp,0xc
c00021f1:	6a 01                	push   0x1
c00021f3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021f7:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021fb:	52                   	push   edx
c00021fc:	50                   	push   eax
c00021fd:	55                   	push   ebp
c00021fe:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002202:	50                   	push   eax
c0002203:	e8 08 f8 ff ff       	call   c0001a10 <disk_write>
c0002208:	83 c4 20             	add    esp,0x20
c000220b:	31 d2                	xor    edx,edx
c000220d:	83 c4 1c             	add    esp,0x1c
c0002210:	89 d0                	mov    eax,edx
c0002212:	5b                   	pop    ebx
c0002213:	5e                   	pop    esi
c0002214:	5f                   	pop    edi
c0002215:	5d                   	pop    ebp
c0002216:	c3                   	ret    
c0002217:	31 d2                	xor    edx,edx
c0002219:	89 d0                	mov    eax,edx
c000221b:	c3                   	ret    

c000221c <move_window>:
c000221c:	56                   	push   esi
c000221d:	53                   	push   ebx
c000221e:	89 c3                	mov    ebx,eax
c0002220:	83 ec 14             	sub    esp,0x14
c0002223:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002226:	75 07                	jne    c000222f <move_window+0x13>
c0002228:	31 f6                	xor    esi,esi
c000222a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000222d:	74 59                	je     c0002288 <move_window+0x6c>
c000222f:	89 d8                	mov    eax,ebx
c0002231:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002235:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002239:	e8 4a ff ff ff       	call   c0002188 <sync_window>
c000223e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002242:	89 c6                	mov    esi,eax
c0002244:	85 c0                	test   eax,eax
c0002246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224a:	75 3c                	jne    c0002288 <move_window+0x6c>
c000224c:	83 ec 0c             	sub    esp,0xc
c000224f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002252:	6a 01                	push   0x1
c0002254:	51                   	push   ecx
c0002255:	52                   	push   edx
c0002256:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000225e:	50                   	push   eax
c000225f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002263:	50                   	push   eax
c0002264:	e8 91 f7 ff ff       	call   c00019fa <disk_read>
c0002269:	83 c4 20             	add    esp,0x20
c000226c:	85 c0                	test   eax,eax
c000226e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002272:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002276:	74 0a                	je     c0002282 <move_window+0x66>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	be 01 00 00 00       	mov    esi,0x1
c0002280:	89 d1                	mov    ecx,edx
c0002282:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002285:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002288:	83 c4 14             	add    esp,0x14
c000228b:	89 f0                	mov    eax,esi
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <check_fs>:
c0002290:	53                   	push   ebx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	83 ec 08             	sub    esp,0x8
c0002296:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229a:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022a8:	e8 6f ff ff ff       	call   c000221c <move_window>
c00022ad:	ba 04 00 00 00       	mov    edx,0x4
c00022b2:	85 c0                	test   eax,eax
c00022b4:	0f 85 89 00 00 00    	jne    c0002343 <check_fs+0xb3>
c00022ba:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c0:	e8 80 f7 ff ff       	call   c0001a45 <ld_word>
c00022c5:	ba 03 00 00 00       	mov    edx,0x3
c00022ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ce:	75 73                	jne    c0002343 <check_fs+0xb3>
c00022d0:	ba e0 03 02 c0       	mov    edx,0xc00203e0
c00022d5:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00022dd:	e8 02 f8 ff ff       	call   c0001ae4 <mem_cmp>
c00022e2:	ba 01 00 00 00       	mov    edx,0x1
c00022e7:	85 c0                	test   eax,eax
c00022e9:	74 58                	je     c0002343 <check_fs+0xb3>
c00022eb:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022ee:	8d 50 18             	lea    edx,[eax+0x18]
c00022f1:	80 fa 01             	cmp    dl,0x1
c00022f4:	76 09                	jbe    c00022ff <check_fs+0x6f>
c00022f6:	ba 02 00 00 00       	mov    edx,0x2
c00022fb:	3c eb                	cmp    al,0xeb
c00022fd:	75 44                	jne    c0002343 <check_fs+0xb3>
c00022ff:	ba 4c 30 02 c0       	mov    edx,0xc002304c
c0002304:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230a:	b9 03 00 00 00       	mov    ecx,0x3
c000230f:	e8 d0 f7 ff ff       	call   c0001ae4 <mem_cmp>
c0002314:	31 d2                	xor    edx,edx
c0002316:	85 c0                	test   eax,eax
c0002318:	74 29                	je     c0002343 <check_fs+0xb3>
c000231a:	ba ec 03 02 c0       	mov    edx,0xc00203ec
c000231f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002325:	b9 05 00 00 00       	mov    ecx,0x5
c000232a:	e8 b5 f7 ff ff       	call   c0001ae4 <mem_cmp>
c000232f:	31 d2                	xor    edx,edx
c0002331:	85 c0                	test   eax,eax
c0002333:	74 0e                	je     c0002343 <check_fs+0xb3>
c0002335:	31 d2                	xor    edx,edx
c0002337:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000233e:	0f 95 c2             	setne  dl
c0002341:	01 d2                	add    edx,edx
c0002343:	83 c4 08             	add    esp,0x8
c0002346:	89 d0                	mov    eax,edx
c0002348:	5b                   	pop    ebx
c0002349:	c3                   	ret    

c000234a <find_volume>:
c000234a:	55                   	push   ebp
c000234b:	31 c9                	xor    ecx,ecx
c000234d:	57                   	push   edi
c000234e:	56                   	push   esi
c000234f:	89 d6                	mov    esi,edx
c0002351:	53                   	push   ebx
c0002352:	31 d2                	xor    edx,edx
c0002354:	83 ec 3c             	sub    esp,0x3c
c0002357:	89 c3                	mov    ebx,eax
c0002359:	e8 32 ff ff ff       	call   c0002290 <check_fs>
c000235e:	83 f8 02             	cmp    eax,0x2
c0002361:	74 0e                	je     c0002371 <find_volume+0x27>
c0002363:	0f 87 56 01 00 00    	ja     c00024bf <find_volume+0x175>
c0002369:	85 f6                	test   esi,esi
c000236b:	0f 84 4e 01 00 00    	je     c00024bf <find_volume+0x175>
c0002371:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002378:	0f 85 df 00 00 00    	jne    c000245d <find_volume+0x113>
c000237e:	31 c9                	xor    ecx,ecx
c0002380:	ba 01 00 00 00       	mov    edx,0x1
c0002385:	89 d8                	mov    eax,ebx
c0002387:	e8 90 fe ff ff       	call   c000221c <move_window>
c000238c:	85 c0                	test   eax,eax
c000238e:	74 0a                	je     c000239a <find_volume+0x50>
c0002390:	b8 04 00 00 00       	mov    eax,0x4
c0002395:	e9 25 01 00 00       	jmp    c00024bf <find_volume+0x175>
c000239a:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000239d:	89 e8                	mov    eax,ebp
c000239f:	e8 f6 fc ff ff       	call   c000209a <test_gpt_header>
c00023a4:	85 c0                	test   eax,eax
c00023a6:	75 0a                	jne    c00023b2 <find_volume+0x68>
c00023a8:	b8 03 00 00 00       	mov    eax,0x3
c00023ad:	e9 0d 01 00 00       	jmp    c00024bf <find_volume+0x175>
c00023b2:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023b8:	e8 95 f6 ff ff       	call   c0001a52 <ld_dword>
c00023bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c1:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023c7:	e8 9e f6 ff ff       	call   c0001a6a <ld_qword>
c00023cc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023ec:	74 ba                	je     c00023a8 <find_volume+0x5e>
c00023ee:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f2:	31 c9                	xor    ecx,ecx
c00023f4:	c1 e7 07             	shl    edi,0x7
c00023f7:	89 d8                	mov    eax,ebx
c00023f9:	89 fa                	mov    edx,edi
c00023fb:	c1 ea 09             	shr    edx,0x9
c00023fe:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002402:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002406:	e8 11 fe ff ff       	call   c000221c <move_window>
c000240b:	85 c0                	test   eax,eax
c000240d:	75 81                	jne    c0002390 <find_volume+0x46>
c000240f:	81 e7 80 01 00 00    	and    edi,0x180
c0002415:	b9 10 00 00 00       	mov    ecx,0x10
c000241a:	ba d0 03 02 c0       	mov    edx,0xc00203d0
c000241f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002423:	e8 bc f6 ff ff       	call   c0001ae4 <mem_cmp>
c0002428:	85 c0                	test   eax,eax
c000242a:	75 2b                	jne    c0002457 <find_volume+0x10d>
c000242c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002430:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002434:	e8 31 f6 ff ff       	call   c0001a6a <ld_qword>
c0002439:	89 d1                	mov    ecx,edx
c000243b:	89 c2                	mov    edx,eax
c000243d:	89 d8                	mov    eax,ebx
c000243f:	e8 4c fe ff ff       	call   c0002290 <check_fs>
c0002444:	85 f6                	test   esi,esi
c0002446:	75 05                	jne    c000244d <find_volume+0x103>
c0002448:	83 f8 01             	cmp    eax,0x1
c000244b:	76 72                	jbe    c00024bf <find_volume+0x175>
c000244d:	85 f6                	test   esi,esi
c000244f:	74 06                	je     c0002457 <find_volume+0x10d>
c0002451:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002455:	74 68                	je     c00024bf <find_volume+0x175>
c0002457:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000245b:	eb 87                	jmp    c00023e4 <find_volume+0x9a>
c000245d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002461:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002467:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000246d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002471:	89 cd                	mov    ebp,ecx
c0002473:	89 f8                	mov    eax,edi
c0002475:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002479:	e8 d4 f5 ff ff       	call   c0001a52 <ld_dword>
c000247e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002482:	83 c7 10             	add    edi,0x10
c0002485:	83 c1 04             	add    ecx,0x4
c0002488:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000248b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000248f:	75 e2                	jne    c0002473 <find_volume+0x129>
c0002491:	31 ff                	xor    edi,edi
c0002493:	85 f6                	test   esi,esi
c0002495:	74 03                	je     c000249a <find_volume+0x150>
c0002497:	8d 7e ff             	lea    edi,[esi-0x1]
c000249a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000249e:	b8 03 00 00 00       	mov    eax,0x3
c00024a3:	85 d2                	test   edx,edx
c00024a5:	74 09                	je     c00024b0 <find_volume+0x166>
c00024a7:	31 c9                	xor    ecx,ecx
c00024a9:	89 d8                	mov    eax,ebx
c00024ab:	e8 e0 fd ff ff       	call   c0002290 <check_fs>
c00024b0:	85 f6                	test   esi,esi
c00024b2:	75 0b                	jne    c00024bf <find_volume+0x175>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 06                	jbe    c00024bf <find_volume+0x175>
c00024b9:	47                   	inc    edi
c00024ba:	83 ff 03             	cmp    edi,0x3
c00024bd:	76 db                	jbe    c000249a <find_volume+0x150>
c00024bf:	83 c4 3c             	add    esp,0x3c
c00024c2:	5b                   	pop    ebx
c00024c3:	5e                   	pop    esi
c00024c4:	5f                   	pop    edi
c00024c5:	5d                   	pop    ebp
c00024c6:	c3                   	ret    

c00024c7 <mount_volume>:
c00024c7:	55                   	push   ebp
c00024c8:	57                   	push   edi
c00024c9:	89 cf                	mov    edi,ecx
c00024cb:	56                   	push   esi
c00024cc:	53                   	push   ebx
c00024cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00024d2:	83 ec 3c             	sub    esp,0x3c
c00024d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024df:	e8 43 fb ff ff       	call   c0002027 <get_ldnumber>
c00024e4:	85 c0                	test   eax,eax
c00024e6:	0f 88 3b 05 00 00    	js     c0002a27 <mount_volume+0x560>
c00024ec:	8b 2c 85 c0 44 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbb40]
c00024f3:	89 c6                	mov    esi,eax
c00024f5:	bb 0c 00 00 00       	mov    ebx,0xc
c00024fa:	85 ed                	test   ebp,ebp
c00024fc:	0f 84 25 05 00 00    	je     c0002a27 <mount_volume+0x560>
c0002502:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002506:	83 e7 fe             	and    edi,0xfffffffe
c0002509:	89 2a                	mov    DWORD PTR [edx],ebp
c000250b:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000250f:	74 32                	je     c0002543 <mount_volume+0x7c>
c0002511:	83 ec 0c             	sub    esp,0xc
c0002514:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002518:	50                   	push   eax
c0002519:	e8 d6 f4 ff ff       	call   c00019f4 <disk_status>
c000251e:	83 c4 10             	add    esp,0x10
c0002521:	a8 01                	test   al,0x1
c0002523:	75 1e                	jne    c0002543 <mount_volume+0x7c>
c0002525:	89 f9                	mov    ecx,edi
c0002527:	31 db                	xor    ebx,ebx
c0002529:	84 c9                	test   cl,cl
c000252b:	0f 84 f6 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002531:	a8 04                	test   al,0x4
c0002533:	0f 84 ee 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002539:	bb 0a 00 00 00       	mov    ebx,0xa
c000253e:	e9 e4 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002543:	83 ec 0c             	sub    esp,0xc
c0002546:	89 f0                	mov    eax,esi
c0002548:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000254c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000254f:	0f b6 f0             	movzx  esi,al
c0002552:	56                   	push   esi
c0002553:	e8 9f f4 ff ff       	call   c00019f7 <disk_initialize>
c0002558:	bb 03 00 00 00       	mov    ebx,0x3
c000255d:	83 c4 10             	add    esp,0x10
c0002560:	a8 01                	test   al,0x1
c0002562:	0f 85 bf 04 00 00    	jne    c0002a27 <mount_volume+0x560>
c0002568:	89 f9                	mov    ecx,edi
c000256a:	84 c9                	test   cl,cl
c000256c:	74 04                	je     c0002572 <mount_volume+0xab>
c000256e:	a8 04                	test   al,0x4
c0002570:	75 c7                	jne    c0002539 <mount_volume+0x72>
c0002572:	31 d2                	xor    edx,edx
c0002574:	89 e8                	mov    eax,ebp
c0002576:	e8 cf fd ff ff       	call   c000234a <find_volume>
c000257b:	83 f8 04             	cmp    eax,0x4
c000257e:	75 0a                	jne    c000258a <mount_volume+0xc3>
c0002580:	bb 01 00 00 00       	mov    ebx,0x1
c0002585:	e9 9d 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000258a:	83 f8 01             	cmp    eax,0x1
c000258d:	76 0a                	jbe    c0002599 <mount_volume+0xd2>
c000258f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002594:	e9 8e 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002599:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000259c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000259f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025a7:	75 17                	jne    c00025c0 <mount_volume+0xf9>
c00025a9:	b8 0b 00 00 00       	mov    eax,0xb
c00025ae:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025b3:	75 da                	jne    c000258f <mount_volume+0xc8>
c00025b5:	40                   	inc    eax
c00025b6:	83 f8 40             	cmp    eax,0x40
c00025b9:	75 f3                	jne    c00025ae <mount_volume+0xe7>
c00025bb:	e9 5a 02 00 00       	jmp    c000281a <mount_volume+0x353>
c00025c0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025c3:	e8 7d f4 ff ff       	call   c0001a45 <ld_word>
c00025c8:	66 3d 00 02          	cmp    ax,0x200
c00025cc:	75 c1                	jne    c000258f <mount_volume+0xc8>
c00025ce:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025d1:	e8 6f f4 ff ff       	call   c0001a45 <ld_word>
c00025d6:	0f b7 c0             	movzx  eax,ax
c00025d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dd:	85 c0                	test   eax,eax
c00025df:	75 0c                	jne    c00025ed <mount_volume+0x126>
c00025e1:	8d 45 78             	lea    eax,[ebp+0x78]
c00025e4:	e8 69 f4 ff ff       	call   c0001a52 <ld_dword>
c00025e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025f4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025f7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025fb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025fe:	48                   	dec    eax
c00025ff:	3c 01                	cmp    al,0x1
c0002601:	77 8c                	ja     c000258f <mount_volume+0xc8>
c0002603:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002607:	89 c3                	mov    ebx,eax
c0002609:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000260d:	66 85 c0             	test   ax,ax
c0002610:	0f 84 79 ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002616:	8d 40 ff             	lea    eax,[eax-0x1]
c0002619:	85 d8                	test   eax,ebx
c000261b:	0f 85 6e ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002621:	8d 45 65             	lea    eax,[ebp+0x65]
c0002624:	e8 1c f4 ff ff       	call   c0001a45 <ld_word>
c0002629:	89 c7                	mov    edi,eax
c000262b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000262f:	a8 0f                	test   al,0xf
c0002631:	0f 85 58 ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002637:	8d 45 67             	lea    eax,[ebp+0x67]
c000263a:	e8 06 f4 ff ff       	call   c0001a45 <ld_word>
c000263f:	0f b7 f0             	movzx  esi,ax
c0002642:	85 f6                	test   esi,esi
c0002644:	75 0a                	jne    c0002650 <mount_volume+0x189>
c0002646:	8d 45 74             	lea    eax,[ebp+0x74]
c0002649:	e8 04 f4 ff ff       	call   c0001a52 <ld_dword>
c000264e:	89 c6                	mov    esi,eax
c0002650:	8d 45 62             	lea    eax,[ebp+0x62]
c0002653:	e8 ed f3 ff ff       	call   c0001a45 <ld_word>
c0002658:	66 85 c0             	test   ax,ax
c000265b:	0f 84 2e ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002661:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002666:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000266b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000266f:	89 fa                	mov    edx,edi
c0002671:	66 c1 ea 04          	shr    dx,0x4
c0002675:	0f b7 d2             	movzx  edx,dx
c0002678:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000267c:	0f b7 c8             	movzx  ecx,ax
c000267f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002682:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002686:	39 c6                	cmp    esi,eax
c0002688:	0f 82 01 ff ff ff    	jb     c000258f <mount_volume+0xc8>
c000268e:	29 c6                	sub    esi,eax
c0002690:	31 d2                	xor    edx,edx
c0002692:	89 f0                	mov    eax,esi
c0002694:	f7 f3                	div    ebx
c0002696:	39 de                	cmp    esi,ebx
c0002698:	0f 82 f1 fe ff ff    	jb     c000258f <mount_volume+0xc8>
c000269e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026a3:	0f 87 e6 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c00026a9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026ae:	0f 86 63 03 00 00    	jbe    c0002a17 <mount_volume+0x550>
c00026b4:	bb 03 00 00 00       	mov    ebx,0x3
c00026b9:	8d 70 02             	lea    esi,[eax+0x2]
c00026bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026c4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026c7:	89 c8                	mov    eax,ecx
c00026c9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026cc:	31 d2                	xor    edx,edx
c00026ce:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026d2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026da:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026e5:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026e8:	31 d2                	xor    edx,edx
c00026ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026ee:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026f5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026f8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026fb:	83 fb 03             	cmp    ebx,0x3
c00026fe:	75 2b                	jne    c000272b <mount_volume+0x264>
c0002700:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002703:	e8 3d f3 ff ff       	call   c0001a45 <ld_word>
c0002708:	66 09 c7             	or     di,ax
c000270b:	0f 85 7e fe ff ff    	jne    c000258f <mount_volume+0xc8>
c0002711:	c1 e6 02             	shl    esi,0x2
c0002714:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000271a:	e8 33 f3 ff ff       	call   c0001a52 <ld_dword>
c000271f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002726:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002729:	eb 30                	jmp    c000275b <mount_volume+0x294>
c000272b:	66 85 ff             	test   di,di
c000272e:	0f 84 5b fe ff ff    	je     c000258f <mount_volume+0xc8>
c0002734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002738:	31 d2                	xor    edx,edx
c000273a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000273e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002742:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002745:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002748:	83 fb 02             	cmp    ebx,0x2
c000274b:	75 04                	jne    c0002751 <mount_volume+0x28a>
c000274d:	01 f6                	add    esi,esi
c000274f:	eb 0a                	jmp    c000275b <mount_volume+0x294>
c0002751:	8d 04 76             	lea    eax,[esi+esi*2]
c0002754:	83 e6 01             	and    esi,0x1
c0002757:	d1 e8                	shr    eax,1
c0002759:	01 c6                	add    esi,eax
c000275b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002761:	c1 ee 09             	shr    esi,0x9
c0002764:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002768:	0f 87 21 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c000276e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002775:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000277c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002780:	83 fb 03             	cmp    ebx,0x3
c0002783:	75 7a                	jne    c00027ff <mount_volume+0x338>
c0002785:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000278b:	e8 b5 f2 ff ff       	call   c0001a45 <ld_word>
c0002790:	66 48                	dec    ax
c0002792:	75 6b                	jne    c00027ff <mount_volume+0x338>
c0002794:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002798:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279c:	83 c2 01             	add    edx,0x1
c000279f:	89 e8                	mov    eax,ebp
c00027a1:	83 d1 00             	adc    ecx,0x0
c00027a4:	e8 73 fa ff ff       	call   c000221c <move_window>
c00027a9:	85 c0                	test   eax,eax
c00027ab:	75 52                	jne    c00027ff <mount_volume+0x338>
c00027ad:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027b1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027b7:	e8 89 f2 ff ff       	call   c0001a45 <ld_word>
c00027bc:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c0:	75 3d                	jne    c00027ff <mount_volume+0x338>
c00027c2:	8d 45 54             	lea    eax,[ebp+0x54]
c00027c5:	e8 88 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ca:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027cf:	75 2e                	jne    c00027ff <mount_volume+0x338>
c00027d1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027d7:	e8 76 f2 ff ff       	call   c0001a52 <ld_dword>
c00027dc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e1:	75 1c                	jne    c00027ff <mount_volume+0x338>
c00027e3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027e9:	e8 64 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ee:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027f1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027f7:	e8 56 f2 ff ff       	call   c0001a52 <ld_dword>
c00027fc:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027ff:	66 a1 a0 44 02 c0    	mov    ax,ds:0xc00244a0
c0002805:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002808:	40                   	inc    eax
c0002809:	31 db                	xor    ebx,ebx
c000280b:	66 a3 a0 44 02 c0    	mov    ds:0xc00244a0,ax
c0002811:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002815:	e9 0d 02 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000281a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002820:	e8 20 f2 ff ff       	call   c0001a45 <ld_word>
c0002825:	66 3d 00 01          	cmp    ax,0x100
c0002829:	0f 85 60 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000282f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002836:	0f 85 53 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000283c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002842:	e8 23 f2 ff ff       	call   c0001a6a <ld_qword>
c0002847:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000284b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002851:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002855:	e8 f8 f1 ff ff       	call   c0001a52 <ld_dword>
c000285a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000285d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002863:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002866:	fe c8                	dec    al
c0002868:	0f 85 21 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000286e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002875:	bb 01 00 00 00       	mov    ebx,0x1
c000287a:	d3 e3                	shl    ebx,cl
c000287c:	66 85 db             	test   bx,bx
c000287f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002883:	0f 84 06 fd ff ff    	je     c000258f <mount_volume+0xc8>
c0002889:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000288f:	e8 be f1 ff ff       	call   c0001a52 <ld_dword>
c0002894:	89 c6                	mov    esi,eax
c0002896:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c000289b:	0f 87 ee fc ff ff    	ja     c000258f <mount_volume+0xc8>
c00028a1:	8d 40 02             	lea    eax,[eax+0x2]
c00028a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028a8:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028af:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028b2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028bb:	e8 92 f1 ff ff       	call   c0001a52 <ld_dword>
c00028c0:	31 d2                	xor    edx,edx
c00028c2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028ce:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028d1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028d4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028de:	e8 6f f1 ff ff       	call   c0001a52 <ld_dword>
c00028e3:	31 d2                	xor    edx,edx
c00028e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028ed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028f1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f4:	0f b7 c3             	movzx  eax,bx
c00028f7:	0f af f0             	imul   esi,eax
c00028fa:	89 f0                	mov    eax,esi
c00028fc:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028ff:	31 d2                	xor    edx,edx
c0002901:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002905:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002909:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000290d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002911:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002915:	39 c1                	cmp    ecx,eax
c0002917:	89 df                	mov    edi,ebx
c0002919:	19 d7                	sbb    edi,edx
c000291b:	0f 82 6e fc ff ff    	jb     c000258f <mount_volume+0xc8>
c0002921:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002927:	31 db                	xor    ebx,ebx
c0002929:	e8 24 f1 ff ff       	call   c0001a52 <ld_dword>
c000292e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002935:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002938:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002940:	85 db                	test   ebx,ebx
c0002942:	75 39                	jne    c000297d <mount_volume+0x4b6>
c0002944:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002948:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000294c:	0f 86 3d fc ff ff    	jbe    c000258f <mount_volume+0xc8>
c0002952:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002955:	89 e8                	mov    eax,ebp
c0002957:	e8 82 f3 ff ff       	call   c0001cde <clst2sect>
c000295c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002960:	31 ff                	xor    edi,edi
c0002962:	01 c6                	add    esi,eax
c0002964:	11 d7                	adc    edi,edx
c0002966:	89 e8                	mov    eax,ebp
c0002968:	89 f2                	mov    edx,esi
c000296a:	89 f9                	mov    ecx,edi
c000296c:	e8 ab f8 ff ff       	call   c000221c <move_window>
c0002971:	85 c0                	test   eax,eax
c0002973:	0f 85 07 fc ff ff    	jne    c0002580 <mount_volume+0xb9>
c0002979:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000297d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002982:	74 0b                	je     c000298f <mount_volume+0x4c8>
c0002984:	83 c3 20             	add    ebx,0x20
c0002987:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000298d:	eb b1                	jmp    c0002940 <mount_volume+0x479>
c000298f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002992:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002996:	e8 b7 f0 ff ff       	call   c0001a52 <ld_dword>
c000299b:	89 c3                	mov    ebx,eax
c000299d:	83 f8 01             	cmp    eax,0x1
c00029a0:	0f 86 e9 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029a6:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029a9:	0f 86 e0 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029af:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029b3:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029b6:	0f af c2             	imul   eax,edx
c00029b9:	31 d2                	xor    edx,edx
c00029bb:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029be:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029c1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029c4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029c7:	89 da                	mov    edx,ebx
c00029c9:	31 c9                	xor    ecx,ecx
c00029cb:	c1 ea 07             	shr    edx,0x7
c00029ce:	89 e8                	mov    eax,ebp
c00029d0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029d3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029d6:	e8 41 f8 ff ff       	call   c000221c <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	0f 85 9d fb ff ff    	jne    c0002580 <mount_volume+0xb9>
c00029e3:	89 d8                	mov    eax,ebx
c00029e5:	83 e0 7f             	and    eax,0x7f
c00029e8:	8d 04 86             	lea    eax,[esi+eax*4]
c00029eb:	e8 62 f0 ff ff       	call   c0001a52 <ld_dword>
c00029f0:	83 f8 ff             	cmp    eax,0xffffffff
c00029f3:	74 0a                	je     c00029ff <mount_volume+0x538>
c00029f5:	43                   	inc    ebx
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	74 cd                	je     c00029c7 <mount_volume+0x500>
c00029fa:	e9 90 fb ff ff       	jmp    c000258f <mount_volume+0xc8>
c00029ff:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a06:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a0d:	bb 04 00 00 00       	mov    ebx,0x4
c0002a12:	e9 e8 fd ff ff       	jmp    c00027ff <mount_volume+0x338>
c0002a17:	31 db                	xor    ebx,ebx
c0002a19:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a1e:	0f 97 c3             	seta   bl
c0002a21:	43                   	inc    ebx
c0002a22:	e9 92 fc ff ff       	jmp    c00026b9 <mount_volume+0x1f2>
c0002a27:	83 c4 3c             	add    esp,0x3c
c0002a2a:	89 d8                	mov    eax,ebx
c0002a2c:	5b                   	pop    ebx
c0002a2d:	5e                   	pop    esi
c0002a2e:	5f                   	pop    edi
c0002a2f:	5d                   	pop    ebp
c0002a30:	c3                   	ret    

c0002a31 <find_bitmap>:
c0002a31:	55                   	push   ebp
c0002a32:	57                   	push   edi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	56                   	push   esi
c0002a36:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a39:	53                   	push   ebx
c0002a3a:	83 ec 1c             	sub    esp,0x1c
c0002a3d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a40:	83 e8 02             	sub    eax,0x2
c0002a43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a47:	39 f0                	cmp    eax,esi
c0002a49:	77 02                	ja     c0002a4d <find_bitmap+0x1c>
c0002a4b:	31 f6                	xor    esi,esi
c0002a4d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a51:	89 f3                	mov    ebx,esi
c0002a53:	31 ed                	xor    ebp,ebp
c0002a55:	89 da                	mov    edx,ebx
c0002a57:	31 c9                	xor    ecx,ecx
c0002a59:	c1 ea 0c             	shr    edx,0xc
c0002a5c:	89 f8                	mov    eax,edi
c0002a5e:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a61:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a64:	e8 b3 f7 ff ff       	call   c000221c <move_window>
c0002a69:	85 c0                	test   eax,eax
c0002a6b:	75 68                	jne    c0002ad5 <find_bitmap+0xa4>
c0002a6d:	89 d9                	mov    ecx,ebx
c0002a6f:	b8 01 00 00 00       	mov    eax,0x1
c0002a74:	83 e1 07             	and    ecx,0x7
c0002a77:	89 da                	mov    edx,ebx
c0002a79:	d3 e0                	shl    eax,cl
c0002a7b:	c1 ea 03             	shr    edx,0x3
c0002a7e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a81:	83 e9 02             	sub    ecx,0x2
c0002a84:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a8a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a8e:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a92:	43                   	inc    ebx
c0002a93:	21 c1                	and    ecx,eax
c0002a95:	01 c0                	add    eax,eax
c0002a97:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a9b:	77 09                	ja     c0002aa6 <find_bitmap+0x75>
c0002a9d:	31 db                	xor    ebx,ebx
c0002a9f:	ba 00 02 00 00       	mov    edx,0x200
c0002aa4:	31 c0                	xor    eax,eax
c0002aa6:	84 c9                	test   cl,cl
c0002aa8:	75 10                	jne    c0002aba <find_bitmap+0x89>
c0002aaa:	45                   	inc    ebp
c0002aab:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002aaf:	75 0f                	jne    c0002ac0 <find_bitmap+0x8f>
c0002ab1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ab5:	83 c0 02             	add    eax,0x2
c0002ab8:	eb 22                	jmp    c0002adc <find_bitmap+0xab>
c0002aba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002abe:	31 ed                	xor    ebp,ebp
c0002ac0:	39 de                	cmp    esi,ebx
c0002ac2:	74 16                	je     c0002ada <find_bitmap+0xa9>
c0002ac4:	84 c0                	test   al,al
c0002ac6:	75 c6                	jne    c0002a8e <find_bitmap+0x5d>
c0002ac8:	42                   	inc    edx
c0002ac9:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002acf:	77 84                	ja     c0002a55 <find_bitmap+0x24>
c0002ad1:	b0 01                	mov    al,0x1
c0002ad3:	eb b9                	jmp    c0002a8e <find_bitmap+0x5d>
c0002ad5:	83 c8 ff             	or     eax,0xffffffff
c0002ad8:	eb 02                	jmp    c0002adc <find_bitmap+0xab>
c0002ada:	31 c0                	xor    eax,eax
c0002adc:	83 c4 1c             	add    esp,0x1c
c0002adf:	5b                   	pop    ebx
c0002ae0:	5e                   	pop    esi
c0002ae1:	5f                   	pop    edi
c0002ae2:	5d                   	pop    ebp
c0002ae3:	c3                   	ret    

c0002ae4 <change_bitmap>:
c0002ae4:	55                   	push   ebp
c0002ae5:	89 cd                	mov    ebp,ecx
c0002ae7:	57                   	push   edi
c0002ae8:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002aeb:	56                   	push   esi
c0002aec:	89 c7                	mov    edi,eax
c0002aee:	53                   	push   ebx
c0002aef:	89 c8                	mov    eax,ecx
c0002af1:	83 ec 1c             	sub    esp,0x1c
c0002af4:	31 d2                	xor    edx,edx
c0002af6:	c1 e8 0c             	shr    eax,0xc
c0002af9:	89 ce                	mov    esi,ecx
c0002afb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002afe:	bb 01 00 00 00       	mov    ebx,0x1
c0002b03:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b06:	83 e1 07             	and    ecx,0x7
c0002b09:	c1 ee 03             	shr    esi,0x3
c0002b0c:	d3 e3                	shl    ebx,cl
c0002b0e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b14:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b18:	89 c1                	mov    ecx,eax
c0002b1a:	89 d3                	mov    ebx,edx
c0002b1c:	83 c1 01             	add    ecx,0x1
c0002b1f:	83 d3 00             	adc    ebx,0x0
c0002b22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b26:	89 d1                	mov    ecx,edx
c0002b28:	89 c2                	mov    edx,eax
c0002b2a:	89 f8                	mov    eax,edi
c0002b2c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b30:	e8 e7 f6 ff ff       	call   c000221c <move_window>
c0002b35:	89 c1                	mov    ecx,eax
c0002b37:	85 c0                	test   eax,eax
c0002b39:	75 48                	jne    c0002b83 <change_bitmap+0x9f>
c0002b3b:	31 d2                	xor    edx,edx
c0002b3d:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b41:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b45:	0f 95 c2             	setne  dl
c0002b48:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b4c:	74 3c                	je     c0002b8a <change_bitmap+0xa6>
c0002b4e:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b52:	4d                   	dec    ebp
c0002b53:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b57:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b5b:	74 32                	je     c0002b8f <change_bitmap+0xab>
c0002b5d:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b61:	75 d8                	jne    c0002b3b <change_bitmap+0x57>
c0002b63:	8d 46 01             	lea    eax,[esi+0x1]
c0002b66:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b6b:	89 c3                	mov    ebx,eax
c0002b6d:	31 f6                	xor    esi,esi
c0002b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b77:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b7d:	74 99                	je     c0002b18 <change_bitmap+0x34>
c0002b7f:	89 de                	mov    esi,ebx
c0002b81:	eb b8                	jmp    c0002b3b <change_bitmap+0x57>
c0002b83:	b9 01 00 00 00       	mov    ecx,0x1
c0002b88:	eb 05                	jmp    c0002b8f <change_bitmap+0xab>
c0002b8a:	b9 02 00 00 00       	mov    ecx,0x2
c0002b8f:	83 c4 1c             	add    esp,0x1c
c0002b92:	89 c8                	mov    eax,ecx
c0002b94:	5b                   	pop    ebx
c0002b95:	5e                   	pop    esi
c0002b96:	5f                   	pop    edi
c0002b97:	5d                   	pop    ebp
c0002b98:	c3                   	ret    

c0002b99 <put_fat>:
c0002b99:	83 fa 01             	cmp    edx,0x1
c0002b9c:	0f 86 7b 01 00 00    	jbe    c0002d1d <put_fat+0x184>
c0002ba2:	55                   	push   ebp
c0002ba3:	57                   	push   edi
c0002ba4:	89 cf                	mov    edi,ecx
c0002ba6:	56                   	push   esi
c0002ba7:	b9 02 00 00 00       	mov    ecx,0x2
c0002bac:	53                   	push   ebx
c0002bad:	89 c6                	mov    esi,eax
c0002baf:	83 ec 1c             	sub    esp,0x1c
c0002bb2:	89 d3                	mov    ebx,edx
c0002bb4:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bb7:	0f 86 68 01 00 00    	jbe    c0002d25 <put_fat+0x18c>
c0002bbd:	8a 00                	mov    al,BYTE PTR [eax]
c0002bbf:	3c 02                	cmp    al,0x2
c0002bc1:	0f 84 c7 00 00 00    	je     c0002c8e <put_fat+0xf5>
c0002bc7:	77 09                	ja     c0002bd2 <put_fat+0x39>
c0002bc9:	fe c8                	dec    al
c0002bcb:	74 17                	je     c0002be4 <put_fat+0x4b>
c0002bcd:	e9 53 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002bd2:	b9 02 00 00 00       	mov    ecx,0x2
c0002bd7:	3c 04                	cmp    al,0x4
c0002bd9:	0f 86 e1 00 00 00    	jbe    c0002cc0 <put_fat+0x127>
c0002bdf:	e9 41 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002be4:	89 d5                	mov    ebp,edx
c0002be6:	31 c9                	xor    ecx,ecx
c0002be8:	d1 ed                	shr    ebp,1
c0002bea:	89 f0                	mov    eax,esi
c0002bec:	01 d5                	add    ebp,edx
c0002bee:	89 ea                	mov    edx,ebp
c0002bf0:	c1 ea 09             	shr    edx,0x9
c0002bf3:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bf6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf9:	e8 1e f6 ff ff       	call   c000221c <move_window>
c0002bfe:	89 c1                	mov    ecx,eax
c0002c00:	85 c0                	test   eax,eax
c0002c02:	0f 85 1d 01 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c08:	8d 46 54             	lea    eax,[esi+0x54]
c0002c0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c0f:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c12:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c20:	83 e3 01             	and    ebx,0x1
c0002c23:	89 f8                	mov    eax,edi
c0002c25:	74 0d                	je     c0002c34 <put_fat+0x9b>
c0002c27:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c2a:	89 fa                	mov    edx,edi
c0002c2c:	c1 e2 04             	shl    edx,0x4
c0002c2f:	83 e0 0f             	and    eax,0xf
c0002c32:	09 d0                	or     eax,edx
c0002c34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c38:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c3b:	c1 ea 09             	shr    edx,0x9
c0002c3e:	31 c9                	xor    ecx,ecx
c0002c40:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c43:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c47:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c4a:	89 f0                	mov    eax,esi
c0002c4c:	e8 cb f5 ff ff       	call   c000221c <move_window>
c0002c51:	89 c1                	mov    ecx,eax
c0002c53:	85 c0                	test   eax,eax
c0002c55:	0f 85 ca 00 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c5b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c5f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c65:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c69:	85 db                	test   ebx,ebx
c0002c6b:	74 07                	je     c0002c74 <put_fat+0xdb>
c0002c6d:	c1 ef 04             	shr    edi,0x4
c0002c70:	89 fa                	mov    edx,edi
c0002c72:	eb 0e                	jmp    c0002c82 <put_fat+0xe9>
c0002c74:	c1 ef 08             	shr    edi,0x8
c0002c77:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c7a:	83 e2 f0             	and    edx,0xfffffff0
c0002c7d:	83 e7 0f             	and    edi,0xf
c0002c80:	09 fa                	or     edx,edi
c0002c82:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c85:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c89:	e9 97 00 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002c8e:	c1 ea 08             	shr    edx,0x8
c0002c91:	31 c9                	xor    ecx,ecx
c0002c93:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c96:	89 f0                	mov    eax,esi
c0002c98:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c9b:	e8 7c f5 ff ff       	call   c000221c <move_window>
c0002ca0:	89 c1                	mov    ecx,eax
c0002ca2:	85 c0                	test   eax,eax
c0002ca4:	75 7f                	jne    c0002d25 <put_fat+0x18c>
c0002ca6:	01 db                	add    ebx,ebx
c0002ca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cac:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cb2:	0f b7 d7             	movzx  edx,di
c0002cb5:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cb9:	e8 f9 ed ff ff       	call   c0001ab7 <st_word>
c0002cbe:	eb 53                	jmp    c0002d13 <put_fat+0x17a>
c0002cc0:	c1 ea 07             	shr    edx,0x7
c0002cc3:	31 c9                	xor    ecx,ecx
c0002cc5:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ccd:	e8 4a f5 ff ff       	call   c000221c <move_window>
c0002cd2:	89 c1                	mov    ecx,eax
c0002cd4:	85 c0                	test   eax,eax
c0002cd6:	75 4d                	jne    c0002d25 <put_fat+0x18c>
c0002cd8:	c1 e3 02             	shl    ebx,0x2
c0002cdb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ce4:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ce8:	74 1c                	je     c0002d06 <put_fat+0x16d>
c0002cea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cee:	89 d8                	mov    eax,ebx
c0002cf0:	e8 5d ed ff ff       	call   c0001a52 <ld_dword>
c0002cf5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cfb:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d04:	09 c7                	or     edi,eax
c0002d06:	89 fa                	mov    edx,edi
c0002d08:	89 d8                	mov    eax,ebx
c0002d0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d0e:	e8 a8 ed ff ff       	call   c0001abb <st_dword>
c0002d13:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d1b:	eb 08                	jmp    c0002d25 <put_fat+0x18c>
c0002d1d:	b9 02 00 00 00       	mov    ecx,0x2
c0002d22:	89 c8                	mov    eax,ecx
c0002d24:	c3                   	ret    
c0002d25:	83 c4 1c             	add    esp,0x1c
c0002d28:	89 c8                	mov    eax,ecx
c0002d2a:	5b                   	pop    ebx
c0002d2b:	5e                   	pop    esi
c0002d2c:	5f                   	pop    edi
c0002d2d:	5d                   	pop    ebp
c0002d2e:	c3                   	ret    

c0002d2f <fill_last_frag>:
c0002d2f:	57                   	push   edi
c0002d30:	89 cf                	mov    edi,ecx
c0002d32:	56                   	push   esi
c0002d33:	89 d6                	mov    esi,edx
c0002d35:	53                   	push   ebx
c0002d36:	89 c3                	mov    ebx,eax
c0002d38:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d3b:	85 c0                	test   eax,eax
c0002d3d:	74 21                	je     c0002d60 <fill_last_frag+0x31>
c0002d3f:	89 f9                	mov    ecx,edi
c0002d41:	83 f8 01             	cmp    eax,0x1
c0002d44:	76 05                	jbe    c0002d4b <fill_last_frag+0x1c>
c0002d46:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d49:	29 c1                	sub    ecx,eax
c0002d4b:	8d 56 01             	lea    edx,[esi+0x1]
c0002d4e:	29 c2                	sub    edx,eax
c0002d50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d52:	e8 42 fe ff ff       	call   c0002b99 <put_fat>
c0002d57:	85 c0                	test   eax,eax
c0002d59:	75 05                	jne    c0002d60 <fill_last_frag+0x31>
c0002d5b:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d5e:	eb d8                	jmp    c0002d38 <fill_last_frag+0x9>
c0002d60:	5b                   	pop    ebx
c0002d61:	5e                   	pop    esi
c0002d62:	5f                   	pop    edi
c0002d63:	c3                   	ret    

c0002d64 <fill_first_frag>:
c0002d64:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d68:	75 2d                	jne    c0002d97 <fill_first_frag+0x33>
c0002d6a:	57                   	push   edi
c0002d6b:	56                   	push   esi
c0002d6c:	53                   	push   ebx
c0002d6d:	89 c3                	mov    ebx,eax
c0002d6f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d72:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d75:	01 d7                	add    edi,edx
c0002d77:	39 fa                	cmp    edx,edi
c0002d79:	74 14                	je     c0002d8f <fill_first_frag+0x2b>
c0002d7b:	8d 72 01             	lea    esi,[edx+0x1]
c0002d7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d80:	89 f1                	mov    ecx,esi
c0002d82:	e8 12 fe ff ff       	call   c0002b99 <put_fat>
c0002d87:	89 f2                	mov    edx,esi
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	74 ea                	je     c0002d77 <fill_first_frag+0x13>
c0002d8d:	eb 0b                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d8f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d93:	31 c0                	xor    eax,eax
c0002d95:	eb 03                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d97:	31 c0                	xor    eax,eax
c0002d99:	c3                   	ret    
c0002d9a:	5b                   	pop    ebx
c0002d9b:	5e                   	pop    esi
c0002d9c:	5f                   	pop    edi
c0002d9d:	c3                   	ret    

c0002d9e <get_fat>:
c0002d9e:	83 fa 01             	cmp    edx,0x1
c0002da1:	0f 86 db 01 00 00    	jbe    c0002f82 <get_fat+0x1e4>
c0002da7:	55                   	push   ebp
c0002da8:	b9 01 00 00 00       	mov    ecx,0x1
c0002dad:	57                   	push   edi
c0002dae:	56                   	push   esi
c0002daf:	53                   	push   ebx
c0002db0:	83 ec 1c             	sub    esp,0x1c
c0002db3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002db5:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002db8:	0f 86 cc 01 00 00    	jbe    c0002f8a <get_fat+0x1ec>
c0002dbe:	89 c3                	mov    ebx,eax
c0002dc0:	8a 07                	mov    al,BYTE PTR [edi]
c0002dc2:	89 d6                	mov    esi,edx
c0002dc4:	3c 02                	cmp    al,0x2
c0002dc6:	0f 84 99 00 00 00    	je     c0002e65 <get_fat+0xc7>
c0002dcc:	77 09                	ja     c0002dd7 <get_fat+0x39>
c0002dce:	fe c8                	dec    al
c0002dd0:	74 1a                	je     c0002dec <get_fat+0x4e>
c0002dd2:	e9 b3 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dd7:	3c 03                	cmp    al,0x3
c0002dd9:	0f 84 b5 00 00 00    	je     c0002e94 <get_fat+0xf6>
c0002ddf:	3c 04                	cmp    al,0x4
c0002de1:	0f 84 e3 00 00 00    	je     c0002eca <get_fat+0x12c>
c0002de7:	e9 9e 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dec:	89 d3                	mov    ebx,edx
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	d1 eb                	shr    ebx,1
c0002df2:	89 f8                	mov    eax,edi
c0002df4:	01 d3                	add    ebx,edx
c0002df6:	89 da                	mov    edx,ebx
c0002df8:	c1 ea 09             	shr    edx,0x9
c0002dfb:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dfe:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e01:	e8 16 f4 ff ff       	call   c000221c <move_window>
c0002e06:	85 c0                	test   eax,eax
c0002e08:	74 08                	je     c0002e12 <get_fat+0x74>
c0002e0a:	83 c9 ff             	or     ecx,0xffffffff
c0002e0d:	e9 78 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e12:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e15:	31 c9                	xor    ecx,ecx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e1f:	c1 ea 09             	shr    edx,0x9
c0002e22:	89 f8                	mov    eax,edi
c0002e24:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e27:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e2b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e2e:	e8 e9 f3 ff ff       	call   c000221c <move_window>
c0002e33:	85 c0                	test   eax,eax
c0002e35:	75 d3                	jne    c0002e0a <get_fat+0x6c>
c0002e37:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e3d:	0f b6 c3             	movzx  eax,bl
c0002e40:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e45:	c1 e3 08             	shl    ebx,0x8
c0002e48:	09 c3                	or     ebx,eax
c0002e4a:	89 d9                	mov    ecx,ebx
c0002e4c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e52:	83 e6 01             	and    esi,0x1
c0002e55:	0f 84 2f 01 00 00    	je     c0002f8a <get_fat+0x1ec>
c0002e5b:	89 d9                	mov    ecx,ebx
c0002e5d:	c1 e9 04             	shr    ecx,0x4
c0002e60:	e9 25 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e65:	c1 ea 08             	shr    edx,0x8
c0002e68:	31 c9                	xor    ecx,ecx
c0002e6a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e6d:	89 f8                	mov    eax,edi
c0002e6f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e72:	e8 a5 f3 ff ff       	call   c000221c <move_window>
c0002e77:	85 c0                	test   eax,eax
c0002e79:	75 8f                	jne    c0002e0a <get_fat+0x6c>
c0002e7b:	01 f6                	add    esi,esi
c0002e7d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e83:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e87:	e8 b9 eb ff ff       	call   c0001a45 <ld_word>
c0002e8c:	0f b7 c8             	movzx  ecx,ax
c0002e8f:	e9 f6 00 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e94:	c1 ea 07             	shr    edx,0x7
c0002e97:	31 c9                	xor    ecx,ecx
c0002e99:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9c:	89 f8                	mov    eax,edi
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 76 f3 ff ff       	call   c000221c <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 5c ff ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 92 eb ff ff       	call   c0001a52 <ld_dword>
c0002ec0:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ec5:	e9 b4 00 00 00       	jmp    c0002f7e <get_fat+0x1e0>
c0002eca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ecd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed0:	89 d1                	mov    ecx,edx
c0002ed2:	09 c1                	or     ecx,eax
c0002ed4:	74 06                	je     c0002edc <get_fat+0x13e>
c0002ed6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eda:	75 0f                	jne    c0002eeb <get_fat+0x14d>
c0002edc:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee1:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ee5:	0f 85 9f 00 00 00    	jne    c0002f8a <get_fat+0x1ec>
c0002eeb:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eef:	89 f5                	mov    ebp,esi
c0002ef1:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ef6:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ef9:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002efc:	80 f9 02             	cmp    cl,0x2
c0002eff:	75 35                	jne    c0002f36 <get_fat+0x198>
c0002f01:	83 c0 ff             	add    eax,0xffffffff
c0002f04:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f09:	83 d2 ff             	adc    edx,0xffffffff
c0002f0c:	31 db                	xor    ebx,ebx
c0002f0e:	53                   	push   ebx
c0002f0f:	51                   	push   ecx
c0002f10:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f14:	c1 ea 09             	shr    edx,0x9
c0002f17:	52                   	push   edx
c0002f18:	50                   	push   eax
c0002f19:	e8 6e c4 01 00       	call   c001f38c <__udivdi3>
c0002f1e:	83 c4 10             	add    esp,0x10
c0002f21:	b9 01 00 00 00       	mov    ecx,0x1
c0002f26:	39 c5                	cmp    ebp,eax
c0002f28:	77 60                	ja     c0002f8a <get_fat+0x1ec>
c0002f2a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f2f:	74 59                	je     c0002f8a <get_fat+0x1ec>
c0002f31:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f34:	eb 54                	jmp    c0002f8a <get_fat+0x1ec>
c0002f36:	80 f9 03             	cmp    cl,0x3
c0002f39:	75 05                	jne    c0002f40 <get_fat+0x1a2>
c0002f3b:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f3e:	77 f1                	ja     c0002f31 <get_fat+0x193>
c0002f40:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f45:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f49:	75 3f                	jne    c0002f8a <get_fat+0x1ec>
c0002f4b:	89 f2                	mov    edx,esi
c0002f4d:	31 c9                	xor    ecx,ecx
c0002f4f:	c1 ea 07             	shr    edx,0x7
c0002f52:	89 f8                	mov    eax,edi
c0002f54:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f57:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f5a:	e8 bd f2 ff ff       	call   c000221c <move_window>
c0002f5f:	85 c0                	test   eax,eax
c0002f61:	0f 85 a3 fe ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002f67:	c1 e6 02             	shl    esi,0x2
c0002f6a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f70:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f74:	e8 d9 ea ff ff       	call   c0001a52 <ld_dword>
c0002f79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f7e:	89 c1                	mov    ecx,eax
c0002f80:	eb 08                	jmp    c0002f8a <get_fat+0x1ec>
c0002f82:	b9 01 00 00 00       	mov    ecx,0x1
c0002f87:	89 c8                	mov    eax,ecx
c0002f89:	c3                   	ret    
c0002f8a:	83 c4 1c             	add    esp,0x1c
c0002f8d:	89 c8                	mov    eax,ecx
c0002f8f:	5b                   	pop    ebx
c0002f90:	5e                   	pop    esi
c0002f91:	5f                   	pop    edi
c0002f92:	5d                   	pop    ebp
c0002f93:	c3                   	ret    

c0002f94 <dir_sdi>:
c0002f94:	55                   	push   ebp
c0002f95:	57                   	push   edi
c0002f96:	56                   	push   esi
c0002f97:	53                   	push   ebx
c0002f98:	89 c3                	mov    ebx,eax
c0002f9a:	83 ec 1c             	sub    esp,0x1c
c0002f9d:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f9f:	31 c0                	xor    eax,eax
c0002fa1:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fa4:	0f 94 c0             	sete   al
c0002fa7:	48                   	dec    eax
c0002fa8:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fad:	05 00 00 00 10       	add    eax,0x10000000
c0002fb2:	39 d0                	cmp    eax,edx
c0002fb4:	77 0a                	ja     c0002fc0 <dir_sdi+0x2c>
c0002fb6:	b8 02 00 00 00       	mov    eax,0x2
c0002fbb:	e9 c4 00 00 00       	jmp    c0003084 <dir_sdi+0xf0>
c0002fc0:	89 d6                	mov    esi,edx
c0002fc2:	f6 c2 1f             	test   dl,0x1f
c0002fc5:	75 ef                	jne    c0002fb6 <dir_sdi+0x22>
c0002fc7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fca:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fcd:	85 c9                	test   ecx,ecx
c0002fcf:	75 2d                	jne    c0002ffe <dir_sdi+0x6a>
c0002fd1:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fd4:	77 1b                	ja     c0002ff1 <dir_sdi+0x5d>
c0002fd6:	89 f2                	mov    edx,esi
c0002fd8:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fdc:	c1 ea 05             	shr    edx,0x5
c0002fdf:	39 c2                	cmp    edx,eax
c0002fe1:	73 d3                	jae    c0002fb6 <dir_sdi+0x22>
c0002fe3:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fe6:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fe9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fec:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fef:	eb 4b                	jmp    c000303c <dir_sdi+0xa8>
c0002ff1:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff4:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ff8:	85 c0                	test   eax,eax
c0002ffa:	74 da                	je     c0002fd6 <dir_sdi+0x42>
c0002ffc:	89 c1                	mov    ecx,eax
c0002ffe:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003002:	c1 e5 09             	shl    ebp,0x9
c0003005:	89 ca                	mov    edx,ecx
c0003007:	39 ee                	cmp    esi,ebp
c0003009:	72 1c                	jb     c0003027 <dir_sdi+0x93>
c000300b:	89 d8                	mov    eax,ebx
c000300d:	e8 8c fd ff ff       	call   c0002d9e <get_fat>
c0003012:	89 c1                	mov    ecx,eax
c0003014:	83 f8 ff             	cmp    eax,0xffffffff
c0003017:	74 66                	je     c000307f <dir_sdi+0xeb>
c0003019:	83 f8 01             	cmp    eax,0x1
c000301c:	76 98                	jbe    c0002fb6 <dir_sdi+0x22>
c000301e:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003021:	76 93                	jbe    c0002fb6 <dir_sdi+0x22>
c0003023:	29 ee                	sub    esi,ebp
c0003025:	eb de                	jmp    c0003005 <dir_sdi+0x71>
c0003027:	89 f8                	mov    eax,edi
c0003029:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302d:	e8 ac ec ff ff       	call   c0001cde <clst2sect>
c0003032:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003036:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000303f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003042:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003045:	89 d1                	mov    ecx,edx
c0003047:	09 c1                	or     ecx,eax
c0003049:	0f 84 67 ff ff ff    	je     c0002fb6 <dir_sdi+0x22>
c000304f:	89 f1                	mov    ecx,esi
c0003051:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003059:	c1 e9 09             	shr    ecx,0x9
c000305c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003060:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003064:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003068:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000306e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003071:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003075:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003078:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000307b:	31 c0                	xor    eax,eax
c000307d:	eb 05                	jmp    c0003084 <dir_sdi+0xf0>
c000307f:	b8 01 00 00 00       	mov    eax,0x1
c0003084:	83 c4 1c             	add    esp,0x1c
c0003087:	5b                   	pop    ebx
c0003088:	5e                   	pop    esi
c0003089:	5f                   	pop    edi
c000308a:	5d                   	pop    ebp
c000308b:	c3                   	ret    

c000308c <create_chain>:
c000308c:	55                   	push   ebp
c000308d:	89 c5                	mov    ebp,eax
c000308f:	57                   	push   edi
c0003090:	56                   	push   esi
c0003091:	53                   	push   ebx
c0003092:	83 ec 1c             	sub    esp,0x1c
c0003095:	85 d2                	test   edx,edx
c0003097:	8b 30                	mov    esi,DWORD PTR [eax]
c0003099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000309d:	75 0e                	jne    c00030ad <create_chain+0x21>
c000309f:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030a2:	85 ff                	test   edi,edi
c00030a4:	74 39                	je     c00030df <create_chain+0x53>
c00030a6:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030a9:	77 39                	ja     c00030e4 <create_chain+0x58>
c00030ab:	eb 32                	jmp    c00030df <create_chain+0x53>
c00030ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b1:	e8 e8 fc ff ff       	call   c0002d9e <get_fat>
c00030b6:	89 c3                	mov    ebx,eax
c00030b8:	83 f8 01             	cmp    eax,0x1
c00030bb:	77 0a                	ja     c00030c7 <create_chain+0x3b>
c00030bd:	bb 01 00 00 00       	mov    ebx,0x1
c00030c2:	e9 bc 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030c7:	83 f8 ff             	cmp    eax,0xffffffff
c00030ca:	0f 84 60 01 00 00    	je     c0003230 <create_chain+0x1a4>
c00030d0:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030d3:	0f 87 aa 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c00030d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030dd:	eb 05                	jmp    c00030e4 <create_chain+0x58>
c00030df:	bf 01 00 00 00       	mov    edi,0x1
c00030e4:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030e8:	75 07                	jne    c00030f1 <create_chain+0x65>
c00030ea:	31 db                	xor    ebx,ebx
c00030ec:	e9 92 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030f1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030f4:	75 74                	jne    c000316a <create_chain+0xde>
c00030f6:	b9 01 00 00 00       	mov    ecx,0x1
c00030fb:	89 fa                	mov    edx,edi
c00030fd:	89 f0                	mov    eax,esi
c00030ff:	e8 2d f9 ff ff       	call   c0002a31 <find_bitmap>
c0003104:	89 c3                	mov    ebx,eax
c0003106:	8d 40 ff             	lea    eax,[eax-0x1]
c0003109:	83 f8 fd             	cmp    eax,0xfffffffd
c000310c:	0f 87 71 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c0003112:	83 ec 0c             	sub    esp,0xc
c0003115:	b9 01 00 00 00       	mov    ecx,0x1
c000311a:	89 da                	mov    edx,ebx
c000311c:	89 f0                	mov    eax,esi
c000311e:	6a 01                	push   0x1
c0003120:	e8 bf f9 ff ff       	call   c0002ae4 <change_bitmap>
c0003125:	83 c4 10             	add    esp,0x10
c0003128:	83 f8 02             	cmp    eax,0x2
c000312b:	74 90                	je     c00030bd <create_chain+0x31>
c000312d:	83 f8 01             	cmp    eax,0x1
c0003130:	0f 84 fa 00 00 00    	je     c0003230 <create_chain+0x1a4>
c0003136:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000313b:	75 09                	jne    c0003146 <create_chain+0xba>
c000313d:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003141:	e9 0e 01 00 00       	jmp    c0003254 <create_chain+0x1c8>
c0003146:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000314a:	0f 85 e9 00 00 00    	jne    c0003239 <create_chain+0x1ad>
c0003150:	8d 57 01             	lea    edx,[edi+0x1]
c0003153:	39 da                	cmp    edx,ebx
c0003155:	0f 84 f9 00 00 00    	je     c0003254 <create_chain+0x1c8>
c000315b:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000315e:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003162:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003165:	e9 cf 00 00 00       	jmp    c0003239 <create_chain+0x1ad>
c000316a:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000316e:	75 41                	jne    c00031b1 <create_chain+0x125>
c0003170:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003173:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003176:	77 05                	ja     c000317d <create_chain+0xf1>
c0003178:	bb 02 00 00 00       	mov    ebx,0x2
c000317d:	89 da                	mov    edx,ebx
c000317f:	89 e8                	mov    eax,ebp
c0003181:	e8 18 fc ff ff       	call   c0002d9e <get_fat>
c0003186:	83 f8 01             	cmp    eax,0x1
c0003189:	0f 84 a6 00 00 00    	je     c0003235 <create_chain+0x1a9>
c000318f:	83 f8 ff             	cmp    eax,0xffffffff
c0003192:	0f 84 9d 00 00 00    	je     c0003235 <create_chain+0x1a9>
c0003198:	85 c0                	test   eax,eax
c000319a:	74 11                	je     c00031ad <create_chain+0x121>
c000319c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	76 0d                	jbe    c00031b1 <create_chain+0x125>
c00031a4:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031a7:	76 08                	jbe    c00031b1 <create_chain+0x125>
c00031a9:	89 c7                	mov    edi,eax
c00031ab:	eb 04                	jmp    c00031b1 <create_chain+0x125>
c00031ad:	85 db                	test   ebx,ebx
c00031af:	75 36                	jne    c00031e7 <create_chain+0x15b>
c00031b1:	89 fb                	mov    ebx,edi
c00031b3:	43                   	inc    ebx
c00031b4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031b7:	77 0e                	ja     c00031c7 <create_chain+0x13b>
c00031b9:	83 ff 01             	cmp    edi,0x1
c00031bc:	0f 86 28 ff ff ff    	jbe    c00030ea <create_chain+0x5e>
c00031c2:	bb 02 00 00 00       	mov    ebx,0x2
c00031c7:	89 da                	mov    edx,ebx
c00031c9:	89 e8                	mov    eax,ebp
c00031cb:	e8 ce fb ff ff       	call   c0002d9e <get_fat>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 13                	je     c00031e7 <create_chain+0x15b>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	74 5c                	je     c0003235 <create_chain+0x1a9>
c00031d9:	83 f8 ff             	cmp    eax,0xffffffff
c00031dc:	74 57                	je     c0003235 <create_chain+0x1a9>
c00031de:	39 fb                	cmp    ebx,edi
c00031e0:	75 d1                	jne    c00031b3 <create_chain+0x127>
c00031e2:	e9 03 ff ff ff       	jmp    c00030ea <create_chain+0x5e>
c00031e7:	83 c9 ff             	or     ecx,0xffffffff
c00031ea:	89 da                	mov    edx,ebx
c00031ec:	89 f0                	mov    eax,esi
c00031ee:	e8 a6 f9 ff ff       	call   c0002b99 <put_fat>
c00031f3:	85 c0                	test   eax,eax
c00031f5:	75 14                	jne    c000320b <create_chain+0x17f>
c00031f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031fc:	74 0d                	je     c000320b <create_chain+0x17f>
c00031fe:	89 d9                	mov    ecx,ebx
c0003200:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003204:	89 f0                	mov    eax,esi
c0003206:	e8 8e f9 ff ff       	call   c0002b99 <put_fat>
c000320b:	85 c0                	test   eax,eax
c000320d:	75 1a                	jne    c0003229 <create_chain+0x19d>
c000320f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003212:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003215:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003218:	8d 51 fe             	lea    edx,[ecx-0x2]
c000321b:	39 d0                	cmp    eax,edx
c000321d:	77 04                	ja     c0003223 <create_chain+0x197>
c000321f:	48                   	dec    eax
c0003220:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003223:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003227:	eb 5a                	jmp    c0003283 <create_chain+0x1f7>
c0003229:	48                   	dec    eax
c000322a:	0f 85 8d fe ff ff    	jne    c00030bd <create_chain+0x31>
c0003230:	83 cb ff             	or     ebx,0xffffffff
c0003233:	eb 4e                	jmp    c0003283 <create_chain+0x1f7>
c0003235:	89 c3                	mov    ebx,eax
c0003237:	eb 4a                	jmp    c0003283 <create_chain+0x1f7>
c0003239:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000323d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003240:	41                   	inc    ecx
c0003241:	39 d9                	cmp    ecx,ebx
c0003243:	75 19                	jne    c000325e <create_chain+0x1d2>
c0003245:	b9 02 00 00 00       	mov    ecx,0x2
c000324a:	85 d2                	test   edx,edx
c000324c:	74 03                	je     c0003251 <create_chain+0x1c5>
c000324e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003251:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003254:	85 c0                	test   eax,eax
c0003256:	0f 85 61 fe ff ff    	jne    c00030bd <create_chain+0x31>
c000325c:	eb b1                	jmp    c000320f <create_chain+0x183>
c000325e:	85 d2                	test   edx,edx
c0003260:	75 07                	jne    c0003269 <create_chain+0x1dd>
c0003262:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003269:	89 d9                	mov    ecx,ebx
c000326b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000326f:	89 e8                	mov    eax,ebp
c0003271:	e8 b9 fa ff ff       	call   c0002d2f <fill_last_frag>
c0003276:	85 c0                	test   eax,eax
c0003278:	75 af                	jne    c0003229 <create_chain+0x19d>
c000327a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003281:	eb 8c                	jmp    c000320f <create_chain+0x183>
c0003283:	83 c4 1c             	add    esp,0x1c
c0003286:	89 d8                	mov    eax,ebx
c0003288:	5b                   	pop    ebx
c0003289:	5e                   	pop    esi
c000328a:	5f                   	pop    edi
c000328b:	5d                   	pop    ebp
c000328c:	c3                   	ret    

c000328d <remove_chain>:
c000328d:	55                   	push   ebp
c000328e:	57                   	push   edi
c000328f:	56                   	push   esi
c0003290:	53                   	push   ebx
c0003291:	83 ec 1c             	sub    esp,0x1c
c0003294:	83 fa 01             	cmp    edx,0x1
c0003297:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003299:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329d:	77 0a                	ja     c00032a9 <remove_chain+0x1c>
c000329f:	b8 02 00 00 00       	mov    eax,0x2
c00032a4:	e9 24 01 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032a9:	89 d6                	mov    esi,edx
c00032ab:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032ae:	76 ef                	jbe    c000329f <remove_chain+0x12>
c00032b0:	89 c7                	mov    edi,eax
c00032b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032b7:	75 06                	jne    c00032bf <remove_chain+0x32>
c00032b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032bd:	eb 54                	jmp    c0003313 <remove_chain+0x86>
c00032bf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c2:	75 06                	jne    c00032ca <remove_chain+0x3d>
c00032c4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032c8:	74 ef                	je     c00032b9 <remove_chain+0x2c>
c00032ca:	83 c9 ff             	or     ecx,0xffffffff
c00032cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d1:	89 d8                	mov    eax,ebx
c00032d3:	e8 c1 f8 ff ff       	call   c0002b99 <put_fat>
c00032d8:	85 c0                	test   eax,eax
c00032da:	74 dd                	je     c00032b9 <remove_chain+0x2c>
c00032dc:	e9 ec 00 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	74 b9                	je     c000329f <remove_chain+0x12>
c00032e6:	83 f8 ff             	cmp    eax,0xffffffff
c00032e9:	74 6d                	je     c0003358 <remove_chain+0xcb>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	75 6f                	jne    c000335f <remove_chain+0xd2>
c00032f0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032f6:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032f9:	39 d0                	cmp    eax,edx
c00032fb:	73 08                	jae    c0003305 <remove_chain+0x78>
c00032fd:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003301:	40                   	inc    eax
c0003302:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003305:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003308:	39 e9                	cmp    ecx,ebp
c000330a:	75 64                	jne    c0003370 <remove_chain+0xe3>
c000330c:	89 ee                	mov    esi,ebp
c000330e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003311:	76 0f                	jbe    c0003322 <remove_chain+0x95>
c0003313:	89 f2                	mov    edx,esi
c0003315:	89 f8                	mov    eax,edi
c0003317:	e8 82 fa ff ff       	call   c0002d9e <get_fat>
c000331c:	89 c5                	mov    ebp,eax
c000331e:	85 c0                	test   eax,eax
c0003320:	75 bf                	jne    c00032e1 <remove_chain+0x54>
c0003322:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003325:	0f 85 a0 00 00 00    	jne    c00033cb <remove_chain+0x13e>
c000332b:	eb 6c                	jmp    c0003399 <remove_chain+0x10c>
c000332d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003330:	84 c0                	test   al,al
c0003332:	75 7d                	jne    c00033b1 <remove_chain+0x124>
c0003334:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003337:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000333b:	0f 84 86 00 00 00    	je     c00033c7 <remove_chain+0x13a>
c0003341:	89 da                	mov    edx,ebx
c0003343:	89 f8                	mov    eax,edi
c0003345:	e8 54 fa ff ff       	call   c0002d9e <get_fat>
c000334a:	83 f8 01             	cmp    eax,0x1
c000334d:	0f 86 4c ff ff ff    	jbe    c000329f <remove_chain+0x12>
c0003353:	83 f8 ff             	cmp    eax,0xffffffff
c0003356:	75 4e                	jne    c00033a6 <remove_chain+0x119>
c0003358:	b8 01 00 00 00       	mov    eax,0x1
c000335d:	eb 6e                	jmp    c00033cd <remove_chain+0x140>
c000335f:	31 c9                	xor    ecx,ecx
c0003361:	89 f2                	mov    edx,esi
c0003363:	89 d8                	mov    eax,ebx
c0003365:	e8 2f f8 ff ff       	call   c0002b99 <put_fat>
c000336a:	85 c0                	test   eax,eax
c000336c:	74 82                	je     c00032f0 <remove_chain+0x63>
c000336e:	eb 5d                	jmp    c00033cd <remove_chain+0x140>
c0003370:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003373:	75 1b                	jne    c0003390 <remove_chain+0x103>
c0003375:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003379:	83 ec 0c             	sub    esp,0xc
c000337c:	6a 00                	push   0x0
c000337e:	89 d8                	mov    eax,ebx
c0003380:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003384:	e8 5b f7 ff ff       	call   c0002ae4 <change_bitmap>
c0003389:	83 c4 10             	add    esp,0x10
c000338c:	85 c0                	test   eax,eax
c000338e:	75 3d                	jne    c00033cd <remove_chain+0x140>
c0003390:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003394:	e9 73 ff ff ff       	jmp    c000330c <remove_chain+0x7f>
c0003399:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000339e:	75 8d                	jne    c000332d <remove_chain+0xa0>
c00033a0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033a4:	eb 25                	jmp    c00033cb <remove_chain+0x13e>
c00033a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033a9:	89 c3                	mov    ebx,eax
c00033ab:	39 c2                	cmp    edx,eax
c00033ad:	74 88                	je     c0003337 <remove_chain+0xaa>
c00033af:	eb 1a                	jmp    c00033cb <remove_chain+0x13e>
c00033b1:	3c 03                	cmp    al,0x3
c00033b3:	75 16                	jne    c00033cb <remove_chain+0x13e>
c00033b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033b8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033bc:	77 0d                	ja     c00033cb <remove_chain+0x13e>
c00033be:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c5:	72 04                	jb     c00033cb <remove_chain+0x13e>
c00033c7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033cb:	31 c0                	xor    eax,eax
c00033cd:	83 c4 1c             	add    esp,0x1c
c00033d0:	5b                   	pop    ebx
c00033d1:	5e                   	pop    esi
c00033d2:	5f                   	pop    edi
c00033d3:	5d                   	pop    ebp
c00033d4:	c3                   	ret    

c00033d5 <dir_clear>:
c00033d5:	55                   	push   ebp
c00033d6:	57                   	push   edi
c00033d7:	56                   	push   esi
c00033d8:	89 c6                	mov    esi,eax
c00033da:	53                   	push   ebx
c00033db:	83 ec 1c             	sub    esp,0x1c
c00033de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e2:	e8 a1 ed ff ff       	call   c0002188 <sync_window>
c00033e7:	85 c0                	test   eax,eax
c00033e9:	0f 85 de 00 00 00    	jne    c00034cd <dir_clear+0xf8>
c00033ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f3:	89 f0                	mov    eax,esi
c00033f5:	e8 e4 e8 ff ff       	call   c0001cde <clst2sect>
c00033fa:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003401:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003405:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003408:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000340b:	b9 00 02 00 00       	mov    ecx,0x200
c0003410:	31 d2                	xor    edx,edx
c0003412:	89 e8                	mov    eax,ebp
c0003414:	e8 c0 e6 ff ff       	call   c0001ad9 <mem_set>
c0003419:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000341d:	c1 e3 09             	shl    ebx,0x9
c0003420:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003426:	76 1f                	jbe    c0003447 <dir_clear+0x72>
c0003428:	bb 00 80 00 00       	mov    ebx,0x8000
c000342d:	eb 18                	jmp    c0003447 <dir_clear+0x72>
c000342f:	83 ec 0c             	sub    esp,0xc
c0003432:	53                   	push   ebx
c0003433:	e8 f3 4d 00 00       	call   c000822b <ff_memalloc>
c0003438:	83 c4 10             	add    esp,0x10
c000343b:	89 c7                	mov    edi,eax
c000343d:	85 c0                	test   eax,eax
c000343f:	0f 85 8f 00 00 00    	jne    c00034d4 <dir_clear+0xff>
c0003445:	d1 eb                	shr    ebx,1
c0003447:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000344d:	77 e0                	ja     c000342f <dir_clear+0x5a>
c000344f:	31 db                	xor    ebx,ebx
c0003451:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003455:	39 d8                	cmp    eax,ebx
c0003457:	76 66                	jbe    c00034bf <dir_clear+0xea>
c0003459:	83 ec 0c             	sub    esp,0xc
c000345c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003460:	6a 01                	push   0x1
c0003462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346a:	55                   	push   ebp
c000346b:	50                   	push   eax
c000346c:	e8 9f e5 ff ff       	call   c0001a10 <disk_write>
c0003471:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003476:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000347b:	83 c4 20             	add    esp,0x20
c000347e:	85 c0                	test   eax,eax
c0003480:	75 3d                	jne    c00034bf <dir_clear+0xea>
c0003482:	43                   	inc    ebx
c0003483:	eb cc                	jmp    c0003451 <dir_clear+0x7c>
c0003485:	83 ec 0c             	sub    esp,0xc
c0003488:	89 d8                	mov    eax,ebx
c000348a:	31 d2                	xor    edx,edx
c000348c:	55                   	push   ebp
c000348d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003491:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003495:	52                   	push   edx
c0003496:	50                   	push   eax
c0003497:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000349b:	57                   	push   edi
c000349c:	50                   	push   eax
c000349d:	e8 6e e5 ff ff       	call   c0001a10 <disk_write>
c00034a2:	83 c4 20             	add    esp,0x20
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 0a                	jne    c00034b3 <dir_clear+0xde>
c00034a9:	01 eb                	add    ebx,ebp
c00034ab:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034af:	39 d8                	cmp    eax,ebx
c00034b1:	77 d2                	ja     c0003485 <dir_clear+0xb0>
c00034b3:	83 ec 0c             	sub    esp,0xc
c00034b6:	57                   	push   edi
c00034b7:	e8 85 4d 00 00       	call   c0008241 <ff_memfree>
c00034bc:	83 c4 10             	add    esp,0x10
c00034bf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c3:	39 d8                	cmp    eax,ebx
c00034c5:	0f 95 c0             	setne  al
c00034c8:	0f b6 c0             	movzx  eax,al
c00034cb:	eb 19                	jmp    c00034e6 <dir_clear+0x111>
c00034cd:	b8 01 00 00 00       	mov    eax,0x1
c00034d2:	eb 12                	jmp    c00034e6 <dir_clear+0x111>
c00034d4:	89 d9                	mov    ecx,ebx
c00034d6:	31 d2                	xor    edx,edx
c00034d8:	c1 eb 09             	shr    ebx,0x9
c00034db:	e8 f9 e5 ff ff       	call   c0001ad9 <mem_set>
c00034e0:	89 dd                	mov    ebp,ebx
c00034e2:	31 db                	xor    ebx,ebx
c00034e4:	eb c5                	jmp    c00034ab <dir_clear+0xd6>
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_next>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	53                   	push   ebx
c00034f2:	89 c3                	mov    ebx,eax
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034f9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003500:	8d 78 20             	lea    edi,[eax+0x20]
c0003503:	31 c0                	xor    eax,eax
c0003505:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003509:	0f 94 c0             	sete   al
c000350c:	48                   	dec    eax
c000350d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003512:	05 00 00 00 10       	add    eax,0x10000000
c0003517:	39 f8                	cmp    eax,edi
c0003519:	77 0e                	ja     c0003529 <dir_next+0x3b>
c000351b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003522:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003529:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000352c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000352f:	89 ce                	mov    esi,ecx
c0003531:	b8 04 00 00 00       	mov    eax,0x4
c0003536:	09 d6                	or     esi,edx
c0003538:	0f 84 da 00 00 00    	je     c0003618 <dir_next+0x12a>
c000353e:	89 f8                	mov    eax,edi
c0003540:	25 ff 01 00 00       	and    eax,0x1ff
c0003545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003549:	0f 85 b9 00 00 00    	jne    c0003608 <dir_next+0x11a>
c000354f:	83 c2 01             	add    edx,0x1
c0003552:	83 d1 00             	adc    ecx,0x0
c0003555:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003558:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000355b:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000355e:	85 d2                	test   edx,edx
c0003560:	75 29                	jne    c000358b <dir_next+0x9d>
c0003562:	89 fa                	mov    edx,edi
c0003564:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003568:	c1 ea 05             	shr    edx,0x5
c000356b:	39 c2                	cmp    edx,eax
c000356d:	0f 82 95 00 00 00    	jb     c0003608 <dir_next+0x11a>
c0003573:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000357a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003581:	b8 04 00 00 00       	mov    eax,0x4
c0003586:	e9 8d 00 00 00       	jmp    c0003618 <dir_next+0x12a>
c000358b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000358f:	89 f9                	mov    ecx,edi
c0003591:	48                   	dec    eax
c0003592:	c1 e9 09             	shr    ecx,0x9
c0003595:	85 c8                	test   eax,ecx
c0003597:	75 6f                	jne    c0003608 <dir_next+0x11a>
c0003599:	89 d8                	mov    eax,ebx
c000359b:	e8 fe f7 ff ff       	call   c0002d9e <get_fat>
c00035a0:	89 c6                	mov    esi,eax
c00035a2:	83 f8 01             	cmp    eax,0x1
c00035a5:	77 07                	ja     c00035ae <dir_next+0xc0>
c00035a7:	b8 02 00 00 00       	mov    eax,0x2
c00035ac:	eb 6a                	jmp    c0003618 <dir_next+0x12a>
c00035ae:	83 f8 ff             	cmp    eax,0xffffffff
c00035b1:	75 07                	jne    c00035ba <dir_next+0xcc>
c00035b3:	b8 01 00 00 00       	mov    eax,0x1
c00035b8:	eb 5e                	jmp    c0003618 <dir_next+0x12a>
c00035ba:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035bd:	77 37                	ja     c00035f6 <dir_next+0x108>
c00035bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035c4:	74 ad                	je     c0003573 <dir_next+0x85>
c00035c6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035c9:	89 d8                	mov    eax,ebx
c00035cb:	e8 bc fa ff ff       	call   c000308c <create_chain>
c00035d0:	89 c6                	mov    esi,eax
c00035d2:	b8 07 00 00 00       	mov    eax,0x7
c00035d7:	85 f6                	test   esi,esi
c00035d9:	74 3d                	je     c0003618 <dir_next+0x12a>
c00035db:	83 fe 01             	cmp    esi,0x1
c00035de:	74 c7                	je     c00035a7 <dir_next+0xb9>
c00035e0:	83 fe ff             	cmp    esi,0xffffffff
c00035e3:	74 ce                	je     c00035b3 <dir_next+0xc5>
c00035e5:	89 f2                	mov    edx,esi
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 e7 fd ff ff       	call   c00033d5 <dir_clear>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	75 c1                	jne    c00035b3 <dir_next+0xc5>
c00035f2:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035f9:	89 f2                	mov    edx,esi
c00035fb:	89 e8                	mov    eax,ebp
c00035fd:	e8 dc e6 ff ff       	call   c0001cde <clst2sect>
c0003602:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003605:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000360c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000360f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003613:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003616:	31 c0                	xor    eax,eax
c0003618:	83 c4 1c             	add    esp,0x1c
c000361b:	5b                   	pop    ebx
c000361c:	5e                   	pop    esi
c000361d:	5f                   	pop    edi
c000361e:	5d                   	pop    ebp
c000361f:	c3                   	ret    

c0003620 <load_xdir>:
c0003620:	55                   	push   ebp
c0003621:	57                   	push   edi
c0003622:	56                   	push   esi
c0003623:	89 c6                	mov    esi,eax
c0003625:	53                   	push   ebx
c0003626:	83 ec 1c             	sub    esp,0x1c
c0003629:	8b 00                	mov    eax,DWORD PTR [eax]
c000362b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000362e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003631:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003634:	e8 e3 eb ff ff       	call   c000221c <move_window>
c0003639:	89 c3                	mov    ebx,eax
c000363b:	85 c0                	test   eax,eax
c000363d:	0f 85 0c 01 00 00    	jne    c000374f <load_xdir+0x12f>
c0003643:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003646:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003649:	0f 85 fb 00 00 00    	jne    c000374a <load_xdir+0x12a>
c000364f:	89 f8                	mov    eax,edi
c0003651:	b9 20 00 00 00       	mov    ecx,0x20
c0003656:	e8 69 e4 ff ff       	call   c0001ac4 <mem_cpy>
c000365b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000365f:	40                   	inc    eax
c0003660:	c1 e0 05             	shl    eax,0x5
c0003663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003667:	83 e8 60             	sub    eax,0x60
c000366a:	3d 00 02 00 00       	cmp    eax,0x200
c000366f:	0f 87 d5 00 00 00    	ja     c000374a <load_xdir+0x12a>
c0003675:	31 d2                	xor    edx,edx
c0003677:	89 f0                	mov    eax,esi
c0003679:	e8 70 fe ff ff       	call   c00034ee <dir_next>
c000367e:	89 c3                	mov    ebx,eax
c0003680:	83 f8 04             	cmp    eax,0x4
c0003683:	0f 84 c1 00 00 00    	je     c000374a <load_xdir+0x12a>
c0003689:	85 c0                	test   eax,eax
c000368b:	0f 85 be 00 00 00    	jne    c000374f <load_xdir+0x12f>
c0003691:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003694:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003697:	8b 06                	mov    eax,DWORD PTR [esi]
c0003699:	e8 7e eb ff ff       	call   c000221c <move_window>
c000369e:	89 c3                	mov    ebx,eax
c00036a0:	85 c0                	test   eax,eax
c00036a2:	0f 85 a7 00 00 00    	jne    c000374f <load_xdir+0x12f>
c00036a8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036ab:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036ae:	0f 85 96 00 00 00    	jne    c000374a <load_xdir+0x12a>
c00036b4:	8d 47 20             	lea    eax,[edi+0x20]
c00036b7:	b9 20 00 00 00       	mov    ecx,0x20
c00036bc:	e8 03 e4 ff ff       	call   c0001ac4 <mem_cpy>
c00036c1:	31 d2                	xor    edx,edx
c00036c3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036c7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036cc:	83 c0 2c             	add    eax,0x2c
c00036cf:	f7 f1                	div    ecx
c00036d1:	c1 e0 05             	shl    eax,0x5
c00036d4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036d8:	77 70                	ja     c000374a <load_xdir+0x12a>
c00036da:	bd 40 00 00 00       	mov    ebp,0x40
c00036df:	31 d2                	xor    edx,edx
c00036e1:	89 f0                	mov    eax,esi
c00036e3:	e8 06 fe ff ff       	call   c00034ee <dir_next>
c00036e8:	89 c3                	mov    ebx,eax
c00036ea:	83 f8 04             	cmp    eax,0x4
c00036ed:	74 5b                	je     c000374a <load_xdir+0x12a>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 5c                	jne    c000374f <load_xdir+0x12f>
c00036f3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036f6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00036fb:	e8 1c eb ff ff       	call   c000221c <move_window>
c0003700:	89 c3                	mov    ebx,eax
c0003702:	85 c0                	test   eax,eax
c0003704:	75 49                	jne    c000374f <load_xdir+0x12f>
c0003706:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003709:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000370c:	75 3c                	jne    c000374a <load_xdir+0x12a>
c000370e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003714:	77 0d                	ja     c0003723 <load_xdir+0x103>
c0003716:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003719:	b9 20 00 00 00       	mov    ecx,0x20
c000371e:	e8 a1 e3 ff ff       	call   c0001ac4 <mem_cpy>
c0003723:	83 c5 20             	add    ebp,0x20
c0003726:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000372a:	77 b3                	ja     c00036df <load_xdir+0xbf>
c000372c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003732:	77 1b                	ja     c000374f <load_xdir+0x12f>
c0003734:	89 f8                	mov    eax,edi
c0003736:	e8 d8 e7 ff ff       	call   c0001f13 <xdir_sum>
c000373b:	89 c1                	mov    ecx,eax
c000373d:	8d 47 02             	lea    eax,[edi+0x2]
c0003740:	e8 00 e3 ff ff       	call   c0001a45 <ld_word>
c0003745:	66 39 c1             	cmp    cx,ax
c0003748:	74 05                	je     c000374f <load_xdir+0x12f>
c000374a:	bb 02 00 00 00       	mov    ebx,0x2
c000374f:	83 c4 1c             	add    esp,0x1c
c0003752:	89 d8                	mov    eax,ebx
c0003754:	5b                   	pop    ebx
c0003755:	5e                   	pop    esi
c0003756:	5f                   	pop    edi
c0003757:	5d                   	pop    ebp
c0003758:	c3                   	ret    

c0003759 <load_obj_xdir>:
c0003759:	53                   	push   ebx
c000375a:	89 c3                	mov    ebx,eax
c000375c:	83 ec 08             	sub    esp,0x8
c000375f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003761:	89 03                	mov    DWORD PTR [ebx],eax
c0003763:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003766:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003769:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000376c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000376f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003772:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003779:	30 c0                	xor    al,al
c000377b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000378a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000378d:	e8 02 f8 ff ff       	call   c0002f94 <dir_sdi>
c0003792:	85 c0                	test   eax,eax
c0003794:	75 0b                	jne    c00037a1 <load_obj_xdir+0x48>
c0003796:	83 c4 08             	add    esp,0x8
c0003799:	89 d8                	mov    eax,ebx
c000379b:	5b                   	pop    ebx
c000379c:	e9 7f fe ff ff       	jmp    c0003620 <load_xdir>
c00037a1:	83 c4 08             	add    esp,0x8
c00037a4:	5b                   	pop    ebx
c00037a5:	c3                   	ret    

c00037a6 <dir_read>:
c00037a6:	55                   	push   ebp
c00037a7:	bd 04 00 00 00       	mov    ebp,0x4
c00037ac:	57                   	push   edi
c00037ad:	56                   	push   esi
c00037ae:	be ff ff ff ff       	mov    esi,0xffffffff
c00037b3:	53                   	push   ebx
c00037b4:	89 c3                	mov    ebx,eax
c00037b6:	83 ec 1c             	sub    esp,0x1c
c00037b9:	8b 38                	mov    edi,DWORD PTR [eax]
c00037bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037bf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037c4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037c7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037ca:	89 c8                	mov    eax,ecx
c00037cc:	09 d0                	or     eax,edx
c00037ce:	0f 84 25 01 00 00    	je     c00038f9 <dir_read+0x153>
c00037d4:	89 f8                	mov    eax,edi
c00037d6:	e8 41 ea ff ff       	call   c000221c <move_window>
c00037db:	89 c5                	mov    ebp,eax
c00037dd:	85 c0                	test   eax,eax
c00037df:	0f 85 23 01 00 00    	jne    c0003908 <dir_read+0x162>
c00037e5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037e8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037ea:	84 c9                	test   cl,cl
c00037ec:	0f 84 11 01 00 00    	je     c0003903 <dir_read+0x15d>
c00037f2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037f5:	75 48                	jne    c000383f <dir_read+0x99>
c00037f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037fc:	74 10                	je     c000380e <dir_read+0x68>
c00037fe:	80 f9 83             	cmp    cl,0x83
c0003801:	0f 85 dd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003807:	31 ed                	xor    ebp,ebp
c0003809:	e9 08 01 00 00       	jmp    c0003916 <dir_read+0x170>
c000380e:	80 f9 85             	cmp    cl,0x85
c0003811:	0f 85 cd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003817:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000381a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000381d:	89 d8                	mov    eax,ebx
c000381f:	e8 fc fd ff ff       	call   c0003620 <load_xdir>
c0003824:	89 c5                	mov    ebp,eax
c0003826:	85 c0                	test   eax,eax
c0003828:	0f 85 da 00 00 00    	jne    c0003908 <dir_read+0x162>
c000382e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003831:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003834:	83 e0 3f             	and    eax,0x3f
c0003837:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000383a:	e9 d7 00 00 00       	jmp    c0003916 <dir_read+0x170>
c000383f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003842:	83 e0 3f             	and    eax,0x3f
c0003845:	80 f9 e5             	cmp    cl,0xe5
c0003848:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000384c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384f:	0f 84 8a 00 00 00    	je     c00038df <dir_read+0x139>
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	0f 84 81 00 00 00    	je     c00038df <dir_read+0x139>
c000385e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003862:	83 e0 1f             	and    eax,0x1f
c0003865:	83 f8 08             	cmp    eax,0x8
c0003868:	0f 94 c0             	sete   al
c000386b:	0f b6 c0             	movzx  eax,al
c000386e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003872:	75 6b                	jne    c00038df <dir_read+0x139>
c0003874:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003879:	75 44                	jne    c00038bf <dir_read+0x119>
c000387b:	f6 c1 40             	test   cl,0x40
c000387e:	74 12                	je     c0003892 <dir_read+0xec>
c0003880:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003883:	83 e1 bf             	and    ecx,0xffffffbf
c0003886:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000388a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000388d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003890:	eb 06                	jmp    c0003898 <dir_read+0xf2>
c0003892:	89 f0                	mov    eax,esi
c0003894:	38 c8                	cmp    al,cl
c0003896:	75 47                	jne    c00038df <dir_read+0x139>
c0003898:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000389c:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038a4:	75 3e                	jne    c00038e4 <dir_read+0x13e>
c00038a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038a9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ad:	e8 95 e4 ff ff       	call   c0001d47 <pick_lfn>
c00038b2:	85 c0                	test   eax,eax
c00038b4:	74 2e                	je     c00038e4 <dir_read+0x13e>
c00038b6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ba:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038bd:	eb 25                	jmp    c00038e4 <dir_read+0x13e>
c00038bf:	89 f0                	mov    eax,esi
c00038c1:	84 c0                	test   al,al
c00038c3:	75 11                	jne    c00038d6 <dir_read+0x130>
c00038c5:	89 d0                	mov    eax,edx
c00038c7:	e8 35 e6 ff ff       	call   c0001f01 <sum_sfn>
c00038cc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d0:	0f 84 31 ff ff ff    	je     c0003807 <dir_read+0x61>
c00038d6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038dd:	eb 37                	jmp    c0003916 <dir_read+0x170>
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	31 d2                	xor    edx,edx
c00038e6:	89 d8                	mov    eax,ebx
c00038e8:	e8 01 fc ff ff       	call   c00034ee <dir_next>
c00038ed:	89 c5                	mov    ebp,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	0f 84 cd fe ff ff    	je     c00037c4 <dir_read+0x1e>
c00038f7:	eb 0f                	jmp    c0003908 <dir_read+0x162>
c00038f9:	85 ed                	test   ebp,ebp
c00038fb:	0f 84 06 ff ff ff    	je     c0003807 <dir_read+0x61>
c0003901:	eb 05                	jmp    c0003908 <dir_read+0x162>
c0003903:	bd 04 00 00 00       	mov    ebp,0x4
c0003908:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000390f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003916:	83 c4 1c             	add    esp,0x1c
c0003919:	89 e8                	mov    eax,ebp
c000391b:	5b                   	pop    ebx
c000391c:	5e                   	pop    esi
c000391d:	5f                   	pop    edi
c000391e:	5d                   	pop    ebp
c000391f:	c3                   	ret    

c0003920 <dir_alloc>:
c0003920:	55                   	push   ebp
c0003921:	89 d5                	mov    ebp,edx
c0003923:	57                   	push   edi
c0003924:	31 d2                	xor    edx,edx
c0003926:	56                   	push   esi
c0003927:	53                   	push   ebx
c0003928:	89 c3                	mov    ebx,eax
c000392a:	83 ec 0c             	sub    esp,0xc
c000392d:	8b 38                	mov    edi,DWORD PTR [eax]
c000392f:	e8 60 f6 ff ff       	call   c0002f94 <dir_sdi>
c0003934:	85 c0                	test   eax,eax
c0003936:	75 4e                	jne    c0003986 <dir_alloc+0x66>
c0003938:	31 f6                	xor    esi,esi
c000393a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000393d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003940:	89 f8                	mov    eax,edi
c0003942:	e8 d5 e8 ff ff       	call   c000221c <move_window>
c0003947:	85 c0                	test   eax,eax
c0003949:	75 3b                	jne    c0003986 <dir_alloc+0x66>
c000394b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000394e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003951:	8a 12                	mov    dl,BYTE PTR [edx]
c0003953:	75 07                	jne    c000395c <dir_alloc+0x3c>
c0003955:	f7 d2                	not    edx
c0003957:	c0 ea 07             	shr    dl,0x7
c000395a:	eb 0d                	jmp    c0003969 <dir_alloc+0x49>
c000395c:	80 fa e5             	cmp    dl,0xe5
c000395f:	0f 94 c1             	sete   cl
c0003962:	84 d2                	test   dl,dl
c0003964:	0f 94 c2             	sete   dl
c0003967:	09 ca                	or     edx,ecx
c0003969:	84 d2                	test   dl,dl
c000396b:	74 07                	je     c0003974 <dir_alloc+0x54>
c000396d:	46                   	inc    esi
c000396e:	39 ee                	cmp    esi,ebp
c0003970:	75 04                	jne    c0003976 <dir_alloc+0x56>
c0003972:	eb 1c                	jmp    c0003990 <dir_alloc+0x70>
c0003974:	31 f6                	xor    esi,esi
c0003976:	ba 01 00 00 00       	mov    edx,0x1
c000397b:	89 d8                	mov    eax,ebx
c000397d:	e8 6c fb ff ff       	call   c00034ee <dir_next>
c0003982:	85 c0                	test   eax,eax
c0003984:	74 b4                	je     c000393a <dir_alloc+0x1a>
c0003986:	83 f8 04             	cmp    eax,0x4
c0003989:	75 05                	jne    c0003990 <dir_alloc+0x70>
c000398b:	b8 07 00 00 00       	mov    eax,0x7
c0003990:	83 c4 0c             	add    esp,0xc
c0003993:	5b                   	pop    ebx
c0003994:	5e                   	pop    esi
c0003995:	5f                   	pop    edi
c0003996:	5d                   	pop    ebp
c0003997:	c3                   	ret    

c0003998 <store_xdir>:
c0003998:	55                   	push   ebp
c0003999:	57                   	push   edi
c000399a:	89 c7                	mov    edi,eax
c000399c:	56                   	push   esi
c000399d:	53                   	push   ebx
c000399e:	83 ec 0c             	sub    esp,0xc
c00039a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039a6:	89 e8                	mov    eax,ebp
c00039a8:	e8 66 e5 ff ff       	call   c0001f13 <xdir_sum>
c00039ad:	0f b7 d0             	movzx  edx,ax
c00039b0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039b3:	e8 ff e0 ff ff       	call   c0001ab7 <st_word>
c00039b8:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039bb:	89 f8                	mov    eax,edi
c00039bd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c1:	e8 ce f5 ff ff       	call   c0002f94 <dir_sdi>
c00039c6:	89 c6                	mov    esi,eax
c00039c8:	85 f6                	test   esi,esi
c00039ca:	75 3d                	jne    c0003a09 <store_xdir+0x71>
c00039cc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039cf:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d4:	e8 43 e8 ff ff       	call   c000221c <move_window>
c00039d9:	89 c6                	mov    esi,eax
c00039db:	85 c0                	test   eax,eax
c00039dd:	75 2a                	jne    c0003a09 <store_xdir+0x71>
c00039df:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e2:	b9 20 00 00 00       	mov    ecx,0x20
c00039e7:	89 ea                	mov    edx,ebp
c00039e9:	e8 d6 e0 ff ff       	call   c0001ac4 <mem_cpy>
c00039ee:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f0:	85 db                	test   ebx,ebx
c00039f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039f6:	74 11                	je     c0003a09 <store_xdir+0x71>
c00039f8:	31 d2                	xor    edx,edx
c00039fa:	89 f8                	mov    eax,edi
c00039fc:	e8 ed fa ff ff       	call   c00034ee <dir_next>
c0003a01:	83 c5 20             	add    ebp,0x20
c0003a04:	89 c6                	mov    esi,eax
c0003a06:	4b                   	dec    ebx
c0003a07:	eb bf                	jmp    c00039c8 <store_xdir+0x30>
c0003a09:	89 f0                	mov    eax,esi
c0003a0b:	83 fe 02             	cmp    esi,0x2
c0003a0e:	76 05                	jbe    c0003a15 <store_xdir+0x7d>
c0003a10:	b8 02 00 00 00       	mov    eax,0x2
c0003a15:	83 c4 0c             	add    esp,0xc
c0003a18:	5b                   	pop    ebx
c0003a19:	5e                   	pop    esi
c0003a1a:	5f                   	pop    edi
c0003a1b:	5d                   	pop    ebp
c0003a1c:	c3                   	ret    

c0003a1d <dir_remove>:
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	53                   	push   ebx
c0003a20:	89 c3                	mov    ebx,eax
c0003a22:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a25:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a27:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a2a:	83 fa ff             	cmp    edx,0xffffffff
c0003a2d:	74 09                	je     c0003a38 <dir_remove+0x1b>
c0003a2f:	e8 60 f5 ff ff       	call   c0002f94 <dir_sdi>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	75 41                	jne    c0003a79 <dir_remove+0x5c>
c0003a38:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a3b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3e:	89 f0                	mov    eax,esi
c0003a40:	e8 d7 e7 ff ff       	call   c000221c <move_window>
c0003a45:	85 c0                	test   eax,eax
c0003a47:	75 26                	jne    c0003a6f <dir_remove+0x52>
c0003a49:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a4c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a4f:	75 05                	jne    c0003a56 <dir_remove+0x39>
c0003a51:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a54:	eb 03                	jmp    c0003a59 <dir_remove+0x3c>
c0003a56:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a59:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a60:	73 17                	jae    c0003a79 <dir_remove+0x5c>
c0003a62:	31 d2                	xor    edx,edx
c0003a64:	89 d8                	mov    eax,ebx
c0003a66:	e8 83 fa ff ff       	call   c00034ee <dir_next>
c0003a6b:	85 c0                	test   eax,eax
c0003a6d:	74 c9                	je     c0003a38 <dir_remove+0x1b>
c0003a6f:	83 f8 04             	cmp    eax,0x4
c0003a72:	75 05                	jne    c0003a79 <dir_remove+0x5c>
c0003a74:	b8 02 00 00 00       	mov    eax,0x2
c0003a79:	5b                   	pop    ebx
c0003a7a:	5e                   	pop    esi
c0003a7b:	5f                   	pop    edi
c0003a7c:	c3                   	ret    

c0003a7d <create_name>:
c0003a7d:	55                   	push   ebp
c0003a7e:	89 d5                	mov    ebp,edx
c0003a80:	57                   	push   edi
c0003a81:	89 c7                	mov    edi,eax
c0003a83:	56                   	push   esi
c0003a84:	31 f6                	xor    esi,esi
c0003a86:	53                   	push   ebx
c0003a87:	83 ec 3c             	sub    esp,0x3c
c0003a8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a8c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a90:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a9d:	e8 7d e0 ff ff       	call   c0001b1f <tchar2uni>
c0003aa2:	89 c3                	mov    ebx,eax
c0003aa4:	83 f8 ff             	cmp    eax,0xffffffff
c0003aa7:	75 0a                	jne    c0003ab3 <create_name+0x36>
c0003aa9:	b8 06 00 00 00       	mov    eax,0x6
c0003aae:	e9 83 02 00 00       	jmp    c0003d36 <create_name+0x2b9>
c0003ab3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ab8:	76 0c                	jbe    c0003ac6 <create_name+0x49>
c0003aba:	c1 e8 10             	shr    eax,0x10
c0003abd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ac1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ac5:	46                   	inc    esi
c0003ac6:	66 83 fb 1f          	cmp    bx,0x1f
c0003aca:	89 d8                	mov    eax,ebx
c0003acc:	76 36                	jbe    c0003b04 <create_name+0x87>
c0003ace:	66 83 fb 2f          	cmp    bx,0x2f
c0003ad2:	74 30                	je     c0003b04 <create_name+0x87>
c0003ad4:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad8:	74 39                	je     c0003b13 <create_name+0x96>
c0003ada:	66 83 fb 7f          	cmp    bx,0x7f
c0003ade:	77 11                	ja     c0003af1 <create_name+0x74>
c0003ae0:	0f b7 d3             	movzx  edx,bx
c0003ae3:	b8 f2 03 02 c0       	mov    eax,0xc00203f2
c0003ae8:	e8 1a e0 ff ff       	call   c0001b07 <chk_chr>
c0003aed:	85 c0                	test   eax,eax
c0003aef:	75 b8                	jne    c0003aa9 <create_name+0x2c>
c0003af1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003af7:	77 b0                	ja     c0003aa9 <create_name+0x2c>
c0003af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003afd:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b01:	46                   	inc    esi
c0003b02:	eb 95                	jmp    c0003a99 <create_name+0x1c>
c0003b04:	66 83 f8 1f          	cmp    ax,0x1f
c0003b08:	b3 04                	mov    bl,0x4
c0003b0a:	76 19                	jbe    c0003b25 <create_name+0xa8>
c0003b0c:	eb 05                	jmp    c0003b13 <create_name+0x96>
c0003b0e:	40                   	inc    eax
c0003b0f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b17:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b19:	80 fa 2f             	cmp    dl,0x2f
c0003b1c:	74 f0                	je     c0003b0e <create_name+0x91>
c0003b1e:	80 fa 5c             	cmp    dl,0x5c
c0003b21:	74 eb                	je     c0003b0e <create_name+0x91>
c0003b23:	31 db                	xor    ebx,ebx
c0003b25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b2c:	85 f6                	test   esi,esi
c0003b2e:	74 18                	je     c0003b48 <create_name+0xcb>
c0003b30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b34:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b39:	66 83 f8 20          	cmp    ax,0x20
c0003b3d:	74 06                	je     c0003b45 <create_name+0xc8>
c0003b3f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b43:	75 03                	jne    c0003b48 <create_name+0xcb>
c0003b45:	4e                   	dec    esi
c0003b46:	eb e4                	jmp    c0003b2c <create_name+0xaf>
c0003b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b4c:	31 ed                	xor    ebp,ebp
c0003b4e:	85 f6                	test   esi,esi
c0003b50:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b56:	0f 84 4d ff ff ff    	je     c0003aa9 <create_name+0x2c>
c0003b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b60:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b63:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b67:	66 83 f8 20          	cmp    ax,0x20
c0003b6b:	75 04                	jne    c0003b71 <create_name+0xf4>
c0003b6d:	89 d5                	mov    ebp,edx
c0003b6f:	eb eb                	jmp    c0003b5c <create_name+0xdf>
c0003b71:	85 ed                	test   ebp,ebp
c0003b73:	75 06                	jne    c0003b7b <create_name+0xfe>
c0003b75:	66 83 f8 2e          	cmp    ax,0x2e
c0003b79:	75 08                	jne    c0003b83 <create_name+0x106>
c0003b7b:	83 cb 03             	or     ebx,0x3
c0003b7e:	eb 03                	jmp    c0003b83 <create_name+0x106>
c0003b80:	4e                   	dec    esi
c0003b81:	74 0c                	je     c0003b8f <create_name+0x112>
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b8d:	75 f1                	jne    c0003b80 <create_name+0x103>
c0003b8f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b94:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b97:	ba 20 00 00 00       	mov    edx,0x20
c0003b9c:	e8 38 df ff ff       	call   c0001ad9 <mem_set>
c0003ba1:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003ba9:	31 c9                	xor    ecx,ecx
c0003bab:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bb0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bbb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bbf:	66 85 ed             	test   bp,bp
c0003bc2:	0f 84 1f 01 00 00    	je     c0003ce7 <create_name+0x26a>
c0003bc8:	66 83 fd 20          	cmp    bp,0x20
c0003bcc:	74 0c                	je     c0003bda <create_name+0x15d>
c0003bce:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd2:	75 0f                	jne    c0003be3 <create_name+0x166>
c0003bd4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bd8:	74 09                	je     c0003be3 <create_name+0x166>
c0003bda:	83 cb 03             	or     ebx,0x3
c0003bdd:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003be1:	eb cd                	jmp    c0003bb0 <create_name+0x133>
c0003be3:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003be7:	73 06                	jae    c0003bef <create_name+0x172>
c0003be9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bed:	75 3a                	jne    c0003c29 <create_name+0x1ac>
c0003bef:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bf4:	75 08                	jne    c0003bfe <create_name+0x181>
c0003bf6:	83 cb 03             	or     ebx,0x3
c0003bf9:	e9 e9 00 00 00       	jmp    c0003ce7 <create_name+0x26a>
c0003bfe:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c02:	74 0d                	je     c0003c11 <create_name+0x194>
c0003c04:	83 cb 03             	or     ebx,0x3
c0003c07:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c0b:	0f 87 d6 00 00 00    	ja     c0003ce7 <create_name+0x26a>
c0003c11:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c16:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c1a:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c22:	b9 08 00 00 00       	mov    ecx,0x8
c0003c27:	eb b4                	jmp    c0003bdd <create_name+0x160>
c0003c29:	66 83 fd 7f          	cmp    bp,0x7f
c0003c2d:	76 68                	jbe    c0003c97 <create_name+0x21a>
c0003c2f:	88 da                	mov    dl,bl
c0003c31:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c35:	83 ca 02             	or     edx,0x2
c0003c38:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c3c:	50                   	push   eax
c0003c3d:	50                   	push   eax
c0003c3e:	68 b5 01 00 00       	push   0x1b5
c0003c43:	55                   	push   ebp
c0003c44:	e8 0f 46 00 00       	call   c0008258 <ff_uni2oem>
c0003c49:	83 c4 10             	add    esp,0x10
c0003c4c:	89 c5                	mov    ebp,eax
c0003c4e:	a8 80                	test   al,0x80
c0003c50:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c58:	74 0c                	je     c0003c66 <create_name+0x1e9>
c0003c5a:	83 e5 7f             	and    ebp,0x7f
c0003c5d:	0f b6 ad 40 03 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfcc0]
c0003c64:	eb 2a                	jmp    c0003c90 <create_name+0x213>
c0003c66:	66 3d ff 00          	cmp    ax,0xff
c0003c6a:	76 24                	jbe    c0003c90 <create_name+0x213>
c0003c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c70:	48                   	dec    eax
c0003c71:	39 c8                	cmp    eax,ecx
c0003c73:	77 0c                	ja     c0003c81 <create_name+0x204>
c0003c75:	83 cb 03             	or     ebx,0x3
c0003c78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c7c:	e9 5c ff ff ff       	jmp    c0003bdd <create_name+0x160>
c0003c81:	89 e8                	mov    eax,ebp
c0003c83:	88 d3                	mov    bl,dl
c0003c85:	66 c1 e8 08          	shr    ax,0x8
c0003c89:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c8d:	41                   	inc    ecx
c0003c8e:	eb 4b                	jmp    c0003cdb <create_name+0x25e>
c0003c90:	66 85 ed             	test   bp,bp
c0003c93:	88 d3                	mov    bl,dl
c0003c95:	74 19                	je     c0003cb0 <create_name+0x233>
c0003c97:	0f b7 d5             	movzx  edx,bp
c0003c9a:	b8 fb 03 02 c0       	mov    eax,0xc00203fb
c0003c9f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ca3:	e8 5f de ff ff       	call   c0001b07 <chk_chr>
c0003ca8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cac:	85 c0                	test   eax,eax
c0003cae:	74 0a                	je     c0003cba <create_name+0x23d>
c0003cb0:	83 cb 03             	or     ebx,0x3
c0003cb3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cb8:	eb 21                	jmp    c0003cdb <create_name+0x25e>
c0003cba:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cbd:	66 83 f8 19          	cmp    ax,0x19
c0003cc1:	77 07                	ja     c0003cca <create_name+0x24d>
c0003cc3:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003cc8:	eb 11                	jmp    c0003cdb <create_name+0x25e>
c0003cca:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ccd:	66 83 f8 19          	cmp    ax,0x19
c0003cd1:	77 08                	ja     c0003cdb <create_name+0x25e>
c0003cd3:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cd8:	83 ed 20             	sub    ebp,0x20
c0003cdb:	89 e8                	mov    eax,ebp
c0003cdd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ce1:	41                   	inc    ecx
c0003ce2:	e9 f6 fe ff ff       	jmp    c0003bdd <create_name+0x160>
c0003ce7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ceb:	75 04                	jne    c0003cf1 <create_name+0x274>
c0003ced:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cf1:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003cf6:	75 05                	jne    c0003cfd <create_name+0x280>
c0003cf8:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003cfd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d01:	83 e0 0c             	and    eax,0xc
c0003d04:	3c 0c                	cmp    al,0xc
c0003d06:	74 0b                	je     c0003d13 <create_name+0x296>
c0003d08:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d0c:	83 e0 03             	and    eax,0x3
c0003d0f:	3c 03                	cmp    al,0x3
c0003d11:	75 05                	jne    c0003d18 <create_name+0x29b>
c0003d13:	83 cb 02             	or     ebx,0x2
c0003d16:	eb 19                	jmp    c0003d31 <create_name+0x2b4>
c0003d18:	f6 c3 02             	test   bl,0x2
c0003d1b:	75 14                	jne    c0003d31 <create_name+0x2b4>
c0003d1d:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d22:	74 03                	je     c0003d27 <create_name+0x2aa>
c0003d24:	83 cb 10             	or     ebx,0x10
c0003d27:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d2c:	74 03                	je     c0003d31 <create_name+0x2b4>
c0003d2e:	83 cb 08             	or     ebx,0x8
c0003d31:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d34:	31 c0                	xor    eax,eax
c0003d36:	83 c4 3c             	add    esp,0x3c
c0003d39:	5b                   	pop    ebx
c0003d3a:	5e                   	pop    esi
c0003d3b:	5f                   	pop    edi
c0003d3c:	5d                   	pop    ebp
c0003d3d:	c3                   	ret    

c0003d3e <xname_sum>:
c0003d3e:	56                   	push   esi
c0003d3f:	89 c6                	mov    esi,eax
c0003d41:	53                   	push   ebx
c0003d42:	31 db                	xor    ebx,ebx
c0003d44:	51                   	push   ecx
c0003d45:	83 c6 02             	add    esi,0x2
c0003d48:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d4c:	66 85 c0             	test   ax,ax
c0003d4f:	74 1f                	je     c0003d70 <xname_sum+0x32>
c0003d51:	66 d1 cb             	ror    bx,1
c0003d54:	83 ec 0c             	sub    esp,0xc
c0003d57:	50                   	push   eax
c0003d58:	e8 00 46 00 00       	call   c000835d <ff_wtoupper>
c0003d5d:	0f b6 d0             	movzx  edx,al
c0003d60:	01 d3                	add    ebx,edx
c0003d62:	83 c4 10             	add    esp,0x10
c0003d65:	66 c1 e8 08          	shr    ax,0x8
c0003d69:	66 d1 cb             	ror    bx,1
c0003d6c:	01 c3                	add    ebx,eax
c0003d6e:	eb d5                	jmp    c0003d45 <xname_sum+0x7>
c0003d70:	5a                   	pop    edx
c0003d71:	89 d8                	mov    eax,ebx
c0003d73:	5b                   	pop    ebx
c0003d74:	5e                   	pop    esi
c0003d75:	c3                   	ret    

c0003d76 <create_xdir>:
c0003d76:	55                   	push   ebp
c0003d77:	b9 40 00 00 00       	mov    ecx,0x40
c0003d7c:	57                   	push   edi
c0003d7d:	bd 01 00 00 00       	mov    ebp,0x1
c0003d82:	56                   	push   esi
c0003d83:	31 ff                	xor    edi,edi
c0003d85:	53                   	push   ebx
c0003d86:	89 c3                	mov    ebx,eax
c0003d88:	83 ec 1c             	sub    esp,0x1c
c0003d8b:	be 40 00 00 00       	mov    esi,0x40
c0003d90:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d94:	31 d2                	xor    edx,edx
c0003d96:	e8 3e dd ff ff       	call   c0001ad9 <mem_set>
c0003d9b:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d9e:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003da2:	31 c9                	xor    ecx,ecx
c0003da4:	8d 46 01             	lea    eax,[esi+0x1]
c0003da7:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dab:	83 c6 02             	add    esi,0x2
c0003dae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003db2:	66 85 ed             	test   bp,bp
c0003db5:	74 12                	je     c0003dc9 <create_xdir+0x53>
c0003db7:	0f b6 c1             	movzx  eax,cl
c0003dba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbe:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dc2:	66 83 fd 01          	cmp    bp,0x1
c0003dc6:	80 d9 ff             	sbb    cl,0xff
c0003dc9:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dcc:	83 c6 02             	add    esi,0x2
c0003dcf:	0f b7 d5             	movzx  edx,bp
c0003dd2:	e8 e0 dc ff ff       	call   c0001ab7 <st_word>
c0003dd7:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003ddd:	75 d3                	jne    c0003db2 <create_xdir+0x3c>
c0003ddf:	8d 47 01             	lea    eax,[edi+0x1]
c0003de2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dea:	0f b6 c1             	movzx  eax,cl
c0003ded:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003df2:	74 07                	je     c0003dfb <create_xdir+0x85>
c0003df4:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003df9:	eb a9                	jmp    c0003da4 <create_xdir+0x2e>
c0003dfb:	8d 47 02             	lea    eax,[edi+0x2]
c0003dfe:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e01:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e04:	89 d0                	mov    eax,edx
c0003e06:	e8 33 ff ff ff       	call   c0003d3e <xname_sum>
c0003e0b:	83 c4 1c             	add    esp,0x1c
c0003e0e:	0f b7 d0             	movzx  edx,ax
c0003e11:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e14:	5b                   	pop    ebx
c0003e15:	5e                   	pop    esi
c0003e16:	5f                   	pop    edi
c0003e17:	5d                   	pop    ebp
c0003e18:	e9 9a dc ff ff       	jmp    c0001ab7 <st_word>

c0003e1d <cmp_lfn>:
c0003e1d:	55                   	push   ebp
c0003e1e:	57                   	push   edi
c0003e1f:	89 d7                	mov    edi,edx
c0003e21:	56                   	push   esi
c0003e22:	53                   	push   ebx
c0003e23:	83 ec 1c             	sub    esp,0x1c
c0003e26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e2d:	e8 13 dc ff ff       	call   c0001a45 <ld_word>
c0003e32:	66 85 c0             	test   ax,ax
c0003e35:	74 07                	je     c0003e3e <cmp_lfn+0x21>
c0003e37:	31 c0                	xor    eax,eax
c0003e39:	e9 9a 00 00 00       	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003e3e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e40:	bd 01 00 00 00       	mov    ebp,0x1
c0003e45:	83 e3 3f             	and    ebx,0x3f
c0003e48:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e50:	4b                   	dec    ebx
c0003e51:	6b db 0d             	imul   ebx,ebx,0xd
c0003e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e58:	0f b6 80 c0 03 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfc40]
c0003e5f:	01 f8                	add    eax,edi
c0003e61:	e8 df db ff ff       	call   c0001a45 <ld_word>
c0003e66:	66 85 ed             	test   bp,bp
c0003e69:	89 c6                	mov    esi,eax
c0003e6b:	74 3c                	je     c0003ea9 <cmp_lfn+0x8c>
c0003e6d:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e73:	77 c2                	ja     c0003e37 <cmp_lfn+0x1a>
c0003e75:	83 ec 0c             	sub    esp,0xc
c0003e78:	0f b7 c0             	movzx  eax,ax
c0003e7b:	50                   	push   eax
c0003e7c:	e8 dc 44 00 00       	call   c000835d <ff_wtoupper>
c0003e81:	89 c5                	mov    ebp,eax
c0003e83:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e8e:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e92:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e95:	e8 c3 44 00 00       	call   c000835d <ff_wtoupper>
c0003e9a:	83 c4 10             	add    esp,0x10
c0003e9d:	39 c5                	cmp    ebp,eax
c0003e9f:	75 96                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ea1:	89 f5                	mov    ebp,esi
c0003ea3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ea7:	eb 04                	jmp    c0003ead <cmp_lfn+0x90>
c0003ea9:	66 46                	inc    si
c0003eab:	75 8a                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ead:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eb1:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003eb6:	75 9c                	jne    c0003e54 <cmp_lfn+0x37>
c0003eb8:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ebb:	74 16                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ebd:	66 85 ed             	test   bp,bp
c0003ec0:	74 11                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ec6:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ecb:	0f 94 c0             	sete   al
c0003ece:	0f b6 c0             	movzx  eax,al
c0003ed1:	eb 05                	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003ed3:	b8 01 00 00 00       	mov    eax,0x1
c0003ed8:	83 c4 1c             	add    esp,0x1c
c0003edb:	5b                   	pop    ebx
c0003edc:	5e                   	pop    esi
c0003edd:	5f                   	pop    edi
c0003ede:	5d                   	pop    ebp
c0003edf:	c3                   	ret    

c0003ee0 <dir_find>:
c0003ee0:	55                   	push   ebp
c0003ee1:	31 d2                	xor    edx,edx
c0003ee3:	57                   	push   edi
c0003ee4:	56                   	push   esi
c0003ee5:	53                   	push   ebx
c0003ee6:	89 c3                	mov    ebx,eax
c0003ee8:	83 ec 1c             	sub    esp,0x1c
c0003eeb:	8b 30                	mov    esi,DWORD PTR [eax]
c0003eed:	e8 a2 f0 ff ff       	call   c0002f94 <dir_sdi>
c0003ef2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ef5:	85 c0                	test   eax,eax
c0003ef7:	0f 85 9f 01 00 00    	jne    c000409c <dir_find+0x1bc>
c0003efd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f00:	0f 85 8e 00 00 00    	jne    c0003f94 <dir_find+0xb4>
c0003f06:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f09:	e8 30 fe ff ff       	call   c0003d3e <xname_sum>
c0003f0e:	89 c5                	mov    ebp,eax
c0003f10:	31 d2                	xor    edx,edx
c0003f12:	89 d8                	mov    eax,ebx
c0003f14:	e8 8d f8 ff ff       	call   c00037a6 <dir_read>
c0003f19:	85 c0                	test   eax,eax
c0003f1b:	0f 85 5f 01 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003f21:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f24:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f27:	e8 19 db ff ff       	call   c0001a45 <ld_word>
c0003f2c:	66 39 e8             	cmp    ax,bp
c0003f2f:	75 df                	jne    c0003f10 <dir_find+0x30>
c0003f31:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f35:	31 ff                	xor    edi,edi
c0003f37:	ba 40 00 00 00       	mov    edx,0x40
c0003f3c:	39 f9                	cmp    ecx,edi
c0003f3e:	0f 84 4a 01 00 00    	je     c000408e <dir_find+0x1ae>
c0003f44:	f6 c2 1f             	test   dl,0x1f
c0003f47:	75 03                	jne    c0003f4c <dir_find+0x6c>
c0003f49:	83 c2 02             	add    edx,0x2
c0003f4c:	89 d0                	mov    eax,edx
c0003f4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f52:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f59:	e8 e7 da ff ff       	call   c0001a45 <ld_word>
c0003f5e:	83 ec 0c             	sub    esp,0xc
c0003f61:	0f b7 c0             	movzx  eax,ax
c0003f64:	50                   	push   eax
c0003f65:	e8 f3 43 00 00       	call   c000835d <ff_wtoupper>
c0003f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f6e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f71:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f78:	e8 e0 43 00 00       	call   c000835d <ff_wtoupper>
c0003f7d:	83 c4 10             	add    esp,0x10
c0003f80:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f84:	75 8a                	jne    c0003f10 <dir_find+0x30>
c0003f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f8a:	47                   	inc    edi
c0003f8b:	83 c2 02             	add    edx,0x2
c0003f8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f92:	eb a8                	jmp    c0003f3c <dir_find+0x5c>
c0003f94:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f9b:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fa0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fa5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fa8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fab:	89 f0                	mov    eax,esi
c0003fad:	e8 6a e2 ff ff       	call   c000221c <move_window>
c0003fb2:	85 c0                	test   eax,eax
c0003fb4:	0f 85 c6 00 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003fba:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fbd:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fc0:	84 c9                	test   cl,cl
c0003fc2:	0f 84 bd 00 00 00    	je     c0004085 <dir_find+0x1a5>
c0003fc8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fcb:	88 d0                	mov    al,dl
c0003fcd:	83 e0 3f             	and    eax,0x3f
c0003fd0:	80 f9 e5             	cmp    cl,0xe5
c0003fd3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fd6:	0f 84 87 00 00 00    	je     c0004063 <dir_find+0x183>
c0003fdc:	80 e2 08             	and    dl,0x8
c0003fdf:	74 06                	je     c0003fe7 <dir_find+0x107>
c0003fe1:	3c 0f                	cmp    al,0xf
c0003fe3:	75 7e                	jne    c0004063 <dir_find+0x183>
c0003fe5:	eb 04                	jmp    c0003feb <dir_find+0x10b>
c0003fe7:	3c 0f                	cmp    al,0xf
c0003fe9:	75 4c                	jne    c0004037 <dir_find+0x157>
c0003feb:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fef:	75 7e                	jne    c000406f <dir_find+0x18f>
c0003ff1:	f6 c1 40             	test   cl,0x40
c0003ff4:	74 12                	je     c0004008 <dir_find+0x128>
c0003ff6:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ff9:	83 e1 bf             	and    ecx,0xffffffbf
c0003ffc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004000:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004003:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004006:	eb 06                	jmp    c000400e <dir_find+0x12e>
c0004008:	89 f8                	mov    eax,edi
c000400a:	38 c8                	cmp    al,cl
c000400c:	75 5c                	jne    c000406a <dir_find+0x18a>
c000400e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004012:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004017:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000401a:	75 53                	jne    c000406f <dir_find+0x18f>
c000401c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000401f:	89 ea                	mov    edx,ebp
c0004021:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0004025:	e8 f3 fd ff ff       	call   c0003e1d <cmp_lfn>
c000402a:	85 c0                	test   eax,eax
c000402c:	74 41                	je     c000406f <dir_find+0x18f>
c000402e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0004032:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004035:	eb 38                	jmp    c000406f <dir_find+0x18f>
c0004037:	89 f8                	mov    eax,edi
c0004039:	84 c0                	test   al,al
c000403b:	75 0d                	jne    c000404a <dir_find+0x16a>
c000403d:	89 e8                	mov    eax,ebp
c000403f:	e8 bd de ff ff       	call   c0001f01 <sum_sfn>
c0004044:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004048:	74 52                	je     c000409c <dir_find+0x1bc>
c000404a:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000404e:	75 13                	jne    c0004063 <dir_find+0x183>
c0004050:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004053:	b9 0b 00 00 00       	mov    ecx,0xb
c0004058:	89 e8                	mov    eax,ebp
c000405a:	e8 85 da ff ff       	call   c0001ae4 <mem_cmp>
c000405f:	85 c0                	test   eax,eax
c0004061:	74 39                	je     c000409c <dir_find+0x1bc>
c0004063:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000406a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000406f:	31 d2                	xor    edx,edx
c0004071:	89 d8                	mov    eax,ebx
c0004073:	e8 76 f4 ff ff       	call   c00034ee <dir_next>
c0004078:	85 c0                	test   eax,eax
c000407a:	0f 84 25 ff ff ff    	je     c0003fa5 <dir_find+0xc5>
c0004080:	89 04 24             	mov    DWORD PTR [esp],eax
c0004083:	eb 17                	jmp    c000409c <dir_find+0x1bc>
c0004085:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000408c:	eb 0e                	jmp    c000409c <dir_find+0x1bc>
c000408e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004091:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0004096:	0f 85 74 fe ff ff    	jne    c0003f10 <dir_find+0x30>
c000409c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000409f:	83 c4 1c             	add    esp,0x1c
c00040a2:	5b                   	pop    ebx
c00040a3:	5e                   	pop    esi
c00040a4:	5f                   	pop    edi
c00040a5:	5d                   	pop    ebp
c00040a6:	c3                   	ret    

c00040a7 <dir_register>:
c00040a7:	55                   	push   ebp
c00040a8:	57                   	push   edi
c00040a9:	56                   	push   esi
c00040aa:	be 06 00 00 00       	mov    esi,0x6
c00040af:	53                   	push   ebx
c00040b0:	83 ec 6c             	sub    esp,0x6c
c00040b3:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040b7:	0f 85 63 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040bd:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040bf:	31 ff                	xor    edi,edi
c00040c1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040c4:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040c9:	74 03                	je     c00040ce <dir_register+0x27>
c00040cb:	47                   	inc    edi
c00040cc:	eb f6                	jmp    c00040c4 <dir_register+0x1d>
c00040ce:	89 c3                	mov    ebx,eax
c00040d0:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040d4:	0f 85 e1 00 00 00    	jne    c00041bb <dir_register+0x114>
c00040da:	83 c7 0e             	add    edi,0xe
c00040dd:	b9 0f 00 00 00       	mov    ecx,0xf
c00040e2:	89 f8                	mov    eax,edi
c00040e4:	31 d2                	xor    edx,edx
c00040e6:	f7 f1                	div    ecx
c00040e8:	89 c7                	mov    edi,eax
c00040ea:	8d 50 02             	lea    edx,[eax+0x2]
c00040ed:	89 d8                	mov    eax,ebx
c00040ef:	e8 2c f8 ff ff       	call   c0003920 <dir_alloc>
c00040f4:	89 c6                	mov    esi,eax
c00040f6:	85 c0                	test   eax,eax
c00040f8:	0f 85 22 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040fe:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004104:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004107:	c1 e7 05             	shl    edi,0x5
c000410a:	29 f8                	sub    eax,edi
c000410c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000410f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004112:	a8 04                	test   al,0x4
c0004114:	0f 84 91 00 00 00    	je     c00041ab <dir_register+0x104>
c000411a:	83 e0 fb             	and    eax,0xfffffffb
c000411d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004120:	89 d8                	mov    eax,ebx
c0004122:	e8 3d ec ff ff       	call   c0002d64 <fill_first_frag>
c0004127:	85 c0                	test   eax,eax
c0004129:	0f 85 ef 01 00 00    	jne    c000431e <dir_register+0x277>
c000412f:	83 c9 ff             	or     ecx,0xffffffff
c0004132:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 f3 eb ff ff       	call   c0002d2f <fill_last_frag>
c000413c:	85 c0                	test   eax,eax
c000413e:	0f 85 da 01 00 00    	jne    c000431e <dir_register+0x277>
c0004144:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004148:	74 61                	je     c00041ab <dir_register+0x104>
c000414a:	89 da                	mov    edx,ebx
c000414c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004150:	e8 04 f6 ff ff       	call   c0003759 <load_obj_xdir>
c0004155:	85 c0                	test   eax,eax
c0004157:	0f 85 c1 01 00 00    	jne    c000431e <dir_register+0x277>
c000415d:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004161:	c1 e2 09             	shl    edx,0x9
c0004164:	31 c9                	xor    ecx,ecx
c0004166:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004169:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000416c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000416f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004172:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004175:	83 c0 38             	add    eax,0x38
c0004178:	e8 41 d9 ff ff       	call   c0001abe <st_qword>
c000417d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004180:	83 c0 28             	add    eax,0x28
c0004183:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004186:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004189:	e8 30 d9 ff ff       	call   c0001abe <st_qword>
c000418e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004191:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004194:	83 c8 01             	or     eax,0x1
c0004197:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000419a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000419e:	e8 f5 f7 ff ff       	call   c0003998 <store_xdir>
c00041a3:	85 c0                	test   eax,eax
c00041a5:	0f 85 73 01 00 00    	jne    c000431e <dir_register+0x277>
c00041ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b1:	e8 c0 fb ff ff       	call   c0003d76 <create_xdir>
c00041b6:	e9 65 01 00 00       	jmp    c0004320 <dir_register+0x279>
c00041bb:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041be:	b9 0c 00 00 00       	mov    ecx,0xc
c00041c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041c7:	89 c2                	mov    edx,eax
c00041c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041cd:	e8 f2 d8 ff ff       	call   c0001ac4 <mem_cpy>
c00041d2:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041d7:	74 58                	je     c0004231 <dir_register+0x18a>
c00041d9:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041dd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041e5:	83 ec 0c             	sub    esp,0xc
c00041e8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041f3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041f7:	e8 49 dc ff ff       	call   c0001e45 <gen_numname>
c00041fc:	89 d8                	mov    eax,ebx
c00041fe:	e8 dd fc ff ff       	call   c0003ee0 <dir_find>
c0004203:	83 c4 10             	add    esp,0x10
c0004206:	89 c6                	mov    esi,eax
c0004208:	85 c0                	test   eax,eax
c000420a:	75 15                	jne    c0004221 <dir_register+0x17a>
c000420c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004210:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004215:	75 ce                	jne    c00041e5 <dir_register+0x13e>
c0004217:	be 07 00 00 00       	mov    esi,0x7
c000421c:	e9 ff 00 00 00       	jmp    c0004320 <dir_register+0x279>
c0004221:	83 f8 04             	cmp    eax,0x4
c0004224:	0f 85 f6 00 00 00    	jne    c0004320 <dir_register+0x279>
c000422a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000422e:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004231:	b9 01 00 00 00       	mov    ecx,0x1
c0004236:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000423b:	74 0f                	je     c000424c <dir_register+0x1a5>
c000423d:	b9 0d 00 00 00       	mov    ecx,0xd
c0004242:	8d 47 0c             	lea    eax,[edi+0xc]
c0004245:	31 d2                	xor    edx,edx
c0004247:	f7 f1                	div    ecx
c0004249:	8d 48 01             	lea    ecx,[eax+0x1]
c000424c:	89 ca                	mov    edx,ecx
c000424e:	89 d8                	mov    eax,ebx
c0004250:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004254:	e8 c7 f6 ff ff       	call   c0003920 <dir_alloc>
c0004259:	89 c6                	mov    esi,eax
c000425b:	85 c0                	test   eax,eax
c000425d:	0f 85 bd 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004263:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004267:	89 cf                	mov    edi,ecx
c0004269:	4f                   	dec    edi
c000426a:	74 6d                	je     c00042d9 <dir_register+0x232>
c000426c:	89 f8                	mov    eax,edi
c000426e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004271:	c1 e0 05             	shl    eax,0x5
c0004274:	29 c2                	sub    edx,eax
c0004276:	89 d8                	mov    eax,ebx
c0004278:	e8 17 ed ff ff       	call   c0002f94 <dir_sdi>
c000427d:	89 c6                	mov    esi,eax
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 85 99 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004287:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000428b:	e8 71 dc ff ff       	call   c0001f01 <sum_sfn>
c0004290:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004294:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004297:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000429a:	89 e8                	mov    eax,ebp
c000429c:	e8 7b df ff ff       	call   c000221c <move_window>
c00042a1:	89 c6                	mov    esi,eax
c00042a3:	85 c0                	test   eax,eax
c00042a5:	75 79                	jne    c0004320 <dir_register+0x279>
c00042a7:	83 ec 0c             	sub    esp,0xc
c00042aa:	89 f8                	mov    eax,edi
c00042ac:	0f b6 c8             	movzx  ecx,al
c00042af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042b7:	52                   	push   edx
c00042b8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042bb:	e8 01 db ff ff       	call   c0001dc1 <put_lfn>
c00042c0:	31 d2                	xor    edx,edx
c00042c2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042c6:	89 d8                	mov    eax,ebx
c00042c8:	e8 21 f2 ff ff       	call   c00034ee <dir_next>
c00042cd:	83 c4 10             	add    esp,0x10
c00042d0:	89 c6                	mov    esi,eax
c00042d2:	85 c0                	test   eax,eax
c00042d4:	75 4a                	jne    c0004320 <dir_register+0x279>
c00042d6:	4f                   	dec    edi
c00042d7:	75 bb                	jne    c0004294 <dir_register+0x1ed>
c00042d9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042dc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042df:	89 e8                	mov    eax,ebp
c00042e1:	e8 36 df ff ff       	call   c000221c <move_window>
c00042e6:	89 c6                	mov    esi,eax
c00042e8:	85 c0                	test   eax,eax
c00042ea:	75 34                	jne    c0004320 <dir_register+0x279>
c00042ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ef:	b9 20 00 00 00       	mov    ecx,0x20
c00042f4:	31 d2                	xor    edx,edx
c00042f6:	e8 de d7 ff ff       	call   c0001ad9 <mem_set>
c00042fb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004302:	b9 0b 00 00 00       	mov    ecx,0xb
c0004307:	e8 b8 d7 ff ff       	call   c0001ac4 <mem_cpy>
c000430c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000430f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004312:	83 e0 18             	and    eax,0x18
c0004315:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004318:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000431c:	eb 02                	jmp    c0004320 <dir_register+0x279>
c000431e:	89 c6                	mov    esi,eax
c0004320:	83 c4 6c             	add    esp,0x6c
c0004323:	89 f0                	mov    eax,esi
c0004325:	5b                   	pop    ebx
c0004326:	5e                   	pop    esi
c0004327:	5f                   	pop    edi
c0004328:	5d                   	pop    ebp
c0004329:	c3                   	ret    

c000432a <sync_fs>:
c000432a:	56                   	push   esi
c000432b:	53                   	push   ebx
c000432c:	53                   	push   ebx
c000432d:	89 c3                	mov    ebx,eax
c000432f:	e8 54 de ff ff       	call   c0002188 <sync_window>
c0004334:	85 c0                	test   eax,eax
c0004336:	0f 85 b1 00 00 00    	jne    c00043ed <sync_fs+0xc3>
c000433c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000433f:	0f 85 8e 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c0004345:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004349:	0f 85 84 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c000434f:	8d 73 54             	lea    esi,[ebx+0x54]
c0004352:	b9 00 02 00 00       	mov    ecx,0x200
c0004357:	31 d2                	xor    edx,edx
c0004359:	89 f0                	mov    eax,esi
c000435b:	e8 79 d7 ff ff       	call   c0001ad9 <mem_set>
c0004360:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004366:	ba 55 aa 00 00       	mov    edx,0xaa55
c000436b:	e8 47 d7 ff ff       	call   c0001ab7 <st_word>
c0004370:	ba 52 52 61 41       	mov    edx,0x41615252
c0004375:	89 f0                	mov    eax,esi
c0004377:	e8 3f d7 ff ff       	call   c0001abb <st_dword>
c000437c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004382:	ba 72 72 41 61       	mov    edx,0x61417272
c0004387:	e8 2f d7 ff ff       	call   c0001abb <st_dword>
c000438c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004395:	e8 21 d7 ff ff       	call   c0001abb <st_dword>
c000439a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000439d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043a3:	e8 13 d7 ff ff       	call   c0001abb <st_dword>
c00043a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043ab:	83 c0 01             	add    eax,0x1
c00043ae:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043b1:	83 d2 00             	adc    edx,0x0
c00043b4:	83 ec 0c             	sub    esp,0xc
c00043b7:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043ba:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043bd:	6a 01                	push   0x1
c00043bf:	52                   	push   edx
c00043c0:	50                   	push   eax
c00043c1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c5:	56                   	push   esi
c00043c6:	50                   	push   eax
c00043c7:	e8 44 d6 ff ff       	call   c0001a10 <disk_write>
c00043cc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043d0:	83 c4 20             	add    esp,0x20
c00043d3:	51                   	push   ecx
c00043d4:	6a 00                	push   0x0
c00043d6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043da:	6a 00                	push   0x0
c00043dc:	50                   	push   eax
c00043dd:	e8 44 d6 ff ff       	call   c0001a26 <disk_ioctl>
c00043e2:	83 c4 10             	add    esp,0x10
c00043e5:	85 c0                	test   eax,eax
c00043e7:	0f 95 c0             	setne  al
c00043ea:	0f b6 c0             	movzx  eax,al
c00043ed:	5a                   	pop    edx
c00043ee:	5b                   	pop    ebx
c00043ef:	5e                   	pop    esi
c00043f0:	c3                   	ret    

c00043f1 <create_partition>:
c00043f1:	55                   	push   ebp
c00043f2:	57                   	push   edi
c00043f3:	56                   	push   esi
c00043f4:	53                   	push   ebx
c00043f5:	83 ec 60             	sub    esp,0x60
c00043f8:	0f b6 c0             	movzx  eax,al
c00043fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ff:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004403:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004407:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000440b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000440f:	50                   	push   eax
c0004410:	6a 01                	push   0x1
c0004412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004416:	e8 0b d6 ff ff       	call   c0001a26 <disk_ioctl>
c000441b:	83 c4 10             	add    esp,0x10
c000441e:	85 c0                	test   eax,eax
c0004420:	74 0a                	je     c000442c <create_partition+0x3b>
c0004422:	b8 01 00 00 00       	mov    eax,0x1
c0004427:	e9 73 05 00 00       	jmp    c000499f <create_partition+0x5ae>
c000442c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004430:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004434:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004438:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000443c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004441:	0f 86 ed 03 00 00    	jbe    c0004834 <create_partition+0x443>
c0004447:	83 c0 df             	add    eax,0xffffffdf
c000444a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004452:	83 d2 ff             	adc    edx,0xffffffff
c0004455:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004459:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000445d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004461:	83 c0 bd             	add    eax,0xffffffbd
c0004464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004468:	83 d2 ff             	adc    edx,0xffffffff
c000446b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000446f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004473:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000447a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004482:	be 22 00 00 00       	mov    esi,0x22
c0004487:	31 ff                	xor    edi,edi
c0004489:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004491:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004499:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044a1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044a5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044ab:	75 0e                	jne    c00044bb <create_partition+0xca>
c00044ad:	b9 00 02 00 00       	mov    ecx,0x200
c00044b2:	31 d2                	xor    edx,edx
c00044b4:	89 d8                	mov    eax,ebx
c00044b6:	e8 1e d6 ff ff       	call   c0001ad9 <mem_set>
c00044bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044bf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044c7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ca:	0f 84 23 01 00 00    	je     c00045f3 <create_partition+0x202>
c00044d0:	89 f0                	mov    eax,esi
c00044d2:	89 fa                	mov    edx,edi
c00044d4:	05 ff 07 00 00       	add    eax,0x7ff
c00044d9:	83 d2 00             	adc    edx,0x0
c00044dc:	89 c1                	mov    ecx,eax
c00044de:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044e8:	89 ce                	mov    esi,ecx
c00044ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044ee:	89 d7                	mov    edi,edx
c00044f0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044f4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044f8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00044fe:	b8 64 00 00 00       	mov    eax,0x64
c0004503:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004506:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000450a:	b8 00 00 00 00       	mov    eax,0x0
c000450f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004513:	72 41                	jb     c0004556 <create_partition+0x165>
c0004515:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000451d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004522:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004526:	01 c1                	add    ecx,eax
c0004528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000452c:	f7 24 24             	mul    DWORD PTR [esp]
c000452f:	6a 00                	push   0x0
c0004531:	01 ca                	add    edx,ecx
c0004533:	6a 64                	push   0x64
c0004535:	52                   	push   edx
c0004536:	50                   	push   eax
c0004537:	e8 50 ae 01 00       	call   c001f38c <__udivdi3>
c000453c:	83 c4 10             	add    esp,0x10
c000453f:	05 ff 07 00 00       	add    eax,0x7ff
c0004544:	83 d2 00             	adc    edx,0x0
c0004547:	89 c1                	mov    ecx,eax
c0004549:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000454f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004553:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004556:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004559:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000455d:	01 f0                	add    eax,esi
c000455f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004563:	11 fa                	adc    edx,edi
c0004565:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004569:	19 d1                	sbb    ecx,edx
c000456b:	73 2e                	jae    c000459b <create_partition+0x1aa>
c000456d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004571:	89 f8                	mov    eax,edi
c0004573:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004577:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000457e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004586:	73 6b                	jae    c00045f3 <create_partition+0x202>
c0004588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000458c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004590:	29 f0                	sub    eax,esi
c0004592:	19 fa                	sbb    edx,edi
c0004594:	89 04 24             	mov    DWORD PTR [esp],eax
c0004597:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000459b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000459f:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045a2:	74 4f                	je     c00045f3 <create_partition+0x202>
c00045a4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045a7:	b9 10 00 00 00       	mov    ecx,0x10
c00045ac:	ba d0 03 02 c0       	mov    edx,0xc00203d0
c00045b1:	e8 0e d5 ff ff       	call   c0001ac4 <mem_cpy>
c00045b6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045ba:	b9 10 00 00 00       	mov    ecx,0x10
c00045bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045c3:	e8 49 db ff ff       	call   c0002111 <make_rand>
c00045c8:	89 f2                	mov    edx,esi
c00045ca:	89 f9                	mov    ecx,edi
c00045cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045d0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045d4:	e8 e5 d4 ff ff       	call   c0001abe <st_qword>
c00045d9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045dc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045e0:	89 f2                	mov    edx,esi
c00045e2:	89 f9                	mov    ecx,edi
c00045e4:	83 c2 ff             	add    edx,0xffffffff
c00045e7:	83 d1 ff             	adc    ecx,0xffffffff
c00045ea:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045ee:	e8 cb d4 ff ff       	call   c0001abe <st_qword>
c00045f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045f7:	83 e8 80             	sub    eax,0xffffff80
c00045fa:	89 c5                	mov    ebp,eax
c00045fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004600:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004606:	75 6b                	jne    c0004673 <create_partition+0x282>
c0004608:	45                   	inc    ebp
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004612:	e8 56 da ff ff       	call   c000206d <crc32>
c0004617:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000461d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004621:	75 e5                	jne    c0004608 <create_partition+0x217>
c0004623:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004627:	83 ec 0c             	sub    esp,0xc
c000462a:	c1 ed 09             	shr    ebp,0x9
c000462d:	31 d2                	xor    edx,edx
c000462f:	6a 01                	push   0x1
c0004631:	52                   	push   edx
c0004632:	8d 45 02             	lea    eax,[ebp+0x2]
c0004635:	50                   	push   eax
c0004636:	53                   	push   ebx
c0004637:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000463b:	e8 d0 d3 ff ff       	call   c0001a10 <disk_write>
c0004640:	83 c4 20             	add    esp,0x20
c0004643:	85 c0                	test   eax,eax
c0004645:	0f 85 d7 fd ff ff    	jne    c0004422 <create_partition+0x31>
c000464b:	83 ec 0c             	sub    esp,0xc
c000464e:	89 e8                	mov    eax,ebp
c0004650:	31 d2                	xor    edx,edx
c0004652:	6a 01                	push   0x1
c0004654:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004658:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000465c:	52                   	push   edx
c000465d:	50                   	push   eax
c000465e:	53                   	push   ebx
c000465f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004663:	e8 a8 d3 ff ff       	call   c0001a10 <disk_write>
c0004668:	83 c4 20             	add    esp,0x20
c000466b:	85 c0                	test   eax,eax
c000466d:	0f 85 af fd ff ff    	jne    c0004422 <create_partition+0x31>
c0004673:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004677:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000467b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004680:	74 0d                	je     c000468f <create_partition+0x29e>
c0004682:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004686:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000468a:	e9 12 fe ff ff       	jmp    c00044a1 <create_partition+0xb0>
c000468f:	31 d2                	xor    edx,edx
c0004691:	b9 00 02 00 00       	mov    ecx,0x200
c0004696:	89 d8                	mov    eax,ebx
c0004698:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000469b:	e8 39 d4 ff ff       	call   c0001ad9 <mem_set>
c00046a0:	b9 10 00 00 00       	mov    ecx,0x10
c00046a5:	ba c0 02 02 c0       	mov    edx,0xc00202c0
c00046aa:	89 d8                	mov    eax,ebx
c00046ac:	e8 13 d4 ff ff       	call   c0001ac4 <mem_cpy>
c00046b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046b5:	f7 d2                	not    edx
c00046b7:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ba:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046bd:	e8 f9 d3 ff ff       	call   c0001abb <st_dword>
c00046c2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	ba 01 00 00 00       	mov    edx,0x1
c00046cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00046cf:	e8 ea d3 ff ff       	call   c0001abe <st_qword>
c00046d4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046d8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046dc:	83 c2 ff             	add    edx,0xffffffff
c00046df:	89 e8                	mov    eax,ebp
c00046e1:	83 d1 ff             	adc    ecx,0xffffffff
c00046e4:	e8 d5 d3 ff ff       	call   c0001abe <st_qword>
c00046e9:	31 c9                	xor    ecx,ecx
c00046eb:	8d 43 28             	lea    eax,[ebx+0x28]
c00046ee:	ba 22 00 00 00       	mov    edx,0x22
c00046f3:	e8 c6 d3 ff ff       	call   c0001abe <st_qword>
c00046f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046fc:	83 c2 de             	add    edx,0xffffffde
c00046ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004703:	83 d1 ff             	adc    ecx,0xffffffff
c0004706:	8d 43 30             	lea    eax,[ebx+0x30]
c0004709:	e8 b0 d3 ff ff       	call   c0001abe <st_qword>
c000470e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004711:	ba 80 00 00 00       	mov    edx,0x80
c0004716:	31 f6                	xor    esi,esi
c0004718:	e8 9e d3 ff ff       	call   c0001abb <st_dword>
c000471d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004720:	ba 80 00 00 00       	mov    edx,0x80
c0004725:	e8 91 d3 ff ff       	call   c0001abb <st_dword>
c000472a:	ba 02 00 00 00       	mov    edx,0x2
c000472f:	89 f8                	mov    eax,edi
c0004731:	e8 85 d3 ff ff       	call   c0001abb <st_dword>
c0004736:	8d 53 38             	lea    edx,[ebx+0x38]
c0004739:	b9 10 00 00 00       	mov    ecx,0x10
c000473e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004742:	e8 ca d9 ff ff       	call   c0002111 <make_rand>
c0004747:	83 c8 ff             	or     eax,0xffffffff
c000474a:	46                   	inc    esi
c000474b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004750:	e8 18 d9 ff ff       	call   c000206d <crc32>
c0004755:	83 fe 5c             	cmp    esi,0x5c
c0004758:	75 f0                	jne    c000474a <create_partition+0x359>
c000475a:	f7 d0                	not    eax
c000475c:	8d 73 10             	lea    esi,[ebx+0x10]
c000475f:	89 c2                	mov    edx,eax
c0004761:	89 f0                	mov    eax,esi
c0004763:	e8 53 d3 ff ff       	call   c0001abb <st_dword>
c0004768:	83 ec 0c             	sub    esp,0xc
c000476b:	6a 01                	push   0x1
c000476d:	6a 00                	push   0x0
c000476f:	6a 01                	push   0x1
c0004771:	53                   	push   ebx
c0004772:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004776:	e8 95 d2 ff ff       	call   c0001a10 <disk_write>
c000477b:	83 c4 20             	add    esp,0x20
c000477e:	85 c0                	test   eax,eax
c0004780:	0f 85 9c fc ff ff    	jne    c0004422 <create_partition+0x31>
c0004786:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000478a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000478e:	83 c2 ff             	add    edx,0xffffffff
c0004791:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004794:	83 d1 ff             	adc    ecx,0xffffffff
c0004797:	e8 22 d3 ff ff       	call   c0001abe <st_qword>
c000479c:	ba 01 00 00 00       	mov    edx,0x1
c00047a1:	31 c9                	xor    ecx,ecx
c00047a3:	89 e8                	mov    eax,ebp
c00047a5:	e8 14 d3 ff ff       	call   c0001abe <st_qword>
c00047aa:	89 f8                	mov    eax,edi
c00047ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047b4:	e8 05 d3 ff ff       	call   c0001abe <st_qword>
c00047b9:	89 f0                	mov    eax,esi
c00047bb:	31 d2                	xor    edx,edx
c00047bd:	31 ff                	xor    edi,edi
c00047bf:	e8 f7 d2 ff ff       	call   c0001abb <st_dword>
c00047c4:	83 c8 ff             	or     eax,0xffffffff
c00047c7:	47                   	inc    edi
c00047c8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047cd:	e8 9b d8 ff ff       	call   c000206d <crc32>
c00047d2:	83 ff 5c             	cmp    edi,0x5c
c00047d5:	75 f0                	jne    c00047c7 <create_partition+0x3d6>
c00047d7:	f7 d0                	not    eax
c00047d9:	89 c2                	mov    edx,eax
c00047db:	89 f0                	mov    eax,esi
c00047dd:	e8 d9 d2 ff ff       	call   c0001abb <st_dword>
c00047e2:	83 ec 0c             	sub    esp,0xc
c00047e5:	6a 01                	push   0x1
c00047e7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047eb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047ef:	83 c0 ff             	add    eax,0xffffffff
c00047f2:	83 d2 ff             	adc    edx,0xffffffff
c00047f5:	52                   	push   edx
c00047f6:	50                   	push   eax
c00047f7:	53                   	push   ebx
c00047f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047fc:	e8 0f d2 ff ff       	call   c0001a10 <disk_write>
c0004801:	83 c4 20             	add    esp,0x20
c0004804:	85 c0                	test   eax,eax
c0004806:	0f 85 16 fc ff ff    	jne    c0004422 <create_partition+0x31>
c000480c:	31 d2                	xor    edx,edx
c000480e:	89 d8                	mov    eax,ebx
c0004810:	b9 00 02 00 00       	mov    ecx,0x200
c0004815:	e8 bf d2 ff ff       	call   c0001ad9 <mem_set>
c000481a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004820:	b9 10 00 00 00       	mov    ecx,0x10
c0004825:	ba d0 02 02 c0       	mov    edx,0xc00202d0
c000482a:	e8 95 d2 ff ff       	call   c0001ac4 <mem_cpy>
c000482f:	e9 3d 01 00 00       	jmp    c0004971 <create_partition+0x580>
c0004834:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004838:	b9 05 00 00 00       	mov    ecx,0x5
c000483d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004840:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004845:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c000484a:	31 d2                	xor    edx,edx
c000484c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000484f:	f7 f6                	div    esi
c0004851:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004856:	76 0c                	jbe    c0004864 <create_partition+0x473>
c0004858:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c000485c:	49                   	dec    ecx
c000485d:	75 e6                	jne    c0004845 <create_partition+0x454>
c000485f:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c0004864:	b9 00 02 00 00       	mov    ecx,0x200
c0004869:	31 d2                	xor    edx,edx
c000486b:	89 d8                	mov    eax,ebx
c000486d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004872:	e8 62 d2 ff ff       	call   c0001ad9 <mem_set>
c0004877:	b9 64 00 00 00       	mov    ecx,0x64
c000487c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000487f:	31 d2                	xor    edx,edx
c0004881:	f7 f1                	div    ecx
c0004883:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004887:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c000488d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0004895:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c000489a:	0f 96 c2             	setbe  dl
c000489d:	85 ed                	test   ebp,ebp
c000489f:	0f 95 c0             	setne  al
c00048a2:	84 c2                	test   dl,al
c00048a4:	0f 84 c7 00 00 00    	je     c0004971 <create_partition+0x580>
c00048aa:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048ad:	0f 83 be 00 00 00    	jae    c0004971 <create_partition+0x580>
c00048b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048bb:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048be:	83 fe 64             	cmp    esi,0x64
c00048c1:	77 0c                	ja     c00048cf <create_partition+0x4de>
c00048c3:	74 07                	je     c00048cc <create_partition+0x4db>
c00048c5:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048ca:	eb 03                	jmp    c00048cf <create_partition+0x4de>
c00048cc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048cf:	89 e8                	mov    eax,ebp
c00048d1:	01 f0                	add    eax,esi
c00048d3:	72 05                	jb     c00048da <create_partition+0x4e9>
c00048d5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048d8:	76 07                	jbe    c00048e1 <create_partition+0x4f0>
c00048da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048dd:	29 ee                	sub    esi,ebp
c00048df:	eb 08                	jmp    c00048e9 <create_partition+0x4f8>
c00048e1:	85 f6                	test   esi,esi
c00048e3:	0f 84 88 00 00 00    	je     c0004971 <create_partition+0x580>
c00048e9:	89 c8                	mov    eax,ecx
c00048eb:	89 ea                	mov    edx,ebp
c00048ed:	e8 c9 d1 ff ff       	call   c0001abb <st_dword>
c00048f2:	89 f2                	mov    edx,esi
c00048f4:	bf 3f 00 00 00       	mov    edi,0x3f
c00048f9:	8d 41 04             	lea    eax,[ecx+0x4]
c00048fc:	e8 ba d1 ff ff       	call   c0001abb <st_dword>
c0004901:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004905:	31 d2                	xor    edx,edx
c0004907:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000490b:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c000490e:	83 c1 10             	add    ecx,0x10
c0004911:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004916:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000491a:	89 e8                	mov    eax,ebp
c000491c:	f7 f7                	div    edi
c000491e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004922:	31 d2                	xor    edx,edx
c0004924:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004928:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c000492b:	89 c2                	mov    edx,eax
c000492d:	c1 ea 02             	shr    edx,0x2
c0004930:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004934:	47                   	inc    edi
c0004935:	01 f5                	add    ebp,esi
c0004937:	83 e2 c0             	and    edx,0xffffffc0
c000493a:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c000493d:	09 fa                	or     edx,edi
c000493f:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004942:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004945:	bf 3f 00 00 00       	mov    edi,0x3f
c000494a:	31 d2                	xor    edx,edx
c000494c:	f7 f7                	div    edi
c000494e:	89 d6                	mov    esi,edx
c0004950:	31 d2                	xor    edx,edx
c0004952:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004956:	89 c7                	mov    edi,eax
c0004958:	46                   	inc    esi
c0004959:	c1 ef 02             	shr    edi,0x2
c000495c:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c000495f:	83 e7 c0             	and    edi,0xffffffc0
c0004962:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c0004965:	09 fe                	or     esi,edi
c0004967:	89 f2                	mov    edx,esi
c0004969:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c000496c:	e9 24 ff ff ff       	jmp    c0004895 <create_partition+0x4a4>
c0004971:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004977:	ba 55 aa 00 00       	mov    edx,0xaa55
c000497c:	e8 36 d1 ff ff       	call   c0001ab7 <st_word>
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	6a 01                	push   0x1
c0004986:	6a 00                	push   0x0
c0004988:	6a 00                	push   0x0
c000498a:	53                   	push   ebx
c000498b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000498f:	e8 7c d0 ff ff       	call   c0001a10 <disk_write>
c0004994:	83 c4 20             	add    esp,0x20
c0004997:	85 c0                	test   eax,eax
c0004999:	0f 95 c0             	setne  al
c000499c:	0f b6 c0             	movzx  eax,al
c000499f:	83 c4 5c             	add    esp,0x5c
c00049a2:	5b                   	pop    ebx
c00049a3:	5e                   	pop    esi
c00049a4:	5f                   	pop    edi
c00049a5:	5d                   	pop    ebp
c00049a6:	c3                   	ret    

c00049a7 <get_fileinfo>:
c00049a7:	55                   	push   ebp
c00049a8:	57                   	push   edi
c00049a9:	56                   	push   esi
c00049aa:	53                   	push   ebx
c00049ab:	83 ec 1c             	sub    esp,0x1c
c00049ae:	8b 30                	mov    esi,DWORD PTR [eax]
c00049b0:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049b4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049b7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049bb:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049be:	0f 84 dc 01 00 00    	je     c0004ba0 <get_fileinfo+0x1f9>
c00049c4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049c7:	75 0f                	jne    c00049d8 <get_fileinfo+0x31>
c00049c9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049cc:	83 c4 1c             	add    esp,0x1c
c00049cf:	5b                   	pop    ebx
c00049d0:	5e                   	pop    esi
c00049d1:	5f                   	pop    edi
c00049d2:	5d                   	pop    ebp
c00049d3:	e9 70 d5 ff ff       	jmp    c0001f48 <get_xfileinfo>
c00049d8:	89 d3                	mov    ebx,edx
c00049da:	89 c6                	mov    esi,eax
c00049dc:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049e0:	74 6a                	je     c0004a4c <get_fileinfo+0xa5>
c00049e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ea:	31 ed                	xor    ebp,ebp
c00049ec:	31 ff                	xor    edi,edi
c00049ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049f9:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049fd:	66 85 d2             	test   dx,dx
c0004a00:	74 3e                	je     c0004a40 <get_fileinfo+0x99>
c0004a02:	66 85 ed             	test   bp,bp
c0004a05:	75 0c                	jne    c0004a13 <get_fileinfo+0x6c>
c0004a07:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a0d:	66 3d ff 07          	cmp    ax,0x7ff
c0004a11:	76 22                	jbe    c0004a35 <get_fileinfo+0x8e>
c0004a13:	89 e8                	mov    eax,ebp
c0004a15:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a1a:	c1 e0 10             	shl    eax,0x10
c0004a1d:	29 f9                	sub    ecx,edi
c0004a1f:	09 d0                	or     eax,edx
c0004a21:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a25:	e8 bb d1 ff ff       	call   c0001be5 <put_utf>
c0004a2a:	84 c0                	test   al,al
c0004a2c:	74 10                	je     c0004a3e <get_fileinfo+0x97>
c0004a2e:	0f b6 c0             	movzx  eax,al
c0004a31:	01 c7                	add    edi,eax
c0004a33:	31 d2                	xor    edx,edx
c0004a35:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a3a:	89 d5                	mov    ebp,edx
c0004a3c:	eb b0                	jmp    c00049ee <get_fileinfo+0x47>
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	66 85 ed             	test   bp,bp
c0004a43:	74 02                	je     c0004a47 <get_fileinfo+0xa0>
c0004a45:	31 ff                	xor    edi,edi
c0004a47:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a4c:	31 ff                	xor    edi,edi
c0004a4e:	31 c9                	xor    ecx,ecx
c0004a50:	83 f9 0a             	cmp    ecx,0xa
c0004a53:	0f 87 ad 00 00 00    	ja     c0004b06 <get_fileinfo+0x15f>
c0004a59:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a5c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a5f:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a63:	66 83 fa 20          	cmp    dx,0x20
c0004a67:	0f 84 92 00 00 00    	je     c0004aff <get_fileinfo+0x158>
c0004a6d:	66 83 fa 05          	cmp    dx,0x5
c0004a71:	75 05                	jne    c0004a78 <get_fileinfo+0xd1>
c0004a73:	ba e5 00 00 00       	mov    edx,0xe5
c0004a78:	83 fd 09             	cmp    ebp,0x9
c0004a7b:	75 0b                	jne    c0004a88 <get_fileinfo+0xe1>
c0004a7d:	83 ff 0b             	cmp    edi,0xb
c0004a80:	77 06                	ja     c0004a88 <get_fileinfo+0xe1>
c0004a82:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a87:	47                   	inc    edi
c0004a88:	0f b7 c2             	movzx  eax,dx
c0004a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a8f:	e8 85 d0 ff ff       	call   c0001b19 <dbc_1st>
c0004a94:	85 c0                	test   eax,eax
c0004a96:	74 2f                	je     c0004ac7 <get_fileinfo+0x120>
c0004a98:	83 fd 08             	cmp    ebp,0x8
c0004a9b:	74 2a                	je     c0004ac7 <get_fileinfo+0x120>
c0004a9d:	83 fd 0b             	cmp    ebp,0xb
c0004aa0:	74 25                	je     c0004ac7 <get_fileinfo+0x120>
c0004aa2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa5:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aa9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aad:	e8 6a d0 ff ff       	call   c0001b1c <dbc_2nd>
c0004ab2:	85 c0                	test   eax,eax
c0004ab4:	74 11                	je     c0004ac7 <get_fileinfo+0x120>
c0004ab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aba:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004abd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ac2:	c1 e2 08             	shl    edx,0x8
c0004ac5:	09 c2                	or     edx,eax
c0004ac7:	50                   	push   eax
c0004ac8:	50                   	push   eax
c0004ac9:	68 b5 01 00 00       	push   0x1b5
c0004ace:	0f b7 d2             	movzx  edx,dx
c0004ad1:	52                   	push   edx
c0004ad2:	e8 17 38 00 00       	call   c00082ee <ff_oem2uni>
c0004ad7:	83 c4 10             	add    esp,0x10
c0004ada:	66 85 c0             	test   ax,ax
c0004add:	75 04                	jne    c0004ae3 <get_fileinfo+0x13c>
c0004adf:	31 ff                	xor    edi,edi
c0004ae1:	eb 23                	jmp    c0004b06 <get_fileinfo+0x15f>
c0004ae3:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ae8:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004aec:	29 f9                	sub    ecx,edi
c0004aee:	0f b7 c0             	movzx  eax,ax
c0004af1:	e8 ef d0 ff ff       	call   c0001be5 <put_utf>
c0004af6:	84 c0                	test   al,al
c0004af8:	74 e5                	je     c0004adf <get_fileinfo+0x138>
c0004afa:	0f b6 c0             	movzx  eax,al
c0004afd:	01 c7                	add    edi,eax
c0004aff:	89 e9                	mov    ecx,ebp
c0004b01:	e9 4a ff ff ff       	jmp    c0004a50 <get_fileinfo+0xa9>
c0004b06:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b0b:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b0f:	75 54                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b11:	85 ff                	test   edi,edi
c0004b13:	75 0b                	jne    c0004b20 <get_fileinfo+0x179>
c0004b15:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b19:	ba 01 00 00 00       	mov    edx,0x1
c0004b1e:	eb 33                	jmp    c0004b53 <get_fileinfo+0x1ac>
c0004b20:	b1 08                	mov    cl,0x8
c0004b22:	31 d2                	xor    edx,edx
c0004b24:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b2a:	84 c0                	test   al,al
c0004b2c:	74 25                	je     c0004b53 <get_fileinfo+0x1ac>
c0004b2e:	66 83 f8 2e          	cmp    ax,0x2e
c0004b32:	74 16                	je     c0004b4a <get_fileinfo+0x1a3>
c0004b34:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b37:	66 83 ff 19          	cmp    di,0x19
c0004b3b:	77 0f                	ja     c0004b4c <get_fileinfo+0x1a5>
c0004b3d:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b40:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b43:	74 07                	je     c0004b4c <get_fileinfo+0x1a5>
c0004b45:	83 c0 20             	add    eax,0x20
c0004b48:	eb 02                	jmp    c0004b4c <get_fileinfo+0x1a5>
c0004b4a:	b1 10                	mov    cl,0x10
c0004b4c:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b50:	42                   	inc    edx
c0004b51:	eb d1                	jmp    c0004b24 <get_fileinfo+0x17d>
c0004b53:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b5f:	75 04                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b61:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b65:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b68:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b6b:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b71:	83 c0 1c             	add    eax,0x1c
c0004b74:	e8 d9 ce ff ff       	call   c0001a52 <ld_dword>
c0004b79:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b80:	89 03                	mov    DWORD PTR [ebx],eax
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	83 c0 16             	add    eax,0x16
c0004b88:	e8 b8 ce ff ff       	call   c0001a45 <ld_word>
c0004b8d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b91:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b94:	83 c0 18             	add    eax,0x18
c0004b97:	e8 a9 ce ff ff       	call   c0001a45 <ld_word>
c0004b9c:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ba0:	83 c4 1c             	add    esp,0x1c
c0004ba3:	5b                   	pop    ebx
c0004ba4:	5e                   	pop    esi
c0004ba5:	5f                   	pop    edi
c0004ba6:	5d                   	pop    ebp
c0004ba7:	c3                   	ret    

c0004ba8 <ld_clust.isra.0>:
c0004ba8:	56                   	push   esi
c0004ba9:	89 c6                	mov    esi,eax
c0004bab:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bae:	53                   	push   ebx
c0004baf:	89 d3                	mov    ebx,edx
c0004bb1:	e8 8f ce ff ff       	call   c0001a45 <ld_word>
c0004bb6:	0f b7 c8             	movzx  ecx,ax
c0004bb9:	89 f0                	mov    eax,esi
c0004bbb:	3c 03                	cmp    al,0x3
c0004bbd:	75 0d                	jne    c0004bcc <ld_clust.isra.0+0x24>
c0004bbf:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc2:	e8 7e ce ff ff       	call   c0001a45 <ld_word>
c0004bc7:	c1 e0 10             	shl    eax,0x10
c0004bca:	09 c1                	or     ecx,eax
c0004bcc:	5b                   	pop    ebx
c0004bcd:	89 c8                	mov    eax,ecx
c0004bcf:	5e                   	pop    esi
c0004bd0:	c3                   	ret    

c0004bd1 <st_clust.isra.1>:
c0004bd1:	56                   	push   esi
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	53                   	push   ebx
c0004bd5:	89 d3                	mov    ebx,edx
c0004bd7:	0f b7 d1             	movzx  edx,cx
c0004bda:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bdd:	e8 d5 ce ff ff       	call   c0001ab7 <st_word>
c0004be2:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004be5:	75 0f                	jne    c0004bf6 <st_clust.isra.1+0x25>
c0004be7:	c1 e9 10             	shr    ecx,0x10
c0004bea:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bed:	89 ca                	mov    edx,ecx
c0004bef:	5b                   	pop    ebx
c0004bf0:	5e                   	pop    esi
c0004bf1:	e9 c1 ce ff ff       	jmp    c0001ab7 <st_word>
c0004bf6:	5b                   	pop    ebx
c0004bf7:	5e                   	pop    esi
c0004bf8:	c3                   	ret    

c0004bf9 <init_alloc_info.isra.2>:
c0004bf9:	56                   	push   esi
c0004bfa:	89 c6                	mov    esi,eax
c0004bfc:	53                   	push   ebx
c0004bfd:	89 d3                	mov    ebx,edx
c0004bff:	51                   	push   ecx
c0004c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c02:	83 c0 34             	add    eax,0x34
c0004c05:	e8 48 ce ff ff       	call   c0001a52 <ld_dword>
c0004c0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c0d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c0f:	83 c0 38             	add    eax,0x38
c0004c12:	e8 53 ce ff ff       	call   c0001a6a <ld_qword>
c0004c17:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c1a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c1f:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c22:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c29:	83 e0 02             	and    eax,0x2
c0004c2c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c2f:	5b                   	pop    ebx
c0004c30:	5b                   	pop    ebx
c0004c31:	5e                   	pop    esi
c0004c32:	c3                   	ret    

c0004c33 <follow_path>:
c0004c33:	56                   	push   esi
c0004c34:	53                   	push   ebx
c0004c35:	89 c3                	mov    ebx,eax
c0004c37:	83 ec 14             	sub    esp,0x14
c0004c3a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c44:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c46:	80 fa 2f             	cmp    dl,0x2f
c0004c49:	75 07                	jne    c0004c52 <follow_path+0x1f>
c0004c4b:	40                   	inc    eax
c0004c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c50:	eb ee                	jmp    c0004c40 <follow_path+0xd>
c0004c52:	80 fa 5c             	cmp    dl,0x5c
c0004c55:	74 f4                	je     c0004c4b <follow_path+0x18>
c0004c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c65:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c68:	77 52                	ja     c0004cbc <follow_path+0x89>
c0004c6a:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c6e:	31 d2                	xor    edx,edx
c0004c70:	89 d8                	mov    eax,ebx
c0004c72:	e8 1d e3 ff ff       	call   c0002f94 <dir_sdi>
c0004c77:	eb 7c                	jmp    c0004cf5 <follow_path+0xc2>
c0004c79:	89 d8                	mov    eax,ebx
c0004c7b:	e8 60 f2 ff ff       	call   c0003ee0 <dir_find>
c0004c80:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	75 46                	jne    c0004ccd <follow_path+0x9a>
c0004c87:	80 e2 04             	and    dl,0x4
c0004c8a:	75 69                	jne    c0004cf5 <follow_path+0xc2>
c0004c8c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c90:	74 5e                	je     c0004cf0 <follow_path+0xbd>
c0004c92:	8a 06                	mov    al,BYTE PTR [esi]
c0004c94:	3c 04                	cmp    al,0x4
c0004c96:	75 41                	jne    c0004cd9 <follow_path+0xa6>
c0004c98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c9b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c9f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ca2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ca5:	30 c0                	xor    al,al
c0004ca7:	09 d0                	or     eax,edx
c0004ca9:	89 da                	mov    edx,ebx
c0004cab:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cae:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cb1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cb4:	8d 46 10             	lea    eax,[esi+0x10]
c0004cb7:	e8 3d ff ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004cbc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cc0:	89 d8                	mov    eax,ebx
c0004cc2:	e8 b6 ed ff ff       	call   c0003a7d <create_name>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	74 ae                	je     c0004c79 <follow_path+0x46>
c0004ccb:	eb 28                	jmp    c0004cf5 <follow_path+0xc2>
c0004ccd:	83 f8 04             	cmp    eax,0x4
c0004cd0:	75 23                	jne    c0004cf5 <follow_path+0xc2>
c0004cd2:	80 e2 04             	and    dl,0x4
c0004cd5:	74 19                	je     c0004cf0 <follow_path+0xbd>
c0004cd7:	eb 1c                	jmp    c0004cf5 <follow_path+0xc2>
c0004cd9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cdc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ce2:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ce6:	e8 bd fe ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004ceb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cee:	eb cc                	jmp    c0004cbc <follow_path+0x89>
c0004cf0:	b8 05 00 00 00       	mov    eax,0x5
c0004cf5:	83 c4 14             	add    esp,0x14
c0004cf8:	5b                   	pop    ebx
c0004cf9:	5e                   	pop    esi
c0004cfa:	c3                   	ret    

c0004cfb <f_mount>:
c0004cfb:	53                   	push   ebx
c0004cfc:	83 ec 18             	sub    esp,0x18
c0004cff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d03:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d0f:	e8 13 d3 ff ff       	call   c0002027 <get_ldnumber>
c0004d14:	89 c2                	mov    edx,eax
c0004d16:	b8 0b 00 00 00       	mov    eax,0xb
c0004d1b:	85 d2                	test   edx,edx
c0004d1d:	78 39                	js     c0004d58 <f_mount+0x5d>
c0004d1f:	8b 04 95 c0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb40]
c0004d26:	85 c0                	test   eax,eax
c0004d28:	74 03                	je     c0004d2d <f_mount+0x32>
c0004d2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d31:	85 c0                	test   eax,eax
c0004d33:	74 03                	je     c0004d38 <f_mount+0x3d>
c0004d35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d3c:	89 04 95 c0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb40],eax
c0004d43:	31 c0                	xor    eax,eax
c0004d45:	84 db                	test   bl,bl
c0004d47:	74 0f                	je     c0004d58 <f_mount+0x5d>
c0004d49:	31 c9                	xor    ecx,ecx
c0004d4b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d53:	e8 6f d7 ff ff       	call   c00024c7 <mount_volume>
c0004d58:	83 c4 18             	add    esp,0x18
c0004d5b:	5b                   	pop    ebx
c0004d5c:	c3                   	ret    

c0004d5d <f_open>:
c0004d5d:	55                   	push   ebp
c0004d5e:	bd 09 00 00 00       	mov    ebp,0x9
c0004d63:	57                   	push   edi
c0004d64:	56                   	push   esi
c0004d65:	53                   	push   ebx
c0004d66:	83 ec 7c             	sub    esp,0x7c
c0004d69:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d70:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d77:	85 db                	test   ebx,ebx
c0004d79:	0f 84 10 04 00 00    	je     c000518f <f_open+0x432>
c0004d7f:	89 fe                	mov    esi,edi
c0004d81:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d85:	83 e6 3f             	and    esi,0x3f
c0004d88:	89 f0                	mov    eax,esi
c0004d8a:	0f b6 c8             	movzx  ecx,al
c0004d8d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d94:	e8 2e d7 ff ff       	call   c00024c7 <mount_volume>
c0004d99:	89 c5                	mov    ebp,eax
c0004d9b:	85 c0                	test   eax,eax
c0004d9d:	0f 85 e6 03 00 00    	jne    c0005189 <f_open+0x42c>
c0004da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da7:	83 ec 0c             	sub    esp,0xc
c0004daa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004dae:	bd 11 00 00 00       	mov    ebp,0x11
c0004db3:	68 60 04 00 00       	push   0x460
c0004db8:	e8 6e 34 00 00       	call   c000822b <ff_memalloc>
c0004dbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc1:	83 c4 10             	add    esp,0x10
c0004dc4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dc9:	0f 84 c0 03 00 00    	je     c000518f <f_open+0x432>
c0004dcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd7:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ddd:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004de0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004de3:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dee:	e8 40 fe ff ff       	call   c0004c33 <follow_path>
c0004df3:	89 c5                	mov    ebp,eax
c0004df5:	85 c0                	test   eax,eax
c0004df7:	75 0c                	jne    c0004e05 <f_open+0xa8>
c0004df9:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dfe:	79 05                	jns    c0004e05 <f_open+0xa8>
c0004e00:	bd 06 00 00 00       	mov    ebp,0x6
c0004e05:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e0b:	0f 84 84 01 00 00    	je     c0004f95 <f_open+0x238>
c0004e11:	85 ed                	test   ebp,ebp
c0004e13:	74 20                	je     c0004e35 <f_open+0xd8>
c0004e15:	83 fd 04             	cmp    ebp,0x4
c0004e18:	0f 85 58 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e22:	83 ce 08             	or     esi,0x8
c0004e25:	e8 7d f2 ff ff       	call   c00040a7 <dir_register>
c0004e2a:	89 c5                	mov    ebp,eax
c0004e2c:	85 c0                	test   eax,eax
c0004e2e:	74 2f                	je     c0004e5f <f_open+0x102>
c0004e30:	e9 41 03 00 00       	jmp    c0005176 <f_open+0x419>
c0004e35:	bd 07 00 00 00       	mov    ebp,0x7
c0004e3a:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e3f:	0f 85 31 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e45:	bd 08 00 00 00       	mov    ebp,0x8
c0004e4a:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e50:	0f 85 20 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e56:	83 e7 08             	and    edi,0x8
c0004e59:	0f 84 65 01 00 00    	je     c0004fc4 <f_open+0x267>
c0004e5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e63:	8a 02                	mov    al,BYTE PTR [edx]
c0004e65:	3c 04                	cmp    al,0x4
c0004e67:	0f 85 97 00 00 00    	jne    c0004f04 <f_open+0x1a7>
c0004e6d:	8d 42 10             	lea    eax,[edx+0x10]
c0004e70:	89 13                	mov    DWORD PTR [ebx],edx
c0004e72:	89 da                	mov    edx,ebx
c0004e74:	e8 80 fd ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e80:	31 d2                	xor    edx,edx
c0004e82:	83 c0 02             	add    eax,0x2
c0004e85:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e8a:	e8 4a cc ff ff       	call   c0001ad9 <mem_set>
c0004e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e96:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e9b:	83 c0 26             	add    eax,0x26
c0004e9e:	31 d2                	xor    edx,edx
c0004ea0:	e8 34 cc ff ff       	call   c0001ad9 <mem_set>
c0004ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eac:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eb0:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb8:	83 c0 08             	add    eax,0x8
c0004ebb:	e8 fb cb ff ff       	call   c0001abb <st_dword>
c0004ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec7:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ecb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ecf:	e8 c4 ea ff ff       	call   c0003998 <store_xdir>
c0004ed4:	89 c5                	mov    ebp,eax
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	0f 85 98 02 00 00    	jne    c0005176 <f_open+0x419>
c0004ede:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ee1:	85 d2                	test   edx,edx
c0004ee3:	0f 84 db 00 00 00    	je     c0004fc4 <f_open+0x267>
c0004ee9:	31 c9                	xor    ecx,ecx
c0004eeb:	89 d8                	mov    eax,ebx
c0004eed:	e8 9b e3 ff ff       	call   c000328d <remove_chain>
c0004ef2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ef6:	89 c5                	mov    ebp,eax
c0004ef8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004efb:	48                   	dec    eax
c0004efc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004eff:	e9 b8 00 00 00       	jmp    c0004fbc <f_open+0x25f>
c0004f04:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f08:	89 ea                	mov    edx,ebp
c0004f0a:	e8 99 fc ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004f0f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f14:	89 c7                	mov    edi,eax
c0004f16:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f19:	e8 9d cb ff ff       	call   c0001abb <st_dword>
c0004f1e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f26:	31 c9                	xor    ecx,ecx
c0004f28:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f30:	e8 9c fc ff ff       	call   c0004bd1 <st_clust.isra.1>
c0004f35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f39:	83 c0 1c             	add    eax,0x1c
c0004f3c:	31 d2                	xor    edx,edx
c0004f3e:	e8 78 cb ff ff       	call   c0001abb <st_dword>
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	85 ff                	test   edi,edi
c0004f49:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f4d:	74 75                	je     c0004fc4 <f_open+0x267>
c0004f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f53:	31 c9                	xor    ecx,ecx
c0004f55:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f58:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f67:	89 fa                	mov    edx,edi
c0004f69:	e8 1f e3 ff ff       	call   c000328d <remove_chain>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	85 c0                	test   eax,eax
c0004f72:	0f 85 fe 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f84:	4f                   	dec    edi
c0004f85:	e8 92 d2 ff ff       	call   c000221c <move_window>
c0004f8a:	89 c5                	mov    ebp,eax
c0004f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f90:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f93:	eb 27                	jmp    c0004fbc <f_open+0x25f>
c0004f95:	85 ed                	test   ebp,ebp
c0004f97:	0f 85 d9 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f9d:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fa1:	bd 04 00 00 00       	mov    ebp,0x4
c0004fa6:	a8 10                	test   al,0x10
c0004fa8:	0f 85 c8 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fae:	83 e7 02             	and    edi,0x2
c0004fb1:	74 11                	je     c0004fc4 <f_open+0x267>
c0004fb3:	bd 07 00 00 00       	mov    ebp,0x7
c0004fb8:	a8 01                	test   al,0x1
c0004fba:	eb 02                	jmp    c0004fbe <f_open+0x261>
c0004fbc:	85 ed                	test   ebp,ebp
c0004fbe:	0f 85 b2 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fc4:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fca:	74 03                	je     c0004fcf <f_open+0x272>
c0004fcc:	83 ce 40             	or     esi,0x40
c0004fcf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fd3:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fd6:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fd9:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fdc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fe0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fe3:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fe6:	8a 02                	mov    al,BYTE PTR [edx]
c0004fe8:	3c 04                	cmp    al,0x4
c0004fea:	75 2a                	jne    c0005016 <f_open+0x2b9>
c0004fec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004ff0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004ff7:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004ffc:	30 c0                	xor    al,al
c0004ffe:	09 c8                	or     eax,ecx
c0005000:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005003:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005007:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000500a:	8d 42 10             	lea    eax,[edx+0x10]
c000500d:	89 da                	mov    edx,ebx
c000500f:	e8 e5 fb ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005014:	eb 1c                	jmp    c0005032 <f_open+0x2d5>
c0005016:	89 fa                	mov    edx,edi
c0005018:	e8 8b fb ff ff       	call   c0004ba8 <ld_clust.isra.0>
c000501d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005020:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005023:	e8 2a ca ff ff       	call   c0001a52 <ld_dword>
c0005028:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000502f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005036:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000503d:	89 03                	mov    DWORD PTR [ebx],eax
c000503f:	31 d2                	xor    edx,edx
c0005041:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005045:	b9 00 02 00 00       	mov    ecx,0x200
c000504a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000504e:	89 f0                	mov    eax,esi
c0005050:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005053:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005057:	8d 43 50             	lea    eax,[ebx+0x50]
c000505a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005061:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005068:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000506f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000507a:	e8 5a ca ff ff       	call   c0001ad9 <mem_set>
c000507f:	83 e6 20             	and    esi,0x20
c0005082:	75 07                	jne    c000508b <f_open+0x32e>
c0005084:	31 ed                	xor    ebp,ebp
c0005086:	e9 eb 00 00 00       	jmp    c0005176 <f_open+0x419>
c000508b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000508e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005095:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000509d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050a1:	74 e1                	je     c0005084 <f_open+0x327>
c00050a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050ab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050b5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050b8:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050bc:	c1 e5 09             	shl    ebp,0x9
c00050bf:	31 ff                	xor    edi,edi
c00050c1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050c5:	89 f8                	mov    eax,edi
c00050c7:	89 ee                	mov    esi,ebp
c00050c9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050cd:	73 22                	jae    c00050f1 <f_open+0x394>
c00050cf:	89 d8                	mov    eax,ebx
c00050d1:	e8 c8 dc ff ff       	call   c0002d9e <get_fat>
c00050d6:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050da:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050de:	89 c2                	mov    edx,eax
c00050e0:	83 f8 01             	cmp    eax,0x1
c00050e3:	76 10                	jbe    c00050f5 <f_open+0x398>
c00050e5:	83 f8 ff             	cmp    eax,0xffffffff
c00050e8:	75 d5                	jne    c00050bf <f_open+0x362>
c00050ea:	bd 01 00 00 00       	mov    ebp,0x1
c00050ef:	eb 09                	jmp    c00050fa <f_open+0x39d>
c00050f1:	31 ed                	xor    ebp,ebp
c00050f3:	eb 05                	jmp    c00050fa <f_open+0x39d>
c00050f5:	bd 02 00 00 00       	mov    ebp,0x2
c00050fa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050fd:	85 ed                	test   ebp,ebp
c00050ff:	75 75                	jne    c0005176 <f_open+0x419>
c0005101:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005105:	25 ff 01 00 00       	and    eax,0x1ff
c000510a:	0f 84 74 ff ff ff    	je     c0005084 <f_open+0x327>
c0005110:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005114:	bd 02 00 00 00       	mov    ebp,0x2
c0005119:	89 c8                	mov    eax,ecx
c000511b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000511f:	e8 ba cb ff ff       	call   c0001cde <clst2sect>
c0005124:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005128:	89 d7                	mov    edi,edx
c000512a:	09 c7                	or     edi,eax
c000512c:	74 48                	je     c0005176 <f_open+0x419>
c000512e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005132:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005136:	0f ac fe 09          	shrd   esi,edi,0x9
c000513a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000513e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005146:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000514a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000514e:	83 ec 0c             	sub    esp,0xc
c0005151:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005154:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005157:	6a 01                	push   0x1
c0005159:	52                   	push   edx
c000515a:	50                   	push   eax
c000515b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000515f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005163:	50                   	push   eax
c0005164:	e8 91 c8 ff ff       	call   c00019fa <disk_read>
c0005169:	83 c4 20             	add    esp,0x20
c000516c:	85 c0                	test   eax,eax
c000516e:	0f 95 c0             	setne  al
c0005171:	0f b6 c0             	movzx  eax,al
c0005174:	89 c5                	mov    ebp,eax
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000517d:	e8 bf 30 00 00       	call   c0008241 <ff_memfree>
c0005182:	83 c4 10             	add    esp,0x10
c0005185:	85 ed                	test   ebp,ebp
c0005187:	74 06                	je     c000518f <f_open+0x432>
c0005189:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000518f:	83 c4 7c             	add    esp,0x7c
c0005192:	89 e8                	mov    eax,ebp
c0005194:	5b                   	pop    ebx
c0005195:	5e                   	pop    esi
c0005196:	5f                   	pop    edi
c0005197:	5d                   	pop    ebp
c0005198:	c3                   	ret    

c0005199 <f_read>:
c0005199:	55                   	push   ebp
c000519a:	57                   	push   edi
c000519b:	56                   	push   esi
c000519c:	53                   	push   ebx
c000519d:	83 ec 2c             	sub    esp,0x2c
c00051a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051b2:	89 d8                	mov    eax,ebx
c00051b4:	e8 88 cf ff ff       	call   c0002141 <validate>
c00051b9:	89 c5                	mov    ebp,eax
c00051bb:	85 c0                	test   eax,eax
c00051bd:	0f 85 4c 02 00 00    	jne    c000540f <f_read+0x276>
c00051c3:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051c7:	85 ed                	test   ebp,ebp
c00051c9:	0f 85 40 02 00 00    	jne    c000540f <f_read+0x276>
c00051cf:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051d3:	0f 84 31 02 00 00    	je     c000540a <f_read+0x271>
c00051d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051dc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051df:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051e2:	bf 00 00 00 00       	mov    edi,0x0
c00051e7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ea:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051ee:	89 d1                	mov    ecx,edx
c00051f0:	19 f9                	sbb    ecx,edi
c00051f2:	0f 83 cf 00 00 00    	jae    c00052c7 <f_read+0x12e>
c00051f8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051fc:	e9 c6 00 00 00       	jmp    c00052c7 <f_read+0x12e>
c0005201:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005204:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005207:	89 d0                	mov    eax,edx
c0005209:	25 ff 01 00 00       	and    eax,0x1ff
c000520e:	0f 85 c9 01 00 00    	jne    c00053dd <f_read+0x244>
c0005214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005218:	89 d6                	mov    esi,edx
c000521a:	89 cf                	mov    edi,ecx
c000521c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005220:	0f ac fe 09          	shrd   esi,edi,0x9
c0005224:	48                   	dec    eax
c0005225:	21 f0                	and    eax,esi
c0005227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000522b:	0f 84 a6 00 00 00    	je     c00052d7 <f_read+0x13e>
c0005231:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005235:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005238:	89 c8                	mov    eax,ecx
c000523a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000523d:	e8 9c ca ff ff       	call   c0001cde <clst2sect>
c0005242:	89 d7                	mov    edi,edx
c0005244:	09 c7                	or     edi,eax
c0005246:	0f 84 b4 00 00 00    	je     c0005300 <f_read+0x167>
c000524c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005250:	31 ff                	xor    edi,edi
c0005252:	01 c6                	add    esi,eax
c0005254:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005257:	11 d7                	adc    edi,edx
c0005259:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005261:	0f 86 fd 00 00 00    	jbe    c0005364 <f_read+0x1cb>
c0005267:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000526b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000526f:	c1 e8 09             	shr    eax,0x9
c0005272:	89 04 24             	mov    DWORD PTR [esp],eax
c0005275:	03 14 24             	add    edx,DWORD PTR [esp]
c0005278:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000527c:	39 c2                	cmp    edx,eax
c000527e:	76 07                	jbe    c0005287 <f_read+0xee>
c0005280:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005284:	89 04 24             	mov    DWORD PTR [esp],eax
c0005287:	83 ec 0c             	sub    esp,0xc
c000528a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000528e:	57                   	push   edi
c000528f:	56                   	push   esi
c0005290:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005294:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005298:	50                   	push   eax
c0005299:	e8 5c c7 ff ff       	call   c00019fa <disk_read>
c000529e:	83 c4 20             	add    esp,0x20
c00052a1:	85 c0                	test   eax,eax
c00052a3:	75 6e                	jne    c0005313 <f_read+0x17a>
c00052a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052a9:	78 7e                	js     c0005329 <f_read+0x190>
c00052ab:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052ae:	c1 e6 09             	shl    esi,0x9
c00052b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052b5:	31 ff                	xor    edi,edi
c00052b7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052bb:	01 30                	add    DWORD PTR [eax],esi
c00052bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052c1:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052c4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052cc:	0f 85 2f ff ff ff    	jne    c0005201 <f_read+0x68>
c00052d2:	e9 38 01 00 00       	jmp    c000540f <f_read+0x276>
c00052d7:	89 c8                	mov    eax,ecx
c00052d9:	09 d0                	or     eax,edx
c00052db:	75 05                	jne    c00052e2 <f_read+0x149>
c00052dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052e0:	eb 19                	jmp    c00052fb <f_read+0x162>
c00052e2:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052e6:	74 09                	je     c00052f1 <f_read+0x158>
c00052e8:	89 d8                	mov    eax,ebx
c00052ea:	e8 10 ca ff ff       	call   c0001cff <clmt_clust>
c00052ef:	eb 0a                	jmp    c00052fb <f_read+0x162>
c00052f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052f4:	89 d8                	mov    eax,ebx
c00052f6:	e8 a3 da ff ff       	call   c0002d9e <get_fat>
c00052fb:	83 f8 01             	cmp    eax,0x1
c00052fe:	77 0e                	ja     c000530e <f_read+0x175>
c0005300:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005304:	bd 02 00 00 00       	mov    ebp,0x2
c0005309:	e9 01 01 00 00       	jmp    c000540f <f_read+0x276>
c000530e:	83 f8 ff             	cmp    eax,0xffffffff
c0005311:	75 0e                	jne    c0005321 <f_read+0x188>
c0005313:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005317:	bd 01 00 00 00       	mov    ebp,0x1
c000531c:	e9 ee 00 00 00       	jmp    c000540f <f_read+0x276>
c0005321:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005324:	e9 08 ff ff ff       	jmp    c0005231 <f_read+0x98>
c0005329:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000532c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000532f:	29 f0                	sub    eax,esi
c0005331:	19 fa                	sbb    edx,edi
c0005333:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005336:	89 d7                	mov    edi,edx
c0005338:	ba 00 00 00 00       	mov    edx,0x0
c000533d:	89 f9                	mov    ecx,edi
c000533f:	19 d1                	sbb    ecx,edx
c0005341:	0f 83 64 ff ff ff    	jae    c00052ab <f_read+0x112>
c0005347:	89 c7                	mov    edi,eax
c0005349:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000534d:	c1 e7 09             	shl    edi,0x9
c0005350:	8d 53 50             	lea    edx,[ebx+0x50]
c0005353:	01 f8                	add    eax,edi
c0005355:	b9 00 02 00 00       	mov    ecx,0x200
c000535a:	e8 65 c7 ff ff       	call   c0001ac4 <mem_cpy>
c000535f:	e9 47 ff ff ff       	jmp    c00052ab <f_read+0x112>
c0005364:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005367:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000536a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000536e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005371:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005375:	75 05                	jne    c000537c <f_read+0x1e3>
c0005377:	39 34 24             	cmp    DWORD PTR [esp],esi
c000537a:	74 5b                	je     c00053d7 <f_read+0x23e>
c000537c:	8d 43 50             	lea    eax,[ebx+0x50]
c000537f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005383:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005387:	79 2a                	jns    c00053b3 <f_read+0x21a>
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005392:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000539a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539e:	50                   	push   eax
c000539f:	e8 6c c6 ff ff       	call   c0001a10 <disk_write>
c00053a4:	83 c4 20             	add    esp,0x20
c00053a7:	85 c0                	test   eax,eax
c00053a9:	0f 85 64 ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053af:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053b3:	83 ec 0c             	sub    esp,0xc
c00053b6:	6a 01                	push   0x1
c00053b8:	57                   	push   edi
c00053b9:	56                   	push   esi
c00053ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 2e c6 ff ff       	call   c00019fa <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	0f 85 3c ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053d7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053da:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053e0:	ba 00 02 00 00       	mov    edx,0x200
c00053e5:	25 ff 01 00 00       	and    eax,0x1ff
c00053ea:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053ee:	29 c2                	sub    edx,eax
c00053f0:	39 d6                	cmp    esi,edx
c00053f2:	76 02                	jbe    c00053f6 <f_read+0x25d>
c00053f4:	89 d6                	mov    esi,edx
c00053f6:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053fa:	89 f1                	mov    ecx,esi
c00053fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005400:	e8 bf c6 ff ff       	call   c0001ac4 <mem_cpy>
c0005405:	e9 a7 fe ff ff       	jmp    c00052b1 <f_read+0x118>
c000540a:	bd 07 00 00 00       	mov    ebp,0x7
c000540f:	83 c4 2c             	add    esp,0x2c
c0005412:	89 e8                	mov    eax,ebp
c0005414:	5b                   	pop    ebx
c0005415:	5e                   	pop    esi
c0005416:	5f                   	pop    edi
c0005417:	5d                   	pop    ebp
c0005418:	c3                   	ret    

c0005419 <f_write>:
c0005419:	55                   	push   ebp
c000541a:	57                   	push   edi
c000541b:	56                   	push   esi
c000541c:	53                   	push   ebx
c000541d:	83 ec 2c             	sub    esp,0x2c
c0005420:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005424:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005428:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000542c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 08 cd ff ff       	call   c0002141 <validate>
c0005439:	89 c5                	mov    ebp,eax
c000543b:	85 c0                	test   eax,eax
c000543d:	0f 85 86 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c0005443:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005447:	85 ed                	test   ebp,ebp
c0005449:	0f 85 7a 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c000544f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005453:	0f 84 6b 02 00 00    	je     c00056c4 <f_write+0x2ab>
c0005459:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000545d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005460:	0f 84 43 01 00 00    	je     c00055a9 <f_write+0x190>
c0005466:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005469:	89 c1                	mov    ecx,eax
c000546b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000546f:	0f 83 34 01 00 00    	jae    c00055a9 <f_write+0x190>
c0005475:	f7 d0                	not    eax
c0005477:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547b:	e9 29 01 00 00       	jmp    c00055a9 <f_write+0x190>
c0005480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005486:	89 d0                	mov    eax,edx
c0005488:	25 ff 01 00 00       	and    eax,0x1ff
c000548d:	0f 85 00 02 00 00    	jne    c0005693 <f_write+0x27a>
c0005493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005497:	89 d6                	mov    esi,edx
c0005499:	89 cf                	mov    edi,ecx
c000549b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	48                   	dec    eax
c00054a4:	21 f0                	and    eax,esi
c00054a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054aa:	0f 84 06 01 00 00    	je     c00055b6 <f_write+0x19d>
c00054b0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b4:	0f 88 6e 01 00 00    	js     c0005628 <f_write+0x20f>
c00054ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054be:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054c1:	89 c8                	mov    eax,ecx
c00054c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054c7:	e8 12 c8 ff ff       	call   c0001cde <clst2sect>
c00054cc:	89 d1                	mov    ecx,edx
c00054ce:	09 c1                	or     ecx,eax
c00054d0:	0f 84 1c 01 00 00    	je     c00055f2 <f_write+0x1d9>
c00054d6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 c6                	add    esi,eax
c00054de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054e2:	11 d7                	adc    edi,edx
c00054e4:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054ec:	0f 86 63 01 00 00    	jbe    c0005655 <f_write+0x23c>
c00054f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054fa:	c1 e8 09             	shr    eax,0x9
c00054fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005501:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005505:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005509:	39 c2                	cmp    edx,eax
c000550b:	76 08                	jbe    c0005515 <f_write+0xfc>
c000550d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005511:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005515:	83 ec 0c             	sub    esp,0xc
c0005518:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000551c:	57                   	push   edi
c000551d:	56                   	push   esi
c000551e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005522:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005526:	50                   	push   eax
c0005527:	e8 e4 c4 ff ff       	call   c0001a10 <disk_write>
c000552c:	83 c4 20             	add    esp,0x20
c000552f:	85 c0                	test   eax,eax
c0005531:	0f 85 ce 00 00 00    	jne    c0005605 <f_write+0x1ec>
c0005537:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000553a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000553d:	29 f0                	sub    eax,esi
c000553f:	19 fa                	sbb    edx,edi
c0005541:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005545:	89 d7                	mov    edi,edx
c0005547:	ba 00 00 00 00       	mov    edx,0x0
c000554c:	89 f9                	mov    ecx,edi
c000554e:	19 d1                	sbb    ecx,edx
c0005550:	73 1c                	jae    c000556e <f_write+0x155>
c0005552:	89 c7                	mov    edi,eax
c0005554:	b9 00 02 00 00       	mov    ecx,0x200
c0005559:	c1 e7 09             	shl    edi,0x9
c000555c:	8d 43 50             	lea    eax,[ebx+0x50]
c000555f:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005563:	89 fa                	mov    edx,edi
c0005565:	e8 5a c5 ff ff       	call   c0001ac4 <mem_cpy>
c000556a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000556e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005572:	c1 e6 09             	shl    esi,0x9
c0005575:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005579:	31 ff                	xor    edi,edi
c000557b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000557f:	01 30                	add    DWORD PTR [eax],esi
c0005581:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005585:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005588:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000558b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000558e:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005591:	89 c1                	mov    ecx,eax
c0005593:	39 f2                	cmp    edx,esi
c0005595:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005598:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000559b:	19 f9                	sbb    ecx,edi
c000559d:	73 04                	jae    c00055a3 <f_write+0x18a>
c000559f:	89 f2                	mov    edx,esi
c00055a1:	89 f8                	mov    eax,edi
c00055a3:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055a9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055ae:	0f 85 cc fe ff ff    	jne    c0005480 <f_write+0x67>
c00055b4:	eb 2e                	jmp    c00055e4 <f_write+0x1cb>
c00055b6:	89 c8                	mov    eax,ecx
c00055b8:	09 d0                	or     eax,edx
c00055ba:	75 0b                	jne    c00055c7 <f_write+0x1ae>
c00055bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	85 c0                	test   eax,eax
c00055c3:	75 28                	jne    c00055ed <f_write+0x1d4>
c00055c5:	eb 12                	jmp    c00055d9 <f_write+0x1c0>
c00055c7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055cb:	74 09                	je     c00055d6 <f_write+0x1bd>
c00055cd:	89 d8                	mov    eax,ebx
c00055cf:	e8 2b c7 ff ff       	call   c0001cff <clmt_clust>
c00055d4:	eb 0a                	jmp    c00055e0 <f_write+0x1c7>
c00055d6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055d9:	89 d8                	mov    eax,ebx
c00055db:	e8 ac da ff ff       	call   c000308c <create_chain>
c00055e0:	85 c0                	test   eax,eax
c00055e2:	75 09                	jne    c00055ed <f_write+0x1d4>
c00055e4:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055e8:	e9 dc 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c00055ed:	83 f8 01             	cmp    eax,0x1
c00055f0:	75 0e                	jne    c0005600 <f_write+0x1e7>
c00055f2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055f6:	bd 02 00 00 00       	mov    ebp,0x2
c00055fb:	e9 c9 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005600:	83 f8 ff             	cmp    eax,0xffffffff
c0005603:	75 0e                	jne    c0005613 <f_write+0x1fa>
c0005605:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005609:	bd 01 00 00 00       	mov    ebp,0x1
c000560e:	e9 b6 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005613:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005616:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000561a:	0f 85 90 fe ff ff    	jne    c00054b0 <f_write+0x97>
c0005620:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005623:	e9 88 fe ff ff       	jmp    c00054b0 <f_write+0x97>
c0005628:	83 ec 0c             	sub    esp,0xc
c000562b:	8d 43 50             	lea    eax,[ebx+0x50]
c000562e:	6a 01                	push   0x1
c0005630:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005633:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005636:	50                   	push   eax
c0005637:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000563b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000563f:	50                   	push   eax
c0005640:	e8 cb c3 ff ff       	call   c0001a10 <disk_write>
c0005645:	83 c4 20             	add    esp,0x20
c0005648:	85 c0                	test   eax,eax
c000564a:	75 b9                	jne    c0005605 <f_write+0x1ec>
c000564c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005650:	e9 65 fe ff ff       	jmp    c00054ba <f_write+0xa1>
c0005655:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005658:	75 05                	jne    c000565f <f_write+0x246>
c000565a:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000565d:	74 2e                	je     c000568d <f_write+0x274>
c000565f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005662:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005665:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005668:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000566b:	73 20                	jae    c000568d <f_write+0x274>
c000566d:	83 ec 0c             	sub    esp,0xc
c0005670:	8d 43 50             	lea    eax,[ebx+0x50]
c0005673:	6a 01                	push   0x1
c0005675:	57                   	push   edi
c0005676:	56                   	push   esi
c0005677:	50                   	push   eax
c0005678:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000567c:	50                   	push   eax
c000567d:	e8 78 c3 ff ff       	call   c00019fa <disk_read>
c0005682:	83 c4 20             	add    esp,0x20
c0005685:	85 c0                	test   eax,eax
c0005687:	0f 85 78 ff ff ff    	jne    c0005605 <f_write+0x1ec>
c000568d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005690:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005693:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005696:	ba 00 02 00 00       	mov    edx,0x200
c000569b:	25 ff 01 00 00       	and    eax,0x1ff
c00056a0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056a4:	29 c2                	sub    edx,eax
c00056a6:	39 d6                	cmp    esi,edx
c00056a8:	76 02                	jbe    c00056ac <f_write+0x293>
c00056aa:	89 d6                	mov    esi,edx
c00056ac:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056b0:	89 f1                	mov    ecx,esi
c00056b2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056b6:	e8 09 c4 ff ff       	call   c0001ac4 <mem_cpy>
c00056bb:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056bf:	e9 b1 fe ff ff       	jmp    c0005575 <f_write+0x15c>
c00056c4:	bd 07 00 00 00       	mov    ebp,0x7
c00056c9:	83 c4 2c             	add    esp,0x2c
c00056cc:	89 e8                	mov    eax,ebp
c00056ce:	5b                   	pop    ebx
c00056cf:	5e                   	pop    esi
c00056d0:	5f                   	pop    edi
c00056d1:	5d                   	pop    ebp
c00056d2:	c3                   	ret    

c00056d3 <f_sync>:
c00056d3:	56                   	push   esi
c00056d4:	53                   	push   ebx
c00056d5:	83 ec 64             	sub    esp,0x64
c00056d8:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056e0:	89 d8                	mov    eax,ebx
c00056e2:	e8 5a ca ff ff       	call   c0002141 <validate>
c00056e7:	85 c0                	test   eax,eax
c00056e9:	0f 85 ba 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c00056ef:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056f2:	f6 c2 40             	test   dl,0x40
c00056f5:	0f 84 ae 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c00056fb:	84 d2                	test   dl,dl
c00056fd:	79 33                	jns    c0005732 <f_sync+0x5f>
c00056ff:	83 ec 0c             	sub    esp,0xc
c0005702:	8d 43 50             	lea    eax,[ebx+0x50]
c0005705:	6a 01                	push   0x1
c0005707:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000570a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000570d:	50                   	push   eax
c000570e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005712:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005716:	50                   	push   eax
c0005717:	e8 f4 c2 ff ff       	call   c0001a10 <disk_write>
c000571c:	89 c2                	mov    edx,eax
c000571e:	83 c4 20             	add    esp,0x20
c0005721:	b8 01 00 00 00       	mov    eax,0x1
c0005726:	85 d2                	test   edx,edx
c0005728:	0f 85 7b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000572e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005736:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005739:	0f 85 11 01 00 00    	jne    c0005850 <f_sync+0x17d>
c000573f:	89 d8                	mov    eax,ebx
c0005741:	e8 1e d6 ff ff       	call   c0002d64 <fill_first_frag>
c0005746:	85 c0                	test   eax,eax
c0005748:	0f 85 5b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000574e:	83 c9 ff             	or     ecx,0xffffffff
c0005751:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005754:	89 d8                	mov    eax,ebx
c0005756:	e8 d4 d5 ff ff       	call   c0002d2f <fill_last_frag>
c000575b:	85 c0                	test   eax,eax
c000575d:	0f 85 46 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c0005763:	83 ec 0c             	sub    esp,0xc
c0005766:	68 60 04 00 00       	push   0x460
c000576b:	e8 bb 2a 00 00       	call   c000822b <ff_memalloc>
c0005770:	89 c6                	mov    esi,eax
c0005772:	83 c4 10             	add    esp,0x10
c0005775:	b8 11 00 00 00       	mov    eax,0x11
c000577a:	85 f6                	test   esi,esi
c000577c:	0f 84 27 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c0005782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005786:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000578c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000578f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005792:	89 da                	mov    edx,ebx
c0005794:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005798:	e8 bc df ff ff       	call   c0003759 <load_obj_xdir>
c000579d:	85 c0                	test   eax,eax
c000579f:	0f 85 95 00 00 00    	jne    c000583a <f_sync+0x167>
c00057a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057ac:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057b0:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057b3:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057b6:	83 ca 01             	or     edx,0x1
c00057b9:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057bf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057c2:	83 c0 34             	add    eax,0x34
c00057c5:	e8 f1 c2 ff ff       	call   c0001abb <st_dword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d4:	83 c0 38             	add    eax,0x38
c00057d7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057da:	e8 df c2 ff ff       	call   c0001abe <st_qword>
c00057df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e9:	83 c0 28             	add    eax,0x28
c00057ec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ef:	e8 ca c2 ff ff       	call   c0001abe <st_qword>
c00057f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0005800:	83 c0 0c             	add    eax,0xc
c0005803:	e8 b3 c2 ff ff       	call   c0001abb <st_dword>
c0005808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000580f:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005813:	31 d2                	xor    edx,edx
c0005815:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005818:	83 c0 10             	add    eax,0x10
c000581b:	e8 9b c2 ff ff       	call   c0001abb <st_dword>
c0005820:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005824:	e8 6f e1 ff ff       	call   c0003998 <store_xdir>
c0005829:	85 c0                	test   eax,eax
c000582b:	75 0d                	jne    c000583a <f_sync+0x167>
c000582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005831:	e8 f4 ea ff ff       	call   c000432a <sync_fs>
c0005836:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000583a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000583e:	83 ec 0c             	sub    esp,0xc
c0005841:	56                   	push   esi
c0005842:	e8 fa 29 00 00       	call   c0008241 <ff_memfree>
c0005847:	83 c4 10             	add    esp,0x10
c000584a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000584e:	eb 59                	jmp    c00058a9 <f_sync+0x1d6>
c0005850:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005853:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005856:	e8 c1 c9 ff ff       	call   c000221c <move_window>
c000585b:	85 c0                	test   eax,eax
c000585d:	75 4a                	jne    c00058a9 <f_sync+0x1d6>
c000585f:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005862:	89 f2                	mov    edx,esi
c0005864:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005868:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000586b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000586d:	e8 5f f3 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0005872:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005875:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005878:	e8 3e c2 ff ff       	call   c0001abb <st_dword>
c000587d:	8d 46 16             	lea    eax,[esi+0x16]
c0005880:	ba 00 00 21 50       	mov    edx,0x50210000
c0005885:	e8 31 c2 ff ff       	call   c0001abb <st_dword>
c000588a:	8d 46 12             	lea    eax,[esi+0x12]
c000588d:	31 d2                	xor    edx,edx
c000588f:	e8 23 c2 ff ff       	call   c0001ab7 <st_word>
c0005894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005898:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000589c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a0:	e8 85 ea ff ff       	call   c000432a <sync_fs>
c00058a5:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058a9:	83 c4 64             	add    esp,0x64
c00058ac:	5b                   	pop    ebx
c00058ad:	5e                   	pop    esi
c00058ae:	c3                   	ret    

c00058af <f_close>:
c00058af:	53                   	push   ebx
c00058b0:	83 ec 24             	sub    esp,0x24
c00058b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058b7:	53                   	push   ebx
c00058b8:	e8 16 fe ff ff       	call   c00056d3 <f_sync>
c00058bd:	83 c4 10             	add    esp,0x10
c00058c0:	85 c0                	test   eax,eax
c00058c2:	75 15                	jne    c00058d9 <f_close+0x2a>
c00058c4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058c8:	89 d8                	mov    eax,ebx
c00058ca:	e8 72 c8 ff ff       	call   c0002141 <validate>
c00058cf:	85 c0                	test   eax,eax
c00058d1:	75 06                	jne    c00058d9 <f_close+0x2a>
c00058d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058d9:	83 c4 18             	add    esp,0x18
c00058dc:	5b                   	pop    ebx
c00058dd:	c3                   	ret    

c00058de <f_lseek>:
c00058de:	55                   	push   ebp
c00058df:	57                   	push   edi
c00058e0:	56                   	push   esi
c00058e1:	53                   	push   ebx
c00058e2:	83 ec 3c             	sub    esp,0x3c
c00058e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058e9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058ed:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00058f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058f8:	89 d8                	mov    eax,ebx
c00058fa:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058fe:	e8 3e c8 ff ff       	call   c0002141 <validate>
c0005903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005907:	85 c0                	test   eax,eax
c0005909:	0f 85 28 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000590f:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005917:	85 c0                	test   eax,eax
c0005919:	0f 85 18 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000591f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005923:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005926:	74 0c                	je     c0005934 <f_lseek+0x56>
c0005928:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000592b:	85 c0                	test   eax,eax
c000592d:	75 1f                	jne    c000594e <f_lseek+0x70>
c000592f:	e9 8b 01 00 00       	jmp    c0005abf <f_lseek+0x1e1>
c0005934:	83 c9 ff             	or     ecx,0xffffffff
c0005937:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000593a:	89 d8                	mov    eax,ebx
c000593c:	e8 ee d3 ff ff       	call   c0002d2f <fill_last_frag>
c0005941:	85 c0                	test   eax,eax
c0005943:	74 e3                	je     c0005928 <f_lseek+0x4a>
c0005945:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005949:	e9 e9 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c000594e:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005953:	0f 85 ac 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005959:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000595d:	0f 85 a2 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005963:	8d 78 04             	lea    edi,[eax+0x4]
c0005966:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005969:	8b 00                	mov    eax,DWORD PTR [eax]
c000596b:	be 02 00 00 00       	mov    esi,0x2
c0005970:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005974:	85 ed                	test   ebp,ebp
c0005976:	74 73                	je     c00059eb <f_lseek+0x10d>
c0005978:	89 e9                	mov    ecx,ebp
c000597a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005981:	89 ca                	mov    edx,ecx
c0005983:	89 d8                	mov    eax,ebx
c0005985:	ff 04 24             	inc    DWORD PTR [esp]
c0005988:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000598c:	e8 0d d4 ff ff       	call   c0002d9e <get_fat>
c0005991:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005995:	83 f8 01             	cmp    eax,0x1
c0005998:	77 11                	ja     c00059ab <f_lseek+0xcd>
c000599a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000599e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059a6:	e9 8c 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059ab:	83 f8 ff             	cmp    eax,0xffffffff
c00059ae:	75 11                	jne    c00059c1 <f_lseek+0xe3>
c00059b0:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059b4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059bc:	e9 76 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059c1:	8d 51 01             	lea    edx,[ecx+0x1]
c00059c4:	89 c1                	mov    ecx,eax
c00059c6:	39 c2                	cmp    edx,eax
c00059c8:	74 b7                	je     c0005981 <f_lseek+0xa3>
c00059ca:	83 c6 02             	add    esi,0x2
c00059cd:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059d1:	72 0b                	jb     c00059de <f_lseek+0x100>
c00059d3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059d6:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059d9:	89 0f                	mov    DWORD PTR [edi],ecx
c00059db:	83 c7 08             	add    edi,0x8
c00059de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059e2:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059e5:	76 04                	jbe    c00059eb <f_lseek+0x10d>
c00059e7:	89 c5                	mov    ebp,eax
c00059e9:	eb 8d                	jmp    c0005978 <f_lseek+0x9a>
c00059eb:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059ee:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059f2:	89 30                	mov    DWORD PTR [eax],esi
c00059f4:	0f 87 35 03 00 00    	ja     c0005d2f <f_lseek+0x451>
c00059fa:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a00:	e9 32 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c0005a05:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a08:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a0b:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a12:	19 f8                	sbb    eax,edi
c0005a14:	73 07                	jae    c0005a1d <f_lseek+0x13f>
c0005a16:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a19:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a1d:	89 f8                	mov    eax,edi
c0005a1f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a22:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a25:	09 f0                	or     eax,esi
c0005a27:	0f 84 0a 03 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a2d:	89 f0                	mov    eax,esi
c0005a2f:	89 fa                	mov    edx,edi
c0005a31:	83 c0 ff             	add    eax,0xffffffff
c0005a34:	83 d2 ff             	adc    edx,0xffffffff
c0005a37:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a3a:	89 d1                	mov    ecx,edx
c0005a3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a40:	89 c2                	mov    edx,eax
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 b6 c2 ff ff       	call   c0001cff <clmt_clust>
c0005a49:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a50:	89 c2                	mov    edx,eax
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a58:	e8 81 c2 ff ff       	call   c0001cde <clst2sect>
c0005a5d:	89 d1                	mov    ecx,edx
c0005a5f:	09 c1                	or     ecx,eax
c0005a61:	0f 84 33 ff ff ff    	je     c000599a <f_lseek+0xbc>
c0005a67:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a6d:	0f 84 c4 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a73:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1c3>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 96 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 58 02 00 00    	jns    c0005d06 <f_lseek+0x428>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 32 02 00 00       	jmp    c0005cf1 <f_lseek+0x413>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x200>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x200>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x21e>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x21e>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b00:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b03:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x244>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 87 01 00 00       	jmp    c0005ca9 <f_lseek+0x3cb>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	c1 e1 09             	shl    ecx,0x9
c0005b29:	89 d7                	mov    edi,edx
c0005b2b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b2f:	09 c7                	or     edi,eax
c0005b31:	74 6b                	je     c0005b9e <f_lseek+0x2c0>
c0005b33:	83 c0 ff             	add    eax,0xffffffff
c0005b36:	89 cf                	mov    edi,ecx
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b46:	83 c0 ff             	add    eax,0xffffffff
c0005b49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b4d:	83 d2 ff             	adc    edx,0xffffffff
c0005b50:	31 ed                	xor    ebp,ebp
c0005b52:	55                   	push   ebp
c0005b53:	51                   	push   ecx
c0005b54:	52                   	push   edx
c0005b55:	50                   	push   eax
c0005b56:	e8 31 98 01 00       	call   c001f38c <__udivdi3>
c0005b5b:	83 c4 10             	add    esp,0x10
c0005b5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b62:	89 d6                	mov    esi,edx
c0005b64:	55                   	push   ebp
c0005b65:	57                   	push   edi
c0005b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6e:	e8 19 98 01 00       	call   c001f38c <__udivdi3>
c0005b73:	83 c4 10             	add    esp,0x10
c0005b76:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b7a:	19 d6                	sbb    esi,edx
c0005b7c:	72 20                	jb     c0005b9e <f_lseek+0x2c0>
c0005b7e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b86:	f7 d9                	neg    ecx
c0005b88:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b8c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b8f:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b95:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x2e8>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x2e5>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 de d4 ff ff       	call   c000308c <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 e3 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 f0 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005bce:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bd2:	31 ff                	xor    edi,edi
c0005bd4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bd7:	89 fd                	mov    ebp,edi
c0005bd9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bdd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be3:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005be7:	73 7d                	jae    c0005c66 <f_lseek+0x388>
c0005be9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bec:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bf0:	01 d6                	add    esi,edx
c0005bf2:	11 cf                	adc    edi,ecx
c0005bf4:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005bf7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005bfa:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005bfd:	f6 c2 02             	test   dl,0x2
c0005c00:	74 25                	je     c0005c27 <f_lseek+0x349>
c0005c02:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c05:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c08:	19 f9                	sbb    ecx,edi
c0005c0a:	73 0c                	jae    c0005c18 <f_lseek+0x33a>
c0005c0c:	83 ca 40             	or     edx,0x40
c0005c0f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c12:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c15:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c18:	89 c2                	mov    edx,eax
c0005c1a:	89 d8                	mov    eax,ebx
c0005c1c:	e8 6b d4 ff ff       	call   c000308c <create_chain>
c0005c21:	85 c0                	test   eax,eax
c0005c23:	75 0b                	jne    c0005c30 <f_lseek+0x352>
c0005c25:	eb 30                	jmp    c0005c57 <f_lseek+0x379>
c0005c27:	89 c2                	mov    edx,eax
c0005c29:	89 d8                	mov    eax,ebx
c0005c2b:	e8 6e d1 ff ff       	call   c0002d9e <get_fat>
c0005c30:	83 f8 ff             	cmp    eax,0xffffffff
c0005c33:	0f 84 77 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005c39:	83 f8 01             	cmp    eax,0x1
c0005c3c:	0f 86 58 fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c46:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c49:	0f 86 4b fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c4f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c52:	e9 77 ff ff ff       	jmp    c0005bce <f_lseek+0x2f0>
c0005c57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c69:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c6d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c70:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c73:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c76:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c7c:	0f 84 97 fe ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005c82:	89 c2                	mov    edx,eax
c0005c84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c88:	e8 51 c0 ff ff       	call   c0001cde <clst2sect>
c0005c8d:	89 d7                	mov    edi,edx
c0005c8f:	09 c7                	or     edi,eax
c0005c91:	0f 84 03 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c9e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ca2:	c1 ef 09             	shr    edi,0x9
c0005ca5:	01 c6                	add    esi,eax
c0005ca7:	11 d7                	adc    edi,edx
c0005ca9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005caf:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cb2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cb5:	19 d1                	sbb    ecx,edx
c0005cb7:	73 0a                	jae    c0005cc3 <f_lseek+0x3e5>
c0005cb9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cbd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cc0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cc8:	74 6d                	je     c0005d37 <f_lseek+0x459>
c0005cca:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ccd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd0:	39 fa                	cmp    edx,edi
c0005cd2:	75 04                	jne    c0005cd8 <f_lseek+0x3fa>
c0005cd4:	39 f0                	cmp    eax,esi
c0005cd6:	74 5f                	je     c0005d37 <f_lseek+0x459>
c0005cd8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cdb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cdf:	79 25                	jns    c0005d06 <f_lseek+0x428>
c0005ce1:	83 ec 0c             	sub    esp,0xc
c0005ce4:	6a 01                	push   0x1
c0005ce6:	52                   	push   edx
c0005ce7:	50                   	push   eax
c0005ce8:	55                   	push   ebp
c0005ce9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ced:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cf1:	50                   	push   eax
c0005cf2:	e8 19 bd ff ff       	call   c0001a10 <disk_write>
c0005cf7:	83 c4 20             	add    esp,0x20
c0005cfa:	85 c0                	test   eax,eax
c0005cfc:	0f 85 ae fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d02:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d06:	83 ec 0c             	sub    esp,0xc
c0005d09:	6a 01                	push   0x1
c0005d0b:	57                   	push   edi
c0005d0c:	56                   	push   esi
c0005d0d:	55                   	push   ebp
c0005d0e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d12:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d16:	50                   	push   eax
c0005d17:	e8 de bc ff ff       	call   c00019fa <disk_read>
c0005d1c:	83 c4 20             	add    esp,0x20
c0005d1f:	85 c0                	test   eax,eax
c0005d21:	0f 85 89 fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d27:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d2a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d2d:	eb 08                	jmp    c0005d37 <f_lseek+0x459>
c0005d2f:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d3b:	83 c4 3c             	add    esp,0x3c
c0005d3e:	5b                   	pop    ebx
c0005d3f:	5e                   	pop    esi
c0005d40:	5f                   	pop    edi
c0005d41:	5d                   	pop    ebp
c0005d42:	c3                   	ret    

c0005d43 <f_opendir>:
c0005d43:	56                   	push   esi
c0005d44:	b8 09 00 00 00       	mov    eax,0x9
c0005d49:	53                   	push   ebx
c0005d4a:	83 ec 24             	sub    esp,0x24
c0005d4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d51:	85 db                	test   ebx,ebx
c0005d53:	0f 84 e6 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d59:	31 c9                	xor    ecx,ecx
c0005d5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d5f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d63:	e8 5f c7 ff ff       	call   c00024c7 <mount_volume>
c0005d68:	85 c0                	test   eax,eax
c0005d6a:	0f 85 c9 00 00 00    	jne    c0005e39 <f_opendir+0xf6>
c0005d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	89 03                	mov    DWORD PTR [ebx],eax
c0005d79:	68 60 04 00 00       	push   0x460
c0005d7e:	e8 a8 24 00 00       	call   c000822b <ff_memalloc>
c0005d83:	89 c6                	mov    esi,eax
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	b8 11 00 00 00       	mov    eax,0x11
c0005d8d:	85 f6                	test   esi,esi
c0005d8f:	0f 84 aa 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d99:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d9f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005da2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005da5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 83 ee ff ff       	call   c0004c33 <follow_path>
c0005db0:	85 c0                	test   eax,eax
c0005db2:	75 61                	jne    c0005e15 <f_opendir+0xd2>
c0005db4:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005db8:	78 46                	js     c0005e00 <f_opendir+0xbd>
c0005dba:	b8 05 00 00 00       	mov    eax,0x5
c0005dbf:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dc3:	74 50                	je     c0005e15 <f_opendir+0xd2>
c0005dc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dc9:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dcb:	3c 04                	cmp    al,0x4
c0005dcd:	75 26                	jne    c0005df5 <f_opendir+0xb2>
c0005dcf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dd2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dd5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005dd8:	30 d2                	xor    dl,dl
c0005dda:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005dde:	09 c2                	or     edx,eax
c0005de0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005de3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005de6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005de9:	89 da                	mov    edx,ebx
c0005deb:	8d 41 10             	lea    eax,[ecx+0x10]
c0005dee:	e8 06 ee ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005df3:	eb 0b                	jmp    c0005e00 <f_opendir+0xbd>
c0005df5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005df8:	e8 ab ed ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0005dfd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e04:	31 d2                	xor    edx,edx
c0005e06:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e0a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 7f d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e19:	83 ec 0c             	sub    esp,0xc
c0005e1c:	56                   	push   esi
c0005e1d:	e8 1f 24 00 00       	call   c0008241 <ff_memfree>
c0005e22:	83 c4 10             	add    esp,0x10
c0005e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e29:	83 f8 04             	cmp    eax,0x4
c0005e2c:	74 06                	je     c0005e34 <f_opendir+0xf1>
c0005e2e:	85 c0                	test   eax,eax
c0005e30:	74 0d                	je     c0005e3f <f_opendir+0xfc>
c0005e32:	eb 05                	jmp    c0005e39 <f_opendir+0xf6>
c0005e34:	b8 05 00 00 00       	mov    eax,0x5
c0005e39:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e3f:	83 c4 24             	add    esp,0x24
c0005e42:	5b                   	pop    ebx
c0005e43:	5e                   	pop    esi
c0005e44:	c3                   	ret    

c0005e45 <f_closedir>:
c0005e45:	53                   	push   ebx
c0005e46:	83 ec 18             	sub    esp,0x18
c0005e49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e4d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e51:	89 d8                	mov    eax,ebx
c0005e53:	e8 e9 c2 ff ff       	call   c0002141 <validate>
c0005e58:	85 c0                	test   eax,eax
c0005e5a:	75 06                	jne    c0005e62 <f_closedir+0x1d>
c0005e5c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e62:	83 c4 18             	add    esp,0x18
c0005e65:	5b                   	pop    ebx
c0005e66:	c3                   	ret    

c0005e67 <f_readdir>:
c0005e67:	57                   	push   edi
c0005e68:	56                   	push   esi
c0005e69:	53                   	push   ebx
c0005e6a:	83 ec 20             	sub    esp,0x20
c0005e6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e71:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e7b:	e8 c1 c2 ff ff       	call   c0002141 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 77                	jne    c0005efb <f_readdir+0x94>
c0005e84:	85 ff                	test   edi,edi
c0005e86:	75 0b                	jne    c0005e93 <f_readdir+0x2c>
c0005e88:	31 d2                	xor    edx,edx
c0005e8a:	89 d8                	mov    eax,ebx
c0005e8c:	e8 03 d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e91:	eb 68                	jmp    c0005efb <f_readdir+0x94>
c0005e93:	83 ec 0c             	sub    esp,0xc
c0005e96:	68 60 04 00 00       	push   0x460
c0005e9b:	e8 8b 23 00 00       	call   c000822b <ff_memalloc>
c0005ea0:	89 c6                	mov    esi,eax
c0005ea2:	83 c4 10             	add    esp,0x10
c0005ea5:	b8 11 00 00 00       	mov    eax,0x11
c0005eaa:	85 f6                	test   esi,esi
c0005eac:	74 4d                	je     c0005efb <f_readdir+0x94>
c0005eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eb2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ebb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 df d8 ff ff       	call   c00037a6 <dir_read>
c0005ec7:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ecc:	75 19                	jne    c0005ee7 <f_readdir+0x80>
c0005ece:	89 fa                	mov    edx,edi
c0005ed0:	89 d8                	mov    eax,ebx
c0005ed2:	e8 d0 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005ed7:	31 d2                	xor    edx,edx
c0005ed9:	89 d8                	mov    eax,ebx
c0005edb:	e8 0e d6 ff ff       	call   c00034ee <dir_next>
c0005ee0:	83 f8 04             	cmp    eax,0x4
c0005ee3:	75 02                	jne    c0005ee7 <f_readdir+0x80>
c0005ee5:	31 c0                	xor    eax,eax
c0005ee7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eeb:	83 ec 0c             	sub    esp,0xc
c0005eee:	56                   	push   esi
c0005eef:	e8 4d 23 00 00       	call   c0008241 <ff_memfree>
c0005ef4:	83 c4 10             	add    esp,0x10
c0005ef7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005efb:	83 c4 20             	add    esp,0x20
c0005efe:	5b                   	pop    ebx
c0005eff:	5e                   	pop    esi
c0005f00:	5f                   	pop    edi
c0005f01:	c3                   	ret    

c0005f02 <f_stat>:
c0005f02:	57                   	push   edi
c0005f03:	31 c9                	xor    ecx,ecx
c0005f05:	56                   	push   esi
c0005f06:	53                   	push   ebx
c0005f07:	83 ec 50             	sub    esp,0x50
c0005f0a:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f0e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f12:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f16:	e8 ac c5 ff ff       	call   c00024c7 <mount_volume>
c0005f1b:	89 c3                	mov    ebx,eax
c0005f1d:	85 c0                	test   eax,eax
c0005f1f:	75 67                	jne    c0005f88 <f_stat+0x86>
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	bb 11 00 00 00       	mov    ebx,0x11
c0005f29:	68 60 04 00 00       	push   0x460
c0005f2e:	e8 f8 22 00 00       	call   c000822b <ff_memalloc>
c0005f33:	83 c4 10             	add    esp,0x10
c0005f36:	89 c6                	mov    esi,eax
c0005f38:	85 c0                	test   eax,eax
c0005f3a:	74 4c                	je     c0005f88 <f_stat+0x86>
c0005f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f40:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f49:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f4c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f50:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f54:	e8 da ec ff ff       	call   c0004c33 <follow_path>
c0005f59:	89 c3                	mov    ebx,eax
c0005f5b:	85 c0                	test   eax,eax
c0005f5d:	75 1d                	jne    c0005f7c <f_stat+0x7a>
c0005f5f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f64:	78 11                	js     c0005f77 <f_stat+0x75>
c0005f66:	85 ff                	test   edi,edi
c0005f68:	74 12                	je     c0005f7c <f_stat+0x7a>
c0005f6a:	89 fa                	mov    edx,edi
c0005f6c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f70:	e8 32 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005f75:	eb 05                	jmp    c0005f7c <f_stat+0x7a>
c0005f77:	bb 06 00 00 00       	mov    ebx,0x6
c0005f7c:	83 ec 0c             	sub    esp,0xc
c0005f7f:	56                   	push   esi
c0005f80:	e8 bc 22 00 00       	call   c0008241 <ff_memfree>
c0005f85:	83 c4 10             	add    esp,0x10
c0005f88:	83 c4 50             	add    esp,0x50
c0005f8b:	89 d8                	mov    eax,ebx
c0005f8d:	5b                   	pop    ebx
c0005f8e:	5e                   	pop    esi
c0005f8f:	5f                   	pop    edi
c0005f90:	c3                   	ret    

c0005f91 <f_getfree>:
c0005f91:	55                   	push   ebp
c0005f92:	31 c9                	xor    ecx,ecx
c0005f94:	57                   	push   edi
c0005f95:	56                   	push   esi
c0005f96:	53                   	push   ebx
c0005f97:	83 ec 5c             	sub    esp,0x5c
c0005f9a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f9e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fa2:	e8 20 c5 ff ff       	call   c00024c7 <mount_volume>
c0005fa7:	89 c5                	mov    ebp,eax
c0005fa9:	85 c0                	test   eax,eax
c0005fab:	0f 85 be 01 00 00    	jne    c000616f <f_getfree+0x1de>
c0005fb1:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb9:	89 02                	mov    DWORD PTR [edx],eax
c0005fbb:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fc5:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fc8:	39 f2                	cmp    edx,esi
c0005fca:	77 0b                	ja     c0005fd7 <f_getfree+0x46>
c0005fcc:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fd0:	89 10                	mov    DWORD PTR [eax],edx
c0005fd2:	e9 98 01 00 00       	jmp    c000616f <f_getfree+0x1de>
c0005fd7:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fd9:	80 fa 01             	cmp    dl,0x1
c0005fdc:	75 3a                	jne    c0006018 <f_getfree+0x87>
c0005fde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fe2:	be 02 00 00 00       	mov    esi,0x2
c0005fe7:	31 db                	xor    ebx,ebx
c0005fe9:	89 f2                	mov    edx,esi
c0005feb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fef:	e8 aa cd ff ff       	call   c0002d9e <get_fat>
c0005ff4:	83 f8 ff             	cmp    eax,0xffffffff
c0005ff7:	0f 84 51 01 00 00    	je     c000614e <f_getfree+0x1bd>
c0005ffd:	83 f8 01             	cmp    eax,0x1
c0006000:	0f 84 4f 01 00 00    	je     c0006155 <f_getfree+0x1c4>
c0006006:	83 d3 00             	adc    ebx,0x0
c0006009:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600d:	46                   	inc    esi
c000600e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006011:	77 d6                	ja     c0005fe9 <f_getfree+0x58>
c0006013:	e9 46 01 00 00       	jmp    c000615e <f_getfree+0x1cd>
c0006018:	80 fa 04             	cmp    dl,0x4
c000601b:	0f 85 94 00 00 00    	jne    c00060b5 <f_getfree+0x124>
c0006021:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006024:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000602b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000602f:	31 ff                	xor    edi,edi
c0006031:	31 db                	xor    ebx,ebx
c0006033:	85 ff                	test   edi,edi
c0006035:	75 3f                	jne    c0006076 <f_getfree+0xe5>
c0006037:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000603b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000603f:	83 c0 01             	add    eax,0x1
c0006042:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006046:	83 d2 00             	adc    edx,0x0
c0006049:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000604d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006051:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006055:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006059:	e8 be c1 ff ff       	call   c000221c <move_window>
c000605e:	85 c0                	test   eax,eax
c0006060:	0f 85 f6 00 00 00    	jne    c000615c <f_getfree+0x1cb>
c0006066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000606a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000606e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006072:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006076:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607a:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c000607e:	88 c2                	mov    dl,al
c0006080:	b8 08 00 00 00       	mov    eax,0x8
c0006085:	29 f0                	sub    eax,esi
c0006087:	89 c1                	mov    ecx,eax
c0006089:	01 f1                	add    ecx,esi
c000608b:	74 18                	je     c00060a5 <f_getfree+0x114>
c000608d:	85 f6                	test   esi,esi
c000608f:	74 14                	je     c00060a5 <f_getfree+0x114>
c0006091:	88 d1                	mov    cl,dl
c0006093:	83 e1 01             	and    ecx,0x1
c0006096:	80 f9 01             	cmp    cl,0x1
c0006099:	88 d1                	mov    cl,dl
c000609b:	83 d3 00             	adc    ebx,0x0
c000609e:	4e                   	dec    esi
c000609f:	d0 e9                	shr    cl,1
c00060a1:	88 ca                	mov    dl,cl
c00060a3:	eb e2                	jmp    c0006087 <f_getfree+0xf6>
c00060a5:	47                   	inc    edi
c00060a6:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060ac:	85 f6                	test   esi,esi
c00060ae:	75 83                	jne    c0006033 <f_getfree+0xa2>
c00060b0:	e9 a9 00 00 00       	jmp    c000615e <f_getfree+0x1cd>
c00060b5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060b8:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060ca:	75 1b                	jne    c00060e7 <f_getfree+0x156>
c00060cc:	89 d6                	mov    esi,edx
c00060ce:	89 cf                	mov    edi,ecx
c00060d0:	83 c6 01             	add    esi,0x1
c00060d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060d7:	83 d7 00             	adc    edi,0x0
c00060da:	e8 3d c1 ff ff       	call   c000221c <move_window>
c00060df:	85 c0                	test   eax,eax
c00060e1:	75 79                	jne    c000615c <f_getfree+0x1cb>
c00060e3:	89 f2                	mov    edx,esi
c00060e5:	89 f9                	mov    ecx,edi
c00060e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060f3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060f7:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c00060fb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00060ff:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006102:	75 15                	jne    c0006119 <f_getfree+0x188>
c0006104:	e8 3c b9 ff ff       	call   c0001a45 <ld_word>
c0006109:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000610d:	66 83 f8 01          	cmp    ax,0x1
c0006111:	83 d3 00             	adc    ebx,0x0
c0006114:	83 c6 02             	add    esi,0x2
c0006117:	eb 17                	jmp    c0006130 <f_getfree+0x19f>
c0006119:	e8 34 b9 ff ff       	call   c0001a52 <ld_dword>
c000611e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006122:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006127:	83 f8 01             	cmp    eax,0x1
c000612a:	83 d3 00             	adc    ebx,0x0
c000612d:	83 c6 04             	add    esi,0x4
c0006130:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006136:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000613a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000613e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006142:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006146:	0f 85 79 ff ff ff    	jne    c00060c5 <f_getfree+0x134>
c000614c:	eb 10                	jmp    c000615e <f_getfree+0x1cd>
c000614e:	bd 01 00 00 00       	mov    ebp,0x1
c0006153:	eb 09                	jmp    c000615e <f_getfree+0x1cd>
c0006155:	bd 02 00 00 00       	mov    ebp,0x2
c000615a:	eb 02                	jmp    c000615e <f_getfree+0x1cd>
c000615c:	89 c5                	mov    ebp,eax
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 18                	mov    DWORD PTR [eax],ebx
c0006164:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006168:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000616c:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000616f:	83 c4 5c             	add    esp,0x5c
c0006172:	89 e8                	mov    eax,ebp
c0006174:	5b                   	pop    ebx
c0006175:	5e                   	pop    esi
c0006176:	5f                   	pop    edi
c0006177:	5d                   	pop    ebp
c0006178:	c3                   	ret    

c0006179 <f_truncate>:
c0006179:	56                   	push   esi
c000617a:	53                   	push   ebx
c000617b:	83 ec 14             	sub    esp,0x14
c000617e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006182:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006186:	89 d8                	mov    eax,ebx
c0006188:	e8 b4 bf ff ff       	call   c0002141 <validate>
c000618d:	89 c6                	mov    esi,eax
c000618f:	85 c0                	test   eax,eax
c0006191:	0f 85 d2 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c0006197:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000619b:	85 f6                	test   esi,esi
c000619d:	0f 85 c6 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c00061a3:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061a7:	0f 84 b7 00 00 00    	je     c0006264 <f_truncate+0xeb>
c00061ad:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061b3:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061b6:	89 d1                	mov    ecx,edx
c00061b8:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061bb:	0f 83 a8 00 00 00    	jae    c0006269 <f_truncate+0xf0>
c00061c1:	09 c2                	or     edx,eax
c00061c3:	75 15                	jne    c00061da <f_truncate+0x61>
c00061c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061c8:	31 c9                	xor    ecx,ecx
c00061ca:	89 d8                	mov    eax,ebx
c00061cc:	e8 bc d0 ff ff       	call   c000328d <remove_chain>
c00061d1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061d8:	eb 35                	jmp    c000620f <f_truncate+0x96>
c00061da:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061dd:	89 d8                	mov    eax,ebx
c00061df:	e8 ba cb ff ff       	call   c0002d9e <get_fat>
c00061e4:	89 c2                	mov    edx,eax
c00061e6:	b8 01 00 00 00       	mov    eax,0x1
c00061eb:	83 fa ff             	cmp    edx,0xffffffff
c00061ee:	74 1f                	je     c000620f <f_truncate+0x96>
c00061f0:	b8 02 00 00 00       	mov    eax,0x2
c00061f5:	83 fa 01             	cmp    edx,0x1
c00061f8:	74 15                	je     c000620f <f_truncate+0x96>
c00061fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061fe:	31 c0                	xor    eax,eax
c0006200:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006203:	76 0a                	jbe    c000620f <f_truncate+0x96>
c0006205:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006208:	89 d8                	mov    eax,ebx
c000620a:	e8 7e d0 ff ff       	call   c000328d <remove_chain>
c000620f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006212:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006215:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006218:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000621b:	83 ca 40             	or     edx,0x40
c000621e:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006221:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006224:	85 c0                	test   eax,eax
c0006226:	75 35                	jne    c000625d <f_truncate+0xe4>
c0006228:	84 d2                	test   dl,dl
c000622a:	79 3d                	jns    c0006269 <f_truncate+0xf0>
c000622c:	83 ec 0c             	sub    esp,0xc
c000622f:	8d 43 50             	lea    eax,[ebx+0x50]
c0006232:	6a 01                	push   0x1
c0006234:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006237:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000623a:	50                   	push   eax
c000623b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000623f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006243:	50                   	push   eax
c0006244:	e8 c7 b7 ff ff       	call   c0001a10 <disk_write>
c0006249:	83 c4 20             	add    esp,0x20
c000624c:	85 c0                	test   eax,eax
c000624e:	75 08                	jne    c0006258 <f_truncate+0xdf>
c0006250:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006254:	31 f6                	xor    esi,esi
c0006256:	eb 11                	jmp    c0006269 <f_truncate+0xf0>
c0006258:	b8 01 00 00 00       	mov    eax,0x1
c000625d:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006260:	89 c6                	mov    esi,eax
c0006262:	eb 05                	jmp    c0006269 <f_truncate+0xf0>
c0006264:	be 07 00 00 00       	mov    esi,0x7
c0006269:	83 c4 14             	add    esp,0x14
c000626c:	89 f0                	mov    eax,esi
c000626e:	5b                   	pop    ebx
c000626f:	5e                   	pop    esi
c0006270:	c3                   	ret    

c0006271 <f_unlink>:
c0006271:	56                   	push   esi
c0006272:	b9 02 00 00 00       	mov    ecx,0x2
c0006277:	53                   	push   ebx
c0006278:	81 ec e4 00 00 00    	sub    esp,0xe4
c000627e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006282:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006289:	e8 39 c2 ff ff       	call   c00024c7 <mount_volume>
c000628e:	85 c0                	test   eax,eax
c0006290:	0f 85 53 01 00 00    	jne    c00063e9 <f_unlink+0x178>
c0006296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000629a:	83 ec 0c             	sub    esp,0xc
c000629d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062a1:	68 60 04 00 00       	push   0x460
c00062a6:	e8 80 1f 00 00       	call   c000822b <ff_memalloc>
c00062ab:	89 c3                	mov    ebx,eax
c00062ad:	83 c4 10             	add    esp,0x10
c00062b0:	b8 11 00 00 00       	mov    eax,0x11
c00062b5:	85 db                	test   ebx,ebx
c00062b7:	0f 84 2c 01 00 00    	je     c00063e9 <f_unlink+0x178>
c00062bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062c7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062ca:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062cd:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 56 e9 ff ff       	call   c0004c33 <follow_path>
c00062dd:	85 c0                	test   eax,eax
c00062df:	0f 85 f0 00 00 00    	jne    c00063d5 <f_unlink+0x164>
c00062e5:	b8 06 00 00 00       	mov    eax,0x6
c00062ea:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062f2:	0f 88 dd 00 00 00    	js     c00063d5 <f_unlink+0x164>
c00062f8:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00062fd:	74 0a                	je     c0006309 <f_unlink+0x98>
c00062ff:	b8 07 00 00 00       	mov    eax,0x7
c0006304:	e9 cc 00 00 00       	jmp    c00063d5 <f_unlink+0x164>
c0006309:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000630d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006311:	8a 02                	mov    al,BYTE PTR [edx]
c0006313:	3c 04                	cmp    al,0x4
c0006315:	75 12                	jne    c0006329 <f_unlink+0xb8>
c0006317:	8d 42 10             	lea    eax,[edx+0x10]
c000631a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000631e:	e8 d6 e8 ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0006323:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006327:	eb 0e                	jmp    c0006337 <f_unlink+0xc6>
c0006329:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006330:	e8 73 e8 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006335:	89 c6                	mov    esi,eax
c0006337:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000633c:	75 20                	jne    c000635e <f_unlink+0xed>
c000633e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006342:	e8 d6 d6 ff ff       	call   c0003a1d <dir_remove>
c0006347:	85 c0                	test   eax,eax
c0006349:	75 7d                	jne    c00063c8 <f_unlink+0x157>
c000634b:	85 f6                	test   esi,esi
c000634d:	74 79                	je     c00063c8 <f_unlink+0x157>
c000634f:	31 c9                	xor    ecx,ecx
c0006351:	89 f2                	mov    edx,esi
c0006353:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006357:	e8 31 cf ff ff       	call   c000328d <remove_chain>
c000635c:	eb 6a                	jmp    c00063c8 <f_unlink+0x157>
c000635e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006362:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006369:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006370:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006373:	75 21                	jne    c0006396 <f_unlink+0x125>
c0006375:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006379:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637d:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006384:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006388:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000638f:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006396:	31 d2                	xor    edx,edx
c0006398:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639f:	e8 f0 cb ff ff       	call   c0002f94 <dir_sdi>
c00063a4:	85 c0                	test   eax,eax
c00063a6:	75 2d                	jne    c00063d5 <f_unlink+0x164>
c00063a8:	31 d2                	xor    edx,edx
c00063aa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063b1:	e8 f0 d3 ff ff       	call   c00037a6 <dir_read>
c00063b6:	85 c0                	test   eax,eax
c00063b8:	0f 84 41 ff ff ff    	je     c00062ff <f_unlink+0x8e>
c00063be:	83 f8 04             	cmp    eax,0x4
c00063c1:	75 12                	jne    c00063d5 <f_unlink+0x164>
c00063c3:	e9 76 ff ff ff       	jmp    c000633e <f_unlink+0xcd>
c00063c8:	85 c0                	test   eax,eax
c00063ca:	75 09                	jne    c00063d5 <f_unlink+0x164>
c00063cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d0:	e8 55 df ff ff       	call   c000432a <sync_fs>
c00063d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063d9:	83 ec 0c             	sub    esp,0xc
c00063dc:	53                   	push   ebx
c00063dd:	e8 5f 1e 00 00       	call   c0008241 <ff_memfree>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e9:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063ef:	5b                   	pop    ebx
c00063f0:	5e                   	pop    esi
c00063f1:	c3                   	ret    

c00063f2 <f_mkdir>:
c00063f2:	57                   	push   edi
c00063f3:	b9 02 00 00 00       	mov    ecx,0x2
c00063f8:	56                   	push   esi
c00063f9:	53                   	push   ebx
c00063fa:	83 c4 80             	add    esp,0xffffff80
c00063fd:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006401:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006408:	e8 ba c0 ff ff       	call   c00024c7 <mount_volume>
c000640d:	89 c3                	mov    ebx,eax
c000640f:	85 c0                	test   eax,eax
c0006411:	0f 85 fe 01 00 00    	jne    c0006615 <f_mkdir+0x223>
c0006417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000641b:	83 ec 0c             	sub    esp,0xc
c000641e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006422:	bb 11 00 00 00       	mov    ebx,0x11
c0006427:	68 60 04 00 00       	push   0x460
c000642c:	e8 fa 1d 00 00       	call   c000822b <ff_memalloc>
c0006431:	83 c4 10             	add    esp,0x10
c0006434:	89 c7                	mov    edi,eax
c0006436:	85 c0                	test   eax,eax
c0006438:	0f 84 d7 01 00 00    	je     c0006615 <f_mkdir+0x223>
c000643e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006442:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006448:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000644b:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000644e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006455:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006459:	e8 d5 e7 ff ff       	call   c0004c33 <follow_path>
c000645e:	89 c3                	mov    ebx,eax
c0006460:	85 c0                	test   eax,eax
c0006462:	74 3e                	je     c00064a2 <f_mkdir+0xb0>
c0006464:	83 f8 04             	cmp    eax,0x4
c0006467:	75 3e                	jne    c00064a7 <f_mkdir+0xb5>
c0006469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646d:	31 d2                	xor    edx,edx
c000646f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006473:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006477:	e8 10 cc ff ff       	call   c000308c <create_chain>
c000647c:	89 c6                	mov    esi,eax
c000647e:	85 c0                	test   eax,eax
c0006480:	74 0c                	je     c000648e <f_mkdir+0x9c>
c0006482:	bb 02 00 00 00       	mov    ebx,0x2
c0006487:	83 f8 01             	cmp    eax,0x1
c000648a:	74 07                	je     c0006493 <f_mkdir+0xa1>
c000648c:	eb 2a                	jmp    c00064b8 <f_mkdir+0xc6>
c000648e:	bb 07 00 00 00       	mov    ebx,0x7
c0006493:	31 c9                	xor    ecx,ecx
c0006495:	89 f2                	mov    edx,esi
c0006497:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000649b:	e8 ed cd ff ff       	call   c000328d <remove_chain>
c00064a0:	eb 05                	jmp    c00064a7 <f_mkdir+0xb5>
c00064a2:	bb 08 00 00 00       	mov    ebx,0x8
c00064a7:	83 ec 0c             	sub    esp,0xc
c00064aa:	57                   	push   edi
c00064ab:	e8 91 1d 00 00       	call   c0008241 <ff_memfree>
c00064b0:	83 c4 10             	add    esp,0x10
c00064b3:	e9 5d 01 00 00       	jmp    c0006615 <f_mkdir+0x223>
c00064b8:	bb 01 00 00 00       	mov    ebx,0x1
c00064bd:	83 f8 ff             	cmp    eax,0xffffffff
c00064c0:	74 d1                	je     c0006493 <f_mkdir+0xa1>
c00064c2:	89 f2                	mov    edx,esi
c00064c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c8:	e8 08 cf ff ff       	call   c00033d5 <dir_clear>
c00064cd:	89 c3                	mov    ebx,eax
c00064cf:	85 c0                	test   eax,eax
c00064d1:	75 c0                	jne    c0006493 <f_mkdir+0xa1>
c00064d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064da:	74 69                	je     c0006545 <f_mkdir+0x153>
c00064dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00064e1:	83 c0 54             	add    eax,0x54
c00064e4:	ba 20 00 00 00       	mov    edx,0x20
c00064e9:	e8 eb b5 ff ff       	call   c0001ad9 <mem_set>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	83 c0 6a             	add    eax,0x6a
c00064f5:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c00064f9:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c00064fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0006502:	e8 b4 b5 ff ff       	call   c0001abb <st_dword>
c0006507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650b:	89 f1                	mov    ecx,esi
c000650d:	8d 50 54             	lea    edx,[eax+0x54]
c0006510:	e8 bc e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0006515:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006519:	b9 20 00 00 00       	mov    ecx,0x20
c000651e:	8d 50 54             	lea    edx,[eax+0x54]
c0006521:	83 c0 74             	add    eax,0x74
c0006524:	e8 9b b5 ff ff       	call   c0001ac4 <mem_cpy>
c0006529:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006531:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006535:	8d 50 74             	lea    edx,[eax+0x74]
c0006538:	e8 94 e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c000653d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006541:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006545:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006549:	e8 59 db ff ff       	call   c00040a7 <dir_register>
c000654e:	89 c3                	mov    ebx,eax
c0006550:	85 c0                	test   eax,eax
c0006552:	0f 85 3b ff ff ff    	jne    c0006493 <f_mkdir+0xa1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000655f:	75 74                	jne    c00065d5 <f_mkdir+0x1e3>
c0006561:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006564:	ba 00 00 21 50       	mov    edx,0x50210000
c0006569:	83 c0 0c             	add    eax,0xc
c000656c:	e8 4a b5 ff ff       	call   c0001abb <st_dword>
c0006571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006575:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006578:	89 f2                	mov    edx,esi
c000657a:	83 c0 34             	add    eax,0x34
c000657d:	e8 39 b5 ff ff       	call   c0001abb <st_dword>
c0006582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006586:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000658a:	c1 e2 09             	shl    edx,0x9
c000658d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006590:	83 c0 38             	add    eax,0x38
c0006593:	e8 23 b5 ff ff       	call   c0001abb <st_dword>
c0006598:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659c:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a0:	c1 e2 09             	shl    edx,0x9
c00065a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a6:	83 c0 28             	add    eax,0x28
c00065a9:	e8 0d b5 ff ff       	call   c0001abb <st_dword>
c00065ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065b5:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065bc:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065c4:	e8 cf d3 ff ff       	call   c0003998 <store_xdir>
c00065c9:	89 c3                	mov    ebx,eax
c00065cb:	85 c0                	test   eax,eax
c00065cd:	0f 85 d4 fe ff ff    	jne    c00064a7 <f_mkdir+0xb5>
c00065d3:	eb 30                	jmp    c0006605 <f_mkdir+0x213>
c00065d5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00065de:	83 c0 16             	add    eax,0x16
c00065e1:	e8 d5 b4 ff ff       	call   c0001abb <st_dword>
c00065e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ea:	89 f1                	mov    ecx,esi
c00065ec:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065f0:	e8 dc e5 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00065f5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f9:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00065fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006601:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006605:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006609:	e8 1c dd ff ff       	call   c000432a <sync_fs>
c000660e:	89 c3                	mov    ebx,eax
c0006610:	e9 92 fe ff ff       	jmp    c00064a7 <f_mkdir+0xb5>
c0006615:	83 ec 80             	sub    esp,0xffffff80
c0006618:	89 d8                	mov    eax,ebx
c000661a:	5b                   	pop    ebx
c000661b:	5e                   	pop    esi
c000661c:	5f                   	pop    edi
c000661d:	c3                   	ret    

c000661e <f_rename>:
c000661e:	55                   	push   ebp
c000661f:	57                   	push   edi
c0006620:	56                   	push   esi
c0006621:	53                   	push   ebx
c0006622:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006628:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000662f:	e8 f3 b9 ff ff       	call   c0002027 <get_ldnumber>
c0006634:	b9 02 00 00 00       	mov    ecx,0x2
c0006639:	8d 54 24 14          	lea    edx,[esp+0x14]
c000663d:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006644:	e8 7e be ff ff       	call   c00024c7 <mount_volume>
c0006649:	85 c0                	test   eax,eax
c000664b:	0f 85 b5 02 00 00    	jne    c0006906 <f_rename+0x2e8>
c0006651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000665c:	68 60 04 00 00       	push   0x460
c0006661:	e8 c5 1b 00 00       	call   c000822b <ff_memalloc>
c0006666:	89 c3                	mov    ebx,eax
c0006668:	83 c4 10             	add    esp,0x10
c000666b:	b8 11 00 00 00       	mov    eax,0x11
c0006670:	85 db                	test   ebx,ebx
c0006672:	0f 84 8e 02 00 00    	je     c0006906 <f_rename+0x2e8>
c0006678:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000667c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006685:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006688:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000668f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006693:	e8 9b e5 ff ff       	call   c0004c33 <follow_path>
c0006698:	85 c0                	test   eax,eax
c000669a:	0f 85 52 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066a0:	b8 06 00 00 00       	mov    eax,0x6
c00066a5:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ad:	0f 85 3f 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066ba:	0f 85 05 01 00 00    	jne    c00067c5 <f_rename+0x1a7>
c00066c0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066c3:	b9 40 00 00 00       	mov    ecx,0x40
c00066c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066cc:	e8 f3 b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066d1:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066d6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066da:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066e1:	e8 de b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066e6:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066ed:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066f4:	e8 3a e5 ff ff       	call   c0004c33 <follow_path>
c00066f9:	85 c0                	test   eax,eax
c00066fb:	75 29                	jne    c0006726 <f_rename+0x108>
c00066fd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006701:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006708:	74 0a                	je     c0006714 <f_rename+0xf6>
c000670a:	b8 08 00 00 00       	mov    eax,0x8
c000670f:	e9 de 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c0006714:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000671b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006722:	75 e6                	jne    c000670a <f_rename+0xec>
c0006724:	eb 09                	jmp    c000672f <f_rename+0x111>
c0006726:	83 f8 04             	cmp    eax,0x4
c0006729:	0f 85 c3 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000672f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006736:	e8 6c d9 ff ff       	call   c00040a7 <dir_register>
c000673b:	85 c0                	test   eax,eax
c000673d:	0f 85 af 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006747:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000674a:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000674d:	89 c5                	mov    ebp,eax
c000674f:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006752:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006756:	8d 46 24             	lea    eax,[esi+0x24]
c0006759:	e8 e7 b2 ff ff       	call   c0001a45 <ld_word>
c000675e:	b9 40 00 00 00       	mov    ecx,0x40
c0006763:	89 c7                	mov    edi,eax
c0006765:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006769:	89 f0                	mov    eax,esi
c000676b:	e8 54 b3 ff ff       	call   c0001ac4 <mem_cpy>
c0006770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006774:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006777:	89 e9                	mov    ecx,ebp
c0006779:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c000677c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006780:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006784:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006787:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000678a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000678d:	83 c0 24             	add    eax,0x24
c0006790:	0f b7 d7             	movzx  edx,di
c0006793:	e8 1f b3 ff ff       	call   c0001ab7 <st_word>
c0006798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000679f:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067a2:	a8 10                	test   al,0x10
c00067a4:	75 06                	jne    c00067ac <f_rename+0x18e>
c00067a6:	83 c8 20             	or     eax,0x20
c00067a9:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067ac:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067b3:	e8 e0 d1 ff ff       	call   c0003998 <store_xdir>
c00067b8:	85 c0                	test   eax,eax
c00067ba:	0f 84 1c 01 00 00    	je     c00068dc <f_rename+0x2be>
c00067c0:	e9 2d 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c00067c5:	b9 20 00 00 00       	mov    ecx,0x20
c00067ca:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067d5:	e8 ea b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067da:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067df:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067e3:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ea:	e8 d5 b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067ef:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00067f6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067fd:	e8 31 e4 ff ff       	call   c0004c33 <follow_path>
c0006802:	85 c0                	test   eax,eax
c0006804:	75 27                	jne    c000682d <f_rename+0x20f>
c0006806:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000680a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006811:	0f 85 f3 fe ff ff    	jne    c000670a <f_rename+0xec>
c0006817:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000681e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006825:	0f 85 df fe ff ff    	jne    c000670a <f_rename+0xec>
c000682b:	eb 09                	jmp    c0006836 <f_rename+0x218>
c000682d:	83 f8 04             	cmp    eax,0x4
c0006830:	0f 85 bc 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006836:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683d:	e8 65 d8 ff ff       	call   c00040a7 <dir_register>
c0006842:	85 c0                	test   eax,eax
c0006844:	0f 85 a8 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000684a:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006851:	b9 13 00 00 00       	mov    ecx,0x13
c0006856:	8d 54 24 25          	lea    edx,[esp+0x25]
c000685a:	8d 46 0d             	lea    eax,[esi+0xd]
c000685d:	e8 62 b2 ff ff       	call   c0001ac4 <mem_cpy>
c0006862:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006866:	a8 10                	test   al,0x10
c0006868:	75 03                	jne    c000686d <f_rename+0x24f>
c000686a:	83 c8 20             	or     eax,0x20
c000686d:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c000687c:	74 5e                	je     c00068dc <f_rename+0x2be>
c000687e:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006885:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006889:	74 51                	je     c00068dc <f_rename+0x2be>
c000688b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000688f:	89 f2                	mov    edx,esi
c0006891:	8a 07                	mov    al,BYTE PTR [edi]
c0006893:	e8 10 e3 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006898:	89 c2                	mov    edx,eax
c000689a:	89 f8                	mov    eax,edi
c000689c:	e8 3d b4 ff ff       	call   c0001cde <clst2sect>
c00068a1:	89 c6                	mov    esi,eax
c00068a3:	89 d1                	mov    ecx,edx
c00068a5:	b8 02 00 00 00       	mov    eax,0x2
c00068aa:	09 f2                	or     edx,esi
c00068ac:	74 44                	je     c00068f2 <f_rename+0x2d4>
c00068ae:	89 f2                	mov    edx,esi
c00068b0:	89 f8                	mov    eax,edi
c00068b2:	e8 65 b9 ff ff       	call   c000221c <move_window>
c00068b7:	85 c0                	test   eax,eax
c00068b9:	75 37                	jne    c00068f2 <f_rename+0x2d4>
c00068bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bf:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068c3:	75 17                	jne    c00068dc <f_rename+0x2be>
c00068c5:	8d 50 74             	lea    edx,[eax+0x74]
c00068c8:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068cf:	e8 fd e2 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00068d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068dc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e0:	e8 38 d1 ff ff       	call   c0003a1d <dir_remove>
c00068e5:	85 c0                	test   eax,eax
c00068e7:	75 09                	jne    c00068f2 <f_rename+0x2d4>
c00068e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ed:	e8 38 da ff ff       	call   c000432a <sync_fs>
c00068f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00068f6:	83 ec 0c             	sub    esp,0xc
c00068f9:	53                   	push   ebx
c00068fa:	e8 42 19 00 00       	call   c0008241 <ff_memfree>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006906:	81 c4 fc 00 00 00    	add    esp,0xfc
c000690c:	5b                   	pop    ebx
c000690d:	5e                   	pop    esi
c000690e:	5f                   	pop    edi
c000690f:	5d                   	pop    ebp
c0006910:	c3                   	ret    

c0006911 <f_chmod>:
c0006911:	57                   	push   edi
c0006912:	b9 02 00 00 00       	mov    ecx,0x2
c0006917:	56                   	push   esi
c0006918:	53                   	push   ebx
c0006919:	83 ec 60             	sub    esp,0x60
c000691c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006920:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006924:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006928:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000692c:	e8 96 bb ff ff       	call   c00024c7 <mount_volume>
c0006931:	85 c0                	test   eax,eax
c0006933:	0f 85 af 00 00 00    	jne    c00069e8 <f_chmod+0xd7>
c0006939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000693d:	83 ec 0c             	sub    esp,0xc
c0006940:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006944:	68 60 04 00 00       	push   0x460
c0006949:	e8 dd 18 00 00       	call   c000822b <ff_memalloc>
c000694e:	89 c6                	mov    esi,eax
c0006950:	83 c4 10             	add    esp,0x10
c0006953:	b8 11 00 00 00       	mov    eax,0x11
c0006958:	85 f6                	test   esi,esi
c000695a:	0f 84 88 00 00 00    	je     c00069e8 <f_chmod+0xd7>
c0006960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006964:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000696a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000696d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006970:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006974:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006978:	e8 b6 e2 ff ff       	call   c0004c33 <follow_path>
c000697d:	85 c0                	test   eax,eax
c000697f:	75 53                	jne    c00069d4 <f_chmod+0xc3>
c0006981:	b8 06 00 00 00       	mov    eax,0x6
c0006986:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c000698b:	75 47                	jne    c00069d4 <f_chmod+0xc3>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	89 f9                	mov    ecx,edi
c0006993:	83 e1 27             	and    ecx,0x27
c0006996:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006999:	75 1d                	jne    c00069b8 <f_chmod+0xa7>
c000699b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000699e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a1:	21 cb                	and    ebx,ecx
c00069a3:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a6:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ad:	e8 e6 cf ff ff       	call   c0003998 <store_xdir>
c00069b2:	85 c0                	test   eax,eax
c00069b4:	75 1e                	jne    c00069d4 <f_chmod+0xc3>
c00069b6:	eb 13                	jmp    c00069cb <f_chmod+0xba>
c00069b8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069bc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069bf:	21 cb                	and    ebx,ecx
c00069c1:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c4:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069cf:	e8 56 d9 ff ff       	call   c000432a <sync_fs>
c00069d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069d8:	83 ec 0c             	sub    esp,0xc
c00069db:	56                   	push   esi
c00069dc:	e8 60 18 00 00       	call   c0008241 <ff_memfree>
c00069e1:	83 c4 10             	add    esp,0x10
c00069e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069e8:	83 c4 60             	add    esp,0x60
c00069eb:	5b                   	pop    ebx
c00069ec:	5e                   	pop    esi
c00069ed:	5f                   	pop    edi
c00069ee:	c3                   	ret    

c00069ef <f_utime>:
c00069ef:	56                   	push   esi
c00069f0:	b9 02 00 00 00       	mov    ecx,0x2
c00069f5:	53                   	push   ebx
c00069f6:	83 ec 64             	sub    esp,0x64
c00069f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069fd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a01:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a05:	e8 bd ba ff ff       	call   c00024c7 <mount_volume>
c0006a0a:	85 c0                	test   eax,eax
c0006a0c:	0f 85 b5 00 00 00    	jne    c0006ac7 <f_utime+0xd8>
c0006a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a16:	83 ec 0c             	sub    esp,0xc
c0006a19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a1d:	68 60 04 00 00       	push   0x460
c0006a22:	e8 04 18 00 00       	call   c000822b <ff_memalloc>
c0006a27:	89 c3                	mov    ebx,eax
c0006a29:	83 c4 10             	add    esp,0x10
c0006a2c:	b8 11 00 00 00       	mov    eax,0x11
c0006a31:	85 db                	test   ebx,ebx
c0006a33:	0f 84 8e 00 00 00    	je     c0006ac7 <f_utime+0xd8>
c0006a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3d:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a43:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a46:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a49:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a4d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a51:	e8 dd e1 ff ff       	call   c0004c33 <follow_path>
c0006a56:	85 c0                	test   eax,eax
c0006a58:	75 59                	jne    c0006ab3 <f_utime+0xc4>
c0006a5a:	b8 06 00 00 00       	mov    eax,0x6
c0006a5f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a64:	75 4d                	jne    c0006ab3 <f_utime+0xc4>
c0006a66:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6e:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a72:	c1 e2 10             	shl    edx,0x10
c0006a75:	09 ca                	or     edx,ecx
c0006a77:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a7a:	75 1a                	jne    c0006a96 <f_utime+0xa7>
c0006a7c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a7f:	83 c0 0c             	add    eax,0xc
c0006a82:	e8 34 b0 ff ff       	call   c0001abb <st_dword>
c0006a87:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a8b:	e8 08 cf ff ff       	call   c0003998 <store_xdir>
c0006a90:	85 c0                	test   eax,eax
c0006a92:	75 1f                	jne    c0006ab3 <f_utime+0xc4>
c0006a94:	eb 14                	jmp    c0006aaa <f_utime+0xbb>
c0006a96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a9a:	83 c0 16             	add    eax,0x16
c0006a9d:	e8 19 b0 ff ff       	call   c0001abb <st_dword>
c0006aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aae:	e8 77 d8 ff ff       	call   c000432a <sync_fs>
c0006ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ab7:	83 ec 0c             	sub    esp,0xc
c0006aba:	53                   	push   ebx
c0006abb:	e8 81 17 00 00       	call   c0008241 <ff_memfree>
c0006ac0:	83 c4 10             	add    esp,0x10
c0006ac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ac7:	83 c4 64             	add    esp,0x64
c0006aca:	5b                   	pop    ebx
c0006acb:	5e                   	pop    esi
c0006acc:	c3                   	ret    

c0006acd <f_getlabel>:
c0006acd:	55                   	push   ebp
c0006ace:	31 c9                	xor    ecx,ecx
c0006ad0:	57                   	push   edi
c0006ad1:	56                   	push   esi
c0006ad2:	53                   	push   ebx
c0006ad3:	83 ec 6c             	sub    esp,0x6c
c0006ad6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ada:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ae1:	e8 e1 b9 ff ff       	call   c00024c7 <mount_volume>
c0006ae6:	89 c3                	mov    ebx,eax
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	0f 85 73 01 00 00    	jne    c0006c63 <f_getlabel+0x196>
c0006af0:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006af8:	0f 84 65 01 00 00    	je     c0006c63 <f_getlabel+0x196>
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	31 d2                	xor    edx,edx
c0006b04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b14:	e8 7b c4 ff ff       	call   c0002f94 <dir_sdi>
c0006b19:	89 c3                	mov    ebx,eax
c0006b1b:	85 c0                	test   eax,eax
c0006b1d:	0f 85 2f 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b23:	ba 01 00 00 00       	mov    edx,0x1
c0006b28:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2c:	e8 75 cc ff ff       	call   c00037a6 <dir_read>
c0006b31:	89 c3                	mov    ebx,eax
c0006b33:	85 c0                	test   eax,eax
c0006b35:	0f 85 17 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b3f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b42:	74 09                	je     c0006b4d <f_getlabel+0x80>
c0006b44:	31 f6                	xor    esi,esi
c0006b46:	31 c9                	xor    ecx,ecx
c0006b48:	e9 c8 00 00 00       	jmp    c0006c15 <f_getlabel+0x148>
c0006b4d:	31 ed                	xor    ebp,ebp
c0006b4f:	31 f6                	xor    esi,esi
c0006b51:	31 ff                	xor    edi,edi
c0006b53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b57:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b5b:	39 fa                	cmp    edx,edi
c0006b5d:	76 4b                	jbe    c0006baa <f_getlabel+0xdd>
c0006b5f:	47                   	inc    edi
c0006b60:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b63:	01 d0                	add    eax,edx
c0006b65:	e8 db ae ff ff       	call   c0001a45 <ld_word>
c0006b6a:	66 85 ed             	test   bp,bp
c0006b6d:	75 0d                	jne    c0006b7c <f_getlabel+0xaf>
c0006b6f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b75:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b7a:	76 28                	jbe    c0006ba4 <f_getlabel+0xd7>
c0006b7c:	89 e9                	mov    ecx,ebp
c0006b7e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b85:	c1 e1 10             	shl    ecx,0x10
c0006b88:	01 f2                	add    edx,esi
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	09 c8                	or     eax,ecx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 4c b0 ff ff       	call   c0001be5 <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 0b                	je     c0006ba8 <f_getlabel+0xdb>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c6                	add    esi,eax
c0006ba2:	31 c0                	xor    eax,eax
c0006ba4:	89 c5                	mov    ebp,eax
c0006ba6:	eb ab                	jmp    c0006b53 <f_getlabel+0x86>
c0006ba8:	31 f6                	xor    esi,esi
c0006baa:	66 85 ed             	test   bp,bp
c0006bad:	74 02                	je     c0006bb1 <f_getlabel+0xe4>
c0006baf:	31 f6                	xor    esi,esi
c0006bb1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bb8:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bbc:	e9 a2 00 00 00       	jmp    c0006c63 <f_getlabel+0x196>
c0006bc1:	83 ff 0b             	cmp    edi,0xb
c0006bc4:	74 11                	je     c0006bd7 <f_getlabel+0x10a>
c0006bc6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bcf:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bd2:	c1 e0 08             	shl    eax,0x8
c0006bd5:	09 c2                	or     edx,eax
c0006bd7:	50                   	push   eax
c0006bd8:	50                   	push   eax
c0006bd9:	68 b5 01 00 00       	push   0x1b5
c0006bde:	0f b7 d2             	movzx  edx,dx
c0006be1:	52                   	push   edx
c0006be2:	e8 07 17 00 00       	call   c00082ee <ff_oem2uni>
c0006be7:	83 c4 10             	add    esp,0x10
c0006bea:	66 85 c0             	test   ax,ax
c0006bed:	74 46                	je     c0006c35 <f_getlabel+0x168>
c0006bef:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bf6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bfb:	01 f2                	add    edx,esi
c0006bfd:	0f b7 c0             	movzx  eax,ax
c0006c00:	e8 e0 af ff ff       	call   c0001be5 <put_utf>
c0006c05:	84 c0                	test   al,al
c0006c07:	74 2c                	je     c0006c35 <f_getlabel+0x168>
c0006c09:	0f b6 c0             	movzx  eax,al
c0006c0c:	01 c6                	add    esi,eax
c0006c0e:	83 ff 0b             	cmp    edi,0xb
c0006c11:	74 24                	je     c0006c37 <f_getlabel+0x16a>
c0006c13:	89 f9                	mov    ecx,edi
c0006c15:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c19:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c1c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c21:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2a:	e8 ea ae ff ff       	call   c0001b19 <dbc_1st>
c0006c2f:	85 c0                	test   eax,eax
c0006c31:	74 a4                	je     c0006bd7 <f_getlabel+0x10a>
c0006c33:	eb 8c                	jmp    c0006bc1 <f_getlabel+0xf4>
c0006c35:	31 f6                	xor    esi,esi
c0006c37:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c41:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c48:	74 19                	je     c0006c63 <f_getlabel+0x196>
c0006c4a:	4e                   	dec    esi
c0006c4b:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c4e:	74 ee                	je     c0006c3e <f_getlabel+0x171>
c0006c50:	eb 11                	jmp    c0006c63 <f_getlabel+0x196>
c0006c52:	83 fb 04             	cmp    ebx,0x4
c0006c55:	75 0c                	jne    c0006c63 <f_getlabel+0x196>
c0006c57:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c5e:	31 db                	xor    ebx,ebx
c0006c60:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c63:	85 db                	test   ebx,ebx
c0006c65:	75 50                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c67:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c6f:	74 46                	je     c0006cb7 <f_getlabel+0x1ea>
c0006c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c75:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c78:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7b:	e8 9c b5 ff ff       	call   c000221c <move_window>
c0006c80:	89 c3                	mov    ebx,eax
c0006c82:	85 c0                	test   eax,eax
c0006c84:	75 31                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8a:	b8 43 00 00 00       	mov    eax,0x43
c0006c8f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c91:	80 f9 03             	cmp    cl,0x3
c0006c94:	74 0f                	je     c0006ca5 <f_getlabel+0x1d8>
c0006c96:	31 c0                	xor    eax,eax
c0006c98:	80 f9 04             	cmp    cl,0x4
c0006c9b:	0f 94 c0             	sete   al
c0006c9e:	48                   	dec    eax
c0006c9f:	83 e0 c3             	and    eax,0xffffffc3
c0006ca2:	83 c0 64             	add    eax,0x64
c0006ca5:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ca9:	e8 a4 ad ff ff       	call   c0001a52 <ld_dword>
c0006cae:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb5:	89 07                	mov    DWORD PTR [edi],eax
c0006cb7:	83 c4 6c             	add    esp,0x6c
c0006cba:	89 d8                	mov    eax,ebx
c0006cbc:	5b                   	pop    ebx
c0006cbd:	5e                   	pop    esi
c0006cbe:	5f                   	pop    edi
c0006cbf:	5d                   	pop    ebp
c0006cc0:	c3                   	ret    

c0006cc1 <f_setlabel>:
c0006cc1:	56                   	push   esi
c0006cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0006cc7:	53                   	push   ebx
c0006cc8:	83 ec 74             	sub    esp,0x74
c0006ccb:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ccf:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cd6:	e8 ec b7 ff ff       	call   c00024c7 <mount_volume>
c0006cdb:	89 c6                	mov    esi,eax
c0006cdd:	85 c0                	test   eax,eax
c0006cdf:	0f 85 41 02 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006ce5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ce9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cec:	0f 85 8e 00 00 00    	jne    c0006d80 <f_setlabel+0xbf>
c0006cf2:	b9 16 00 00 00       	mov    ecx,0x16
c0006cf7:	31 d2                	xor    edx,edx
c0006cf9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006cfd:	31 db                	xor    ebx,ebx
c0006cff:	e8 d5 ad ff ff       	call   c0001ad9 <mem_set>
c0006d04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d0e:	0f 86 0a 01 00 00    	jbe    c0006e1e <f_setlabel+0x15d>
c0006d14:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d1b:	e8 ff ad ff ff       	call   c0001b1f <tchar2uni>
c0006d20:	89 c6                	mov    esi,eax
c0006d22:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d27:	76 2a                	jbe    c0006d53 <f_setlabel+0x92>
c0006d29:	83 f8 ff             	cmp    eax,0xffffffff
c0006d2c:	74 05                	je     c0006d33 <f_setlabel+0x72>
c0006d2e:	83 fb 09             	cmp    ebx,0x9
c0006d31:	76 0a                	jbe    c0006d3d <f_setlabel+0x7c>
c0006d33:	be 06 00 00 00       	mov    esi,0x6
c0006d38:	e9 e9 01 00 00       	jmp    c0006f26 <f_setlabel+0x265>
c0006d3d:	89 c2                	mov    edx,eax
c0006d3f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d43:	c1 ea 10             	shr    edx,0x10
c0006d46:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d49:	01 c8                	add    eax,ecx
c0006d4b:	43                   	inc    ebx
c0006d4c:	e8 66 ad ff ff       	call   c0001ab7 <st_word>
c0006d51:	eb 04                	jmp    c0006d57 <f_setlabel+0x96>
c0006d53:	85 c0                	test   eax,eax
c0006d55:	74 dc                	je     c0006d33 <f_setlabel+0x72>
c0006d57:	89 f2                	mov    edx,esi
c0006d59:	b8 17 03 02 c0       	mov    eax,0xc0020317
c0006d5e:	e8 a4 ad ff ff       	call   c0001b07 <chk_chr>
c0006d63:	85 c0                	test   eax,eax
c0006d65:	75 cc                	jne    c0006d33 <f_setlabel+0x72>
c0006d67:	83 fb 0a             	cmp    ebx,0xa
c0006d6a:	77 c7                	ja     c0006d33 <f_setlabel+0x72>
c0006d6c:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d6f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d73:	0f b7 d6             	movzx  edx,si
c0006d76:	01 c8                	add    eax,ecx
c0006d78:	43                   	inc    ebx
c0006d79:	e8 39 ad ff ff       	call   c0001ab7 <st_word>
c0006d7e:	eb 84                	jmp    c0006d04 <f_setlabel+0x43>
c0006d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d85:	ba 20 00 00 00       	mov    edx,0x20
c0006d8a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	e8 44 ad ff ff       	call   c0001ad9 <mem_set>
c0006d95:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d9c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d9f:	76 60                	jbe    c0006e01 <f_setlabel+0x140>
c0006da1:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006da8:	e8 72 ad ff ff       	call   c0001b1f <tchar2uni>
c0006dad:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db2:	0f 87 7b ff ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006db8:	83 ec 0c             	sub    esp,0xc
c0006dbb:	50                   	push   eax
c0006dbc:	e8 9c 15 00 00       	call   c000835d <ff_wtoupper>
c0006dc1:	5a                   	pop    edx
c0006dc2:	59                   	pop    ecx
c0006dc3:	68 b5 01 00 00       	push   0x1b5
c0006dc8:	50                   	push   eax
c0006dc9:	e8 8a 14 00 00       	call   c0008258 <ff_uni2oem>
c0006dce:	83 c4 10             	add    esp,0x10
c0006dd1:	89 c6                	mov    esi,eax
c0006dd3:	66 85 c0             	test   ax,ax
c0006dd6:	0f 84 57 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006ddc:	0f b7 d0             	movzx  edx,ax
c0006ddf:	b8 10 03 02 c0       	mov    eax,0xc0020310
c0006de4:	e8 1e ad ff ff       	call   c0001b07 <chk_chr>
c0006de9:	85 c0                	test   eax,eax
c0006deb:	0f 85 42 ff ff ff    	jne    c0006d33 <f_setlabel+0x72>
c0006df1:	66 81 fe ff 00       	cmp    si,0xff
c0006df6:	0f 87 14 01 00 00    	ja     c0006f10 <f_setlabel+0x24f>
c0006dfc:	e9 fa 00 00 00       	jmp    c0006efb <f_setlabel+0x23a>
c0006e01:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e06:	0f 84 27 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006e0c:	85 db                	test   ebx,ebx
c0006e0e:	74 0e                	je     c0006e1e <f_setlabel+0x15d>
c0006e10:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e13:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e18:	75 04                	jne    c0006e1e <f_setlabel+0x15d>
c0006e1a:	89 c3                	mov    ebx,eax
c0006e1c:	eb ee                	jmp    c0006e0c <f_setlabel+0x14b>
c0006e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e22:	31 d2                	xor    edx,edx
c0006e24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e2c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e34:	e8 5b c1 ff ff       	call   c0002f94 <dir_sdi>
c0006e39:	89 c6                	mov    esi,eax
c0006e3b:	85 c0                	test   eax,eax
c0006e3d:	0f 85 e3 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e43:	ba 01 00 00 00       	mov    edx,0x1
c0006e48:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e4c:	e8 55 c9 ff ff       	call   c00037a6 <dir_read>
c0006e51:	85 c0                	test   eax,eax
c0006e53:	75 21                	jne    c0006e76 <f_setlabel+0x1b5>
c0006e55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e60:	74 5d                	je     c0006ebf <f_setlabel+0x1fe>
c0006e62:	85 db                	test   ebx,ebx
c0006e64:	74 0b                	je     c0006e71 <f_setlabel+0x1b0>
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	eb 70                	jmp    c0006ee1 <f_setlabel+0x220>
c0006e71:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e74:	eb 70                	jmp    c0006ee6 <f_setlabel+0x225>
c0006e76:	83 f8 04             	cmp    eax,0x4
c0006e79:	75 7c                	jne    c0006ef7 <f_setlabel+0x236>
c0006e7b:	85 db                	test   ebx,ebx
c0006e7d:	0f 84 a3 00 00 00    	je     c0006f26 <f_setlabel+0x265>
c0006e83:	ba 01 00 00 00       	mov    edx,0x1
c0006e88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e8c:	e8 8f ca ff ff       	call   c0003920 <dir_alloc>
c0006e91:	89 c6                	mov    esi,eax
c0006e93:	85 c0                	test   eax,eax
c0006e95:	0f 85 8b 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e9b:	31 d2                	xor    edx,edx
c0006e9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea1:	b9 20 00 00 00       	mov    ecx,0x20
c0006ea6:	e8 2e ac ff ff       	call   c0001ad9 <mem_set>
c0006eab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eaf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	75 18                	jne    c0006ed0 <f_setlabel+0x20f>
c0006eb8:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ebb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebf:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec2:	b9 16 00 00 00       	mov    ecx,0x16
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	83 c0 02             	add    eax,0x2
c0006ece:	eb 9b                	jmp    c0006e6b <f_setlabel+0x1aa>
c0006ed0:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ed4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ed9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006edd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee1:	e8 de ab ff ff       	call   c0001ac4 <mem_cpy>
c0006ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef2:	e8 33 d4 ff ff       	call   c000432a <sync_fs>
c0006ef7:	89 c6                	mov    esi,eax
c0006ef9:	eb 2b                	jmp    c0006f26 <f_setlabel+0x265>
c0006efb:	83 fb 0a             	cmp    ebx,0xa
c0006efe:	0f 87 2f fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f04:	89 f0                	mov    eax,esi
c0006f06:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f0a:	43                   	inc    ebx
c0006f0b:	e9 85 fe ff ff       	jmp    c0006d95 <f_setlabel+0xd4>
c0006f10:	83 fb 09             	cmp    ebx,0x9
c0006f13:	0f 87 1a fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	66 c1 e8 08          	shr    ax,0x8
c0006f1f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f23:	43                   	inc    ebx
c0006f24:	eb de                	jmp    c0006f04 <f_setlabel+0x243>
c0006f26:	83 c4 74             	add    esp,0x74
c0006f29:	89 f0                	mov    eax,esi
c0006f2b:	5b                   	pop    ebx
c0006f2c:	5e                   	pop    esi
c0006f2d:	c3                   	ret    

c0006f2e <f_forward>:
c0006f2e:	55                   	push   ebp
c0006f2f:	57                   	push   edi
c0006f30:	56                   	push   esi
c0006f31:	53                   	push   ebx
c0006f32:	83 ec 2c             	sub    esp,0x2c
c0006f35:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f47:	89 d8                	mov    eax,ebx
c0006f49:	e8 f3 b1 ff ff       	call   c0002141 <validate>
c0006f4e:	89 c5                	mov    ebp,eax
c0006f50:	85 c0                	test   eax,eax
c0006f52:	0f 85 aa 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f58:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f5c:	85 ed                	test   ebp,ebp
c0006f5e:	0f 85 9e 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f64:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f68:	0f 84 8f 01 00 00    	je     c00070fd <f_forward+0x1cf>
c0006f6e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f71:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f74:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f77:	bf 00 00 00 00       	mov    edi,0x0
c0006f7c:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f7f:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f83:	89 d1                	mov    ecx,edx
c0006f85:	19 f9                	sbb    ecx,edi
c0006f87:	0f 83 cf 00 00 00    	jae    c000705c <f_forward+0x12e>
c0006f8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f91:	e9 c6 00 00 00       	jmp    c000705c <f_forward+0x12e>
c0006f96:	50                   	push   eax
c0006f97:	50                   	push   eax
c0006f98:	6a 00                	push   0x0
c0006f9a:	6a 00                	push   0x0
c0006f9c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa0:	83 c4 10             	add    esp,0x10
c0006fa3:	85 c0                	test   eax,eax
c0006fa5:	0f 84 57 01 00 00    	je     c0007102 <f_forward+0x1d4>
c0006fab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006faf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fb5:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fb9:	89 d7                	mov    edi,edx
c0006fbb:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fbe:	89 c6                	mov    esi,eax
c0006fc0:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fc4:	21 ce                	and    esi,ecx
c0006fc6:	89 c1                	mov    ecx,eax
c0006fc8:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fce:	0f 84 98 00 00 00    	je     c000706c <f_forward+0x13e>
c0006fd4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fd8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fdb:	89 c8                	mov    eax,ecx
c0006fdd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe1:	e8 f8 ac ff ff       	call   c0001cde <clst2sect>
c0006fe6:	89 d7                	mov    edi,edx
c0006fe8:	09 c7                	or     edi,eax
c0006fea:	0f 84 9e 00 00 00    	je     c000708e <f_forward+0x160>
c0006ff0:	31 ff                	xor    edi,edi
c0006ff2:	01 c6                	add    esi,eax
c0006ff4:	11 d7                	adc    edi,edx
c0006ff6:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ff9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006ffc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007000:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007003:	39 fa                	cmp    edx,edi
c0007005:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007009:	0f 85 a2 00 00 00    	jne    c00070b1 <f_forward+0x183>
c000700f:	39 f0                	cmp    eax,esi
c0007011:	0f 85 9a 00 00 00    	jne    c00070b1 <f_forward+0x183>
c0007017:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701a:	ba 00 02 00 00       	mov    edx,0x200
c000701f:	25 ff 01 00 00       	and    eax,0x1ff
c0007024:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007028:	29 c2                	sub    edx,eax
c000702a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000702d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007030:	39 d1                	cmp    ecx,edx
c0007032:	76 02                	jbe    c0007036 <f_forward+0x108>
c0007034:	89 d1                	mov    ecx,edx
c0007036:	52                   	push   edx
c0007037:	8d 73 50             	lea    esi,[ebx+0x50]
c000703a:	52                   	push   edx
c000703b:	01 c6                	add    esi,eax
c000703d:	51                   	push   ecx
c000703e:	56                   	push   esi
c000703f:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 44                	je     c000708e <f_forward+0x160>
c000704a:	31 ff                	xor    edi,edi
c000704c:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000704f:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007052:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007056:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000705a:	01 07                	add    DWORD PTR [edi],eax
c000705c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007061:	0f 85 2f ff ff ff    	jne    c0006f96 <f_forward+0x68>
c0007067:	e9 96 00 00 00       	jmp    c0007102 <f_forward+0x1d4>
c000706c:	85 f6                	test   esi,esi
c000706e:	0f 85 60 ff ff ff    	jne    c0006fd4 <f_forward+0xa6>
c0007074:	89 d7                	mov    edi,edx
c0007076:	09 c7                	or     edi,eax
c0007078:	75 05                	jne    c000707f <f_forward+0x151>
c000707a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000707d:	eb 0a                	jmp    c0007089 <f_forward+0x15b>
c000707f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007082:	89 d8                	mov    eax,ebx
c0007084:	e8 15 bd ff ff       	call   c0002d9e <get_fat>
c0007089:	83 f8 01             	cmp    eax,0x1
c000708c:	77 0b                	ja     c0007099 <f_forward+0x16b>
c000708e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007092:	bd 02 00 00 00       	mov    ebp,0x2
c0007097:	eb 69                	jmp    c0007102 <f_forward+0x1d4>
c0007099:	83 f8 ff             	cmp    eax,0xffffffff
c000709c:	75 0b                	jne    c00070a9 <f_forward+0x17b>
c000709e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a2:	bd 01 00 00 00       	mov    ebp,0x1
c00070a7:	eb 59                	jmp    c0007102 <f_forward+0x1d4>
c00070a9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070ac:	e9 23 ff ff ff       	jmp    c0006fd4 <f_forward+0xa6>
c00070b1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070b5:	79 20                	jns    c00070d7 <f_forward+0x1a9>
c00070b7:	83 ec 0c             	sub    esp,0xc
c00070ba:	6a 01                	push   0x1
c00070bc:	52                   	push   edx
c00070bd:	50                   	push   eax
c00070be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070c6:	50                   	push   eax
c00070c7:	e8 44 a9 ff ff       	call   c0001a10 <disk_write>
c00070cc:	83 c4 20             	add    esp,0x20
c00070cf:	85 c0                	test   eax,eax
c00070d1:	75 cb                	jne    c000709e <f_forward+0x170>
c00070d3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070d7:	83 ec 0c             	sub    esp,0xc
c00070da:	6a 01                	push   0x1
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ea:	50                   	push   eax
c00070eb:	e8 0a a9 ff ff       	call   c00019fa <disk_read>
c00070f0:	83 c4 20             	add    esp,0x20
c00070f3:	85 c0                	test   eax,eax
c00070f5:	0f 84 1c ff ff ff    	je     c0007017 <f_forward+0xe9>
c00070fb:	eb a1                	jmp    c000709e <f_forward+0x170>
c00070fd:	bd 07 00 00 00       	mov    ebp,0x7
c0007102:	83 c4 2c             	add    esp,0x2c
c0007105:	89 e8                	mov    eax,ebp
c0007107:	5b                   	pop    ebx
c0007108:	5e                   	pop    esi
c0007109:	5f                   	pop    edi
c000710a:	5d                   	pop    ebp
c000710b:	c3                   	ret    

c000710c <f_mkfs>:
c000710c:	55                   	push   ebp
c000710d:	57                   	push   edi
c000710e:	56                   	push   esi
c000710f:	53                   	push   ebx
c0007110:	bb 0b 00 00 00       	mov    ebx,0xb
c0007115:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000711b:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	e8 f9 ae ff ff       	call   c0002027 <get_ldnumber>
c000712e:	85 c0                	test   eax,eax
c0007130:	0f 88 e8 10 00 00    	js     c000821e <f_mkfs+0x1112>
c0007136:	8b 14 85 c0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb40]
c000713d:	85 d2                	test   edx,edx
c000713f:	74 03                	je     c0007144 <f_mkfs+0x38>
c0007141:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007144:	85 f6                	test   esi,esi
c0007146:	75 05                	jne    c000714d <f_mkfs+0x41>
c0007148:	be 00 03 02 c0       	mov    esi,0xc0020300
c000714d:	0f b6 c0             	movzx  eax,al
c0007150:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	bb 03 00 00 00       	mov    ebx,0x3
c000715c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007160:	e8 92 a8 ff ff       	call   c00019f7 <disk_initialize>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	a8 01                	test   al,0x1
c000716a:	0f 85 ae 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c0007170:	bb 0a 00 00 00       	mov    ebx,0xa
c0007175:	a8 04                	test   al,0x4
c0007177:	0f 85 a1 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c000717d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007180:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007184:	85 c0                	test   eax,eax
c0007186:	75 20                	jne    c00071a8 <f_mkfs+0x9c>
c0007188:	51                   	push   ecx
c0007189:	8d 44 24 78          	lea    eax,[esp+0x78]
c000718d:	50                   	push   eax
c000718e:	6a 03                	push   0x3
c0007190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007194:	e8 8d a8 ff ff       	call   c0001a26 <disk_ioctl>
c0007199:	83 c4 10             	add    esp,0x10
c000719c:	85 c0                	test   eax,eax
c000719e:	74 08                	je     c00071a8 <f_mkfs+0x9c>
c00071a0:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071a8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071ac:	8d 42 ff             	lea    eax,[edx-0x1]
c00071af:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071b4:	77 04                	ja     c00071ba <f_mkfs+0xae>
c00071b6:	85 c2                	test   edx,eax
c00071b8:	74 08                	je     c00071c2 <f_mkfs+0xb6>
c00071ba:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071c5:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071c9:	48                   	dec    eax
c00071ca:	3c 01                	cmp    al,0x1
c00071cc:	76 05                	jbe    c00071d3 <f_mkfs+0xc7>
c00071ce:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071da:	48                   	dec    eax
c00071db:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e0:	77 07                	ja     c00071e9 <f_mkfs+0xdd>
c00071e2:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071e7:	74 08                	je     c00071f1 <f_mkfs+0xe5>
c00071e9:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071f4:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00071fa:	77 07                	ja     c0007203 <f_mkfs+0xf7>
c00071fc:	8d 43 ff             	lea    eax,[ebx-0x1]
c00071ff:	85 d8                	test   eax,ebx
c0007201:	74 02                	je     c0007205 <f_mkfs+0xf9>
c0007203:	31 db                	xor    ebx,ebx
c0007205:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007210:	77 0a                	ja     c000721c <f_mkfs+0x110>
c0007212:	bb 11 00 00 00       	mov    ebx,0x11
c0007217:	e9 02 10 00 00       	jmp    c000821e <f_mkfs+0x1112>
c000721c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007223:	8b 36                	mov    esi,DWORD PTR [esi]
c0007225:	85 ed                	test   ebp,ebp
c0007227:	75 1e                	jne    c0007247 <f_mkfs+0x13b>
c0007229:	83 ec 0c             	sub    esp,0xc
c000722c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007233:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007238:	50                   	push   eax
c0007239:	e8 ed 0f 00 00       	call   c000822b <ff_memalloc>
c000723e:	83 c4 10             	add    esp,0x10
c0007241:	89 c5                	mov    ebp,eax
c0007243:	85 c0                	test   eax,eax
c0007245:	74 cb                	je     c0007212 <f_mkfs+0x106>
c0007247:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000724f:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007257:	52                   	push   edx
c0007258:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000725c:	50                   	push   eax
c000725d:	6a 01                	push   0x1
c000725f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007263:	e8 be a7 ff ff       	call   c0001a26 <disk_ioctl>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	85 c0                	test   eax,eax
c000726d:	0f 85 46 0f 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007273:	89 f1                	mov    ecx,esi
c0007275:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000727d:	83 e1 0f             	and    ecx,0xf
c0007280:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007288:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000728c:	83 e6 08             	and    esi,0x8
c000728f:	75 56                	jne    c00072e7 <f_mkfs+0x1db>
c0007291:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007295:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007299:	83 ff 00             	cmp    edi,0x0
c000729c:	76 20                	jbe    c00072be <f_mkfs+0x1b2>
c000729e:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072a3:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072a9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b1:	83 d7 ff             	adc    edi,0xffffffff
c00072b4:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072b8:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072bc:	eb 21                	jmp    c00072df <f_mkfs+0x1d3>
c00072be:	ba 3f 00 00 00       	mov    edx,0x3f
c00072c3:	39 f2                	cmp    edx,esi
c00072c5:	19 f8                	sbb    eax,edi
c00072c7:	73 1e                	jae    c00072e7 <f_mkfs+0x1db>
c00072c9:	83 c6 c1             	add    esi,0xffffffc1
c00072cc:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072d4:	83 d7 ff             	adc    edi,0xffffffff
c00072d7:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072db:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072f6:	ba 7f 00 00 00       	mov    edx,0x7f
c00072fb:	31 c0                	xor    eax,eax
c00072fd:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007300:	89 c7                	mov    edi,eax
c0007302:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007306:	0f 83 c1 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c000730c:	89 df                	mov    edi,ebx
c000730e:	c1 ef 09             	shr    edi,0x9
c0007311:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007315:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000731c:	c1 ef 09             	shr    edi,0x9
c000731f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007324:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007328:	74 29                	je     c0007353 <f_mkfs+0x247>
c000732a:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000732f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007335:	0f 97 c2             	seta   dl
c0007338:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000733b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000733f:	0f 92 c0             	setb   al
c0007342:	08 c2                	or     dl,al
c0007344:	75 5b                	jne    c00073a1 <f_mkfs+0x295>
c0007346:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000734a:	83 e0 07             	and    eax,0x7
c000734d:	3c 04                	cmp    al,0x4
c000734f:	74 50                	je     c00073a1 <f_mkfs+0x295>
c0007351:	eb 1b                	jmp    c000736e <f_mkfs+0x262>
c0007353:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007358:	0f 87 6f 0a 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c000735e:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007364:	76 08                	jbe    c000736e <f_mkfs+0x262>
c0007366:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000736e:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007372:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007376:	83 e0 01             	and    eax,0x1
c0007379:	80 e1 02             	and    cl,0x2
c000737c:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007380:	74 0d                	je     c000738f <f_mkfs+0x283>
c0007382:	84 c0                	test   al,al
c0007384:	0f 84 4f 09 00 00    	je     c0007cd9 <f_mkfs+0xbcd>
c000738a:	e9 0e 08 00 00       	jmp    c0007b9d <f_mkfs+0xa91>
c000738f:	bb 13 00 00 00       	mov    ebx,0x13
c0007394:	84 c0                	test   al,al
c0007396:	0f 85 01 08 00 00    	jne    c0007b9d <f_mkfs+0xa91>
c000739c:	e9 35 0e 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c00073a1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073a6:	31 c0                	xor    eax,eax
c00073a8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073ab:	89 c7                	mov    edi,eax
c00073ad:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b1:	0f 83 16 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c00073b7:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073bd:	77 39                	ja     c00073f8 <f_mkfs+0x2ec>
c00073bf:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073c4:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073cc:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073cf:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073d3:	73 08                	jae    c00073dd <f_mkfs+0x2d1>
c00073d5:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073dd:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073e5:	b8 00 00 00 00       	mov    eax,0x0
c00073ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073ee:	73 08                	jae    c00073f8 <f_mkfs+0x2ec>
c00073f0:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007400:	83 c0 20             	add    eax,0x20
c0007403:	83 d2 00             	adc    edx,0x0
c0007406:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000740a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000740e:	31 d2                	xor    edx,edx
c0007410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007414:	52                   	push   edx
c0007415:	50                   	push   eax
c0007416:	31 ff                	xor    edi,edi
c0007418:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000741c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007420:	e8 67 7f 01 00       	call   c001f38c <__udivdi3>
c0007425:	83 c4 10             	add    esp,0x10
c0007428:	c1 e0 02             	shl    eax,0x2
c000742b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000742f:	05 07 02 00 00       	add    eax,0x207
c0007434:	89 f1                	mov    ecx,esi
c0007436:	c1 e8 09             	shr    eax,0x9
c0007439:	89 fb                	mov    ebx,edi
c000743b:	83 c1 ff             	add    ecx,0xffffffff
c000743e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007442:	83 d3 ff             	adc    ebx,0xffffffff
c0007445:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007449:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c000744d:	31 d2                	xor    edx,edx
c000744f:	01 c8                	add    eax,ecx
c0007451:	11 da                	adc    edx,ebx
c0007453:	89 c1                	mov    ecx,eax
c0007455:	f7 de                	neg    esi
c0007457:	83 d7 00             	adc    edi,0x0
c000745a:	21 f1                	and    ecx,esi
c000745c:	f7 df                	neg    edi
c000745e:	89 d0                	mov    eax,edx
c0007460:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007464:	21 f8                	and    eax,edi
c0007466:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000746a:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000746e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007472:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007476:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000747a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000747e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007481:	0f ac d0 01          	shrd   eax,edx,0x1
c0007485:	d1 ea                	shr    edx,1
c0007487:	89 df                	mov    edi,ebx
c0007489:	39 c1                	cmp    ecx,eax
c000748b:	19 d7                	sbb    edi,edx
c000748d:	0f 83 3a 09 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c0007493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007497:	31 d2                	xor    edx,edx
c0007499:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000749d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a1:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074a8:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074ac:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b0:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074b4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074b8:	83 f8 0f             	cmp    eax,0xf
c00074bb:	0f 86 0c 09 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c00074c1:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074c9:	0f 87 fe 08 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c00074cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074d3:	31 d2                	xor    edx,edx
c00074d5:	83 c0 07             	add    eax,0x7
c00074d8:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e0:	c1 e8 03             	shr    eax,0x3
c00074e3:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074eb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074f3:	c1 e0 09             	shl    eax,0x9
c00074f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007501:	48                   	dec    eax
c0007502:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007506:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c000750a:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000750e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007512:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000751d:	31 d2                	xor    edx,edx
c000751f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007524:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007528:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000752c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007530:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007534:	31 ff                	xor    edi,edi
c0007536:	31 f6                	xor    esi,esi
c0007538:	31 db                	xor    ebx,ebx
c000753a:	85 ff                	test   edi,edi
c000753c:	74 05                	je     c0007543 <f_mkfs+0x437>
c000753e:	4f                   	dec    edi
c000753f:	74 44                	je     c0007585 <f_mkfs+0x479>
c0007541:	eb 4f                	jmp    c0007592 <f_mkfs+0x486>
c0007543:	83 ec 0c             	sub    esp,0xc
c0007546:	0f b7 c3             	movzx  eax,bx
c0007549:	50                   	push   eax
c000754a:	e8 0e 0e 00 00       	call   c000835d <ff_wtoupper>
c000754f:	83 c4 10             	add    esp,0x10
c0007552:	89 c1                	mov    ecx,eax
c0007554:	66 39 c3             	cmp    bx,ax
c0007557:	8d 53 01             	lea    edx,[ebx+0x1]
c000755a:	75 3e                	jne    c000759a <f_mkfs+0x48e>
c000755c:	be 01 00 00 00       	mov    esi,0x1
c0007561:	89 df                	mov    edi,ebx
c0007563:	66 01 f7             	add    di,si
c0007566:	75 07                	jne    c000756f <f_mkfs+0x463>
c0007568:	83 fe 7f             	cmp    esi,0x7f
c000756b:	77 31                	ja     c000759e <f_mkfs+0x492>
c000756d:	eb 16                	jmp    c0007585 <f_mkfs+0x479>
c000756f:	83 ec 0c             	sub    esp,0xc
c0007572:	0f b7 ff             	movzx  edi,di
c0007575:	57                   	push   edi
c0007576:	e8 e2 0d 00 00       	call   c000835d <ff_wtoupper>
c000757b:	83 c4 10             	add    esp,0x10
c000757e:	39 c7                	cmp    edi,eax
c0007580:	75 e6                	jne    c0007568 <f_mkfs+0x45c>
c0007582:	46                   	inc    esi
c0007583:	eb dc                	jmp    c0007561 <f_mkfs+0x455>
c0007585:	31 c0                	xor    eax,eax
c0007587:	4e                   	dec    esi
c0007588:	0f 95 c0             	setne  al
c000758b:	89 d9                	mov    ecx,ebx
c000758d:	89 c7                	mov    edi,eax
c000758f:	43                   	inc    ebx
c0007590:	eb 14                	jmp    c00075a6 <f_mkfs+0x49a>
c0007592:	89 f1                	mov    ecx,esi
c0007594:	01 f3                	add    ebx,esi
c0007596:	31 ff                	xor    edi,edi
c0007598:	eb 0c                	jmp    c00075a6 <f_mkfs+0x49a>
c000759a:	89 d3                	mov    ebx,edx
c000759c:	eb 08                	jmp    c00075a6 <f_mkfs+0x49a>
c000759e:	bf 02 00 00 00       	mov    edi,0x2
c00075a3:	83 c9 ff             	or     ecx,0xffffffff
c00075a6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075a9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075ad:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075b1:	0f b6 c1             	movzx  eax,cl
c00075b4:	e8 87 a9 ff ff       	call   c0001f40 <xsum32>
c00075b9:	66 c1 e9 08          	shr    cx,0x8
c00075bd:	89 c2                	mov    edx,eax
c00075bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c2:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075c6:	0f b7 c1             	movzx  eax,cx
c00075c9:	e8 72 a9 ff ff       	call   c0001f40 <xsum32>
c00075ce:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075d3:	66 85 db             	test   bx,bx
c00075d6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075da:	74 1f                	je     c00075fb <f_mkfs+0x4ef>
c00075dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075df:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075e6:	83 c0 02             	add    eax,0x2
c00075e9:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075ef:	39 c2                	cmp    edx,eax
c00075f1:	74 08                	je     c00075fb <f_mkfs+0x4ef>
c00075f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00075f6:	e9 3f ff ff ff       	jmp    c000753a <f_mkfs+0x42e>
c00075fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075fe:	83 ec 0c             	sub    esp,0xc
c0007601:	05 01 02 00 00       	add    eax,0x201
c0007606:	c1 e8 09             	shr    eax,0x9
c0007609:	50                   	push   eax
c000760a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000760e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007612:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007616:	55                   	push   ebp
c0007617:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000761b:	e8 f0 a3 ff ff       	call   c0001a10 <disk_write>
c0007620:	83 c4 20             	add    esp,0x20
c0007623:	85 c0                	test   eax,eax
c0007625:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007628:	0f 85 8b 0b 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000762e:	89 d0                	mov    eax,edx
c0007630:	31 d2                	xor    edx,edx
c0007632:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007636:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000763a:	66 85 db             	test   bx,bx
c000763d:	74 04                	je     c0007643 <f_mkfs+0x537>
c000763f:	31 c0                	xor    eax,eax
c0007641:	eb b0                	jmp    c00075f3 <f_mkfs+0x4e7>
c0007643:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007647:	31 d2                	xor    edx,edx
c0007649:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000764d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007651:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007655:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000765c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007660:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007666:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766a:	8d 70 01             	lea    esi,[eax+0x1]
c000766d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007671:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007675:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007680:	c1 eb 09             	shr    ebx,0x9
c0007683:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007687:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000768b:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007692:	31 d2                	xor    edx,edx
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	89 04 24             	mov    DWORD PTR [esp],eax
c000769c:	89 c1                	mov    ecx,eax
c000769e:	89 e8                	mov    eax,ebp
c00076a0:	e8 34 a4 ff ff       	call   c0001ad9 <mem_set>
c00076a5:	31 c0                	xor    eax,eax
c00076a7:	83 fe 07             	cmp    esi,0x7
c00076aa:	76 10                	jbe    c00076bc <f_mkfs+0x5b0>
c00076ac:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076af:	76 0b                	jbe    c00076bc <f_mkfs+0x5b0>
c00076b1:	40                   	inc    eax
c00076b2:	83 ee 08             	sub    esi,0x8
c00076b5:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076ba:	eb eb                	jmp    c00076a7 <f_mkfs+0x59b>
c00076bc:	b2 01                	mov    dl,0x1
c00076be:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076c2:	85 f6                	test   esi,esi
c00076c4:	74 0c                	je     c00076d2 <f_mkfs+0x5c6>
c00076c6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c9:	76 07                	jbe    c00076d2 <f_mkfs+0x5c6>
c00076cb:	08 11                	or     BYTE PTR [ecx],dl
c00076cd:	4e                   	dec    esi
c00076ce:	01 d2                	add    edx,edx
c00076d0:	eb f0                	jmp    c00076c2 <f_mkfs+0x5b6>
c00076d2:	89 df                	mov    edi,ebx
c00076d4:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076d8:	76 04                	jbe    c00076de <f_mkfs+0x5d2>
c00076da:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076de:	83 ec 0c             	sub    esp,0xc
c00076e1:	57                   	push   edi
c00076e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ea:	55                   	push   ebp
c00076eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076ef:	e8 1c a3 ff ff       	call   c0001a10 <disk_write>
c00076f4:	83 c4 20             	add    esp,0x20
c00076f7:	85 c0                	test   eax,eax
c00076f9:	0f 85 ba 0a 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00076ff:	31 d2                	xor    edx,edx
c0007701:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007705:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007709:	29 fb                	sub    ebx,edi
c000770b:	0f 85 7a ff ff ff    	jne    c000768b <f_mkfs+0x57f>
c0007711:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007715:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000771d:	31 f6                	xor    esi,esi
c000771f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007723:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007726:	31 d2                	xor    edx,edx
c0007728:	89 e8                	mov    eax,ebp
c000772a:	e8 aa a3 ff ff       	call   c0001ad9 <mem_set>
c000772f:	31 c9                	xor    ecx,ecx
c0007731:	85 db                	test   ebx,ebx
c0007733:	75 40                	jne    c0007775 <f_mkfs+0x669>
c0007735:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000773a:	89 e8                	mov    eax,ebp
c000773c:	e8 7a a3 ff ff       	call   c0001abb <st_dword>
c0007741:	8d 45 04             	lea    eax,[ebp+0x4]
c0007744:	83 ca ff             	or     edx,0xffffffff
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 6a a3 ff ff       	call   c0001abb <st_dword>
c0007751:	b9 08 00 00 00       	mov    ecx,0x8
c0007756:	eb 1d                	jmp    c0007775 <f_mkfs+0x669>
c0007758:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000775b:	76 3b                	jbe    c0007798 <f_mkfs+0x68c>
c000775d:	43                   	inc    ebx
c000775e:	83 fe 01             	cmp    esi,0x1
c0007761:	89 da                	mov    edx,ebx
c0007763:	77 03                	ja     c0007768 <f_mkfs+0x65c>
c0007765:	83 ca ff             	or     edx,0xffffffff
c0007768:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000776c:	4e                   	dec    esi
c000776d:	e8 49 a3 ff ff       	call   c0001abb <st_dword>
c0007772:	83 c1 04             	add    ecx,0x4
c0007775:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007779:	85 f6                	test   esi,esi
c000777b:	75 db                	jne    c0007758 <f_mkfs+0x64c>
c000777d:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007782:	77 14                	ja     c0007798 <f_mkfs+0x68c>
c0007784:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000778b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000778f:	85 f6                	test   esi,esi
c0007791:	74 05                	je     c0007798 <f_mkfs+0x68c>
c0007793:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007796:	77 dd                	ja     c0007775 <f_mkfs+0x669>
c0007798:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000779c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a0:	39 cf                	cmp    edi,ecx
c00077a2:	76 02                	jbe    c00077a6 <f_mkfs+0x69a>
c00077a4:	89 cf                	mov    edi,ecx
c00077a6:	83 ec 0c             	sub    esp,0xc
c00077a9:	57                   	push   edi
c00077aa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077ae:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b2:	55                   	push   ebp
c00077b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077b7:	e8 54 a2 ff ff       	call   c0001a10 <disk_write>
c00077bc:	83 c4 20             	add    esp,0x20
c00077bf:	85 c0                	test   eax,eax
c00077c1:	0f 85 f2 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00077c7:	31 d2                	xor    edx,edx
c00077c9:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077cd:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077d1:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077d5:	0f 85 48 ff ff ff    	jne    c0007723 <f_mkfs+0x617>
c00077db:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077de:	31 d2                	xor    edx,edx
c00077e0:	89 e8                	mov    eax,ebp
c00077e2:	31 ff                	xor    edi,edi
c00077e4:	e8 f0 a2 ff ff       	call   c0001ad9 <mem_set>
c00077e9:	8d 45 34             	lea    eax,[ebp+0x34]
c00077ec:	ba 02 00 00 00       	mov    edx,0x2
c00077f1:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077f5:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00077f9:	e8 bd a2 ff ff       	call   c0001abb <st_dword>
c00077fe:	8d 45 38             	lea    eax,[ebp+0x38]
c0007801:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007805:	e8 b1 a2 ff ff       	call   c0001abb <st_dword>
c000780a:	8d 45 44             	lea    eax,[ebp+0x44]
c000780d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007811:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007815:	e8 a1 a2 ff ff       	call   c0001abb <st_dword>
c000781a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000781e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007821:	83 c2 02             	add    edx,0x2
c0007824:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007828:	e8 8e a2 ff ff       	call   c0001abb <st_dword>
c000782d:	8d 45 58             	lea    eax,[ebp+0x58]
c0007830:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007834:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007838:	e8 7e a2 ff ff       	call   c0001abb <st_dword>
c000783d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007841:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007846:	89 c6                	mov    esi,eax
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007850:	89 04 24             	mov    DWORD PTR [esp],eax
c0007853:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007857:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000785a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000785e:	39 cb                	cmp    ebx,ecx
c0007860:	76 02                	jbe    c0007864 <f_mkfs+0x758>
c0007862:	89 cb                	mov    ebx,ecx
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	57                   	push   edi
c0007869:	56                   	push   esi
c000786a:	55                   	push   ebp
c000786b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000786f:	e8 9c a1 ff ff       	call   c0001a10 <disk_write>
c0007874:	83 c4 20             	add    esp,0x20
c0007877:	85 c0                	test   eax,eax
c0007879:	0f 85 3a 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000787f:	31 d2                	xor    edx,edx
c0007881:	b9 00 02 00 00       	mov    ecx,0x200
c0007886:	89 e8                	mov    eax,ebp
c0007888:	e8 4c a2 ff ff       	call   c0001ad9 <mem_set>
c000788d:	31 d2                	xor    edx,edx
c000788f:	01 de                	add    esi,ebx
c0007891:	11 d7                	adc    edi,edx
c0007893:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007896:	75 bf                	jne    c0007857 <f_mkfs+0x74b>
c0007898:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000789c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a0:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078a8:	b9 00 02 00 00       	mov    ecx,0x200
c00078ad:	31 d2                	xor    edx,edx
c00078af:	89 e8                	mov    eax,ebp
c00078b1:	e8 23 a2 ff ff       	call   c0001ad9 <mem_set>
c00078b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00078bb:	ba e0 03 02 c0       	mov    edx,0xc00203e0
c00078c0:	89 e8                	mov    eax,ebp
c00078c2:	e8 fd a1 ff ff       	call   c0001ac4 <mem_cpy>
c00078c7:	8d 45 40             	lea    eax,[ebp+0x40]
c00078ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078d2:	e8 e7 a1 ff ff       	call   c0001abe <st_qword>
c00078d7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078db:	8d 45 48             	lea    eax,[ebp+0x48]
c00078de:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078e2:	e8 d7 a1 ff ff       	call   c0001abe <st_qword>
c00078e7:	8d 45 50             	lea    eax,[ebp+0x50]
c00078ea:	ba 20 00 00 00       	mov    edx,0x20
c00078ef:	e8 c7 a1 ff ff       	call   c0001abb <st_dword>
c00078f4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00078f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fc:	e8 ba a1 ff ff       	call   c0001abb <st_dword>
c0007901:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007905:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007909:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000790d:	e8 a9 a1 ff ff       	call   c0001abb <st_dword>
c0007912:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007915:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007919:	e8 9d a1 ff ff       	call   c0001abb <st_dword>
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	8d 50 02             	lea    edx,[eax+0x2]
c0007925:	8d 45 60             	lea    eax,[ebp+0x60]
c0007928:	e8 8e a1 ff ff       	call   c0001abb <st_dword>
c000792d:	8d 45 64             	lea    eax,[ebp+0x64]
c0007930:	ba 00 00 21 50       	mov    edx,0x50210000
c0007935:	e8 81 a1 ff ff       	call   c0001abb <st_dword>
c000793a:	8d 45 68             	lea    eax,[ebp+0x68]
c000793d:	ba 00 01 00 00       	mov    edx,0x100
c0007942:	e8 70 a1 ff ff       	call   c0001ab7 <st_word>
c0007947:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000794b:	b8 0a 00 00 00       	mov    eax,0xa
c0007950:	48                   	dec    eax
c0007951:	74 05                	je     c0007958 <f_mkfs+0x84c>
c0007953:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007956:	eb f8                	jmp    c0007950 <f_mkfs+0x844>
c0007958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795c:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007960:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007964:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007968:	74 05                	je     c000796f <f_mkfs+0x863>
c000796a:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c000796d:	eb f5                	jmp    c0007964 <f_mkfs+0x858>
c000796f:	8d 45 78             	lea    eax,[ebp+0x78]
c0007972:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007977:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c000797d:	31 db                	xor    ebx,ebx
c000797f:	e8 33 a1 ff ff       	call   c0001ab7 <st_word>
c0007984:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000798a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000798f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007992:	e8 20 a1 ff ff       	call   c0001ab7 <st_word>
c0007997:	31 c9                	xor    ecx,ecx
c0007999:	8d 41 96             	lea    eax,[ecx-0x6a]
c000799c:	83 f8 01             	cmp    eax,0x1
c000799f:	76 13                	jbe    c00079b4 <f_mkfs+0x8a8>
c00079a1:	83 f9 70             	cmp    ecx,0x70
c00079a4:	74 0e                	je     c00079b4 <f_mkfs+0x8a8>
c00079a6:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ab:	89 da                	mov    edx,ebx
c00079ad:	e8 8e a5 ff ff       	call   c0001f40 <xsum32>
c00079b2:	89 c3                	mov    ebx,eax
c00079b4:	41                   	inc    ecx
c00079b5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079bb:	75 dc                	jne    c0007999 <f_mkfs+0x88d>
c00079bd:	89 f0                	mov    eax,esi
c00079bf:	89 fa                	mov    edx,edi
c00079c1:	83 c0 01             	add    eax,0x1
c00079c4:	83 d2 00             	adc    edx,0x0
c00079c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079cf:	83 ec 0c             	sub    esp,0xc
c00079d2:	6a 01                	push   0x1
c00079d4:	57                   	push   edi
c00079d5:	56                   	push   esi
c00079d6:	55                   	push   ebp
c00079d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079db:	e8 30 a0 ff ff       	call   c0001a10 <disk_write>
c00079e0:	83 c4 20             	add    esp,0x20
c00079e3:	85 c0                	test   eax,eax
c00079e5:	0f 85 ce 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00079eb:	31 d2                	xor    edx,edx
c00079ed:	b9 00 02 00 00       	mov    ecx,0x200
c00079f2:	89 e8                	mov    eax,ebp
c00079f4:	e8 e0 a0 ff ff       	call   c0001ad9 <mem_set>
c00079f9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a01:	e8 b1 a0 ff ff       	call   c0001ab7 <st_word>
c0007a06:	89 f0                	mov    eax,esi
c0007a08:	83 c0 09             	add    eax,0x9
c0007a0b:	89 fa                	mov    edx,edi
c0007a0d:	83 d2 00             	adc    edx,0x0
c0007a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a17:	31 c9                	xor    ecx,ecx
c0007a19:	41                   	inc    ecx
c0007a1a:	89 da                	mov    edx,ebx
c0007a1c:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a21:	e8 1a a5 ff ff       	call   c0001f40 <xsum32>
c0007a26:	89 c3                	mov    ebx,eax
c0007a28:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a2e:	75 e9                	jne    c0007a19 <f_mkfs+0x90d>
c0007a30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a38:	83 c0 01             	add    eax,0x1
c0007a3b:	83 d2 00             	adc    edx,0x0
c0007a3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a42:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a46:	83 ec 0c             	sub    esp,0xc
c0007a49:	6a 01                	push   0x1
c0007a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a53:	55                   	push   ebp
c0007a54:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a58:	e8 b3 9f ff ff       	call   c0001a10 <disk_write>
c0007a5d:	83 c4 20             	add    esp,0x20
c0007a60:	85 c0                	test   eax,eax
c0007a62:	0f 85 51 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a6c:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a70:	75 09                	jne    c0007a7b <f_mkfs+0x96f>
c0007a72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a75:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a79:	74 12                	je     c0007a8d <f_mkfs+0x981>
c0007a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a8b:	eb 8a                	jmp    c0007a17 <f_mkfs+0x90b>
c0007a8d:	31 d2                	xor    edx,edx
c0007a8f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a94:	89 e8                	mov    eax,ebp
c0007a96:	e8 3e a0 ff ff       	call   c0001ad9 <mem_set>
c0007a9b:	83 c6 0b             	add    esi,0xb
c0007a9e:	83 d7 00             	adc    edi,0x0
c0007aa1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aa5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007aa9:	31 c9                	xor    ecx,ecx
c0007aab:	41                   	inc    ecx
c0007aac:	89 da                	mov    edx,ebx
c0007aae:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ab3:	e8 88 a4 ff ff       	call   c0001f40 <xsum32>
c0007ab8:	89 c3                	mov    ebx,eax
c0007aba:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac0:	75 e9                	jne    c0007aab <f_mkfs+0x99f>
c0007ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ac5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ac9:	83 c6 01             	add    esi,0x1
c0007acc:	83 d7 00             	adc    edi,0x0
c0007acf:	83 ec 0c             	sub    esp,0xc
c0007ad2:	6a 01                	push   0x1
c0007ad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ad8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007adc:	55                   	push   ebp
c0007add:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae1:	e8 2a 9f ff ff       	call   c0001a10 <disk_write>
c0007ae6:	83 c4 20             	add    esp,0x20
c0007ae9:	85 c0                	test   eax,eax
c0007aeb:	0f 85 c8 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007af1:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007af5:	75 06                	jne    c0007afd <f_mkfs+0x9f1>
c0007af7:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007afb:	74 09                	je     c0007b06 <f_mkfs+0x9fa>
c0007afd:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b00:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b04:	eb a3                	jmp    c0007aa9 <f_mkfs+0x99d>
c0007b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	01 e8                	add    eax,ebp
c0007b0e:	e8 a8 9f ff ff       	call   c0001abb <st_dword>
c0007b13:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b18:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b20:	75 e4                	jne    c0007b06 <f_mkfs+0x9fa>
c0007b22:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b29:	83 c6 02             	add    esi,0x2
c0007b2c:	83 d7 00             	adc    edi,0x0
c0007b2f:	83 ec 0c             	sub    esp,0xc
c0007b32:	6a 01                	push   0x1
c0007b34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b3c:	55                   	push   ebp
c0007b3d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b41:	e8 ca 9e ff ff       	call   c0001a10 <disk_write>
c0007b46:	83 c4 20             	add    esp,0x20
c0007b49:	85 c0                	test   eax,eax
c0007b4b:	0f 85 68 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007b51:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b56:	74 0d                	je     c0007b65 <f_mkfs+0xa59>
c0007b58:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b60:	e9 43 fd ff ff       	jmp    c00078a8 <f_mkfs+0x79c>
c0007b65:	b1 07                	mov    cl,0x7
c0007b67:	e9 e3 05 00 00       	jmp    c000814f <f_mkfs+0x1043>
c0007b6c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b71:	0f 85 4f 02 00 00    	jne    c0007dc6 <f_mkfs+0xcba>
c0007b77:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b7c:	0f 86 22 02 00 00    	jbe    c0007da4 <f_mkfs+0xc98>
c0007b82:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b87:	0f 85 81 06 00 00    	jne    c000820e <f_mkfs+0x1102>
c0007b8d:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b94:	83 f8 40             	cmp    eax,0x40
c0007b97:	0f 87 51 06 00 00    	ja     c00081ee <f_mkfs+0x10e2>
c0007b9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ba1:	85 ff                	test   edi,edi
c0007ba3:	75 1c                	jne    c0007bc1 <f_mkfs+0xab5>
c0007ba5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ba8:	ba e0 02 02 c0       	mov    edx,0xc00202e0
c0007bad:	c1 e9 0c             	shr    ecx,0xc
c0007bb0:	bf 01 00 00 00       	mov    edi,0x1
c0007bb5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bb8:	66 85 c0             	test   ax,ax
c0007bbb:	0f 85 95 01 00 00    	jne    c0007d56 <f_mkfs+0xc4a>
c0007bc1:	31 d2                	xor    edx,edx
c0007bc3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bc6:	f7 f7                	div    edi
c0007bc8:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bcd:	0f 86 95 01 00 00    	jbe    c0007d68 <f_mkfs+0xc5c>
c0007bd3:	83 c0 02             	add    eax,0x2
c0007bd6:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bdb:	01 c0                	add    eax,eax
c0007bdd:	05 ff 01 00 00       	add    eax,0x1ff
c0007be2:	be 01 00 00 00       	mov    esi,0x1
c0007be7:	c1 e8 09             	shr    eax,0x9
c0007bea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf2:	c1 e0 05             	shl    eax,0x5
c0007bf5:	c1 e8 09             	shr    eax,0x9
c0007bf8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bfc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c01:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c05:	89 f0                	mov    eax,esi
c0007c07:	31 d2                	xor    edx,edx
c0007c09:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c15:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c19:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c1d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c2c:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	01 c8                	add    eax,ecx
c0007c34:	11 da                	adc    edx,ebx
c0007c36:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c3a:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c3e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c42:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c46:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c4a:	f7 da                	neg    edx
c0007c4c:	21 d1                	and    ecx,edx
c0007c4e:	29 d9                	sub    ecx,ebx
c0007c50:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c55:	0f 85 20 01 00 00    	jne    c0007d7b <f_mkfs+0xc6f>
c0007c5b:	31 db                	xor    ebx,ebx
c0007c5d:	01 ce                	add    esi,ecx
c0007c5f:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c63:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c67:	89 f8                	mov    eax,edi
c0007c69:	31 d2                	xor    edx,edx
c0007c6b:	c1 e0 04             	shl    eax,0x4
c0007c6e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c72:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c76:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c7a:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c7e:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c82:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c85:	19 d3                	sbb    ebx,edx
c0007c87:	0f 82 40 01 00 00    	jb     c0007dcd <f_mkfs+0xcc1>
c0007c8d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c91:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c94:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007c99:	89 c8                	mov    eax,ecx
c0007c9b:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007c9f:	29 f0                	sub    eax,esi
c0007ca1:	29 d0                	sub    eax,edx
c0007ca3:	31 d2                	xor    edx,edx
c0007ca5:	f7 f7                	div    edi
c0007ca7:	89 c3                	mov    ebx,eax
c0007ca9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cae:	0f 85 b8 fe ff ff    	jne    c0007b6c <f_mkfs+0xa60>
c0007cb4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cb9:	0f 87 1d 01 00 00    	ja     c0007ddc <f_mkfs+0xcd0>
c0007cbf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cc4:	0f 85 03 01 00 00    	jne    c0007dcd <f_mkfs+0xcc1>
c0007cca:	83 ff 01             	cmp    edi,0x1
c0007ccd:	0f 86 fa 00 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c0007cd3:	d1 ef                	shr    edi,1
c0007cd5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cd9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cdd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce0:	85 db                	test   ebx,ebx
c0007ce2:	75 2d                	jne    c0007d11 <f_mkfs+0xc05>
c0007ce4:	89 cb                	mov    ebx,ecx
c0007ce6:	ba f0 02 02 c0       	mov    edx,0xc00202f0
c0007ceb:	c1 eb 11             	shr    ebx,0x11
c0007cee:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cf6:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007cf9:	66 85 c0             	test   ax,ax
c0007cfc:	74 11                	je     c0007d0f <f_mkfs+0xc03>
c0007cfe:	83 c2 02             	add    edx,0x2
c0007d01:	39 d8                	cmp    eax,ebx
c0007d03:	77 0a                	ja     c0007d0f <f_mkfs+0xc03>
c0007d05:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d09:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d0d:	eb e7                	jmp    c0007cf6 <f_mkfs+0xbea>
c0007d0f:	31 db                	xor    ebx,ebx
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d19:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d20:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d25:	c1 ea 09             	shr    edx,0x9
c0007d28:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d31:	0f 87 96 00 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c0007d37:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d3b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d47:	be 20 00 00 00       	mov    esi,0x20
c0007d4c:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d51:	e9 a6 fe ff ff       	jmp    c0007bfc <f_mkfs+0xaf0>
c0007d56:	83 c2 02             	add    edx,0x2
c0007d59:	39 c8                	cmp    eax,ecx
c0007d5b:	0f 87 60 fe ff ff    	ja     c0007bc1 <f_mkfs+0xab5>
c0007d61:	01 ff                	add    edi,edi
c0007d63:	e9 4d fe ff ff       	jmp    c0007bb5 <f_mkfs+0xaa9>
c0007d68:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d6b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d70:	40                   	inc    eax
c0007d71:	d1 e8                	shr    eax,1
c0007d73:	83 c0 03             	add    eax,0x3
c0007d76:	e9 62 fe ff ff       	jmp    c0007bdd <f_mkfs+0xad1>
c0007d7b:	31 d2                	xor    edx,edx
c0007d7d:	89 c8                	mov    eax,ecx
c0007d7f:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d83:	85 d2                	test   edx,edx
c0007d85:	74 0c                	je     c0007d93 <f_mkfs+0xc87>
c0007d87:	49                   	dec    ecx
c0007d88:	46                   	inc    esi
c0007d89:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d8e:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d93:	89 c8                	mov    eax,ecx
c0007d95:	31 d2                	xor    edx,edx
c0007d97:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d9b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d9f:	e9 c3 fe ff ff       	jmp    c0007c67 <f_mkfs+0xb5b>
c0007da4:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007da9:	77 31                	ja     c0007ddc <f_mkfs+0xcd0>
c0007dab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db0:	75 1b                	jne    c0007dcd <f_mkfs+0xcc1>
c0007db2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007db5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007db9:	3d 80 00 00 00       	cmp    eax,0x80
c0007dbe:	0f 86 d9 fd ff ff    	jbe    c0007b9d <f_mkfs+0xa91>
c0007dc4:	eb 07                	jmp    c0007dcd <f_mkfs+0xcc1>
c0007dc6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dcb:	76 0a                	jbe    c0007dd7 <f_mkfs+0xccb>
c0007dcd:	bb 0e 00 00 00       	mov    ebx,0xe
c0007dd2:	e9 ff 03 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c0007dd7:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007ddc:	31 d2                	xor    edx,edx
c0007dde:	b9 00 02 00 00       	mov    ecx,0x200
c0007de3:	89 e8                	mov    eax,ebp
c0007de5:	e8 ef 9c ff ff       	call   c0001ad9 <mem_set>
c0007dea:	b9 0b 00 00 00       	mov    ecx,0xb
c0007def:	ba 02 04 02 c0       	mov    edx,0xc0020402
c0007df4:	89 e8                	mov    eax,ebp
c0007df6:	e8 c9 9c ff ff       	call   c0001ac4 <mem_cpy>
c0007dfb:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007dfe:	ba 00 02 00 00       	mov    edx,0x200
c0007e03:	e8 af 9c ff ff       	call   c0001ab7 <st_word>
c0007e08:	89 f8                	mov    eax,edi
c0007e0a:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e0d:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e10:	0f b7 d6             	movzx  edx,si
c0007e13:	e8 9f 9c ff ff       	call   c0001ab7 <st_word>
c0007e18:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e1c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e1f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e24:	75 08                	jne    c0007e2e <f_mkfs+0xd22>
c0007e26:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e2e:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e35:	e8 7d 9c ff ff       	call   c0001ab7 <st_word>
c0007e3a:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e3f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e43:	39 d0                	cmp    eax,edx
c0007e45:	b8 00 00 00 00       	mov    eax,0x0
c0007e4a:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e4e:	72 0a                	jb     c0007e5a <f_mkfs+0xd4e>
c0007e50:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e53:	e8 5f 9c ff ff       	call   c0001ab7 <st_word>
c0007e58:	eb 08                	jmp    c0007e62 <f_mkfs+0xd56>
c0007e5a:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e5d:	e8 59 9c ff ff       	call   c0001abb <st_dword>
c0007e62:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e65:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e6a:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e6e:	e8 44 9c ff ff       	call   c0001ab7 <st_word>
c0007e73:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e76:	ba ff 00 00 00       	mov    edx,0xff
c0007e7b:	e8 37 9c ff ff       	call   c0001ab7 <st_word>
c0007e80:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e87:	e8 2f 9c ff ff       	call   c0001abb <st_dword>
c0007e8c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e91:	75 57                	jne    c0007eea <f_mkfs+0xdde>
c0007e93:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e96:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e9b:	e8 1b 9c ff ff       	call   c0001abb <st_dword>
c0007ea0:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ea3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ea7:	e8 0f 9c ff ff       	call   c0001abb <st_dword>
c0007eac:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eaf:	ba 02 00 00 00       	mov    edx,0x2
c0007eb4:	e8 02 9c ff ff       	call   c0001abb <st_dword>
c0007eb9:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ebc:	ba 01 00 00 00       	mov    edx,0x1
c0007ec1:	e8 f1 9b ff ff       	call   c0001ab7 <st_word>
c0007ec6:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ec9:	ba 06 00 00 00       	mov    edx,0x6
c0007ece:	e8 e4 9b ff ff       	call   c0001ab7 <st_word>
c0007ed3:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ed7:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007edb:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ede:	b9 13 00 00 00       	mov    ecx,0x13
c0007ee3:	ba 0e 04 02 c0       	mov    edx,0xc002040e
c0007ee8:	eb 2f                	jmp    c0007f19 <f_mkfs+0xe0d>
c0007eea:	8d 45 27             	lea    eax,[ebp+0x27]
c0007eed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ef2:	e8 c4 9b ff ff       	call   c0001abb <st_dword>
c0007ef7:	8d 45 16             	lea    eax,[ebp+0x16]
c0007efa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007eff:	e8 b3 9b ff ff       	call   c0001ab7 <st_word>
c0007f04:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f08:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f0c:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f0f:	b9 13 00 00 00       	mov    ecx,0x13
c0007f14:	ba 22 04 02 c0       	mov    edx,0xc0020422
c0007f19:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f1f:	e8 a0 9b ff ff       	call   c0001ac4 <mem_cpy>
c0007f24:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f29:	89 f0                	mov    eax,esi
c0007f2b:	e8 87 9b ff ff       	call   c0001ab7 <st_word>
c0007f30:	83 ec 0c             	sub    esp,0xc
c0007f33:	6a 01                	push   0x1
c0007f35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f3d:	55                   	push   ebp
c0007f3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f42:	e8 c9 9a ff ff       	call   c0001a10 <disk_write>
c0007f47:	83 c4 20             	add    esp,0x20
c0007f4a:	85 c0                	test   eax,eax
c0007f4c:	0f 85 67 02 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007f52:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f57:	0f 85 b7 00 00 00    	jne    c0008014 <f_mkfs+0xf08>
c0007f5d:	83 ec 0c             	sub    esp,0xc
c0007f60:	6a 01                	push   0x1
c0007f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f6a:	83 c0 06             	add    eax,0x6
c0007f6d:	83 d2 00             	adc    edx,0x0
c0007f70:	52                   	push   edx
c0007f71:	50                   	push   eax
c0007f72:	55                   	push   ebp
c0007f73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f77:	e8 94 9a ff ff       	call   c0001a10 <disk_write>
c0007f7c:	83 c4 20             	add    esp,0x20
c0007f7f:	b9 00 02 00 00       	mov    ecx,0x200
c0007f84:	31 d2                	xor    edx,edx
c0007f86:	89 e8                	mov    eax,ebp
c0007f88:	e8 4c 9b ff ff       	call   c0001ad9 <mem_set>
c0007f8d:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f92:	89 e8                	mov    eax,ebp
c0007f94:	e8 22 9b ff ff       	call   c0001abb <st_dword>
c0007f99:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f9f:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fa4:	e8 12 9b ff ff       	call   c0001abb <st_dword>
c0007fa9:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fac:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fb2:	e8 04 9b ff ff       	call   c0001abb <st_dword>
c0007fb7:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fbd:	ba 02 00 00 00       	mov    edx,0x2
c0007fc2:	e8 f4 9a ff ff       	call   c0001abb <st_dword>
c0007fc7:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fcc:	89 f0                	mov    eax,esi
c0007fce:	e8 e4 9a ff ff       	call   c0001ab7 <st_word>
c0007fd3:	83 ec 0c             	sub    esp,0xc
c0007fd6:	6a 01                	push   0x1
c0007fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fdc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe0:	83 c0 07             	add    eax,0x7
c0007fe3:	83 d2 00             	adc    edx,0x0
c0007fe6:	52                   	push   edx
c0007fe7:	50                   	push   eax
c0007fe8:	55                   	push   ebp
c0007fe9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fed:	e8 1e 9a ff ff       	call   c0001a10 <disk_write>
c0007ff2:	83 c4 14             	add    esp,0x14
c0007ff5:	6a 01                	push   0x1
c0007ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ffb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fff:	83 c0 01             	add    eax,0x1
c0008002:	83 d2 00             	adc    edx,0x0
c0008005:	52                   	push   edx
c0008006:	50                   	push   eax
c0008007:	55                   	push   ebp
c0008008:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000800c:	e8 ff 99 ff ff       	call   c0001a10 <disk_write>
c0008011:	83 c4 20             	add    esp,0x20
c0008014:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000801b:	31 d2                	xor    edx,edx
c000801d:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008023:	31 db                	xor    ebx,ebx
c0008025:	89 e8                	mov    eax,ebp
c0008027:	e8 ad 9a ff ff       	call   c0001ad9 <mem_set>
c000802c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008033:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008038:	0f 94 c3             	sete   bl
c000803b:	4b                   	dec    ebx
c000803c:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008042:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008048:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804d:	75 21                	jne    c0008070 <f_mkfs+0xf64>
c000804f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 60 9a ff ff       	call   c0001abb <st_dword>
c000805b:	8d 45 04             	lea    eax,[ebp+0x4]
c000805e:	83 ca ff             	or     edx,0xffffffff
c0008061:	e8 55 9a ff ff       	call   c0001abb <st_dword>
c0008066:	8d 45 08             	lea    eax,[ebp+0x8]
c0008069:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000806e:	eb 04                	jmp    c0008074 <f_mkfs+0xf68>
c0008070:	89 da                	mov    edx,ebx
c0008072:	89 e8                	mov    eax,ebp
c0008074:	e8 42 9a ff ff       	call   c0001abb <st_dword>
c0008079:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000807d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008081:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008085:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008089:	39 ce                	cmp    esi,ecx
c000808b:	76 02                	jbe    c000808f <f_mkfs+0xf83>
c000808d:	89 ce                	mov    esi,ecx
c000808f:	83 ec 0c             	sub    esp,0xc
c0008092:	56                   	push   esi
c0008093:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008097:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809b:	55                   	push   ebp
c000809c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a0:	e8 6b 99 ff ff       	call   c0001a10 <disk_write>
c00080a5:	83 c4 20             	add    esp,0x20
c00080a8:	85 c0                	test   eax,eax
c00080aa:	0f 85 09 01 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00080b0:	31 d2                	xor    edx,edx
c00080b2:	b9 00 02 00 00       	mov    ecx,0x200
c00080b7:	89 e8                	mov    eax,ebp
c00080b9:	e8 1b 9a ff ff       	call   c0001ad9 <mem_set>
c00080be:	31 d2                	xor    edx,edx
c00080c0:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080c4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080c8:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080cc:	75 b3                	jne    c0008081 <f_mkfs+0xf75>
c00080ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080d1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080d8:	40                   	inc    eax
c00080d9:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080dd:	0f 87 65 ff ff ff    	ja     c0008048 <f_mkfs+0xf3c>
c00080e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080e8:	74 04                	je     c00080ee <f_mkfs+0xfe2>
c00080ea:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080ee:	89 fb                	mov    ebx,edi
c00080f0:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080f4:	76 04                	jbe    c00080fa <f_mkfs+0xfee>
c00080f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00080fa:	83 ec 0c             	sub    esp,0xc
c00080fd:	53                   	push   ebx
c00080fe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008102:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008106:	55                   	push   ebp
c0008107:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000810b:	e8 00 99 ff ff       	call   c0001a10 <disk_write>
c0008110:	83 c4 20             	add    esp,0x20
c0008113:	85 c0                	test   eax,eax
c0008115:	0f 85 9e 00 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000811b:	31 d2                	xor    edx,edx
c000811d:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008121:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008125:	29 df                	sub    edi,ebx
c0008127:	75 c5                	jne    c00080ee <f_mkfs+0xfe2>
c0008129:	b1 0c                	mov    cl,0xc
c000812b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008130:	74 1d                	je     c000814f <f_mkfs+0x1043>
c0008132:	b8 ff ff 00 00       	mov    eax,0xffff
c0008137:	b1 06                	mov    cl,0x6
c0008139:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000813d:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008141:	72 0c                	jb     c000814f <f_mkfs+0x1043>
c0008143:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008148:	0f 94 c1             	sete   cl
c000814b:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000814f:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008154:	75 4c                	jne    c00081a2 <f_mkfs+0x1096>
c0008156:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000815a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000815e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008165:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000816c:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008177:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008182:	83 ec 0c             	sub    esp,0xc
c0008185:	0f b6 c9             	movzx  ecx,cl
c0008188:	55                   	push   ebp
c0008189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000818d:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008194:	e8 58 c2 ff ff       	call   c00043f1 <create_partition>
c0008199:	83 c4 10             	add    esp,0x10
c000819c:	89 c3                	mov    ebx,eax
c000819e:	85 c0                	test   eax,eax
c00081a0:	75 34                	jne    c00081d6 <f_mkfs+0x10ca>
c00081a2:	50                   	push   eax
c00081a3:	31 db                	xor    ebx,ebx
c00081a5:	6a 00                	push   0x0
c00081a7:	6a 00                	push   0x0
c00081a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ad:	e8 74 98 ff ff       	call   c0001a26 <disk_ioctl>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	85 c0                	test   eax,eax
c00081b7:	74 1d                	je     c00081d6 <f_mkfs+0x10ca>
c00081b9:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081c1:	75 0c                	jne    c00081cf <f_mkfs+0x10c3>
c00081c3:	83 ec 0c             	sub    esp,0xc
c00081c6:	55                   	push   ebp
c00081c7:	e8 75 00 00 00       	call   c0008241 <ff_memfree>
c00081cc:	83 c4 10             	add    esp,0x10
c00081cf:	bb 01 00 00 00       	mov    ebx,0x1
c00081d4:	eb 48                	jmp    c000821e <f_mkfs+0x1112>
c00081d6:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081de:	75 3e                	jne    c000821e <f_mkfs+0x1112>
c00081e0:	83 ec 0c             	sub    esp,0xc
c00081e3:	55                   	push   ebp
c00081e4:	e8 58 00 00 00       	call   c0008241 <ff_memfree>
c00081e9:	83 c4 10             	add    esp,0x10
c00081ec:	eb 30                	jmp    c000821e <f_mkfs+0x1112>
c00081ee:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081f3:	0f 85 eb fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd8>
c00081f9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081fd:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008203:	0f 86 b8 f9 ff ff    	jbe    c0007bc1 <f_mkfs+0xab5>
c0008209:	e9 bf fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000820e:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008213:	0f 85 c0 fa ff ff    	jne    c0007cd9 <f_mkfs+0xbcd>
c0008219:	e9 af fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000821e:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008224:	89 d8                	mov    eax,ebx
c0008226:	5b                   	pop    ebx
c0008227:	5e                   	pop    esi
c0008228:	5f                   	pop    edi
c0008229:	5d                   	pop    ebp
c000822a:	c3                   	ret    

c000822b <ff_memalloc>:
c000822b:	83 ec 0c             	sub    esp,0xc
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008235:	e8 99 3d 00 00       	call   c000bfd3 <malloc>
c000823a:	83 c4 10             	add    esp,0x10
c000823d:	83 c4 0c             	add    esp,0xc
c0008240:	c3                   	ret    

c0008241 <ff_memfree>:
c0008241:	83 ec 0c             	sub    esp,0xc
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824b:	e8 93 3d 00 00       	call   c000bfe3 <free>
c0008250:	83 c4 10             	add    esp,0x10
c0008253:	90                   	nop
c0008254:	83 c4 0c             	add    esp,0xc
c0008257:	c3                   	ret    

c0008258 <ff_uni2oem>:
c0008258:	83 ec 14             	sub    esp,0x14
c000825b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000825f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008263:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000826a:	c7 44 24 0c 40 07 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020740
c0008272:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008277:	77 0b                	ja     c0008284 <ff_uni2oem+0x2c>
c0008279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000827d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008282:	eb 61                	jmp    c00082e5 <ff_uni2oem+0x8d>
c0008284:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000828c:	77 57                	ja     c00082e5 <ff_uni2oem+0x8d>
c000828e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008294:	75 4f                	jne    c00082e5 <ff_uni2oem+0x8d>
c0008296:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000829d:	eb 0b                	jmp    c00082aa <ff_uni2oem+0x52>
c000829f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082a4:	40                   	inc    eax
c00082a5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082aa:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b0:	77 21                	ja     c00082d3 <ff_uni2oem+0x7b>
c00082b2:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082b7:	25 ff ff 00 00       	and    eax,0xffff
c00082bc:	8d 14 00             	lea    edx,[eax+eax*1]
c00082bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082c8:	25 ff ff 00 00       	and    eax,0xffff
c00082cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d1:	75 cc                	jne    c000829f <ff_uni2oem+0x47>
c00082d3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082d8:	83 e8 80             	sub    eax,0xffffff80
c00082db:	25 ff 00 00 00       	and    eax,0xff
c00082e0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ea:	83 c4 14             	add    esp,0x14
c00082ed:	c3                   	ret    

c00082ee <ff_oem2uni>:
c00082ee:	83 ec 18             	sub    esp,0x18
c00082f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f9:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00082fe:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008302:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008309:	c7 44 24 10 40 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020740
c0008311:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008317:	77 0b                	ja     c0008324 <ff_oem2uni+0x36>
c0008319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000831d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008322:	eb 30                	jmp    c0008354 <ff_oem2uni+0x66>
c0008324:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832a:	75 28                	jne    c0008354 <ff_oem2uni+0x66>
c000832c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008333:	77 1f                	ja     c0008354 <ff_oem2uni+0x66>
c0008335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008339:	25 ff ff 00 00       	and    eax,0xffff
c000833e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008343:	8d 14 00             	lea    edx,[eax+eax*1]
c0008346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834a:	01 d0                	add    eax,edx
c000834c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000834f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008359:	83 c4 18             	add    esp,0x18
c000835c:	c3                   	ret    

c000835d <ff_wtoupper>:
c000835d:	83 ec 10             	sub    esp,0x10
c0008360:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008368:	0f 87 62 01 00 00    	ja     c00084d0 <ff_wtoupper+0x173>
c000836e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008372:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008377:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000837e:	77 07                	ja     c0008387 <ff_wtoupper+0x2a>
c0008380:	b8 40 05 02 c0       	mov    eax,0xc0020540
c0008385:	eb 05                	jmp    c000838c <ff_wtoupper+0x2f>
c0008387:	b8 80 04 02 c0       	mov    eax,0xc0020480
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008394:	8d 50 02             	lea    edx,[eax+0x2]
c0008397:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083a9:	0f 84 13 01 00 00    	je     c00084c2 <ff_wtoupper+0x165>
c00083af:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083b9:	0f 82 03 01 00 00    	jb     c00084c2 <ff_wtoupper+0x165>
c00083bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c3:	8d 50 02             	lea    edx,[eax+0x2]
c00083c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d7:	66 c1 e8 08          	shr    ax,0x8
c00083db:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083ec:	31 d2                	xor    edx,edx
c00083ee:	66 89 c2             	mov    dx,ax
c00083f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083f5:	31 c9                	xor    ecx,ecx
c00083f7:	66 89 c1             	mov    cx,ax
c00083fa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ff:	25 ff ff 00 00       	and    eax,0xffff
c0008404:	01 c8                	add    eax,ecx
c0008406:	39 c2                	cmp    edx,eax
c0008408:	0f 8d 92 00 00 00    	jge    c00084a0 <ff_wtoupper+0x143>
c000840e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008412:	25 ff ff 00 00       	and    eax,0xffff
c0008417:	83 f8 08             	cmp    eax,0x8
c000841a:	0f 87 a1 00 00 00    	ja     c00084c1 <ff_wtoupper+0x164>
c0008420:	8b 04 85 40 04 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfbc0]
c0008427:	ff e0                	jmp    eax
c0008429:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000842e:	31 d2                	xor    edx,edx
c0008430:	66 89 c2             	mov    dx,ax
c0008433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008437:	25 ff ff 00 00       	and    eax,0xffff
c000843c:	29 c2                	sub    edx,eax
c000843e:	89 d0                	mov    eax,edx
c0008440:	8d 14 00             	lea    edx,[eax+eax*1]
c0008443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008447:	01 d0                	add    eax,edx
c0008449:	66 8b 00             	mov    ax,WORD PTR [eax]
c000844c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008451:	eb 4b                	jmp    c000849e <ff_wtoupper+0x141>
c0008453:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008458:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000845c:	83 e0 01             	and    eax,0x1
c000845f:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008464:	eb 38                	jmp    c000849e <ff_wtoupper+0x141>
c0008466:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000846c:	eb 30                	jmp    c000849e <ff_wtoupper+0x141>
c000846e:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008474:	eb 28                	jmp    c000849e <ff_wtoupper+0x141>
c0008476:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000847c:	eb 20                	jmp    c000849e <ff_wtoupper+0x141>
c000847e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008484:	eb 18                	jmp    c000849e <ff_wtoupper+0x141>
c0008486:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000848c:	eb 10                	jmp    c000849e <ff_wtoupper+0x141>
c000848e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008494:	eb 08                	jmp    c000849e <ff_wtoupper+0x141>
c0008496:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000849d:	90                   	nop
c000849e:	eb 21                	jmp    c00084c1 <ff_wtoupper+0x164>
c00084a0:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084a6:	0f 85 e4 fe ff ff    	jne    c0008390 <ff_wtoupper+0x33>
c00084ac:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084b1:	25 ff ff 00 00       	and    eax,0xffff
c00084b6:	01 c0                	add    eax,eax
c00084b8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084bc:	e9 cf fe ff ff       	jmp    c0008390 <ff_wtoupper+0x33>
c00084c1:	90                   	nop
c00084c2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084c7:	25 ff ff 00 00       	and    eax,0xffff
c00084cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	c3                   	ret    

c00084d8 <is_bad_src_ratio>:
c00084d8:	83 ec 0c             	sub    esp,0xc
c00084db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084df:	89 04 24             	mov    DWORD PTR [esp],eax
c00084e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084ea:	dd 04 24             	fld    QWORD PTR [esp]
c00084ed:	dd 05 00 0d 02 c0    	fld    QWORD PTR ds:0xc0020d00
c00084f3:	de d9                	fcompp 
c00084f5:	df e0                	fnstsw ax
c00084f7:	f6 c4 45             	test   ah,0x45
c00084fa:	74 10                	je     c000850c <is_bad_src_ratio+0x34>
c00084fc:	dd 04 24             	fld    QWORD PTR [esp]
c00084ff:	dc 1d 08 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d08
c0008505:	df e0                	fnstsw ax
c0008507:	f6 c4 45             	test   ah,0x45
c000850a:	75 07                	jne    c0008513 <is_bad_src_ratio+0x3b>
c000850c:	b8 01 00 00 00       	mov    eax,0x1
c0008511:	eb 05                	jmp    c0008518 <is_bad_src_ratio+0x40>
c0008513:	b8 00 00 00 00       	mov    eax,0x0
c0008518:	83 c4 0c             	add    esp,0xc
c000851b:	c3                   	ret    

c000851c <psrc_set_converter>:
c000851c:	56                   	push   esi
c000851d:	89 d6                	mov    esi,edx
c000851f:	53                   	push   ebx
c0008520:	89 c3                	mov    ebx,eax
c0008522:	83 ec 0c             	sub    esp,0xc
c0008525:	52                   	push   edx
c0008526:	50                   	push   eax
c0008527:	e8 21 24 00 00       	call   c000a94d <sinc_set_converter>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	85 c0                	test   eax,eax
c0008531:	74 25                	je     c0008558 <psrc_set_converter+0x3c>
c0008533:	50                   	push   eax
c0008534:	50                   	push   eax
c0008535:	56                   	push   esi
c0008536:	53                   	push   ebx
c0008537:	e8 1c 28 00 00       	call   c000ad58 <zoh_set_converter>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	85 c0                	test   eax,eax
c0008541:	74 15                	je     c0008558 <psrc_set_converter+0x3c>
c0008543:	51                   	push   ecx
c0008544:	51                   	push   ecx
c0008545:	56                   	push   esi
c0008546:	53                   	push   ebx
c0008547:	e8 0c 0a 00 00       	call   c0008f58 <linear_set_converter>
c000854c:	83 c4 10             	add    esp,0x10
c000854f:	ba 0a 00 00 00       	mov    edx,0xa
c0008554:	85 c0                	test   eax,eax
c0008556:	75 02                	jne    c000855a <psrc_set_converter+0x3e>
c0008558:	31 d2                	xor    edx,edx
c000855a:	89 d0                	mov    eax,edx
c000855c:	5a                   	pop    edx
c000855d:	5b                   	pop    ebx
c000855e:	5e                   	pop    esi
c000855f:	c3                   	ret    

c0008560 <src_delete>:
c0008560:	53                   	push   ebx
c0008561:	83 ec 08             	sub    esp,0x8
c0008564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008568:	85 db                	test   ebx,ebx
c000856a:	74 29                	je     c0008595 <src_delete+0x35>
c000856c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000856f:	85 c0                	test   eax,eax
c0008571:	74 0c                	je     c000857f <src_delete+0x1f>
c0008573:	83 ec 0c             	sub    esp,0xc
c0008576:	50                   	push   eax
c0008577:	e8 67 3a 00 00       	call   c000bfe3 <free>
c000857c:	83 c4 10             	add    esp,0x10
c000857f:	50                   	push   eax
c0008580:	6a 3c                	push   0x3c
c0008582:	6a 00                	push   0x0
c0008584:	53                   	push   ebx
c0008585:	e8 30 81 ff ff       	call   c00006ba <memset>
c000858a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000858d:	e8 51 3a 00 00       	call   c000bfe3 <free>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	83 c4 08             	add    esp,0x8
c0008598:	31 c0                	xor    eax,eax
c000859a:	5b                   	pop    ebx
c000859b:	c3                   	ret    

c000859c <src_process>:
c000859c:	56                   	push   esi
c000859d:	53                   	push   ebx
c000859e:	53                   	push   ebx
c000859f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085a7:	85 f6                	test   esi,esi
c00085a9:	0f 84 e2 00 00 00    	je     c0008691 <src_process+0xf5>
c00085af:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085b3:	0f 84 df 00 00 00    	je     c0008698 <src_process+0xfc>
c00085b9:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085bd:	0f 84 d5 00 00 00    	je     c0008698 <src_process+0xfc>
c00085c3:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085ca:	0f 85 cf 00 00 00    	jne    c000869f <src_process+0x103>
c00085d0:	85 db                	test   ebx,ebx
c00085d2:	0f 84 ce 00 00 00    	je     c00086a6 <src_process+0x10a>
c00085d8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085db:	0f 84 cc 00 00 00    	je     c00086ad <src_process+0x111>
c00085e1:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085e5:	0f 84 c2 00 00 00    	je     c00086ad <src_process+0x111>
c00085eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f1:	e8 e2 fe ff ff       	call   c00084d8 <is_bad_src_ratio>
c00085f6:	5a                   	pop    edx
c00085f7:	85 c0                	test   eax,eax
c00085f9:	59                   	pop    ecx
c00085fa:	0f 85 b4 00 00 00    	jne    c00086b4 <src_process+0x118>
c0008600:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008604:	79 07                	jns    c000860d <src_process+0x71>
c0008606:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000860d:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008611:	79 07                	jns    c000861a <src_process+0x7e>
c0008613:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000861a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000861c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000861f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008622:	39 ca                	cmp    edx,ecx
c0008624:	73 0b                	jae    c0008631 <src_process+0x95>
c0008626:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000862a:	8d 04 82             	lea    eax,[edx+eax*4]
c000862d:	39 c1                	cmp    ecx,eax
c000862f:	eb 09                	jmp    c000863a <src_process+0x9e>
c0008631:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008635:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008638:	39 c2                	cmp    edx,eax
c000863a:	72 7f                	jb     c00086bb <src_process+0x11f>
c000863c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008643:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864a:	d9 05 20 0d 02 c0    	fld    DWORD PTR ds:0xc0020d20
c0008650:	dc 1e                	fcomp  QWORD PTR [esi]
c0008652:	df e0                	fnstsw ax
c0008654:	9e                   	sahf   
c0008655:	76 05                	jbe    c000865c <src_process+0xc0>
c0008657:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c000865a:	dd 1e                	fstp   QWORD PTR [esi]
c000865c:	dd 06                	fld    QWORD PTR [esi]
c000865e:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008661:	83 ec 10             	sub    esp,0x10
c0008664:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008667:	e8 44 6f 01 00       	call   c001f5b0 <fabs>
c000866c:	83 c4 10             	add    esp,0x10
c000866f:	dd 05 10 0d 02 c0    	fld    QWORD PTR ds:0xc0020d10
c0008675:	de d9                	fcompp 
c0008677:	df e0                	fnstsw ax
c0008679:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000867d:	9e                   	sahf   
c000867e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008682:	76 05                	jbe    c0008689 <src_process+0xed>
c0008684:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008687:	eb 03                	jmp    c000868c <src_process+0xf0>
c0008689:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000868c:	59                   	pop    ecx
c000868d:	5b                   	pop    ebx
c000868e:	5e                   	pop    esi
c000868f:	ff e0                	jmp    eax
c0008691:	b8 02 00 00 00       	mov    eax,0x2
c0008696:	eb 28                	jmp    c00086c0 <src_process+0x124>
c0008698:	b8 07 00 00 00       	mov    eax,0x7
c000869d:	eb 21                	jmp    c00086c0 <src_process+0x124>
c000869f:	b8 12 00 00 00       	mov    eax,0x12
c00086a4:	eb 1a                	jmp    c00086c0 <src_process+0x124>
c00086a6:	b8 03 00 00 00       	mov    eax,0x3
c00086ab:	eb 13                	jmp    c00086c0 <src_process+0x124>
c00086ad:	b8 04 00 00 00       	mov    eax,0x4
c00086b2:	eb 0c                	jmp    c00086c0 <src_process+0x124>
c00086b4:	b8 06 00 00 00       	mov    eax,0x6
c00086b9:	eb 05                	jmp    c00086c0 <src_process+0x124>
c00086bb:	b8 10 00 00 00       	mov    eax,0x10
c00086c0:	5a                   	pop    edx
c00086c1:	5b                   	pop    ebx
c00086c2:	5e                   	pop    esi
c00086c3:	c3                   	ret    

c00086c4 <src_callback_read>:
c00086c4:	55                   	push   ebp
c00086c5:	57                   	push   edi
c00086c6:	56                   	push   esi
c00086c7:	53                   	push   ebx
c00086c8:	83 ec 4c             	sub    esp,0x4c
c00086cb:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086cf:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086d3:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086d7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086db:	85 ff                	test   edi,edi
c00086dd:	0f 8e 36 01 00 00    	jle    c0008819 <src_callback_read+0x155>
c00086e3:	85 db                	test   ebx,ebx
c00086e5:	0f 84 2e 01 00 00    	je     c0008819 <src_callback_read+0x155>
c00086eb:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086f2:	74 0c                	je     c0008700 <src_callback_read+0x3c>
c00086f4:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00086fb:	e9 19 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008700:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008704:	75 0c                	jne    c0008712 <src_callback_read+0x4e>
c0008706:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000870d:	e9 07 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008712:	51                   	push   ecx
c0008713:	6a 24                	push   0x24
c0008715:	6a 00                	push   0x0
c0008717:	8d 44 24 28          	lea    eax,[esp+0x28]
c000871b:	50                   	push   eax
c000871c:	e8 99 7f ff ff       	call   c00006ba <memset>
c0008721:	5e                   	pop    esi
c0008722:	5d                   	pop    ebp
c0008723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000872b:	e8 a8 fd ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008730:	83 c4 10             	add    esp,0x10
c0008733:	85 c0                	test   eax,eax
c0008735:	74 0c                	je     c0008743 <src_callback_read+0x7f>
c0008737:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c000873e:	e9 d6 00 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008743:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008747:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000874b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000874f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008753:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000875a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000875d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008761:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008765:	31 f6                	xor    esi,esi
c0008767:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000876c:	75 30                	jne    c000879e <src_callback_read+0xda>
c000876e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008776:	52                   	push   edx
c0008777:	52                   	push   edx
c0008778:	8d 44 24 20          	lea    eax,[esp+0x20]
c000877c:	50                   	push   eax
c000877d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008780:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008783:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008787:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000878b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000878f:	83 c4 10             	add    esp,0x10
c0008792:	85 c0                	test   eax,eax
c0008794:	75 08                	jne    c000879e <src_callback_read+0xda>
c0008796:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000879e:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087a5:	50                   	push   eax
c00087a6:	50                   	push   eax
c00087a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087ab:	50                   	push   eax
c00087ac:	53                   	push   ebx
c00087ad:	e8 ea fd ff ff       	call   c000859c <src_process>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087bc:	85 c0                	test   eax,eax
c00087be:	75 42                	jne    c0008802 <src_callback_read+0x13e>
c00087c0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087c7:	89 e9                	mov    ecx,ebp
c00087c9:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087cd:	0f af ca             	imul   ecx,edx
c00087d0:	c1 e1 02             	shl    ecx,0x2
c00087d3:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087db:	0f af d1             	imul   edx,ecx
c00087de:	c1 e2 02             	shl    edx,0x2
c00087e1:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087e5:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087e9:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087ec:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087f1:	75 04                	jne    c00087f7 <src_callback_read+0x133>
c00087f3:	85 c9                	test   ecx,ecx
c00087f5:	74 0b                	je     c0008802 <src_callback_read+0x13e>
c00087f7:	39 d7                	cmp    edi,edx
c00087f9:	7e 09                	jle    c0008804 <src_callback_read+0x140>
c00087fb:	89 d6                	mov    esi,edx
c00087fd:	e9 65 ff ff ff       	jmp    c0008767 <src_callback_read+0xa3>
c0008802:	89 f2                	mov    edx,esi
c0008804:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008808:	85 c0                	test   eax,eax
c000880a:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000880d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008811:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008814:	74 05                	je     c000881b <src_callback_read+0x157>
c0008816:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008819:	31 d2                	xor    edx,edx
c000881b:	83 c4 4c             	add    esp,0x4c
c000881e:	89 d0                	mov    eax,edx
c0008820:	5b                   	pop    ebx
c0008821:	5e                   	pop    esi
c0008822:	5f                   	pop    edi
c0008823:	5d                   	pop    ebp
c0008824:	c3                   	ret    

c0008825 <src_set_ratio>:
c0008825:	53                   	push   ebx
c0008826:	b8 02 00 00 00       	mov    eax,0x2
c000882b:	83 ec 08             	sub    esp,0x8
c000882e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008832:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008836:	85 db                	test   ebx,ebx
c0008838:	74 33                	je     c000886d <src_set_ratio+0x48>
c000883a:	b8 07 00 00 00       	mov    eax,0x7
c000883f:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008843:	74 2c                	je     c0008871 <src_set_ratio+0x4c>
c0008845:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008849:	74 2a                	je     c0008875 <src_set_ratio+0x50>
c000884b:	50                   	push   eax
c000884c:	50                   	push   eax
c000884d:	dd 14 24             	fst    QWORD PTR [esp]
c0008850:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008854:	e8 7f fc ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008859:	5a                   	pop    edx
c000885a:	59                   	pop    ecx
c000885b:	85 c0                	test   eax,eax
c000885d:	75 07                	jne    c0008866 <src_set_ratio+0x41>
c000885f:	dd 04 24             	fld    QWORD PTR [esp]
c0008862:	dd 1b                	fstp   QWORD PTR [ebx]
c0008864:	eb 11                	jmp    c0008877 <src_set_ratio+0x52>
c0008866:	b8 06 00 00 00       	mov    eax,0x6
c000886b:	eb 0a                	jmp    c0008877 <src_set_ratio+0x52>
c000886d:	dd d8                	fstp   st(0)
c000886f:	eb 06                	jmp    c0008877 <src_set_ratio+0x52>
c0008871:	dd d8                	fstp   st(0)
c0008873:	eb 02                	jmp    c0008877 <src_set_ratio+0x52>
c0008875:	dd d8                	fstp   st(0)
c0008877:	83 c4 08             	add    esp,0x8
c000887a:	5b                   	pop    ebx
c000887b:	c3                   	ret    

c000887c <src_get_channels>:
c000887c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008880:	b8 02 00 00 00       	mov    eax,0x2
c0008885:	85 d2                	test   edx,edx
c0008887:	74 14                	je     c000889d <src_get_channels+0x21>
c0008889:	b8 07 00 00 00       	mov    eax,0x7
c000888e:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008892:	74 09                	je     c000889d <src_get_channels+0x21>
c0008894:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008898:	74 03                	je     c000889d <src_get_channels+0x21>
c000889a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000889d:	c3                   	ret    

c000889e <src_reset>:
c000889e:	53                   	push   ebx
c000889f:	b8 02 00 00 00       	mov    eax,0x2
c00088a4:	83 ec 08             	sub    esp,0x8
c00088a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ab:	85 db                	test   ebx,ebx
c00088ad:	74 2e                	je     c00088dd <src_reset+0x3f>
c00088af:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088b2:	85 c0                	test   eax,eax
c00088b4:	74 09                	je     c00088bf <src_reset+0x21>
c00088b6:	83 ec 0c             	sub    esp,0xc
c00088b9:	53                   	push   ebx
c00088ba:	ff d0                	call   eax
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	d9 ee                	fldz   
c00088c1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088c8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088cf:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088d2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088d9:	31 c0                	xor    eax,eax
c00088db:	dd 1b                	fstp   QWORD PTR [ebx]
c00088dd:	83 c4 08             	add    esp,0x8
c00088e0:	5b                   	pop    ebx
c00088e1:	c3                   	ret    

c00088e2 <src_new>:
c00088e2:	57                   	push   edi
c00088e3:	56                   	push   esi
c00088e4:	53                   	push   ebx
c00088e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088e9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088ed:	85 f6                	test   esi,esi
c00088ef:	74 73                	je     c0008964 <src_new+0x82>
c00088f1:	85 ff                	test   edi,edi
c00088f3:	7f 08                	jg     c00088fd <src_new+0x1b>
c00088f5:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00088fb:	eb 1e                	jmp    c000891b <src_new+0x39>
c00088fd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008903:	50                   	push   eax
c0008904:	50                   	push   eax
c0008905:	6a 3c                	push   0x3c
c0008907:	6a 01                	push   0x1
c0008909:	e8 f5 36 00 00       	call   c000c003 <calloc>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	89 c3                	mov    ebx,eax
c0008913:	85 c0                	test   eax,eax
c0008915:	75 10                	jne    c0008927 <src_new+0x45>
c0008917:	85 f6                	test   esi,esi
c0008919:	75 04                	jne    c000891f <src_new+0x3d>
c000891b:	31 db                	xor    ebx,ebx
c000891d:	eb 4b                	jmp    c000896a <src_new+0x88>
c000891f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008925:	eb 43                	jmp    c000896a <src_new+0x88>
c0008927:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000892a:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008931:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008935:	e8 e2 fb ff ff       	call   c000851c <psrc_set_converter>
c000893a:	85 c0                	test   eax,eax
c000893c:	74 18                	je     c0008956 <src_new+0x74>
c000893e:	85 f6                	test   esi,esi
c0008940:	74 06                	je     c0008948 <src_new+0x66>
c0008942:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	53                   	push   ebx
c000894c:	31 db                	xor    ebx,ebx
c000894e:	e8 90 36 00 00       	call   c000bfe3 <free>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	53                   	push   ebx
c000895a:	e8 3f ff ff ff       	call   c000889e <src_reset>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	eb 06                	jmp    c000896a <src_new+0x88>
c0008964:	85 ff                	test   edi,edi
c0008966:	7f 9b                	jg     c0008903 <src_new+0x21>
c0008968:	eb b1                	jmp    c000891b <src_new+0x39>
c000896a:	89 d8                	mov    eax,ebx
c000896c:	5b                   	pop    ebx
c000896d:	5e                   	pop    esi
c000896e:	5f                   	pop    edi
c000896f:	c3                   	ret    

c0008970 <src_callback_new>:
c0008970:	56                   	push   esi
c0008971:	53                   	push   ebx
c0008972:	53                   	push   ebx
c0008973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008977:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897b:	85 f6                	test   esi,esi
c000897d:	75 0e                	jne    c000898d <src_callback_new+0x1d>
c000897f:	31 db                	xor    ebx,ebx
c0008981:	85 c0                	test   eax,eax
c0008983:	74 47                	je     c00089cc <src_callback_new+0x5c>
c0008985:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c000898b:	eb 3f                	jmp    c00089cc <src_callback_new+0x5c>
c000898d:	85 c0                	test   eax,eax
c000898f:	74 06                	je     c0008997 <src_callback_new+0x27>
c0008991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008997:	51                   	push   ecx
c0008998:	50                   	push   eax
c0008999:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000899d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a1:	e8 3c ff ff ff       	call   c00088e2 <src_new>
c00089a6:	83 c4 10             	add    esp,0x10
c00089a9:	89 c3                	mov    ebx,eax
c00089ab:	85 c0                	test   eax,eax
c00089ad:	74 1d                	je     c00089cc <src_callback_new+0x5c>
c00089af:	83 ec 0c             	sub    esp,0xc
c00089b2:	50                   	push   eax
c00089b3:	e8 e6 fe ff ff       	call   c000889e <src_reset>
c00089b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089bc:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089c6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089c9:	83 c4 10             	add    esp,0x10
c00089cc:	5a                   	pop    edx
c00089cd:	89 d8                	mov    eax,ebx
c00089cf:	5b                   	pop    ebx
c00089d0:	5e                   	pop    esi
c00089d1:	c3                   	ret    

c00089d2 <src_get_name>:
c00089d2:	53                   	push   ebx
c00089d3:	83 ec 14             	sub    esp,0x14
c00089d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089da:	53                   	push   ebx
c00089db:	e8 47 1f 00 00       	call   c000a927 <sinc_get_name>
c00089e0:	83 c4 10             	add    esp,0x10
c00089e3:	85 c0                	test   eax,eax
c00089e5:	75 1d                	jne    c0008a04 <src_get_name+0x32>
c00089e7:	83 ec 0c             	sub    esp,0xc
c00089ea:	53                   	push   ebx
c00089eb:	e8 4a 23 00 00       	call   c000ad3a <zoh_get_name>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 0d                	jne    c0008a04 <src_get_name+0x32>
c00089f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089fb:	83 c4 08             	add    esp,0x8
c00089fe:	5b                   	pop    ebx
c00089ff:	e9 36 05 00 00       	jmp    c0008f3a <linear_get_name>
c0008a04:	83 c4 08             	add    esp,0x8
c0008a07:	5b                   	pop    ebx
c0008a08:	c3                   	ret    

c0008a09 <src_get_description>:
c0008a09:	53                   	push   ebx
c0008a0a:	83 ec 14             	sub    esp,0x14
c0008a0d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a11:	53                   	push   ebx
c0008a12:	e8 23 1f 00 00       	call   c000a93a <sinc_get_description>
c0008a17:	83 c4 10             	add    esp,0x10
c0008a1a:	85 c0                	test   eax,eax
c0008a1c:	75 1d                	jne    c0008a3b <src_get_description+0x32>
c0008a1e:	83 ec 0c             	sub    esp,0xc
c0008a21:	53                   	push   ebx
c0008a22:	e8 22 23 00 00       	call   c000ad49 <zoh_get_description>
c0008a27:	83 c4 10             	add    esp,0x10
c0008a2a:	85 c0                	test   eax,eax
c0008a2c:	75 0d                	jne    c0008a3b <src_get_description+0x32>
c0008a2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a32:	83 c4 08             	add    esp,0x8
c0008a35:	5b                   	pop    ebx
c0008a36:	e9 0e 05 00 00       	jmp    c0008f49 <linear_get_description>
c0008a3b:	83 c4 08             	add    esp,0x8
c0008a3e:	5b                   	pop    ebx
c0008a3f:	c3                   	ret    

c0008a40 <src_get_version>:
c0008a40:	b8 40 08 02 c0       	mov    eax,0xc0020840
c0008a45:	c3                   	ret    

c0008a46 <src_is_valid_ratio>:
c0008a46:	50                   	push   eax
c0008a47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4f:	e8 84 fa ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008a54:	85 c0                	test   eax,eax
c0008a56:	0f 94 c0             	sete   al
c0008a59:	0f b6 c0             	movzx  eax,al
c0008a5c:	83 c4 0c             	add    esp,0xc
c0008a5f:	c3                   	ret    

c0008a60 <src_error>:
c0008a60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a64:	31 c0                	xor    eax,eax
c0008a66:	85 d2                	test   edx,edx
c0008a68:	74 03                	je     c0008a6d <src_error+0xd>
c0008a6a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a6d:	c3                   	ret    

c0008a6e <src_strerror>:
c0008a6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a72:	31 c0                	xor    eax,eax
c0008a74:	83 fa 17             	cmp    edx,0x17
c0008a77:	77 07                	ja     c0008a80 <src_strerror+0x12>
c0008a79:	8b 04 95 a0 0c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf360]
c0008a80:	c3                   	ret    

c0008a81 <src_simple>:
c0008a81:	56                   	push   esi
c0008a82:	53                   	push   ebx
c0008a83:	83 ec 18             	sub    esp,0x18
c0008a86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a8a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a8e:	50                   	push   eax
c0008a8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a97:	e8 46 fe ff ff       	call   c00088e2 <src_new>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 06                	jne    c0008aa9 <src_simple+0x28>
c0008aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aa7:	eb 25                	jmp    c0008ace <src_simple+0x4d>
c0008aa9:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ab0:	89 c3                	mov    ebx,eax
c0008ab2:	50                   	push   eax
c0008ab3:	50                   	push   eax
c0008ab4:	56                   	push   esi
c0008ab5:	53                   	push   ebx
c0008ab6:	e8 e1 fa ff ff       	call   c000859c <src_process>
c0008abb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008abe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac2:	e8 99 fa ff ff       	call   c0008560 <src_delete>
c0008ac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008acb:	83 c4 10             	add    esp,0x10
c0008ace:	83 c4 14             	add    esp,0x14
c0008ad1:	5b                   	pop    ebx
c0008ad2:	5e                   	pop    esi
c0008ad3:	c3                   	ret    

c0008ad4 <src_short_to_float_array>:
c0008ad4:	83 ec 0c             	sub    esp,0xc
c0008ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008adb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008adf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ae3:	85 c0                	test   eax,eax
c0008ae5:	74 0f                	je     c0008af6 <src_short_to_float_array+0x22>
c0008ae7:	48                   	dec    eax
c0008ae8:	d9 05 24 0d 02 c0    	fld    DWORD PTR ds:0xc0020d24
c0008aee:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008af1:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008af4:	eb ed                	jmp    c0008ae3 <src_short_to_float_array+0xf>
c0008af6:	83 c4 0c             	add    esp,0xc
c0008af9:	c3                   	ret    

c0008afa <src_float_to_short_array>:
c0008afa:	56                   	push   esi
c0008afb:	53                   	push   ebx
c0008afc:	52                   	push   edx
c0008afd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b05:	85 db                	test   ebx,ebx
c0008b07:	74 51                	je     c0008b5a <src_float_to_short_array+0x60>
c0008b09:	4b                   	dec    ebx
c0008b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0e:	d9 05 28 0d 02 c0    	fld    DWORD PTR ds:0xc0020d28
c0008b14:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b17:	dc 15 18 0d 02 c0    	fcom   QWORD PTR ds:0xc0020d18
c0008b1d:	df e0                	fnstsw ax
c0008b1f:	9e                   	sahf   
c0008b20:	72 0a                	jb     c0008b2c <src_float_to_short_array+0x32>
c0008b22:	dd d8                	fstp   st(0)
c0008b24:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b2a:	eb d9                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b2c:	d9 05 2c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d2c
c0008b32:	d8 d9                	fcomp  st(1)
c0008b34:	df e0                	fnstsw ax
c0008b36:	9e                   	sahf   
c0008b37:	72 0a                	jb     c0008b43 <src_float_to_short_array+0x49>
c0008b39:	dd d8                	fstp   st(0)
c0008b3b:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b41:	eb c2                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b43:	83 ec 10             	sub    esp,0x10
c0008b46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b49:	e8 82 6a 01 00       	call   c001f5d0 <lrint>
c0008b4e:	83 c4 10             	add    esp,0x10
c0008b51:	c1 f8 10             	sar    eax,0x10
c0008b54:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b58:	eb ab                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b5a:	58                   	pop    eax
c0008b5b:	5b                   	pop    ebx
c0008b5c:	5e                   	pop    esi
c0008b5d:	c3                   	ret    

c0008b5e <src_int_to_float_array>:
c0008b5e:	83 ec 0c             	sub    esp,0xc
c0008b61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b65:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b6d:	85 c0                	test   eax,eax
c0008b6f:	74 0f                	je     c0008b80 <src_int_to_float_array+0x22>
c0008b71:	48                   	dec    eax
c0008b72:	d9 05 30 0d 02 c0    	fld    DWORD PTR ds:0xc0020d30
c0008b78:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b7b:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b7e:	eb ed                	jmp    c0008b6d <src_int_to_float_array+0xf>
c0008b80:	83 c4 0c             	add    esp,0xc
c0008b83:	c3                   	ret    

c0008b84 <src_float_to_int_array>:
c0008b84:	56                   	push   esi
c0008b85:	53                   	push   ebx
c0008b86:	52                   	push   edx
c0008b87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b8f:	85 db                	test   ebx,ebx
c0008b91:	74 4f                	je     c0008be2 <src_float_to_int_array+0x5e>
c0008b93:	4b                   	dec    ebx
c0008b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b98:	d9 05 28 0d 02 c0    	fld    DWORD PTR ds:0xc0020d28
c0008b9e:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008ba1:	dc 15 18 0d 02 c0    	fcom   QWORD PTR ds:0xc0020d18
c0008ba7:	df e0                	fnstsw ax
c0008ba9:	9e                   	sahf   
c0008baa:	72 0b                	jb     c0008bb7 <src_float_to_int_array+0x33>
c0008bac:	dd d8                	fstp   st(0)
c0008bae:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bb5:	eb d8                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bb7:	d9 05 2c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d2c
c0008bbd:	d8 d9                	fcomp  st(1)
c0008bbf:	df e0                	fnstsw ax
c0008bc1:	9e                   	sahf   
c0008bc2:	72 0b                	jb     c0008bcf <src_float_to_int_array+0x4b>
c0008bc4:	dd d8                	fstp   st(0)
c0008bc6:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bcd:	eb c0                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bcf:	83 ec 10             	sub    esp,0x10
c0008bd2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bd5:	e8 f6 69 01 00       	call   c001f5d0 <lrint>
c0008bda:	83 c4 10             	add    esp,0x10
c0008bdd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008be0:	eb ad                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008be2:	58                   	pop    eax
c0008be3:	5b                   	pop    ebx
c0008be4:	5e                   	pop    esi
c0008be5:	c3                   	ret    

c0008be6 <is_bad_src_ratio>:
c0008be6:	83 ec 0c             	sub    esp,0xc
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bf8:	dd 04 24             	fld    QWORD PTR [esp]
c0008bfb:	dd 05 00 0d 02 c0    	fld    QWORD PTR ds:0xc0020d00
c0008c01:	de d9                	fcompp 
c0008c03:	df e0                	fnstsw ax
c0008c05:	f6 c4 45             	test   ah,0x45
c0008c08:	74 10                	je     c0008c1a <is_bad_src_ratio+0x34>
c0008c0a:	dd 04 24             	fld    QWORD PTR [esp]
c0008c0d:	dc 1d 08 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d08
c0008c13:	df e0                	fnstsw ax
c0008c15:	f6 c4 45             	test   ah,0x45
c0008c18:	75 07                	jne    c0008c21 <is_bad_src_ratio+0x3b>
c0008c1a:	b8 01 00 00 00       	mov    eax,0x1
c0008c1f:	eb 05                	jmp    c0008c26 <is_bad_src_ratio+0x40>
c0008c21:	b8 00 00 00 00       	mov    eax,0x0
c0008c26:	83 c4 0c             	add    esp,0xc
c0008c29:	c3                   	ret    

c0008c2a <fmod_one>:
c0008c2a:	83 ec 2c             	sub    esp,0x2c
c0008c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c3d:	83 ec 08             	sub    esp,0x8
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c48:	e8 83 69 01 00       	call   c001f5d0 <lrint>
c0008c4d:	83 c4 10             	add    esp,0x10
c0008c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c54:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c58:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c5c:	de e1                	fsubrp st(1),st
c0008c5e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c62:	d9 ee                	fldz   
c0008c64:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c68:	df e0                	fnstsw ax
c0008c6a:	f6 c4 45             	test   ah,0x45
c0008c6d:	75 0a                	jne    c0008c79 <fmod_one+0x4f>
c0008c6f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c73:	d9 e8                	fld1   
c0008c75:	de c1                	faddp  st(1),st
c0008c77:	eb 04                	jmp    c0008c7d <fmod_one+0x53>
c0008c79:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c7d:	83 c4 2c             	add    esp,0x2c
c0008c80:	c3                   	ret    

c0008c81 <linear_vari_process>:
c0008c81:	55                   	push   ebp
c0008c82:	57                   	push   edi
c0008c83:	56                   	push   esi
c0008c84:	53                   	push   ebx
c0008c85:	83 ec 2c             	sub    esp,0x2c
c0008c88:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c8c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c90:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c98:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c9c:	0f 8e 5a 02 00 00    	jle    c0008efc <linear_vari_process+0x27b>
c0008ca2:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008ca5:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cad:	85 db                	test   ebx,ebx
c0008caf:	0f 84 47 02 00 00    	je     c0008efc <linear_vari_process+0x27b>
c0008cb5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cb8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cbc:	74 19                	je     c0008cd7 <linear_vari_process+0x56>
c0008cbe:	31 d2                	xor    edx,edx
c0008cc0:	39 c2                	cmp    edx,eax
c0008cc2:	7d 0c                	jge    c0008cd0 <linear_vari_process+0x4f>
c0008cc4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cc6:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cc9:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ccd:	42                   	inc    edx
c0008cce:	eb f0                	jmp    c0008cc0 <linear_vari_process+0x3f>
c0008cd0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cd7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cda:	0f af d0             	imul   edx,eax
c0008cdd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ce0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008ce4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008ceb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008cee:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cf5:	dd 07                	fld    QWORD PTR [edi]
c0008cf7:	dd 14 24             	fst    QWORD PTR [esp]
c0008cfa:	50                   	push   eax
c0008cfb:	50                   	push   eax
c0008cfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cff:	e8 e2 fe ff ff       	call   c0008be6 <is_bad_src_ratio>
c0008d04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d08:	5a                   	pop    edx
c0008d09:	59                   	pop    ecx
c0008d0a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d0f:	0f 85 df 01 00 00    	jne    c0008ef4 <linear_vari_process+0x273>
c0008d15:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d18:	d9 e8                	fld1   
c0008d1a:	d8 d1                	fcom   st(1)
c0008d1c:	df e0                	fnstsw ax
c0008d1e:	9e                   	sahf   
c0008d1f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d23:	0f 86 97 00 00 00    	jbe    c0008dc0 <linear_vari_process+0x13f>
c0008d29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d2c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d2f:	0f 8d 8b 00 00 00    	jge    c0008dc0 <linear_vari_process+0x13f>
c0008d35:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d39:	d8 c1                	fadd   st,st(1)
c0008d3b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d3e:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d41:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d44:	df e0                	fnstsw ax
c0008d46:	9e                   	sahf   
c0008d47:	73 77                	jae    c0008dc0 <linear_vari_process+0x13f>
c0008d49:	85 d2                	test   edx,edx
c0008d4b:	7e 36                	jle    c0008d83 <linear_vari_process+0x102>
c0008d4d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d51:	dd 07                	fld    QWORD PTR [edi]
c0008d53:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d56:	83 ec 10             	sub    esp,0x10
c0008d59:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d5c:	e8 4f 68 01 00       	call   c001f5b0 <fabs>
c0008d61:	83 c4 10             	add    esp,0x10
c0008d64:	dc 1d 78 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d78
c0008d6a:	df e0                	fnstsw ax
c0008d6c:	9e                   	sahf   
c0008d6d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d71:	76 10                	jbe    c0008d83 <linear_vari_process+0x102>
c0008d73:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d76:	dc 27                	fsub   QWORD PTR [edi]
c0008d78:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d7b:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d7e:	dc 07                	fadd   QWORD PTR [edi]
c0008d80:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d83:	31 c0                	xor    eax,eax
c0008d85:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d88:	7e 1f                	jle    c0008da9 <linear_vari_process+0x128>
c0008d8a:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d8c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d8f:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d93:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d97:	d8 e1                	fsub   st,st(1)
c0008d99:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d9c:	40                   	inc    eax
c0008d9d:	d8 ca                	fmul   st,st(2)
c0008d9f:	de c1                	faddp  st(1),st
c0008da1:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008da4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008da7:	eb dc                	jmp    c0008d85 <linear_vari_process+0x104>
c0008da9:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dad:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008db0:	de c1                	faddp  st(1),st
c0008db2:	e9 61 ff ff ff       	jmp    c0008d18 <linear_vari_process+0x97>
c0008db7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dbb:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dbe:	de c1                	faddp  st(1),st
c0008dc0:	83 ec 10             	sub    esp,0x10
c0008dc3:	dd 14 24             	fst    QWORD PTR [esp]
c0008dc6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dca:	e8 5b fe ff ff       	call   c0008c2a <fmod_one>
c0008dcf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008dd2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008dd6:	d8 e1                	fsub   st,st(1)
c0008dd8:	d9 c9                	fxch   st(1)
c0008dda:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dde:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008de1:	e8 ea 67 01 00       	call   c001f5d0 <lrint>
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	0f af e8             	imul   ebp,eax
c0008dec:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008def:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008df2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008df6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008df9:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008dfc:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008dff:	0f 8d 95 00 00 00    	jge    c0008e9a <linear_vari_process+0x219>
c0008e05:	d9 c0                	fld    st(0)
c0008e07:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e0e:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e12:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e16:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e1a:	de d9                	fcompp 
c0008e1c:	df e0                	fnstsw ax
c0008e1e:	9e                   	sahf   
c0008e1f:	76 79                	jbe    c0008e9a <linear_vari_process+0x219>
c0008e21:	85 ed                	test   ebp,ebp
c0008e23:	7e 36                	jle    c0008e5b <linear_vari_process+0x1da>
c0008e25:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e29:	dd 07                	fld    QWORD PTR [edi]
c0008e2b:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e2e:	83 ec 10             	sub    esp,0x10
c0008e31:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e34:	e8 77 67 01 00       	call   c001f5b0 <fabs>
c0008e39:	83 c4 10             	add    esp,0x10
c0008e3c:	dc 1d 78 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d78
c0008e42:	df e0                	fnstsw ax
c0008e44:	9e                   	sahf   
c0008e45:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e49:	76 10                	jbe    c0008e5b <linear_vari_process+0x1da>
c0008e4b:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e4e:	dc 27                	fsub   QWORD PTR [edi]
c0008e50:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e53:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e56:	dc 07                	fadd   QWORD PTR [edi]
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	31 c0                	xor    eax,eax
c0008e5d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e60:	39 c2                	cmp    edx,eax
c0008e62:	0f 8e 4f ff ff ff    	jle    c0008db7 <linear_vari_process+0x136>
c0008e68:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e6a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e6d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e71:	89 e9                	mov    ecx,ebp
c0008e73:	29 d1                	sub    ecx,edx
c0008e75:	01 c5                	add    ebp,eax
c0008e77:	89 ca                	mov    edx,ecx
c0008e79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e7d:	01 c2                	add    edx,eax
c0008e7f:	40                   	inc    eax
c0008e80:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e83:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e86:	d8 e1                	fsub   st,st(1)
c0008e88:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e8b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e8e:	d8 ca                	fmul   st,st(2)
c0008e90:	de c1                	faddp  st(1),st
c0008e92:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e95:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e98:	eb c3                	jmp    c0008e5d <linear_vari_process+0x1dc>
c0008e9a:	39 d1                	cmp    ecx,edx
c0008e9c:	7d 13                	jge    c0008eb1 <linear_vari_process+0x230>
c0008e9e:	89 d0                	mov    eax,edx
c0008ea0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ea3:	29 c8                	sub    eax,ecx
c0008ea5:	99                   	cdq    
c0008ea6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ead:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008eb1:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008eb4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008eb7:	85 c0                	test   eax,eax
c0008eb9:	7f 1b                	jg     c0008ed6 <linear_vari_process+0x255>
c0008ebb:	dd 04 24             	fld    QWORD PTR [esp]
c0008ebe:	dd 1f                	fstp   QWORD PTR [edi]
c0008ec0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ec3:	99                   	cdq    
c0008ec4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008eca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ecd:	99                   	cdq    
c0008ece:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ed1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ed4:	eb 26                	jmp    c0008efc <linear_vari_process+0x27b>
c0008ed6:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ed9:	31 d2                	xor    edx,edx
c0008edb:	29 c8                	sub    eax,ecx
c0008edd:	c1 e0 02             	shl    eax,0x2
c0008ee0:	39 d1                	cmp    ecx,edx
c0008ee2:	7e d7                	jle    c0008ebb <linear_vari_process+0x23a>
c0008ee4:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008ee6:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008eea:	83 c0 04             	add    eax,0x4
c0008eed:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ef1:	42                   	inc    edx
c0008ef2:	eb ec                	jmp    c0008ee0 <linear_vari_process+0x25f>
c0008ef4:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008efc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f00:	83 c4 2c             	add    esp,0x2c
c0008f03:	5b                   	pop    ebx
c0008f04:	5e                   	pop    esi
c0008f05:	5f                   	pop    edi
c0008f06:	5d                   	pop    ebp
c0008f07:	c3                   	ret    

c0008f08 <linear_reset>:
c0008f08:	83 ec 0c             	sub    esp,0xc
c0008f0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f12:	85 c0                	test   eax,eax
c0008f14:	74 20                	je     c0008f36 <linear_reset+0x2e>
c0008f16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f23:	51                   	push   ecx
c0008f24:	c1 e2 02             	shl    edx,0x2
c0008f27:	83 c0 1c             	add    eax,0x1c
c0008f2a:	52                   	push   edx
c0008f2b:	6a 00                	push   0x0
c0008f2d:	50                   	push   eax
c0008f2e:	e8 87 77 ff ff       	call   c00006ba <memset>
c0008f33:	83 c4 10             	add    esp,0x10
c0008f36:	83 c4 0c             	add    esp,0xc
c0008f39:	c3                   	ret    

c0008f3a <linear_get_name>:
c0008f3a:	31 c0                	xor    eax,eax
c0008f3c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f41:	75 05                	jne    c0008f48 <linear_get_name+0xe>
c0008f43:	b8 34 0d 02 c0       	mov    eax,0xc0020d34
c0008f48:	c3                   	ret    

c0008f49 <linear_get_description>:
c0008f49:	31 c0                	xor    eax,eax
c0008f4b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f50:	75 05                	jne    c0008f57 <linear_get_description+0xe>
c0008f52:	b8 48 0d 02 c0       	mov    eax,0xc0020d48
c0008f57:	c3                   	ret    

c0008f58 <linear_set_converter>:
c0008f58:	53                   	push   ebx
c0008f59:	b8 0a 00 00 00       	mov    eax,0xa
c0008f5e:	83 ec 08             	sub    esp,0x8
c0008f61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f65:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f6a:	75 6e                	jne    c0008fda <linear_set_converter+0x82>
c0008f6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f6f:	85 c0                	test   eax,eax
c0008f71:	74 13                	je     c0008f86 <linear_set_converter+0x2e>
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	50                   	push   eax
c0008f77:	e8 67 30 00 00       	call   c000bfe3 <free>
c0008f7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	50                   	push   eax
c0008f87:	50                   	push   eax
c0008f88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f92:	50                   	push   eax
c0008f93:	6a 01                	push   0x1
c0008f95:	e8 69 30 00 00       	call   c000c003 <calloc>
c0008f9a:	89 c2                	mov    edx,eax
c0008f9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f9f:	83 c4 10             	add    esp,0x10
c0008fa2:	b8 01 00 00 00       	mov    eax,0x1
c0008fa7:	85 d2                	test   edx,edx
c0008fa9:	74 2f                	je     c0008fda <linear_set_converter+0x82>
c0008fab:	83 ec 0c             	sub    esp,0xc
c0008fae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fb4:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fba:	c7 43 24 81 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c81
c0008fc1:	c7 43 20 81 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c81
c0008fc8:	c7 43 28 08 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f08
c0008fcf:	53                   	push   ebx
c0008fd0:	e8 33 ff ff ff       	call   c0008f08 <linear_reset>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	31 c0                	xor    eax,eax
c0008fda:	83 c4 08             	add    esp,0x8
c0008fdd:	5b                   	pop    ebx
c0008fde:	c3                   	ret    

c0008fdf <is_bad_src_ratio>:
c0008fdf:	83 ec 0c             	sub    esp,0xc
c0008fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe6:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008fed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ff1:	dd 04 24             	fld    QWORD PTR [esp]
c0008ff4:	dd 05 00 0d 02 c0    	fld    QWORD PTR ds:0xc0020d00
c0008ffa:	de d9                	fcompp 
c0008ffc:	df e0                	fnstsw ax
c0008ffe:	f6 c4 45             	test   ah,0x45
c0009001:	74 10                	je     c0009013 <is_bad_src_ratio+0x34>
c0009003:	dd 04 24             	fld    QWORD PTR [esp]
c0009006:	dc 1d 08 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d08
c000900c:	df e0                	fnstsw ax
c000900e:	f6 c4 45             	test   ah,0x45
c0009011:	75 07                	jne    c000901a <is_bad_src_ratio+0x3b>
c0009013:	b8 01 00 00 00       	mov    eax,0x1
c0009018:	eb 05                	jmp    c000901f <is_bad_src_ratio+0x40>
c000901a:	b8 00 00 00 00       	mov    eax,0x0
c000901f:	83 c4 0c             	add    esp,0xc
c0009022:	c3                   	ret    

c0009023 <int_to_fp>:
c0009023:	c1 e0 0c             	shl    eax,0xc
c0009026:	c3                   	ret    

c0009027 <fp_to_int>:
c0009027:	c1 f8 0c             	sar    eax,0xc
c000902a:	c3                   	ret    

c000902b <fp_fraction_part>:
c000902b:	25 ff 0f 00 00       	and    eax,0xfff
c0009030:	c3                   	ret    

c0009031 <fp_to_double>:
c0009031:	83 ec 0c             	sub    esp,0xc
c0009034:	e8 f2 ff ff ff       	call   c000902b <fp_fraction_part>
c0009039:	d9 05 08 0f 02 c0    	fld    DWORD PTR ds:0xc0020f08
c000903f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009043:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009047:	83 c4 0c             	add    esp,0xc
c000904a:	c3                   	ret    

c000904b <calc_output_single>:
c000904b:	55                   	push   ebp
c000904c:	57                   	push   edi
c000904d:	89 c7                	mov    edi,eax
c000904f:	56                   	push   esi
c0009050:	53                   	push   ebx
c0009051:	89 d3                	mov    ebx,edx
c0009053:	83 ec 24             	sub    esp,0x24
c0009056:	89 de                	mov    esi,ebx
c0009058:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000905b:	e8 c3 ff ff ff       	call   c0009023 <int_to_fp>
c0009060:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009063:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009067:	29 c8                	sub    eax,ecx
c0009069:	99                   	cdq    
c000906a:	f7 fb                	idiv   ebx
c000906c:	0f af f0             	imul   esi,eax
c000906f:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009072:	01 ce                	add    esi,ecx
c0009074:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009078:	29 c2                	sub    edx,eax
c000907a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009081:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009089:	8d 14 97             	lea    edx,[edi+edx*4]
c000908c:	89 f0                	mov    eax,esi
c000908e:	e8 9e ff ff ff       	call   c0009031 <fp_to_double>
c0009093:	89 f0                	mov    eax,esi
c0009095:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009099:	e8 89 ff ff ff       	call   c0009027 <fp_to_int>
c000909e:	83 c2 04             	add    edx,0x4
c00090a1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090a5:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090a9:	d8 e1                	fsub   st,st(1)
c00090ab:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090af:	de c9                	fmulp  st(1),st
c00090b1:	de c1                	faddp  st(1),st
c00090b3:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090b9:	29 de                	sub    esi,ebx
c00090bb:	dc 04 24             	fadd   QWORD PTR [esp]
c00090be:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090c1:	79 c9                	jns    c000908c <calc_output_single+0x41>
c00090c3:	89 d8                	mov    eax,ebx
c00090c5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090c9:	29 c8                	sub    eax,ecx
c00090cb:	89 c1                	mov    ecx,eax
c00090cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d1:	29 c8                	sub    eax,ecx
c00090d3:	99                   	cdq    
c00090d4:	f7 fb                	idiv   ebx
c00090d6:	89 da                	mov    edx,ebx
c00090d8:	0f af d0             	imul   edx,eax
c00090db:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090df:	01 d1                	add    ecx,edx
c00090e1:	d9 ee                	fldz   
c00090e3:	8d 14 87             	lea    edx,[edi+eax*4]
c00090e6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090ea:	89 c8                	mov    eax,ecx
c00090ec:	e8 40 ff ff ff       	call   c0009031 <fp_to_double>
c00090f1:	89 c8                	mov    eax,ecx
c00090f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00090f7:	e8 2b ff ff ff       	call   c0009027 <fp_to_int>
c00090fc:	29 d9                	sub    ecx,ebx
c00090fe:	83 ea 04             	sub    edx,0x4
c0009101:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009105:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009109:	d8 e1                	fsub   st,st(1)
c000910b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000910f:	de c9                	fmulp  st(1),st
c0009111:	de c1                	faddp  st(1),st
c0009113:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009119:	85 c9                	test   ecx,ecx
c000911b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000911f:	de c1                	faddp  st(1),st
c0009121:	7f c3                	jg     c00090e6 <calc_output_single+0x9b>
c0009123:	dd 04 24             	fld    QWORD PTR [esp]
c0009126:	de c1                	faddp  st(1),st
c0009128:	83 c4 24             	add    esp,0x24
c000912b:	5b                   	pop    ebx
c000912c:	5e                   	pop    esi
c000912d:	5f                   	pop    edi
c000912e:	5d                   	pop    ebp
c000912f:	c3                   	ret    

c0009130 <calc_output_stereo>:
c0009130:	55                   	push   ebp
c0009131:	57                   	push   edi
c0009132:	89 c7                	mov    edi,eax
c0009134:	56                   	push   esi
c0009135:	53                   	push   ebx
c0009136:	89 d3                	mov    ebx,edx
c0009138:	83 ec 44             	sub    esp,0x44
c000913b:	89 de                	mov    esi,ebx
c000913d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009140:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009144:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009148:	e8 d6 fe ff ff       	call   c0009023 <int_to_fp>
c000914d:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009150:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009154:	29 c8                	sub    eax,ecx
c0009156:	99                   	cdq    
c0009157:	f7 fb                	idiv   ebx
c0009159:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000915c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009164:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009168:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000916b:	0f af f0             	imul   esi,eax
c000916e:	0f af c2             	imul   eax,edx
c0009171:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009175:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009179:	d9 ee                	fldz   
c000917b:	29 c2                	sub    edx,eax
c000917d:	01 ce                	add    esi,ecx
c000917f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009182:	8d 14 97             	lea    edx,[edi+edx*4]
c0009185:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000918d:	89 f0                	mov    eax,esi
c000918f:	e8 9d fe ff ff       	call   c0009031 <fp_to_double>
c0009194:	89 f0                	mov    eax,esi
c0009196:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000919a:	e8 88 fe ff ff       	call   c0009027 <fp_to_int>
c000919f:	83 c2 08             	add    edx,0x8
c00091a2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091a6:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091aa:	d8 e1                	fsub   st,st(1)
c00091ac:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091b0:	de c9                	fmulp  st(1),st
c00091b2:	de c1                	faddp  st(1),st
c00091b4:	d9 c0                	fld    st(0)
c00091b6:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091bc:	dc 04 24             	fadd   QWORD PTR [esp]
c00091bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091c2:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091c8:	29 de                	sub    esi,ebx
c00091ca:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091ce:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091d2:	79 b9                	jns    c000918d <calc_output_stereo+0x5d>
c00091d4:	89 d8                	mov    eax,ebx
c00091d6:	29 c8                	sub    eax,ecx
c00091d8:	89 c1                	mov    ecx,eax
c00091da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091de:	29 c8                	sub    eax,ecx
c00091e0:	99                   	cdq    
c00091e1:	f7 fb                	idiv   ebx
c00091e3:	89 da                	mov    edx,ebx
c00091e5:	0f af d0             	imul   edx,eax
c00091e8:	40                   	inc    eax
c00091e9:	01 d1                	add    ecx,edx
c00091eb:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091f4:	d9 ee                	fldz   
c00091f6:	d9 ee                	fldz   
c00091f8:	8d 14 87             	lea    edx,[edi+eax*4]
c00091fb:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00091ff:	89 c8                	mov    eax,ecx
c0009201:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009205:	e8 27 fe ff ff       	call   c0009031 <fp_to_double>
c000920a:	89 c8                	mov    eax,ecx
c000920c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009210:	e8 12 fe ff ff       	call   c0009027 <fp_to_int>
c0009215:	29 d9                	sub    ecx,ebx
c0009217:	83 ea 08             	sub    edx,0x8
c000921a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000921e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009222:	d8 e1                	fsub   st,st(1)
c0009224:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009228:	de c9                	fmulp  st(1),st
c000922a:	de c1                	faddp  st(1),st
c000922c:	d9 c0                	fld    st(0)
c000922e:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009234:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009238:	de c1                	faddp  st(1),st
c000923a:	d9 c9                	fxch   st(1)
c000923c:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009242:	85 c9                	test   ecx,ecx
c0009244:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009248:	de c1                	faddp  st(1),st
c000924a:	7f af                	jg     c00091fb <calc_output_stereo+0xcb>
c000924c:	dd 04 24             	fld    QWORD PTR [esp]
c000924f:	de c2                	faddp  st(2),st
c0009251:	d9 c9                	fxch   st(1)
c0009253:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009257:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000925b:	d9 18                	fstp   DWORD PTR [eax]
c000925d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009261:	de c1                	faddp  st(1),st
c0009263:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009267:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c000926a:	83 c4 44             	add    esp,0x44
c000926d:	5b                   	pop    ebx
c000926e:	5e                   	pop    esi
c000926f:	5f                   	pop    edi
c0009270:	5d                   	pop    ebp
c0009271:	c3                   	ret    

c0009272 <calc_output_quad>:
c0009272:	55                   	push   ebp
c0009273:	57                   	push   edi
c0009274:	56                   	push   esi
c0009275:	89 c6                	mov    esi,eax
c0009277:	53                   	push   ebx
c0009278:	89 d3                	mov    ebx,edx
c000927a:	83 ec 5c             	sub    esp,0x5c
c000927d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009280:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009284:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009288:	dd 1c 24             	fstp   QWORD PTR [esp]
c000928b:	e8 93 fd ff ff       	call   c0009023 <int_to_fp>
c0009290:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009293:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009297:	29 c8                	sub    eax,ecx
c0009299:	99                   	cdq    
c000929a:	f7 fb                	idiv   ebx
c000929c:	89 da                	mov    edx,ebx
c000929e:	0f af d0             	imul   edx,eax
c00092a1:	01 ca                	add    edx,ecx
c00092a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092a7:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092aa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092ae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092b1:	0f af c2             	imul   eax,edx
c00092b4:	d9 ee                	fldz   
c00092b6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092be:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092c2:	29 c2                	sub    edx,eax
c00092c4:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092c8:	8d 14 96             	lea    edx,[esi+edx*4]
c00092cb:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092cf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d7:	e8 55 fd ff ff       	call   c0009031 <fp_to_double>
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092e4:	e8 3e fd ff ff       	call   c0009027 <fp_to_int>
c00092e9:	83 c2 10             	add    edx,0x10
c00092ec:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092f0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092f4:	d8 e1                	fsub   st,st(1)
c00092f6:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00092fa:	de c9                	fmulp  st(1),st
c00092fc:	de c1                	faddp  st(1),st
c00092fe:	d9 c0                	fld    st(0)
c0009300:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009306:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000930a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000930e:	d9 c0                	fld    st(0)
c0009310:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009316:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000931a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000931e:	d9 c0                	fld    st(0)
c0009320:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009326:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000932a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000932e:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009334:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009338:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933c:	de c1                	faddp  st(1),st
c000933e:	79 8f                	jns    c00092cf <calc_output_quad+0x5d>
c0009340:	89 d8                	mov    eax,ebx
c0009342:	29 c8                	sub    eax,ecx
c0009344:	89 c1                	mov    ecx,eax
c0009346:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000934a:	29 c8                	sub    eax,ecx
c000934c:	99                   	cdq    
c000934d:	f7 fb                	idiv   ebx
c000934f:	89 da                	mov    edx,ebx
c0009351:	0f af d0             	imul   edx,eax
c0009354:	40                   	inc    eax
c0009355:	01 d1                	add    ecx,edx
c0009357:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000935c:	d9 ee                	fldz   
c000935e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009362:	d9 ee                	fldz   
c0009364:	d9 ee                	fldz   
c0009366:	d9 ee                	fldz   
c0009368:	8d 14 86             	lea    edx,[esi+eax*4]
c000936b:	eb 0a                	jmp    c0009377 <calc_output_quad+0x105>
c000936d:	d9 cc                	fxch   st(4)
c000936f:	d9 ca                	fxch   st(2)
c0009371:	d9 c9                	fxch   st(1)
c0009373:	d9 cb                	fxch   st(3)
c0009375:	d9 c9                	fxch   st(1)
c0009377:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000937b:	d9 c9                	fxch   st(1)
c000937d:	89 c8                	mov    eax,ecx
c000937f:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009383:	d9 c9                	fxch   st(1)
c0009385:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009389:	d9 c9                	fxch   st(1)
c000938b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000938f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009393:	e8 99 fc ff ff       	call   c0009031 <fp_to_double>
c0009398:	89 c8                	mov    eax,ecx
c000939a:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000939e:	e8 84 fc ff ff       	call   c0009027 <fp_to_int>
c00093a3:	29 d9                	sub    ecx,ebx
c00093a5:	83 ea 10             	sub    edx,0x10
c00093a8:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093ac:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093b0:	d8 e1                	fsub   st,st(1)
c00093b2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093b6:	de c9                	fmulp  st(1),st
c00093b8:	de c1                	faddp  st(1),st
c00093ba:	d9 c0                	fld    st(0)
c00093bc:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093c2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093c6:	de c1                	faddp  st(1),st
c00093c8:	d9 c1                	fld    st(1)
c00093ca:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093d0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093d4:	de c1                	faddp  st(1),st
c00093d6:	d9 c2                	fld    st(2)
c00093d8:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093de:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093e2:	de c1                	faddp  st(1),st
c00093e4:	d9 cb                	fxch   st(3)
c00093e6:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093ec:	85 c9                	test   ecx,ecx
c00093ee:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093f2:	de c1                	faddp  st(1),st
c00093f4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00093f8:	0f 8f 6f ff ff ff    	jg     c000936d <calc_output_quad+0xfb>
c00093fe:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009402:	de c4                	faddp  st(4),st
c0009404:	d9 cb                	fxch   st(3)
c0009406:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009409:	d9 1f                	fstp   DWORD PTR [edi]
c000940b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000940f:	de c2                	faddp  st(2),st
c0009411:	d9 c9                	fxch   st(1)
c0009413:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009416:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009419:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000941d:	de c3                	faddp  st(3),st
c000941f:	d9 ca                	fxch   st(2)
c0009421:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009424:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009427:	de c1                	faddp  st(1),st
c0009429:	dc 0c 24             	fmul   QWORD PTR [esp]
c000942c:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000942f:	83 c4 5c             	add    esp,0x5c
c0009432:	5b                   	pop    ebx
c0009433:	5e                   	pop    esi
c0009434:	5f                   	pop    edi
c0009435:	5d                   	pop    ebp
c0009436:	c3                   	ret    

c0009437 <calc_output_hex>:
c0009437:	55                   	push   ebp
c0009438:	57                   	push   edi
c0009439:	89 c7                	mov    edi,eax
c000943b:	56                   	push   esi
c000943c:	53                   	push   ebx
c000943d:	89 d3                	mov    ebx,edx
c000943f:	83 ec 7c             	sub    esp,0x7c
c0009442:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009445:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000944c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009453:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009456:	e8 c8 fb ff ff       	call   c0009023 <int_to_fp>
c000945b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000945e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009462:	29 c8                	sub    eax,ecx
c0009464:	99                   	cdq    
c0009465:	f7 fb                	idiv   ebx
c0009467:	89 da                	mov    edx,ebx
c0009469:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0009471:	0f af d0             	imul   edx,eax
c0009474:	01 ca                	add    edx,ecx
c0009476:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000947e:	d9 ee                	fldz   
c0009480:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009484:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009487:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000948b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000948e:	0f af c2             	imul   eax,edx
c0009491:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009495:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009499:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000949d:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094a1:	29 c2                	sub    edx,eax
c00094a3:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094a7:	8d 14 97             	lea    edx,[edi+edx*4]
c00094aa:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094ae:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094b6:	e8 76 fb ff ff       	call   c0009031 <fp_to_double>
c00094bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094bf:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094c3:	e8 5f fb ff ff       	call   c0009027 <fp_to_int>
c00094c8:	83 c2 18             	add    edx,0x18
c00094cb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094cf:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094d3:	d8 e1                	fsub   st,st(1)
c00094d5:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094d9:	de c9                	fmulp  st(1),st
c00094db:	de c1                	faddp  st(1),st
c00094dd:	d9 c0                	fld    st(0)
c00094df:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094e5:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094e9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094ed:	d9 c0                	fld    st(0)
c00094ef:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094f5:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00094f9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00094fd:	d9 c0                	fld    st(0)
c00094ff:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009505:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009509:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000950d:	d9 c0                	fld    st(0)
c000950f:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009515:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009519:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000951d:	d9 c0                	fld    st(0)
c000951f:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009525:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009529:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000952d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009533:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009537:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000953b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000953f:	0f 89 6d ff ff ff    	jns    c00094b2 <calc_output_hex+0x7b>
c0009545:	89 d8                	mov    eax,ebx
c0009547:	29 c8                	sub    eax,ecx
c0009549:	89 c1                	mov    ecx,eax
c000954b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000954f:	29 c8                	sub    eax,ecx
c0009551:	99                   	cdq    
c0009552:	f7 fb                	idiv   ebx
c0009554:	89 da                	mov    edx,ebx
c0009556:	0f af d0             	imul   edx,eax
c0009559:	40                   	inc    eax
c000955a:	01 d1                	add    ecx,edx
c000955c:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0009561:	d9 ee                	fldz   
c0009563:	d9 ee                	fldz   
c0009565:	d9 ee                	fldz   
c0009567:	d9 ca                	fxch   st(2)
c0009569:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c000956d:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009571:	d9 ee                	fldz   
c0009573:	8d 14 87             	lea    edx,[edi+eax*4]
c0009576:	d9 ee                	fldz   
c0009578:	d9 ca                	fxch   st(2)
c000957a:	eb 0a                	jmp    c0009586 <calc_output_hex+0x14f>
c000957c:	d9 c9                	fxch   st(1)
c000957e:	d9 cc                	fxch   st(4)
c0009580:	d9 cb                	fxch   st(3)
c0009582:	d9 ca                	fxch   st(2)
c0009584:	d9 c9                	fxch   st(1)
c0009586:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c000958a:	89 c8                	mov    eax,ecx
c000958c:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009590:	d9 ca                	fxch   st(2)
c0009592:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009596:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000959a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000959e:	e8 8e fa ff ff       	call   c0009031 <fp_to_double>
c00095a3:	89 c8                	mov    eax,ecx
c00095a5:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095a9:	e8 79 fa ff ff       	call   c0009027 <fp_to_int>
c00095ae:	29 d9                	sub    ecx,ebx
c00095b0:	83 ea 18             	sub    edx,0x18
c00095b3:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095b7:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095bb:	d8 e1                	fsub   st,st(1)
c00095bd:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095c1:	de c9                	fmulp  st(1),st
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	d9 c0                	fld    st(0)
c00095c7:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095cd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095d1:	de c1                	faddp  st(1),st
c00095d3:	d9 c1                	fld    st(1)
c00095d5:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095db:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095df:	de c1                	faddp  st(1),st
c00095e1:	d9 c2                	fld    st(2)
c00095e3:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095e9:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095ed:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095f1:	d9 c2                	fld    st(2)
c00095f3:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c00095f9:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00095fd:	de c1                	faddp  st(1),st
c00095ff:	d9 c3                	fld    st(3)
c0009601:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009607:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c000960b:	de c1                	faddp  st(1),st
c000960d:	d9 cc                	fxch   st(4)
c000960f:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009615:	85 c9                	test   ecx,ecx
c0009617:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c000961b:	de c1                	faddp  st(1),st
c000961d:	0f 8f 59 ff ff ff    	jg     c000957c <calc_output_hex+0x145>
c0009623:	d9 cb                	fxch   st(3)
c0009625:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009629:	dc 0c 24             	fmul   QWORD PTR [esp]
c000962c:	d9 1e                	fstp   DWORD PTR [esi]
c000962e:	d9 c9                	fxch   st(1)
c0009630:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009634:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009637:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009642:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009645:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009648:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000964c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964f:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009652:	d9 c9                	fxch   st(1)
c0009654:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009658:	dc 0c 24             	fmul   QWORD PTR [esp]
c000965b:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c000965e:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009662:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009665:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009668:	83 c4 7c             	add    esp,0x7c
c000966b:	5b                   	pop    ebx
c000966c:	5e                   	pop    esi
c000966d:	5f                   	pop    edi
c000966e:	5d                   	pop    ebp
c000966f:	c3                   	ret    

c0009670 <sinc_reset>:
c0009670:	56                   	push   esi
c0009671:	53                   	push   ebx
c0009672:	51                   	push   ecx
c0009673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009677:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000967a:	85 db                	test   ebx,ebx
c000967c:	74 51                	je     c00096cf <sinc_reset+0x5f>
c000967e:	d9 ee                	fldz   
c0009680:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009687:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000968e:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009691:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009698:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000969e:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096a1:	52                   	push   edx
c00096a2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096a5:	c1 e0 02             	shl    eax,0x2
c00096a8:	50                   	push   eax
c00096a9:	6a 00                	push   0x0
c00096ab:	56                   	push   esi
c00096ac:	e8 09 70 ff ff       	call   c00006ba <memset>
c00096b1:	83 c4 0c             	add    esp,0xc
c00096b4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096b7:	c1 e0 02             	shl    eax,0x2
c00096ba:	50                   	push   eax
c00096bb:	68 aa 00 00 00       	push   0xaa
c00096c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096c3:	8d 04 86             	lea    eax,[esi+eax*4]
c00096c6:	50                   	push   eax
c00096c7:	e8 ee 6f ff ff       	call   c00006ba <memset>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	58                   	pop    eax
c00096d0:	5b                   	pop    ebx
c00096d1:	5e                   	pop    esi
c00096d2:	c3                   	ret    

c00096d3 <calc_output_multi>:
c00096d3:	55                   	push   ebp
c00096d4:	57                   	push   edi
c00096d5:	8d 78 44             	lea    edi,[eax+0x44]
c00096d8:	56                   	push   esi
c00096d9:	89 c6                	mov    esi,eax
c00096db:	53                   	push   ebx
c00096dc:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096e2:	83 ec 4c             	sub    esp,0x4c
c00096e5:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096ed:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096f4:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00096f8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00096fc:	e8 22 f9 ff ff       	call   c0009023 <int_to_fp>
c0009701:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009705:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009709:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000970d:	99                   	cdq    
c000970e:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009716:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009719:	0f af d0             	imul   edx,eax
c000971c:	0f af c3             	imul   eax,ebx
c000971f:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009723:	29 c5                	sub    ebp,eax
c0009725:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000972c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009730:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009734:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009738:	52                   	push   edx
c0009739:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000973d:	6a 00                	push   0x0
c000973f:	57                   	push   edi
c0009740:	e8 75 6f ff ff       	call   c00006ba <memset>
c0009745:	83 c4 10             	add    esp,0x10
c0009748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000974c:	e8 e0 f8 ff ff       	call   c0009031 <fp_to_double>
c0009751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009755:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009759:	e8 c9 f8 ff ff       	call   c0009027 <fp_to_int>
c000975e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009761:	89 d9                	mov    ecx,ebx
c0009763:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009766:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000976a:	d8 e1                	fsub   st,st(1)
c000976c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009770:	de c9                	fmulp  st(1),st
c0009772:	de c1                	faddp  st(1),st
c0009774:	89 c8                	mov    eax,ecx
c0009776:	bd 08 00 00 00       	mov    ebp,0x8
c000977b:	99                   	cdq    
c000977c:	f7 fd                	idiv   ebp
c000977e:	4a                   	dec    edx
c000977f:	83 fa 06             	cmp    edx,0x6
c0009782:	77 07                	ja     c000978b <calc_output_multi+0xb8>
c0009784:	ff 24 95 80 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf280]
c000978b:	49                   	dec    ecx
c000978c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009790:	d9 c0                	fld    st(0)
c0009792:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009799:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000979c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a0:	dc 00                	fadd   QWORD PTR [eax]
c00097a2:	dd 18                	fstp   QWORD PTR [eax]
c00097a4:	49                   	dec    ecx
c00097a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097a9:	d9 c0                	fld    st(0)
c00097ab:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b9:	dc 00                	fadd   QWORD PTR [eax]
c00097bb:	dd 18                	fstp   QWORD PTR [eax]
c00097bd:	49                   	dec    ecx
c00097be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097c2:	d9 c0                	fld    st(0)
c00097c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097cb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ce:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097d2:	dc 00                	fadd   QWORD PTR [eax]
c00097d4:	dd 18                	fstp   QWORD PTR [eax]
c00097d6:	49                   	dec    ecx
c00097d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097db:	d9 c0                	fld    st(0)
c00097dd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097e4:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097eb:	dc 00                	fadd   QWORD PTR [eax]
c00097ed:	dd 18                	fstp   QWORD PTR [eax]
c00097ef:	49                   	dec    ecx
c00097f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097f4:	d9 c0                	fld    st(0)
c00097f6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097fd:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009800:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009804:	dc 00                	fadd   QWORD PTR [eax]
c0009806:	dd 18                	fstp   QWORD PTR [eax]
c0009808:	49                   	dec    ecx
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	d9 c0                	fld    st(0)
c000980f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009816:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009819:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000981d:	dc 00                	fadd   QWORD PTR [eax]
c000981f:	dd 18                	fstp   QWORD PTR [eax]
c0009821:	49                   	dec    ecx
c0009822:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009826:	d9 c0                	fld    st(0)
c0009828:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000982f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009832:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009836:	dc 00                	fadd   QWORD PTR [eax]
c0009838:	dd 18                	fstp   QWORD PTR [eax]
c000983a:	49                   	dec    ecx
c000983b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000983f:	d9 c0                	fld    st(0)
c0009841:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009848:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000984b:	85 c9                	test   ecx,ecx
c000984d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009851:	dc 00                	fadd   QWORD PTR [eax]
c0009853:	dd 18                	fstp   QWORD PTR [eax]
c0009855:	0f 8f 19 ff ff ff    	jg     c0009774 <calc_output_multi+0xa1>
c000985b:	dd d8                	fstp   st(0)
c000985d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009861:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0009865:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009869:	0f 89 d9 fe ff ff    	jns    c0009748 <calc_output_multi+0x75>
c000986f:	89 d1                	mov    ecx,edx
c0009871:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009875:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009879:	29 c8                	sub    eax,ecx
c000987b:	99                   	cdq    
c000987c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009880:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009884:	0f af d0             	imul   edx,eax
c0009887:	40                   	inc    eax
c0009888:	01 d1                	add    ecx,edx
c000988a:	0f af c3             	imul   eax,ebx
c000988d:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009890:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009898:	50                   	push   eax
c0009899:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000989d:	6a 00                	push   0x0
c000989f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098a3:	e8 12 6e ff ff       	call   c00006ba <memset>
c00098a8:	83 c4 10             	add    esp,0x10
c00098ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098af:	e8 7d f7 ff ff       	call   c0009031 <fp_to_double>
c00098b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098bc:	e8 66 f7 ff ff       	call   c0009027 <fp_to_int>
c00098c1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098c4:	89 d9                	mov    ecx,ebx
c00098c6:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098c9:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098cd:	d8 e1                	fsub   st,st(1)
c00098cf:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098d3:	de c9                	fmulp  st(1),st
c00098d5:	de c1                	faddp  st(1),st
c00098d7:	89 c8                	mov    eax,ecx
c00098d9:	bd 08 00 00 00       	mov    ebp,0x8
c00098de:	99                   	cdq    
c00098df:	f7 fd                	idiv   ebp
c00098e1:	4a                   	dec    edx
c00098e2:	83 fa 06             	cmp    edx,0x6
c00098e5:	77 07                	ja     c00098ee <calc_output_multi+0x21b>
c00098e7:	ff 24 95 9c 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf264]
c00098ee:	49                   	dec    ecx
c00098ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098fe:	d9 c0                	fld    st(0)
c0009900:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009904:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009907:	dc 00                	fadd   QWORD PTR [eax]
c0009909:	dd 18                	fstp   QWORD PTR [eax]
c000990b:	49                   	dec    ecx
c000990c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009914:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000991b:	d9 c0                	fld    st(0)
c000991d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009921:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009924:	dc 00                	fadd   QWORD PTR [eax]
c0009926:	dd 18                	fstp   QWORD PTR [eax]
c0009928:	49                   	dec    ecx
c0009929:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000992d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009931:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009938:	d9 c0                	fld    st(0)
c000993a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000993e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009941:	dc 00                	fadd   QWORD PTR [eax]
c0009943:	dd 18                	fstp   QWORD PTR [eax]
c0009945:	49                   	dec    ecx
c0009946:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000994a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009955:	d9 c0                	fld    st(0)
c0009957:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000995b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000995e:	dc 00                	fadd   QWORD PTR [eax]
c0009960:	dd 18                	fstp   QWORD PTR [eax]
c0009962:	49                   	dec    ecx
c0009963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009967:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009972:	d9 c0                	fld    st(0)
c0009974:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009978:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000997b:	dc 00                	fadd   QWORD PTR [eax]
c000997d:	dd 18                	fstp   QWORD PTR [eax]
c000997f:	49                   	dec    ecx
c0009980:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009988:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000998f:	d9 c0                	fld    st(0)
c0009991:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009995:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009998:	dc 00                	fadd   QWORD PTR [eax]
c000999a:	dd 18                	fstp   QWORD PTR [eax]
c000999c:	49                   	dec    ecx
c000999d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099ac:	d9 c0                	fld    st(0)
c00099ae:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099b2:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099b5:	dc 00                	fadd   QWORD PTR [eax]
c00099b7:	dd 18                	fstp   QWORD PTR [eax]
c00099b9:	49                   	dec    ecx
c00099ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c2:	85 c9                	test   ecx,ecx
c00099c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099cb:	d9 c0                	fld    st(0)
c00099cd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099d1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d4:	dc 00                	fadd   QWORD PTR [eax]
c00099d6:	dd 18                	fstp   QWORD PTR [eax]
c00099d8:	0f 8f f9 fe ff ff    	jg     c00098d7 <calc_output_multi+0x204>
c00099de:	dd d8                	fstp   st(0)
c00099e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099e4:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099e8:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099ec:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099f1:	0f 8f b4 fe ff ff    	jg     c00098ab <calc_output_multi+0x1d8>
c00099f7:	b9 08 00 00 00       	mov    ecx,0x8
c00099fc:	89 d8                	mov    eax,ebx
c00099fe:	99                   	cdq    
c00099ff:	f7 f9                	idiv   ecx
c0009a01:	4a                   	dec    edx
c0009a02:	83 fa 06             	cmp    edx,0x6
c0009a05:	77 07                	ja     c0009a0e <calc_output_multi+0x33b>
c0009a07:	ff 24 95 b8 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf248]
c0009a0e:	4b                   	dec    ebx
c0009a0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a13:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a16:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a19:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a1d:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a21:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a24:	4b                   	dec    ebx
c0009a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a29:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a2c:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a2f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a33:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a37:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a3a:	4b                   	dec    ebx
c0009a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a3f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a42:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a45:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a49:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a4d:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a50:	4b                   	dec    ebx
c0009a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a55:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a58:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a5b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a5f:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a63:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a66:	4b                   	dec    ebx
c0009a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a6b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a6e:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a71:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a75:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a79:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a7c:	4b                   	dec    ebx
c0009a7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a81:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a84:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a87:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a8f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a92:	4b                   	dec    ebx
c0009a93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a97:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a9a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa1:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aa5:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa8:	4b                   	dec    ebx
c0009aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aad:	85 db                	test   ebx,ebx
c0009aaf:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009abd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac0:	0f 8f 36 ff ff ff    	jg     c00099fc <calc_output_multi+0x329>
c0009ac6:	83 c4 4c             	add    esp,0x4c
c0009ac9:	5b                   	pop    ebx
c0009aca:	5e                   	pop    esi
c0009acb:	5f                   	pop    edi
c0009acc:	5d                   	pop    ebp
c0009acd:	c3                   	ret    

c0009ace <double_to_fp>:
c0009ace:	d9 05 0c 0f 02 c0    	fld    DWORD PTR ds:0xc0020f0c
c0009ad4:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009ad8:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009adc:	e9 ef 5a 01 00       	jmp    c001f5d0 <lrint>

c0009ae1 <fmod_one>:
c0009ae1:	83 ec 2c             	sub    esp,0x2c
c0009ae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009aec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009af0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009af4:	83 ec 08             	sub    esp,0x8
c0009af7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009afb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009aff:	e8 cc 5a 01 00       	call   c001f5d0 <lrint>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b0b:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b0f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b13:	de e1                	fsubrp st(1),st
c0009b15:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b19:	d9 ee                	fldz   
c0009b1b:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b1f:	df e0                	fnstsw ax
c0009b21:	f6 c4 45             	test   ah,0x45
c0009b24:	75 0a                	jne    c0009b30 <fmod_one+0x4f>
c0009b26:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b2a:	d9 e8                	fld1   
c0009b2c:	de c1                	faddp  st(1),st
c0009b2e:	eb 04                	jmp    c0009b34 <fmod_one+0x53>
c0009b30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b34:	83 c4 2c             	add    esp,0x2c
c0009b37:	c3                   	ret    

c0009b38 <prepare_data>:
c0009b38:	55                   	push   ebp
c0009b39:	57                   	push   edi
c0009b3a:	56                   	push   esi
c0009b3b:	53                   	push   ebx
c0009b3c:	83 ec 1c             	sub    esp,0x1c
c0009b3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b47:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b4b:	0f 89 57 01 00 00    	jns    c0009ca8 <prepare_data+0x170>
c0009b51:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b54:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b57:	85 d2                	test   edx,edx
c0009b59:	75 0d                	jne    c0009b68 <prepare_data+0x30>
c0009b5b:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b5e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b61:	29 d0                	sub    eax,edx
c0009b63:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b66:	eb 44                	jmp    c0009bac <prepare_data+0x74>
c0009b68:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b6b:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b6e:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b71:	39 c1                	cmp    ecx,eax
c0009b73:	7d 04                	jge    c0009b79 <prepare_data+0x41>
c0009b75:	29 d0                	sub    eax,edx
c0009b77:	eb 2d                	jmp    c0009ba6 <prepare_data+0x6e>
c0009b79:	29 d7                	sub    edi,edx
c0009b7b:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b81:	01 f7                	add    edi,esi
c0009b83:	29 f2                	sub    edx,esi
c0009b85:	51                   	push   ecx
c0009b86:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b8d:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b90:	51                   	push   ecx
c0009b91:	52                   	push   edx
c0009b92:	50                   	push   eax
c0009b93:	e8 b4 6a ff ff       	call   c000064c <memmove>
c0009b98:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b9b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b9e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009ba1:	29 f0                	sub    eax,esi
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	29 f0                	sub    eax,esi
c0009ba8:	79 02                	jns    c0009bac <prepare_data+0x74>
c0009baa:	31 c0                	xor    eax,eax
c0009bac:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009baf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bb2:	29 ef                	sub    edi,ebp
c0009bb4:	39 c7                	cmp    edi,eax
c0009bb6:	7e 02                	jle    c0009bba <prepare_data+0x82>
c0009bb8:	89 c7                	mov    edi,eax
c0009bba:	89 f8                	mov    eax,edi
c0009bbc:	99                   	cdq    
c0009bbd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bc0:	29 d7                	sub    edi,edx
c0009bc2:	b8 15 00 00 00       	mov    eax,0x15
c0009bc7:	0f 88 dd 00 00 00    	js     c0009caa <prepare_data+0x172>
c0009bcd:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bd0:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bd3:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bd6:	0f 8f ce 00 00 00    	jg     c0009caa <prepare_data+0x172>
c0009bdc:	50                   	push   eax
c0009bdd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009be4:	50                   	push   eax
c0009be5:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009beb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf1:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bf4:	50                   	push   eax
c0009bf5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bf8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009bfc:	50                   	push   eax
c0009bfd:	e8 82 6a ff ff       	call   c0000684 <memcpy>
c0009c02:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c05:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c08:	83 c4 10             	add    esp,0x10
c0009c0b:	01 fd                	add    ebp,edi
c0009c0d:	01 f9                	add    ecx,edi
c0009c0f:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c12:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c15:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c1c:	0f 85 86 00 00 00    	jne    c0009ca8 <prepare_data+0x170>
c0009c22:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c25:	89 e8                	mov    eax,ebp
c0009c27:	29 c8                	sub    eax,ecx
c0009c29:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c2c:	39 f8                	cmp    eax,edi
c0009c2e:	7d 78                	jge    c0009ca8 <prepare_data+0x170>
c0009c30:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c34:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c38:	74 6e                	je     c0009ca8 <prepare_data+0x170>
c0009c3a:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c41:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c44:	29 ef                	sub    edi,ebp
c0009c46:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c4a:	7c 29                	jl     c0009c75 <prepare_data+0x13d>
c0009c4c:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c4f:	29 f1                	sub    ecx,esi
c0009c51:	55                   	push   ebp
c0009c52:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c59:	50                   	push   eax
c0009c5a:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c5d:	50                   	push   eax
c0009c5e:	52                   	push   edx
c0009c5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c63:	e8 e4 69 ff ff       	call   c000064c <memmove>
c0009c68:	83 c4 10             	add    esp,0x10
c0009c6b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c6e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c75:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c78:	83 c6 05             	add    esi,0x5
c0009c7b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c7e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c81:	78 07                	js     c0009c8a <prepare_data+0x152>
c0009c83:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c86:	39 cf                	cmp    edi,ecx
c0009c88:	7e 04                	jle    c0009c8e <prepare_data+0x156>
c0009c8a:	89 ce                	mov    esi,ecx
c0009c8c:	29 c6                	sub    esi,eax
c0009c8e:	51                   	push   ecx
c0009c8f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c96:	51                   	push   ecx
c0009c97:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c9a:	6a 00                	push   0x0
c0009c9c:	50                   	push   eax
c0009c9d:	e8 18 6a ff ff       	call   c00006ba <memset>
c0009ca2:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	31 c0                	xor    eax,eax
c0009caa:	83 c4 1c             	add    esp,0x1c
c0009cad:	5b                   	pop    ebx
c0009cae:	5e                   	pop    esi
c0009caf:	5f                   	pop    edi
c0009cb0:	5d                   	pop    ebp
c0009cb1:	c3                   	ret    

c0009cb2 <sinc_multichan_vari_process>:
c0009cb2:	55                   	push   ebp
c0009cb3:	b8 05 00 00 00       	mov    eax,0x5
c0009cb8:	57                   	push   edi
c0009cb9:	56                   	push   esi
c0009cba:	53                   	push   ebx
c0009cbb:	83 ec 3c             	sub    esp,0x3c
c0009cbe:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cc2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cc6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	0f 84 5b 02 00 00    	je     c0009f2c <sinc_multichan_vari_process+0x27a>
c0009cd1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cd4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cd7:	0f af d0             	imul   edx,eax
c0009cda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009cdd:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ce1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009ce8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ceb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009cf2:	dd 06                	fld    QWORD PTR [esi]
c0009cf4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009cf8:	55                   	push   ebp
c0009cf9:	55                   	push   ebp
c0009cfa:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfd:	e8 dd f2 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009d02:	89 c2                	mov    edx,eax
c0009d04:	58                   	pop    eax
c0009d05:	59                   	pop    ecx
c0009d06:	b8 16 00 00 00       	mov    eax,0x16
c0009d0b:	85 d2                	test   edx,edx
c0009d0d:	0f 85 19 02 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009d13:	d9 05 10 0f 02 c0    	fld    DWORD PTR ds:0xc0020f10
c0009d19:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d1c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d1f:	dd 06                	fld    QWORD PTR [esi]
c0009d21:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d24:	d8 d1                	fcom   st(1)
c0009d26:	df e0                	fnstsw ax
c0009d28:	9e                   	sahf   
c0009d29:	76 0f                	jbe    c0009d3a <sinc_multichan_vari_process+0x88>
c0009d2b:	dd d8                	fstp   st(0)
c0009d2d:	d9 e8                	fld1   
c0009d2f:	d8 d9                	fcomp  st(1)
c0009d31:	df e0                	fnstsw ax
c0009d33:	9e                   	sahf   
c0009d34:	77 0f                	ja     c0009d45 <sinc_multichan_vari_process+0x93>
c0009d36:	dd d8                	fstp   st(0)
c0009d38:	eb 11                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d3a:	dd d9                	fstp   st(1)
c0009d3c:	d9 e8                	fld1   
c0009d3e:	d8 d9                	fcomp  st(1)
c0009d40:	df e0                	fnstsw ax
c0009d42:	9e                   	sahf   
c0009d43:	76 04                	jbe    c0009d49 <sinc_multichan_vari_process+0x97>
c0009d45:	de f9                	fdivp  st(1),st
c0009d47:	eb 02                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d49:	dd d8                	fstp   st(0)
c0009d4b:	83 ec 10             	sub    esp,0x10
c0009d4e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d51:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d54:	e8 77 58 01 00       	call   c001f5d0 <lrint>
c0009d59:	40                   	inc    eax
c0009d5a:	0f af c5             	imul   eax,ebp
c0009d5d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d64:	dd 14 24             	fst    QWORD PTR [esp]
c0009d67:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d6b:	e8 71 fd ff ff       	call   c0009ae1 <fmod_one>
c0009d70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d7a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d7e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d82:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d86:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d89:	e8 42 58 01 00       	call   c001f5d0 <lrint>
c0009d8e:	d9 e8                	fld1   
c0009d90:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d94:	0f af e8             	imul   ebp,eax
c0009d97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d9b:	01 e8                	add    eax,ebp
c0009d9d:	99                   	cdq    
c0009d9e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009da1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009da4:	dc 05 78 0d 02 c0    	fadd   QWORD PTR ds:0xc0020d78
c0009daa:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009db1:	83 c4 10             	add    esp,0x10
c0009db4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009db7:	7d 4b                	jge    c0009e04 <sinc_multichan_vari_process+0x152>
c0009db9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dbc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dbf:	01 c8                	add    eax,ecx
c0009dc1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dc4:	99                   	cdq    
c0009dc5:	f7 f9                	idiv   ecx
c0009dc7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dcb:	7d 09                	jge    c0009dd6 <sinc_multichan_vari_process+0x124>
c0009dcd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dd0:	85 c0                	test   eax,eax
c0009dd2:	79 57                	jns    c0009e2b <sinc_multichan_vari_process+0x179>
c0009dd4:	eb 70                	jmp    c0009e46 <sinc_multichan_vari_process+0x194>
c0009dd6:	51                   	push   ecx
c0009dd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009ddb:	57                   	push   edi
c0009ddc:	53                   	push   ebx
c0009ddd:	e8 56 fd ff ff       	call   c0009b38 <prepare_data>
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009de8:	85 c0                	test   eax,eax
c0009dea:	0f 85 3c 01 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009df0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009df3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009df6:	01 c8                	add    eax,ecx
c0009df8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dfb:	99                   	cdq    
c0009dfc:	f7 f9                	idiv   ecx
c0009dfe:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e02:	7c c9                	jl     c0009dcd <sinc_multichan_vari_process+0x11b>
c0009e04:	dd 04 24             	fld    QWORD PTR [esp]
c0009e07:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e0a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e0e:	dd 1e                	fstp   QWORD PTR [esi]
c0009e10:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e13:	99                   	cdq    
c0009e14:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e17:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e1a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e1d:	99                   	cdq    
c0009e1e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e21:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e24:	31 c0                	xor    eax,eax
c0009e26:	e9 01 01 00 00       	jmp    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009e2b:	dd 04 24             	fld    QWORD PTR [esp]
c0009e2e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e35:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e39:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e3d:	d9 c9                	fxch   st(1)
c0009e3f:	de d9                	fcompp 
c0009e41:	df e0                	fnstsw ax
c0009e43:	9e                   	sahf   
c0009e44:	73 be                	jae    c0009e04 <sinc_multichan_vari_process+0x152>
c0009e46:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e4a:	7e 2f                	jle    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e4c:	dd 06                	fld    QWORD PTR [esi]
c0009e4e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e51:	83 ec 10             	sub    esp,0x10
c0009e54:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e57:	e8 54 57 01 00       	call   c001f5b0 <fabs>
c0009e5c:	83 c4 10             	add    esp,0x10
c0009e5f:	dc 1d 00 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f00
c0009e65:	df e0                	fnstsw ax
c0009e67:	9e                   	sahf   
c0009e68:	76 11                	jbe    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e6a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e6d:	dc 26                	fsub   QWORD PTR [esi]
c0009e6f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e72:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e75:	dc 06                	fadd   QWORD PTR [esi]
c0009e77:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e7b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e7e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e82:	d9 e8                	fld1   
c0009e84:	d8 d9                	fcomp  st(1)
c0009e86:	df e0                	fnstsw ax
c0009e88:	9e                   	sahf   
c0009e89:	77 04                	ja     c0009e8f <sinc_multichan_vari_process+0x1dd>
c0009e8b:	dd d8                	fstp   st(0)
c0009e8d:	d9 e8                	fld1   
c0009e8f:	de c9                	fmulp  st(1),st
c0009e91:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e95:	50                   	push   eax
c0009e96:	50                   	push   eax
c0009e97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9f:	e8 2a fc ff ff       	call   c0009ace <double_to_fp>
c0009ea4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ea8:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eac:	89 c5                	mov    ebp,eax
c0009eae:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eb1:	e8 18 fc ff ff       	call   c0009ace <double_to_fp>
c0009eb6:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009eb9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ebc:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ebf:	89 c1                	mov    ecx,eax
c0009ec1:	52                   	push   edx
c0009ec2:	89 d8                	mov    eax,ebx
c0009ec4:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ec8:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ecb:	52                   	push   edx
c0009ecc:	52                   	push   edx
c0009ecd:	89 ea                	mov    edx,ebp
c0009ecf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ed2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ed5:	e8 f9 f7 ff ff       	call   c00096d3 <calc_output_multi>
c0009eda:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009edd:	d9 e8                	fld1   
c0009edf:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009ee3:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009ee6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009eea:	83 c4 10             	add    esp,0x10
c0009eed:	dd 14 24             	fst    QWORD PTR [esp]
c0009ef0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009ef4:	e8 e8 fb ff ff       	call   c0009ae1 <fmod_one>
c0009ef9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009efc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009eff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f03:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f07:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f0b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f0f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f12:	e8 b9 56 01 00       	call   c001f5d0 <lrint>
c0009f17:	0f af e8             	imul   ebp,eax
c0009f1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f1e:	01 e8                	add    eax,ebp
c0009f20:	99                   	cdq    
c0009f21:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f24:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f27:	e9 82 fe ff ff       	jmp    c0009dae <sinc_multichan_vari_process+0xfc>
c0009f2c:	83 c4 3c             	add    esp,0x3c
c0009f2f:	5b                   	pop    ebx
c0009f30:	5e                   	pop    esi
c0009f31:	5f                   	pop    edi
c0009f32:	5d                   	pop    ebp
c0009f33:	c3                   	ret    

c0009f34 <sinc_hex_vari_process>:
c0009f34:	55                   	push   ebp
c0009f35:	b8 05 00 00 00       	mov    eax,0x5
c0009f3a:	57                   	push   edi
c0009f3b:	56                   	push   esi
c0009f3c:	53                   	push   ebx
c0009f3d:	83 ec 3c             	sub    esp,0x3c
c0009f40:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f44:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f48:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f4b:	85 db                	test   ebx,ebx
c0009f4d:	0f 84 56 02 00 00    	je     c000a1a9 <sinc_hex_vari_process+0x275>
c0009f53:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f59:	0f af d0             	imul   edx,eax
c0009f5c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f5f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f6a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f6d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f74:	dd 06                	fld    QWORD PTR [esi]
c0009f76:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f7a:	55                   	push   ebp
c0009f7b:	55                   	push   ebp
c0009f7c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7f:	e8 5b f0 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009f84:	89 c2                	mov    edx,eax
c0009f86:	58                   	pop    eax
c0009f87:	59                   	pop    ecx
c0009f88:	b8 16 00 00 00       	mov    eax,0x16
c0009f8d:	85 d2                	test   edx,edx
c0009f8f:	0f 85 14 02 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c0009f95:	d9 05 10 0f 02 c0    	fld    DWORD PTR ds:0xc0020f10
c0009f9b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f9e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fa1:	dd 06                	fld    QWORD PTR [esi]
c0009fa3:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fa6:	d8 d1                	fcom   st(1)
c0009fa8:	df e0                	fnstsw ax
c0009faa:	9e                   	sahf   
c0009fab:	76 0f                	jbe    c0009fbc <sinc_hex_vari_process+0x88>
c0009fad:	dd d8                	fstp   st(0)
c0009faf:	d9 e8                	fld1   
c0009fb1:	d8 d9                	fcomp  st(1)
c0009fb3:	df e0                	fnstsw ax
c0009fb5:	9e                   	sahf   
c0009fb6:	77 0f                	ja     c0009fc7 <sinc_hex_vari_process+0x93>
c0009fb8:	dd d8                	fstp   st(0)
c0009fba:	eb 11                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fbc:	dd d9                	fstp   st(1)
c0009fbe:	d9 e8                	fld1   
c0009fc0:	d8 d9                	fcomp  st(1)
c0009fc2:	df e0                	fnstsw ax
c0009fc4:	9e                   	sahf   
c0009fc5:	76 04                	jbe    c0009fcb <sinc_hex_vari_process+0x97>
c0009fc7:	de f9                	fdivp  st(1),st
c0009fc9:	eb 02                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fcb:	dd d8                	fstp   st(0)
c0009fcd:	83 ec 10             	sub    esp,0x10
c0009fd0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fd3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fd6:	e8 f5 55 01 00       	call   c001f5d0 <lrint>
c0009fdb:	40                   	inc    eax
c0009fdc:	0f af c5             	imul   eax,ebp
c0009fdf:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fe2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009fe6:	dd 14 24             	fst    QWORD PTR [esp]
c0009fe9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009fed:	e8 ef fa ff ff       	call   c0009ae1 <fmod_one>
c0009ff2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ff5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ff8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ffc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a000:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a004:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a00b:	e8 c0 55 01 00       	call   c001f5d0 <lrint>
c000a010:	d9 e8                	fld1   
c000a012:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a016:	0f af e8             	imul   ebp,eax
c000a019:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a01d:	01 e8                	add    eax,ebp
c000a01f:	99                   	cdq    
c000a020:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a023:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a026:	dc 05 78 0d 02 c0    	fadd   QWORD PTR ds:0xc0020d78
c000a02c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a030:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a033:	83 c4 10             	add    esp,0x10
c000a036:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a039:	7d 4b                	jge    c000a086 <sinc_hex_vari_process+0x152>
c000a03b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a03e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a041:	01 c8                	add    eax,ecx
c000a043:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a046:	99                   	cdq    
c000a047:	f7 f9                	idiv   ecx
c000a049:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a04d:	7d 09                	jge    c000a058 <sinc_hex_vari_process+0x124>
c000a04f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a052:	85 c0                	test   eax,eax
c000a054:	79 57                	jns    c000a0ad <sinc_hex_vari_process+0x179>
c000a056:	eb 70                	jmp    c000a0c8 <sinc_hex_vari_process+0x194>
c000a058:	51                   	push   ecx
c000a059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a05d:	57                   	push   edi
c000a05e:	53                   	push   ebx
c000a05f:	e8 d4 fa ff ff       	call   c0009b38 <prepare_data>
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a06a:	85 c0                	test   eax,eax
c000a06c:	0f 85 37 01 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c000a072:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a075:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a078:	01 c8                	add    eax,ecx
c000a07a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a07d:	99                   	cdq    
c000a07e:	f7 f9                	idiv   ecx
c000a080:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a084:	7c c9                	jl     c000a04f <sinc_hex_vari_process+0x11b>
c000a086:	dd 04 24             	fld    QWORD PTR [esp]
c000a089:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a08c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a090:	dd 1e                	fstp   QWORD PTR [esi]
c000a092:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a095:	99                   	cdq    
c000a096:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a099:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a09c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a09f:	99                   	cdq    
c000a0a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0a6:	31 c0                	xor    eax,eax
c000a0a8:	e9 fc 00 00 00       	jmp    c000a1a9 <sinc_hex_vari_process+0x275>
c000a0ad:	dd 04 24             	fld    QWORD PTR [esp]
c000a0b0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0b7:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0bb:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0bf:	d9 c9                	fxch   st(1)
c000a0c1:	de d9                	fcompp 
c000a0c3:	df e0                	fnstsw ax
c000a0c5:	9e                   	sahf   
c000a0c6:	73 be                	jae    c000a086 <sinc_hex_vari_process+0x152>
c000a0c8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0cc:	7e 2f                	jle    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ce:	dd 06                	fld    QWORD PTR [esi]
c000a0d0:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0d3:	83 ec 10             	sub    esp,0x10
c000a0d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0d9:	e8 d2 54 01 00       	call   c001f5b0 <fabs>
c000a0de:	83 c4 10             	add    esp,0x10
c000a0e1:	dc 1d 00 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f00
c000a0e7:	df e0                	fnstsw ax
c000a0e9:	9e                   	sahf   
c000a0ea:	76 11                	jbe    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ec:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0ef:	dc 26                	fsub   QWORD PTR [esi]
c000a0f1:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0f4:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a0f7:	dc 06                	fadd   QWORD PTR [esi]
c000a0f9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a0fd:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a100:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a104:	d9 e8                	fld1   
c000a106:	d8 d9                	fcomp  st(1)
c000a108:	df e0                	fnstsw ax
c000a10a:	9e                   	sahf   
c000a10b:	77 04                	ja     c000a111 <sinc_hex_vari_process+0x1dd>
c000a10d:	dd d8                	fstp   st(0)
c000a10f:	d9 e8                	fld1   
c000a111:	de c9                	fmulp  st(1),st
c000a113:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a117:	50                   	push   eax
c000a118:	50                   	push   eax
c000a119:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a11d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a121:	e8 a8 f9 ff ff       	call   c0009ace <double_to_fp>
c000a126:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a12a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a12e:	89 c5                	mov    ebp,eax
c000a130:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a133:	e8 96 f9 ff ff       	call   c0009ace <double_to_fp>
c000a138:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a13b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a13e:	83 c4 0c             	add    esp,0xc
c000a141:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a144:	89 c1                	mov    ecx,eax
c000a146:	52                   	push   edx
c000a147:	89 d8                	mov    eax,ebx
c000a149:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a14d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a150:	52                   	push   edx
c000a151:	52                   	push   edx
c000a152:	89 ea                	mov    edx,ebp
c000a154:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a157:	e8 db f2 ff ff       	call   c0009437 <calc_output_hex>
c000a15c:	d9 e8                	fld1   
c000a15e:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a162:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a166:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a16a:	dd 14 24             	fst    QWORD PTR [esp]
c000a16d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a171:	e8 6b f9 ff ff       	call   c0009ae1 <fmod_one>
c000a176:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a179:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a17c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a180:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a184:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a188:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a18c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a18f:	e8 3c 54 01 00       	call   c001f5d0 <lrint>
c000a194:	0f af e8             	imul   ebp,eax
c000a197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a19b:	01 e8                	add    eax,ebp
c000a19d:	99                   	cdq    
c000a19e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1a1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1a4:	e9 87 fe ff ff       	jmp    c000a030 <sinc_hex_vari_process+0xfc>
c000a1a9:	83 c4 3c             	add    esp,0x3c
c000a1ac:	5b                   	pop    ebx
c000a1ad:	5e                   	pop    esi
c000a1ae:	5f                   	pop    edi
c000a1af:	5d                   	pop    ebp
c000a1b0:	c3                   	ret    

c000a1b1 <sinc_quad_vari_process>:
c000a1b1:	55                   	push   ebp
c000a1b2:	b8 05 00 00 00       	mov    eax,0x5
c000a1b7:	57                   	push   edi
c000a1b8:	56                   	push   esi
c000a1b9:	53                   	push   ebx
c000a1ba:	83 ec 3c             	sub    esp,0x3c
c000a1bd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1c1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1c5:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1c8:	85 db                	test   ebx,ebx
c000a1ca:	0f 84 56 02 00 00    	je     c000a426 <sinc_quad_vari_process+0x275>
c000a1d0:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1d3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1d6:	0f af d0             	imul   edx,eax
c000a1d9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1dc:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1e7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1ea:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1f1:	dd 06                	fld    QWORD PTR [esi]
c000a1f3:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a1f7:	55                   	push   ebp
c000a1f8:	55                   	push   ebp
c000a1f9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fc:	e8 de ed ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a201:	89 c2                	mov    edx,eax
c000a203:	58                   	pop    eax
c000a204:	59                   	pop    ecx
c000a205:	b8 16 00 00 00       	mov    eax,0x16
c000a20a:	85 d2                	test   edx,edx
c000a20c:	0f 85 14 02 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a212:	d9 05 10 0f 02 c0    	fld    DWORD PTR ds:0xc0020f10
c000a218:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a21b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a21e:	dd 06                	fld    QWORD PTR [esi]
c000a220:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a223:	d8 d1                	fcom   st(1)
c000a225:	df e0                	fnstsw ax
c000a227:	9e                   	sahf   
c000a228:	76 0f                	jbe    c000a239 <sinc_quad_vari_process+0x88>
c000a22a:	dd d8                	fstp   st(0)
c000a22c:	d9 e8                	fld1   
c000a22e:	d8 d9                	fcomp  st(1)
c000a230:	df e0                	fnstsw ax
c000a232:	9e                   	sahf   
c000a233:	77 0f                	ja     c000a244 <sinc_quad_vari_process+0x93>
c000a235:	dd d8                	fstp   st(0)
c000a237:	eb 11                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a239:	dd d9                	fstp   st(1)
c000a23b:	d9 e8                	fld1   
c000a23d:	d8 d9                	fcomp  st(1)
c000a23f:	df e0                	fnstsw ax
c000a241:	9e                   	sahf   
c000a242:	76 04                	jbe    c000a248 <sinc_quad_vari_process+0x97>
c000a244:	de f9                	fdivp  st(1),st
c000a246:	eb 02                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	83 ec 10             	sub    esp,0x10
c000a24d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a250:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a253:	e8 78 53 01 00       	call   c001f5d0 <lrint>
c000a258:	40                   	inc    eax
c000a259:	0f af c5             	imul   eax,ebp
c000a25c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a25f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a263:	dd 14 24             	fst    QWORD PTR [esp]
c000a266:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a26a:	e8 72 f8 ff ff       	call   c0009ae1 <fmod_one>
c000a26f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a272:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a275:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a279:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a27d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a281:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a285:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a288:	e8 43 53 01 00       	call   c001f5d0 <lrint>
c000a28d:	d9 e8                	fld1   
c000a28f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a293:	0f af e8             	imul   ebp,eax
c000a296:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a29a:	01 e8                	add    eax,ebp
c000a29c:	99                   	cdq    
c000a29d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2a3:	dc 05 78 0d 02 c0    	fadd   QWORD PTR ds:0xc0020d78
c000a2a9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2b0:	83 c4 10             	add    esp,0x10
c000a2b3:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2b6:	7d 4b                	jge    c000a303 <sinc_quad_vari_process+0x152>
c000a2b8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2bb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2be:	01 c8                	add    eax,ecx
c000a2c0:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2c3:	99                   	cdq    
c000a2c4:	f7 f9                	idiv   ecx
c000a2c6:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2ca:	7d 09                	jge    c000a2d5 <sinc_quad_vari_process+0x124>
c000a2cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2cf:	85 c0                	test   eax,eax
c000a2d1:	79 57                	jns    c000a32a <sinc_quad_vari_process+0x179>
c000a2d3:	eb 70                	jmp    c000a345 <sinc_quad_vari_process+0x194>
c000a2d5:	51                   	push   ecx
c000a2d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2da:	57                   	push   edi
c000a2db:	53                   	push   ebx
c000a2dc:	e8 57 f8 ff ff       	call   c0009b38 <prepare_data>
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2e7:	85 c0                	test   eax,eax
c000a2e9:	0f 85 37 01 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a2ef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2f5:	01 c8                	add    eax,ecx
c000a2f7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2fa:	99                   	cdq    
c000a2fb:	f7 f9                	idiv   ecx
c000a2fd:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a301:	7c c9                	jl     c000a2cc <sinc_quad_vari_process+0x11b>
c000a303:	dd 04 24             	fld    QWORD PTR [esp]
c000a306:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a309:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a30d:	dd 1e                	fstp   QWORD PTR [esi]
c000a30f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a312:	99                   	cdq    
c000a313:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a316:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a319:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a31c:	99                   	cdq    
c000a31d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a320:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a323:	31 c0                	xor    eax,eax
c000a325:	e9 fc 00 00 00       	jmp    c000a426 <sinc_quad_vari_process+0x275>
c000a32a:	dd 04 24             	fld    QWORD PTR [esp]
c000a32d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a330:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a334:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a338:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a33c:	d9 c9                	fxch   st(1)
c000a33e:	de d9                	fcompp 
c000a340:	df e0                	fnstsw ax
c000a342:	9e                   	sahf   
c000a343:	73 be                	jae    c000a303 <sinc_quad_vari_process+0x152>
c000a345:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a349:	7e 2f                	jle    c000a37a <sinc_quad_vari_process+0x1c9>
c000a34b:	dd 06                	fld    QWORD PTR [esi]
c000a34d:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a350:	83 ec 10             	sub    esp,0x10
c000a353:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a356:	e8 55 52 01 00       	call   c001f5b0 <fabs>
c000a35b:	83 c4 10             	add    esp,0x10
c000a35e:	dc 1d 00 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f00
c000a364:	df e0                	fnstsw ax
c000a366:	9e                   	sahf   
c000a367:	76 11                	jbe    c000a37a <sinc_quad_vari_process+0x1c9>
c000a369:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a36c:	dc 26                	fsub   QWORD PTR [esi]
c000a36e:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a371:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a374:	dc 06                	fadd   QWORD PTR [esi]
c000a376:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a37a:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a37d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a381:	d9 e8                	fld1   
c000a383:	d8 d9                	fcomp  st(1)
c000a385:	df e0                	fnstsw ax
c000a387:	9e                   	sahf   
c000a388:	77 04                	ja     c000a38e <sinc_quad_vari_process+0x1dd>
c000a38a:	dd d8                	fstp   st(0)
c000a38c:	d9 e8                	fld1   
c000a38e:	de c9                	fmulp  st(1),st
c000a390:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a394:	50                   	push   eax
c000a395:	50                   	push   eax
c000a396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39e:	e8 2b f7 ff ff       	call   c0009ace <double_to_fp>
c000a3a3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3a7:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3ab:	89 c5                	mov    ebp,eax
c000a3ad:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3b0:	e8 19 f7 ff ff       	call   c0009ace <double_to_fp>
c000a3b5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3b8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3bb:	83 c4 0c             	add    esp,0xc
c000a3be:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3c1:	89 c1                	mov    ecx,eax
c000a3c3:	52                   	push   edx
c000a3c4:	89 d8                	mov    eax,ebx
c000a3c6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3ca:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3cd:	52                   	push   edx
c000a3ce:	52                   	push   edx
c000a3cf:	89 ea                	mov    edx,ebp
c000a3d1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3d4:	e8 99 ee ff ff       	call   c0009272 <calc_output_quad>
c000a3d9:	d9 e8                	fld1   
c000a3db:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3df:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3e3:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3e7:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ea:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3ee:	e8 ee f6 ff ff       	call   c0009ae1 <fmod_one>
c000a3f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3f6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a3f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3fd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a401:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a405:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a409:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a40c:	e8 bf 51 01 00       	call   c001f5d0 <lrint>
c000a411:	0f af e8             	imul   ebp,eax
c000a414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a418:	01 e8                	add    eax,ebp
c000a41a:	99                   	cdq    
c000a41b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a41e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a421:	e9 87 fe ff ff       	jmp    c000a2ad <sinc_quad_vari_process+0xfc>
c000a426:	83 c4 3c             	add    esp,0x3c
c000a429:	5b                   	pop    ebx
c000a42a:	5e                   	pop    esi
c000a42b:	5f                   	pop    edi
c000a42c:	5d                   	pop    ebp
c000a42d:	c3                   	ret    

c000a42e <sinc_stereo_vari_process>:
c000a42e:	55                   	push   ebp
c000a42f:	b8 05 00 00 00       	mov    eax,0x5
c000a434:	57                   	push   edi
c000a435:	56                   	push   esi
c000a436:	53                   	push   ebx
c000a437:	83 ec 3c             	sub    esp,0x3c
c000a43a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a43e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a442:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a445:	85 db                	test   ebx,ebx
c000a447:	0f 84 56 02 00 00    	je     c000a6a3 <sinc_stereo_vari_process+0x275>
c000a44d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a450:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a453:	0f af d0             	imul   edx,eax
c000a456:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a459:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a45d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a464:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a467:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a46e:	dd 06                	fld    QWORD PTR [esi]
c000a470:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a474:	55                   	push   ebp
c000a475:	55                   	push   ebp
c000a476:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a479:	e8 61 eb ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a47e:	89 c2                	mov    edx,eax
c000a480:	58                   	pop    eax
c000a481:	59                   	pop    ecx
c000a482:	b8 16 00 00 00       	mov    eax,0x16
c000a487:	85 d2                	test   edx,edx
c000a489:	0f 85 14 02 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a48f:	d9 05 10 0f 02 c0    	fld    DWORD PTR ds:0xc0020f10
c000a495:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a498:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a49b:	dd 06                	fld    QWORD PTR [esi]
c000a49d:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4a0:	d8 d1                	fcom   st(1)
c000a4a2:	df e0                	fnstsw ax
c000a4a4:	9e                   	sahf   
c000a4a5:	76 0f                	jbe    c000a4b6 <sinc_stereo_vari_process+0x88>
c000a4a7:	dd d8                	fstp   st(0)
c000a4a9:	d9 e8                	fld1   
c000a4ab:	d8 d9                	fcomp  st(1)
c000a4ad:	df e0                	fnstsw ax
c000a4af:	9e                   	sahf   
c000a4b0:	77 0f                	ja     c000a4c1 <sinc_stereo_vari_process+0x93>
c000a4b2:	dd d8                	fstp   st(0)
c000a4b4:	eb 11                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4b6:	dd d9                	fstp   st(1)
c000a4b8:	d9 e8                	fld1   
c000a4ba:	d8 d9                	fcomp  st(1)
c000a4bc:	df e0                	fnstsw ax
c000a4be:	9e                   	sahf   
c000a4bf:	76 04                	jbe    c000a4c5 <sinc_stereo_vari_process+0x97>
c000a4c1:	de f9                	fdivp  st(1),st
c000a4c3:	eb 02                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4c5:	dd d8                	fstp   st(0)
c000a4c7:	83 ec 10             	sub    esp,0x10
c000a4ca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4d0:	e8 fb 50 01 00       	call   c001f5d0 <lrint>
c000a4d5:	40                   	inc    eax
c000a4d6:	0f af c5             	imul   eax,ebp
c000a4d9:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4e0:	dd 14 24             	fst    QWORD PTR [esp]
c000a4e3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4e7:	e8 f5 f5 ff ff       	call   c0009ae1 <fmod_one>
c000a4ec:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4ef:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4f6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a4fa:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a4fe:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a502:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a505:	e8 c6 50 01 00       	call   c001f5d0 <lrint>
c000a50a:	d9 e8                	fld1   
c000a50c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a510:	0f af e8             	imul   ebp,eax
c000a513:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a517:	01 e8                	add    eax,ebp
c000a519:	99                   	cdq    
c000a51a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a51d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a520:	dc 05 78 0d 02 c0    	fadd   QWORD PTR ds:0xc0020d78
c000a526:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a52a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a52d:	83 c4 10             	add    esp,0x10
c000a530:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a533:	7d 4b                	jge    c000a580 <sinc_stereo_vari_process+0x152>
c000a535:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a538:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a53b:	01 c8                	add    eax,ecx
c000a53d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a540:	99                   	cdq    
c000a541:	f7 f9                	idiv   ecx
c000a543:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a547:	7d 09                	jge    c000a552 <sinc_stereo_vari_process+0x124>
c000a549:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a54c:	85 c0                	test   eax,eax
c000a54e:	79 57                	jns    c000a5a7 <sinc_stereo_vari_process+0x179>
c000a550:	eb 70                	jmp    c000a5c2 <sinc_stereo_vari_process+0x194>
c000a552:	51                   	push   ecx
c000a553:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a557:	57                   	push   edi
c000a558:	53                   	push   ebx
c000a559:	e8 da f5 ff ff       	call   c0009b38 <prepare_data>
c000a55e:	83 c4 10             	add    esp,0x10
c000a561:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a564:	85 c0                	test   eax,eax
c000a566:	0f 85 37 01 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a56c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a56f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a572:	01 c8                	add    eax,ecx
c000a574:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a577:	99                   	cdq    
c000a578:	f7 f9                	idiv   ecx
c000a57a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a57e:	7c c9                	jl     c000a549 <sinc_stereo_vari_process+0x11b>
c000a580:	dd 04 24             	fld    QWORD PTR [esp]
c000a583:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a586:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a58a:	dd 1e                	fstp   QWORD PTR [esi]
c000a58c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a58f:	99                   	cdq    
c000a590:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a593:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a596:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a599:	99                   	cdq    
c000a59a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a59d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5a0:	31 c0                	xor    eax,eax
c000a5a2:	e9 fc 00 00 00       	jmp    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a5a7:	dd 04 24             	fld    QWORD PTR [esp]
c000a5aa:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b1:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5b5:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5b9:	d9 c9                	fxch   st(1)
c000a5bb:	de d9                	fcompp 
c000a5bd:	df e0                	fnstsw ax
c000a5bf:	9e                   	sahf   
c000a5c0:	73 be                	jae    c000a580 <sinc_stereo_vari_process+0x152>
c000a5c2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5c6:	7e 2f                	jle    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5c8:	dd 06                	fld    QWORD PTR [esi]
c000a5ca:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5cd:	83 ec 10             	sub    esp,0x10
c000a5d0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d3:	e8 d8 4f 01 00       	call   c001f5b0 <fabs>
c000a5d8:	83 c4 10             	add    esp,0x10
c000a5db:	dc 1d 00 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f00
c000a5e1:	df e0                	fnstsw ax
c000a5e3:	9e                   	sahf   
c000a5e4:	76 11                	jbe    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5e6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5e9:	dc 26                	fsub   QWORD PTR [esi]
c000a5eb:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5ee:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5f1:	dc 06                	fadd   QWORD PTR [esi]
c000a5f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a5f7:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a5fa:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5fe:	d9 e8                	fld1   
c000a600:	d8 d9                	fcomp  st(1)
c000a602:	df e0                	fnstsw ax
c000a604:	9e                   	sahf   
c000a605:	77 04                	ja     c000a60b <sinc_stereo_vari_process+0x1dd>
c000a607:	dd d8                	fstp   st(0)
c000a609:	d9 e8                	fld1   
c000a60b:	de c9                	fmulp  st(1),st
c000a60d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a611:	50                   	push   eax
c000a612:	50                   	push   eax
c000a613:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a617:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a61b:	e8 ae f4 ff ff       	call   c0009ace <double_to_fp>
c000a620:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a624:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a628:	89 c5                	mov    ebp,eax
c000a62a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a62d:	e8 9c f4 ff ff       	call   c0009ace <double_to_fp>
c000a632:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a635:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a638:	83 c4 0c             	add    esp,0xc
c000a63b:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a63e:	89 c1                	mov    ecx,eax
c000a640:	52                   	push   edx
c000a641:	89 d8                	mov    eax,ebx
c000a643:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a647:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a64a:	52                   	push   edx
c000a64b:	52                   	push   edx
c000a64c:	89 ea                	mov    edx,ebp
c000a64e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a651:	e8 da ea ff ff       	call   c0009130 <calc_output_stereo>
c000a656:	d9 e8                	fld1   
c000a658:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a65c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a660:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a664:	dd 14 24             	fst    QWORD PTR [esp]
c000a667:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a66b:	e8 71 f4 ff ff       	call   c0009ae1 <fmod_one>
c000a670:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a673:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a676:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a67a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a67e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a682:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a686:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a689:	e8 42 4f 01 00       	call   c001f5d0 <lrint>
c000a68e:	0f af e8             	imul   ebp,eax
c000a691:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a695:	01 e8                	add    eax,ebp
c000a697:	99                   	cdq    
c000a698:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a69b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a69e:	e9 87 fe ff ff       	jmp    c000a52a <sinc_stereo_vari_process+0xfc>
c000a6a3:	83 c4 3c             	add    esp,0x3c
c000a6a6:	5b                   	pop    ebx
c000a6a7:	5e                   	pop    esi
c000a6a8:	5f                   	pop    edi
c000a6a9:	5d                   	pop    ebp
c000a6aa:	c3                   	ret    

c000a6ab <sinc_mono_vari_process>:
c000a6ab:	55                   	push   ebp
c000a6ac:	b8 05 00 00 00       	mov    eax,0x5
c000a6b1:	57                   	push   edi
c000a6b2:	56                   	push   esi
c000a6b3:	53                   	push   ebx
c000a6b4:	83 ec 3c             	sub    esp,0x3c
c000a6b7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6bb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6bf:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6c2:	85 db                	test   ebx,ebx
c000a6c4:	0f 84 55 02 00 00    	je     c000a91f <sinc_mono_vari_process+0x274>
c000a6ca:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6cd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6d0:	0f af d0             	imul   edx,eax
c000a6d3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6d6:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6e1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6e4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6eb:	dd 06                	fld    QWORD PTR [esi]
c000a6ed:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6f1:	51                   	push   ecx
c000a6f2:	51                   	push   ecx
c000a6f3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6f6:	e8 e4 e8 ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a6fb:	5d                   	pop    ebp
c000a6fc:	89 c2                	mov    edx,eax
c000a6fe:	58                   	pop    eax
c000a6ff:	85 d2                	test   edx,edx
c000a701:	b8 16 00 00 00       	mov    eax,0x16
c000a706:	0f 85 13 02 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a70c:	d9 05 10 0f 02 c0    	fld    DWORD PTR ds:0xc0020f10
c000a712:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a715:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a718:	dd 06                	fld    QWORD PTR [esi]
c000a71a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a71d:	d8 d1                	fcom   st(1)
c000a71f:	df e0                	fnstsw ax
c000a721:	9e                   	sahf   
c000a722:	76 0f                	jbe    c000a733 <sinc_mono_vari_process+0x88>
c000a724:	dd d8                	fstp   st(0)
c000a726:	d9 e8                	fld1   
c000a728:	d8 d9                	fcomp  st(1)
c000a72a:	df e0                	fnstsw ax
c000a72c:	9e                   	sahf   
c000a72d:	77 0f                	ja     c000a73e <sinc_mono_vari_process+0x93>
c000a72f:	dd d8                	fstp   st(0)
c000a731:	eb 11                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a733:	dd d9                	fstp   st(1)
c000a735:	d9 e8                	fld1   
c000a737:	d8 d9                	fcomp  st(1)
c000a739:	df e0                	fnstsw ax
c000a73b:	9e                   	sahf   
c000a73c:	76 04                	jbe    c000a742 <sinc_mono_vari_process+0x97>
c000a73e:	de f9                	fdivp  st(1),st
c000a740:	eb 02                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a742:	dd d8                	fstp   st(0)
c000a744:	83 ec 10             	sub    esp,0x10
c000a747:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a74a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a74d:	e8 7e 4e 01 00       	call   c001f5d0 <lrint>
c000a752:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a755:	40                   	inc    eax
c000a756:	dd 14 24             	fst    QWORD PTR [esp]
c000a759:	0f af e8             	imul   ebp,eax
c000a75c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a760:	e8 7c f3 ff ff       	call   c0009ae1 <fmod_one>
c000a765:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a768:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a76c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a76f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a773:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a777:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a77b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a77f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a782:	e8 49 4e 01 00       	call   c001f5d0 <lrint>
c000a787:	d9 e8                	fld1   
c000a789:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a78d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a792:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a796:	99                   	cdq    
c000a797:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a79a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a79d:	dc 05 78 0d 02 c0    	fadd   QWORD PTR ds:0xc0020d78
c000a7a3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7aa:	83 c4 10             	add    esp,0x10
c000a7ad:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7b0:	7d 44                	jge    c000a7f6 <sinc_mono_vari_process+0x14b>
c000a7b2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7b8:	01 c8                	add    eax,ecx
c000a7ba:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7bd:	99                   	cdq    
c000a7be:	f7 f9                	idiv   ecx
c000a7c0:	39 d5                	cmp    ebp,edx
c000a7c2:	7d 09                	jge    c000a7cd <sinc_mono_vari_process+0x122>
c000a7c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7c7:	85 c0                	test   eax,eax
c000a7c9:	79 52                	jns    c000a81d <sinc_mono_vari_process+0x172>
c000a7cb:	eb 6b                	jmp    c000a838 <sinc_mono_vari_process+0x18d>
c000a7cd:	52                   	push   edx
c000a7ce:	55                   	push   ebp
c000a7cf:	57                   	push   edi
c000a7d0:	53                   	push   ebx
c000a7d1:	e8 62 f3 ff ff       	call   c0009b38 <prepare_data>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7dc:	85 c0                	test   eax,eax
c000a7de:	0f 85 3b 01 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a7e4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7e7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7ea:	01 c8                	add    eax,ecx
c000a7ec:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7ef:	99                   	cdq    
c000a7f0:	f7 f9                	idiv   ecx
c000a7f2:	39 d5                	cmp    ebp,edx
c000a7f4:	7c ce                	jl     c000a7c4 <sinc_mono_vari_process+0x119>
c000a7f6:	dd 04 24             	fld    QWORD PTR [esp]
c000a7f9:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a7fc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a800:	dd 1e                	fstp   QWORD PTR [esi]
c000a802:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a805:	99                   	cdq    
c000a806:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a809:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a80c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a80f:	99                   	cdq    
c000a810:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a813:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a816:	31 c0                	xor    eax,eax
c000a818:	e9 02 01 00 00       	jmp    c000a91f <sinc_mono_vari_process+0x274>
c000a81d:	dd 04 24             	fld    QWORD PTR [esp]
c000a820:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a823:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a827:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a82b:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a82f:	d9 c9                	fxch   st(1)
c000a831:	de d9                	fcompp 
c000a833:	df e0                	fnstsw ax
c000a835:	9e                   	sahf   
c000a836:	77 be                	ja     c000a7f6 <sinc_mono_vari_process+0x14b>
c000a838:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a83c:	7e 2f                	jle    c000a86d <sinc_mono_vari_process+0x1c2>
c000a83e:	dd 06                	fld    QWORD PTR [esi]
c000a840:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a843:	83 ec 10             	sub    esp,0x10
c000a846:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a849:	e8 62 4d 01 00       	call   c001f5b0 <fabs>
c000a84e:	83 c4 10             	add    esp,0x10
c000a851:	dc 1d 00 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f00
c000a857:	df e0                	fnstsw ax
c000a859:	9e                   	sahf   
c000a85a:	76 11                	jbe    c000a86d <sinc_mono_vari_process+0x1c2>
c000a85c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a85f:	dc 26                	fsub   QWORD PTR [esi]
c000a861:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a864:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a867:	dc 06                	fadd   QWORD PTR [esi]
c000a869:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a86d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a870:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a874:	d9 e8                	fld1   
c000a876:	d8 d9                	fcomp  st(1)
c000a878:	df e0                	fnstsw ax
c000a87a:	9e                   	sahf   
c000a87b:	77 04                	ja     c000a881 <sinc_mono_vari_process+0x1d6>
c000a87d:	dd d8                	fstp   st(0)
c000a87f:	d9 e8                	fld1   
c000a881:	de c9                	fmulp  st(1),st
c000a883:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a887:	50                   	push   eax
c000a888:	50                   	push   eax
c000a889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a891:	e8 38 f2 ff ff       	call   c0009ace <double_to_fp>
c000a896:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a89a:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a89e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8a2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8a5:	e8 24 f2 ff ff       	call   c0009ace <double_to_fp>
c000a8aa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8ae:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8b2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8b5:	89 c1                	mov    ecx,eax
c000a8b7:	89 d8                	mov    eax,ebx
c000a8b9:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8bd:	e8 89 e7 ff ff       	call   c000904b <calc_output_single>
c000a8c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8c5:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8c9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8cc:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8cf:	d9 e8                	fld1   
c000a8d1:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8d5:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8d8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8dc:	dd 14 24             	fst    QWORD PTR [esp]
c000a8df:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8e3:	e8 f9 f1 ff ff       	call   c0009ae1 <fmod_one>
c000a8e8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8ef:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8f2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8f6:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a8fa:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a8fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a902:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a905:	e8 c6 4c 01 00       	call   c001f5d0 <lrint>
c000a90a:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a90f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a913:	99                   	cdq    
c000a914:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a917:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a91a:	e9 88 fe ff ff       	jmp    c000a7a7 <sinc_mono_vari_process+0xfc>
c000a91f:	83 c4 3c             	add    esp,0x3c
c000a922:	5b                   	pop    ebx
c000a923:	5e                   	pop    esi
c000a924:	5f                   	pop    edi
c000a925:	5d                   	pop    ebp
c000a926:	c3                   	ret    

c000a927 <sinc_get_name>:
c000a927:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a92b:	31 c0                	xor    eax,eax
c000a92d:	83 fa 02             	cmp    edx,0x2
c000a930:	77 07                	ja     c000a939 <sinc_get_name+0x12>
c000a932:	8b 04 95 e0 0d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf220]
c000a939:	c3                   	ret    

c000a93a <sinc_get_description>:
c000a93a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a93e:	31 c0                	xor    eax,eax
c000a940:	83 fa 02             	cmp    edx,0x2
c000a943:	77 07                	ja     c000a94c <sinc_get_description+0x12>
c000a945:	8b 04 95 d4 0d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf22c]
c000a94c:	c3                   	ret    

c000a94d <sinc_set_converter>:
c000a94d:	53                   	push   ebx
c000a94e:	81 ec 58 08 00 00    	sub    esp,0x858
c000a954:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a95b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a95e:	85 c0                	test   eax,eax
c000a960:	74 13                	je     c000a975 <sinc_set_converter+0x28>
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	50                   	push   eax
c000a966:	e8 78 16 00 00       	call   c000bfe3 <free>
c000a96b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a972:	83 c4 10             	add    esp,0x10
c000a975:	50                   	push   eax
c000a976:	68 44 08 00 00       	push   0x844
c000a97b:	6a 00                	push   0x0
c000a97d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a981:	50                   	push   eax
c000a982:	e8 33 5d ff ff       	call   c00006ba <memset>
c000a987:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a98a:	83 c4 10             	add    esp,0x10
c000a98d:	b8 0b 00 00 00       	mov    eax,0xb
c000a992:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a998:	7f 6e                	jg     c000aa08 <sinc_set_converter+0xbb>
c000a99a:	83 fa 01             	cmp    edx,0x1
c000a99d:	75 10                	jne    c000a9af <sinc_set_converter+0x62>
c000a99f:	c7 43 24 ab a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6ab
c000a9a6:	c7 43 20 ab a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6ab
c000a9ad:	eb 4d                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9af:	83 fa 02             	cmp    edx,0x2
c000a9b2:	75 10                	jne    c000a9c4 <sinc_set_converter+0x77>
c000a9b4:	c7 43 24 2e a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a42e
c000a9bb:	c7 43 20 2e a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a42e
c000a9c2:	eb 38                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9c4:	83 fa 04             	cmp    edx,0x4
c000a9c7:	75 10                	jne    c000a9d9 <sinc_set_converter+0x8c>
c000a9c9:	c7 43 24 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1b1
c000a9d0:	c7 43 20 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1b1
c000a9d7:	eb 23                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9d9:	83 fa 06             	cmp    edx,0x6
c000a9dc:	75 10                	jne    c000a9ee <sinc_set_converter+0xa1>
c000a9de:	c7 43 24 34 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f34
c000a9e5:	c7 43 20 34 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f34
c000a9ec:	eb 0e                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9ee:	c7 43 24 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cb2
c000a9f5:	c7 43 20 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cb2
c000a9fc:	c7 43 28 70 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009670
c000aa03:	b8 0a 00 00 00       	mov    eax,0xa
c000aa08:	81 c4 58 08 00 00    	add    esp,0x858
c000aa0e:	5b                   	pop    ebx
c000aa0f:	c3                   	ret    

c000aa10 <is_bad_src_ratio>:
c000aa10:	83 ec 0c             	sub    esp,0xc
c000aa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa17:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa22:	dd 04 24             	fld    QWORD PTR [esp]
c000aa25:	dd 05 00 0d 02 c0    	fld    QWORD PTR ds:0xc0020d00
c000aa2b:	de d9                	fcompp 
c000aa2d:	df e0                	fnstsw ax
c000aa2f:	f6 c4 45             	test   ah,0x45
c000aa32:	74 10                	je     c000aa44 <is_bad_src_ratio+0x34>
c000aa34:	dd 04 24             	fld    QWORD PTR [esp]
c000aa37:	dc 1d 08 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d08
c000aa3d:	df e0                	fnstsw ax
c000aa3f:	f6 c4 45             	test   ah,0x45
c000aa42:	75 07                	jne    c000aa4b <is_bad_src_ratio+0x3b>
c000aa44:	b8 01 00 00 00       	mov    eax,0x1
c000aa49:	eb 05                	jmp    c000aa50 <is_bad_src_ratio+0x40>
c000aa4b:	b8 00 00 00 00       	mov    eax,0x0
c000aa50:	83 c4 0c             	add    esp,0xc
c000aa53:	c3                   	ret    

c000aa54 <fmod_one>:
c000aa54:	83 ec 2c             	sub    esp,0x2c
c000aa57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa67:	83 ec 08             	sub    esp,0x8
c000aa6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa72:	e8 59 4b 01 00       	call   c001f5d0 <lrint>
c000aa77:	83 c4 10             	add    esp,0x10
c000aa7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa7e:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa82:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa86:	de e1                	fsubrp st(1),st
c000aa88:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa8c:	d9 ee                	fldz   
c000aa8e:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa92:	df e0                	fnstsw ax
c000aa94:	f6 c4 45             	test   ah,0x45
c000aa97:	75 0a                	jne    c000aaa3 <fmod_one+0x4f>
c000aa99:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa9d:	d9 e8                	fld1   
c000aa9f:	de c1                	faddp  st(1),st
c000aaa1:	eb 04                	jmp    c000aaa7 <fmod_one+0x53>
c000aaa3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa7:	83 c4 2c             	add    esp,0x2c
c000aaaa:	c3                   	ret    

c000aaab <zoh_vari_process>:
c000aaab:	55                   	push   ebp
c000aaac:	57                   	push   edi
c000aaad:	56                   	push   esi
c000aaae:	53                   	push   ebx
c000aaaf:	83 ec 2c             	sub    esp,0x2c
c000aab2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aab6:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aaba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aac2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aac6:	0f 8e 30 02 00 00    	jle    c000acfc <zoh_vari_process+0x251>
c000aacc:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aacf:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aad7:	85 db                	test   ebx,ebx
c000aad9:	0f 84 1d 02 00 00    	je     c000acfc <zoh_vari_process+0x251>
c000aadf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aae2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aae6:	74 19                	je     c000ab01 <zoh_vari_process+0x56>
c000aae8:	31 d2                	xor    edx,edx
c000aaea:	39 c2                	cmp    edx,eax
c000aaec:	7d 0c                	jge    c000aafa <zoh_vari_process+0x4f>
c000aaee:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aaf0:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aaf3:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aaf7:	42                   	inc    edx
c000aaf8:	eb f0                	jmp    c000aaea <zoh_vari_process+0x3f>
c000aafa:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab01:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab04:	0f af d0             	imul   edx,eax
c000ab07:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab0a:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab0e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab15:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab18:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab1f:	dd 07                	fld    QWORD PTR [edi]
c000ab21:	dd 14 24             	fst    QWORD PTR [esp]
c000ab24:	50                   	push   eax
c000ab25:	50                   	push   eax
c000ab26:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab29:	e8 e2 fe ff ff       	call   c000aa10 <is_bad_src_ratio>
c000ab2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab32:	5a                   	pop    edx
c000ab33:	59                   	pop    ecx
c000ab34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab39:	0f 85 b5 01 00 00    	jne    c000acf4 <zoh_vari_process+0x249>
c000ab3f:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab42:	d9 e8                	fld1   
c000ab44:	d8 d1                	fcom   st(1)
c000ab46:	df e0                	fnstsw ax
c000ab48:	9e                   	sahf   
c000ab49:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab4d:	0f 86 83 00 00 00    	jbe    c000abd6 <zoh_vari_process+0x12b>
c000ab53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab56:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab59:	7d 7b                	jge    c000abd6 <zoh_vari_process+0x12b>
c000ab5b:	d9 c0                	fld    st(0)
c000ab5d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab60:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab63:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab66:	df e0                	fnstsw ax
c000ab68:	9e                   	sahf   
c000ab69:	73 6b                	jae    c000abd6 <zoh_vari_process+0x12b>
c000ab6b:	85 d2                	test   edx,edx
c000ab6d:	7e 36                	jle    c000aba5 <zoh_vari_process+0xfa>
c000ab6f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab73:	dd 07                	fld    QWORD PTR [edi]
c000ab75:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab78:	83 ec 10             	sub    esp,0x10
c000ab7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab7e:	e8 2d 4a 01 00       	call   c001f5b0 <fabs>
c000ab83:	83 c4 10             	add    esp,0x10
c000ab86:	dc 1d 78 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d78
c000ab8c:	df e0                	fnstsw ax
c000ab8e:	9e                   	sahf   
c000ab8f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab93:	76 10                	jbe    c000aba5 <zoh_vari_process+0xfa>
c000ab95:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab98:	dc 27                	fsub   QWORD PTR [edi]
c000ab9a:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab9d:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aba0:	dc 07                	fadd   QWORD PTR [edi]
c000aba2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aba5:	31 c0                	xor    eax,eax
c000aba7:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abaa:	7e 13                	jle    c000abbf <zoh_vari_process+0x114>
c000abac:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abb0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abb3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abb6:	40                   	inc    eax
c000abb7:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abba:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abbd:	eb e8                	jmp    c000aba7 <zoh_vari_process+0xfc>
c000abbf:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abc3:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abc6:	de c1                	faddp  st(1),st
c000abc8:	e9 75 ff ff ff       	jmp    c000ab42 <zoh_vari_process+0x97>
c000abcd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abd1:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abd4:	de c1                	faddp  st(1),st
c000abd6:	83 ec 10             	sub    esp,0x10
c000abd9:	dd 14 24             	fst    QWORD PTR [esp]
c000abdc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abe0:	e8 6f fe ff ff       	call   c000aa54 <fmod_one>
c000abe5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abe8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abec:	d8 e1                	fsub   st,st(1)
c000abee:	d9 c9                	fxch   st(1)
c000abf0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abf4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf7:	e8 d4 49 01 00       	call   c001f5d0 <lrint>
c000abfc:	83 c4 10             	add    esp,0x10
c000abff:	0f af e8             	imul   ebp,eax
c000ac02:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac05:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac08:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac0c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac0f:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac12:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac15:	0f 8d 80 00 00 00    	jge    c000ac9b <zoh_vari_process+0x1f0>
c000ac1b:	d9 c0                	fld    st(0)
c000ac1d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac20:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac24:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac28:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac2c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac30:	de d9                	fcompp 
c000ac32:	df e0                	fnstsw ax
c000ac34:	9e                   	sahf   
c000ac35:	72 64                	jb     c000ac9b <zoh_vari_process+0x1f0>
c000ac37:	85 d2                	test   edx,edx
c000ac39:	7e 36                	jle    c000ac71 <zoh_vari_process+0x1c6>
c000ac3b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac3f:	dd 07                	fld    QWORD PTR [edi]
c000ac41:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac44:	83 ec 10             	sub    esp,0x10
c000ac47:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac4a:	e8 61 49 01 00       	call   c001f5b0 <fabs>
c000ac4f:	83 c4 10             	add    esp,0x10
c000ac52:	dc 1d 78 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d78
c000ac58:	df e0                	fnstsw ax
c000ac5a:	9e                   	sahf   
c000ac5b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac5f:	76 10                	jbe    c000ac71 <zoh_vari_process+0x1c6>
c000ac61:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac64:	dc 27                	fsub   QWORD PTR [edi]
c000ac66:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac69:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac6c:	dc 07                	fadd   QWORD PTR [edi]
c000ac6e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac71:	31 d2                	xor    edx,edx
c000ac73:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac76:	39 d0                	cmp    eax,edx
c000ac78:	0f 8e 4f ff ff ff    	jle    c000abcd <zoh_vari_process+0x122>
c000ac7e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac81:	29 c1                	sub    ecx,eax
c000ac83:	89 c8                	mov    eax,ecx
c000ac85:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac87:	01 d0                	add    eax,edx
c000ac89:	42                   	inc    edx
c000ac8a:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac8d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac93:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac96:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac99:	eb d8                	jmp    c000ac73 <zoh_vari_process+0x1c8>
c000ac9b:	39 e9                	cmp    ecx,ebp
c000ac9d:	7d 13                	jge    c000acb2 <zoh_vari_process+0x207>
c000ac9f:	89 e8                	mov    eax,ebp
c000aca1:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000aca4:	29 c8                	sub    eax,ecx
c000aca6:	99                   	cdq    
c000aca7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acae:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acb2:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acb5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acb8:	85 c0                	test   eax,eax
c000acba:	7f 1b                	jg     c000acd7 <zoh_vari_process+0x22c>
c000acbc:	dd 04 24             	fld    QWORD PTR [esp]
c000acbf:	dd 1f                	fstp   QWORD PTR [edi]
c000acc1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acc4:	99                   	cdq    
c000acc5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acc8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000accb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acce:	99                   	cdq    
c000accf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acd2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acd5:	eb 25                	jmp    c000acfc <zoh_vari_process+0x251>
c000acd7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000acda:	31 d2                	xor    edx,edx
c000acdc:	29 e8                	sub    eax,ebp
c000acde:	c1 e0 02             	shl    eax,0x2
c000ace1:	39 d5                	cmp    ebp,edx
c000ace3:	7e d7                	jle    c000acbc <zoh_vari_process+0x211>
c000ace5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ace7:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acea:	83 c0 04             	add    eax,0x4
c000aced:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acf1:	42                   	inc    edx
c000acf2:	eb ed                	jmp    c000ace1 <zoh_vari_process+0x236>
c000acf4:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000acfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad00:	83 c4 2c             	add    esp,0x2c
c000ad03:	5b                   	pop    ebx
c000ad04:	5e                   	pop    esi
c000ad05:	5f                   	pop    edi
c000ad06:	5d                   	pop    ebp
c000ad07:	c3                   	ret    

c000ad08 <zoh_reset>:
c000ad08:	83 ec 0c             	sub    esp,0xc
c000ad0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad12:	85 c0                	test   eax,eax
c000ad14:	74 20                	je     c000ad36 <zoh_reset+0x2e>
c000ad16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad23:	51                   	push   ecx
c000ad24:	c1 e2 02             	shl    edx,0x2
c000ad27:	83 c0 1c             	add    eax,0x1c
c000ad2a:	52                   	push   edx
c000ad2b:	6a 00                	push   0x0
c000ad2d:	50                   	push   eax
c000ad2e:	e8 87 59 ff ff       	call   c00006ba <memset>
c000ad33:	83 c4 10             	add    esp,0x10
c000ad36:	83 c4 0c             	add    esp,0xc
c000ad39:	c3                   	ret    

c000ad3a <zoh_get_name>:
c000ad3a:	31 c0                	xor    eax,eax
c000ad3c:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad41:	75 05                	jne    c000ad48 <zoh_get_name+0xe>
c000ad43:	b8 14 0f 02 c0       	mov    eax,0xc0020f14
c000ad48:	c3                   	ret    

c000ad49 <zoh_get_description>:
c000ad49:	31 c0                	xor    eax,eax
c000ad4b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad50:	75 05                	jne    c000ad57 <zoh_get_description+0xe>
c000ad52:	b8 25 0f 02 c0       	mov    eax,0xc0020f25
c000ad57:	c3                   	ret    

c000ad58 <zoh_set_converter>:
c000ad58:	53                   	push   ebx
c000ad59:	b8 0a 00 00 00       	mov    eax,0xa
c000ad5e:	83 ec 08             	sub    esp,0x8
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad6a:	75 6e                	jne    c000adda <zoh_set_converter+0x82>
c000ad6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad6f:	85 c0                	test   eax,eax
c000ad71:	74 13                	je     c000ad86 <zoh_set_converter+0x2e>
c000ad73:	83 ec 0c             	sub    esp,0xc
c000ad76:	50                   	push   eax
c000ad77:	e8 67 12 00 00       	call   c000bfe3 <free>
c000ad7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad83:	83 c4 10             	add    esp,0x10
c000ad86:	50                   	push   eax
c000ad87:	50                   	push   eax
c000ad88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad92:	50                   	push   eax
c000ad93:	6a 01                	push   0x1
c000ad95:	e8 69 12 00 00       	call   c000c003 <calloc>
c000ad9a:	89 c2                	mov    edx,eax
c000ad9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad9f:	83 c4 10             	add    esp,0x10
c000ada2:	b8 01 00 00 00       	mov    eax,0x1
c000ada7:	85 d2                	test   edx,edx
c000ada9:	74 2f                	je     c000adda <zoh_set_converter+0x82>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adb4:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adba:	c7 43 24 ab aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aaab
c000adc1:	c7 43 20 ab aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aaab
c000adc8:	c7 43 28 08 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad08
c000adcf:	53                   	push   ebx
c000add0:	e8 33 ff ff ff       	call   c000ad08 <zoh_reset>
c000add5:	83 c4 10             	add    esp,0x10
c000add8:	31 c0                	xor    eax,eax
c000adda:	83 c4 08             	add    esp,0x8
c000addd:	5b                   	pop    ebx
c000adde:	c3                   	ret    
c000addf:	90                   	nop

c000ade0 <Computer::close(int, int, void*)>:
c000ade0:	57                   	push   edi
c000ade1:	56                   	push   esi
c000ade2:	53                   	push   ebx
c000ade3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ade7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adeb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000adef:	83 ec 0c             	sub    esp,0xc
c000adf2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000adf8:	e8 cf 58 00 00       	call   c00106cc <Device::closeAll()>
c000adfd:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae08:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae0c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae14:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae1c:	5b                   	pop    ebx
c000ae1d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae20:	5e                   	pop    esi
c000ae21:	5f                   	pop    edi
c000ae22:	ff e0                	jmp    eax

c000ae24 <Computer::Computer()>:
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae2b:	83 ec 08             	sub    esp,0x8
c000ae2e:	68 5c 0f 02 c0       	push   0xc0020f5c
c000ae33:	50                   	push   eax
c000ae34:	e8 0d 59 00 00       	call   c0010746 <Device::Device(char const*)>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	ba 24 11 02 c0       	mov    edx,0xc0021124
c000ae41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae45:	89 10                	mov    DWORD PTR [eax],edx
c000ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae59:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae6d:	83 ca 04             	or     edx,0x4
c000ae70:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae80:	0f b6 d0             	movzx  edx,al
c000ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae87:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae98:	0f b6 d0             	movzx  edx,al
c000ae9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeae:	8d 50 01             	lea    edx,[eax+0x1]
c000aeb1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeb5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aebb:	0f b6 d0             	movzx  edx,al
c000aebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aec6:	83 e1 3f             	and    ecx,0x3f
c000aec9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aed7:	0f b6 d0             	movzx  edx,al
c000aeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aede:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeef:	0f b6 d0             	movzx  edx,al
c000aef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af05:	8d 50 01             	lea    edx,[eax+0x1]
c000af08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af0c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af12:	0f b6 d0             	movzx  edx,al
c000af15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af19:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af1d:	83 e1 3f             	and    ecx,0x3f
c000af20:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af2e:	0f b6 d0             	movzx  edx,al
c000af31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af35:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af46:	0f b6 d0             	movzx  edx,al
c000af49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af5c:	8d 50 01             	lea    edx,[eax+0x1]
c000af5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af63:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af69:	0f b6 d0             	movzx  edx,al
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af74:	83 e1 3f             	and    ecx,0x3f
c000af77:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af7b:	90                   	nop
c000af7c:	83 c4 0c             	add    esp,0xc
c000af7f:	c3                   	ret    

c000af80 <Computer::setBootMessage(char const*)>:
c000af80:	c3                   	ret    
c000af81:	90                   	nop

c000af82 <Computer::start()>:
c000af82:	56                   	push   esi
c000af83:	53                   	push   ebx
c000af84:	50                   	push   eax
c000af85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af89:	e8 6b d9 00 00       	call   c00188f9 <lockScheduler()>
c000af8e:	e8 af dc 00 00       	call   c0018c42 <schedule()>
c000af93:	e8 63 d9 00 00       	call   c00188fb <unlockScheduler()>
c000af98:	fb                   	sti    
c000af99:	83 ec 0c             	sub    esp,0xc
c000af9c:	68 3b 07 00 00       	push   0x73b
c000afa1:	e8 66 40 00 00       	call   c000f00c <operator new(unsigned long)>
c000afa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afad:	89 c6                	mov    esi,eax
c000afaf:	ff 35 74 59 02 c0    	push   DWORD PTR ds:0xc0025974
c000afb5:	68 65 0f 02 c0       	push   0xc0020f65
c000afba:	6a 01                	push   0x1
c000afbc:	50                   	push   eax
c000afbd:	e8 8e d7 00 00       	call   c0018750 <Process::Process(bool, char const*, Process*, char**)>
c000afc2:	83 c4 20             	add    esp,0x20
c000afc5:	68 ff 00 00 00       	push   0xff
c000afca:	6a 00                	push   0x0
c000afcc:	68 61 b9 00 c0       	push   0xc000b961
c000afd1:	56                   	push   esi
c000afd2:	e8 57 da 00 00       	call   c0018a2e <Process::createThread(void (*)(void*), void*, int)>
c000afd7:	6a 7a                	push   0x7a
c000afd9:	6a 00                	push   0x0
c000afdb:	68 73 92 01 c0       	push   0xc0019273
c000afe0:	ff 35 74 59 02 c0    	push   DWORD PTR ds:0xc0025974
c000afe6:	e8 43 da 00 00       	call   c0018a2e <Process::createThread(void (*)(void*), void*, int)>
c000afeb:	83 c4 20             	add    esp,0x20
c000afee:	a3 28 59 02 c0       	mov    ds:0xc0025928,eax
c000aff3:	c6 05 2d 45 02 c0 01 	mov    BYTE PTR ds:0xc002452d,0x1
c000affa:	e8 a5 44 00 00       	call   c000f4a4 <initVFS()>
c000afff:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b005:	8b 10                	mov    edx,DWORD PTR [eax]
c000b007:	6a 00                	push   0x0
c000b009:	6a 00                	push   0x0
c000b00b:	6a 00                	push   0x0
c000b00d:	50                   	push   eax
c000b00e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b011:	e8 32 c1 00 00       	call   c0017148 <setupSystemCalls()>
c000b016:	e8 87 4f 00 00       	call   c000ffa2 <loadClockSettings()>
c000b01b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b01e:	e8 7d 56 00 00       	call   c00106a0 <Device::loadDriversForAll()>
c000b023:	5a                   	pop    edx
c000b024:	8b 1d 28 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024528
c000b02a:	59                   	pop    ecx
c000b02b:	6a 01                	push   0x1
c000b02d:	68 72 0f 02 c0       	push   0xc0020f72
c000b032:	e8 dd d2 00 00       	call   c0018314 <Thr::loadDLL(char const*, bool)>
c000b037:	5e                   	pop    esi
c000b038:	5a                   	pop    edx
c000b039:	53                   	push   ebx
c000b03a:	50                   	push   eax
c000b03b:	e8 9a d4 00 00       	call   c00184da <Thr::executeDLL(unsigned long, void*)>
c000b040:	83 c4 10             	add    esp,0x10
c000b043:	eb fe                	jmp    c000b043 <Computer::start()+0xc1>

c000b045 <firstTask()>:
c000b045:	83 ec 18             	sub    esp,0x18
c000b048:	ff 35 28 45 02 c0    	push   DWORD PTR ds:0xc0024528
c000b04e:	e8 2f ff ff ff       	call   c000af82 <Computer::start()>
c000b053:	90                   	nop

c000b054 <Computer::detectFeatures()>:
c000b054:	55                   	push   ebp
c000b055:	57                   	push   edi
c000b056:	56                   	push   esi
c000b057:	53                   	push   ebx
c000b058:	83 ec 1c             	sub    esp,0x1c
c000b05b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b05f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b069:	e8 03 53 ff ff       	call   c0000371 <detectCPUID>
c000b06e:	85 c0                	test   eax,eax
c000b070:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b076:	0f 95 c2             	setne  dl
c000b079:	83 e0 fd             	and    eax,0xfffffffd
c000b07c:	d1 e2                	shl    edx,1
c000b07e:	09 d0                	or     eax,edx
c000b080:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b086:	a8 02                	test   al,0x2
c000b088:	75 46                	jne    c000b0d0 <Computer::detectFeatures()+0x7c>
c000b08a:	f6 05 41 45 02 c0 04 	test   BYTE PTR ds:0xc0024541,0x4
c000b091:	74 07                	je     c000b09a <Computer::detectFeatures()+0x46>
c000b093:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b09a:	e8 b7 3f 01 00       	call   c001f056 <x87Detect>
c000b09f:	83 e0 01             	and    eax,0x1
c000b0a2:	c1 e0 04             	shl    eax,0x4
c000b0a5:	88 c2                	mov    dl,al
c000b0a7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ad:	83 e0 ef             	and    eax,0xffffffef
c000b0b0:	09 d0                	or     eax,edx
c000b0b2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0b8:	a8 10                	test   al,0x10
c000b0ba:	0f 85 10 01 00 00    	jne    c000b1d0 <Computer::detectFeatures()+0x17c>
c000b0c0:	84 c0                	test   al,al
c000b0c2:	0f 88 2b 01 00 00    	js     c000b1f3 <Computer::detectFeatures()+0x19f>
c000b0c8:	83 c4 1c             	add    esp,0x1c
c000b0cb:	5b                   	pop    ebx
c000b0cc:	5e                   	pop    esi
c000b0cd:	5f                   	pop    edi
c000b0ce:	5d                   	pop    ebp
c000b0cf:	c3                   	ret    
c000b0d0:	83 ec 0c             	sub    esp,0xc
c000b0d3:	6a 20                	push   0x20
c000b0d5:	e8 0f 96 00 00       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c000b0da:	83 e0 01             	and    eax,0x1
c000b0dd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b0e4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ea:	83 e0 f7             	and    eax,0xfffffff7
c000b0ed:	09 d0                	or     eax,edx
c000b0ef:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0f5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b0fc:	e8 e8 95 00 00       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c000b101:	83 e0 01             	and    eax,0x1
c000b104:	88 c2                	mov    dl,al
c000b106:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b10c:	83 e0 fe             	and    eax,0xfffffffe
c000b10f:	09 d0                	or     eax,edx
c000b111:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b117:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b11e:	e8 c6 95 00 00       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c000b123:	c1 e0 07             	shl    eax,0x7
c000b126:	88 c2                	mov    dl,al
c000b128:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b12e:	83 e0 7f             	and    eax,0x7f
c000b131:	09 d0                	or     eax,edx
c000b133:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b139:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b140:	e8 a4 95 00 00       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c000b145:	83 c4 10             	add    esp,0x10
c000b148:	83 e0 01             	and    eax,0x1
c000b14b:	c1 e0 05             	shl    eax,0x5
c000b14e:	88 c2                	mov    dl,al
c000b150:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b156:	83 e0 df             	and    eax,0xffffffdf
c000b159:	09 d0                	or     eax,edx
c000b15b:	f7 05 40 45 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024540,0x401
c000b165:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b16b:	0f 84 a8 00 00 00    	je     c000b219 <Computer::detectFeatures()+0x1c5>
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b17b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b17f:	50                   	push   eax
c000b180:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b184:	55                   	push   ebp
c000b185:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b189:	57                   	push   edi
c000b18a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b18e:	56                   	push   esi
c000b18f:	68 00 00 00 80       	push   0x80000000
c000b194:	e8 cd 94 00 00       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b199:	83 c4 20             	add    esp,0x20
c000b19c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b1a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b1a7:	0f 86 dd fe ff ff    	jbe    c000b08a <Computer::detectFeatures()+0x36>
c000b1ad:	83 ec 0c             	sub    esp,0xc
c000b1b0:	50                   	push   eax
c000b1b1:	55                   	push   ebp
c000b1b2:	57                   	push   edi
c000b1b3:	56                   	push   esi
c000b1b4:	68 01 00 00 80       	push   0x80000001
c000b1b9:	e8 a8 94 00 00       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1be:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b1c8:	83 c4 20             	add    esp,0x20
c000b1cb:	e9 ba fe ff ff       	jmp    c000b08a <Computer::detectFeatures()+0x36>
c000b1d0:	e8 3b 3e 01 00       	call   c001f010 <sseDetect>
c000b1d5:	88 c2                	mov    dl,al
c000b1d7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1dd:	c1 e2 07             	shl    edx,0x7
c000b1e0:	83 e0 7f             	and    eax,0x7f
c000b1e3:	09 d0                	or     eax,edx
c000b1e5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1eb:	84 c0                	test   al,al
c000b1ed:	0f 89 d5 fe ff ff    	jns    c000b0c8 <Computer::detectFeatures()+0x74>
c000b1f3:	e8 08 3e 01 00       	call   c001f000 <avxDetect>
c000b1f8:	83 e0 01             	and    eax,0x1
c000b1fb:	c1 e0 05             	shl    eax,0x5
c000b1fe:	88 c2                	mov    dl,al
c000b200:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b206:	83 e0 df             	and    eax,0xffffffdf
c000b209:	09 d0                	or     eax,edx
c000b20b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b211:	83 c4 1c             	add    esp,0x1c
c000b214:	5b                   	pop    ebx
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	5d                   	pop    ebp
c000b218:	c3                   	ret    
c000b219:	83 ec 0c             	sub    esp,0xc
c000b21c:	68 00 02 00 00       	push   0x200
c000b221:	e8 c3 94 00 00       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c000b226:	83 c4 10             	add    esp,0x10
c000b229:	e9 43 ff ff ff       	jmp    c000b171 <Computer::detectFeatures()+0x11d>

c000b22e <Computer::displayFeatures()>:
c000b22e:	53                   	push   ebx
c000b22f:	83 ec 14             	sub    esp,0x14
c000b232:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b236:	68 96 0f 02 c0       	push   0xc0020f96
c000b23b:	e8 01 3f 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b24a:	0f 85 73 02 00 00    	jne    c000b4c3 <Computer::displayFeatures()+0x295>
c000b250:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b255:	83 ec 08             	sub    esp,0x8
c000b258:	50                   	push   eax
c000b259:	68 a9 0f 02 c0       	push   0xc0020fa9
c000b25e:	e8 de 3e 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b263:	83 c4 10             	add    esp,0x10
c000b266:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b26d:	0f 85 8c 02 00 00    	jne    c000b4ff <Computer::displayFeatures()+0x2d1>
c000b273:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b278:	83 ec 08             	sub    esp,0x8
c000b27b:	50                   	push   eax
c000b27c:	68 ba 0f 02 c0       	push   0xc0020fba
c000b281:	e8 bb 3e 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b290:	0f 85 5f 02 00 00    	jne    c000b4f5 <Computer::displayFeatures()+0x2c7>
c000b296:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b29b:	83 ec 08             	sub    esp,0x8
c000b29e:	50                   	push   eax
c000b29f:	68 cb 0f 02 c0       	push   0xc0020fcb
c000b2a4:	e8 98 3e 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b2b3:	0f 85 32 02 00 00    	jne    c000b4eb <Computer::displayFeatures()+0x2bd>
c000b2b9:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b2be:	83 ec 08             	sub    esp,0x8
c000b2c1:	50                   	push   eax
c000b2c2:	68 dc 0f 02 c0       	push   0xc0020fdc
c000b2c7:	e8 75 3e 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b2d6:	0f 85 05 02 00 00    	jne    c000b4e1 <Computer::displayFeatures()+0x2b3>
c000b2dc:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b2e1:	83 ec 08             	sub    esp,0x8
c000b2e4:	50                   	push   eax
c000b2e5:	68 ed 0f 02 c0       	push   0xc0020fed
c000b2ea:	e8 52 3e 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b2ef:	83 c4 10             	add    esp,0x10
c000b2f2:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b2f9:	0f 85 d8 01 00 00    	jne    c000b4d7 <Computer::displayFeatures()+0x2a9>
c000b2ff:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b304:	83 ec 08             	sub    esp,0x8
c000b307:	50                   	push   eax
c000b308:	68 fe 0f 02 c0       	push   0xc0020ffe
c000b30d:	e8 2f 3e 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b312:	83 c4 10             	add    esp,0x10
c000b315:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b31c:	0f 85 ab 01 00 00    	jne    c000b4cd <Computer::displayFeatures()+0x29f>
c000b322:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b327:	83 ec 08             	sub    esp,0x8
c000b32a:	50                   	push   eax
c000b32b:	68 0f 10 02 c0       	push   0xc002100f
c000b330:	e8 0c 3e 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b335:	83 c4 10             	add    esp,0x10
c000b338:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b33f:	0f 88 1b 02 00 00    	js     c000b560 <Computer::displayFeatures()+0x332>
c000b345:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b34a:	83 ec 08             	sub    esp,0x8
c000b34d:	50                   	push   eax
c000b34e:	68 20 10 02 c0       	push   0xc0021020
c000b353:	e8 e9 3d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b362:	0f 85 a1 01 00 00    	jne    c000b509 <Computer::displayFeatures()+0x2db>
c000b368:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b36d:	83 ec 08             	sub    esp,0x8
c000b370:	50                   	push   eax
c000b371:	68 31 10 02 c0       	push   0xc0021031
c000b376:	e8 c6 3d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b37b:	83 c4 10             	add    esp,0x10
c000b37e:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b385:	0f 85 cb 01 00 00    	jne    c000b556 <Computer::displayFeatures()+0x328>
c000b38b:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b390:	83 ec 08             	sub    esp,0x8
c000b393:	50                   	push   eax
c000b394:	68 42 10 02 c0       	push   0xc0021042
c000b399:	e8 a3 3d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b3a8:	0f 85 9e 01 00 00    	jne    c000b54c <Computer::displayFeatures()+0x31e>
c000b3ae:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b3b3:	83 ec 08             	sub    esp,0x8
c000b3b6:	50                   	push   eax
c000b3b7:	68 53 10 02 c0       	push   0xc0021053
c000b3bc:	e8 80 3d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b3c1:	83 c4 10             	add    esp,0x10
c000b3c4:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b3cb:	0f 85 71 01 00 00    	jne    c000b542 <Computer::displayFeatures()+0x314>
c000b3d1:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b3d6:	83 ec 08             	sub    esp,0x8
c000b3d9:	50                   	push   eax
c000b3da:	68 64 10 02 c0       	push   0xc0021064
c000b3df:	e8 5d 3d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b3e4:	83 c4 10             	add    esp,0x10
c000b3e7:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b3ee:	0f 85 44 01 00 00    	jne    c000b538 <Computer::displayFeatures()+0x30a>
c000b3f4:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b3f9:	83 ec 08             	sub    esp,0x8
c000b3fc:	50                   	push   eax
c000b3fd:	68 75 10 02 c0       	push   0xc0021075
c000b402:	e8 3a 3d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b407:	83 c4 10             	add    esp,0x10
c000b40a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b411:	0f 85 17 01 00 00    	jne    c000b52e <Computer::displayFeatures()+0x300>
c000b417:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b41c:	83 ec 08             	sub    esp,0x8
c000b41f:	50                   	push   eax
c000b420:	68 86 10 02 c0       	push   0xc0021086
c000b425:	e8 17 3d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b42a:	83 c4 10             	add    esp,0x10
c000b42d:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b434:	0f 85 ea 00 00 00    	jne    c000b524 <Computer::displayFeatures()+0x2f6>
c000b43a:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b43f:	83 ec 08             	sub    esp,0x8
c000b442:	50                   	push   eax
c000b443:	68 97 10 02 c0       	push   0xc0021097
c000b448:	e8 f4 3c 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b44d:	83 c4 10             	add    esp,0x10
c000b450:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b457:	0f 88 0d 01 00 00    	js     c000b56a <Computer::displayFeatures()+0x33c>
c000b45d:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b462:	83 ec 08             	sub    esp,0x8
c000b465:	50                   	push   eax
c000b466:	68 a8 10 02 c0       	push   0xc00210a8
c000b46b:	e8 d1 3c 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b47a:	0f 85 9a 00 00 00    	jne    c000b51a <Computer::displayFeatures()+0x2ec>
c000b480:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b485:	83 ec 08             	sub    esp,0x8
c000b488:	50                   	push   eax
c000b489:	68 b9 10 02 c0       	push   0xc00210b9
c000b48e:	e8 ae 3c 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b493:	83 c4 10             	add    esp,0x10
c000b496:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b49d:	75 74                	jne    c000b513 <Computer::displayFeatures()+0x2e5>
c000b49f:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c000b4a4:	83 ec 08             	sub    esp,0x8
c000b4a7:	50                   	push   eax
c000b4a8:	68 ca 10 02 c0       	push   0xc00210ca
c000b4ad:	e8 8f 3c 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b4b2:	c7 44 24 20 a6 26 02 c0 	mov    DWORD PTR [esp+0x20],0xc00226a6
c000b4ba:	83 c4 18             	add    esp,0x18
c000b4bd:	5b                   	pop    ebx
c000b4be:	e9 7e 3c 00 00       	jmp    c000f141 <Dbg::kprintf(char const*, ...)>
c000b4c3:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b4c8:	e9 88 fd ff ff       	jmp    c000b255 <Computer::displayFeatures()+0x27>
c000b4cd:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b4d2:	e9 50 fe ff ff       	jmp    c000b327 <Computer::displayFeatures()+0xf9>
c000b4d7:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b4dc:	e9 23 fe ff ff       	jmp    c000b304 <Computer::displayFeatures()+0xd6>
c000b4e1:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b4e6:	e9 f6 fd ff ff       	jmp    c000b2e1 <Computer::displayFeatures()+0xb3>
c000b4eb:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b4f0:	e9 c9 fd ff ff       	jmp    c000b2be <Computer::displayFeatures()+0x90>
c000b4f5:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b4fa:	e9 9c fd ff ff       	jmp    c000b29b <Computer::displayFeatures()+0x6d>
c000b4ff:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b504:	e9 6f fd ff ff       	jmp    c000b278 <Computer::displayFeatures()+0x4a>
c000b509:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b50e:	e9 5a fe ff ff       	jmp    c000b36d <Computer::displayFeatures()+0x13f>
c000b513:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b518:	eb 8a                	jmp    c000b4a4 <Computer::displayFeatures()+0x276>
c000b51a:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b51f:	e9 61 ff ff ff       	jmp    c000b485 <Computer::displayFeatures()+0x257>
c000b524:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b529:	e9 11 ff ff ff       	jmp    c000b43f <Computer::displayFeatures()+0x211>
c000b52e:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b533:	e9 e4 fe ff ff       	jmp    c000b41c <Computer::displayFeatures()+0x1ee>
c000b538:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b53d:	e9 b7 fe ff ff       	jmp    c000b3f9 <Computer::displayFeatures()+0x1cb>
c000b542:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b547:	e9 8a fe ff ff       	jmp    c000b3d6 <Computer::displayFeatures()+0x1a8>
c000b54c:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b551:	e9 5d fe ff ff       	jmp    c000b3b3 <Computer::displayFeatures()+0x185>
c000b556:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b55b:	e9 30 fe ff ff       	jmp    c000b390 <Computer::displayFeatures()+0x162>
c000b560:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b565:	e9 e0 fd ff ff       	jmp    c000b34a <Computer::displayFeatures()+0x11c>
c000b56a:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c000b56f:	e9 ee fe ff ff       	jmp    c000b462 <Computer::displayFeatures()+0x234>

c000b574 <Computer::rdmsr(unsigned int)>:
c000b574:	83 ec 0c             	sub    esp,0xc
c000b577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b57b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b582:	74 0a                	je     c000b58e <Computer::rdmsr(unsigned int)+0x1a>
c000b584:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b588:	0f 32                	rdmsr  
c000b58a:	83 c4 0c             	add    esp,0xc
c000b58d:	c3                   	ret    
c000b58e:	83 ec 0c             	sub    esp,0xc
c000b591:	68 db 10 02 c0       	push   0xc00210db
c000b596:	e8 71 a3 00 00       	call   c001590c <Krnl::panic(char const*)>
c000b59b:	83 c4 10             	add    esp,0x10
c000b59e:	eb e4                	jmp    c000b584 <Computer::rdmsr(unsigned int)+0x10>

c000b5a0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5a0:	57                   	push   edi
c000b5a1:	56                   	push   esi
c000b5a2:	52                   	push   edx
c000b5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5ab:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5af:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5b6:	74 0e                	je     c000b5c6 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5bc:	89 f0                	mov    eax,esi
c000b5be:	89 fa                	mov    edx,edi
c000b5c0:	0f 30                	wrmsr  
c000b5c2:	58                   	pop    eax
c000b5c3:	5e                   	pop    esi
c000b5c4:	5f                   	pop    edi
c000b5c5:	c3                   	ret    
c000b5c6:	83 ec 0c             	sub    esp,0xc
c000b5c9:	68 e1 10 02 c0       	push   0xc00210e1
c000b5ce:	e8 39 a3 00 00       	call   c001590c <Krnl::panic(char const*)>
c000b5d3:	83 c4 10             	add    esp,0x10
c000b5d6:	eb e0                	jmp    c000b5b8 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5d8 <Computer::nmiEnabled()>:
c000b5d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5dc:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5e2:	c3                   	ret    
c000b5e3:	90                   	nop

c000b5e4 <Computer::readCMOS(unsigned char)>:
c000b5e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b5ef:	19 c0                	sbb    eax,eax
c000b5f1:	83 e0 80             	and    eax,0xffffff80
c000b5f4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b5f8:	e6 70                	out    0x70,al
c000b5fa:	e4 71                	in     al,0x71
c000b5fc:	c3                   	ret    
c000b5fd:	90                   	nop

c000b5fe <Computer::enableNMI(bool)>:
c000b5fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b606:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b60c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b614:	eb ce                	jmp    c000b5e4 <Computer::readCMOS(unsigned char)>

c000b616 <Computer::open(int, int, void*)>:
c000b616:	56                   	push   esi
c000b617:	53                   	push   ebx
c000b618:	83 ec 10             	sub    esp,0x10
c000b61b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b61f:	f6 05 40 45 02 c0 04 	test   BYTE PTR ds:0xc0024540,0x4
c000b626:	68 68 22 00 00       	push   0x2268
c000b62b:	0f 94 05 60 39 02 c0 	sete   BYTE PTR ds:0xc0023960
c000b632:	e8 d5 39 00 00       	call   c000f00c <operator new(unsigned long)>
c000b637:	89 04 24             	mov    DWORD PTR [esp],eax
c000b63a:	89 c6                	mov    esi,eax
c000b63c:	e8 cd 86 00 00       	call   c0013d0e <ACPI::ACPI()>
c000b641:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b647:	58                   	pop    eax
c000b648:	5a                   	pop    edx
c000b649:	56                   	push   esi
c000b64a:	53                   	push   ebx
c000b64b:	e8 06 4f 00 00       	call   c0010556 <Device::addChild(Device*)>
c000b650:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b653:	e8 fc f9 ff ff       	call   c000b054 <Computer::detectFeatures()>
c000b658:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b65b:	e8 ce fb ff ff       	call   c000b22e <Computer::displayFeatures()>
c000b660:	59                   	pop    ecx
c000b661:	5e                   	pop    esi
c000b662:	6a 01                	push   0x1
c000b664:	53                   	push   ebx
c000b665:	e8 94 ff ff ff       	call   c000b5fe <Computer::enableNMI(bool)>
c000b66a:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b671:	e8 96 39 00 00       	call   c000f00c <operator new(unsigned long)>
c000b676:	89 04 24             	mov    DWORD PTR [esp],eax
c000b679:	89 c6                	mov    esi,eax
c000b67b:	e8 34 91 00 00       	call   c00147b4 <CPU::CPU()>
c000b680:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b686:	58                   	pop    eax
c000b687:	5a                   	pop    edx
c000b688:	56                   	push   esi
c000b689:	53                   	push   ebx
c000b68a:	e8 c7 4e 00 00       	call   c0010556 <Device::addChild(Device*)>
c000b68f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b695:	8b 10                	mov    edx,DWORD PTR [eax]
c000b697:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b69b:	6a 00                	push   0x0
c000b69d:	6a 00                	push   0x0
c000b69f:	50                   	push   eax
c000b6a0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6a3:	83 c4 20             	add    esp,0x20
c000b6a6:	e8 13 54 00 00       	call   c0010abe <setupFPU()>
c000b6ab:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6b1:	85 c0                	test   eax,eax
c000b6b3:	74 1f                	je     c000b6d4 <Computer::open(int, int, void*)+0xbe>
c000b6b5:	83 ec 08             	sub    esp,0x8
c000b6b8:	50                   	push   eax
c000b6b9:	53                   	push   ebx
c000b6ba:	e8 97 4e 00 00       	call   c0010556 <Device::addChild(Device*)>
c000b6bf:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6c5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6c7:	6a 00                	push   0x0
c000b6c9:	6a 00                	push   0x0
c000b6cb:	6a 00                	push   0x0
c000b6cd:	50                   	push   eax
c000b6ce:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6d1:	83 c4 20             	add    esp,0x20
c000b6d4:	83 ec 0c             	sub    esp,0xc
c000b6d7:	68 45 b0 00 c0       	push   0xc000b045
c000b6dc:	e8 4c d4 00 00       	call   c0018b2d <setupMultitasking(void (*)())>
c000b6e1:	83 c4 14             	add    esp,0x14
c000b6e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b6e9:	5b                   	pop    ebx
c000b6ea:	5e                   	pop    esi
c000b6eb:	c3                   	ret    

c000b6ec <Computer::disableNMI()>:
c000b6ec:	6a 00                	push   0x0
c000b6ee:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b6f2:	e8 07 ff ff ff       	call   c000b5fe <Computer::enableNMI(bool)>
c000b6f7:	58                   	pop    eax
c000b6f8:	5a                   	pop    edx
c000b6f9:	c3                   	ret    

c000b6fa <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b6fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fe:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b705:	19 c0                	sbb    eax,eax
c000b707:	83 e0 80             	and    eax,0xffffff80
c000b70a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b70e:	e6 70                	out    0x70,al
c000b710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b714:	e6 71                	out    0x71,al
c000b716:	c3                   	ret    
c000b717:	90                   	nop

c000b718 <Computer::handleNMI()>:
c000b718:	56                   	push   esi
c000b719:	53                   	push   ebx
c000b71a:	83 ec 10             	sub    esp,0x10
c000b71d:	e4 92                	in     al,0x92
c000b71f:	89 c6                	mov    esi,eax
c000b721:	e4 61                	in     al,0x61
c000b723:	68 e7 10 02 c0       	push   0xc00210e7
c000b728:	88 c3                	mov    bl,al
c000b72a:	e8 12 3a 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b72f:	83 c4 10             	add    esp,0x10
c000b732:	83 e6 10             	and    esi,0x10
c000b735:	75 0d                	jne    c000b744 <Computer::handleNMI()+0x2c>
c000b737:	f6 c3 40             	test   bl,0x40
c000b73a:	75 1d                	jne    c000b759 <Computer::handleNMI()+0x41>
c000b73c:	84 db                	test   bl,bl
c000b73e:	78 2d                	js     c000b76d <Computer::handleNMI()+0x55>
c000b740:	58                   	pop    eax
c000b741:	5b                   	pop    ebx
c000b742:	5e                   	pop    esi
c000b743:	c3                   	ret    
c000b744:	83 ec 0c             	sub    esp,0xc
c000b747:	68 f8 10 02 c0       	push   0xc00210f8
c000b74c:	e8 bb a1 00 00       	call   c001590c <Krnl::panic(char const*)>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	f6 c3 40             	test   bl,0x40
c000b757:	74 e3                	je     c000b73c <Computer::handleNMI()+0x24>
c000b759:	83 ec 0c             	sub    esp,0xc
c000b75c:	68 05 11 02 c0       	push   0xc0021105
c000b761:	e8 a6 a1 00 00       	call   c001590c <Krnl::panic(char const*)>
c000b766:	83 c4 10             	add    esp,0x10
c000b769:	84 db                	test   bl,bl
c000b76b:	79 d3                	jns    c000b740 <Computer::handleNMI()+0x28>
c000b76d:	c7 44 24 10 0f 11 02 c0 	mov    DWORD PTR [esp+0x10],0xc002110f
c000b775:	5a                   	pop    edx
c000b776:	5b                   	pop    ebx
c000b777:	5e                   	pop    esi
c000b778:	e9 8f a1 00 00       	jmp    c001590c <Krnl::panic(char const*)>
c000b77d:	90                   	nop

c000b77e <Computer::setDiskActivityLight(int, bool)>:
c000b77e:	56                   	push   esi
c000b77f:	53                   	push   ebx
c000b780:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b784:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b789:	77 1b                	ja     c000b7a6 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b78b:	e4 92                	in     al,0x92
c000b78d:	bb 40 00 00 00       	mov    ebx,0x40
c000b792:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b796:	89 da                	mov    edx,ebx
c000b798:	d3 e2                	shl    edx,cl
c000b79a:	89 f1                	mov    ecx,esi
c000b79c:	f7 d2                	not    edx
c000b79e:	d3 e3                	shl    ebx,cl
c000b7a0:	21 d0                	and    eax,edx
c000b7a2:	09 d8                	or     eax,ebx
c000b7a4:	e6 92                	out    0x92,al
c000b7a6:	5b                   	pop    ebx
c000b7a7:	5e                   	pop    esi
c000b7a8:	c3                   	ret    
c000b7a9:	90                   	nop

c000b7aa <GDTEntry::setBase(unsigned int)>:
c000b7aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7b2:	89 c1                	mov    ecx,eax
c000b7b4:	c1 e9 10             	shr    ecx,0x10
c000b7b7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7bb:	c1 e8 18             	shr    eax,0x18
c000b7be:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7c1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7c4:	c3                   	ret    
c000b7c5:	90                   	nop

c000b7c6 <GDTEntry::setLimit(unsigned int)>:
c000b7c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7ce:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7d1:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7d4:	c1 e8 10             	shr    eax,0x10
c000b7d7:	83 e2 f0             	and    edx,0xfffffff0
c000b7da:	83 e0 0f             	and    eax,0xf
c000b7dd:	09 d0                	or     eax,edx
c000b7df:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7e2:	c3                   	ret    
c000b7e3:	90                   	nop

c000b7e4 <GDT::GDT()>:
c000b7e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7f8:	90                   	nop
c000b7f9:	c3                   	ret    

c000b7fa <GDT::addEntry(GDTEntry)>:
c000b7fa:	53                   	push   ebx
c000b7fb:	83 ec 0c             	sub    esp,0xc
c000b7fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b802:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b804:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b80b:	52                   	push   edx
c000b80c:	50                   	push   eax
c000b80d:	68 48 11 02 c0       	push   0xc0021148
c000b812:	e8 2a 39 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000b817:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b819:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b81d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b821:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b825:	8d 50 01             	lea    edx,[eax+0x1]
c000b828:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b82c:	89 13                	mov    DWORD PTR [ebx],edx
c000b82e:	c1 e0 03             	shl    eax,0x3
c000b831:	83 c4 18             	add    esp,0x18
c000b834:	5b                   	pop    ebx
c000b835:	c3                   	ret    

c000b836 <GDT::getNumberOfEntries()>:
c000b836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b83a:	8b 00                	mov    eax,DWORD PTR [eax]
c000b83c:	c3                   	ret    
c000b83d:	90                   	nop

c000b83e <GDT::flush()>:
c000b83e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b842:	83 c0 04             	add    eax,0x4
c000b845:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b848:	a3 32 45 02 c0       	mov    ds:0xc0024532,eax
c000b84d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b854:	66 89 15 30 45 02 c0 	mov    WORD PTR ds:0xc0024530,dx
c000b85b:	e9 85 4b ff ff       	jmp    c00003e5 <loadGDT>

c000b860 <GDT::setup()>:
c000b860:	55                   	push   ebp
c000b861:	57                   	push   edi
c000b862:	56                   	push   esi
c000b863:	53                   	push   ebx
c000b864:	83 ec 3c             	sub    esp,0x3c
c000b867:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b86b:	6a 00                	push   0x0
c000b86d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b871:	53                   	push   ebx
c000b872:	e8 33 ff ff ff       	call   c000b7aa <GDTEntry::setBase(unsigned int)>
c000b877:	6a 00                	push   0x0
c000b879:	53                   	push   ebx
c000b87a:	e8 47 ff ff ff       	call   c000b7c6 <GDTEntry::setLimit(unsigned int)>
c000b87f:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b887:	6a 00                	push   0x0
c000b889:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b88d:	53                   	push   ebx
c000b88e:	e8 17 ff ff ff       	call   c000b7aa <GDTEntry::setBase(unsigned int)>
c000b893:	68 ff ff ff 00       	push   0xffffff
c000b898:	53                   	push   ebx
c000b899:	e8 28 ff ff ff       	call   c000b7c6 <GDTEntry::setLimit(unsigned int)>
c000b89e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8a2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8a7:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8ac:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8b0:	83 c4 20             	add    esp,0x20
c000b8b3:	6a 00                	push   0x0
c000b8b5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8b9:	53                   	push   ebx
c000b8ba:	e8 eb fe ff ff       	call   c000b7aa <GDTEntry::setBase(unsigned int)>
c000b8bf:	68 ff ff ff 00       	push   0xffffff
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 fc fe ff ff       	call   c000b7c6 <GDTEntry::setLimit(unsigned int)>
c000b8ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8ce:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8d2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8db:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8e0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8e4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b8e8:	89 d8                	mov    eax,ebx
c000b8ea:	80 cc 60             	or     ah,0x60
c000b8ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b8f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b8f9:	83 c4 0c             	add    esp,0xc
c000b8fc:	89 f8                	mov    eax,edi
c000b8fe:	80 cc 60             	or     ah,0x60
c000b901:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b905:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b909:	89 c7                	mov    edi,eax
c000b90b:	55                   	push   ebp
c000b90c:	e8 e9 fe ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000b911:	83 c4 0c             	add    esp,0xc
c000b914:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b918:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b91c:	55                   	push   ebp
c000b91d:	e8 d8 fe ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000b922:	83 c4 0c             	add    esp,0xc
c000b925:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b929:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b92d:	55                   	push   ebp
c000b92e:	e8 c7 fe ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000b933:	83 c4 0c             	add    esp,0xc
c000b936:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b93a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b93e:	53                   	push   ebx
c000b93f:	51                   	push   ecx
c000b940:	55                   	push   ebp
c000b941:	e8 b4 fe ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000b946:	83 c4 0c             	add    esp,0xc
c000b949:	57                   	push   edi
c000b94a:	56                   	push   esi
c000b94b:	55                   	push   ebp
c000b94c:	e8 a9 fe ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000b951:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b954:	e8 e5 fe ff ff       	call   c000b83e <GDT::flush()>
c000b959:	83 c4 4c             	add    esp,0x4c
c000b95c:	5b                   	pop    ebx
c000b95d:	5e                   	pop    esi
c000b95e:	5f                   	pop    edi
c000b95f:	5d                   	pop    ebp
c000b960:	c3                   	ret    

c000b961 <idleFunction(void*)>:
c000b961:	53                   	push   ebx
c000b962:	83 ec 08             	sub    esp,0x8
c000b965:	e8 91 cf 00 00       	call   c00188fb <unlockScheduler()>
c000b96a:	e8 31 8e 00 00       	call   c00147a0 <thisCPU()>
c000b96f:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b976:	74 41                	je     c000b9b9 <idleFunction(void*)+0x58>
c000b978:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c000b97d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b984:	74 33                	je     c000b9b9 <idleFunction(void*)+0x58>
c000b986:	52                   	push   edx
c000b987:	31 db                	xor    ebx,ebx
c000b989:	52                   	push   edx
c000b98a:	68 e1 00 00 00       	push   0xe1
c000b98f:	50                   	push   eax
c000b990:	e8 df fb ff ff       	call   c000b574 <Computer::rdmsr(unsigned int)>
c000b995:	53                   	push   ebx
c000b996:	83 e0 02             	and    eax,0x2
c000b999:	50                   	push   eax
c000b99a:	68 e1 00 00 00       	push   0xe1
c000b99f:	ff 35 28 45 02 c0    	push   DWORD PTR ds:0xc0024528
c000b9a5:	e8 f6 fb ff ff       	call   c000b5a0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9aa:	83 c4 20             	add    esp,0x20
c000b9ad:	e8 50 48 ff ff       	call   c0000202 <doTPAUSE>
c000b9b2:	e8 99 3c 01 00       	call   c001f650 <idleCommon()>
c000b9b7:	eb f4                	jmp    c000b9ad <idleFunction(void*)+0x4c>
c000b9b9:	fb                   	sti    
c000b9ba:	f4                   	hlt    
c000b9bb:	e8 90 3c 01 00       	call   c001f650 <idleCommon()>
c000b9c0:	eb f7                	jmp    c000b9b9 <idleFunction(void*)+0x58>

c000b9c2 <IDTEntry::IDTEntry(bool)>:
c000b9c2:	83 ec 04             	sub    esp,0x4
c000b9c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9c9:	88 04 24             	mov    BYTE PTR [esp],al
c000b9cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9d0:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9da:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e2:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9e5:	83 e2 f0             	and    edx,0xfffffff0
c000b9e8:	83 ca 0e             	or     edx,0xe
c000b9eb:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f2:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9f5:	83 e2 ef             	and    edx,0xffffffef
c000b9f8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9fb:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b9ff:	74 04                	je     c000ba05 <IDTEntry::IDTEntry(bool)+0x43>
c000ba01:	b2 03                	mov    dl,0x3
c000ba03:	eb 02                	jmp    c000ba07 <IDTEntry::IDTEntry(bool)+0x45>
c000ba05:	b2 00                	mov    dl,0x0
c000ba07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba0b:	83 e2 03             	and    edx,0x3
c000ba0e:	88 d1                	mov    cl,dl
c000ba10:	c1 e1 05             	shl    ecx,0x5
c000ba13:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba16:	83 e2 9f             	and    edx,0xffffff9f
c000ba19:	09 ca                	or     edx,ecx
c000ba1b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba22:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba25:	83 ca 80             	or     edx,0xffffff80
c000ba28:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba2b:	90                   	nop
c000ba2c:	83 c4 04             	add    esp,0x4
c000ba2f:	c3                   	ret    

c000ba30 <IDTEntry::setOffset(unsigned int)>:
c000ba30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba38:	66 89 02             	mov    WORD PTR [edx],ax
c000ba3b:	c1 e8 10             	shr    eax,0x10
c000ba3e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba42:	c3                   	ret    
c000ba43:	90                   	nop

c000ba44 <IDT::IDT()>:
c000ba44:	90                   	nop
c000ba45:	c3                   	ret    

c000ba46 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba4a:	83 c0 30             	add    eax,0x30
c000ba4d:	c3                   	ret    

c000ba4e <IDT::addEntry(IDTEntry, int)>:
c000ba4e:	53                   	push   ebx
c000ba4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba5f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba62:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba66:	5b                   	pop    ebx
c000ba67:	c3                   	ret    

c000ba68 <IDT::addEntry(int, void (*)(), bool)>:
c000ba68:	53                   	push   ebx
c000ba69:	83 ec 10             	sub    esp,0x10
c000ba6c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba71:	50                   	push   eax
c000ba72:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba76:	53                   	push   ebx
c000ba77:	e8 46 ff ff ff       	call   c000b9c2 <IDTEntry::IDTEntry(bool)>
c000ba7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba80:	53                   	push   ebx
c000ba81:	e8 aa ff ff ff       	call   c000ba30 <IDTEntry::setOffset(unsigned int)>
c000ba86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba8e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba96:	e8 b3 ff ff ff       	call   c000ba4e <IDT::addEntry(IDTEntry, int)>
c000ba9b:	83 c4 30             	add    esp,0x30
c000ba9e:	5b                   	pop    ebx
c000ba9f:	c3                   	ret    

c000baa0 <IDT::flush()>:
c000baa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa4:	66 c7 05 38 45 02 c0 ff 07 	mov    WORD PTR ds:0xc0024538,0x7ff
c000baad:	a3 3a 45 02 c0       	mov    ds:0xc002453a,eax
c000bab2:	0f 01 1d 38 45 02 c0 	lidtd  ds:0xc0024538
c000bab9:	c3                   	ret    

c000baba <IDT::setup()>:
c000baba:	57                   	push   edi
c000babb:	56                   	push   esi
c000babc:	53                   	push   ebx
c000babd:	83 ec 10             	sub    esp,0x10
c000bac0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bac4:	6a 00                	push   0x0
c000bac6:	68 05 04 00 c0       	push   0xc0000405
c000bacb:	6a 00                	push   0x0
c000bacd:	53                   	push   ebx
c000bace:	e8 95 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bad3:	6a 00                	push   0x0
c000bad5:	68 15 04 00 c0       	push   0xc0000415
c000bada:	6a 01                	push   0x1
c000badc:	53                   	push   ebx
c000badd:	e8 86 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bae2:	83 c4 20             	add    esp,0x20
c000bae5:	6a 00                	push   0x0
c000bae7:	68 1f 04 00 c0       	push   0xc000041f
c000baec:	6a 02                	push   0x2
c000baee:	53                   	push   ebx
c000baef:	e8 74 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000baf4:	6a 00                	push   0x0
c000baf6:	68 29 04 00 c0       	push   0xc0000429
c000bafb:	6a 03                	push   0x3
c000bafd:	53                   	push   ebx
c000bafe:	e8 65 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb03:	83 c4 20             	add    esp,0x20
c000bb06:	6a 00                	push   0x0
c000bb08:	68 33 04 00 c0       	push   0xc0000433
c000bb0d:	6a 04                	push   0x4
c000bb0f:	53                   	push   ebx
c000bb10:	e8 53 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb15:	6a 00                	push   0x0
c000bb17:	68 3d 04 00 c0       	push   0xc000043d
c000bb1c:	6a 05                	push   0x5
c000bb1e:	53                   	push   ebx
c000bb1f:	e8 44 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb24:	83 c4 20             	add    esp,0x20
c000bb27:	6a 00                	push   0x0
c000bb29:	68 47 04 00 c0       	push   0xc0000447
c000bb2e:	6a 06                	push   0x6
c000bb30:	53                   	push   ebx
c000bb31:	e8 32 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb36:	6a 00                	push   0x0
c000bb38:	68 51 04 00 c0       	push   0xc0000451
c000bb3d:	6a 07                	push   0x7
c000bb3f:	53                   	push   ebx
c000bb40:	e8 23 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb45:	83 c4 20             	add    esp,0x20
c000bb48:	6a 00                	push   0x0
c000bb4a:	68 5b 04 00 c0       	push   0xc000045b
c000bb4f:	6a 08                	push   0x8
c000bb51:	53                   	push   ebx
c000bb52:	e8 11 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb57:	6a 00                	push   0x0
c000bb59:	68 63 04 00 c0       	push   0xc0000463
c000bb5e:	6a 09                	push   0x9
c000bb60:	53                   	push   ebx
c000bb61:	e8 02 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb66:	83 c4 20             	add    esp,0x20
c000bb69:	6a 00                	push   0x0
c000bb6b:	68 6d 04 00 c0       	push   0xc000046d
c000bb70:	6a 0a                	push   0xa
c000bb72:	53                   	push   ebx
c000bb73:	e8 f0 fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb78:	6a 00                	push   0x0
c000bb7a:	68 75 04 00 c0       	push   0xc0000475
c000bb7f:	6a 0b                	push   0xb
c000bb81:	53                   	push   ebx
c000bb82:	e8 e1 fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb87:	83 c4 20             	add    esp,0x20
c000bb8a:	6a 00                	push   0x0
c000bb8c:	68 7d 04 00 c0       	push   0xc000047d
c000bb91:	6a 0c                	push   0xc
c000bb93:	53                   	push   ebx
c000bb94:	e8 cf fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb99:	6a 00                	push   0x0
c000bb9b:	68 85 04 00 c0       	push   0xc0000485
c000bba0:	6a 0d                	push   0xd
c000bba2:	53                   	push   ebx
c000bba3:	e8 c0 fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bba8:	83 c4 20             	add    esp,0x20
c000bbab:	6a 00                	push   0x0
c000bbad:	68 8d 04 00 c0       	push   0xc000048d
c000bbb2:	6a 0e                	push   0xe
c000bbb4:	53                   	push   ebx
c000bbb5:	e8 ae fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bbba:	6a 00                	push   0x0
c000bbbc:	68 95 04 00 c0       	push   0xc0000495
c000bbc1:	6a 0f                	push   0xf
c000bbc3:	53                   	push   ebx
c000bbc4:	e8 9f fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bbc9:	83 c4 20             	add    esp,0x20
c000bbcc:	6a 00                	push   0x0
c000bbce:	68 9f 04 00 c0       	push   0xc000049f
c000bbd3:	6a 10                	push   0x10
c000bbd5:	53                   	push   ebx
c000bbd6:	e8 8d fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bbdb:	6a 00                	push   0x0
c000bbdd:	68 a9 04 00 c0       	push   0xc00004a9
c000bbe2:	6a 11                	push   0x11
c000bbe4:	53                   	push   ebx
c000bbe5:	e8 7e fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bbea:	83 c4 20             	add    esp,0x20
c000bbed:	6a 00                	push   0x0
c000bbef:	68 b3 04 00 c0       	push   0xc00004b3
c000bbf4:	6a 12                	push   0x12
c000bbf6:	53                   	push   ebx
c000bbf7:	e8 6c fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bbfc:	6a 01                	push   0x1
c000bbfe:	68 bd 04 00 c0       	push   0xc00004bd
c000bc03:	6a 60                	push   0x60
c000bc05:	53                   	push   ebx
c000bc06:	e8 5d fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc0b:	83 c4 20             	add    esp,0x20
c000bc0e:	6a 00                	push   0x0
c000bc10:	68 c7 04 00 c0       	push   0xc00004c7
c000bc15:	6a 20                	push   0x20
c000bc17:	53                   	push   ebx
c000bc18:	e8 4b fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc1d:	6a 00                	push   0x0
c000bc1f:	68 d1 04 00 c0       	push   0xc00004d1
c000bc24:	6a 21                	push   0x21
c000bc26:	53                   	push   ebx
c000bc27:	e8 3c fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc2c:	83 c4 20             	add    esp,0x20
c000bc2f:	6a 00                	push   0x0
c000bc31:	68 db 04 00 c0       	push   0xc00004db
c000bc36:	6a 22                	push   0x22
c000bc38:	53                   	push   ebx
c000bc39:	e8 2a fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc3e:	6a 00                	push   0x0
c000bc40:	68 e5 04 00 c0       	push   0xc00004e5
c000bc45:	6a 23                	push   0x23
c000bc47:	53                   	push   ebx
c000bc48:	e8 1b fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc4d:	83 c4 20             	add    esp,0x20
c000bc50:	6a 00                	push   0x0
c000bc52:	68 ef 04 00 c0       	push   0xc00004ef
c000bc57:	6a 24                	push   0x24
c000bc59:	53                   	push   ebx
c000bc5a:	e8 09 fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc5f:	6a 00                	push   0x0
c000bc61:	68 f9 04 00 c0       	push   0xc00004f9
c000bc66:	6a 25                	push   0x25
c000bc68:	53                   	push   ebx
c000bc69:	e8 fa fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc6e:	83 c4 20             	add    esp,0x20
c000bc71:	6a 00                	push   0x0
c000bc73:	68 03 05 00 c0       	push   0xc0000503
c000bc78:	6a 26                	push   0x26
c000bc7a:	53                   	push   ebx
c000bc7b:	e8 e8 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc80:	6a 00                	push   0x0
c000bc82:	68 0d 05 00 c0       	push   0xc000050d
c000bc87:	6a 27                	push   0x27
c000bc89:	53                   	push   ebx
c000bc8a:	e8 d9 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc8f:	83 c4 20             	add    esp,0x20
c000bc92:	6a 00                	push   0x0
c000bc94:	68 17 05 00 c0       	push   0xc0000517
c000bc99:	6a 28                	push   0x28
c000bc9b:	53                   	push   ebx
c000bc9c:	e8 c7 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bca1:	6a 00                	push   0x0
c000bca3:	68 21 05 00 c0       	push   0xc0000521
c000bca8:	6a 29                	push   0x29
c000bcaa:	53                   	push   ebx
c000bcab:	e8 b8 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bcb0:	83 c4 20             	add    esp,0x20
c000bcb3:	6a 00                	push   0x0
c000bcb5:	68 2b 05 00 c0       	push   0xc000052b
c000bcba:	6a 2a                	push   0x2a
c000bcbc:	53                   	push   ebx
c000bcbd:	e8 a6 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bcc2:	6a 00                	push   0x0
c000bcc4:	68 35 05 00 c0       	push   0xc0000535
c000bcc9:	6a 2b                	push   0x2b
c000bccb:	53                   	push   ebx
c000bccc:	e8 97 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bcd1:	83 c4 20             	add    esp,0x20
c000bcd4:	6a 00                	push   0x0
c000bcd6:	68 3f 05 00 c0       	push   0xc000053f
c000bcdb:	6a 2c                	push   0x2c
c000bcdd:	53                   	push   ebx
c000bcde:	e8 85 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bce3:	6a 00                	push   0x0
c000bce5:	68 49 05 00 c0       	push   0xc0000549
c000bcea:	6a 2d                	push   0x2d
c000bcec:	53                   	push   ebx
c000bced:	e8 76 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bcf2:	83 c4 20             	add    esp,0x20
c000bcf5:	6a 00                	push   0x0
c000bcf7:	68 53 05 00 c0       	push   0xc0000553
c000bcfc:	6a 2e                	push   0x2e
c000bcfe:	53                   	push   ebx
c000bcff:	e8 64 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd04:	6a 00                	push   0x0
c000bd06:	68 5d 05 00 c0       	push   0xc000055d
c000bd0b:	6a 2f                	push   0x2f
c000bd0d:	53                   	push   ebx
c000bd0e:	e8 55 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd13:	83 c4 20             	add    esp,0x20
c000bd16:	6a 00                	push   0x0
c000bd18:	68 67 05 00 c0       	push   0xc0000567
c000bd1d:	6a 30                	push   0x30
c000bd1f:	53                   	push   ebx
c000bd20:	e8 43 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd25:	6a 00                	push   0x0
c000bd27:	68 71 05 00 c0       	push   0xc0000571
c000bd2c:	6a 31                	push   0x31
c000bd2e:	53                   	push   ebx
c000bd2f:	e8 34 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd34:	83 c4 20             	add    esp,0x20
c000bd37:	6a 00                	push   0x0
c000bd39:	68 7b 05 00 c0       	push   0xc000057b
c000bd3e:	6a 32                	push   0x32
c000bd40:	53                   	push   ebx
c000bd41:	e8 22 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd46:	6a 00                	push   0x0
c000bd48:	68 85 05 00 c0       	push   0xc0000585
c000bd4d:	6a 33                	push   0x33
c000bd4f:	53                   	push   ebx
c000bd50:	e8 13 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd55:	83 c4 20             	add    esp,0x20
c000bd58:	6a 00                	push   0x0
c000bd5a:	68 8f 05 00 c0       	push   0xc000058f
c000bd5f:	6a 34                	push   0x34
c000bd61:	53                   	push   ebx
c000bd62:	e8 01 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd67:	6a 00                	push   0x0
c000bd69:	68 99 05 00 c0       	push   0xc0000599
c000bd6e:	6a 35                	push   0x35
c000bd70:	53                   	push   ebx
c000bd71:	e8 f2 fc ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd76:	83 c4 20             	add    esp,0x20
c000bd79:	6a 00                	push   0x0
c000bd7b:	68 a3 05 00 c0       	push   0xc00005a3
c000bd80:	6a 36                	push   0x36
c000bd82:	53                   	push   ebx
c000bd83:	e8 e0 fc ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd88:	6a 00                	push   0x0
c000bd8a:	68 ad 05 00 c0       	push   0xc00005ad
c000bd8f:	6a 37                	push   0x37
c000bd91:	53                   	push   ebx
c000bd92:	e8 d1 fc ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd97:	83 c4 20             	add    esp,0x20
c000bd9a:	e8 14 25 00 00       	call   c000e2b3 <Virt::getAKernelVAS()>
c000bd9f:	52                   	push   edx
c000bda0:	6a 03                	push   0x3
c000bda2:	6a 02                	push   0x2
c000bda4:	50                   	push   eax
c000bda5:	e8 4a 2b 00 00       	call   c000e8f4 <VAS::allocatePages(int, int)>
c000bdaa:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdb1:	89 c6                	mov    esi,eax
c000bdb3:	e8 54 32 00 00       	call   c000f00c <operator new(unsigned long)>
c000bdb8:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdc1:	89 c7                	mov    edi,eax
c000bdc3:	e8 ee 1c 00 00       	call   c000dab6 <TSS::TSS()>
c000bdc8:	83 c4 0c             	add    esp,0xc
c000bdcb:	68 5b 04 00 c0       	push   0xc000045b
c000bdd0:	56                   	push   esi
c000bdd1:	57                   	push   edi
c000bdd2:	e8 1f 1d 00 00       	call   c000daf6 <TSS::setup(unsigned long, unsigned long)>
c000bdd7:	59                   	pop    ecx
c000bdd8:	89 c6                	mov    esi,eax
c000bdda:	5f                   	pop    edi
c000bddb:	6a 00                	push   0x0
c000bddd:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bde1:	50                   	push   eax
c000bde2:	e8 db fb ff ff       	call   c000b9c2 <IDTEntry::IDTEntry(bool)>
c000bde7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bdeb:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bdf0:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000bdf6:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000bdfd:	80 ce 05             	or     dh,0x5
c000be00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be04:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be08:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be0f:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be15:	e8 86 fc ff ff       	call   c000baa0 <IDT::flush()>
c000be1a:	83 c4 20             	add    esp,0x20
c000be1d:	5b                   	pop    ebx
c000be1e:	5e                   	pop    esi
c000be1f:	5f                   	pop    edi
c000be20:	c3                   	ret    

c000be21 <sbrk>:
c000be21:	55                   	push   ebp
c000be22:	57                   	push   edi
c000be23:	56                   	push   esi
c000be24:	53                   	push   ebx
c000be25:	83 ec 1c             	sub    esp,0x1c
c000be28:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be2c:	85 db                	test   ebx,ebx
c000be2e:	a1 40 39 02 c0       	mov    eax,ds:0xc0023940
c000be33:	0f 84 e4 00 00 00    	je     c000bf1d <sbrk+0xfc>
c000be39:	78 3d                	js     c000be78 <sbrk+0x57>
c000be3b:	e8 60 89 00 00       	call   c00147a0 <thisCPU()>
c000be40:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be46:	83 e0 01             	and    eax,0x1
c000be49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be4d:	a1 40 39 02 c0       	mov    eax,ds:0xc0023940
c000be52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be56:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be5c:	89 d8                	mov    eax,ebx
c000be5e:	c1 f8 1f             	sar    eax,0x1f
c000be61:	25 ff 0f 00 00       	and    eax,0xfff
c000be66:	01 c3                	add    ebx,eax
c000be68:	c1 fb 0c             	sar    ebx,0xc
c000be6b:	89 df                	mov    edi,ebx
c000be6d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be71:	be 00 00 00 00       	mov    esi,0x0
c000be76:	eb 2a                	jmp    c000bea2 <sbrk+0x81>
c000be78:	83 ec 08             	sub    esp,0x8
c000be7b:	53                   	push   ebx
c000be7c:	68 64 11 02 c0       	push   0xc0021164
c000be81:	e8 bb 32 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000be8e:	e9 8a 00 00 00       	jmp    c000bf1d <sbrk+0xfc>
c000be93:	81 05 40 39 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023940,0x1000
c000be9d:	46                   	inc    esi
c000be9e:	39 f7                	cmp    edi,esi
c000bea0:	74 34                	je     c000bed6 <sbrk+0xb5>
c000bea2:	e8 0c 24 00 00       	call   c000e2b3 <Virt::getAKernelVAS()>
c000bea7:	89 c3                	mov    ebx,eax
c000bea9:	8b 2d 40 39 02 c0    	mov    ebp,DWORD PTR ds:0xc0023940
c000beaf:	e8 f5 06 00 00       	call   c000c5a9 <Phys::allocatePage()>
c000beb4:	68 01 04 00 00       	push   0x401
c000beb9:	55                   	push   ebp
c000beba:	50                   	push   eax
c000bebb:	53                   	push   ebx
c000bebc:	e8 31 29 00 00       	call   c000e7f2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bec1:	83 c4 10             	add    esp,0x10
c000bec4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bec9:	74 c8                	je     c000be93 <sbrk+0x72>
c000becb:	8b 1d 40 39 02 c0    	mov    ebx,DWORD PTR ds:0xc0023940
c000bed1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bed4:	eb bd                	jmp    c000be93 <sbrk+0x72>
c000bed6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bedb:	74 48                	je     c000bf25 <sbrk+0x104>
c000bedd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bee1:	89 d3                	mov    ebx,edx
c000bee3:	c1 eb 0a             	shr    ebx,0xa
c000bee6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000beec:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bef6:	c1 e0 0c             	shl    eax,0xc
c000bef9:	01 d0                	add    eax,edx
c000befb:	c1 e8 0a             	shr    eax,0xa
c000befe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf03:	2d 00 00 40 00       	sub    eax,0x400000
c000bf08:	39 c3                	cmp    ebx,eax
c000bf0a:	77 0d                	ja     c000bf19 <sbrk+0xf8>
c000bf0c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf0f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf15:	39 d8                	cmp    eax,ebx
c000bf17:	73 f3                	jae    c000bf0c <sbrk+0xeb>
c000bf19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf1d:	83 c4 1c             	add    esp,0x1c
c000bf20:	5b                   	pop    ebx
c000bf21:	5e                   	pop    esi
c000bf22:	5f                   	pop    edi
c000bf23:	5d                   	pop    ebp
c000bf24:	c3                   	ret    
c000bf25:	e8 3b 37 01 00       	call   c001f665 <CPU::readCR3()>
c000bf2a:	83 ec 0c             	sub    esp,0xc
c000bf2d:	50                   	push   eax
c000bf2e:	e8 44 37 01 00       	call   c001f677 <CPU::writeCR3(unsigned long)>
c000bf33:	83 c4 10             	add    esp,0x10
c000bf36:	eb e1                	jmp    c000bf19 <sbrk+0xf8>

c000bf38 <mmap>:
c000bf38:	83 ec 18             	sub    esp,0x18
c000bf3b:	68 94 11 02 c0       	push   0xc0021194
c000bf40:	e8 c7 99 00 00       	call   c001590c <Krnl::panic(char const*)>
c000bf45:	b8 00 00 00 00       	mov    eax,0x0
c000bf4a:	83 c4 1c             	add    esp,0x1c
c000bf4d:	c3                   	ret    

c000bf4e <munmap>:
c000bf4e:	83 ec 18             	sub    esp,0x18
c000bf51:	68 99 11 02 c0       	push   0xc0021199
c000bf56:	e8 b1 99 00 00       	call   c001590c <Krnl::panic(char const*)>
c000bf5b:	b8 00 00 00 00       	mov    eax,0x0
c000bf60:	83 c4 1c             	add    esp,0x1c
c000bf63:	c3                   	ret    

c000bf64 <liballoc_lock()>:
c000bf64:	83 ec 0c             	sub    esp,0xc
c000bf67:	e8 8d c9 00 00       	call   c00188f9 <lockScheduler()>
c000bf6c:	b8 00 00 00 00       	mov    eax,0x0
c000bf71:	83 c4 0c             	add    esp,0xc
c000bf74:	c3                   	ret    

c000bf75 <liballoc_unlock()>:
c000bf75:	83 ec 0c             	sub    esp,0xc
c000bf78:	e8 7e c9 00 00       	call   c00188fb <unlockScheduler()>
c000bf7d:	b8 00 00 00 00       	mov    eax,0x0
c000bf82:	83 c4 0c             	add    esp,0xc
c000bf85:	c3                   	ret    

c000bf86 <liballoc_alloc(int)>:
c000bf86:	83 ec 0c             	sub    esp,0xc
c000bf89:	e8 25 23 00 00       	call   c000e2b3 <Virt::getAKernelVAS()>
c000bf8e:	83 ec 04             	sub    esp,0x4
c000bf91:	6a 01                	push   0x1
c000bf93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf97:	50                   	push   eax
c000bf98:	e8 57 29 00 00       	call   c000e8f4 <VAS::allocatePages(int, int)>
c000bf9d:	83 c4 1c             	add    esp,0x1c
c000bfa0:	c3                   	ret    

c000bfa1 <liballoc_free(void*, int)>:
c000bfa1:	83 ec 0c             	sub    esp,0xc
c000bfa4:	e8 0a 23 00 00       	call   c000e2b3 <Virt::getAKernelVAS()>
c000bfa9:	83 ec 08             	sub    esp,0x8
c000bfac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfb0:	50                   	push   eax
c000bfb1:	e8 de 25 00 00       	call   c000e594 <VAS::freeAllocatedPages(unsigned long)>
c000bfb6:	b8 00 00 00 00       	mov    eax,0x0
c000bfbb:	83 c4 1c             	add    esp,0x1c
c000bfbe:	c3                   	ret    

c000bfbf <realloc>:
c000bfbf:	83 ec 14             	sub    esp,0x14
c000bfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfca:	e8 69 54 ff ff       	call   c0001438 <dlrealloc>
c000bfcf:	83 c4 1c             	add    esp,0x1c
c000bfd2:	c3                   	ret    

c000bfd3 <malloc>:
c000bfd3:	83 ec 18             	sub    esp,0x18
c000bfd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfda:	e8 1c 4f ff ff       	call   c0000efb <dlmalloc>
c000bfdf:	83 c4 1c             	add    esp,0x1c
c000bfe2:	c3                   	ret    

c000bfe3 <free>:
c000bfe3:	83 ec 18             	sub    esp,0x18
c000bfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfea:	e8 ae 4b ff ff       	call   c0000b9d <dlfree>
c000bfef:	83 c4 1c             	add    esp,0x1c
c000bff2:	c3                   	ret    

c000bff3 <rfree>:
c000bff3:	83 ec 18             	sub    esp,0x18
c000bff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bffa:	e8 e4 ff ff ff       	call   c000bfe3 <free>
c000bfff:	83 c4 1c             	add    esp,0x1c
c000c002:	c3                   	ret    

c000c003 <calloc>:
c000c003:	56                   	push   esi
c000c004:	53                   	push   ebx
c000c005:	83 ec 10             	sub    esp,0x10
c000c008:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c00c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c011:	53                   	push   ebx
c000c012:	e8 bc ff ff ff       	call   c000bfd3 <malloc>
c000c017:	89 c6                	mov    esi,eax
c000c019:	83 c4 0c             	add    esp,0xc
c000c01c:	53                   	push   ebx
c000c01d:	6a 00                	push   0x0
c000c01f:	50                   	push   eax
c000c020:	e8 95 46 ff ff       	call   c00006ba <memset>
c000c025:	89 f0                	mov    eax,esi
c000c027:	83 c4 14             	add    esp,0x14
c000c02a:	5b                   	pop    ebx
c000c02b:	5e                   	pop    esi
c000c02c:	c3                   	ret    

c000c02d <hwTextMode_loadInData(VgaText*)>:
c000c02d:	57                   	push   edi
c000c02e:	56                   	push   esi
c000c02f:	53                   	push   ebx
c000c030:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c034:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c03a:	85 c0                	test   eax,eax
c000c03c:	7e 30                	jle    c000c06e <hwTextMode_loadInData(VgaText*)+0x41>
c000c03e:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c041:	31 f6                	xor    esi,esi
c000c043:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c046:	31 c0                	xor    eax,eax
c000c048:	c1 e1 05             	shl    ecx,0x5
c000c04b:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c051:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c055:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c059:	40                   	inc    eax
c000c05a:	83 f8 50             	cmp    eax,0x50
c000c05d:	75 f2                	jne    c000c051 <hwTextMode_loadInData(VgaText*)+0x24>
c000c05f:	46                   	inc    esi
c000c060:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c066:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c06c:	7f d5                	jg     c000c043 <hwTextMode_loadInData(VgaText*)+0x16>
c000c06e:	5b                   	pop    ebx
c000c06f:	5e                   	pop    esi
c000c070:	5f                   	pop    edi
c000c071:	c3                   	ret    

c000c072 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c072:	56                   	push   esi
c000c073:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c078:	53                   	push   ebx
c000c079:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c07d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c081:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c087:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c08d:	c1 e0 04             	shl    eax,0x4
c000c090:	83 e6 0f             	and    esi,0xf
c000c093:	25 ff 00 00 00       	and    eax,0xff
c000c098:	83 c2 02             	add    edx,0x2
c000c09b:	09 f0                	or     eax,esi
c000c09d:	41                   	inc    ecx
c000c09e:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0a2:	c1 e0 08             	shl    eax,0x8
c000c0a5:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0ab:	09 f0                	or     eax,esi
c000c0ad:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0b1:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0b7:	75 c8                	jne    c000c081 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0b9:	5b                   	pop    ebx
c000c0ba:	5e                   	pop    esi
c000c0bb:	c3                   	ret    

c000c0bc <hwTextMode_showCursor(VgaText*, bool)>:
c000c0bc:	56                   	push   esi
c000c0bd:	53                   	push   ebx
c000c0be:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0c3:	74 38                	je     c000c0fd <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0c5:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0ca:	b0 0a                	mov    al,0xa
c000c0cc:	89 da                	mov    edx,ebx
c000c0ce:	ee                   	out    dx,al
c000c0cf:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0d4:	89 ca                	mov    edx,ecx
c000c0d6:	ec                   	in     al,dx
c000c0d7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0db:	b2 0f                	mov    dl,0xf
c000c0dd:	83 e0 c0             	and    eax,0xffffffc0
c000c0e0:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0e6:	09 d0                	or     eax,edx
c000c0e8:	89 ca                	mov    edx,ecx
c000c0ea:	ee                   	out    dx,al
c000c0eb:	b0 0b                	mov    al,0xb
c000c0ed:	89 da                	mov    edx,ebx
c000c0ef:	ee                   	out    dx,al
c000c0f0:	89 ca                	mov    edx,ecx
c000c0f2:	ec                   	in     al,dx
c000c0f3:	83 e0 e0             	and    eax,0xffffffe0
c000c0f6:	83 c8 0f             	or     eax,0xf
c000c0f9:	ee                   	out    dx,al
c000c0fa:	5b                   	pop    ebx
c000c0fb:	5e                   	pop    esi
c000c0fc:	c3                   	ret    
c000c0fd:	b0 0a                	mov    al,0xa
c000c0ff:	ba d4 03 00 00       	mov    edx,0x3d4
c000c104:	ee                   	out    dx,al
c000c105:	b0 20                	mov    al,0x20
c000c107:	ba d5 03 00 00       	mov    edx,0x3d5
c000c10c:	ee                   	out    dx,al
c000c10d:	5b                   	pop    ebx
c000c10e:	5e                   	pop    esi
c000c10f:	c3                   	ret    

c000c110 <hwTextMode_update(VgaText*)>:
c000c110:	c3                   	ret    

c000c111 <hwTextMode_updateCursor(VgaText*)>:
c000c111:	56                   	push   esi
c000c112:	b9 19 00 00 00       	mov    ecx,0x19
c000c117:	53                   	push   ebx
c000c118:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c11c:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c122:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c128:	29 d1                	sub    ecx,edx
c000c12a:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c130:	01 d9                	add    ecx,ebx
c000c132:	b0 0f                	mov    al,0xf
c000c134:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c137:	c1 e1 04             	shl    ecx,0x4
c000c13a:	01 f1                	add    ecx,esi
c000c13c:	be d4 03 00 00       	mov    esi,0x3d4
c000c141:	89 f2                	mov    edx,esi
c000c143:	ee                   	out    dx,al
c000c144:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c149:	88 c8                	mov    al,cl
c000c14b:	89 da                	mov    edx,ebx
c000c14d:	ee                   	out    dx,al
c000c14e:	b0 0e                	mov    al,0xe
c000c150:	89 f2                	mov    edx,esi
c000c152:	ee                   	out    dx,al
c000c153:	89 c8                	mov    eax,ecx
c000c155:	89 da                	mov    edx,ebx
c000c157:	66 c1 e8 08          	shr    ax,0x8
c000c15b:	ee                   	out    dx,al
c000c15c:	5b                   	pop    ebx
c000c15d:	5e                   	pop    esi
c000c15e:	c3                   	ret    

c000c15f <hwTextMode_disableBlink(VgaText*, bool)>:
c000c15f:	ba da 03 00 00       	mov    edx,0x3da
c000c164:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c169:	75 18                	jne    c000c183 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c16b:	ec                   	in     al,dx
c000c16c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c171:	b0 30                	mov    al,0x30
c000c173:	89 ca                	mov    edx,ecx
c000c175:	ee                   	out    dx,al
c000c176:	ba c1 03 00 00       	mov    edx,0x3c1
c000c17b:	ec                   	in     al,dx
c000c17c:	83 c8 08             	or     eax,0x8
c000c17f:	89 ca                	mov    edx,ecx
c000c181:	ee                   	out    dx,al
c000c182:	c3                   	ret    
c000c183:	ec                   	in     al,dx
c000c184:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c189:	b0 30                	mov    al,0x30
c000c18b:	89 ca                	mov    edx,ecx
c000c18d:	ee                   	out    dx,al
c000c18e:	ba c1 03 00 00       	mov    edx,0x3c1
c000c193:	ec                   	in     al,dx
c000c194:	83 e0 f7             	and    eax,0xfffffff7
c000c197:	89 ca                	mov    edx,ecx
c000c199:	ee                   	out    dx,al
c000c19a:	c3                   	ret    

c000c19b <hwTextMode_scrollScreen(VgaText*)>:
c000c19b:	55                   	push   ebp
c000c19c:	bd 02 00 00 00       	mov    ebp,0x2
c000c1a1:	57                   	push   edi
c000c1a2:	56                   	push   esi
c000c1a3:	53                   	push   ebx
c000c1a4:	83 ec 1c             	sub    esp,0x1c
c000c1a7:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1b3:	31 c0                	xor    eax,eax
c000c1b5:	eb 0b                	jmp    c000c1c2 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1b7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1bd:	74 58                	je     c000c217 <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1bf:	43                   	inc    ebx
c000c1c0:	89 f0                	mov    eax,esi
c000c1c2:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1c8:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1ce:	88 13                	mov    BYTE PTR [ebx],dl
c000c1d0:	8d 70 01             	lea    esi,[eax+0x1]
c000c1d3:	83 fd 18             	cmp    ebp,0x18
c000c1d6:	75 df                	jne    c000c1b7 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1d8:	a8 01                	test   al,0x1
c000c1da:	75 13                	jne    c000c1ef <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1dc:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1df:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1e5:	75 d8                	jne    c000c1bf <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1e7:	83 c4 1c             	add    esp,0x1c
c000c1ea:	5b                   	pop    ebx
c000c1eb:	5e                   	pop    esi
c000c1ec:	5f                   	pop    edi
c000c1ed:	5d                   	pop    ebp
c000c1ee:	c3                   	ret    
c000c1ef:	52                   	push   edx
c000c1f0:	31 c0                	xor    eax,eax
c000c1f2:	52                   	push   edx
c000c1f3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c1f7:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c1fd:	50                   	push   eax
c000c1fe:	31 c0                	xor    eax,eax
c000c200:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c204:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c20a:	50                   	push   eax
c000c20b:	e8 84 0b 00 00       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000c210:	83 c4 10             	add    esp,0x10
c000c213:	88 07                	mov    BYTE PTR [edi],al
c000c215:	eb c8                	jmp    c000c1df <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c217:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c21b:	45                   	inc    ebp
c000c21c:	05 a0 00 00 00       	add    eax,0xa0
c000c221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c225:	eb 88                	jmp    c000c1af <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c227 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c227:	56                   	push   esi
c000c228:	31 c0                	xor    eax,eax
c000c22a:	53                   	push   ebx
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c232:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c236:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c23a:	50                   	push   eax
c000c23b:	31 c0                	xor    eax,eax
c000c23d:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c241:	50                   	push   eax
c000c242:	e8 4d 0b 00 00       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000c247:	5a                   	pop    edx
c000c248:	25 ff 00 00 00       	and    eax,0xff
c000c24d:	59                   	pop    ecx
c000c24e:	50                   	push   eax
c000c24f:	89 f0                	mov    eax,esi
c000c251:	0f be f0             	movsx  esi,al
c000c254:	56                   	push   esi
c000c255:	e8 e0 0b 00 00       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000c25a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c25e:	ba 19 00 00 00       	mov    edx,0x19
c000c263:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c269:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c26c:	29 f2                	sub    edx,esi
c000c26e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c272:	c1 e1 04             	shl    ecx,0x4
c000c275:	8d 14 92             	lea    edx,[edx+edx*4]
c000c278:	01 d9                	add    ecx,ebx
c000c27a:	c1 e2 04             	shl    edx,0x4
c000c27d:	01 ca                	add    edx,ecx
c000c27f:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c287:	83 c4 14             	add    esp,0x14
c000c28a:	5b                   	pop    ebx
c000c28b:	5e                   	pop    esi
c000c28c:	c3                   	ret    

c000c28d <setupTextMode()>:
c000c28d:	c7 05 d8 45 02 c0 5f c1 00 c0 	mov    DWORD PTR ds:0xc00245d8,0xc000c15f
c000c297:	c7 05 c4 45 02 c0 2d c0 00 c0 	mov    DWORD PTR ds:0xc00245c4,0xc000c02d
c000c2a1:	c7 05 c0 45 02 c0 72 c0 00 c0 	mov    DWORD PTR ds:0xc00245c0,0xc000c072
c000c2ab:	c7 05 cc 45 02 c0 9b c1 00 c0 	mov    DWORD PTR ds:0xc00245cc,0xc000c19b
c000c2b5:	c7 05 d4 45 02 c0 bc c0 00 c0 	mov    DWORD PTR ds:0xc00245d4,0xc000c0bc
c000c2bf:	c7 05 c8 45 02 c0 10 c1 00 c0 	mov    DWORD PTR ds:0xc00245c8,0xc000c110
c000c2c9:	c7 05 d0 45 02 c0 11 c1 00 c0 	mov    DWORD PTR ds:0xc00245d0,0xc000c111
c000c2d3:	c7 05 dc 45 02 c0 27 c2 00 c0 	mov    DWORD PTR ds:0xc00245dc,0xc000c227
c000c2dd:	c3                   	ret    

c000c2de <kernel_main>:
c000c2de:	57                   	push   edi
c000c2df:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2e4:	56                   	push   esi
c000c2e5:	31 f6                	xor    esi,esi
c000c2e7:	53                   	push   ebx
c000c2e8:	83 ec 10             	sub    esp,0x10
c000c2eb:	e8 fe 08 00 00       	call   c000cbee <installVgaTextImplementation()>
c000c2f0:	e8 98 ff ff ff       	call   c000c28d <setupTextMode()>
c000c2f5:	89 f0                	mov    eax,esi
c000c2f7:	89 fa                	mov    edx,edi
c000c2f9:	ee                   	out    dx,al
c000c2fa:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c2ff:	b0 80                	mov    al,0x80
c000c301:	89 da                	mov    edx,ebx
c000c303:	ee                   	out    dx,al
c000c304:	b1 03                	mov    cl,0x3
c000c306:	ba f8 03 00 00       	mov    edx,0x3f8
c000c30b:	88 c8                	mov    al,cl
c000c30d:	ee                   	out    dx,al
c000c30e:	89 f0                	mov    eax,esi
c000c310:	89 fa                	mov    edx,edi
c000c312:	ee                   	out    dx,al
c000c313:	88 c8                	mov    al,cl
c000c315:	89 da                	mov    edx,ebx
c000c317:	ee                   	out    dx,al
c000c318:	b0 c7                	mov    al,0xc7
c000c31a:	ba fa 03 00 00       	mov    edx,0x3fa
c000c31f:	ee                   	out    dx,al
c000c320:	b0 0b                	mov    al,0xb
c000c322:	ba fc 03 00 00       	mov    edx,0x3fc
c000c327:	ee                   	out    dx,al
c000c328:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c32d:	83 ec 0c             	sub    esp,0xc
c000c330:	05 ff 0f 00 00       	add    eax,0xfff
c000c335:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c33a:	50                   	push   eax
c000c33b:	e8 6d 03 00 00       	call   c000c6ad <Phys::physicalMemorySetup(unsigned int)>
c000c340:	e8 f2 1e 00 00       	call   c000e237 <Virt::virtualMemorySetup()>
c000c345:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c34b:	83 c4 10             	add    esp,0x10
c000c34e:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c354:	75 0e                	jne    c000c364 <kernel_main+0x86>
c000c356:	89 d8                	mov    eax,ebx
c000c358:	25 48 03 00 00       	and    eax,0x348
c000c35d:	3d 00 03 00 00       	cmp    eax,0x300
c000c362:	74 10                	je     c000c374 <kernel_main+0x96>
c000c364:	83 ec 0c             	sub    esp,0xc
c000c367:	68 a7 26 02 c0       	push   0xc00226a7
c000c36c:	e8 9b 95 00 00       	call   c001590c <Krnl::panic(char const*)>
c000c371:	83 c4 10             	add    esp,0x10
c000c374:	83 ec 0c             	sub    esp,0xc
c000c377:	89 1d 40 45 02 c0    	mov    DWORD PTR ds:0xc0024540,ebx
c000c37d:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c381:	53                   	push   ebx
c000c382:	e8 4d 20 00 00       	call   c000e3d4 <VAS::VAS()>
c000c387:	89 1d 84 46 02 c0    	mov    DWORD PTR ds:0xc0024684,ebx
c000c38d:	e8 8e 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c392:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c399:	e8 6e 2c 00 00       	call   c000f00c <operator new(unsigned long)>
c000c39e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3a1:	89 c6                	mov    esi,eax
c000c3a3:	e8 7c ea ff ff       	call   c000ae24 <Computer::Computer()>
c000c3a8:	6a 00                	push   0x0
c000c3aa:	6a 00                	push   0x0
c000c3ac:	89 35 28 45 02 c0    	mov    DWORD PTR ds:0xc0024528,esi
c000c3b2:	6a 00                	push   0x0
c000c3b4:	56                   	push   esi
c000c3b5:	e8 5c f2 ff ff       	call   c000b616 <Computer::open(int, int, void*)>
c000c3ba:	83 c4 14             	add    esp,0x14
c000c3bd:	53                   	push   ebx
c000c3be:	e8 c3 22 00 00       	call   c000e686 <VAS::~VAS()>
c000c3c3:	c7 04 24 a0 11 02 c0 	mov    DWORD PTR [esp],0xc00211a0
c000c3ca:	e8 3d 95 00 00       	call   c001590c <Krnl::panic(char const*)>
c000c3cf:	83 c4 20             	add    esp,0x20
c000c3d2:	5b                   	pop    ebx
c000c3d3:	5e                   	pop    esi
c000c3d4:	5f                   	pop    edi
c000c3d5:	c3                   	ret    

c000c3d6 <Phys::allocateDMA(unsigned long)>:
c000c3d6:	57                   	push   edi
c000c3d7:	31 d2                	xor    edx,edx
c000c3d9:	56                   	push   esi
c000c3da:	31 ff                	xor    edi,edi
c000c3dc:	53                   	push   ebx
c000c3dd:	31 c9                	xor    ecx,ecx
c000c3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e3:	31 f6                	xor    esi,esi
c000c3e5:	05 ff 0f 00 00       	add    eax,0xfff
c000c3ea:	c1 e8 0c             	shr    eax,0xc
c000c3ed:	eb 17                	jmp    c000c406 <Phys::allocateDMA(unsigned long)+0x30>
c000c3ef:	85 c9                	test   ecx,ecx
c000c3f1:	75 04                	jne    c000c3f7 <Phys::allocateDMA(unsigned long)+0x21>
c000c3f3:	89 d7                	mov    edi,edx
c000c3f5:	89 d6                	mov    esi,edx
c000c3f7:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c3fa:	39 d8                	cmp    eax,ebx
c000c3fc:	74 1f                	je     c000c41d <Phys::allocateDMA(unsigned long)+0x47>
c000c3fe:	42                   	inc    edx
c000c3ff:	89 d9                	mov    ecx,ebx
c000c401:	83 fa 2f             	cmp    edx,0x2f
c000c404:	7f 11                	jg     c000c417 <Phys::allocateDMA(unsigned long)+0x41>
c000c406:	80 ba 80 45 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdba80],0x0
c000c40d:	74 e0                	je     c000c3ef <Phys::allocateDMA(unsigned long)+0x19>
c000c40f:	31 c9                	xor    ecx,ecx
c000c411:	42                   	inc    edx
c000c412:	83 fa 2f             	cmp    edx,0x2f
c000c415:	7e ef                	jle    c000c406 <Phys::allocateDMA(unsigned long)+0x30>
c000c417:	5b                   	pop    ebx
c000c418:	31 c0                	xor    eax,eax
c000c41a:	5e                   	pop    esi
c000c41b:	5f                   	pop    edi
c000c41c:	c3                   	ret    
c000c41d:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c421:	89 d3                	mov    ebx,edx
c000c423:	c1 fb 1f             	sar    ebx,0x1f
c000c426:	83 e3 0f             	and    ebx,0xf
c000c429:	01 d3                	add    ebx,edx
c000c42b:	89 f2                	mov    edx,esi
c000c42d:	c1 fb 04             	sar    ebx,0x4
c000c430:	c1 fa 04             	sar    edx,0x4
c000c433:	39 da                	cmp    edx,ebx
c000c435:	75 30                	jne    c000c467 <Phys::allocateDMA(unsigned long)+0x91>
c000c437:	85 c0                	test   eax,eax
c000c439:	74 1b                	je     c000c456 <Phys::allocateDMA(unsigned long)+0x80>
c000c43b:	bf 80 45 02 c0       	mov    edi,0xc0024580
c000c440:	8d 96 80 45 02 c0    	lea    edx,[esi-0x3ffdba80]
c000c446:	83 f7 ff             	xor    edi,0xffffffff
c000c449:	29 f7                	sub    edi,esi
c000c44b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c44e:	42                   	inc    edx
c000c44f:	8d 04 17             	lea    eax,[edi+edx*1]
c000c452:	39 c1                	cmp    ecx,eax
c000c454:	7f f5                	jg     c000c44b <Phys::allocateDMA(unsigned long)+0x75>
c000c456:	85 db                	test   ebx,ebx
c000c458:	74 13                	je     c000c46d <Phys::allocateDMA(unsigned long)+0x97>
c000c45a:	5b                   	pop    ebx
c000c45b:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c461:	c1 e0 0c             	shl    eax,0xc
c000c464:	5e                   	pop    esi
c000c465:	5f                   	pop    edi
c000c466:	c3                   	ret    
c000c467:	89 fa                	mov    edx,edi
c000c469:	31 c9                	xor    ecx,ecx
c000c46b:	eb a4                	jmp    c000c411 <Phys::allocateDMA(unsigned long)+0x3b>
c000c46d:	c1 e6 0c             	shl    esi,0xc
c000c470:	5b                   	pop    ebx
c000c471:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c477:	5e                   	pop    esi
c000c478:	5f                   	pop    edi
c000c479:	c3                   	ret    

c000c47a <Phys::freeDMA(unsigned long, unsigned long)>:
c000c47a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c482:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c488:	c1 e9 0c             	shr    ecx,0xc
c000c48b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c490:	76 25                	jbe    c000c4b7 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c492:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c497:	c1 e8 0c             	shr    eax,0xc
c000c49a:	8d 50 10             	lea    edx,[eax+0x10]
c000c49d:	85 c9                	test   ecx,ecx
c000c49f:	74 15                	je     c000c4b6 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4a1:	8d 82 80 45 02 c0    	lea    eax,[edx-0x3ffdba80]
c000c4a7:	8d 94 11 80 45 02 c0 	lea    edx,[ecx+edx*1-0x3ffdba80]
c000c4ae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4b1:	40                   	inc    eax
c000c4b2:	39 d0                	cmp    eax,edx
c000c4b4:	75 f8                	jne    c000c4ae <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4b6:	c3                   	ret    
c000c4b7:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4bd:	c1 ea 0c             	shr    edx,0xc
c000c4c0:	eb db                	jmp    c000c49d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4c2 <Phys::setPageState(unsigned long, bool)>:
c000c4c2:	56                   	push   esi
c000c4c3:	ba 01 00 00 00       	mov    edx,0x1
c000c4c8:	53                   	push   ebx
c000c4c9:	8b 35 44 39 02 c0    	mov    esi,DWORD PTR ds:0xc0023944
c000c4cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4d7:	89 c8                	mov    eax,ecx
c000c4d9:	83 e1 07             	and    ecx,0x7
c000c4dc:	c1 e8 03             	shr    eax,0x3
c000c4df:	01 c6                	add    esi,eax
c000c4e1:	d3 e2                	shl    edx,cl
c000c4e3:	83 f2 ff             	xor    edx,0xffffffff
c000c4e6:	20 16                	and    BYTE PTR [esi],dl
c000c4e8:	8b 15 44 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023944
c000c4ee:	01 d0                	add    eax,edx
c000c4f0:	d3 e3                	shl    ebx,cl
c000c4f2:	8a 08                	mov    cl,BYTE PTR [eax]
c000c4f4:	09 d9                	or     ecx,ebx
c000c4f6:	88 08                	mov    BYTE PTR [eax],cl
c000c4f8:	5b                   	pop    ebx
c000c4f9:	5e                   	pop    esi
c000c4fa:	c3                   	ret    

c000c4fb <Phys::getPageState(unsigned long)>:
c000c4fb:	53                   	push   ebx
c000c4fc:	8b 15 44 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023944
c000c502:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c506:	31 db                	xor    ebx,ebx
c000c508:	89 c8                	mov    eax,ecx
c000c50a:	83 e1 07             	and    ecx,0x7
c000c50d:	c1 e8 03             	shr    eax,0x3
c000c510:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c513:	89 d8                	mov    eax,ebx
c000c515:	5b                   	pop    ebx
c000c516:	d3 f8                	sar    eax,cl
c000c518:	83 e0 01             	and    eax,0x1
c000c51b:	c3                   	ret    

c000c51c <Phys::freePage(unsigned long)>:
c000c51c:	53                   	push   ebx
c000c51d:	83 ec 08             	sub    esp,0x8
c000c520:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c524:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c52a:	76 5a                	jbe    c000c586 <Phys::freePage(unsigned long)+0x6a>
c000c52c:	c1 eb 0c             	shr    ebx,0xc
c000c52f:	53                   	push   ebx
c000c530:	e8 c6 ff ff ff       	call   c000c4fb <Phys::getPageState(unsigned long)>
c000c535:	5a                   	pop    edx
c000c536:	84 c0                	test   al,al
c000c538:	74 5e                	je     c000c598 <Phys::freePage(unsigned long)+0x7c>
c000c53a:	a1 6c 45 02 c0       	mov    eax,ds:0xc002456c
c000c53f:	48                   	dec    eax
c000c540:	a3 6c 45 02 c0       	mov    ds:0xc002456c,eax
c000c545:	8d 04 80             	lea    eax,[eax+eax*4]
c000c548:	8d 04 80             	lea    eax,[eax+eax*4]
c000c54b:	c1 e0 02             	shl    eax,0x2
c000c54e:	89 c2                	mov    edx,eax
c000c550:	c1 fa 1f             	sar    edx,0x1f
c000c553:	f7 3d 70 45 02 c0    	idiv   DWORD PTR ds:0xc0024570
c000c559:	39 05 68 45 02 c0    	cmp    DWORD PTR ds:0xc0024568,eax
c000c55f:	75 12                	jne    c000c573 <Phys::freePage(unsigned long)+0x57>
c000c561:	51                   	push   ecx
c000c562:	51                   	push   ecx
c000c563:	6a 00                	push   0x0
c000c565:	53                   	push   ebx
c000c566:	e8 57 ff ff ff       	call   c000c4c2 <Phys::setPageState(unsigned long, bool)>
c000c56b:	83 c4 10             	add    esp,0x10
c000c56e:	83 c4 08             	add    esp,0x8
c000c571:	5b                   	pop    ebx
c000c572:	c3                   	ret    
c000c573:	83 ec 0c             	sub    esp,0xc
c000c576:	a3 68 45 02 c0       	mov    ds:0xc0024568,eax
c000c57b:	50                   	push   eax
c000c57c:	e8 01 0a 00 00       	call   c000cf82 <VgaText::updateRAMUsageDisplay(int)>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	eb db                	jmp    c000c561 <Phys::freePage(unsigned long)+0x45>
c000c586:	68 00 10 00 00       	push   0x1000
c000c58b:	53                   	push   ebx
c000c58c:	e8 e9 fe ff ff       	call   c000c47a <Phys::freeDMA(unsigned long, unsigned long)>
c000c591:	59                   	pop    ecx
c000c592:	5b                   	pop    ebx
c000c593:	83 c4 08             	add    esp,0x8
c000c596:	5b                   	pop    ebx
c000c597:	c3                   	ret    
c000c598:	c7 44 24 10 bb 11 02 c0 	mov    DWORD PTR [esp+0x10],0xc00211bb
c000c5a0:	83 c4 08             	add    esp,0x8
c000c5a3:	5b                   	pop    ebx
c000c5a4:	e9 63 93 00 00       	jmp    c001590c <Krnl::panic(char const*)>

c000c5a9 <Phys::allocatePage()>:
c000c5a9:	56                   	push   esi
c000c5aa:	53                   	push   ebx
c000c5ab:	51                   	push   ecx
c000c5ac:	8b 35 60 45 02 c0    	mov    esi,DWORD PTR ds:0xc0024560
c000c5b2:	89 f3                	mov    ebx,esi
c000c5b4:	eb 0a                	jmp    c000c5c0 <Phys::allocatePage()+0x17>
c000c5b6:	89 1d 60 45 02 c0    	mov    DWORD PTR ds:0xc0024560,ebx
c000c5bc:	39 de                	cmp    esi,ebx
c000c5be:	74 24                	je     c000c5e4 <Phys::allocatePage()+0x3b>
c000c5c0:	53                   	push   ebx
c000c5c1:	e8 35 ff ff ff       	call   c000c4fb <Phys::getPageState(unsigned long)>
c000c5c6:	5a                   	pop    edx
c000c5c7:	84 c0                	test   al,al
c000c5c9:	74 5a                	je     c000c625 <Phys::allocatePage()+0x7c>
c000c5cb:	43                   	inc    ebx
c000c5cc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5d2:	75 e2                	jne    c000c5b6 <Phys::allocatePage()+0xd>
c000c5d4:	31 db                	xor    ebx,ebx
c000c5d6:	c7 05 60 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024560,0x0
c000c5e0:	39 de                	cmp    esi,ebx
c000c5e2:	75 dc                	jne    c000c5c0 <Phys::allocatePage()+0x17>
c000c5e4:	83 ec 0c             	sub    esp,0xc
c000c5e7:	68 d1 11 02 c0       	push   0xc00211d1
c000c5ec:	e8 50 2b 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000c5f1:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c5f8:	e8 d9 fd ff ff       	call   c000c3d6 <Phys::allocateDMA(unsigned long)>
c000c5fd:	83 c4 10             	add    esp,0x10
c000c600:	85 c0                	test   eax,eax
c000c602:	75 5a                	jne    c000c65e <Phys::allocatePage()+0xb5>
c000c604:	83 ec 0c             	sub    esp,0xc
c000c607:	68 e2 11 02 c0       	push   0xc00211e2
c000c60c:	e8 fb 92 00 00       	call   c001590c <Krnl::panic(char const*)>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	8b 1d 60 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024560
c000c61a:	53                   	push   ebx
c000c61b:	e8 db fe ff ff       	call   c000c4fb <Phys::getPageState(unsigned long)>
c000c620:	5a                   	pop    edx
c000c621:	84 c0                	test   al,al
c000c623:	75 a6                	jne    c000c5cb <Phys::allocatePage()+0x22>
c000c625:	6a 01                	push   0x1
c000c627:	53                   	push   ebx
c000c628:	e8 95 fe ff ff       	call   c000c4c2 <Phys::setPageState(unsigned long, bool)>
c000c62d:	a1 6c 45 02 c0       	mov    eax,ds:0xc002456c
c000c632:	59                   	pop    ecx
c000c633:	40                   	inc    eax
c000c634:	5b                   	pop    ebx
c000c635:	a3 6c 45 02 c0       	mov    ds:0xc002456c,eax
c000c63a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c63d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c640:	c1 e0 02             	shl    eax,0x2
c000c643:	89 c2                	mov    edx,eax
c000c645:	c1 fa 1f             	sar    edx,0x1f
c000c648:	f7 3d 70 45 02 c0    	idiv   DWORD PTR ds:0xc0024570
c000c64e:	39 05 68 45 02 c0    	cmp    DWORD PTR ds:0xc0024568,eax
c000c654:	75 0c                	jne    c000c662 <Phys::allocatePage()+0xb9>
c000c656:	a1 60 45 02 c0       	mov    eax,ds:0xc0024560
c000c65b:	c1 e0 0c             	shl    eax,0xc
c000c65e:	5a                   	pop    edx
c000c65f:	5b                   	pop    ebx
c000c660:	5e                   	pop    esi
c000c661:	c3                   	ret    
c000c662:	83 ec 0c             	sub    esp,0xc
c000c665:	a3 68 45 02 c0       	mov    ds:0xc0024568,eax
c000c66a:	50                   	push   eax
c000c66b:	e8 12 09 00 00       	call   c000cf82 <VgaText::updateRAMUsageDisplay(int)>
c000c670:	83 c4 10             	add    esp,0x10
c000c673:	eb e1                	jmp    c000c656 <Phys::allocatePage()+0xad>

c000c675 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c675:	56                   	push   esi
c000c676:	53                   	push   ebx
c000c677:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c67b:	39 1d 64 45 02 c0    	cmp    DWORD PTR ds:0xc0024564,ebx
c000c681:	73 06                	jae    c000c689 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c683:	89 1d 64 45 02 c0    	mov    DWORD PTR ds:0xc0024564,ebx
c000c689:	c1 eb 0c             	shr    ebx,0xc
c000c68c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c690:	c1 e8 0c             	shr    eax,0xc
c000c693:	39 d8                	cmp    eax,ebx
c000c695:	73 13                	jae    c000c6aa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c697:	6a 00                	push   0x0
c000c699:	8d 70 01             	lea    esi,[eax+0x1]
c000c69c:	50                   	push   eax
c000c69d:	e8 20 fe ff ff       	call   c000c4c2 <Phys::setPageState(unsigned long, bool)>
c000c6a2:	5a                   	pop    edx
c000c6a3:	89 f0                	mov    eax,esi
c000c6a5:	59                   	pop    ecx
c000c6a6:	39 f3                	cmp    ebx,esi
c000c6a8:	75 ed                	jne    c000c697 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6aa:	5b                   	pop    ebx
c000c6ab:	5e                   	pop    esi
c000c6ac:	c3                   	ret    

c000c6ad <Phys::physicalMemorySetup(unsigned int)>:
c000c6ad:	55                   	push   ebp
c000c6ae:	57                   	push   edi
c000c6af:	56                   	push   esi
c000c6b0:	53                   	push   ebx
c000c6b1:	31 db                	xor    ebx,ebx
c000c6b3:	83 ec 40             	sub    esp,0x40
c000c6b6:	6a 30                	push   0x30
c000c6b8:	6a 00                	push   0x0
c000c6ba:	68 80 45 02 c0       	push   0xc0024580
c000c6bf:	e8 f6 3f ff ff       	call   c00006ba <memset>
c000c6c4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6c8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6cd:	05 00 10 00 00       	add    eax,0x1000
c000c6d2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6d6:	83 c4 10             	add    esp,0x10
c000c6d9:	56                   	push   esi
c000c6da:	56                   	push   esi
c000c6db:	6a 01                	push   0x1
c000c6dd:	53                   	push   ebx
c000c6de:	43                   	inc    ebx
c000c6df:	e8 de fd ff ff       	call   c000c4c2 <Phys::setPageState(unsigned long, bool)>
c000c6e4:	83 c4 10             	add    esp,0x10
c000c6e7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c6ed:	75 ea                	jne    c000c6d9 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c6ef:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c6f5:	66 85 c0             	test   ax,ax
c000c6f8:	0f 84 3b 01 00 00    	je     c000c839 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c6fe:	89 c7                	mov    edi,eax
c000c700:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c708:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c70e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c713:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c717:	eb 6d                	jmp    c000c786 <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c719:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c71d:	89 c1                	mov    ecx,eax
c000c71f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c723:	0f 83 bc 00 00 00    	jae    c000c7e5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c729:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c72d:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c732:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c736:	39 f2                	cmp    edx,esi
c000c738:	19 f8                	sbb    eax,edi
c000c73a:	73 07                	jae    c000c743 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c73c:	be 00 00 0a 00       	mov    esi,0xa0000
c000c741:	31 ff                	xor    edi,edi
c000c743:	89 f2                	mov    edx,esi
c000c745:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c74a:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c750:	89 f9                	mov    ecx,edi
c000c752:	83 d1 ff             	adc    ecx,0xffffffff
c000c755:	39 d0                	cmp    eax,edx
c000c757:	b8 00 00 00 00       	mov    eax,0x0
c000c75c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c760:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c764:	19 c8                	sbb    eax,ecx
c000c766:	0f 82 0d 01 00 00    	jb     c000c879 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c76c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c770:	83 c3 18             	add    ebx,0x18
c000c773:	41                   	inc    ecx
c000c774:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c778:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c77c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c780:	0f 84 c3 00 00 00    	je     c000c849 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c786:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c788:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c78b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c78e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c792:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c795:	01 f0                	add    eax,esi
c000c797:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c79a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c79e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7a2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7a6:	11 fa                	adc    edx,edi
c000c7a8:	55                   	push   ebp
c000c7a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7ad:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7b5:	51                   	push   ecx
c000c7b6:	56                   	push   esi
c000c7b7:	68 1c 12 02 c0       	push   0xc002121c
c000c7bc:	e8 80 29 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000c7c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	09 f8                	or     eax,edi
c000c7ca:	75 7d                	jne    c000c849 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7cc:	83 fd 01             	cmp    ebp,0x1
c000c7cf:	75 11                	jne    c000c7e2 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7d1:	ba 00 00 08 00       	mov    edx,0x80000
c000c7d6:	89 c1                	mov    ecx,eax
c000c7d8:	39 f2                	cmp    edx,esi
c000c7da:	19 f9                	sbb    ecx,edi
c000c7dc:	0f 83 37 ff ff ff    	jae    c000c719 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7e2:	4d                   	dec    ebp
c000c7e3:	75 87                	jne    c000c76c <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7e5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c7e9:	31 d2                	xor    edx,edx
c000c7eb:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c7ef:	89 c8                	mov    eax,ecx
c000c7f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7f5:	19 d1                	sbb    ecx,edx
c000c7f7:	0f 82 6f ff ff ff    	jb     c000c76c <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7fd:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c802:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c806:	b9 00 00 00 00       	mov    ecx,0x0
c000c80b:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c80f:	0f 83 57 ff ff ff    	jae    c000c76c <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c815:	39 c6                	cmp    esi,eax
c000c817:	19 d7                	sbb    edi,edx
c000c819:	73 6a                	jae    c000c885 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c81b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c81f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c823:	29 c7                	sub    edi,eax
c000c825:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c829:	19 d5                	sbb    ebp,edx
c000c82b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c82f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c833:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c837:	eb 4c                	jmp    c000c885 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c839:	83 ec 0c             	sub    esp,0xc
c000c83c:	68 f0 11 02 c0       	push   0xc00211f0
c000c841:	e8 c6 90 00 00       	call   c001590c <Krnl::panic(char const*)>
c000c846:	83 c4 10             	add    esp,0x10
c000c849:	bb 40 01 00 00       	mov    ebx,0x140
c000c84e:	50                   	push   eax
c000c84f:	50                   	push   eax
c000c850:	6a 00                	push   0x0
c000c852:	53                   	push   ebx
c000c853:	e8 6a fc ff ff       	call   c000c4c2 <Phys::setPageState(unsigned long, bool)>
c000c858:	8b 15 70 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024570
c000c85e:	43                   	inc    ebx
c000c85f:	42                   	inc    edx
c000c860:	83 c4 10             	add    esp,0x10
c000c863:	89 15 70 45 02 c0    	mov    DWORD PTR ds:0xc0024570,edx
c000c869:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c86f:	75 dd                	jne    c000c84e <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c871:	83 c4 3c             	add    esp,0x3c
c000c874:	5b                   	pop    ebx
c000c875:	5e                   	pop    esi
c000c876:	5f                   	pop    edi
c000c877:	5d                   	pop    ebp
c000c878:	c3                   	ret    
c000c879:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c87d:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c885:	56                   	push   esi
c000c886:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c88a:	56                   	push   esi
c000c88b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c88f:	57                   	push   edi
c000c890:	68 40 12 02 c0       	push   0xc0021240
c000c895:	e8 a7 28 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000c89a:	5d                   	pop    ebp
c000c89b:	58                   	pop    eax
c000c89c:	56                   	push   esi
c000c89d:	57                   	push   edi
c000c89e:	e8 d2 fd ff ff       	call   c000c675 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8ab:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8af:	8b 15 70 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024570
c000c8b5:	83 c4 0c             	add    esp,0xc
c000c8b8:	01 d0                	add    eax,edx
c000c8ba:	a3 70 45 02 c0       	mov    ds:0xc0024570,eax
c000c8bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8c6:	52                   	push   edx
c000c8c7:	50                   	push   eax
c000c8c8:	68 fe 11 02 c0       	push   0xc00211fe
c000c8cd:	e8 6f 28 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000c8d2:	83 c4 10             	add    esp,0x10
c000c8d5:	e9 92 fe ff ff       	jmp    c000c76c <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8da <Pipe::isAtty()>:
c000c8da:	31 c0                	xor    eax,eax
c000c8dc:	c3                   	ret    
c000c8dd:	90                   	nop

c000c8de <Pipe::~Pipe()>:
c000c8de:	83 ec 0c             	sub    esp,0xc
c000c8e1:	ba ac 12 02 c0       	mov    edx,0xc00212ac
c000c8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ea:	89 10                	mov    DWORD PTR [eax],edx
c000c8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	50                   	push   eax
c000c8f4:	e8 c7 15 00 00       	call   c000dec0 <UnixFile::~UnixFile()>
c000c8f9:	83 c4 10             	add    esp,0x10
c000c8fc:	90                   	nop
c000c8fd:	83 c4 0c             	add    esp,0xc
c000c900:	c3                   	ret    
c000c901:	90                   	nop

c000c902 <Pipe::~Pipe()>:
c000c902:	83 ec 0c             	sub    esp,0xc
c000c905:	83 ec 0c             	sub    esp,0xc
c000c908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c90c:	e8 cd ff ff ff       	call   c000c8de <Pipe::~Pipe()>
c000c911:	83 c4 10             	add    esp,0x10
c000c914:	83 ec 08             	sub    esp,0x8
c000c917:	6a 20                	push   0x20
c000c919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c91d:	e8 f9 26 00 00       	call   c000f01b <operator delete(void*, unsigned long)>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	83 c4 0c             	add    esp,0xc
c000c928:	c3                   	ret    
c000c929:	90                   	nop

c000c92a <Pipe::read(unsigned long long, void*, int*)>:
c000c92a:	55                   	push   ebp
c000c92b:	57                   	push   edi
c000c92c:	56                   	push   esi
c000c92d:	53                   	push   ebx
c000c92e:	83 ec 1c             	sub    esp,0x1c
c000c931:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c935:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c939:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c93d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c940:	89 c8                	mov    eax,ecx
c000c942:	99                   	cdq    
c000c943:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c947:	74 19                	je     c000c962 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c949:	39 f9                	cmp    ecx,edi
c000c94b:	89 d1                	mov    ecx,edx
c000c94d:	19 f1                	sbb    ecx,esi
c000c94f:	73 11                	jae    c000c962 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c951:	e8 a3 bf 00 00       	call   c00188f9 <lockScheduler()>
c000c956:	e8 e7 c2 00 00       	call   c0018c42 <schedule()>
c000c95b:	e8 9b bf 00 00       	call   c00188fb <unlockScheduler()>
c000c960:	eb db                	jmp    c000c93d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c962:	39 f8                	cmp    eax,edi
c000c964:	89 d1                	mov    ecx,edx
c000c966:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c96a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c96e:	19 f1                	sbb    ecx,esi
c000c970:	73 08                	jae    c000c97a <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c972:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c976:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c97a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c97d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c980:	29 c6                	sub    esi,eax
c000c982:	89 f1                	mov    ecx,esi
c000c984:	c1 f9 1f             	sar    ecx,0x1f
c000c987:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c98b:	89 ca                	mov    edx,ecx
c000c98d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c991:	19 d1                	sbb    ecx,edx
c000c993:	73 04                	jae    c000c999 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c995:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c999:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c99d:	89 fd                	mov    ebp,edi
c000c99f:	29 f5                	sub    ebp,esi
c000c9a1:	85 f6                	test   esi,esi
c000c9a3:	74 12                	je     c000c9b7 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9a5:	52                   	push   edx
c000c9a6:	56                   	push   esi
c000c9a7:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9aa:	50                   	push   eax
c000c9ab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9af:	e8 d0 3c ff ff       	call   c0000684 <memcpy>
c000c9b4:	83 c4 10             	add    esp,0x10
c000c9b7:	85 ed                	test   ebp,ebp
c000c9b9:	74 12                	je     c000c9cd <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9bb:	50                   	push   eax
c000c9bc:	55                   	push   ebp
c000c9bd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9c0:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9c4:	56                   	push   esi
c000c9c5:	e8 ba 3c ff ff       	call   c0000684 <memcpy>
c000c9ca:	83 c4 10             	add    esp,0x10
c000c9cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9d0:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9d3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9d6:	99                   	cdq    
c000c9d7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9db:	89 f7                	mov    edi,esi
c000c9dd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9e1:	c1 ff 1f             	sar    edi,0x1f
c000c9e4:	57                   	push   edi
c000c9e5:	56                   	push   esi
c000c9e6:	52                   	push   edx
c000c9e7:	50                   	push   eax
c000c9e8:	e8 9f 2a 01 00       	call   c001f48c <__umoddi3>
c000c9ed:	83 c4 10             	add    esp,0x10
c000c9f0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c9f3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c9f8:	75 10                	jne    c000ca0a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c9fa:	83 ec 0c             	sub    esp,0xc
c000c9fd:	68 69 12 02 c0       	push   0xc0021269
c000ca02:	e8 05 8f 00 00       	call   c001590c <Krnl::panic(char const*)>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca12:	89 10                	mov    DWORD PTR [eax],edx
c000ca14:	83 c4 1c             	add    esp,0x1c
c000ca17:	31 c0                	xor    eax,eax
c000ca19:	5b                   	pop    ebx
c000ca1a:	5e                   	pop    esi
c000ca1b:	5f                   	pop    edi
c000ca1c:	5d                   	pop    ebp
c000ca1d:	c3                   	ret    

c000ca1e <Pipe::write(unsigned long long, void*, int*)>:
c000ca1e:	55                   	push   ebp
c000ca1f:	57                   	push   edi
c000ca20:	56                   	push   esi
c000ca21:	53                   	push   ebx
c000ca22:	83 ec 1c             	sub    esp,0x1c
c000ca25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca2d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca34:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca37:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca3a:	89 de                	mov    esi,ebx
c000ca3c:	89 df                	mov    edi,ebx
c000ca3e:	c1 ff 1f             	sar    edi,0x1f
c000ca41:	01 c6                	add    esi,eax
c000ca43:	89 c8                	mov    eax,ecx
c000ca45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca49:	11 d7                	adc    edi,edx
c000ca4b:	99                   	cdq    
c000ca4c:	89 d0                	mov    eax,edx
c000ca4e:	39 f1                	cmp    ecx,esi
c000ca50:	19 f8                	sbb    eax,edi
c000ca52:	b8 01 00 00 00       	mov    eax,0x1
c000ca57:	0f 82 80 00 00 00    	jb     c000cadd <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca5d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca60:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca63:	01 d8                	add    eax,ebx
c000ca65:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca69:	99                   	cdq    
c000ca6a:	f7 f9                	idiv   ecx
c000ca6c:	29 d1                	sub    ecx,edx
c000ca6e:	89 d7                	mov    edi,edx
c000ca70:	89 c8                	mov    eax,ecx
c000ca72:	99                   	cdq    
c000ca73:	39 ce                	cmp    esi,ecx
c000ca75:	19 d3                	sbb    ebx,edx
c000ca77:	bb 00 00 00 00       	mov    ebx,0x0
c000ca7c:	72 04                	jb     c000ca82 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca7e:	89 f3                	mov    ebx,esi
c000ca80:	29 cb                	sub    ebx,ecx
c000ca82:	89 f1                	mov    ecx,esi
c000ca84:	29 d9                	sub    ecx,ebx
c000ca86:	74 1a                	je     c000caa2 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ca88:	52                   	push   edx
c000ca89:	51                   	push   ecx
c000ca8a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ca8e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ca92:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ca95:	57                   	push   edi
c000ca96:	e8 e9 3b ff ff       	call   c0000684 <memcpy>
c000ca9b:	83 c4 10             	add    esp,0x10
c000ca9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caa2:	85 db                	test   ebx,ebx
c000caa4:	74 12                	je     c000cab8 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000caa6:	50                   	push   eax
c000caa7:	53                   	push   ebx
c000caa8:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000caac:	51                   	push   ecx
c000caad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cab0:	e8 cf 3b ff ff       	call   c0000684 <memcpy>
c000cab5:	83 c4 10             	add    esp,0x10
c000cab8:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cabb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cac0:	75 10                	jne    c000cad2 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cac2:	83 ec 0c             	sub    esp,0xc
c000cac5:	68 85 12 02 c0       	push   0xc0021285
c000caca:	e8 3d 8e 00 00       	call   c001590c <Krnl::panic(char const*)>
c000cacf:	83 c4 10             	add    esp,0x10
c000cad2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cad6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cad9:	89 38                	mov    DWORD PTR [eax],edi
c000cadb:	31 c0                	xor    eax,eax
c000cadd:	83 c4 1c             	add    esp,0x1c
c000cae0:	5b                   	pop    ebx
c000cae1:	5e                   	pop    esi
c000cae2:	5f                   	pop    edi
c000cae3:	5d                   	pop    ebp
c000cae4:	c3                   	ret    
c000cae5:	90                   	nop

c000cae6 <Pipe::Pipe(int)>:
c000cae6:	83 ec 0c             	sub    esp,0xc
c000cae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caed:	83 ec 08             	sub    esp,0x8
c000caf0:	6a 00                	push   0x0
c000caf2:	50                   	push   eax
c000caf3:	e8 26 12 00 00       	call   c000dd1e <UnixFile::UnixFile(int)>
c000caf8:	83 c4 10             	add    esp,0x10
c000cafb:	ba ac 12 02 c0       	mov    edx,0xc00212ac
c000cb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb04:	89 10                	mov    DWORD PTR [eax],edx
c000cb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb15:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb20:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb2b:	83 ec 0c             	sub    esp,0xc
c000cb2e:	50                   	push   eax
c000cb2f:	e8 9f f4 ff ff       	call   c000bfd3 <malloc>
c000cb34:	83 c4 10             	add    esp,0x10
c000cb37:	89 c2                	mov    edx,eax
c000cb39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb44:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb48:	90                   	nop
c000cb49:	83 c4 0c             	add    esp,0xc
c000cb4c:	c3                   	ret    
c000cb4d:	90                   	nop

c000cb4e <VgaText::isAtty()>:
c000cb4e:	b0 01                	mov    al,0x1
c000cb50:	c3                   	ret    
c000cb51:	90                   	nop

c000cb52 <VgaText::~VgaText()>:
c000cb52:	83 ec 0c             	sub    esp,0xc
c000cb55:	ba 68 13 02 c0       	mov    edx,0xc0021368
c000cb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5e:	89 10                	mov    DWORD PTR [eax],edx
c000cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb64:	83 ec 0c             	sub    esp,0xc
c000cb67:	50                   	push   eax
c000cb68:	e8 53 13 00 00       	call   c000dec0 <UnixFile::~UnixFile()>
c000cb6d:	83 c4 10             	add    esp,0x10
c000cb70:	90                   	nop
c000cb71:	83 c4 0c             	add    esp,0xc
c000cb74:	c3                   	ret    
c000cb75:	90                   	nop

c000cb76 <VgaText::~VgaText()>:
c000cb76:	83 ec 0c             	sub    esp,0xc
c000cb79:	83 ec 0c             	sub    esp,0xc
c000cb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb80:	e8 cd ff ff ff       	call   c000cb52 <VgaText::~VgaText()>
c000cb85:	83 c4 10             	add    esp,0x10
c000cb88:	83 ec 08             	sub    esp,0x8
c000cb8b:	68 60 12 00 00       	push   0x1260
c000cb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb94:	e8 82 24 00 00       	call   c000f01b <operator delete(void*, unsigned long)>
c000cb99:	83 c4 10             	add    esp,0x10
c000cb9c:	83 c4 0c             	add    esp,0xc
c000cb9f:	c3                   	ret    

c000cba0 <VgaText::read(unsigned long long, void*, int*)>:
c000cba0:	83 ec 10             	sub    esp,0x10
c000cba3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbaf:	e8 a5 57 00 00       	call   c0012359 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbb4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbb8:	89 02                	mov    DWORD PTR [edx],eax
c000cbba:	31 c0                	xor    eax,eax
c000cbbc:	83 c4 1c             	add    esp,0x1c
c000cbbf:	c3                   	ret    

c000cbc0 <setTerminalScrollLock(bool)>:
c000cbc0:	c3                   	ret    

c000cbc1 <addToTerminalCycle(VgaText*)>:
c000cbc1:	8b 15 e0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245e0
c000cbc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbcb:	85 d2                	test   edx,edx
c000cbcd:	75 0c                	jne    c000cbdb <addToTerminalCycle(VgaText*)+0x1a>
c000cbcf:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbd5:	a3 e0 45 02 c0       	mov    ds:0xc00245e0,eax
c000cbda:	c3                   	ret    
c000cbdb:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbe1:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbe7:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cbed:	c3                   	ret    

c000cbee <installVgaTextImplementation()>:
c000cbee:	83 ec 10             	sub    esp,0x10
c000cbf1:	6a 20                	push   0x20
c000cbf3:	6a 00                	push   0x0
c000cbf5:	68 c0 45 02 c0       	push   0xc00245c0
c000cbfa:	e8 bb 3a ff ff       	call   c00006ba <memset>
c000cbff:	83 c4 1c             	add    esp,0x1c
c000cc02:	c3                   	ret    

c000cc03 <scrollTerminalScrollLock(int)>:
c000cc03:	c3                   	ret    

c000cc04 <VgaText::load()>:
c000cc04:	53                   	push   ebx
c000cc05:	31 c0                	xor    eax,eax
c000cc07:	83 ec 58             	sub    esp,0x58
c000cc0a:	89 e2                	mov    edx,esp
c000cc0c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc10:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc14:	40                   	inc    eax
c000cc15:	83 f8 50             	cmp    eax,0x50
c000cc18:	75 f6                	jne    c000cc10 <VgaText::load()+0xc>
c000cc1a:	31 c0                	xor    eax,eax
c000cc1c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc23:	84 c9                	test   cl,cl
c000cc25:	74 06                	je     c000cc2d <VgaText::load()+0x29>
c000cc27:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc2a:	40                   	inc    eax
c000cc2b:	eb ef                	jmp    c000cc1c <VgaText::load()+0x18>
c000cc2d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc33:	85 c0                	test   eax,eax
c000cc35:	74 09                	je     c000cc40 <VgaText::load()+0x3c>
c000cc37:	51                   	push   ecx
c000cc38:	51                   	push   ecx
c000cc39:	52                   	push   edx
c000cc3a:	53                   	push   ebx
c000cc3b:	ff d0                	call   eax
c000cc3d:	83 c4 10             	add    esp,0x10
c000cc40:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc46:	85 c0                	test   eax,eax
c000cc48:	74 09                	je     c000cc53 <VgaText::load()+0x4f>
c000cc4a:	83 ec 0c             	sub    esp,0xc
c000cc4d:	53                   	push   ebx
c000cc4e:	ff d0                	call   eax
c000cc50:	83 c4 10             	add    esp,0x10
c000cc53:	83 c4 58             	add    esp,0x58
c000cc56:	5b                   	pop    ebx
c000cc57:	c3                   	ret    

c000cc58 <VgaText::updateCursor()>:
c000cc58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc5c:	39 05 e4 45 02 c0    	cmp    DWORD PTR ds:0xc00245e4,eax
c000cc62:	75 0c                	jne    c000cc70 <VgaText::updateCursor()+0x18>
c000cc64:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc6a:	85 c0                	test   eax,eax
c000cc6c:	74 02                	je     c000cc70 <VgaText::updateCursor()+0x18>
c000cc6e:	ff e0                	jmp    eax
c000cc70:	c3                   	ret    
c000cc71:	90                   	nop

c000cc72 <VgaText::showCursor(bool)>:
c000cc72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc7a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc80:	c3                   	ret    
c000cc81:	90                   	nop

c000cc82 <VgaText::disableBlink(bool)>:
c000cc82:	56                   	push   esi
c000cc83:	53                   	push   ebx
c000cc84:	51                   	push   ecx
c000cc85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc8d:	39 1d e4 45 02 c0    	cmp    DWORD PTR ds:0xc00245e4,ebx
c000cc93:	75 18                	jne    c000ccad <VgaText::disableBlink(bool)+0x2b>
c000cc95:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cc9b:	85 c0                	test   eax,eax
c000cc9d:	74 0e                	je     c000ccad <VgaText::disableBlink(bool)+0x2b>
c000cc9f:	89 f1                	mov    ecx,esi
c000cca1:	52                   	push   edx
c000cca2:	52                   	push   edx
c000cca3:	0f b6 d1             	movzx  edx,cl
c000cca6:	52                   	push   edx
c000cca7:	53                   	push   ebx
c000cca8:	ff d0                	call   eax
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	89 f0                	mov    eax,esi
c000ccaf:	83 f0 01             	xor    eax,0x1
c000ccb2:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccb8:	58                   	pop    eax
c000ccb9:	5b                   	pop    ebx
c000ccba:	5e                   	pop    esi
c000ccbb:	c3                   	ret    

c000ccbc <VgaText::doANSI_SGR(int)>:
c000ccbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccc4:	85 d2                	test   edx,edx
c000ccc6:	75 14                	jne    c000ccdc <VgaText::doANSI_SGR(int)+0x20>
c000ccc8:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccce:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccd4:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ccda:	eb 65                	jmp    c000cd41 <VgaText::doANSI_SGR(int)+0x85>
c000ccdc:	83 fa 07             	cmp    edx,0x7
c000ccdf:	75 14                	jne    c000ccf5 <VgaText::doANSI_SGR(int)+0x39>
c000cce1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cce7:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cced:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ccf3:	eb 4c                	jmp    c000cd41 <VgaText::doANSI_SGR(int)+0x85>
c000ccf5:	83 fa 1b             	cmp    edx,0x1b
c000ccf8:	74 ce                	je     c000ccc8 <VgaText::doANSI_SGR(int)+0xc>
c000ccfa:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ccfd:	83 f9 07             	cmp    ecx,0x7
c000cd00:	77 09                	ja     c000cd0b <VgaText::doANSI_SGR(int)+0x4f>
c000cd02:	8b 14 8d 80 39 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc680]
c000cd09:	eb 20                	jmp    c000cd2b <VgaText::doANSI_SGR(int)+0x6f>
c000cd0b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd0e:	83 f9 07             	cmp    ecx,0x7
c000cd11:	77 09                	ja     c000cd1c <VgaText::doANSI_SGR(int)+0x60>
c000cd13:	8b 14 8d 80 39 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc680]
c000cd1a:	eb 25                	jmp    c000cd41 <VgaText::doANSI_SGR(int)+0x85>
c000cd1c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd1f:	83 f9 07             	cmp    ecx,0x7
c000cd22:	77 0e                	ja     c000cd32 <VgaText::doANSI_SGR(int)+0x76>
c000cd24:	8b 14 95 38 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc7c8]
c000cd2b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd31:	c3                   	ret    
c000cd32:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd35:	83 f9 07             	cmp    ecx,0x7
c000cd38:	77 0d                	ja     c000cd47 <VgaText::doANSI_SGR(int)+0x8b>
c000cd3a:	8b 14 95 10 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc7f0]
c000cd41:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd47:	c3                   	ret    

c000cd48 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd50:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd56:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd5c:	c3                   	ret    
c000cd5d:	90                   	nop

c000cd5e <VgaText::setDefaultFgColour(VgaColour)>:
c000cd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd66:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd6c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd72:	c3                   	ret    
c000cd73:	90                   	nop

c000cd74 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd74:	53                   	push   ebx
c000cd75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd79:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd81:	51                   	push   ecx
c000cd82:	e8 c1 ff ff ff       	call   c000cd48 <VgaText::setDefaultBgColour(VgaColour)>
c000cd87:	58                   	pop    eax
c000cd88:	5a                   	pop    edx
c000cd89:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cd8d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cd91:	5b                   	pop    ebx
c000cd92:	eb ca                	jmp    c000cd5e <VgaText::setDefaultFgColour(VgaColour)>

c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cd94:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cd99:	c1 e2 04             	shl    edx,0x4
c000cd9c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cda0:	83 e0 0f             	and    eax,0xf
c000cda3:	09 d0                	or     eax,edx
c000cda5:	c3                   	ret    

c000cda6 <VgaText::scrollScreen()>:
c000cda6:	57                   	push   edi
c000cda7:	56                   	push   esi
c000cda8:	be 01 00 00 00       	mov    esi,0x1
c000cdad:	53                   	push   ebx
c000cdae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdb2:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdb8:	31 ff                	xor    edi,edi
c000cdba:	01 d9                	add    ecx,ebx
c000cdbc:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdbf:	83 fe 17             	cmp    esi,0x17
c000cdc2:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdc8:	75 28                	jne    c000cdf2 <VgaText::scrollScreen()+0x4c>
c000cdca:	f7 c7 01 00 00 00    	test   edi,0x1
c000cdd0:	74 1c                	je     c000cdee <VgaText::scrollScreen()+0x48>
c000cdd2:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cdd9:	50                   	push   eax
c000cdda:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cde1:	50                   	push   eax
c000cde2:	e8 ad ff ff ff       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000cde7:	5a                   	pop    edx
c000cde8:	5a                   	pop    edx
c000cde9:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cdec:	eb 04                	jmp    c000cdf2 <VgaText::scrollScreen()+0x4c>
c000cdee:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cdf2:	47                   	inc    edi
c000cdf3:	41                   	inc    ecx
c000cdf4:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000cdfa:	75 c0                	jne    c000cdbc <VgaText::scrollScreen()+0x16>
c000cdfc:	46                   	inc    esi
c000cdfd:	83 fe 18             	cmp    esi,0x18
c000ce00:	75 b0                	jne    c000cdb2 <VgaText::scrollScreen()+0xc>
c000ce02:	39 1d e4 45 02 c0    	cmp    DWORD PTR ds:0xc00245e4,ebx
c000ce08:	75 24                	jne    c000ce2e <VgaText::scrollScreen()+0x88>
c000ce0a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce11:	74 08                	je     c000ce1b <VgaText::scrollScreen()+0x75>
c000ce13:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce19:	eb 13                	jmp    c000ce2e <VgaText::scrollScreen()+0x88>
c000ce1b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce21:	85 c0                	test   eax,eax
c000ce23:	74 09                	je     c000ce2e <VgaText::scrollScreen()+0x88>
c000ce25:	83 ec 0c             	sub    esp,0xc
c000ce28:	53                   	push   ebx
c000ce29:	ff d0                	call   eax
c000ce2b:	83 c4 10             	add    esp,0x10
c000ce2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce32:	5b                   	pop    ebx
c000ce33:	5e                   	pop    esi
c000ce34:	5f                   	pop    edi
c000ce35:	e9 1e fe ff ff       	jmp    c000cc58 <VgaText::updateCursor()>

c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce3a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce3f:	c1 e0 08             	shl    eax,0x8
c000ce42:	89 c2                	mov    edx,eax
c000ce44:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce49:	09 d0                	or     eax,edx
c000ce4b:	c3                   	ret    

c000ce4c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce4c:	53                   	push   ebx
c000ce4d:	83 ec 08             	sub    esp,0x8
c000ce50:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce59:	50                   	push   eax
c000ce5a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce5f:	50                   	push   eax
c000ce60:	e8 2f ff ff ff       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce65:	5a                   	pop    edx
c000ce66:	5b                   	pop    ebx
c000ce67:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce6c:	0f b6 c0             	movzx  eax,al
c000ce6f:	50                   	push   eax
c000ce70:	53                   	push   ebx
c000ce71:	e8 c4 ff ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000ce76:	5a                   	pop    edx
c000ce77:	5a                   	pop    edx
c000ce78:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce7e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce82:	0f b7 d2             	movzx  edx,dx
c000ce85:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ce8a:	39 0d e4 45 02 c0    	cmp    DWORD PTR ds:0xc00245e4,ecx
c000ce90:	75 14                	jne    c000cea6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ce92:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ce98:	85 c0                	test   eax,eax
c000ce9a:	74 0a                	je     c000cea6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ce9c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cea0:	83 c4 08             	add    esp,0x8
c000cea3:	5b                   	pop    ebx
c000cea4:	ff e0                	jmp    eax
c000cea6:	83 c4 08             	add    esp,0x8
c000cea9:	5b                   	pop    ebx
c000ceaa:	c3                   	ret    
c000ceab:	90                   	nop

c000ceac <VgaText::getCursorX()>:
c000ceac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceb0:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ceb6:	c3                   	ret    
c000ceb7:	90                   	nop

c000ceb8 <VgaText::getCursorY()>:
c000ceb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cebc:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cec2:	c3                   	ret    
c000cec3:	90                   	nop

c000cec4 <VgaText::setCursor(int, int)>:
c000cec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cecc:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ced2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ced6:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cedc:	e9 77 fd ff ff       	jmp    c000cc58 <VgaText::updateCursor()>
c000cee1:	90                   	nop

c000cee2 <VgaText::setCursorX(int)>:
c000cee2:	83 ec 10             	sub    esp,0x10
c000cee5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cee9:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ceef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef3:	50                   	push   eax
c000cef4:	e8 cb ff ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000cef9:	83 c4 1c             	add    esp,0x1c
c000cefc:	c3                   	ret    
c000cefd:	90                   	nop

c000cefe <VgaText::setCursorY(int)>:
c000cefe:	83 ec 10             	sub    esp,0x10
c000cf01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf09:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf0f:	50                   	push   eax
c000cf10:	e8 af ff ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000cf15:	83 c4 1c             	add    esp,0x1c
c000cf18:	c3                   	ret    
c000cf19:	90                   	nop

c000cf1a <VgaText::incrementCursor(bool)>:
c000cf1a:	56                   	push   esi
c000cf1b:	53                   	push   ebx
c000cf1c:	51                   	push   ecx
c000cf1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf25:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf2b:	40                   	inc    eax
c000cf2c:	83 f8 50             	cmp    eax,0x50
c000cf2f:	74 08                	je     c000cf39 <VgaText::incrementCursor(bool)+0x1f>
c000cf31:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf37:	eb 33                	jmp    c000cf6c <VgaText::incrementCursor(bool)+0x52>
c000cf39:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf3f:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf49:	8d 50 01             	lea    edx,[eax+0x1]
c000cf4c:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf52:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf58:	75 12                	jne    c000cf6c <VgaText::incrementCursor(bool)+0x52>
c000cf5a:	83 ec 0c             	sub    esp,0xc
c000cf5d:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf63:	53                   	push   ebx
c000cf64:	e8 3d fe ff ff       	call   c000cda6 <VgaText::scrollScreen()>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 f0                	mov    eax,esi
c000cf6e:	84 c0                	test   al,al
c000cf70:	74 0c                	je     c000cf7e <VgaText::incrementCursor(bool)+0x64>
c000cf72:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf76:	5a                   	pop    edx
c000cf77:	5b                   	pop    ebx
c000cf78:	5e                   	pop    esi
c000cf79:	e9 da fc ff ff       	jmp    c000cc58 <VgaText::updateCursor()>
c000cf7e:	58                   	pop    eax
c000cf7f:	5b                   	pop    ebx
c000cf80:	5e                   	pop    esi
c000cf81:	c3                   	ret    

c000cf82 <VgaText::updateRAMUsageDisplay(int)>:
c000cf82:	53                   	push   ebx
c000cf83:	bb 0a 00 00 00       	mov    ebx,0xa
c000cf88:	6a 0f                	push   0xf
c000cf8a:	6a 00                	push   0x0
c000cf8c:	e8 03 fe ff ff       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000cf91:	5a                   	pop    edx
c000cf92:	59                   	pop    ecx
c000cf93:	0f b6 c8             	movzx  ecx,al
c000cf96:	51                   	push   ecx
c000cf97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf9b:	99                   	cdq    
c000cf9c:	f7 fb                	idiv   ebx
c000cf9e:	83 c0 30             	add    eax,0x30
c000cfa1:	89 d3                	mov    ebx,edx
c000cfa3:	0f be c0             	movsx  eax,al
c000cfa6:	50                   	push   eax
c000cfa7:	e8 8e fe ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000cfac:	5a                   	pop    edx
c000cfad:	83 c3 30             	add    ebx,0x30
c000cfb0:	5a                   	pop    edx
c000cfb1:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfb7:	0f b6 db             	movzx  ebx,bl
c000cfba:	51                   	push   ecx
c000cfbb:	53                   	push   ebx
c000cfbc:	e8 79 fe ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000cfc1:	5b                   	pop    ebx
c000cfc2:	5a                   	pop    edx
c000cfc3:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfc9:	51                   	push   ecx
c000cfca:	6a 25                	push   0x25
c000cfcc:	e8 69 fe ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000cfd1:	59                   	pop    ecx
c000cfd2:	5b                   	pop    ebx
c000cfd3:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cfd9:	5b                   	pop    ebx
c000cfda:	c3                   	ret    
c000cfdb:	90                   	nop

c000cfdc <VgaText::updateDiskUsage()>:
c000cfdc:	55                   	push   ebp
c000cfdd:	bd 10 27 00 00       	mov    ebp,0x2710
c000cfe2:	57                   	push   edi
c000cfe3:	56                   	push   esi
c000cfe4:	53                   	push   ebx
c000cfe5:	6a 0f                	push   0xf
c000cfe7:	6a 00                	push   0x0
c000cfe9:	e8 a6 fd ff ff       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000cfee:	0f b6 d8             	movzx  ebx,al
c000cff1:	a1 c4 62 02 c0       	mov    eax,ds:0xc00262c4
c000cff6:	5a                   	pop    edx
c000cff7:	99                   	cdq    
c000cff8:	f7 fd                	idiv   ebp
c000cffa:	59                   	pop    ecx
c000cffb:	b9 0a 00 00 00       	mov    ecx,0xa
c000d000:	99                   	cdq    
c000d001:	f7 f9                	idiv   ecx
c000d003:	53                   	push   ebx
c000d004:	8d 42 30             	lea    eax,[edx+0x30]
c000d007:	0f b6 c0             	movzx  eax,al
c000d00a:	50                   	push   eax
c000d00b:	e8 2a fe ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d010:	5e                   	pop    esi
c000d011:	5f                   	pop    edi
c000d012:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d018:	a1 c4 62 02 c0       	mov    eax,ds:0xc00262c4
c000d01d:	bf e8 03 00 00       	mov    edi,0x3e8
c000d022:	99                   	cdq    
c000d023:	f7 ff                	idiv   edi
c000d025:	99                   	cdq    
c000d026:	f7 f9                	idiv   ecx
c000d028:	53                   	push   ebx
c000d029:	8d 42 30             	lea    eax,[edx+0x30]
c000d02c:	0f b6 c0             	movzx  eax,al
c000d02f:	50                   	push   eax
c000d030:	e8 05 fe ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d035:	5a                   	pop    edx
c000d036:	5e                   	pop    esi
c000d037:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d03d:	a1 c4 62 02 c0       	mov    eax,ds:0xc00262c4
c000d042:	be 64 00 00 00       	mov    esi,0x64
c000d047:	99                   	cdq    
c000d048:	f7 fe                	idiv   esi
c000d04a:	99                   	cdq    
c000d04b:	f7 f9                	idiv   ecx
c000d04d:	53                   	push   ebx
c000d04e:	8d 42 30             	lea    eax,[edx+0x30]
c000d051:	0f b6 c0             	movzx  eax,al
c000d054:	50                   	push   eax
c000d055:	e8 e0 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d05a:	5a                   	pop    edx
c000d05b:	5a                   	pop    edx
c000d05c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d062:	a1 c4 62 02 c0       	mov    eax,ds:0xc00262c4
c000d067:	53                   	push   ebx
c000d068:	99                   	cdq    
c000d069:	f7 f9                	idiv   ecx
c000d06b:	99                   	cdq    
c000d06c:	f7 f9                	idiv   ecx
c000d06e:	8d 42 30             	lea    eax,[edx+0x30]
c000d071:	0f b6 c0             	movzx  eax,al
c000d074:	50                   	push   eax
c000d075:	e8 c0 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d07a:	5a                   	pop    edx
c000d07b:	5a                   	pop    edx
c000d07c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d082:	a1 c4 62 02 c0       	mov    eax,ds:0xc00262c4
c000d087:	53                   	push   ebx
c000d088:	99                   	cdq    
c000d089:	f7 f9                	idiv   ecx
c000d08b:	8d 42 30             	lea    eax,[edx+0x30]
c000d08e:	0f b6 c0             	movzx  eax,al
c000d091:	50                   	push   eax
c000d092:	e8 a3 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d097:	5a                   	pop    edx
c000d098:	5a                   	pop    edx
c000d099:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d09f:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c000d0a4:	53                   	push   ebx
c000d0a5:	99                   	cdq    
c000d0a6:	f7 fd                	idiv   ebp
c000d0a8:	99                   	cdq    
c000d0a9:	f7 f9                	idiv   ecx
c000d0ab:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ae:	0f b6 c0             	movzx  eax,al
c000d0b1:	50                   	push   eax
c000d0b2:	e8 83 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d0b7:	5d                   	pop    ebp
c000d0b8:	5a                   	pop    edx
c000d0b9:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0bf:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c000d0c4:	53                   	push   ebx
c000d0c5:	99                   	cdq    
c000d0c6:	f7 ff                	idiv   edi
c000d0c8:	99                   	cdq    
c000d0c9:	f7 f9                	idiv   ecx
c000d0cb:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ce:	0f b6 c0             	movzx  eax,al
c000d0d1:	50                   	push   eax
c000d0d2:	e8 63 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d0d7:	5f                   	pop    edi
c000d0d8:	5d                   	pop    ebp
c000d0d9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0df:	53                   	push   ebx
c000d0e0:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c000d0e5:	99                   	cdq    
c000d0e6:	f7 fe                	idiv   esi
c000d0e8:	99                   	cdq    
c000d0e9:	f7 f9                	idiv   ecx
c000d0eb:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ee:	0f b6 c0             	movzx  eax,al
c000d0f1:	50                   	push   eax
c000d0f2:	e8 43 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d0f7:	5a                   	pop    edx
c000d0f8:	5e                   	pop    esi
c000d0f9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d0ff:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c000d104:	53                   	push   ebx
c000d105:	99                   	cdq    
c000d106:	f7 f9                	idiv   ecx
c000d108:	99                   	cdq    
c000d109:	f7 f9                	idiv   ecx
c000d10b:	8d 42 30             	lea    eax,[edx+0x30]
c000d10e:	0f b6 c0             	movzx  eax,al
c000d111:	50                   	push   eax
c000d112:	e8 23 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d117:	5f                   	pop    edi
c000d118:	5d                   	pop    ebp
c000d119:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d11f:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c000d124:	53                   	push   ebx
c000d125:	99                   	cdq    
c000d126:	f7 f9                	idiv   ecx
c000d128:	83 c2 30             	add    edx,0x30
c000d12b:	0f b6 d2             	movzx  edx,dl
c000d12e:	52                   	push   edx
c000d12f:	e8 06 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d134:	5a                   	pop    edx
c000d135:	59                   	pop    ecx
c000d136:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d13c:	5b                   	pop    ebx
c000d13d:	5e                   	pop    esi
c000d13e:	5f                   	pop    edi
c000d13f:	5d                   	pop    ebp
c000d140:	c3                   	ret    
c000d141:	90                   	nop

c000d142 <VgaText::updateTitle()>:
c000d142:	53                   	push   ebx
c000d143:	31 c0                	xor    eax,eax
c000d145:	83 ec 58             	sub    esp,0x58
c000d148:	89 e1                	mov    ecx,esp
c000d14a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d14e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d152:	40                   	inc    eax
c000d153:	83 f8 50             	cmp    eax,0x50
c000d156:	75 f6                	jne    c000d14e <VgaText::updateTitle()+0xc>
c000d158:	31 c0                	xor    eax,eax
c000d15a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d161:	84 db                	test   bl,bl
c000d163:	74 06                	je     c000d16b <VgaText::updateTitle()+0x29>
c000d165:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d168:	40                   	inc    eax
c000d169:	eb ef                	jmp    c000d15a <VgaText::updateTitle()+0x18>
c000d16b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d171:	85 c0                	test   eax,eax
c000d173:	74 09                	je     c000d17e <VgaText::updateTitle()+0x3c>
c000d175:	53                   	push   ebx
c000d176:	53                   	push   ebx
c000d177:	51                   	push   ecx
c000d178:	52                   	push   edx
c000d179:	ff d0                	call   eax
c000d17b:	83 c4 10             	add    esp,0x10
c000d17e:	e8 59 fe ff ff       	call   c000cfdc <VgaText::updateDiskUsage()>
c000d183:	83 c4 58             	add    esp,0x58
c000d186:	5b                   	pop    ebx
c000d187:	c3                   	ret    

c000d188 <VgaText::setTitleTextColour(VgaColour)>:
c000d188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d18c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d190:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d196:	eb aa                	jmp    c000d142 <VgaText::updateTitle()>

c000d198 <VgaText::setTitleColour(VgaColour)>:
c000d198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d19c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a0:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1a6:	eb 9a                	jmp    c000d142 <VgaText::updateTitle()>

c000d1a8 <VgaText::setTitle(char*)>:
c000d1a8:	53                   	push   ebx
c000d1a9:	83 ec 10             	sub    esp,0x10
c000d1ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1b4:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1ba:	50                   	push   eax
c000d1bb:	e8 99 35 ff ff       	call   c0000759 <strcpy>
c000d1c0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1c4:	83 c4 18             	add    esp,0x18
c000d1c7:	5b                   	pop    ebx
c000d1c8:	e9 75 ff ff ff       	jmp    c000d142 <VgaText::updateTitle()>
c000d1cd:	90                   	nop

c000d1ce <VgaText::decrementCursor(bool)>:
c000d1ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1d6:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1dc:	85 c0                	test   eax,eax
c000d1de:	74 07                	je     c000d1e7 <VgaText::decrementCursor(bool)+0x19>
c000d1e0:	48                   	dec    eax
c000d1e1:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1e7:	84 c9                	test   cl,cl
c000d1e9:	74 09                	je     c000d1f4 <VgaText::decrementCursor(bool)+0x26>
c000d1eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1ef:	e9 64 fa ff ff       	jmp    c000cc58 <VgaText::updateCursor()>
c000d1f4:	c3                   	ret    
c000d1f5:	90                   	nop

c000d1f6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d1f6:	53                   	push   ebx
c000d1f7:	83 ec 08             	sub    esp,0x8
c000d1fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d1fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d202:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d206:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d20a:	3c 07                	cmp    al,0x7
c000d20c:	75 2a                	jne    c000d238 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d20e:	a1 8c 46 02 c0       	mov    eax,ds:0xc002468c
c000d213:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d21b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d223:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d22b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d22f:	83 c4 08             	add    esp,0x8
c000d232:	5b                   	pop    ebx
c000d233:	e9 fc 2c 00 00       	jmp    c000ff34 <Buzzer::beep(int, int, bool)>
c000d238:	3c 0d                	cmp    al,0xd
c000d23a:	75 0c                	jne    c000d248 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d23c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d246:	eb 3b                	jmp    c000d283 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d248:	3c 0a                	cmp    al,0xa
c000d24a:	75 40                	jne    c000d28c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d24c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d252:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d25c:	8d 50 01             	lea    edx,[eax+0x1]
c000d25f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d265:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d26b:	75 12                	jne    c000d27f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d26d:	83 ec 0c             	sub    esp,0xc
c000d270:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d276:	53                   	push   ebx
c000d277:	e8 2a fb ff ff       	call   c000cda6 <VgaText::scrollScreen()>
c000d27c:	83 c4 10             	add    esp,0x10
c000d27f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d283:	83 c4 08             	add    esp,0x8
c000d286:	5b                   	pop    ebx
c000d287:	e9 cc f9 ff ff       	jmp    c000cc58 <VgaText::updateCursor()>
c000d28c:	3c 08                	cmp    al,0x8
c000d28e:	75 31                	jne    c000d2c1 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d290:	50                   	push   eax
c000d291:	50                   	push   eax
c000d292:	6a 01                	push   0x1
c000d294:	53                   	push   ebx
c000d295:	e8 34 ff ff ff       	call   c000d1ce <VgaText::decrementCursor(bool)>
c000d29a:	5a                   	pop    edx
c000d29b:	59                   	pop    ecx
c000d29c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2a2:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2a8:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2ae:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2b4:	6a 20                	push   0x20
c000d2b6:	53                   	push   ebx
c000d2b7:	e8 90 fb ff ff       	call   c000ce4c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2bc:	83 c4 28             	add    esp,0x28
c000d2bf:	5b                   	pop    ebx
c000d2c0:	c3                   	ret    
c000d2c1:	83 ec 08             	sub    esp,0x8
c000d2c4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2ca:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2d0:	0f be c0             	movsx  eax,al
c000d2d3:	51                   	push   ecx
c000d2d4:	52                   	push   edx
c000d2d5:	50                   	push   eax
c000d2d6:	53                   	push   ebx
c000d2d7:	e8 70 fb ff ff       	call   c000ce4c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2dc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2e0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d2e8:	83 c4 28             	add    esp,0x28
c000d2eb:	5b                   	pop    ebx
c000d2ec:	e9 29 fc ff ff       	jmp    c000cf1a <VgaText::incrementCursor(bool)>
c000d2f1:	90                   	nop

c000d2f2 <VgaText::isShowingCursor()>:
c000d2f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f6:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d2fc:	c3                   	ret    
c000d2fd:	90                   	nop

c000d2fe <VgaText::isBlinkDisabled()>:
c000d2fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d302:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d308:	83 f0 01             	xor    eax,0x1
c000d30b:	c3                   	ret    

c000d30c <VgaText::setCursorHeight(int)>:
c000d30c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d310:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d314:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d31a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d321:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d325:	e9 48 f9 ff ff       	jmp    c000cc72 <VgaText::showCursor(bool)>

c000d32a <VgaText::getCursorHeight()>:
c000d32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d32e:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d334:	c3                   	ret    

c000d335 <setActiveTerminal(VgaText*)>:
c000d335:	53                   	push   ebx
c000d336:	83 ec 08             	sub    esp,0x8
c000d339:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d33d:	85 db                	test   ebx,ebx
c000d33f:	75 11                	jne    c000d352 <setActiveTerminal(VgaText*)+0x1d>
c000d341:	c7 44 24 10 c0 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc00212c0
c000d349:	83 c4 08             	add    esp,0x8
c000d34c:	5b                   	pop    ebx
c000d34d:	e9 ba 85 00 00       	jmp    c001590c <Krnl::panic(char const*)>
c000d352:	50                   	push   eax
c000d353:	50                   	push   eax
c000d354:	53                   	push   ebx
c000d355:	68 ce 12 02 c0       	push   0xc00212ce
c000d35a:	e8 e2 1d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000d35f:	a1 e4 45 02 c0       	mov    eax,ds:0xc00245e4
c000d364:	83 c4 10             	add    esp,0x10
c000d367:	85 c0                	test   eax,eax
c000d369:	74 0c                	je     c000d377 <setActiveTerminal(VgaText*)+0x42>
c000d36b:	83 ec 0c             	sub    esp,0xc
c000d36e:	50                   	push   eax
c000d36f:	e8 e4 f8 ff ff       	call   c000cc58 <VgaText::updateCursor()>
c000d374:	83 c4 10             	add    esp,0x10
c000d377:	51                   	push   ecx
c000d378:	89 1d e4 45 02 c0    	mov    DWORD PTR ds:0xc00245e4,ebx
c000d37e:	51                   	push   ecx
c000d37f:	53                   	push   ebx
c000d380:	68 e6 12 02 c0       	push   0xc00212e6
c000d385:	e8 b7 1d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000d38a:	83 c4 0c             	add    esp,0xc
c000d38d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d393:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d399:	53                   	push   ebx
c000d39a:	e8 25 fb ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000d39f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3a2:	e8 57 ff ff ff       	call   c000d2fe <VgaText::isBlinkDisabled()>
c000d3a7:	5a                   	pop    edx
c000d3a8:	59                   	pop    ecx
c000d3a9:	0f b6 c0             	movzx  eax,al
c000d3ac:	50                   	push   eax
c000d3ad:	53                   	push   ebx
c000d3ae:	e8 cf f8 ff ff       	call   c000cc82 <VgaText::disableBlink(bool)>
c000d3b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3b6:	e8 6f ff ff ff       	call   c000d32a <VgaText::getCursorHeight()>
c000d3bb:	5a                   	pop    edx
c000d3bc:	59                   	pop    ecx
c000d3bd:	50                   	push   eax
c000d3be:	53                   	push   ebx
c000d3bf:	e8 48 ff ff ff       	call   c000d30c <VgaText::setCursorHeight(int)>
c000d3c4:	83 c4 10             	add    esp,0x10
c000d3c7:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3ce:	75 0a                	jne    c000d3da <setActiveTerminal(VgaText*)+0xa5>
c000d3d0:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3da:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3de:	83 c4 08             	add    esp,0x8
c000d3e1:	5b                   	pop    ebx
c000d3e2:	e9 1d f8 ff ff       	jmp    c000cc04 <VgaText::load()>

c000d3e7 <doTerminalCycle()>:
c000d3e7:	83 ec 18             	sub    esp,0x18
c000d3ea:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c000d3ef:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d3f5:	50                   	push   eax
c000d3f6:	a3 e0 45 02 c0       	mov    ds:0xc00245e0,eax
c000d3fb:	e8 35 ff ff ff       	call   c000d335 <setActiveTerminal(VgaText*)>
c000d400:	83 c4 1c             	add    esp,0x1c
c000d403:	c3                   	ret    

c000d404 <VgaText::doUpdate()>:
c000d404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d408:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d40e:	85 c0                	test   eax,eax
c000d410:	74 02                	je     c000d414 <VgaText::doUpdate()+0x10>
c000d412:	ff e0                	jmp    eax
c000d414:	c3                   	ret    
c000d415:	90                   	nop

c000d416 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d416:	55                   	push   ebp
c000d417:	57                   	push   edi
c000d418:	56                   	push   esi
c000d419:	53                   	push   ebx
c000d41a:	83 ec 1c             	sub    esp,0x1c
c000d41d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d421:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d426:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d42d:	50                   	push   eax
c000d42e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d433:	50                   	push   eax
c000d434:	e8 5b f9 ff ff       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000d439:	59                   	pop    ecx
c000d43a:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d43d:	5b                   	pop    ebx
c000d43e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d446:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d44c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d450:	0f b7 db             	movzx  ebx,bx
c000d453:	01 db                	add    ebx,ebx
c000d455:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d459:	01 fb                	add    ebx,edi
c000d45b:	31 c0                	xor    eax,eax
c000d45d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d460:	84 c9                	test   cl,cl
c000d462:	0f 84 3d 01 00 00    	je     c000d5a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d468:	80 f9 0d             	cmp    cl,0xd
c000d46b:	75 0f                	jne    c000d47c <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d46d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d477:	e9 23 01 00 00       	jmp    c000d59f <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d47c:	80 f9 0a             	cmp    cl,0xa
c000d47f:	75 5b                	jne    c000d4dc <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d481:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d487:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d491:	8d 48 01             	lea    ecx,[eax+0x1]
c000d494:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d49a:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4a0:	75 12                	jne    c000d4b4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4a2:	83 ec 0c             	sub    esp,0xc
c000d4a5:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4ab:	55                   	push   ebp
c000d4ac:	e8 f5 f8 ff ff       	call   c000cda6 <VgaText::scrollScreen()>
c000d4b1:	83 c4 10             	add    esp,0x10
c000d4b4:	83 ec 0c             	sub    esp,0xc
c000d4b7:	55                   	push   ebp
c000d4b8:	e8 9b f7 ff ff       	call   c000cc58 <VgaText::updateCursor()>
c000d4bd:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4c5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4cb:	83 c4 10             	add    esp,0x10
c000d4ce:	0f b7 db             	movzx  ebx,bx
c000d4d1:	01 db                	add    ebx,ebx
c000d4d3:	31 c0                	xor    eax,eax
c000d4d5:	01 fb                	add    ebx,edi
c000d4d7:	e9 c3 00 00 00       	jmp    c000d59f <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4dc:	80 f9 08             	cmp    cl,0x8
c000d4df:	75 4e                	jne    c000d52f <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4e5:	50                   	push   eax
c000d4e6:	50                   	push   eax
c000d4e7:	6a 01                	push   0x1
c000d4e9:	55                   	push   ebp
c000d4ea:	e8 df fc ff ff       	call   c000d1ce <VgaText::decrementCursor(bool)>
c000d4ef:	58                   	pop    eax
c000d4f0:	5a                   	pop    edx
c000d4f1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d4f7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d4fd:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d503:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d509:	6a 20                	push   0x20
c000d50b:	55                   	push   ebp
c000d50c:	e8 3b f9 ff ff       	call   c000ce4c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d511:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d519:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d51f:	83 c4 20             	add    esp,0x20
c000d522:	0f b7 db             	movzx  ebx,bx
c000d525:	01 db                	add    ebx,ebx
c000d527:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d52b:	01 fb                	add    ebx,edi
c000d52d:	eb 70                	jmp    c000d59f <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d52f:	50                   	push   eax
c000d530:	50                   	push   eax
c000d531:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d536:	50                   	push   eax
c000d537:	51                   	push   ecx
c000d538:	e8 fd f8 ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d53d:	66 89 03             	mov    WORD PTR [ebx],ax
c000d540:	83 c4 10             	add    esp,0x10
c000d543:	39 2d e4 45 02 c0    	cmp    DWORD PTR ds:0xc00245e4,ebp
c000d549:	75 2a                	jne    c000d575 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d54b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d551:	85 c0                	test   eax,eax
c000d553:	74 20                	je     c000d575 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d555:	52                   	push   edx
c000d556:	52                   	push   edx
c000d557:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d55d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d563:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d567:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d56b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d56e:	51                   	push   ecx
c000d56f:	55                   	push   ebp
c000d570:	ff d0                	call   eax
c000d572:	83 c4 20             	add    esp,0x20
c000d575:	50                   	push   eax
c000d576:	83 c3 02             	add    ebx,0x2
c000d579:	50                   	push   eax
c000d57a:	6a 00                	push   0x0
c000d57c:	55                   	push   ebp
c000d57d:	e8 98 f9 ff ff       	call   c000cf1a <VgaText::incrementCursor(bool)>
c000d582:	83 c4 10             	add    esp,0x10
c000d585:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d58c:	75 0f                	jne    c000d59d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d58e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d596:	0f b7 db             	movzx  ebx,bx
c000d599:	01 db                	add    ebx,ebx
c000d59b:	01 fb                	add    ebx,edi
c000d59d:	b0 01                	mov    al,0x1
c000d59f:	46                   	inc    esi
c000d5a0:	e9 b8 fe ff ff       	jmp    c000d45d <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5a5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5a9:	83 ec 0c             	sub    esp,0xc
c000d5ac:	55                   	push   ebp
c000d5ad:	e8 a6 f6 ff ff       	call   c000cc58 <VgaText::updateCursor()>
c000d5b2:	83 c4 10             	add    esp,0x10
c000d5b5:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5b9:	84 c0                	test   al,al
c000d5bb:	74 0c                	je     c000d5c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5bd:	83 ec 0c             	sub    esp,0xc
c000d5c0:	55                   	push   ebp
c000d5c1:	e8 3e fe ff ff       	call   c000d404 <VgaText::doUpdate()>
c000d5c6:	83 c4 10             	add    esp,0x10
c000d5c9:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5d0:	83 c4 1c             	add    esp,0x1c
c000d5d3:	5b                   	pop    ebx
c000d5d4:	5e                   	pop    esi
c000d5d5:	5f                   	pop    edi
c000d5d6:	5d                   	pop    ebp
c000d5d7:	c3                   	ret    

c000d5d8 <VgaText::clearScreen()>:
c000d5d8:	57                   	push   edi
c000d5d9:	56                   	push   esi
c000d5da:	31 f6                	xor    esi,esi
c000d5dc:	53                   	push   ebx
c000d5dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5e1:	52                   	push   edx
c000d5e2:	6a 00                	push   0x0
c000d5e4:	6a 00                	push   0x0
c000d5e6:	53                   	push   ebx
c000d5e7:	e8 d8 f8 ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000d5ec:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d5f3:	83 c4 10             	add    esp,0x10
c000d5f6:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d5fc:	7e 26                	jle    c000d624 <VgaText::clearScreen()+0x4c>
c000d5fe:	31 ff                	xor    edi,edi
c000d600:	50                   	push   eax
c000d601:	50                   	push   eax
c000d602:	56                   	push   esi
c000d603:	57                   	push   edi
c000d604:	47                   	inc    edi
c000d605:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d60b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d611:	6a 20                	push   0x20
c000d613:	53                   	push   ebx
c000d614:	e8 33 f8 ff ff       	call   c000ce4c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d619:	83 c4 20             	add    esp,0x20
c000d61c:	83 ff 50             	cmp    edi,0x50
c000d61f:	75 df                	jne    c000d600 <VgaText::clearScreen()+0x28>
c000d621:	46                   	inc    esi
c000d622:	eb d2                	jmp    c000d5f6 <VgaText::clearScreen()+0x1e>
c000d624:	83 ec 0c             	sub    esp,0xc
c000d627:	53                   	push   ebx
c000d628:	e8 d7 fd ff ff       	call   c000d404 <VgaText::doUpdate()>
c000d62d:	83 c4 10             	add    esp,0x10
c000d630:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d637:	5b                   	pop    ebx
c000d638:	5e                   	pop    esi
c000d639:	5f                   	pop    edi
c000d63a:	c3                   	ret    
c000d63b:	90                   	nop

c000d63c <VgaText::putchar(char)>:
c000d63c:	56                   	push   esi
c000d63d:	53                   	push   ebx
c000d63e:	83 ec 14             	sub    esp,0x14
c000d641:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d645:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d649:	3c 5b                	cmp    al,0x5b
c000d64b:	75 21                	jne    c000d66e <VgaText::putchar(char)+0x32>
c000d64d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d654:	74 28                	je     c000d67e <VgaText::putchar(char)+0x42>
c000d656:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d65f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d669:	e9 e2 00 00 00       	jmp    c000d750 <VgaText::putchar(char)+0x114>
c000d66e:	3c 1b                	cmp    al,0x1b
c000d670:	75 0c                	jne    c000d67e <VgaText::putchar(char)+0x42>
c000d672:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d679:	e9 d2 00 00 00       	jmp    c000d750 <VgaText::putchar(char)+0x114>
c000d67e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d684:	84 c9                	test   cl,cl
c000d686:	0f 84 ab 00 00 00    	je     c000d737 <VgaText::putchar(char)+0xfb>
c000d68c:	8d 50 c0             	lea    edx,[eax-0x40]
c000d68f:	80 fa 3e             	cmp    dl,0x3e
c000d692:	0f 87 82 00 00 00    	ja     c000d71a <VgaText::putchar(char)+0xde>
c000d698:	3c 6d                	cmp    al,0x6d
c000d69a:	75 4d                	jne    c000d6e9 <VgaText::putchar(char)+0xad>
c000d69c:	31 f6                	xor    esi,esi
c000d69e:	31 d2                	xor    edx,edx
c000d6a0:	31 c0                	xor    eax,eax
c000d6a2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6a8:	7e 30                	jle    c000d6da <VgaText::putchar(char)+0x9e>
c000d6aa:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6b2:	80 fa 3b             	cmp    dl,0x3b
c000d6b5:	75 17                	jne    c000d6ce <VgaText::putchar(char)+0x92>
c000d6b7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6bb:	50                   	push   eax
c000d6bc:	53                   	push   ebx
c000d6bd:	e8 fa f5 ff ff       	call   c000ccbc <VgaText::doANSI_SGR(int)>
c000d6c2:	59                   	pop    ecx
c000d6c3:	31 d2                	xor    edx,edx
c000d6c5:	58                   	pop    eax
c000d6c6:	31 c0                	xor    eax,eax
c000d6c8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6cc:	eb 09                	jmp    c000d6d7 <VgaText::putchar(char)+0x9b>
c000d6ce:	6b c0 0a             	imul   eax,eax,0xa
c000d6d1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6d5:	88 ca                	mov    dl,cl
c000d6d7:	46                   	inc    esi
c000d6d8:	eb c8                	jmp    c000d6a2 <VgaText::putchar(char)+0x66>
c000d6da:	84 d2                	test   dl,dl
c000d6dc:	74 31                	je     c000d70f <VgaText::putchar(char)+0xd3>
c000d6de:	50                   	push   eax
c000d6df:	53                   	push   ebx
c000d6e0:	e8 d7 f5 ff ff       	call   c000ccbc <VgaText::doANSI_SGR(int)>
c000d6e5:	58                   	pop    eax
c000d6e6:	5a                   	pop    edx
c000d6e7:	eb 26                	jmp    c000d70f <VgaText::putchar(char)+0xd3>
c000d6e9:	3c 4a                	cmp    al,0x4a
c000d6eb:	75 22                	jne    c000d70f <VgaText::putchar(char)+0xd3>
c000d6ed:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d6f4:	75 19                	jne    c000d70f <VgaText::putchar(char)+0xd3>
c000d6f6:	83 ec 0c             	sub    esp,0xc
c000d6f9:	53                   	push   ebx
c000d6fa:	e8 d9 fe ff ff       	call   c000d5d8 <VgaText::clearScreen()>
c000d6ff:	83 c4 0c             	add    esp,0xc
c000d702:	6a 00                	push   0x0
c000d704:	6a 00                	push   0x0
c000d706:	53                   	push   ebx
c000d707:	e8 b8 f7 ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000d70c:	83 c4 10             	add    esp,0x10
c000d70f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d718:	eb 36                	jmp    c000d750 <VgaText::putchar(char)+0x114>
c000d71a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d720:	83 fa 0e             	cmp    edx,0xe
c000d723:	7f 2b                	jg     c000d750 <VgaText::putchar(char)+0x114>
c000d725:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d728:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d72e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d735:	eb 19                	jmp    c000d750 <VgaText::putchar(char)+0x114>
c000d737:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d73d:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d743:	0f be c0             	movsx  eax,al
c000d746:	50                   	push   eax
c000d747:	53                   	push   ebx
c000d748:	e8 a9 fa ff ff       	call   c000d1f6 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	83 c4 14             	add    esp,0x14
c000d753:	5b                   	pop    ebx
c000d754:	5e                   	pop    esi
c000d755:	c3                   	ret    

c000d756 <VgaText::puts(char const*)>:
c000d756:	53                   	push   ebx
c000d757:	83 ec 08             	sub    esp,0x8
c000d75a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d75e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d761:	84 c0                	test   al,al
c000d763:	74 12                	je     c000d777 <VgaText::puts(char const*)+0x21>
c000d765:	51                   	push   ecx
c000d766:	43                   	inc    ebx
c000d767:	51                   	push   ecx
c000d768:	50                   	push   eax
c000d769:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76d:	e8 ca fe ff ff       	call   c000d63c <VgaText::putchar(char)>
c000d772:	83 c4 10             	add    esp,0x10
c000d775:	eb e7                	jmp    c000d75e <VgaText::puts(char const*)+0x8>
c000d777:	83 c4 08             	add    esp,0x8
c000d77a:	5b                   	pop    ebx
c000d77b:	c3                   	ret    

c000d77c <VgaText::putx(unsigned int)>:
c000d77c:	57                   	push   edi
c000d77d:	b9 11 00 00 00       	mov    ecx,0x11
c000d782:	56                   	push   esi
c000d783:	be 02 13 02 c0       	mov    esi,0xc0021302
c000d788:	53                   	push   ebx
c000d789:	83 ec 20             	sub    esp,0x20
c000d78c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d790:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d794:	fc                   	cld    
c000d795:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d797:	be 08 00 00 00       	mov    esi,0x8
c000d79c:	50                   	push   eax
c000d79d:	50                   	push   eax
c000d79e:	89 d8                	mov    eax,ebx
c000d7a0:	c1 e8 1c             	shr    eax,0x1c
c000d7a3:	c1 e3 04             	shl    ebx,0x4
c000d7a6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7ab:	50                   	push   eax
c000d7ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7b0:	e8 87 fe ff ff       	call   c000d63c <VgaText::putchar(char)>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	4e                   	dec    esi
c000d7b9:	75 e1                	jne    c000d79c <VgaText::putx(unsigned int)+0x20>
c000d7bb:	83 c4 20             	add    esp,0x20
c000d7be:	5b                   	pop    ebx
c000d7bf:	5e                   	pop    esi
c000d7c0:	5f                   	pop    edi
c000d7c1:	c3                   	ret    

c000d7c2 <VgaText::VgaText(char const*)>:
c000d7c2:	57                   	push   edi
c000d7c3:	56                   	push   esi
c000d7c4:	53                   	push   ebx
c000d7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c9:	83 ec 08             	sub    esp,0x8
c000d7cc:	6a 00                	push   0x0
c000d7ce:	50                   	push   eax
c000d7cf:	e8 4a 05 00 00       	call   c000dd1e <UnixFile::UnixFile(int)>
c000d7d4:	83 c4 10             	add    esp,0x10
c000d7d7:	ba 68 13 02 c0       	mov    edx,0xc0021368
c000d7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e0:	89 10                	mov    DWORD PTR [eax],edx
c000d7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e6:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f4:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d802:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d818:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d826:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d834:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d850:	bb c0 45 02 c0       	mov    ebx,0xc00245c0
c000d855:	b8 08 00 00 00       	mov    eax,0x8
c000d85a:	fc                   	cld    
c000d85b:	89 d7                	mov    edi,edx
c000d85d:	89 de                	mov    esi,ebx
c000d85f:	89 c1                	mov    ecx,eax
c000d861:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d867:	05 1e 10 00 00       	add    eax,0x101e
c000d86c:	83 ec 08             	sub    esp,0x8
c000d86f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d873:	50                   	push   eax
c000d874:	e8 e0 2e ff ff       	call   c0000759 <strcpy>
c000d879:	83 c4 10             	add    esp,0x10
c000d87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d880:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88e:	83 c0 0c             	add    eax,0xc
c000d891:	83 ec 04             	sub    esp,0x4
c000d894:	68 00 0f 00 00       	push   0xf00
c000d899:	6a 00                	push   0x0
c000d89b:	50                   	push   eax
c000d89c:	e8 19 2e ff ff       	call   c00006ba <memset>
c000d8a1:	83 c4 10             	add    esp,0x10
c000d8a4:	83 ec 04             	sub    esp,0x4
c000d8a7:	6a 00                	push   0x0
c000d8a9:	6a 07                	push   0x7
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	e8 c0 f4 ff ff       	call   c000cd74 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8b4:	83 c4 10             	add    esp,0x10
c000d8b7:	83 ec 08             	sub    esp,0x8
c000d8ba:	6a 02                	push   0x2
c000d8bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8c0:	e8 47 fa ff ff       	call   c000d30c <VgaText::setCursorHeight(int)>
c000d8c5:	83 c4 10             	add    esp,0x10
c000d8c8:	83 ec 04             	sub    esp,0x4
c000d8cb:	6a 00                	push   0x0
c000d8cd:	6a 00                	push   0x0
c000d8cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d3:	e8 ec f5 ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	83 ec 08             	sub    esp,0x8
c000d8de:	6a 01                	push   0x1
c000d8e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e4:	e8 89 f3 ff ff       	call   c000cc72 <VgaText::showCursor(bool)>
c000d8e9:	83 c4 10             	add    esp,0x10
c000d8ec:	83 ec 08             	sub    esp,0x8
c000d8ef:	6a 01                	push   0x1
c000d8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f5:	e8 88 f3 ff ff       	call   c000cc82 <VgaText::disableBlink(bool)>
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	83 ec 0c             	sub    esp,0xc
c000d900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d904:	e8 cf fc ff ff       	call   c000d5d8 <VgaText::clearScreen()>
c000d909:	83 c4 10             	add    esp,0x10
c000d90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d910:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d91b:	05 9e 10 00 00       	add    eax,0x109e
c000d920:	83 ec 04             	sub    esp,0x4
c000d923:	68 96 00 00 00       	push   0x96
c000d928:	6a 00                	push   0x0
c000d92a:	50                   	push   eax
c000d92b:	e8 8a 2d ff ff       	call   c00006ba <memset>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d937:	05 34 11 00 00       	add    eax,0x1134
c000d93c:	83 ec 04             	sub    esp,0x4
c000d93f:	68 2c 01 00 00       	push   0x12c
c000d944:	6a 00                	push   0x0
c000d946:	50                   	push   eax
c000d947:	e8 6e 2d ff ff       	call   c00006ba <memset>
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	90                   	nop
c000d950:	5b                   	pop    ebx
c000d951:	5e                   	pop    esi
c000d952:	5f                   	pop    edi
c000d953:	c3                   	ret    

c000d954 <VgaText::receiveKey(unsigned char)>:
c000d954:	55                   	push   ebp
c000d955:	57                   	push   edi
c000d956:	56                   	push   esi
c000d957:	53                   	push   ebx
c000d958:	83 ec 1c             	sub    esp,0x1c
c000d95b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d95f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d963:	84 db                	test   bl,bl
c000d965:	0f 84 c9 00 00 00    	je     c000da34 <VgaText::receiveKey(unsigned char)+0xe0>
c000d96b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d971:	80 fb 08             	cmp    bl,0x8
c000d974:	75 2c                	jne    c000d9a2 <VgaText::receiveKey(unsigned char)+0x4e>
c000d976:	83 ec 0c             	sub    esp,0xc
c000d979:	57                   	push   edi
c000d97a:	e8 58 2d ff ff       	call   c00006d7 <strlen>
c000d97f:	83 c4 10             	add    esp,0x10
c000d982:	85 c0                	test   eax,eax
c000d984:	74 41                	je     c000d9c7 <VgaText::receiveKey(unsigned char)+0x73>
c000d986:	50                   	push   eax
c000d987:	50                   	push   eax
c000d988:	6a 08                	push   0x8
c000d98a:	56                   	push   esi
c000d98b:	e8 ac fc ff ff       	call   c000d63c <VgaText::putchar(char)>
c000d990:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d993:	e8 3f 2d ff ff       	call   c00006d7 <strlen>
c000d998:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9a0:	eb 22                	jmp    c000d9c4 <VgaText::receiveKey(unsigned char)+0x70>
c000d9a2:	52                   	push   edx
c000d9a3:	52                   	push   edx
c000d9a4:	0f be c3             	movsx  eax,bl
c000d9a7:	50                   	push   eax
c000d9a8:	56                   	push   esi
c000d9a9:	e8 8e fc ff ff       	call   c000d63c <VgaText::putchar(char)>
c000d9ae:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9b7:	59                   	pop    ecx
c000d9b8:	5d                   	pop    ebp
c000d9b9:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9bd:	50                   	push   eax
c000d9be:	57                   	push   edi
c000d9bf:	e8 4c 2e ff ff       	call   c0000810 <strcat>
c000d9c4:	83 c4 10             	add    esp,0x10
c000d9c7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9ce:	75 05                	jne    c000d9d5 <VgaText::receiveKey(unsigned char)+0x81>
c000d9d0:	80 fb 0a             	cmp    bl,0xa
c000d9d3:	75 53                	jne    c000da28 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9d5:	83 ec 0c             	sub    esp,0xc
c000d9d8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9de:	53                   	push   ebx
c000d9df:	e8 f3 2c ff ff       	call   c00006d7 <strlen>
c000d9e4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9e7:	89 c5                	mov    ebp,eax
c000d9e9:	e8 e9 2c ff ff       	call   c00006d7 <strlen>
c000d9ee:	83 c4 10             	add    esp,0x10
c000d9f1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d9f5:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d9fa:	76 10                	jbe    c000da0c <VgaText::receiveKey(unsigned char)+0xb8>
c000d9fc:	83 ec 0c             	sub    esp,0xc
c000d9ff:	68 13 13 02 c0       	push   0xc0021313
c000da04:	e8 03 7f 00 00       	call   c001590c <Krnl::panic(char const*)>
c000da09:	83 c4 10             	add    esp,0x10
c000da0c:	50                   	push   eax
c000da0d:	50                   	push   eax
c000da0e:	57                   	push   edi
c000da0f:	53                   	push   ebx
c000da10:	e8 fb 2d ff ff       	call   c0000810 <strcat>
c000da15:	83 c4 0c             	add    esp,0xc
c000da18:	68 96 00 00 00       	push   0x96
c000da1d:	6a 00                	push   0x0
c000da1f:	57                   	push   edi
c000da20:	e8 95 2c ff ff       	call   c00006ba <memset>
c000da25:	83 c4 10             	add    esp,0x10
c000da28:	83 ec 0c             	sub    esp,0xc
c000da2b:	56                   	push   esi
c000da2c:	e8 d3 f9 ff ff       	call   c000d404 <VgaText::doUpdate()>
c000da31:	83 c4 10             	add    esp,0x10
c000da34:	83 c4 1c             	add    esp,0x1c
c000da37:	5b                   	pop    ebx
c000da38:	5e                   	pop    esi
c000da39:	5f                   	pop    edi
c000da3a:	5d                   	pop    ebp
c000da3b:	c3                   	ret    

c000da3c <VgaText::write(unsigned long long, void*, int*)>:
c000da3c:	55                   	push   ebp
c000da3d:	57                   	push   edi
c000da3e:	56                   	push   esi
c000da3f:	53                   	push   ebx
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da47:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da4b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da4f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da56:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da59:	39 eb                	cmp    ebx,ebp
c000da5b:	74 13                	je     c000da70 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da5d:	50                   	push   eax
c000da5e:	43                   	inc    ebx
c000da5f:	50                   	push   eax
c000da60:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da64:	50                   	push   eax
c000da65:	56                   	push   esi
c000da66:	e8 d1 fb ff ff       	call   c000d63c <VgaText::putchar(char)>
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	eb e9                	jmp    c000da59 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da7a:	56                   	push   esi
c000da7b:	e8 84 f9 ff ff       	call   c000d404 <VgaText::doUpdate()>
c000da80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da84:	89 38                	mov    DWORD PTR [eax],edi
c000da86:	83 c4 1c             	add    esp,0x1c
c000da89:	31 c0                	xor    eax,eax
c000da8b:	5b                   	pop    ebx
c000da8c:	5e                   	pop    esi
c000da8d:	5f                   	pop    edi
c000da8e:	5d                   	pop    ebp
c000da8f:	c3                   	ret    

c000da90 <newTerminal(char*)>:
c000da90:	83 ec 28             	sub    esp,0x28
c000da93:	68 60 12 00 00       	push   0x1260
c000da98:	e8 6f 15 00 00       	call   c000f00c <operator new(unsigned long)>
c000da9d:	5a                   	pop    edx
c000da9e:	59                   	pop    ecx
c000da9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000daa3:	50                   	push   eax
c000daa4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000daa8:	e8 15 fd ff ff       	call   c000d7c2 <VgaText::VgaText(char const*)>
c000daad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dab1:	83 c4 2c             	add    esp,0x2c
c000dab4:	c3                   	ret    
c000dab5:	90                   	nop

c000dab6 <TSS::TSS()>:
c000dab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dac1:	90                   	nop
c000dac2:	c3                   	ret    
c000dac3:	90                   	nop

c000dac4 <TSS::setESP(unsigned long)>:
c000dac4:	55                   	push   ebp
c000dac5:	89 e5                	mov    ebp,esp
c000dac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dacd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dad0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dad3:	90                   	nop
c000dad4:	5d                   	pop    ebp
c000dad5:	c3                   	ret    

c000dad6 <TSS::flush()>:
c000dad6:	55                   	push   ebp
c000dad7:	89 e5                	mov    ebp,esp
c000dad9:	83 ec 10             	sub    esp,0x10
c000dadc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dadf:	8b 00                	mov    eax,DWORD PTR [eax]
c000dae1:	83 c8 03             	or     eax,0x3
c000dae4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000dae8:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000daec:	66 89 d0             	mov    ax,dx
c000daef:	0f 00 d8             	ltr    ax
c000daf2:	90                   	nop
c000daf3:	c9                   	leave  
c000daf4:	c3                   	ret    
c000daf5:	90                   	nop

c000daf6 <TSS::setup(unsigned long, unsigned long)>:
c000daf6:	55                   	push   ebp
c000daf7:	89 e5                	mov    ebp,esp
c000daf9:	53                   	push   ebx
c000dafa:	83 ec 14             	sub    esp,0x14
c000dafd:	83 ec 0c             	sub    esp,0xc
c000db00:	6a 68                	push   0x68
c000db02:	e8 cc e4 ff ff       	call   c000bfd3 <malloc>
c000db07:	83 c4 10             	add    esp,0x10
c000db0a:	89 c2                	mov    edx,eax
c000db0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db0f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db18:	83 ec 04             	sub    esp,0x4
c000db1b:	6a 68                	push   0x68
c000db1d:	6a 00                	push   0x0
c000db1f:	50                   	push   eax
c000db20:	e8 95 2b ff ff       	call   c00006ba <memset>
c000db25:	83 c4 10             	add    esp,0x10
c000db28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db2e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db3a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db46:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db52:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db5e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db76:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db82:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db85:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000db88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db91:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9a:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba4:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dba7:	e8 b9 1a 01 00       	call   c001f665 <CPU::readCR3()>
c000dbac:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb5:	83 ec 08             	sub    esp,0x8
c000dbb8:	50                   	push   eax
c000dbb9:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbbc:	50                   	push   eax
c000dbbd:	e8 e8 db ff ff       	call   c000b7aa <GDTEntry::setBase(unsigned int)>
c000dbc2:	83 c4 10             	add    esp,0x10
c000dbc5:	83 ec 08             	sub    esp,0x8
c000dbc8:	6a 68                	push   0x68
c000dbca:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbcd:	50                   	push   eax
c000dbce:	e8 f3 db ff ff       	call   c000b7c6 <GDTEntry::setLimit(unsigned int)>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbda:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbdd:	83 e0 0f             	and    eax,0xf
c000dbe0:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbe3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbe6:	83 c8 40             	or     eax,0x40
c000dbe9:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbec:	e8 af 6b 00 00       	call   c00147a0 <thisCPU()>
c000dbf1:	05 78 01 00 00       	add    eax,0x178
c000dbf6:	83 ec 04             	sub    esp,0x4
c000dbf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dbfc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dbff:	50                   	push   eax
c000dc00:	e8 f5 db ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000dc05:	83 c4 10             	add    esp,0x10
c000dc08:	89 c2                	mov    edx,eax
c000dc0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc0d:	89 10                	mov    DWORD PTR [eax],edx
c000dc0f:	e8 8c 6b 00 00       	call   c00147a0 <thisCPU()>
c000dc14:	05 78 01 00 00       	add    eax,0x178
c000dc19:	83 ec 0c             	sub    esp,0xc
c000dc1c:	50                   	push   eax
c000dc1d:	e8 1c dc ff ff       	call   c000b83e <GDT::flush()>
c000dc22:	83 c4 10             	add    esp,0x10
c000dc25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc28:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc2a:	83 ec 08             	sub    esp,0x8
c000dc2d:	50                   	push   eax
c000dc2e:	68 7c 13 02 c0       	push   0xc002137c
c000dc33:	e8 09 15 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000dc38:	83 c4 10             	add    esp,0x10
c000dc3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc3e:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc40:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc43:	c9                   	leave  
c000dc44:	c3                   	ret    
c000dc45:	90                   	nop

c000dc46 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc51:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc56:	75 08                	jne    c000dc60 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000dc58:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dc5e:	eb 38                	jmp    c000dc98 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000dc60:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc65:	75 17                	jne    c000dc7e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000dc67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc6f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dc75:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc7b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000dc7e:	89 c1                	mov    ecx,eax
c000dc80:	83 e1 fd             	and    ecx,0xfffffffd
c000dc83:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000dc89:	74 cd                	je     c000dc58 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dc8b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dc90:	83 e0 ef             	and    eax,0xffffffef
c000dc93:	83 f8 08             	cmp    eax,0x8
c000dc96:	76 c0                	jbe    c000dc58 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dc98:	31 c0                	xor    eax,eax
c000dc9a:	c3                   	ret    
c000dc9b:	90                   	nop

c000dc9c <ReservedFilename::isAtty()>:
c000dc9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dca0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dca3:	31 c0                	xor    eax,eax
c000dca5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000dcab:	74 09                	je     c000dcb6 <ReservedFilename::isAtty()+0x1a>
c000dcad:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000dcb3:	0f 94 c0             	sete   al
c000dcb6:	c3                   	ret    
c000dcb7:	90                   	nop

c000dcb8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dcb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcbc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dcc7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dccc:	75 08                	jne    c000dcd6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000dcce:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dcd4:	eb 3d                	jmp    c000dd13 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dcd6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dcdb:	75 17                	jne    c000dcf4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000dcdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dce2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dce5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dceb:	8b 10                	mov    edx,DWORD PTR [eax]
c000dced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcf1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000dcf4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dcf9:	75 04                	jne    c000dcff <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000dcfb:	89 0a                	mov    DWORD PTR [edx],ecx
c000dcfd:	eb 14                	jmp    c000dd13 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dcff:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd04:	74 c8                	je     c000dcce <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd06:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd0b:	83 e0 ef             	and    eax,0xffffffef
c000dd0e:	83 f8 08             	cmp    eax,0x8
c000dd11:	76 bb                	jbe    c000dcce <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd13:	31 c0                	xor    eax,eax
c000dd15:	c3                   	ret    

c000dd16 <UnixFile::getFileDescriptor()>:
c000dd16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd1d:	c3                   	ret    

c000dd1e <UnixFile::UnixFile(int)>:
c000dd1e:	53                   	push   ebx
c000dd1f:	83 ec 18             	sub    esp,0x18
c000dd22:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000dd27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd2b:	89 10                	mov    DWORD PTR [eax],edx
c000dd2d:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd35:	0f 8f 4d 01 00 00    	jg     c000de88 <UnixFile::UnixFile(int)+0x16a>
c000dd3b:	a1 c0 39 02 c0       	mov    eax,ds:0xc00239c0
c000dd40:	8d 50 01             	lea    edx,[eax+0x1]
c000dd43:	89 15 c0 39 02 c0    	mov    DWORD PTR ds:0xc00239c0,edx
c000dd49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd50:	83 ec 08             	sub    esp,0x8
c000dd53:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd57:	68 78 46 02 c0       	push   0xc0024678
c000dd5c:	e8 79 19 01 00       	call   c001f6da <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd61:	83 c4 10             	add    esp,0x10
c000dd64:	a0 74 46 02 c0       	mov    al,ds:0xc0024674
c000dd69:	83 f0 01             	xor    eax,0x1
c000dd6c:	84 c0                	test   al,al
c000dd6e:	0f 84 15 01 00 00    	je     c000de89 <UnixFile::UnixFile(int)+0x16b>
c000dd74:	c6 05 74 46 02 c0 01 	mov    BYTE PTR ds:0xc0024674,0x1
c000dd7b:	83 ec 0c             	sub    esp,0xc
c000dd7e:	6a 0c                	push   0xc
c000dd80:	e8 87 12 00 00       	call   c000f00c <operator new(unsigned long)>
c000dd85:	83 c4 10             	add    esp,0x10
c000dd88:	89 c3                	mov    ebx,eax
c000dd8a:	83 ec 08             	sub    esp,0x8
c000dd8d:	68 03 ff ff 0f       	push   0xfffff03
c000dd92:	53                   	push   ebx
c000dd93:	e8 f6 00 00 00       	call   c000de8e <ReservedFilename::ReservedFilename(int)>
c000dd98:	83 c4 10             	add    esp,0x10
c000dd9b:	89 1d 6c 46 02 c0    	mov    DWORD PTR ds:0xc002466c,ebx
c000dda1:	83 ec 0c             	sub    esp,0xc
c000dda4:	6a 0c                	push   0xc
c000dda6:	e8 61 12 00 00       	call   c000f00c <operator new(unsigned long)>
c000ddab:	83 c4 10             	add    esp,0x10
c000ddae:	89 c3                	mov    ebx,eax
c000ddb0:	83 ec 08             	sub    esp,0x8
c000ddb3:	68 01 ff ff 0f       	push   0xfffff01
c000ddb8:	53                   	push   ebx
c000ddb9:	e8 d0 00 00 00       	call   c000de8e <ReservedFilename::ReservedFilename(int)>
c000ddbe:	83 c4 10             	add    esp,0x10
c000ddc1:	89 1d 70 46 02 c0    	mov    DWORD PTR ds:0xc0024670,ebx
c000ddc7:	83 ec 0c             	sub    esp,0xc
c000ddca:	6a 0c                	push   0xc
c000ddcc:	e8 3b 12 00 00       	call   c000f00c <operator new(unsigned long)>
c000ddd1:	83 c4 10             	add    esp,0x10
c000ddd4:	89 c3                	mov    ebx,eax
c000ddd6:	83 ec 08             	sub    esp,0x8
c000ddd9:	68 00 ff ff 0f       	push   0xfffff00
c000ddde:	53                   	push   ebx
c000dddf:	e8 aa 00 00 00       	call   c000de8e <ReservedFilename::ReservedFilename(int)>
c000dde4:	83 c4 10             	add    esp,0x10
c000dde7:	89 1d 64 46 02 c0    	mov    DWORD PTR ds:0xc0024664,ebx
c000dded:	83 ec 0c             	sub    esp,0xc
c000ddf0:	6a 0c                	push   0xc
c000ddf2:	e8 15 12 00 00       	call   c000f00c <operator new(unsigned long)>
c000ddf7:	83 c4 10             	add    esp,0x10
c000ddfa:	89 c3                	mov    ebx,eax
c000ddfc:	83 ec 08             	sub    esp,0x8
c000ddff:	68 02 ff ff 0f       	push   0xfffff02
c000de04:	53                   	push   ebx
c000de05:	e8 84 00 00 00       	call   c000de8e <ReservedFilename::ReservedFilename(int)>
c000de0a:	83 c4 10             	add    esp,0x10
c000de0d:	89 1d 68 46 02 c0    	mov    DWORD PTR ds:0xc0024668,ebx
c000de13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de1b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de20:	7f 67                	jg     c000de89 <UnixFile::UnixFile(int)+0x16b>
c000de22:	83 ec 0c             	sub    esp,0xc
c000de25:	6a 0c                	push   0xc
c000de27:	e8 e0 11 00 00       	call   c000f00c <operator new(unsigned long)>
c000de2c:	83 c4 10             	add    esp,0x10
c000de2f:	89 c3                	mov    ebx,eax
c000de31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de35:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de3a:	83 ec 08             	sub    esp,0x8
c000de3d:	50                   	push   eax
c000de3e:	53                   	push   ebx
c000de3f:	e8 4a 00 00 00       	call   c000de8e <ReservedFilename::ReservedFilename(int)>
c000de44:	83 c4 10             	add    esp,0x10
c000de47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de4b:	89 1c 85 40 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9c0],ebx
c000de52:	83 ec 0c             	sub    esp,0xc
c000de55:	6a 0c                	push   0xc
c000de57:	e8 b0 11 00 00       	call   c000f00c <operator new(unsigned long)>
c000de5c:	83 c4 10             	add    esp,0x10
c000de5f:	89 c3                	mov    ebx,eax
c000de61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de65:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de6a:	83 ec 08             	sub    esp,0x8
c000de6d:	50                   	push   eax
c000de6e:	53                   	push   ebx
c000de6f:	e8 1a 00 00 00       	call   c000de8e <ReservedFilename::ReservedFilename(int)>
c000de74:	83 c4 10             	add    esp,0x10
c000de77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de7b:	89 1c 85 00 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdba00],ebx
c000de82:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000de86:	eb 93                	jmp    c000de1b <UnixFile::UnixFile(int)+0xfd>
c000de88:	90                   	nop
c000de89:	83 c4 18             	add    esp,0x18
c000de8c:	5b                   	pop    ebx
c000de8d:	c3                   	ret    

c000de8e <ReservedFilename::ReservedFilename(int)>:
c000de8e:	83 ec 0c             	sub    esp,0xc
c000de91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de95:	83 ec 08             	sub    esp,0x8
c000de98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9c:	50                   	push   eax
c000de9d:	e8 7c fe ff ff       	call   c000dd1e <UnixFile::UnixFile(int)>
c000dea2:	83 c4 10             	add    esp,0x10
c000dea5:	ba 84 14 02 c0       	mov    edx,0xc0021484
c000deaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deae:	89 10                	mov    DWORD PTR [eax],edx
c000deb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000deb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000debb:	90                   	nop
c000debc:	83 c4 0c             	add    esp,0xc
c000debf:	c3                   	ret    

c000dec0 <UnixFile::~UnixFile()>:
c000dec0:	83 ec 1c             	sub    esp,0x1c
c000dec3:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000dec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000decc:	89 10                	mov    DWORD PTR [eax],edx
c000dece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ded5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000deda:	7f 73                	jg     c000df4f <UnixFile::~UnixFile()+0x8f>
c000dedc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dee4:	83 ec 0c             	sub    esp,0xc
c000dee7:	68 78 46 02 c0       	push   0xc0024678
c000deec:	e8 bd 18 01 00       	call   c001f7ae <LinkedList<UnixFile>::getFirstElement()>
c000def1:	83 c4 10             	add    esp,0x10
c000def4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000def8:	83 ec 0c             	sub    esp,0xc
c000defb:	68 78 46 02 c0       	push   0xc0024678
c000df00:	e8 b1 18 01 00       	call   c001f7b6 <LinkedList<UnixFile>::removeFirst()>
c000df05:	83 c4 10             	add    esp,0x10
c000df08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df0c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000df10:	74 40                	je     c000df52 <UnixFile::~UnixFile()+0x92>
c000df12:	83 ec 08             	sub    esp,0x8
c000df15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df19:	68 78 46 02 c0       	push   0xc0024678
c000df1e:	e8 b7 17 01 00       	call   c001f6da <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df23:	83 c4 10             	add    esp,0x10
c000df26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df2a:	8d 50 01             	lea    edx,[eax+0x1]
c000df2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df31:	3d 88 13 00 00       	cmp    eax,0x1388
c000df36:	0f 94 c0             	sete   al
c000df39:	84 c0                	test   al,al
c000df3b:	74 a7                	je     c000dee4 <UnixFile::~UnixFile()+0x24>
c000df3d:	83 ec 0c             	sub    esp,0xc
c000df40:	68 40 14 02 c0       	push   0xc0021440
c000df45:	e8 c2 79 00 00       	call   c001590c <Krnl::panic(char const*)>
c000df4a:	83 c4 10             	add    esp,0x10
c000df4d:	eb 95                	jmp    c000dee4 <UnixFile::~UnixFile()+0x24>
c000df4f:	90                   	nop
c000df50:	eb 01                	jmp    c000df53 <UnixFile::~UnixFile()+0x93>
c000df52:	90                   	nop
c000df53:	90                   	nop
c000df54:	83 c4 1c             	add    esp,0x1c
c000df57:	c3                   	ret    

c000df58 <UnixFile::~UnixFile()>:
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	83 ec 0c             	sub    esp,0xc
c000df5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df62:	e8 59 ff ff ff       	call   c000dec0 <UnixFile::~UnixFile()>
c000df67:	83 c4 10             	add    esp,0x10
c000df6a:	83 ec 08             	sub    esp,0x8
c000df6d:	6a 0c                	push   0xc
c000df6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df73:	e8 a3 10 00 00       	call   c000f01b <operator delete(void*, unsigned long)>
c000df78:	83 c4 10             	add    esp,0x10
c000df7b:	83 c4 0c             	add    esp,0xc
c000df7e:	c3                   	ret    
c000df7f:	90                   	nop

c000df80 <ReservedFilename::~ReservedFilename()>:
c000df80:	83 ec 0c             	sub    esp,0xc
c000df83:	ba 84 14 02 c0       	mov    edx,0xc0021484
c000df88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8c:	89 10                	mov    DWORD PTR [eax],edx
c000df8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df92:	83 ec 0c             	sub    esp,0xc
c000df95:	50                   	push   eax
c000df96:	e8 25 ff ff ff       	call   c000dec0 <UnixFile::~UnixFile()>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	90                   	nop
c000df9f:	83 c4 0c             	add    esp,0xc
c000dfa2:	c3                   	ret    
c000dfa3:	90                   	nop

c000dfa4 <ReservedFilename::~ReservedFilename()>:
c000dfa4:	83 ec 0c             	sub    esp,0xc
c000dfa7:	83 ec 0c             	sub    esp,0xc
c000dfaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfae:	e8 cd ff ff ff       	call   c000df80 <ReservedFilename::~ReservedFilename()>
c000dfb3:	83 c4 10             	add    esp,0x10
c000dfb6:	83 ec 08             	sub    esp,0x8
c000dfb9:	6a 0c                	push   0xc
c000dfbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfbf:	e8 57 10 00 00       	call   c000f01b <operator delete(void*, unsigned long)>
c000dfc4:	83 c4 10             	add    esp,0x10
c000dfc7:	83 c4 0c             	add    esp,0xc
c000dfca:	c3                   	ret    

c000dfcb <getFromFileDescriptor(int)>:
c000dfcb:	53                   	push   ebx
c000dfcc:	83 ec 08             	sub    esp,0x8
c000dfcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfd3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dfd9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dfdf:	7f 2c                	jg     c000e00d <getFromFileDescriptor(int)+0x42>
c000dfe1:	83 ec 0c             	sub    esp,0xc
c000dfe4:	68 78 46 02 c0       	push   0xc0024678
c000dfe9:	e8 c0 17 01 00       	call   c001f7ae <LinkedList<UnixFile>::getFirstElement()>
c000dfee:	83 c4 10             	add    esp,0x10
c000dff1:	85 c0                	test   eax,eax
c000dff3:	75 04                	jne    c000dff9 <getFromFileDescriptor(int)+0x2e>
c000dff5:	31 c0                	xor    eax,eax
c000dff7:	eb 6e                	jmp    c000e067 <getFromFileDescriptor(int)+0x9c>
c000dff9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dffc:	74 69                	je     c000e067 <getFromFileDescriptor(int)+0x9c>
c000dffe:	52                   	push   edx
c000dfff:	52                   	push   edx
c000e000:	50                   	push   eax
c000e001:	68 78 46 02 c0       	push   0xc0024678
c000e006:	e8 4d 18 01 00       	call   c001f858 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e00b:	eb e1                	jmp    c000dfee <getFromFileDescriptor(int)+0x23>
c000e00d:	a1 6c 46 02 c0       	mov    eax,ds:0xc002466c
c000e012:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e018:	74 4d                	je     c000e067 <getFromFileDescriptor(int)+0x9c>
c000e01a:	a1 70 46 02 c0       	mov    eax,ds:0xc0024670
c000e01f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e025:	74 40                	je     c000e067 <getFromFileDescriptor(int)+0x9c>
c000e027:	a1 68 46 02 c0       	mov    eax,ds:0xc0024668
c000e02c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e032:	74 33                	je     c000e067 <getFromFileDescriptor(int)+0x9c>
c000e034:	a1 64 46 02 c0       	mov    eax,ds:0xc0024664
c000e039:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e03f:	74 26                	je     c000e067 <getFromFileDescriptor(int)+0x9c>
c000e041:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e047:	83 f8 08             	cmp    eax,0x8
c000e04a:	77 09                	ja     c000e055 <getFromFileDescriptor(int)+0x8a>
c000e04c:	8b 04 85 40 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb9c0]
c000e053:	eb 12                	jmp    c000e067 <getFromFileDescriptor(int)+0x9c>
c000e055:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e05b:	83 fb 08             	cmp    ebx,0x8
c000e05e:	77 95                	ja     c000dff5 <getFromFileDescriptor(int)+0x2a>
c000e060:	8b 04 9d 00 46 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdba00]
c000e067:	83 c4 08             	add    esp,0x8
c000e06a:	5b                   	pop    ebx
c000e06b:	c3                   	ret    

c000e06c <__static_initialization_and_destruction_0(int, int)>:
c000e06c:	83 ec 0c             	sub    esp,0xc
c000e06f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e074:	75 34                	jne    c000e0aa <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e076:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e07e:	75 2a                	jne    c000e0aa <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e080:	83 ec 0c             	sub    esp,0xc
c000e083:	68 78 46 02 c0       	push   0xc0024678
c000e088:	e8 f5 15 01 00       	call   c001f682 <LinkedList<UnixFile>::LinkedList()>
c000e08d:	83 c4 10             	add    esp,0x10
c000e090:	83 ec 04             	sub    esp,0x4
c000e093:	68 3c 39 02 c0       	push   0xc002393c
c000e098:	68 78 46 02 c0       	push   0xc0024678
c000e09d:	68 80 f6 01 c0       	push   0xc001f680
c000e0a2:	e8 f0 0e 00 00       	call   c000ef97 <__cxa_atexit>
c000e0a7:	83 c4 10             	add    esp,0x10
c000e0aa:	90                   	nop
c000e0ab:	83 c4 0c             	add    esp,0xc
c000e0ae:	c3                   	ret    

c000e0af <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0af:	83 ec 0c             	sub    esp,0xc
c000e0b2:	83 ec 08             	sub    esp,0x8
c000e0b5:	68 ff ff 00 00       	push   0xffff
c000e0ba:	6a 01                	push   0x1
c000e0bc:	e8 ab ff ff ff       	call   c000e06c <__static_initialization_and_destruction_0(int, int)>
c000e0c1:	83 c4 10             	add    esp,0x10
c000e0c4:	83 c4 0c             	add    esp,0xc
c000e0c7:	c3                   	ret    

c000e0c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0c8:	53                   	push   ebx
c000e0c9:	8b 15 c8 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239c8
c000e0cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e0d7:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e0dd:	89 c8                	mov    eax,ecx
c000e0df:	d1 e8                	shr    eax,1
c000e0e1:	01 d0                	add    eax,edx
c000e0e3:	83 e1 01             	and    ecx,0x1
c000e0e6:	8a 10                	mov    dl,BYTE PTR [eax]
c000e0e8:	75 09                	jne    c000e0f3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e0ea:	83 e2 f0             	and    edx,0xfffffff0
c000e0ed:	09 da                	or     edx,ebx
c000e0ef:	88 10                	mov    BYTE PTR [eax],dl
c000e0f1:	5b                   	pop    ebx
c000e0f2:	c3                   	ret    
c000e0f3:	c1 e3 04             	shl    ebx,0x4
c000e0f6:	83 e2 0f             	and    edx,0xf
c000e0f9:	09 da                	or     edx,ebx
c000e0fb:	88 10                	mov    BYTE PTR [eax],dl
c000e0fd:	5b                   	pop    ebx
c000e0fe:	c3                   	ret    

c000e0ff <Virt::getPageState(unsigned long)>:
c000e0ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e103:	8b 0d c8 39 02 c0    	mov    ecx,DWORD PTR ds:0xc00239c8
c000e109:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e10f:	89 d0                	mov    eax,edx
c000e111:	d1 e8                	shr    eax,1
c000e113:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e116:	88 c8                	mov    al,cl
c000e118:	c0 e8 04             	shr    al,0x4
c000e11b:	83 e2 01             	and    edx,0x1
c000e11e:	75 05                	jne    c000e125 <Virt::getPageState(unsigned long)+0x26>
c000e120:	88 c8                	mov    al,cl
c000e122:	83 e0 0f             	and    eax,0xf
c000e125:	c3                   	ret    

c000e126 <Virt::allocateKernelVirtualPages(int)>:
c000e126:	55                   	push   ebp
c000e127:	31 ed                	xor    ebp,ebp
c000e129:	57                   	push   edi
c000e12a:	56                   	push   esi
c000e12b:	53                   	push   ebx
c000e12c:	31 db                	xor    ebx,ebx
c000e12e:	83 ec 1c             	sub    esp,0x1c
c000e131:	8b 3d c4 39 02 c0    	mov    edi,DWORD PTR ds:0xc00239c4
c000e137:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e13b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e140:	57                   	push   edi
c000e141:	e8 b9 ff ff ff       	call   c000e0ff <Virt::getPageState(unsigned long)>
c000e146:	5a                   	pop    edx
c000e147:	84 c0                	test   al,al
c000e149:	75 3a                	jne    c000e185 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e14b:	85 db                	test   ebx,ebx
c000e14d:	75 02                	jne    c000e151 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e14f:	89 fd                	mov    ebp,edi
c000e151:	43                   	inc    ebx
c000e152:	39 f3                	cmp    ebx,esi
c000e154:	74 5a                	je     c000e1b0 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e156:	47                   	inc    edi
c000e157:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e15d:	76 31                	jbe    c000e190 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e15f:	c7 05 c4 39 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00239c4,0xc8000
c000e169:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e16e:	75 28                	jne    c000e198 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e170:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e175:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e17a:	57                   	push   edi
c000e17b:	e8 7f ff ff ff       	call   c000e0ff <Virt::getPageState(unsigned long)>
c000e180:	5a                   	pop    edx
c000e181:	84 c0                	test   al,al
c000e183:	74 c6                	je     c000e14b <Virt::allocateKernelVirtualPages(int)+0x25>
c000e185:	47                   	inc    edi
c000e186:	31 db                	xor    ebx,ebx
c000e188:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e18e:	77 cf                	ja     c000e15f <Virt::allocateKernelVirtualPages(int)+0x39>
c000e190:	89 3d c4 39 02 c0    	mov    DWORD PTR ds:0xc00239c4,edi
c000e196:	eb a8                	jmp    c000e140 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e198:	83 ec 0c             	sub    esp,0xc
c000e19b:	68 98 14 02 c0       	push   0xc0021498
c000e1a0:	e8 67 77 00 00       	call   c001590c <Krnl::panic(char const*)>
c000e1a5:	8b 3d c4 39 02 c0    	mov    edi,DWORD PTR ds:0xc00239c4
c000e1ab:	83 c4 10             	add    esp,0x10
c000e1ae:	eb 90                	jmp    c000e140 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1b0:	89 2d c4 39 02 c0    	mov    DWORD PTR ds:0xc00239c4,ebp
c000e1b6:	4b                   	dec    ebx
c000e1b7:	74 5f                	je     c000e218 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1b9:	85 f6                	test   esi,esi
c000e1bb:	74 3d                	je     c000e1fa <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1bd:	89 e8                	mov    eax,ebp
c000e1bf:	31 db                	xor    ebx,ebx
c000e1c1:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1c4:	eb 14                	jmp    c000e1da <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1c6:	6a 01                	push   0x1
c000e1c8:	43                   	inc    ebx
c000e1c9:	50                   	push   eax
c000e1ca:	e8 f9 fe ff ff       	call   c000e0c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1cf:	58                   	pop    eax
c000e1d0:	39 f3                	cmp    ebx,esi
c000e1d2:	5a                   	pop    edx
c000e1d3:	74 25                	je     c000e1fa <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1d5:	a1 c4 39 02 c0       	mov    eax,ds:0xc00239c4
c000e1da:	8d 50 01             	lea    edx,[eax+0x1]
c000e1dd:	85 db                	test   ebx,ebx
c000e1df:	89 15 c4 39 02 c0    	mov    DWORD PTR ds:0xc00239c4,edx
c000e1e5:	74 20                	je     c000e207 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e1e7:	39 df                	cmp    edi,ebx
c000e1e9:	75 db                	jne    c000e1c6 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e1eb:	6a 03                	push   0x3
c000e1ed:	43                   	inc    ebx
c000e1ee:	50                   	push   eax
c000e1ef:	e8 d4 fe ff ff       	call   c000e0c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1f4:	59                   	pop    ecx
c000e1f5:	39 f3                	cmp    ebx,esi
c000e1f7:	58                   	pop    eax
c000e1f8:	75 db                	jne    c000e1d5 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e1fa:	83 c4 1c             	add    esp,0x1c
c000e1fd:	89 e8                	mov    eax,ebp
c000e1ff:	c1 e0 0c             	shl    eax,0xc
c000e202:	5b                   	pop    ebx
c000e203:	5e                   	pop    esi
c000e204:	5f                   	pop    edi
c000e205:	5d                   	pop    ebp
c000e206:	c3                   	ret    
c000e207:	6a 02                	push   0x2
c000e209:	bb 01 00 00 00       	mov    ebx,0x1
c000e20e:	50                   	push   eax
c000e20f:	e8 b4 fe ff ff       	call   c000e0c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e214:	58                   	pop    eax
c000e215:	5a                   	pop    edx
c000e216:	eb bd                	jmp    c000e1d5 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e218:	6a 04                	push   0x4
c000e21a:	8d 45 01             	lea    eax,[ebp+0x1]
c000e21d:	55                   	push   ebp
c000e21e:	a3 c4 39 02 c0       	mov    ds:0xc00239c4,eax
c000e223:	e8 a0 fe ff ff       	call   c000e0c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e228:	59                   	pop    ecx
c000e229:	5b                   	pop    ebx
c000e22a:	89 e8                	mov    eax,ebp
c000e22c:	c1 e0 0c             	shl    eax,0xc
c000e22f:	83 c4 1c             	add    esp,0x1c
c000e232:	5b                   	pop    ebx
c000e233:	5e                   	pop    esi
c000e234:	5f                   	pop    edi
c000e235:	5d                   	pop    ebp
c000e236:	c3                   	ret    

c000e237 <Virt::virtualMemorySetup()>:
c000e237:	53                   	push   ebx
c000e238:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e23d:	83 ec 08             	sub    esp,0x8
c000e240:	6a 0f                	push   0xf
c000e242:	53                   	push   ebx
c000e243:	43                   	inc    ebx
c000e244:	e8 7f fe ff ff       	call   c000e0c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e249:	59                   	pop    ecx
c000e24a:	58                   	pop    eax
c000e24b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e251:	75 ed                	jne    c000e240 <Virt::virtualMemorySetup()+0x9>
c000e253:	50                   	push   eax
c000e254:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e259:	50                   	push   eax
c000e25a:	68 00 00 00 c8       	push   0xc8000000
c000e25f:	68 1f 16 02 c0       	push   0xc002161f
c000e264:	e8 d8 0e 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000e269:	58                   	pop    eax
c000e26a:	5a                   	pop    edx
c000e26b:	68 00 f0 ff ef       	push   0xeffff000
c000e270:	68 33 16 02 c0       	push   0xc0021633
c000e275:	e8 c7 0e 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000e27a:	83 c4 10             	add    esp,0x10
c000e27d:	50                   	push   eax
c000e27e:	50                   	push   eax
c000e27f:	6a 00                	push   0x0
c000e281:	53                   	push   ebx
c000e282:	43                   	inc    ebx
c000e283:	e8 40 fe ff ff       	call   c000e0c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e288:	83 c4 10             	add    esp,0x10
c000e28b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e291:	75 ea                	jne    c000e27d <Virt::virtualMemorySetup()+0x46>
c000e293:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e298:	51                   	push   ecx
c000e299:	51                   	push   ecx
c000e29a:	6a 0f                	push   0xf
c000e29c:	53                   	push   ebx
c000e29d:	43                   	inc    ebx
c000e29e:	e8 25 fe ff ff       	call   c000e0c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2ac:	75 ea                	jne    c000e298 <Virt::virtualMemorySetup()+0x61>
c000e2ae:	83 c4 08             	add    esp,0x8
c000e2b1:	5b                   	pop    ebx
c000e2b2:	c3                   	ret    

c000e2b3 <Virt::getAKernelVAS()>:
c000e2b3:	a1 84 46 02 c0       	mov    eax,ds:0xc0024684
c000e2b8:	c3                   	ret    

c000e2b9 <Virt::setupPageSwapping(int)>:
c000e2b9:	57                   	push   edi
c000e2ba:	56                   	push   esi
c000e2bb:	53                   	push   ebx
c000e2bc:	83 ec 1c             	sub    esp,0x1c
c000e2bf:	68 14 01 00 00       	push   0x114
c000e2c4:	e8 43 0d 00 00       	call   c000f00c <operator new(unsigned long)>
c000e2c9:	83 c4 0c             	add    esp,0xc
c000e2cc:	8b 3d 74 59 02 c0    	mov    edi,DWORD PTR ds:0xc0025974
c000e2d2:	89 c6                	mov    esi,eax
c000e2d4:	57                   	push   edi
c000e2d5:	68 47 16 02 c0       	push   0xc0021647
c000e2da:	50                   	push   eax
c000e2db:	e8 98 13 00 00       	call   c000f678 <File::File(char const*, Process*)>
c000e2e0:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2e3:	e8 6c 15 00 00       	call   c000f854 <File::unlink()>
c000e2e8:	58                   	pop    eax
c000e2e9:	5a                   	pop    edx
c000e2ea:	6a 12                	push   0x12
c000e2ec:	56                   	push   esi
c000e2ed:	e8 ea 13 00 00       	call   c000f6dc <File::open(FileOpenMode)>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	0f 85 b6 00 00 00    	jne    c000e3b3 <Virt::setupPageSwapping(int)+0xfa>
c000e2fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e301:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e309:	c1 e3 08             	shl    ebx,0x8
c000e30c:	83 ec 0c             	sub    esp,0xc
c000e30f:	c1 fb 04             	sar    ebx,0x4
c000e312:	68 00 00 01 00       	push   0x10000
c000e317:	e8 b7 dc ff ff       	call   c000bfd3 <malloc>
c000e31c:	83 c4 0c             	add    esp,0xc
c000e31f:	89 c7                	mov    edi,eax
c000e321:	68 00 00 01 00       	push   0x10000
c000e326:	6a 00                	push   0x0
c000e328:	50                   	push   eax
c000e329:	e8 8c 23 ff ff       	call   c00006ba <memset>
c000e32e:	83 c4 10             	add    esp,0x10
c000e331:	4b                   	dec    ebx
c000e332:	83 fb ff             	cmp    ebx,0xffffffff
c000e335:	74 4a                	je     c000e381 <Virt::setupPageSwapping(int)+0xc8>
c000e337:	83 ec 0c             	sub    esp,0xc
c000e33a:	8b 06                	mov    eax,DWORD PTR [esi]
c000e33c:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e340:	52                   	push   edx
c000e341:	57                   	push   edi
c000e342:	6a 00                	push   0x0
c000e344:	68 00 00 01 00       	push   0x10000
c000e349:	56                   	push   esi
c000e34a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e34d:	83 c4 20             	add    esp,0x20
c000e350:	85 c0                	test   eax,eax
c000e352:	75 4d                	jne    c000e3a1 <Virt::setupPageSwapping(int)+0xe8>
c000e354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e358:	3d 00 00 01 00       	cmp    eax,0x10000
c000e35d:	74 d2                	je     c000e331 <Virt::setupPageSwapping(int)+0x78>
c000e35f:	52                   	push   edx
c000e360:	4b                   	dec    ebx
c000e361:	52                   	push   edx
c000e362:	50                   	push   eax
c000e363:	68 9a 16 02 c0       	push   0xc002169a
c000e368:	e8 d4 0d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000e36d:	c7 04 24 a3 16 02 c0 	mov    DWORD PTR [esp],0xc00216a3
c000e374:	e8 93 75 00 00       	call   c001590c <Krnl::panic(char const*)>
c000e379:	83 c4 10             	add    esp,0x10
c000e37c:	83 fb ff             	cmp    ebx,0xffffffff
c000e37f:	75 b6                	jne    c000e337 <Virt::setupPageSwapping(int)+0x7e>
c000e381:	83 ec 0c             	sub    esp,0xc
c000e384:	56                   	push   esi
c000e385:	e8 b0 13 00 00       	call   c000f73a <File::close()>
c000e38a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e38d:	e8 61 dc ff ff       	call   c000bff3 <rfree>
c000e392:	8b 06                	mov    eax,DWORD PTR [esi]
c000e394:	89 34 24             	mov    DWORD PTR [esp],esi
c000e397:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e39a:	83 c4 20             	add    esp,0x20
c000e39d:	5b                   	pop    ebx
c000e39e:	5e                   	pop    esi
c000e39f:	5f                   	pop    edi
c000e3a0:	c3                   	ret    
c000e3a1:	51                   	push   ecx
c000e3a2:	51                   	push   ecx
c000e3a3:	50                   	push   eax
c000e3a4:	68 82 16 02 c0       	push   0xc0021682
c000e3a9:	e8 93 0d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000e3ae:	83 c4 10             	add    esp,0x10
c000e3b1:	eb a1                	jmp    c000e354 <Virt::setupPageSwapping(int)+0x9b>
c000e3b3:	53                   	push   ebx
c000e3b4:	53                   	push   ebx
c000e3b5:	50                   	push   eax
c000e3b6:	68 5e 16 02 c0       	push   0xc002165e
c000e3bb:	e8 81 0d 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000e3c0:	c7 04 24 67 16 02 c0 	mov    DWORD PTR [esp],0xc0021667
c000e3c7:	e8 40 75 00 00       	call   c001590c <Krnl::panic(char const*)>
c000e3cc:	83 c4 10             	add    esp,0x10
c000e3cf:	e9 29 ff ff ff       	jmp    c000e2fd <Virt::setupPageSwapping(int)+0x44>

c000e3d4 <VAS::VAS()>:
c000e3d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e3:	a3 84 46 02 c0       	mov    ds:0xc0024684,eax
c000e3e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ec:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f4:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e3f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fb:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e402:	90                   	nop
c000e403:	c3                   	ret    

c000e404 <VAS::VAS(VAS*)>:
c000e404:	83 ec 0c             	sub    esp,0xc
c000e407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e412:	83 ec 0c             	sub    esp,0xc
c000e415:	68 b8 14 02 c0       	push   0xc00214b8
c000e41a:	e8 ed 74 00 00       	call   c001590c <Krnl::panic(char const*)>
c000e41f:	83 c4 10             	add    esp,0x10
c000e422:	90                   	nop
c000e423:	83 c4 0c             	add    esp,0xc
c000e426:	c3                   	ret    
c000e427:	90                   	nop

c000e428 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e42c:	89 c2                	mov    edx,eax
c000e42e:	c1 ea 16             	shr    edx,0x16
c000e431:	c1 e8 0a             	shr    eax,0xa
c000e434:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e439:	19 c9                	sbb    ecx,ecx
c000e43b:	25 fc 0f 00 00       	and    eax,0xffc
c000e440:	c1 e2 0c             	shl    edx,0xc
c000e443:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e449:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e450:	01 d0                	add    eax,edx
c000e452:	c3                   	ret    
c000e453:	90                   	nop

c000e454 <VAS::getPageTableEntry(unsigned long)>:
c000e454:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e458:	89 ca                	mov    edx,ecx
c000e45a:	c1 ea 16             	shr    edx,0x16
c000e45d:	c1 e9 0a             	shr    ecx,0xa
c000e460:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e466:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e46c:	c1 e0 0c             	shl    eax,0xc
c000e46f:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e472:	c3                   	ret    

c000e473 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e473:	57                   	push   edi
c000e474:	56                   	push   esi
c000e475:	be 01 00 00 00       	mov    esi,0x1
c000e47a:	53                   	push   ebx
c000e47b:	83 ec 10             	sub    esp,0x10
c000e47e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e482:	c1 eb 0c             	shr    ebx,0xc
c000e485:	eb 3e                	jmp    c000e4c5 <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e487:	e8 27 fe ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c000e48c:	51                   	push   ecx
c000e48d:	51                   	push   ecx
c000e48e:	57                   	push   edi
c000e48f:	50                   	push   eax
c000e490:	e8 bf ff ff ff       	call   c000e454 <VAS::getPageTableEntry(unsigned long)>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e49c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e49e:	f6 c4 04             	test   ah,0x4
c000e4a1:	75 5f                	jne    c000e502 <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e4a3:	80 fa 04             	cmp    dl,0x4
c000e4a6:	74 78                	je     c000e520 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e4a8:	80 fa 02             	cmp    dl,0x2
c000e4ab:	0f 84 88 00 00 00    	je     c000e539 <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e4b1:	80 fa 03             	cmp    dl,0x3
c000e4b4:	0f 84 ac 00 00 00    	je     c000e566 <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e4ba:	fe ca                	dec    dl
c000e4bc:	0f 84 92 00 00 00    	je     c000e554 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e4c2:	43                   	inc    ebx
c000e4c3:	31 f6                	xor    esi,esi
c000e4c5:	53                   	push   ebx
c000e4c6:	e8 34 fc ff ff       	call   c000e0ff <Virt::getPageState(unsigned long)>
c000e4cb:	5f                   	pop    edi
c000e4cc:	89 df                	mov    edi,ebx
c000e4ce:	c1 e7 0c             	shl    edi,0xc
c000e4d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e4d5:	84 c0                	test   al,al
c000e4d7:	75 ae                	jne    c000e487 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e4d9:	83 ec 0c             	sub    esp,0xc
c000e4dc:	68 a9 16 02 c0       	push   0xc00216a9
c000e4e1:	e8 26 74 00 00       	call   c001590c <Krnl::panic(char const*)>
c000e4e6:	e8 c8 fd ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c000e4eb:	5a                   	pop    edx
c000e4ec:	59                   	pop    ecx
c000e4ed:	57                   	push   edi
c000e4ee:	50                   	push   eax
c000e4ef:	e8 60 ff ff ff       	call   c000e454 <VAS::getPageTableEntry(unsigned long)>
c000e4f4:	83 c4 10             	add    esp,0x10
c000e4f7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4fd:	f6 c4 04             	test   ah,0x4
c000e500:	74 c0                	je     c000e4c2 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e502:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e506:	83 ec 0c             	sub    esp,0xc
c000e509:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e50e:	50                   	push   eax
c000e50f:	e8 08 e0 ff ff       	call   c000c51c <Phys::freePage(unsigned long)>
c000e514:	83 c4 10             	add    esp,0x10
c000e517:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e51b:	80 fa 04             	cmp    dl,0x4
c000e51e:	75 88                	jne    c000e4a8 <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e520:	89 f0                	mov    eax,esi
c000e522:	84 c0                	test   al,al
c000e524:	75 46                	jne    c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e526:	c7 44 24 20 dc 14 02 c0 	mov    DWORD PTR [esp+0x20],0xc00214dc
c000e52e:	83 c4 10             	add    esp,0x10
c000e531:	5b                   	pop    ebx
c000e532:	5e                   	pop    esi
c000e533:	5f                   	pop    edi
c000e534:	e9 d3 73 00 00       	jmp    c001590c <Krnl::panic(char const*)>
c000e539:	89 f0                	mov    eax,esi
c000e53b:	84 c0                	test   al,al
c000e53d:	75 15                	jne    c000e554 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	68 c5 16 02 c0       	push   0xc00216c5
c000e547:	e8 c0 73 00 00       	call   c001590c <Krnl::panic(char const*)>
c000e54c:	83 c4 10             	add    esp,0x10
c000e54f:	e9 6e ff ff ff       	jmp    c000e4c2 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e554:	50                   	push   eax
c000e555:	50                   	push   eax
c000e556:	6a 00                	push   0x0
c000e558:	53                   	push   ebx
c000e559:	e8 6a fb ff ff       	call   c000e0c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e55e:	83 c4 10             	add    esp,0x10
c000e561:	e9 5c ff ff ff       	jmp    c000e4c2 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e566:	89 f0                	mov    eax,esi
c000e568:	84 c0                	test   al,al
c000e56a:	75 14                	jne    c000e580 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e56c:	52                   	push   edx
c000e56d:	52                   	push   edx
c000e56e:	6a 00                	push   0x0
c000e570:	53                   	push   ebx
c000e571:	e8 52 fb ff ff       	call   c000e0c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e576:	83 c4 10             	add    esp,0x10
c000e579:	83 c4 10             	add    esp,0x10
c000e57c:	5b                   	pop    ebx
c000e57d:	5e                   	pop    esi
c000e57e:	5f                   	pop    edi
c000e57f:	c3                   	ret    
c000e580:	c7 44 24 20 e1 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216e1
c000e588:	83 c4 10             	add    esp,0x10
c000e58b:	5b                   	pop    ebx
c000e58c:	5e                   	pop    esi
c000e58d:	5f                   	pop    edi
c000e58e:	e9 79 73 00 00       	jmp    c001590c <Krnl::panic(char const*)>
c000e593:	90                   	nop

c000e594 <VAS::freeAllocatedPages(unsigned long)>:
c000e594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e59c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5a0:	74 09                	je     c000e5ab <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5a2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5a6:	e9 c8 fe ff ff       	jmp    c000e473 <Virt::freeKernelVirtualPages(unsigned long)>
c000e5ab:	c7 44 24 04 00 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021500
c000e5b3:	e9 89 0b 00 00       	jmp    c000f141 <Dbg::kprintf(char const*, ...)>

c000e5b8 <VAS::virtualToPhysical(unsigned long)>:
c000e5b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5bc:	50                   	push   eax
c000e5bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5c1:	52                   	push   edx
c000e5c2:	e8 8d fe ff ff       	call   c000e454 <VAS::getPageTableEntry(unsigned long)>
c000e5c7:	59                   	pop    ecx
c000e5c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5ca:	5a                   	pop    edx
c000e5cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5d0:	c3                   	ret    
c000e5d1:	90                   	nop

c000e5d2 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e5d2:	55                   	push   ebp
c000e5d3:	57                   	push   edi
c000e5d4:	56                   	push   esi
c000e5d5:	53                   	push   ebx
c000e5d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5de:	89 c3                	mov    ebx,eax
c000e5e0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e5e4:	c1 e3 0c             	shl    ebx,0xc
c000e5e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e5eb:	01 f3                	add    ebx,esi
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	7e 1f                	jle    c000e610 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e5f1:	56                   	push   esi
c000e5f2:	81 c6 00 10 00 00    	add    esi,0x1000
c000e5f8:	55                   	push   ebp
c000e5f9:	e8 56 fe ff ff       	call   c000e454 <VAS::getPageTableEntry(unsigned long)>
c000e5fe:	5a                   	pop    edx
c000e5ff:	59                   	pop    ecx
c000e600:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e602:	21 f9                	and    ecx,edi
c000e604:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e608:	09 d1                	or     ecx,edx
c000e60a:	39 f3                	cmp    ebx,esi
c000e60c:	89 08                	mov    DWORD PTR [eax],ecx
c000e60e:	75 e1                	jne    c000e5f1 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e610:	5b                   	pop    ebx
c000e611:	5e                   	pop    esi
c000e612:	5f                   	pop    edi
c000e613:	5d                   	pop    ebp
c000e614:	c3                   	ret    
c000e615:	90                   	nop

c000e616 <VAS::setToWriteCombining(unsigned long, int)>:
c000e616:	83 ec 0c             	sub    esp,0xc
c000e619:	e8 82 61 00 00       	call   c00147a0 <thisCPU()>
c000e61e:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e625:	75 04                	jne    c000e62b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e627:	83 c4 0c             	add    esp,0xc
c000e62a:	c3                   	ret    
c000e62b:	83 ec 0c             	sub    esp,0xc
c000e62e:	68 80 00 00 00       	push   0x80
c000e633:	6a ff                	push   0xffffffff
c000e635:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e639:	50                   	push   eax
c000e63a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e63e:	52                   	push   edx
c000e63f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e643:	51                   	push   ecx
c000e644:	e8 89 ff ff ff       	call   c000e5d2 <VAS::reflagRange(unsigned long, int, int, int)>
c000e649:	83 c4 20             	add    esp,0x20
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e650:	83 ec 0c             	sub    esp,0xc
c000e653:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e657:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e65c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e663:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e666:	19 c0                	sbb    eax,eax
c000e668:	83 ca 03             	or     edx,0x3
c000e66b:	83 e0 fc             	and    eax,0xfffffffc
c000e66e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e675:	e8 eb 0f 01 00       	call   c001f665 <CPU::readCR3()>
c000e67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e67e:	83 c4 0c             	add    esp,0xc
c000e681:	e9 f1 0f 01 00       	jmp    c001f677 <CPU::writeCR3(unsigned long)>

c000e686 <VAS::~VAS()>:
c000e686:	83 ec 2c             	sub    esp,0x2c
c000e689:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e691:	e8 63 a2 00 00       	call   c00188f9 <lockScheduler()>
c000e696:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e69b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e69d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6a0:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6a6:	83 ec 04             	sub    esp,0x4
c000e6a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6ad:	6a 01                	push   0x1
c000e6af:	50                   	push   eax
c000e6b0:	e8 9b ff ff ff       	call   c000e650 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6b5:	83 c4 10             	add    esp,0x10
c000e6b8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6c0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6c8:	0f 8f d7 00 00 00    	jg     c000e7a5 <VAS::~VAS()+0x11f>
c000e6ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6d9:	c1 e2 02             	shl    edx,0x2
c000e6dc:	01 d0                	add    eax,edx
c000e6de:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e8:	83 e0 01             	and    eax,0x1
c000e6eb:	0f 84 ab 00 00 00    	je     c000e79c <VAS::~VAS()+0x116>
c000e6f1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e6f9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e701:	7f 75                	jg     c000e778 <VAS::~VAS()+0xf2>
c000e703:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e707:	c1 e0 0a             	shl    eax,0xa
c000e70a:	89 c2                	mov    edx,eax
c000e70c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e710:	01 d0                	add    eax,edx
c000e712:	c1 e0 0c             	shl    eax,0xc
c000e715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e719:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e71e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e720:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e723:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e729:	83 ec 04             	sub    esp,0x4
c000e72c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e730:	6a 01                	push   0x1
c000e732:	50                   	push   eax
c000e733:	e8 f0 fc ff ff       	call   c000e428 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e738:	83 c4 10             	add    esp,0x10
c000e73b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e73f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e743:	8b 00                	mov    eax,DWORD PTR [eax]
c000e745:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e74d:	25 01 04 00 00       	and    eax,0x401
c000e752:	3d 01 04 00 00       	cmp    eax,0x401
c000e757:	75 19                	jne    c000e772 <VAS::~VAS()+0xec>
c000e759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e75d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e762:	83 ec 0c             	sub    esp,0xc
c000e765:	50                   	push   eax
c000e766:	e8 b1 dd ff ff       	call   c000c51c <Phys::freePage(unsigned long)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e772:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e776:	eb 81                	jmp    c000e6f9 <VAS::~VAS()+0x73>
c000e778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77c:	25 00 04 00 00       	and    eax,0x400
c000e781:	74 19                	je     c000e79c <VAS::~VAS()+0x116>
c000e783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e787:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e78c:	83 ec 0c             	sub    esp,0xc
c000e78f:	50                   	push   eax
c000e790:	e8 87 dd ff ff       	call   c000c51c <Phys::freePage(unsigned long)>
c000e795:	83 c4 10             	add    esp,0x10
c000e798:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e79c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7a0:	e9 1b ff ff ff       	jmp    c000e6c0 <VAS::~VAS()+0x3a>
c000e7a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	50                   	push   eax
c000e7b0:	e8 be fc ff ff       	call   c000e473 <Virt::freeKernelVirtualPages(unsigned long)>
c000e7b5:	83 c4 10             	add    esp,0x10
c000e7b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7bf:	83 ec 0c             	sub    esp,0xc
c000e7c2:	50                   	push   eax
c000e7c3:	e8 54 dd ff ff       	call   c000c51c <Phys::freePage(unsigned long)>
c000e7c8:	83 c4 10             	add    esp,0x10
c000e7cb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7d3:	c1 e0 02             	shl    eax,0x2
c000e7d6:	83 ec 08             	sub    esp,0x8
c000e7d9:	50                   	push   eax
c000e7da:	68 24 15 02 c0       	push   0xc0021524
c000e7df:	e8 5d 09 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000e7e4:	83 c4 10             	add    esp,0x10
c000e7e7:	e8 0f a1 00 00       	call   c00188fb <unlockScheduler()>
c000e7ec:	90                   	nop
c000e7ed:	83 c4 2c             	add    esp,0x2c
c000e7f0:	c3                   	ret    
c000e7f1:	90                   	nop

c000e7f2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e7f2:	55                   	push   ebp
c000e7f3:	57                   	push   edi
c000e7f4:	56                   	push   esi
c000e7f5:	53                   	push   ebx
c000e7f6:	83 ec 1c             	sub    esp,0x1c
c000e7f9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e7fd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e801:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e807:	77 08                	ja     c000e811 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e809:	0f 20 d8             	mov    eax,cr3
c000e80c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e80f:	75 49                	jne    c000e85a <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e811:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e815:	09 d8                	or     eax,ebx
c000e817:	a9 ff 0f 00 00       	test   eax,0xfff
c000e81c:	75 59                	jne    c000e877 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e81e:	89 de                	mov    esi,ebx
c000e820:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e823:	c1 ee 16             	shr    esi,0x16
c000e826:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e82d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e831:	74 56                	je     c000e889 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e833:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e839:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e83d:	c1 eb 0a             	shr    ebx,0xa
c000e840:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e844:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e84a:	09 d0                	or     eax,edx
c000e84c:	c1 e6 0c             	shl    esi,0xc
c000e84f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e852:	83 c4 1c             	add    esp,0x1c
c000e855:	5b                   	pop    ebx
c000e856:	5e                   	pop    esi
c000e857:	5f                   	pop    edi
c000e858:	5d                   	pop    ebp
c000e859:	c3                   	ret    
c000e85a:	83 ec 0c             	sub    esp,0xc
c000e85d:	68 44 15 02 c0       	push   0xc0021544
c000e862:	e8 da 08 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000e867:	83 c4 10             	add    esp,0x10
c000e86a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e86e:	09 d8                	or     eax,ebx
c000e870:	a9 ff 0f 00 00       	test   eax,0xfff
c000e875:	74 a7                	je     c000e81e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e877:	83 ec 0c             	sub    esp,0xc
c000e87a:	68 ac 15 02 c0       	push   0xc00215ac
c000e87f:	e8 88 70 00 00       	call   c001590c <Krnl::panic(char const*)>
c000e884:	83 c4 10             	add    esp,0x10
c000e887:	eb 95                	jmp    c000e81e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e889:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e88d:	e8 17 dd ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000e892:	89 c5                	mov    ebp,eax
c000e894:	e8 1a fa ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c000e899:	83 ec 0c             	sub    esp,0xc
c000e89c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8a0:	6a 01                	push   0x1
c000e8a2:	e8 7f f8 ff ff       	call   c000e126 <Virt::allocateKernelVirtualPages(int)>
c000e8a7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8ae:	6a 01                	push   0x1
c000e8b0:	50                   	push   eax
c000e8b1:	55                   	push   ebp
c000e8b2:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8b8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8bc:	51                   	push   ecx
c000e8bd:	e8 22 02 00 00       	call   c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8c2:	83 c4 1c             	add    esp,0x1c
c000e8c5:	68 00 10 00 00       	push   0x1000
c000e8ca:	6a 00                	push   0x0
c000e8cc:	50                   	push   eax
c000e8cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8d1:	e8 e4 1d ff ff       	call   c00006ba <memset>
c000e8d6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8da:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8dd:	e8 91 fb ff ff       	call   c000e473 <Virt::freeKernelVirtualPages(unsigned long)>
c000e8e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8e9:	83 c4 10             	add    esp,0x10
c000e8ec:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e8ef:	e9 3f ff ff ff       	jmp    c000e833 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e8f4 <VAS::allocatePages(int, int)>:
c000e8f4:	55                   	push   ebp
c000e8f5:	57                   	push   edi
c000e8f6:	56                   	push   esi
c000e8f7:	53                   	push   ebx
c000e8f8:	83 ec 1c             	sub    esp,0x1c
c000e8fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8ff:	e8 9c 5e 00 00       	call   c00147a0 <thisCPU()>
c000e904:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e90a:	83 e0 01             	and    eax,0x1
c000e90d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e911:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e915:	0f 85 d5 00 00 00    	jne    c000e9f0 <VAS::allocatePages(int, int)+0xfc>
c000e91b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e91e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e922:	85 c0                	test   eax,eax
c000e924:	0f 84 aa 00 00 00    	je     c000e9d4 <VAS::allocatePages(int, int)+0xe0>
c000e92a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e92e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e932:	c1 e6 0c             	shl    esi,0xc
c000e935:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e939:	01 de                	add    esi,ebx
c000e93b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e93f:	81 cd 00 04 00 00    	or     ebp,0x400
c000e945:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e948:	85 c0                	test   eax,eax
c000e94a:	7e 25                	jle    c000e971 <VAS::allocatePages(int, int)+0x7d>
c000e94c:	e8 58 dc ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000e951:	55                   	push   ebp
c000e952:	53                   	push   ebx
c000e953:	50                   	push   eax
c000e954:	57                   	push   edi
c000e955:	e8 98 fe ff ff       	call   c000e7f2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e95a:	83 c4 10             	add    esp,0x10
c000e95d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e962:	74 03                	je     c000e967 <VAS::allocatePages(int, int)+0x73>
c000e964:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e967:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e96d:	39 de                	cmp    esi,ebx
c000e96f:	75 db                	jne    c000e94c <VAS::allocatePages(int, int)+0x58>
c000e971:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e976:	74 3f                	je     c000e9b7 <VAS::allocatePages(int, int)+0xc3>
c000e978:	c1 ee 0a             	shr    esi,0xa
c000e97b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e97f:	c1 eb 0a             	shr    ebx,0xa
c000e982:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e988:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e98e:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e994:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e99a:	39 f3                	cmp    ebx,esi
c000e99c:	77 0d                	ja     c000e9ab <VAS::allocatePages(int, int)+0xb7>
c000e99e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9a7:	39 de                	cmp    esi,ebx
c000e9a9:	73 f3                	jae    c000e99e <VAS::allocatePages(int, int)+0xaa>
c000e9ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9af:	83 c4 1c             	add    esp,0x1c
c000e9b2:	5b                   	pop    ebx
c000e9b3:	5e                   	pop    esi
c000e9b4:	5f                   	pop    edi
c000e9b5:	5d                   	pop    ebp
c000e9b6:	c3                   	ret    
c000e9b7:	e8 a9 0c 01 00       	call   c001f665 <CPU::readCR3()>
c000e9bc:	83 ec 0c             	sub    esp,0xc
c000e9bf:	50                   	push   eax
c000e9c0:	e8 b2 0c 01 00       	call   c001f677 <CPU::writeCR3(unsigned long)>
c000e9c5:	83 c4 10             	add    esp,0x10
c000e9c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9cc:	83 c4 1c             	add    esp,0x1c
c000e9cf:	5b                   	pop    ebx
c000e9d0:	5e                   	pop    esi
c000e9d1:	5f                   	pop    edi
c000e9d2:	5d                   	pop    ebp
c000e9d3:	c3                   	ret    
c000e9d4:	83 ec 0c             	sub    esp,0xc
c000e9d7:	68 d0 15 02 c0       	push   0xc00215d0
c000e9dc:	e8 2b 6f 00 00       	call   c001590c <Krnl::panic(char const*)>
c000e9e1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9e8:	83 c4 10             	add    esp,0x10
c000e9eb:	e9 3a ff ff ff       	jmp    c000e92a <VAS::allocatePages(int, int)+0x36>
c000e9f0:	83 ec 0c             	sub    esp,0xc
c000e9f3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e9f7:	53                   	push   ebx
c000e9f8:	e8 29 f7 ff ff       	call   c000e126 <Virt::allocateKernelVirtualPages(int)>
c000e9fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea01:	83 c4 10             	add    esp,0x10
c000ea04:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea09:	0f 87 94 00 00 00    	ja     c000eaa3 <VAS::allocatePages(int, int)+0x1af>
c000ea0f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea13:	85 d2                	test   edx,edx
c000ea15:	7e 3c                	jle    c000ea53 <VAS::allocatePages(int, int)+0x15f>
c000ea17:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea1b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea1f:	c1 e5 0c             	shl    ebp,0xc
c000ea22:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea26:	81 ce 00 04 00 00    	or     esi,0x400
c000ea2c:	01 dd                	add    ebp,ebx
c000ea2e:	e8 76 db ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000ea33:	56                   	push   esi
c000ea34:	53                   	push   ebx
c000ea35:	50                   	push   eax
c000ea36:	57                   	push   edi
c000ea37:	e8 b6 fd ff ff       	call   c000e7f2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea3c:	83 c4 10             	add    esp,0x10
c000ea3f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea44:	74 03                	je     c000ea49 <VAS::allocatePages(int, int)+0x155>
c000ea46:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea49:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea4f:	39 dd                	cmp    ebp,ebx
c000ea51:	75 db                	jne    c000ea2e <VAS::allocatePages(int, int)+0x13a>
c000ea53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea58:	0f 84 59 ff ff ff    	je     c000e9b7 <VAS::allocatePages(int, int)+0xc3>
c000ea5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea66:	c1 e0 0c             	shl    eax,0xc
c000ea69:	89 d3                	mov    ebx,edx
c000ea6b:	c1 eb 0a             	shr    ebx,0xa
c000ea6e:	01 d0                	add    eax,edx
c000ea70:	c1 e8 0a             	shr    eax,0xa
c000ea73:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea79:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea7e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea84:	2d 00 00 40 00       	sub    eax,0x400000
c000ea89:	39 c3                	cmp    ebx,eax
c000ea8b:	0f 87 1a ff ff ff    	ja     c000e9ab <VAS::allocatePages(int, int)+0xb7>
c000ea91:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea94:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea9a:	39 d8                	cmp    eax,ebx
c000ea9c:	73 f3                	jae    c000ea91 <VAS::allocatePages(int, int)+0x19d>
c000ea9e:	e9 08 ff ff ff       	jmp    c000e9ab <VAS::allocatePages(int, int)+0xb7>
c000eaa3:	e8 f8 5c 00 00       	call   c00147a0 <thisCPU()>
c000eaa8:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eaaf:	0f 84 5a ff ff ff    	je     c000ea0f <VAS::allocatePages(int, int)+0x11b>
c000eab5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eab9:	80 cd 01             	or     ch,0x1
c000eabc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eac0:	e9 4a ff ff ff       	jmp    c000ea0f <VAS::allocatePages(int, int)+0x11b>
c000eac5:	90                   	nop

c000eac6 <VAS::setCPUSpecific(unsigned long)>:
c000eac6:	83 ec 0c             	sub    esp,0xc
c000eac9:	6a 05                	push   0x5
c000eacb:	68 00 00 40 c2       	push   0xc2400000
c000ead0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ead4:	50                   	push   eax
c000ead5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ead9:	52                   	push   edx
c000eada:	e8 13 fd ff ff       	call   c000e7f2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eadf:	83 c4 1c             	add    esp,0x1c
c000eae2:	c3                   	ret    
c000eae3:	90                   	nop

c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eae4:	55                   	push   ebp
c000eae5:	57                   	push   edi
c000eae6:	56                   	push   esi
c000eae7:	53                   	push   ebx
c000eae8:	83 ec 1c             	sub    esp,0x1c
c000eaeb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eaef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eaf3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eaf7:	e8 a4 5c 00 00       	call   c00147a0 <thisCPU()>
c000eafc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb02:	83 e0 01             	and    eax,0x1
c000eb05:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb09:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb0d:	85 c0                	test   eax,eax
c000eb0f:	7e 39                	jle    c000eb4a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb15:	89 f3                	mov    ebx,esi
c000eb17:	c1 e0 0c             	shl    eax,0xc
c000eb1a:	01 f0                	add    eax,esi
c000eb1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb20:	55                   	push   ebp
c000eb21:	53                   	push   ebx
c000eb22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb26:	29 f0                	sub    eax,esi
c000eb28:	01 d8                	add    eax,ebx
c000eb2a:	50                   	push   eax
c000eb2b:	57                   	push   edi
c000eb2c:	e8 c1 fc ff ff       	call   c000e7f2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb31:	83 c4 10             	add    esp,0x10
c000eb34:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb39:	74 03                	je     c000eb3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb3b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb3e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb44:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb48:	75 d6                	jne    c000eb20 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb4a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb4f:	74 42                	je     c000eb93 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb55:	89 f3                	mov    ebx,esi
c000eb57:	c1 e0 0c             	shl    eax,0xc
c000eb5a:	c1 eb 0a             	shr    ebx,0xa
c000eb5d:	01 f0                	add    eax,esi
c000eb5f:	c1 e8 0a             	shr    eax,0xa
c000eb62:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb68:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb6d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb73:	2d 00 00 40 00       	sub    eax,0x400000
c000eb78:	39 c3                	cmp    ebx,eax
c000eb7a:	77 0d                	ja     c000eb89 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000eb7c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb7f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb85:	39 d8                	cmp    eax,ebx
c000eb87:	73 f3                	jae    c000eb7c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000eb89:	83 c4 1c             	add    esp,0x1c
c000eb8c:	89 f0                	mov    eax,esi
c000eb8e:	5b                   	pop    ebx
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	5d                   	pop    ebp
c000eb92:	c3                   	ret    
c000eb93:	e8 cd 0a 01 00       	call   c001f665 <CPU::readCR3()>
c000eb98:	83 ec 0c             	sub    esp,0xc
c000eb9b:	50                   	push   eax
c000eb9c:	e8 d6 0a 01 00       	call   c001f677 <CPU::writeCR3(unsigned long)>
c000eba1:	83 c4 10             	add    esp,0x10
c000eba4:	89 f0                	mov    eax,esi
c000eba6:	83 c4 1c             	add    esp,0x1c
c000eba9:	5b                   	pop    ebx
c000ebaa:	5e                   	pop    esi
c000ebab:	5f                   	pop    edi
c000ebac:	5d                   	pop    ebp
c000ebad:	c3                   	ret    

c000ebae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebae:	55                   	push   ebp
c000ebaf:	57                   	push   edi
c000ebb0:	56                   	push   esi
c000ebb1:	53                   	push   ebx
c000ebb2:	83 ec 1c             	sub    esp,0x1c
c000ebb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebb9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebbd:	09 f0                	or     eax,esi
c000ebbf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebc3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebc7:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebcc:	75 4c                	jne    c000ec1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ebce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ebd2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebd5:	c1 eb 16             	shr    ebx,0x16
c000ebd8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ebdf:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ebe3:	74 4f                	je     c000ec34 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ebe5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebe9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ebed:	c1 e8 0a             	shr    eax,0xa
c000ebf0:	80 fa 01             	cmp    dl,0x1
c000ebf3:	19 d2                	sbb    edx,edx
c000ebf5:	25 fc 0f 00 00       	and    eax,0xffc
c000ebfa:	c1 e3 0c             	shl    ebx,0xc
c000ebfd:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec03:	01 d8                	add    eax,ebx
c000ec05:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ec09:	09 d9                	or     ecx,ebx
c000ec0b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec12:	83 c4 1c             	add    esp,0x1c
c000ec15:	5b                   	pop    ebx
c000ec16:	5e                   	pop    esi
c000ec17:	5f                   	pop    edi
c000ec18:	5d                   	pop    ebp
c000ec19:	c3                   	ret    
c000ec1a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	68 fc 15 02 c0       	push   0xc00215fc
c000ec26:	e8 e1 6c 00 00       	call   c001590c <Krnl::panic(char const*)>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec32:	eb 9a                	jmp    c000ebce <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ec34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec38:	e8 6c d9 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000ec3d:	89 c5                	mov    ebp,eax
c000ec3f:	e8 6f f6 ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c000ec44:	83 ec 0c             	sub    esp,0xc
c000ec47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec4b:	6a 01                	push   0x1
c000ec4d:	e8 d4 f4 ff ff       	call   c000e126 <Virt::allocateKernelVirtualPages(int)>
c000ec52:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec59:	6a 01                	push   0x1
c000ec5b:	50                   	push   eax
c000ec5c:	55                   	push   ebp
c000ec5d:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec63:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec67:	51                   	push   ecx
c000ec68:	e8 77 fe ff ff       	call   c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec6d:	83 c4 1c             	add    esp,0x1c
c000ec70:	68 00 10 00 00       	push   0x1000
c000ec75:	6a 00                	push   0x0
c000ec77:	50                   	push   eax
c000ec78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec7c:	e8 39 1a ff ff       	call   c00006ba <memset>
c000ec81:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ec85:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ec88:	e8 e6 f7 ff ff       	call   c000e473 <Virt::freeKernelVirtualPages(unsigned long)>
c000ec8d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ec90:	83 c4 10             	add    esp,0x10
c000ec93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec97:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ec9a:	e9 46 ff ff ff       	jmp    c000ebe5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ec9f:	90                   	nop

c000eca0 <VAS::VAS(bool)>:
c000eca0:	53                   	push   ebx
c000eca1:	83 ec 28             	sub    esp,0x28
c000eca4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eca8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ecac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ecb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecbb:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecbf:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecc2:	e8 e2 d8 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000ecc7:	89 c2                	mov    edx,eax
c000ecc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eccd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ecd0:	e8 de f5 ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c000ecd5:	89 c3                	mov    ebx,eax
c000ecd7:	83 ec 0c             	sub    esp,0xc
c000ecda:	6a 01                	push   0x1
c000ecdc:	e8 45 f4 ff ff       	call   c000e126 <Virt::allocateKernelVirtualPages(int)>
c000ece1:	83 c4 10             	add    esp,0x10
c000ece4:	89 c2                	mov    edx,eax
c000ece6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eced:	83 ec 0c             	sub    esp,0xc
c000ecf0:	6a 03                	push   0x3
c000ecf2:	6a 01                	push   0x1
c000ecf4:	52                   	push   edx
c000ecf5:	50                   	push   eax
c000ecf6:	53                   	push   ebx
c000ecf7:	e8 e8 fd ff ff       	call   c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ecfc:	83 c4 20             	add    esp,0x20
c000ecff:	89 c2                	mov    edx,eax
c000ed01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed05:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed08:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed10:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed18:	7f 1c                	jg     c000ed36 <VAS::VAS(bool)+0x96>
c000ed1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed25:	c1 e2 02             	shl    edx,0x2
c000ed28:	01 d0                	add    eax,edx
c000ed2a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed30:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed34:	eb da                	jmp    c000ed10 <VAS::VAS(bool)+0x70>
c000ed36:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed3e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed46:	7f 71                	jg     c000edb9 <VAS::VAS(bool)+0x119>
c000ed48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed4c:	2d 00 02 00 00       	sub    eax,0x200
c000ed51:	c1 e0 0c             	shl    eax,0xc
c000ed54:	83 c8 03             	or     eax,0x3
c000ed57:	89 c3                	mov    ebx,eax
c000ed59:	e8 42 5a 00 00       	call   c00147a0 <thisCPU()>
c000ed5e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed64:	83 e0 10             	and    eax,0x10
c000ed67:	84 c0                	test   al,al
c000ed69:	74 07                	je     c000ed72 <VAS::VAS(bool)+0xd2>
c000ed6b:	b8 00 01 00 00       	mov    eax,0x100
c000ed70:	eb 05                	jmp    c000ed77 <VAS::VAS(bool)+0xd7>
c000ed72:	b8 00 00 00 00       	mov    eax,0x0
c000ed77:	09 d8                	or     eax,ebx
c000ed79:	89 c1                	mov    ecx,eax
c000ed7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed86:	c1 e2 02             	shl    edx,0x2
c000ed89:	01 d0                	add    eax,edx
c000ed8b:	89 ca                	mov    edx,ecx
c000ed8d:	89 10                	mov    DWORD PTR [eax],edx
c000ed8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed93:	2d 40 03 00 00       	sub    eax,0x340
c000ed98:	83 f8 7f             	cmp    eax,0x7f
c000ed9b:	77 16                	ja     c000edb3 <VAS::VAS(bool)+0x113>
c000ed9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eda1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eda4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eda8:	c1 e2 02             	shl    edx,0x2
c000edab:	01 d0                	add    eax,edx
c000edad:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edb3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000edb7:	eb 85                	jmp    c000ed3e <VAS::VAS(bool)+0x9e>
c000edb9:	e8 e2 59 00 00       	call   c00147a0 <thisCPU()>
c000edbe:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000edc4:	83 e0 10             	and    eax,0x10
c000edc7:	84 c0                	test   al,al
c000edc9:	74 07                	je     c000edd2 <VAS::VAS(bool)+0x132>
c000edcb:	b8 03 41 00 00       	mov    eax,0x4103
c000edd0:	eb 05                	jmp    c000edd7 <VAS::VAS(bool)+0x137>
c000edd2:	b8 03 40 00 00       	mov    eax,0x4003
c000edd7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eddb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000edde:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ede4:	89 02                	mov    DWORD PTR [edx],eax
c000ede6:	e8 b5 59 00 00       	call   c00147a0 <thisCPU()>
c000edeb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000edf1:	83 ec 08             	sub    esp,0x8
c000edf4:	50                   	push   eax
c000edf5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000edf9:	e8 c8 fc ff ff       	call   c000eac6 <VAS::setCPUSpecific(unsigned long)>
c000edfe:	83 c4 10             	add    esp,0x10
c000ee01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee05:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee08:	e8 93 59 00 00       	call   c00147a0 <thisCPU()>
c000ee0d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee13:	83 e0 10             	and    eax,0x10
c000ee16:	84 c0                	test   al,al
c000ee18:	74 07                	je     c000ee21 <VAS::VAS(bool)+0x181>
c000ee1a:	b8 00 01 00 00       	mov    eax,0x100
c000ee1f:	eb 05                	jmp    c000ee26 <VAS::VAS(bool)+0x186>
c000ee21:	b8 00 00 00 00       	mov    eax,0x0
c000ee26:	09 d8                	or     eax,ebx
c000ee28:	89 c2                	mov    edx,eax
c000ee2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee31:	05 fc 0f 00 00       	add    eax,0xffc
c000ee36:	83 ca 03             	or     edx,0x3
c000ee39:	89 10                	mov    DWORD PTR [eax],edx
c000ee3b:	e8 60 59 00 00       	call   c00147a0 <thisCPU()>
c000ee40:	83 ec 0c             	sub    esp,0xc
c000ee43:	50                   	push   eax
c000ee44:	e8 ef 19 00 00       	call   c0010838 <Device::getName()>
c000ee49:	83 c4 10             	add    esp,0x10
c000ee4c:	83 ec 08             	sub    esp,0x8
c000ee4f:	68 fb 16 02 c0       	push   0xc00216fb
c000ee54:	50                   	push   eax
c000ee55:	e8 50 19 ff ff       	call   c00007aa <strcmp>
c000ee5a:	83 c4 10             	add    esp,0x10
c000ee5d:	85 c0                	test   eax,eax
c000ee5f:	0f 94 c0             	sete   al
c000ee62:	84 c0                	test   al,al
c000ee64:	74 64                	je     c000eeca <VAS::VAS(bool)+0x22a>
c000ee66:	e8 6c 9a 00 00       	call   c00188d7 <disableIRQs()>
c000ee6b:	e8 30 59 00 00       	call   c00147a0 <thisCPU()>
c000ee70:	05 7c 09 00 00       	add    eax,0x97c
c000ee75:	83 ec 0c             	sub    esp,0xc
c000ee78:	50                   	push   eax
c000ee79:	e8 c8 cb ff ff       	call   c000ba46 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee7e:	83 c4 10             	add    esp,0x10
c000ee81:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ee86:	89 c3                	mov    ebx,eax
c000ee88:	e8 13 59 00 00       	call   c00147a0 <thisCPU()>
c000ee8d:	05 7c 09 00 00       	add    eax,0x97c
c000ee92:	83 ec 0c             	sub    esp,0xc
c000ee95:	50                   	push   eax
c000ee96:	e8 ab cb ff ff       	call   c000ba46 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee9b:	83 c4 10             	add    esp,0x10
c000ee9e:	83 ec 08             	sub    esp,0x8
c000eea1:	50                   	push   eax
c000eea2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eea6:	e8 a9 f5 ff ff       	call   c000e454 <VAS::getPageTableEntry(unsigned long)>
c000eeab:	83 c4 10             	add    esp,0x10
c000eeae:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeb0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eeb5:	6a 11                	push   0x11
c000eeb7:	53                   	push   ebx
c000eeb8:	50                   	push   eax
c000eeb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eebd:	e8 30 f9 ff ff       	call   c000e7f2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eec2:	83 c4 10             	add    esp,0x10
c000eec5:	e8 20 9a 00 00       	call   c00188ea <enableIRQs()>
c000eeca:	90                   	nop
c000eecb:	83 c4 28             	add    esp,0x28
c000eece:	5b                   	pop    ebx
c000eecf:	c3                   	ret    

c000eed0 <mapVASFirstTime>:
c000eed0:	55                   	push   ebp
c000eed1:	57                   	push   edi
c000eed2:	56                   	push   esi
c000eed3:	53                   	push   ebx
c000eed4:	83 ec 0c             	sub    esp,0xc
c000eed7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eedc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eedf:	4a                   	dec    edx
c000eee0:	0f 84 99 00 00 00    	je     c000ef7f <mapVASFirstTime+0xaf>
c000eee6:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000eee9:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000eeec:	c1 e5 15             	shl    ebp,0x15
c000eeef:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000eef4:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000eef9:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000eeff:	29 eb                	sub    ebx,ebp
c000ef01:	29 ee                	sub    esi,ebp
c000ef03:	e8 a1 d6 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000ef08:	83 ec 0c             	sub    esp,0xc
c000ef0b:	68 03 04 00 00       	push   0x403
c000ef10:	6a 01                	push   0x1
c000ef12:	53                   	push   ebx
c000ef13:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef19:	50                   	push   eax
c000ef1a:	57                   	push   edi
c000ef1b:	e8 c4 fb ff ff       	call   c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef20:	83 c4 20             	add    esp,0x20
c000ef23:	39 f3                	cmp    ebx,esi
c000ef25:	75 dc                	jne    c000ef03 <mapVASFirstTime+0x33>
c000ef27:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef2c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef31:	29 e8                	sub    eax,ebp
c000ef33:	29 ee                	sub    esi,ebp
c000ef35:	89 c5                	mov    ebp,eax
c000ef37:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef3b:	19 db                	sbb    ebx,ebx
c000ef3d:	e8 67 d6 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000ef42:	83 e3 04             	and    ebx,0x4
c000ef45:	83 ec 0c             	sub    esp,0xc
c000ef48:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef4e:	53                   	push   ebx
c000ef4f:	6a 01                	push   0x1
c000ef51:	56                   	push   esi
c000ef52:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef58:	50                   	push   eax
c000ef59:	57                   	push   edi
c000ef5a:	e8 85 fb ff ff       	call   c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef5f:	83 c4 20             	add    esp,0x20
c000ef62:	39 f5                	cmp    ebp,esi
c000ef64:	75 d1                	jne    c000ef37 <mapVASFirstTime+0x67>
c000ef66:	e8 fa 06 01 00       	call   c001f665 <CPU::readCR3()>
c000ef6b:	83 ec 0c             	sub    esp,0xc
c000ef6e:	50                   	push   eax
c000ef6f:	e8 03 07 01 00       	call   c001f677 <CPU::writeCR3(unsigned long)>
c000ef74:	83 c4 10             	add    esp,0x10
c000ef77:	83 c4 0c             	add    esp,0xc
c000ef7a:	5b                   	pop    ebx
c000ef7b:	5e                   	pop    esi
c000ef7c:	5f                   	pop    edi
c000ef7d:	5d                   	pop    ebp
c000ef7e:	c3                   	ret    
c000ef7f:	83 ec 0c             	sub    esp,0xc
c000ef82:	68 09 17 02 c0       	push   0xc0021709
c000ef87:	e8 b5 01 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000ef8c:	83 c4 10             	add    esp,0x10
c000ef8f:	83 c4 0c             	add    esp,0xc
c000ef92:	5b                   	pop    ebx
c000ef93:	5e                   	pop    esi
c000ef94:	5f                   	pop    edi
c000ef95:	5d                   	pop    ebp
c000ef96:	c3                   	ret    

c000ef97 <__cxa_atexit>:
c000ef97:	31 c0                	xor    eax,eax
c000ef99:	c3                   	ret    

c000ef9a <__cxa_finalize>:
c000ef9a:	c3                   	ret    

c000ef9b <__stack_chk_fail>:
c000ef9b:	55                   	push   ebp
c000ef9c:	89 e5                	mov    ebp,esp
c000ef9e:	83 ec 10             	sub    esp,0x10
c000efa1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efa4:	68 22 17 02 c0       	push   0xc0021722
c000efa9:	e8 93 01 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000efae:	58                   	pop    eax
c000efaf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efb2:	5a                   	pop    edx
c000efb3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efb6:	68 22 17 02 c0       	push   0xc0021722
c000efbb:	e8 81 01 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000efc0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efc3:	59                   	pop    ecx
c000efc4:	5a                   	pop    edx
c000efc5:	8b 00                	mov    eax,DWORD PTR [eax]
c000efc7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efca:	68 22 17 02 c0       	push   0xc0021722
c000efcf:	e8 6d 01 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000efd4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efd7:	59                   	pop    ecx
c000efd8:	5a                   	pop    edx
c000efd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000efdb:	8b 00                	mov    eax,DWORD PTR [eax]
c000efdd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efe0:	68 22 17 02 c0       	push   0xc0021722
c000efe5:	e8 57 01 00 00       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c000efea:	c7 04 24 2a 17 02 c0 	mov    DWORD PTR [esp],0xc002172a
c000eff1:	e8 16 69 00 00       	call   c001590c <Krnl::panic(char const*)>
c000eff6:	83 c4 10             	add    esp,0x10
c000eff9:	c9                   	leave  
c000effa:	c3                   	ret    

c000effb <__cxa_pure_virtual>:
c000effb:	83 ec 18             	sub    esp,0x18
c000effe:	68 42 17 02 c0       	push   0xc0021742
c000f003:	e8 04 69 00 00       	call   c001590c <Krnl::panic(char const*)>
c000f008:	83 c4 1c             	add    esp,0x1c
c000f00b:	c3                   	ret    

c000f00c <operator new(unsigned long)>:
c000f00c:	e9 c2 cf ff ff       	jmp    c000bfd3 <malloc>

c000f011 <operator new[](unsigned long)>:
c000f011:	e9 bd cf ff ff       	jmp    c000bfd3 <malloc>

c000f016 <operator delete(void*)>:
c000f016:	e9 d8 cf ff ff       	jmp    c000bff3 <rfree>

c000f01b <operator delete(void*, unsigned long)>:
c000f01b:	e9 d3 cf ff ff       	jmp    c000bff3 <rfree>

c000f020 <operator delete[](void*)>:
c000f020:	e9 ce cf ff ff       	jmp    c000bff3 <rfree>

c000f025 <operator delete[](void*, unsigned long)>:
c000f025:	e9 c9 cf ff ff       	jmp    c000bff3 <rfree>

c000f02a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f02a:	57                   	push   edi
c000f02b:	56                   	push   esi
c000f02c:	be 59 17 02 c0       	mov    esi,0xc0021759
c000f031:	53                   	push   ebx
c000f032:	83 ec 40             	sub    esp,0x40
c000f035:	a0 58 17 02 c0       	mov    al,ds:0xc0021758
c000f03a:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f03e:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f042:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f046:	b8 3e 00 00 00       	mov    eax,0x3e
c000f04b:	f7 c7 02 00 00 00    	test   edi,0x2
c000f051:	75 69                	jne    c000f0bc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f053:	89 c1                	mov    ecx,eax
c000f055:	c1 e9 02             	shr    ecx,0x2
c000f058:	fc                   	cld    
c000f059:	31 d2                	xor    edx,edx
c000f05b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f05d:	a8 02                	test   al,0x2
c000f05f:	74 0b                	je     c000f06c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f061:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f064:	66 89 17             	mov    WORD PTR [edi],dx
c000f067:	ba 02 00 00 00       	mov    edx,0x2
c000f06c:	a8 01                	test   al,0x1
c000f06e:	74 06                	je     c000f076 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f070:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f073:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f076:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f07a:	83 f9 3e             	cmp    ecx,0x3e
c000f07d:	7e 05                	jle    c000f084 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f07f:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f084:	89 df                	mov    edi,ebx
c000f086:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f08a:	eb 02                	jmp    c000f08e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f08c:	89 c7                	mov    edi,eax
c000f08e:	31 d2                	xor    edx,edx
c000f090:	89 f8                	mov    eax,edi
c000f092:	46                   	inc    esi
c000f093:	f7 f1                	div    ecx
c000f095:	39 cf                	cmp    edi,ecx
c000f097:	73 f3                	jae    c000f08c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f099:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f09c:	eb 02                	jmp    c000f0a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f09e:	89 c3                	mov    ebx,eax
c000f0a0:	31 d2                	xor    edx,edx
c000f0a2:	89 d8                	mov    eax,ebx
c000f0a4:	f7 f1                	div    ecx
c000f0a6:	4e                   	dec    esi
c000f0a7:	39 cb                	cmp    ebx,ecx
c000f0a9:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f0ad:	88 16                	mov    BYTE PTR [esi],dl
c000f0af:	73 ed                	jae    c000f09e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f0b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0b5:	83 c4 40             	add    esp,0x40
c000f0b8:	5b                   	pop    ebx
c000f0b9:	5e                   	pop    esi
c000f0ba:	5f                   	pop    edi
c000f0bb:	c3                   	ret    
c000f0bc:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f0bf:	83 c7 02             	add    edi,0x2
c000f0c2:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f0c6:	83 c6 02             	add    esi,0x2
c000f0c9:	83 e8 02             	sub    eax,0x2
c000f0cc:	eb 85                	jmp    c000f053 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f0ce <Dbg::logc(char)>:
c000f0ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0d2:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0d7:	ec                   	in     al,dx
c000f0d8:	a8 20                	test   al,0x20
c000f0da:	74 fb                	je     c000f0d7 <Dbg::logc(char)+0x9>
c000f0dc:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0e1:	88 c8                	mov    al,cl
c000f0e3:	ee                   	out    dx,al
c000f0e4:	c3                   	ret    

c000f0e5 <Dbg::logs(char*)>:
c000f0e5:	53                   	push   ebx
c000f0e6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f0ea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0ed:	84 c0                	test   al,al
c000f0ef:	74 0f                	je     c000f100 <Dbg::logs(char*)+0x1b>
c000f0f1:	43                   	inc    ebx
c000f0f2:	50                   	push   eax
c000f0f3:	e8 d6 ff ff ff       	call   c000f0ce <Dbg::logc(char)>
c000f0f8:	5a                   	pop    edx
c000f0f9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0fc:	84 c0                	test   al,al
c000f0fe:	75 f1                	jne    c000f0f1 <Dbg::logs(char*)+0xc>
c000f100:	5b                   	pop    ebx
c000f101:	c3                   	ret    

c000f102 <Dbg::logWriteInt(unsigned int)>:
c000f102:	83 ec 10             	sub    esp,0x10
c000f105:	6a 0a                	push   0xa
c000f107:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f10b:	50                   	push   eax
c000f10c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f110:	50                   	push   eax
c000f111:	e8 14 ff ff ff       	call   c000f02a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f116:	50                   	push   eax
c000f117:	e8 c9 ff ff ff       	call   c000f0e5 <Dbg::logs(char*)>
c000f11c:	83 c4 20             	add    esp,0x20
c000f11f:	c3                   	ret    

c000f120 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f120:	83 ec 10             	sub    esp,0x10
c000f123:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f127:	50                   	push   eax
c000f128:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f12c:	50                   	push   eax
c000f12d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f131:	52                   	push   edx
c000f132:	e8 f3 fe ff ff       	call   c000f02a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f137:	50                   	push   eax
c000f138:	e8 a8 ff ff ff       	call   c000f0e5 <Dbg::logs(char*)>
c000f13d:	83 c4 20             	add    esp,0x20
c000f140:	c3                   	ret    

c000f141 <Dbg::kprintf(char const*, ...)>:
c000f141:	55                   	push   ebp
c000f142:	57                   	push   edi
c000f143:	56                   	push   esi
c000f144:	53                   	push   ebx
c000f145:	83 ec 0c             	sub    esp,0xc
c000f148:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f14c:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f154:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f157:	84 c0                	test   al,al
c000f159:	74 4d                	je     c000f1a8 <Dbg::kprintf(char const*, ...)+0x67>
c000f15b:	31 ff                	xor    edi,edi
c000f15d:	8d 77 01             	lea    esi,[edi+0x1]
c000f160:	3c 25                	cmp    al,0x25
c000f162:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f165:	0f 85 ec 00 00 00    	jne    c000f257 <Dbg::kprintf(char const*, ...)+0x116>
c000f16b:	83 c7 02             	add    edi,0x2
c000f16e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f171:	83 e8 25             	sub    eax,0x25
c000f174:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f177:	3c 53                	cmp    al,0x53
c000f179:	0f 87 c0 00 00 00    	ja     c000f23f <Dbg::kprintf(char const*, ...)+0xfe>
c000f17f:	25 ff 00 00 00       	and    eax,0xff
c000f184:	ff 24 85 98 17 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde868]
c000f18b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f18f:	89 c8                	mov    eax,ecx
c000f191:	83 c1 04             	add    ecx,0x4
c000f194:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f198:	8b 00                	mov    eax,DWORD PTR [eax]
c000f19a:	50                   	push   eax
c000f19b:	e8 45 ff ff ff       	call   c000f0e5 <Dbg::logs(char*)>
c000f1a0:	58                   	pop    eax
c000f1a1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f1a4:	84 c0                	test   al,al
c000f1a6:	75 b5                	jne    c000f15d <Dbg::kprintf(char const*, ...)+0x1c>
c000f1a8:	83 c4 0c             	add    esp,0xc
c000f1ab:	5b                   	pop    ebx
c000f1ac:	5e                   	pop    esi
c000f1ad:	5f                   	pop    edi
c000f1ae:	5d                   	pop    ebp
c000f1af:	c3                   	ret    
c000f1b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1b4:	89 d0                	mov    eax,edx
c000f1b6:	83 c2 04             	add    edx,0x4
c000f1b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1bf:	50                   	push   eax
c000f1c0:	e8 3d ff ff ff       	call   c000f102 <Dbg::logWriteInt(unsigned int)>
c000f1c5:	58                   	pop    eax
c000f1c6:	eb d9                	jmp    c000f1a1 <Dbg::kprintf(char const*, ...)+0x60>
c000f1c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1cc:	89 d0                	mov    eax,edx
c000f1ce:	83 c2 04             	add    edx,0x4
c000f1d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1d5:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f1d8:	50                   	push   eax
c000f1d9:	e8 f0 fe ff ff       	call   c000f0ce <Dbg::logc(char)>
c000f1de:	58                   	pop    eax
c000f1df:	eb c0                	jmp    c000f1a1 <Dbg::kprintf(char const*, ...)+0x60>
c000f1e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1e5:	89 c8                	mov    eax,ecx
c000f1e7:	83 c1 04             	add    ecx,0x4
c000f1ea:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1ee:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f1f0:	55                   	push   ebp
c000f1f1:	e8 0c ff ff ff       	call   c000f102 <Dbg::logWriteInt(unsigned int)>
c000f1f6:	58                   	pop    eax
c000f1f7:	eb a8                	jmp    c000f1a1 <Dbg::kprintf(char const*, ...)+0x60>
c000f1f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1fd:	89 c8                	mov    eax,ecx
c000f1ff:	83 c1 04             	add    ecx,0x4
c000f202:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f206:	6a 10                	push   0x10
c000f208:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f20a:	51                   	push   ecx
c000f20b:	e8 10 ff ff ff       	call   c000f120 <Dbg::logWriteIntBase(unsigned int, int)>
c000f210:	5d                   	pop    ebp
c000f211:	58                   	pop    eax
c000f212:	eb 8d                	jmp    c000f1a1 <Dbg::kprintf(char const*, ...)+0x60>
c000f214:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f218:	89 d0                	mov    eax,edx
c000f21a:	83 c2 08             	add    edx,0x8
c000f21d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f221:	6a 10                	push   0x10
c000f223:	8b 00                	mov    eax,DWORD PTR [eax]
c000f225:	50                   	push   eax
c000f226:	e8 f5 fe ff ff       	call   c000f120 <Dbg::logWriteIntBase(unsigned int, int)>
c000f22b:	58                   	pop    eax
c000f22c:	5a                   	pop    edx
c000f22d:	e9 6f ff ff ff       	jmp    c000f1a1 <Dbg::kprintf(char const*, ...)+0x60>
c000f232:	6a 25                	push   0x25
c000f234:	e8 95 fe ff ff       	call   c000f0ce <Dbg::logc(char)>
c000f239:	5a                   	pop    edx
c000f23a:	e9 62 ff ff ff       	jmp    c000f1a1 <Dbg::kprintf(char const*, ...)+0x60>
c000f23f:	6a 25                	push   0x25
c000f241:	e8 88 fe ff ff       	call   c000f0ce <Dbg::logc(char)>
c000f246:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f24a:	50                   	push   eax
c000f24b:	e8 7e fe ff ff       	call   c000f0ce <Dbg::logc(char)>
c000f250:	5a                   	pop    edx
c000f251:	59                   	pop    ecx
c000f252:	e9 4a ff ff ff       	jmp    c000f1a1 <Dbg::kprintf(char const*, ...)+0x60>
c000f257:	50                   	push   eax
c000f258:	89 f7                	mov    edi,esi
c000f25a:	e8 6f fe ff ff       	call   c000f0ce <Dbg::logc(char)>
c000f25f:	89 ee                	mov    esi,ebp
c000f261:	58                   	pop    eax
c000f262:	e9 3a ff ff ff       	jmp    c000f1a1 <Dbg::kprintf(char const*, ...)+0x60>
c000f267:	90                   	nop

c000f268 <File::read(unsigned long long, void*, int*)>:
c000f268:	53                   	push   ebx
c000f269:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f26d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f271:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f278:	3c 19                	cmp    al,0x19
c000f27a:	77 35                	ja     c000f2b1 <File::read(unsigned long long, void*, int*)+0x49>
c000f27c:	8b 04 85 20 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb4e0]
c000f283:	85 c0                	test   eax,eax
c000f285:	74 2a                	je     c000f2b1 <File::read(unsigned long long, void*, int*)+0x49>
c000f287:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f28d:	85 c0                	test   eax,eax
c000f28f:	74 20                	je     c000f2b1 <File::read(unsigned long long, void*, int*)+0x49>
c000f291:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f295:	74 21                	je     c000f2b8 <File::read(unsigned long long, void*, int*)+0x50>
c000f297:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f299:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f29d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2ab:	5b                   	pop    ebx
c000f2ac:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f2af:	ff e0                	jmp    eax
c000f2b1:	b8 0b 00 00 00       	mov    eax,0xb
c000f2b6:	eb 05                	jmp    c000f2bd <File::read(unsigned long long, void*, int*)+0x55>
c000f2b8:	b8 05 00 00 00       	mov    eax,0x5
c000f2bd:	5b                   	pop    ebx
c000f2be:	c3                   	ret    
c000f2bf:	90                   	nop

c000f2c0 <File::write(unsigned long long, void*, int*)>:
c000f2c0:	53                   	push   ebx
c000f2c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2c9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2d0:	3c 19                	cmp    al,0x19
c000f2d2:	77 35                	ja     c000f309 <File::write(unsigned long long, void*, int*)+0x49>
c000f2d4:	8b 04 85 20 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb4e0]
c000f2db:	85 c0                	test   eax,eax
c000f2dd:	74 2a                	je     c000f309 <File::write(unsigned long long, void*, int*)+0x49>
c000f2df:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2e5:	85 c0                	test   eax,eax
c000f2e7:	74 20                	je     c000f309 <File::write(unsigned long long, void*, int*)+0x49>
c000f2e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2ed:	74 21                	je     c000f310 <File::write(unsigned long long, void*, int*)+0x50>
c000f2ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2f1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2f5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f303:	5b                   	pop    ebx
c000f304:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f307:	ff e0                	jmp    eax
c000f309:	b8 0b 00 00 00       	mov    eax,0xb
c000f30e:	eb 05                	jmp    c000f315 <File::write(unsigned long long, void*, int*)+0x55>
c000f310:	b8 05 00 00 00       	mov    eax,0x5
c000f315:	5b                   	pop    ebx
c000f316:	c3                   	ret    
c000f317:	90                   	nop

c000f318 <Directory::read(unsigned long long, void*, int*)>:
c000f318:	53                   	push   ebx
c000f319:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f31d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f321:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f328:	3c 19                	cmp    al,0x19
c000f32a:	77 35                	ja     c000f361 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f32c:	8b 04 85 20 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb4e0]
c000f333:	85 c0                	test   eax,eax
c000f335:	74 2a                	je     c000f361 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f337:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f33d:	85 c0                	test   eax,eax
c000f33f:	74 20                	je     c000f361 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f341:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f345:	74 21                	je     c000f368 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f347:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f349:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f34d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f353:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f357:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f35b:	5b                   	pop    ebx
c000f35c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f35f:	ff e0                	jmp    eax
c000f361:	b8 0b 00 00 00       	mov    eax,0xb
c000f366:	eb 05                	jmp    c000f36d <Directory::read(unsigned long long, void*, int*)+0x55>
c000f368:	b8 05 00 00 00       	mov    eax,0x5
c000f36d:	5b                   	pop    ebx
c000f36e:	c3                   	ret    
c000f36f:	90                   	nop

c000f370 <Directory::write(unsigned long long, void*, int*)>:
c000f370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f374:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f37b:	b8 0b 00 00 00       	mov    eax,0xb
c000f380:	80 fa 19             	cmp    dl,0x19
c000f383:	77 18                	ja     c000f39d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f385:	8b 14 95 20 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb4e0]
c000f38c:	85 d2                	test   edx,edx
c000f38e:	74 0d                	je     c000f39d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f390:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f397:	19 c0                	sbb    eax,eax
c000f399:	83 e0 0a             	and    eax,0xa
c000f39c:	40                   	inc    eax
c000f39d:	c3                   	ret    

c000f39e <File::isAtty()>:
c000f39e:	31 c0                	xor    eax,eax
c000f3a0:	c3                   	ret    
c000f3a1:	90                   	nop

c000f3a2 <Directory::isAtty()>:
c000f3a2:	31 c0                	xor    eax,eax
c000f3a4:	c3                   	ret    
c000f3a5:	90                   	nop

c000f3a6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f3a6:	b8 0a 00 00 00       	mov    eax,0xa
c000f3ab:	c3                   	ret    

c000f3ac <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f3ac:	b8 0a 00 00 00       	mov    eax,0xa
c000f3b1:	c3                   	ret    

c000f3b2 <File::~File()>:
c000f3b2:	83 ec 0c             	sub    esp,0xc
c000f3b5:	ba 54 19 02 c0       	mov    edx,0xc0021954
c000f3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3be:	89 10                	mov    DWORD PTR [eax],edx
c000f3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3c4:	83 ec 0c             	sub    esp,0xc
c000f3c7:	50                   	push   eax
c000f3c8:	e8 f3 ea ff ff       	call   c000dec0 <UnixFile::~UnixFile()>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	90                   	nop
c000f3d1:	83 c4 0c             	add    esp,0xc
c000f3d4:	c3                   	ret    
c000f3d5:	90                   	nop

c000f3d6 <File::~File()>:
c000f3d6:	83 ec 0c             	sub    esp,0xc
c000f3d9:	83 ec 0c             	sub    esp,0xc
c000f3dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3e0:	e8 cd ff ff ff       	call   c000f3b2 <File::~File()>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	83 ec 08             	sub    esp,0x8
c000f3eb:	68 14 01 00 00       	push   0x114
c000f3f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3f4:	e8 22 fc ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c000f3f9:	83 c4 10             	add    esp,0x10
c000f3fc:	83 c4 0c             	add    esp,0xc
c000f3ff:	c3                   	ret    

c000f400 <Directory::~Directory()>:
c000f400:	83 ec 0c             	sub    esp,0xc
c000f403:	ba 70 19 02 c0       	mov    edx,0xc0021970
c000f408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f40c:	89 10                	mov    DWORD PTR [eax],edx
c000f40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f412:	83 ec 0c             	sub    esp,0xc
c000f415:	50                   	push   eax
c000f416:	e8 a5 ea ff ff       	call   c000dec0 <UnixFile::~UnixFile()>
c000f41b:	83 c4 10             	add    esp,0x10
c000f41e:	90                   	nop
c000f41f:	83 c4 0c             	add    esp,0xc
c000f422:	c3                   	ret    
c000f423:	90                   	nop

c000f424 <Directory::~Directory()>:
c000f424:	83 ec 0c             	sub    esp,0xc
c000f427:	83 ec 0c             	sub    esp,0xc
c000f42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f42e:	e8 cd ff ff ff       	call   c000f400 <Directory::~Directory()>
c000f433:	83 c4 10             	add    esp,0x10
c000f436:	83 ec 08             	sub    esp,0x8
c000f439:	68 14 01 00 00       	push   0x114
c000f43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f442:	e8 d4 fb ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c000f447:	83 c4 10             	add    esp,0x10
c000f44a:	83 c4 0c             	add    esp,0xc
c000f44d:	c3                   	ret    

c000f44e <Filesystem::Filesystem()>:
c000f44e:	ba f0 18 02 c0       	mov    edx,0xc00218f0
c000f453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f457:	89 10                	mov    DWORD PTR [eax],edx
c000f459:	8b 15 88 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024688
c000f45f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f463:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f46a:	a3 88 46 02 c0       	mov    ds:0xc0024688,eax
c000f46f:	90                   	nop
c000f470:	c3                   	ret    
c000f471:	90                   	nop

c000f472 <Filesystem::~Filesystem()>:
c000f472:	ba f0 18 02 c0       	mov    edx,0xc00218f0
c000f477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f47b:	89 10                	mov    DWORD PTR [eax],edx
c000f47d:	90                   	nop
c000f47e:	c3                   	ret    
c000f47f:	90                   	nop

c000f480 <Filesystem::~Filesystem()>:
c000f480:	83 ec 0c             	sub    esp,0xc
c000f483:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f487:	e8 e6 ff ff ff       	call   c000f472 <Filesystem::~Filesystem()>
c000f48c:	83 c4 04             	add    esp,0x4
c000f48f:	83 ec 08             	sub    esp,0x8
c000f492:	6a 08                	push   0x8
c000f494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f498:	e8 7e fb ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c000f49d:	83 c4 10             	add    esp,0x10
c000f4a0:	83 c4 0c             	add    esp,0xc
c000f4a3:	c3                   	ret    

c000f4a4 <initVFS()>:
c000f4a4:	83 ec 18             	sub    esp,0x18
c000f4a7:	6a 08                	push   0x8
c000f4a9:	e8 5e fb ff ff       	call   c000f00c <operator new(unsigned long)>
c000f4ae:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4b1:	e8 5a b3 00 00       	call   c001a810 <FAT::FAT()>
c000f4b6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f4bd:	e8 4a fb ff ff       	call   c000f00c <operator new(unsigned long)>
c000f4c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4c5:	e8 e6 c5 00 00       	call   c001bab0 <ISO9660::ISO9660()>
c000f4ca:	83 c4 1c             	add    esp,0x1c
c000f4cd:	c3                   	ret    

c000f4ce <standardiseFiles(char*, char const*, char const*)>:
c000f4ce:	55                   	push   ebp
c000f4cf:	57                   	push   edi
c000f4d0:	56                   	push   esi
c000f4d1:	53                   	push   ebx
c000f4d2:	81 ec 10 04 00 00    	sub    esp,0x410
c000f4d8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4df:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4e6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f4ed:	68 00 04 00 00       	push   0x400
c000f4f2:	6a 00                	push   0x0
c000f4f4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f4f8:	56                   	push   esi
c000f4f9:	e8 bc 11 ff ff       	call   c00006ba <memset>
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f505:	75 0b                	jne    c000f512 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f507:	50                   	push   eax
c000f508:	50                   	push   eax
c000f509:	57                   	push   edi
c000f50a:	56                   	push   esi
c000f50b:	e8 49 12 ff ff       	call   c0000759 <strcpy>
c000f510:	eb 41                	jmp    c000f553 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f512:	8a 07                	mov    al,BYTE PTR [edi]
c000f514:	3c 5c                	cmp    al,0x5c
c000f516:	74 04                	je     c000f51c <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f518:	3c 2f                	cmp    al,0x2f
c000f51a:	75 18                	jne    c000f534 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f51c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f51f:	3c 60                	cmp    al,0x60
c000f521:	7e 03                	jle    c000f526 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f523:	83 e8 20             	sub    eax,0x20
c000f526:	88 04 24             	mov    BYTE PTR [esp],al
c000f529:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f530:	50                   	push   eax
c000f531:	50                   	push   eax
c000f532:	eb 18                	jmp    c000f54c <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f534:	50                   	push   eax
c000f535:	50                   	push   eax
c000f536:	55                   	push   ebp
c000f537:	56                   	push   esi
c000f538:	e8 1c 12 ff ff       	call   c0000759 <strcpy>
c000f53d:	5a                   	pop    edx
c000f53e:	59                   	pop    ecx
c000f53f:	68 f4 2b 02 c0       	push   0xc0022bf4
c000f544:	56                   	push   esi
c000f545:	e8 c6 12 ff ff       	call   c0000810 <strcat>
c000f54a:	5d                   	pop    ebp
c000f54b:	58                   	pop    eax
c000f54c:	57                   	push   edi
c000f54d:	56                   	push   esi
c000f54e:	e8 bd 12 ff ff       	call   c0000810 <strcat>
c000f553:	83 c4 10             	add    esp,0x10
c000f556:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f559:	3c 60                	cmp    al,0x60
c000f55b:	7e 03                	jle    c000f560 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f55d:	83 e8 20             	sub    eax,0x20
c000f560:	88 04 24             	mov    BYTE PTR [esp],al
c000f563:	88 03                	mov    BYTE PTR [ebx],al
c000f565:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f56c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f572:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f576:	bf 03 00 00 00       	mov    edi,0x3
c000f57b:	b8 03 00 00 00       	mov    eax,0x3
c000f580:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f583:	84 d2                	test   dl,dl
c000f585:	0f 84 91 00 00 00    	je     c000f61c <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f58b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f58e:	80 fa 2f             	cmp    dl,0x2f
c000f591:	74 05                	je     c000f598 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f593:	80 fa 5c             	cmp    dl,0x5c
c000f596:	75 12                	jne    c000f5aa <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f598:	89 c5                	mov    ebp,eax
c000f59a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f59f:	74 09                	je     c000f5aa <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5a1:	40                   	inc    eax
c000f5a2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f5a6:	89 cf                	mov    edi,ecx
c000f5a8:	eb d6                	jmp    c000f580 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f5aa:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f5af:	75 5b                	jne    c000f60c <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5b1:	80 fa 2e             	cmp    dl,0x2e
c000f5b4:	75 56                	jne    c000f60c <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5b6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f5ba:	74 19                	je     c000f5d5 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f5bc:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5c1:	74 53                	je     c000f616 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5c3:	89 f9                	mov    ecx,edi
c000f5c5:	41                   	inc    ecx
c000f5c6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5c9:	80 fa 5c             	cmp    dl,0x5c
c000f5cc:	74 f7                	je     c000f5c5 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5ce:	80 fa 2f             	cmp    dl,0x2f
c000f5d1:	74 f2                	je     c000f5c5 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5d3:	eb d1                	jmp    c000f5a6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5d5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5da:	74 3a                	je     c000f616 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5dc:	83 f8 03             	cmp    eax,0x3
c000f5df:	74 c5                	je     c000f5a6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5e1:	41                   	inc    ecx
c000f5e2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5e5:	80 fa 2f             	cmp    dl,0x2f
c000f5e8:	74 f7                	je     c000f5e1 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5ea:	80 fa 5c             	cmp    dl,0x5c
c000f5ed:	74 f2                	je     c000f5e1 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5ef:	48                   	dec    eax
c000f5f0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5f4:	75 06                	jne    c000f5fc <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5f6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5fa:	eb f3                	jmp    c000f5ef <standardiseFiles(char*, char const*, char const*)+0x121>
c000f5fc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f600:	74 07                	je     c000f609 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f602:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f606:	48                   	dec    eax
c000f607:	eb f3                	jmp    c000f5fc <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f609:	40                   	inc    eax
c000f60a:	eb 9a                	jmp    c000f5a6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f60c:	80 fa 2f             	cmp    dl,0x2f
c000f60f:	74 95                	je     c000f5a6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f611:	80 fa 5c             	cmp    dl,0x5c
c000f614:	74 90                	je     c000f5a6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f616:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f619:	40                   	inc    eax
c000f61a:	eb 8a                	jmp    c000f5a6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f61c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f620:	83 ec 0c             	sub    esp,0xc
c000f623:	53                   	push   ebx
c000f624:	e8 ae 10 ff ff       	call   c00006d7 <strlen>
c000f629:	83 c4 10             	add    esp,0x10
c000f62c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f631:	75 26                	jne    c000f659 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f633:	83 ec 0c             	sub    esp,0xc
c000f636:	53                   	push   ebx
c000f637:	e8 9b 10 ff ff       	call   c00006d7 <strlen>
c000f63c:	83 c4 10             	add    esp,0x10
c000f63f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f644:	74 26                	je     c000f66c <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f646:	83 ec 0c             	sub    esp,0xc
c000f649:	53                   	push   ebx
c000f64a:	e8 88 10 ff ff       	call   c00006d7 <strlen>
c000f64f:	83 c4 10             	add    esp,0x10
c000f652:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f657:	eb c7                	jmp    c000f620 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f659:	83 ec 0c             	sub    esp,0xc
c000f65c:	53                   	push   ebx
c000f65d:	e8 75 10 ff ff       	call   c00006d7 <strlen>
c000f662:	83 c4 10             	add    esp,0x10
c000f665:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f66a:	74 c7                	je     c000f633 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f66c:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f672:	5b                   	pop    ebx
c000f673:	5e                   	pop    esi
c000f674:	5f                   	pop    edi
c000f675:	5d                   	pop    ebp
c000f676:	c3                   	ret    
c000f677:	90                   	nop

c000f678 <File::File(char const*, Process*)>:
c000f678:	83 ec 0c             	sub    esp,0xc
c000f67b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f67f:	83 ec 08             	sub    esp,0x8
c000f682:	6a 00                	push   0x0
c000f684:	50                   	push   eax
c000f685:	e8 94 e6 ff ff       	call   c000dd1e <UnixFile::UnixFile(int)>
c000f68a:	83 c4 10             	add    esp,0x10
c000f68d:	ba 54 19 02 c0       	mov    edx,0xc0021954
c000f692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f696:	89 10                	mov    DWORD PTR [eax],edx
c000f698:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f69c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6a6:	83 c0 0d             	add    eax,0xd
c000f6a9:	83 ec 04             	sub    esp,0x4
c000f6ac:	52                   	push   edx
c000f6ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6b1:	50                   	push   eax
c000f6b2:	e8 17 fe ff ff       	call   c000f4ce <standardiseFiles(char*, char const*, char const*)>
c000f6b7:	83 c4 10             	add    esp,0x10
c000f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6be:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f6c1:	8d 50 bf             	lea    edx,[eax-0x41]
c000f6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6c8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f6ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f6d6:	90                   	nop
c000f6d7:	83 c4 0c             	add    esp,0xc
c000f6da:	c3                   	ret    
c000f6db:	90                   	nop

c000f6dc <File::open(FileOpenMode)>:
c000f6dc:	53                   	push   ebx
c000f6dd:	b8 0b 00 00 00       	mov    eax,0xb
c000f6e2:	83 ec 08             	sub    esp,0x8
c000f6e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6e9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f6f0:	80 fa 19             	cmp    dl,0x19
c000f6f3:	77 40                	ja     c000f735 <File::open(FileOpenMode)+0x59>
c000f6f5:	8b 14 95 20 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb4e0]
c000f6fc:	85 d2                	test   edx,edx
c000f6fe:	74 35                	je     c000f735 <File::open(FileOpenMode)+0x59>
c000f700:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f706:	85 d2                	test   edx,edx
c000f708:	74 2b                	je     c000f735 <File::open(FileOpenMode)+0x59>
c000f70a:	b8 06 00 00 00       	mov    eax,0x6
c000f70f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f713:	75 20                	jne    c000f735 <File::open(FileOpenMode)+0x59>
c000f715:	8b 02                	mov    eax,DWORD PTR [edx]
c000f717:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f721:	51                   	push   ecx
c000f722:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f725:	51                   	push   ecx
c000f726:	52                   	push   edx
c000f727:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f72a:	83 c4 10             	add    esp,0x10
c000f72d:	85 c0                	test   eax,eax
c000f72f:	75 04                	jne    c000f735 <File::open(FileOpenMode)+0x59>
c000f731:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f735:	83 c4 08             	add    esp,0x8
c000f738:	5b                   	pop    ebx
c000f739:	c3                   	ret    

c000f73a <File::close()>:
c000f73a:	53                   	push   ebx
c000f73b:	b8 0b 00 00 00       	mov    eax,0xb
c000f740:	83 ec 08             	sub    esp,0x8
c000f743:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f747:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f74e:	80 fa 19             	cmp    dl,0x19
c000f751:	77 41                	ja     c000f794 <File::close()+0x5a>
c000f753:	8b 1c 95 20 4b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb4e0]
c000f75a:	85 db                	test   ebx,ebx
c000f75c:	74 36                	je     c000f794 <File::close()+0x5a>
c000f75e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f765:	74 2d                	je     c000f794 <File::close()+0x5a>
c000f767:	b8 05 00 00 00       	mov    eax,0x5
c000f76c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f770:	74 22                	je     c000f794 <File::close()+0x5a>
c000f772:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f776:	8b 04 95 20 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb4e0]
c000f77d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f783:	53                   	push   ebx
c000f784:	53                   	push   ebx
c000f785:	8b 10                	mov    edx,DWORD PTR [eax]
c000f787:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f78d:	50                   	push   eax
c000f78e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f791:	83 c4 10             	add    esp,0x10
c000f794:	83 c4 08             	add    esp,0x8
c000f797:	5b                   	pop    ebx
c000f798:	c3                   	ret    
c000f799:	90                   	nop

c000f79a <File::seek(unsigned long long)>:
c000f79a:	56                   	push   esi
c000f79b:	b8 0b 00 00 00       	mov    eax,0xb
c000f7a0:	53                   	push   ebx
c000f7a1:	51                   	push   ecx
c000f7a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f7aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7ae:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f7b5:	80 fa 19             	cmp    dl,0x19
c000f7b8:	77 31                	ja     c000f7eb <File::seek(unsigned long long)+0x51>
c000f7ba:	8b 14 95 20 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb4e0]
c000f7c1:	85 d2                	test   edx,edx
c000f7c3:	74 26                	je     c000f7eb <File::seek(unsigned long long)+0x51>
c000f7c5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7cb:	85 d2                	test   edx,edx
c000f7cd:	74 1c                	je     c000f7eb <File::seek(unsigned long long)+0x51>
c000f7cf:	b8 05 00 00 00       	mov    eax,0x5
c000f7d4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f7d8:	74 11                	je     c000f7eb <File::seek(unsigned long long)+0x51>
c000f7da:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7dc:	53                   	push   ebx
c000f7dd:	51                   	push   ecx
c000f7de:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7e4:	52                   	push   edx
c000f7e5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f7e8:	83 c4 10             	add    esp,0x10
c000f7eb:	5a                   	pop    edx
c000f7ec:	5b                   	pop    ebx
c000f7ed:	5e                   	pop    esi
c000f7ee:	c3                   	ret    
c000f7ef:	90                   	nop

c000f7f0 <File::tell(unsigned long long*)>:
c000f7f0:	83 ec 0c             	sub    esp,0xc
c000f7f3:	b8 0b 00 00 00       	mov    eax,0xb
c000f7f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f7fc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f803:	80 fa 19             	cmp    dl,0x19
c000f806:	77 34                	ja     c000f83c <File::tell(unsigned long long*)+0x4c>
c000f808:	8b 14 95 20 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb4e0]
c000f80f:	85 d2                	test   edx,edx
c000f811:	74 29                	je     c000f83c <File::tell(unsigned long long*)+0x4c>
c000f813:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f819:	85 d2                	test   edx,edx
c000f81b:	74 1f                	je     c000f83c <File::tell(unsigned long long*)+0x4c>
c000f81d:	b8 05 00 00 00       	mov    eax,0x5
c000f822:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f826:	74 14                	je     c000f83c <File::tell(unsigned long long*)+0x4c>
c000f828:	50                   	push   eax
c000f829:	8b 02                	mov    eax,DWORD PTR [edx]
c000f82b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f82f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f835:	52                   	push   edx
c000f836:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f839:	83 c4 10             	add    esp,0x10
c000f83c:	83 c4 0c             	add    esp,0xc
c000f83f:	c3                   	ret    

c000f840 <File::rewind()>:
c000f840:	83 ec 10             	sub    esp,0x10
c000f843:	6a 00                	push   0x0
c000f845:	6a 00                	push   0x0
c000f847:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84b:	e8 4a ff ff ff       	call   c000f79a <File::seek(unsigned long long)>
c000f850:	83 c4 1c             	add    esp,0x1c
c000f853:	c3                   	ret    

c000f854 <File::unlink()>:
c000f854:	83 ec 0c             	sub    esp,0xc
c000f857:	b8 0b 00 00 00       	mov    eax,0xb
c000f85c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f860:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f867:	80 f9 19             	cmp    cl,0x19
c000f86a:	77 2f                	ja     c000f89b <File::unlink()+0x47>
c000f86c:	8b 0c 8d 20 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4e0]
c000f873:	85 c9                	test   ecx,ecx
c000f875:	74 24                	je     c000f89b <File::unlink()+0x47>
c000f877:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f87d:	85 c9                	test   ecx,ecx
c000f87f:	74 1a                	je     c000f89b <File::unlink()+0x47>
c000f881:	b8 06 00 00 00       	mov    eax,0x6
c000f886:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f88a:	75 0f                	jne    c000f89b <File::unlink()+0x47>
c000f88c:	50                   	push   eax
c000f88d:	83 c2 0d             	add    edx,0xd
c000f890:	50                   	push   eax
c000f891:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f893:	52                   	push   edx
c000f894:	51                   	push   ecx
c000f895:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f898:	83 c4 10             	add    esp,0x10
c000f89b:	83 c4 0c             	add    esp,0xc
c000f89e:	c3                   	ret    
c000f89f:	90                   	nop

c000f8a0 <File::rename(char const*)>:
c000f8a0:	83 ec 0c             	sub    esp,0xc
c000f8a3:	b8 0b 00 00 00       	mov    eax,0xb
c000f8a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8ac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8b3:	80 f9 19             	cmp    cl,0x19
c000f8b6:	77 32                	ja     c000f8ea <File::rename(char const*)+0x4a>
c000f8b8:	8b 0c 8d 20 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4e0]
c000f8bf:	85 c9                	test   ecx,ecx
c000f8c1:	74 27                	je     c000f8ea <File::rename(char const*)+0x4a>
c000f8c3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8c9:	85 c9                	test   ecx,ecx
c000f8cb:	74 1d                	je     c000f8ea <File::rename(char const*)+0x4a>
c000f8cd:	b8 06 00 00 00       	mov    eax,0x6
c000f8d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8d6:	75 12                	jne    c000f8ea <File::rename(char const*)+0x4a>
c000f8d8:	50                   	push   eax
c000f8d9:	83 c2 0d             	add    edx,0xd
c000f8dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8e2:	52                   	push   edx
c000f8e3:	51                   	push   ecx
c000f8e4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8e7:	83 c4 10             	add    esp,0x10
c000f8ea:	83 c4 0c             	add    esp,0xc
c000f8ed:	c3                   	ret    

c000f8ee <File::chfatattr(unsigned char, unsigned char)>:
c000f8ee:	57                   	push   edi
c000f8ef:	b8 0b 00 00 00       	mov    eax,0xb
c000f8f4:	56                   	push   esi
c000f8f5:	53                   	push   ebx
c000f8f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8fe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f902:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f909:	80 f9 19             	cmp    cl,0x19
c000f90c:	77 37                	ja     c000f945 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f90e:	8b 0c 8d 20 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4e0]
c000f915:	85 c9                	test   ecx,ecx
c000f917:	74 2c                	je     c000f945 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f919:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f91f:	85 c9                	test   ecx,ecx
c000f921:	74 22                	je     c000f945 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f923:	b8 06 00 00 00       	mov    eax,0x6
c000f928:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f92c:	75 17                	jne    c000f945 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f92e:	89 f0                	mov    eax,esi
c000f930:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f932:	0f b6 f0             	movzx  esi,al
c000f935:	56                   	push   esi
c000f936:	83 c2 0d             	add    edx,0xd
c000f939:	0f b6 db             	movzx  ebx,bl
c000f93c:	53                   	push   ebx
c000f93d:	52                   	push   edx
c000f93e:	51                   	push   ecx
c000f93f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f942:	83 c4 10             	add    esp,0x10
c000f945:	5b                   	pop    ebx
c000f946:	5e                   	pop    esi
c000f947:	5f                   	pop    edi
c000f948:	c3                   	ret    
c000f949:	90                   	nop

c000f94a <File::exists()>:
c000f94a:	83 ec 0c             	sub    esp,0xc
c000f94d:	31 c0                	xor    eax,eax
c000f94f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f953:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f95a:	80 f9 19             	cmp    cl,0x19
c000f95d:	77 24                	ja     c000f983 <File::exists()+0x39>
c000f95f:	8b 0c 8d 20 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4e0]
c000f966:	85 c9                	test   ecx,ecx
c000f968:	74 19                	je     c000f983 <File::exists()+0x39>
c000f96a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f970:	85 c9                	test   ecx,ecx
c000f972:	74 0f                	je     c000f983 <File::exists()+0x39>
c000f974:	50                   	push   eax
c000f975:	83 c2 0d             	add    edx,0xd
c000f978:	50                   	push   eax
c000f979:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f97b:	52                   	push   edx
c000f97c:	51                   	push   ecx
c000f97d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f980:	83 c4 10             	add    esp,0x10
c000f983:	83 c4 0c             	add    esp,0xc
c000f986:	c3                   	ret    
c000f987:	90                   	nop

c000f988 <File::stat(unsigned long long*, bool*)>:
c000f988:	56                   	push   esi
c000f989:	53                   	push   ebx
c000f98a:	50                   	push   eax
c000f98b:	b8 0b 00 00 00       	mov    eax,0xb
c000f990:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f994:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f998:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f99c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9a3:	80 f9 19             	cmp    cl,0x19
c000f9a6:	77 3d                	ja     c000f9e5 <File::stat(unsigned long long*, bool*)+0x5d>
c000f9a8:	8b 0c 8d 20 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4e0]
c000f9af:	85 c9                	test   ecx,ecx
c000f9b1:	74 32                	je     c000f9e5 <File::stat(unsigned long long*, bool*)+0x5d>
c000f9b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9b9:	85 c9                	test   ecx,ecx
c000f9bb:	74 28                	je     c000f9e5 <File::stat(unsigned long long*, bool*)+0x5d>
c000f9bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9c3:	74 13                	je     c000f9d8 <File::stat(unsigned long long*, bool*)+0x50>
c000f9c5:	83 ec 04             	sub    esp,0x4
c000f9c8:	56                   	push   esi
c000f9c9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f9cf:	51                   	push   ecx
c000f9d0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f9d3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f9d6:	eb 0a                	jmp    c000f9e2 <File::stat(unsigned long long*, bool*)+0x5a>
c000f9d8:	53                   	push   ebx
c000f9d9:	83 c2 0d             	add    edx,0xd
c000f9dc:	56                   	push   esi
c000f9dd:	52                   	push   edx
c000f9de:	51                   	push   ecx
c000f9df:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9e2:	83 c4 10             	add    esp,0x10
c000f9e5:	5a                   	pop    edx
c000f9e6:	5b                   	pop    ebx
c000f9e7:	5e                   	pop    esi
c000f9e8:	c3                   	ret    

c000f9e9 <getcwd(Process*, char*, int)>:
c000f9e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9ed:	31 c0                	xor    eax,eax
c000f9ef:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f9f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f9f6:	7d 15                	jge    c000fa0d <getcwd(Process*, char*, int)+0x24>
c000f9f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9fc:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fa03:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fa06:	84 c9                	test   cl,cl
c000fa08:	74 06                	je     c000fa10 <getcwd(Process*, char*, int)+0x27>
c000fa0a:	40                   	inc    eax
c000fa0b:	eb e2                	jmp    c000f9ef <getcwd(Process*, char*, int)+0x6>
c000fa0d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fa10:	31 c0                	xor    eax,eax
c000fa12:	c3                   	ret    

c000fa13 <setcwd(Process*, char*)>:
c000fa13:	55                   	push   ebp
c000fa14:	57                   	push   edi
c000fa15:	56                   	push   esi
c000fa16:	53                   	push   ebx
c000fa17:	81 ec 20 02 00 00    	sub    esp,0x220
c000fa1d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fa24:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa2a:	57                   	push   edi
c000fa2b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa32:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa36:	56                   	push   esi
c000fa37:	e8 92 fa ff ff       	call   c000f4ce <standardiseFiles(char*, char const*, char const*)>
c000fa3c:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa3f:	e8 93 0c ff ff       	call   c00006d7 <strlen>
c000fa44:	83 c4 10             	add    esp,0x10
c000fa47:	83 f8 02             	cmp    eax,0x2
c000fa4a:	77 17                	ja     c000fa63 <setcwd(Process*, char*)+0x50>
c000fa4c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa51:	83 e8 41             	sub    eax,0x41
c000fa54:	83 f8 19             	cmp    eax,0x19
c000fa57:	76 24                	jbe    c000fa7d <setcwd(Process*, char*)+0x6a>
c000fa59:	b8 03 00 00 00       	mov    eax,0x3
c000fa5e:	e9 cb 00 00 00       	jmp    c000fb2e <setcwd(Process*, char*)+0x11b>
c000fa63:	83 ec 0c             	sub    esp,0xc
c000fa66:	56                   	push   esi
c000fa67:	e8 6b 0c ff ff       	call   c00006d7 <strlen>
c000fa6c:	83 c4 10             	add    esp,0x10
c000fa6f:	83 f8 03             	cmp    eax,0x3
c000fa72:	75 33                	jne    c000faa7 <setcwd(Process*, char*)+0x94>
c000fa74:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa79:	75 2c                	jne    c000faa7 <setcwd(Process*, char*)+0x94>
c000fa7b:	eb cf                	jmp    c000fa4c <setcwd(Process*, char*)+0x39>
c000fa7d:	8b 14 85 20 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb4e0]
c000fa84:	b8 05 00 00 00       	mov    eax,0x5
c000fa89:	85 d2                	test   edx,edx
c000fa8b:	0f 84 9d 00 00 00    	je     c000fb2e <setcwd(Process*, char*)+0x11b>
c000fa91:	b8 06 00 00 00       	mov    eax,0x6
c000fa96:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fa9d:	0f 84 8b 00 00 00    	je     c000fb2e <setcwd(Process*, char*)+0x11b>
c000faa3:	51                   	push   ecx
c000faa4:	51                   	push   ecx
c000faa5:	eb 7b                	jmp    c000fb22 <setcwd(Process*, char*)+0x10f>
c000faa7:	83 ec 0c             	sub    esp,0xc
c000faaa:	68 14 01 00 00       	push   0x114
c000faaf:	e8 58 f5 ff ff       	call   c000f00c <operator new(unsigned long)>
c000fab4:	83 c4 0c             	add    esp,0xc
c000fab7:	89 c3                	mov    ebx,eax
c000fab9:	55                   	push   ebp
c000faba:	56                   	push   esi
c000fabb:	50                   	push   eax
c000fabc:	e8 b7 fb ff ff       	call   c000f678 <File::File(char const*, Process*)>
c000fac1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fac6:	83 c4 0c             	add    esp,0xc
c000fac9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000facd:	50                   	push   eax
c000face:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fad2:	50                   	push   eax
c000fad3:	53                   	push   ebx
c000fad4:	e8 af fe ff ff       	call   c000f988 <File::stat(unsigned long long*, bool*)>
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fade:	83 f8 02             	cmp    eax,0x2
c000fae1:	75 09                	jne    c000faec <setcwd(Process*, char*)+0xd9>
c000fae3:	83 ec 0c             	sub    esp,0xc
c000fae6:	53                   	push   ebx
c000fae7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000faea:	eb 0d                	jmp    c000faf9 <setcwd(Process*, char*)+0xe6>
c000faec:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000faef:	85 c0                	test   eax,eax
c000faf1:	74 10                	je     c000fb03 <setcwd(Process*, char*)+0xf0>
c000faf3:	83 ec 0c             	sub    esp,0xc
c000faf6:	53                   	push   ebx
c000faf7:	ff d2                	call   edx
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	b8 01 00 00 00       	mov    eax,0x1
c000fb01:	eb 2b                	jmp    c000fb2e <setcwd(Process*, char*)+0x11b>
c000fb03:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fb08:	75 10                	jne    c000fb1a <setcwd(Process*, char*)+0x107>
c000fb0a:	83 ec 0c             	sub    esp,0xc
c000fb0d:	53                   	push   ebx
c000fb0e:	ff d2                	call   edx
c000fb10:	83 c4 10             	add    esp,0x10
c000fb13:	b8 02 00 00 00       	mov    eax,0x2
c000fb18:	eb 14                	jmp    c000fb2e <setcwd(Process*, char*)+0x11b>
c000fb1a:	83 ec 0c             	sub    esp,0xc
c000fb1d:	53                   	push   ebx
c000fb1e:	ff d2                	call   edx
c000fb20:	58                   	pop    eax
c000fb21:	5a                   	pop    edx
c000fb22:	56                   	push   esi
c000fb23:	57                   	push   edi
c000fb24:	e8 30 0c ff ff       	call   c0000759 <strcpy>
c000fb29:	83 c4 10             	add    esp,0x10
c000fb2c:	31 c0                	xor    eax,eax
c000fb2e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb34:	5b                   	pop    ebx
c000fb35:	5e                   	pop    esi
c000fb36:	5f                   	pop    edi
c000fb37:	5d                   	pop    ebp
c000fb38:	c3                   	ret    
c000fb39:	90                   	nop

c000fb3a <Directory::Directory(char const*, Process*)>:
c000fb3a:	83 ec 0c             	sub    esp,0xc
c000fb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb41:	83 ec 08             	sub    esp,0x8
c000fb44:	6a 00                	push   0x0
c000fb46:	50                   	push   eax
c000fb47:	e8 d2 e1 ff ff       	call   c000dd1e <UnixFile::UnixFile(int)>
c000fb4c:	83 c4 10             	add    esp,0x10
c000fb4f:	ba 70 19 02 c0       	mov    edx,0xc0021970
c000fb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb58:	89 10                	mov    DWORD PTR [eax],edx
c000fb5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb5e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb68:	83 c0 0d             	add    eax,0xd
c000fb6b:	83 ec 04             	sub    esp,0x4
c000fb6e:	52                   	push   edx
c000fb6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb73:	50                   	push   eax
c000fb74:	e8 55 f9 ff ff       	call   c000f4ce <standardiseFiles(char*, char const*, char const*)>
c000fb79:	83 c4 10             	add    esp,0x10
c000fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb80:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb83:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb8a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb94:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fb98:	90                   	nop
c000fb99:	83 c4 0c             	add    esp,0xc
c000fb9c:	c3                   	ret    
c000fb9d:	90                   	nop

c000fb9e <Directory::open()>:
c000fb9e:	53                   	push   ebx
c000fb9f:	b8 0b 00 00 00       	mov    eax,0xb
c000fba4:	83 ec 08             	sub    esp,0x8
c000fba7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbab:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fbb2:	80 fa 19             	cmp    dl,0x19
c000fbb5:	77 3d                	ja     c000fbf4 <Directory::open()+0x56>
c000fbb7:	8b 14 95 20 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb4e0]
c000fbbe:	85 d2                	test   edx,edx
c000fbc0:	74 32                	je     c000fbf4 <Directory::open()+0x56>
c000fbc2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fbc8:	85 d2                	test   edx,edx
c000fbca:	74 28                	je     c000fbf4 <Directory::open()+0x56>
c000fbcc:	b8 06 00 00 00       	mov    eax,0x6
c000fbd1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fbd5:	75 1d                	jne    c000fbf4 <Directory::open()+0x56>
c000fbd7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fbdd:	50                   	push   eax
c000fbde:	8b 02                	mov    eax,DWORD PTR [edx]
c000fbe0:	51                   	push   ecx
c000fbe1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fbe4:	51                   	push   ecx
c000fbe5:	52                   	push   edx
c000fbe6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fbe9:	83 c4 10             	add    esp,0x10
c000fbec:	85 c0                	test   eax,eax
c000fbee:	75 04                	jne    c000fbf4 <Directory::open()+0x56>
c000fbf0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fbf4:	83 c4 08             	add    esp,0x8
c000fbf7:	5b                   	pop    ebx
c000fbf8:	c3                   	ret    
c000fbf9:	90                   	nop

c000fbfa <Directory::close()>:
c000fbfa:	53                   	push   ebx
c000fbfb:	b8 0b 00 00 00       	mov    eax,0xb
c000fc00:	83 ec 08             	sub    esp,0x8
c000fc03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc07:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fc0e:	80 fa 19             	cmp    dl,0x19
c000fc11:	77 41                	ja     c000fc54 <Directory::close()+0x5a>
c000fc13:	8b 1c 95 20 4b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb4e0]
c000fc1a:	85 db                	test   ebx,ebx
c000fc1c:	74 36                	je     c000fc54 <Directory::close()+0x5a>
c000fc1e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fc25:	74 2d                	je     c000fc54 <Directory::close()+0x5a>
c000fc27:	b8 05 00 00 00       	mov    eax,0x5
c000fc2c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc30:	74 22                	je     c000fc54 <Directory::close()+0x5a>
c000fc32:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc36:	8b 04 95 20 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb4e0]
c000fc3d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc43:	53                   	push   ebx
c000fc44:	53                   	push   ebx
c000fc45:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc47:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc4d:	50                   	push   eax
c000fc4e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc51:	83 c4 10             	add    esp,0x10
c000fc54:	83 c4 08             	add    esp,0x8
c000fc57:	5b                   	pop    ebx
c000fc58:	c3                   	ret    
c000fc59:	90                   	nop

c000fc5a <Directory::unlink()>:
c000fc5a:	83 ec 0c             	sub    esp,0xc
c000fc5d:	b8 0b 00 00 00       	mov    eax,0xb
c000fc62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc6d:	80 f9 19             	cmp    cl,0x19
c000fc70:	77 2f                	ja     c000fca1 <Directory::unlink()+0x47>
c000fc72:	8b 0c 8d 20 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4e0]
c000fc79:	85 c9                	test   ecx,ecx
c000fc7b:	74 24                	je     c000fca1 <Directory::unlink()+0x47>
c000fc7d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc83:	85 c9                	test   ecx,ecx
c000fc85:	74 1a                	je     c000fca1 <Directory::unlink()+0x47>
c000fc87:	b8 06 00 00 00       	mov    eax,0x6
c000fc8c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc90:	75 0f                	jne    c000fca1 <Directory::unlink()+0x47>
c000fc92:	50                   	push   eax
c000fc93:	83 c2 0d             	add    edx,0xd
c000fc96:	50                   	push   eax
c000fc97:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc99:	52                   	push   edx
c000fc9a:	51                   	push   ecx
c000fc9b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fc9e:	83 c4 10             	add    esp,0x10
c000fca1:	83 c4 0c             	add    esp,0xc
c000fca4:	c3                   	ret    
c000fca5:	90                   	nop

c000fca6 <Directory::rename(char const*)>:
c000fca6:	83 ec 0c             	sub    esp,0xc
c000fca9:	b8 0b 00 00 00       	mov    eax,0xb
c000fcae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcb2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcb9:	80 f9 19             	cmp    cl,0x19
c000fcbc:	77 32                	ja     c000fcf0 <Directory::rename(char const*)+0x4a>
c000fcbe:	8b 0c 8d 20 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4e0]
c000fcc5:	85 c9                	test   ecx,ecx
c000fcc7:	74 27                	je     c000fcf0 <Directory::rename(char const*)+0x4a>
c000fcc9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fccf:	85 c9                	test   ecx,ecx
c000fcd1:	74 1d                	je     c000fcf0 <Directory::rename(char const*)+0x4a>
c000fcd3:	b8 06 00 00 00       	mov    eax,0x6
c000fcd8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fcdc:	75 12                	jne    c000fcf0 <Directory::rename(char const*)+0x4a>
c000fcde:	50                   	push   eax
c000fcdf:	83 c2 0d             	add    edx,0xd
c000fce2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fce4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fce8:	52                   	push   edx
c000fce9:	51                   	push   ecx
c000fcea:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fced:	83 c4 10             	add    esp,0x10
c000fcf0:	83 c4 0c             	add    esp,0xc
c000fcf3:	c3                   	ret    

c000fcf4 <Directory::exists()>:
c000fcf4:	83 ec 0c             	sub    esp,0xc
c000fcf7:	31 c0                	xor    eax,eax
c000fcf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcfd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd04:	80 f9 19             	cmp    cl,0x19
c000fd07:	77 24                	ja     c000fd2d <Directory::exists()+0x39>
c000fd09:	8b 0c 8d 20 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4e0]
c000fd10:	85 c9                	test   ecx,ecx
c000fd12:	74 19                	je     c000fd2d <Directory::exists()+0x39>
c000fd14:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd1a:	85 c9                	test   ecx,ecx
c000fd1c:	74 0f                	je     c000fd2d <Directory::exists()+0x39>
c000fd1e:	50                   	push   eax
c000fd1f:	83 c2 0d             	add    edx,0xd
c000fd22:	50                   	push   eax
c000fd23:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd25:	52                   	push   edx
c000fd26:	51                   	push   ecx
c000fd27:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd2a:	83 c4 10             	add    esp,0x10
c000fd2d:	83 c4 0c             	add    esp,0xc
c000fd30:	c3                   	ret    
c000fd31:	90                   	nop

c000fd32 <Directory::read(dirent*)>:
c000fd32:	83 ec 1c             	sub    esp,0x1c
c000fd35:	b8 0b 00 00 00       	mov    eax,0xb
c000fd3a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd3e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd45:	80 fa 19             	cmp    dl,0x19
c000fd48:	77 30                	ja     c000fd7a <Directory::read(dirent*)+0x48>
c000fd4a:	8b 14 95 20 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb4e0]
c000fd51:	85 d2                	test   edx,edx
c000fd53:	74 25                	je     c000fd7a <Directory::read(dirent*)+0x48>
c000fd55:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd5c:	74 1c                	je     c000fd7a <Directory::read(dirent*)+0x48>
c000fd5e:	83 ec 0c             	sub    esp,0xc
c000fd61:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd63:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd67:	52                   	push   edx
c000fd68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd6c:	6a 00                	push   0x0
c000fd6e:	68 10 01 00 00       	push   0x110
c000fd73:	51                   	push   ecx
c000fd74:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd77:	83 c4 20             	add    esp,0x20
c000fd7a:	83 c4 1c             	add    esp,0x1c
c000fd7d:	c3                   	ret    

c000fd7e <Directory::create()>:
c000fd7e:	83 ec 0c             	sub    esp,0xc
c000fd81:	b8 0b 00 00 00       	mov    eax,0xb
c000fd86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd8a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd91:	80 f9 19             	cmp    cl,0x19
c000fd94:	77 2f                	ja     c000fdc5 <Directory::create()+0x47>
c000fd96:	8b 0c 8d 20 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4e0]
c000fd9d:	85 c9                	test   ecx,ecx
c000fd9f:	74 24                	je     c000fdc5 <Directory::create()+0x47>
c000fda1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fda7:	85 c9                	test   ecx,ecx
c000fda9:	74 1a                	je     c000fdc5 <Directory::create()+0x47>
c000fdab:	b8 06 00 00 00       	mov    eax,0x6
c000fdb0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdb4:	75 0f                	jne    c000fdc5 <Directory::create()+0x47>
c000fdb6:	50                   	push   eax
c000fdb7:	83 c2 0d             	add    edx,0xd
c000fdba:	50                   	push   eax
c000fdbb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdbd:	52                   	push   edx
c000fdbe:	51                   	push   ecx
c000fdbf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fdc2:	83 c4 10             	add    esp,0x10
c000fdc5:	83 c4 0c             	add    esp,0xc
c000fdc8:	c3                   	ret    
c000fdc9:	90                   	nop

c000fdca <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fdca:	b8 0a 00 00 00       	mov    eax,0xa
c000fdcf:	c3                   	ret    

c000fdd0 <Bus::Bus(char const*)>:
c000fdd0:	83 ec 0c             	sub    esp,0xc
c000fdd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdd7:	83 ec 08             	sub    esp,0x8
c000fdda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdde:	50                   	push   eax
c000fddf:	e8 62 09 00 00       	call   c0010746 <Device::Device(char const*)>
c000fde4:	83 c4 10             	add    esp,0x10
c000fde7:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000fdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf0:	89 10                	mov    DWORD PTR [eax],edx
c000fdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fe00:	90                   	nop
c000fe01:	83 c4 0c             	add    esp,0xc
c000fe04:	c3                   	ret    
c000fe05:	90                   	nop

c000fe06 <Bus::~Bus()>:
c000fe06:	83 ec 0c             	sub    esp,0xc
c000fe09:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000fe0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe12:	89 10                	mov    DWORD PTR [eax],edx
c000fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe18:	83 ec 0c             	sub    esp,0xc
c000fe1b:	50                   	push   eax
c000fe1c:	e8 db 05 00 00       	call   c00103fc <Device::~Device()>
c000fe21:	83 c4 10             	add    esp,0x10
c000fe24:	90                   	nop
c000fe25:	83 c4 0c             	add    esp,0xc
c000fe28:	c3                   	ret    
c000fe29:	90                   	nop

c000fe2a <Bus::~Bus()>:
c000fe2a:	83 ec 0c             	sub    esp,0xc
c000fe2d:	83 ec 0c             	sub    esp,0xc
c000fe30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe34:	e8 cd ff ff ff       	call   c000fe06 <Bus::~Bus()>
c000fe39:	83 c4 10             	add    esp,0x10
c000fe3c:	83 ec 08             	sub    esp,0x8
c000fe3f:	68 58 01 00 00       	push   0x158
c000fe44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe48:	e8 ce f1 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c000fe4d:	83 c4 10             	add    esp,0x10
c000fe50:	83 c4 0c             	add    esp,0xc
c000fe53:	c3                   	ret    

c000fe54 <Buzzer::Buzzer(char const*)>:
c000fe54:	83 ec 0c             	sub    esp,0xc
c000fe57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe5b:	83 ec 08             	sub    esp,0x8
c000fe5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe62:	50                   	push   eax
c000fe63:	e8 de 08 00 00       	call   c0010746 <Device::Device(char const*)>
c000fe68:	83 c4 10             	add    esp,0x10
c000fe6b:	ba b8 19 02 c0       	mov    edx,0xc00219b8
c000fe70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe74:	89 10                	mov    DWORD PTR [eax],edx
c000fe76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe88:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fe92:	90                   	nop
c000fe93:	83 c4 0c             	add    esp,0xc
c000fe96:	c3                   	ret    
c000fe97:	90                   	nop

c000fe98 <Buzzer::~Buzzer()>:
c000fe98:	83 ec 0c             	sub    esp,0xc
c000fe9b:	ba b8 19 02 c0       	mov    edx,0xc00219b8
c000fea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea4:	89 10                	mov    DWORD PTR [eax],edx
c000fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feaa:	83 ec 0c             	sub    esp,0xc
c000fead:	50                   	push   eax
c000feae:	e8 49 05 00 00       	call   c00103fc <Device::~Device()>
c000feb3:	83 c4 10             	add    esp,0x10
c000feb6:	90                   	nop
c000feb7:	83 c4 0c             	add    esp,0xc
c000feba:	c3                   	ret    
c000febb:	90                   	nop

c000febc <Buzzer::~Buzzer()>:
c000febc:	83 ec 0c             	sub    esp,0xc
c000febf:	83 ec 0c             	sub    esp,0xc
c000fec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fec6:	e8 cd ff ff ff       	call   c000fe98 <Buzzer::~Buzzer()>
c000fecb:	83 c4 10             	add    esp,0x10
c000fece:	83 ec 08             	sub    esp,0x8
c000fed1:	68 5c 01 00 00       	push   0x15c
c000fed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feda:	e8 3c f1 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c000fedf:	83 c4 10             	add    esp,0x10
c000fee2:	83 c4 0c             	add    esp,0xc
c000fee5:	c3                   	ret    

c000fee6 <Buzzer::stop()>:
c000fee6:	83 ec 14             	sub    esp,0x14
c000fee9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000feed:	8b 10                	mov    edx,DWORD PTR [eax]
c000feef:	6a 00                	push   0x0
c000fef1:	50                   	push   eax
c000fef2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fef5:	83 c4 1c             	add    esp,0x1c
c000fef8:	c3                   	ret    

c000fef9 <beepThread(void*)>:
c000fef9:	53                   	push   ebx
c000fefa:	83 ec 08             	sub    esp,0x8
c000fefd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff01:	e8 f5 89 00 00       	call   c00188fb <unlockScheduler()>
c000ff06:	52                   	push   edx
c000ff07:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ff0c:	52                   	push   edx
c000ff0d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ff13:	52                   	push   edx
c000ff14:	50                   	push   eax
c000ff15:	e8 3d 8f 00 00       	call   c0018e57 <nanoSleep(unsigned long long)>
c000ff1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff1d:	e8 c4 ff ff ff       	call   c000fee6 <Buzzer::stop()>
c000ff22:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff2a:	83 c4 18             	add    esp,0x18
c000ff2d:	5b                   	pop    ebx
c000ff2e:	e9 68 8e 00 00       	jmp    c0018d9b <blockTask(TaskState)>
c000ff33:	90                   	nop

c000ff34 <Buzzer::beep(int, int, bool)>:
c000ff34:	57                   	push   edi
c000ff35:	56                   	push   esi
c000ff36:	53                   	push   ebx
c000ff37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff43:	52                   	push   edx
c000ff44:	52                   	push   edx
c000ff45:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff4b:	56                   	push   esi
c000ff4c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff4f:	89 f8                	mov    eax,edi
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	84 c0                	test   al,al
c000ff56:	74 1f                	je     c000ff77 <Buzzer::beep(int, int, bool)+0x43>
c000ff58:	50                   	push   eax
c000ff59:	50                   	push   eax
c000ff5a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff60:	99                   	cdq    
c000ff61:	52                   	push   edx
c000ff62:	50                   	push   eax
c000ff63:	e8 ef 8e 00 00       	call   c0018e57 <nanoSleep(unsigned long long)>
c000ff68:	83 c4 10             	add    esp,0x10
c000ff6b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff6f:	5b                   	pop    ebx
c000ff70:	5e                   	pop    esi
c000ff71:	5f                   	pop    edi
c000ff72:	e9 6f ff ff ff       	jmp    c000fee6 <Buzzer::stop()>
c000ff77:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff7d:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c000ff82:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ff8a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ff8e:	c7 44 24 14 f9 fe 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fef9
c000ff96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff9a:	5b                   	pop    ebx
c000ff9b:	5e                   	pop    esi
c000ff9c:	5f                   	pop    edi
c000ff9d:	e9 8c 8a 00 00       	jmp    c0018a2e <Process::createThread(void (*)(void*), void*, int)>

c000ffa2 <loadClockSettings()>:
c000ffa2:	c7 05 94 46 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024694,0xa
c000ffac:	c6 05 91 46 02 c0 00 	mov    BYTE PTR ds:0xc0024691,0x0
c000ffb3:	c6 05 90 46 02 c0 01 	mov    BYTE PTR ds:0xc0024690,0x1
c000ffba:	c3                   	ret    
c000ffbb:	90                   	nop

c000ffbc <Clock::Clock(char const*)>:
c000ffbc:	83 ec 0c             	sub    esp,0xc
c000ffbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc3:	83 ec 08             	sub    esp,0x8
c000ffc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffca:	50                   	push   eax
c000ffcb:	e8 76 07 00 00       	call   c0010746 <Device::Device(char const*)>
c000ffd0:	83 c4 10             	add    esp,0x10
c000ffd3:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000ffd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffdc:	89 10                	mov    DWORD PTR [eax],edx
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000ffec:	90                   	nop
c000ffed:	83 c4 0c             	add    esp,0xc
c000fff0:	c3                   	ret    
c000fff1:	90                   	nop

c000fff2 <Clock::~Clock()>:
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000fffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffe:	89 10                	mov    DWORD PTR [eax],edx
c0010000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010004:	83 ec 0c             	sub    esp,0xc
c0010007:	50                   	push   eax
c0010008:	e8 ef 03 00 00       	call   c00103fc <Device::~Device()>
c001000d:	83 c4 10             	add    esp,0x10
c0010010:	90                   	nop
c0010011:	83 c4 0c             	add    esp,0xc
c0010014:	c3                   	ret    
c0010015:	90                   	nop

c0010016 <Clock::~Clock()>:
c0010016:	83 ec 0c             	sub    esp,0xc
c0010019:	83 ec 0c             	sub    esp,0xc
c001001c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010020:	e8 cd ff ff ff       	call   c000fff2 <Clock::~Clock()>
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	83 ec 08             	sub    esp,0x8
c001002b:	68 58 01 00 00       	push   0x158
c0010030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010034:	e8 e2 ef ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0010039:	83 c4 10             	add    esp,0x10
c001003c:	83 c4 0c             	add    esp,0xc
c001003f:	c3                   	ret    

c0010040 <Clock::timeInSecondsLocal()>:
c0010040:	53                   	push   ebx
c0010041:	83 ec 14             	sub    esp,0x14
c0010044:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010048:	8b 10                	mov    edx,DWORD PTR [eax]
c001004a:	50                   	push   eax
c001004b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001004e:	0f b6 0d 90 46 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024690
c0010055:	03 0d 94 46 02 c0    	add    ecx,DWORD PTR ds:0xc0024694
c001005b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010061:	89 cb                	mov    ebx,ecx
c0010063:	c1 fb 1f             	sar    ebx,0x1f
c0010066:	01 c8                	add    eax,ecx
c0010068:	11 da                	adc    edx,ebx
c001006a:	83 c4 10             	add    esp,0x10
c001006d:	31 c9                	xor    ecx,ecx
c001006f:	80 3d 91 46 02 c0 00 	cmp    BYTE PTR ds:0xc0024691,0x0
c0010076:	74 05                	je     c001007d <Clock::timeInSecondsLocal()+0x3d>
c0010078:	b9 08 07 00 00       	mov    ecx,0x708
c001007d:	31 db                	xor    ebx,ebx
c001007f:	01 c8                	add    eax,ecx
c0010081:	11 da                	adc    edx,ebx
c0010083:	83 c4 08             	add    esp,0x8
c0010086:	5b                   	pop    ebx
c0010087:	c3                   	ret    

c0010088 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0010088:	57                   	push   edi
c0010089:	56                   	push   esi
c001008a:	53                   	push   ebx
c001008b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001008f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010093:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010097:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010099:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001009c:	0f b6 05 90 46 02 c0 	movzx  eax,BYTE PTR ds:0xc0024690
c00100a3:	03 05 94 46 02 c0    	add    eax,DWORD PTR ds:0xc0024694
c00100a9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00100af:	99                   	cdq    
c00100b0:	29 c6                	sub    esi,eax
c00100b2:	19 d7                	sbb    edi,edx
c00100b4:	89 f0                	mov    eax,esi
c00100b6:	89 fa                	mov    edx,edi
c00100b8:	31 f6                	xor    esi,esi
c00100ba:	80 3d 91 46 02 c0 00 	cmp    BYTE PTR ds:0xc0024691,0x0
c00100c1:	74 05                	je     c00100c8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00100c3:	be 08 07 00 00       	mov    esi,0x708
c00100c8:	31 ff                	xor    edi,edi
c00100ca:	29 f0                	sub    eax,esi
c00100cc:	19 fa                	sbb    edx,edi
c00100ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100d2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100d6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00100da:	89 d8                	mov    eax,ebx
c00100dc:	5b                   	pop    ebx
c00100dd:	5e                   	pop    esi
c00100de:	5f                   	pop    edi
c00100df:	ff e0                	jmp    eax

c00100e1 <datetimeToSeconds(datetime_t)>:
c00100e1:	55                   	push   ebp
c00100e2:	57                   	push   edi
c00100e3:	56                   	push   esi
c00100e4:	53                   	push   ebx
c00100e5:	83 ec 14             	sub    esp,0x14
c00100e8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00100ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00100f0:	0f b6 f5             	movzx  esi,ch
c00100f3:	6b f6 3c             	imul   esi,esi,0x3c
c00100f6:	89 cf                	mov    edi,ecx
c00100f8:	89 d3                	mov    ebx,edx
c00100fa:	0f b6 c9             	movzx  ecx,cl
c00100fd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010103:	0f b6 c6             	movzx  eax,dh
c0010106:	c1 ef 10             	shr    edi,0x10
c0010109:	48                   	dec    eax
c001010a:	c1 eb 10             	shr    ebx,0x10
c001010d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010111:	89 f8                	mov    eax,edi
c0010113:	0f b6 f8             	movzx  edi,al
c0010116:	01 fe                	add    esi,edi
c0010118:	01 f1                	add    ecx,esi
c001011a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001011e:	c1 f9 1f             	sar    ecx,0x1f
c0010121:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010125:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001012a:	0f b6 d2             	movzx  edx,dl
c001012d:	66 81 eb 6c 07       	sub    bx,0x76c
c0010132:	8b 0c 8d 20 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde5e0]
c0010139:	0f b7 f3             	movzx  esi,bx
c001013c:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010140:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010145:	76 29                	jbe    c0010170 <datetimeToSeconds(datetime_t)+0x8f>
c0010147:	f6 c3 03             	test   bl,0x3
c001014a:	75 24                	jne    c0010170 <datetimeToSeconds(datetime_t)+0x8f>
c001014c:	31 d2                	xor    edx,edx
c001014e:	bf 64 00 00 00       	mov    edi,0x64
c0010153:	89 d8                	mov    eax,ebx
c0010155:	66 f7 f7             	div    di
c0010158:	66 85 d2             	test   dx,dx
c001015b:	75 12                	jne    c001016f <datetimeToSeconds(datetime_t)+0x8e>
c001015d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010163:	bf 90 01 00 00       	mov    edi,0x190
c0010168:	99                   	cdq    
c0010169:	f7 ff                	idiv   edi
c001016b:	85 d2                	test   edx,edx
c001016d:	75 01                	jne    c0010170 <datetimeToSeconds(datetime_t)+0x8f>
c001016f:	41                   	inc    ecx
c0010170:	66 83 fb 46          	cmp    bx,0x46
c0010174:	76 45                	jbe    c00101bb <datetimeToSeconds(datetime_t)+0xda>
c0010176:	bb 46 00 00 00       	mov    ebx,0x46
c001017b:	bf 64 00 00 00       	mov    edi,0x64
c0010180:	bd 90 01 00 00       	mov    ebp,0x190
c0010185:	b8 6d 01 00 00       	mov    eax,0x16d
c001018a:	f6 c3 03             	test   bl,0x3
c001018d:	75 23                	jne    c00101b2 <datetimeToSeconds(datetime_t)+0xd1>
c001018f:	89 d8                	mov    eax,ebx
c0010191:	99                   	cdq    
c0010192:	f7 ff                	idiv   edi
c0010194:	85 d2                	test   edx,edx
c0010196:	b8 6e 01 00 00       	mov    eax,0x16e
c001019b:	75 15                	jne    c00101b2 <datetimeToSeconds(datetime_t)+0xd1>
c001019d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00101a3:	99                   	cdq    
c00101a4:	f7 fd                	idiv   ebp
c00101a6:	31 c0                	xor    eax,eax
c00101a8:	85 d2                	test   edx,edx
c00101aa:	0f 94 c0             	sete   al
c00101ad:	05 6d 01 00 00       	add    eax,0x16d
c00101b2:	43                   	inc    ebx
c00101b3:	01 c1                	add    ecx,eax
c00101b5:	39 f3                	cmp    ebx,esi
c00101b7:	7c cc                	jl     c0010185 <datetimeToSeconds(datetime_t)+0xa4>
c00101b9:	eb 3b                	jmp    c00101f6 <datetimeToSeconds(datetime_t)+0x115>
c00101bb:	74 39                	je     c00101f6 <datetimeToSeconds(datetime_t)+0x115>
c00101bd:	b8 45 00 00 00       	mov    eax,0x45
c00101c2:	89 c2                	mov    edx,eax
c00101c4:	83 e2 03             	and    edx,0x3
c00101c7:	39 f0                	cmp    eax,esi
c00101c9:	7e 13                	jle    c00101de <datetimeToSeconds(datetime_t)+0xfd>
c00101cb:	85 d2                	test   edx,edx
c00101cd:	0f 94 c2             	sete   dl
c00101d0:	0f b6 d2             	movzx  edx,dl
c00101d3:	81 c2 6d 01 00 00    	add    edx,0x16d
c00101d9:	48                   	dec    eax
c00101da:	29 d1                	sub    ecx,edx
c00101dc:	eb e4                	jmp    c00101c2 <datetimeToSeconds(datetime_t)+0xe1>
c00101de:	b8 6d 01 00 00       	mov    eax,0x16d
c00101e3:	85 d2                	test   edx,edx
c00101e5:	75 0d                	jne    c00101f4 <datetimeToSeconds(datetime_t)+0x113>
c00101e7:	31 c0                	xor    eax,eax
c00101e9:	66 85 db             	test   bx,bx
c00101ec:	0f 95 c0             	setne  al
c00101ef:	05 6d 01 00 00       	add    eax,0x16d
c00101f4:	29 c1                	sub    ecx,eax
c00101f6:	b8 80 51 01 00       	mov    eax,0x15180
c00101fb:	f7 e9                	imul   ecx
c00101fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010201:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010205:	83 c4 14             	add    esp,0x14
c0010208:	5b                   	pop    ebx
c0010209:	5e                   	pop    esi
c001020a:	5f                   	pop    edi
c001020b:	5d                   	pop    ebp
c001020c:	c3                   	ret    
c001020d:	90                   	nop

c001020e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001020e:	57                   	push   edi
c001020f:	56                   	push   esi
c0010210:	53                   	push   ebx
c0010211:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010215:	8b 06                	mov    eax,DWORD PTR [esi]
c0010217:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001021a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001021e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010222:	e8 ba fe ff ff       	call   c00100e1 <datetimeToSeconds(datetime_t)>
c0010227:	59                   	pop    ecx
c0010228:	0f b6 0d 90 46 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024690
c001022f:	03 0d 94 46 02 c0    	add    ecx,DWORD PTR ds:0xc0024694
c0010235:	5b                   	pop    ebx
c0010236:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001023c:	89 cb                	mov    ebx,ecx
c001023e:	c1 fb 1f             	sar    ebx,0x1f
c0010241:	29 c8                	sub    eax,ecx
c0010243:	19 da                	sbb    edx,ebx
c0010245:	31 c9                	xor    ecx,ecx
c0010247:	80 3d 91 46 02 c0 00 	cmp    BYTE PTR ds:0xc0024691,0x0
c001024e:	74 05                	je     c0010255 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010250:	b9 08 07 00 00       	mov    ecx,0x708
c0010255:	31 db                	xor    ebx,ebx
c0010257:	29 c8                	sub    eax,ecx
c0010259:	19 da                	sbb    edx,ebx
c001025b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001025f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010263:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010267:	5b                   	pop    ebx
c0010268:	89 f8                	mov    eax,edi
c001026a:	5e                   	pop    esi
c001026b:	5f                   	pop    edi
c001026c:	ff e0                	jmp    eax

c001026e <secondsToDatetime(unsigned long long)>:
c001026e:	55                   	push   ebp
c001026f:	57                   	push   edi
c0010270:	56                   	push   esi
c0010271:	53                   	push   ebx
c0010272:	83 ec 1c             	sub    esp,0x1c
c0010275:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010279:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001027d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010281:	6a 00                	push   0x0
c0010283:	68 80 51 01 00       	push   0x15180
c0010288:	55                   	push   ebp
c0010289:	57                   	push   edi
c001028a:	e8 fd f0 00 00       	call   c001f38c <__udivdi3>
c001028f:	83 c4 10             	add    esp,0x10
c0010292:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010296:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001029c:	6a 00                	push   0x0
c001029e:	68 80 51 01 00       	push   0x15180
c00102a3:	55                   	push   ebp
c00102a4:	57                   	push   edi
c00102a5:	e8 e2 f1 00 00       	call   c001f48c <__umoddi3>
c00102aa:	bf 10 0e 00 00       	mov    edi,0xe10
c00102af:	83 c4 10             	add    esp,0x10
c00102b2:	99                   	cdq    
c00102b3:	f7 ff                	idiv   edi
c00102b5:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00102b8:	89 d0                	mov    eax,edx
c00102ba:	99                   	cdq    
c00102bb:	bf 3c 00 00 00       	mov    edi,0x3c
c00102c0:	f7 ff                	idiv   edi
c00102c2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00102c5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00102c8:	85 db                	test   ebx,ebx
c00102ca:	79 11                	jns    c00102dd <secondsToDatetime(unsigned long long)+0x6f>
c00102cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102d0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00102d6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102db:	eb 07                	jmp    c00102e4 <secondsToDatetime(unsigned long long)+0x76>
c00102dd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102e2:	89 d8                	mov    eax,ebx
c00102e4:	99                   	cdq    
c00102e5:	f7 f9                	idiv   ecx
c00102e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102eb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00102f0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00102f8:	01 c3                	add    ebx,eax
c00102fa:	31 d2                	xor    edx,edx
c00102fc:	89 d8                	mov    eax,ebx
c00102fe:	bf b4 05 00 00       	mov    edi,0x5b4
c0010303:	f7 f1                	div    ecx
c0010305:	31 d2                	xor    edx,edx
c0010307:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001030c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001030f:	89 d8                	mov    eax,ebx
c0010311:	f7 f7                	div    edi
c0010313:	29 c1                	sub    ecx,eax
c0010315:	31 d2                	xor    edx,edx
c0010317:	89 d8                	mov    eax,ebx
c0010319:	f7 f5                	div    ebp
c001031b:	29 c1                	sub    ecx,eax
c001031d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0010322:	89 c8                	mov    eax,ecx
c0010324:	31 d2                	xor    edx,edx
c0010326:	f7 f5                	div    ebp
c0010328:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001032c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010331:	89 c8                	mov    eax,ecx
c0010333:	31 d2                	xor    edx,edx
c0010335:	f7 f5                	div    ebp
c0010337:	01 c3                	add    ebx,eax
c0010339:	31 d2                	xor    edx,edx
c001033b:	89 c8                	mov    eax,ecx
c001033d:	f7 f7                	div    edi
c001033f:	29 c3                	sub    ebx,eax
c0010341:	bf 99 00 00 00       	mov    edi,0x99
c0010346:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001034e:	29 c3                	sub    ebx,eax
c0010350:	31 d2                	xor    edx,edx
c0010352:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010355:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010358:	83 c1 02             	add    ecx,0x2
c001035b:	bb 05 00 00 00       	mov    ebx,0x5
c0010360:	89 c8                	mov    eax,ecx
c0010362:	f7 f7                	div    edi
c0010364:	89 c7                	mov    edi,eax
c0010366:	31 d2                	xor    edx,edx
c0010368:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001036e:	83 c0 02             	add    eax,0x2
c0010371:	f7 f3                	div    ebx
c0010373:	89 eb                	mov    ebx,ebp
c0010375:	29 c3                	sub    ebx,eax
c0010377:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001037d:	19 c0                	sbb    eax,eax
c001037f:	31 d2                	xor    edx,edx
c0010381:	83 e0 0c             	and    eax,0xc
c0010384:	88 1e                	mov    BYTE PTR [esi],bl
c0010386:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001038a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010392:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010396:	83 f9 01             	cmp    ecx,0x1
c0010399:	0f 96 c2             	setbe  dl
c001039c:	01 d0                	add    eax,edx
c001039e:	41                   	inc    ecx
c001039f:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00103a3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00103a6:	83 c4 1c             	add    esp,0x1c
c00103a9:	89 f0                	mov    eax,esi
c00103ab:	5b                   	pop    ebx
c00103ac:	5e                   	pop    esi
c00103ad:	5f                   	pop    edi
c00103ae:	5d                   	pop    ebp
c00103af:	c2 04 00             	ret    0x4

c00103b2 <Clock::timeInDatetimeLocal()>:
c00103b2:	53                   	push   ebx
c00103b3:	83 ec 14             	sub    esp,0x14
c00103b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00103be:	e8 7d fc ff ff       	call   c0010040 <Clock::timeInSecondsLocal()>
c00103c3:	83 c4 0c             	add    esp,0xc
c00103c6:	52                   	push   edx
c00103c7:	50                   	push   eax
c00103c8:	53                   	push   ebx
c00103c9:	e8 a0 fe ff ff       	call   c001026e <secondsToDatetime(unsigned long long)>
c00103ce:	83 c4 14             	add    esp,0x14
c00103d1:	89 d8                	mov    eax,ebx
c00103d3:	5b                   	pop    ebx
c00103d4:	c2 04 00             	ret    0x4
c00103d7:	90                   	nop

c00103d8 <Device::hibernate()>:
c00103d8:	c3                   	ret    
c00103d9:	90                   	nop

c00103da <Device::wake()>:
c00103da:	c3                   	ret    
c00103db:	90                   	nop

c00103dc <Device::detect()>:
c00103dc:	c3                   	ret    
c00103dd:	90                   	nop

c00103de <Device::disableLegacy()>:
c00103de:	c3                   	ret    
c00103df:	90                   	nop

c00103e0 <Device::powerSaving(PowerSavingLevel)>:
c00103e0:	c3                   	ret    
c00103e1:	90                   	nop

c00103e2 <DriverlessDevice::close(int, int, void*)>:
c00103e2:	31 c0                	xor    eax,eax
c00103e4:	c3                   	ret    
c00103e5:	90                   	nop

c00103e6 <DriverlessDevice::detect()>:
c00103e6:	c3                   	ret    
c00103e7:	90                   	nop

c00103e8 <DriverlessDevice::open(int, int, void*)>:
c00103e8:	83 ec 18             	sub    esp,0x18
c00103eb:	68 50 1a 02 c0       	push   0xc0021a50
c00103f0:	e8 17 55 00 00       	call   c001590c <Krnl::panic(char const*)>
c00103f5:	83 c8 ff             	or     eax,0xffffffff
c00103f8:	83 c4 1c             	add    esp,0x1c
c00103fb:	c3                   	ret    

c00103fc <Device::~Device()>:
c00103fc:	ba 78 1a 02 c0       	mov    edx,0xc0021a78
c0010401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010405:	89 10                	mov    DWORD PTR [eax],edx
c0010407:	90                   	nop
c0010408:	c3                   	ret    
c0010409:	90                   	nop

c001040a <Device::~Device()>:
c001040a:	83 ec 0c             	sub    esp,0xc
c001040d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010411:	e8 e6 ff ff ff       	call   c00103fc <Device::~Device()>
c0010416:	83 c4 04             	add    esp,0x4
c0010419:	83 ec 08             	sub    esp,0x8
c001041c:	68 58 01 00 00       	push   0x158
c0010421:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010425:	e8 f1 eb ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001042a:	83 c4 10             	add    esp,0x10
c001042d:	83 c4 0c             	add    esp,0xc
c0010430:	c3                   	ret    
c0010431:	90                   	nop

c0010432 <Device::findAndLoadDriver()>:
c0010432:	c3                   	ret    
c0010433:	90                   	nop

c0010434 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010434:	57                   	push   edi
c0010435:	b9 09 00 00 00       	mov    ecx,0x9
c001043a:	56                   	push   esi
c001043b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001043f:	81 c7 18 01 00 00    	add    edi,0x118
c0010445:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010449:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010450:	fc                   	cld    
c0010451:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010453:	5e                   	pop    esi
c0010454:	5f                   	pop    edi
c0010455:	c3                   	ret    

c0010456 <Device::preOpenACPI(void*, char*, char*)>:
c0010456:	56                   	push   esi
c0010457:	53                   	push   ebx
c0010458:	83 ec 08             	sub    esp,0x8
c001045b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001045f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010463:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010467:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001046d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010477:	6a 1e                	push   0x1e
c0010479:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001047f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010483:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010489:	50                   	push   eax
c001048a:	e8 f5 01 ff ff       	call   c0000684 <memcpy>
c001048f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010493:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010497:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001049f:	83 c4 14             	add    esp,0x14
c00104a2:	5b                   	pop    ebx
c00104a3:	5e                   	pop    esi
c00104a4:	e9 db 01 ff ff       	jmp    c0000684 <memcpy>
c00104a9:	90                   	nop

c00104aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00104aa:	55                   	push   ebp
c00104ab:	57                   	push   edi
c00104ac:	56                   	push   esi
c00104ad:	53                   	push   ebx
c00104ae:	83 ec 0c             	sub    esp,0xc
c00104b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104b5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00104b9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00104bd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104c1:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00104c6:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104cd:	75 0b                	jne    c00104da <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00104cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00104d1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104d5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00104d8:	eb 24                	jmp    c00104fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00104da:	e8 c1 42 00 00       	call   c00147a0 <thisCPU()>
c00104df:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00104e7:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00104eb:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104ef:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00104f3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00104fb:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00104fe:	83 c4 0c             	add    esp,0xc
c0010501:	5b                   	pop    ebx
c0010502:	5e                   	pop    esi
c0010503:	5f                   	pop    edi
c0010504:	5d                   	pop    ebp
c0010505:	ff e0                	jmp    eax
c0010507:	90                   	nop

c0010508 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010508:	57                   	push   edi
c0010509:	56                   	push   esi
c001050a:	53                   	push   ebx
c001050b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010513:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010517:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001051c:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010523:	75 0b                	jne    c0010530 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0010525:	8b 00                	mov    eax,DWORD PTR [eax]
c0010527:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001052b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001052e:	eb 20                	jmp    c0010550 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010530:	e8 6b 42 00 00       	call   c00147a0 <thisCPU()>
c0010535:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001053b:	8b 10                	mov    edx,DWORD PTR [eax]
c001053d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010541:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010545:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010549:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001054d:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010550:	5b                   	pop    ebx
c0010551:	5e                   	pop    esi
c0010552:	5f                   	pop    edi
c0010553:	ff e0                	jmp    eax
c0010555:	90                   	nop

c0010556 <Device::addChild(Device*)>:
c0010556:	53                   	push   ebx
c0010557:	83 ec 08             	sub    esp,0x8
c001055a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001055e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010562:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010568:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001056e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010570:	85 d2                	test   edx,edx
c0010572:	74 04                	je     c0010578 <Device::addChild(Device*)+0x22>
c0010574:	89 d3                	mov    ebx,edx
c0010576:	eb f6                	jmp    c001056e <Device::addChild(Device*)+0x18>
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001057e:	6a 08                	push   0x8
c0010580:	e8 87 ea ff ff       	call   c000f00c <operator new(unsigned long)>
c0010585:	89 03                	mov    DWORD PTR [ebx],eax
c0010587:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001058d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010594:	83 c4 18             	add    esp,0x18
c0010597:	5b                   	pop    ebx
c0010598:	c3                   	ret    
c0010599:	90                   	nop

c001059a <Device::removeAllChildren()>:
c001059a:	56                   	push   esi
c001059b:	53                   	push   ebx
c001059c:	52                   	push   edx
c001059d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105a1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00105a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105aa:	74 17                	je     c00105c3 <Device::removeAllChildren()+0x29>
c00105ac:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00105af:	85 c0                	test   eax,eax
c00105b1:	74 0c                	je     c00105bf <Device::removeAllChildren()+0x25>
c00105b3:	83 ec 0c             	sub    esp,0xc
c00105b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00105b8:	50                   	push   eax
c00105b9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00105bc:	83 c4 10             	add    esp,0x10
c00105bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105c1:	eb e4                	jmp    c00105a7 <Device::removeAllChildren()+0xd>
c00105c3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105cf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105dc:	58                   	pop    eax
c00105dd:	5b                   	pop    ebx
c00105de:	5e                   	pop    esi
c00105df:	c3                   	ret    

c00105e0 <Device::hibernateAll()>:
c00105e0:	53                   	push   ebx
c00105e1:	83 ec 14             	sub    esp,0x14
c00105e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105ea:	53                   	push   ebx
c00105eb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00105ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105f4:	83 c4 10             	add    esp,0x10
c00105f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105fa:	74 0f                	je     c001060b <Device::hibernateAll()+0x2b>
c00105fc:	83 ec 0c             	sub    esp,0xc
c00105ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010602:	e8 d9 ff ff ff       	call   c00105e0 <Device::hibernateAll()>
c0010607:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010609:	eb e9                	jmp    c00105f4 <Device::hibernateAll()+0x14>
c001060b:	83 c4 08             	add    esp,0x8
c001060e:	5b                   	pop    ebx
c001060f:	c3                   	ret    

c0010610 <Device::wakeAll()>:
c0010610:	53                   	push   ebx
c0010611:	83 ec 14             	sub    esp,0x14
c0010614:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010618:	8b 03                	mov    eax,DWORD PTR [ebx]
c001061a:	53                   	push   ebx
c001061b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001061e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010624:	83 c4 10             	add    esp,0x10
c0010627:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001062a:	74 0f                	je     c001063b <Device::wakeAll()+0x2b>
c001062c:	83 ec 0c             	sub    esp,0xc
c001062f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010632:	e8 d9 ff ff ff       	call   c0010610 <Device::wakeAll()>
c0010637:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010639:	eb e9                	jmp    c0010624 <Device::wakeAll()+0x14>
c001063b:	83 c4 08             	add    esp,0x8
c001063e:	5b                   	pop    ebx
c001063f:	c3                   	ret    

c0010640 <Device::detectAll()>:
c0010640:	53                   	push   ebx
c0010641:	83 ec 14             	sub    esp,0x14
c0010644:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010648:	8b 03                	mov    eax,DWORD PTR [ebx]
c001064a:	53                   	push   ebx
c001064b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001064e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010654:	83 c4 10             	add    esp,0x10
c0010657:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001065a:	74 0f                	je     c001066b <Device::detectAll()+0x2b>
c001065c:	83 ec 0c             	sub    esp,0xc
c001065f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010662:	e8 d9 ff ff ff       	call   c0010640 <Device::detectAll()>
c0010667:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010669:	eb e9                	jmp    c0010654 <Device::detectAll()+0x14>
c001066b:	83 c4 08             	add    esp,0x8
c001066e:	5b                   	pop    ebx
c001066f:	c3                   	ret    

c0010670 <Device::disableLegacyAll()>:
c0010670:	53                   	push   ebx
c0010671:	83 ec 14             	sub    esp,0x14
c0010674:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010678:	8b 03                	mov    eax,DWORD PTR [ebx]
c001067a:	53                   	push   ebx
c001067b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001067e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010684:	83 c4 10             	add    esp,0x10
c0010687:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001068a:	74 0f                	je     c001069b <Device::disableLegacyAll()+0x2b>
c001068c:	83 ec 0c             	sub    esp,0xc
c001068f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010692:	e8 d9 ff ff ff       	call   c0010670 <Device::disableLegacyAll()>
c0010697:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010699:	eb e9                	jmp    c0010684 <Device::disableLegacyAll()+0x14>
c001069b:	83 c4 08             	add    esp,0x8
c001069e:	5b                   	pop    ebx
c001069f:	c3                   	ret    

c00106a0 <Device::loadDriversForAll()>:
c00106a0:	53                   	push   ebx
c00106a1:	83 ec 08             	sub    esp,0x8
c00106a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a8:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106ae:	8b 18                	mov    ebx,DWORD PTR [eax]
c00106b0:	85 db                	test   ebx,ebx
c00106b2:	74 12                	je     c00106c6 <Device::loadDriversForAll()+0x26>
c00106b4:	83 ec 0c             	sub    esp,0xc
c00106b7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00106ba:	e8 e1 ff ff ff       	call   c00106a0 <Device::loadDriversForAll()>
c00106bf:	83 c4 10             	add    esp,0x10
c00106c2:	89 d8                	mov    eax,ebx
c00106c4:	eb e8                	jmp    c00106ae <Device::loadDriversForAll()+0xe>
c00106c6:	83 c4 08             	add    esp,0x8
c00106c9:	5b                   	pop    ebx
c00106ca:	c3                   	ret    
c00106cb:	90                   	nop

c00106cc <Device::closeAll()>:
c00106cc:	53                   	push   ebx
c00106cd:	83 ec 08             	sub    esp,0x8
c00106d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106d6:	6a 00                	push   0x0
c00106d8:	6a 00                	push   0x0
c00106da:	6a 00                	push   0x0
c00106dc:	53                   	push   ebx
c00106dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106e6:	83 c4 10             	add    esp,0x10
c00106e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106ec:	74 0f                	je     c00106fd <Device::closeAll()+0x31>
c00106ee:	83 ec 0c             	sub    esp,0xc
c00106f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106f4:	e8 d3 ff ff ff       	call   c00106cc <Device::closeAll()>
c00106f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106fb:	eb e9                	jmp    c00106e6 <Device::closeAll()+0x1a>
c00106fd:	83 c4 08             	add    esp,0x8
c0010700:	5b                   	pop    ebx
c0010701:	c3                   	ret    

c0010702 <Device::powerSavingAll(PowerSavingLevel)>:
c0010702:	56                   	push   esi
c0010703:	53                   	push   ebx
c0010704:	83 ec 0c             	sub    esp,0xc
c0010707:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001070b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001070f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010711:	56                   	push   esi
c0010712:	53                   	push   ebx
c0010713:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0010716:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001071c:	83 c4 10             	add    esp,0x10
c001071f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010722:	74 0f                	je     c0010733 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0010724:	52                   	push   edx
c0010725:	52                   	push   edx
c0010726:	56                   	push   esi
c0010727:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001072a:	e8 d3 ff ff ff       	call   c0010702 <Device::powerSavingAll(PowerSavingLevel)>
c001072f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010731:	eb e9                	jmp    c001071c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010733:	58                   	pop    eax
c0010734:	5b                   	pop    ebx
c0010735:	5e                   	pop    esi
c0010736:	c3                   	ret    
c0010737:	90                   	nop

c0010738 <Device::setName(char const*)>:
c0010738:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010740:	e9 14 00 ff ff       	jmp    c0000759 <strcpy>
c0010745:	90                   	nop

c0010746 <Device::Device(char const*)>:
c0010746:	83 ec 0c             	sub    esp,0xc
c0010749:	ba 78 1a 02 c0       	mov    edx,0xc0021a78
c001074e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010752:	89 10                	mov    DWORD PTR [eax],edx
c0010754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010758:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010766:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010774:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001077e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010782:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001078c:	83 ec 08             	sub    esp,0x8
c001078f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010797:	e8 9c ff ff ff       	call   c0010738 <Device::setName(char const*)>
c001079c:	83 c4 10             	add    esp,0x10
c001079f:	83 ec 0c             	sub    esp,0xc
c00107a2:	6a 08                	push   0x8
c00107a4:	e8 63 e8 ff ff       	call   c000f00c <operator new(unsigned long)>
c00107a9:	83 c4 10             	add    esp,0x10
c00107ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107bd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00107c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00107ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00107fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fe:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010832:	90                   	nop
c0010833:	83 c4 0c             	add    esp,0xc
c0010836:	c3                   	ret    
c0010837:	90                   	nop

c0010838 <Device::getName()>:
c0010838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083c:	05 d0 00 00 00       	add    eax,0xd0
c0010841:	c3                   	ret    

c0010842 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010842:	83 ec 0c             	sub    esp,0xc
c0010845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010849:	83 ec 08             	sub    esp,0x8
c001084c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010850:	50                   	push   eax
c0010851:	e8 f0 fe ff ff       	call   c0010746 <Device::Device(char const*)>
c0010856:	83 c4 10             	add    esp,0x10
c0010859:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c001085e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010862:	89 10                	mov    DWORD PTR [eax],edx
c0010864:	90                   	nop
c0010865:	83 c4 0c             	add    esp,0xc
c0010868:	c3                   	ret    
c0010869:	90                   	nop

c001086a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001086a:	57                   	push   edi
c001086b:	56                   	push   esi
c001086c:	53                   	push   ebx
c001086d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010871:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010875:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010879:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001087f:	75 0c                	jne    c001088d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010881:	52                   	push   edx
c0010882:	52                   	push   edx
c0010883:	53                   	push   ebx
c0010884:	56                   	push   esi
c0010885:	e8 1a f0 00 00       	call   c001f8a4 <LinkedList<Device>::addElement(Device*)>
c001088a:	83 c4 10             	add    esp,0x10
c001088d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010893:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010896:	74 12                	je     c00108aa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010898:	50                   	push   eax
c0010899:	57                   	push   edi
c001089a:	56                   	push   esi
c001089b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001089e:	e8 c7 ff ff ff       	call   c001086a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00108a5:	83 c4 10             	add    esp,0x10
c00108a8:	eb e9                	jmp    c0010893 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00108aa:	5b                   	pop    ebx
c00108ab:	5e                   	pop    esi
c00108ac:	5f                   	pop    edi
c00108ad:	c3                   	ret    

c00108ae <getDevicesOfType(DeviceType)>:
c00108ae:	53                   	push   ebx
c00108af:	83 ec 14             	sub    esp,0x14
c00108b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108b6:	53                   	push   ebx
c00108b7:	e8 c4 f0 00 00       	call   c001f980 <LinkedList<Device>::LinkedList()>
c00108bc:	83 c4 0c             	add    esp,0xc
c00108bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108c3:	53                   	push   ebx
c00108c4:	ff 35 28 45 02 c0    	push   DWORD PTR ds:0xc0024528
c00108ca:	e8 9b ff ff ff       	call   c001086a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108cf:	83 c4 18             	add    esp,0x18
c00108d2:	89 d8                	mov    eax,ebx
c00108d4:	5b                   	pop    ebx
c00108d5:	c2 04 00             	ret    0x4

c00108d8 <HardDiskController::HardDiskController(char const*)>:
c00108d8:	83 ec 0c             	sub    esp,0xc
c00108db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108df:	83 ec 08             	sub    esp,0x8
c00108e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e6:	50                   	push   eax
c00108e7:	e8 5a fe ff ff       	call   c0010746 <Device::Device(char const*)>
c00108ec:	83 c4 10             	add    esp,0x10
c00108ef:	ba d0 1a 02 c0       	mov    edx,0xc0021ad0
c00108f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f8:	89 10                	mov    DWORD PTR [eax],edx
c00108fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fe:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0010908:	90                   	nop
c0010909:	83 c4 0c             	add    esp,0xc
c001090c:	c3                   	ret    
c001090d:	90                   	nop

c001090e <HardDiskController::~HardDiskController()>:
c001090e:	83 ec 0c             	sub    esp,0xc
c0010911:	ba d0 1a 02 c0       	mov    edx,0xc0021ad0
c0010916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091a:	89 10                	mov    DWORD PTR [eax],edx
c001091c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010920:	83 ec 0c             	sub    esp,0xc
c0010923:	50                   	push   eax
c0010924:	e8 d3 fa ff ff       	call   c00103fc <Device::~Device()>
c0010929:	83 c4 10             	add    esp,0x10
c001092c:	90                   	nop
c001092d:	83 c4 0c             	add    esp,0xc
c0010930:	c3                   	ret    
c0010931:	90                   	nop

c0010932 <HardDiskController::~HardDiskController()>:
c0010932:	83 ec 0c             	sub    esp,0xc
c0010935:	83 ec 0c             	sub    esp,0xc
c0010938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001093c:	e8 cd ff ff ff       	call   c001090e <HardDiskController::~HardDiskController()>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	83 ec 08             	sub    esp,0x8
c0010947:	68 58 01 00 00       	push   0x158
c001094c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010950:	e8 c6 e6 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0010955:	83 c4 10             	add    esp,0x10
c0010958:	83 c4 0c             	add    esp,0xc
c001095b:	c3                   	ret    

c001095c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001095c:	83 ec 0c             	sub    esp,0xc
c001095f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010963:	83 ec 08             	sub    esp,0x8
c0010966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001096a:	50                   	push   eax
c001096b:	e8 d6 fd ff ff       	call   c0010746 <Device::Device(char const*)>
c0010970:	83 c4 10             	add    esp,0x10
c0010973:	ba fc 1a 02 c0       	mov    edx,0xc0021afc
c0010978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097c:	89 10                	mov    DWORD PTR [eax],edx
c001097e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010982:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010998:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00109a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00109aa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00109b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00109be:	90                   	nop
c00109bf:	83 c4 0c             	add    esp,0xc
c00109c2:	c3                   	ret    
c00109c3:	90                   	nop

c00109c4 <PhysicalDisk::startCache()>:
c00109c4:	56                   	push   esi
c00109c5:	53                   	push   ebx
c00109c6:	83 ec 10             	sub    esp,0x10
c00109c9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00109cd:	6a 30                	push   0x30
c00109cf:	e8 38 e6 ff ff       	call   c000f00c <operator new(unsigned long)>
c00109d4:	89 c6                	mov    esi,eax
c00109d6:	58                   	pop    eax
c00109d7:	5a                   	pop    edx
c00109d8:	53                   	push   ebx
c00109d9:	56                   	push   esi
c00109da:	e8 3b 25 00 00       	call   c0012f1a <VCache::VCache(PhysicalDisk*)>
c00109df:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109e5:	83 c4 14             	add    esp,0x14
c00109e8:	5b                   	pop    ebx
c00109e9:	5e                   	pop    esi
c00109ea:	c3                   	ret    
c00109eb:	90                   	nop

c00109ec <PhysicalDisk::~PhysicalDisk()>:
c00109ec:	83 ec 0c             	sub    esp,0xc
c00109ef:	ba fc 1a 02 c0       	mov    edx,0xc0021afc
c00109f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f8:	89 10                	mov    DWORD PTR [eax],edx
c00109fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fe:	83 ec 0c             	sub    esp,0xc
c0010a01:	50                   	push   eax
c0010a02:	e8 f5 f9 ff ff       	call   c00103fc <Device::~Device()>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	90                   	nop
c0010a0b:	83 c4 0c             	add    esp,0xc
c0010a0e:	c3                   	ret    
c0010a0f:	90                   	nop

c0010a10 <PhysicalDisk::~PhysicalDisk()>:
c0010a10:	83 ec 0c             	sub    esp,0xc
c0010a13:	83 ec 0c             	sub    esp,0xc
c0010a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1a:	e8 cd ff ff ff       	call   c00109ec <PhysicalDisk::~PhysicalDisk()>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	83 ec 08             	sub    esp,0x8
c0010a25:	68 6c 01 00 00       	push   0x16c
c0010a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2e:	e8 e8 e5 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0010a33:	83 c4 10             	add    esp,0x10
c0010a36:	83 c4 0c             	add    esp,0xc
c0010a39:	c3                   	ret    

c0010a3a <FPU::FPU(char const*)>:
c0010a3a:	83 ec 0c             	sub    esp,0xc
c0010a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a41:	83 ec 08             	sub    esp,0x8
c0010a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a48:	50                   	push   eax
c0010a49:	e8 f8 fc ff ff       	call   c0010746 <Device::Device(char const*)>
c0010a4e:	83 c4 10             	add    esp,0x10
c0010a51:	ba 3c 1b 02 c0       	mov    edx,0xc0021b3c
c0010a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5a:	89 10                	mov    DWORD PTR [eax],edx
c0010a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a60:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a6a:	90                   	nop
c0010a6b:	83 c4 0c             	add    esp,0xc
c0010a6e:	c3                   	ret    
c0010a6f:	90                   	nop

c0010a70 <FPU::~FPU()>:
c0010a70:	83 ec 0c             	sub    esp,0xc
c0010a73:	ba 3c 1b 02 c0       	mov    edx,0xc0021b3c
c0010a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7c:	89 10                	mov    DWORD PTR [eax],edx
c0010a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a82:	83 ec 0c             	sub    esp,0xc
c0010a85:	50                   	push   eax
c0010a86:	e8 71 f9 ff ff       	call   c00103fc <Device::~Device()>
c0010a8b:	83 c4 10             	add    esp,0x10
c0010a8e:	90                   	nop
c0010a8f:	83 c4 0c             	add    esp,0xc
c0010a92:	c3                   	ret    
c0010a93:	90                   	nop

c0010a94 <FPU::~FPU()>:
c0010a94:	83 ec 0c             	sub    esp,0xc
c0010a97:	83 ec 0c             	sub    esp,0xc
c0010a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a9e:	e8 cd ff ff ff       	call   c0010a70 <FPU::~FPU()>
c0010aa3:	83 c4 10             	add    esp,0x10
c0010aa6:	83 ec 08             	sub    esp,0x8
c0010aa9:	68 58 01 00 00       	push   0x158
c0010aae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab2:	e8 64 e5 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	83 c4 0c             	add    esp,0xc
c0010abd:	c3                   	ret    

c0010abe <setupFPU()>:
c0010abe:	53                   	push   ebx
c0010abf:	83 ec 08             	sub    esp,0x8
c0010ac2:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0010ac7:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010ace:	74 19                	je     c0010ae9 <setupFPU()+0x2b>
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	68 58 01 00 00       	push   0x158
c0010ad8:	e8 2f e5 ff ff       	call   c000f00c <operator new(unsigned long)>
c0010add:	89 c3                	mov    ebx,eax
c0010adf:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ae2:	e8 ef d4 00 00       	call   c001dfd6 <AVX::AVX()>
c0010ae7:	eb 5b                	jmp    c0010b44 <setupFPU()+0x86>
c0010ae9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010aef:	84 c0                	test   al,al
c0010af1:	79 19                	jns    c0010b0c <setupFPU()+0x4e>
c0010af3:	83 ec 0c             	sub    esp,0xc
c0010af6:	68 58 01 00 00       	push   0x158
c0010afb:	e8 0c e5 ff ff       	call   c000f00c <operator new(unsigned long)>
c0010b00:	89 c3                	mov    ebx,eax
c0010b02:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b05:	e8 f2 d5 00 00       	call   c001e0fc <SSE::SSE()>
c0010b0a:	eb 38                	jmp    c0010b44 <setupFPU()+0x86>
c0010b0c:	a8 20                	test   al,0x20
c0010b0e:	74 19                	je     c0010b29 <setupFPU()+0x6b>
c0010b10:	83 ec 0c             	sub    esp,0xc
c0010b13:	68 58 01 00 00       	push   0x158
c0010b18:	e8 ef e4 ff ff       	call   c000f00c <operator new(unsigned long)>
c0010b1d:	89 c3                	mov    ebx,eax
c0010b1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b22:	e8 3f d5 00 00       	call   c001e066 <MMX::MMX()>
c0010b27:	eb 1b                	jmp    c0010b44 <setupFPU()+0x86>
c0010b29:	a8 10                	test   al,0x10
c0010b2b:	74 1c                	je     c0010b49 <setupFPU()+0x8b>
c0010b2d:	83 ec 0c             	sub    esp,0xc
c0010b30:	68 58 01 00 00       	push   0x158
c0010b35:	e8 d2 e4 ff ff       	call   c000f00c <operator new(unsigned long)>
c0010b3a:	89 c3                	mov    ebx,eax
c0010b3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b3f:	e8 46 d6 00 00       	call   c001e18a <x87::x87()>
c0010b44:	83 c4 10             	add    esp,0x10
c0010b47:	eb 2c                	jmp    c0010b75 <setupFPU()+0xb7>
c0010b49:	83 ec 0c             	sub    esp,0xc
c0010b4c:	31 db                	xor    ebx,ebx
c0010b4e:	68 28 1b 02 c0       	push   0xc0021b28
c0010b53:	e8 e9 e5 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0010b58:	e8 43 3c 00 00       	call   c00147a0 <thisCPU()>
c0010b5d:	e8 3e 3c 00 00       	call   c00147a0 <thisCPU()>
c0010b62:	e8 71 ee 00 00       	call   c001f9d8 <CPU::readCR0()>
c0010b67:	83 c8 04             	or     eax,0x4
c0010b6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b6d:	e8 78 ee 00 00       	call   c001f9ea <CPU::writeCR0(unsigned long)>
c0010b72:	83 c4 10             	add    esp,0x10
c0010b75:	83 c4 08             	add    esp,0x8
c0010b78:	89 d8                	mov    eax,ebx
c0010b7a:	5b                   	pop    ebx
c0010b7b:	c3                   	ret    

c0010b7c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b84:	c1 e0 04             	shl    eax,0x4
c0010b87:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010b8b:	8d 50 10             	lea    edx,[eax+0x10]
c0010b8e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010b94:	74 08                	je     c0010b9e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010b96:	83 c0 04             	add    eax,0x4
c0010b99:	39 d0                	cmp    eax,edx
c0010b9b:	75 f1                	jne    c0010b8e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010b9d:	c3                   	ret    
c0010b9e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010ba8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010bb2:	eb e2                	jmp    c0010b96 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010bb4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010bb4:	57                   	push   edi
c0010bb5:	31 c0                	xor    eax,eax
c0010bb7:	56                   	push   esi
c0010bb8:	53                   	push   ebx
c0010bb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010bbd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bc1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010bc5:	89 da                	mov    edx,ebx
c0010bc7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010bcb:	c1 e2 04             	shl    edx,0x4
c0010bce:	01 ca                	add    edx,ecx
c0010bd0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010bd8:	74 16                	je     c0010bf0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010bda:	40                   	inc    eax
c0010bdb:	83 f8 04             	cmp    eax,0x4
c0010bde:	75 f0                	jne    c0010bd0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010be0:	c7 44 24 10 6c 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021b6c
c0010be8:	5b                   	pop    ebx
c0010be9:	5e                   	pop    esi
c0010bea:	5f                   	pop    edi
c0010beb:	e9 1c 4d 00 00       	jmp    c001590c <Krnl::panic(char const*)>
c0010bf0:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010bf3:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010bf6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010bfc:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010c02:	5b                   	pop    ebx
c0010c03:	5e                   	pop    esi
c0010c04:	5f                   	pop    edi
c0010c05:	c3                   	ret    

c0010c06 <doubleFault(regs*, void*)>:
c0010c06:	55                   	push   ebp
c0010c07:	89 e5                	mov    ebp,esp
c0010c09:	83 ec 08             	sub    esp,0x8
c0010c0c:	83 ec 0c             	sub    esp,0xc
c0010c0f:	68 a7 1b 02 c0       	push   0xc0021ba7
c0010c14:	e8 f3 4c 00 00       	call   c001590c <Krnl::panic(char const*)>
c0010c19:	83 c4 10             	add    esp,0x10
c0010c1c:	90                   	nop
c0010c1d:	c9                   	leave  
c0010c1e:	c3                   	ret    
c0010c1f:	90                   	nop

c0010c20 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010c20:	56                   	push   esi
c0010c21:	53                   	push   ebx
c0010c22:	50                   	push   eax
c0010c23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c27:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c2b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c30:	75 35                	jne    c0010c67 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010c32:	8d 43 20             	lea    eax,[ebx+0x20]
c0010c35:	31 d2                	xor    edx,edx
c0010c37:	89 c1                	mov    ecx,eax
c0010c39:	c1 e1 04             	shl    ecx,0x4
c0010c3c:	01 f1                	add    ecx,esi
c0010c3e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c46:	74 3e                	je     c0010c86 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010c48:	42                   	inc    edx
c0010c49:	83 fa 04             	cmp    edx,0x4
c0010c4c:	75 f0                	jne    c0010c3e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c4e:	83 ec 0c             	sub    esp,0xc
c0010c51:	68 ec 1b 02 c0       	push   0xc0021bec
c0010c56:	e8 b1 4c 00 00       	call   c001590c <Krnl::panic(char const*)>
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c63:	5a                   	pop    edx
c0010c64:	5b                   	pop    ebx
c0010c65:	5e                   	pop    esi
c0010c66:	c3                   	ret    
c0010c67:	83 ec 0c             	sub    esp,0xc
c0010c6a:	56                   	push   esi
c0010c6b:	e8 c8 fb ff ff       	call   c0010838 <Device::getName()>
c0010c70:	83 c4 10             	add    esp,0x10
c0010c73:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c76:	75 ba                	jne    c0010c32 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c78:	83 fb 0f             	cmp    ebx,0xf
c0010c7b:	7f 29                	jg     c0010ca6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010c7d:	0f b6 9b 80 3c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc380]
c0010c84:	eb ac                	jmp    c0010c32 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c86:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c8d:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c90:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010c96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c9a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010ca0:	89 d8                	mov    eax,ebx
c0010ca2:	5a                   	pop    edx
c0010ca3:	5b                   	pop    ebx
c0010ca4:	5e                   	pop    esi
c0010ca5:	c3                   	ret    
c0010ca6:	83 ec 0c             	sub    esp,0xc
c0010ca9:	68 b4 1b 02 c0       	push   0xc0021bb4
c0010cae:	e8 59 4c 00 00       	call   c001590c <Krnl::panic(char const*)>
c0010cb3:	83 c4 10             	add    esp,0x10
c0010cb6:	e9 77 ff ff ff       	jmp    c0010c32 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010cbb:	90                   	nop

c0010cbc <InterruptController::clearAllHandlers(int, bool)>:
c0010cbc:	56                   	push   esi
c0010cbd:	53                   	push   ebx
c0010cbe:	52                   	push   edx
c0010cbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cc3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010cc7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010ccc:	75 61                	jne    c0010d2f <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010cce:	8d 46 20             	lea    eax,[esi+0x20]
c0010cd1:	c1 e6 04             	shl    esi,0x4
c0010cd4:	c1 e0 04             	shl    eax,0x4
c0010cd7:	01 de                	add    esi,ebx
c0010cd9:	01 d8                	add    eax,ebx
c0010cdb:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010ce5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010cef:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010cf9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010d03:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010d0d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010d17:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010d21:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010d2b:	58                   	pop    eax
c0010d2c:	5b                   	pop    ebx
c0010d2d:	5e                   	pop    esi
c0010d2e:	c3                   	ret    
c0010d2f:	83 ec 0c             	sub    esp,0xc
c0010d32:	53                   	push   ebx
c0010d33:	e8 00 fb ff ff       	call   c0010838 <Device::getName()>
c0010d38:	83 c4 10             	add    esp,0x10
c0010d3b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d3e:	75 8e                	jne    c0010cce <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d40:	83 fe 0f             	cmp    esi,0xf
c0010d43:	7f 09                	jg     c0010d4e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010d45:	0f b6 b6 80 3c 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc380]
c0010d4c:	eb 80                	jmp    c0010cce <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d4e:	83 ec 0c             	sub    esp,0xc
c0010d51:	68 28 1c 02 c0       	push   0xc0021c28
c0010d56:	e8 b1 4b 00 00       	call   c001590c <Krnl::panic(char const*)>
c0010d5b:	83 c4 10             	add    esp,0x10
c0010d5e:	e9 6b ff ff ff       	jmp    c0010cce <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d63:	90                   	nop

c0010d64 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d64:	56                   	push   esi
c0010d65:	53                   	push   ebx
c0010d66:	52                   	push   edx
c0010d67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d6b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d6f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d74:	75 3a                	jne    c0010db0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d7a:	8d 50 20             	lea    edx,[eax+0x20]
c0010d7d:	c1 e2 04             	shl    edx,0x4
c0010d80:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d83:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d87:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010d8d:	74 0b                	je     c0010d9a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010d8f:	83 c0 04             	add    eax,0x4
c0010d92:	39 d0                	cmp    eax,edx
c0010d94:	75 f1                	jne    c0010d87 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010d96:	58                   	pop    eax
c0010d97:	5b                   	pop    ebx
c0010d98:	5e                   	pop    esi
c0010d99:	c3                   	ret    
c0010d9a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010da4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010dae:	eb df                	jmp    c0010d8f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010db0:	83 ec 0c             	sub    esp,0xc
c0010db3:	56                   	push   esi
c0010db4:	e8 7f fa ff ff       	call   c0010838 <Device::getName()>
c0010db9:	83 c4 10             	add    esp,0x10
c0010dbc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010dbf:	75 b5                	jne    c0010d76 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010dc1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010dc6:	7f 11                	jg     c0010dd9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010dc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010dcc:	0f b6 80 80 3c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc380]
c0010dd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010dd7:	eb 9d                	jmp    c0010d76 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010dd9:	83 ec 0c             	sub    esp,0xc
c0010ddc:	68 28 1c 02 c0       	push   0xc0021c28
c0010de1:	e8 26 4b 00 00       	call   c001590c <Krnl::panic(char const*)>
c0010de6:	83 c4 10             	add    esp,0x10
c0010de9:	eb 8b                	jmp    c0010d76 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010deb <nmiHandler(regs*, void*)>:
c0010deb:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0010df0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010df4:	e9 1f a9 ff ff       	jmp    c000b718 <Computer::handleNMI()>

c0010df9 <int_handler>:
c0010df9:	55                   	push   ebp
c0010dfa:	57                   	push   edi
c0010dfb:	56                   	push   esi
c0010dfc:	53                   	push   ebx
c0010dfd:	83 ec 0c             	sub    esp,0xc
c0010e00:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010e04:	80 3d 74 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024f74,0x0
c0010e0b:	74 0b                	je     c0010e18 <int_handler+0x1f>
c0010e0d:	fa                   	cli    
c0010e0e:	f4                   	hlt    
c0010e0f:	80 3d 74 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024f74,0x0
c0010e16:	75 f5                	jne    c0010e0d <int_handler+0x14>
c0010e18:	e8 83 39 00 00       	call   c00147a0 <thisCPU()>
c0010e1d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010e20:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010e26:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e29:	83 f8 17             	cmp    eax,0x17
c0010e2c:	77 13                	ja     c0010e41 <int_handler+0x48>
c0010e2e:	83 ec 08             	sub    esp,0x8
c0010e31:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e33:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e36:	0f b6 c0             	movzx  eax,al
c0010e39:	50                   	push   eax
c0010e3a:	57                   	push   edi
c0010e3b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e3e:	83 c4 10             	add    esp,0x10
c0010e41:	83 c3 15             	add    ebx,0x15
c0010e44:	c1 e3 04             	shl    ebx,0x4
c0010e47:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e4b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e52:	31 db                	xor    ebx,ebx
c0010e54:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e58:	85 c0                	test   eax,eax
c0010e5a:	74 13                	je     c0010e6f <int_handler+0x76>
c0010e5c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e5f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e63:	74 1c                	je     c0010e81 <int_handler+0x88>
c0010e65:	83 ec 08             	sub    esp,0x8
c0010e68:	52                   	push   edx
c0010e69:	56                   	push   esi
c0010e6a:	ff d0                	call   eax
c0010e6c:	83 c4 10             	add    esp,0x10
c0010e6f:	43                   	inc    ebx
c0010e70:	83 fb 04             	cmp    ebx,0x4
c0010e73:	75 df                	jne    c0010e54 <int_handler+0x5b>
c0010e75:	83 c4 0c             	add    esp,0xc
c0010e78:	31 c0                	xor    eax,eax
c0010e7a:	5b                   	pop    ebx
c0010e7b:	31 d2                	xor    edx,edx
c0010e7d:	5e                   	pop    esi
c0010e7e:	5f                   	pop    edi
c0010e7f:	5d                   	pop    ebp
c0010e80:	c3                   	ret    
c0010e81:	83 ec 08             	sub    esp,0x8
c0010e84:	52                   	push   edx
c0010e85:	56                   	push   esi
c0010e86:	ff d0                	call   eax
c0010e88:	83 c4 10             	add    esp,0x10
c0010e8b:	83 c4 0c             	add    esp,0xc
c0010e8e:	5b                   	pop    ebx
c0010e8f:	5e                   	pop    esi
c0010e90:	5f                   	pop    edi
c0010e91:	5d                   	pop    ebp
c0010e92:	c3                   	ret    
c0010e93:	90                   	nop

c0010e94 <InterruptController::InterruptController(char const*)>:
c0010e94:	83 ec 1c             	sub    esp,0x1c
c0010e97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e9b:	83 ec 08             	sub    esp,0x8
c0010e9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010ea2:	50                   	push   eax
c0010ea3:	e8 9e f8 ff ff       	call   c0010746 <Device::Device(char const*)>
c0010ea8:	83 c4 10             	add    esp,0x10
c0010eab:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c0010eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb4:	89 10                	mov    DWORD PTR [eax],edx
c0010eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eba:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010ec4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ecc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010ed4:	7f 5e                	jg     c0010f34 <InterruptController::InterruptController(char const*)+0xa0>
c0010ed6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ede:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010ee3:	7f 49                	jg     c0010f2e <InterruptController::InterruptController(char const*)+0x9a>
c0010ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ee9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010eed:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ef4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ef8:	01 ca                	add    edx,ecx
c0010efa:	83 c2 54             	add    edx,0x54
c0010efd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f0d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f18:	01 ca                	add    edx,ecx
c0010f1a:	81 c2 54 04 00 00    	add    edx,0x454
c0010f20:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f28:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f2c:	eb b0                	jmp    c0010ede <InterruptController::InterruptController(char const*)+0x4a>
c0010f2e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010f32:	eb 98                	jmp    c0010ecc <InterruptController::InterruptController(char const*)+0x38>
c0010f34:	90                   	nop
c0010f35:	83 c4 1c             	add    esp,0x1c
c0010f38:	c3                   	ret    
c0010f39:	90                   	nop

c0010f3a <InterruptController::~InterruptController()>:
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c0010f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f46:	89 10                	mov    DWORD PTR [eax],edx
c0010f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4c:	83 ec 0c             	sub    esp,0xc
c0010f4f:	50                   	push   eax
c0010f50:	e8 a7 f4 ff ff       	call   c00103fc <Device::~Device()>
c0010f55:	83 c4 10             	add    esp,0x10
c0010f58:	90                   	nop
c0010f59:	83 c4 0c             	add    esp,0xc
c0010f5c:	c3                   	ret    
c0010f5d:	90                   	nop

c0010f5e <InterruptController::~InterruptController()>:
c0010f5e:	83 ec 0c             	sub    esp,0xc
c0010f61:	83 ec 0c             	sub    esp,0xc
c0010f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f68:	e8 cd ff ff ff       	call   c0010f3a <InterruptController::~InterruptController()>
c0010f6d:	83 c4 10             	add    esp,0x10
c0010f70:	83 ec 08             	sub    esp,0x8
c0010f73:	68 58 21 00 00       	push   0x2158
c0010f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f7c:	e8 9a e0 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0010f81:	83 c4 10             	add    esp,0x10
c0010f84:	83 c4 0c             	add    esp,0xc
c0010f87:	c3                   	ret    

c0010f88 <displayDebugInfo(regs*)>:
c0010f88:	55                   	push   ebp
c0010f89:	57                   	push   edi
c0010f8a:	56                   	push   esi
c0010f8b:	53                   	push   ebx
c0010f8c:	83 ec 24             	sub    esp,0x24
c0010f8f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010f93:	0f 20 c2             	mov    edx,cr0
c0010f96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010f9a:	0f 20 d7             	mov    edi,cr2
c0010f9d:	0f 20 de             	mov    esi,cr3
c0010fa0:	0f 20 e5             	mov    ebp,cr4
c0010fa3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010fa6:	68 62 1c 02 c0       	push   0xc0021c62
c0010fab:	e8 91 e1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0010fb0:	58                   	pop    eax
c0010fb1:	5a                   	pop    edx
c0010fb2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010fb5:	68 6d 1c 02 c0       	push   0xc0021c6d
c0010fba:	e8 82 e1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0010fbf:	59                   	pop    ecx
c0010fc0:	58                   	pop    eax
c0010fc1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010fc4:	68 78 1c 02 c0       	push   0xc0021c78
c0010fc9:	e8 73 e1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0010fce:	58                   	pop    eax
c0010fcf:	5a                   	pop    edx
c0010fd0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010fd3:	68 83 1c 02 c0       	push   0xc0021c83
c0010fd8:	e8 64 e1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0010fdd:	59                   	pop    ecx
c0010fde:	58                   	pop    eax
c0010fdf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010fe2:	68 8e 1c 02 c0       	push   0xc0021c8e
c0010fe7:	e8 55 e1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0010fec:	58                   	pop    eax
c0010fed:	5a                   	pop    edx
c0010fee:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010ff1:	68 99 1c 02 c0       	push   0xc0021c99
c0010ff6:	e8 46 e1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0010ffb:	59                   	pop    ecx
c0010ffc:	58                   	pop    eax
c0010ffd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011000:	68 a4 1c 02 c0       	push   0xc0021ca4
c0011005:	e8 37 e1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001100a:	58                   	pop    eax
c001100b:	5a                   	pop    edx
c001100c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001100f:	68 af 1c 02 c0       	push   0xc0021caf
c0011014:	e8 28 e1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011019:	59                   	pop    ecx
c001101a:	58                   	pop    eax
c001101b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001101e:	68 ba 1c 02 c0       	push   0xc0021cba
c0011023:	e8 19 e1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011028:	58                   	pop    eax
c0011029:	5a                   	pop    edx
c001102a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001102d:	68 c9 1c 02 c0       	push   0xc0021cc9
c0011032:	e8 0a e1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011037:	59                   	pop    ecx
c0011038:	58                   	pop    eax
c0011039:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001103c:	68 d4 1c 02 c0       	push   0xc0021cd4
c0011041:	e8 fb e0 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011046:	58                   	pop    eax
c0011047:	5a                   	pop    edx
c0011048:	57                   	push   edi
c0011049:	68 df 1c 02 c0       	push   0xc0021cdf
c001104e:	e8 ee e0 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011053:	59                   	pop    ecx
c0011054:	58                   	pop    eax
c0011055:	56                   	push   esi
c0011056:	68 ea 1c 02 c0       	push   0xc0021cea
c001105b:	e8 e1 e0 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011060:	58                   	pop    eax
c0011061:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011066:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001106c:	e8 c4 c2 ff ff       	call   c000d335 <setActiveTerminal(VgaText*)>
c0011071:	58                   	pop    eax
c0011072:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011075:	5a                   	pop    edx
c0011076:	c1 e0 05             	shl    eax,0x5
c0011079:	05 e0 39 02 c0       	add    eax,0xc00239e0
c001107e:	50                   	push   eax
c001107f:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011084:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001108a:	e8 c7 c6 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001108f:	59                   	pop    ecx
c0011090:	58                   	pop    eax
c0011091:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011096:	68 f5 1c 02 c0       	push   0xc0021cf5
c001109b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110a1:	e8 b0 c6 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00110a6:	58                   	pop    eax
c00110a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110ac:	5a                   	pop    edx
c00110ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110b0:	83 c0 0c             	add    eax,0xc
c00110b3:	50                   	push   eax
c00110b4:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00110b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110bf:	e8 92 c6 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00110c4:	59                   	pop    ecx
c00110c5:	58                   	pop    eax
c00110c6:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00110cb:	68 fe 1c 02 c0       	push   0xc0021cfe
c00110d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d6:	e8 7b c6 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00110db:	58                   	pop    eax
c00110dc:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00110e1:	5a                   	pop    edx
c00110e2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110eb:	e8 8c c6 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00110f0:	59                   	pop    ecx
c00110f1:	58                   	pop    eax
c00110f2:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00110f7:	68 06 1d 02 c0       	push   0xc0021d06
c00110fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011102:	e8 4f c6 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011107:	58                   	pop    eax
c0011108:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001110d:	5a                   	pop    edx
c001110e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011111:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011117:	e8 60 c6 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c001111c:	59                   	pop    ecx
c001111d:	58                   	pop    eax
c001111e:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011123:	68 0e 1d 02 c0       	push   0xc0021d0e
c0011128:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001112e:	e8 23 c6 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011133:	58                   	pop    eax
c0011134:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011139:	5a                   	pop    edx
c001113a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001113d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011143:	e8 34 c6 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011148:	59                   	pop    ecx
c0011149:	58                   	pop    eax
c001114a:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001114f:	68 16 1d 02 c0       	push   0xc0021d16
c0011154:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115a:	e8 f7 c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001115f:	58                   	pop    eax
c0011160:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011165:	5a                   	pop    edx
c0011166:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011169:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001116f:	e8 08 c6 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011174:	59                   	pop    ecx
c0011175:	58                   	pop    eax
c0011176:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001117b:	68 1e 1d 02 c0       	push   0xc0021d1e
c0011180:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011186:	e8 cb c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001118b:	58                   	pop    eax
c001118c:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011191:	5a                   	pop    edx
c0011192:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011195:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001119b:	e8 dc c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00111a0:	59                   	pop    ecx
c00111a1:	58                   	pop    eax
c00111a2:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00111a7:	68 26 1d 02 c0       	push   0xc0021d26
c00111ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b2:	e8 9f c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00111b7:	58                   	pop    eax
c00111b8:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00111bd:	5a                   	pop    edx
c00111be:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00111c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111c7:	e8 b0 c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00111cc:	59                   	pop    ecx
c00111cd:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00111d2:	5b                   	pop    ebx
c00111d3:	68 2e 1d 02 c0       	push   0xc0021d2e
c00111d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111de:	e8 73 c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00111e3:	58                   	pop    eax
c00111e4:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00111e9:	5a                   	pop    edx
c00111ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111ee:	52                   	push   edx
c00111ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111f5:	e8 82 c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00111fa:	59                   	pop    ecx
c00111fb:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011200:	5b                   	pop    ebx
c0011201:	68 37 1d 02 c0       	push   0xc0021d37
c0011206:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001120c:	e8 45 c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011211:	58                   	pop    eax
c0011212:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011217:	5a                   	pop    edx
c0011218:	57                   	push   edi
c0011219:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001121f:	e8 58 c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011224:	59                   	pop    ecx
c0011225:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001122a:	5b                   	pop    ebx
c001122b:	68 3f 1d 02 c0       	push   0xc0021d3f
c0011230:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011236:	e8 1b c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001123b:	5f                   	pop    edi
c001123c:	58                   	pop    eax
c001123d:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011242:	56                   	push   esi
c0011243:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011249:	e8 2e c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c001124e:	58                   	pop    eax
c001124f:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011254:	5a                   	pop    edx
c0011255:	68 47 1d 02 c0       	push   0xc0021d47
c001125a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011260:	e8 f1 c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011265:	59                   	pop    ecx
c0011266:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001126b:	5b                   	pop    ebx
c001126c:	55                   	push   ebp
c001126d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011273:	e8 04 c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011278:	5e                   	pop    esi
c0011279:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001127e:	5f                   	pop    edi
c001127f:	68 4f 1d 02 c0       	push   0xc0021d4f
c0011284:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001128a:	e8 c7 c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001128f:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011294:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001129a:	e8 54 e7 00 00       	call   c001f9f3 <CPU::readDR0()>
c001129f:	5d                   	pop    ebp
c00112a0:	5a                   	pop    edx
c00112a1:	50                   	push   eax
c00112a2:	53                   	push   ebx
c00112a3:	e8 d4 c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00112a8:	59                   	pop    ecx
c00112a9:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00112ae:	5b                   	pop    ebx
c00112af:	68 58 1d 02 c0       	push   0xc0021d58
c00112b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112ba:	e8 97 c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00112bf:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00112c4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112ca:	e8 36 e7 00 00       	call   c001fa05 <CPU::readDR1()>
c00112cf:	5e                   	pop    esi
c00112d0:	5f                   	pop    edi
c00112d1:	50                   	push   eax
c00112d2:	53                   	push   ebx
c00112d3:	e8 a4 c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00112d8:	5d                   	pop    ebp
c00112d9:	58                   	pop    eax
c00112da:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00112df:	68 60 1d 02 c0       	push   0xc0021d60
c00112e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112ea:	e8 67 c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00112ef:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00112f4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112fa:	e8 18 e7 00 00       	call   c001fa17 <CPU::readDR2()>
c00112ff:	5a                   	pop    edx
c0011300:	59                   	pop    ecx
c0011301:	50                   	push   eax
c0011302:	53                   	push   ebx
c0011303:	e8 74 c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011308:	5b                   	pop    ebx
c0011309:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001130e:	5e                   	pop    esi
c001130f:	68 68 1d 02 c0       	push   0xc0021d68
c0011314:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001131a:	e8 37 c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001131f:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011324:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001132a:	e8 fa e6 00 00       	call   c001fa29 <CPU::readDR3()>
c001132f:	5f                   	pop    edi
c0011330:	5d                   	pop    ebp
c0011331:	50                   	push   eax
c0011332:	53                   	push   ebx
c0011333:	e8 44 c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011338:	58                   	pop    eax
c0011339:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001133e:	5a                   	pop    edx
c001133f:	68 70 1d 02 c0       	push   0xc0021d70
c0011344:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001134a:	e8 07 c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001134f:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011354:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001135a:	e8 dc e6 00 00       	call   c001fa3b <CPU::readDR6()>
c001135f:	59                   	pop    ecx
c0011360:	5e                   	pop    esi
c0011361:	50                   	push   eax
c0011362:	53                   	push   ebx
c0011363:	e8 14 c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011368:	5f                   	pop    edi
c0011369:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001136e:	5d                   	pop    ebp
c001136f:	68 78 1d 02 c0       	push   0xc0021d78
c0011374:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001137a:	e8 d7 c3 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001137f:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0011384:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001138a:	e8 be e6 00 00       	call   c001fa4d <CPU::readDR7()>
c001138f:	5a                   	pop    edx
c0011390:	59                   	pop    ecx
c0011391:	50                   	push   eax
c0011392:	53                   	push   ebx
c0011393:	e8 e4 c3 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011398:	fa                   	cli    
c0011399:	f4                   	hlt    
c001139a:	83 c4 10             	add    esp,0x10
c001139d:	eb fe                	jmp    c001139d <displayDebugInfo(regs*)+0x415>

c001139f <x87EmulHandler(regs*, void*)>:
c001139f:	53                   	push   ebx
c00113a0:	83 ec 08             	sub    esp,0x8
c00113a3:	a1 b4 46 02 c0       	mov    eax,ds:0xc00246b4
c00113a8:	85 c0                	test   eax,eax
c00113aa:	74 15                	je     c00113c1 <x87EmulHandler(regs*, void*)+0x22>
c00113ac:	83 ec 0c             	sub    esp,0xc
c00113af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113b3:	ff d0                	call   eax
c00113b5:	83 c4 10             	add    esp,0x10
c00113b8:	84 c0                	test   al,al
c00113ba:	74 2f                	je     c00113eb <x87EmulHandler(regs*, void*)+0x4c>
c00113bc:	83 c4 08             	add    esp,0x8
c00113bf:	5b                   	pop    ebx
c00113c0:	c3                   	ret    
c00113c1:	83 ec 08             	sub    esp,0x8
c00113c4:	8b 1d 28 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024528
c00113ca:	6a 01                	push   0x1
c00113cc:	68 80 1d 02 c0       	push   0xc0021d80
c00113d1:	e8 3e 6f 00 00       	call   c0018314 <Thr::loadDLL(char const*, bool)>
c00113d6:	5a                   	pop    edx
c00113d7:	59                   	pop    ecx
c00113d8:	53                   	push   ebx
c00113d9:	50                   	push   eax
c00113da:	e8 fb 70 00 00       	call   c00184da <Thr::executeDLL(unsigned long, void*)>
c00113df:	a1 b4 46 02 c0       	mov    eax,ds:0xc00246b4
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	85 c0                	test   eax,eax
c00113e9:	75 c1                	jne    c00113ac <x87EmulHandler(regs*, void*)+0xd>
c00113eb:	83 ec 0c             	sub    esp,0xc
c00113ee:	68 9d 1d 02 c0       	push   0xc0021d9d
c00113f3:	e8 49 dd ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00113f8:	58                   	pop    eax
c00113f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113fd:	e8 86 fb ff ff       	call   c0010f88 <displayDebugInfo(regs*)>

c0011402 <gpFault(regs*, void*)>:
c0011402:	53                   	push   ebx
c0011403:	83 ec 14             	sub    esp,0x14
c0011406:	c7 05 b0 46 02 c0 8b 97 01 c0 	mov    DWORD PTR ds:0xc00246b0,0xc001978b
c0011410:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011414:	53                   	push   ebx
c0011415:	e8 71 83 00 00       	call   c001978b <Vm::faultHandler(regs*)>
c001141a:	83 c4 10             	add    esp,0x10
c001141d:	84 c0                	test   al,al
c001141f:	74 05                	je     c0011426 <gpFault(regs*, void*)+0x24>
c0011421:	83 c4 08             	add    esp,0x8
c0011424:	5b                   	pop    ebx
c0011425:	c3                   	ret    
c0011426:	83 ec 0c             	sub    esp,0xc
c0011429:	68 9d 1d 02 c0       	push   0xc0021d9d
c001142e:	e8 0e dd ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011433:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011436:	e8 4d fb ff ff       	call   c0010f88 <displayDebugInfo(regs*)>

c001143b <pgFault(regs*, void*)>:
c001143b:	83 ec 18             	sub    esp,0x18
c001143e:	68 b8 1d 02 c0       	push   0xc0021db8
c0011443:	e8 f9 dc ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011448:	58                   	pop    eax
c0011449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001144d:	e8 36 fb ff ff       	call   c0010f88 <displayDebugInfo(regs*)>

c0011452 <otherISRHandler(regs*, void*)>:
c0011452:	53                   	push   ebx
c0011453:	83 ec 0c             	sub    esp,0xc
c0011456:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001145a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001145d:	50                   	push   eax
c001145e:	50                   	push   eax
c001145f:	68 c5 1d 02 c0       	push   0xc0021dc5
c0011464:	e8 d8 dc ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011469:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001146c:	e8 17 fb ff ff       	call   c0010f88 <displayDebugInfo(regs*)>

c0011471 <opcodeFault(regs*, void*)>:
c0011471:	55                   	push   ebp
c0011472:	89 e5                	mov    ebp,esp
c0011474:	56                   	push   esi
c0011475:	53                   	push   ebx
c0011476:	83 ec 40             	sub    esp,0x40
c0011479:	e8 22 33 00 00       	call   c00147a0 <thisCPU()>
c001147e:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011484:	84 c0                	test   al,al
c0011486:	74 24                	je     c00114ac <opcodeFault(regs*, void*)+0x3b>
c0011488:	83 ec 0c             	sub    esp,0xc
c001148b:	68 e4 1d 02 c0       	push   0xc0021de4
c0011490:	e8 ac dc ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011495:	83 c4 10             	add    esp,0x10
c0011498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001149e:	8d 50 19             	lea    edx,[eax+0x19]
c00114a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114a7:	e9 77 05 00 00       	jmp    c0011a23 <opcodeFault(regs*, void*)+0x5b2>
c00114ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00114b5:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00114b9:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00114bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114c3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00114c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114c9:	8a 00                	mov    al,BYTE PTR [eax]
c00114cb:	3c f0                	cmp    al,0xf0
c00114cd:	75 17                	jne    c00114e6 <opcodeFault(regs*, void*)+0x75>
c00114cf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114d8:	8d 50 01             	lea    edx,[eax+0x1]
c00114db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114e1:	e9 da 00 00 00       	jmp    c00115c0 <opcodeFault(regs*, void*)+0x14f>
c00114e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114e9:	8a 00                	mov    al,BYTE PTR [eax]
c00114eb:	3c f2                	cmp    al,0xf2
c00114ed:	74 09                	je     c00114f8 <opcodeFault(regs*, void*)+0x87>
c00114ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114f2:	8a 00                	mov    al,BYTE PTR [eax]
c00114f4:	3c f3                	cmp    al,0xf3
c00114f6:	75 1b                	jne    c0011513 <opcodeFault(regs*, void*)+0xa2>
c00114f8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00114fc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011502:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011505:	8d 50 01             	lea    edx,[eax+0x1]
c0011508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001150e:	e9 ad 00 00 00       	jmp    c00115c0 <opcodeFault(regs*, void*)+0x14f>
c0011513:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011516:	8a 00                	mov    al,BYTE PTR [eax]
c0011518:	3c 66                	cmp    al,0x66
c001151a:	75 1f                	jne    c001153b <opcodeFault(regs*, void*)+0xca>
c001151c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011520:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0011524:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001152d:	8d 50 01             	lea    edx,[eax+0x1]
c0011530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011533:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011536:	e9 85 00 00 00       	jmp    c00115c0 <opcodeFault(regs*, void*)+0x14f>
c001153b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001153e:	8a 00                	mov    al,BYTE PTR [eax]
c0011540:	3c 67                	cmp    al,0x67
c0011542:	75 18                	jne    c001155c <opcodeFault(regs*, void*)+0xeb>
c0011544:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011548:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001154b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011551:	8d 50 01             	lea    edx,[eax+0x1]
c0011554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011557:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001155a:	eb 64                	jmp    c00115c0 <opcodeFault(regs*, void*)+0x14f>
c001155c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001155f:	8a 00                	mov    al,BYTE PTR [eax]
c0011561:	3c 2e                	cmp    al,0x2e
c0011563:	74 09                	je     c001156e <opcodeFault(regs*, void*)+0xfd>
c0011565:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011568:	8a 00                	mov    al,BYTE PTR [eax]
c001156a:	3c 3e                	cmp    al,0x3e
c001156c:	75 18                	jne    c0011586 <opcodeFault(regs*, void*)+0x115>
c001156e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011572:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001157b:	8d 50 01             	lea    edx,[eax+0x1]
c001157e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011581:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011584:	eb 3a                	jmp    c00115c0 <opcodeFault(regs*, void*)+0x14f>
c0011586:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011589:	8a 00                	mov    al,BYTE PTR [eax]
c001158b:	3c 36                	cmp    al,0x36
c001158d:	74 1b                	je     c00115aa <opcodeFault(regs*, void*)+0x139>
c001158f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011592:	8a 00                	mov    al,BYTE PTR [eax]
c0011594:	3c 26                	cmp    al,0x26
c0011596:	74 12                	je     c00115aa <opcodeFault(regs*, void*)+0x139>
c0011598:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001159b:	8a 00                	mov    al,BYTE PTR [eax]
c001159d:	3c 64                	cmp    al,0x64
c001159f:	74 09                	je     c00115aa <opcodeFault(regs*, void*)+0x139>
c00115a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115a4:	8a 00                	mov    al,BYTE PTR [eax]
c00115a6:	3c 65                	cmp    al,0x65
c00115a8:	75 16                	jne    c00115c0 <opcodeFault(regs*, void*)+0x14f>
c00115aa:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115ae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115b7:	8d 50 01             	lea    edx,[eax+0x1]
c00115ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115bd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115c3:	8a 00                	mov    al,BYTE PTR [eax]
c00115c5:	3c 0f                	cmp    al,0xf
c00115c7:	0f 85 ad 00 00 00    	jne    c001167a <opcodeFault(regs*, void*)+0x209>
c00115cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115d0:	40                   	inc    eax
c00115d1:	8a 00                	mov    al,BYTE PTR [eax]
c00115d3:	3c c2                	cmp    al,0xc2
c00115d5:	74 0e                	je     c00115e5 <opcodeFault(regs*, void*)+0x174>
c00115d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115da:	40                   	inc    eax
c00115db:	8a 00                	mov    al,BYTE PTR [eax]
c00115dd:	3c c3                	cmp    al,0xc3
c00115df:	0f 85 95 00 00 00    	jne    c001167a <opcodeFault(regs*, void*)+0x209>
c00115e5:	83 ec 0c             	sub    esp,0xc
c00115e8:	68 07 1e 02 c0       	push   0xc0021e07
c00115ed:	e8 4f db ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00115f2:	83 c4 10             	add    esp,0x10
c00115f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115fb:	8d 50 01             	lea    edx,[eax+0x1]
c00115fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011601:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011604:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011607:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001160a:	8a 00                	mov    al,BYTE PTR [eax]
c001160c:	8d 50 fe             	lea    edx,[eax-0x2]
c001160f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011612:	88 10                	mov    BYTE PTR [eax],dl
c0011614:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0011617:	50                   	push   eax
c0011618:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001161b:	50                   	push   eax
c001161c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001161f:	50                   	push   eax
c0011620:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011623:	e8 e4 40 00 00       	call   c001570c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011628:	83 c4 10             	add    esp,0x10
c001162b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011631:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011634:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0011637:	01 d0                	add    eax,edx
c0011639:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001163c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001163f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011642:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011645:	48                   	dec    eax
c0011646:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001164f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011655:	83 ec 04             	sub    esp,0x4
c0011658:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001165b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001165e:	50                   	push   eax
c001165f:	e8 ec ea fe ff       	call   c0000150 <voodooXADD>
c0011664:	83 c4 10             	add    esp,0x10
c0011667:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001166a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001166d:	01 c2                	add    edx,eax
c001166f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011672:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011675:	e9 a9 03 00 00       	jmp    c0011a23 <opcodeFault(regs*, void*)+0x5b2>
c001167a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001167d:	8a 00                	mov    al,BYTE PTR [eax]
c001167f:	3c 0f                	cmp    al,0xf
c0011681:	0f 85 8b 01 00 00    	jne    c0011812 <opcodeFault(regs*, void*)+0x3a1>
c0011687:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001168a:	40                   	inc    eax
c001168b:	8a 00                	mov    al,BYTE PTR [eax]
c001168d:	3c c7                	cmp    al,0xc7
c001168f:	0f 86 7d 01 00 00    	jbe    c0011812 <opcodeFault(regs*, void*)+0x3a1>
c0011695:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011698:	40                   	inc    eax
c0011699:	8a 00                	mov    al,BYTE PTR [eax]
c001169b:	3c cf                	cmp    al,0xcf
c001169d:	0f 87 6f 01 00 00    	ja     c0011812 <opcodeFault(regs*, void*)+0x3a1>
c00116a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116a6:	40                   	inc    eax
c00116a7:	8a 00                	mov    al,BYTE PTR [eax]
c00116a9:	83 c0 38             	add    eax,0x38
c00116ac:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00116af:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00116b3:	75 0b                	jne    c00116c0 <opcodeFault(regs*, void*)+0x24f>
c00116b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116b8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00116bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116be:	eb 75                	jmp    c0011735 <opcodeFault(regs*, void*)+0x2c4>
c00116c0:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00116c4:	75 0b                	jne    c00116d1 <opcodeFault(regs*, void*)+0x260>
c00116c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00116cc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116cf:	eb 64                	jmp    c0011735 <opcodeFault(regs*, void*)+0x2c4>
c00116d1:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00116d5:	75 0b                	jne    c00116e2 <opcodeFault(regs*, void*)+0x271>
c00116d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116da:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00116dd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116e0:	eb 53                	jmp    c0011735 <opcodeFault(regs*, void*)+0x2c4>
c00116e2:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00116e6:	75 0b                	jne    c00116f3 <opcodeFault(regs*, void*)+0x282>
c00116e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116f1:	eb 42                	jmp    c0011735 <opcodeFault(regs*, void*)+0x2c4>
c00116f3:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00116f7:	75 0b                	jne    c0011704 <opcodeFault(regs*, void*)+0x293>
c00116f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116fc:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00116ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011702:	eb 31                	jmp    c0011735 <opcodeFault(regs*, void*)+0x2c4>
c0011704:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0011708:	75 0b                	jne    c0011715 <opcodeFault(regs*, void*)+0x2a4>
c001170a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001170d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011710:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011713:	eb 20                	jmp    c0011735 <opcodeFault(regs*, void*)+0x2c4>
c0011715:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0011719:	75 0b                	jne    c0011726 <opcodeFault(regs*, void*)+0x2b5>
c001171b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001171e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011721:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011724:	eb 0f                	jmp    c0011735 <opcodeFault(regs*, void*)+0x2c4>
c0011726:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001172a:	75 09                	jne    c0011735 <opcodeFault(regs*, void*)+0x2c4>
c001172c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001172f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011732:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011735:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0011739:	74 10                	je     c001174b <opcodeFault(regs*, void*)+0x2da>
c001173b:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011742:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0011749:	eb 2d                	jmp    c0011778 <opcodeFault(regs*, void*)+0x307>
c001174b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001174e:	c1 e0 18             	shl    eax,0x18
c0011751:	89 c2                	mov    edx,eax
c0011753:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011756:	c1 e0 08             	shl    eax,0x8
c0011759:	25 00 00 ff 00       	and    eax,0xff0000
c001175e:	09 c2                	or     edx,eax
c0011760:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011763:	c1 e8 08             	shr    eax,0x8
c0011766:	25 00 ff 00 00       	and    eax,0xff00
c001176b:	09 c2                	or     edx,eax
c001176d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011770:	c1 e8 18             	shr    eax,0x18
c0011773:	09 d0                	or     eax,edx
c0011775:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011778:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001177c:	75 0b                	jne    c0011789 <opcodeFault(regs*, void*)+0x318>
c001177e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011781:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011784:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011787:	eb 75                	jmp    c00117fe <opcodeFault(regs*, void*)+0x38d>
c0011789:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001178d:	75 0b                	jne    c001179a <opcodeFault(regs*, void*)+0x329>
c001178f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011792:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011795:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011798:	eb 64                	jmp    c00117fe <opcodeFault(regs*, void*)+0x38d>
c001179a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001179e:	75 0b                	jne    c00117ab <opcodeFault(regs*, void*)+0x33a>
c00117a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117a6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00117a9:	eb 53                	jmp    c00117fe <opcodeFault(regs*, void*)+0x38d>
c00117ab:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117af:	75 0b                	jne    c00117bc <opcodeFault(regs*, void*)+0x34b>
c00117b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117b7:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00117ba:	eb 42                	jmp    c00117fe <opcodeFault(regs*, void*)+0x38d>
c00117bc:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117c0:	75 0b                	jne    c00117cd <opcodeFault(regs*, void*)+0x35c>
c00117c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117c8:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00117cb:	eb 31                	jmp    c00117fe <opcodeFault(regs*, void*)+0x38d>
c00117cd:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117d1:	75 0b                	jne    c00117de <opcodeFault(regs*, void*)+0x36d>
c00117d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117dc:	eb 20                	jmp    c00117fe <opcodeFault(regs*, void*)+0x38d>
c00117de:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117e2:	75 0b                	jne    c00117ef <opcodeFault(regs*, void*)+0x37e>
c00117e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117ea:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00117ed:	eb 0f                	jmp    c00117fe <opcodeFault(regs*, void*)+0x38d>
c00117ef:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117f3:	75 09                	jne    c00117fe <opcodeFault(regs*, void*)+0x38d>
c00117f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117fb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00117fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011801:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011804:	8d 50 02             	lea    edx,[eax+0x2]
c0011807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001180a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001180d:	e9 11 02 00 00       	jmp    c0011a23 <opcodeFault(regs*, void*)+0x5b2>
c0011812:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011815:	8a 00                	mov    al,BYTE PTR [eax]
c0011817:	3c 0f                	cmp    al,0xf
c0011819:	0f 85 76 01 00 00    	jne    c0011995 <opcodeFault(regs*, void*)+0x524>
c001181f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011822:	40                   	inc    eax
c0011823:	8a 00                	mov    al,BYTE PTR [eax]
c0011825:	3c c7                	cmp    al,0xc7
c0011827:	0f 85 68 01 00 00    	jne    c0011995 <opcodeFault(regs*, void*)+0x524>
c001182d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011833:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011836:	8d 50 01             	lea    edx,[eax+0x1]
c0011839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001183c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001183f:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011842:	50                   	push   eax
c0011843:	8d 45 bb             	lea    eax,[ebp-0x45]
c0011846:	50                   	push   eax
c0011847:	8d 45 bc             	lea    eax,[ebp-0x44]
c001184a:	50                   	push   eax
c001184b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001184e:	e8 b9 3e 00 00       	call   c001570c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011853:	83 c4 10             	add    esp,0x10
c0011856:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011859:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001185c:	83 f0 01             	xor    eax,0x1
c001185f:	84 c0                	test   al,al
c0011861:	0f 84 2e 01 00 00    	je     c0011995 <opcodeFault(regs*, void*)+0x524>
c0011867:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001186a:	3c 01                	cmp    al,0x1
c001186c:	0f 85 23 01 00 00    	jne    c0011995 <opcodeFault(regs*, void*)+0x524>
c0011872:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011875:	83 f0 01             	xor    eax,0x1
c0011878:	84 c0                	test   al,al
c001187a:	0f 84 15 01 00 00    	je     c0011995 <opcodeFault(regs*, void*)+0x524>
c0011880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011883:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011886:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011889:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0011890:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011893:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011896:	89 c2                	mov    edx,eax
c0011898:	b8 00 00 00 00       	mov    eax,0x0
c001189d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00118a0:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00118a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00118a9:	ba 00 00 00 00       	mov    edx,0x0
c00118ae:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00118b1:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00118b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00118ba:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118bd:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00118c4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118c7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00118ca:	89 c2                	mov    edx,eax
c00118cc:	b8 00 00 00 00       	mov    eax,0x0
c00118d1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118d4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00118d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118da:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118dd:	ba 00 00 00 00       	mov    edx,0x0
c00118e2:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00118e5:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00118e8:	e8 0c 70 00 00       	call   c00188f9 <lockScheduler()>
c00118ed:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00118f0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00118f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00118f5:	89 c1                	mov    ecx,eax
c00118f7:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00118fa:	89 cb                	mov    ebx,ecx
c00118fc:	89 d0                	mov    eax,edx
c00118fe:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0011901:	89 c6                	mov    esi,eax
c0011903:	89 f0                	mov    eax,esi
c0011905:	09 d8                	or     eax,ebx
c0011907:	85 c0                	test   eax,eax
c0011909:	75 21                	jne    c001192c <opcodeFault(regs*, void*)+0x4bb>
c001190b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001190e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0011911:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0011914:	89 01                	mov    DWORD PTR [ecx],eax
c0011916:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011919:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001191f:	83 c8 40             	or     eax,0x40
c0011922:	89 c2                	mov    edx,eax
c0011924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011927:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001192a:	eb 3e                	jmp    c001196a <opcodeFault(regs*, void*)+0x4f9>
c001192c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001192f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011932:	8b 00                	mov    eax,DWORD PTR [eax]
c0011934:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011937:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001193a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001193d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011940:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011943:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011946:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011949:	89 d0                	mov    eax,edx
c001194b:	31 d2                	xor    edx,edx
c001194d:	89 c3                	mov    ebx,eax
c001194f:	89 d6                	mov    esi,edx
c0011951:	89 da                	mov    edx,ebx
c0011953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011956:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001195f:	83 e0 bf             	and    eax,0xffffffbf
c0011962:	89 c2                	mov    edx,eax
c0011964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011967:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001196a:	e8 8c 6f 00 00       	call   c00188fb <unlockScheduler()>
c001196f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011972:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011975:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011978:	01 c2                	add    edx,eax
c001197a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001197d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011980:	83 ec 0c             	sub    esp,0xc
c0011983:	68 16 1e 02 c0       	push   0xc0021e16
c0011988:	e8 b4 d7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	e9 8e 00 00 00       	jmp    c0011a23 <opcodeFault(regs*, void*)+0x5b2>
c0011995:	83 ec 0c             	sub    esp,0xc
c0011998:	68 29 1e 02 c0       	push   0xc0021e29
c001199d:	e8 9f d7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00119a2:	83 c4 10             	add    esp,0x10
c00119a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119b1:	c1 e0 04             	shl    eax,0x4
c00119b4:	01 d0                	add    eax,edx
c00119b6:	83 c0 03             	add    eax,0x3
c00119b9:	8a 00                	mov    al,BYTE PTR [eax]
c00119bb:	0f b6 d8             	movzx  ebx,al
c00119be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119ca:	c1 e0 04             	shl    eax,0x4
c00119cd:	01 d0                	add    eax,edx
c00119cf:	83 c0 02             	add    eax,0x2
c00119d2:	8a 00                	mov    al,BYTE PTR [eax]
c00119d4:	0f b6 c8             	movzx  ecx,al
c00119d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119da:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119e3:	c1 e0 04             	shl    eax,0x4
c00119e6:	01 d0                	add    eax,edx
c00119e8:	40                   	inc    eax
c00119e9:	8a 00                	mov    al,BYTE PTR [eax]
c00119eb:	0f b6 d0             	movzx  edx,al
c00119ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f1:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00119f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119fa:	c1 e0 04             	shl    eax,0x4
c00119fd:	01 f0                	add    eax,esi
c00119ff:	8a 00                	mov    al,BYTE PTR [eax]
c0011a01:	0f b6 c0             	movzx  eax,al
c0011a04:	83 ec 0c             	sub    esp,0xc
c0011a07:	53                   	push   ebx
c0011a08:	51                   	push   ecx
c0011a09:	52                   	push   edx
c0011a0a:	50                   	push   eax
c0011a0b:	68 3c 1e 02 c0       	push   0xc0021e3c
c0011a10:	e8 2c d7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011a15:	83 c4 20             	add    esp,0x20
c0011a18:	83 ec 0c             	sub    esp,0xc
c0011a1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011a1e:	e8 65 f5 ff ff       	call   c0010f88 <displayDebugInfo(regs*)>
c0011a23:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011a26:	5b                   	pop    ebx
c0011a27:	5e                   	pop    esi
c0011a28:	5d                   	pop    ebp
c0011a29:	c3                   	ret    

c0011a2a <displayProgramFault(char const*)>:
c0011a2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a32:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011a38:	85 c0                	test   eax,eax
c0011a3a:	74 15                	je     c0011a51 <displayProgramFault(char const*)+0x27>
c0011a3c:	83 ec 0c             	sub    esp,0xc
c0011a3f:	6a 04                	push   0x4
c0011a41:	6a 0f                	push   0xf
c0011a43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a47:	50                   	push   eax
c0011a48:	e8 c9 b9 ff ff       	call   c000d416 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011a4d:	83 c4 1c             	add    esp,0x1c
c0011a50:	c3                   	ret    
c0011a51:	c3                   	ret    

c0011a52 <setupInterruptController()>:
c0011a52:	55                   	push   ebp
c0011a53:	89 e5                	mov    ebp,esp
c0011a55:	53                   	push   ebx
c0011a56:	83 ec 14             	sub    esp,0x14
c0011a59:	e8 3f 2d 00 00       	call   c001479d <getCPUNumber()>
c0011a5e:	85 c0                	test   eax,eax
c0011a60:	0f 95 c0             	setne  al
c0011a63:	84 c0                	test   al,al
c0011a65:	74 56                	je     c0011abd <setupInterruptController()+0x6b>
c0011a67:	83 ec 0c             	sub    esp,0xc
c0011a6a:	68 58 21 00 00       	push   0x2158
c0011a6f:	e8 98 d5 ff ff       	call   c000f00c <operator new(unsigned long)>
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	89 c3                	mov    ebx,eax
c0011a79:	83 ec 0c             	sub    esp,0xc
c0011a7c:	53                   	push   ebx
c0011a7d:	e8 c2 c8 00 00       	call   c001e344 <APIC::APIC()>
c0011a82:	83 c4 10             	add    esp,0x10
c0011a85:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011a88:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011a8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a90:	83 c0 08             	add    eax,0x8
c0011a93:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a95:	6a 00                	push   0x0
c0011a97:	6a 00                	push   0x0
c0011a99:	6a 00                	push   0x0
c0011a9b:	52                   	push   edx
c0011a9c:	ff d0                	call   eax
c0011a9e:	83 c4 10             	add    esp,0x10
c0011aa1:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0011aa6:	83 ec 08             	sub    esp,0x8
c0011aa9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011aac:	50                   	push   eax
c0011aad:	e8 a4 ea ff ff       	call   c0010556 <Device::addChild(Device*)>
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011ab8:	e9 48 03 00 00       	jmp    c0011e05 <setupInterruptController()+0x3b3>
c0011abd:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0011ac2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ac8:	83 e0 01             	and    eax,0x1
c0011acb:	84 c0                	test   al,al
c0011acd:	0f 95 c0             	setne  al
c0011ad0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011ad3:	83 ec 0c             	sub    esp,0xc
c0011ad6:	68 58 21 00 00       	push   0x2158
c0011adb:	e8 2c d5 ff ff       	call   c000f00c <operator new(unsigned long)>
c0011ae0:	83 c4 10             	add    esp,0x10
c0011ae3:	89 c3                	mov    ebx,eax
c0011ae5:	83 ec 0c             	sub    esp,0xc
c0011ae8:	53                   	push   ebx
c0011ae9:	e8 50 cd 00 00       	call   c001e83e <PIC::PIC()>
c0011aee:	83 c4 10             	add    esp,0x10
c0011af1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011af4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011afc:	83 c0 08             	add    eax,0x8
c0011aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b01:	6a 00                	push   0x0
c0011b03:	6a 00                	push   0x0
c0011b05:	6a 00                	push   0x0
c0011b07:	52                   	push   edx
c0011b08:	ff d0                	call   eax
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011b11:	74 6e                	je     c0011b81 <setupInterruptController()+0x12f>
c0011b13:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b19:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b1b:	83 c0 0c             	add    eax,0xc
c0011b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b20:	6a 00                	push   0x0
c0011b22:	6a 00                	push   0x0
c0011b24:	6a 00                	push   0x0
c0011b26:	52                   	push   edx
c0011b27:	ff d0                	call   eax
c0011b29:	83 c4 10             	add    esp,0x10
c0011b2c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011b30:	74 15                	je     c0011b47 <setupInterruptController()+0xf5>
c0011b32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b37:	83 c0 04             	add    eax,0x4
c0011b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b3c:	83 ec 0c             	sub    esp,0xc
c0011b3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b42:	ff d0                	call   eax
c0011b44:	83 c4 10             	add    esp,0x10
c0011b47:	83 ec 0c             	sub    esp,0xc
c0011b4a:	68 58 21 00 00       	push   0x2158
c0011b4f:	e8 b8 d4 ff ff       	call   c000f00c <operator new(unsigned long)>
c0011b54:	83 c4 10             	add    esp,0x10
c0011b57:	89 c3                	mov    ebx,eax
c0011b59:	83 ec 0c             	sub    esp,0xc
c0011b5c:	53                   	push   ebx
c0011b5d:	e8 e2 c7 00 00       	call   c001e344 <APIC::APIC()>
c0011b62:	83 c4 10             	add    esp,0x10
c0011b65:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b68:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b70:	83 c0 08             	add    eax,0x8
c0011b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b75:	6a 00                	push   0x0
c0011b77:	6a 00                	push   0x0
c0011b79:	6a 00                	push   0x0
c0011b7b:	52                   	push   edx
c0011b7c:	ff d0                	call   eax
c0011b7e:	83 c4 10             	add    esp,0x10
c0011b81:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0011b86:	83 ec 08             	sub    esp,0x8
c0011b89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b8c:	50                   	push   eax
c0011b8d:	e8 c4 e9 ff ff       	call   c0010556 <Device::addChild(Device*)>
c0011b92:	83 c4 10             	add    esp,0x10
c0011b95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b9a:	83 c0 24             	add    eax,0x24
c0011b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b9f:	6a 00                	push   0x0
c0011ba1:	68 52 14 01 c0       	push   0xc0011452
c0011ba6:	6a 00                	push   0x0
c0011ba8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bab:	ff d0                	call   eax
c0011bad:	83 c4 10             	add    esp,0x10
c0011bb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb5:	83 c0 24             	add    eax,0x24
c0011bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bba:	6a 00                	push   0x0
c0011bbc:	68 52 14 01 c0       	push   0xc0011452
c0011bc1:	6a 01                	push   0x1
c0011bc3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bc6:	ff d0                	call   eax
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd0:	83 c0 24             	add    eax,0x24
c0011bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd5:	6a 00                	push   0x0
c0011bd7:	68 eb 0d 01 c0       	push   0xc0010deb
c0011bdc:	6a 02                	push   0x2
c0011bde:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011be1:	ff d0                	call   eax
c0011be3:	83 c4 10             	add    esp,0x10
c0011be6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011beb:	83 c0 24             	add    eax,0x24
c0011bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf0:	6a 00                	push   0x0
c0011bf2:	68 52 14 01 c0       	push   0xc0011452
c0011bf7:	6a 03                	push   0x3
c0011bf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bfc:	ff d0                	call   eax
c0011bfe:	83 c4 10             	add    esp,0x10
c0011c01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c06:	83 c0 24             	add    eax,0x24
c0011c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0b:	6a 00                	push   0x0
c0011c0d:	68 52 14 01 c0       	push   0xc0011452
c0011c12:	6a 04                	push   0x4
c0011c14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c17:	ff d0                	call   eax
c0011c19:	83 c4 10             	add    esp,0x10
c0011c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c21:	83 c0 24             	add    eax,0x24
c0011c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c26:	6a 00                	push   0x0
c0011c28:	68 52 14 01 c0       	push   0xc0011452
c0011c2d:	6a 05                	push   0x5
c0011c2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c32:	ff d0                	call   eax
c0011c34:	83 c4 10             	add    esp,0x10
c0011c37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3c:	83 c0 24             	add    eax,0x24
c0011c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c41:	6a 00                	push   0x0
c0011c43:	68 71 14 01 c0       	push   0xc0011471
c0011c48:	6a 06                	push   0x6
c0011c4a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c4d:	ff d0                	call   eax
c0011c4f:	83 c4 10             	add    esp,0x10
c0011c52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c57:	83 c0 24             	add    eax,0x24
c0011c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c5c:	6a 00                	push   0x0
c0011c5e:	68 9f 13 01 c0       	push   0xc001139f
c0011c63:	6a 07                	push   0x7
c0011c65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c68:	ff d0                	call   eax
c0011c6a:	83 c4 10             	add    esp,0x10
c0011c6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c72:	83 c0 24             	add    eax,0x24
c0011c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c77:	6a 00                	push   0x0
c0011c79:	68 06 0c 01 c0       	push   0xc0010c06
c0011c7e:	6a 08                	push   0x8
c0011c80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c83:	ff d0                	call   eax
c0011c85:	83 c4 10             	add    esp,0x10
c0011c88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8d:	83 c0 24             	add    eax,0x24
c0011c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c92:	6a 00                	push   0x0
c0011c94:	68 52 14 01 c0       	push   0xc0011452
c0011c99:	6a 09                	push   0x9
c0011c9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c9e:	ff d0                	call   eax
c0011ca0:	83 c4 10             	add    esp,0x10
c0011ca3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca8:	83 c0 24             	add    eax,0x24
c0011cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cad:	6a 00                	push   0x0
c0011caf:	68 52 14 01 c0       	push   0xc0011452
c0011cb4:	6a 0a                	push   0xa
c0011cb6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cb9:	ff d0                	call   eax
c0011cbb:	83 c4 10             	add    esp,0x10
c0011cbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc3:	83 c0 24             	add    eax,0x24
c0011cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc8:	6a 00                	push   0x0
c0011cca:	68 52 14 01 c0       	push   0xc0011452
c0011ccf:	6a 0b                	push   0xb
c0011cd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cd4:	ff d0                	call   eax
c0011cd6:	83 c4 10             	add    esp,0x10
c0011cd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cde:	83 c0 24             	add    eax,0x24
c0011ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce3:	6a 00                	push   0x0
c0011ce5:	68 52 14 01 c0       	push   0xc0011452
c0011cea:	6a 0c                	push   0xc
c0011cec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cef:	ff d0                	call   eax
c0011cf1:	83 c4 10             	add    esp,0x10
c0011cf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf9:	83 c0 24             	add    eax,0x24
c0011cfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cfe:	6a 00                	push   0x0
c0011d00:	68 02 14 01 c0       	push   0xc0011402
c0011d05:	6a 0d                	push   0xd
c0011d07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d0a:	ff d0                	call   eax
c0011d0c:	83 c4 10             	add    esp,0x10
c0011d0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d14:	83 c0 24             	add    eax,0x24
c0011d17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d19:	6a 00                	push   0x0
c0011d1b:	68 3b 14 01 c0       	push   0xc001143b
c0011d20:	6a 0e                	push   0xe
c0011d22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d25:	ff d0                	call   eax
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2f:	83 c0 24             	add    eax,0x24
c0011d32:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d34:	6a 00                	push   0x0
c0011d36:	68 52 14 01 c0       	push   0xc0011452
c0011d3b:	6a 0f                	push   0xf
c0011d3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d40:	ff d0                	call   eax
c0011d42:	83 c4 10             	add    esp,0x10
c0011d45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4a:	83 c0 24             	add    eax,0x24
c0011d4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4f:	6a 00                	push   0x0
c0011d51:	68 52 14 01 c0       	push   0xc0011452
c0011d56:	6a 10                	push   0x10
c0011d58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d5b:	ff d0                	call   eax
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d65:	83 c0 24             	add    eax,0x24
c0011d68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d6a:	6a 00                	push   0x0
c0011d6c:	68 52 14 01 c0       	push   0xc0011452
c0011d71:	6a 11                	push   0x11
c0011d73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d76:	ff d0                	call   eax
c0011d78:	83 c4 10             	add    esp,0x10
c0011d7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d80:	83 c0 24             	add    eax,0x24
c0011d83:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d85:	6a 00                	push   0x0
c0011d87:	68 52 14 01 c0       	push   0xc0011452
c0011d8c:	6a 12                	push   0x12
c0011d8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d91:	ff d0                	call   eax
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d99:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9b:	83 c0 24             	add    eax,0x24
c0011d9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da0:	6a 00                	push   0x0
c0011da2:	68 52 14 01 c0       	push   0xc0011452
c0011da7:	6a 13                	push   0x13
c0011da9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dac:	ff d0                	call   eax
c0011dae:	83 c4 10             	add    esp,0x10
c0011db1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011db4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db6:	83 c0 24             	add    eax,0x24
c0011db9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbb:	6a 00                	push   0x0
c0011dbd:	68 52 14 01 c0       	push   0xc0011452
c0011dc2:	6a 14                	push   0x14
c0011dc4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dc7:	ff d0                	call   eax
c0011dc9:	83 c4 10             	add    esp,0x10
c0011dcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd1:	83 c0 24             	add    eax,0x24
c0011dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd6:	6a 00                	push   0x0
c0011dd8:	68 52 14 01 c0       	push   0xc0011452
c0011ddd:	6a 1e                	push   0x1e
c0011ddf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011de2:	ff d0                	call   eax
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dea:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dec:	83 c0 24             	add    eax,0x24
c0011def:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df1:	6a 00                	push   0x0
c0011df3:	68 01 73 01 c0       	push   0xc0017301
c0011df8:	6a 60                	push   0x60
c0011dfa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dfd:	ff d0                	call   eax
c0011dff:	83 c4 10             	add    esp,0x10
c0011e02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e05:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011e08:	c9                   	leave  
c0011e09:	c3                   	ret    

c0011e0a <InterruptController::convertLegacyIRQNumber(int)>:
c0011e0a:	55                   	push   ebp
c0011e0b:	89 e5                	mov    ebp,esp
c0011e0d:	83 ec 08             	sub    esp,0x8
c0011e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e13:	83 ec 0c             	sub    esp,0xc
c0011e16:	50                   	push   eax
c0011e17:	e8 1c ea ff ff       	call   c0010838 <Device::getName()>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	8a 00                	mov    al,BYTE PTR [eax]
c0011e21:	3c 41                	cmp    al,0x41
c0011e23:	0f 94 c0             	sete   al
c0011e26:	84 c0                	test   al,al
c0011e28:	74 28                	je     c0011e52 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e2a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011e2e:	7f 12                	jg     c0011e42 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011e30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e33:	05 80 3c 02 c0       	add    eax,0xc0023c80
c0011e38:	8a 00                	mov    al,BYTE PTR [eax]
c0011e3a:	0f b6 c0             	movzx  eax,al
c0011e3d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011e40:	eb 10                	jmp    c0011e52 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e42:	83 ec 0c             	sub    esp,0xc
c0011e45:	68 b4 1b 02 c0       	push   0xc0021bb4
c0011e4a:	e8 bd 3a 00 00       	call   c001590c <Krnl::panic(char const*)>
c0011e4f:	83 c4 10             	add    esp,0x10
c0011e52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e55:	c9                   	leave  
c0011e56:	c3                   	ret    
c0011e57:	90                   	nop

c0011e58 <startGUI(void*)>:
c0011e58:	55                   	push   ebp
c0011e59:	89 e5                	mov    ebp,esp
c0011e5b:	53                   	push   ebx
c0011e5c:	83 ec 04             	sub    esp,0x4
c0011e5f:	e8 97 6a 00 00       	call   c00188fb <unlockScheduler()>
c0011e64:	e8 7b 6a 00 00       	call   c00188e4 <getIRQNestingLevel()>
c0011e69:	83 ec 08             	sub    esp,0x8
c0011e6c:	50                   	push   eax
c0011e6d:	68 a4 1e 02 c0       	push   0xc0021ea4
c0011e72:	e8 ca d2 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0011e77:	83 c4 10             	add    esp,0x10
c0011e7a:	8b 1d 28 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024528
c0011e80:	83 ec 08             	sub    esp,0x8
c0011e83:	6a 01                	push   0x1
c0011e85:	68 be 1e 02 c0       	push   0xc0021ebe
c0011e8a:	e8 85 64 00 00       	call   c0018314 <Thr::loadDLL(char const*, bool)>
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	83 ec 08             	sub    esp,0x8
c0011e95:	53                   	push   ebx
c0011e96:	50                   	push   eax
c0011e97:	e8 3e 66 00 00       	call   c00184da <Thr::executeDLL(unsigned long, void*)>
c0011e9c:	83 c4 10             	add    esp,0x10
c0011e9f:	8b 1d 28 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024528
c0011ea5:	83 ec 08             	sub    esp,0x8
c0011ea8:	6a 01                	push   0x1
c0011eaa:	68 d8 1e 02 c0       	push   0xc0021ed8
c0011eaf:	e8 60 64 00 00       	call   c0018314 <Thr::loadDLL(char const*, bool)>
c0011eb4:	83 c4 10             	add    esp,0x10
c0011eb7:	83 ec 08             	sub    esp,0x8
c0011eba:	53                   	push   ebx
c0011ebb:	50                   	push   eax
c0011ebc:	e8 19 66 00 00       	call   c00184da <Thr::executeDLL(unsigned long, void*)>
c0011ec1:	83 c4 10             	add    esp,0x10
c0011ec4:	90                   	nop
c0011ec5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ec8:	c9                   	leave  
c0011ec9:	c3                   	ret    

c0011eca <sendKeyToTerminal(unsigned char)>:
c0011eca:	55                   	push   ebp
c0011ecb:	89 e5                	mov    ebp,esp
c0011ecd:	83 ec 28             	sub    esp,0x28
c0011ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ed3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011ed6:	8b 15 e4 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245e4
c0011edc:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011edf:	25 ff 00 00 00       	and    eax,0xff
c0011ee4:	83 ec 08             	sub    esp,0x8
c0011ee7:	50                   	push   eax
c0011ee8:	52                   	push   edx
c0011ee9:	e8 66 ba ff ff       	call   c000d954 <VgaText::receiveKey(unsigned char)>
c0011eee:	83 c4 10             	add    esp,0x10
c0011ef1:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011ef5:	75 41                	jne    c0011f38 <sendKeyToTerminal(unsigned char)+0x6e>
c0011ef7:	e8 24 6a 00 00       	call   c0018920 <lockStuff()>
c0011efc:	a1 c0 46 02 c0       	mov    eax,ds:0xc00246c0
c0011f01:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f04:	c7 05 c0 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246c0,0x0
c0011f0e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011f12:	74 1f                	je     c0011f33 <sendKeyToTerminal(unsigned char)+0x69>
c0011f14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011f17:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011f1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011f1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f20:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f23:	83 ec 0c             	sub    esp,0xc
c0011f26:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011f29:	e8 ef 6f 00 00       	call   c0018f1d <unblockTask(ThreadControlBlock*)>
c0011f2e:	83 c4 10             	add    esp,0x10
c0011f31:	eb db                	jmp    c0011f0e <sendKeyToTerminal(unsigned char)+0x44>
c0011f33:	e8 8f 6d 00 00       	call   c0018cc7 <unlockStuff()>
c0011f38:	90                   	nop
c0011f39:	c9                   	leave  
c0011f3a:	c3                   	ret    

c0011f3b <sendKeyboardToken(KeyboardToken)>:
c0011f3b:	55                   	push   ebp
c0011f3c:	89 e5                	mov    ebp,esp
c0011f3e:	83 ec 18             	sub    esp,0x18
c0011f41:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f47:	25 ff ff 00 00       	and    eax,0xffff
c0011f4c:	83 f2 01             	xor    edx,0x1
c0011f4f:	88 90 e0 46 02 c0    	mov    BYTE PTR [eax-0x3ffdb920],dl
c0011f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f58:	66 3d 03 02          	cmp    ax,0x203
c0011f5c:	75 07                	jne    c0011f65 <sendKeyboardToken(KeyboardToken)+0x2a>
c0011f5e:	a0 e0 47 02 c0       	mov    al,ds:0xc00247e0
c0011f63:	84 c0                	test   al,al
c0011f65:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011f69:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011f6c:	a0 e8 4a 02 c0       	mov    al,ds:0xc0024ae8
c0011f71:	38 c2                	cmp    dl,al
c0011f73:	74 1e                	je     c0011f93 <sendKeyboardToken(KeyboardToken)+0x58>
c0011f75:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011f78:	a2 e8 4a 02 c0       	mov    ds:0xc0024ae8,al
c0011f7d:	a0 e8 4a 02 c0       	mov    al,ds:0xc0024ae8
c0011f82:	25 ff 00 00 00       	and    eax,0xff
c0011f87:	83 ec 0c             	sub    esp,0xc
c0011f8a:	50                   	push   eax
c0011f8b:	e8 30 ac ff ff       	call   c000cbc0 <setTerminalScrollLock(bool)>
c0011f90:	83 c4 10             	add    esp,0x10
c0011f93:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011f96:	84 c0                	test   al,al
c0011f98:	0f 84 ae 00 00 00    	je     c001204c <sendKeyboardToken(KeyboardToken)+0x111>
c0011f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fa1:	66 3d 10 03          	cmp    ax,0x310
c0011fa5:	75 06                	jne    c0011fad <sendKeyboardToken(KeyboardToken)+0x72>
c0011fa7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fb0:	66 3d 11 03          	cmp    ax,0x311
c0011fb4:	75 06                	jne    c0011fbc <sendKeyboardToken(KeyboardToken)+0x81>
c0011fb6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fbf:	66 3d 12 03          	cmp    ax,0x312
c0011fc3:	75 06                	jne    c0011fcb <sendKeyboardToken(KeyboardToken)+0x90>
c0011fc5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fce:	66 3d 13 03          	cmp    ax,0x313
c0011fd2:	75 06                	jne    c0011fda <sendKeyboardToken(KeyboardToken)+0x9f>
c0011fd4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fdd:	66 3d 14 03          	cmp    ax,0x314
c0011fe1:	75 06                	jne    c0011fe9 <sendKeyboardToken(KeyboardToken)+0xae>
c0011fe3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fec:	66 3d 15 03          	cmp    ax,0x315
c0011ff0:	75 06                	jne    c0011ff8 <sendKeyboardToken(KeyboardToken)+0xbd>
c0011ff2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ffb:	66 3d 16 03          	cmp    ax,0x316
c0011fff:	75 06                	jne    c0012007 <sendKeyboardToken(KeyboardToken)+0xcc>
c0012001:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0012007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001200a:	66 3d 17 03          	cmp    ax,0x317
c001200e:	75 06                	jne    c0012016 <sendKeyboardToken(KeyboardToken)+0xdb>
c0012010:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0012016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012019:	66 3d 18 03          	cmp    ax,0x318
c001201d:	75 06                	jne    c0012025 <sendKeyboardToken(KeyboardToken)+0xea>
c001201f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0012025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012028:	66 3d 19 03          	cmp    ax,0x319
c001202c:	75 06                	jne    c0012034 <sendKeyboardToken(KeyboardToken)+0xf9>
c001202e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0012034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012037:	66 3d 1a 03          	cmp    ax,0x31a
c001203b:	0f 85 c9 00 00 00    	jne    c001210a <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012041:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0012047:	e9 be 00 00 00       	jmp    c001210a <sendKeyboardToken(KeyboardToken)+0x1cf>
c001204c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001204f:	66 3d 10 03          	cmp    ax,0x310
c0012053:	75 0a                	jne    c001205f <sendKeyboardToken(KeyboardToken)+0x124>
c0012055:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001205b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001205f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012062:	66 3d 11 03          	cmp    ax,0x311
c0012066:	75 0a                	jne    c0012072 <sendKeyboardToken(KeyboardToken)+0x137>
c0012068:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001206e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012075:	66 3d 12 03          	cmp    ax,0x312
c0012079:	75 0a                	jne    c0012085 <sendKeyboardToken(KeyboardToken)+0x14a>
c001207b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012081:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012088:	66 3d 13 03          	cmp    ax,0x313
c001208c:	75 0a                	jne    c0012098 <sendKeyboardToken(KeyboardToken)+0x15d>
c001208e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012094:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001209b:	66 3d 14 03          	cmp    ax,0x314
c001209f:	75 0a                	jne    c00120ab <sendKeyboardToken(KeyboardToken)+0x170>
c00120a1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00120a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ae:	66 3d 15 03          	cmp    ax,0x315
c00120b2:	75 0a                	jne    c00120be <sendKeyboardToken(KeyboardToken)+0x183>
c00120b4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120ba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120c1:	66 3d 16 03          	cmp    ax,0x316
c00120c5:	75 0a                	jne    c00120d1 <sendKeyboardToken(KeyboardToken)+0x196>
c00120c7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00120cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120d4:	66 3d 17 03          	cmp    ax,0x317
c00120d8:	75 0a                	jne    c00120e4 <sendKeyboardToken(KeyboardToken)+0x1a9>
c00120da:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00120e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120e7:	66 3d 18 03          	cmp    ax,0x318
c00120eb:	75 0a                	jne    c00120f7 <sendKeyboardToken(KeyboardToken)+0x1bc>
c00120ed:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00120f3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120fa:	66 3d 19 03          	cmp    ax,0x319
c00120fe:	75 0a                	jne    c001210a <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012100:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0012106:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001210a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001210d:	66 3d 00 02          	cmp    ax,0x200
c0012111:	75 2a                	jne    c001213d <sendKeyboardToken(KeyboardToken)+0x202>
c0012113:	a0 e0 4a 02 c0       	mov    al,ds:0xc0024ae0
c0012118:	83 f0 01             	xor    eax,0x1
c001211b:	84 c0                	test   al,al
c001211d:	74 1e                	je     c001213d <sendKeyboardToken(KeyboardToken)+0x202>
c001211f:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0012124:	6a 01                	push   0x1
c0012126:	6a 00                	push   0x0
c0012128:	68 58 1e 01 c0       	push   0xc0011e58
c001212d:	50                   	push   eax
c001212e:	e8 fb 68 00 00       	call   c0018a2e <Process::createThread(void (*)(void*), void*, int)>
c0012133:	83 c4 10             	add    esp,0x10
c0012136:	c6 05 e0 4a 02 c0 01 	mov    BYTE PTR ds:0xc0024ae0,0x1
c001213d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012140:	66 3d 1d 03          	cmp    ax,0x31d
c0012144:	75 06                	jne    c001214c <sendKeyboardToken(KeyboardToken)+0x211>
c0012146:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001214c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001214f:	66 3d 1c 03          	cmp    ax,0x31c
c0012153:	75 06                	jne    c001215b <sendKeyboardToken(KeyboardToken)+0x220>
c0012155:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001215b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001215e:	66 3d 1b 03          	cmp    ax,0x31b
c0012162:	75 06                	jne    c001216a <sendKeyboardToken(KeyboardToken)+0x22f>
c0012164:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001216a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001216d:	66 3d 1e 03          	cmp    ax,0x31e
c0012171:	75 06                	jne    c0012179 <sendKeyboardToken(KeyboardToken)+0x23e>
c0012173:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0012179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001217c:	66 3d 1f 03          	cmp    ax,0x31f
c0012180:	75 06                	jne    c0012188 <sendKeyboardToken(KeyboardToken)+0x24d>
c0012182:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0012188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001218b:	66 3d 1a 03          	cmp    ax,0x31a
c001218f:	75 06                	jne    c0012197 <sendKeyboardToken(KeyboardToken)+0x25c>
c0012191:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0012197:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001219b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001219e:	83 f0 01             	xor    eax,0x1
c00121a1:	84 c0                	test   al,al
c00121a3:	74 7b                	je     c0012220 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00121a5:	a0 e1 47 02 c0       	mov    al,ds:0xc00247e1
c00121aa:	84 c0                	test   al,al
c00121ac:	74 43                	je     c00121f1 <sendKeyboardToken(KeyboardToken)+0x2b6>
c00121ae:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121b2:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00121b6:	74 2d                	je     c00121e5 <sendKeyboardToken(KeyboardToken)+0x2aa>
c00121b8:	8b 15 e4 4a 02 c0    	mov    edx,DWORD PTR ds:0xc0024ae4
c00121be:	89 d0                	mov    eax,edx
c00121c0:	c1 e0 02             	shl    eax,0x2
c00121c3:	01 d0                	add    eax,edx
c00121c5:	01 c0                	add    eax,eax
c00121c7:	a3 e4 4a 02 c0       	mov    ds:0xc0024ae4,eax
c00121cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121cf:	25 ff ff 00 00       	and    eax,0xffff
c00121d4:	8d 50 d0             	lea    edx,[eax-0x30]
c00121d7:	a1 e4 4a 02 c0       	mov    eax,ds:0xc0024ae4
c00121dc:	01 d0                	add    eax,edx
c00121de:	a3 e4 4a 02 c0       	mov    ds:0xc0024ae4,eax
c00121e3:	eb 71                	jmp    c0012256 <sendKeyboardToken(KeyboardToken)+0x31b>
c00121e5:	c7 05 e4 4a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ae4,0x0
c00121ef:	eb 65                	jmp    c0012256 <sendKeyboardToken(KeyboardToken)+0x31b>
c00121f1:	a1 e4 4a 02 c0       	mov    eax,ds:0xc0024ae4
c00121f6:	85 c0                	test   eax,eax
c00121f8:	74 1a                	je     c0012214 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00121fa:	a1 e4 4a 02 c0       	mov    eax,ds:0xc0024ae4
c00121ff:	25 ff 00 00 00       	and    eax,0xff
c0012204:	83 ec 0c             	sub    esp,0xc
c0012207:	50                   	push   eax
c0012208:	e8 bd fc ff ff       	call   c0011eca <sendKeyToTerminal(unsigned char)>
c001220d:	83 c4 10             	add    esp,0x10
c0012210:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012214:	c7 05 e4 4a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ae4,0x0
c001221e:	eb 36                	jmp    c0012256 <sendKeyboardToken(KeyboardToken)+0x31b>
c0012220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012223:	66 3d 01 01          	cmp    ax,0x101
c0012227:	75 2d                	jne    c0012256 <sendKeyboardToken(KeyboardToken)+0x31b>
c0012229:	a1 e4 4a 02 c0       	mov    eax,ds:0xc0024ae4
c001222e:	85 c0                	test   eax,eax
c0012230:	74 1a                	je     c001224c <sendKeyboardToken(KeyboardToken)+0x311>
c0012232:	a1 e4 4a 02 c0       	mov    eax,ds:0xc0024ae4
c0012237:	25 ff 00 00 00       	and    eax,0xff
c001223c:	83 ec 0c             	sub    esp,0xc
c001223f:	50                   	push   eax
c0012240:	e8 85 fc ff ff       	call   c0011eca <sendKeyToTerminal(unsigned char)>
c0012245:	83 c4 10             	add    esp,0x10
c0012248:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001224c:	c7 05 e4 4a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ae4,0x0
c0012256:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012259:	83 f0 01             	xor    eax,0x1
c001225c:	84 c0                	test   al,al
c001225e:	74 4e                	je     c00122ae <sendKeyboardToken(KeyboardToken)+0x373>
c0012260:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012263:	83 f0 01             	xor    eax,0x1
c0012266:	84 c0                	test   al,al
c0012268:	74 44                	je     c00122ae <sendKeyboardToken(KeyboardToken)+0x373>
c001226a:	a0 e0 47 02 c0       	mov    al,ds:0xc00247e0
c001226f:	83 f0 01             	xor    eax,0x1
c0012272:	84 c0                	test   al,al
c0012274:	74 38                	je     c00122ae <sendKeyboardToken(KeyboardToken)+0x373>
c0012276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012279:	66 83 f8 1f          	cmp    ax,0x1f
c001227d:	76 09                	jbe    c0012288 <sendKeyboardToken(KeyboardToken)+0x34d>
c001227f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012282:	66 83 f8 7e          	cmp    ax,0x7e
c0012286:	76 12                	jbe    c001229a <sendKeyboardToken(KeyboardToken)+0x35f>
c0012288:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001228b:	66 83 f8 0a          	cmp    ax,0xa
c001228f:	74 09                	je     c001229a <sendKeyboardToken(KeyboardToken)+0x35f>
c0012291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012294:	66 83 f8 08          	cmp    ax,0x8
c0012298:	75 14                	jne    c00122ae <sendKeyboardToken(KeyboardToken)+0x373>
c001229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001229d:	25 ff 00 00 00       	and    eax,0xff
c00122a2:	83 ec 0c             	sub    esp,0xc
c00122a5:	50                   	push   eax
c00122a6:	e8 1f fc ff ff       	call   c0011eca <sendKeyToTerminal(unsigned char)>
c00122ab:	83 c4 10             	add    esp,0x10
c00122ae:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00122b1:	83 f0 01             	xor    eax,0x1
c00122b4:	84 c0                	test   al,al
c00122b6:	74 51                	je     c0012309 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122b8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00122bb:	83 f0 01             	xor    eax,0x1
c00122be:	84 c0                	test   al,al
c00122c0:	74 47                	je     c0012309 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122c2:	a0 e0 47 02 c0       	mov    al,ds:0xc00247e0
c00122c7:	84 c0                	test   al,al
c00122c9:	74 3e                	je     c0012309 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ce:	66 83 f8 3f          	cmp    ax,0x3f
c00122d2:	76 35                	jbe    c0012309 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122d7:	66 83 f8 7f          	cmp    ax,0x7f
c00122db:	77 2c                	ja     c0012309 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122e0:	88 c2                	mov    dl,al
c00122e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122e5:	66 83 f8 5f          	cmp    ax,0x5f
c00122e9:	76 04                	jbe    c00122ef <sendKeyboardToken(KeyboardToken)+0x3b4>
c00122eb:	b0 20                	mov    al,0x20
c00122ed:	eb 02                	jmp    c00122f1 <sendKeyboardToken(KeyboardToken)+0x3b6>
c00122ef:	b0 00                	mov    al,0x0
c00122f1:	29 c2                	sub    edx,eax
c00122f3:	88 d0                	mov    al,dl
c00122f5:	83 e8 40             	sub    eax,0x40
c00122f8:	25 ff 00 00 00       	and    eax,0xff
c00122fd:	83 ec 0c             	sub    esp,0xc
c0012300:	50                   	push   eax
c0012301:	e8 c4 fb ff ff       	call   c0011eca <sendKeyToTerminal(unsigned char)>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001230c:	66 3d 00 03          	cmp    ax,0x300
c0012310:	75 0f                	jne    c0012321 <sendKeyboardToken(KeyboardToken)+0x3e6>
c0012312:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012315:	83 f0 01             	xor    eax,0x1
c0012318:	84 c0                	test   al,al
c001231a:	74 05                	je     c0012321 <sendKeyboardToken(KeyboardToken)+0x3e6>
c001231c:	e8 c6 b0 ff ff       	call   c000d3e7 <doTerminalCycle()>
c0012321:	90                   	nop
c0012322:	c9                   	leave  
c0012323:	c3                   	ret    

c0012324 <clearInternalKeybuffer(VgaText*)>:
c0012324:	55                   	push   ebp
c0012325:	89 e5                	mov    ebp,esp
c0012327:	83 ec 08             	sub    esp,0x8
c001232a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001232d:	05 34 11 00 00       	add    eax,0x1134
c0012332:	83 ec 0c             	sub    esp,0xc
c0012335:	50                   	push   eax
c0012336:	e8 9c e3 fe ff       	call   c00006d7 <strlen>
c001233b:	83 c4 10             	add    esp,0x10
c001233e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012341:	81 c2 34 11 00 00    	add    edx,0x1134
c0012347:	83 ec 04             	sub    esp,0x4
c001234a:	50                   	push   eax
c001234b:	6a 00                	push   0x0
c001234d:	52                   	push   edx
c001234e:	e8 67 e3 fe ff       	call   c00006ba <memset>
c0012353:	83 c4 10             	add    esp,0x10
c0012356:	90                   	nop
c0012357:	c9                   	leave  
c0012358:	c3                   	ret    

c0012359 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012359:	55                   	push   ebp
c001235a:	89 e5                	mov    ebp,esp
c001235c:	83 ec 18             	sub    esp,0x18
c001235f:	fb                   	sti    
c0012360:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0012367:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001236b:	74 77                	je     c00123e4 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c001236d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012370:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012376:	84 c0                	test   al,al
c0012378:	75 02                	jne    c001237c <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c001237a:	eb f1                	jmp    c001236d <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c001237c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001237f:	8d 50 01             	lea    edx,[eax+0x1]
c0012382:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0012385:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012388:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001238e:	88 10                	mov    BYTE PTR [eax],dl
c0012390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012393:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012399:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001239c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001239f:	05 34 11 00 00       	add    eax,0x1134
c00123a4:	83 ec 0c             	sub    esp,0xc
c00123a7:	50                   	push   eax
c00123a8:	e8 2a e3 fe ff       	call   c00006d7 <strlen>
c00123ad:	83 c4 10             	add    esp,0x10
c00123b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123b3:	81 c2 34 11 00 00    	add    edx,0x1134
c00123b9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00123bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123bf:	81 c2 34 11 00 00    	add    edx,0x1134
c00123c5:	83 ec 04             	sub    esp,0x4
c00123c8:	50                   	push   eax
c00123c9:	51                   	push   ecx
c00123ca:	52                   	push   edx
c00123cb:	e8 7c e2 fe ff       	call   c000064c <memmove>
c00123d0:	83 c4 10             	add    esp,0x10
c00123d3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00123d6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00123d9:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00123dd:	75 88                	jne    c0012367 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00123df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123e2:	eb 03                	jmp    c00123e7 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00123e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123e7:	c9                   	leave  
c00123e8:	c3                   	ret    
c00123e9:	90                   	nop

c00123ea <Keyboard::Keyboard(char const*)>:
c00123ea:	83 ec 0c             	sub    esp,0xc
c00123ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123f1:	83 ec 08             	sub    esp,0x8
c00123f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123f8:	50                   	push   eax
c00123f9:	e8 48 e3 ff ff       	call   c0010746 <Device::Device(char const*)>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	ba fc 1e 02 c0       	mov    edx,0xc0021efc
c0012406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001240a:	89 10                	mov    DWORD PTR [eax],edx
c001240c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012410:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001241a:	c6 05 c4 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c4,0x1
c0012421:	90                   	nop
c0012422:	83 c4 0c             	add    esp,0xc
c0012425:	c3                   	ret    

c0012426 <Keyboard::~Keyboard()>:
c0012426:	83 ec 0c             	sub    esp,0xc
c0012429:	ba fc 1e 02 c0       	mov    edx,0xc0021efc
c001242e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012432:	89 10                	mov    DWORD PTR [eax],edx
c0012434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012438:	83 ec 0c             	sub    esp,0xc
c001243b:	50                   	push   eax
c001243c:	e8 bb df ff ff       	call   c00103fc <Device::~Device()>
c0012441:	83 c4 10             	add    esp,0x10
c0012444:	90                   	nop
c0012445:	83 c4 0c             	add    esp,0xc
c0012448:	c3                   	ret    
c0012449:	90                   	nop

c001244a <Keyboard::~Keyboard()>:
c001244a:	83 ec 0c             	sub    esp,0xc
c001244d:	83 ec 0c             	sub    esp,0xc
c0012450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012454:	e8 cd ff ff ff       	call   c0012426 <Keyboard::~Keyboard()>
c0012459:	83 c4 10             	add    esp,0x10
c001245c:	83 ec 08             	sub    esp,0x8
c001245f:	68 5c 01 00 00       	push   0x15c
c0012464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012468:	e8 ae cb ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	83 c4 0c             	add    esp,0xc
c0012473:	c3                   	ret    

c0012474 <LogicalDisk::close(int, int, void*)>:
c0012474:	83 c8 ff             	or     eax,0xffffffff
c0012477:	c3                   	ret    

c0012478 <LogicalDisk::~LogicalDisk()>:
c0012478:	83 ec 0c             	sub    esp,0xc
c001247b:	ba ac 1f 02 c0       	mov    edx,0xc0021fac
c0012480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012484:	89 10                	mov    DWORD PTR [eax],edx
c0012486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001248a:	83 ec 0c             	sub    esp,0xc
c001248d:	50                   	push   eax
c001248e:	e8 69 df ff ff       	call   c00103fc <Device::~Device()>
c0012493:	83 c4 10             	add    esp,0x10
c0012496:	90                   	nop
c0012497:	83 c4 0c             	add    esp,0xc
c001249a:	c3                   	ret    
c001249b:	90                   	nop

c001249c <LogicalDisk::~LogicalDisk()>:
c001249c:	83 ec 0c             	sub    esp,0xc
c001249f:	83 ec 0c             	sub    esp,0xc
c00124a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124a6:	e8 cd ff ff ff       	call   c0012478 <LogicalDisk::~LogicalDisk()>
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	83 ec 08             	sub    esp,0x8
c00124b1:	68 74 01 00 00       	push   0x174
c00124b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ba:	e8 5c cb ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c00124bf:	83 c4 10             	add    esp,0x10
c00124c2:	83 c4 0c             	add    esp,0xc
c00124c5:	c3                   	ret    

c00124c6 <LogicalDisk::open(int, int, void*)>:
c00124c6:	83 ec 18             	sub    esp,0x18
c00124c9:	68 28 1f 02 c0       	push   0xc0021f28
c00124ce:	e8 39 34 00 00       	call   c001590c <Krnl::panic(char const*)>
c00124d3:	83 c8 ff             	or     eax,0xffffffff
c00124d6:	83 c4 1c             	add    esp,0x1c
c00124d9:	c3                   	ret    

c00124da <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00124da:	53                   	push   ebx
c00124db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00124e7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00124ed:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00124f3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00124f9:	77 10                	ja     c001250b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00124fb:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0012501:	89 d3                	mov    ebx,edx
c0012503:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0012509:	72 05                	jb     c0012510 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001250b:	83 c8 ff             	or     eax,0xffffffff
c001250e:	89 c2                	mov    edx,eax
c0012510:	5b                   	pop    ebx
c0012511:	c3                   	ret    

c0012512 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0012512:	56                   	push   esi
c0012513:	83 c8 ff             	or     eax,0xffffffff
c0012516:	53                   	push   ebx
c0012517:	89 c2                	mov    edx,eax
c0012519:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001251d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0012521:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012525:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001252b:	77 27                	ja     c0012554 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001252d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0012533:	89 d8                	mov    eax,ebx
c0012535:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001253b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012540:	89 c2                	mov    edx,eax
c0012542:	73 10                	jae    c0012554 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012544:	89 c8                	mov    eax,ecx
c0012546:	89 da                	mov    edx,ebx
c0012548:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001254e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0012554:	5b                   	pop    ebx
c0012555:	5e                   	pop    esi
c0012556:	c3                   	ret    
c0012557:	90                   	nop

c0012558 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012558:	83 ec 1c             	sub    esp,0x1c
c001255b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001255f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012563:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001256b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001256f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012572:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012576:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001257a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001257e:	83 ec 08             	sub    esp,0x8
c0012581:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012585:	50                   	push   eax
c0012586:	e8 bb e1 ff ff       	call   c0010746 <Device::Device(char const*)>
c001258b:	83 c4 10             	add    esp,0x10
c001258e:	ba ac 1f 02 c0       	mov    edx,0xc0021fac
c0012593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012597:	89 10                	mov    DWORD PTR [eax],edx
c0012599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001259d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125a8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125b3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00125bd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125c9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00125cf:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00125d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00125dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125e0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00125e6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00125ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125f4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00125fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125fe:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012608:	90                   	nop
c0012609:	83 c4 1c             	add    esp,0x1c
c001260c:	c3                   	ret    
c001260d:	90                   	nop

c001260e <LogicalDisk::assignDriveLetter()>:
c001260e:	55                   	push   ebp
c001260f:	57                   	push   edi
c0012610:	56                   	push   esi
c0012611:	53                   	push   ebx
c0012612:	83 ec 14             	sub    esp,0x14
c0012615:	8b 3d 00 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024b00
c001261b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001261f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0012623:	8b 3d 04 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024b04
c0012629:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001262f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012633:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0012639:	3c 01                	cmp    al,0x1
c001263b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001263f:	19 c0                	sbb    eax,eax
c0012641:	83 e0 02             	and    eax,0x2
c0012644:	83 c0 41             	add    eax,0x41
c0012647:	0f be e8             	movsx  ebp,al
c001264a:	3c 43                	cmp    al,0x43
c001264c:	75 10                	jne    c001265e <LogicalDisk::assignDriveLetter()+0x50>
c001264e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0012655:	75 5d                	jne    c00126b4 <LogicalDisk::assignDriveLetter()+0xa6>
c0012657:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001265c:	75 56                	jne    c00126b4 <LogicalDisk::assignDriveLetter()+0xa6>
c001265e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012661:	ba 01 00 00 00       	mov    edx,0x1
c0012666:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001266a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001266e:	d3 e2                	shl    edx,cl
c0012670:	89 d7                	mov    edi,edx
c0012672:	89 d6                	mov    esi,edx
c0012674:	c1 ff 1f             	sar    edi,0x1f
c0012677:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001267b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001267f:	21 f9                	and    ecx,edi
c0012681:	09 d1                	or     ecx,edx
c0012683:	75 2f                	jne    c00126b4 <LogicalDisk::assignDriveLetter()+0xa6>
c0012685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012689:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001268d:	09 f2                	or     edx,esi
c001268f:	89 15 00 4b 02 c0    	mov    DWORD PTR ds:0xc0024b00,edx
c0012695:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012699:	09 fa                	or     edx,edi
c001269b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001269f:	89 15 04 4b 02 c0    	mov    DWORD PTR ds:0xc0024b04,edx
c00126a5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00126ab:	89 1c bd 20 4b 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb4e0],ebx
c00126b2:	eb 08                	jmp    c00126bc <LogicalDisk::assignDriveLetter()+0xae>
c00126b4:	40                   	inc    eax
c00126b5:	45                   	inc    ebp
c00126b6:	3c 5b                	cmp    al,0x5b
c00126b8:	75 90                	jne    c001264a <LogicalDisk::assignDriveLetter()+0x3c>
c00126ba:	31 c0                	xor    eax,eax
c00126bc:	83 c4 14             	add    esp,0x14
c00126bf:	5b                   	pop    ebx
c00126c0:	5e                   	pop    esi
c00126c1:	5f                   	pop    edi
c00126c2:	5d                   	pop    ebp
c00126c3:	c3                   	ret    

c00126c4 <LogicalDisk::mount()>:
c00126c4:	56                   	push   esi
c00126c5:	53                   	push   ebx
c00126c6:	51                   	push   ecx
c00126c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00126cb:	8b 1d 88 46 02 c0    	mov    ebx,DWORD PTR ds:0xc0024688
c00126d1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00126db:	85 db                	test   ebx,ebx
c00126dd:	74 50                	je     c001272f <LogicalDisk::mount()+0x6b>
c00126df:	e8 00 62 00 00       	call   c00188e4 <getIRQNestingLevel()>
c00126e4:	52                   	push   edx
c00126e5:	52                   	push   edx
c00126e6:	50                   	push   eax
c00126e7:	68 4c 1f 02 c0       	push   0xc0021f4c
c00126ec:	e8 50 ca ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00126f1:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00126f8:	83 c4 0c             	add    esp,0xc
c00126fb:	83 e8 41             	sub    eax,0x41
c00126fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012700:	50                   	push   eax
c0012701:	56                   	push   esi
c0012702:	53                   	push   ebx
c0012703:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	84 c0                	test   al,al
c001270b:	74 08                	je     c0012715 <LogicalDisk::mount()+0x51>
c001270d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0012713:	eb 1c                	jmp    c0012731 <LogicalDisk::mount()+0x6d>
c0012715:	e8 ca 61 00 00       	call   c00188e4 <getIRQNestingLevel()>
c001271a:	51                   	push   ecx
c001271b:	51                   	push   ecx
c001271c:	50                   	push   eax
c001271d:	68 67 1f 02 c0       	push   0xc0021f67
c0012722:	e8 1a ca ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0012727:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001272a:	83 c4 10             	add    esp,0x10
c001272d:	eb ac                	jmp    c00126db <LogicalDisk::mount()+0x17>
c001272f:	31 c0                	xor    eax,eax
c0012731:	5a                   	pop    edx
c0012732:	5b                   	pop    ebx
c0012733:	5e                   	pop    esi
c0012734:	c3                   	ret    
c0012735:	90                   	nop

c0012736 <LogicalDisk::unmount()>:
c0012736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001273a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012744:	c3                   	ret    
c0012745:	90                   	nop

c0012746 <LogicalDisk::unassignDriveLetter()>:
c0012746:	57                   	push   edi
c0012747:	56                   	push   esi
c0012748:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001274c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012753:	84 c9                	test   cl,cl
c0012755:	75 0f                	jne    c0012766 <LogicalDisk::unassignDriveLetter()+0x20>
c0012757:	c7 44 24 0c 82 1f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021f82
c001275f:	5e                   	pop    esi
c0012760:	5f                   	pop    edi
c0012761:	e9 a6 31 00 00       	jmp    c001590c <Krnl::panic(char const*)>
c0012766:	83 e9 41             	sub    ecx,0x41
c0012769:	b8 01 00 00 00       	mov    eax,0x1
c001276e:	d3 e0                	shl    eax,cl
c0012770:	89 c7                	mov    edi,eax
c0012772:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012779:	c1 ff 1f             	sar    edi,0x1f
c001277c:	c7 04 8d 20 4b 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb4e0],0x0
c0012787:	89 fe                	mov    esi,edi
c0012789:	f7 d6                	not    esi
c001278b:	f7 d0                	not    eax
c001278d:	21 35 04 4b 02 c0    	and    DWORD PTR ds:0xc0024b04,esi
c0012793:	5e                   	pop    esi
c0012794:	21 05 00 4b 02 c0    	and    DWORD PTR ds:0xc0024b00,eax
c001279a:	5f                   	pop    edi
c001279b:	c3                   	ret    

c001279c <LogicalDisk::read(unsigned long long, int, void*)>:
c001279c:	57                   	push   edi
c001279d:	56                   	push   esi
c001279e:	53                   	push   ebx
c001279f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127af:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00127b5:	77 41                	ja     c00127f8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00127b7:	99                   	cdq    
c00127b8:	01 c8                	add    eax,ecx
c00127ba:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00127c0:	11 da                	adc    edx,ebx
c00127c2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00127c8:	19 d7                	sbb    edi,edx
c00127ca:	72 33                	jb     c00127ff <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00127cc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00127d2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00127d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127dc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00127e0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00127e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00127ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127f0:	5b                   	pop    ebx
c00127f1:	5e                   	pop    esi
c00127f2:	5f                   	pop    edi
c00127f3:	e9 9a 09 00 00       	jmp    c0013192 <VCache::read(unsigned long long, int, void*)>
c00127f8:	b8 05 00 00 00       	mov    eax,0x5
c00127fd:	eb 05                	jmp    c0012804 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00127ff:	b8 07 00 00 00       	mov    eax,0x7
c0012804:	5b                   	pop    ebx
c0012805:	5e                   	pop    esi
c0012806:	5f                   	pop    edi
c0012807:	c3                   	ret    

c0012808 <LogicalDisk::write(unsigned long long, int, void*)>:
c0012808:	57                   	push   edi
c0012809:	56                   	push   esi
c001280a:	53                   	push   ebx
c001280b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001280f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012813:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012817:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001281b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012821:	77 41                	ja     c0012864 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0012823:	99                   	cdq    
c0012824:	01 c8                	add    eax,ecx
c0012826:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001282c:	11 da                	adc    edx,ebx
c001282e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012834:	19 d7                	sbb    edi,edx
c0012836:	72 33                	jb     c001286b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012838:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001283e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012844:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012848:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001284c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012852:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012858:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001285c:	5b                   	pop    ebx
c001285d:	5e                   	pop    esi
c001285e:	5f                   	pop    edi
c001285f:	e9 4a 08 00 00       	jmp    c00130ae <VCache::write(unsigned long long, int, void*)>
c0012864:	b8 05 00 00 00       	mov    eax,0x5
c0012869:	eb 05                	jmp    c0012870 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001286b:	b8 07 00 00 00       	mov    eax,0x7
c0012870:	5b                   	pop    ebx
c0012871:	5e                   	pop    esi
c0012872:	5f                   	pop    edi
c0012873:	c3                   	ret    

c0012874 <Mouse::Mouse(char const*)>:
c0012874:	83 ec 0c             	sub    esp,0xc
c0012877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001287b:	83 ec 08             	sub    esp,0x8
c001287e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012882:	50                   	push   eax
c0012883:	e8 be de ff ff       	call   c0010746 <Device::Device(char const*)>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	ba d8 1f 02 c0       	mov    edx,0xc0021fd8
c0012890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012894:	89 10                	mov    DWORD PTR [eax],edx
c0012896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001289a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00128a4:	90                   	nop
c00128a5:	83 c4 0c             	add    esp,0xc
c00128a8:	c3                   	ret    
c00128a9:	90                   	nop

c00128aa <Mouse::~Mouse()>:
c00128aa:	83 ec 0c             	sub    esp,0xc
c00128ad:	ba d8 1f 02 c0       	mov    edx,0xc0021fd8
c00128b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b6:	89 10                	mov    DWORD PTR [eax],edx
c00128b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128bc:	83 ec 0c             	sub    esp,0xc
c00128bf:	50                   	push   eax
c00128c0:	e8 37 db ff ff       	call   c00103fc <Device::~Device()>
c00128c5:	83 c4 10             	add    esp,0x10
c00128c8:	90                   	nop
c00128c9:	83 c4 0c             	add    esp,0xc
c00128cc:	c3                   	ret    
c00128cd:	90                   	nop

c00128ce <Mouse::~Mouse()>:
c00128ce:	83 ec 0c             	sub    esp,0xc
c00128d1:	83 ec 0c             	sub    esp,0xc
c00128d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128d8:	e8 cd ff ff ff       	call   c00128aa <Mouse::~Mouse()>
c00128dd:	83 c4 10             	add    esp,0x10
c00128e0:	83 ec 08             	sub    esp,0x8
c00128e3:	68 58 01 00 00       	push   0x158
c00128e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ec:	e8 2a c7 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c00128f1:	83 c4 10             	add    esp,0x10
c00128f4:	83 c4 0c             	add    esp,0xc
c00128f7:	c3                   	ret    

c00128f8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00128f8:	55                   	push   ebp
c00128f9:	57                   	push   edi
c00128fa:	56                   	push   esi
c00128fb:	53                   	push   ebx
c00128fc:	81 ec 28 01 00 00    	sub    esp,0x128
c0012902:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0012909:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0012910:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012917:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001291e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012922:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012926:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001292d:	e8 06 df ff ff       	call   c0010838 <Device::getName()>
c0012932:	5a                   	pop    edx
c0012933:	59                   	pop    ecx
c0012934:	50                   	push   eax
c0012935:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012939:	55                   	push   ebp
c001293a:	e8 1a de fe ff       	call   c0000759 <strcpy>
c001293f:	5b                   	pop    ebx
c0012940:	58                   	pop    eax
c0012941:	68 fc 1f 02 c0       	push   0xc0021ffc
c0012946:	55                   	push   ebp
c0012947:	e8 c4 de fe ff       	call   c0000810 <strcat>
c001294c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012953:	e8 b4 c6 ff ff       	call   c000f00c <operator new(unsigned long)>
c0012958:	83 c4 0c             	add    esp,0xc
c001295b:	89 c3                	mov    ebx,eax
c001295d:	57                   	push   edi
c001295e:	56                   	push   esi
c001295f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012963:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012967:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001296e:	55                   	push   ebp
c001296f:	50                   	push   eax
c0012970:	e8 e3 fb ff ff       	call   c0012558 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012975:	83 c4 14             	add    esp,0x14
c0012978:	53                   	push   ebx
c0012979:	e8 90 fc ff ff       	call   c001260e <LogicalDisk::assignDriveLetter()>
c001297e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012981:	e8 3e fd ff ff       	call   c00126c4 <LogicalDisk::mount()>
c0012986:	58                   	pop    eax
c0012987:	5a                   	pop    edx
c0012988:	53                   	push   ebx
c0012989:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012990:	e8 c1 db ff ff       	call   c0010556 <Device::addChild(Device*)>
c0012995:	81 c4 2c 01 00 00    	add    esp,0x12c
c001299b:	5b                   	pop    ebx
c001299c:	5e                   	pop    esi
c001299d:	5f                   	pop    edi
c001299e:	5d                   	pop    ebp
c001299f:	c3                   	ret    

c00129a0 <createPartitionsForDisk(PhysicalDisk*)>:
c00129a0:	55                   	push   ebp
c00129a1:	57                   	push   edi
c00129a2:	56                   	push   esi
c00129a3:	53                   	push   ebx
c00129a4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00129aa:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00129b1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00129b7:	3d 00 02 00 00       	cmp    eax,0x200
c00129bc:	74 27                	je     c00129e5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00129be:	83 ec 10             	sub    esp,0x10
c00129c1:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00129c7:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00129cd:	99                   	cdq    
c00129ce:	52                   	push   edx
c00129cf:	0f a4 f7 0a          	shld   edi,esi,0xa
c00129d3:	50                   	push   eax
c00129d4:	89 fd                	mov    ebp,edi
c00129d6:	c1 e6 0a             	shl    esi,0xa
c00129d9:	55                   	push   ebp
c00129da:	56                   	push   esi
c00129db:	e8 ac c9 00 00       	call   c001f38c <__udivdi3>
c00129e0:	e9 b1 00 00 00       	jmp    c0012a96 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00129e5:	83 ec 0c             	sub    esp,0xc
c00129e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129ea:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00129ee:	56                   	push   esi
c00129ef:	6a 01                	push   0x1
c00129f1:	6a 00                	push   0x0
c00129f3:	6a 00                	push   0x0
c00129f5:	53                   	push   ebx
c00129f6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00129f9:	83 c4 20             	add    esp,0x20
c00129fc:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012a04:	75 0a                	jne    c0012a10 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012a06:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012a0e:	74 2c                	je     c0012a3c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012a10:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a16:	83 ec 10             	sub    esp,0x10
c0012a19:	89 f7                	mov    edi,esi
c0012a1b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a21:	c1 ff 1f             	sar    edi,0x1f
c0012a24:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a2a:	57                   	push   edi
c0012a2b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a2f:	c1 e0 0a             	shl    eax,0xa
c0012a32:	56                   	push   esi
c0012a33:	52                   	push   edx
c0012a34:	50                   	push   eax
c0012a35:	e8 52 c9 00 00       	call   c001f38c <__udivdi3>
c0012a3a:	eb 5a                	jmp    c0012a96 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012a3c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012a43:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012a4a:	83 e0 7f             	and    eax,0x7f
c0012a4d:	83 e1 7f             	and    ecx,0x7f
c0012a50:	01 c1                	add    ecx,eax
c0012a52:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012a59:	83 e0 7f             	and    eax,0x7f
c0012a5c:	01 c1                	add    ecx,eax
c0012a5e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012a65:	83 e0 7f             	and    eax,0x7f
c0012a68:	00 c1                	add    cl,al
c0012a6a:	74 41                	je     c0012aad <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012a6c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a72:	83 ec 10             	sub    esp,0x10
c0012a75:	89 f7                	mov    edi,esi
c0012a77:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a7d:	c1 ff 1f             	sar    edi,0x1f
c0012a80:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a86:	57                   	push   edi
c0012a87:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a8b:	c1 e0 0a             	shl    eax,0xa
c0012a8e:	56                   	push   esi
c0012a8f:	52                   	push   edx
c0012a90:	50                   	push   eax
c0012a91:	e8 f6 c8 00 00       	call   c001f38c <__udivdi3>
c0012a96:	83 c4 14             	add    esp,0x14
c0012a99:	52                   	push   edx
c0012a9a:	50                   	push   eax
c0012a9b:	6a 00                	push   0x0
c0012a9d:	6a 00                	push   0x0
c0012a9f:	53                   	push   ebx
c0012aa0:	e8 53 fe ff ff       	call   c00128f8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012aa5:	83 c4 20             	add    esp,0x20
c0012aa8:	e9 79 01 00 00       	jmp    c0012c26 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012aad:	89 f0                	mov    eax,esi
c0012aaf:	31 f6                	xor    esi,esi
c0012ab1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012ab8:	75 02                	jne    c0012abc <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012aba:	89 f1                	mov    ecx,esi
c0012abc:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012ac3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012aca:	c1 e2 08             	shl    edx,0x8
c0012acd:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012ad5:	c1 e7 10             	shl    edi,0x10
c0012ad8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012ae0:	09 fa                	or     edx,edi
c0012ae2:	83 c0 10             	add    eax,0x10
c0012ae5:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012aec:	09 fa                	or     edx,edi
c0012aee:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012af5:	c1 e7 18             	shl    edi,0x18
c0012af8:	09 fa                	or     edx,edi
c0012afa:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012afe:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012b05:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012b0c:	c1 e7 10             	shl    edi,0x10
c0012b0f:	c1 e2 08             	shl    edx,0x8
c0012b12:	09 fa                	or     edx,edi
c0012b14:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012b1b:	09 fa                	or     edx,edi
c0012b1d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012b24:	c1 e7 18             	shl    edi,0x18
c0012b27:	09 fa                	or     edx,edi
c0012b29:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012b2d:	46                   	inc    esi
c0012b2e:	83 fe 04             	cmp    esi,0x4
c0012b31:	0f 85 7a ff ff ff    	jne    c0012ab1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b3b:	83 f0 01             	xor    eax,0x1
c0012b3e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012b42:	75 57                	jne    c0012b9b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b48:	83 f0 01             	xor    eax,0x1
c0012b4b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012b4f:	75 4a                	jne    c0012b9b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b51:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b57:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012b5b:	89 f7                	mov    edi,esi
c0012b5d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012b65:	c1 ff 1f             	sar    edi,0x1f
c0012b68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b70:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b76:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b7c:	57                   	push   edi
c0012b7d:	56                   	push   esi
c0012b7e:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b82:	c1 e0 0a             	shl    eax,0xa
c0012b85:	52                   	push   edx
c0012b86:	50                   	push   eax
c0012b87:	e8 00 c8 00 00       	call   c001f38c <__udivdi3>
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012b97:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012b9b:	84 c9                	test   cl,cl
c0012b9d:	74 53                	je     c0012bf2 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012b9f:	0f b6 c9             	movzx  ecx,cl
c0012ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012baa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bb2:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012bb6:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012bba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012bbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bca:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012bce:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012bd2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012bd6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012bda:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012bde:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012be2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012be6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012bea:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012bee:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012bf2:	31 ed                	xor    ebp,ebp
c0012bf4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012bf8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012bfc:	89 f8                	mov    eax,edi
c0012bfe:	09 f0                	or     eax,esi
c0012c00:	74 1e                	je     c0012c20 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c02:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012c06:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012c0a:	89 d1                	mov    ecx,edx
c0012c0c:	09 c1                	or     ecx,eax
c0012c0e:	74 10                	je     c0012c20 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c10:	83 ec 0c             	sub    esp,0xc
c0012c13:	57                   	push   edi
c0012c14:	56                   	push   esi
c0012c15:	52                   	push   edx
c0012c16:	50                   	push   eax
c0012c17:	53                   	push   ebx
c0012c18:	e8 db fc ff ff       	call   c00128f8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012c1d:	83 c4 20             	add    esp,0x20
c0012c20:	45                   	inc    ebp
c0012c21:	83 fd 04             	cmp    ebp,0x4
c0012c24:	75 ce                	jne    c0012bf4 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012c26:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012c2c:	5b                   	pop    ebx
c0012c2d:	5e                   	pop    esi
c0012c2e:	5f                   	pop    edi
c0012c2f:	5d                   	pop    ebp
c0012c30:	c3                   	ret    
c0012c31:	90                   	nop

c0012c32 <Timer::Timer(char const*)>:
c0012c32:	83 ec 0c             	sub    esp,0xc
c0012c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c39:	83 ec 08             	sub    esp,0x8
c0012c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c40:	50                   	push   eax
c0012c41:	e8 00 db ff ff       	call   c0010746 <Device::Device(char const*)>
c0012c46:	83 c4 10             	add    esp,0x10
c0012c49:	ba 10 20 02 c0       	mov    edx,0xc0022010
c0012c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c52:	89 10                	mov    DWORD PTR [eax],edx
c0012c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c58:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012c62:	90                   	nop
c0012c63:	83 c4 0c             	add    esp,0xc
c0012c66:	c3                   	ret    
c0012c67:	90                   	nop

c0012c68 <Timer::~Timer()>:
c0012c68:	83 ec 0c             	sub    esp,0xc
c0012c6b:	ba 10 20 02 c0       	mov    edx,0xc0022010
c0012c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c74:	89 10                	mov    DWORD PTR [eax],edx
c0012c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7a:	83 ec 0c             	sub    esp,0xc
c0012c7d:	50                   	push   eax
c0012c7e:	e8 79 d7 ff ff       	call   c00103fc <Device::~Device()>
c0012c83:	83 c4 10             	add    esp,0x10
c0012c86:	90                   	nop
c0012c87:	83 c4 0c             	add    esp,0xc
c0012c8a:	c3                   	ret    
c0012c8b:	90                   	nop

c0012c8c <Timer::~Timer()>:
c0012c8c:	83 ec 0c             	sub    esp,0xc
c0012c8f:	83 ec 0c             	sub    esp,0xc
c0012c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c96:	e8 cd ff ff ff       	call   c0012c68 <Timer::~Timer()>
c0012c9b:	83 c4 10             	add    esp,0x10
c0012c9e:	83 ec 08             	sub    esp,0x8
c0012ca1:	68 5c 01 00 00       	push   0x15c
c0012ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012caa:	e8 6c c3 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	83 c4 0c             	add    esp,0xc
c0012cb5:	c3                   	ret    

c0012cb6 <Timer::read()>:
c0012cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012cc0:	c3                   	ret    

c0012cc1 <timerHandler(unsigned long long)>:
c0012cc1:	55                   	push   ebp
c0012cc2:	57                   	push   edi
c0012cc3:	56                   	push   esi
c0012cc4:	53                   	push   ebx
c0012cc5:	83 ec 0c             	sub    esp,0xc
c0012cc8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ccc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012cd0:	01 35 90 4b 02 c0    	add    DWORD PTR ds:0xc0024b90,esi
c0012cd6:	11 3d 94 4b 02 c0    	adc    DWORD PTR ds:0xc0024b94,edi
c0012cdc:	80 3d 2d 45 02 c0 00 	cmp    BYTE PTR ds:0xc002452d,0x0
c0012ce3:	0f 84 07 01 00 00    	je     c0012df0 <timerHandler(unsigned long long)+0x12f>
c0012ce9:	e8 32 5c 00 00       	call   c0018920 <lockStuff()>
c0012cee:	83 ec 0c             	sub    esp,0xc
c0012cf1:	68 5c 59 02 c0       	push   0xc002595c
c0012cf6:	e8 65 cd 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012cfb:	c7 04 24 5c 59 02 c0 	mov    DWORD PTR [esp],0xc002595c
c0012d02:	89 c3                	mov    ebx,eax
c0012d04:	e8 5f cd 00 00       	call   c001fa68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d09:	83 c4 10             	add    esp,0x10
c0012d0c:	84 c0                	test   al,al
c0012d0e:	74 60                	je     c0012d70 <timerHandler(unsigned long long)+0xaf>
c0012d10:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012d16:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012d19:	85 c0                	test   eax,eax
c0012d1b:	0f 85 91 00 00 00    	jne    c0012db2 <timerHandler(unsigned long long)+0xf1>
c0012d21:	e9 be 00 00 00       	jmp    c0012de4 <timerHandler(unsigned long long)+0x123>
c0012d26:	83 ec 0c             	sub    esp,0xc
c0012d29:	55                   	push   ebp
c0012d2a:	e8 ee 61 00 00       	call   c0018f1d <unblockTask(ThreadControlBlock*)>
c0012d2f:	83 c4 10             	add    esp,0x10
c0012d32:	39 eb                	cmp    ebx,ebp
c0012d34:	75 12                	jne    c0012d48 <timerHandler(unsigned long long)+0x87>
c0012d36:	83 ec 0c             	sub    esp,0xc
c0012d39:	68 5c 59 02 c0       	push   0xc002595c
c0012d3e:	e8 1d cd 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d43:	89 c3                	mov    ebx,eax
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	83 ec 0c             	sub    esp,0xc
c0012d4b:	68 5c 59 02 c0       	push   0xc002595c
c0012d50:	e8 13 cd 00 00       	call   c001fa68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d55:	83 c4 10             	add    esp,0x10
c0012d58:	84 c0                	test   al,al
c0012d5a:	75 b4                	jne    c0012d10 <timerHandler(unsigned long long)+0x4f>
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	68 5c 59 02 c0       	push   0xc002595c
c0012d64:	e8 f7 cc 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d69:	83 c4 10             	add    esp,0x10
c0012d6c:	39 d8                	cmp    eax,ebx
c0012d6e:	74 a0                	je     c0012d10 <timerHandler(unsigned long long)+0x4f>
c0012d70:	83 ec 0c             	sub    esp,0xc
c0012d73:	68 5c 59 02 c0       	push   0xc002595c
c0012d78:	e8 e3 cc 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d7d:	89 c5                	mov    ebp,eax
c0012d7f:	c7 04 24 5c 59 02 c0 	mov    DWORD PTR [esp],0xc002595c
c0012d86:	e8 f9 cc 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012d8b:	83 c4 10             	add    esp,0x10
c0012d8e:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012d91:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0012d96:	39 15 90 4b 02 c0    	cmp    DWORD PTR ds:0xc0024b90,edx
c0012d9c:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012d9f:	19 c8                	sbb    eax,ecx
c0012da1:	73 83                	jae    c0012d26 <timerHandler(unsigned long long)+0x65>
c0012da3:	50                   	push   eax
c0012da4:	50                   	push   eax
c0012da5:	55                   	push   ebp
c0012da6:	68 5c 59 02 c0       	push   0xc002595c
c0012dab:	e8 82 cd 00 00       	call   c001fb32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012db0:	eb 93                	jmp    c0012d45 <timerHandler(unsigned long long)+0x84>
c0012db2:	80 3d 2c 45 02 c0 00 	cmp    BYTE PTR ds:0xc002452c,0x0
c0012db9:	74 29                	je     c0012de4 <timerHandler(unsigned long long)+0x123>
c0012dbb:	39 c6                	cmp    esi,eax
c0012dbd:	bb 00 00 00 00       	mov    ebx,0x0
c0012dc2:	19 df                	sbb    edi,ebx
c0012dc4:	72 19                	jb     c0012ddf <timerHandler(unsigned long long)+0x11e>
c0012dc6:	e8 2e 5b 00 00       	call   c00188f9 <lockScheduler()>
c0012dcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dd0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012dd3:	e8 6a 5e 00 00       	call   c0018c42 <schedule()>
c0012dd8:	e8 1e 5b 00 00       	call   c00188fb <unlockScheduler()>
c0012ddd:	eb 05                	jmp    c0012de4 <timerHandler(unsigned long long)+0x123>
c0012ddf:	29 f0                	sub    eax,esi
c0012de1:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012de4:	83 c4 0c             	add    esp,0xc
c0012de7:	5b                   	pop    ebx
c0012de8:	5e                   	pop    esi
c0012de9:	5f                   	pop    edi
c0012dea:	5d                   	pop    ebp
c0012deb:	e9 d7 5e 00 00       	jmp    c0018cc7 <unlockStuff()>
c0012df0:	83 c4 0c             	add    esp,0xc
c0012df3:	5b                   	pop    ebx
c0012df4:	5e                   	pop    esi
c0012df5:	5f                   	pop    edi
c0012df6:	5d                   	pop    ebp
c0012df7:	c3                   	ret    

c0012df8 <setupTimer(int)>:
c0012df8:	57                   	push   edi
c0012df9:	56                   	push   esi
c0012dfa:	53                   	push   ebx
c0012dfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dff:	e8 99 19 00 00       	call   c001479d <getCPUNumber()>
c0012e04:	85 c0                	test   eax,eax
c0012e06:	74 32                	je     c0012e3a <setupTimer(int)+0x42>
c0012e08:	83 ec 0c             	sub    esp,0xc
c0012e0b:	68 60 01 00 00       	push   0x160
c0012e10:	e8 f7 c1 ff ff       	call   c000f00c <operator new(unsigned long)>
c0012e15:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e18:	89 c3                	mov    ebx,eax
c0012e1a:	e8 ff bf 00 00       	call   c001ee1e <APICTimer::APICTimer()>
c0012e1f:	6a 00                	push   0x0
c0012e21:	6a 00                	push   0x0
c0012e23:	56                   	push   esi
c0012e24:	53                   	push   ebx
c0012e25:	e8 ee be 00 00       	call   c001ed18 <APICTimer::open(int, int, void*)>
c0012e2a:	83 c4 20             	add    esp,0x20
c0012e2d:	e8 6e 19 00 00       	call   c00147a0 <thisCPU()>
c0012e32:	56                   	push   esi
c0012e33:	56                   	push   esi
c0012e34:	53                   	push   ebx
c0012e35:	e9 96 00 00 00       	jmp    c0012ed0 <setupTimer(int)+0xd8>
c0012e3a:	e8 61 19 00 00       	call   c00147a0 <thisCPU()>
c0012e3f:	83 ec 0c             	sub    esp,0xc
c0012e42:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012e48:	e8 eb d9 ff ff       	call   c0010838 <Device::getName()>
c0012e4d:	83 c4 10             	add    esp,0x10
c0012e50:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012e53:	0f 85 87 00 00 00    	jne    c0012ee0 <setupTimer(int)+0xe8>
c0012e59:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0012e5e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012e65:	74 79                	je     c0012ee0 <setupTimer(int)+0xe8>
c0012e67:	83 ec 0c             	sub    esp,0xc
c0012e6a:	68 5c 01 00 00       	push   0x15c
c0012e6f:	e8 98 c1 ff ff       	call   c000f00c <operator new(unsigned long)>
c0012e74:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e77:	89 c3                	mov    ebx,eax
c0012e79:	e8 fc c0 00 00       	call   c001ef7a <PIT::PIT()>
c0012e7e:	59                   	pop    ecx
c0012e7f:	5f                   	pop    edi
c0012e80:	53                   	push   ebx
c0012e81:	ff 35 28 45 02 c0    	push   DWORD PTR ds:0xc0024528
c0012e87:	e8 ca d6 ff ff       	call   c0010556 <Device::addChild(Device*)>
c0012e8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e8e:	6a 00                	push   0x0
c0012e90:	6a 00                	push   0x0
c0012e92:	56                   	push   esi
c0012e93:	53                   	push   ebx
c0012e94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e97:	83 c4 14             	add    esp,0x14
c0012e9a:	68 60 01 00 00       	push   0x160
c0012e9f:	e8 68 c1 ff ff       	call   c000f00c <operator new(unsigned long)>
c0012ea4:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ea7:	89 c7                	mov    edi,eax
c0012ea9:	e8 70 bf 00 00       	call   c001ee1e <APICTimer::APICTimer()>
c0012eae:	6a 00                	push   0x0
c0012eb0:	6a 00                	push   0x0
c0012eb2:	56                   	push   esi
c0012eb3:	57                   	push   edi
c0012eb4:	e8 5f be 00 00       	call   c001ed18 <APICTimer::open(int, int, void*)>
c0012eb9:	83 c4 20             	add    esp,0x20
c0012ebc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ebe:	6a 00                	push   0x0
c0012ec0:	6a 00                	push   0x0
c0012ec2:	6a 00                	push   0x0
c0012ec4:	53                   	push   ebx
c0012ec5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ec8:	e8 d3 18 00 00       	call   c00147a0 <thisCPU()>
c0012ecd:	5a                   	pop    edx
c0012ece:	59                   	pop    ecx
c0012ecf:	57                   	push   edi
c0012ed0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012ed6:	e8 7b d6 ff ff       	call   c0010556 <Device::addChild(Device*)>
c0012edb:	83 c4 10             	add    esp,0x10
c0012ede:	eb 33                	jmp    c0012f13 <setupTimer(int)+0x11b>
c0012ee0:	83 ec 0c             	sub    esp,0xc
c0012ee3:	68 5c 01 00 00       	push   0x15c
c0012ee8:	e8 1f c1 ff ff       	call   c000f00c <operator new(unsigned long)>
c0012eed:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ef0:	89 c3                	mov    ebx,eax
c0012ef2:	e8 83 c0 00 00       	call   c001ef7a <PIT::PIT()>
c0012ef7:	58                   	pop    eax
c0012ef8:	5a                   	pop    edx
c0012ef9:	53                   	push   ebx
c0012efa:	ff 35 28 45 02 c0    	push   DWORD PTR ds:0xc0024528
c0012f00:	e8 51 d6 ff ff       	call   c0010556 <Device::addChild(Device*)>
c0012f05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f07:	6a 00                	push   0x0
c0012f09:	6a 00                	push   0x0
c0012f0b:	56                   	push   esi
c0012f0c:	53                   	push   ebx
c0012f0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f10:	83 c4 20             	add    esp,0x20
c0012f13:	89 d8                	mov    eax,ebx
c0012f15:	5b                   	pop    ebx
c0012f16:	5e                   	pop    esi
c0012f17:	5f                   	pop    edi
c0012f18:	c3                   	ret    
c0012f19:	90                   	nop

c0012f1a <VCache::VCache(PhysicalDisk*)>:
c0012f1a:	53                   	push   ebx
c0012f1b:	83 ec 08             	sub    esp,0x8
c0012f1e:	ba 40 20 02 c0       	mov    edx,0xc0022040
c0012f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f27:	89 10                	mov    DWORD PTR [eax],edx
c0012f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f2d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f38:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f43:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012f4a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f55:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012f5c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f67:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f72:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012f76:	83 ec 0c             	sub    esp,0xc
c0012f79:	6a 10                	push   0x10
c0012f7b:	e8 8c c0 ff ff       	call   c000f00c <operator new(unsigned long)>
c0012f80:	83 c4 10             	add    esp,0x10
c0012f83:	89 c3                	mov    ebx,eax
c0012f85:	83 ec 0c             	sub    esp,0xc
c0012f88:	53                   	push   ebx
c0012f89:	e8 8e 5a 00 00       	call   c0018a1c <Mutex::Mutex()>
c0012f8e:	83 c4 10             	add    esp,0x10
c0012f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f95:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fa0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa7:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012fae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fb2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fbc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012fbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fc3:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012fc9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012fcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fd3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012fd6:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fdd:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012fe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fe5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012feb:	c1 e0 06             	shl    eax,0x6
c0012fee:	83 ec 0c             	sub    esp,0xc
c0012ff1:	50                   	push   eax
c0012ff2:	e8 dc 8f ff ff       	call   c000bfd3 <malloc>
c0012ff7:	83 c4 10             	add    esp,0x10
c0012ffa:	89 c2                	mov    edx,eax
c0012ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013000:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0013003:	90                   	nop
c0013004:	83 c4 08             	add    esp,0x8
c0013007:	5b                   	pop    ebx
c0013008:	c3                   	ret    
c0013009:	90                   	nop

c001300a <VCache::writeWriteBuffer()>:
c001300a:	53                   	push   ebx
c001300b:	83 ec 14             	sub    esp,0x14
c001300e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013012:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013015:	8b 10                	mov    edx,DWORD PTR [eax]
c0013017:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001301a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001301d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013020:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013023:	50                   	push   eax
c0013024:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013027:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001302e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0013035:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0013039:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013040:	83 c4 28             	add    esp,0x28
c0013043:	5b                   	pop    ebx
c0013044:	c3                   	ret    
c0013045:	90                   	nop

c0013046 <VCache::~VCache()>:
c0013046:	83 ec 0c             	sub    esp,0xc
c0013049:	ba 40 20 02 c0       	mov    edx,0xc0022040
c001304e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013052:	89 10                	mov    DWORD PTR [eax],edx
c0013054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013058:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001305b:	84 c0                	test   al,al
c001305d:	74 0f                	je     c001306e <VCache::~VCache()+0x28>
c001305f:	83 ec 0c             	sub    esp,0xc
c0013062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013066:	e8 9f ff ff ff       	call   c001300a <VCache::writeWriteBuffer()>
c001306b:	83 c4 10             	add    esp,0x10
c001306e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013072:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013075:	83 ec 0c             	sub    esp,0xc
c0013078:	50                   	push   eax
c0013079:	e8 65 8f ff ff       	call   c000bfe3 <free>
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	90                   	nop
c0013082:	83 c4 0c             	add    esp,0xc
c0013085:	c3                   	ret    

c0013086 <VCache::~VCache()>:
c0013086:	83 ec 0c             	sub    esp,0xc
c0013089:	83 ec 0c             	sub    esp,0xc
c001308c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013090:	e8 b1 ff ff ff       	call   c0013046 <VCache::~VCache()>
c0013095:	83 c4 10             	add    esp,0x10
c0013098:	83 ec 08             	sub    esp,0x8
c001309b:	6a 30                	push   0x30
c001309d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a1:	e8 75 bf ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c00130a6:	83 c4 10             	add    esp,0x10
c00130a9:	83 c4 0c             	add    esp,0xc
c00130ac:	c3                   	ret    
c00130ad:	90                   	nop

c00130ae <VCache::write(unsigned long long, int, void*)>:
c00130ae:	55                   	push   ebp
c00130af:	57                   	push   edi
c00130b0:	56                   	push   esi
c00130b1:	53                   	push   ebx
c00130b2:	83 ec 28             	sub    esp,0x28
c00130b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00130b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00130bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00130c1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00130c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00130c8:	e8 bd 5d 00 00       	call   c0018e8a <Semaphore::acquire()>
c00130cd:	83 c4 10             	add    esp,0x10
c00130d0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00130d4:	74 66                	je     c001313c <VCache::write(unsigned long long, int, void*)+0x8e>
c00130d6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00130d9:	99                   	cdq    
c00130da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00130de:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00130e1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00130e4:	89 c1                	mov    ecx,eax
c00130e6:	31 f1                	xor    ecx,esi
c00130e8:	89 d0                	mov    eax,edx
c00130ea:	31 f8                	xor    eax,edi
c00130ec:	89 ca                	mov    edx,ecx
c00130ee:	09 c2                	or     edx,eax
c00130f0:	75 3e                	jne    c0013130 <VCache::write(unsigned long long, int, void*)+0x82>
c00130f2:	83 fd 01             	cmp    ebp,0x1
c00130f5:	75 39                	jne    c0013130 <VCache::write(unsigned long long, int, void*)+0x82>
c00130f7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013100:	51                   	push   ecx
c0013101:	50                   	push   eax
c0013102:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013106:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001310a:	0f af c8             	imul   ecx,eax
c001310d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0013110:	51                   	push   ecx
c0013111:	e8 6e d5 fe ff       	call   c0000684 <memcpy>
c0013116:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0013119:	83 c4 10             	add    esp,0x10
c001311c:	40                   	inc    eax
c001311d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0013120:	83 f8 40             	cmp    eax,0x40
c0013123:	75 57                	jne    c001317c <VCache::write(unsigned long long, int, void*)+0xce>
c0013125:	83 ec 0c             	sub    esp,0xc
c0013128:	53                   	push   ebx
c0013129:	e8 dc fe ff ff       	call   c001300a <VCache::writeWriteBuffer()>
c001312e:	eb 34                	jmp    c0013164 <VCache::write(unsigned long long, int, void*)+0xb6>
c0013130:	83 ec 0c             	sub    esp,0xc
c0013133:	53                   	push   ebx
c0013134:	e8 d1 fe ff ff       	call   c001300a <VCache::writeWriteBuffer()>
c0013139:	83 c4 10             	add    esp,0x10
c001313c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001313f:	83 fd 3f             	cmp    ebp,0x3f
c0013142:	7f 25                	jg     c0013169 <VCache::write(unsigned long long, int, void*)+0xbb>
c0013144:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0013147:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001314a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001314d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013151:	52                   	push   edx
c0013152:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013158:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001315c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001315f:	e8 20 d5 fe ff       	call   c0000684 <memcpy>
c0013164:	83 c4 10             	add    esp,0x10
c0013167:	eb 13                	jmp    c001317c <VCache::write(unsigned long long, int, void*)+0xce>
c0013169:	83 ec 0c             	sub    esp,0xc
c001316c:	8b 10                	mov    edx,DWORD PTR [eax]
c001316e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013172:	55                   	push   ebp
c0013173:	57                   	push   edi
c0013174:	56                   	push   esi
c0013175:	50                   	push   eax
c0013176:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013179:	83 c4 20             	add    esp,0x20
c001317c:	83 ec 0c             	sub    esp,0xc
c001317f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013182:	e8 8f 62 00 00       	call   c0019416 <Semaphore::release()>
c0013187:	83 c4 2c             	add    esp,0x2c
c001318a:	5b                   	pop    ebx
c001318b:	31 c0                	xor    eax,eax
c001318d:	5e                   	pop    esi
c001318e:	5f                   	pop    edi
c001318f:	5d                   	pop    ebp
c0013190:	c3                   	ret    
c0013191:	90                   	nop

c0013192 <VCache::read(unsigned long long, int, void*)>:
c0013192:	57                   	push   edi
c0013193:	56                   	push   esi
c0013194:	53                   	push   ebx
c0013195:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013199:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001319d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131a1:	83 ec 0c             	sub    esp,0xc
c00131a4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131a7:	e8 de 5c 00 00       	call   c0018e8a <Semaphore::acquire()>
c00131ac:	83 c4 10             	add    esp,0x10
c00131af:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131b3:	74 0c                	je     c00131c1 <VCache::read(unsigned long long, int, void*)+0x2f>
c00131b5:	83 ec 0c             	sub    esp,0xc
c00131b8:	53                   	push   ebx
c00131b9:	e8 4c fe ff ff       	call   c001300a <VCache::writeWriteBuffer()>
c00131be:	83 c4 10             	add    esp,0x10
c00131c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131c4:	83 ec 0c             	sub    esp,0xc
c00131c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00131c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131d1:	57                   	push   edi
c00131d2:	56                   	push   esi
c00131d3:	50                   	push   eax
c00131d4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00131d7:	83 c4 14             	add    esp,0x14
c00131da:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131dd:	e8 34 62 00 00       	call   c0019416 <Semaphore::release()>
c00131e2:	83 c4 10             	add    esp,0x10
c00131e5:	5b                   	pop    ebx
c00131e6:	31 c0                	xor    eax,eax
c00131e8:	5e                   	pop    esi
c00131e9:	5f                   	pop    edi
c00131ea:	c3                   	ret    
c00131eb:	90                   	nop

c00131ec <Video::putrect(int, int, int, int, unsigned int)>:
c00131ec:	55                   	push   ebp
c00131ed:	57                   	push   edi
c00131ee:	56                   	push   esi
c00131ef:	53                   	push   ebx
c00131f0:	83 ec 1c             	sub    esp,0x1c
c00131f3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00131f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00131fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00131ff:	01 e8                	add    eax,ebp
c0013201:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0013205:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001320d:	01 df                	add    edi,ebx
c001320f:	39 fb                	cmp    ebx,edi
c0013211:	7d 1b                	jge    c001322e <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0013213:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0013217:	7d 12                	jge    c001322b <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0013219:	8b 16                	mov    edx,DWORD PTR [esi]
c001321b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001321f:	53                   	push   ebx
c0013220:	55                   	push   ebp
c0013221:	45                   	inc    ebp
c0013222:	56                   	push   esi
c0013223:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013226:	83 c4 10             	add    esp,0x10
c0013229:	eb e8                	jmp    c0013213 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c001322b:	43                   	inc    ebx
c001322c:	eb e1                	jmp    c001320f <Video::putrect(int, int, int, int, unsigned int)+0x23>
c001322e:	83 c4 1c             	add    esp,0x1c
c0013231:	5b                   	pop    ebx
c0013232:	5e                   	pop    esi
c0013233:	5f                   	pop    edi
c0013234:	5d                   	pop    ebp
c0013235:	c3                   	ret    

c0013236 <Video::blit(unsigned int*, int, int, int, int)>:
c0013236:	55                   	push   ebp
c0013237:	57                   	push   edi
c0013238:	56                   	push   esi
c0013239:	53                   	push   ebx
c001323a:	83 ec 1c             	sub    esp,0x1c
c001323d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013241:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013245:	85 c0                	test   eax,eax
c0013247:	79 02                	jns    c001324b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0013249:	31 c0                	xor    eax,eax
c001324b:	c1 e0 02             	shl    eax,0x2
c001324e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013252:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013256:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001325a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001325e:	39 d8                	cmp    eax,ebx
c0013260:	7e 49                	jle    c00132ab <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013262:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013268:	7c 41                	jl     c00132ab <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001326a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001326e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0013272:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013276:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001327a:	39 f9                	cmp    ecx,edi
c001327c:	7e 22                	jle    c00132a0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001327e:	83 c5 04             	add    ebp,0x4
c0013281:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013287:	7c 14                	jl     c001329d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0013289:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001328b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001328e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013292:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013296:	56                   	push   esi
c0013297:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001329a:	83 c4 10             	add    esp,0x10
c001329d:	47                   	inc    edi
c001329e:	eb d2                	jmp    c0013272 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00132a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132a4:	43                   	inc    ebx
c00132a5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00132a9:	eb ab                	jmp    c0013256 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00132ab:	83 c4 1c             	add    esp,0x1c
c00132ae:	5b                   	pop    ebx
c00132af:	5e                   	pop    esi
c00132b0:	5f                   	pop    edi
c00132b1:	5d                   	pop    ebp
c00132b2:	c3                   	ret    
c00132b3:	90                   	nop

c00132b4 <Video::clearScreen(unsigned int)>:
c00132b4:	57                   	push   edi
c00132b5:	56                   	push   esi
c00132b6:	53                   	push   ebx
c00132b7:	31 db                	xor    ebx,ebx
c00132b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132bd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00132c3:	7e 1f                	jle    c00132e4 <Video::clearScreen(unsigned int)+0x30>
c00132c5:	31 ff                	xor    edi,edi
c00132c7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00132cd:	7e 12                	jle    c00132e1 <Video::clearScreen(unsigned int)+0x2d>
c00132cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00132d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00132d5:	53                   	push   ebx
c00132d6:	57                   	push   edi
c00132d7:	47                   	inc    edi
c00132d8:	56                   	push   esi
c00132d9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00132dc:	83 c4 10             	add    esp,0x10
c00132df:	eb e6                	jmp    c00132c7 <Video::clearScreen(unsigned int)+0x13>
c00132e1:	43                   	inc    ebx
c00132e2:	eb d9                	jmp    c00132bd <Video::clearScreen(unsigned int)+0x9>
c00132e4:	5b                   	pop    ebx
c00132e5:	5e                   	pop    esi
c00132e6:	5f                   	pop    edi
c00132e7:	c3                   	ret    

c00132e8 <Video::putpixel(int, int, unsigned int)>:
c00132e8:	c7 44 24 04 48 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022048
c00132f0:	e9 4c be ff ff       	jmp    c000f141 <Dbg::kprintf(char const*, ...)>
c00132f5:	90                   	nop

c00132f6 <Video::Video(char const*)>:
c00132f6:	83 ec 0c             	sub    esp,0xc
c00132f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fd:	83 ec 08             	sub    esp,0x8
c0013300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013304:	50                   	push   eax
c0013305:	e8 3c d4 ff ff       	call   c0010746 <Device::Device(char const*)>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	ba 60 20 02 c0       	mov    edx,0xc0022060
c0013312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013316:	89 10                	mov    DWORD PTR [eax],edx
c0013318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0013326:	90                   	nop
c0013327:	83 c4 0c             	add    esp,0xc
c001332a:	c3                   	ret    
c001332b:	90                   	nop

c001332c <Video::~Video()>:
c001332c:	83 ec 0c             	sub    esp,0xc
c001332f:	ba 60 20 02 c0       	mov    edx,0xc0022060
c0013334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013338:	89 10                	mov    DWORD PTR [eax],edx
c001333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333e:	83 ec 0c             	sub    esp,0xc
c0013341:	50                   	push   eax
c0013342:	e8 b5 d0 ff ff       	call   c00103fc <Device::~Device()>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	90                   	nop
c001334b:	83 c4 0c             	add    esp,0xc
c001334e:	c3                   	ret    
c001334f:	90                   	nop

c0013350 <Video::~Video()>:
c0013350:	83 ec 0c             	sub    esp,0xc
c0013353:	83 ec 0c             	sub    esp,0xc
c0013356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001335a:	e8 cd ff ff ff       	call   c001332c <Video::~Video()>
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	83 ec 08             	sub    esp,0x8
c0013365:	68 64 01 00 00       	push   0x164
c001336a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001336e:	e8 a8 bc ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0013373:	83 c4 10             	add    esp,0x10
c0013376:	83 c4 0c             	add    esp,0xc
c0013379:	c3                   	ret    

c001337a <Video::isMonochrome()>:
c001337a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001337e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0013384:	c3                   	ret    
c0013385:	90                   	nop

c0013386 <Video::getWidth()>:
c0013386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001338a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013390:	c3                   	ret    
c0013391:	90                   	nop

c0013392 <Video::getHeight()>:
c0013392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013396:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001339c:	c3                   	ret    
c001339d:	90                   	nop

c001339e <Video::drawCursor(int, int, unsigned char*, int)>:
c001339e:	55                   	push   ebp
c001339f:	57                   	push   edi
c00133a0:	56                   	push   esi
c00133a1:	53                   	push   ebx
c00133a2:	83 ec 2c             	sub    esp,0x2c
c00133a5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00133a9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00133ad:	83 f8 01             	cmp    eax,0x1
c00133b0:	19 c9                	sbb    ecx,ecx
c00133b2:	31 db                	xor    ebx,ebx
c00133b4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00133b8:	89 cd                	mov    ebp,ecx
c00133ba:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00133c2:	f7 d5                	not    ebp
c00133c4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00133ca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00133ce:	01 d8                	add    eax,ebx
c00133d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00133d4:	56                   	push   esi
c00133d5:	e8 b8 ff ff ff       	call   c0013392 <Video::getHeight()>
c00133da:	59                   	pop    ecx
c00133db:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00133df:	7e 70                	jle    c0013451 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00133e1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133e5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00133e9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00133ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133f4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00133fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00133ff:	89 f8                	mov    eax,edi
c0013401:	83 c0 20             	add    eax,0x20
c0013404:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013408:	56                   	push   esi
c0013409:	e8 78 ff ff ff       	call   c0013386 <Video::getWidth()>
c001340e:	5a                   	pop    edx
c001340f:	39 c7                	cmp    edi,eax
c0013411:	7d 34                	jge    c0013447 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0013413:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0013418:	74 05                	je     c001341f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001341a:	8b 06                	mov    eax,DWORD PTR [esi]
c001341c:	55                   	push   ebp
c001341d:	eb 0d                	jmp    c001342c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001341f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0013424:	74 12                	je     c0013438 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0013426:	8b 06                	mov    eax,DWORD PTR [esi]
c0013428:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001342c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013430:	57                   	push   edi
c0013431:	56                   	push   esi
c0013432:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013435:	83 c4 10             	add    esp,0x10
c0013438:	47                   	inc    edi
c0013439:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001343d:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013441:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013445:	75 c1                	jne    c0013408 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0013447:	43                   	inc    ebx
c0013448:	83 fb 20             	cmp    ebx,0x20
c001344b:	0f 85 79 ff ff ff    	jne    c00133ca <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013451:	83 c4 2c             	add    esp,0x2c
c0013454:	5b                   	pop    ebx
c0013455:	5e                   	pop    esi
c0013456:	5f                   	pop    edi
c0013457:	5d                   	pop    ebp
c0013458:	c3                   	ret    
c0013459:	90                   	nop

c001345a <ACPI::close(int, int, void*)>:
c001345a:	83 ec 1c             	sub    esp,0x1c
c001345d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0013465:	74 0a                	je     c0013471 <ACPI::close(int, int, void*)+0x17>
c0013467:	b8 00 00 00 00       	mov    eax,0x0
c001346c:	e9 9a 00 00 00       	jmp    c001350b <ACPI::close(int, int, void*)+0xb1>
c0013471:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0013476:	75 37                	jne    c00134af <ACPI::close(int, int, void*)+0x55>
c0013478:	83 ec 0c             	sub    esp,0xc
c001347b:	68 98 20 02 c0       	push   0xc0022098
c0013480:	e8 bc bc ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0013485:	83 c4 10             	add    esp,0x10
c0013488:	a1 a8 4b 02 c0       	mov    eax,ds:0xc0024ba8
c001348d:	85 c0                	test   eax,eax
c001348f:	74 07                	je     c0013498 <ACPI::close(int, int, void*)+0x3e>
c0013491:	a1 a8 4b 02 c0       	mov    eax,ds:0xc0024ba8
c0013496:	ff d0                	call   eax
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	68 4c 21 02 c0       	push   0xc002214c
c00134a0:	e8 67 24 00 00       	call   c001590c <Krnl::panic(char const*)>
c00134a5:	83 c4 10             	add    esp,0x10
c00134a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00134ad:	eb 5c                	jmp    c001350b <ACPI::close(int, int, void*)+0xb1>
c00134af:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00134b4:	75 50                	jne    c0013506 <ACPI::close(int, int, void*)+0xac>
c00134b6:	a1 a4 4b 02 c0       	mov    eax,ds:0xc0024ba4
c00134bb:	85 c0                	test   eax,eax
c00134bd:	74 07                	je     c00134c6 <ACPI::close(int, int, void*)+0x6c>
c00134bf:	a1 a4 4b 02 c0       	mov    eax,ds:0xc0024ba4
c00134c4:	ff d0                	call   eax
c00134c6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00134cb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00134d0:	83 e0 02             	and    eax,0x2
c00134d3:	74 1c                	je     c00134f1 <ACPI::close(int, int, void*)+0x97>
c00134d5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00134dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134e0:	89 c2                	mov    edx,eax
c00134e2:	ec                   	in     al,dx
c00134e3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00134e7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00134eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00134ef:	eb da                	jmp    c00134cb <ACPI::close(int, int, void*)+0x71>
c00134f1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00134f8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00134fd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0013501:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013505:	ee                   	out    dx,al
c0013506:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001350b:	83 c4 1c             	add    esp,0x1c
c001350e:	c3                   	ret    

c001350f <findRSDP()>:
c001350f:	83 ec 1c             	sub    esp,0x1c
c0013512:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0013517:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001351d:	83 e0 04             	and    eax,0x4
c0013520:	84 c0                	test   al,al
c0013522:	75 07                	jne    c001352b <findRSDP()+0x1c>
c0013524:	b8 00 00 00 00       	mov    eax,0x0
c0013529:	eb 6a                	jmp    c0013595 <findRSDP()+0x86>
c001352b:	a1 70 45 02 c0       	mov    eax,ds:0xc0024570
c0013530:	3d ff 07 00 00       	cmp    eax,0x7ff
c0013535:	7f 1b                	jg     c0013552 <findRSDP()+0x43>
c0013537:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c001353c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013542:	83 e2 fb             	and    edx,0xfffffffb
c0013545:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001354b:	b8 00 00 00 00       	mov    eax,0x0
c0013550:	eb 43                	jmp    c0013595 <findRSDP()+0x86>
c0013552:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001355a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0013562:	77 2c                	ja     c0013590 <findRSDP()+0x81>
c0013564:	83 ec 04             	sub    esp,0x4
c0013567:	6a 08                	push   0x8
c0013569:	68 a5 20 02 c0       	push   0xc00220a5
c001356e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013572:	e8 aa d0 fe ff       	call   c0000621 <memcmp>
c0013577:	83 c4 10             	add    esp,0x10
c001357a:	85 c0                	test   eax,eax
c001357c:	0f 94 c0             	sete   al
c001357f:	84 c0                	test   al,al
c0013581:	74 06                	je     c0013589 <findRSDP()+0x7a>
c0013583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013587:	eb 0c                	jmp    c0013595 <findRSDP()+0x86>
c0013589:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001358e:	eb ca                	jmp    c001355a <findRSDP()+0x4b>
c0013590:	b8 00 00 00 00       	mov    eax,0x0
c0013595:	83 c4 1c             	add    esp,0x1c
c0013598:	c3                   	ret    

c0013599 <loadACPITables(unsigned char*)>:
c0013599:	56                   	push   esi
c001359a:	53                   	push   ebx
c001359b:	83 ec 44             	sub    esp,0x44
c001359e:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c00135a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135a9:	83 e0 04             	and    eax,0x4
c00135ac:	84 c0                	test   al,al
c00135ae:	0f 84 05 02 00 00    	je     c00137b9 <loadACPITables(unsigned char*)+0x220>
c00135b4:	a0 c0 4d 02 c0       	mov    al,ds:0xc0024dc0
c00135b9:	84 c0                	test   al,al
c00135bb:	74 75                	je     c0013632 <loadACPITables(unsigned char*)+0x99>
c00135bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00135c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135cc:	83 e8 24             	sub    eax,0x24
c00135cf:	c1 e8 03             	shr    eax,0x3
c00135d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00135d6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00135de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00135e2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00135e6:	0f 8d b2 00 00 00    	jge    c001369e <loadACPITables(unsigned char*)+0x105>
c00135ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135f0:	83 c0 24             	add    eax,0x24
c00135f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00135f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00135fb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00135ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013603:	c1 e0 03             	shl    eax,0x3
c0013606:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001360a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001360e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013611:	8b 00                	mov    eax,DWORD PTR [eax]
c0013613:	89 c1                	mov    ecx,eax
c0013615:	a1 ac 4b 02 c0       	mov    eax,ds:0xc0024bac
c001361a:	8d 50 01             	lea    edx,[eax+0x1]
c001361d:	89 15 ac 4b 02 c0    	mov    DWORD PTR ds:0xc0024bac,edx
c0013623:	89 ca                	mov    edx,ecx
c0013625:	89 14 c5 c4 4b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb43c],edx
c001362c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013630:	eb ac                	jmp    c00135de <loadACPITables(unsigned char*)+0x45>
c0013632:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013636:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001363a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001363e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013641:	83 e8 24             	sub    eax,0x24
c0013644:	c1 e8 02             	shr    eax,0x2
c0013647:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001364b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0013653:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013657:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001365b:	7d 41                	jge    c001369e <loadACPITables(unsigned char*)+0x105>
c001365d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013661:	83 c0 24             	add    eax,0x24
c0013664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013668:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001366c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013670:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013674:	c1 e0 02             	shl    eax,0x2
c0013677:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001367b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001367f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013681:	a1 ac 4b 02 c0       	mov    eax,ds:0xc0024bac
c0013686:	8d 50 01             	lea    edx,[eax+0x1]
c0013689:	89 15 ac 4b 02 c0    	mov    DWORD PTR ds:0xc0024bac,edx
c001368f:	89 ca                	mov    edx,ecx
c0013691:	89 14 c5 c4 4b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb43c],edx
c0013698:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001369c:	eb b5                	jmp    c0013653 <loadACPITables(unsigned char*)+0xba>
c001369e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00136a6:	a1 ac 4b 02 c0       	mov    eax,ds:0xc0024bac
c00136ab:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00136af:	0f 8d 05 01 00 00    	jge    c00137ba <loadACPITables(unsigned char*)+0x221>
c00136b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136b9:	8b 04 c5 c4 4b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb43c]
c00136c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d0:	25 ff 0f 00 00       	and    eax,0xfff
c00136d5:	89 c6                	mov    esi,eax
c00136d7:	e8 d7 ab ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c00136dc:	89 c3                	mov    ebx,eax
c00136de:	83 ec 0c             	sub    esp,0xc
c00136e1:	6a 01                	push   0x1
c00136e3:	e8 3e aa ff ff       	call   c000e126 <Virt::allocateKernelVirtualPages(int)>
c00136e8:	83 c4 10             	add    esp,0x10
c00136eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136ef:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00136f5:	83 ec 0c             	sub    esp,0xc
c00136f8:	6a 01                	push   0x1
c00136fa:	6a 01                	push   0x1
c00136fc:	50                   	push   eax
c00136fd:	52                   	push   edx
c00136fe:	53                   	push   ebx
c00136ff:	e8 e0 b3 ff ff       	call   c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013704:	83 c4 20             	add    esp,0x20
c0013707:	09 f0                	or     eax,esi
c0013709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001370d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013711:	c1 e0 03             	shl    eax,0x3
c0013714:	05 c0 4b 02 c0       	add    eax,0xc0024bc0
c0013719:	83 ec 04             	sub    esp,0x4
c001371c:	6a 04                	push   0x4
c001371e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013722:	50                   	push   eax
c0013723:	e8 5c cf fe ff       	call   c0000684 <memcpy>
c0013728:	83 c4 10             	add    esp,0x10
c001372b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001372f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013736:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001373a:	05 00 10 00 00       	add    eax,0x1000
c001373f:	c1 e8 0c             	shr    eax,0xc
c0013742:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374a:	89 04 24             	mov    DWORD PTR [esp],eax
c001374d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013751:	25 ff 0f 00 00       	and    eax,0xfff
c0013756:	89 c6                	mov    esi,eax
c0013758:	e8 56 ab ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c001375d:	89 c3                	mov    ebx,eax
c001375f:	83 ec 0c             	sub    esp,0xc
c0013762:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013766:	e8 bb a9 ff ff       	call   c000e126 <Virt::allocateKernelVirtualPages(int)>
c001376b:	83 c4 10             	add    esp,0x10
c001376e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013772:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013778:	83 ec 0c             	sub    esp,0xc
c001377b:	6a 01                	push   0x1
c001377d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013781:	50                   	push   eax
c0013782:	52                   	push   edx
c0013783:	53                   	push   ebx
c0013784:	e8 5b b3 ff ff       	call   c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013789:	83 c4 20             	add    esp,0x20
c001378c:	09 f0                	or     eax,esi
c001378e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013792:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013795:	83 ec 0c             	sub    esp,0xc
c0013798:	50                   	push   eax
c0013799:	e8 d5 ac ff ff       	call   c000e473 <Virt::freeKernelVirtualPages(unsigned long)>
c001379e:	83 c4 10             	add    esp,0x10
c00137a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137a9:	89 14 c5 c4 4b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb43c],edx
c00137b0:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00137b4:	e9 ed fe ff ff       	jmp    c00136a6 <loadACPITables(unsigned char*)+0x10d>
c00137b9:	90                   	nop
c00137ba:	83 c4 44             	add    esp,0x44
c00137bd:	5b                   	pop    ebx
c00137be:	5e                   	pop    esi
c00137bf:	c3                   	ret    

c00137c0 <findRSDT(unsigned char*)>:
c00137c0:	56                   	push   esi
c00137c1:	53                   	push   ebx
c00137c2:	83 ec 44             	sub    esp,0x44
c00137c5:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c00137ca:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00137d0:	83 e0 04             	and    eax,0x4
c00137d3:	84 c0                	test   al,al
c00137d5:	75 0a                	jne    c00137e1 <findRSDT(unsigned char*)+0x21>
c00137d7:	b8 00 00 00 00       	mov    eax,0x0
c00137dc:	e9 f7 00 00 00       	jmp    c00138d8 <findRSDT(unsigned char*)+0x118>
c00137e1:	83 ec 04             	sub    esp,0x4
c00137e4:	6a 24                	push   0x24
c00137e6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00137ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00137ee:	50                   	push   eax
c00137ef:	e8 90 ce fe ff       	call   c0000684 <memcpy>
c00137f4:	83 c4 10             	add    esp,0x10
c00137f7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00137fb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137ff:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0013807:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001380b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001380f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013813:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013817:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001381b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001381f:	25 ff 0f 00 00       	and    eax,0xfff
c0013824:	89 c6                	mov    esi,eax
c0013826:	e8 88 aa ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c001382b:	89 c3                	mov    ebx,eax
c001382d:	83 ec 0c             	sub    esp,0xc
c0013830:	6a 02                	push   0x2
c0013832:	e8 ef a8 ff ff       	call   c000e126 <Virt::allocateKernelVirtualPages(int)>
c0013837:	83 c4 10             	add    esp,0x10
c001383a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001383e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013844:	83 ec 0c             	sub    esp,0xc
c0013847:	6a 01                	push   0x1
c0013849:	6a 02                	push   0x2
c001384b:	50                   	push   eax
c001384c:	52                   	push   edx
c001384d:	53                   	push   ebx
c001384e:	e8 91 b2 ff ff       	call   c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013853:	83 c4 20             	add    esp,0x20
c0013856:	09 f0                	or     eax,esi
c0013858:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001385c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013860:	25 ff 0f 00 00       	and    eax,0xfff
c0013865:	89 c6                	mov    esi,eax
c0013867:	e8 47 aa ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c001386c:	89 c3                	mov    ebx,eax
c001386e:	83 ec 0c             	sub    esp,0xc
c0013871:	6a 02                	push   0x2
c0013873:	e8 ae a8 ff ff       	call   c000e126 <Virt::allocateKernelVirtualPages(int)>
c0013878:	83 c4 10             	add    esp,0x10
c001387b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001387f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013885:	83 ec 0c             	sub    esp,0xc
c0013888:	6a 01                	push   0x1
c001388a:	6a 02                	push   0x2
c001388c:	50                   	push   eax
c001388d:	52                   	push   edx
c001388e:	53                   	push   ebx
c001388f:	e8 50 b2 ff ff       	call   c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013894:	83 c4 20             	add    esp,0x20
c0013897:	09 f0                	or     eax,esi
c0013899:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001389d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00138a2:	75 11                	jne    c00138b5 <findRSDT(unsigned char*)+0xf5>
c00138a4:	c6 05 c0 4d 02 c0 00 	mov    BYTE PTR ds:0xc0024dc0,0x0
c00138ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138af:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138b3:	eb 1f                	jmp    c00138d4 <findRSDT(unsigned char*)+0x114>
c00138b5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00138ba:	75 11                	jne    c00138cd <findRSDT(unsigned char*)+0x10d>
c00138bc:	c6 05 c0 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024dc0,0x1
c00138c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138c7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138cb:	eb 07                	jmp    c00138d4 <findRSDT(unsigned char*)+0x114>
c00138cd:	b8 00 00 00 00       	mov    eax,0x0
c00138d2:	eb 04                	jmp    c00138d8 <findRSDT(unsigned char*)+0x118>
c00138d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00138d8:	83 c4 44             	add    esp,0x44
c00138db:	5b                   	pop    ebx
c00138dc:	5e                   	pop    esi
c00138dd:	c3                   	ret    

c00138de <findDataTable(unsigned char*, char*)>:
c00138de:	83 ec 1c             	sub    esp,0x1c
c00138e1:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c00138e6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138ec:	83 e0 04             	and    eax,0x4
c00138ef:	84 c0                	test   al,al
c00138f1:	75 07                	jne    c00138fa <findDataTable(unsigned char*, char*)+0x1c>
c00138f3:	b8 00 00 00 00       	mov    eax,0x0
c00138f8:	eb 7c                	jmp    c0013976 <findDataTable(unsigned char*, char*)+0x98>
c00138fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013902:	a1 ac 4b 02 c0       	mov    eax,ds:0xc0024bac
c0013907:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001390b:	7d 3a                	jge    c0013947 <findDataTable(unsigned char*, char*)+0x69>
c001390d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013911:	c1 e0 03             	shl    eax,0x3
c0013914:	05 c0 4b 02 c0       	add    eax,0xc0024bc0
c0013919:	83 ec 04             	sub    esp,0x4
c001391c:	6a 04                	push   0x4
c001391e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013922:	50                   	push   eax
c0013923:	e8 f9 cc fe ff       	call   c0000621 <memcmp>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	85 c0                	test   eax,eax
c001392d:	0f 94 c0             	sete   al
c0013930:	84 c0                	test   al,al
c0013932:	74 0d                	je     c0013941 <findDataTable(unsigned char*, char*)+0x63>
c0013934:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013938:	8b 04 c5 c4 4b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb43c]
c001393f:	eb 35                	jmp    c0013976 <findDataTable(unsigned char*, char*)+0x98>
c0013941:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013945:	eb bb                	jmp    c0013902 <findDataTable(unsigned char*, char*)+0x24>
c0013947:	a0 c0 4d 02 c0       	mov    al,ds:0xc0024dc0
c001394c:	84 c0                	test   al,al
c001394e:	74 07                	je     c0013957 <findDataTable(unsigned char*, char*)+0x79>
c0013950:	b8 58 00 00 00       	mov    eax,0x58
c0013955:	eb 05                	jmp    c001395c <findDataTable(unsigned char*, char*)+0x7e>
c0013957:	b8 52 00 00 00       	mov    eax,0x52
c001395c:	83 ec 04             	sub    esp,0x4
c001395f:	50                   	push   eax
c0013960:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013964:	68 70 21 02 c0       	push   0xc0022170
c0013969:	e8 d3 b7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001396e:	83 c4 10             	add    esp,0x10
c0013971:	b8 00 00 00 00       	mov    eax,0x0
c0013976:	83 c4 1c             	add    esp,0x1c
c0013979:	c3                   	ret    

c001397a <scanMADT()>:
c001397a:	83 ec 2c             	sub    esp,0x2c
c001397d:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0013982:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013988:	83 e0 04             	and    eax,0x4
c001398b:	84 c0                	test   al,al
c001398d:	0f 84 73 03 00 00    	je     c0013d06 <scanMADT()+0x38c>
c0013993:	e8 77 fb ff ff       	call   c001350f <findRSDP()>
c0013998:	a3 cc 4d 02 c0       	mov    ds:0xc0024dcc,eax
c001399d:	a1 cc 4d 02 c0       	mov    eax,ds:0xc0024dcc
c00139a2:	85 c0                	test   eax,eax
c00139a4:	75 19                	jne    c00139bf <scanMADT()+0x45>
c00139a6:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c00139ab:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139b1:	83 e2 fb             	and    edx,0xfffffffb
c00139b4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139ba:	e9 4b 03 00 00       	jmp    c0013d0a <scanMADT()+0x390>
c00139bf:	a1 cc 4d 02 c0       	mov    eax,ds:0xc0024dcc
c00139c4:	83 ec 0c             	sub    esp,0xc
c00139c7:	50                   	push   eax
c00139c8:	e8 f3 fd ff ff       	call   c00137c0 <findRSDT(unsigned char*)>
c00139cd:	83 c4 10             	add    esp,0x10
c00139d0:	a3 c8 4d 02 c0       	mov    ds:0xc0024dc8,eax
c00139d5:	a1 c8 4d 02 c0       	mov    eax,ds:0xc0024dc8
c00139da:	85 c0                	test   eax,eax
c00139dc:	75 19                	jne    c00139f7 <scanMADT()+0x7d>
c00139de:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c00139e3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139e9:	83 e2 fb             	and    edx,0xfffffffb
c00139ec:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139f2:	e9 13 03 00 00       	jmp    c0013d0a <scanMADT()+0x390>
c00139f7:	a1 c8 4d 02 c0       	mov    eax,ds:0xc0024dc8
c00139fc:	83 ec 0c             	sub    esp,0xc
c00139ff:	50                   	push   eax
c0013a00:	e8 94 fb ff ff       	call   c0013599 <loadACPITables(unsigned char*)>
c0013a05:	83 c4 10             	add    esp,0x10
c0013a08:	a1 c8 4d 02 c0       	mov    eax,ds:0xc0024dc8
c0013a0d:	83 ec 08             	sub    esp,0x8
c0013a10:	68 ae 20 02 c0       	push   0xc00220ae
c0013a15:	50                   	push   eax
c0013a16:	e8 c3 fe ff ff       	call   c00138de <findDataTable(unsigned char*, char*)>
c0013a1b:	83 c4 10             	add    esp,0x10
c0013a1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a22:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013a27:	75 19                	jne    c0013a42 <scanMADT()+0xc8>
c0013a29:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0013a2e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a34:	83 e2 fe             	and    edx,0xfffffffe
c0013a37:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a3d:	e9 c8 02 00 00       	jmp    c0013d0a <scanMADT()+0x390>
c0013a42:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a51:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013a55:	0f 87 af 02 00 00    	ja     c0013d0a <scanMADT()+0x390>
c0013a5b:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013a63:	0f 87 a1 02 00 00    	ja     c0013d0a <scanMADT()+0x390>
c0013a69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a75:	8d 50 01             	lea    edx,[eax+0x1]
c0013a78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a80:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a84:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013a88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a8c:	8d 50 01             	lea    edx,[eax+0x1]
c0013a8f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a97:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a9b:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013a9f:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013aa4:	0f 86 5f 02 00 00    	jbe    c0013d09 <scanMADT()+0x38f>
c0013aaa:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013aaf:	75 57                	jne    c0013b08 <scanMADT()+0x18e>
c0013ab1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ab5:	8d 50 01             	lea    edx,[eax+0x1]
c0013ab8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013abc:	8a 15 00 4f 02 c0    	mov    dl,BYTE PTR ds:0xc0024f00
c0013ac2:	0f b6 d2             	movzx  edx,dl
c0013ac5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ac9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013acd:	88 82 40 4f 02 c0    	mov    BYTE PTR [edx-0x3ffdb0c0],al
c0013ad3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ad7:	8d 50 01             	lea    edx,[eax+0x1]
c0013ada:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ade:	8a 15 00 4f 02 c0    	mov    dl,BYTE PTR ds:0xc0024f00
c0013ae4:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013ae7:	88 0d 00 4f 02 c0    	mov    BYTE PTR ds:0xc0024f00,cl
c0013aed:	0f b6 d2             	movzx  edx,dl
c0013af0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013af4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013af8:	88 82 20 4f 02 c0    	mov    BYTE PTR [edx-0x3ffdb0e0],al
c0013afe:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013b03:	e9 ea 01 00 00       	jmp    c0013cf2 <scanMADT()+0x378>
c0013b08:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013b0d:	0f 85 14 01 00 00    	jne    c0013c27 <scanMADT()+0x2ad>
c0013b13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b17:	8d 50 01             	lea    edx,[eax+0x1]
c0013b1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b1e:	8a 15 d0 4d 02 c0    	mov    dl,BYTE PTR ds:0xc0024dd0
c0013b24:	0f b6 d2             	movzx  edx,dl
c0013b27:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b2b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b2f:	88 82 e0 4d 02 c0    	mov    BYTE PTR [edx-0x3ffdb220],al
c0013b35:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013b39:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b41:	01 d0                	add    eax,edx
c0013b43:	83 c0 2c             	add    eax,0x2c
c0013b46:	8a 00                	mov    al,BYTE PTR [eax]
c0013b48:	0f b6 d0             	movzx  edx,al
c0013b4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b4f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b56:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b5a:	0f b6 c0             	movzx  eax,al
c0013b5d:	c1 e0 08             	shl    eax,0x8
c0013b60:	89 d1                	mov    ecx,edx
c0013b62:	09 c1                	or     ecx,eax
c0013b64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b68:	8d 50 02             	lea    edx,[eax+0x2]
c0013b6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b6f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b73:	0f b6 c0             	movzx  eax,al
c0013b76:	c1 e0 10             	shl    eax,0x10
c0013b79:	09 c1                	or     ecx,eax
c0013b7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b7f:	8d 50 03             	lea    edx,[eax+0x3]
c0013b82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b8a:	0f b6 c0             	movzx  eax,al
c0013b8d:	c1 e0 18             	shl    eax,0x18
c0013b90:	09 c1                	or     ecx,eax
c0013b92:	89 ca                	mov    edx,ecx
c0013b94:	a0 d0 4d 02 c0       	mov    al,ds:0xc0024dd0
c0013b99:	0f b6 c0             	movzx  eax,al
c0013b9c:	89 14 85 00 4e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb200],edx
c0013ba3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013ba8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bb0:	01 d0                	add    eax,edx
c0013bb2:	83 c0 2c             	add    eax,0x2c
c0013bb5:	8a 00                	mov    al,BYTE PTR [eax]
c0013bb7:	0f b6 d0             	movzx  edx,al
c0013bba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bbe:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bc5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013bc9:	0f b6 c0             	movzx  eax,al
c0013bcc:	c1 e0 08             	shl    eax,0x8
c0013bcf:	89 d1                	mov    ecx,edx
c0013bd1:	09 c1                	or     ecx,eax
c0013bd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bd7:	8d 50 02             	lea    edx,[eax+0x2]
c0013bda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bde:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013be2:	0f b6 c0             	movzx  eax,al
c0013be5:	c1 e0 10             	shl    eax,0x10
c0013be8:	09 c1                	or     ecx,eax
c0013bea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bee:	8d 50 03             	lea    edx,[eax+0x3]
c0013bf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bf5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013bf9:	0f b6 c0             	movzx  eax,al
c0013bfc:	c1 e0 18             	shl    eax,0x18
c0013bff:	09 c1                	or     ecx,eax
c0013c01:	89 ca                	mov    edx,ecx
c0013c03:	a0 d0 4d 02 c0       	mov    al,ds:0xc0024dd0
c0013c08:	0f b6 c0             	movzx  eax,al
c0013c0b:	89 14 85 80 4e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb180],edx
c0013c12:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c17:	a0 d0 4d 02 c0       	mov    al,ds:0xc0024dd0
c0013c1c:	40                   	inc    eax
c0013c1d:	a2 d0 4d 02 c0       	mov    ds:0xc0024dd0,al
c0013c22:	e9 cb 00 00 00       	jmp    c0013cf2 <scanMADT()+0x378>
c0013c27:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013c2c:	0f 85 a6 00 00 00    	jne    c0013cd8 <scanMADT()+0x35e>
c0013c32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c36:	8d 50 01             	lea    edx,[eax+0x1]
c0013c39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c41:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c45:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013c49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c4d:	8d 50 01             	lea    edx,[eax+0x1]
c0013c50:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c58:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c5c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013c60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c68:	01 d0                	add    eax,edx
c0013c6a:	83 c0 2c             	add    eax,0x2c
c0013c6d:	8a 00                	mov    al,BYTE PTR [eax]
c0013c6f:	0f b6 d0             	movzx  edx,al
c0013c72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c76:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c7d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c81:	0f b6 c0             	movzx  eax,al
c0013c84:	c1 e0 08             	shl    eax,0x8
c0013c87:	89 d1                	mov    ecx,edx
c0013c89:	09 c1                	or     ecx,eax
c0013c8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c8f:	8d 50 02             	lea    edx,[eax+0x2]
c0013c92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c96:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c9a:	0f b6 c0             	movzx  eax,al
c0013c9d:	c1 e0 10             	shl    eax,0x10
c0013ca0:	09 c1                	or     ecx,eax
c0013ca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca6:	8d 50 03             	lea    edx,[eax+0x3]
c0013ca9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cb1:	0f b6 c0             	movzx  eax,al
c0013cb4:	c1 e0 18             	shl    eax,0x18
c0013cb7:	09 c8                	or     eax,ecx
c0013cb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cbd:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cc2:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013cc7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013ccc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013cd0:	88 90 80 3c 02 c0    	mov    BYTE PTR [eax-0x3ffdc380],dl
c0013cd6:	eb 1a                	jmp    c0013cf2 <scanMADT()+0x378>
c0013cd8:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013cdd:	75 07                	jne    c0013ce6 <scanMADT()+0x36c>
c0013cdf:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013ce4:	eb 0c                	jmp    c0013cf2 <scanMADT()+0x378>
c0013ce6:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013ceb:	75 05                	jne    c0013cf2 <scanMADT()+0x378>
c0013ced:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013cf2:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013cf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cfb:	01 d0                	add    eax,edx
c0013cfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d01:	e9 44 fd ff ff       	jmp    c0013a4a <scanMADT()+0xd0>
c0013d06:	90                   	nop
c0013d07:	eb 01                	jmp    c0013d0a <scanMADT()+0x390>
c0013d09:	90                   	nop
c0013d0a:	83 c4 2c             	add    esp,0x2c
c0013d0d:	c3                   	ret    

c0013d0e <ACPI::ACPI()>:
c0013d0e:	83 ec 0c             	sub    esp,0xc
c0013d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d15:	83 ec 08             	sub    esp,0x8
c0013d18:	68 b3 20 02 c0       	push   0xc00220b3
c0013d1d:	50                   	push   eax
c0013d1e:	e8 23 ca ff ff       	call   c0010746 <Device::Device(char const*)>
c0013d23:	83 c4 10             	add    esp,0x10
c0013d26:	ba 3c 22 02 c0       	mov    edx,0xc002223c
c0013d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2f:	89 10                	mov    DWORD PTR [eax],edx
c0013d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d35:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d40:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4e:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5c:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013d63:	e8 12 fc ff ff       	call   c001397a <scanMADT()>
c0013d68:	90                   	nop
c0013d69:	83 c4 0c             	add    esp,0xc
c0013d6c:	c3                   	ret    
c0013d6d:	90                   	nop

c0013d6e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013d6e:	83 ec 2c             	sub    esp,0x2c
c0013d71:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013d75:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d79:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013d7d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d81:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013d86:	88 d0                	mov    al,dl
c0013d88:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d8c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013d91:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013d99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d9d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013da3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013da7:	0f 8d 97 00 00 00    	jge    c0013e44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013dad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013db1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013db5:	83 c2 2a             	add    edx,0x2a
c0013db8:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013dbc:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013dc1:	75 78                	jne    c0013e3b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013dc3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013dc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dcb:	83 c2 2a             	add    edx,0x2a
c0013dce:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013dd2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013dd6:	75 63                	jne    c0013e3b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013dd8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ddd:	74 3a                	je     c0013e19 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013ddf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013de3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013de7:	83 c2 2a             	add    edx,0x2a
c0013dea:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013dee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013df2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013df5:	39 c2                	cmp    edx,eax
c0013df7:	74 10                	je     c0013e09 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013df9:	83 ec 0c             	sub    esp,0xc
c0013dfc:	68 a0 21 02 c0       	push   0xc00221a0
c0013e01:	e8 06 1b 00 00       	call   c001590c <Krnl::panic(char const*)>
c0013e06:	83 c4 10             	add    esp,0x10
c0013e09:	83 ec 0c             	sub    esp,0xc
c0013e0c:	68 b8 20 02 c0       	push   0xc00220b8
c0013e11:	e8 f6 1a 00 00       	call   c001590c <Krnl::panic(char const*)>
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e25:	83 c2 2a             	add    edx,0x2a
c0013e28:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013e2c:	8b 02                	mov    eax,DWORD PTR [edx]
c0013e2e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013e31:	89 01                	mov    DWORD PTR [ecx],eax
c0013e33:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013e36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013e3b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013e3f:	e9 55 ff ff ff       	jmp    c0013d99 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013e44:	90                   	nop
c0013e45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e49:	83 c4 2c             	add    esp,0x2c
c0013e4c:	c2 04 00             	ret    0x4
c0013e4f:	90                   	nop

c0013e50 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013e50:	56                   	push   esi
c0013e51:	53                   	push   ebx
c0013e52:	83 ec 14             	sub    esp,0x14
c0013e55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e59:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013e61:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013e66:	88 c8                	mov    al,cl
c0013e68:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013e6c:	88 d0                	mov    al,dl
c0013e6e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e76:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013e7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e80:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013e86:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013e8b:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013e90:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013e95:	83 ec 04             	sub    esp,0x4
c0013e98:	56                   	push   esi
c0013e99:	53                   	push   ebx
c0013e9a:	51                   	push   ecx
c0013e9b:	52                   	push   edx
c0013e9c:	50                   	push   eax
c0013e9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013ea1:	68 d0 21 02 c0       	push   0xc00221d0
c0013ea6:	e8 96 b2 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0013eab:	83 c4 20             	add    esp,0x20
c0013eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb2:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013eb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ebc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013ebf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013ec3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ecb:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013ed1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ed5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013ed8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013edc:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ee5:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013eeb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013eef:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef6:	83 c2 2a             	add    edx,0x2a
c0013ef9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f01:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f0b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013f0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f12:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1a:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f20:	8d 50 01             	lea    edx,[eax+0x1]
c0013f23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f27:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f31:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f37:	3d 00 08 00 00       	cmp    eax,0x800
c0013f3c:	75 10                	jne    c0013f4e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013f3e:	83 ec 0c             	sub    esp,0xc
c0013f41:	68 c7 20 02 c0       	push   0xc00220c7
c0013f46:	e8 c1 19 00 00       	call   c001590c <Krnl::panic(char const*)>
c0013f4b:	83 c4 10             	add    esp,0x10
c0013f4e:	90                   	nop
c0013f4f:	83 c4 14             	add    esp,0x14
c0013f52:	5b                   	pop    ebx
c0013f53:	5e                   	pop    esi
c0013f54:	c3                   	ret    
c0013f55:	90                   	nop

c0013f56 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013f56:	b8 00 00 00 00       	mov    eax,0x0
c0013f5b:	c3                   	ret    

c0013f5c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013f5c:	83 ec 1c             	sub    esp,0x1c
c0013f5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013f63:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013f66:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013f6a:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0013f6f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f74:	83 ec 08             	sub    esp,0x8
c0013f77:	52                   	push   edx
c0013f78:	50                   	push   eax
c0013f79:	e8 66 76 ff ff       	call   c000b5e4 <Computer::readCMOS(unsigned char)>
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013f85:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0013f8a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f8f:	83 ec 04             	sub    esp,0x4
c0013f92:	6a 01                	push   0x1
c0013f94:	52                   	push   edx
c0013f95:	50                   	push   eax
c0013f96:	e8 5f 77 ff ff       	call   c000b6fa <Computer::writeCMOS(unsigned char, unsigned char)>
c0013f9b:	83 c4 10             	add    esp,0x10
c0013f9e:	90                   	nop
c0013f9f:	83 c4 1c             	add    esp,0x1c
c0013fa2:	c3                   	ret    
c0013fa3:	90                   	nop

c0013fa4 <ACPI::open(int, int, void*)>:
c0013fa4:	53                   	push   ebx
c0013fa5:	83 ec 18             	sub    esp,0x18
c0013fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fac:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013fb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb7:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013fbd:	84 c0                	test   al,al
c0013fbf:	74 60                	je     c0014021 <ACPI::open(int, int, void*)+0x7d>
c0013fc1:	83 ec 0c             	sub    esp,0xc
c0013fc4:	68 58 01 00 00       	push   0x158
c0013fc9:	e8 3e b0 ff ff       	call   c000f00c <operator new(unsigned long)>
c0013fce:	83 c4 10             	add    esp,0x10
c0013fd1:	89 c3                	mov    ebx,eax
c0013fd3:	83 ec 0c             	sub    esp,0xc
c0013fd6:	53                   	push   ebx
c0013fd7:	e8 68 80 00 00       	call   c001c044 <PCI::PCI()>
c0013fdc:	83 c4 10             	add    esp,0x10
c0013fdf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0013fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe7:	83 ec 08             	sub    esp,0x8
c0013fea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013fee:	50                   	push   eax
c0013fef:	e8 62 c5 ff ff       	call   c0010556 <Device::addChild(Device*)>
c0013ff4:	83 c4 10             	add    esp,0x10
c0013ff7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ffd:	83 c0 08             	add    eax,0x8
c0014000:	8b 00                	mov    eax,DWORD PTR [eax]
c0014002:	6a 00                	push   0x0
c0014004:	6a 00                	push   0x0
c0014006:	6a 00                	push   0x0
c0014008:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001400c:	ff d0                	call   eax
c001400e:	83 c4 10             	add    esp,0x10
c0014011:	83 ec 0c             	sub    esp,0xc
c0014014:	68 e4 20 02 c0       	push   0xc00220e4
c0014019:	e8 23 b1 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001401e:	83 c4 10             	add    esp,0x10
c0014021:	83 ec 0c             	sub    esp,0xc
c0014024:	68 ef 20 02 c0       	push   0xc00220ef
c0014029:	e8 04 38 00 00       	call   c0017832 <Thr::loadKernelSymbolTable(char const*)>
c001402e:	83 c4 10             	add    esp,0x10
c0014031:	8b 1d 28 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024528
c0014037:	83 ec 08             	sub    esp,0x8
c001403a:	6a 01                	push   0x1
c001403c:	68 0d 21 02 c0       	push   0xc002210d
c0014041:	e8 ce 42 00 00       	call   c0018314 <Thr::loadDLL(char const*, bool)>
c0014046:	83 c4 10             	add    esp,0x10
c0014049:	83 ec 08             	sub    esp,0x8
c001404c:	53                   	push   ebx
c001404d:	50                   	push   eax
c001404e:	e8 87 44 00 00       	call   c00184da <Thr::executeDLL(unsigned long, void*)>
c0014053:	83 c4 10             	add    esp,0x10
c0014056:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c001405b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014061:	83 e0 04             	and    eax,0x4
c0014064:	84 c0                	test   al,al
c0014066:	0f 84 cf 00 00 00    	je     c001413b <ACPI::open(int, int, void*)+0x197>
c001406c:	83 ec 0c             	sub    esp,0xc
c001406f:	68 14 01 00 00       	push   0x114
c0014074:	e8 93 af ff ff       	call   c000f00c <operator new(unsigned long)>
c0014079:	83 c4 10             	add    esp,0x10
c001407c:	89 c3                	mov    ebx,eax
c001407e:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0014083:	83 ec 04             	sub    esp,0x4
c0014086:	50                   	push   eax
c0014087:	68 2a 21 02 c0       	push   0xc002212a
c001408c:	53                   	push   ebx
c001408d:	e8 e6 b5 ff ff       	call   c000f678 <File::File(char const*, Process*)>
c0014092:	83 c4 10             	add    esp,0x10
c0014095:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014099:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001409e:	74 17                	je     c00140b7 <ACPI::open(int, int, void*)+0x113>
c00140a0:	83 ec 0c             	sub    esp,0xc
c00140a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140a7:	e8 9e b8 ff ff       	call   c000f94a <File::exists()>
c00140ac:	83 c4 10             	add    esp,0x10
c00140af:	84 c0                	test   al,al
c00140b1:	74 04                	je     c00140b7 <ACPI::open(int, int, void*)+0x113>
c00140b3:	b0 01                	mov    al,0x1
c00140b5:	eb 02                	jmp    c00140b9 <ACPI::open(int, int, void*)+0x115>
c00140b7:	b0 00                	mov    al,0x0
c00140b9:	84 c0                	test   al,al
c00140bb:	74 25                	je     c00140e2 <ACPI::open(int, int, void*)+0x13e>
c00140bd:	8b 1d 28 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024528
c00140c3:	83 ec 08             	sub    esp,0x8
c00140c6:	6a 01                	push   0x1
c00140c8:	68 2a 21 02 c0       	push   0xc002212a
c00140cd:	e8 42 42 00 00       	call   c0018314 <Thr::loadDLL(char const*, bool)>
c00140d2:	83 c4 10             	add    esp,0x10
c00140d5:	83 ec 08             	sub    esp,0x8
c00140d8:	53                   	push   ebx
c00140d9:	50                   	push   eax
c00140da:	e8 fb 43 00 00       	call   c00184da <Thr::executeDLL(unsigned long, void*)>
c00140df:	83 c4 10             	add    esp,0x10
c00140e2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00140e7:	74 1e                	je     c0014107 <ACPI::open(int, int, void*)+0x163>
c00140e9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00140ee:	74 17                	je     c0014107 <ACPI::open(int, int, void*)+0x163>
c00140f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00140f6:	83 c0 08             	add    eax,0x8
c00140f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00140fb:	83 ec 0c             	sub    esp,0xc
c00140fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014102:	ff d0                	call   eax
c0014104:	83 c4 10             	add    esp,0x10
c0014107:	a1 c8 4d 02 c0       	mov    eax,ds:0xc0024dc8
c001410c:	83 ec 08             	sub    esp,0x8
c001410f:	68 47 21 02 c0       	push   0xc0022147
c0014114:	50                   	push   eax
c0014115:	e8 c4 f7 ff ff       	call   c00138de <findDataTable(unsigned char*, char*)>
c001411a:	83 c4 10             	add    esp,0x10
c001411d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014121:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0014126:	74 13                	je     c001413b <ACPI::open(int, int, void*)+0x197>
c0014128:	83 ec 08             	sub    esp,0x8
c001412b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001412f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014133:	e8 24 fe ff ff       	call   c0013f5c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0014138:	83 c4 10             	add    esp,0x10
c001413b:	b8 00 00 00 00       	mov    eax,0x0
c0014140:	83 c4 18             	add    esp,0x18
c0014143:	5b                   	pop    ebx
c0014144:	c3                   	ret    
c0014145:	90                   	nop

c0014146 <ACPI::sleep()>:
c0014146:	83 ec 0c             	sub    esp,0xc
c0014149:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c001414e:	85 c0                	test   eax,eax
c0014150:	74 07                	je     c0014159 <ACPI::sleep()+0x13>
c0014152:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c0014157:	ff d0                	call   eax
c0014159:	90                   	nop
c001415a:	83 c4 0c             	add    esp,0xc
c001415d:	c3                   	ret    

c001415e <CPU::close(int, int, void*)>:
c001415e:	31 c0                	xor    eax,eax
c0014160:	c3                   	ret    

c0014161 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0014161:	55                   	push   ebp
c0014162:	57                   	push   edi
c0014163:	56                   	push   esi
c0014164:	53                   	push   ebx
c0014165:	51                   	push   ecx
c0014166:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001416a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001416e:	89 d6                	mov    esi,edx
c0014170:	89 cd                	mov    ebp,ecx
c0014172:	80 fa 04             	cmp    dl,0x4
c0014175:	75 28                	jne    c001419f <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c0014177:	8d 41 f9             	lea    eax,[ecx-0x7]
c001417a:	3c 03                	cmp    al,0x3
c001417c:	0f 86 64 01 00 00    	jbe    c00142e6 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c0014182:	80 f9 03             	cmp    cl,0x3
c0014185:	0f 84 5b 01 00 00    	je     c00142e6 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c001418b:	8d 79 f2             	lea    edi,[ecx-0xe]
c001418e:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c0014193:	89 fb                	mov    ebx,edi
c0014195:	80 fb 01             	cmp    bl,0x1
c0014198:	77 4e                	ja     c00141e8 <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c001419a:	e9 61 01 00 00       	jmp    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001419f:	80 fa 05             	cmp    dl,0x5
c00141a2:	75 4d                	jne    c00141f1 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00141a4:	b8 60 3e 02 c0       	mov    eax,0xc0023e60
c00141a9:	80 f9 03             	cmp    cl,0x3
c00141ac:	0f 86 4e 01 00 00    	jbe    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00141b2:	8d 79 fa             	lea    edi,[ecx-0x6]
c00141b5:	b8 70 3e 02 c0       	mov    eax,0xc0023e70
c00141ba:	89 fb                	mov    ebx,edi
c00141bc:	80 fb 01             	cmp    bl,0x1
c00141bf:	0f 86 3b 01 00 00    	jbe    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00141c5:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c00141ca:	80 f9 08             	cmp    cl,0x8
c00141cd:	0f 84 2d 01 00 00    	je     c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00141d3:	89 cf                	mov    edi,ecx
c00141d5:	b8 90 3e 02 c0       	mov    eax,0xc0023e90
c00141da:	83 e7 fb             	and    edi,0xfffffffb
c00141dd:	89 fb                	mov    ebx,edi
c00141df:	80 fb 09             	cmp    bl,0x9
c00141e2:	0f 84 18 01 00 00    	je     c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00141e8:	31 c0                	xor    eax,eax
c00141ea:	89 eb                	mov    ebx,ebp
c00141ec:	0f b6 fb             	movzx  edi,bl
c00141ef:	eb 30                	jmp    c0014221 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c00141f1:	31 c0                	xor    eax,eax
c00141f3:	80 fa 06             	cmp    dl,0x6
c00141f6:	75 f2                	jne    c00141ea <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c00141f8:	80 f9 0a             	cmp    cl,0xa
c00141fb:	77 ed                	ja     c00141ea <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c00141fd:	bf de 05 00 00       	mov    edi,0x5de
c0014202:	0f a3 cf             	bt     edi,ecx
c0014205:	73 e3                	jae    c00141ea <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014207:	b8 a0 3e 02 c0       	mov    eax,0xc0023ea0
c001420c:	e9 ef 00 00 00       	jmp    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014211:	39 c7                	cmp    edi,eax
c0014213:	0f 84 d4 00 00 00    	je     c00142ed <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0014219:	40                   	inc    eax
c001421a:	3d d0 00 00 00       	cmp    eax,0xd0
c001421f:	74 09                	je     c001422a <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0014221:	89 f3                	mov    ebx,esi
c0014223:	80 fb 0f             	cmp    bl,0xf
c0014226:	75 f1                	jne    c0014219 <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0014228:	eb e7                	jmp    c0014211 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c001422a:	80 fa 10             	cmp    dl,0x10
c001422d:	75 19                	jne    c0014248 <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c001422f:	8d 41 fc             	lea    eax,[ecx-0x4]
c0014232:	83 e0 fb             	and    eax,0xfffffffb
c0014235:	3c 02                	cmp    al,0x2
c0014237:	0f 86 b7 00 00 00    	jbe    c00142f4 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c001423d:	80 f9 02             	cmp    cl,0x2
c0014240:	0f 84 ae 00 00 00    	je     c00142f4 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014246:	eb 13                	jmp    c001425b <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014248:	80 fa 11             	cmp    dl,0x11
c001424b:	75 0e                	jne    c001425b <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c001424d:	b8 b0 3e 02 c0       	mov    eax,0xc0023eb0
c0014252:	80 f9 03             	cmp    cl,0x3
c0014255:	0f 84 a5 00 00 00    	je     c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001425b:	80 fa 12             	cmp    dl,0x12
c001425e:	75 0e                	jne    c001426e <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c0014260:	b8 c0 3e 02 c0       	mov    eax,0xc0023ec0
c0014265:	80 f9 01             	cmp    cl,0x1
c0014268:	0f 84 92 00 00 00    	je     c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001426e:	80 fa 14             	cmp    dl,0x14
c0014271:	be 01 00 00 00       	mov    esi,0x1
c0014276:	0f 94 c3             	sete   bl
c0014279:	80 f9 13             	cmp    cl,0x13
c001427c:	77 0c                	ja     c001428a <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c001427e:	be 04 00 09 00       	mov    esi,0x90004
c0014283:	d3 ee                	shr    esi,cl
c0014285:	f7 d6                	not    esi
c0014287:	83 e6 01             	and    esi,0x1
c001428a:	8d 41 ff             	lea    eax,[ecx-0x1]
c001428d:	3c 01                	cmp    al,0x1
c001428f:	b8 d0 3e 02 c0       	mov    eax,0xc0023ed0
c0014294:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c0014299:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c001429d:	75 61                	jne    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001429f:	80 fa 15             	cmp    dl,0x15
c00142a2:	75 1f                	jne    c00142c3 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00142a4:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c00142a9:	80 f9 01             	cmp    cl,0x1
c00142ac:	74 52                	je     c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142ae:	89 f3                	mov    ebx,esi
c00142b0:	b8 f0 3e 02 c0       	mov    eax,0xc0023ef0
c00142b5:	84 db                	test   bl,bl
c00142b7:	74 47                	je     c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142b9:	b8 00 3f 02 c0       	mov    eax,0xc0023f00
c00142be:	80 f9 30             	cmp    cl,0x30
c00142c1:	74 3d                	je     c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142c3:	80 fa 16             	cmp    dl,0x16
c00142c6:	0f 94 c2             	sete   dl
c00142c9:	84 c9                	test   cl,cl
c00142cb:	75 09                	jne    c00142d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c00142cd:	b8 10 3f 02 c0       	mov    eax,0xc0023f10
c00142d2:	84 d2                	test   dl,dl
c00142d4:	75 2a                	jne    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142d6:	80 f9 30             	cmp    cl,0x30
c00142d9:	75 20                	jne    c00142fb <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c00142db:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c00142e0:	84 d2                	test   dl,dl
c00142e2:	75 1c                	jne    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142e4:	eb 15                	jmp    c00142fb <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c00142e6:	b8 40 3e 02 c0       	mov    eax,0xc0023e40
c00142eb:	eb 13                	jmp    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142ed:	b8 b0 3e 02 c0       	mov    eax,0xc0023eb0
c00142f2:	eb 0c                	jmp    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142f4:	b8 c0 3e 02 c0       	mov    eax,0xc0023ec0
c00142f9:	eb 05                	jmp    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142fb:	b8 52 25 02 c0       	mov    eax,0xc0022552
c0014300:	5a                   	pop    edx
c0014301:	5b                   	pop    ebx
c0014302:	5e                   	pop    esi
c0014303:	5f                   	pop    edi
c0014304:	5d                   	pop    ebp
c0014305:	c3                   	ret    

c0014306 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0014306:	53                   	push   ebx
c0014307:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001430b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001430f:	80 f9 04             	cmp    cl,0x4
c0014312:	75 6a                	jne    c001437e <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0014314:	b8 a0 3c 02 c0       	mov    eax,0xc0023ca0
c0014319:	80 fa 01             	cmp    dl,0x1
c001431c:	0f 86 9b 02 00 00    	jbe    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014322:	b8 b0 3c 02 c0       	mov    eax,0xc0023cb0
c0014327:	80 fa 02             	cmp    dl,0x2
c001432a:	0f 84 8d 02 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014330:	b8 c0 3c 02 c0       	mov    eax,0xc0023cc0
c0014335:	80 fa 03             	cmp    dl,0x3
c0014338:	0f 84 7f 02 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001433e:	b8 d0 3c 02 c0       	mov    eax,0xc0023cd0
c0014343:	80 fa 04             	cmp    dl,0x4
c0014346:	0f 84 71 02 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001434c:	b8 e0 3c 02 c0       	mov    eax,0xc0023ce0
c0014351:	80 fa 05             	cmp    dl,0x5
c0014354:	0f 84 63 02 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001435a:	b8 c0 3c 02 c0       	mov    eax,0xc0023cc0
c001435f:	80 fa 07             	cmp    dl,0x7
c0014362:	0f 84 55 02 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014368:	8d 5a f8             	lea    ebx,[edx-0x8]
c001436b:	b8 f0 3c 02 c0       	mov    eax,0xc0023cf0
c0014370:	80 fb 01             	cmp    bl,0x1
c0014373:	0f 87 e0 01 00 00    	ja     c0014559 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014379:	e9 3f 02 00 00       	jmp    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001437e:	80 f9 05             	cmp    cl,0x5
c0014381:	75 3e                	jne    c00143c1 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c0014383:	8d 5a ff             	lea    ebx,[edx-0x1]
c0014386:	b8 00 3d 02 c0       	mov    eax,0xc0023d00
c001438b:	80 fb 02             	cmp    bl,0x2
c001438e:	0f 86 29 02 00 00    	jbe    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014394:	80 fa 04             	cmp    dl,0x4
c0014397:	0f 84 f1 01 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c001439d:	80 fa 07             	cmp    dl,0x7
c00143a0:	0f 84 17 02 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143a6:	b8 10 3d 02 c0       	mov    eax,0xc0023d10
c00143ab:	80 fa 08             	cmp    dl,0x8
c00143ae:	0f 84 09 02 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143b4:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c00143b9:	80 fa 09             	cmp    dl,0x9
c00143bc:	e9 96 01 00 00       	jmp    c0014557 <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c00143c1:	80 f9 06             	cmp    cl,0x6
c00143c4:	0f 85 80 01 00 00    	jne    c001454a <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c00143ca:	b8 30 3d 02 c0       	mov    eax,0xc0023d30
c00143cf:	80 fa 01             	cmp    dl,0x1
c00143d2:	0f 84 e5 01 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143d8:	8d 42 fb             	lea    eax,[edx-0x5]
c00143db:	3c 01                	cmp    al,0x1
c00143dd:	0f 86 b2 01 00 00    	jbe    c0014595 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c00143e3:	80 fa 03             	cmp    dl,0x3
c00143e6:	0f 84 a9 01 00 00    	je     c0014595 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c00143ec:	8d 5a f9             	lea    ebx,[edx-0x7]
c00143ef:	b8 50 3d 02 c0       	mov    eax,0xc0023d50
c00143f4:	80 fb 01             	cmp    bl,0x1
c00143f7:	0f 86 c0 01 00 00    	jbe    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143fd:	80 fa 09             	cmp    dl,0x9
c0014400:	0f 84 96 01 00 00    	je     c001459c <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014406:	8d 5a f6             	lea    ebx,[edx-0xa]
c0014409:	80 fb 01             	cmp    bl,0x1
c001440c:	0f 86 ab 01 00 00    	jbe    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014412:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c0014417:	80 fa 0d             	cmp    dl,0xd
c001441a:	0f 84 9d 01 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014420:	b8 70 3d 02 c0       	mov    eax,0xc0023d70
c0014425:	80 fa 0e             	cmp    dl,0xe
c0014428:	0f 84 8f 01 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001442e:	b8 80 3d 02 c0       	mov    eax,0xc0023d80
c0014433:	80 fa 0f             	cmp    dl,0xf
c0014436:	0f 84 81 01 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001443c:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c0014441:	80 fa 15             	cmp    dl,0x15
c0014444:	0f 84 73 01 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001444a:	8d 5a ea             	lea    ebx,[edx-0x16]
c001444d:	b8 80 3d 02 c0       	mov    eax,0xc0023d80
c0014452:	80 fb 01             	cmp    bl,0x1
c0014455:	0f 86 62 01 00 00    	jbe    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001445b:	80 fa 1a             	cmp    dl,0x1a
c001445e:	0f 84 3f 01 00 00    	je     c00145a3 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c0014464:	80 fa 1c             	cmp    dl,0x1c
c0014467:	0f 84 3d 01 00 00    	je     c00145aa <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c001446d:	80 fa 1d             	cmp    dl,0x1d
c0014470:	0f 84 47 01 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014476:	b8 b0 3d 02 c0       	mov    eax,0xc0023db0
c001447b:	80 fa 25             	cmp    dl,0x25
c001447e:	0f 84 39 01 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014484:	8d 5a da             	lea    ebx,[edx-0x26]
c0014487:	b8 a0 3d 02 c0       	mov    eax,0xc0023da0
c001448c:	80 fb 01             	cmp    bl,0x1
c001448f:	0f 86 28 01 00 00    	jbe    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014495:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c001449a:	80 fa 2a             	cmp    dl,0x2a
c001449d:	0f 84 1a 01 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144a3:	b8 b0 3d 02 c0       	mov    eax,0xc0023db0
c00144a8:	80 fa 2c             	cmp    dl,0x2c
c00144ab:	0f 84 0c 01 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144b1:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c00144b6:	80 fa 2d             	cmp    dl,0x2d
c00144b9:	0f 84 fe 00 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144bf:	b8 90 3d 02 c0       	mov    eax,0xc0023d90
c00144c4:	80 fa 2e             	cmp    dl,0x2e
c00144c7:	0f 84 f0 00 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144cd:	b8 b0 3d 02 c0       	mov    eax,0xc0023db0
c00144d2:	80 fa 2f             	cmp    dl,0x2f
c00144d5:	0f 84 e2 00 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144db:	8d 5a cb             	lea    ebx,[edx-0x35]
c00144de:	b8 a0 3d 02 c0       	mov    eax,0xc0023da0
c00144e3:	80 fb 01             	cmp    bl,0x1
c00144e6:	0f 86 d1 00 00 00    	jbe    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ec:	b8 d0 3d 02 c0       	mov    eax,0xc0023dd0
c00144f1:	80 fa 37             	cmp    dl,0x37
c00144f4:	0f 84 c3 00 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144fa:	b8 e0 3d 02 c0       	mov    eax,0xc0023de0
c00144ff:	80 fa 3a             	cmp    dl,0x3a
c0014502:	0f 84 b5 00 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014508:	b8 f0 3d 02 c0       	mov    eax,0xc0023df0
c001450d:	80 fa 3c             	cmp    dl,0x3c
c0014510:	0f 84 a7 00 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014516:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c001451b:	80 fa 3d             	cmp    dl,0x3d
c001451e:	0f 84 99 00 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014524:	b8 e0 3d 02 c0       	mov    eax,0xc0023de0
c0014529:	80 fa 3e             	cmp    dl,0x3e
c001452c:	0f 84 8b 00 00 00    	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014532:	8d 42 bb             	lea    eax,[edx-0x45]
c0014535:	3c 01                	cmp    al,0x1
c0014537:	76 78                	jbe    c00145b1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014539:	80 fa 3f             	cmp    dl,0x3f
c001453c:	74 73                	je     c00145b1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001453e:	80 fa 4a             	cmp    dl,0x4a
c0014541:	74 75                	je     c00145b8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014543:	80 fa 4d             	cmp    dl,0x4d
c0014546:	75 11                	jne    c0014559 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014548:	eb 6e                	jmp    c00145b8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c001454a:	80 f9 0b             	cmp    cl,0xb
c001454d:	75 0a                	jne    c0014559 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001454f:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c0014554:	80 fa 01             	cmp    dl,0x1
c0014557:	74 64                	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014559:	80 f9 0f             	cmp    cl,0xf
c001455c:	b8 20 3e 02 c0       	mov    eax,0xc0023e20
c0014561:	0f 94 c1             	sete   cl
c0014564:	80 fa 02             	cmp    dl,0x2
c0014567:	0f 96 c3             	setbe  bl
c001456a:	84 cb                	test   bl,cl
c001456c:	75 4f                	jne    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001456e:	8d 42 fd             	lea    eax,[edx-0x3]
c0014571:	3c 01                	cmp    al,0x1
c0014573:	0f 96 c0             	setbe  al
c0014576:	80 fa 06             	cmp    dl,0x6
c0014579:	0f 94 c2             	sete   dl
c001457c:	09 c2                	or     edx,eax
c001457e:	b8 52 25 02 c0       	mov    eax,0xc0022552
c0014583:	84 ca                	test   dl,cl
c0014585:	74 36                	je     c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014587:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c001458c:	eb 2f                	jmp    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001458e:	b8 10 3d 02 c0       	mov    eax,0xc0023d10
c0014593:	eb 28                	jmp    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014595:	b8 40 3d 02 c0       	mov    eax,0xc0023d40
c001459a:	eb 21                	jmp    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001459c:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c00145a1:	eb 1a                	jmp    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145a3:	b8 90 3d 02 c0       	mov    eax,0xc0023d90
c00145a8:	eb 13                	jmp    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145aa:	b8 a0 3d 02 c0       	mov    eax,0xc0023da0
c00145af:	eb 0c                	jmp    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145b1:	b8 f0 3d 02 c0       	mov    eax,0xc0023df0
c00145b6:	eb 05                	jmp    c00145bd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145b8:	b8 d0 3d 02 c0       	mov    eax,0xc0023dd0
c00145bd:	5b                   	pop    ebx
c00145be:	c3                   	ret    

c00145bf <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00145bf:	60                   	pusha  
c00145c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00145c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145cc:	9c                   	pushf  
c00145cd:	fa                   	cli    
c00145ce:	0f 09                	wbinvd 
c00145d0:	0f 30                	wrmsr  
c00145d2:	9d                   	popf   
c00145d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00145d7:	89 02                	mov    DWORD PTR [edx],eax
c00145d9:	61                   	popa   
c00145da:	c3                   	ret    

c00145db <AMD_K6_read_msr(unsigned int, REGS*)>:
c00145db:	60                   	pusha  
c00145dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00145e0:	9c                   	pushf  
c00145e1:	fa                   	cli    
c00145e2:	0f 09                	wbinvd 
c00145e4:	31 c0                	xor    eax,eax
c00145e6:	31 d2                	xor    edx,edx
c00145e8:	0f 32                	rdmsr  
c00145ea:	9d                   	popf   
c00145eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145ef:	89 02                	mov    DWORD PTR [edx],eax
c00145f1:	61                   	popa   
c00145f2:	c3                   	ret    

c00145f3 <AMD_K6_writeback(int, int, int)>:
c00145f3:	56                   	push   esi
c00145f4:	53                   	push   ebx
c00145f5:	83 ec 10             	sub    esp,0x10
c00145f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145fc:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014601:	75 5d                	jne    c0014660 <AMD_K6_writeback(int, int, int)+0x6d>
c0014603:	83 f8 08             	cmp    eax,0x8
c0014606:	75 09                	jne    c0014611 <AMD_K6_writeback(int, int, int)+0x1e>
c0014608:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001460d:	7e 13                	jle    c0014622 <AMD_K6_writeback(int, int, int)+0x2f>
c001460f:	eb 30                	jmp    c0014641 <AMD_K6_writeback(int, int, int)+0x4e>
c0014611:	83 f8 06             	cmp    eax,0x6
c0014614:	7c 4a                	jl     c0014660 <AMD_K6_writeback(int, int, int)+0x6d>
c0014616:	83 f8 07             	cmp    eax,0x7
c0014619:	7e 07                	jle    c0014622 <AMD_K6_writeback(int, int, int)+0x2f>
c001461b:	83 f8 09             	cmp    eax,0x9
c001461e:	74 21                	je     c0014641 <AMD_K6_writeback(int, int, int)+0x4e>
c0014620:	eb 3e                	jmp    c0014660 <AMD_K6_writeback(int, int, int)+0x6d>
c0014622:	89 e6                	mov    esi,esp
c0014624:	8b 1d 64 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024564
c001462a:	c1 eb 15             	shr    ebx,0x15
c001462d:	56                   	push   esi
c001462e:	68 82 00 00 c0       	push   0xc0000082
c0014633:	e8 a3 ff ff ff       	call   c00145db <AMD_K6_read_msr(unsigned int, REGS*)>
c0014638:	56                   	push   esi
c0014639:	83 e3 7e             	and    ebx,0x7e
c001463c:	6a 00                	push   0x0
c001463e:	53                   	push   ebx
c001463f:	eb 12                	jmp    c0014653 <AMD_K6_writeback(int, int, int)+0x60>
c0014641:	89 e3                	mov    ebx,esp
c0014643:	53                   	push   ebx
c0014644:	68 82 00 00 c0       	push   0xc0000082
c0014649:	e8 8d ff ff ff       	call   c00145db <AMD_K6_read_msr(unsigned int, REGS*)>
c001464e:	53                   	push   ebx
c001464f:	6a 00                	push   0x0
c0014651:	6a 00                	push   0x0
c0014653:	68 82 00 00 c0       	push   0xc0000082
c0014658:	e8 62 ff ff ff       	call   c00145bf <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001465d:	83 c4 18             	add    esp,0x18
c0014660:	83 c4 10             	add    esp,0x10
c0014663:	5b                   	pop    ebx
c0014664:	5e                   	pop    esi
c0014665:	c3                   	ret    

c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0014666:	55                   	push   ebp
c0014667:	57                   	push   edi
c0014668:	56                   	push   esi
c0014669:	53                   	push   ebx
c001466a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001466e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014672:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014676:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001467a:	39 05 40 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f40,eax
c0014680:	75 23                	jne    c00146a5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0014682:	a1 6c 4f 02 c0       	mov    eax,ds:0xc0024f6c
c0014687:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001468b:	89 06                	mov    DWORD PTR [esi],eax
c001468d:	a1 68 4f 02 c0       	mov    eax,ds:0xc0024f68
c0014692:	89 07                	mov    DWORD PTR [edi],eax
c0014694:	a1 64 4f 02 c0       	mov    eax,ds:0xc0024f64
c0014699:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001469c:	a1 60 4f 02 c0       	mov    eax,ds:0xc0024f60
c00146a1:	89 02                	mov    DWORD PTR [edx],eax
c00146a3:	eb 3f                	jmp    c00146e4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00146a5:	31 c9                	xor    ecx,ecx
c00146a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146ab:	0f a2                	cpuid  
c00146ad:	89 06                	mov    DWORD PTR [esi],eax
c00146af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146b3:	89 1f                	mov    DWORD PTR [edi],ebx
c00146b5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00146b8:	89 10                	mov    DWORD PTR [eax],edx
c00146ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146be:	a3 40 3f 02 c0       	mov    ds:0xc0023f40,eax
c00146c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00146c5:	a3 6c 4f 02 c0       	mov    ds:0xc0024f6c,eax
c00146ca:	8b 07                	mov    eax,DWORD PTR [edi]
c00146cc:	a3 68 4f 02 c0       	mov    ds:0xc0024f68,eax
c00146d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00146d4:	a3 64 4f 02 c0       	mov    ds:0xc0024f64,eax
c00146d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00146df:	a3 60 4f 02 c0       	mov    ds:0xc0024f60,eax
c00146e4:	5b                   	pop    ebx
c00146e5:	5e                   	pop    esi
c00146e6:	5f                   	pop    edi
c00146e7:	5d                   	pop    ebp
c00146e8:	c3                   	ret    

c00146e9 <cpuidCheckEDX(unsigned int)>:
c00146e9:	83 ec 10             	sub    esp,0x10
c00146ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146f0:	50                   	push   eax
c00146f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146f5:	50                   	push   eax
c00146f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146fa:	50                   	push   eax
c00146fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146ff:	50                   	push   eax
c0014700:	6a 01                	push   0x1
c0014702:	e8 5f ff ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014707:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001470b:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001470f:	0f 95 c0             	setne  al
c0014712:	83 c4 24             	add    esp,0x24
c0014715:	c3                   	ret    

c0014716 <cpuidCheckECX(unsigned int)>:
c0014716:	83 ec 10             	sub    esp,0x10
c0014719:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001471d:	50                   	push   eax
c001471e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014722:	50                   	push   eax
c0014723:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014727:	50                   	push   eax
c0014728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001472c:	50                   	push   eax
c001472d:	6a 01                	push   0x1
c001472f:	e8 32 ff ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014734:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014738:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001473c:	0f 95 c0             	setne  al
c001473f:	83 c4 24             	add    esp,0x24
c0014742:	c3                   	ret    

c0014743 <cpuidCheckExtendedEBX(unsigned int)>:
c0014743:	83 ec 10             	sub    esp,0x10
c0014746:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001474a:	50                   	push   eax
c001474b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001474f:	50                   	push   eax
c0014750:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014754:	50                   	push   eax
c0014755:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014759:	50                   	push   eax
c001475a:	6a 07                	push   0x7
c001475c:	e8 05 ff ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014761:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014765:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0014769:	0f 95 c0             	setne  al
c001476c:	83 c4 24             	add    esp,0x24
c001476f:	c3                   	ret    

c0014770 <cpuidCheckExtendedECX(unsigned int)>:
c0014770:	83 ec 10             	sub    esp,0x10
c0014773:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014777:	50                   	push   eax
c0014778:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001477c:	50                   	push   eax
c001477d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014781:	50                   	push   eax
c0014782:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014786:	50                   	push   eax
c0014787:	6a 07                	push   0x7
c0014789:	e8 d8 fe ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001478e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014792:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014796:	0f 95 c0             	setne  al
c0014799:	83 c4 24             	add    esp,0x24
c001479c:	c3                   	ret    

c001479d <getCPUNumber()>:
c001479d:	31 c0                	xor    eax,eax
c001479f:	c3                   	ret    

c00147a0 <thisCPU()>:
c00147a0:	e8 f8 ff ff ff       	call   c001479d <getCPUNumber()>
c00147a5:	8b 15 28 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024528
c00147ab:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00147b2:	c3                   	ret    
c00147b3:	90                   	nop

c00147b4 <CPU::CPU()>:
c00147b4:	83 ec 0c             	sub    esp,0xc
c00147b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bb:	83 ec 08             	sub    esp,0x8
c00147be:	68 52 25 02 c0       	push   0xc0022552
c00147c3:	50                   	push   eax
c00147c4:	e8 7d bf ff ff       	call   c0010746 <Device::Device(char const*)>
c00147c9:	83 c4 10             	add    esp,0x10
c00147cc:	ba 2c 26 02 c0       	mov    edx,0xc002262c
c00147d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d5:	89 10                	mov    DWORD PTR [eax],edx
c00147d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147db:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00147e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e9:	05 78 01 00 00       	add    eax,0x178
c00147ee:	83 ec 0c             	sub    esp,0xc
c00147f1:	50                   	push   eax
c00147f2:	e8 ed 6f ff ff       	call   c000b7e4 <GDT::GDT()>
c00147f7:	83 c4 10             	add    esp,0x10
c00147fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fe:	05 7c 09 00 00       	add    eax,0x97c
c0014803:	83 ec 0c             	sub    esp,0xc
c0014806:	50                   	push   eax
c0014807:	e8 38 72 ff ff       	call   c000ba44 <IDT::IDT()>
c001480c:	83 c4 10             	add    esp,0x10
c001480f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014813:	05 7c 11 00 00       	add    eax,0x117c
c0014818:	83 ec 0c             	sub    esp,0xc
c001481b:	50                   	push   eax
c001481c:	e8 95 92 ff ff       	call   c000dab6 <TSS::TSS()>
c0014821:	83 c4 10             	add    esp,0x10
c0014824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014828:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001482f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014833:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001483d:	90                   	nop
c001483e:	83 c4 0c             	add    esp,0xc
c0014841:	c3                   	ret    

c0014842 <CPU::displayFeatures()>:
c0014842:	53                   	push   ebx
c0014843:	83 ec 10             	sub    esp,0x10
c0014846:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001484a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014850:	68 60 22 02 c0       	push   0xc0022260
c0014855:	e8 e7 a8 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001485a:	59                   	pop    ecx
c001485b:	58                   	pop    eax
c001485c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014862:	50                   	push   eax
c0014863:	68 71 22 02 c0       	push   0xc0022271
c0014868:	e8 d4 a8 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001486d:	58                   	pop    eax
c001486e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014874:	c1 e8 0e             	shr    eax,0xe
c0014877:	5a                   	pop    edx
c0014878:	0f b6 c0             	movzx  eax,al
c001487b:	50                   	push   eax
c001487c:	68 82 22 02 c0       	push   0xc0022282
c0014881:	e8 bb a8 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0014886:	59                   	pop    ecx
c0014887:	58                   	pop    eax
c0014888:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001488e:	66 c1 e8 06          	shr    ax,0x6
c0014892:	0f b6 c0             	movzx  eax,al
c0014895:	50                   	push   eax
c0014896:	68 93 22 02 c0       	push   0xc0022293
c001489b:	e8 a1 a8 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00148a0:	c7 04 24 a6 26 02 c0 	mov    DWORD PTR [esp],0xc00226a6
c00148a7:	e8 95 a8 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00148ac:	83 c4 10             	add    esp,0x10
c00148af:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c00148b4:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00148bb:	74 05                	je     c00148c2 <CPU::displayFeatures()+0x80>
c00148bd:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c00148c2:	52                   	push   edx
c00148c3:	52                   	push   edx
c00148c4:	50                   	push   eax
c00148c5:	68 a4 22 02 c0       	push   0xc00222a4
c00148ca:	e8 72 a8 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00148cf:	83 c4 10             	add    esp,0x10
c00148d2:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c00148d7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00148de:	78 05                	js     c00148e5 <CPU::displayFeatures()+0xa3>
c00148e0:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c00148e5:	51                   	push   ecx
c00148e6:	51                   	push   ecx
c00148e7:	50                   	push   eax
c00148e8:	68 bb 22 02 c0       	push   0xc00222bb
c00148ed:	e8 4f a8 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00148f2:	83 c4 10             	add    esp,0x10
c00148f5:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c00148fa:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014901:	75 05                	jne    c0014908 <CPU::displayFeatures()+0xc6>
c0014903:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c0014908:	52                   	push   edx
c0014909:	52                   	push   edx
c001490a:	50                   	push   eax
c001490b:	68 d2 22 02 c0       	push   0xc00222d2
c0014910:	e8 2c a8 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0014915:	83 c4 10             	add    esp,0x10
c0014918:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c001491d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014924:	75 05                	jne    c001492b <CPU::displayFeatures()+0xe9>
c0014926:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c001492b:	51                   	push   ecx
c001492c:	51                   	push   ecx
c001492d:	50                   	push   eax
c001492e:	68 e9 22 02 c0       	push   0xc00222e9
c0014933:	e8 09 a8 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0014938:	83 c4 10             	add    esp,0x10
c001493b:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c0014940:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014947:	75 05                	jne    c001494e <CPU::displayFeatures()+0x10c>
c0014949:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c001494e:	52                   	push   edx
c001494f:	52                   	push   edx
c0014950:	50                   	push   eax
c0014951:	68 00 23 02 c0       	push   0xc0022300
c0014956:	e8 e6 a7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001495b:	83 c4 10             	add    esp,0x10
c001495e:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c0014963:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001496a:	75 05                	jne    c0014971 <CPU::displayFeatures()+0x12f>
c001496c:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c0014971:	51                   	push   ecx
c0014972:	51                   	push   ecx
c0014973:	50                   	push   eax
c0014974:	68 17 23 02 c0       	push   0xc0022317
c0014979:	e8 c3 a7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001497e:	83 c4 10             	add    esp,0x10
c0014981:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c0014986:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001498d:	75 05                	jne    c0014994 <CPU::displayFeatures()+0x152>
c001498f:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c0014994:	52                   	push   edx
c0014995:	52                   	push   edx
c0014996:	50                   	push   eax
c0014997:	68 2e 23 02 c0       	push   0xc002232e
c001499c:	e8 a0 a7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00149a1:	83 c4 10             	add    esp,0x10
c00149a4:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c00149a9:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00149b0:	75 05                	jne    c00149b7 <CPU::displayFeatures()+0x175>
c00149b2:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c00149b7:	51                   	push   ecx
c00149b8:	51                   	push   ecx
c00149b9:	50                   	push   eax
c00149ba:	68 45 23 02 c0       	push   0xc0022345
c00149bf:	e8 7d a7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00149c4:	83 c4 10             	add    esp,0x10
c00149c7:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c00149cc:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00149d3:	75 05                	jne    c00149da <CPU::displayFeatures()+0x198>
c00149d5:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c00149da:	52                   	push   edx
c00149db:	52                   	push   edx
c00149dc:	50                   	push   eax
c00149dd:	68 5c 23 02 c0       	push   0xc002235c
c00149e2:	e8 5a a7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00149e7:	83 c4 10             	add    esp,0x10
c00149ea:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c00149ef:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00149f6:	75 05                	jne    c00149fd <CPU::displayFeatures()+0x1bb>
c00149f8:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c00149fd:	51                   	push   ecx
c00149fe:	51                   	push   ecx
c00149ff:	50                   	push   eax
c0014a00:	68 73 23 02 c0       	push   0xc0022373
c0014a05:	e8 37 a7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0014a0a:	83 c4 10             	add    esp,0x10
c0014a0d:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c0014a12:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014a19:	75 05                	jne    c0014a20 <CPU::displayFeatures()+0x1de>
c0014a1b:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c0014a20:	52                   	push   edx
c0014a21:	52                   	push   edx
c0014a22:	50                   	push   eax
c0014a23:	68 8a 23 02 c0       	push   0xc002238a
c0014a28:	e8 14 a7 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0014a2d:	83 c4 10             	add    esp,0x10
c0014a30:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c0014a35:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014a3c:	75 05                	jne    c0014a43 <CPU::displayFeatures()+0x201>
c0014a3e:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c0014a43:	51                   	push   ecx
c0014a44:	51                   	push   ecx
c0014a45:	50                   	push   eax
c0014a46:	68 a1 23 02 c0       	push   0xc00223a1
c0014a4b:	e8 f1 a6 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0014a50:	83 c4 10             	add    esp,0x10
c0014a53:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c0014a58:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014a5f:	75 05                	jne    c0014a66 <CPU::displayFeatures()+0x224>
c0014a61:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c0014a66:	52                   	push   edx
c0014a67:	52                   	push   edx
c0014a68:	50                   	push   eax
c0014a69:	68 b8 23 02 c0       	push   0xc00223b8
c0014a6e:	e8 ce a6 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c0014a7b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014a82:	78 05                	js     c0014a89 <CPU::displayFeatures()+0x247>
c0014a84:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c0014a89:	51                   	push   ecx
c0014a8a:	51                   	push   ecx
c0014a8b:	50                   	push   eax
c0014a8c:	68 cf 23 02 c0       	push   0xc00223cf
c0014a91:	e8 ab a6 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	b8 8f 0f 02 c0       	mov    eax,0xc0020f8f
c0014a9e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014aa5:	75 05                	jne    c0014aac <CPU::displayFeatures()+0x26a>
c0014aa7:	b8 93 0f 02 c0       	mov    eax,0xc0020f93
c0014aac:	52                   	push   edx
c0014aad:	52                   	push   edx
c0014aae:	50                   	push   eax
c0014aaf:	68 e6 23 02 c0       	push   0xc00223e6
c0014ab4:	e8 88 a6 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0014ab9:	83 c4 18             	add    esp,0x18
c0014abc:	5b                   	pop    ebx
c0014abd:	c3                   	ret    

c0014abe <CPU::detectFeatures()>:
c0014abe:	55                   	push   ebp
c0014abf:	57                   	push   edi
c0014ac0:	56                   	push   esi
c0014ac1:	53                   	push   ebx
c0014ac2:	83 ec 50             	sub    esp,0x50
c0014ac5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014ac9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014ad3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014ada:	6a 0d                	push   0xd
c0014adc:	6a 00                	push   0x0
c0014ade:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014ae4:	57                   	push   edi
c0014ae5:	e8 d0 bb fe ff       	call   c00006ba <memset>
c0014aea:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0014aef:	83 c4 10             	add    esp,0x10
c0014af2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014af9:	0f 84 04 09 00 00    	je     c0015403 <CPU::detectFeatures()+0x945>
c0014aff:	83 ec 0c             	sub    esp,0xc
c0014b02:	6a 10                	push   0x10
c0014b04:	e8 e0 fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014b09:	83 e0 01             	and    eax,0x1
c0014b0c:	8d 14 00             	lea    edx,[eax+eax*1]
c0014b0f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b15:	83 e0 fd             	and    eax,0xfffffffd
c0014b18:	09 d0                	or     eax,edx
c0014b1a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b20:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014b27:	e8 bd fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014b2c:	83 e0 01             	and    eax,0x1
c0014b2f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014b36:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b3c:	83 e0 fb             	and    eax,0xfffffffb
c0014b3f:	09 d0                	or     eax,edx
c0014b41:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b47:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014b4e:	e8 96 fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014b53:	83 e0 01             	and    eax,0x1
c0014b56:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014b5d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b63:	83 e0 f7             	and    eax,0xfffffff7
c0014b66:	09 d0                	or     eax,edx
c0014b68:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b6e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014b75:	e8 6f fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014b7a:	83 e0 01             	and    eax,0x1
c0014b7d:	c1 e0 04             	shl    eax,0x4
c0014b80:	88 c2                	mov    dl,al
c0014b82:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b88:	83 e0 ef             	and    eax,0xffffffef
c0014b8b:	09 d0                	or     eax,edx
c0014b8d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b93:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014b9a:	e8 4a fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014b9f:	83 e0 01             	and    eax,0x1
c0014ba2:	c1 e0 05             	shl    eax,0x5
c0014ba5:	88 c2                	mov    dl,al
c0014ba7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014bad:	83 e0 df             	and    eax,0xffffffdf
c0014bb0:	09 d0                	or     eax,edx
c0014bb2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bb8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014bbf:	e8 25 fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014bc4:	83 e0 01             	and    eax,0x1
c0014bc7:	8d 14 00             	lea    edx,[eax+eax*1]
c0014bca:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014bd0:	83 e0 fd             	and    eax,0xfffffffd
c0014bd3:	09 d0                	or     eax,edx
c0014bd5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014bdb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014be2:	e8 02 fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014be7:	83 e0 01             	and    eax,0x1
c0014bea:	c1 e0 06             	shl    eax,0x6
c0014bed:	88 c2                	mov    dl,al
c0014bef:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014bf5:	83 e0 bf             	and    eax,0xffffffbf
c0014bf8:	09 d0                	or     eax,edx
c0014bfa:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014c00:	58                   	pop    eax
c0014c01:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014c05:	56                   	push   esi
c0014c06:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014c0a:	55                   	push   ebp
c0014c0b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014c0f:	50                   	push   eax
c0014c10:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014c14:	52                   	push   edx
c0014c15:	6a 00                	push   0x0
c0014c17:	e8 4a fa ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014c1c:	83 c4 1c             	add    esp,0x1c
c0014c1f:	6a 04                	push   0x4
c0014c21:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014c25:	50                   	push   eax
c0014c26:	57                   	push   edi
c0014c27:	e8 58 ba fe ff       	call   c0000684 <memcpy>
c0014c2c:	83 c4 0c             	add    esp,0xc
c0014c2f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014c35:	6a 04                	push   0x4
c0014c37:	56                   	push   esi
c0014c38:	50                   	push   eax
c0014c39:	e8 46 ba fe ff       	call   c0000684 <memcpy>
c0014c3e:	83 c4 0c             	add    esp,0xc
c0014c41:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014c47:	6a 04                	push   0x4
c0014c49:	55                   	push   ebp
c0014c4a:	50                   	push   eax
c0014c4b:	e8 34 ba fe ff       	call   c0000684 <memcpy>
c0014c50:	58                   	pop    eax
c0014c51:	5a                   	pop    edx
c0014c52:	68 fd 23 02 c0       	push   0xc00223fd
c0014c57:	57                   	push   edi
c0014c58:	e8 4d bb fe ff       	call   c00007aa <strcmp>
c0014c5d:	83 c4 10             	add    esp,0x10
c0014c60:	85 c0                	test   eax,eax
c0014c62:	75 0f                	jne    c0014c73 <CPU::detectFeatures()+0x1b5>
c0014c64:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014c6e:	e9 22 02 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014c73:	50                   	push   eax
c0014c74:	50                   	push   eax
c0014c75:	68 0a 24 02 c0       	push   0xc002240a
c0014c7a:	57                   	push   edi
c0014c7b:	e8 2a bb fe ff       	call   c00007aa <strcmp>
c0014c80:	83 c4 10             	add    esp,0x10
c0014c83:	85 c0                	test   eax,eax
c0014c85:	74 dd                	je     c0014c64 <CPU::detectFeatures()+0x1a6>
c0014c87:	51                   	push   ecx
c0014c88:	51                   	push   ecx
c0014c89:	68 17 24 02 c0       	push   0xc0022417
c0014c8e:	57                   	push   edi
c0014c8f:	e8 16 bb fe ff       	call   c00007aa <strcmp>
c0014c94:	83 c4 10             	add    esp,0x10
c0014c97:	85 c0                	test   eax,eax
c0014c99:	74 2a                	je     c0014cc5 <CPU::detectFeatures()+0x207>
c0014c9b:	52                   	push   edx
c0014c9c:	52                   	push   edx
c0014c9d:	68 24 24 02 c0       	push   0xc0022424
c0014ca2:	57                   	push   edi
c0014ca3:	e8 02 bb fe ff       	call   c00007aa <strcmp>
c0014ca8:	83 c4 10             	add    esp,0x10
c0014cab:	85 c0                	test   eax,eax
c0014cad:	74 16                	je     c0014cc5 <CPU::detectFeatures()+0x207>
c0014caf:	50                   	push   eax
c0014cb0:	50                   	push   eax
c0014cb1:	68 31 24 02 c0       	push   0xc0022431
c0014cb6:	57                   	push   edi
c0014cb7:	e8 ee ba fe ff       	call   c00007aa <strcmp>
c0014cbc:	83 c4 10             	add    esp,0x10
c0014cbf:	85 c0                	test   eax,eax
c0014cc1:	74 48                	je     c0014d0b <CPU::detectFeatures()+0x24d>
c0014cc3:	eb 0f                	jmp    c0014cd4 <CPU::detectFeatures()+0x216>
c0014cc5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014ccf:	e9 c1 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014cd4:	50                   	push   eax
c0014cd5:	50                   	push   eax
c0014cd6:	68 3e 24 02 c0       	push   0xc002243e
c0014cdb:	57                   	push   edi
c0014cdc:	e8 c9 ba fe ff       	call   c00007aa <strcmp>
c0014ce1:	83 c4 10             	add    esp,0x10
c0014ce4:	85 c0                	test   eax,eax
c0014ce6:	74 23                	je     c0014d0b <CPU::detectFeatures()+0x24d>
c0014ce8:	50                   	push   eax
c0014ce9:	50                   	push   eax
c0014cea:	68 4b 24 02 c0       	push   0xc002244b
c0014cef:	57                   	push   edi
c0014cf0:	e8 b5 ba fe ff       	call   c00007aa <strcmp>
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	85 c0                	test   eax,eax
c0014cfa:	75 1e                	jne    c0014d1a <CPU::detectFeatures()+0x25c>
c0014cfc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014d06:	e9 8a 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014d0b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014d15:	e9 7b 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014d1a:	50                   	push   eax
c0014d1b:	50                   	push   eax
c0014d1c:	68 58 24 02 c0       	push   0xc0022458
c0014d21:	57                   	push   edi
c0014d22:	e8 83 ba fe ff       	call   c00007aa <strcmp>
c0014d27:	83 c4 10             	add    esp,0x10
c0014d2a:	85 c0                	test   eax,eax
c0014d2c:	75 0f                	jne    c0014d3d <CPU::detectFeatures()+0x27f>
c0014d2e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014d38:	e9 58 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014d3d:	50                   	push   eax
c0014d3e:	50                   	push   eax
c0014d3f:	68 17 24 02 c0       	push   0xc0022417
c0014d44:	57                   	push   edi
c0014d45:	e8 60 ba fe ff       	call   c00007aa <strcmp>
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	85 c0                	test   eax,eax
c0014d4f:	75 0f                	jne    c0014d60 <CPU::detectFeatures()+0x2a2>
c0014d51:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014d5b:	e9 35 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014d60:	50                   	push   eax
c0014d61:	50                   	push   eax
c0014d62:	68 65 24 02 c0       	push   0xc0022465
c0014d67:	57                   	push   edi
c0014d68:	e8 3d ba fe ff       	call   c00007aa <strcmp>
c0014d6d:	83 c4 10             	add    esp,0x10
c0014d70:	85 c0                	test   eax,eax
c0014d72:	75 0f                	jne    c0014d83 <CPU::detectFeatures()+0x2c5>
c0014d74:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014d7e:	e9 12 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014d83:	51                   	push   ecx
c0014d84:	51                   	push   ecx
c0014d85:	68 72 24 02 c0       	push   0xc0022472
c0014d8a:	57                   	push   edi
c0014d8b:	e8 1a ba fe ff       	call   c00007aa <strcmp>
c0014d90:	83 c4 10             	add    esp,0x10
c0014d93:	85 c0                	test   eax,eax
c0014d95:	75 0f                	jne    c0014da6 <CPU::detectFeatures()+0x2e8>
c0014d97:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014da1:	e9 ef 00 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014da6:	52                   	push   edx
c0014da7:	52                   	push   edx
c0014da8:	68 7f 24 02 c0       	push   0xc002247f
c0014dad:	57                   	push   edi
c0014dae:	e8 f7 b9 fe ff       	call   c00007aa <strcmp>
c0014db3:	83 c4 10             	add    esp,0x10
c0014db6:	85 c0                	test   eax,eax
c0014db8:	75 0f                	jne    c0014dc9 <CPU::detectFeatures()+0x30b>
c0014dba:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014dc4:	e9 cc 00 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014dc9:	50                   	push   eax
c0014dca:	50                   	push   eax
c0014dcb:	68 8c 24 02 c0       	push   0xc002248c
c0014dd0:	57                   	push   edi
c0014dd1:	e8 d4 b9 fe ff       	call   c00007aa <strcmp>
c0014dd6:	83 c4 10             	add    esp,0x10
c0014dd9:	85 c0                	test   eax,eax
c0014ddb:	75 0f                	jne    c0014dec <CPU::detectFeatures()+0x32e>
c0014ddd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014de7:	e9 a9 00 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014dec:	50                   	push   eax
c0014ded:	50                   	push   eax
c0014dee:	68 99 24 02 c0       	push   0xc0022499
c0014df3:	57                   	push   edi
c0014df4:	e8 b1 b9 fe ff       	call   c00007aa <strcmp>
c0014df9:	83 c4 10             	add    esp,0x10
c0014dfc:	85 c0                	test   eax,eax
c0014dfe:	75 0f                	jne    c0014e0f <CPU::detectFeatures()+0x351>
c0014e00:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014e0a:	e9 86 00 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014e0f:	50                   	push   eax
c0014e10:	50                   	push   eax
c0014e11:	68 a6 24 02 c0       	push   0xc00224a6
c0014e16:	57                   	push   edi
c0014e17:	e8 8e b9 fe ff       	call   c00007aa <strcmp>
c0014e1c:	83 c4 10             	add    esp,0x10
c0014e1f:	85 c0                	test   eax,eax
c0014e21:	75 0c                	jne    c0014e2f <CPU::detectFeatures()+0x371>
c0014e23:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014e2d:	eb 66                	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014e2f:	50                   	push   eax
c0014e30:	50                   	push   eax
c0014e31:	68 b3 24 02 c0       	push   0xc00224b3
c0014e36:	57                   	push   edi
c0014e37:	e8 6e b9 fe ff       	call   c00007aa <strcmp>
c0014e3c:	83 c4 10             	add    esp,0x10
c0014e3f:	85 c0                	test   eax,eax
c0014e41:	75 0c                	jne    c0014e4f <CPU::detectFeatures()+0x391>
c0014e43:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014e4d:	eb 46                	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014e4f:	50                   	push   eax
c0014e50:	50                   	push   eax
c0014e51:	68 c0 24 02 c0       	push   0xc00224c0
c0014e56:	57                   	push   edi
c0014e57:	e8 4e b9 fe ff       	call   c00007aa <strcmp>
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	85 c0                	test   eax,eax
c0014e61:	74 e0                	je     c0014e43 <CPU::detectFeatures()+0x385>
c0014e63:	50                   	push   eax
c0014e64:	50                   	push   eax
c0014e65:	68 cd 24 02 c0       	push   0xc00224cd
c0014e6a:	57                   	push   edi
c0014e6b:	e8 3a b9 fe ff       	call   c00007aa <strcmp>
c0014e70:	83 c4 10             	add    esp,0x10
c0014e73:	85 c0                	test   eax,eax
c0014e75:	74 cc                	je     c0014e43 <CPU::detectFeatures()+0x385>
c0014e77:	51                   	push   ecx
c0014e78:	51                   	push   ecx
c0014e79:	68 da 24 02 c0       	push   0xc00224da
c0014e7e:	57                   	push   edi
c0014e7f:	e8 26 b9 fe ff       	call   c00007aa <strcmp>
c0014e84:	83 c4 10             	add    esp,0x10
c0014e87:	85 c0                	test   eax,eax
c0014e89:	74 b8                	je     c0014e43 <CPU::detectFeatures()+0x385>
c0014e8b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014e95:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014e9a:	0f 86 be 00 00 00    	jbe    c0014f5e <CPU::detectFeatures()+0x4a0>
c0014ea0:	83 ec 0c             	sub    esp,0xc
c0014ea3:	68 80 00 00 00       	push   0x80
c0014ea8:	e8 96 f8 ff ff       	call   c0014743 <cpuidCheckExtendedEBX(unsigned int)>
c0014ead:	83 e0 01             	and    eax,0x1
c0014eb0:	c1 e0 06             	shl    eax,0x6
c0014eb3:	88 c2                	mov    dl,al
c0014eb5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ebb:	83 e0 bf             	and    eax,0xffffffbf
c0014ebe:	09 d0                	or     eax,edx
c0014ec0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ec6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014ecd:	e8 71 f8 ff ff       	call   c0014743 <cpuidCheckExtendedEBX(unsigned int)>
c0014ed2:	83 e0 01             	and    eax,0x1
c0014ed5:	c1 e0 04             	shl    eax,0x4
c0014ed8:	88 c2                	mov    dl,al
c0014eda:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014ee0:	83 e0 ef             	and    eax,0xffffffef
c0014ee3:	09 d0                	or     eax,edx
c0014ee5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014eeb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014ef2:	e8 4c f8 ff ff       	call   c0014743 <cpuidCheckExtendedEBX(unsigned int)>
c0014ef7:	c1 e0 07             	shl    eax,0x7
c0014efa:	88 c2                	mov    dl,al
c0014efc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014f02:	83 e0 7f             	and    eax,0x7f
c0014f05:	09 d0                	or     eax,edx
c0014f07:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014f0d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014f14:	e8 57 f8 ff ff       	call   c0014770 <cpuidCheckExtendedECX(unsigned int)>
c0014f19:	83 e0 01             	and    eax,0x1
c0014f1c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014f23:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014f29:	83 e0 f7             	and    eax,0xfffffff7
c0014f2c:	09 d0                	or     eax,edx
c0014f2e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014f34:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014f3b:	e8 30 f8 ff ff       	call   c0014770 <cpuidCheckExtendedECX(unsigned int)>
c0014f40:	83 c4 10             	add    esp,0x10
c0014f43:	83 e0 01             	and    eax,0x1
c0014f46:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014f4d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014f53:	83 e0 fb             	and    eax,0xfffffffb
c0014f56:	09 d0                	or     eax,edx
c0014f58:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014f5e:	83 ec 0c             	sub    esp,0xc
c0014f61:	56                   	push   esi
c0014f62:	55                   	push   ebp
c0014f63:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014f67:	57                   	push   edi
c0014f68:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014f6c:	50                   	push   eax
c0014f6d:	6a 01                	push   0x1
c0014f6f:	e8 f2 f6 ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014f74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f78:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014f7e:	88 c1                	mov    cl,al
c0014f80:	83 e2 f0             	and    edx,0xfffffff0
c0014f83:	83 e1 0f             	and    ecx,0xf
c0014f86:	09 ca                	or     edx,ecx
c0014f88:	88 c1                	mov    cl,al
c0014f8a:	c0 e9 04             	shr    cl,0x4
c0014f8d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014f93:	0f b6 d1             	movzx  edx,cl
c0014f96:	c1 e2 06             	shl    edx,0x6
c0014f99:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c0014f9d:	89 d5                	mov    ebp,edx
c0014f9f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014fa5:	66 81 e2 3f c0       	and    dx,0xc03f
c0014faa:	83 c4 20             	add    esp,0x20
c0014fad:	09 ea                	or     edx,ebp
c0014faf:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014fb6:	89 c2                	mov    edx,eax
c0014fb8:	c1 ea 08             	shr    edx,0x8
c0014fbb:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0014fc1:	83 e2 0f             	and    edx,0xf
c0014fc4:	83 e1 3f             	and    ecx,0x3f
c0014fc7:	89 d5                	mov    ebp,edx
c0014fc9:	c1 e5 06             	shl    ebp,0x6
c0014fcc:	09 cd                	or     ebp,ecx
c0014fce:	89 e9                	mov    ecx,ebp
c0014fd0:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0014fd6:	88 d1                	mov    cl,dl
c0014fd8:	c0 e9 02             	shr    cl,0x2
c0014fdb:	89 cd                	mov    ebp,ecx
c0014fdd:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0014fe3:	83 e1 c0             	and    ecx,0xffffffc0
c0014fe6:	09 cd                	or     ebp,ecx
c0014fe8:	89 e9                	mov    ecx,ebp
c0014fea:	89 c5                	mov    ebp,eax
c0014fec:	c1 ed 0c             	shr    ebp,0xc
c0014fef:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014ff5:	83 e5 03             	and    ebp,0x3
c0014ff8:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0014ffe:	c1 e5 04             	shl    ebp,0x4
c0015001:	83 e1 cf             	and    ecx,0xffffffcf
c0015004:	09 cd                	or     ebp,ecx
c0015006:	80 fa 06             	cmp    dl,0x6
c0015009:	89 e9                	mov    ecx,ebp
c001500b:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0015011:	74 05                	je     c0015018 <CPU::detectFeatures()+0x55a>
c0015013:	80 fa 0f             	cmp    dl,0xf
c0015016:	75 5d                	jne    c0015075 <CPU::detectFeatures()+0x5b7>
c0015018:	89 c5                	mov    ebp,eax
c001501a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001501e:	c1 ed 10             	shr    ebp,0x10
c0015021:	c1 e5 04             	shl    ebp,0x4
c0015024:	09 e9                	or     ecx,ebp
c0015026:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001502c:	0f b6 c9             	movzx  ecx,cl
c001502f:	c1 e1 06             	shl    ecx,0x6
c0015032:	66 81 e5 3f c0       	and    bp,0xc03f
c0015037:	09 e9                	or     ecx,ebp
c0015039:	80 fa 0f             	cmp    dl,0xf
c001503c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0015043:	75 30                	jne    c0015075 <CPU::detectFeatures()+0x5b7>
c0015045:	c1 e8 14             	shr    eax,0x14
c0015048:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001504e:	83 c0 0f             	add    eax,0xf
c0015051:	83 e2 3f             	and    edx,0x3f
c0015054:	88 c1                	mov    cl,al
c0015056:	c1 e1 06             	shl    ecx,0x6
c0015059:	c0 e8 02             	shr    al,0x2
c001505c:	09 ca                	or     edx,ecx
c001505e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0015064:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001506a:	83 e2 c0             	and    edx,0xffffffc0
c001506d:	09 d0                	or     eax,edx
c001506f:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0015075:	83 ec 0c             	sub    esp,0xc
c0015078:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001507f:	56                   	push   esi
c0015080:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015084:	50                   	push   eax
c0015085:	57                   	push   edi
c0015086:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001508a:	55                   	push   ebp
c001508b:	68 00 00 00 80       	push   0x80000000
c0015090:	e8 d1 f5 ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015095:	83 c4 20             	add    esp,0x20
c0015098:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00150a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00150a4:	76 1e                	jbe    c00150c4 <CPU::detectFeatures()+0x606>
c00150a6:	83 ec 0c             	sub    esp,0xc
c00150a9:	56                   	push   esi
c00150aa:	50                   	push   eax
c00150ab:	57                   	push   edi
c00150ac:	55                   	push   ebp
c00150ad:	68 01 00 00 80       	push   0x80000001
c00150b2:	e8 af f5 ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150b7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00150c1:	83 c4 20             	add    esp,0x20
c00150c4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00150ca:	83 f8 01             	cmp    eax,0x1
c00150cd:	75 6f                	jne    c001513e <CPU::detectFeatures()+0x680>
c00150cf:	51                   	push   ecx
c00150d0:	51                   	push   ecx
c00150d1:	68 e6 24 02 c0       	push   0xc00224e6
c00150d6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00150da:	56                   	push   esi
c00150db:	e8 79 b6 fe ff       	call   c0000759 <strcpy>
c00150e0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00150e6:	5f                   	pop    edi
c00150e7:	66 c1 e8 06          	shr    ax,0x6
c00150eb:	5d                   	pop    ebp
c00150ec:	0f b6 c0             	movzx  eax,al
c00150ef:	50                   	push   eax
c00150f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00150f6:	c1 e8 0e             	shr    eax,0xe
c00150f9:	0f b6 c0             	movzx  eax,al
c00150fc:	50                   	push   eax
c00150fd:	e8 04 f2 ff ff       	call   c0014306 <lookupIntelCPUName(unsigned char, unsigned char)>
c0015102:	5a                   	pop    edx
c0015103:	59                   	pop    ecx
c0015104:	50                   	push   eax
c0015105:	56                   	push   esi
c0015106:	e8 05 b7 fe ff       	call   c0000810 <strcat>
c001510b:	5f                   	pop    edi
c001510c:	5d                   	pop    ebp
c001510d:	56                   	push   esi
c001510e:	53                   	push   ebx
c001510f:	e8 24 b6 ff ff       	call   c0010738 <Device::setName(char const*)>
c0015114:	58                   	pop    eax
c0015115:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001511b:	5a                   	pop    edx
c001511c:	68 ed 24 02 c0       	push   0xc00224ed
c0015121:	50                   	push   eax
c0015122:	e8 83 b6 fe ff       	call   c00007aa <strcmp>
c0015127:	83 c4 10             	add    esp,0x10
c001512a:	85 c0                	test   eax,eax
c001512c:	0f 85 53 03 00 00    	jne    c0015485 <CPU::detectFeatures()+0x9c7>
c0015132:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0015139:	e9 47 03 00 00       	jmp    c0015485 <CPU::detectFeatures()+0x9c7>
c001513e:	83 f8 02             	cmp    eax,0x2
c0015141:	0f 85 b5 00 00 00    	jne    c00151fc <CPU::detectFeatures()+0x73e>
c0015147:	57                   	push   edi
c0015148:	57                   	push   edi
c0015149:	68 ff 24 02 c0       	push   0xc00224ff
c001514e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015152:	56                   	push   esi
c0015153:	e8 01 b6 fe ff       	call   c0000759 <strcpy>
c0015158:	5d                   	pop    ebp
c0015159:	58                   	pop    eax
c001515a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015160:	66 c1 e8 06          	shr    ax,0x6
c0015164:	0f b6 c0             	movzx  eax,al
c0015167:	50                   	push   eax
c0015168:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001516e:	c1 e8 0e             	shr    eax,0xe
c0015171:	0f b6 c0             	movzx  eax,al
c0015174:	50                   	push   eax
c0015175:	e8 e7 ef ff ff       	call   c0014161 <lookupAMDCPUName(unsigned char, unsigned char)>
c001517a:	5a                   	pop    edx
c001517b:	59                   	pop    ecx
c001517c:	50                   	push   eax
c001517d:	56                   	push   esi
c001517e:	e8 8d b6 fe ff       	call   c0000810 <strcat>
c0015183:	5f                   	pop    edi
c0015184:	5d                   	pop    ebp
c0015185:	56                   	push   esi
c0015186:	53                   	push   ebx
c0015187:	e8 ac b5 ff ff       	call   c0010738 <Device::setName(char const*)>
c001518c:	58                   	pop    eax
c001518d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015193:	5a                   	pop    edx
c0015194:	68 04 25 02 c0       	push   0xc0022504
c0015199:	50                   	push   eax
c001519a:	e8 0b b6 fe ff       	call   c00007aa <strcmp>
c001519f:	83 c4 10             	add    esp,0x10
c00151a2:	85 c0                	test   eax,eax
c00151a4:	75 20                	jne    c00151c6 <CPU::detectFeatures()+0x708>
c00151a6:	8b 15 28 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024528
c00151ac:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00151b2:	a8 01                	test   al,0x1
c00151b4:	74 10                	je     c00151c6 <CPU::detectFeatures()+0x708>
c00151b6:	83 e0 fe             	and    eax,0xfffffffe
c00151b9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00151bf:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00151c6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151cc:	c1 e8 0e             	shr    eax,0xe
c00151cf:	3c 05                	cmp    al,0x5
c00151d1:	0f 85 ae 02 00 00    	jne    c0015485 <CPU::detectFeatures()+0x9c7>
c00151d7:	56                   	push   esi
c00151d8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00151de:	83 e0 0f             	and    eax,0xf
c00151e1:	50                   	push   eax
c00151e2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151e8:	66 c1 e8 06          	shr    ax,0x6
c00151ec:	0f b6 c0             	movzx  eax,al
c00151ef:	50                   	push   eax
c00151f0:	6a 05                	push   0x5
c00151f2:	e8 fc f3 ff ff       	call   c00145f3 <AMD_K6_writeback(int, int, int)>
c00151f7:	e9 ff 01 00 00       	jmp    c00153fb <CPU::detectFeatures()+0x93d>
c00151fc:	89 c1                	mov    ecx,eax
c00151fe:	83 e1 fd             	and    ecx,0xfffffffd
c0015201:	83 f9 04             	cmp    ecx,0x4
c0015204:	74 09                	je     c001520f <CPU::detectFeatures()+0x751>
c0015206:	83 f8 03             	cmp    eax,0x3
c0015209:	0f 85 6f 01 00 00    	jne    c001537e <CPU::detectFeatures()+0x8c0>
c001520f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015215:	c1 ea 0e             	shr    edx,0xe
c0015218:	80 fa 05             	cmp    dl,0x5
c001521b:	75 62                	jne    c001527f <CPU::detectFeatures()+0x7c1>
c001521d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015223:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015228:	66 81 fa 00 01       	cmp    dx,0x100
c001522d:	75 0c                	jne    c001523b <CPU::detectFeatures()+0x77d>
c001522f:	51                   	push   ecx
c0015230:	51                   	push   ecx
c0015231:	68 0b 25 02 c0       	push   0xc002250b
c0015236:	e9 ba 01 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c001523b:	66 81 fa 00 02       	cmp    dx,0x200
c0015240:	75 0c                	jne    c001524e <CPU::detectFeatures()+0x790>
c0015242:	52                   	push   edx
c0015243:	52                   	push   edx
c0015244:	68 1e 25 02 c0       	push   0xc002251e
c0015249:	e9 a7 01 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c001524e:	66 81 fa 40 02       	cmp    dx,0x240
c0015253:	75 0c                	jne    c0015261 <CPU::detectFeatures()+0x7a3>
c0015255:	50                   	push   eax
c0015256:	50                   	push   eax
c0015257:	68 30 25 02 c0       	push   0xc0022530
c001525c:	e9 94 01 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c0015261:	83 f8 06             	cmp    eax,0x6
c0015264:	0f 84 ee 00 00 00    	je     c0015358 <CPU::detectFeatures()+0x89a>
c001526a:	83 f9 04             	cmp    ecx,0x4
c001526d:	0f 84 f6 00 00 00    	je     c0015369 <CPU::detectFeatures()+0x8ab>
c0015273:	50                   	push   eax
c0015274:	50                   	push   eax
c0015275:	68 56 25 02 c0       	push   0xc0022556
c001527a:	e9 76 01 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c001527f:	80 fa 06             	cmp    dl,0x6
c0015282:	0f 85 cb 00 00 00    	jne    c0015353 <CPU::detectFeatures()+0x895>
c0015288:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001528e:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015293:	66 81 fa 80 01       	cmp    dx,0x180
c0015298:	75 0c                	jne    c00152a6 <CPU::detectFeatures()+0x7e8>
c001529a:	50                   	push   eax
c001529b:	50                   	push   eax
c001529c:	68 61 25 02 c0       	push   0xc0022561
c00152a1:	e9 4f 01 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c00152a6:	66 81 fa c0 01       	cmp    dx,0x1c0
c00152ab:	74 07                	je     c00152b4 <CPU::detectFeatures()+0x7f6>
c00152ad:	66 81 fa 00 02       	cmp    dx,0x200
c00152b2:	75 0c                	jne    c00152c0 <CPU::detectFeatures()+0x802>
c00152b4:	50                   	push   eax
c00152b5:	50                   	push   eax
c00152b6:	68 71 25 02 c0       	push   0xc0022571
c00152bb:	e9 35 01 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c00152c0:	66 81 fa 40 02       	cmp    dx,0x240
c00152c5:	75 0c                	jne    c00152d3 <CPU::detectFeatures()+0x815>
c00152c7:	50                   	push   eax
c00152c8:	50                   	push   eax
c00152c9:	68 78 25 02 c0       	push   0xc0022578
c00152ce:	e9 22 01 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c00152d3:	66 81 fa 80 02       	cmp    dx,0x280
c00152d8:	74 07                	je     c00152e1 <CPU::detectFeatures()+0x823>
c00152da:	66 81 fa 40 03       	cmp    dx,0x340
c00152df:	75 0c                	jne    c00152ed <CPU::detectFeatures()+0x82f>
c00152e1:	50                   	push   eax
c00152e2:	50                   	push   eax
c00152e3:	68 81 25 02 c0       	push   0xc0022581
c00152e8:	e9 08 01 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c00152ed:	66 81 fa c0 03       	cmp    dx,0x3c0
c00152f2:	75 0c                	jne    c0015300 <CPU::detectFeatures()+0x842>
c00152f4:	55                   	push   ebp
c00152f5:	55                   	push   ebp
c00152f6:	68 88 25 02 c0       	push   0xc0022588
c00152fb:	e9 f5 00 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c0015300:	83 f8 06             	cmp    eax,0x6
c0015303:	74 53                	je     c0015358 <CPU::detectFeatures()+0x89a>
c0015305:	83 f9 04             	cmp    ecx,0x4
c0015308:	74 5f                	je     c0015369 <CPU::detectFeatures()+0x8ab>
c001530a:	57                   	push   edi
c001530b:	57                   	push   edi
c001530c:	68 91 25 02 c0       	push   0xc0022591
c0015311:	53                   	push   ebx
c0015312:	e8 21 b4 ff ff       	call   c0010738 <Device::setName(char const*)>
c0015317:	b1 c1                	mov    cl,0xc1
c0015319:	88 c8                	mov    al,cl
c001531b:	e6 22                	out    0x22,al
c001531d:	e4 23                	in     al,0x23
c001531f:	88 c2                	mov    dl,al
c0015321:	88 c8                	mov    al,cl
c0015323:	e6 22                	out    0x22,al
c0015325:	88 d0                	mov    al,dl
c0015327:	83 c8 10             	or     eax,0x10
c001532a:	e6 23                	out    0x23,al
c001532c:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0015333:	89 d0                	mov    eax,edx
c0015335:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0015338:	40                   	inc    eax
c0015339:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001533f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0015343:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0015349:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001534e:	e9 a8 00 00 00       	jmp    c00153fb <CPU::detectFeatures()+0x93d>
c0015353:	83 f8 06             	cmp    eax,0x6
c0015356:	75 0c                	jne    c0015364 <CPU::detectFeatures()+0x8a6>
c0015358:	56                   	push   esi
c0015359:	56                   	push   esi
c001535a:	68 42 25 02 c0       	push   0xc0022542
c001535f:	e9 91 00 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c0015364:	83 f9 04             	cmp    ecx,0x4
c0015367:	75 0c                	jne    c0015375 <CPU::detectFeatures()+0x8b7>
c0015369:	51                   	push   ecx
c001536a:	51                   	push   ecx
c001536b:	68 4e 25 02 c0       	push   0xc002254e
c0015370:	e9 80 00 00 00       	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c0015375:	52                   	push   edx
c0015376:	52                   	push   edx
c0015377:	68 9c 25 02 c0       	push   0xc002259c
c001537c:	eb 77                	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c001537e:	83 f8 07             	cmp    eax,0x7
c0015381:	75 09                	jne    c001538c <CPU::detectFeatures()+0x8ce>
c0015383:	50                   	push   eax
c0015384:	50                   	push   eax
c0015385:	68 a6 25 02 c0       	push   0xc00225a6
c001538a:	eb 69                	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c001538c:	83 f8 0a             	cmp    eax,0xa
c001538f:	75 09                	jne    c001539a <CPU::detectFeatures()+0x8dc>
c0015391:	50                   	push   eax
c0015392:	50                   	push   eax
c0015393:	68 b1 25 02 c0       	push   0xc00225b1
c0015398:	eb 5b                	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c001539a:	83 f8 0b             	cmp    eax,0xb
c001539d:	75 09                	jne    c00153a8 <CPU::detectFeatures()+0x8ea>
c001539f:	50                   	push   eax
c00153a0:	50                   	push   eax
c00153a1:	68 b9 25 02 c0       	push   0xc00225b9
c00153a6:	eb 4d                	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c00153a8:	83 f8 08             	cmp    eax,0x8
c00153ab:	75 09                	jne    c00153b6 <CPU::detectFeatures()+0x8f8>
c00153ad:	50                   	push   eax
c00153ae:	50                   	push   eax
c00153af:	68 c2 25 02 c0       	push   0xc00225c2
c00153b4:	eb 3f                	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c00153b6:	83 f8 09             	cmp    eax,0x9
c00153b9:	75 09                	jne    c00153c4 <CPU::detectFeatures()+0x906>
c00153bb:	50                   	push   eax
c00153bc:	50                   	push   eax
c00153bd:	68 ca 25 02 c0       	push   0xc00225ca
c00153c2:	eb 31                	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c00153c4:	83 f8 05             	cmp    eax,0x5
c00153c7:	75 09                	jne    c00153d2 <CPU::detectFeatures()+0x914>
c00153c9:	50                   	push   eax
c00153ca:	50                   	push   eax
c00153cb:	68 d2 25 02 c0       	push   0xc00225d2
c00153d0:	eb 23                	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c00153d2:	83 f8 0c             	cmp    eax,0xc
c00153d5:	75 09                	jne    c00153e0 <CPU::detectFeatures()+0x922>
c00153d7:	55                   	push   ebp
c00153d8:	55                   	push   ebp
c00153d9:	68 e0 25 02 c0       	push   0xc00225e0
c00153de:	eb 15                	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c00153e0:	83 f8 0d             	cmp    eax,0xd
c00153e3:	75 09                	jne    c00153ee <CPU::detectFeatures()+0x930>
c00153e5:	57                   	push   edi
c00153e6:	57                   	push   edi
c00153e7:	68 eb 25 02 c0       	push   0xc00225eb
c00153ec:	eb 07                	jmp    c00153f5 <CPU::detectFeatures()+0x937>
c00153ee:	56                   	push   esi
c00153ef:	56                   	push   esi
c00153f0:	68 ff 25 02 c0       	push   0xc00225ff
c00153f5:	53                   	push   ebx
c00153f6:	e8 3d b3 ff ff       	call   c0010738 <Device::setName(char const*)>
c00153fb:	83 c4 10             	add    esp,0x10
c00153fe:	e9 82 00 00 00       	jmp    c0015485 <CPU::detectFeatures()+0x9c7>
c0015403:	51                   	push   ecx
c0015404:	51                   	push   ecx
c0015405:	68 4b 24 02 c0       	push   0xc002244b
c001540a:	57                   	push   edi
c001540b:	e8 49 b3 fe ff       	call   c0000759 <strcpy>
c0015410:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001541a:	e8 12 ae fe ff       	call   c0000231 <is486>
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	85 c0                	test   eax,eax
c0015424:	74 2d                	je     c0015453 <CPU::detectFeatures()+0x995>
c0015426:	52                   	push   edx
c0015427:	52                   	push   edx
c0015428:	68 0b 26 02 c0       	push   0xc002260b
c001542d:	53                   	push   ebx
c001542e:	e8 05 b3 ff ff       	call   c0010738 <Device::setName(char const*)>
c0015433:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001543a:	e8 99 a5 00 00       	call   c001f9d8 <CPU::readCR0()>
c001543f:	83 c4 10             	add    esp,0x10
c0015442:	83 e0 14             	and    eax,0x14
c0015445:	83 f8 04             	cmp    eax,0x4
c0015448:	75 1f                	jne    c0015469 <CPU::detectFeatures()+0x9ab>
c001544a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015451:	eb 32                	jmp    c0015485 <CPU::detectFeatures()+0x9c7>
c0015453:	50                   	push   eax
c0015454:	50                   	push   eax
c0015455:	68 16 26 02 c0       	push   0xc0022616
c001545a:	53                   	push   ebx
c001545b:	e8 d8 b2 ff ff       	call   c0010738 <Device::setName(char const*)>
c0015460:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0015467:	eb d1                	jmp    c001543a <CPU::detectFeatures()+0x97c>
c0015469:	e8 9e ad fe ff       	call   c000020c <hasLegacyFPU>
c001546e:	83 e0 01             	and    eax,0x1
c0015471:	8d 14 00             	lea    edx,[eax+eax*1]
c0015474:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001547a:	83 e0 fd             	and    eax,0xfffffffd
c001547d:	09 d0                	or     eax,edx
c001547f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0015485:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001548c:	83 c4 4c             	add    esp,0x4c
c001548f:	5b                   	pop    ebx
c0015490:	5e                   	pop    esi
c0015491:	5f                   	pop    edi
c0015492:	5d                   	pop    ebp
c0015493:	c3                   	ret    

c0015494 <CPU::setupSMEP()>:
c0015494:	83 ec 0c             	sub    esp,0xc
c0015497:	e8 06 a8 00 00       	call   c001fca2 <CPU::readCR4()>
c001549c:	0d 00 00 10 00       	or     eax,0x100000
c00154a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154a5:	83 c4 0c             	add    esp,0xc
c00154a8:	e9 10 a8 00 00       	jmp    c001fcbd <CPU::writeCR4(unsigned long)>
c00154ad:	90                   	nop

c00154ae <CPU::setupUMIP()>:
c00154ae:	83 ec 0c             	sub    esp,0xc
c00154b1:	e8 ec a7 00 00       	call   c001fca2 <CPU::readCR4()>
c00154b6:	80 cc 08             	or     ah,0x8
c00154b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154bd:	83 c4 0c             	add    esp,0xc
c00154c0:	e9 f8 a7 00 00       	jmp    c001fcbd <CPU::writeCR4(unsigned long)>
c00154c5:	90                   	nop

c00154c6 <CPU::setupTSC()>:
c00154c6:	83 ec 0c             	sub    esp,0xc
c00154c9:	e8 d4 a7 00 00       	call   c001fca2 <CPU::readCR4()>
c00154ce:	83 c8 04             	or     eax,0x4
c00154d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154d5:	83 c4 0c             	add    esp,0xc
c00154d8:	e9 e0 a7 00 00       	jmp    c001fcbd <CPU::writeCR4(unsigned long)>
c00154dd:	90                   	nop

c00154de <CPU::setupLargePages()>:
c00154de:	83 ec 0c             	sub    esp,0xc
c00154e1:	e8 bc a7 00 00       	call   c001fca2 <CPU::readCR4()>
c00154e6:	83 c8 10             	or     eax,0x10
c00154e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154ed:	83 c4 0c             	add    esp,0xc
c00154f0:	e9 c8 a7 00 00       	jmp    c001fcbd <CPU::writeCR4(unsigned long)>
c00154f5:	90                   	nop

c00154f6 <CPU::setupPAT()>:
c00154f6:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c00154fb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0015502:	74 2c                	je     c0015530 <CPU::setupPAT()+0x3a>
c0015504:	53                   	push   ebx
c0015505:	83 ec 10             	sub    esp,0x10
c0015508:	68 77 02 00 00       	push   0x277
c001550d:	50                   	push   eax
c001550e:	e8 61 60 ff ff       	call   c000b574 <Computer::rdmsr(unsigned int)>
c0015513:	83 e2 f8             	and    edx,0xfffffff8
c0015516:	83 ca 01             	or     edx,0x1
c0015519:	52                   	push   edx
c001551a:	50                   	push   eax
c001551b:	68 77 02 00 00       	push   0x277
c0015520:	ff 35 28 45 02 c0    	push   DWORD PTR ds:0xc0024528
c0015526:	e8 75 60 ff ff       	call   c000b5a0 <Computer::wrmsr(unsigned int, unsigned long long)>
c001552b:	83 c4 28             	add    esp,0x28
c001552e:	5b                   	pop    ebx
c001552f:	c3                   	ret    
c0015530:	c3                   	ret    
c0015531:	90                   	nop

c0015532 <CPU::setupMTRR()>:
c0015532:	c3                   	ret    
c0015533:	90                   	nop

c0015534 <CPU::setupGlobalPages()>:
c0015534:	83 ec 0c             	sub    esp,0xc
c0015537:	e8 66 a7 00 00       	call   c001fca2 <CPU::readCR4()>
c001553c:	0c 80                	or     al,0x80
c001553e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015542:	83 c4 0c             	add    esp,0xc
c0015545:	e9 73 a7 00 00       	jmp    c001fcbd <CPU::writeCR4(unsigned long)>

c001554a <CPU::allowUsermodeDataAccess()>:
c001554a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001554e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015555:	74 03                	je     c001555a <CPU::allowUsermodeDataAccess()+0x10>
c0015557:	0f 01 cb             	stac   
c001555a:	c3                   	ret    
c001555b:	90                   	nop

c001555c <CPU::prohibitUsermodeDataAccess()>:
c001555c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015560:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015567:	74 03                	je     c001556c <CPU::prohibitUsermodeDataAccess()+0x10>
c0015569:	0f 01 ca             	clac   
c001556c:	c3                   	ret    
c001556d:	90                   	nop

c001556e <CPU::setupSMAP()>:
c001556e:	53                   	push   ebx
c001556f:	83 ec 08             	sub    esp,0x8
c0015572:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015576:	e8 27 a7 00 00       	call   c001fca2 <CPU::readCR4()>
c001557b:	83 ec 0c             	sub    esp,0xc
c001557e:	0d 00 00 20 00       	or     eax,0x200000
c0015583:	50                   	push   eax
c0015584:	e8 34 a7 00 00       	call   c001fcbd <CPU::writeCR4(unsigned long)>
c0015589:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001558d:	83 c4 18             	add    esp,0x18
c0015590:	5b                   	pop    ebx
c0015591:	eb c9                	jmp    c001555c <CPU::prohibitUsermodeDataAccess()>
c0015593:	90                   	nop

c0015594 <CPU::setupFeatures()>:
c0015594:	53                   	push   ebx
c0015595:	83 ec 08             	sub    esp,0x8
c0015598:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001559c:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00155a3:	74 0c                	je     c00155b1 <CPU::setupFeatures()+0x1d>
c00155a5:	83 ec 0c             	sub    esp,0xc
c00155a8:	53                   	push   ebx
c00155a9:	e8 e6 fe ff ff       	call   c0015494 <CPU::setupSMEP()>
c00155ae:	83 c4 10             	add    esp,0x10
c00155b1:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00155b8:	74 0c                	je     c00155c6 <CPU::setupFeatures()+0x32>
c00155ba:	83 ec 0c             	sub    esp,0xc
c00155bd:	53                   	push   ebx
c00155be:	e8 ab ff ff ff       	call   c001556e <CPU::setupSMAP()>
c00155c3:	83 c4 10             	add    esp,0x10
c00155c6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00155cd:	74 0c                	je     c00155db <CPU::setupFeatures()+0x47>
c00155cf:	83 ec 0c             	sub    esp,0xc
c00155d2:	53                   	push   ebx
c00155d3:	e8 d6 fe ff ff       	call   c00154ae <CPU::setupUMIP()>
c00155d8:	83 c4 10             	add    esp,0x10
c00155db:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00155e2:	74 0c                	je     c00155f0 <CPU::setupFeatures()+0x5c>
c00155e4:	83 ec 0c             	sub    esp,0xc
c00155e7:	53                   	push   ebx
c00155e8:	e8 d9 fe ff ff       	call   c00154c6 <CPU::setupTSC()>
c00155ed:	83 c4 10             	add    esp,0x10
c00155f0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00155f7:	74 0c                	je     c0015605 <CPU::setupFeatures()+0x71>
c00155f9:	83 ec 0c             	sub    esp,0xc
c00155fc:	53                   	push   ebx
c00155fd:	e8 dc fe ff ff       	call   c00154de <CPU::setupLargePages()>
c0015602:	83 c4 10             	add    esp,0x10
c0015605:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001560c:	74 0c                	je     c001561a <CPU::setupFeatures()+0x86>
c001560e:	83 ec 0c             	sub    esp,0xc
c0015611:	53                   	push   ebx
c0015612:	e8 1d ff ff ff       	call   c0015534 <CPU::setupGlobalPages()>
c0015617:	83 c4 10             	add    esp,0x10
c001561a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015621:	74 0d                	je     c0015630 <CPU::setupFeatures()+0x9c>
c0015623:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015627:	83 c4 08             	add    esp,0x8
c001562a:	5b                   	pop    ebx
c001562b:	e9 c6 fe ff ff       	jmp    c00154f6 <CPU::setupPAT()>
c0015630:	83 c4 08             	add    esp,0x8
c0015633:	5b                   	pop    ebx
c0015634:	c3                   	ret    
c0015635:	90                   	nop

c0015636 <CPU::open(int, int, void*)>:
c0015636:	57                   	push   edi
c0015637:	56                   	push   esi
c0015638:	53                   	push   ebx
c0015639:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001563d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015641:	83 ec 0c             	sub    esp,0xc
c0015644:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001564a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015650:	50                   	push   eax
c0015651:	e8 0a 62 ff ff       	call   c000b860 <GDT::setup()>
c0015656:	83 c4 0c             	add    esp,0xc
c0015659:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001565f:	6a 00                	push   0x0
c0015661:	68 ef be ad de       	push   0xdeadbeef
c0015666:	57                   	push   edi
c0015667:	e8 8a 84 ff ff       	call   c000daf6 <TSS::setup(unsigned long, unsigned long)>
c001566c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001566f:	e8 62 84 ff ff       	call   c000dad6 <TSS::flush()>
c0015674:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001567a:	89 04 24             	mov    DWORD PTR [esp],eax
c001567d:	e8 38 64 ff ff       	call   c000baba <IDT::setup()>
c0015682:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0015689:	e8 26 a6 00 00       	call   c001fcb4 <CPU::writeDR7(unsigned long)>
c001568e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0015698:	e8 0c 6f ff ff       	call   c000c5a9 <Phys::allocatePage()>
c001569d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00156a3:	89 30                	mov    DWORD PTR [eax],esi
c00156a5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00156ab:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00156ae:	58                   	pop    eax
c00156af:	5a                   	pop    edx
c00156b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00156b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00156ba:	e8 07 94 ff ff       	call   c000eac6 <VAS::setCPUSpecific(unsigned long)>
c00156bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156c2:	e8 f7 f3 ff ff       	call   c0014abe <CPU::detectFeatures()>
c00156c7:	e8 86 c3 ff ff       	call   c0011a52 <setupInterruptController()>
c00156cc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00156d2:	a1 40 45 02 c0       	mov    eax,ds:0xc0024540
c00156d7:	83 e0 10             	and    eax,0x10
c00156da:	83 f8 01             	cmp    eax,0x1
c00156dd:	19 c0                	sbb    eax,eax
c00156df:	83 e0 46             	and    eax,0x46
c00156e2:	83 c0 1e             	add    eax,0x1e
c00156e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00156e8:	e8 0b d7 ff ff       	call   c0012df8 <setupTimer(int)>
c00156ed:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00156f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156f6:	e8 99 fe ff ff       	call   c0015594 <CPU::setupFeatures()>
c00156fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156fe:	e8 3f f1 ff ff       	call   c0014842 <CPU::displayFeatures()>
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	5b                   	pop    ebx
c0015707:	31 c0                	xor    eax,eax
c0015709:	5e                   	pop    esi
c001570a:	5f                   	pop    edi
c001570b:	c3                   	ret    

c001570c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001570c:	56                   	push   esi
c001570d:	53                   	push   ebx
c001570e:	51                   	push   ecx
c001570f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015713:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015717:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c001571a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001571d:	88 c1                	mov    cl,al
c001571f:	c0 e9 06             	shr    cl,0x6
c0015722:	88 0c 24             	mov    BYTE PTR [esp],cl
c0015725:	88 c1                	mov    cl,al
c0015727:	66 c1 e8 03          	shr    ax,0x3
c001572b:	83 e1 07             	and    ecx,0x7
c001572e:	83 e0 07             	and    eax,0x7
c0015731:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015735:	88 06                	mov    BYTE PTR [esi],al
c0015737:	74 7f                	je     c00157b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015739:	80 f9 04             	cmp    cl,0x4
c001573c:	74 7a                	je     c00157b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001573e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015742:	75 05                	jne    c0015749 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c0015744:	80 f9 05             	cmp    cl,0x5
c0015747:	74 6f                	je     c00157b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015749:	84 c9                	test   cl,cl
c001574b:	75 05                	jne    c0015752 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c001574d:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015750:	eb 3c                	jmp    c001578e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015752:	80 f9 01             	cmp    cl,0x1
c0015755:	75 05                	jne    c001575c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c0015757:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001575a:	eb 32                	jmp    c001578e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001575c:	80 f9 02             	cmp    cl,0x2
c001575f:	75 05                	jne    c0015766 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c0015761:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0015764:	eb 28                	jmp    c001578e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015766:	31 c0                	xor    eax,eax
c0015768:	80 f9 03             	cmp    cl,0x3
c001576b:	75 05                	jne    c0015772 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c001576d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015770:	eb 1c                	jmp    c001578e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015772:	80 f9 05             	cmp    cl,0x5
c0015775:	75 05                	jne    c001577c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c0015777:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c001577a:	eb 12                	jmp    c001578e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001577c:	80 f9 06             	cmp    cl,0x6
c001577f:	75 05                	jne    c0015786 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c0015781:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0015784:	eb 08                	jmp    c001578e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015786:	80 f9 07             	cmp    cl,0x7
c0015789:	75 03                	jne    c001578e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001578b:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c001578e:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015792:	75 10                	jne    c00157a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c0015794:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0015798:	b9 03 00 00 00       	mov    ecx,0x3
c001579d:	01 d0                	add    eax,edx
c001579f:	e9 42 01 00 00       	jmp    c00158e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00157a4:	b9 02 00 00 00       	mov    ecx,0x2
c00157a9:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00157ad:	0f 85 33 01 00 00    	jne    c00158e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00157b3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00157b6:	eb 18                	jmp    c00157d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00157b8:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00157bc:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00157c1:	80 f9 05             	cmp    cl,0x5
c00157c4:	0f 94 c0             	sete   al
c00157c7:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c00157cb:	74 0d                	je     c00157da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00157cd:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00157d0:	b9 06 00 00 00       	mov    ecx,0x6
c00157d5:	e9 0c 01 00 00       	jmp    c00158e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00157da:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c00157de:	0f 84 06 01 00 00    	je     c00158ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c00157e4:	80 f9 04             	cmp    cl,0x4
c00157e7:	0f 85 06 01 00 00    	jne    c00158f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00157ed:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c00157f0:	89 c6                	mov    esi,eax
c00157f2:	88 c1                	mov    cl,al
c00157f4:	66 c1 ee 03          	shr    si,0x3
c00157f8:	c0 e9 06             	shr    cl,0x6
c00157fb:	83 e6 07             	and    esi,0x7
c00157fe:	24 07                	and    al,0x7
c0015800:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c0015804:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015808:	89 f1                	mov    ecx,esi
c001580a:	75 05                	jne    c0015811 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c001580c:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c001580f:	eb 4b                	jmp    c001585c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015811:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015816:	75 05                	jne    c001581d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c0015818:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c001581b:	eb 3f                	jmp    c001585c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001581d:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015822:	75 05                	jne    c0015829 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c0015824:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c0015827:	eb 33                	jmp    c001585c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015829:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001582e:	75 05                	jne    c0015835 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015830:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015833:	eb 27                	jmp    c001585c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015835:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c001583a:	75 05                	jne    c0015841 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c001583c:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c001583f:	eb 1b                	jmp    c001585c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015841:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015846:	75 05                	jne    c001584d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c0015848:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c001584b:	eb 0f                	jmp    c001585c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001584d:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015852:	75 05                	jne    c0015859 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c0015854:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c0015857:	eb 03                	jmp    c001585c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015859:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001585c:	84 c9                	test   cl,cl
c001585e:	75 05                	jne    c0015865 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0015860:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015863:	eb 3c                	jmp    c00158a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015865:	80 f9 01             	cmp    cl,0x1
c0015868:	75 05                	jne    c001586f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001586a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001586d:	eb 32                	jmp    c00158a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001586f:	80 f9 02             	cmp    cl,0x2
c0015872:	75 05                	jne    c0015879 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0015874:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0015877:	eb 28                	jmp    c00158a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015879:	80 f9 03             	cmp    cl,0x3
c001587c:	75 05                	jne    c0015883 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c001587e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015881:	eb 1e                	jmp    c00158a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015883:	31 c0                	xor    eax,eax
c0015885:	80 f9 04             	cmp    cl,0x4
c0015888:	74 17                	je     c00158a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001588a:	80 f9 05             	cmp    cl,0x5
c001588d:	75 05                	jne    c0015894 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001588f:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c0015892:	eb 0d                	jmp    c00158a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015894:	80 f9 06             	cmp    cl,0x6
c0015897:	75 05                	jne    c001589e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c0015899:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001589c:	eb 03                	jmp    c00158a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001589e:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158a1:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00158a6:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00158aa:	0f 94 c2             	sete   dl
c00158ad:	d3 e0                	shl    eax,cl
c00158af:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00158b3:	74 07                	je     c00158bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00158b5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00158b8:	31 d2                	xor    edx,edx
c00158ba:	eb 23                	jmp    c00158df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00158bc:	01 f0                	add    eax,esi
c00158be:	b9 03 00 00 00       	mov    ecx,0x3
c00158c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00158c7:	74 33                	je     c00158fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00158c9:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00158cd:	75 0d                	jne    c00158dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c00158cf:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00158d3:	01 c8                	add    eax,ecx
c00158d5:	b9 04 00 00 00       	mov    ecx,0x4
c00158da:	eb 20                	jmp    c00158fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00158dc:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00158df:	b9 07 00 00 00       	mov    ecx,0x7
c00158e4:	eb 16                	jmp    c00158fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00158e6:	31 d2                	xor    edx,edx
c00158e8:	eb 12                	jmp    c00158fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00158ea:	b9 02 00 00 00       	mov    ecx,0x2
c00158ef:	b2 01                	mov    dl,0x1
c00158f1:	eb 07                	jmp    c00158fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c00158f3:	31 d2                	xor    edx,edx
c00158f5:	b9 02 00 00 00       	mov    ecx,0x2
c00158fa:	31 c0                	xor    eax,eax
c00158fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015900:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015902:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015906:	88 11                	mov    BYTE PTR [ecx],dl
c0015908:	5a                   	pop    edx
c0015909:	5b                   	pop    ebx
c001590a:	5e                   	pop    esi
c001590b:	c3                   	ret    

c001590c <Krnl::panic(char const*)>:
c001590c:	55                   	push   ebp
c001590d:	89 e5                	mov    ebp,esp
c001590f:	53                   	push   ebx
c0015910:	51                   	push   ecx
c0015911:	a1 70 4f 02 c0       	mov    eax,ds:0xc0024f70
c0015916:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015919:	85 c0                	test   eax,eax
c001591b:	74 02                	je     c001591f <Krnl::panic(char const*)+0x13>
c001591d:	ff d0                	call   eax
c001591f:	fa                   	cli    
c0015920:	50                   	push   eax
c0015921:	c6 05 74 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f74,0x1
c0015928:	50                   	push   eax
c0015929:	c6 05 60 39 02 c0 00 	mov    BYTE PTR ds:0xc0023960,0x0
c0015930:	53                   	push   ebx
c0015931:	68 50 26 02 c0       	push   0xc0022650
c0015936:	e8 06 98 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001593b:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015940:	5a                   	pop    edx
c0015941:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015947:	51                   	push   ecx
c0015948:	e8 e8 79 ff ff       	call   c000d335 <setActiveTerminal(VgaText*)>
c001594d:	83 c4 0c             	add    esp,0xc
c0015950:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015955:	6a 01                	push   0x1
c0015957:	6a 0f                	push   0xf
c0015959:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001595f:	50                   	push   eax
c0015960:	e8 0f 74 ff ff       	call   c000cd74 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015965:	58                   	pop    eax
c0015966:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001596b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015971:	50                   	push   eax
c0015972:	e8 61 7c ff ff       	call   c000d5d8 <VgaText::clearScreen()>
c0015977:	58                   	pop    eax
c0015978:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c001597d:	5a                   	pop    edx
c001597e:	68 69 26 02 c0       	push   0xc0022669
c0015983:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015989:	51                   	push   ecx
c001598a:	e8 c7 7d ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001598f:	58                   	pop    eax
c0015990:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015995:	5a                   	pop    edx
c0015996:	68 10 27 02 c0       	push   0xc0022710
c001599b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159a1:	51                   	push   ecx
c00159a2:	e8 af 7d ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00159a7:	58                   	pop    eax
c00159a8:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00159ad:	5a                   	pop    edx
c00159ae:	68 85 26 02 c0       	push   0xc0022685
c00159b3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159b9:	51                   	push   ecx
c00159ba:	e8 97 7d ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00159bf:	58                   	pop    eax
c00159c0:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00159c5:	5a                   	pop    edx
c00159c6:	53                   	push   ebx
c00159c7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159cd:	51                   	push   ecx
c00159ce:	e8 83 7d ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00159d3:	5b                   	pop    ebx
c00159d4:	58                   	pop    eax
c00159d5:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00159da:	68 a5 26 02 c0       	push   0xc00226a5
c00159df:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159e5:	50                   	push   eax
c00159e6:	e8 6b 7d ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00159eb:	58                   	pop    eax
c00159ec:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c00159f1:	5a                   	pop    edx
c00159f2:	68 4c 27 02 c0       	push   0xc002274c
c00159f7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159fd:	51                   	push   ecx
c00159fe:	e8 53 7d ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015a03:	5b                   	pop    ebx
c0015a04:	58                   	pop    eax
c0015a05:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015a0a:	68 85 26 02 c0       	push   0xc0022685
c0015a0f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a15:	50                   	push   eax
c0015a16:	e8 3b 7d ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015a1b:	58                   	pop    eax
c0015a1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a21:	5a                   	pop    edx
c0015a22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a25:	83 c0 0c             	add    eax,0xc
c0015a28:	50                   	push   eax
c0015a29:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015a2e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a34:	51                   	push   ecx
c0015a35:	e8 1c 7d ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015a3a:	5b                   	pop    ebx
c0015a3b:	58                   	pop    eax
c0015a3c:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015a41:	68 a4 26 02 c0       	push   0xc00226a4
c0015a46:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a4c:	50                   	push   eax
c0015a4d:	e8 04 7d ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015a52:	58                   	pop    eax
c0015a53:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015a58:	5a                   	pop    edx
c0015a59:	68 78 27 02 c0       	push   0xc0022778
c0015a5e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a64:	51                   	push   ecx
c0015a65:	e8 ec 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015a6a:	5b                   	pop    ebx
c0015a6b:	58                   	pop    eax
c0015a6c:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015a71:	68 b8 27 02 c0       	push   0xc00227b8
c0015a76:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a7c:	50                   	push   eax
c0015a7d:	e8 d4 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015a82:	58                   	pop    eax
c0015a83:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015a88:	5a                   	pop    edx
c0015a89:	68 90 26 02 c0       	push   0xc0022690
c0015a8e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a94:	51                   	push   ecx
c0015a95:	e8 bc 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015a9a:	5b                   	pop    ebx
c0015a9b:	58                   	pop    eax
c0015a9c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015a9f:	50                   	push   eax
c0015aa0:	68 a8 26 02 c0       	push   0xc00226a8
c0015aa5:	e8 97 96 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0015aaa:	58                   	pop    eax
c0015aab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015aae:	5a                   	pop    edx
c0015aaf:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015ab2:	51                   	push   ecx
c0015ab3:	68 b1 26 02 c0       	push   0xc00226b1
c0015ab8:	e8 84 96 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0015abd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015ac0:	5b                   	pop    ebx
c0015ac1:	5a                   	pop    edx
c0015ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac4:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015ac7:	51                   	push   ecx
c0015ac8:	68 ba 26 02 c0       	push   0xc00226ba
c0015acd:	e8 6f 96 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0015ad2:	5b                   	pop    ebx
c0015ad3:	58                   	pop    eax
c0015ad4:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015ad9:	68 fc 27 02 c0       	push   0xc00227fc
c0015ade:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ae4:	50                   	push   eax
c0015ae5:	e8 6c 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015aea:	58                   	pop    eax
c0015aeb:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015af0:	5a                   	pop    edx
c0015af1:	68 c3 26 02 c0       	push   0xc00226c3
c0015af6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015afc:	51                   	push   ecx
c0015afd:	e8 54 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015b02:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015b07:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b0d:	e8 c6 9e 00 00       	call   c001f9d8 <CPU::readCR0()>
c0015b12:	5a                   	pop    edx
c0015b13:	59                   	pop    ecx
c0015b14:	50                   	push   eax
c0015b15:	53                   	push   ebx
c0015b16:	e8 61 7c ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015b1b:	5b                   	pop    ebx
c0015b1c:	58                   	pop    eax
c0015b1d:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015b22:	68 cd 26 02 c0       	push   0xc00226cd
c0015b27:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b2d:	50                   	push   eax
c0015b2e:	e8 23 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015b33:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015b38:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b3e:	e8 83 a1 00 00       	call   c001fcc6 <CPU::readCR2()>
c0015b43:	5a                   	pop    edx
c0015b44:	59                   	pop    ecx
c0015b45:	50                   	push   eax
c0015b46:	53                   	push   ebx
c0015b47:	e8 30 7c ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015b4c:	5b                   	pop    ebx
c0015b4d:	58                   	pop    eax
c0015b4e:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015b53:	68 d7 26 02 c0       	push   0xc00226d7
c0015b58:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b5e:	50                   	push   eax
c0015b5f:	e8 f2 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015b64:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015b69:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b6f:	e8 f1 9a 00 00       	call   c001f665 <CPU::readCR3()>
c0015b74:	5a                   	pop    edx
c0015b75:	59                   	pop    ecx
c0015b76:	50                   	push   eax
c0015b77:	53                   	push   ebx
c0015b78:	e8 ff 7b ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015b7d:	5b                   	pop    ebx
c0015b7e:	58                   	pop    eax
c0015b7f:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015b84:	68 ea 26 02 c0       	push   0xc00226ea
c0015b89:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b8f:	50                   	push   eax
c0015b90:	e8 c1 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015b95:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015b9a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ba0:	e8 fd a0 00 00       	call   c001fca2 <CPU::readCR4()>
c0015ba5:	5a                   	pop    edx
c0015ba6:	59                   	pop    ecx
c0015ba7:	50                   	push   eax
c0015ba8:	53                   	push   ebx
c0015ba9:	e8 ce 7b ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015bae:	5b                   	pop    ebx
c0015baf:	58                   	pop    eax
c0015bb0:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015bb5:	68 f4 26 02 c0       	push   0xc00226f4
c0015bba:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bc0:	50                   	push   eax
c0015bc1:	e8 90 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015bc6:	5a                   	pop    edx
c0015bc7:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015bcc:	59                   	pop    ecx
c0015bcd:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015bd0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bd6:	53                   	push   ebx
c0015bd7:	50                   	push   eax
c0015bd8:	e8 9f 7b ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015bdd:	58                   	pop    eax
c0015bde:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015be3:	5a                   	pop    edx
c0015be4:	68 0b 27 02 c0       	push   0xc002270b
c0015be9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bef:	51                   	push   ecx
c0015bf0:	e8 61 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015bf5:	5b                   	pop    ebx
c0015bf6:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015bfb:	5a                   	pop    edx
c0015bfc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015bff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c05:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015c08:	51                   	push   ecx
c0015c09:	50                   	push   eax
c0015c0a:	e8 6d 7b ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015c0f:	5b                   	pop    ebx
c0015c10:	58                   	pop    eax
c0015c11:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015c16:	68 0b 27 02 c0       	push   0xc002270b
c0015c1b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c21:	50                   	push   eax
c0015c22:	e8 2f 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015c27:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c2a:	59                   	pop    ecx
c0015c2b:	a1 74 59 02 c0       	mov    eax,ds:0xc0025974
c0015c30:	5b                   	pop    ebx
c0015c31:	8b 12                	mov    edx,DWORD PTR [edx]
c0015c33:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c39:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015c3c:	52                   	push   edx
c0015c3d:	50                   	push   eax
c0015c3e:	e8 39 7b ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015c43:	83 c4 10             	add    esp,0x10
c0015c46:	b2 fe                	mov    dl,0xfe
c0015c48:	e4 60                	in     al,0x60
c0015c4a:	3c 1c                	cmp    al,0x1c
c0015c4c:	74 04                	je     c0015c52 <Krnl::panic(char const*)+0x346>
c0015c4e:	3c 5a                	cmp    al,0x5a
c0015c50:	75 f6                	jne    c0015c48 <Krnl::panic(char const*)+0x33c>
c0015c52:	e4 64                	in     al,0x64
c0015c54:	a8 02                	test   al,0x2
c0015c56:	75 fa                	jne    c0015c52 <Krnl::panic(char const*)+0x346>
c0015c58:	88 d0                	mov    al,dl
c0015c5a:	e6 64                	out    0x64,al
c0015c5c:	fa                   	cli    
c0015c5d:	f4                   	hlt    
c0015c5e:	eb e8                	jmp    c0015c48 <Krnl::panic(char const*)+0x33c>

c0015c60 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015c60:	55                   	push   ebp
c0015c61:	57                   	push   edi
c0015c62:	56                   	push   esi
c0015c63:	53                   	push   ebx
c0015c64:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015c6a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015c71:	8d 46 01             	lea    eax,[esi+0x1]
c0015c74:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c7a:	80 fb 40             	cmp    bl,0x40
c0015c7d:	75 19                	jne    c0015c98 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015c7f:	8a 06                	mov    al,BYTE PTR [esi]
c0015c81:	84 c0                	test   al,al
c0015c83:	74 07                	je     c0015c8c <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015c85:	3c 3a                	cmp    al,0x3a
c0015c87:	74 03                	je     c0015c8c <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015c89:	46                   	inc    esi
c0015c8a:	eb f3                	jmp    c0015c7f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015c8c:	84 c0                	test   al,al
c0015c8e:	0f 84 1f 01 00 00    	je     c0015db3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015c94:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015c97:	46                   	inc    esi
c0015c98:	50                   	push   eax
c0015c99:	6a 40                	push   0x40
c0015c9b:	6a 00                	push   0x0
c0015c9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015ca1:	50                   	push   eax
c0015ca2:	e8 13 aa fe ff       	call   c00006ba <memset>
c0015ca7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015cae:	31 d2                	xor    edx,edx
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	8a 07                	mov    al,BYTE PTR [edi]
c0015cb5:	84 c0                	test   al,al
c0015cb7:	0f 84 f6 00 00 00    	je     c0015db3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015cbd:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015cc3:	0f 8f ea 00 00 00    	jg     c0015db3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015cc9:	3c 0a                	cmp    al,0xa
c0015ccb:	0f 85 d3 00 00 00    	jne    c0015da4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015cd1:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015cd6:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015cda:	f6 c1 df             	test   cl,0xdf
c0015cdd:	0f 94 c2             	sete   dl
c0015ce0:	80 f9 23             	cmp    cl,0x23
c0015ce3:	0f 94 c0             	sete   al
c0015ce6:	08 c2                	or     dl,al
c0015ce8:	75 47                	jne    c0015d31 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015cea:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015ced:	3c 01                	cmp    al,0x1
c0015cef:	76 40                	jbe    c0015d31 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015cf1:	80 f9 5b             	cmp    cl,0x5b
c0015cf4:	75 3f                	jne    c0015d35 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015cf6:	80 fb 40             	cmp    bl,0x40
c0015cf9:	75 36                	jne    c0015d31 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015cfb:	83 ec 0c             	sub    esp,0xc
c0015cfe:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015d02:	55                   	push   ebp
c0015d03:	e8 cf a9 fe ff       	call   c00006d7 <strlen>
c0015d08:	83 c4 10             	add    esp,0x10
c0015d0b:	83 f8 3f             	cmp    eax,0x3f
c0015d0e:	0f 87 9f 00 00 00    	ja     c0015db3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d14:	50                   	push   eax
c0015d15:	50                   	push   eax
c0015d16:	55                   	push   ebp
c0015d17:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015d1b:	55                   	push   ebp
c0015d1c:	e8 38 aa fe ff       	call   c0000759 <strcpy>
c0015d21:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015d24:	e8 ae a9 fe ff       	call   c00006d7 <strlen>
c0015d29:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015d2e:	83 c4 10             	add    esp,0x10
c0015d31:	31 c9                	xor    ecx,ecx
c0015d33:	eb 76                	jmp    c0015dab <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015d35:	80 fb 40             	cmp    bl,0x40
c0015d38:	74 06                	je     c0015d40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015d3a:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015d3e:	eb 19                	jmp    c0015d59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015d40:	51                   	push   ecx
c0015d41:	51                   	push   ecx
c0015d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d46:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d4a:	50                   	push   eax
c0015d4b:	e8 5a aa fe ff       	call   c00007aa <strcmp>
c0015d50:	83 c4 10             	add    esp,0x10
c0015d53:	85 c0                	test   eax,eax
c0015d55:	75 da                	jne    c0015d31 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d57:	eb e1                	jmp    c0015d3a <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015d59:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015d5c:	84 c0                	test   al,al
c0015d5e:	0f 94 c1             	sete   cl
c0015d61:	3c 3d                	cmp    al,0x3d
c0015d63:	0f 94 c2             	sete   dl
c0015d66:	08 d1                	or     cl,dl
c0015d68:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015d6c:	75 03                	jne    c0015d71 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015d6e:	45                   	inc    ebp
c0015d6f:	eb e8                	jmp    c0015d59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015d71:	84 c0                	test   al,al
c0015d73:	74 3e                	je     c0015db3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d75:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015d79:	52                   	push   edx
c0015d7a:	52                   	push   edx
c0015d7b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015d7f:	50                   	push   eax
c0015d80:	56                   	push   esi
c0015d81:	e8 24 aa fe ff       	call   c00007aa <strcmp>
c0015d86:	83 c4 10             	add    esp,0x10
c0015d89:	85 c0                	test   eax,eax
c0015d8b:	75 a4                	jne    c0015d31 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d8d:	50                   	push   eax
c0015d8e:	8d 55 01             	lea    edx,[ebp+0x1]
c0015d91:	50                   	push   eax
c0015d92:	52                   	push   edx
c0015d93:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015d9a:	e8 ba a9 fe ff       	call   c0000759 <strcpy>
c0015d9f:	83 c4 10             	add    esp,0x10
c0015da2:	eb 14                	jmp    c0015db8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015da4:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015da7:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015dab:	47                   	inc    edi
c0015dac:	89 ca                	mov    edx,ecx
c0015dae:	e9 00 ff ff ff       	jmp    c0015cb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015db3:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015db8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015dbc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015dc2:	5b                   	pop    ebx
c0015dc3:	5e                   	pop    esi
c0015dc4:	5f                   	pop    edi
c0015dc5:	5d                   	pop    ebp
c0015dc6:	c3                   	ret    

c0015dc7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015dc7:	57                   	push   edi
c0015dc8:	56                   	push   esi
c0015dc9:	53                   	push   ebx
c0015dca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015dd0:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015dd7:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015dde:	53                   	push   ebx
c0015ddf:	e8 f3 a8 fe ff       	call   c00006d7 <strlen>
c0015de4:	89 34 24             	mov    DWORD PTR [esp],esi
c0015de7:	89 c7                	mov    edi,eax
c0015de9:	e8 e9 a8 fe ff       	call   c00006d7 <strlen>
c0015dee:	83 c4 10             	add    esp,0x10
c0015df1:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015df5:	31 ff                	xor    edi,edi
c0015df7:	3d ff 00 00 00       	cmp    eax,0xff
c0015dfc:	0f 87 18 01 00 00    	ja     c0015f1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015e02:	51                   	push   ecx
c0015e03:	51                   	push   ecx
c0015e04:	56                   	push   esi
c0015e05:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015e09:	56                   	push   esi
c0015e0a:	e8 4a a9 fe ff       	call   c0000759 <strcpy>
c0015e0f:	58                   	pop    eax
c0015e10:	5a                   	pop    edx
c0015e11:	68 f4 2b 02 c0       	push   0xc0022bf4
c0015e16:	56                   	push   esi
c0015e17:	e8 f4 a9 fe ff       	call   c0000810 <strcat>
c0015e1c:	59                   	pop    ecx
c0015e1d:	58                   	pop    eax
c0015e1e:	53                   	push   ebx
c0015e1f:	56                   	push   esi
c0015e20:	e8 eb a9 fe ff       	call   c0000810 <strcat>
c0015e25:	58                   	pop    eax
c0015e26:	5a                   	pop    edx
c0015e27:	68 22 28 02 c0       	push   0xc0022822
c0015e2c:	56                   	push   esi
c0015e2d:	e8 de a9 fe ff       	call   c0000810 <strcat>
c0015e32:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e39:	e8 ce 91 ff ff       	call   c000f00c <operator new(unsigned long)>
c0015e3e:	83 c4 0c             	add    esp,0xc
c0015e41:	89 c3                	mov    ebx,eax
c0015e43:	ff 35 74 59 02 c0    	push   DWORD PTR ds:0xc0025974
c0015e49:	56                   	push   esi
c0015e4a:	50                   	push   eax
c0015e4b:	e8 28 98 ff ff       	call   c000f678 <File::File(char const*, Process*)>
c0015e50:	59                   	pop    ecx
c0015e51:	5e                   	pop    esi
c0015e52:	6a 01                	push   0x1
c0015e54:	53                   	push   ebx
c0015e55:	e8 82 98 ff ff       	call   c000f6dc <File::open(FileOpenMode)>
c0015e5a:	83 c4 10             	add    esp,0x10
c0015e5d:	85 c0                	test   eax,eax
c0015e5f:	74 08                	je     c0015e69 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015e61:	83 ec 0c             	sub    esp,0xc
c0015e64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e66:	53                   	push   ebx
c0015e67:	eb 2e                	jmp    c0015e97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015e69:	52                   	push   edx
c0015e6a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015e6e:	50                   	push   eax
c0015e6f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015e73:	50                   	push   eax
c0015e74:	53                   	push   ebx
c0015e75:	e8 0e 9b ff ff       	call   c000f988 <File::stat(unsigned long long*, bool*)>
c0015e7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e7e:	83 c4 10             	add    esp,0x10
c0015e81:	89 c1                	mov    ecx,eax
c0015e83:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015e87:	75 13                	jne    c0015e9c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015e89:	83 ec 0c             	sub    esp,0xc
c0015e8c:	53                   	push   ebx
c0015e8d:	e8 a8 98 ff ff       	call   c000f73a <File::close()>
c0015e92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e9a:	eb 7b                	jmp    c0015f17 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015e9c:	83 ec 0c             	sub    esp,0xc
c0015e9f:	50                   	push   eax
c0015ea0:	e8 2e 61 ff ff       	call   c000bfd3 <malloc>
c0015ea5:	89 c6                	mov    esi,eax
c0015ea7:	58                   	pop    eax
c0015ea8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015eaa:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015eae:	52                   	push   edx
c0015eaf:	56                   	push   esi
c0015eb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015eb4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015eb8:	53                   	push   ebx
c0015eb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ebc:	83 c4 20             	add    esp,0x20
c0015ebf:	85 c0                	test   eax,eax
c0015ec1:	75 0a                	jne    c0015ecd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015ec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ec7:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015ecb:	74 18                	je     c0015ee5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015ecd:	83 ec 0c             	sub    esp,0xc
c0015ed0:	31 ff                	xor    edi,edi
c0015ed2:	53                   	push   ebx
c0015ed3:	e8 62 98 ff ff       	call   c000f73a <File::close()>
c0015ed8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015eda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015edd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ee0:	83 c4 10             	add    esp,0x10
c0015ee3:	eb 35                	jmp    c0015f1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015ee5:	83 ec 0c             	sub    esp,0xc
c0015ee8:	53                   	push   ebx
c0015ee9:	e8 4c 98 ff ff       	call   c000f73a <File::close()>
c0015eee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ef0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ef3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ef6:	83 c4 0c             	add    esp,0xc
c0015ef9:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015f00:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015f07:	56                   	push   esi
c0015f08:	e8 53 fd ff ff       	call   c0015c60 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015f0d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f10:	89 c7                	mov    edi,eax
c0015f12:	e8 cc 60 ff ff       	call   c000bfe3 <free>
c0015f17:	83 c4 10             	add    esp,0x10
c0015f1a:	81 c4 10 01 00 00    	add    esp,0x110
c0015f20:	89 f8                	mov    eax,edi
c0015f22:	5b                   	pop    ebx
c0015f23:	5e                   	pop    esi
c0015f24:	5f                   	pop    edi
c0015f25:	c3                   	ret    

c0015f26 <Reg::getLine(char*, char*, char*)>:
c0015f26:	57                   	push   edi
c0015f27:	56                   	push   esi
c0015f28:	53                   	push   ebx
c0015f29:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015f35:	57                   	push   edi
c0015f36:	56                   	push   esi
c0015f37:	53                   	push   ebx
c0015f38:	68 27 28 02 c0       	push   0xc0022827
c0015f3d:	e8 85 fe ff ff       	call   c0015dc7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f42:	83 c4 10             	add    esp,0x10
c0015f45:	84 c0                	test   al,al
c0015f47:	75 10                	jne    c0015f59 <Reg::getLine(char*, char*, char*)+0x33>
c0015f49:	57                   	push   edi
c0015f4a:	56                   	push   esi
c0015f4b:	53                   	push   ebx
c0015f4c:	68 4c 28 02 c0       	push   0xc002284c
c0015f51:	e8 71 fe ff ff       	call   c0015dc7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f56:	83 c4 10             	add    esp,0x10
c0015f59:	5b                   	pop    ebx
c0015f5a:	5e                   	pop    esi
c0015f5b:	5f                   	pop    edi
c0015f5c:	c3                   	ret    

c0015f5d <Reg::readInt(char*, char*, int*)>:
c0015f5d:	55                   	push   ebp
c0015f5e:	57                   	push   edi
c0015f5f:	56                   	push   esi
c0015f60:	53                   	push   ebx
c0015f61:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015f67:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015f6b:	57                   	push   edi
c0015f6c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f73:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f7a:	e8 a7 ff ff ff       	call   c0015f26 <Reg::getLine(char*, char*, char*)>
c0015f7f:	83 c4 10             	add    esp,0x10
c0015f82:	84 c0                	test   al,al
c0015f84:	0f 84 b2 00 00 00    	je     c001603c <Reg::readInt(char*, char*, int*)+0xdf>
c0015f8a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015f8e:	80 fa 2b             	cmp    dl,0x2b
c0015f91:	74 0c                	je     c0015f9f <Reg::readInt(char*, char*, int*)+0x42>
c0015f93:	80 fa 2d             	cmp    dl,0x2d
c0015f96:	75 0e                	jne    c0015fa6 <Reg::readInt(char*, char*, int*)+0x49>
c0015f98:	ba 01 00 00 00       	mov    edx,0x1
c0015f9d:	eb 0b                	jmp    c0015faa <Reg::readInt(char*, char*, int*)+0x4d>
c0015f9f:	ba 01 00 00 00       	mov    edx,0x1
c0015fa4:	eb 02                	jmp    c0015fa8 <Reg::readInt(char*, char*, int*)+0x4b>
c0015fa6:	31 d2                	xor    edx,edx
c0015fa8:	31 c0                	xor    eax,eax
c0015faa:	be 0a 00 00 00       	mov    esi,0xa
c0015faf:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015fb4:	75 20                	jne    c0015fd6 <Reg::readInt(char*, char*, int*)+0x79>
c0015fb6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015fba:	80 f9 78             	cmp    cl,0x78
c0015fbd:	75 0a                	jne    c0015fc9 <Reg::readInt(char*, char*, int*)+0x6c>
c0015fbf:	83 c2 02             	add    edx,0x2
c0015fc2:	be 10 00 00 00       	mov    esi,0x10
c0015fc7:	eb 0d                	jmp    c0015fd6 <Reg::readInt(char*, char*, int*)+0x79>
c0015fc9:	80 f9 62             	cmp    cl,0x62
c0015fcc:	75 08                	jne    c0015fd6 <Reg::readInt(char*, char*, int*)+0x79>
c0015fce:	83 c2 02             	add    edx,0x2
c0015fd1:	be 02 00 00 00       	mov    esi,0x2
c0015fd6:	01 d7                	add    edi,edx
c0015fd8:	31 d2                	xor    edx,edx
c0015fda:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015fdc:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015fe0:	84 db                	test   bl,bl
c0015fe2:	0f 94 c3             	sete   bl
c0015fe5:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0015fea:	0f 94 c1             	sete   cl
c0015fed:	08 cb                	or     bl,cl
c0015fef:	75 3a                	jne    c001602b <Reg::readInt(char*, char*, int*)+0xce>
c0015ff1:	0f af d6             	imul   edx,esi
c0015ff4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015ff9:	83 fe 10             	cmp    esi,0x10
c0015ffc:	75 26                	jne    c0016024 <Reg::readInt(char*, char*, int*)+0xc7>
c0015ffe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016002:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016005:	89 e9                	mov    ecx,ebp
c0016007:	80 f9 05             	cmp    cl,0x5
c001600a:	77 06                	ja     c0016012 <Reg::readInt(char*, char*, int*)+0xb5>
c001600c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016010:	eb 16                	jmp    c0016028 <Reg::readInt(char*, char*, int*)+0xcb>
c0016012:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016016:	83 e9 61             	sub    ecx,0x61
c0016019:	80 f9 05             	cmp    cl,0x5
c001601c:	77 06                	ja     c0016024 <Reg::readInt(char*, char*, int*)+0xc7>
c001601e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016022:	eb 04                	jmp    c0016028 <Reg::readInt(char*, char*, int*)+0xcb>
c0016024:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016028:	47                   	inc    edi
c0016029:	eb af                	jmp    c0015fda <Reg::readInt(char*, char*, int*)+0x7d>
c001602b:	84 c0                	test   al,al
c001602d:	74 02                	je     c0016031 <Reg::readInt(char*, char*, int*)+0xd4>
c001602f:	f7 da                	neg    edx
c0016031:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016038:	89 10                	mov    DWORD PTR [eax],edx
c001603a:	88 d8                	mov    al,bl
c001603c:	81 c4 ec 00 00 00    	add    esp,0xec
c0016042:	5b                   	pop    ebx
c0016043:	5e                   	pop    esi
c0016044:	5f                   	pop    edi
c0016045:	5d                   	pop    ebp
c0016046:	c3                   	ret    

c0016047 <Reg::readString(char*, char*, char*, int)>:
c0016047:	57                   	push   edi
c0016048:	56                   	push   esi
c0016049:	53                   	push   ebx
c001604a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016050:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0016054:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001605b:	57                   	push   edi
c001605c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016063:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001606a:	e8 b7 fe ff ff       	call   c0015f26 <Reg::getLine(char*, char*, char*)>
c001606f:	83 c4 10             	add    esp,0x10
c0016072:	89 c6                	mov    esi,eax
c0016074:	84 c0                	test   al,al
c0016076:	74 44                	je     c00160bc <Reg::readString(char*, char*, char*, int)+0x75>
c0016078:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001607f:	31 c0                	xor    eax,eax
c0016081:	4a                   	dec    edx
c0016082:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0016085:	84 c9                	test   cl,cl
c0016087:	74 0f                	je     c0016098 <Reg::readString(char*, char*, char*, int)+0x51>
c0016089:	39 c2                	cmp    edx,eax
c001608b:	7e 0b                	jle    c0016098 <Reg::readString(char*, char*, char*, int)+0x51>
c001608d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0016090:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0016095:	40                   	inc    eax
c0016096:	eb ea                	jmp    c0016082 <Reg::readString(char*, char*, char*, int)+0x3b>
c0016098:	83 ec 0c             	sub    esp,0xc
c001609b:	53                   	push   ebx
c001609c:	e8 36 a6 fe ff       	call   c00006d7 <strlen>
c00160a1:	83 c4 10             	add    esp,0x10
c00160a4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00160a9:	75 11                	jne    c00160bc <Reg::readString(char*, char*, char*, int)+0x75>
c00160ab:	83 ec 0c             	sub    esp,0xc
c00160ae:	53                   	push   ebx
c00160af:	e8 23 a6 fe ff       	call   c00006d7 <strlen>
c00160b4:	83 c4 10             	add    esp,0x10
c00160b7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00160bc:	81 c4 d0 00 00 00    	add    esp,0xd0
c00160c2:	89 f0                	mov    eax,esi
c00160c4:	5b                   	pop    ebx
c00160c5:	5e                   	pop    esi
c00160c6:	5f                   	pop    edi
c00160c7:	c3                   	ret    

c00160c8 <Reg::readBool(char*, char*, bool*)>:
c00160c8:	83 ec 20             	sub    esp,0x20
c00160cb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00160cf:	50                   	push   eax
c00160d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160d8:	e8 80 fe ff ff       	call   c0015f5d <Reg::readInt(char*, char*, int*)>
c00160dd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00160e1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00160e6:	0f 95 02             	setne  BYTE PTR [edx]
c00160e9:	83 c4 2c             	add    esp,0x2c
c00160ec:	c3                   	ret    

c00160ed <Reg::readBoolWithDefault(char*, char*, bool)>:
c00160ed:	53                   	push   ebx
c00160ee:	83 ec 1c             	sub    esp,0x1c
c00160f1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00160f5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00160f9:	50                   	push   eax
c00160fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016102:	e8 c1 ff ff ff       	call   c00160c8 <Reg::readBool(char*, char*, bool*)>
c0016107:	83 c4 10             	add    esp,0x10
c001610a:	84 c0                	test   al,al
c001610c:	74 04                	je     c0016112 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001610e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016112:	83 c4 18             	add    esp,0x18
c0016115:	88 d8                	mov    al,bl
c0016117:	5b                   	pop    ebx
c0016118:	c3                   	ret    

c0016119 <Reg::readIntWithDefault(char*, char*, int)>:
c0016119:	53                   	push   ebx
c001611a:	83 ec 1c             	sub    esp,0x1c
c001611d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016121:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016125:	50                   	push   eax
c0016126:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001612a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001612e:	e8 2a fe ff ff       	call   c0015f5d <Reg::readInt(char*, char*, int*)>
c0016133:	83 c4 10             	add    esp,0x10
c0016136:	84 c0                	test   al,al
c0016138:	74 04                	je     c001613e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001613a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001613e:	83 c4 18             	add    esp,0x18
c0016141:	89 d8                	mov    eax,ebx
c0016143:	5b                   	pop    ebx
c0016144:	c3                   	ret    

c0016145 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016145:	56                   	push   esi
c0016146:	53                   	push   ebx
c0016147:	51                   	push   ecx
c0016148:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016154:	56                   	push   esi
c0016155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001615d:	e8 e5 fe ff ff       	call   c0016047 <Reg::readString(char*, char*, char*, int)>
c0016162:	83 c4 10             	add    esp,0x10
c0016165:	84 c0                	test   al,al
c0016167:	74 02                	je     c001616b <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0016169:	89 f3                	mov    ebx,esi
c001616b:	5a                   	pop    edx
c001616c:	89 d8                	mov    eax,ebx
c001616e:	5b                   	pop    ebx
c001616f:	5e                   	pop    esi
c0016170:	c3                   	ret    

c0016171 <Sys::exit(regs*)>:
c0016171:	83 ec 18             	sub    esp,0x18
c0016174:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016178:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001617b:	e8 a6 31 00 00       	call   c0019326 <terminateTask(int)>
c0016180:	83 c8 ff             	or     eax,0xffffffff
c0016183:	89 c2                	mov    edx,eax
c0016185:	83 c4 1c             	add    esp,0x1c
c0016188:	c3                   	ret    

c0016189 <Sys::loadDLL(regs*)>:
c0016189:	56                   	push   esi
c001618a:	31 d2                	xor    edx,edx
c001618c:	53                   	push   ebx
c001618d:	b8 01 00 00 00       	mov    eax,0x1
c0016192:	51                   	push   ecx
c0016193:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016197:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001619b:	74 7d                	je     c001621a <Sys::loadDLL(regs*)+0x91>
c001619d:	83 ec 0c             	sub    esp,0xc
c00161a0:	68 14 01 00 00       	push   0x114
c00161a5:	e8 62 8e ff ff       	call   c000f00c <operator new(unsigned long)>
c00161aa:	89 c3                	mov    ebx,eax
c00161ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b1:	83 c4 0c             	add    esp,0xc
c00161b4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00161b7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00161ba:	53                   	push   ebx
c00161bb:	e8 b8 94 ff ff       	call   c000f678 <File::File(char const*, Process*)>
c00161c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161c3:	e8 82 97 ff ff       	call   c000f94a <File::exists()>
c00161c8:	83 c4 10             	add    esp,0x10
c00161cb:	84 c0                	test   al,al
c00161cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161cf:	75 11                	jne    c00161e2 <Sys::loadDLL(regs*)+0x59>
c00161d1:	83 ec 0c             	sub    esp,0xc
c00161d4:	53                   	push   ebx
c00161d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161d8:	83 c4 10             	add    esp,0x10
c00161db:	b8 03 00 00 00       	mov    eax,0x3
c00161e0:	eb 36                	jmp    c0016218 <Sys::loadDLL(regs*)+0x8f>
c00161e2:	83 ec 0c             	sub    esp,0xc
c00161e5:	53                   	push   ebx
c00161e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161e9:	58                   	pop    eax
c00161ea:	5a                   	pop    edx
c00161eb:	6a 00                	push   0x0
c00161ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00161f0:	e8 1f 21 00 00       	call   c0018314 <Thr::loadDLL(char const*, bool)>
c00161f5:	83 c4 10             	add    esp,0x10
c00161f8:	89 c1                	mov    ecx,eax
c00161fa:	31 d2                	xor    edx,edx
c00161fc:	b8 04 00 00 00       	mov    eax,0x4
c0016201:	85 c9                	test   ecx,ecx
c0016203:	74 15                	je     c001621a <Sys::loadDLL(regs*)+0x91>
c0016205:	53                   	push   ebx
c0016206:	53                   	push   ebx
c0016207:	ff 35 28 45 02 c0    	push   DWORD PTR ds:0xc0024528
c001620d:	51                   	push   ecx
c001620e:	e8 c7 22 00 00       	call   c00184da <Thr::executeDLL(unsigned long, void*)>
c0016213:	83 c4 10             	add    esp,0x10
c0016216:	31 c0                	xor    eax,eax
c0016218:	31 d2                	xor    edx,edx
c001621a:	59                   	pop    ecx
c001621b:	5b                   	pop    ebx
c001621c:	5e                   	pop    esi
c001621d:	c3                   	ret    

c001621e <Sys::read(regs*)>:
c001621e:	57                   	push   edi
c001621f:	56                   	push   esi
c0016220:	53                   	push   ebx
c0016221:	83 ec 10             	sub    esp,0x10
c0016224:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016228:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001622b:	83 f8 02             	cmp    eax,0x2
c001622e:	77 10                	ja     c0016240 <Sys::read(regs*)+0x22>
c0016230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016235:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016238:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001623e:	eb 0e                	jmp    c001624e <Sys::read(regs*)+0x30>
c0016240:	83 ec 0c             	sub    esp,0xc
c0016243:	50                   	push   eax
c0016244:	e8 82 7d ff ff       	call   c000dfcb <getFromFileDescriptor(int)>
c0016249:	83 c4 10             	add    esp,0x10
c001624c:	89 c1                	mov    ecx,eax
c001624e:	83 c8 ff             	or     eax,0xffffffff
c0016251:	85 c9                	test   ecx,ecx
c0016253:	89 c2                	mov    edx,eax
c0016255:	74 28                	je     c001627f <Sys::read(regs*)+0x61>
c0016257:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001625f:	83 ec 0c             	sub    esp,0xc
c0016262:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016264:	31 ff                	xor    edi,edi
c0016266:	8d 54 24 18          	lea    edx,[esp+0x18]
c001626a:	52                   	push   edx
c001626b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001626e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016271:	57                   	push   edi
c0016272:	56                   	push   esi
c0016273:	51                   	push   ecx
c0016274:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016277:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001627b:	83 c4 20             	add    esp,0x20
c001627e:	99                   	cdq    
c001627f:	83 c4 10             	add    esp,0x10
c0016282:	5b                   	pop    ebx
c0016283:	5e                   	pop    esi
c0016284:	5f                   	pop    edi
c0016285:	c3                   	ret    

c0016286 <Sys::sbrk(regs*)>:
c0016286:	56                   	push   esi
c0016287:	53                   	push   ebx
c0016288:	50                   	push   eax
c0016289:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001628e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016292:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016295:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0016298:	85 db                	test   ebx,ebx
c001629a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00162a0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00162a3:	74 02                	je     c00162a7 <Sys::sbrk(regs*)+0x21>
c00162a5:	79 06                	jns    c00162ad <Sys::sbrk(regs*)+0x27>
c00162a7:	89 f0                	mov    eax,esi
c00162a9:	31 d2                	xor    edx,edx
c00162ab:	eb 2a                	jmp    c00162d7 <Sys::sbrk(regs*)+0x51>
c00162ad:	83 c8 ff             	or     eax,0xffffffff
c00162b0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00162b6:	89 c2                	mov    edx,eax
c00162b8:	77 1d                	ja     c00162d7 <Sys::sbrk(regs*)+0x51>
c00162ba:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00162c0:	50                   	push   eax
c00162c1:	c1 ea 0c             	shr    edx,0xc
c00162c4:	68 07 04 00 00       	push   0x407
c00162c9:	52                   	push   edx
c00162ca:	51                   	push   ecx
c00162cb:	e8 24 86 ff ff       	call   c000e8f4 <VAS::allocatePages(int, int)>
c00162d0:	89 f0                	mov    eax,esi
c00162d2:	31 d2                	xor    edx,edx
c00162d4:	83 c4 10             	add    esp,0x10
c00162d7:	59                   	pop    ecx
c00162d8:	5b                   	pop    ebx
c00162d9:	5e                   	pop    esi
c00162da:	c3                   	ret    

c00162db <Sys::write(regs*)>:
c00162db:	57                   	push   edi
c00162dc:	56                   	push   esi
c00162dd:	53                   	push   ebx
c00162de:	83 ec 10             	sub    esp,0x10
c00162e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00162e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00162e8:	83 f8 02             	cmp    eax,0x2
c00162eb:	77 10                	ja     c00162fd <Sys::write(regs*)+0x22>
c00162ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162f5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00162fb:	eb 0e                	jmp    c001630b <Sys::write(regs*)+0x30>
c00162fd:	83 ec 0c             	sub    esp,0xc
c0016300:	50                   	push   eax
c0016301:	e8 c5 7c ff ff       	call   c000dfcb <getFromFileDescriptor(int)>
c0016306:	83 c4 10             	add    esp,0x10
c0016309:	89 c1                	mov    ecx,eax
c001630b:	83 c8 ff             	or     eax,0xffffffff
c001630e:	85 c9                	test   ecx,ecx
c0016310:	89 c2                	mov    edx,eax
c0016312:	74 28                	je     c001633c <Sys::write(regs*)+0x61>
c0016314:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001631c:	31 ff                	xor    edi,edi
c001631e:	83 ec 0c             	sub    esp,0xc
c0016321:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016323:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016327:	52                   	push   edx
c0016328:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001632b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001632e:	57                   	push   edi
c001632f:	56                   	push   esi
c0016330:	51                   	push   ecx
c0016331:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016334:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016338:	83 c4 20             	add    esp,0x20
c001633b:	99                   	cdq    
c001633c:	83 c4 10             	add    esp,0x10
c001633f:	5b                   	pop    ebx
c0016340:	5e                   	pop    esi
c0016341:	5f                   	pop    edi
c0016342:	c3                   	ret    

c0016343 <Sys::yield(regs*)>:
c0016343:	83 ec 0c             	sub    esp,0xc
c0016346:	e8 ae 25 00 00       	call   c00188f9 <lockScheduler()>
c001634b:	e8 f2 28 00 00       	call   c0018c42 <schedule()>
c0016350:	e8 a6 25 00 00       	call   c00188fb <unlockScheduler()>
c0016355:	31 c0                	xor    eax,eax
c0016357:	31 d2                	xor    edx,edx
c0016359:	83 c4 0c             	add    esp,0xc
c001635c:	c3                   	ret    

c001635d <sysCallGetPID(regs*)>:
c001635d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016362:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016365:	8b 00                	mov    eax,DWORD PTR [eax]
c0016367:	89 c2                	mov    edx,eax
c0016369:	c1 fa 1f             	sar    edx,0x1f
c001636c:	c3                   	ret    

c001636d <sysCallSeekDir(regs*)>:
c001636d:	31 c0                	xor    eax,eax
c001636f:	31 d2                	xor    edx,edx
c0016371:	c3                   	ret    

c0016372 <sysCallTellDir(regs*)>:
c0016372:	31 c0                	xor    eax,eax
c0016374:	31 d2                	xor    edx,edx
c0016376:	c3                   	ret    

c0016377 <sysCallVerify(regs*)>:
c0016377:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001637b:	31 d2                	xor    edx,edx
c001637d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016380:	c3                   	ret    

c0016381 <sysCallFork(regs*)>:
c0016381:	83 c8 ff             	or     eax,0xffffffff
c0016384:	83 ca ff             	or     edx,0xffffffff
c0016387:	c3                   	ret    

c0016388 <sysCallExecve(regs*)>:
c0016388:	83 c8 ff             	or     eax,0xffffffff
c001638b:	83 ca ff             	or     edx,0xffffffff
c001638e:	c3                   	ret    

c001638f <sysCallGetArgc(regs*)>:
c001638f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016394:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016397:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001639d:	89 c2                	mov    edx,eax
c001639f:	c1 fa 1f             	sar    edx,0x1f
c00163a2:	c3                   	ret    

c00163a3 <sysFormatDisk(regs*)>:
c00163a3:	56                   	push   esi
c00163a4:	53                   	push   ebx
c00163a5:	50                   	push   eax
c00163a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163aa:	8b 1d 88 46 02 c0    	mov    ebx,DWORD PTR ds:0xc0024688
c00163b0:	eb 2a                	jmp    c00163dc <sysFormatDisk(regs*)+0x39>
c00163b2:	83 ec 0c             	sub    esp,0xc
c00163b5:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00163b8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00163bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00163bd:	51                   	push   ecx
c00163be:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00163c1:	51                   	push   ecx
c00163c2:	50                   	push   eax
c00163c3:	8b 04 85 20 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb4e0]
c00163ca:	50                   	push   eax
c00163cb:	53                   	push   ebx
c00163cc:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00163cf:	83 c4 20             	add    esp,0x20
c00163d2:	89 c1                	mov    ecx,eax
c00163d4:	83 f8 08             	cmp    eax,0x8
c00163d7:	75 12                	jne    c00163eb <sysFormatDisk(regs*)+0x48>
c00163d9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00163dc:	85 db                	test   ebx,ebx
c00163de:	75 d2                	jne    c00163b2 <sysFormatDisk(regs*)+0xf>
c00163e0:	b8 03 00 00 00       	mov    eax,0x3
c00163e5:	31 d2                	xor    edx,edx
c00163e7:	59                   	pop    ecx
c00163e8:	5b                   	pop    ebx
c00163e9:	5e                   	pop    esi
c00163ea:	c3                   	ret    
c00163eb:	85 c0                	test   eax,eax
c00163ed:	74 13                	je     c0016402 <sysFormatDisk(regs*)+0x5f>
c00163ef:	31 d2                	xor    edx,edx
c00163f1:	b8 01 00 00 00       	mov    eax,0x1
c00163f6:	83 f9 09             	cmp    ecx,0x9
c00163f9:	74 ec                	je     c00163e7 <sysFormatDisk(regs*)+0x44>
c00163fb:	b8 02 00 00 00       	mov    eax,0x2
c0016400:	eb e3                	jmp    c00163e5 <sysFormatDisk(regs*)+0x42>
c0016402:	31 c0                	xor    eax,eax
c0016404:	eb df                	jmp    c00163e5 <sysFormatDisk(regs*)+0x42>

c0016406 <sysSetDiskVolumeLabel(regs*)>:
c0016406:	56                   	push   esi
c0016407:	53                   	push   ebx
c0016408:	53                   	push   ebx
c0016409:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001640d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016410:	83 f8 19             	cmp    eax,0x19
c0016413:	77 2d                	ja     c0016442 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016415:	8b 0c 85 20 4b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb4e0]
c001641c:	85 c9                	test   ecx,ecx
c001641e:	74 22                	je     c0016442 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016420:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0016423:	85 d2                	test   edx,edx
c0016425:	74 1b                	je     c0016442 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016427:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001642d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001642f:	52                   	push   edx
c0016430:	50                   	push   eax
c0016431:	51                   	push   ecx
c0016432:	53                   	push   ebx
c0016433:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016436:	83 c4 10             	add    esp,0x10
c0016439:	89 c2                	mov    edx,eax
c001643b:	c1 fa 1f             	sar    edx,0x1f
c001643e:	59                   	pop    ecx
c001643f:	5b                   	pop    ebx
c0016440:	5e                   	pop    esi
c0016441:	c3                   	ret    
c0016442:	59                   	pop    ecx
c0016443:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016448:	5b                   	pop    ebx
c0016449:	83 ca ff             	or     edx,0xffffffff
c001644c:	5e                   	pop    esi
c001644d:	c3                   	ret    

c001644e <sysGetDiskVolumeLabel(regs*)>:
c001644e:	57                   	push   edi
c001644f:	56                   	push   esi
c0016450:	53                   	push   ebx
c0016451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016455:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016458:	83 fa 19             	cmp    edx,0x19
c001645b:	77 38                	ja     c0016495 <sysGetDiskVolumeLabel(regs*)+0x47>
c001645d:	8b 0c 95 20 4b 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb4e0]
c0016464:	85 c9                	test   ecx,ecx
c0016466:	74 2d                	je     c0016495 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016468:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001646b:	85 db                	test   ebx,ebx
c001646d:	74 26                	je     c0016495 <sysGetDiskVolumeLabel(regs*)+0x47>
c001646f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016472:	85 c0                	test   eax,eax
c0016474:	74 1f                	je     c0016495 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016476:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001647c:	83 ec 0c             	sub    esp,0xc
c001647f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0016481:	50                   	push   eax
c0016482:	53                   	push   ebx
c0016483:	52                   	push   edx
c0016484:	51                   	push   ecx
c0016485:	56                   	push   esi
c0016486:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0016489:	83 c4 20             	add    esp,0x20
c001648c:	89 c2                	mov    edx,eax
c001648e:	c1 fa 1f             	sar    edx,0x1f
c0016491:	5b                   	pop    ebx
c0016492:	5e                   	pop    esi
c0016493:	5f                   	pop    edi
c0016494:	c3                   	ret    
c0016495:	5b                   	pop    ebx
c0016496:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001649b:	5e                   	pop    esi
c001649c:	83 ca ff             	or     edx,0xffffffff
c001649f:	5f                   	pop    edi
c00164a0:	c3                   	ret    

c00164a1 <sysShutdown(regs*)>:
c00164a1:	57                   	push   edi
c00164a2:	56                   	push   esi
c00164a3:	56                   	push   esi
c00164a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164ab:	85 c0                	test   eax,eax
c00164ad:	74 18                	je     c00164c7 <sysShutdown(regs*)+0x26>
c00164af:	83 f8 01             	cmp    eax,0x1
c00164b2:	74 51                	je     c0016505 <sysShutdown(regs*)+0x64>
c00164b4:	83 ce ff             	or     esi,0xffffffff
c00164b7:	83 cf ff             	or     edi,0xffffffff
c00164ba:	83 f8 02             	cmp    eax,0x2
c00164bd:	74 2a                	je     c00164e9 <sysShutdown(regs*)+0x48>
c00164bf:	59                   	pop    ecx
c00164c0:	89 f0                	mov    eax,esi
c00164c2:	5e                   	pop    esi
c00164c3:	89 fa                	mov    edx,edi
c00164c5:	5f                   	pop    edi
c00164c6:	c3                   	ret    
c00164c7:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c00164cc:	83 ce ff             	or     esi,0xffffffff
c00164cf:	83 cf ff             	or     edi,0xffffffff
c00164d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00164d4:	6a 00                	push   0x0
c00164d6:	6a 00                	push   0x0
c00164d8:	6a 00                	push   0x0
c00164da:	50                   	push   eax
c00164db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00164de:	83 c4 10             	add    esp,0x10
c00164e1:	89 f0                	mov    eax,esi
c00164e3:	89 fa                	mov    edx,edi
c00164e5:	59                   	pop    ecx
c00164e6:	5e                   	pop    esi
c00164e7:	5f                   	pop    edi
c00164e8:	c3                   	ret    
c00164e9:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c00164ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00164f0:	6a 00                	push   0x0
c00164f2:	6a 00                	push   0x0
c00164f4:	6a 01                	push   0x1
c00164f6:	50                   	push   eax
c00164f7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00164fa:	83 c4 10             	add    esp,0x10
c00164fd:	89 f0                	mov    eax,esi
c00164ff:	89 fa                	mov    edx,edi
c0016501:	59                   	pop    ecx
c0016502:	5e                   	pop    esi
c0016503:	5f                   	pop    edi
c0016504:	c3                   	ret    
c0016505:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c001650a:	85 c0                	test   eax,eax
c001650c:	74 02                	je     c0016510 <sysShutdown(regs*)+0x6f>
c001650e:	ff d0                	call   eax
c0016510:	31 f6                	xor    esi,esi
c0016512:	59                   	pop    ecx
c0016513:	31 ff                	xor    edi,edi
c0016515:	89 f0                	mov    eax,esi
c0016517:	5e                   	pop    esi
c0016518:	89 fa                	mov    edx,edi
c001651a:	5f                   	pop    edi
c001651b:	c3                   	ret    

c001651c <sysCallGetCwd(regs*)>:
c001651c:	83 ec 10             	sub    esp,0x10
c001651f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016523:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016526:	52                   	push   edx
c0016527:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001652a:	51                   	push   ecx
c001652b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016530:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016533:	50                   	push   eax
c0016534:	e8 b0 94 ff ff       	call   c000f9e9 <getcwd(Process*, char*, int)>
c0016539:	89 c2                	mov    edx,eax
c001653b:	83 c4 1c             	add    esp,0x1c
c001653e:	c1 fa 1f             	sar    edx,0x1f
c0016541:	c3                   	ret    

c0016542 <sysCallSetCwd(regs*)>:
c0016542:	83 ec 14             	sub    esp,0x14
c0016545:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016549:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001654c:	50                   	push   eax
c001654d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016552:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0016555:	52                   	push   edx
c0016556:	e8 b8 94 ff ff       	call   c000fa13 <setcwd(Process*, char*)>
c001655b:	89 c2                	mov    edx,eax
c001655d:	83 c4 1c             	add    esp,0x1c
c0016560:	c1 fa 1f             	sar    edx,0x1f
c0016563:	c3                   	ret    

c0016564 <sysCallRealpath(regs*)>:
c0016564:	53                   	push   ebx
c0016565:	83 ec 08             	sub    esp,0x8
c0016568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001656c:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001656f:	85 c9                	test   ecx,ecx
c0016571:	74 35                	je     c00165a8 <sysCallRealpath(regs*)+0x44>
c0016573:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016576:	31 d2                	xor    edx,edx
c0016578:	b8 01 00 00 00       	mov    eax,0x1
c001657d:	85 db                	test   ebx,ebx
c001657f:	75 05                	jne    c0016586 <sysCallRealpath(regs*)+0x22>
c0016581:	83 c4 08             	add    esp,0x8
c0016584:	5b                   	pop    ebx
c0016585:	c3                   	ret    
c0016586:	50                   	push   eax
c0016587:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001658c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001658f:	05 0c 01 00 00       	add    eax,0x10c
c0016594:	50                   	push   eax
c0016595:	51                   	push   ecx
c0016596:	53                   	push   ebx
c0016597:	e8 32 8f ff ff       	call   c000f4ce <standardiseFiles(char*, char const*, char const*)>
c001659c:	83 c4 10             	add    esp,0x10
c001659f:	31 c0                	xor    eax,eax
c00165a1:	31 d2                	xor    edx,edx
c00165a3:	83 c4 08             	add    esp,0x8
c00165a6:	5b                   	pop    ebx
c00165a7:	c3                   	ret    
c00165a8:	b8 01 00 00 00       	mov    eax,0x1
c00165ad:	31 d2                	xor    edx,edx
c00165af:	eb f2                	jmp    c00165a3 <sysCallRealpath(regs*)+0x3f>

c00165b1 <sysCallReadDir(regs*)>:
c00165b1:	53                   	push   ebx
c00165b2:	83 ec 18             	sub    esp,0x18
c00165b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00165b9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00165bc:	83 f8 02             	cmp    eax,0x2
c00165bf:	76 56                	jbe    c0016617 <sysCallReadDir(regs*)+0x66>
c00165c1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00165c4:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c00165ca:	77 57                	ja     c0016623 <sysCallReadDir(regs*)+0x72>
c00165cc:	83 ec 0c             	sub    esp,0xc
c00165cf:	50                   	push   eax
c00165d0:	e8 f6 79 ff ff       	call   c000dfcb <getFromFileDescriptor(int)>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	85 c0                	test   eax,eax
c00165da:	74 57                	je     c0016633 <sysCallReadDir(regs*)+0x82>
c00165dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00165e4:	83 ec 0c             	sub    esp,0xc
c00165e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00165e9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00165ed:	51                   	push   ecx
c00165ee:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00165f1:	51                   	push   ecx
c00165f2:	6a 00                	push   0x0
c00165f4:	68 10 01 00 00       	push   0x110
c00165f9:	50                   	push   eax
c00165fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00165fd:	83 c4 20             	add    esp,0x20
c0016600:	89 c1                	mov    ecx,eax
c0016602:	85 c0                	test   eax,eax
c0016604:	74 38                	je     c001663e <sysCallReadDir(regs*)+0x8d>
c0016606:	31 d2                	xor    edx,edx
c0016608:	b8 02 00 00 00       	mov    eax,0x2
c001660d:	83 f9 07             	cmp    ecx,0x7
c0016610:	74 05                	je     c0016617 <sysCallReadDir(regs*)+0x66>
c0016612:	83 c4 18             	add    esp,0x18
c0016615:	5b                   	pop    ebx
c0016616:	c3                   	ret    
c0016617:	b8 01 00 00 00       	mov    eax,0x1
c001661c:	31 d2                	xor    edx,edx
c001661e:	83 c4 18             	add    esp,0x18
c0016621:	5b                   	pop    ebx
c0016622:	c3                   	ret    
c0016623:	53                   	push   ebx
c0016624:	53                   	push   ebx
c0016625:	52                   	push   edx
c0016626:	68 68 28 02 c0       	push   0xc0022868
c001662b:	e8 11 8b ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0016630:	83 c4 10             	add    esp,0x10
c0016633:	83 c4 18             	add    esp,0x18
c0016636:	83 c8 ff             	or     eax,0xffffffff
c0016639:	83 ca ff             	or     edx,0xffffffff
c001663c:	5b                   	pop    ebx
c001663d:	c3                   	ret    
c001663e:	31 c0                	xor    eax,eax
c0016640:	31 d2                	xor    edx,edx
c0016642:	eb da                	jmp    c001661e <sysCallReadDir(regs*)+0x6d>

c0016644 <sysCallIsATTY(regs*)>:
c0016644:	83 ec 0c             	sub    esp,0xc
c0016647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001664b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001664e:	83 f8 02             	cmp    eax,0x2
c0016651:	76 07                	jbe    c001665a <sysCallIsATTY(regs*)+0x16>
c0016653:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016658:	75 28                	jne    c0016682 <sysCallIsATTY(regs*)+0x3e>
c001665a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001665f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016662:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016668:	85 c0                	test   eax,eax
c001666a:	74 26                	je     c0016692 <sysCallIsATTY(regs*)+0x4e>
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016671:	50                   	push   eax
c0016672:	ff 12                	call   DWORD PTR [edx]
c0016674:	83 c4 10             	add    esp,0x10
c0016677:	25 ff 00 00 00       	and    eax,0xff
c001667c:	31 d2                	xor    edx,edx
c001667e:	83 c4 0c             	add    esp,0xc
c0016681:	c3                   	ret    
c0016682:	83 ec 0c             	sub    esp,0xc
c0016685:	50                   	push   eax
c0016686:	e8 40 79 ff ff       	call   c000dfcb <getFromFileDescriptor(int)>
c001668b:	83 c4 10             	add    esp,0x10
c001668e:	85 c0                	test   eax,eax
c0016690:	75 da                	jne    c001666c <sysCallIsATTY(regs*)+0x28>
c0016692:	83 c8 ff             	or     eax,0xffffffff
c0016695:	83 ca ff             	or     edx,0xffffffff
c0016698:	83 c4 0c             	add    esp,0xc
c001669b:	c3                   	ret    

c001669c <sysCallSeek(regs*)>:
c001669c:	53                   	push   ebx
c001669d:	83 ec 08             	sub    esp,0x8
c00166a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00166a7:	83 f8 02             	cmp    eax,0x2
c00166aa:	76 4b                	jbe    c00166f7 <sysCallSeek(regs*)+0x5b>
c00166ac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00166b1:	77 34                	ja     c00166e7 <sysCallSeek(regs*)+0x4b>
c00166b3:	83 ec 0c             	sub    esp,0xc
c00166b6:	50                   	push   eax
c00166b7:	e8 0f 79 ff ff       	call   c000dfcb <getFromFileDescriptor(int)>
c00166bc:	83 c4 0c             	add    esp,0xc
c00166bf:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00166c2:	31 db                	xor    ebx,ebx
c00166c4:	53                   	push   ebx
c00166c5:	51                   	push   ecx
c00166c6:	50                   	push   eax
c00166c7:	e8 ce 90 ff ff       	call   c000f79a <File::seek(unsigned long long)>
c00166cc:	83 c4 10             	add    esp,0x10
c00166cf:	85 c0                	test   eax,eax
c00166d1:	0f 95 c0             	setne  al
c00166d4:	25 ff 00 00 00       	and    eax,0xff
c00166d9:	31 d2                	xor    edx,edx
c00166db:	f7 d8                	neg    eax
c00166dd:	83 d2 00             	adc    edx,0x0
c00166e0:	83 c4 08             	add    esp,0x8
c00166e3:	f7 da                	neg    edx
c00166e5:	5b                   	pop    ebx
c00166e6:	c3                   	ret    
c00166e7:	52                   	push   edx
c00166e8:	52                   	push   edx
c00166e9:	50                   	push   eax
c00166ea:	68 24 29 02 c0       	push   0xc0022924
c00166ef:	e8 4d 8a ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00166f4:	83 c4 10             	add    esp,0x10
c00166f7:	83 c4 08             	add    esp,0x8
c00166fa:	83 c8 ff             	or     eax,0xffffffff
c00166fd:	83 ca ff             	or     edx,0xffffffff
c0016700:	5b                   	pop    ebx
c0016701:	c3                   	ret    

c0016702 <sysCallTell(regs*)>:
c0016702:	53                   	push   ebx
c0016703:	83 ec 08             	sub    esp,0x8
c0016706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001670a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001670d:	83 f8 02             	cmp    eax,0x2
c0016710:	76 60                	jbe    c0016772 <sysCallTell(regs*)+0x70>
c0016712:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016717:	77 30                	ja     c0016749 <sysCallTell(regs*)+0x47>
c0016719:	83 ec 0c             	sub    esp,0xc
c001671c:	50                   	push   eax
c001671d:	e8 a9 78 ff ff       	call   c000dfcb <getFromFileDescriptor(int)>
c0016722:	5a                   	pop    edx
c0016723:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016726:	59                   	pop    ecx
c0016727:	53                   	push   ebx
c0016728:	50                   	push   eax
c0016729:	e8 c2 90 ff ff       	call   c000f7f0 <File::tell(unsigned long long*)>
c001672e:	83 c4 10             	add    esp,0x10
c0016731:	85 c0                	test   eax,eax
c0016733:	0f 95 c0             	setne  al
c0016736:	25 ff 00 00 00       	and    eax,0xff
c001673b:	31 d2                	xor    edx,edx
c001673d:	f7 d8                	neg    eax
c001673f:	83 d2 00             	adc    edx,0x0
c0016742:	83 c4 08             	add    esp,0x8
c0016745:	f7 da                	neg    edx
c0016747:	5b                   	pop    ebx
c0016748:	c3                   	ret    
c0016749:	52                   	push   edx
c001674a:	52                   	push   edx
c001674b:	50                   	push   eax
c001674c:	68 3e 29 02 c0       	push   0xc002293e
c0016751:	e8 eb 89 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0016756:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016759:	83 c4 10             	add    esp,0x10
c001675c:	31 d2                	xor    edx,edx
c001675e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016764:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001676b:	83 c4 08             	add    esp,0x8
c001676e:	31 c0                	xor    eax,eax
c0016770:	5b                   	pop    ebx
c0016771:	c3                   	ret    
c0016772:	83 c4 08             	add    esp,0x8
c0016775:	83 c8 ff             	or     eax,0xffffffff
c0016778:	83 ca ff             	or     edx,0xffffffff
c001677b:	5b                   	pop    ebx
c001677c:	c3                   	ret    

c001677d <sysCallSizeFromFilename(regs*)>:
c001677d:	57                   	push   edi
c001677e:	56                   	push   esi
c001677f:	53                   	push   ebx
c0016780:	83 ec 10             	sub    esp,0x10
c0016783:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016787:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001678a:	83 fb 02             	cmp    ebx,0x2
c001678d:	0f 86 8b 00 00 00    	jbe    c001681e <sysCallSizeFromFilename(regs*)+0xa1>
c0016793:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016799:	77 58                	ja     c00167f3 <sysCallSizeFromFilename(regs*)+0x76>
c001679b:	83 ec 0c             	sub    esp,0xc
c001679e:	68 14 01 00 00       	push   0x114
c00167a3:	e8 64 88 ff ff       	call   c000f00c <operator new(unsigned long)>
c00167a8:	89 c7                	mov    edi,eax
c00167aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167af:	83 c4 0c             	add    esp,0xc
c00167b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167b5:	50                   	push   eax
c00167b6:	53                   	push   ebx
c00167b7:	57                   	push   edi
c00167b8:	e8 bb 8e ff ff       	call   c000f678 <File::File(char const*, Process*)>
c00167bd:	83 c4 0c             	add    esp,0xc
c00167c0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00167c4:	50                   	push   eax
c00167c5:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00167c8:	52                   	push   edx
c00167c9:	57                   	push   edi
c00167ca:	e8 b9 91 ff ff       	call   c000f988 <File::stat(unsigned long long*, bool*)>
c00167cf:	89 c3                	mov    ebx,eax
c00167d1:	8b 07                	mov    eax,DWORD PTR [edi]
c00167d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00167d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167d9:	31 c0                	xor    eax,eax
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	85 db                	test   ebx,ebx
c00167e0:	0f 95 c0             	setne  al
c00167e3:	31 d2                	xor    edx,edx
c00167e5:	f7 d8                	neg    eax
c00167e7:	83 d2 00             	adc    edx,0x0
c00167ea:	83 c4 10             	add    esp,0x10
c00167ed:	f7 da                	neg    edx
c00167ef:	5b                   	pop    ebx
c00167f0:	5e                   	pop    esi
c00167f1:	5f                   	pop    edi
c00167f2:	c3                   	ret    
c00167f3:	51                   	push   ecx
c00167f4:	51                   	push   ecx
c00167f5:	53                   	push   ebx
c00167f6:	68 58 29 02 c0       	push   0xc0022958
c00167fb:	e8 41 89 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0016800:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	31 d2                	xor    edx,edx
c0016808:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001680e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016815:	83 c4 10             	add    esp,0x10
c0016818:	31 c0                	xor    eax,eax
c001681a:	5b                   	pop    ebx
c001681b:	5e                   	pop    esi
c001681c:	5f                   	pop    edi
c001681d:	c3                   	ret    
c001681e:	83 c4 10             	add    esp,0x10
c0016821:	83 c8 ff             	or     eax,0xffffffff
c0016824:	83 ca ff             	or     edx,0xffffffff
c0016827:	5b                   	pop    ebx
c0016828:	5e                   	pop    esi
c0016829:	5f                   	pop    edi
c001682a:	c3                   	ret    

c001682b <sysCallSize(regs*)>:
c001682b:	53                   	push   ebx
c001682c:	83 ec 18             	sub    esp,0x18
c001682f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016833:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016836:	83 f8 02             	cmp    eax,0x2
c0016839:	76 66                	jbe    c00168a1 <sysCallSize(regs*)+0x76>
c001683b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016840:	77 36                	ja     c0016878 <sysCallSize(regs*)+0x4d>
c0016842:	83 ec 0c             	sub    esp,0xc
c0016845:	50                   	push   eax
c0016846:	e8 80 77 ff ff       	call   c000dfcb <getFromFileDescriptor(int)>
c001684b:	83 c4 0c             	add    esp,0xc
c001684e:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016852:	52                   	push   edx
c0016853:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016856:	52                   	push   edx
c0016857:	50                   	push   eax
c0016858:	e8 2b 91 ff ff       	call   c000f988 <File::stat(unsigned long long*, bool*)>
c001685d:	83 c4 10             	add    esp,0x10
c0016860:	85 c0                	test   eax,eax
c0016862:	0f 95 c0             	setne  al
c0016865:	25 ff 00 00 00       	and    eax,0xff
c001686a:	31 d2                	xor    edx,edx
c001686c:	f7 d8                	neg    eax
c001686e:	83 d2 00             	adc    edx,0x0
c0016871:	83 c4 18             	add    esp,0x18
c0016874:	f7 da                	neg    edx
c0016876:	5b                   	pop    ebx
c0016877:	c3                   	ret    
c0016878:	51                   	push   ecx
c0016879:	51                   	push   ecx
c001687a:	50                   	push   eax
c001687b:	68 58 29 02 c0       	push   0xc0022958
c0016880:	e8 bc 88 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0016885:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016888:	83 c4 10             	add    esp,0x10
c001688b:	31 d2                	xor    edx,edx
c001688d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016893:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001689a:	83 c4 18             	add    esp,0x18
c001689d:	31 c0                	xor    eax,eax
c001689f:	5b                   	pop    ebx
c00168a0:	c3                   	ret    
c00168a1:	83 c4 18             	add    esp,0x18
c00168a4:	83 c8 ff             	or     eax,0xffffffff
c00168a7:	83 ca ff             	or     edx,0xffffffff
c00168aa:	5b                   	pop    ebx
c00168ab:	c3                   	ret    

c00168ac <sysCallClose(regs*)>:
c00168ac:	53                   	push   ebx
c00168ad:	83 ec 08             	sub    esp,0x8
c00168b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00168b7:	83 f8 02             	cmp    eax,0x2
c00168ba:	76 4f                	jbe    c001690b <sysCallClose(regs*)+0x5f>
c00168bc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00168c1:	74 53                	je     c0016916 <sysCallClose(regs*)+0x6a>
c00168c3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00168c8:	74 5b                	je     c0016925 <sysCallClose(regs*)+0x79>
c00168ca:	77 2f                	ja     c00168fb <sysCallClose(regs*)+0x4f>
c00168cc:	83 ec 0c             	sub    esp,0xc
c00168cf:	50                   	push   eax
c00168d0:	e8 f6 76 ff ff       	call   c000dfcb <getFromFileDescriptor(int)>
c00168d5:	89 c3                	mov    ebx,eax
c00168d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00168da:	e8 5b 8e ff ff       	call   c000f73a <File::close()>
c00168df:	83 c4 10             	add    esp,0x10
c00168e2:	85 db                	test   ebx,ebx
c00168e4:	74 0c                	je     c00168f2 <sysCallClose(regs*)+0x46>
c00168e6:	83 ec 0c             	sub    esp,0xc
c00168e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168eb:	53                   	push   ebx
c00168ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168ef:	83 c4 10             	add    esp,0x10
c00168f2:	83 c4 08             	add    esp,0x8
c00168f5:	31 c0                	xor    eax,eax
c00168f7:	31 d2                	xor    edx,edx
c00168f9:	5b                   	pop    ebx
c00168fa:	c3                   	ret    
c00168fb:	52                   	push   edx
c00168fc:	52                   	push   edx
c00168fd:	50                   	push   eax
c00168fe:	68 8c 28 02 c0       	push   0xc002288c
c0016903:	e8 39 88 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0016908:	83 c4 10             	add    esp,0x10
c001690b:	83 c4 08             	add    esp,0x8
c001690e:	83 c8 ff             	or     eax,0xffffffff
c0016911:	83 ca ff             	or     edx,0xffffffff
c0016914:	5b                   	pop    ebx
c0016915:	c3                   	ret    
c0016916:	83 ec 0c             	sub    esp,0xc
c0016919:	68 73 29 02 c0       	push   0xc0022973
c001691e:	e8 1e 88 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0016923:	eb ca                	jmp    c00168ef <sysCallClose(regs*)+0x43>
c0016925:	83 ec 0c             	sub    esp,0xc
c0016928:	68 81 29 02 c0       	push   0xc0022981
c001692d:	eb ef                	jmp    c001691e <sysCallClose(regs*)+0x72>

c001692f <sysCallOpenDir(regs*)>:
c001692f:	56                   	push   esi
c0016930:	53                   	push   ebx
c0016931:	50                   	push   eax
c0016932:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016936:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016939:	85 c0                	test   eax,eax
c001693b:	74 53                	je     c0016990 <sysCallOpenDir(regs*)+0x61>
c001693d:	83 ec 0c             	sub    esp,0xc
c0016940:	68 14 01 00 00       	push   0x114
c0016945:	e8 c2 86 ff ff       	call   c000f00c <operator new(unsigned long)>
c001694a:	89 c6                	mov    esi,eax
c001694c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016951:	83 c4 0c             	add    esp,0xc
c0016954:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016957:	50                   	push   eax
c0016958:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001695b:	50                   	push   eax
c001695c:	56                   	push   esi
c001695d:	e8 d8 91 ff ff       	call   c000fb3a <Directory::Directory(char const*, Process*)>
c0016962:	89 34 24             	mov    DWORD PTR [esp],esi
c0016965:	e8 34 92 ff ff       	call   c000fb9e <Directory::open()>
c001696a:	83 c4 10             	add    esp,0x10
c001696d:	85 c0                	test   eax,eax
c001696f:	75 1f                	jne    c0016990 <sysCallOpenDir(regs*)+0x61>
c0016971:	83 ec 0c             	sub    esp,0xc
c0016974:	56                   	push   esi
c0016975:	e8 9c 73 ff ff       	call   c000dd16 <UnixFile::getFileDescriptor()>
c001697a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001697d:	83 c4 10             	add    esp,0x10
c0016980:	89 02                	mov    DWORD PTR [edx],eax
c0016982:	c1 f8 1f             	sar    eax,0x1f
c0016985:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016988:	31 c0                	xor    eax,eax
c001698a:	59                   	pop    ecx
c001698b:	31 d2                	xor    edx,edx
c001698d:	5b                   	pop    ebx
c001698e:	5e                   	pop    esi
c001698f:	c3                   	ret    
c0016990:	59                   	pop    ecx
c0016991:	83 c8 ff             	or     eax,0xffffffff
c0016994:	5b                   	pop    ebx
c0016995:	83 ca ff             	or     edx,0xffffffff
c0016998:	5e                   	pop    esi
c0016999:	c3                   	ret    

c001699a <sysCallMakeDir(regs*)>:
c001699a:	56                   	push   esi
c001699b:	53                   	push   ebx
c001699c:	83 ec 10             	sub    esp,0x10
c001699f:	68 14 01 00 00       	push   0x114
c00169a4:	e8 63 86 ff ff       	call   c000f00c <operator new(unsigned long)>
c00169a9:	89 c3                	mov    ebx,eax
c00169ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169b0:	83 c4 0c             	add    esp,0xc
c00169b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00169b6:	50                   	push   eax
c00169b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00169bb:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00169be:	52                   	push   edx
c00169bf:	53                   	push   ebx
c00169c0:	e8 75 91 ff ff       	call   c000fb3a <Directory::Directory(char const*, Process*)>
c00169c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169c8:	e8 b1 93 ff ff       	call   c000fd7e <Directory::create()>
c00169cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169d0:	89 c6                	mov    esi,eax
c00169d2:	e8 23 92 ff ff       	call   c000fbfa <Directory::close()>
c00169d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169df:	31 c0                	xor    eax,eax
c00169e1:	85 f6                	test   esi,esi
c00169e3:	0f 95 c0             	setne  al
c00169e6:	31 d2                	xor    edx,edx
c00169e8:	f7 d8                	neg    eax
c00169ea:	83 d2 00             	adc    edx,0x0
c00169ed:	83 c4 14             	add    esp,0x14
c00169f0:	f7 da                	neg    edx
c00169f2:	5b                   	pop    ebx
c00169f3:	5e                   	pop    esi
c00169f4:	c3                   	ret    

c00169f5 <sysCallCloseDir(regs*)>:
c00169f5:	53                   	push   ebx
c00169f6:	83 ec 08             	sub    esp,0x8
c00169f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a00:	83 f8 02             	cmp    eax,0x2
c0016a03:	76 46                	jbe    c0016a4b <sysCallCloseDir(regs*)+0x56>
c0016a05:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a0a:	77 2f                	ja     c0016a3b <sysCallCloseDir(regs*)+0x46>
c0016a0c:	83 ec 0c             	sub    esp,0xc
c0016a0f:	50                   	push   eax
c0016a10:	e8 b6 75 ff ff       	call   c000dfcb <getFromFileDescriptor(int)>
c0016a15:	89 c3                	mov    ebx,eax
c0016a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a1a:	e8 db 91 ff ff       	call   c000fbfa <Directory::close()>
c0016a1f:	83 c4 10             	add    esp,0x10
c0016a22:	85 db                	test   ebx,ebx
c0016a24:	74 0c                	je     c0016a32 <sysCallCloseDir(regs*)+0x3d>
c0016a26:	83 ec 0c             	sub    esp,0xc
c0016a29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a2b:	53                   	push   ebx
c0016a2c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a2f:	83 c4 10             	add    esp,0x10
c0016a32:	83 c4 08             	add    esp,0x8
c0016a35:	31 c0                	xor    eax,eax
c0016a37:	31 d2                	xor    edx,edx
c0016a39:	5b                   	pop    ebx
c0016a3a:	c3                   	ret    
c0016a3b:	52                   	push   edx
c0016a3c:	52                   	push   edx
c0016a3d:	50                   	push   eax
c0016a3e:	68 b4 28 02 c0       	push   0xc00228b4
c0016a43:	e8 f9 86 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0016a48:	83 c4 10             	add    esp,0x10
c0016a4b:	83 c4 08             	add    esp,0x8
c0016a4e:	83 c8 ff             	or     eax,0xffffffff
c0016a51:	83 ca ff             	or     edx,0xffffffff
c0016a54:	5b                   	pop    ebx
c0016a55:	c3                   	ret    

c0016a56 <sysCallWait(regs*)>:
c0016a56:	83 ec 10             	sub    esp,0x10
c0016a59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016a5d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016a60:	52                   	push   edx
c0016a61:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016a64:	51                   	push   ecx
c0016a65:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a68:	50                   	push   eax
c0016a69:	e8 4e 23 00 00       	call   c0018dbc <waitTask(int, int*, int)>
c0016a6e:	89 c2                	mov    edx,eax
c0016a70:	83 c4 1c             	add    esp,0x1c
c0016a73:	c1 fa 1f             	sar    edx,0x1f
c0016a76:	c3                   	ret    

c0016a77 <sysCallRmdir(regs*)>:
c0016a77:	56                   	push   esi
c0016a78:	53                   	push   ebx
c0016a79:	83 ec 10             	sub    esp,0x10
c0016a7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a80:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016a83:	68 14 01 00 00       	push   0x114
c0016a88:	e8 7f 85 ff ff       	call   c000f00c <operator new(unsigned long)>
c0016a8d:	83 c4 0c             	add    esp,0xc
c0016a90:	89 c3                	mov    ebx,eax
c0016a92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a97:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a9a:	50                   	push   eax
c0016a9b:	56                   	push   esi
c0016a9c:	53                   	push   ebx
c0016a9d:	e8 d6 8b ff ff       	call   c000f678 <File::File(char const*, Process*)>
c0016aa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016aa5:	e8 aa 8d ff ff       	call   c000f854 <File::unlink()>
c0016aaa:	89 c6                	mov    esi,eax
c0016aac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ab1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ab4:	31 c0                	xor    eax,eax
c0016ab6:	85 f6                	test   esi,esi
c0016ab8:	0f 95 c0             	setne  al
c0016abb:	31 d2                	xor    edx,edx
c0016abd:	f7 d8                	neg    eax
c0016abf:	83 d2 00             	adc    edx,0x0
c0016ac2:	83 c4 14             	add    esp,0x14
c0016ac5:	f7 da                	neg    edx
c0016ac7:	5b                   	pop    ebx
c0016ac8:	5e                   	pop    esi
c0016ac9:	c3                   	ret    

c0016aca <sysCallUnlink(regs*)>:
c0016aca:	56                   	push   esi
c0016acb:	53                   	push   ebx
c0016acc:	83 ec 10             	sub    esp,0x10
c0016acf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ad3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016ad6:	68 14 01 00 00       	push   0x114
c0016adb:	e8 2c 85 ff ff       	call   c000f00c <operator new(unsigned long)>
c0016ae0:	83 c4 0c             	add    esp,0xc
c0016ae3:	89 c3                	mov    ebx,eax
c0016ae5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016aed:	50                   	push   eax
c0016aee:	56                   	push   esi
c0016aef:	53                   	push   ebx
c0016af0:	e8 83 8b ff ff       	call   c000f678 <File::File(char const*, Process*)>
c0016af5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016af8:	e8 57 8d ff ff       	call   c000f854 <File::unlink()>
c0016afd:	89 c6                	mov    esi,eax
c0016aff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b07:	31 c0                	xor    eax,eax
c0016b09:	85 f6                	test   esi,esi
c0016b0b:	0f 95 c0             	setne  al
c0016b0e:	31 d2                	xor    edx,edx
c0016b10:	f7 d8                	neg    eax
c0016b12:	83 d2 00             	adc    edx,0x0
c0016b15:	83 c4 14             	add    esp,0x14
c0016b18:	f7 da                	neg    edx
c0016b1a:	5b                   	pop    ebx
c0016b1b:	5e                   	pop    esi
c0016b1c:	c3                   	ret    

c0016b1d <sysCallGetArgv(regs*)>:
c0016b1d:	83 ec 0c             	sub    esp,0xc
c0016b20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b24:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016b27:	85 c0                	test   eax,eax
c0016b29:	78 2b                	js     c0016b56 <sysCallGetArgv(regs*)+0x39>
c0016b2b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016b31:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016b34:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016b3a:	7d 1a                	jge    c0016b56 <sysCallGetArgv(regs*)+0x39>
c0016b3c:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016b43:	85 c0                	test   eax,eax
c0016b45:	74 17                	je     c0016b5e <sysCallGetArgv(regs*)+0x41>
c0016b47:	51                   	push   ecx
c0016b48:	51                   	push   ecx
c0016b49:	50                   	push   eax
c0016b4a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016b4d:	50                   	push   eax
c0016b4e:	e8 06 9c fe ff       	call   c0000759 <strcpy>
c0016b53:	83 c4 10             	add    esp,0x10
c0016b56:	31 c0                	xor    eax,eax
c0016b58:	31 d2                	xor    edx,edx
c0016b5a:	83 c4 0c             	add    esp,0xc
c0016b5d:	c3                   	ret    
c0016b5e:	b8 01 00 00 00       	mov    eax,0x1
c0016b63:	31 d2                	xor    edx,edx
c0016b65:	83 c4 0c             	add    esp,0xc
c0016b68:	c3                   	ret    

c0016b69 <sysCallTTYName(regs*)>:
c0016b69:	56                   	push   esi
c0016b6a:	53                   	push   ebx
c0016b6b:	50                   	push   eax
c0016b6c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b70:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016b73:	85 c0                	test   eax,eax
c0016b75:	74 4d                	je     c0016bc4 <sysCallTTYName(regs*)+0x5b>
c0016b77:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016b7a:	83 f8 02             	cmp    eax,0x2
c0016b7d:	76 07                	jbe    c0016b86 <sysCallTTYName(regs*)+0x1d>
c0016b7f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016b84:	75 54                	jne    c0016bda <sysCallTTYName(regs*)+0x71>
c0016b86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b8b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b8e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016b94:	85 db                	test   ebx,ebx
c0016b96:	74 2c                	je     c0016bc4 <sysCallTTYName(regs*)+0x5b>
c0016b98:	83 ec 0c             	sub    esp,0xc
c0016b9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b9d:	53                   	push   ebx
c0016b9e:	ff 10                	call   DWORD PTR [eax]
c0016ba0:	83 c4 10             	add    esp,0x10
c0016ba3:	84 c0                	test   al,al
c0016ba5:	74 28                	je     c0016bcf <sysCallTTYName(regs*)+0x66>
c0016ba7:	50                   	push   eax
c0016ba8:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016bae:	50                   	push   eax
c0016baf:	53                   	push   ebx
c0016bb0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016bb3:	50                   	push   eax
c0016bb4:	e8 a0 9b fe ff       	call   c0000759 <strcpy>
c0016bb9:	83 c4 10             	add    esp,0x10
c0016bbc:	31 c0                	xor    eax,eax
c0016bbe:	31 d2                	xor    edx,edx
c0016bc0:	59                   	pop    ecx
c0016bc1:	5b                   	pop    ebx
c0016bc2:	5e                   	pop    esi
c0016bc3:	c3                   	ret    
c0016bc4:	59                   	pop    ecx
c0016bc5:	b8 01 00 00 00       	mov    eax,0x1
c0016bca:	5b                   	pop    ebx
c0016bcb:	31 d2                	xor    edx,edx
c0016bcd:	5e                   	pop    esi
c0016bce:	c3                   	ret    
c0016bcf:	59                   	pop    ecx
c0016bd0:	b8 02 00 00 00       	mov    eax,0x2
c0016bd5:	5b                   	pop    ebx
c0016bd6:	31 d2                	xor    edx,edx
c0016bd8:	5e                   	pop    esi
c0016bd9:	c3                   	ret    
c0016bda:	83 ec 0c             	sub    esp,0xc
c0016bdd:	50                   	push   eax
c0016bde:	e8 e8 73 ff ff       	call   c000dfcb <getFromFileDescriptor(int)>
c0016be3:	83 c4 10             	add    esp,0x10
c0016be6:	89 c3                	mov    ebx,eax
c0016be8:	eb aa                	jmp    c0016b94 <sysCallTTYName(regs*)+0x2b>

c0016bea <sysCallGetEnv(regs*)>:
c0016bea:	83 ec 0c             	sub    esp,0xc
c0016bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016bf4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016bf7:	85 d2                	test   edx,edx
c0016bf9:	75 22                	jne    c0016c1d <sysCallGetEnv(regs*)+0x33>
c0016bfb:	31 c0                	xor    eax,eax
c0016bfd:	31 d2                	xor    edx,edx
c0016bff:	85 c9                	test   ecx,ecx
c0016c01:	74 04                	je     c0016c07 <sysCallGetEnv(regs*)+0x1d>
c0016c03:	83 c4 0c             	add    esp,0xc
c0016c06:	c3                   	ret    
c0016c07:	83 ec 0c             	sub    esp,0xc
c0016c0a:	68 d8 28 02 c0       	push   0xc00228d8
c0016c0f:	e8 c3 9a fe ff       	call   c00006d7 <strlen>
c0016c14:	83 c4 10             	add    esp,0x10
c0016c17:	31 d2                	xor    edx,edx
c0016c19:	83 c4 0c             	add    esp,0xc
c0016c1c:	c3                   	ret    
c0016c1d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016c20:	85 c9                	test   ecx,ecx
c0016c22:	74 0b                	je     c0016c2f <sysCallGetEnv(regs*)+0x45>
c0016c24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016c27:	31 c0                	xor    eax,eax
c0016c29:	31 d2                	xor    edx,edx
c0016c2b:	83 c4 0c             	add    esp,0xc
c0016c2e:	c3                   	ret    
c0016c2f:	52                   	push   edx
c0016c30:	52                   	push   edx
c0016c31:	68 d8 28 02 c0       	push   0xc00228d8
c0016c36:	50                   	push   eax
c0016c37:	e8 1d 9b fe ff       	call   c0000759 <strcpy>
c0016c3c:	83 c4 10             	add    esp,0x10
c0016c3f:	eb e6                	jmp    c0016c27 <sysCallGetEnv(regs*)+0x3d>

c0016c41 <sysCallUSleep(regs*)>:
c0016c41:	57                   	push   edi
c0016c42:	56                   	push   esi
c0016c43:	53                   	push   ebx
c0016c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c48:	52                   	push   edx
c0016c49:	52                   	push   edx
c0016c4a:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016c4d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016c50:	89 c8                	mov    eax,ecx
c0016c52:	89 da                	mov    edx,ebx
c0016c54:	0f a4 c2 05          	shld   edx,eax,0x5
c0016c58:	c1 e0 05             	shl    eax,0x5
c0016c5b:	29 c8                	sub    eax,ecx
c0016c5d:	19 da                	sbb    edx,ebx
c0016c5f:	0f a4 c2 02          	shld   edx,eax,0x2
c0016c63:	c1 e0 02             	shl    eax,0x2
c0016c66:	01 c8                	add    eax,ecx
c0016c68:	11 da                	adc    edx,ebx
c0016c6a:	0f a4 c2 03          	shld   edx,eax,0x3
c0016c6e:	c1 e0 03             	shl    eax,0x3
c0016c71:	52                   	push   edx
c0016c72:	50                   	push   eax
c0016c73:	e8 df 21 00 00       	call   c0018e57 <nanoSleep(unsigned long long)>
c0016c78:	83 c4 10             	add    esp,0x10
c0016c7b:	31 c0                	xor    eax,eax
c0016c7d:	31 d2                	xor    edx,edx
c0016c7f:	5b                   	pop    ebx
c0016c80:	5e                   	pop    esi
c0016c81:	5f                   	pop    edi
c0016c82:	c3                   	ret    

c0016c83 <sysCallSpawn(regs*)>:
c0016c83:	56                   	push   esi
c0016c84:	53                   	push   ebx
c0016c85:	50                   	push   eax
c0016c86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c8a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c8d:	85 c0                	test   eax,eax
c0016c8f:	75 08                	jne    c0016c99 <sysCallSpawn(regs*)+0x16>
c0016c91:	59                   	pop    ecx
c0016c92:	31 c0                	xor    eax,eax
c0016c94:	5b                   	pop    ebx
c0016c95:	31 d2                	xor    edx,edx
c0016c97:	5e                   	pop    esi
c0016c98:	c3                   	ret    
c0016c99:	83 ec 0c             	sub    esp,0xc
c0016c9c:	68 3b 07 00 00       	push   0x73b
c0016ca1:	e8 66 83 ff ff       	call   c000f00c <operator new(unsigned long)>
c0016ca6:	89 c6                	mov    esi,eax
c0016ca8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016cab:	50                   	push   eax
c0016cac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cb1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cb4:	50                   	push   eax
c0016cb5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016cb8:	50                   	push   eax
c0016cb9:	56                   	push   esi
c0016cba:	e8 d5 18 00 00       	call   c0018594 <Process::Process(char const*, Process*, char**)>
c0016cbf:	83 c4 20             	add    esp,0x20
c0016cc2:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016cc9:	75 c6                	jne    c0016c91 <sysCallSpawn(regs*)+0xe>
c0016ccb:	83 ec 0c             	sub    esp,0xc
c0016cce:	56                   	push   esi
c0016ccf:	e8 3c 1e 00 00       	call   c0018b10 <Process::createUserThread()>
c0016cd4:	83 c4 10             	add    esp,0x10
c0016cd7:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cd9:	89 c2                	mov    edx,eax
c0016cdb:	c1 fa 1f             	sar    edx,0x1f
c0016cde:	59                   	pop    ecx
c0016cdf:	5b                   	pop    ebx
c0016ce0:	5e                   	pop    esi
c0016ce1:	c3                   	ret    

c0016ce2 <sysAppSettings(regs*)>:
c0016ce2:	53                   	push   ebx
c0016ce3:	31 d2                	xor    edx,edx
c0016ce5:	83 ec 08             	sub    esp,0x8
c0016ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cec:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016cef:	b8 01 00 00 00       	mov    eax,0x1
c0016cf4:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016cfa:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016d00:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016d05:	75 30                	jne    c0016d37 <sysAppSettings(regs*)+0x55>
c0016d07:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016d0d:	83 e0 1f             	and    eax,0x1f
c0016d10:	3c 01                	cmp    al,0x1
c0016d12:	74 28                	je     c0016d3c <sysAppSettings(regs*)+0x5a>
c0016d14:	3c 07                	cmp    al,0x7
c0016d16:	0f 84 be 00 00 00    	je     c0016dda <sysAppSettings(regs*)+0xf8>
c0016d1c:	84 c0                	test   al,al
c0016d1e:	0f 84 da 00 00 00    	je     c0016dfe <sysAppSettings(regs*)+0x11c>
c0016d24:	3c 08                	cmp    al,0x8
c0016d26:	74 6d                	je     c0016d95 <sysAppSettings(regs*)+0xb3>
c0016d28:	25 ff 00 00 00       	and    eax,0xff
c0016d2d:	05 e8 03 00 00       	add    eax,0x3e8
c0016d32:	89 c2                	mov    edx,eax
c0016d34:	c1 fa 1f             	sar    edx,0x1f
c0016d37:	83 c4 08             	add    esp,0x8
c0016d3a:	5b                   	pop    ebx
c0016d3b:	c3                   	ret    
c0016d3c:	50                   	push   eax
c0016d3d:	68 00 01 00 00       	push   0x100
c0016d42:	6a 00                	push   0x0
c0016d44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d4c:	83 c0 0c             	add    eax,0xc
c0016d4f:	50                   	push   eax
c0016d50:	e8 65 99 fe ff       	call   c00006ba <memset>
c0016d55:	83 c4 0c             	add    esp,0xc
c0016d58:	68 ff 00 00 00       	push   0xff
c0016d5d:	53                   	push   ebx
c0016d5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d63:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d66:	83 c0 0c             	add    eax,0xc
c0016d69:	50                   	push   eax
c0016d6a:	e8 15 99 fe ff       	call   c0000684 <memcpy>
c0016d6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d74:	5a                   	pop    edx
c0016d75:	59                   	pop    ecx
c0016d76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d79:	8d 50 0c             	lea    edx,[eax+0xc]
c0016d7c:	52                   	push   edx
c0016d7d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016d83:	53                   	push   ebx
c0016d84:	e8 1f 64 ff ff       	call   c000d1a8 <VgaText::setTitle(char*)>
c0016d89:	83 c4 10             	add    esp,0x10
c0016d8c:	31 c0                	xor    eax,eax
c0016d8e:	31 d2                	xor    edx,edx
c0016d90:	83 c4 08             	add    esp,0x8
c0016d93:	5b                   	pop    ebx
c0016d94:	c3                   	ret    
c0016d95:	50                   	push   eax
c0016d96:	50                   	push   eax
c0016d97:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016d9d:	83 e0 0f             	and    eax,0xf
c0016da0:	50                   	push   eax
c0016da1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016da6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016da9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016daf:	50                   	push   eax
c0016db0:	e8 e3 63 ff ff       	call   c000d198 <VgaText::setTitleColour(VgaColour)>
c0016db5:	58                   	pop    eax
c0016db6:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016dbc:	c1 e8 04             	shr    eax,0x4
c0016dbf:	5a                   	pop    edx
c0016dc0:	83 e0 0f             	and    eax,0xf
c0016dc3:	50                   	push   eax
c0016dc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dc9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016dcc:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016dd2:	51                   	push   ecx
c0016dd3:	e8 b0 63 ff ff       	call   c000d188 <VgaText::setTitleTextColour(VgaColour)>
c0016dd8:	eb af                	jmp    c0016d89 <sysAppSettings(regs*)+0xa7>
c0016dda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ddf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016de2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016de8:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016dee:	c0 e8 06             	shr    al,0x6
c0016df1:	83 e0 01             	and    eax,0x1
c0016df4:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016dfa:	31 c0                	xor    eax,eax
c0016dfc:	eb 90                	jmp    c0016d8e <sysAppSettings(regs*)+0xac>
c0016dfe:	b8 02 00 00 00       	mov    eax,0x2
c0016e03:	31 d2                	xor    edx,edx
c0016e05:	eb 89                	jmp    c0016d90 <sysAppSettings(regs*)+0xae>

c0016e07 <sysSetFatAttrib(regs*)>:
c0016e07:	57                   	push   edi
c0016e08:	56                   	push   esi
c0016e09:	53                   	push   ebx
c0016e0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e0e:	83 ec 0c             	sub    esp,0xc
c0016e11:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016e14:	68 14 01 00 00       	push   0x114
c0016e19:	e8 ee 81 ff ff       	call   c000f00c <operator new(unsigned long)>
c0016e1e:	83 c4 0c             	add    esp,0xc
c0016e21:	89 c3                	mov    ebx,eax
c0016e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e2b:	50                   	push   eax
c0016e2c:	57                   	push   edi
c0016e2d:	53                   	push   ebx
c0016e2e:	e8 45 88 ff ff       	call   c000f678 <File::File(char const*, Process*)>
c0016e33:	83 c4 0c             	add    esp,0xc
c0016e36:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016e39:	0f b6 d4             	movzx  edx,ah
c0016e3c:	52                   	push   edx
c0016e3d:	25 ff 00 00 00       	and    eax,0xff
c0016e42:	50                   	push   eax
c0016e43:	53                   	push   ebx
c0016e44:	e8 a5 8a ff ff       	call   c000f8ee <File::chfatattr(unsigned char, unsigned char)>
c0016e49:	89 c6                	mov    esi,eax
c0016e4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e53:	83 c4 10             	add    esp,0x10
c0016e56:	31 c0                	xor    eax,eax
c0016e58:	85 f6                	test   esi,esi
c0016e5a:	0f 95 c0             	setne  al
c0016e5d:	5b                   	pop    ebx
c0016e5e:	31 d2                	xor    edx,edx
c0016e60:	f7 d8                	neg    eax
c0016e62:	83 d2 00             	adc    edx,0x0
c0016e65:	5e                   	pop    esi
c0016e66:	f7 da                	neg    edx
c0016e68:	5f                   	pop    edi
c0016e69:	c3                   	ret    

c0016e6a <sysPanic(regs*)>:
c0016e6a:	83 ec 18             	sub    esp,0x18
c0016e6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e71:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016e74:	50                   	push   eax
c0016e75:	e8 92 ea ff ff       	call   c001590c <Krnl::panic(char const*)>
c0016e7a:	c7 04 24 8f 29 02 c0 	mov    DWORD PTR [esp],0xc002298f
c0016e81:	e8 86 ea ff ff       	call   c001590c <Krnl::panic(char const*)>
c0016e86:	b8 01 00 00 00       	mov    eax,0x1
c0016e8b:	31 d2                	xor    edx,edx
c0016e8d:	83 c4 1c             	add    esp,0x1c
c0016e90:	c3                   	ret    

c0016e91 <sysPipe(regs*)>:
c0016e91:	57                   	push   edi
c0016e92:	56                   	push   esi
c0016e93:	53                   	push   ebx
c0016e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e98:	83 ec 0c             	sub    esp,0xc
c0016e9b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016e9e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016ea1:	6a 20                	push   0x20
c0016ea3:	e8 64 81 ff ff       	call   c000f00c <operator new(unsigned long)>
c0016ea8:	89 c3                	mov    ebx,eax
c0016eaa:	58                   	pop    eax
c0016eab:	5a                   	pop    edx
c0016eac:	68 00 50 00 00       	push   0x5000
c0016eb1:	53                   	push   ebx
c0016eb2:	e8 2f 5c ff ff       	call   c000cae6 <Pipe::Pipe(int)>
c0016eb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016eba:	e8 57 6e ff ff       	call   c000dd16 <UnixFile::getFileDescriptor()>
c0016ebf:	89 07                	mov    DWORD PTR [edi],eax
c0016ec1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ec4:	e8 4d 6e ff ff       	call   c000dd16 <UnixFile::getFileDescriptor()>
c0016ec9:	83 c4 10             	add    esp,0x10
c0016ecc:	89 06                	mov    DWORD PTR [esi],eax
c0016ece:	31 d2                	xor    edx,edx
c0016ed0:	5b                   	pop    ebx
c0016ed1:	31 c0                	xor    eax,eax
c0016ed3:	5e                   	pop    esi
c0016ed4:	5f                   	pop    edi
c0016ed5:	c3                   	ret    

c0016ed6 <sysGetUnixTime(regs*)>:
c0016ed6:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0016edb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ee1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ee5:	e9 56 91 ff ff       	jmp    c0010040 <Clock::timeInSecondsLocal()>

c0016eea <string_ends_with(char const*, char const*)>:
c0016eea:	57                   	push   edi
c0016eeb:	56                   	push   esi
c0016eec:	53                   	push   ebx
c0016eed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ef1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016ef5:	83 ec 0c             	sub    esp,0xc
c0016ef8:	53                   	push   ebx
c0016ef9:	e8 d9 97 fe ff       	call   c00006d7 <strlen>
c0016efe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f01:	89 c6                	mov    esi,eax
c0016f03:	e8 cf 97 fe ff       	call   c00006d7 <strlen>
c0016f08:	83 c4 10             	add    esp,0x10
c0016f0b:	31 d2                	xor    edx,edx
c0016f0d:	39 c6                	cmp    esi,eax
c0016f0f:	7d 06                	jge    c0016f17 <string_ends_with(char const*, char const*)+0x2d>
c0016f11:	5b                   	pop    ebx
c0016f12:	89 d0                	mov    eax,edx
c0016f14:	5e                   	pop    esi
c0016f15:	5f                   	pop    edi
c0016f16:	c3                   	ret    
c0016f17:	52                   	push   edx
c0016f18:	29 c6                	sub    esi,eax
c0016f1a:	52                   	push   edx
c0016f1b:	01 f3                	add    ebx,esi
c0016f1d:	57                   	push   edi
c0016f1e:	53                   	push   ebx
c0016f1f:	e8 86 98 fe ff       	call   c00007aa <strcmp>
c0016f24:	83 c4 10             	add    esp,0x10
c0016f27:	31 d2                	xor    edx,edx
c0016f29:	85 c0                	test   eax,eax
c0016f2b:	5b                   	pop    ebx
c0016f2c:	0f 94 c2             	sete   dl
c0016f2f:	5e                   	pop    esi
c0016f30:	89 d0                	mov    eax,edx
c0016f32:	5f                   	pop    edi
c0016f33:	c3                   	ret    

c0016f34 <sysCallOpen(regs*)>:
c0016f34:	56                   	push   esi
c0016f35:	53                   	push   ebx
c0016f36:	81 ec 04 01 00 00    	sub    esp,0x104
c0016f3c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016f43:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016f46:	85 c9                	test   ecx,ecx
c0016f48:	0f 84 bb 00 00 00    	je     c0017009 <sysCallOpen(regs*)+0xd5>
c0016f4e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016f51:	85 c0                	test   eax,eax
c0016f53:	0f 84 b0 00 00 00    	je     c0017009 <sysCallOpen(regs*)+0xd5>
c0016f59:	52                   	push   edx
c0016f5a:	68 9e 29 02 c0       	push   0xc002299e
c0016f5f:	50                   	push   eax
c0016f60:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016f64:	56                   	push   esi
c0016f65:	e8 64 85 ff ff       	call   c000f4ce <standardiseFiles(char*, char const*, char const*)>
c0016f6a:	89 34 24             	mov    DWORD PTR [esp],esi
c0016f6d:	e8 65 97 fe ff       	call   c00006d7 <strlen>
c0016f72:	83 c4 10             	add    esp,0x10
c0016f75:	48                   	dec    eax
c0016f76:	74 25                	je     c0016f9d <sysCallOpen(regs*)+0x69>
c0016f78:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016f7b:	80 fa 2e             	cmp    dl,0x2e
c0016f7e:	74 19                	je     c0016f99 <sysCallOpen(regs*)+0x65>
c0016f80:	80 fa 3a             	cmp    dl,0x3a
c0016f83:	74 14                	je     c0016f99 <sysCallOpen(regs*)+0x65>
c0016f85:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016f89:	48                   	dec    eax
c0016f8a:	74 11                	je     c0016f9d <sysCallOpen(regs*)+0x69>
c0016f8c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016f8f:	80 fa 3a             	cmp    dl,0x3a
c0016f92:	74 05                	je     c0016f99 <sysCallOpen(regs*)+0x65>
c0016f94:	80 fa 2e             	cmp    dl,0x2e
c0016f97:	75 ec                	jne    c0016f85 <sysCallOpen(regs*)+0x51>
c0016f99:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016f9d:	51                   	push   ecx
c0016f9e:	51                   	push   ecx
c0016f9f:	68 a2 29 02 c0       	push   0xc00229a2
c0016fa4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016fa7:	50                   	push   eax
c0016fa8:	e8 3d ff ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c0016fad:	83 c4 10             	add    esp,0x10
c0016fb0:	85 c0                	test   eax,eax
c0016fb2:	75 17                	jne    c0016fcb <sysCallOpen(regs*)+0x97>
c0016fb4:	50                   	push   eax
c0016fb5:	50                   	push   eax
c0016fb6:	68 c3 29 02 c0       	push   0xc00229c3
c0016fbb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016fbe:	50                   	push   eax
c0016fbf:	e8 26 ff ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c0016fc4:	83 c4 10             	add    esp,0x10
c0016fc7:	85 c0                	test   eax,eax
c0016fc9:	74 4d                	je     c0017018 <sysCallOpen(regs*)+0xe4>
c0016fcb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016fce:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016fd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016fdb:	50                   	push   eax
c0016fdc:	50                   	push   eax
c0016fdd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016fe0:	8b 10                	mov    edx,DWORD PTR [eax]
c0016fe2:	52                   	push   edx
c0016fe3:	68 a7 29 02 c0       	push   0xc00229a7
c0016fe8:	e8 54 81 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0016fed:	c7 04 24 b6 29 02 c0 	mov    DWORD PTR [esp],0xc00229b6
c0016ff4:	e8 48 81 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0016ff9:	83 c4 10             	add    esp,0x10
c0016ffc:	81 c4 04 01 00 00    	add    esp,0x104
c0017002:	31 c0                	xor    eax,eax
c0017004:	31 d2                	xor    edx,edx
c0017006:	5b                   	pop    ebx
c0017007:	5e                   	pop    esi
c0017008:	c3                   	ret    
c0017009:	81 c4 04 01 00 00    	add    esp,0x104
c001700f:	83 c8 ff             	or     eax,0xffffffff
c0017012:	83 ca ff             	or     edx,0xffffffff
c0017015:	5b                   	pop    ebx
c0017016:	5e                   	pop    esi
c0017017:	c3                   	ret    
c0017018:	50                   	push   eax
c0017019:	50                   	push   eax
c001701a:	68 a3 29 02 c0       	push   0xc00229a3
c001701f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017022:	50                   	push   eax
c0017023:	e8 82 97 fe ff       	call   c00007aa <strcmp>
c0017028:	83 c4 10             	add    esp,0x10
c001702b:	85 c0                	test   eax,eax
c001702d:	74 9c                	je     c0016fcb <sysCallOpen(regs*)+0x97>
c001702f:	50                   	push   eax
c0017030:	50                   	push   eax
c0017031:	68 a2 29 02 c0       	push   0xc00229a2
c0017036:	56                   	push   esi
c0017037:	e8 ae fe ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c001703c:	83 c4 10             	add    esp,0x10
c001703f:	85 c0                	test   eax,eax
c0017041:	75 88                	jne    c0016fcb <sysCallOpen(regs*)+0x97>
c0017043:	52                   	push   edx
c0017044:	52                   	push   edx
c0017045:	68 c8 29 02 c0       	push   0xc00229c8
c001704a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001704d:	51                   	push   ecx
c001704e:	e8 97 fe ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c0017053:	83 c4 10             	add    esp,0x10
c0017056:	85 c0                	test   eax,eax
c0017058:	0f 85 d5 00 00 00    	jne    c0017133 <sysCallOpen(regs*)+0x1ff>
c001705e:	50                   	push   eax
c001705f:	50                   	push   eax
c0017060:	68 cd 29 02 c0       	push   0xc00229cd
c0017065:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017068:	50                   	push   eax
c0017069:	e8 7c fe ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c001706e:	83 c4 10             	add    esp,0x10
c0017071:	85 c0                	test   eax,eax
c0017073:	0f 85 ba 00 00 00    	jne    c0017133 <sysCallOpen(regs*)+0x1ff>
c0017079:	50                   	push   eax
c001707a:	50                   	push   eax
c001707b:	68 c9 29 02 c0       	push   0xc00229c9
c0017080:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017083:	50                   	push   eax
c0017084:	e8 21 97 fe ff       	call   c00007aa <strcmp>
c0017089:	83 c4 10             	add    esp,0x10
c001708c:	85 c0                	test   eax,eax
c001708e:	0f 84 9f 00 00 00    	je     c0017133 <sysCallOpen(regs*)+0x1ff>
c0017094:	50                   	push   eax
c0017095:	50                   	push   eax
c0017096:	68 c8 29 02 c0       	push   0xc00229c8
c001709b:	56                   	push   esi
c001709c:	e8 49 fe ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c00170a1:	83 c4 10             	add    esp,0x10
c00170a4:	85 c0                	test   eax,eax
c00170a6:	0f 85 87 00 00 00    	jne    c0017133 <sysCallOpen(regs*)+0x1ff>
c00170ac:	83 ec 0c             	sub    esp,0xc
c00170af:	68 14 01 00 00       	push   0x114
c00170b4:	e8 53 7f ff ff       	call   c000f00c <operator new(unsigned long)>
c00170b9:	89 c6                	mov    esi,eax
c00170bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170c0:	83 c4 0c             	add    esp,0xc
c00170c3:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c00170c6:	51                   	push   ecx
c00170c7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170ca:	50                   	push   eax
c00170cb:	56                   	push   esi
c00170cc:	e8 a7 85 ff ff       	call   c000f678 <File::File(char const*, Process*)>
c00170d1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00170d4:	83 c4 10             	add    esp,0x10
c00170d7:	89 d0                	mov    eax,edx
c00170d9:	25 ff 00 00 00       	and    eax,0xff
c00170de:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00170e1:	89 d0                	mov    eax,edx
c00170e3:	83 e0 01             	and    eax,0x1
c00170e6:	f6 c2 02             	test   dl,0x2
c00170e9:	74 03                	je     c00170ee <sysCallOpen(regs*)+0x1ba>
c00170eb:	83 c8 02             	or     eax,0x2
c00170ee:	f6 c2 04             	test   dl,0x4
c00170f1:	74 03                	je     c00170f6 <sysCallOpen(regs*)+0x1c2>
c00170f3:	83 c8 04             	or     eax,0x4
c00170f6:	f6 c2 08             	test   dl,0x8
c00170f9:	74 03                	je     c00170fe <sysCallOpen(regs*)+0x1ca>
c00170fb:	83 c8 0a             	or     eax,0xa
c00170fe:	83 e2 10             	and    edx,0x10
c0017101:	74 03                	je     c0017106 <sysCallOpen(regs*)+0x1d2>
c0017103:	83 c8 12             	or     eax,0x12
c0017106:	52                   	push   edx
c0017107:	52                   	push   edx
c0017108:	50                   	push   eax
c0017109:	56                   	push   esi
c001710a:	e8 cd 85 ff ff       	call   c000f6dc <File::open(FileOpenMode)>
c001710f:	83 c4 10             	add    esp,0x10
c0017112:	85 c0                	test   eax,eax
c0017114:	0f 85 ef fe ff ff    	jne    c0017009 <sysCallOpen(regs*)+0xd5>
c001711a:	83 ec 0c             	sub    esp,0xc
c001711d:	56                   	push   esi
c001711e:	e8 f3 6b ff ff       	call   c000dd16 <UnixFile::getFileDescriptor()>
c0017123:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017126:	89 02                	mov    DWORD PTR [edx],eax
c0017128:	c1 f8 1f             	sar    eax,0x1f
c001712b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001712e:	e9 c6 fe ff ff       	jmp    c0016ff9 <sysCallOpen(regs*)+0xc5>
c0017133:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017136:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001713c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017143:	e9 b4 fe ff ff       	jmp    c0016ffc <sysCallOpen(regs*)+0xc8>

c0017148 <setupSystemCalls()>:
c0017148:	c7 05 80 4f 02 c0 43 63 01 c0 	mov    DWORD PTR ds:0xc0024f80,0xc0016343
c0017152:	c7 05 84 4f 02 c0 71 61 01 c0 	mov    DWORD PTR ds:0xc0024f84,0xc0016171
c001715c:	c7 05 88 4f 02 c0 86 62 01 c0 	mov    DWORD PTR ds:0xc0024f88,0xc0016286
c0017166:	c7 05 8c 4f 02 c0 db 62 01 c0 	mov    DWORD PTR ds:0xc0024f8c,0xc00162db
c0017170:	c7 05 90 4f 02 c0 1e 62 01 c0 	mov    DWORD PTR ds:0xc0024f90,0xc001621e
c001717a:	c7 05 94 4f 02 c0 5d 63 01 c0 	mov    DWORD PTR ds:0xc0024f94,0xc001635d
c0017184:	c7 05 98 4f 02 c0 1c 65 01 c0 	mov    DWORD PTR ds:0xc0024f98,0xc001651c
c001718e:	c7 05 9c 4f 02 c0 42 65 01 c0 	mov    DWORD PTR ds:0xc0024f9c,0xc0016542
c0017198:	c7 05 a4 4f 02 c0 ac 68 01 c0 	mov    DWORD PTR ds:0xc0024fa4,0xc00168ac
c00171a2:	c7 05 a0 4f 02 c0 34 6f 01 c0 	mov    DWORD PTR ds:0xc0024fa0,0xc0016f34
c00171ac:	c7 05 a8 4f 02 c0 2f 69 01 c0 	mov    DWORD PTR ds:0xc0024fa8,0xc001692f
c00171b6:	c7 05 ac 4f 02 c0 b1 65 01 c0 	mov    DWORD PTR ds:0xc0024fac,0xc00165b1
c00171c0:	c7 05 b0 4f 02 c0 6d 63 01 c0 	mov    DWORD PTR ds:0xc0024fb0,0xc001636d
c00171ca:	c7 05 b4 4f 02 c0 72 63 01 c0 	mov    DWORD PTR ds:0xc0024fb4,0xc0016372
c00171d4:	c7 05 b8 4f 02 c0 9a 69 01 c0 	mov    DWORD PTR ds:0xc0024fb8,0xc001699a
c00171de:	c7 05 bc 4f 02 c0 f5 69 01 c0 	mov    DWORD PTR ds:0xc0024fbc,0xc00169f5
c00171e8:	c7 05 c0 4f 02 c0 9c 66 01 c0 	mov    DWORD PTR ds:0xc0024fc0,0xc001669c
c00171f2:	c7 05 c4 4f 02 c0 02 67 01 c0 	mov    DWORD PTR ds:0xc0024fc4,0xc0016702
c00171fc:	c7 05 c8 4f 02 c0 2b 68 01 c0 	mov    DWORD PTR ds:0xc0024fc8,0xc001682b
c0017206:	c7 05 cc 4f 02 c0 77 63 01 c0 	mov    DWORD PTR ds:0xc0024fcc,0xc0016377
c0017210:	c7 05 d0 4f 02 c0 56 6a 01 c0 	mov    DWORD PTR ds:0xc0024fd0,0xc0016a56
c001721a:	c7 05 d4 4f 02 c0 81 63 01 c0 	mov    DWORD PTR ds:0xc0024fd4,0xc0016381
c0017224:	c7 05 d8 4f 02 c0 88 63 01 c0 	mov    DWORD PTR ds:0xc0024fd8,0xc0016388
c001722e:	c7 05 dc 4f 02 c0 77 6a 01 c0 	mov    DWORD PTR ds:0xc0024fdc,0xc0016a77
c0017238:	c7 05 e0 4f 02 c0 ca 6a 01 c0 	mov    DWORD PTR ds:0xc0024fe0,0xc0016aca
c0017242:	c7 05 e4 4f 02 c0 8f 63 01 c0 	mov    DWORD PTR ds:0xc0024fe4,0xc001638f
c001724c:	c7 05 e8 4f 02 c0 1d 6b 01 c0 	mov    DWORD PTR ds:0xc0024fe8,0xc0016b1d
c0017256:	c7 05 ec 4f 02 c0 64 65 01 c0 	mov    DWORD PTR ds:0xc0024fec,0xc0016564
c0017260:	c7 05 f0 4f 02 c0 69 6b 01 c0 	mov    DWORD PTR ds:0xc0024ff0,0xc0016b69
c001726a:	c7 05 f4 4f 02 c0 44 66 01 c0 	mov    DWORD PTR ds:0xc0024ff4,0xc0016644
c0017274:	c7 05 f8 4f 02 c0 41 6c 01 c0 	mov    DWORD PTR ds:0xc0024ff8,0xc0016c41
c001727e:	c7 05 fc 4f 02 c0 7d 67 01 c0 	mov    DWORD PTR ds:0xc0024ffc,0xc001677d
c0017288:	c7 05 00 50 02 c0 83 6c 01 c0 	mov    DWORD PTR ds:0xc0025000,0xc0016c83
c0017292:	c7 05 04 50 02 c0 ea 6b 01 c0 	mov    DWORD PTR ds:0xc0025004,0xc0016bea
c001729c:	c7 05 08 50 02 c0 e2 6c 01 c0 	mov    DWORD PTR ds:0xc0025008,0xc0016ce2
c00172a6:	c7 05 0c 50 02 c0 a3 63 01 c0 	mov    DWORD PTR ds:0xc002500c,0xc00163a3
c00172b0:	c7 05 10 50 02 c0 06 64 01 c0 	mov    DWORD PTR ds:0xc0025010,0xc0016406
c00172ba:	c7 05 14 50 02 c0 4e 64 01 c0 	mov    DWORD PTR ds:0xc0025014,0xc001644e
c00172c4:	c7 05 18 50 02 c0 07 6e 01 c0 	mov    DWORD PTR ds:0xc0025018,0xc0016e07
c00172ce:	c7 05 1c 50 02 c0 6a 6e 01 c0 	mov    DWORD PTR ds:0xc002501c,0xc0016e6a
c00172d8:	c7 05 20 50 02 c0 a1 64 01 c0 	mov    DWORD PTR ds:0xc0025020,0xc00164a1
c00172e2:	c7 05 24 50 02 c0 91 6e 01 c0 	mov    DWORD PTR ds:0xc0025024,0xc0016e91
c00172ec:	c7 05 28 50 02 c0 d6 6e 01 c0 	mov    DWORD PTR ds:0xc0025028,0xc0016ed6
c00172f6:	c7 05 2c 50 02 c0 89 61 01 c0 	mov    DWORD PTR ds:0xc002502c,0xc0016189
c0017300:	c3                   	ret    

c0017301 <systemCall(regs*, void*)>:
c0017301:	53                   	push   ebx
c0017302:	83 ec 08             	sub    esp,0x8
c0017305:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017309:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001730c:	83 f8 7f             	cmp    eax,0x7f
c001730f:	77 16                	ja     c0017327 <systemCall(regs*, void*)+0x26>
c0017311:	8b 14 85 80 4f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb080]
c0017318:	85 d2                	test   edx,edx
c001731a:	74 0b                	je     c0017327 <systemCall(regs*, void*)+0x26>
c001731c:	83 ec 0c             	sub    esp,0xc
c001731f:	53                   	push   ebx
c0017320:	ff d2                	call   edx
c0017322:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017325:	eb 0d                	jmp    c0017334 <systemCall(regs*, void*)+0x33>
c0017327:	52                   	push   edx
c0017328:	52                   	push   edx
c0017329:	50                   	push   eax
c001732a:	68 d2 29 02 c0       	push   0xc00229d2
c001732f:	e8 0d 7e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0017334:	83 c4 10             	add    esp,0x10
c0017337:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001733c:	83 c4 08             	add    esp,0x8
c001733f:	31 d2                	xor    edx,edx
c0017341:	5b                   	pop    ebx
c0017342:	c3                   	ret    

c0017343 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017343:	55                   	push   ebp
c0017344:	89 e5                	mov    ebp,esp
c0017346:	57                   	push   edi
c0017347:	56                   	push   esi
c0017348:	53                   	push   ebx
c0017349:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001734f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0017352:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017355:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001735c:	74 27                	je     c0017385 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c001735e:	85 c0                	test   eax,eax
c0017360:	74 23                	je     c0017385 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0017362:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0017366:	75 1d                	jne    c0017385 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0017368:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c001736b:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c0017371:	89 d1                	mov    ecx,edx
c0017373:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017379:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001737f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0017382:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c0017385:	83 ec 0c             	sub    esp,0xc
c0017388:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001738b:	05 ff 0f 00 00       	add    eax,0xfff
c0017390:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0017396:	6a 01                	push   0x1
c0017398:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001739e:	e8 83 6d ff ff       	call   c000e126 <Virt::allocateKernelVirtualPages(int)>
c00173a3:	83 c4 10             	add    esp,0x10
c00173a6:	89 c6                	mov    esi,eax
c00173a8:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00173ae:	0f 86 21 01 00 00    	jbe    c00174d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00173b4:	c1 eb 0c             	shr    ebx,0xc
c00173b7:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c00173c1:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c00173c7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00173ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00173cd:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c00173d3:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c00173d6:	29 d8                	sub    eax,ebx
c00173d8:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c00173de:	0f 83 f4 00 00 00    	jae    c00174d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c00173e4:	83 ec 0c             	sub    esp,0xc
c00173e7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00173ea:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c00173f0:	3d 00 10 00 00       	cmp    eax,0x1000
c00173f5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00173f7:	52                   	push   edx
c00173f8:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c00173fe:	52                   	push   edx
c00173ff:	76 05                	jbe    c0017406 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0017401:	b8 00 10 00 00       	mov    eax,0x1000
c0017406:	31 d2                	xor    edx,edx
c0017408:	52                   	push   edx
c0017409:	50                   	push   eax
c001740a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001740d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017410:	83 c4 20             	add    esp,0x20
c0017413:	85 c0                	test   eax,eax
c0017415:	74 1f                	je     c0017436 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017417:	51                   	push   ecx
c0017418:	51                   	push   ecx
c0017419:	50                   	push   eax
c001741a:	68 e6 29 02 c0       	push   0xc00229e6
c001741f:	e8 1d 7d ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0017424:	89 34 24             	mov    DWORD PTR [esp],esi
c0017427:	e8 47 70 ff ff       	call   c000e473 <Virt::freeKernelVirtualPages(unsigned long)>
c001742c:	83 c4 10             	add    esp,0x10
c001742f:	31 c0                	xor    eax,eax
c0017431:	e9 7c 01 00 00       	jmp    c00175b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0017436:	e8 be 14 00 00       	call   c00188f9 <lockScheduler()>
c001743b:	e8 69 51 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c0017440:	6a 07                	push   0x7
c0017442:	56                   	push   esi
c0017443:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0017449:	50                   	push   eax
c001744a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017450:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017453:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0017459:	e8 94 73 ff ff       	call   c000e7f2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001745e:	83 c4 0c             	add    esp,0xc
c0017461:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017467:	6a 00                	push   0x0
c0017469:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001746f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017472:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0017478:	e8 d3 71 ff ff       	call   c000e650 <VAS::mapOtherVASIn(bool, VAS*)>
c001747d:	58                   	pop    eax
c001747e:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c0017484:	5a                   	pop    edx
c0017485:	68 07 04 00 00       	push   0x407
c001748a:	53                   	push   ebx
c001748b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0017491:	50                   	push   eax
c0017492:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017498:	6a 00                	push   0x0
c001749a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001749f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00174a2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00174a8:	e8 01 77 ff ff       	call   c000ebae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00174ad:	83 c4 1c             	add    esp,0x1c
c00174b0:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00174b6:	68 00 10 00 00       	push   0x1000
c00174bb:	50                   	push   eax
c00174bc:	56                   	push   esi
c00174bd:	e8 c2 91 fe ff       	call   c0000684 <memcpy>
c00174c2:	e8 34 14 00 00       	call   c00188fb <unlockScheduler()>
c00174c7:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c00174cd:	83 c4 10             	add    esp,0x10
c00174d0:	e9 f5 fe ff ff       	jmp    c00173ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c00174d5:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00174d8:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c00174e2:	0f 86 bc 00 00 00    	jbe    c00175a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c00174e8:	e8 0c 14 00 00       	call   c00188f9 <lockScheduler()>
c00174ed:	51                   	push   ecx
c00174ee:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00174f4:	6a 00                	push   0x0
c00174f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00174fe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017504:	e8 47 71 ff ff       	call   c000e650 <VAS::mapOtherVASIn(bool, VAS*)>
c0017509:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001750f:	c1 e8 0c             	shr    eax,0xc
c0017512:	83 c4 10             	add    esp,0x10
c0017515:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001751b:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017525:	e8 7f 50 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c001752a:	6a 07                	push   0x7
c001752c:	56                   	push   esi
c001752d:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017533:	50                   	push   eax
c0017534:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001753a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001753d:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0017543:	e8 aa 72 ff ff       	call   c000e7f2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017548:	58                   	pop    eax
c0017549:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001754f:	5a                   	pop    edx
c0017550:	68 07 04 00 00       	push   0x407
c0017555:	53                   	push   ebx
c0017556:	81 c3 00 10 00 00    	add    ebx,0x1000
c001755c:	50                   	push   eax
c001755d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017563:	6a 00                	push   0x0
c0017565:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001756a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001756d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017573:	e8 36 76 ff ff       	call   c000ebae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017578:	83 c4 1c             	add    esp,0x1c
c001757b:	68 00 10 00 00       	push   0x1000
c0017580:	6a 00                	push   0x0
c0017582:	56                   	push   esi
c0017583:	e8 32 91 fe ff       	call   c00006ba <memset>
c0017588:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001758e:	83 c4 10             	add    esp,0x10
c0017591:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0017597:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001759d:	77 86                	ja     c0017525 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c001759f:	e8 57 13 00 00       	call   c00188fb <unlockScheduler()>
c00175a4:	83 ec 0c             	sub    esp,0xc
c00175a7:	56                   	push   esi
c00175a8:	e8 c6 6e ff ff       	call   c000e473 <Virt::freeKernelVirtualPages(unsigned long)>
c00175ad:	83 c4 10             	add    esp,0x10
c00175b0:	b0 01                	mov    al,0x1
c00175b2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00175b5:	5b                   	pop    ebx
c00175b6:	5e                   	pop    esi
c00175b7:	5f                   	pop    edi
c00175b8:	5d                   	pop    ebp
c00175b9:	c3                   	ret    

c00175ba <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00175ba:	55                   	push   ebp
c00175bb:	57                   	push   edi
c00175bc:	56                   	push   esi
c00175bd:	53                   	push   ebx
c00175be:	83 ec 48             	sub    esp,0x48
c00175c1:	68 14 01 00 00       	push   0x114
c00175c6:	e8 41 7a ff ff       	call   c000f00c <operator new(unsigned long)>
c00175cb:	83 c4 0c             	add    esp,0xc
c00175ce:	89 c6                	mov    esi,eax
c00175d0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00175d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00175d8:	50                   	push   eax
c00175d9:	e8 9a 80 ff ff       	call   c000f678 <File::File(char const*, Process*)>
c00175de:	58                   	pop    eax
c00175df:	5a                   	pop    edx
c00175e0:	6a 01                	push   0x1
c00175e2:	56                   	push   esi
c00175e3:	e8 f4 80 ff ff       	call   c000f6dc <File::open(FileOpenMode)>
c00175e8:	83 c4 10             	add    esp,0x10
c00175eb:	85 c0                	test   eax,eax
c00175ed:	0f 85 47 01 00 00    	jne    c001773a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175f3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00175fb:	83 ec 0c             	sub    esp,0xc
c00175fe:	6a 34                	push   0x34
c0017600:	e8 ce 49 ff ff       	call   c000bfd3 <malloc>
c0017605:	89 c3                	mov    ebx,eax
c0017607:	58                   	pop    eax
c0017608:	8b 06                	mov    eax,DWORD PTR [esi]
c001760a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001760e:	57                   	push   edi
c001760f:	53                   	push   ebx
c0017610:	6a 00                	push   0x0
c0017612:	6a 34                	push   0x34
c0017614:	56                   	push   esi
c0017615:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017618:	83 c4 20             	add    esp,0x20
c001761b:	85 c0                	test   eax,eax
c001761d:	0f 85 17 01 00 00    	jne    c001773a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017623:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017629:	0f 85 0b 01 00 00    	jne    c001773a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001762f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017632:	85 c0                	test   eax,eax
c0017634:	0f 84 00 01 00 00    	je     c001773a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001763a:	31 d2                	xor    edx,edx
c001763c:	55                   	push   ebp
c001763d:	52                   	push   edx
c001763e:	50                   	push   eax
c001763f:	56                   	push   esi
c0017640:	e8 55 81 ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	85 c0                	test   eax,eax
c001764a:	0f 85 ea 00 00 00    	jne    c001773a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017650:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017653:	83 ec 0c             	sub    esp,0xc
c0017656:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001765a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001765e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017662:	0f af c2             	imul   eax,edx
c0017665:	50                   	push   eax
c0017666:	e8 68 49 ff ff       	call   c000bfd3 <malloc>
c001766b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001766f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017672:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017676:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001767a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001767e:	0f af c2             	imul   eax,edx
c0017681:	99                   	cdq    
c0017682:	52                   	push   edx
c0017683:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017685:	50                   	push   eax
c0017686:	56                   	push   esi
c0017687:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001768a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001768d:	83 c4 20             	add    esp,0x20
c0017690:	85 c0                	test   eax,eax
c0017692:	0f 84 a2 00 00 00    	je     c001773a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017698:	31 d2                	xor    edx,edx
c001769a:	51                   	push   ecx
c001769b:	52                   	push   edx
c001769c:	50                   	push   eax
c001769d:	56                   	push   esi
c001769e:	e8 f7 80 ff ff       	call   c000f79a <File::seek(unsigned long long)>
c00176a3:	83 c4 10             	add    esp,0x10
c00176a6:	85 c0                	test   eax,eax
c00176a8:	0f 85 8c 00 00 00    	jne    c001773a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176ae:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00176b2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00176b6:	0f af c2             	imul   eax,edx
c00176b9:	83 ec 0c             	sub    esp,0xc
c00176bc:	31 ed                	xor    ebp,ebp
c00176be:	50                   	push   eax
c00176bf:	e8 0f 49 ff ff       	call   c000bfd3 <malloc>
c00176c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00176cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176cf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00176d3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00176d7:	0f af c2             	imul   eax,edx
c00176da:	99                   	cdq    
c00176db:	52                   	push   edx
c00176dc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00176de:	50                   	push   eax
c00176df:	56                   	push   esi
c00176e0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176e3:	83 c4 20             	add    esp,0x20
c00176e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00176ee:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00176f2:	0f 86 80 00 00 00    	jbe    c0017778 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00176f8:	0f b7 fd             	movzx  edi,bp
c00176fb:	c1 e7 05             	shl    edi,0x5
c00176fe:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017702:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017705:	75 6b                	jne    c0017772 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017707:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001770a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001770e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017711:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017715:	52                   	push   edx
c0017716:	31 d2                	xor    edx,edx
c0017718:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001771b:	52                   	push   edx
c001771c:	50                   	push   eax
c001771d:	56                   	push   esi
c001771e:	e8 77 80 ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	85 c0                	test   eax,eax
c0017728:	74 17                	je     c0017741 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001772a:	83 ec 0c             	sub    esp,0xc
c001772d:	68 11 2a 02 c0       	push   0xc0022a11
c0017732:	e8 0a 7a ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	31 c0                	xor    eax,eax
c001773c:	e9 87 00 00 00       	jmp    c00177c8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017741:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017744:	83 ec 0c             	sub    esp,0xc
c0017747:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001774a:	50                   	push   eax
c001774b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001774f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017753:	56                   	push   esi
c0017754:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017758:	e8 e6 fb ff ff       	call   c0017343 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001775d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017761:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0017765:	83 c4 20             	add    esp,0x20
c0017768:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001776c:	73 04                	jae    c0017772 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001776e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017772:	45                   	inc    ebp
c0017773:	e9 76 ff ff ff       	jmp    c00176ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017778:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001777c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017784:	83 ec 0c             	sub    esp,0xc
c0017787:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001778d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017792:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0017798:	05 00 10 00 00       	add    eax,0x1000
c001779d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00177a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177a4:	e8 3a 48 ff ff       	call   c000bfe3 <free>
c00177a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00177ac:	e8 32 48 ff ff       	call   c000bfe3 <free>
c00177b1:	58                   	pop    eax
c00177b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177b6:	e8 28 48 ff ff       	call   c000bfe3 <free>
c00177bb:	89 34 24             	mov    DWORD PTR [esp],esi
c00177be:	e8 77 7f ff ff       	call   c000f73a <File::close()>
c00177c3:	83 c4 10             	add    esp,0x10
c00177c6:	b0 01                	mov    al,0x1
c00177c8:	83 c4 3c             	add    esp,0x3c
c00177cb:	5b                   	pop    ebx
c00177cc:	5e                   	pop    esi
c00177cd:	5f                   	pop    edi
c00177ce:	5d                   	pop    ebp
c00177cf:	c3                   	ret    

c00177d0 <Thr::runtimeReferenceHelper()>:
c00177d0:	83 ec 18             	sub    esp,0x18
c00177d3:	68 19 2a 02 c0       	push   0xc0022a19
c00177d8:	e8 64 79 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00177dd:	fa                   	cli    
c00177de:	83 c4 10             	add    esp,0x10
c00177e1:	eb fe                	jmp    c00177e1 <Thr::runtimeReferenceHelper()+0x11>

c00177e3 <Thr::getAddressOfKernelSymbol(char const*)>:
c00177e3:	57                   	push   edi
c00177e4:	56                   	push   esi
c00177e5:	53                   	push   ebx
c00177e6:	31 db                	xor    ebx,ebx
c00177e8:	39 1d 20 59 02 c0    	cmp    DWORD PTR ds:0xc0025920,ebx
c00177ee:	7e 3c                	jle    c001782c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00177f0:	8b 34 9d a0 58 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda760]
c00177f7:	31 ff                	xor    edi,edi
c00177f9:	39 3c 9d a0 57 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda860],edi
c0017800:	7e 27                	jle    c0017829 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017802:	50                   	push   eax
c0017803:	50                   	push   eax
c0017804:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017808:	8b 06                	mov    eax,DWORD PTR [esi]
c001780a:	03 04 9d 20 58 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda7e0]
c0017811:	50                   	push   eax
c0017812:	e8 93 8f fe ff       	call   c00007aa <strcmp>
c0017817:	83 c4 10             	add    esp,0x10
c001781a:	85 c0                	test   eax,eax
c001781c:	75 05                	jne    c0017823 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001781e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017821:	eb 0b                	jmp    c001782e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017823:	83 c6 10             	add    esi,0x10
c0017826:	47                   	inc    edi
c0017827:	eb d0                	jmp    c00177f9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017829:	43                   	inc    ebx
c001782a:	eb bc                	jmp    c00177e8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001782c:	31 c0                	xor    eax,eax
c001782e:	5b                   	pop    ebx
c001782f:	5e                   	pop    esi
c0017830:	5f                   	pop    edi
c0017831:	c3                   	ret    

c0017832 <Thr::loadKernelSymbolTable(char const*)>:
c0017832:	55                   	push   ebp
c0017833:	57                   	push   edi
c0017834:	56                   	push   esi
c0017835:	53                   	push   ebx
c0017836:	83 ec 68             	sub    esp,0x68
c0017839:	8b 35 74 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025974
c001783f:	68 14 01 00 00       	push   0x114
c0017844:	e8 c3 77 ff ff       	call   c000f00c <operator new(unsigned long)>
c0017849:	83 c4 0c             	add    esp,0xc
c001784c:	89 c3                	mov    ebx,eax
c001784e:	56                   	push   esi
c001784f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017853:	50                   	push   eax
c0017854:	e8 1f 7e ff ff       	call   c000f678 <File::File(char const*, Process*)>
c0017859:	5e                   	pop    esi
c001785a:	5f                   	pop    edi
c001785b:	6a 01                	push   0x1
c001785d:	53                   	push   ebx
c001785e:	e8 79 7e ff ff       	call   c000f6dc <File::open(FileOpenMode)>
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	31 d2                	xor    edx,edx
c0017868:	85 c0                	test   eax,eax
c001786a:	0f 85 79 02 00 00    	jne    c0017ae9 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017870:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017878:	83 ec 0c             	sub    esp,0xc
c001787b:	6a 34                	push   0x34
c001787d:	e8 51 47 ff ff       	call   c000bfd3 <malloc>
c0017882:	59                   	pop    ecx
c0017883:	89 c7                	mov    edi,eax
c0017885:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017887:	8d 74 24 34          	lea    esi,[esp+0x34]
c001788b:	56                   	push   esi
c001788c:	57                   	push   edi
c001788d:	6a 00                	push   0x0
c001788f:	6a 34                	push   0x34
c0017891:	53                   	push   ebx
c0017892:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017895:	83 c4 20             	add    esp,0x20
c0017898:	85 c0                	test   eax,eax
c001789a:	74 17                	je     c00178b3 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001789c:	83 ec 0c             	sub    esp,0xc
c001789f:	68 3b 2a 02 c0       	push   0xc0022a3b
c00178a4:	e8 63 e0 ff ff       	call   c001590c <Krnl::panic(char const*)>
c00178a9:	83 c4 10             	add    esp,0x10
c00178ac:	31 d2                	xor    edx,edx
c00178ae:	e9 36 02 00 00       	jmp    c0017ae9 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00178b3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00178b9:	75 e1                	jne    c001789c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00178bb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00178be:	85 c0                	test   eax,eax
c00178c0:	74 da                	je     c001789c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00178c2:	52                   	push   edx
c00178c3:	31 d2                	xor    edx,edx
c00178c5:	52                   	push   edx
c00178c6:	50                   	push   eax
c00178c7:	53                   	push   ebx
c00178c8:	e8 cd 7e ff ff       	call   c000f79a <File::seek(unsigned long long)>
c00178cd:	83 c4 10             	add    esp,0x10
c00178d0:	85 c0                	test   eax,eax
c00178d2:	75 c8                	jne    c001789c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00178d4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00178d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00178dc:	0f af c2             	imul   eax,edx
c00178df:	83 ec 0c             	sub    esp,0xc
c00178e2:	31 ed                	xor    ebp,ebp
c00178e4:	50                   	push   eax
c00178e5:	e8 e9 46 ff ff       	call   c000bfd3 <malloc>
c00178ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00178f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00178f5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00178f9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00178fd:	0f af c2             	imul   eax,edx
c0017900:	99                   	cdq    
c0017901:	52                   	push   edx
c0017902:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017904:	50                   	push   eax
c0017905:	53                   	push   ebx
c0017906:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017909:	83 c4 20             	add    esp,0x20
c001790c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017914:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001791c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017924:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001792c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017930:	0f 86 aa 00 00 00    	jbe    c00179e0 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017936:	0f b7 f5             	movzx  esi,bp
c0017939:	6b f6 28             	imul   esi,esi,0x28
c001793c:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017940:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017943:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017947:	50                   	push   eax
c0017948:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001794c:	6b c0 28             	imul   eax,eax,0x28
c001794f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017953:	8b 16                	mov    edx,DWORD PTR [esi]
c0017955:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017959:	89 d0                	mov    eax,edx
c001795b:	31 d2                	xor    edx,edx
c001795d:	52                   	push   edx
c001795e:	50                   	push   eax
c001795f:	53                   	push   ebx
c0017960:	e8 35 7e ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017965:	83 c4 0c             	add    esp,0xc
c0017968:	6a 20                	push   0x20
c001796a:	6a 00                	push   0x0
c001796c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017970:	52                   	push   edx
c0017971:	e8 44 8d fe ff       	call   c00006ba <memset>
c0017976:	58                   	pop    eax
c0017977:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017979:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001797d:	51                   	push   ecx
c001797e:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017982:	52                   	push   edx
c0017983:	6a 00                	push   0x0
c0017985:	6a 1f                	push   0x1f
c0017987:	53                   	push   ebx
c0017988:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001798b:	83 c4 18             	add    esp,0x18
c001798e:	68 52 2a 02 c0       	push   0xc0022a52
c0017993:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017997:	52                   	push   edx
c0017998:	e8 0d 8e fe ff       	call   c00007aa <strcmp>
c001799d:	83 c4 10             	add    esp,0x10
c00179a0:	85 c0                	test   eax,eax
c00179a2:	75 0f                	jne    c00179b3 <Thr::loadKernelSymbolTable(char const*)+0x181>
c00179a4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00179a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179b3:	50                   	push   eax
c00179b4:	50                   	push   eax
c00179b5:	68 5a 2a 02 c0       	push   0xc0022a5a
c00179ba:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00179be:	50                   	push   eax
c00179bf:	e8 e6 8d fe ff       	call   c00007aa <strcmp>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	85 c0                	test   eax,eax
c00179c9:	75 0f                	jne    c00179da <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c00179cb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00179ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179da:	45                   	inc    ebp
c00179db:	e9 4c ff ff ff       	jmp    c001792c <Thr::loadKernelSymbolTable(char const*)+0xfa>
c00179e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00179e5:	75 10                	jne    c00179f7 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c00179e7:	83 ec 0c             	sub    esp,0xc
c00179ea:	68 62 2a 02 c0       	push   0xc0022a62
c00179ef:	e8 18 df ff ff       	call   c001590c <Krnl::panic(char const*)>
c00179f4:	83 c4 10             	add    esp,0x10
c00179f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00179fc:	75 10                	jne    c0017a0e <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c00179fe:	83 ec 0c             	sub    esp,0xc
c0017a01:	68 62 2a 02 c0       	push   0xc0022a62
c0017a06:	e8 01 df ff ff       	call   c001590c <Krnl::panic(char const*)>
c0017a0b:	83 c4 10             	add    esp,0x10
c0017a0e:	31 d2                	xor    edx,edx
c0017a10:	50                   	push   eax
c0017a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a15:	52                   	push   edx
c0017a16:	50                   	push   eax
c0017a17:	53                   	push   ebx
c0017a18:	e8 7d 7d ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017a1d:	5a                   	pop    edx
c0017a1e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a22:	e8 ac 45 ff ff       	call   c000bfd3 <malloc>
c0017a27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017a2f:	89 c1                	mov    ecx,eax
c0017a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a39:	5e                   	pop    esi
c0017a3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a3c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017a40:	55                   	push   ebp
c0017a41:	51                   	push   ecx
c0017a42:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017a46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a4e:	53                   	push   ebx
c0017a4f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a52:	83 c4 14             	add    esp,0x14
c0017a55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a59:	e8 75 45 ff ff       	call   c000bfd3 <malloc>
c0017a5e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a61:	89 c6                	mov    esi,eax
c0017a63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a65:	56                   	push   esi
c0017a66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a6a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a6e:	53                   	push   ebx
c0017a6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a76:	8b 15 20 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025920
c0017a7c:	c1 e8 04             	shr    eax,0x4
c0017a7f:	83 c4 1c             	add    esp,0x1c
c0017a82:	89 04 95 a0 57 02 c0 	mov    DWORD PTR [edx*4-0x3ffda860],eax
c0017a89:	31 d2                	xor    edx,edx
c0017a8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a8f:	52                   	push   edx
c0017a90:	50                   	push   eax
c0017a91:	53                   	push   ebx
c0017a92:	e8 03 7d ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017a97:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a9a:	31 d2                	xor    edx,edx
c0017a9c:	56                   	push   esi
c0017a9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aa1:	52                   	push   edx
c0017aa2:	50                   	push   eax
c0017aa3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017aa5:	53                   	push   ebx
c0017aa6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017aa9:	83 c4 14             	add    esp,0x14
c0017aac:	53                   	push   ebx
c0017aad:	e8 88 7c ff ff       	call   c000f73a <File::close()>
c0017ab2:	5d                   	pop    ebp
c0017ab3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ab7:	e8 27 45 ff ff       	call   c000bfe3 <free>
c0017abc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017abf:	e8 1f 45 ff ff       	call   c000bfe3 <free>
c0017ac4:	a1 20 59 02 c0       	mov    eax,ds:0xc0025920
c0017ac9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017acd:	8d 50 01             	lea    edx,[eax+0x1]
c0017ad0:	89 15 20 59 02 c0    	mov    DWORD PTR ds:0xc0025920,edx
c0017ad6:	89 0c 85 a0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda760],ecx
c0017add:	89 34 85 20 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7e0],esi
c0017ae4:	83 c4 10             	add    esp,0x10
c0017ae7:	b2 01                	mov    dl,0x1
c0017ae9:	83 c4 5c             	add    esp,0x5c
c0017aec:	88 d0                	mov    al,dl
c0017aee:	5b                   	pop    ebx
c0017aef:	5e                   	pop    esi
c0017af0:	5f                   	pop    edi
c0017af1:	5d                   	pop    ebp
c0017af2:	c3                   	ret    

c0017af3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017af3:	55                   	push   ebp
c0017af4:	57                   	push   edi
c0017af5:	56                   	push   esi
c0017af6:	53                   	push   ebx
c0017af7:	81 ec 68 03 00 00    	sub    esp,0x368
c0017afd:	8b 1d 74 59 02 c0    	mov    ebx,DWORD PTR ds:0xc0025974
c0017b03:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017b0a:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017b0e:	68 14 01 00 00       	push   0x114
c0017b13:	e8 f4 74 ff ff       	call   c000f00c <operator new(unsigned long)>
c0017b18:	83 c4 0c             	add    esp,0xc
c0017b1b:	53                   	push   ebx
c0017b1c:	89 c7                	mov    edi,eax
c0017b1e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017b25:	50                   	push   eax
c0017b26:	e8 4d 7b ff ff       	call   c000f678 <File::File(char const*, Process*)>
c0017b2b:	5e                   	pop    esi
c0017b2c:	5d                   	pop    ebp
c0017b2d:	6a 01                	push   0x1
c0017b2f:	57                   	push   edi
c0017b30:	e8 a7 7b ff ff       	call   c000f6dc <File::open(FileOpenMode)>
c0017b35:	83 c4 10             	add    esp,0x10
c0017b38:	85 c0                	test   eax,eax
c0017b3a:	0f 85 10 07 00 00    	jne    c0018250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b40:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017b48:	83 ec 0c             	sub    esp,0xc
c0017b4b:	6a 34                	push   0x34
c0017b4d:	e8 81 44 ff ff       	call   c000bfd3 <malloc>
c0017b52:	5b                   	pop    ebx
c0017b53:	89 c5                	mov    ebp,eax
c0017b55:	8b 07                	mov    eax,DWORD PTR [edi]
c0017b57:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017b5b:	53                   	push   ebx
c0017b5c:	55                   	push   ebp
c0017b5d:	6a 00                	push   0x0
c0017b5f:	6a 34                	push   0x34
c0017b61:	57                   	push   edi
c0017b62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b65:	83 c4 20             	add    esp,0x20
c0017b68:	85 c0                	test   eax,eax
c0017b6a:	0f 85 e0 06 00 00    	jne    c0018250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b70:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017b77:	0f 85 d3 06 00 00    	jne    c0018250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b7d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017b80:	85 c0                	test   eax,eax
c0017b82:	0f 84 c8 06 00 00    	je     c0018250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b88:	31 d2                	xor    edx,edx
c0017b8a:	51                   	push   ecx
c0017b8b:	52                   	push   edx
c0017b8c:	50                   	push   eax
c0017b8d:	57                   	push   edi
c0017b8e:	e8 07 7c ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017b93:	83 c4 10             	add    esp,0x10
c0017b96:	85 c0                	test   eax,eax
c0017b98:	0f 85 b2 06 00 00    	jne    c0018250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b9e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017ba1:	83 ec 0c             	sub    esp,0xc
c0017ba4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017ba8:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017bac:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017bb0:	0f af c2             	imul   eax,edx
c0017bb3:	50                   	push   eax
c0017bb4:	e8 1a 44 ff ff       	call   c000bfd3 <malloc>
c0017bb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017bbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bc4:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017bc8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017bcc:	0f af c2             	imul   eax,edx
c0017bcf:	99                   	cdq    
c0017bd0:	52                   	push   edx
c0017bd1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017bd3:	50                   	push   eax
c0017bd4:	57                   	push   edi
c0017bd5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017bd8:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017bdb:	83 c4 20             	add    esp,0x20
c0017bde:	85 c0                	test   eax,eax
c0017be0:	0f 84 6a 06 00 00    	je     c0018250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017be6:	52                   	push   edx
c0017be7:	31 d2                	xor    edx,edx
c0017be9:	52                   	push   edx
c0017bea:	50                   	push   eax
c0017beb:	57                   	push   edi
c0017bec:	e8 a9 7b ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017bf1:	83 c4 10             	add    esp,0x10
c0017bf4:	85 c0                	test   eax,eax
c0017bf6:	0f 85 54 06 00 00    	jne    c0018250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bfc:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017c00:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017c04:	0f af c2             	imul   eax,edx
c0017c07:	83 ec 0c             	sub    esp,0xc
c0017c0a:	31 f6                	xor    esi,esi
c0017c0c:	50                   	push   eax
c0017c0d:	e8 c1 43 ff ff       	call   c000bfd3 <malloc>
c0017c12:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c1d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017c21:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017c25:	0f af c2             	imul   eax,edx
c0017c28:	99                   	cdq    
c0017c29:	52                   	push   edx
c0017c2a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c2c:	50                   	push   eax
c0017c2d:	57                   	push   edi
c0017c2e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c31:	83 c4 20             	add    esp,0x20
c0017c34:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017c38:	0f 86 af 00 00 00    	jbe    c0017ced <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017c3e:	0f b7 de             	movzx  ebx,si
c0017c41:	c1 e3 05             	shl    ebx,0x5
c0017c44:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017c48:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017c4b:	0f 85 96 00 00 00    	jne    c0017ce7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017c51:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017c54:	31 d2                	xor    edx,edx
c0017c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017c5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c61:	50                   	push   eax
c0017c62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017c65:	52                   	push   edx
c0017c66:	50                   	push   eax
c0017c67:	57                   	push   edi
c0017c68:	e8 2d 7b ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017c6d:	83 c4 10             	add    esp,0x10
c0017c70:	85 c0                	test   eax,eax
c0017c72:	0f 85 d8 05 00 00    	jne    c0018250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c78:	52                   	push   edx
c0017c79:	52                   	push   edx
c0017c7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c7e:	68 7c 2a 02 c0       	push   0xc0022a7c
c0017c83:	e8 b9 74 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0017c88:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017c8f:	31 d2                	xor    edx,edx
c0017c91:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017c95:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017c99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c9d:	59                   	pop    ecx
c0017c9e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017ca0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017ca7:	50                   	push   eax
c0017ca8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017cac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cb0:	52                   	push   edx
c0017cb1:	50                   	push   eax
c0017cb2:	57                   	push   edi
c0017cb3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017cb6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017cb9:	83 c4 18             	add    esp,0x18
c0017cbc:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017cbf:	50                   	push   eax
c0017cc0:	68 a0 2a 02 c0       	push   0xc0022aa0
c0017cc5:	e8 77 74 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0017cca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017ccd:	83 c4 0c             	add    esp,0xc
c0017cd0:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017cd3:	50                   	push   eax
c0017cd4:	6a 00                	push   0x0
c0017cd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cda:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017cde:	50                   	push   eax
c0017cdf:	e8 d6 89 fe ff       	call   c00006ba <memset>
c0017ce4:	83 c4 10             	add    esp,0x10
c0017ce7:	46                   	inc    esi
c0017ce8:	e9 47 ff ff ff       	jmp    c0017c34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017ced:	50                   	push   eax
c0017cee:	31 db                	xor    ebx,ebx
c0017cf0:	68 00 01 00 00       	push   0x100
c0017cf5:	6a 00                	push   0x0
c0017cf7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017cfb:	50                   	push   eax
c0017cfc:	e8 b9 89 fe ff       	call   c00006ba <memset>
c0017d01:	83 c4 0c             	add    esp,0xc
c0017d04:	68 00 01 00 00       	push   0x100
c0017d09:	6a 00                	push   0x0
c0017d0b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017d12:	50                   	push   eax
c0017d13:	e8 a2 89 fe ff       	call   c00006ba <memset>
c0017d18:	83 c4 10             	add    esp,0x10
c0017d1b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017d23:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017d2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017d33:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017d3b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d43:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017d47:	0f 86 2f 01 00 00    	jbe    c0017e7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017d4d:	0f b7 f3             	movzx  esi,bx
c0017d50:	6b f6 28             	imul   esi,esi,0x28
c0017d53:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017d57:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017d5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d5e:	50                   	push   eax
c0017d5f:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017d63:	6b d2 28             	imul   edx,edx,0x28
c0017d66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017d6a:	8b 06                	mov    eax,DWORD PTR [esi]
c0017d6c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017d70:	31 d2                	xor    edx,edx
c0017d72:	52                   	push   edx
c0017d73:	50                   	push   eax
c0017d74:	57                   	push   edi
c0017d75:	e8 20 7a ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017d7a:	83 c4 0c             	add    esp,0xc
c0017d7d:	6a 20                	push   0x20
c0017d7f:	6a 00                	push   0x0
c0017d81:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017d88:	51                   	push   ecx
c0017d89:	e8 2c 89 fe ff       	call   c00006ba <memset>
c0017d8e:	58                   	pop    eax
c0017d8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0017d91:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017d95:	52                   	push   edx
c0017d96:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017d9d:	51                   	push   ecx
c0017d9e:	6a 00                	push   0x0
c0017da0:	6a 1f                	push   0x1f
c0017da2:	57                   	push   edi
c0017da3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017da6:	83 c4 1c             	add    esp,0x1c
c0017da9:	6a 09                	push   0x9
c0017dab:	68 bd 2a 02 c0       	push   0xc0022abd
c0017db0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017db7:	51                   	push   ecx
c0017db8:	e8 64 88 fe ff       	call   c0000621 <memcmp>
c0017dbd:	83 c4 10             	add    esp,0x10
c0017dc0:	85 c0                	test   eax,eax
c0017dc2:	75 21                	jne    c0017de5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017dc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017dcc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017dd0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017dd4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017dd7:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017dde:	89 c8                	mov    eax,ecx
c0017de0:	40                   	inc    eax
c0017de1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017de5:	50                   	push   eax
c0017de6:	6a 09                	push   0x9
c0017de8:	68 c7 2a 02 c0       	push   0xc0022ac7
c0017ded:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017df4:	50                   	push   eax
c0017df5:	e8 27 88 fe ff       	call   c0000621 <memcmp>
c0017dfa:	83 c4 10             	add    esp,0x10
c0017dfd:	85 c0                	test   eax,eax
c0017dff:	75 21                	jne    c0017e22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e05:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e09:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e0d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e11:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e14:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017e1b:	89 c8                	mov    eax,ecx
c0017e1d:	40                   	inc    eax
c0017e1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e22:	50                   	push   eax
c0017e23:	50                   	push   eax
c0017e24:	68 52 2a 02 c0       	push   0xc0022a52
c0017e29:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e30:	50                   	push   eax
c0017e31:	e8 74 89 fe ff       	call   c00007aa <strcmp>
c0017e36:	83 c4 10             	add    esp,0x10
c0017e39:	85 c0                	test   eax,eax
c0017e3b:	75 0f                	jne    c0017e4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017e3d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e4c:	50                   	push   eax
c0017e4d:	50                   	push   eax
c0017e4e:	68 5a 2a 02 c0       	push   0xc0022a5a
c0017e53:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e5a:	50                   	push   eax
c0017e5b:	e8 4a 89 fe ff       	call   c00007aa <strcmp>
c0017e60:	83 c4 10             	add    esp,0x10
c0017e63:	85 c0                	test   eax,eax
c0017e65:	75 0f                	jne    c0017e76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017e67:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017e76:	43                   	inc    ebx
c0017e77:	e9 c7 fe ff ff       	jmp    c0017d43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017e7c:	31 d2                	xor    edx,edx
c0017e7e:	50                   	push   eax
c0017e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e83:	52                   	push   edx
c0017e84:	50                   	push   eax
c0017e85:	57                   	push   edi
c0017e86:	e8 0f 79 ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017e8b:	5a                   	pop    edx
c0017e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e90:	e8 3e 41 ff ff       	call   c000bfd3 <malloc>
c0017e95:	31 d2                	xor    edx,edx
c0017e97:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017e9b:	59                   	pop    ecx
c0017e9c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e9e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ea2:	53                   	push   ebx
c0017ea3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ea7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017eab:	52                   	push   edx
c0017eac:	50                   	push   eax
c0017ead:	57                   	push   edi
c0017eae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017eb1:	83 c4 14             	add    esp,0x14
c0017eb4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017eb8:	e8 16 41 ff ff       	call   c000bfd3 <malloc>
c0017ebd:	31 d2                	xor    edx,edx
c0017ebf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ec3:	83 c4 0c             	add    esp,0xc
c0017ec6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017eca:	52                   	push   edx
c0017ecb:	50                   	push   eax
c0017ecc:	57                   	push   edi
c0017ecd:	e8 c8 78 ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017ed2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ed5:	31 d2                	xor    edx,edx
c0017ed7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017edb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017edf:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017ee1:	52                   	push   edx
c0017ee2:	50                   	push   eax
c0017ee3:	57                   	push   edi
c0017ee4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ee7:	83 c4 20             	add    esp,0x20
c0017eea:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ef2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ef6:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017efa:	0f 84 54 03 00 00    	je     c0018254 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017f00:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017f07:	31 d2                	xor    edx,edx
c0017f09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f0d:	c1 e8 03             	shr    eax,0x3
c0017f10:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f14:	50                   	push   eax
c0017f15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f19:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017f1d:	52                   	push   edx
c0017f1e:	50                   	push   eax
c0017f1f:	57                   	push   edi
c0017f20:	e8 75 78 ff ff       	call   c000f79a <File::seek(unsigned long long)>
c0017f25:	58                   	pop    eax
c0017f26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017f31:	e8 9d 40 ff ff       	call   c000bfd3 <malloc>
c0017f36:	31 d2                	xor    edx,edx
c0017f38:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f3c:	58                   	pop    eax
c0017f3d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017f3f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017f43:	50                   	push   eax
c0017f44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017f48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f4c:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017f53:	52                   	push   edx
c0017f54:	50                   	push   eax
c0017f55:	57                   	push   edi
c0017f56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f59:	83 c4 20             	add    esp,0x20
c0017f5c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017f64:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017f68:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017f6c:	0f 8d c6 02 00 00    	jge    c0018238 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017f72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f7a:	31 db                	xor    ebx,ebx
c0017f7c:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017f7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017f83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f87:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017f8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f8f:	c1 e8 08             	shr    eax,0x8
c0017f92:	89 c6                	mov    esi,eax
c0017f94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017f98:	c1 e6 04             	shl    esi,0x4
c0017f9b:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017f9f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017fa2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017fa6:	85 c0                	test   eax,eax
c0017fa8:	0f 85 17 01 00 00    	jne    c00180c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017fae:	83 ec 0c             	sub    esp,0xc
c0017fb1:	b3 01                	mov    bl,0x1
c0017fb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fb7:	03 06                	add    eax,DWORD PTR [esi]
c0017fb9:	50                   	push   eax
c0017fba:	e8 24 f8 ff ff       	call   c00177e3 <Thr::getAddressOfKernelSymbol(char const*)>
c0017fbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fc3:	83 c4 10             	add    esp,0x10
c0017fc6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017fcb:	0f 85 f4 00 00 00    	jne    c00180c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017fd1:	50                   	push   eax
c0017fd2:	50                   	push   eax
c0017fd3:	68 d1 2a 02 c0       	push   0xc0022ad1
c0017fd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fdc:	03 06                	add    eax,DWORD PTR [esi]
c0017fde:	50                   	push   eax
c0017fdf:	e8 c6 87 fe ff       	call   c00007aa <strcmp>
c0017fe4:	83 c4 10             	add    esp,0x10
c0017fe7:	85 c0                	test   eax,eax
c0017fe9:	75 0a                	jne    c0017ff5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0017feb:	b8 8c f3 01 c0       	mov    eax,0xc001f38c
c0017ff0:	e9 ca 00 00 00       	jmp    c00180bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017ff5:	50                   	push   eax
c0017ff6:	50                   	push   eax
c0017ff7:	68 db 2a 02 c0       	push   0xc0022adb
c0017ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018000:	03 06                	add    eax,DWORD PTR [esi]
c0018002:	50                   	push   eax
c0018003:	e8 a2 87 fe ff       	call   c00007aa <strcmp>
c0018008:	83 c4 10             	add    esp,0x10
c001800b:	85 c0                	test   eax,eax
c001800d:	75 0a                	jne    c0018019 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001800f:	b8 c0 f0 01 c0       	mov    eax,0xc001f0c0
c0018014:	e9 a6 00 00 00       	jmp    c00180bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018019:	53                   	push   ebx
c001801a:	53                   	push   ebx
c001801b:	68 e4 2a 02 c0       	push   0xc0022ae4
c0018020:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018024:	03 06                	add    eax,DWORD PTR [esi]
c0018026:	50                   	push   eax
c0018027:	e8 7e 87 fe ff       	call   c00007aa <strcmp>
c001802c:	83 c4 10             	add    esp,0x10
c001802f:	85 c0                	test   eax,eax
c0018031:	75 0a                	jne    c001803d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0018033:	b8 8c f4 01 c0       	mov    eax,0xc001f48c
c0018038:	e9 82 00 00 00       	jmp    c00180bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001803d:	51                   	push   ecx
c001803e:	51                   	push   ecx
c001803f:	68 ee 2a 02 c0       	push   0xc0022aee
c0018044:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018048:	03 06                	add    eax,DWORD PTR [esi]
c001804a:	50                   	push   eax
c001804b:	e8 5a 87 fe ff       	call   c00007aa <strcmp>
c0018050:	83 c4 10             	add    esp,0x10
c0018053:	85 c0                	test   eax,eax
c0018055:	74 63                	je     c00180ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c0018057:	50                   	push   eax
c0018058:	50                   	push   eax
c0018059:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001805d:	03 06                	add    eax,DWORD PTR [esi]
c001805f:	50                   	push   eax
c0018060:	68 f7 2a 02 c0       	push   0xc0022af7
c0018065:	e8 d7 70 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001806a:	58                   	pop    eax
c001806b:	5a                   	pop    edx
c001806c:	68 11 2b 02 c0       	push   0xc0022b11
c0018071:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0018078:	53                   	push   ebx
c0018079:	e8 db 86 fe ff       	call   c0000759 <strcpy>
c001807e:	59                   	pop    ecx
c001807f:	58                   	pop    eax
c0018080:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018084:	03 06                	add    eax,DWORD PTR [esi]
c0018086:	50                   	push   eax
c0018087:	53                   	push   ebx
c0018088:	e8 83 87 fe ff       	call   c0000810 <strcat>
c001808d:	58                   	pop    eax
c001808e:	5a                   	pop    edx
c001808f:	68 a7 2b 02 c0       	push   0xc0022ba7
c0018094:	53                   	push   ebx
c0018095:	e8 76 87 fe ff       	call   c0000810 <strcat>
c001809a:	83 c4 10             	add    esp,0x10
c001809d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00180a2:	0f 84 4b 01 00 00    	je     c00181f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00180a8:	83 ec 0c             	sub    esp,0xc
c00180ab:	53                   	push   ebx
c00180ac:	e8 5b d8 ff ff       	call   c001590c <Krnl::panic(char const*)>
c00180b1:	83 c4 10             	add    esp,0x10
c00180b4:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c00180b8:	eb 0b                	jmp    c00180c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00180ba:	b8 0c f2 01 c0       	mov    eax,0xc001f20c
c00180bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180c3:	b3 01                	mov    bl,0x1
c00180c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00180ca:	0f 85 80 00 00 00    	jne    c0018150 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c00180d0:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00180d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00180db:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00180df:	01 ce                	add    esi,ecx
c00180e1:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00180e9:	0f 94 c2             	sete   dl
c00180ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00180ee:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00180f6:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c00180fb:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c00180ff:	84 db                	test   bl,bl
c0018101:	74 31                	je     c0018134 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0018103:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018107:	01 c3                	add    ebx,eax
c0018109:	84 d2                	test   dl,dl
c001810b:	75 0a                	jne    c0018117 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001810d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018111:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018115:	76 32                	jbe    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018117:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001811c:	0f 84 d1 00 00 00    	je     c00181f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018122:	83 ec 0c             	sub    esp,0xc
c0018125:	68 28 2b 02 c0       	push   0xc0022b28
c001812a:	e8 dd d7 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001812f:	83 c4 10             	add    esp,0x10
c0018132:	eb 15                	jmp    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018134:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0018137:	84 d2                	test   dl,dl
c0018139:	75 0e                	jne    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001813b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001813f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018143:	77 04                	ja     c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018145:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0018149:	89 1e                	mov    DWORD PTR [esi],ebx
c001814b:	e9 df 00 00 00       	jmp    c001822f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018150:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0018155:	75 6e                	jne    c00181c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c0018157:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001815e:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0018162:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0018166:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001816e:	74 17                	je     c0018187 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0018170:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018178:	74 0d                	je     c0018187 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001817a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001817e:	83 e8 04             	sub    eax,0x4
c0018181:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018185:	76 17                	jbe    c001819e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0018187:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001818c:	74 65                	je     c00181f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001818e:	83 ec 0c             	sub    esp,0xc
c0018191:	68 44 2b 02 c0       	push   0xc0022b44
c0018196:	e8 71 d7 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001819b:	83 c4 10             	add    esp,0x10
c001819e:	8b 16                	mov    edx,DWORD PTR [esi]
c00181a0:	84 db                	test   bl,bl
c00181a2:	74 13                	je     c00181b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00181a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a8:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00181af:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00181b3:	01 d0                	add    eax,edx
c00181b5:	eb 06                	jmp    c00181bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c00181b7:	89 d0                	mov    eax,edx
c00181b9:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00181bd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00181c1:	89 06                	mov    DWORD PTR [esi],eax
c00181c3:	eb 6a                	jmp    c001822f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00181c5:	50                   	push   eax
c00181c6:	50                   	push   eax
c00181c7:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181cc:	50                   	push   eax
c00181cd:	68 60 2b 02 c0       	push   0xc0022b60
c00181d2:	e8 6a 6f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00181d7:	83 c4 10             	add    esp,0x10
c00181da:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181df:	74 12                	je     c00181f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00181e1:	83 ec 0c             	sub    esp,0xc
c00181e4:	68 6b 2b 02 c0       	push   0xc0022b6b
c00181e9:	e8 1e d7 ff ff       	call   c001590c <Krnl::panic(char const*)>
c00181ee:	83 c4 10             	add    esp,0x10
c00181f1:	eb 3c                	jmp    c001822f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00181f3:	83 ec 0c             	sub    esp,0xc
c00181f6:	57                   	push   edi
c00181f7:	e8 3e 75 ff ff       	call   c000f73a <File::close()>
c00181fc:	8b 07                	mov    eax,DWORD PTR [edi]
c00181fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018201:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018204:	59                   	pop    ecx
c0018205:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018209:	e8 d5 3d ff ff       	call   c000bfe3 <free>
c001820e:	5b                   	pop    ebx
c001820f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018213:	e8 cb 3d ff ff       	call   c000bfe3 <free>
c0018218:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001821b:	e8 c3 3d ff ff       	call   c000bfe3 <free>
c0018220:	5e                   	pop    esi
c0018221:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018225:	e8 b9 3d ff ff       	call   c000bfe3 <free>
c001822a:	83 c4 10             	add    esp,0x10
c001822d:	eb 21                	jmp    c0018250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001822f:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0018233:	e9 2c fd ff ff       	jmp    c0017f64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0018238:	83 ec 0c             	sub    esp,0xc
c001823b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001823f:	e8 9f 3d ff ff       	call   c000bfe3 <free>
c0018244:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0018248:	83 c4 10             	add    esp,0x10
c001824b:	e9 a2 fc ff ff       	jmp    c0017ef2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0018250:	31 c0                	xor    eax,eax
c0018252:	eb 32                	jmp    c0018286 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c0018254:	83 ec 0c             	sub    esp,0xc
c0018257:	57                   	push   edi
c0018258:	e8 dd 74 ff ff       	call   c000f73a <File::close()>
c001825d:	8b 07                	mov    eax,DWORD PTR [edi]
c001825f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018262:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018265:	58                   	pop    eax
c0018266:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001826a:	e8 74 3d ff ff       	call   c000bfe3 <free>
c001826f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018272:	e8 6c 3d ff ff       	call   c000bfe3 <free>
c0018277:	5a                   	pop    edx
c0018278:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001827c:	e8 62 3d ff ff       	call   c000bfe3 <free>
c0018281:	83 c4 10             	add    esp,0x10
c0018284:	b0 01                	mov    al,0x1
c0018286:	81 c4 5c 03 00 00    	add    esp,0x35c
c001828c:	5b                   	pop    ebx
c001828d:	5e                   	pop    esi
c001828e:	5f                   	pop    edi
c001828f:	5d                   	pop    ebp
c0018290:	c3                   	ret    

c0018291 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0018291:	56                   	push   esi
c0018292:	31 d2                	xor    edx,edx
c0018294:	53                   	push   ebx
c0018295:	8b 1d 80 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025180
c001829b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001829f:	39 d3                	cmp    ebx,edx
c00182a1:	7e 1b                	jle    c00182be <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00182a3:	8b 04 95 a0 53 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdac60]
c00182aa:	39 c8                	cmp    eax,ecx
c00182ac:	77 0d                	ja     c00182bb <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00182ae:	8b 34 95 a0 51 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdae60]
c00182b5:	01 c6                	add    esi,eax
c00182b7:	39 ce                	cmp    esi,ecx
c00182b9:	77 05                	ja     c00182c0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00182bb:	42                   	inc    edx
c00182bc:	eb e1                	jmp    c001829f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00182be:	31 c0                	xor    eax,eax
c00182c0:	5b                   	pop    ebx
c00182c1:	5e                   	pop    esi
c00182c2:	c3                   	ret    

c00182c3 <Thr::getDriverNameFromAddress(unsigned long)>:
c00182c3:	53                   	push   ebx
c00182c4:	31 c0                	xor    eax,eax
c00182c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00182ca:	8b 1d 80 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025180
c00182d0:	39 c3                	cmp    ebx,eax
c00182d2:	7e 22                	jle    c00182f6 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00182d4:	8b 14 85 a0 53 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdac60]
c00182db:	39 ca                	cmp    edx,ecx
c00182dd:	77 14                	ja     c00182f3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00182df:	03 14 85 a0 51 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdae60]
c00182e6:	39 ca                	cmp    edx,ecx
c00182e8:	76 09                	jbe    c00182f3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00182ea:	8b 04 85 a0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa60]
c00182f1:	eb 05                	jmp    c00182f8 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00182f3:	40                   	inc    eax
c00182f4:	eb da                	jmp    c00182d0 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00182f6:	31 c0                	xor    eax,eax
c00182f8:	5b                   	pop    ebx
c00182f9:	c3                   	ret    

c00182fa <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00182fa:	53                   	push   ebx
c00182fb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00182ff:	53                   	push   ebx
c0018300:	e8 8c ff ff ff       	call   c0018291 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018305:	5a                   	pop    edx
c0018306:	31 d2                	xor    edx,edx
c0018308:	85 c0                	test   eax,eax
c001830a:	74 04                	je     c0018310 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001830c:	89 da                	mov    edx,ebx
c001830e:	29 c2                	sub    edx,eax
c0018310:	89 d0                	mov    eax,edx
c0018312:	5b                   	pop    ebx
c0018313:	c3                   	ret    

c0018314 <Thr::loadDLL(char const*, bool)>:
c0018314:	55                   	push   ebp
c0018315:	57                   	push   edi
c0018316:	56                   	push   esi
c0018317:	53                   	push   ebx
c0018318:	81 ec 34 01 00 00    	sub    esp,0x134
c001831e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018325:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001832c:	56                   	push   esi
c001832d:	68 83 2b 02 c0       	push   0xc0022b83
c0018332:	e8 0a 6e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0018337:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001833e:	e8 c9 6c ff ff       	call   c000f00c <operator new(unsigned long)>
c0018343:	83 c4 0c             	add    esp,0xc
c0018346:	89 c3                	mov    ebx,eax
c0018348:	ff 35 74 59 02 c0    	push   DWORD PTR ds:0xc0025974
c001834e:	56                   	push   esi
c001834f:	50                   	push   eax
c0018350:	e8 23 73 ff ff       	call   c000f678 <File::File(char const*, Process*)>
c0018355:	83 c4 0c             	add    esp,0xc
c0018358:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001835c:	50                   	push   eax
c001835d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018361:	50                   	push   eax
c0018362:	53                   	push   ebx
c0018363:	e8 20 76 ff ff       	call   c000f988 <File::stat(unsigned long long*, bool*)>
c0018368:	8b 03                	mov    eax,DWORD PTR [ebx]
c001836a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001836d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018370:	83 c4 10             	add    esp,0x10
c0018373:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0018378:	75 0a                	jne    c0018384 <Thr::loadDLL(char const*, bool)+0x70>
c001837a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001837e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0018382:	75 3c                	jne    c00183c0 <Thr::loadDLL(char const*, bool)+0xac>
c0018384:	89 e8                	mov    eax,ebp
c0018386:	84 c0                	test   al,al
c0018388:	0f 84 3d 01 00 00    	je     c00184cb <Thr::loadDLL(char const*, bool)+0x1b7>
c001838e:	50                   	push   eax
c001838f:	50                   	push   eax
c0018390:	68 94 2b 02 c0       	push   0xc0022b94
c0018395:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0018399:	53                   	push   ebx
c001839a:	e8 ba 83 fe ff       	call   c0000759 <strcpy>
c001839f:	58                   	pop    eax
c00183a0:	5a                   	pop    edx
c00183a1:	56                   	push   esi
c00183a2:	53                   	push   ebx
c00183a3:	e8 68 84 fe ff       	call   c0000810 <strcat>
c00183a8:	59                   	pop    ecx
c00183a9:	5f                   	pop    edi
c00183aa:	68 a7 2b 02 c0       	push   0xc0022ba7
c00183af:	53                   	push   ebx
c00183b0:	e8 5b 84 fe ff       	call   c0000810 <strcat>
c00183b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183b8:	e8 4f d5 ff ff       	call   c001590c <Krnl::panic(char const*)>
c00183bd:	83 c4 10             	add    esp,0x10
c00183c0:	e8 ee 5e ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c00183c5:	51                   	push   ecx
c00183c6:	6a 03                	push   0x3
c00183c8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00183cc:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00183d0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c00183d6:	83 d3 00             	adc    ebx,0x0
c00183d9:	89 ca                	mov    edx,ecx
c00183db:	89 d1                	mov    ecx,edx
c00183dd:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c00183e1:	51                   	push   ecx
c00183e2:	50                   	push   eax
c00183e3:	e8 0c 65 ff ff       	call   c000e8f4 <VAS::allocatePages(int, int)>
c00183e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00183eb:	89 c3                	mov    ebx,eax
c00183ed:	e8 e5 82 fe ff       	call   c00006d7 <strlen>
c00183f2:	8b 3d 80 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025180
c00183f8:	40                   	inc    eax
c00183f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00183fc:	e8 d2 3b ff ff       	call   c000bfd3 <malloc>
c0018401:	89 04 bd a0 55 02 c0 	mov    DWORD PTR [edi*4-0x3ffdaa60],eax
c0018408:	5f                   	pop    edi
c0018409:	58                   	pop    eax
c001840a:	a1 80 51 02 c0       	mov    eax,ds:0xc0025180
c001840f:	56                   	push   esi
c0018410:	ff 34 85 a0 55 02 c0 	push   DWORD PTR [eax*4-0x3ffdaa60]
c0018417:	e8 3d 83 fe ff       	call   c0000759 <strcpy>
c001841c:	a1 80 51 02 c0       	mov    eax,ds:0xc0025180
c0018421:	8d 50 01             	lea    edx,[eax+0x1]
c0018424:	89 1c 85 a0 53 02 c0 	mov    DWORD PTR [eax*4-0x3ffdac60],ebx
c001842b:	89 15 80 51 02 c0    	mov    DWORD PTR ds:0xc0025180,edx
c0018431:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018435:	83 c4 0c             	add    esp,0xc
c0018438:	89 14 85 a0 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdae60],edx
c001843f:	6a 01                	push   0x1
c0018441:	53                   	push   ebx
c0018442:	56                   	push   esi
c0018443:	e8 ab f6 ff ff       	call   c0017af3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0018448:	83 c4 10             	add    esp,0x10
c001844b:	89 c7                	mov    edi,eax
c001844d:	fe c8                	dec    al
c001844f:	74 16                	je     c0018467 <Thr::loadDLL(char const*, bool)+0x153>
c0018451:	89 e8                	mov    eax,ebp
c0018453:	84 c0                	test   al,al
c0018455:	74 10                	je     c0018467 <Thr::loadDLL(char const*, bool)+0x153>
c0018457:	83 ec 0c             	sub    esp,0xc
c001845a:	68 a9 2b 02 c0       	push   0xc0022ba9
c001845f:	e8 a8 d4 ff ff       	call   c001590c <Krnl::panic(char const*)>
c0018464:	83 c4 10             	add    esp,0x10
c0018467:	31 f6                	xor    esi,esi
c0018469:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001846d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018471:	05 ff 0f 00 00       	add    eax,0xfff
c0018476:	83 d2 00             	adc    edx,0x0
c0018479:	0f ac d0 0c          	shrd   eax,edx,0xc
c001847d:	c1 ea 0c             	shr    edx,0xc
c0018480:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018484:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018488:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001848c:	ba 00 00 00 00       	mov    edx,0x0
c0018491:	89 d0                	mov    eax,edx
c0018493:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0018497:	73 2c                	jae    c00184c5 <Thr::loadDLL(char const*, bool)+0x1b1>
c0018499:	e8 15 5e ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c001849e:	89 f5                	mov    ebp,esi
c00184a0:	c1 e5 0c             	shl    ebp,0xc
c00184a3:	52                   	push   edx
c00184a4:	52                   	push   edx
c00184a5:	01 dd                	add    ebp,ebx
c00184a7:	55                   	push   ebp
c00184a8:	50                   	push   eax
c00184a9:	e8 a6 5f ff ff       	call   c000e454 <VAS::getPageTableEntry(unsigned long)>
c00184ae:	83 c4 10             	add    esp,0x10
c00184b1:	f6 00 60             	test   BYTE PTR [eax],0x60
c00184b4:	75 0c                	jne    c00184c2 <Thr::loadDLL(char const*, bool)+0x1ae>
c00184b6:	83 ec 0c             	sub    esp,0xc
c00184b9:	55                   	push   ebp
c00184ba:	e8 5d 40 ff ff       	call   c000c51c <Phys::freePage(unsigned long)>
c00184bf:	83 c4 10             	add    esp,0x10
c00184c2:	46                   	inc    esi
c00184c3:	eb a4                	jmp    c0018469 <Thr::loadDLL(char const*, bool)+0x155>
c00184c5:	89 f8                	mov    eax,edi
c00184c7:	84 c0                	test   al,al
c00184c9:	75 02                	jne    c00184cd <Thr::loadDLL(char const*, bool)+0x1b9>
c00184cb:	31 db                	xor    ebx,ebx
c00184cd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00184d3:	89 d8                	mov    eax,ebx
c00184d5:	5b                   	pop    ebx
c00184d6:	5e                   	pop    esi
c00184d7:	5f                   	pop    edi
c00184d8:	5d                   	pop    ebp
c00184d9:	c3                   	ret    

c00184da <Thr::executeDLL(unsigned long, void*)>:
c00184da:	56                   	push   esi
c00184db:	53                   	push   ebx
c00184dc:	51                   	push   ecx
c00184dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00184e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00184e5:	85 db                	test   ebx,ebx
c00184e7:	75 10                	jne    c00184f9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00184e9:	83 ec 0c             	sub    esp,0xc
c00184ec:	68 c8 2b 02 c0       	push   0xc0022bc8
c00184f1:	e8 16 d4 ff ff       	call   c001590c <Krnl::panic(char const*)>
c00184f6:	83 c4 10             	add    esp,0x10
c00184f9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00184fd:	5a                   	pop    edx
c00184fe:	89 d8                	mov    eax,ebx
c0018500:	5b                   	pop    ebx
c0018501:	5e                   	pop    esi
c0018502:	ff e0                	jmp    eax

c0018504 <changeTSS>:
c0018504:	83 ec 0c             	sub    esp,0xc
c0018507:	e8 94 c2 ff ff       	call   c00147a0 <thisCPU()>
c001850c:	52                   	push   edx
c001850d:	05 7c 11 00 00       	add    eax,0x117c
c0018512:	52                   	push   edx
c0018513:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018519:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001851c:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0018521:	c1 e1 15             	shl    ecx,0x15
c0018524:	29 ca                	sub    edx,ecx
c0018526:	52                   	push   edx
c0018527:	50                   	push   eax
c0018528:	e8 97 55 ff ff       	call   c000dac4 <TSS::setESP(unsigned long)>
c001852d:	83 c4 1c             	add    esp,0x1c
c0018530:	c3                   	ret    
c0018531:	90                   	nop

c0018532 <Process::addArgs(char**)>:
c0018532:	57                   	push   edi
c0018533:	56                   	push   esi
c0018534:	53                   	push   ebx
c0018535:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018539:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001853d:	85 ff                	test   edi,edi
c001853f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0018549:	74 45                	je     c0018590 <Process::addArgs(char**)+0x5e>
c001854b:	8b 07                	mov    eax,DWORD PTR [edi]
c001854d:	85 c0                	test   eax,eax
c001854f:	74 3f                	je     c0018590 <Process::addArgs(char**)+0x5e>
c0018551:	31 db                	xor    ebx,ebx
c0018553:	83 ec 0c             	sub    esp,0xc
c0018556:	50                   	push   eax
c0018557:	e8 7b 81 fe ff       	call   c00006d7 <strlen>
c001855c:	40                   	inc    eax
c001855d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018560:	e8 6e 3a ff ff       	call   c000bfd3 <malloc>
c0018565:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001856c:	5a                   	pop    edx
c001856d:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0018570:	59                   	pop    ecx
c0018571:	43                   	inc    ebx
c0018572:	52                   	push   edx
c0018573:	50                   	push   eax
c0018574:	e8 e0 81 fe ff       	call   c0000759 <strcpy>
c0018579:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c001857f:	83 c4 10             	add    esp,0x10
c0018582:	41                   	inc    ecx
c0018583:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c0018589:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001858c:	85 c0                	test   eax,eax
c001858e:	75 c3                	jne    c0018553 <Process::addArgs(char**)+0x21>
c0018590:	5b                   	pop    ebx
c0018591:	5e                   	pop    esi
c0018592:	5f                   	pop    edi
c0018593:	c3                   	ret    

c0018594 <Process::Process(char const*, Process*, char**)>:
c0018594:	56                   	push   esi
c0018595:	53                   	push   ebx
c0018596:	83 ec 14             	sub    esp,0x14
c0018599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001859d:	05 0c 02 00 00       	add    eax,0x20c
c00185a2:	bb 07 00 00 00       	mov    ebx,0x7
c00185a7:	89 c6                	mov    esi,eax
c00185a9:	85 db                	test   ebx,ebx
c00185ab:	78 12                	js     c00185bf <Process::Process(char const*, Process*, char**)+0x2b>
c00185ad:	83 ec 0c             	sub    esp,0xc
c00185b0:	56                   	push   esi
c00185b1:	e8 24 77 00 00       	call   c001fcda <ThreadControlBlock::ThreadControlBlock()>
c00185b6:	83 c4 10             	add    esp,0x10
c00185b9:	83 c6 63             	add    esi,0x63
c00185bc:	4b                   	dec    ebx
c00185bd:	eb ea                	jmp    c00185a9 <Process::Process(char const*, Process*, char**)+0x15>
c00185bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185c3:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00185ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185ce:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00185d7:	a1 44 3f 02 c0       	mov    eax,ds:0xc0023f44
c00185dc:	8d 50 01             	lea    edx,[eax+0x1]
c00185df:	89 15 44 3f 02 c0    	mov    DWORD PTR ds:0xc0023f44,edx
c00185e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00185e9:	89 02                	mov    DWORD PTR [edx],eax
c00185eb:	83 ec 0c             	sub    esp,0xc
c00185ee:	6a 10                	push   0x10
c00185f0:	e8 17 6a ff ff       	call   c000f00c <operator new(unsigned long)>
c00185f5:	83 c4 10             	add    esp,0x10
c00185f8:	89 c3                	mov    ebx,eax
c00185fa:	83 ec 08             	sub    esp,0x8
c00185fd:	6a 00                	push   0x0
c00185ff:	53                   	push   ebx
c0018600:	e8 9b 66 ff ff       	call   c000eca0 <VAS::VAS(bool)>
c0018605:	83 c4 10             	add    esp,0x10
c0018608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001860c:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018616:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018624:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018628:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001862e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018632:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018638:	85 c0                	test   eax,eax
c001863a:	74 42                	je     c001867e <Process::Process(char const*, Process*, char**)+0xea>
c001863c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018640:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018646:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001864c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018650:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001865a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018660:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001866a:	05 0c 01 00 00       	add    eax,0x10c
c001866f:	83 ec 08             	sub    esp,0x8
c0018672:	52                   	push   edx
c0018673:	50                   	push   eax
c0018674:	e8 e0 80 fe ff       	call   c0000759 <strcpy>
c0018679:	83 c4 10             	add    esp,0x10
c001867c:	eb 5c                	jmp    c00186da <Process::Process(char const*, Process*, char**)+0x146>
c001867e:	83 ec 0c             	sub    esp,0xc
c0018681:	68 60 12 00 00       	push   0x1260
c0018686:	e8 81 69 ff ff       	call   c000f00c <operator new(unsigned long)>
c001868b:	83 c4 10             	add    esp,0x10
c001868e:	89 c3                	mov    ebx,eax
c0018690:	83 ec 08             	sub    esp,0x8
c0018693:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018697:	53                   	push   ebx
c0018698:	e8 25 51 ff ff       	call   c000d7c2 <VgaText::VgaText(char const*)>
c001869d:	83 c4 10             	add    esp,0x10
c00186a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186a4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00186aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186ae:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00186b4:	83 ec 0c             	sub    esp,0xc
c00186b7:	50                   	push   eax
c00186b8:	e8 04 45 ff ff       	call   c000cbc1 <addToTerminalCycle(VgaText*)>
c00186bd:	83 c4 10             	add    esp,0x10
c00186c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c4:	05 0c 01 00 00       	add    eax,0x10c
c00186c9:	83 ec 08             	sub    esp,0x8
c00186cc:	68 f2 2b 02 c0       	push   0xc0022bf2
c00186d1:	50                   	push   eax
c00186d2:	e8 82 80 fe ff       	call   c0000759 <strcpy>
c00186d7:	83 c4 10             	add    esp,0x10
c00186da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186de:	83 c0 0c             	add    eax,0xc
c00186e1:	83 ec 08             	sub    esp,0x8
c00186e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186e8:	50                   	push   eax
c00186e9:	e8 6b 80 fe ff       	call   c0000759 <strcpy>
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	83 ec 08             	sub    esp,0x8
c00186f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00186f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186fc:	e8 31 fe ff ff       	call   c0018532 <Process::addArgs(char**)>
c0018701:	83 c4 10             	add    esp,0x10
c0018704:	83 ec 08             	sub    esp,0x8
c0018707:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001870b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001870f:	e8 a6 ee ff ff       	call   c00175ba <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001871b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001871f:	83 f0 01             	xor    eax,0x1
c0018722:	88 c2                	mov    dl,al
c0018724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018728:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001872e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018732:	25 ff 00 00 00       	and    eax,0xff
c0018737:	83 ec 08             	sub    esp,0x8
c001873a:	50                   	push   eax
c001873b:	68 f0 2c 02 c0       	push   0xc0022cf0
c0018740:	e8 fc 69 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0018745:	83 c4 10             	add    esp,0x10
c0018748:	90                   	nop
c0018749:	83 c4 14             	add    esp,0x14
c001874c:	5b                   	pop    ebx
c001874d:	5e                   	pop    esi
c001874e:	c3                   	ret    
c001874f:	90                   	nop

c0018750 <Process::Process(bool, char const*, Process*, char**)>:
c0018750:	56                   	push   esi
c0018751:	53                   	push   ebx
c0018752:	83 ec 14             	sub    esp,0x14
c0018755:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018759:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001875d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018761:	05 0c 02 00 00       	add    eax,0x20c
c0018766:	bb 07 00 00 00       	mov    ebx,0x7
c001876b:	89 c6                	mov    esi,eax
c001876d:	85 db                	test   ebx,ebx
c001876f:	78 12                	js     c0018783 <Process::Process(bool, char const*, Process*, char**)+0x33>
c0018771:	83 ec 0c             	sub    esp,0xc
c0018774:	56                   	push   esi
c0018775:	e8 60 75 00 00       	call   c001fcda <ThreadControlBlock::ThreadControlBlock()>
c001877a:	83 c4 10             	add    esp,0x10
c001877d:	83 c6 63             	add    esi,0x63
c0018780:	4b                   	dec    ebx
c0018781:	eb ea                	jmp    c001876d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0018783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018787:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001878e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018792:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001879b:	a1 44 3f 02 c0       	mov    eax,ds:0xc0023f44
c00187a0:	8d 50 01             	lea    edx,[eax+0x1]
c00187a3:	89 15 44 3f 02 c0    	mov    DWORD PTR ds:0xc0023f44,edx
c00187a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187ad:	89 02                	mov    DWORD PTR [edx],eax
c00187af:	83 ec 0c             	sub    esp,0xc
c00187b2:	6a 10                	push   0x10
c00187b4:	e8 53 68 ff ff       	call   c000f00c <operator new(unsigned long)>
c00187b9:	83 c4 10             	add    esp,0x10
c00187bc:	89 c3                	mov    ebx,eax
c00187be:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00187c2:	25 ff 00 00 00       	and    eax,0xff
c00187c7:	83 ec 08             	sub    esp,0x8
c00187ca:	50                   	push   eax
c00187cb:	53                   	push   ebx
c00187cc:	e8 cf 64 ff ff       	call   c000eca0 <VAS::VAS(bool)>
c00187d1:	83 c4 10             	add    esp,0x10
c00187d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187d8:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c00187de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187e2:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00187ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00187f4:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c00187fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fe:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018804:	85 c0                	test   eax,eax
c0018806:	74 42                	je     c001884a <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001880c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018812:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001881c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018826:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001882c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018836:	05 0c 01 00 00       	add    eax,0x10c
c001883b:	83 ec 08             	sub    esp,0x8
c001883e:	52                   	push   edx
c001883f:	50                   	push   eax
c0018840:	e8 14 7f fe ff       	call   c0000759 <strcpy>
c0018845:	83 c4 10             	add    esp,0x10
c0018848:	eb 5c                	jmp    c00188a6 <Process::Process(bool, char const*, Process*, char**)+0x156>
c001884a:	83 ec 0c             	sub    esp,0xc
c001884d:	68 60 12 00 00       	push   0x1260
c0018852:	e8 b5 67 ff ff       	call   c000f00c <operator new(unsigned long)>
c0018857:	83 c4 10             	add    esp,0x10
c001885a:	89 c3                	mov    ebx,eax
c001885c:	83 ec 08             	sub    esp,0x8
c001885f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018863:	53                   	push   ebx
c0018864:	e8 59 4f ff ff       	call   c000d7c2 <VgaText::VgaText(char const*)>
c0018869:	83 c4 10             	add    esp,0x10
c001886c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018870:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0018876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001887a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018880:	83 ec 0c             	sub    esp,0xc
c0018883:	50                   	push   eax
c0018884:	e8 38 43 ff ff       	call   c000cbc1 <addToTerminalCycle(VgaText*)>
c0018889:	83 c4 10             	add    esp,0x10
c001888c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018890:	05 0c 01 00 00       	add    eax,0x10c
c0018895:	83 ec 08             	sub    esp,0x8
c0018898:	68 f2 2b 02 c0       	push   0xc0022bf2
c001889d:	50                   	push   eax
c001889e:	e8 b6 7e fe ff       	call   c0000759 <strcpy>
c00188a3:	83 c4 10             	add    esp,0x10
c00188a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188aa:	83 c0 0c             	add    eax,0xc
c00188ad:	83 ec 08             	sub    esp,0x8
c00188b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188b4:	50                   	push   eax
c00188b5:	e8 9f 7e fe ff       	call   c0000759 <strcpy>
c00188ba:	83 c4 10             	add    esp,0x10
c00188bd:	83 ec 08             	sub    esp,0x8
c00188c0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00188c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188c8:	e8 65 fc ff ff       	call   c0018532 <Process::addArgs(char**)>
c00188cd:	83 c4 10             	add    esp,0x10
c00188d0:	90                   	nop
c00188d1:	83 c4 14             	add    esp,0x14
c00188d4:	5b                   	pop    ebx
c00188d5:	5e                   	pop    esi
c00188d6:	c3                   	ret    

c00188d7 <disableIRQs()>:
c00188d7:	fa                   	cli    
c00188d8:	a1 4c 59 02 c0       	mov    eax,ds:0xc002594c
c00188dd:	40                   	inc    eax
c00188de:	a3 4c 59 02 c0       	mov    ds:0xc002594c,eax
c00188e3:	c3                   	ret    

c00188e4 <getIRQNestingLevel()>:
c00188e4:	a1 4c 59 02 c0       	mov    eax,ds:0xc002594c
c00188e9:	c3                   	ret    

c00188ea <enableIRQs()>:
c00188ea:	a1 4c 59 02 c0       	mov    eax,ds:0xc002594c
c00188ef:	48                   	dec    eax
c00188f0:	a3 4c 59 02 c0       	mov    ds:0xc002594c,eax
c00188f5:	75 01                	jne    c00188f8 <enableIRQs()+0xe>
c00188f7:	fb                   	sti    
c00188f8:	c3                   	ret    

c00188f9 <lockScheduler()>:
c00188f9:	eb dc                	jmp    c00188d7 <disableIRQs()>

c00188fb <unlockScheduler()>:
c00188fb:	eb ed                	jmp    c00188ea <enableIRQs()>

c00188fd <userModeEntryPoint(void*)>:
c00188fd:	83 ec 0c             	sub    esp,0xc
c0018900:	e8 f6 ff ff ff       	call   c00188fb <unlockScheduler()>
c0018905:	fb                   	sti    
c0018906:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001890b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001890e:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018914:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018918:	83 c4 0c             	add    esp,0xc
c001891b:	e9 78 79 fe ff       	jmp    c0000298 <goToUsermode>

c0018920 <lockStuff()>:
c0018920:	e8 b2 ff ff ff       	call   c00188d7 <disableIRQs()>
c0018925:	a1 48 59 02 c0       	mov    eax,ds:0xc0025948
c001892a:	40                   	inc    eax
c001892b:	a3 48 59 02 c0       	mov    ds:0xc0025948,eax
c0018930:	c3                   	ret    

c0018931 <taskStartupFunction>:
c0018931:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018936:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018939:	c3                   	ret    

c001893a <updateTimeUsed()>:
c001893a:	57                   	push   edi
c001893b:	56                   	push   esi
c001893c:	53                   	push   ebx
c001893d:	e8 5e be ff ff       	call   c00147a0 <thisCPU()>
c0018942:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018949:	74 49                	je     c0018994 <updateTimeUsed()+0x5a>
c001894b:	0f 31                	rdtsc  
c001894d:	89 c1                	mov    ecx,eax
c001894f:	a3 88 59 02 c0       	mov    ds:0xc0025988,eax
c0018954:	2b 0d 78 59 02 c0    	sub    ecx,DWORD PTR ds:0xc0025978
c001895a:	a3 78 59 02 c0       	mov    ds:0xc0025978,eax
c001895f:	89 0d 80 59 02 c0    	mov    DWORD PTR ds:0xc0025980,ecx
c0018965:	89 d3                	mov    ebx,edx
c0018967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001896c:	89 15 8c 59 02 c0    	mov    DWORD PTR ds:0xc002598c,edx
c0018972:	1b 1d 7c 59 02 c0    	sbb    ebx,DWORD PTR ds:0xc002597c
c0018978:	89 15 7c 59 02 c0    	mov    DWORD PTR ds:0xc002597c,edx
c001897e:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018981:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018984:	01 f1                	add    ecx,esi
c0018986:	89 1d 84 59 02 c0    	mov    DWORD PTR ds:0xc0025984,ebx
c001898c:	11 fb                	adc    ebx,edi
c001898e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018991:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018994:	5b                   	pop    ebx
c0018995:	5e                   	pop    esi
c0018996:	5f                   	pop    edi
c0018997:	c3                   	ret    

c0018998 <switchToThread(ThreadControlBlock*)>:
c0018998:	53                   	push   ebx
c0018999:	83 ec 08             	sub    esp,0x8
c001899c:	a1 48 59 02 c0       	mov    eax,ds:0xc0025948
c00189a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00189a5:	85 c0                	test   eax,eax
c00189a7:	75 36                	jne    c00189df <switchToThread(ThreadControlBlock*)+0x47>
c00189a9:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c00189ac:	80 fa ff             	cmp    dl,0xff
c00189af:	74 2a                	je     c00189db <switchToThread(ThreadControlBlock*)+0x43>
c00189b1:	81 e2 ff 00 00 00    	and    edx,0xff
c00189b7:	b8 84 03 00 00       	mov    eax,0x384
c00189bc:	29 d0                	sub    eax,edx
c00189be:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00189c1:	c1 e0 10             	shl    eax,0x10
c00189c4:	01 c8                	add    eax,ecx
c00189c6:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00189c9:	e8 6c ff ff ff       	call   c001893a <updateTimeUsed()>
c00189ce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00189d2:	83 c4 08             	add    esp,0x8
c00189d5:	5b                   	pop    ebx
c00189d6:	e9 f6 78 fe ff       	jmp    c00002d1 <switchToThreadASM>
c00189db:	31 c0                	xor    eax,eax
c00189dd:	eb e7                	jmp    c00189c6 <switchToThread(ThreadControlBlock*)+0x2e>
c00189df:	c7 05 44 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025944,0x1
c00189e9:	83 c4 08             	add    esp,0x8
c00189ec:	5b                   	pop    ebx
c00189ed:	c3                   	ret    

c00189ee <Semaphore::Semaphore(int)>:
c00189ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189f6:	89 10                	mov    DWORD PTR [eax],edx
c00189f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189fc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018a03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a12:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018a19:	90                   	nop
c0018a1a:	c3                   	ret    
c0018a1b:	90                   	nop

c0018a1c <Mutex::Mutex()>:
c0018a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a20:	6a 01                	push   0x1
c0018a22:	50                   	push   eax
c0018a23:	e8 c6 ff ff ff       	call   c00189ee <Semaphore::Semaphore(int)>
c0018a28:	83 c4 08             	add    esp,0x8
c0018a2b:	90                   	nop
c0018a2c:	c3                   	ret    
c0018a2d:	90                   	nop

c0018a2e <Process::createThread(void (*)(void*), void*, int)>:
c0018a2e:	55                   	push   ebp
c0018a2f:	31 c9                	xor    ecx,ecx
c0018a31:	57                   	push   edi
c0018a32:	56                   	push   esi
c0018a33:	53                   	push   ebx
c0018a34:	83 ec 1c             	sub    esp,0x1c
c0018a37:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018a3b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018a42:	89 f2                	mov    edx,esi
c0018a44:	31 c0                	xor    eax,eax
c0018a46:	66 89 d0             	mov    ax,dx
c0018a49:	83 e2 01             	and    edx,0x1
c0018a4c:	74 14                	je     c0018a62 <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018a4e:	d1 f8                	sar    eax,1
c0018a50:	41                   	inc    ecx
c0018a51:	89 c2                	mov    edx,eax
c0018a53:	83 f9 10             	cmp    ecx,0x10
c0018a56:	75 ec                	jne    c0018a44 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018a58:	83 c4 1c             	add    esp,0x1c
c0018a5b:	31 c0                	xor    eax,eax
c0018a5d:	5b                   	pop    ebx
c0018a5e:	5e                   	pop    esi
c0018a5f:	5f                   	pop    edi
c0018a60:	5d                   	pop    ebp
c0018a61:	c3                   	ret    
c0018a62:	b8 01 00 00 00       	mov    eax,0x1
c0018a67:	d3 e0                	shl    eax,cl
c0018a69:	09 c6                	or     esi,eax
c0018a6b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018a71:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018a78:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018a7b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018a7e:	89 f0                	mov    eax,esi
c0018a80:	c1 e0 05             	shl    eax,0x5
c0018a83:	01 c6                	add    esi,eax
c0018a85:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018a88:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018a8e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018a92:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018a98:	89 ca                	mov    edx,ecx
c0018a9a:	f7 da                	neg    edx
c0018a9c:	c1 e2 15             	shl    edx,0x15
c0018a9f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018aa5:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018aab:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018ab1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018ab7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018abb:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018ac1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018ac5:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018acf:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018ad5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018adf:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018ae9:	52                   	push   edx
c0018aea:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018af1:	52                   	push   edx
c0018af2:	50                   	push   eax
c0018af3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018af7:	68 68 59 02 c0       	push   0xc0025968
c0018afc:	e8 31 70 00 00       	call   c001fb32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b01:	83 c4 10             	add    esp,0x10
c0018b04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b08:	83 c4 1c             	add    esp,0x1c
c0018b0b:	5b                   	pop    ebx
c0018b0c:	5e                   	pop    esi
c0018b0d:	5f                   	pop    edi
c0018b0e:	5d                   	pop    ebp
c0018b0f:	c3                   	ret    

c0018b10 <Process::createUserThread()>:
c0018b10:	83 ec 0c             	sub    esp,0xc
c0018b13:	68 80 00 00 00       	push   0x80
c0018b18:	6a 00                	push   0x0
c0018b1a:	68 fd 88 01 c0       	push   0xc00188fd
c0018b1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b23:	50                   	push   eax
c0018b24:	e8 05 ff ff ff       	call   c0018a2e <Process::createThread(void (*)(void*), void*, int)>
c0018b29:	83 c4 1c             	add    esp,0x1c
c0018b2c:	c3                   	ret    

c0018b2d <setupMultitasking(void (*)())>:
c0018b2d:	56                   	push   esi
c0018b2e:	53                   	push   ebx
c0018b2f:	51                   	push   ecx
c0018b30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b34:	eb 10                	jmp    c0018b46 <setupMultitasking(void (*)())+0x19>
c0018b36:	83 ec 0c             	sub    esp,0xc
c0018b39:	68 68 59 02 c0       	push   0xc0025968
c0018b3e:	e8 41 6f 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b43:	83 c4 10             	add    esp,0x10
c0018b46:	83 ec 0c             	sub    esp,0xc
c0018b49:	68 68 59 02 c0       	push   0xc0025968
c0018b4e:	e8 15 6f 00 00       	call   c001fa68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b53:	83 c4 10             	add    esp,0x10
c0018b56:	84 c0                	test   al,al
c0018b58:	74 dc                	je     c0018b36 <setupMultitasking(void (*)())+0x9>
c0018b5a:	83 ec 0c             	sub    esp,0xc
c0018b5d:	68 3b 07 00 00       	push   0x73b
c0018b62:	e8 a5 64 ff ff       	call   c000f00c <operator new(unsigned long)>
c0018b67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018b6e:	6a 00                	push   0x0
c0018b70:	68 f6 2b 02 c0       	push   0xc0022bf6
c0018b75:	89 c3                	mov    ebx,eax
c0018b77:	6a 01                	push   0x1
c0018b79:	50                   	push   eax
c0018b7a:	e8 d1 fb ff ff       	call   c0018750 <Process::Process(bool, char const*, Process*, char**)>
c0018b7f:	83 c4 18             	add    esp,0x18
c0018b82:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018b88:	89 1d 74 59 02 c0    	mov    DWORD PTR ds:0xc0025974,ebx
c0018b8e:	50                   	push   eax
c0018b8f:	68 18 2d 02 c0       	push   0xc0022d18
c0018b94:	e8 a8 65 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0018b99:	5a                   	pop    edx
c0018b9a:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018ba0:	51                   	push   ecx
c0018ba1:	e8 8f 47 ff ff       	call   c000d335 <setActiveTerminal(VgaText*)>
c0018ba6:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018bad:	83 c8 01             	or     eax,0x1
c0018bb0:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018bb7:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bbd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018bc0:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018bca:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018bd0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018bda:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018be4:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018bea:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018bf0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018bfa:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018c00:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018c0a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018c14:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018c1a:	58                   	pop    eax
c0018c1b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018c21:	5a                   	pop    edx
c0018c22:	68 f2 2b 02 c0       	push   0xc0022bf2
c0018c27:	50                   	push   eax
c0018c28:	e8 2c 7b fe ff       	call   c0000759 <strcpy>
c0018c2d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018c34:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018c38:	83 c4 14             	add    esp,0x14
c0018c3b:	5b                   	pop    ebx
c0018c3c:	5e                   	pop    esi
c0018c3d:	e9 81 76 fe ff       	jmp    c00002c3 <switchToThreadASMFirstTime>

c0018c42 <schedule()>:
c0018c42:	a1 48 59 02 c0       	mov    eax,ds:0xc0025948
c0018c47:	85 c0                	test   eax,eax
c0018c49:	74 0b                	je     c0018c56 <schedule()+0x14>
c0018c4b:	c7 05 44 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025944,0x1
c0018c55:	c3                   	ret    
c0018c56:	53                   	push   ebx
c0018c57:	83 ec 14             	sub    esp,0x14
c0018c5a:	68 68 59 02 c0       	push   0xc0025968
c0018c5f:	e8 04 6e 00 00       	call   c001fa68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c64:	83 c4 10             	add    esp,0x10
c0018c67:	84 c0                	test   al,al
c0018c69:	75 38                	jne    c0018ca3 <schedule()+0x61>
c0018c6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018c73:	4a                   	dec    edx
c0018c74:	74 32                	je     c0018ca8 <schedule()+0x66>
c0018c76:	83 ec 0c             	sub    esp,0xc
c0018c79:	68 68 59 02 c0       	push   0xc0025968
c0018c7e:	e8 dd 6d 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c83:	89 c3                	mov    ebx,eax
c0018c85:	c7 04 24 68 59 02 c0 	mov    DWORD PTR [esp],0xc0025968
c0018c8c:	e8 f3 6d 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c91:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018c98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c9b:	e8 f8 fc ff ff       	call   c0018998 <switchToThread(ThreadControlBlock*)>
c0018ca0:	83 c4 10             	add    esp,0x10
c0018ca3:	83 c4 08             	add    esp,0x8
c0018ca6:	5b                   	pop    ebx
c0018ca7:	c3                   	ret    
c0018ca8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018caf:	51                   	push   ecx
c0018cb0:	51                   	push   ecx
c0018cb1:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018cb7:	53                   	push   ebx
c0018cb8:	68 68 59 02 c0       	push   0xc0025968
c0018cbd:	e8 70 6e 00 00       	call   c001fb32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018cc2:	83 c4 10             	add    esp,0x10
c0018cc5:	eb af                	jmp    c0018c76 <schedule()+0x34>

c0018cc7 <unlockStuff()>:
c0018cc7:	a1 48 59 02 c0       	mov    eax,ds:0xc0025948
c0018ccc:	48                   	dec    eax
c0018ccd:	a3 48 59 02 c0       	mov    ds:0xc0025948,eax
c0018cd2:	75 09                	jne    c0018cdd <unlockStuff()+0x16>
c0018cd4:	a1 44 59 02 c0       	mov    eax,ds:0xc0025944
c0018cd9:	85 c0                	test   eax,eax
c0018cdb:	75 05                	jne    c0018ce2 <unlockStuff()+0x1b>
c0018cdd:	e9 08 fc ff ff       	jmp    c00188ea <enableIRQs()>
c0018ce2:	83 ec 0c             	sub    esp,0xc
c0018ce5:	c7 05 44 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025944,0x0
c0018cef:	e8 4e ff ff ff       	call   c0018c42 <schedule()>
c0018cf4:	83 c4 0c             	add    esp,0xc
c0018cf7:	e9 ee fb ff ff       	jmp    c00188ea <enableIRQs()>

c0018cfc <Semaphore::tryAcquire()>:
c0018cfc:	83 ec 0c             	sub    esp,0xc
c0018cff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d03:	e8 18 fc ff ff       	call   c0018920 <lockStuff()>
c0018d08:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018d0b:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018d0d:	7c 0b                	jl     c0018d1a <Semaphore::tryAcquire()+0x1e>
c0018d0f:	e8 b3 ff ff ff       	call   c0018cc7 <unlockStuff()>
c0018d14:	31 c0                	xor    eax,eax
c0018d16:	83 c4 0c             	add    esp,0xc
c0018d19:	c3                   	ret    
c0018d1a:	40                   	inc    eax
c0018d1b:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018d1e:	e8 a4 ff ff ff       	call   c0018cc7 <unlockStuff()>
c0018d23:	b0 01                	mov    al,0x1
c0018d25:	83 c4 0c             	add    esp,0xc
c0018d28:	c3                   	ret    
c0018d29:	90                   	nop

c0018d2a <Semaphore::assertLocked(char const*)>:
c0018d2a:	83 ec 0c             	sub    esp,0xc
c0018d2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d31:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018d35:	e8 e6 fb ff ff       	call   c0018920 <lockStuff()>
c0018d3a:	8b 02                	mov    eax,DWORD PTR [edx]
c0018d3c:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018d3f:	7c 05                	jl     c0018d46 <Semaphore::assertLocked(char const*)+0x1c>
c0018d41:	83 c4 0c             	add    esp,0xc
c0018d44:	eb 81                	jmp    c0018cc7 <unlockStuff()>
c0018d46:	83 ec 0c             	sub    esp,0xc
c0018d49:	51                   	push   ecx
c0018d4a:	e8 bd cb ff ff       	call   c001590c <Krnl::panic(char const*)>
c0018d4f:	83 c4 10             	add    esp,0x10
c0018d52:	83 c4 0c             	add    esp,0xc
c0018d55:	e9 6d ff ff ff       	jmp    c0018cc7 <unlockStuff()>

c0018d5a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018d5a:	83 ec 0c             	sub    esp,0xc
c0018d5d:	e8 82 fb ff ff       	call   c00188e4 <getIRQNestingLevel()>
c0018d62:	52                   	push   edx
c0018d63:	52                   	push   edx
c0018d64:	50                   	push   eax
c0018d65:	68 4c 2d 02 c0       	push   0xc0022d4c
c0018d6a:	e8 d2 63 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0018d6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d78:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018d7b:	e8 c2 fe ff ff       	call   c0018c42 <schedule()>
c0018d80:	e8 76 fb ff ff       	call   c00188fb <unlockScheduler()>
c0018d85:	e8 5a fb ff ff       	call   c00188e4 <getIRQNestingLevel()>
c0018d8a:	59                   	pop    ecx
c0018d8b:	5a                   	pop    edx
c0018d8c:	50                   	push   eax
c0018d8d:	68 80 2d 02 c0       	push   0xc0022d80
c0018d92:	e8 aa 63 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0018d97:	83 c4 1c             	add    esp,0x1c
c0018d9a:	c3                   	ret    

c0018d9b <blockTask(TaskState)>:
c0018d9b:	83 ec 0c             	sub    esp,0xc
c0018d9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018da2:	e8 52 fb ff ff       	call   c00188f9 <lockScheduler()>
c0018da7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018daf:	e8 8e fe ff ff       	call   c0018c42 <schedule()>
c0018db4:	83 c4 0c             	add    esp,0xc
c0018db7:	e9 3f fb ff ff       	jmp    c00188fb <unlockScheduler()>

c0018dbc <waitTask(int, int*, int)>:
c0018dbc:	83 ec 18             	sub    esp,0x18
c0018dbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018dc8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018dcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018dcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dd4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018dd7:	6a 07                	push   0x7
c0018dd9:	e8 bd ff ff ff       	call   c0018d9b <blockTask(TaskState)>
c0018dde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018de3:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018de6:	83 c4 10             	add    esp,0x10
c0018de9:	85 d2                	test   edx,edx
c0018deb:	74 0a                	je     c0018df7 <waitTask(int, int*, int)+0x3b>
c0018ded:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018df0:	89 02                	mov    DWORD PTR [edx],eax
c0018df2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018df7:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018dfa:	83 c4 0c             	add    esp,0xc
c0018dfd:	c3                   	ret    

c0018dfe <nanoSleepUntil(unsigned long long)>:
c0018dfe:	53                   	push   ebx
c0018dff:	83 ec 08             	sub    esp,0x8
c0018e02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018e06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018e0a:	3b 0d 90 4b 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024b90
c0018e10:	89 d8                	mov    eax,ebx
c0018e12:	1b 05 94 4b 02 c0    	sbb    eax,DWORD PTR ds:0xc0024b94
c0018e18:	73 05                	jae    c0018e1f <nanoSleepUntil(unsigned long long)+0x21>
c0018e1a:	83 c4 08             	add    esp,0x8
c0018e1d:	5b                   	pop    ebx
c0018e1e:	c3                   	ret    
c0018e1f:	e8 fc fa ff ff       	call   c0018920 <lockStuff()>
c0018e24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e29:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018e2c:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018e2f:	51                   	push   ecx
c0018e30:	51                   	push   ecx
c0018e31:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018e37:	53                   	push   ebx
c0018e38:	68 5c 59 02 c0       	push   0xc002595c
c0018e3d:	e8 f0 6c 00 00       	call   c001fb32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e42:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018e49:	e8 4d ff ff ff       	call   c0018d9b <blockTask(TaskState)>
c0018e4e:	83 c4 18             	add    esp,0x18
c0018e51:	5b                   	pop    ebx
c0018e52:	e9 70 fe ff ff       	jmp    c0018cc7 <unlockStuff()>

c0018e57 <nanoSleep(unsigned long long)>:
c0018e57:	a1 90 4b 02 c0       	mov    eax,ds:0xc0024b90
c0018e5c:	8b 15 94 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b94
c0018e62:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018e66:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018e6a:	eb 92                	jmp    c0018dfe <nanoSleepUntil(unsigned long long)>

c0018e6c <sleep(unsigned long long)>:
c0018e6c:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018e71:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018e79:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018e7d:	01 ca                	add    edx,ecx
c0018e7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018e87:	eb ce                	jmp    c0018e57 <nanoSleep(unsigned long long)>
c0018e89:	90                   	nop

c0018e8a <Semaphore::acquire()>:
c0018e8a:	83 ec 0c             	sub    esp,0xc
c0018e8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e91:	e8 8a fa ff ff       	call   c0018920 <lockStuff()>
c0018e96:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e99:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018e9b:	7d 0c                	jge    c0018ea9 <Semaphore::acquire()+0x1f>
c0018e9d:	40                   	inc    eax
c0018e9e:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018ea1:	83 c4 0c             	add    esp,0xc
c0018ea4:	e9 1e fe ff ff       	jmp    c0018cc7 <unlockStuff()>
c0018ea9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018eae:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018eb5:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0018eb8:	85 c0                	test   eax,eax
c0018eba:	74 29                	je     c0018ee5 <Semaphore::acquire()+0x5b>
c0018ebc:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018ebf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018ec5:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018ec8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ecd:	83 ec 0c             	sub    esp,0xc
c0018ed0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018ed3:	6a 05                	push   0x5
c0018ed5:	e8 c1 fe ff ff       	call   c0018d9b <blockTask(TaskState)>
c0018eda:	83 c4 10             	add    esp,0x10
c0018edd:	83 c4 0c             	add    esp,0xc
c0018ee0:	e9 e2 fd ff ff       	jmp    c0018cc7 <unlockStuff()>
c0018ee5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018eea:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018eed:	eb d9                	jmp    c0018ec8 <Semaphore::acquire()+0x3e>

c0018eef <taskReturned>:
c0018eef:	83 ec 18             	sub    esp,0x18
c0018ef2:	68 b4 2d 02 c0       	push   0xc0022db4
c0018ef7:	e8 10 ca ff ff       	call   c001590c <Krnl::panic(char const*)>
c0018efc:	83 c4 10             	add    esp,0x10
c0018eff:	83 ec 0c             	sub    esp,0xc
c0018f02:	6a 02                	push   0x2
c0018f04:	e8 92 fe ff ff       	call   c0018d9b <blockTask(TaskState)>
c0018f09:	e8 eb f9 ff ff       	call   c00188f9 <lockScheduler()>
c0018f0e:	e8 2f fd ff ff       	call   c0018c42 <schedule()>
c0018f13:	e8 e3 f9 ff ff       	call   c00188fb <unlockScheduler()>
c0018f18:	83 c4 10             	add    esp,0x10
c0018f1b:	eb e2                	jmp    c0018eff <taskReturned+0x10>

c0018f1d <unblockTask(ThreadControlBlock*)>:
c0018f1d:	53                   	push   ebx
c0018f1e:	83 ec 08             	sub    esp,0x8
c0018f21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018f25:	e8 cf f9 ff ff       	call   c00188f9 <lockScheduler()>
c0018f2a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018f2d:	85 c0                	test   eax,eax
c0018f2f:	74 5b                	je     c0018f8c <unblockTask(ThreadControlBlock*)+0x6f>
c0018f31:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018f34:	48                   	dec    eax
c0018f35:	74 30                	je     c0018f67 <unblockTask(ThreadControlBlock*)+0x4a>
c0018f37:	83 ec 0c             	sub    esp,0xc
c0018f3a:	68 68 59 02 c0       	push   0xc0025968
c0018f3f:	e8 1c 6b 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018f44:	83 c4 10             	add    esp,0x10
c0018f47:	85 c0                	test   eax,eax
c0018f49:	75 16                	jne    c0018f61 <unblockTask(ThreadControlBlock*)+0x44>
c0018f4b:	eb 64                	jmp    c0018fb1 <unblockTask(ThreadControlBlock*)+0x94>
c0018f4d:	52                   	push   edx
c0018f4e:	52                   	push   edx
c0018f4f:	50                   	push   eax
c0018f50:	68 68 59 02 c0       	push   0xc0025968
c0018f55:	e8 16 6e 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018f5a:	83 c4 10             	add    esp,0x10
c0018f5d:	85 c0                	test   eax,eax
c0018f5f:	74 50                	je     c0018fb1 <unblockTask(ThreadControlBlock*)+0x94>
c0018f61:	39 c3                	cmp    ebx,eax
c0018f63:	75 e8                	jne    c0018f4d <unblockTask(ThreadControlBlock*)+0x30>
c0018f65:	eb 1c                	jmp    c0018f83 <unblockTask(ThreadControlBlock*)+0x66>
c0018f67:	83 ec 0c             	sub    esp,0xc
c0018f6a:	68 a4 2e 02 c0       	push   0xc0022ea4
c0018f6f:	e8 cd 61 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0018f74:	c7 04 24 30 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e30
c0018f7b:	e8 c1 61 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0018f80:	83 c4 10             	add    esp,0x10
c0018f83:	83 c4 08             	add    esp,0x8
c0018f86:	5b                   	pop    ebx
c0018f87:	e9 6f f9 ff ff       	jmp    c00188fb <unlockScheduler()>
c0018f8c:	83 ec 0c             	sub    esp,0xc
c0018f8f:	68 e8 2d 02 c0       	push   0xc0022de8
c0018f94:	e8 a8 61 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0018f99:	c7 04 24 30 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e30
c0018fa0:	e8 9c 61 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0018fa5:	83 c4 10             	add    esp,0x10
c0018fa8:	83 c4 08             	add    esp,0x8
c0018fab:	5b                   	pop    ebx
c0018fac:	e9 4a f9 ff ff       	jmp    c00188fb <unlockScheduler()>
c0018fb1:	50                   	push   eax
c0018fb2:	50                   	push   eax
c0018fb3:	53                   	push   ebx
c0018fb4:	68 68 59 02 c0       	push   0xc0025968
c0018fb9:	e8 74 6b 00 00       	call   c001fb32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018fbe:	83 c4 10             	add    esp,0x10
c0018fc1:	83 c4 08             	add    esp,0x8
c0018fc4:	5b                   	pop    ebx
c0018fc5:	e9 31 f9 ff ff       	jmp    c00188fb <unlockScheduler()>

c0018fca <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018fca:	55                   	push   ebp
c0018fcb:	57                   	push   edi
c0018fcc:	56                   	push   esi
c0018fcd:	53                   	push   ebx
c0018fce:	83 ec 1c             	sub    esp,0x1c
c0018fd1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018fd5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018fd8:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0018fde:	85 ed                	test   ebp,ebp
c0018fe0:	7e 21                	jle    c0019003 <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c0018fe2:	31 f6                	xor    esi,esi
c0018fe4:	83 ec 0c             	sub    esp,0xc
c0018fe7:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0018fee:	46                   	inc    esi
c0018fef:	57                   	push   edi
c0018ff0:	e8 ee 2f ff ff       	call   c000bfe3 <free>
c0018ff5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018ff8:	83 c4 10             	add    esp,0x10
c0018ffb:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0019001:	7f e1                	jg     c0018fe4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0019003:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001900d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019012:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019015:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0019018:	d3 c0                	rol    eax,cl
c001901a:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0019021:	21 c1                	and    ecx,eax
c0019023:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c001902a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001902d:	89 f7                	mov    edi,esi
c001902f:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0019037:	0f 85 4f 01 00 00    	jne    c001918c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c001903d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019043:	85 c0                	test   eax,eax
c0019045:	0f 84 aa 00 00 00    	je     c00190f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c001904b:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001904e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019052:	31 c9                	xor    ecx,ecx
c0019054:	eb 10                	jmp    c0019066 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c0019056:	41                   	inc    ecx
c0019057:	83 f9 10             	cmp    ecx,0x10
c001905a:	0f 84 95 00 00 00    	je     c00190f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0019060:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019066:	31 d2                	xor    edx,edx
c0019068:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c001906f:	d3 fa                	sar    edx,cl
c0019071:	83 e2 01             	and    edx,0x1
c0019074:	74 e0                	je     c0019056 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019076:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0019079:	89 d5                	mov    ebp,edx
c001907b:	c1 e5 05             	shl    ebp,0x5
c001907e:	01 ea                	add    edx,ebp
c0019080:	01 d0                	add    eax,edx
c0019082:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0019088:	83 fd 07             	cmp    ebp,0x7
c001908b:	75 c9                	jne    c0019056 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001908d:	05 40 02 00 00       	add    eax,0x240
c0019092:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0019095:	83 fd ff             	cmp    ebp,0xffffffff
c0019098:	0f 8c 07 01 00 00    	jl     c00191a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c001909e:	0f 84 b4 01 00 00    	je     c0019258 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c00190a4:	85 ed                	test   ebp,ebp
c00190a6:	0f 84 9b 01 00 00    	je     c0019247 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c00190ac:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00190ae:	75 a6                	jne    c0019056 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00190b0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00190b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00190ba:	01 d0                	add    eax,edx
c00190bc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00190c0:	83 ec 0c             	sub    esp,0xc
c00190c3:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00190c9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00190cc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00190d2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00190d9:	50                   	push   eax
c00190da:	e8 3e fe ff ff       	call   c0018f1d <unblockTask(ThreadControlBlock*)>
c00190df:	83 c4 10             	add    esp,0x10
c00190e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00190e6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00190e9:	41                   	inc    ecx
c00190ea:	89 f7                	mov    edi,esi
c00190ec:	83 f9 10             	cmp    ecx,0x10
c00190ef:	0f 85 6b ff ff ff    	jne    c0019060 <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c00190f5:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c00190fb:	85 c0                	test   eax,eax
c00190fd:	74 5d                	je     c001915c <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c00190ff:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019105:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001910b:	74 4f                	je     c001915c <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c001910d:	83 ec 0c             	sub    esp,0xc
c0019110:	68 68 59 02 c0       	push   0xc0025968
c0019115:	e8 46 69 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001911a:	c7 04 24 68 59 02 c0 	mov    DWORD PTR [esp],0xc0025968
c0019121:	89 c7                	mov    edi,eax
c0019123:	e8 40 69 00 00       	call   c001fa68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019128:	83 c4 10             	add    esp,0x10
c001912b:	84 c0                	test   al,al
c001912d:	0f 84 e2 00 00 00    	je     c0019215 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0019133:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019136:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001913c:	85 d2                	test   edx,edx
c001913e:	74 0f                	je     c001914f <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c0019140:	83 ec 0c             	sub    esp,0xc
c0019143:	8b 02                	mov    eax,DWORD PTR [edx]
c0019145:	52                   	push   edx
c0019146:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019149:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001914c:	83 c4 10             	add    esp,0x10
c001914f:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0019159:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001915c:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0019162:	85 db                	test   ebx,ebx
c0019164:	74 16                	je     c001917c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c0019166:	83 ec 0c             	sub    esp,0xc
c0019169:	53                   	push   ebx
c001916a:	e8 17 55 ff ff       	call   c000e686 <VAS::~VAS()>
c001916f:	5a                   	pop    edx
c0019170:	59                   	pop    ecx
c0019171:	6a 10                	push   0x10
c0019173:	53                   	push   ebx
c0019174:	e8 a2 5e ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0019179:	83 c4 10             	add    esp,0x10
c001917c:	83 ec 0c             	sub    esp,0xc
c001917f:	68 fd 2b 02 c0       	push   0xc0022bfd
c0019184:	e8 b8 5f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0019189:	83 c4 10             	add    esp,0x10
c001918c:	50                   	push   eax
c001918d:	50                   	push   eax
c001918e:	68 3b 07 00 00       	push   0x73b
c0019193:	68 0b 2c 02 c0       	push   0xc0022c0b
c0019198:	e8 a4 5f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001919d:	83 c4 2c             	add    esp,0x2c
c00191a0:	5b                   	pop    ebx
c00191a1:	5e                   	pop    esi
c00191a2:	5f                   	pop    edi
c00191a3:	5d                   	pop    ebp
c00191a4:	c3                   	ret    
c00191a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00191a9:	83 ec 0c             	sub    esp,0xc
c00191ac:	68 e8 2e 02 c0       	push   0xc0022ee8
c00191b1:	e8 56 c7 ff ff       	call   c001590c <Krnl::panic(char const*)>
c00191b6:	83 c4 10             	add    esp,0x10
c00191b9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00191bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00191c0:	89 f7                	mov    edi,esi
c00191c2:	e9 8f fe ff ff       	jmp    c0019056 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191c7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00191cd:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c00191d3:	75 1c                	jne    c00191f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c00191d5:	83 ec 0c             	sub    esp,0xc
c00191d8:	68 50 2f 02 c0       	push   0xc0022f50
c00191dd:	e8 5f 5f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00191e2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00191e9:	e8 ad fb ff ff       	call   c0018d9b <blockTask(TaskState)>
c00191ee:	83 c4 10             	add    esp,0x10
c00191f1:	55                   	push   ebp
c00191f2:	55                   	push   ebp
c00191f3:	56                   	push   esi
c00191f4:	68 68 59 02 c0       	push   0xc0025968
c00191f9:	e8 34 69 00 00       	call   c001fb32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00191fe:	c7 04 24 68 59 02 c0 	mov    DWORD PTR [esp],0xc0025968
c0019205:	e8 56 68 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001920a:	83 c4 10             	add    esp,0x10
c001920d:	39 f8                	cmp    eax,edi
c001920f:	0f 84 1e ff ff ff    	je     c0019133 <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0019215:	83 ec 0c             	sub    esp,0xc
c0019218:	68 68 59 02 c0       	push   0xc0025968
c001921d:	e8 3e 68 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019222:	89 c6                	mov    esi,eax
c0019224:	c7 04 24 68 59 02 c0 	mov    DWORD PTR [esp],0xc0025968
c001922b:	e8 54 68 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019230:	83 c4 10             	add    esp,0x10
c0019233:	39 f3                	cmp    ebx,esi
c0019235:	74 ba                	je     c00191f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019237:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001923a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001923d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0019243:	75 ac                	jne    c00191f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019245:	eb 80                	jmp    c00191c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c0019247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001924b:	83 ec 0c             	sub    esp,0xc
c001924e:	68 1c 2f 02 c0       	push   0xc0022f1c
c0019253:	e9 59 ff ff ff       	jmp    c00191b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c0019258:	8b 36                	mov    esi,DWORD PTR [esi]
c001925a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001925e:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0019261:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019264:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001926a:	01 d7                	add    edi,edx
c001926c:	89 f8                	mov    eax,edi
c001926e:	e9 49 fe ff ff       	jmp    c00190bc <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c0019273 <cleanerTaskFunction(void*)>:
c0019273:	53                   	push   ebx
c0019274:	83 ec 08             	sub    esp,0x8
c0019277:	e8 7f f6 ff ff       	call   c00188fb <unlockScheduler()>
c001927c:	e8 78 f6 ff ff       	call   c00188f9 <lockScheduler()>
c0019281:	80 3d 2c 59 02 c0 00 	cmp    BYTE PTR ds:0xc002592c,0x0
c0019288:	0f 85 8e 00 00 00    	jne    c001931c <cleanerTaskFunction(void*)+0xa9>
c001928e:	83 ec 0c             	sub    esp,0xc
c0019291:	6a 02                	push   0x2
c0019293:	e8 c2 fa ff ff       	call   c0018d5a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019298:	83 c4 10             	add    esp,0x10
c001929b:	c6 05 2c 59 02 c0 00 	mov    BYTE PTR ds:0xc002592c,0x0
c00192a2:	e8 79 f6 ff ff       	call   c0018920 <lockStuff()>
c00192a7:	e8 4d f6 ff ff       	call   c00188f9 <lockScheduler()>
c00192ac:	83 ec 0c             	sub    esp,0xc
c00192af:	68 50 59 02 c0       	push   0xc0025950
c00192b4:	e8 af 67 00 00       	call   c001fa68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00192b9:	83 c4 10             	add    esp,0x10
c00192bc:	84 c0                	test   al,al
c00192be:	75 40                	jne    c0019300 <cleanerTaskFunction(void*)+0x8d>
c00192c0:	83 ec 0c             	sub    esp,0xc
c00192c3:	68 50 59 02 c0       	push   0xc0025950
c00192c8:	e8 93 67 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00192cd:	89 c3                	mov    ebx,eax
c00192cf:	c7 04 24 50 59 02 c0 	mov    DWORD PTR [esp],0xc0025950
c00192d6:	e8 a9 67 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00192db:	c7 04 24 21 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c21
c00192e2:	e8 5a 5e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00192e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00192ea:	e8 db fc ff ff       	call   c0018fca <cleanupTerminatedTask(ThreadControlBlock*)>
c00192ef:	c7 04 24 3a 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c3a
c00192f6:	e8 46 5e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	eb ac                	jmp    c00192ac <cleanerTaskFunction(void*)+0x39>
c0019300:	e8 f6 f5 ff ff       	call   c00188fb <unlockScheduler()>
c0019305:	e8 bd f9 ff ff       	call   c0018cc7 <unlockStuff()>
c001930a:	e8 ea f5 ff ff       	call   c00188f9 <lockScheduler()>
c001930f:	80 3d 2c 59 02 c0 00 	cmp    BYTE PTR ds:0xc002592c,0x0
c0019316:	0f 84 72 ff ff ff    	je     c001928e <cleanerTaskFunction(void*)+0x1b>
c001931c:	e8 da f5 ff ff       	call   c00188fb <unlockScheduler()>
c0019321:	e9 75 ff ff ff       	jmp    c001929b <cleanerTaskFunction(void*)+0x28>

c0019326 <terminateTask(int)>:
c0019326:	83 ec 14             	sub    esp,0x14
c0019329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001932e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019331:	83 c0 0c             	add    eax,0xc
c0019334:	50                   	push   eax
c0019335:	68 78 2f 02 c0       	push   0xc0022f78
c001933a:	e8 02 5e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001933f:	e8 dc f5 ff ff       	call   c0018920 <lockStuff()>
c0019344:	e8 b0 f5 ff ff       	call   c00188f9 <lockScheduler()>
c0019349:	c7 04 24 4d 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c4d
c0019350:	e8 ec 5d ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0019355:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001935a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001935e:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0019361:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019366:	59                   	pop    ecx
c0019367:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001936a:	5a                   	pop    edx
c001936b:	50                   	push   eax
c001936c:	68 50 59 02 c0       	push   0xc0025950
c0019371:	e8 bc 67 00 00       	call   c001fb32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019376:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001937b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0019382:	c7 04 24 67 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c67
c0019389:	e8 b3 5d ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001938e:	8b 0d 28 59 02 c0    	mov    ecx,DWORD PTR ds:0xc0025928
c0019394:	83 c4 10             	add    esp,0x10
c0019397:	85 c9                	test   ecx,ecx
c0019399:	74 5b                	je     c00193f6 <terminateTask(int)+0xd0>
c001939b:	83 ec 0c             	sub    esp,0xc
c001939e:	68 81 2c 02 c0       	push   0xc0022c81
c00193a3:	e8 99 5d ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00193a8:	58                   	pop    eax
c00193a9:	8b 15 28 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025928
c00193af:	52                   	push   edx
c00193b0:	c6 05 2c 59 02 c0 01 	mov    BYTE PTR ds:0xc002592c,0x1
c00193b7:	e8 61 fb ff ff       	call   c0018f1d <unblockTask(ThreadControlBlock*)>
c00193bc:	c7 04 24 9b 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c9b
c00193c3:	e8 79 5d ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00193c8:	83 c4 10             	add    esp,0x10
c00193cb:	e8 2b f5 ff ff       	call   c00188fb <unlockScheduler()>
c00193d0:	e8 f2 f8 ff ff       	call   c0018cc7 <unlockStuff()>
c00193d5:	83 ec 0c             	sub    esp,0xc
c00193d8:	68 d3 2c 02 c0       	push   0xc0022cd3
c00193dd:	e8 5f 5d ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c00193e2:	83 c4 10             	add    esp,0x10
c00193e5:	e8 0f f5 ff ff       	call   c00188f9 <lockScheduler()>
c00193ea:	e8 53 f8 ff ff       	call   c0018c42 <schedule()>
c00193ef:	e8 07 f5 ff ff       	call   c00188fb <unlockScheduler()>
c00193f4:	eb ef                	jmp    c00193e5 <terminateTask(int)+0xbf>
c00193f6:	83 ec 0c             	sub    esp,0xc
c00193f9:	68 b5 2c 02 c0       	push   0xc0022cb5
c00193fe:	e8 3e 5d ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0019403:	83 c4 10             	add    esp,0x10
c0019406:	eb c3                	jmp    c00193cb <terminateTask(int)+0xa5>

c0019408 <Thr::terminateFromIRQ(int)>:
c0019408:	83 ec 18             	sub    esp,0x18
c001940b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001940f:	50                   	push   eax
c0019410:	e8 11 ff ff ff       	call   c0019326 <terminateTask(int)>
c0019415:	90                   	nop

c0019416 <Semaphore::release()>:
c0019416:	83 ec 0c             	sub    esp,0xc
c0019419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001941d:	e8 fe f4 ff ff       	call   c0018920 <lockStuff()>
c0019422:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019425:	85 c0                	test   eax,eax
c0019427:	74 1a                	je     c0019443 <Semaphore::release()+0x2d>
c0019429:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001942c:	83 ec 0c             	sub    esp,0xc
c001942f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0019432:	50                   	push   eax
c0019433:	e8 e5 fa ff ff       	call   c0018f1d <unblockTask(ThreadControlBlock*)>
c0019438:	83 c4 10             	add    esp,0x10
c001943b:	83 c4 0c             	add    esp,0xc
c001943e:	e9 84 f8 ff ff       	jmp    c0018cc7 <unlockStuff()>
c0019443:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0019446:	48                   	dec    eax
c0019447:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c001944a:	83 c4 0c             	add    esp,0xc
c001944d:	e9 75 f8 ff ff       	jmp    c0018cc7 <unlockStuff()>

c0019452 <__static_initialization_and_destruction_0(int, int)>:
c0019452:	83 ec 0c             	sub    esp,0xc
c0019455:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001945a:	0f 85 88 00 00 00    	jne    c00194e8 <__static_initialization_and_destruction_0(int, int)+0x96>
c0019460:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019468:	75 7e                	jne    c00194e8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001946a:	83 ec 0c             	sub    esp,0xc
c001946d:	68 68 59 02 c0       	push   0xc0025968
c0019472:	e8 a1 68 00 00       	call   c001fd18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019477:	83 c4 10             	add    esp,0x10
c001947a:	83 ec 04             	sub    esp,0x4
c001947d:	68 3c 39 02 c0       	push   0xc002393c
c0019482:	68 68 59 02 c0       	push   0xc0025968
c0019487:	68 d8 fc 01 c0       	push   0xc001fcd8
c001948c:	e8 06 5b ff ff       	call   c000ef97 <__cxa_atexit>
c0019491:	83 c4 10             	add    esp,0x10
c0019494:	83 ec 0c             	sub    esp,0xc
c0019497:	68 5c 59 02 c0       	push   0xc002595c
c001949c:	e8 77 68 00 00       	call   c001fd18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00194a1:	83 c4 10             	add    esp,0x10
c00194a4:	83 ec 04             	sub    esp,0x4
c00194a7:	68 3c 39 02 c0       	push   0xc002393c
c00194ac:	68 5c 59 02 c0       	push   0xc002595c
c00194b1:	68 d8 fc 01 c0       	push   0xc001fcd8
c00194b6:	e8 dc 5a ff ff       	call   c000ef97 <__cxa_atexit>
c00194bb:	83 c4 10             	add    esp,0x10
c00194be:	83 ec 0c             	sub    esp,0xc
c00194c1:	68 50 59 02 c0       	push   0xc0025950
c00194c6:	e8 4d 68 00 00       	call   c001fd18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00194cb:	83 c4 10             	add    esp,0x10
c00194ce:	83 ec 04             	sub    esp,0x4
c00194d1:	68 3c 39 02 c0       	push   0xc002393c
c00194d6:	68 50 59 02 c0       	push   0xc0025950
c00194db:	68 d8 fc 01 c0       	push   0xc001fcd8
c00194e0:	e8 b2 5a ff ff       	call   c000ef97 <__cxa_atexit>
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	90                   	nop
c00194e9:	83 c4 0c             	add    esp,0xc
c00194ec:	c3                   	ret    

c00194ed <_GLOBAL__sub_I_kernelProcess>:
c00194ed:	83 ec 0c             	sub    esp,0xc
c00194f0:	83 ec 08             	sub    esp,0x8
c00194f3:	68 ff ff 00 00       	push   0xffff
c00194f8:	6a 01                	push   0x1
c00194fa:	e8 53 ff ff ff       	call   c0019452 <__static_initialization_and_destruction_0(int, int)>
c00194ff:	83 c4 10             	add    esp,0x10
c0019502:	83 c4 0c             	add    esp,0xc
c0019505:	c3                   	ret    

c0019506 <Vm::vm8086EntryPoint(void*)>:
c0019506:	83 ec 0c             	sub    esp,0xc
c0019509:	e8 ed f3 ff ff       	call   c00188fb <unlockScheduler()>
c001950e:	fb                   	sti    
c001950f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019514:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019518:	52                   	push   edx
c0019519:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001951d:	52                   	push   edx
c001951e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019522:	52                   	push   edx
c0019523:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019527:	50                   	push   eax
c0019528:	e8 3a 6d fe ff       	call   c0000267 <goToVM86>
c001952d:	83 c4 1c             	add    esp,0x1c
c0019530:	c3                   	ret    

c0019531 <Vm::inbv(unsigned short)>:
c0019531:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019535:	ec                   	in     al,dx
c0019536:	c3                   	ret    

c0019537 <Vm::outbv(unsigned short, unsigned char)>:
c0019537:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001953b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001953f:	ee                   	out    dx,al
c0019540:	c3                   	ret    

c0019541 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019541:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019546:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001954b:	c1 e0 04             	shl    eax,0x4
c001954e:	01 d0                	add    eax,edx
c0019550:	c3                   	ret    

c0019551 <Vm::getSegment(unsigned int)>:
c0019551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019555:	c1 e8 10             	shr    eax,0x10
c0019558:	c3                   	ret    

c0019559 <Vm::getOffset(unsigned int)>:
c0019559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001955d:	c3                   	ret    

c001955e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001955e:	55                   	push   ebp
c001955f:	57                   	push   edi
c0019560:	56                   	push   esi
c0019561:	53                   	push   ebx
c0019562:	83 ec 2c             	sub    esp,0x2c
c0019565:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0019569:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001956d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019571:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019575:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019579:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001957d:	e8 77 f3 ff ff       	call   c00188f9 <lockScheduler()>
c0019582:	68 80 00 00 00       	push   0x80
c0019587:	6a 00                	push   0x0
c0019589:	68 06 95 01 c0       	push   0xc0019506
c001958e:	55                   	push   ebp
c001958f:	e8 9a f4 ff ff       	call   c0018a2e <Process::createThread(void (*)(void*), void*, int)>
c0019594:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019598:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001959c:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00195a0:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00195a4:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00195a8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00195ac:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00195b3:	e8 54 5a ff ff       	call   c000f00c <operator new(unsigned long)>
c00195b8:	83 c4 0c             	add    esp,0xc
c00195bb:	55                   	push   ebp
c00195bc:	89 c3                	mov    ebx,eax
c00195be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00195c2:	50                   	push   eax
c00195c3:	e8 b0 60 ff ff       	call   c000f678 <File::File(char const*, Process*)>
c00195c8:	83 c4 0c             	add    esp,0xc
c00195cb:	8d 44 24 17          	lea    eax,[esp+0x17]
c00195cf:	50                   	push   eax
c00195d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00195d4:	50                   	push   eax
c00195d5:	53                   	push   ebx
c00195d6:	e8 ad 63 ff ff       	call   c000f988 <File::stat(unsigned long long*, bool*)>
c00195db:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00195df:	83 c4 10             	add    esp,0x10
c00195e2:	84 d2                	test   dl,dl
c00195e4:	74 1c                	je     c0019602 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00195e6:	83 ec 0c             	sub    esp,0xc
c00195e9:	68 97 2f 02 c0       	push   0xc0022f97
c00195ee:	e8 19 c3 ff ff       	call   c001590c <Krnl::panic(char const*)>
c00195f3:	e8 03 f3 ff ff       	call   c00188fb <unlockScheduler()>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	31 d2                	xor    edx,edx
c00195fd:	e9 81 00 00 00       	jmp    c0019683 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019602:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019606:	51                   	push   ecx
c0019607:	51                   	push   ecx
c0019608:	6a 01                	push   0x1
c001960a:	53                   	push   ebx
c001960b:	e8 cc 60 ff ff       	call   c000f6dc <File::open(FileOpenMode)>
c0019610:	83 c4 10             	add    esp,0x10
c0019613:	85 c0                	test   eax,eax
c0019615:	74 1b                	je     c0019632 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019617:	83 ec 0c             	sub    esp,0xc
c001961a:	68 b0 2f 02 c0       	push   0xc0022fb0
c001961f:	e8 e8 c2 ff ff       	call   c001590c <Krnl::panic(char const*)>
c0019624:	e8 d2 f2 ff ff       	call   c00188fb <unlockScheduler()>
c0019629:	83 c4 10             	add    esp,0x10
c001962c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019630:	eb 51                	jmp    c0019683 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019632:	83 ec 0c             	sub    esp,0xc
c0019635:	0f b7 ff             	movzx  edi,di
c0019638:	6a 07                	push   0x7
c001963a:	68 00 01 00 00       	push   0x100
c001963f:	6a 00                	push   0x0
c0019641:	6a 00                	push   0x0
c0019643:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0019649:	e8 96 54 ff ff       	call   c000eae4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001964e:	83 c4 18             	add    esp,0x18
c0019651:	0f b7 f6             	movzx  esi,si
c0019654:	57                   	push   edi
c0019655:	56                   	push   esi
c0019656:	e8 e6 fe ff ff       	call   c0019541 <Vm::realToLinear(unsigned short, unsigned short)>
c001965b:	5a                   	pop    edx
c001965c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001965e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019662:	51                   	push   ecx
c0019663:	50                   	push   eax
c0019664:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019668:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001966c:	53                   	push   ebx
c001966d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019670:	83 c4 14             	add    esp,0x14
c0019673:	53                   	push   ebx
c0019674:	e8 c1 60 ff ff       	call   c000f73a <File::close()>
c0019679:	e8 7d f2 ff ff       	call   c00188fb <unlockScheduler()>
c001967e:	83 c4 10             	add    esp,0x10
c0019681:	b2 01                	mov    dl,0x1
c0019683:	83 c4 2c             	add    esp,0x2c
c0019686:	88 d0                	mov    al,dl
c0019688:	5b                   	pop    ebx
c0019689:	5e                   	pop    esi
c001968a:	5f                   	pop    edi
c001968b:	5d                   	pop    ebp
c001968c:	c3                   	ret    

c001968d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001968d:	57                   	push   edi
c001968e:	56                   	push   esi
c001968f:	53                   	push   ebx
c0019690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019694:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019698:	83 e8 06             	sub    eax,0x6
c001969b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001969f:	0f b7 c0             	movzx  eax,ax
c00196a2:	50                   	push   eax
c00196a3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00196a8:	50                   	push   eax
c00196a9:	e8 93 fe ff ff       	call   c0019541 <Vm::realToLinear(unsigned short, unsigned short)>
c00196ae:	5a                   	pop    edx
c00196af:	5e                   	pop    esi
c00196b0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00196b3:	8d 56 fa             	lea    edx,[esi-0x6]
c00196b6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00196bc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00196bf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00196c2:	83 c2 02             	add    edx,0x2
c00196c5:	66 89 10             	mov    WORD PTR [eax],dx
c00196c8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00196cb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00196cf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00196d2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00196d6:	89 d6                	mov    esi,edx
c00196d8:	66 81 e6 ff fd       	and    si,0xfdff
c00196dd:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00196e3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00196e7:	74 07                	je     c00196f0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00196e9:	89 d6                	mov    esi,edx
c00196eb:	66 81 ce 00 02       	or     si,0x200
c00196f0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00196f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196f9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00196fd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019705:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019708:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019710:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019713:	5b                   	pop    ebx
c0019714:	5e                   	pop    esi
c0019715:	5f                   	pop    edi
c0019716:	c3                   	ret    

c0019717 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019717:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001971c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019721:	c1 e0 04             	shl    eax,0x4
c0019724:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019727:	c3                   	ret    

c0019728 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019728:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001972d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019732:	c1 e0 04             	shl    eax,0x4
c0019735:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019739:	c3                   	ret    

c001973a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001973a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001973f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019744:	c1 e0 04             	shl    eax,0x4
c0019747:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001974a:	c3                   	ret    

c001974b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001974b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019750:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019755:	c1 e0 04             	shl    eax,0x4
c0019758:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001975c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001975f:	c3                   	ret    

c0019760 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019760:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019765:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001976a:	c1 e0 04             	shl    eax,0x4
c001976d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019771:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019775:	c3                   	ret    

c0019776 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019776:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001977b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019780:	c1 e0 04             	shl    eax,0x4
c0019783:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019787:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001978a:	c3                   	ret    

c001978b <Vm::faultHandler(regs*)>:
c001978b:	55                   	push   ebp
c001978c:	57                   	push   edi
c001978d:	56                   	push   esi
c001978e:	53                   	push   ebx
c001978f:	83 ec 1c             	sub    esp,0x1c
c0019792:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019796:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001979a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001979d:	52                   	push   edx
c001979e:	0f b7 f0             	movzx  esi,ax
c00197a1:	0f b7 c0             	movzx  eax,ax
c00197a4:	50                   	push   eax
c00197a5:	e8 97 fd ff ff       	call   c0019541 <Vm::realToLinear(unsigned short, unsigned short)>
c00197aa:	5a                   	pop    edx
c00197ab:	89 c7                	mov    edi,eax
c00197ad:	59                   	pop    ecx
c00197ae:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00197b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00197b5:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00197b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197c1:	0f b7 c5             	movzx  eax,bp
c00197c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197c8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00197cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00197d0:	e8 6c fd ff ff       	call   c0019541 <Vm::realToLinear(unsigned short, unsigned short)>
c00197d5:	5a                   	pop    edx
c00197d6:	59                   	pop    ecx
c00197d7:	b1 06                	mov    cl,0x6
c00197d9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00197de:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00197e3:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00197e6:	80 fa 9d             	cmp    dl,0x9d
c00197e9:	0f 84 1d 02 00 00    	je     c0019a0c <Vm::faultHandler(regs*)+0x281>
c00197ef:	0f 87 8e 00 00 00    	ja     c0019883 <Vm::faultHandler(regs*)+0xf8>
c00197f5:	80 fa 66             	cmp    dl,0x66
c00197f8:	0f 84 89 01 00 00    	je     c0019987 <Vm::faultHandler(regs*)+0x1fc>
c00197fe:	77 44                	ja     c0019844 <Vm::faultHandler(regs*)+0xb9>
c0019800:	80 fa 36             	cmp    dl,0x36
c0019803:	0f 84 74 01 00 00    	je     c001997d <Vm::faultHandler(regs*)+0x1f2>
c0019809:	77 1a                	ja     c0019825 <Vm::faultHandler(regs*)+0x9a>
c001980b:	80 fa 26             	cmp    dl,0x26
c001980e:	0f 84 4b 01 00 00    	je     c001995f <Vm::faultHandler(regs*)+0x1d4>
c0019814:	80 fa 2e             	cmp    dl,0x2e
c0019817:	0f 85 4a 05 00 00    	jne    c0019d67 <Vm::faultHandler(regs*)+0x5dc>
c001981d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019820:	31 c9                	xor    ecx,ecx
c0019822:	47                   	inc    edi
c0019823:	eb be                	jmp    c00197e3 <Vm::faultHandler(regs*)+0x58>
c0019825:	80 fa 64             	cmp    dl,0x64
c0019828:	0f 84 3b 01 00 00    	je     c0019969 <Vm::faultHandler(regs*)+0x1de>
c001982e:	0f 87 3f 01 00 00    	ja     c0019973 <Vm::faultHandler(regs*)+0x1e8>
c0019834:	80 fa 3e             	cmp    dl,0x3e
c0019837:	0f 85 2a 05 00 00    	jne    c0019d67 <Vm::faultHandler(regs*)+0x5dc>
c001983d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019840:	b1 01                	mov    cl,0x1
c0019842:	eb de                	jmp    c0019822 <Vm::faultHandler(regs*)+0x97>
c0019844:	80 fa 6d             	cmp    dl,0x6d
c0019847:	0f 84 bf 02 00 00    	je     c0019b0c <Vm::faultHandler(regs*)+0x381>
c001984d:	77 17                	ja     c0019866 <Vm::faultHandler(regs*)+0xdb>
c001984f:	80 fa 67             	cmp    dl,0x67
c0019852:	0f 84 3c 01 00 00    	je     c0019994 <Vm::faultHandler(regs*)+0x209>
c0019858:	80 fa 6c             	cmp    dl,0x6c
c001985b:	0f 84 5d 02 00 00    	je     c0019abe <Vm::faultHandler(regs*)+0x333>
c0019861:	e9 01 05 00 00       	jmp    c0019d67 <Vm::faultHandler(regs*)+0x5dc>
c0019866:	80 fa 6f             	cmp    dl,0x6f
c0019869:	0f 84 8b 03 00 00    	je     c0019bfa <Vm::faultHandler(regs*)+0x46f>
c001986f:	0f 82 0f 03 00 00    	jb     c0019b84 <Vm::faultHandler(regs*)+0x3f9>
c0019875:	80 fa 9c             	cmp    dl,0x9c
c0019878:	0f 84 23 01 00 00    	je     c00199a1 <Vm::faultHandler(regs*)+0x216>
c001987e:	e9 e4 04 00 00       	jmp    c0019d67 <Vm::faultHandler(regs*)+0x5dc>
c0019883:	80 fa ec             	cmp    dl,0xec
c0019886:	0f 84 7f 04 00 00    	je     c0019d0b <Vm::faultHandler(regs*)+0x580>
c001988c:	77 7b                	ja     c0019909 <Vm::faultHandler(regs*)+0x17e>
c001988e:	80 fa e4             	cmp    dl,0xe4
c0019891:	0f 84 fe 03 00 00    	je     c0019c95 <Vm::faultHandler(regs*)+0x50a>
c0019897:	77 53                	ja     c00198ec <Vm::faultHandler(regs*)+0x161>
c0019899:	80 fa cd             	cmp    dl,0xcd
c001989c:	0f 84 cd 01 00 00    	je     c0019a6f <Vm::faultHandler(regs*)+0x2e4>
c00198a2:	80 fa cf             	cmp    dl,0xcf
c00198a5:	0f 85 bc 04 00 00    	jne    c0019d67 <Vm::faultHandler(regs*)+0x5dc>
c00198ab:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00198ae:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00198b1:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00198b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00198b8:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00198bc:	81 ca 00 02 02 00    	or     edx,0x20200
c00198c2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00198c5:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00198c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00198cf:	66 c1 e8 09          	shr    ax,0x9
c00198d3:	83 e0 01             	and    eax,0x1
c00198d6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00198d9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00198dc:	83 c0 06             	add    eax,0x6
c00198df:	25 ff ff 00 00       	and    eax,0xffff
c00198e4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00198e7:	e9 77 04 00 00       	jmp    c0019d63 <Vm::faultHandler(regs*)+0x5d8>
c00198ec:	80 fa e6             	cmp    dl,0xe6
c00198ef:	0f 84 ea 03 00 00    	je     c0019cdf <Vm::faultHandler(regs*)+0x554>
c00198f5:	0f 82 b6 03 00 00    	jb     c0019cb1 <Vm::faultHandler(regs*)+0x526>
c00198fb:	80 fa e7             	cmp    dl,0xe7
c00198fe:	0f 84 f2 03 00 00    	je     c0019cf6 <Vm::faultHandler(regs*)+0x56b>
c0019904:	e9 5e 04 00 00       	jmp    c0019d67 <Vm::faultHandler(regs*)+0x5dc>
c0019909:	80 fa ef             	cmp    dl,0xef
c001990c:	0f 84 3c 04 00 00    	je     c0019d4e <Vm::faultHandler(regs*)+0x5c3>
c0019912:	77 28                	ja     c001993c <Vm::faultHandler(regs*)+0x1b1>
c0019914:	80 fa ed             	cmp    dl,0xed
c0019917:	0f 84 0a 04 00 00    	je     c0019d27 <Vm::faultHandler(regs*)+0x59c>
c001991d:	80 fa ee             	cmp    dl,0xee
c0019920:	0f 85 41 04 00 00    	jne    c0019d67 <Vm::faultHandler(regs*)+0x5dc>
c0019926:	50                   	push   eax
c0019927:	50                   	push   eax
c0019928:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001992c:	50                   	push   eax
c001992d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019931:	50                   	push   eax
c0019932:	e8 00 fc ff ff       	call   c0019537 <Vm::outbv(unsigned short, unsigned char)>
c0019937:	e9 0a 04 00 00       	jmp    c0019d46 <Vm::faultHandler(regs*)+0x5bb>
c001993c:	80 fa fa             	cmp    dl,0xfa
c001993f:	0f 84 5d 01 00 00    	je     c0019aa2 <Vm::faultHandler(regs*)+0x317>
c0019945:	80 fa fb             	cmp    dl,0xfb
c0019948:	0f 84 62 01 00 00    	je     c0019ab0 <Vm::faultHandler(regs*)+0x325>
c001994e:	80 fa f3             	cmp    dl,0xf3
c0019951:	0f 85 10 04 00 00    	jne    c0019d67 <Vm::faultHandler(regs*)+0x5dc>
c0019957:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001995a:	e9 c3 fe ff ff       	jmp    c0019822 <Vm::faultHandler(regs*)+0x97>
c001995f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019962:	b1 02                	mov    cl,0x2
c0019964:	e9 b9 fe ff ff       	jmp    c0019822 <Vm::faultHandler(regs*)+0x97>
c0019969:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001996c:	b1 03                	mov    cl,0x3
c001996e:	e9 af fe ff ff       	jmp    c0019822 <Vm::faultHandler(regs*)+0x97>
c0019973:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019976:	b1 04                	mov    cl,0x4
c0019978:	e9 a5 fe ff ff       	jmp    c0019822 <Vm::faultHandler(regs*)+0x97>
c001997d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019980:	b1 05                	mov    cl,0x5
c0019982:	e9 9b fe ff ff       	jmp    c0019822 <Vm::faultHandler(regs*)+0x97>
c0019987:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001998a:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001998f:	e9 8e fe ff ff       	jmp    c0019822 <Vm::faultHandler(regs*)+0x97>
c0019994:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019997:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001999c:	e9 81 fe ff ff       	jmp    c0019822 <Vm::faultHandler(regs*)+0x97>
c00199a1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00199a4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00199a8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199ad:	74 30                	je     c00199df <Vm::faultHandler(regs*)+0x254>
c00199af:	83 e9 04             	sub    ecx,0x4
c00199b2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00199b8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00199be:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00199c1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00199c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00199ca:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00199ce:	0f 84 8c 03 00 00    	je     c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c00199d4:	80 ce 02             	or     dh,0x2
c00199d7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00199da:	e9 81 03 00 00       	jmp    c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c00199df:	83 e9 02             	sub    ecx,0x2
c00199e2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00199e8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00199eb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00199ef:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00199f5:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00199f9:	74 05                	je     c0019a00 <Vm::faultHandler(regs*)+0x275>
c00199fb:	80 ce 02             	or     dh,0x2
c00199fe:	eb 03                	jmp    c0019a03 <Vm::faultHandler(regs*)+0x278>
c0019a00:	80 e6 fd             	and    dh,0xfd
c0019a03:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019a07:	e9 54 03 00 00       	jmp    c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c0019a0c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a11:	74 2a                	je     c0019a3d <Vm::faultHandler(regs*)+0x2b2>
c0019a13:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a15:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019a1b:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a21:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a24:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a26:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a2c:	c1 e8 09             	shr    eax,0x9
c0019a2f:	83 e0 01             	and    eax,0x1
c0019a32:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a35:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a38:	83 c0 04             	add    eax,0x4
c0019a3b:	eb 25                	jmp    c0019a62 <Vm::faultHandler(regs*)+0x2d7>
c0019a3d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019a40:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a46:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a49:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019a4c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a52:	66 c1 e8 09          	shr    ax,0x9
c0019a56:	83 e0 01             	and    eax,0x1
c0019a59:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a5c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a5f:	83 c0 02             	add    eax,0x2
c0019a62:	25 ff ff 00 00       	and    eax,0xffff
c0019a67:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019a6a:	e9 f1 02 00 00       	jmp    c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c0019a6f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019a73:	3c ff                	cmp    al,0xff
c0019a75:	75 10                	jne    c0019a87 <Vm::faultHandler(regs*)+0x2fc>
c0019a77:	83 ec 0c             	sub    esp,0xc
c0019a7a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019a7d:	e8 86 f9 ff ff       	call   c0019408 <Thr::terminateFromIRQ(int)>
c0019a82:	e9 c2 02 00 00       	jmp    c0019d49 <Vm::faultHandler(regs*)+0x5be>
c0019a87:	83 ec 0c             	sub    esp,0xc
c0019a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a92:	57                   	push   edi
c0019a93:	50                   	push   eax
c0019a94:	53                   	push   ebx
c0019a95:	e8 f3 fb ff ff       	call   c001968d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019a9a:	83 c4 20             	add    esp,0x20
c0019a9d:	e9 c1 02 00 00       	jmp    c0019d63 <Vm::faultHandler(regs*)+0x5d8>
c0019aa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019aa7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019aab:	e9 b0 02 00 00       	jmp    c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c0019ab0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ab5:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019ab9:	e9 a2 02 00 00       	jmp    c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c0019abe:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019ac3:	74 0d                	je     c0019ad2 <Vm::faultHandler(regs*)+0x347>
c0019ac5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019acc:	0f 87 e9 02 00 00    	ja     c0019dbb <Vm::faultHandler(regs*)+0x630>
c0019ad2:	83 ec 0c             	sub    esp,0xc
c0019ad5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019ad8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019adc:	50                   	push   eax
c0019add:	e8 4f fa ff ff       	call   c0019531 <Vm::inbv(unsigned short)>
c0019ae2:	83 c4 0c             	add    esp,0xc
c0019ae5:	0f b6 c0             	movzx  eax,al
c0019ae8:	50                   	push   eax
c0019ae9:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019aed:	0f b7 c9             	movzx  ecx,cx
c0019af0:	50                   	push   eax
c0019af1:	51                   	push   ecx
c0019af2:	e8 54 fc ff ff       	call   c001974b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019af7:	83 c4 10             	add    esp,0x10
c0019afa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019afd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b01:	74 03                	je     c0019b06 <Vm::faultHandler(regs*)+0x37b>
c0019b03:	48                   	dec    eax
c0019b04:	eb 01                	jmp    c0019b07 <Vm::faultHandler(regs*)+0x37c>
c0019b06:	40                   	inc    eax
c0019b07:	0f b7 c0             	movzx  eax,ax
c0019b0a:	eb 70                	jmp    c0019b7c <Vm::faultHandler(regs*)+0x3f1>
c0019b0c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019b0f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019b12:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b17:	74 0c                	je     c0019b25 <Vm::faultHandler(regs*)+0x39a>
c0019b19:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019b1f:	0f 87 96 02 00 00    	ja     c0019dbb <Vm::faultHandler(regs*)+0x630>
c0019b25:	0f b7 c9             	movzx  ecx,cx
c0019b28:	0f b7 f6             	movzx  esi,si
c0019b2b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019b2e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b33:	74 20                	je     c0019b55 <Vm::faultHandler(regs*)+0x3ca>
c0019b35:	ed                   	in     eax,dx
c0019b36:	55                   	push   ebp
c0019b37:	50                   	push   eax
c0019b38:	51                   	push   ecx
c0019b39:	56                   	push   esi
c0019b3a:	e8 37 fc ff ff       	call   c0019776 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019b3f:	83 c4 10             	add    esp,0x10
c0019b42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019b45:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b49:	74 05                	je     c0019b50 <Vm::faultHandler(regs*)+0x3c5>
c0019b4b:	83 e8 04             	sub    eax,0x4
c0019b4e:	eb 27                	jmp    c0019b77 <Vm::faultHandler(regs*)+0x3ec>
c0019b50:	83 c0 04             	add    eax,0x4
c0019b53:	eb 22                	jmp    c0019b77 <Vm::faultHandler(regs*)+0x3ec>
c0019b55:	66 ed                	in     ax,dx
c0019b57:	0f b7 c0             	movzx  eax,ax
c0019b5a:	57                   	push   edi
c0019b5b:	50                   	push   eax
c0019b5c:	51                   	push   ecx
c0019b5d:	56                   	push   esi
c0019b5e:	e8 fd fb ff ff       	call   c0019760 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019b63:	83 c4 10             	add    esp,0x10
c0019b66:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019b69:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b6d:	74 05                	je     c0019b74 <Vm::faultHandler(regs*)+0x3e9>
c0019b6f:	83 e8 02             	sub    eax,0x2
c0019b72:	eb 03                	jmp    c0019b77 <Vm::faultHandler(regs*)+0x3ec>
c0019b74:	83 c0 02             	add    eax,0x2
c0019b77:	25 ff ff 00 00       	and    eax,0xffff
c0019b7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019b7f:	e9 dc 01 00 00       	jmp    c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c0019b84:	49                   	dec    ecx
c0019b85:	80 f9 05             	cmp    cl,0x5
c0019b88:	77 24                	ja     c0019bae <Vm::faultHandler(regs*)+0x423>
c0019b8a:	0f b6 c9             	movzx  ecx,cl
c0019b8d:	ff 24 8d f8 2f 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd008]
c0019b94:	0f b7 f5             	movzx  esi,bp
c0019b97:	eb 15                	jmp    c0019bae <Vm::faultHandler(regs*)+0x423>
c0019b99:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019b9d:	eb 0f                	jmp    c0019bae <Vm::faultHandler(regs*)+0x423>
c0019b9f:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019ba3:	eb 09                	jmp    c0019bae <Vm::faultHandler(regs*)+0x423>
c0019ba5:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019ba9:	eb 03                	jmp    c0019bae <Vm::faultHandler(regs*)+0x423>
c0019bab:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019bae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019bb1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019bb6:	74 0b                	je     c0019bc3 <Vm::faultHandler(regs*)+0x438>
c0019bb8:	3d ff ff 00 00       	cmp    eax,0xffff
c0019bbd:	0f 87 f8 01 00 00    	ja     c0019dbb <Vm::faultHandler(regs*)+0x630>
c0019bc3:	52                   	push   edx
c0019bc4:	52                   	push   edx
c0019bc5:	0f b7 c0             	movzx  eax,ax
c0019bc8:	50                   	push   eax
c0019bc9:	56                   	push   esi
c0019bca:	e8 48 fb ff ff       	call   c0019717 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019bcf:	59                   	pop    ecx
c0019bd0:	5e                   	pop    esi
c0019bd1:	0f b6 c0             	movzx  eax,al
c0019bd4:	50                   	push   eax
c0019bd5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019bd9:	50                   	push   eax
c0019bda:	e8 58 f9 ff ff       	call   c0019537 <Vm::outbv(unsigned short, unsigned char)>
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019be5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019be9:	74 03                	je     c0019bee <Vm::faultHandler(regs*)+0x463>
c0019beb:	48                   	dec    eax
c0019bec:	eb 01                	jmp    c0019bef <Vm::faultHandler(regs*)+0x464>
c0019bee:	40                   	inc    eax
c0019bef:	0f b7 c0             	movzx  eax,ax
c0019bf2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019bf5:	e9 66 01 00 00       	jmp    c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c0019bfa:	49                   	dec    ecx
c0019bfb:	80 f9 05             	cmp    cl,0x5
c0019bfe:	77 1f                	ja     c0019c1f <Vm::faultHandler(regs*)+0x494>
c0019c00:	0f b6 c9             	movzx  ecx,cl
c0019c03:	ff 24 8d 10 30 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcff0]
c0019c0a:	89 ee                	mov    esi,ebp
c0019c0c:	eb 11                	jmp    c0019c1f <Vm::faultHandler(regs*)+0x494>
c0019c0e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019c11:	eb 0c                	jmp    c0019c1f <Vm::faultHandler(regs*)+0x494>
c0019c13:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c16:	eb 07                	jmp    c0019c1f <Vm::faultHandler(regs*)+0x494>
c0019c18:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019c1b:	eb 02                	jmp    c0019c1f <Vm::faultHandler(regs*)+0x494>
c0019c1d:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019c1f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019c22:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c27:	74 0c                	je     c0019c35 <Vm::faultHandler(regs*)+0x4aa>
c0019c29:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c2f:	0f 87 86 01 00 00    	ja     c0019dbb <Vm::faultHandler(regs*)+0x630>
c0019c35:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019c38:	0f b7 d6             	movzx  edx,si
c0019c3b:	81 e7 00 04 00 00    	and    edi,0x400
c0019c41:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019c44:	0f b7 c1             	movzx  eax,cx
c0019c47:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c4c:	74 1d                	je     c0019c6b <Vm::faultHandler(regs*)+0x4e0>
c0019c4e:	55                   	push   ebp
c0019c4f:	55                   	push   ebp
c0019c50:	50                   	push   eax
c0019c51:	52                   	push   edx
c0019c52:	e8 e3 fa ff ff       	call   c001973a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019c57:	83 c4 10             	add    esp,0x10
c0019c5a:	89 f2                	mov    edx,esi
c0019c5c:	ef                   	out    dx,eax
c0019c5d:	85 ff                	test   edi,edi
c0019c5f:	74 05                	je     c0019c66 <Vm::faultHandler(regs*)+0x4db>
c0019c61:	83 e9 04             	sub    ecx,0x4
c0019c64:	eb 21                	jmp    c0019c87 <Vm::faultHandler(regs*)+0x4fc>
c0019c66:	83 c1 04             	add    ecx,0x4
c0019c69:	eb 1c                	jmp    c0019c87 <Vm::faultHandler(regs*)+0x4fc>
c0019c6b:	55                   	push   ebp
c0019c6c:	55                   	push   ebp
c0019c6d:	50                   	push   eax
c0019c6e:	52                   	push   edx
c0019c6f:	e8 b4 fa ff ff       	call   c0019728 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019c74:	83 c4 10             	add    esp,0x10
c0019c77:	89 f2                	mov    edx,esi
c0019c79:	66 ef                	out    dx,ax
c0019c7b:	85 ff                	test   edi,edi
c0019c7d:	74 05                	je     c0019c84 <Vm::faultHandler(regs*)+0x4f9>
c0019c7f:	83 e9 02             	sub    ecx,0x2
c0019c82:	eb 03                	jmp    c0019c87 <Vm::faultHandler(regs*)+0x4fc>
c0019c84:	83 c1 02             	add    ecx,0x2
c0019c87:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019c8d:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019c90:	e9 cb 00 00 00       	jmp    c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c0019c95:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c9c:	83 ec 0c             	sub    esp,0xc
c0019c9f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019ca3:	50                   	push   eax
c0019ca4:	e8 88 f8 ff ff       	call   c0019531 <Vm::inbv(unsigned short)>
c0019ca9:	0f b6 c0             	movzx  eax,al
c0019cac:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019caf:	eb 3f                	jmp    c0019cf0 <Vm::faultHandler(regs*)+0x565>
c0019cb1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cb6:	74 07                	je     c0019cbf <Vm::faultHandler(regs*)+0x534>
c0019cb8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019cbc:	ed                   	in     eax,dx
c0019cbd:	eb 14                	jmp    c0019cd3 <Vm::faultHandler(regs*)+0x548>
c0019cbf:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019cc2:	66 31 c9             	xor    cx,cx
c0019cc5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019cc8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019ccc:	66 ed                	in     ax,dx
c0019cce:	0f b7 c0             	movzx  eax,ax
c0019cd1:	09 c8                	or     eax,ecx
c0019cd3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019cd6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019cda:	e9 84 00 00 00       	jmp    c0019d63 <Vm::faultHandler(regs*)+0x5d8>
c0019cdf:	52                   	push   edx
c0019ce0:	52                   	push   edx
c0019ce1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019ce5:	50                   	push   eax
c0019ce6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019cea:	50                   	push   eax
c0019ceb:	e8 47 f8 ff ff       	call   c0019537 <Vm::outbv(unsigned short, unsigned char)>
c0019cf0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019cf4:	eb 53                	jmp    c0019d49 <Vm::faultHandler(regs*)+0x5be>
c0019cf6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019cf9:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019cfd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d02:	74 03                	je     c0019d07 <Vm::faultHandler(regs*)+0x57c>
c0019d04:	ef                   	out    dx,eax
c0019d05:	eb cf                	jmp    c0019cd6 <Vm::faultHandler(regs*)+0x54b>
c0019d07:	66 ef                	out    dx,ax
c0019d09:	eb cb                	jmp    c0019cd6 <Vm::faultHandler(regs*)+0x54b>
c0019d0b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019d12:	83 ec 0c             	sub    esp,0xc
c0019d15:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d19:	50                   	push   eax
c0019d1a:	e8 12 f8 ff ff       	call   c0019531 <Vm::inbv(unsigned short)>
c0019d1f:	0f b6 c0             	movzx  eax,al
c0019d22:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019d25:	eb 1f                	jmp    c0019d46 <Vm::faultHandler(regs*)+0x5bb>
c0019d27:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019d2a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d2f:	74 03                	je     c0019d34 <Vm::faultHandler(regs*)+0x5a9>
c0019d31:	ed                   	in     eax,dx
c0019d32:	eb 0d                	jmp    c0019d41 <Vm::faultHandler(regs*)+0x5b6>
c0019d34:	66 ed                	in     ax,dx
c0019d36:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019d39:	66 31 d2             	xor    dx,dx
c0019d3c:	0f b7 c0             	movzx  eax,ax
c0019d3f:	09 d0                	or     eax,edx
c0019d41:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019d44:	eb 1a                	jmp    c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c0019d46:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d49:	83 c4 10             	add    esp,0x10
c0019d4c:	eb 15                	jmp    c0019d63 <Vm::faultHandler(regs*)+0x5d8>
c0019d4e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019d51:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019d54:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d59:	74 03                	je     c0019d5e <Vm::faultHandler(regs*)+0x5d3>
c0019d5b:	ef                   	out    dx,eax
c0019d5c:	eb 02                	jmp    c0019d60 <Vm::faultHandler(regs*)+0x5d5>
c0019d5e:	66 ef                	out    dx,ax
c0019d60:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d63:	b0 01                	mov    al,0x1
c0019d65:	eb 56                	jmp    c0019dbd <Vm::faultHandler(regs*)+0x632>
c0019d67:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019d6b:	50                   	push   eax
c0019d6c:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019d70:	50                   	push   eax
c0019d71:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019d75:	50                   	push   eax
c0019d76:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019d7a:	50                   	push   eax
c0019d7b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019d7f:	50                   	push   eax
c0019d80:	52                   	push   edx
c0019d81:	52                   	push   edx
c0019d82:	68 c9 2f 02 c0       	push   0xc0022fc9
c0019d87:	e8 b5 53 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c0019d8c:	83 c4 20             	add    esp,0x20
c0019d8f:	83 ec 0c             	sub    esp,0xc
c0019d92:	6a 60                	push   0x60
c0019d94:	e8 98 f7 ff ff       	call   c0019531 <Vm::inbv(unsigned short)>
c0019d99:	83 c4 10             	add    esp,0x10
c0019d9c:	3c 1c                	cmp    al,0x1c
c0019d9e:	74 04                	je     c0019da4 <Vm::faultHandler(regs*)+0x619>
c0019da0:	3c 5a                	cmp    al,0x5a
c0019da2:	75 eb                	jne    c0019d8f <Vm::faultHandler(regs*)+0x604>
c0019da4:	3c 1c                	cmp    al,0x1c
c0019da6:	74 04                	je     c0019dac <Vm::faultHandler(regs*)+0x621>
c0019da8:	3c 5a                	cmp    al,0x5a
c0019daa:	75 0f                	jne    c0019dbb <Vm::faultHandler(regs*)+0x630>
c0019dac:	83 ec 0c             	sub    esp,0xc
c0019daf:	6a 60                	push   0x60
c0019db1:	e8 7b f7 ff ff       	call   c0019531 <Vm::inbv(unsigned short)>
c0019db6:	83 c4 10             	add    esp,0x10
c0019db9:	eb e9                	jmp    c0019da4 <Vm::faultHandler(regs*)+0x619>
c0019dbb:	31 c0                	xor    eax,eax
c0019dbd:	83 c4 1c             	add    esp,0x1c
c0019dc0:	5b                   	pop    ebx
c0019dc1:	5e                   	pop    esi
c0019dc2:	5f                   	pop    edi
c0019dc3:	5d                   	pop    ebp
c0019dc4:	c3                   	ret    
c0019dc5:	90                   	nop

c0019dc6 <FAT::getName()>:
c0019dc6:	b8 28 30 02 c0       	mov    eax,0xc0023028
c0019dcb:	c3                   	ret    

c0019dcc <FAT::tell(void*, unsigned long long*)>:
c0019dcc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019dd1:	75 06                	jne    c0019dd9 <FAT::tell(void*, unsigned long long*)+0xd>
c0019dd3:	b8 04 00 00 00       	mov    eax,0x4
c0019dd8:	c3                   	ret    
c0019dd9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019dde:	75 06                	jne    c0019de6 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019de0:	b8 04 00 00 00       	mov    eax,0x4
c0019de5:	c3                   	ret    
c0019de6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dea:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019ded:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019df0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019df4:	89 01                	mov    DWORD PTR [ecx],eax
c0019df6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019df9:	b8 00 00 00 00       	mov    eax,0x0
c0019dfe:	c3                   	ret    
c0019dff:	90                   	nop

c0019e00 <FAT::stat(void*, unsigned long long*)>:
c0019e00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e05:	75 06                	jne    c0019e0d <FAT::stat(void*, unsigned long long*)+0xd>
c0019e07:	b8 04 00 00 00       	mov    eax,0x4
c0019e0c:	c3                   	ret    
c0019e0d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e12:	75 06                	jne    c0019e1a <FAT::stat(void*, unsigned long long*)+0x1a>
c0019e14:	b8 04 00 00 00       	mov    eax,0x4
c0019e19:	c3                   	ret    
c0019e1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e1e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019e21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019e24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e28:	89 01                	mov    DWORD PTR [ecx],eax
c0019e2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019e2d:	b8 00 00 00 00       	mov    eax,0x0
c0019e32:	c3                   	ret    
c0019e33:	90                   	nop

c0019e34 <FAT::~FAT()>:
c0019e34:	83 ec 0c             	sub    esp,0xc
c0019e37:	ba ac 30 02 c0       	mov    edx,0xc00230ac
c0019e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e40:	89 10                	mov    DWORD PTR [eax],edx
c0019e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e46:	83 ec 0c             	sub    esp,0xc
c0019e49:	50                   	push   eax
c0019e4a:	e8 23 56 ff ff       	call   c000f472 <Filesystem::~Filesystem()>
c0019e4f:	83 c4 10             	add    esp,0x10
c0019e52:	90                   	nop
c0019e53:	83 c4 0c             	add    esp,0xc
c0019e56:	c3                   	ret    
c0019e57:	90                   	nop

c0019e58 <FAT::~FAT()>:
c0019e58:	83 ec 0c             	sub    esp,0xc
c0019e5b:	83 ec 0c             	sub    esp,0xc
c0019e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e62:	e8 cd ff ff ff       	call   c0019e34 <FAT::~FAT()>
c0019e67:	83 c4 10             	add    esp,0x10
c0019e6a:	83 ec 08             	sub    esp,0x8
c0019e6d:	6a 08                	push   0x8
c0019e6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e73:	e8 a3 51 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0019e78:	83 c4 10             	add    esp,0x10
c0019e7b:	83 c4 0c             	add    esp,0xc
c0019e7e:	c3                   	ret    
c0019e7f:	90                   	nop

c0019e80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019e80:	83 ec 1c             	sub    esp,0x1c
c0019e83:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019e8a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019e8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019e93:	8b 04 85 c0 59 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda640]
c0019e9a:	83 f8 ff             	cmp    eax,0xffffffff
c0019e9d:	75 34                	jne    c0019ed3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019e9f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019ea3:	88 c2                	mov    dl,al
c0019ea5:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0019eaa:	01 d0                	add    eax,edx
c0019eac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019eb0:	8b 15 a0 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259a0
c0019eb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019eba:	89 14 85 c0 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda640],edx
c0019ec1:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0019ec6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019eca:	89 14 85 40 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5c0],edx
c0019ed1:	eb 17                	jmp    c0019eea <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019ed3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019ed7:	88 c2                	mov    dl,al
c0019ed9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019edd:	8b 04 85 c0 59 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda640]
c0019ee4:	01 d0                	add    eax,edx
c0019ee6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019eea:	83 ec 04             	sub    esp,0x4
c0019eed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019ef1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019ef5:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019ef9:	50                   	push   eax
c0019efa:	e8 ce cb fe ff       	call   c0006acd <f_getlabel>
c0019eff:	83 c4 10             	add    esp,0x10
c0019f02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f06:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f0b:	75 07                	jne    c0019f14 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019f0d:	b8 00 00 00 00       	mov    eax,0x0
c0019f12:	eb 05                	jmp    c0019f19 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019f14:	b8 01 00 00 00       	mov    eax,0x1
c0019f19:	83 c4 1c             	add    esp,0x1c
c0019f1c:	c3                   	ret    
c0019f1d:	90                   	nop

c0019f1e <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019f1e:	57                   	push   edi
c0019f1f:	83 ec 58             	sub    esp,0x58
c0019f22:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019f2a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f2e:	b8 00 00 00 00       	mov    eax,0x0
c0019f33:	b9 0f 00 00 00       	mov    ecx,0xf
c0019f38:	fc                   	cld    
c0019f39:	89 d7                	mov    edi,edx
c0019f3b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019f3d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019f41:	8b 04 85 c0 59 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda640]
c0019f48:	83 f8 ff             	cmp    eax,0xffffffff
c0019f4b:	75 34                	jne    c0019f81 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019f4d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f51:	88 c2                	mov    dl,al
c0019f53:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0019f58:	01 d0                	add    eax,edx
c0019f5a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f5e:	8b 15 a0 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259a0
c0019f64:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019f68:	89 14 85 c0 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda640],edx
c0019f6f:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0019f74:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019f78:	89 14 85 40 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5c0],edx
c0019f7f:	eb 17                	jmp    c0019f98 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019f81:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f85:	88 c2                	mov    dl,al
c0019f87:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019f8b:	8b 04 85 c0 59 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda640]
c0019f92:	01 d0                	add    eax,edx
c0019f94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f98:	83 ec 08             	sub    esp,0x8
c0019f9b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019f9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fa3:	50                   	push   eax
c0019fa4:	e8 67 68 fe ff       	call   c0000810 <strcat>
c0019fa9:	83 c4 10             	add    esp,0x10
c0019fac:	83 ec 0c             	sub    esp,0xc
c0019faf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fb3:	50                   	push   eax
c0019fb4:	e8 08 cd fe ff       	call   c0006cc1 <f_setlabel>
c0019fb9:	83 c4 10             	add    esp,0x10
c0019fbc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019fc0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019fc5:	75 07                	jne    c0019fce <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0019fc7:	b8 00 00 00 00       	mov    eax,0x0
c0019fcc:	eb 05                	jmp    c0019fd3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019fce:	b8 01 00 00 00       	mov    eax,0x1
c0019fd3:	83 c4 58             	add    esp,0x58
c0019fd6:	5f                   	pop    edi
c0019fd7:	c3                   	ret    

c0019fd8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019fd8:	83 ec 2c             	sub    esp,0x2c
c0019fdb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019fe3:	83 ec 08             	sub    esp,0x8
c0019fe6:	68 4c 30 02 c0       	push   0xc002304c
c0019feb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019fef:	e8 b6 67 fe ff       	call   c00007aa <strcmp>
c0019ff4:	83 c4 10             	add    esp,0x10
c0019ff7:	85 c0                	test   eax,eax
c0019ff9:	0f 94 c0             	sete   al
c0019ffc:	84 c0                	test   al,al
c0019ffe:	74 0d                	je     c001a00d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a000:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a008:	e9 a6 00 00 00       	jmp    c001a0b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a00d:	83 ec 08             	sub    esp,0x8
c001a010:	68 3e 30 02 c0       	push   0xc002303e
c001a015:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a019:	e8 8c 67 fe ff       	call   c00007aa <strcmp>
c001a01e:	83 c4 10             	add    esp,0x10
c001a021:	85 c0                	test   eax,eax
c001a023:	0f 94 c0             	sete   al
c001a026:	84 c0                	test   al,al
c001a028:	74 0a                	je     c001a034 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a02a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a032:	eb 7f                	jmp    c001a0b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a034:	83 ec 08             	sub    esp,0x8
c001a037:	68 44 30 02 c0       	push   0xc0023044
c001a03c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a040:	e8 65 67 fe ff       	call   c00007aa <strcmp>
c001a045:	83 c4 10             	add    esp,0x10
c001a048:	85 c0                	test   eax,eax
c001a04a:	0f 94 c0             	sete   al
c001a04d:	84 c0                	test   al,al
c001a04f:	74 0a                	je     c001a05b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a051:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a059:	eb 58                	jmp    c001a0b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a05b:	83 ec 08             	sub    esp,0x8
c001a05e:	68 ec 03 02 c0       	push   0xc00203ec
c001a063:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a067:	e8 3e 67 fe ff       	call   c00007aa <strcmp>
c001a06c:	83 c4 10             	add    esp,0x10
c001a06f:	85 c0                	test   eax,eax
c001a071:	0f 94 c0             	sete   al
c001a074:	84 c0                	test   al,al
c001a076:	74 0a                	je     c001a082 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a078:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a080:	eb 31                	jmp    c001a0b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a082:	83 ec 08             	sub    esp,0x8
c001a085:	68 4a 30 02 c0       	push   0xc002304a
c001a08a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a08e:	e8 17 67 fe ff       	call   c00007aa <strcmp>
c001a093:	83 c4 10             	add    esp,0x10
c001a096:	85 c0                	test   eax,eax
c001a098:	0f 94 c0             	sete   al
c001a09b:	84 c0                	test   al,al
c001a09d:	74 0a                	je     c001a0a9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a09f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a0a7:	eb 0a                	jmp    c001a0b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a0a9:	b8 08 00 00 00       	mov    eax,0x8
c001a0ae:	e9 04 01 00 00       	jmp    c001a1b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a0b3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a0ba:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a0bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0c3:	8b 04 85 c0 59 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda640]
c001a0ca:	83 f8 ff             	cmp    eax,0xffffffff
c001a0cd:	75 34                	jne    c001a103 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a0cf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a0d3:	88 c2                	mov    dl,al
c001a0d5:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c001a0da:	01 d0                	add    eax,edx
c001a0dc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a0e0:	8b 15 a0 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259a0
c001a0e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0ea:	89 14 85 c0 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda640],edx
c001a0f1:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c001a0f6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a0fa:	89 14 85 40 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5c0],edx
c001a101:	eb 17                	jmp    c001a11a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a103:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a107:	88 c2                	mov    dl,al
c001a109:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a10d:	8b 04 85 c0 59 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda640]
c001a114:	01 d0                	add    eax,edx
c001a116:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a11a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a11e:	88 04 24             	mov    BYTE PTR [esp],al
c001a121:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a125:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a129:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a131:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a136:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a13e:	83 ec 0c             	sub    esp,0xc
c001a141:	68 00 20 00 00       	push   0x2000
c001a146:	e8 88 1e ff ff       	call   c000bfd3 <malloc>
c001a14b:	83 c4 10             	add    esp,0x10
c001a14e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a152:	68 00 20 00 00       	push   0x2000
c001a157:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a15b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a15f:	50                   	push   eax
c001a160:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a164:	50                   	push   eax
c001a165:	e8 a2 cf fe ff       	call   c000710c <f_mkfs>
c001a16a:	83 c4 10             	add    esp,0x10
c001a16d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a171:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a176:	75 07                	jne    c001a17f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a178:	b8 00 00 00 00       	mov    eax,0x0
c001a17d:	eb 38                	jmp    c001a1b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a17f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a184:	75 17                	jne    c001a19d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a186:	83 ec 0c             	sub    esp,0xc
c001a189:	68 7c 30 02 c0       	push   0xc002307c
c001a18e:	e8 ae 4f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001a193:	83 c4 10             	add    esp,0x10
c001a196:	b8 09 00 00 00       	mov    eax,0x9
c001a19b:	eb 1a                	jmp    c001a1b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a19d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1a1:	83 ec 08             	sub    esp,0x8
c001a1a4:	50                   	push   eax
c001a1a5:	68 50 30 02 c0       	push   0xc0023050
c001a1aa:	e8 92 4f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001a1af:	83 c4 10             	add    esp,0x10
c001a1b2:	b8 01 00 00 00       	mov    eax,0x1
c001a1b7:	83 c4 2c             	add    esp,0x2c
c001a1ba:	c3                   	ret    
c001a1bb:	90                   	nop

c001a1bc <FAT::tryMount(LogicalDisk*, int)>:
c001a1bc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a1c2:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c001a1c7:	83 f8 14             	cmp    eax,0x14
c001a1ca:	75 17                	jne    c001a1e3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a1cc:	83 ec 0c             	sub    esp,0xc
c001a1cf:	68 62 30 02 c0       	push   0xc0023062
c001a1d4:	e8 33 b7 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001a1d9:	83 c4 10             	add    esp,0x10
c001a1dc:	b0 00                	mov    al,0x0
c001a1de:	e9 d7 01 00 00       	jmp    c001a3ba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a1e3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a1ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a1f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a1f6:	3d 00 02 00 00       	cmp    eax,0x200
c001a1fb:	74 07                	je     c001a204 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a1fd:	b0 00                	mov    al,0x0
c001a1ff:	e9 b6 01 00 00       	jmp    c001a3ba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a204:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a20c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a213:	8b 04 85 c0 59 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda640]
c001a21a:	83 f8 ff             	cmp    eax,0xffffffff
c001a21d:	74 07                	je     c001a226 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a21f:	b0 01                	mov    al,0x1
c001a221:	e9 94 01 00 00       	jmp    c001a3ba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a226:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a230:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a238:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a23f:	88 c2                	mov    dl,al
c001a241:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c001a246:	01 d0                	add    eax,edx
c001a248:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a24f:	8b 15 a0 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259a0
c001a255:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a25c:	89 14 85 c0 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda640],edx
c001a263:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c001a268:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a26f:	89 14 85 40 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5c0],edx
c001a276:	83 ec 0c             	sub    esp,0xc
c001a279:	68 54 02 00 00       	push   0x254
c001a27e:	e8 50 1d ff ff       	call   c000bfd3 <malloc>
c001a283:	83 c4 10             	add    esp,0x10
c001a286:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a28d:	83 ec 04             	sub    esp,0x4
c001a290:	6a 00                	push   0x0
c001a292:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a299:	50                   	push   eax
c001a29a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a2a1:	e8 55 aa fe ff       	call   c0004cfb <f_mount>
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a2b0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a2b8:	74 19                	je     c001a2d3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a2ba:	83 ec 0c             	sub    esp,0xc
c001a2bd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a2c4:	e8 2a 1d ff ff       	call   c000bff3 <rfree>
c001a2c9:	83 c4 10             	add    esp,0x10
c001a2cc:	b0 00                	mov    al,0x0
c001a2ce:	e9 e7 00 00 00       	jmp    c001a3ba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a2d3:	83 ec 04             	sub    esp,0x4
c001a2d6:	68 00 01 00 00       	push   0x100
c001a2db:	6a 00                	push   0x0
c001a2dd:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a2e4:	50                   	push   eax
c001a2e5:	e8 d0 63 fe ff       	call   c00006ba <memset>
c001a2ea:	83 c4 10             	add    esp,0x10
c001a2ed:	83 ec 08             	sub    esp,0x8
c001a2f0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a2f7:	50                   	push   eax
c001a2f8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a2ff:	50                   	push   eax
c001a300:	e8 0b 65 fe ff       	call   c0000810 <strcat>
c001a305:	83 c4 10             	add    esp,0x10
c001a308:	83 ec 08             	sub    esp,0x8
c001a30b:	68 70 30 02 c0       	push   0xc0023070
c001a310:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a317:	50                   	push   eax
c001a318:	e8 f3 64 fe ff       	call   c0000810 <strcat>
c001a31d:	83 c4 10             	add    esp,0x10
c001a320:	83 ec 04             	sub    esp,0x4
c001a323:	6a 01                	push   0x1
c001a325:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a32c:	50                   	push   eax
c001a32d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a331:	50                   	push   eax
c001a332:	e8 26 aa fe ff       	call   c0004d5d <f_open>
c001a337:	83 c4 10             	add    esp,0x10
c001a33a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a341:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a348:	85 c0                	test   eax,eax
c001a34a:	74 0a                	je     c001a356 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a34c:	78 2d                	js     c001a37b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a34e:	83 e8 04             	sub    eax,0x4
c001a351:	83 f8 01             	cmp    eax,0x1
c001a354:	77 25                	ja     c001a37b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a356:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a35e:	83 ec 0c             	sub    esp,0xc
c001a361:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a365:	50                   	push   eax
c001a366:	e8 44 b5 fe ff       	call   c00058af <f_close>
c001a36b:	83 c4 10             	add    esp,0x10
c001a36e:	90                   	nop
c001a36f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a377:	74 3a                	je     c001a3b3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a379:	eb 2d                	jmp    c001a3a8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a37b:	83 ec 0c             	sub    esp,0xc
c001a37e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a385:	e8 69 1c ff ff       	call   c000bff3 <rfree>
c001a38a:	83 c4 10             	add    esp,0x10
c001a38d:	83 ec 04             	sub    esp,0x4
c001a390:	6a 00                	push   0x0
c001a392:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a399:	50                   	push   eax
c001a39a:	6a 00                	push   0x0
c001a39c:	e8 5a a9 fe ff       	call   c0004cfb <f_mount>
c001a3a1:	83 c4 10             	add    esp,0x10
c001a3a4:	b0 00                	mov    al,0x0
c001a3a6:	eb 12                	jmp    c001a3ba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a3a8:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c001a3ad:	40                   	inc    eax
c001a3ae:	a3 a0 59 02 c0       	mov    ds:0xc00259a0,eax
c001a3b3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a3ba:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a3c0:	c3                   	ret    
c001a3c1:	90                   	nop

c001a3c2 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a3c2:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a3c8:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a3d0:	74 0a                	je     c001a3dc <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a3d2:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a3da:	75 0a                	jne    c001a3e6 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a3dc:	b8 04 00 00 00       	mov    eax,0x4
c001a3e1:	e9 dd 00 00 00       	jmp    c001a4c3 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a3e6:	83 ec 08             	sub    esp,0x8
c001a3e9:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a3f0:	50                   	push   eax
c001a3f1:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a3f8:	e8 6a ba fe ff       	call   c0005e67 <f_readdir>
c001a3fd:	83 c4 10             	add    esp,0x10
c001a400:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a407:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a40d:	83 ec 0c             	sub    esp,0xc
c001a410:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a417:	83 c0 1a             	add    eax,0x1a
c001a41a:	50                   	push   eax
c001a41b:	e8 b7 62 fe ff       	call   c00006d7 <strlen>
c001a420:	83 c4 10             	add    esp,0x10
c001a423:	ba 00 00 00 00       	mov    edx,0x0
c001a428:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a42c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a430:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a437:	25 ff 00 00 00       	and    eax,0xff
c001a43c:	83 e0 10             	and    eax,0x10
c001a43f:	74 07                	je     c001a448 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a441:	b8 02 00 00 00       	mov    eax,0x2
c001a446:	eb 05                	jmp    c001a44d <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a448:	b8 01 00 00 00       	mov    eax,0x1
c001a44d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a451:	83 ec 08             	sub    esp,0x8
c001a454:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a45b:	83 c0 1a             	add    eax,0x1a
c001a45e:	50                   	push   eax
c001a45f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a463:	83 c0 10             	add    eax,0x10
c001a466:	50                   	push   eax
c001a467:	e8 ed 62 fe ff       	call   c0000759 <strcpy>
c001a46c:	83 c4 10             	add    esp,0x10
c001a46f:	83 ec 04             	sub    esp,0x4
c001a472:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a479:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a47d:	50                   	push   eax
c001a47e:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a485:	e8 fa 61 fe ff       	call   c0000684 <memcpy>
c001a48a:	83 c4 10             	add    esp,0x10
c001a48d:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a494:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a49a:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a4a1:	84 c0                	test   al,al
c001a4a3:	75 07                	jne    c001a4ac <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a4a5:	b8 07 00 00 00       	mov    eax,0x7
c001a4aa:	eb 17                	jmp    c001a4c3 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a4ac:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a4b3:	85 c0                	test   eax,eax
c001a4b5:	75 07                	jne    c001a4be <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a4b7:	b8 00 00 00 00       	mov    eax,0x0
c001a4bc:	eb 05                	jmp    c001a4c3 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a4be:	b8 01 00 00 00       	mov    eax,0x1
c001a4c3:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a4c9:	c3                   	ret    

c001a4ca <FAT::read(void*, unsigned long, void*, int*)>:
c001a4ca:	83 ec 1c             	sub    esp,0x1c
c001a4cd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a4d2:	74 07                	je     c001a4db <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a4d4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a4d9:	75 07                	jne    c001a4e2 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a4db:	b8 04 00 00 00       	mov    eax,0x4
c001a4e0:	eb 3d                	jmp    c001a51f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a4e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4e6:	50                   	push   eax
c001a4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a4eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a4ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4f3:	e8 a1 ac fe ff       	call   c0005199 <f_read>
c001a4f8:	83 c4 10             	add    esp,0x10
c001a4fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a503:	89 c2                	mov    edx,eax
c001a505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a509:	89 10                	mov    DWORD PTR [eax],edx
c001a50b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a50f:	85 c0                	test   eax,eax
c001a511:	75 07                	jne    c001a51a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a513:	b8 00 00 00 00       	mov    eax,0x0
c001a518:	eb 05                	jmp    c001a51f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a51a:	b8 01 00 00 00       	mov    eax,0x1
c001a51f:	83 c4 1c             	add    esp,0x1c
c001a522:	c3                   	ret    
c001a523:	90                   	nop

c001a524 <FAT::write(void*, unsigned long, void*, int*)>:
c001a524:	83 ec 1c             	sub    esp,0x1c
c001a527:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a52c:	74 07                	je     c001a535 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a52e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a533:	75 07                	jne    c001a53c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a535:	b8 04 00 00 00       	mov    eax,0x4
c001a53a:	eb 3d                	jmp    c001a579 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a53c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a540:	50                   	push   eax
c001a541:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a545:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a549:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a54d:	e8 c7 ae fe ff       	call   c0005419 <f_write>
c001a552:	83 c4 10             	add    esp,0x10
c001a555:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a559:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a55d:	89 c2                	mov    edx,eax
c001a55f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a563:	89 10                	mov    DWORD PTR [eax],edx
c001a565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a569:	85 c0                	test   eax,eax
c001a56b:	75 07                	jne    c001a574 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a56d:	b8 00 00 00 00       	mov    eax,0x0
c001a572:	eb 05                	jmp    c001a579 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a574:	b8 01 00 00 00       	mov    eax,0x1
c001a579:	83 c4 1c             	add    esp,0x1c
c001a57c:	c3                   	ret    
c001a57d:	90                   	nop

c001a57e <FAT::close(void*)>:
c001a57e:	83 ec 1c             	sub    esp,0x1c
c001a581:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a586:	75 07                	jne    c001a58f <FAT::close(void*)+0x11>
c001a588:	b8 04 00 00 00       	mov    eax,0x4
c001a58d:	eb 36                	jmp    c001a5c5 <FAT::close(void*)+0x47>
c001a58f:	83 ec 0c             	sub    esp,0xc
c001a592:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a596:	e8 14 b3 fe ff       	call   c00058af <f_close>
c001a59b:	83 c4 10             	add    esp,0x10
c001a59e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5a2:	83 ec 0c             	sub    esp,0xc
c001a5a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5a9:	e8 35 1a ff ff       	call   c000bfe3 <free>
c001a5ae:	83 c4 10             	add    esp,0x10
c001a5b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5b5:	85 c0                	test   eax,eax
c001a5b7:	75 07                	jne    c001a5c0 <FAT::close(void*)+0x42>
c001a5b9:	b8 00 00 00 00       	mov    eax,0x0
c001a5be:	eb 05                	jmp    c001a5c5 <FAT::close(void*)+0x47>
c001a5c0:	b8 01 00 00 00       	mov    eax,0x1
c001a5c5:	83 c4 1c             	add    esp,0x1c
c001a5c8:	c3                   	ret    
c001a5c9:	90                   	nop

c001a5ca <FAT::closeDir(void*)>:
c001a5ca:	83 ec 1c             	sub    esp,0x1c
c001a5cd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a5d2:	75 07                	jne    c001a5db <FAT::closeDir(void*)+0x11>
c001a5d4:	b8 04 00 00 00       	mov    eax,0x4
c001a5d9:	eb 36                	jmp    c001a611 <FAT::closeDir(void*)+0x47>
c001a5db:	83 ec 0c             	sub    esp,0xc
c001a5de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5e2:	e8 5e b8 fe ff       	call   c0005e45 <f_closedir>
c001a5e7:	83 c4 10             	add    esp,0x10
c001a5ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5ee:	83 ec 0c             	sub    esp,0xc
c001a5f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5f5:	e8 e9 19 ff ff       	call   c000bfe3 <free>
c001a5fa:	83 c4 10             	add    esp,0x10
c001a5fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a601:	85 c0                	test   eax,eax
c001a603:	75 07                	jne    c001a60c <FAT::closeDir(void*)+0x42>
c001a605:	b8 00 00 00 00       	mov    eax,0x0
c001a60a:	eb 05                	jmp    c001a611 <FAT::closeDir(void*)+0x47>
c001a60c:	b8 01 00 00 00       	mov    eax,0x1
c001a611:	83 c4 1c             	add    esp,0x1c
c001a614:	c3                   	ret    
c001a615:	90                   	nop

c001a616 <FAT::seek(void*, unsigned long long)>:
c001a616:	83 ec 2c             	sub    esp,0x2c
c001a619:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a61d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a621:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a625:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a629:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a62e:	75 07                	jne    c001a637 <FAT::seek(void*, unsigned long long)+0x21>
c001a630:	b8 04 00 00 00       	mov    eax,0x4
c001a635:	eb 2f                	jmp    c001a666 <FAT::seek(void*, unsigned long long)+0x50>
c001a637:	83 ec 04             	sub    esp,0x4
c001a63a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a63e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a642:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a646:	e8 93 b2 fe ff       	call   c00058de <f_lseek>
c001a64b:	83 c4 10             	add    esp,0x10
c001a64e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a652:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a656:	85 c0                	test   eax,eax
c001a658:	75 07                	jne    c001a661 <FAT::seek(void*, unsigned long long)+0x4b>
c001a65a:	b8 00 00 00 00       	mov    eax,0x0
c001a65f:	eb 05                	jmp    c001a666 <FAT::seek(void*, unsigned long long)+0x50>
c001a661:	b8 01 00 00 00       	mov    eax,0x1
c001a666:	83 c4 2c             	add    esp,0x2c
c001a669:	c3                   	ret    

c001a66a <fatWrapperReadDisk>:
c001a66a:	83 ec 1c             	sub    esp,0x1c
c001a66d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a671:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a675:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a679:	89 04 24             	mov    DWORD PTR [esp],eax
c001a67c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a680:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a684:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a688:	25 ff 00 00 00       	and    eax,0xff
c001a68d:	8b 04 85 20 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb4e0]
c001a694:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a698:	83 ec 0c             	sub    esp,0xc
c001a69b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a69f:	52                   	push   edx
c001a6a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6a8:	50                   	push   eax
c001a6a9:	e8 ee 80 ff ff       	call   c001279c <LogicalDisk::read(unsigned long long, int, void*)>
c001a6ae:	83 c4 20             	add    esp,0x20
c001a6b1:	83 c4 1c             	add    esp,0x1c
c001a6b4:	c3                   	ret    

c001a6b5 <fatWrapperWriteDisk>:
c001a6b5:	83 ec 1c             	sub    esp,0x1c
c001a6b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6c4:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a6cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6cf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6d3:	25 ff 00 00 00       	and    eax,0xff
c001a6d8:	8b 04 85 20 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb4e0]
c001a6df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a6e3:	83 ec 0c             	sub    esp,0xc
c001a6e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6ea:	52                   	push   edx
c001a6eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6f3:	50                   	push   eax
c001a6f4:	e8 0f 81 ff ff       	call   c0012808 <LogicalDisk::write(unsigned long long, int, void*)>
c001a6f9:	83 c4 20             	add    esp,0x20
c001a6fc:	83 c4 1c             	add    esp,0x1c
c001a6ff:	c3                   	ret    

c001a700 <fatWrapperIoctl>:
c001a700:	53                   	push   ebx
c001a701:	83 ec 28             	sub    esp,0x28
c001a704:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a708:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a70c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a710:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a714:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a719:	75 35                	jne    c001a750 <fatWrapperIoctl+0x50>
c001a71b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a71f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a723:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a727:	25 ff 00 00 00       	and    eax,0xff
c001a72c:	8b 04 85 20 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb4e0]
c001a733:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a739:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a73f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a743:	66 89 02             	mov    WORD PTR [edx],ax
c001a746:	b8 00 00 00 00       	mov    eax,0x0
c001a74b:	e9 bb 00 00 00       	jmp    c001a80b <fatWrapperIoctl+0x10b>
c001a750:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a755:	75 73                	jne    c001a7ca <fatWrapperIoctl+0xca>
c001a757:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a75b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a75f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a763:	25 ff 00 00 00       	and    eax,0xff
c001a768:	8b 04 85 20 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb4e0]
c001a76f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a775:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a77b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a781:	89 c8                	mov    eax,ecx
c001a783:	89 da                	mov    edx,ebx
c001a785:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a789:	c1 e0 0a             	shl    eax,0xa
c001a78c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a790:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a796:	8b 0c 8d 20 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4e0]
c001a79d:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a7a3:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a7a9:	89 cb                	mov    ebx,ecx
c001a7ab:	c1 fb 1f             	sar    ebx,0x1f
c001a7ae:	53                   	push   ebx
c001a7af:	51                   	push   ecx
c001a7b0:	52                   	push   edx
c001a7b1:	50                   	push   eax
c001a7b2:	e8 d5 4b 00 00       	call   c001f38c <__udivdi3>
c001a7b7:	83 c4 10             	add    esp,0x10
c001a7ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a7be:	89 01                	mov    DWORD PTR [ecx],eax
c001a7c0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a7c3:	b8 00 00 00 00       	mov    eax,0x0
c001a7c8:	eb 41                	jmp    c001a80b <fatWrapperIoctl+0x10b>
c001a7ca:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a7cf:	75 07                	jne    c001a7d8 <fatWrapperIoctl+0xd8>
c001a7d1:	b8 00 00 00 00       	mov    eax,0x0
c001a7d6:	eb 33                	jmp    c001a80b <fatWrapperIoctl+0x10b>
c001a7d8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a7dd:	75 19                	jne    c001a7f8 <fatWrapperIoctl+0xf8>
c001a7df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a7e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7eb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a7f1:	b8 00 00 00 00       	mov    eax,0x0
c001a7f6:	eb 13                	jmp    c001a80b <fatWrapperIoctl+0x10b>
c001a7f8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a7fd:	75 07                	jne    c001a806 <fatWrapperIoctl+0x106>
c001a7ff:	b8 00 00 00 00       	mov    eax,0x0
c001a804:	eb 05                	jmp    c001a80b <fatWrapperIoctl+0x10b>
c001a806:	b8 04 00 00 00       	mov    eax,0x4
c001a80b:	83 c4 28             	add    esp,0x28
c001a80e:	5b                   	pop    ebx
c001a80f:	c3                   	ret    

c001a810 <FAT::FAT()>:
c001a810:	83 ec 1c             	sub    esp,0x1c
c001a813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a817:	83 ec 0c             	sub    esp,0xc
c001a81a:	50                   	push   eax
c001a81b:	e8 2e 4c ff ff       	call   c000f44e <Filesystem::Filesystem()>
c001a820:	83 c4 10             	add    esp,0x10
c001a823:	ba ac 30 02 c0       	mov    edx,0xc00230ac
c001a828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a82c:	89 10                	mov    DWORD PTR [eax],edx
c001a82e:	c7 05 a0 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00259a0,0x0
c001a838:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a840:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a845:	7f 15                	jg     c001a85c <FAT::FAT()+0x4c>
c001a847:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a84b:	c7 04 85 c0 59 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda640],0xffffffff
c001a856:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a85a:	eb e4                	jmp    c001a840 <FAT::FAT()+0x30>
c001a85c:	90                   	nop
c001a85d:	83 c4 1c             	add    esp,0x1c
c001a860:	c3                   	ret    
c001a861:	90                   	nop

c001a862 <FAT::fixFilepath(char*)>:
c001a862:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a866:	8a 00                	mov    al,BYTE PTR [eax]
c001a868:	3c 40                	cmp    al,0x40
c001a86a:	7e 2c                	jle    c001a898 <FAT::fixFilepath(char*)+0x36>
c001a86c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a870:	8a 00                	mov    al,BYTE PTR [eax]
c001a872:	83 e8 41             	sub    eax,0x41
c001a875:	88 c2                	mov    dl,al
c001a877:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a87b:	88 10                	mov    BYTE PTR [eax],dl
c001a87d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a881:	8a 00                	mov    al,BYTE PTR [eax]
c001a883:	0f be c0             	movsx  eax,al
c001a886:	8b 04 85 c0 59 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda640]
c001a88d:	83 c0 30             	add    eax,0x30
c001a890:	88 c2                	mov    dl,al
c001a892:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a896:	88 10                	mov    BYTE PTR [eax],dl
c001a898:	90                   	nop
c001a899:	c3                   	ret    

c001a89a <FAT::open(char const*, void**, FileOpenMode)>:
c001a89a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a8a0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a8a8:	74 0a                	je     c001a8b4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a8aa:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a8b2:	75 0a                	jne    c001a8be <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a8b4:	b8 04 00 00 00       	mov    eax,0x4
c001a8b9:	e9 00 01 00 00       	jmp    c001a9be <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a8be:	83 ec 08             	sub    esp,0x8
c001a8c1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a8c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8cc:	50                   	push   eax
c001a8cd:	e8 87 5e fe ff       	call   c0000759 <strcpy>
c001a8d2:	83 c4 10             	add    esp,0x10
c001a8d5:	83 ec 08             	sub    esp,0x8
c001a8d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a8dc:	50                   	push   eax
c001a8dd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a8e4:	e8 79 ff ff ff       	call   c001a862 <FAT::fixFilepath(char*)>
c001a8e9:	83 c4 10             	add    esp,0x10
c001a8ec:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a8f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a8fb:	83 e0 01             	and    eax,0x1
c001a8fe:	74 08                	je     c001a908 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a900:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a908:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a90f:	83 e0 04             	and    eax,0x4
c001a912:	74 10                	je     c001a924 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a914:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a91c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a924:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a92b:	83 e0 02             	and    eax,0x2
c001a92e:	74 08                	je     c001a938 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a930:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a938:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a93f:	83 e0 08             	and    eax,0x8
c001a942:	74 08                	je     c001a94c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a944:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a94c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a953:	83 e0 10             	and    eax,0x10
c001a956:	74 08                	je     c001a960 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a958:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a960:	83 ec 0c             	sub    esp,0xc
c001a963:	68 50 02 00 00       	push   0x250
c001a968:	e8 66 16 ff ff       	call   c000bfd3 <malloc>
c001a96d:	83 c4 10             	add    esp,0x10
c001a970:	89 c2                	mov    edx,eax
c001a972:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a979:	89 10                	mov    DWORD PTR [eax],edx
c001a97b:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a982:	31 d2                	xor    edx,edx
c001a984:	88 c2                	mov    dl,al
c001a986:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a98d:	8b 00                	mov    eax,DWORD PTR [eax]
c001a98f:	83 ec 04             	sub    esp,0x4
c001a992:	52                   	push   edx
c001a993:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a997:	52                   	push   edx
c001a998:	50                   	push   eax
c001a999:	e8 bf a3 fe ff       	call   c0004d5d <f_open>
c001a99e:	83 c4 10             	add    esp,0x10
c001a9a1:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a9a8:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a9b0:	74 07                	je     c001a9b9 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001a9b2:	b8 01 00 00 00       	mov    eax,0x1
c001a9b7:	eb 05                	jmp    c001a9be <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a9b9:	b8 00 00 00 00       	mov    eax,0x0
c001a9be:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9c4:	c3                   	ret    
c001a9c5:	90                   	nop

c001a9c6 <FAT::openDir(char const*, void**)>:
c001a9c6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9cc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a9d4:	74 0a                	je     c001a9e0 <FAT::openDir(char const*, void**)+0x1a>
c001a9d6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a9de:	75 07                	jne    c001a9e7 <FAT::openDir(char const*, void**)+0x21>
c001a9e0:	b8 04 00 00 00       	mov    eax,0x4
c001a9e5:	eb 7d                	jmp    c001aa64 <FAT::openDir(char const*, void**)+0x9e>
c001a9e7:	83 ec 08             	sub    esp,0x8
c001a9ea:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a9f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a9f5:	50                   	push   eax
c001a9f6:	e8 5e 5d fe ff       	call   c0000759 <strcpy>
c001a9fb:	83 c4 10             	add    esp,0x10
c001a9fe:	83 ec 08             	sub    esp,0x8
c001aa01:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa05:	50                   	push   eax
c001aa06:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa0d:	e8 50 fe ff ff       	call   c001a862 <FAT::fixFilepath(char*)>
c001aa12:	83 c4 10             	add    esp,0x10
c001aa15:	83 ec 0c             	sub    esp,0xc
c001aa18:	6a 4c                	push   0x4c
c001aa1a:	e8 b4 15 ff ff       	call   c000bfd3 <malloc>
c001aa1f:	83 c4 10             	add    esp,0x10
c001aa22:	89 c2                	mov    edx,eax
c001aa24:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa2b:	89 10                	mov    DWORD PTR [eax],edx
c001aa2d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa34:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa36:	83 ec 08             	sub    esp,0x8
c001aa39:	8d 54 24 14          	lea    edx,[esp+0x14]
c001aa3d:	52                   	push   edx
c001aa3e:	50                   	push   eax
c001aa3f:	e8 ff b2 fe ff       	call   c0005d43 <f_opendir>
c001aa44:	83 c4 10             	add    esp,0x10
c001aa47:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa4e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001aa56:	74 07                	je     c001aa5f <FAT::openDir(char const*, void**)+0x99>
c001aa58:	b8 01 00 00 00       	mov    eax,0x1
c001aa5d:	eb 05                	jmp    c001aa64 <FAT::openDir(char const*, void**)+0x9e>
c001aa5f:	b8 00 00 00 00       	mov    eax,0x0
c001aa64:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa6a:	c3                   	ret    
c001aa6b:	90                   	nop

c001aa6c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001aa6c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aa72:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001aa7a:	75 0a                	jne    c001aa86 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001aa7c:	b8 04 00 00 00       	mov    eax,0x4
c001aa81:	e9 cb 00 00 00       	jmp    c001ab51 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aa86:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001aa8e:	75 0a                	jne    c001aa9a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001aa90:	b8 04 00 00 00       	mov    eax,0x4
c001aa95:	e9 b7 00 00 00       	jmp    c001ab51 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aa9a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001aaa2:	75 0a                	jne    c001aaae <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001aaa4:	b8 04 00 00 00       	mov    eax,0x4
c001aaa9:	e9 a3 00 00 00       	jmp    c001ab51 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aaae:	83 ec 08             	sub    esp,0x8
c001aab1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aab8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aabf:	50                   	push   eax
c001aac0:	e8 94 5c fe ff       	call   c0000759 <strcpy>
c001aac5:	83 c4 10             	add    esp,0x10
c001aac8:	83 ec 08             	sub    esp,0x8
c001aacb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001aad2:	50                   	push   eax
c001aad3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aada:	e8 83 fd ff ff       	call   c001a862 <FAT::fixFilepath(char*)>
c001aadf:	83 c4 10             	add    esp,0x10
c001aae2:	83 ec 08             	sub    esp,0x8
c001aae5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aae9:	50                   	push   eax
c001aaea:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aaf1:	50                   	push   eax
c001aaf2:	e8 0b b4 fe ff       	call   c0005f02 <f_stat>
c001aaf7:	83 c4 10             	add    esp,0x10
c001aafa:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab01:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab08:	85 c0                	test   eax,eax
c001ab0a:	74 07                	je     c001ab13 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ab0c:	83 f8 04             	cmp    eax,0x4
c001ab0f:	74 34                	je     c001ab45 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ab11:	eb 39                	jmp    c001ab4c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ab13:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ab17:	25 ff 00 00 00       	and    eax,0xff
c001ab1c:	83 e0 10             	and    eax,0x10
c001ab1f:	0f 95 c2             	setne  dl
c001ab22:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ab29:	88 10                	mov    BYTE PTR [eax],dl
c001ab2b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ab2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab32:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ab39:	89 01                	mov    DWORD PTR [ecx],eax
c001ab3b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ab3e:	b8 00 00 00 00       	mov    eax,0x0
c001ab43:	eb 0c                	jmp    c001ab51 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab45:	b8 02 00 00 00       	mov    eax,0x2
c001ab4a:	eb 05                	jmp    c001ab51 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab4c:	b8 01 00 00 00       	mov    eax,0x1
c001ab51:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ab57:	c3                   	ret    

c001ab58 <FAT::unlink(char const*)>:
c001ab58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab66:	75 07                	jne    c001ab6f <FAT::unlink(char const*)+0x17>
c001ab68:	b8 04 00 00 00       	mov    eax,0x4
c001ab6d:	eb 5c                	jmp    c001abcb <FAT::unlink(char const*)+0x73>
c001ab6f:	83 ec 08             	sub    esp,0x8
c001ab72:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab79:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab7d:	50                   	push   eax
c001ab7e:	e8 d6 5b fe ff       	call   c0000759 <strcpy>
c001ab83:	83 c4 10             	add    esp,0x10
c001ab86:	83 ec 08             	sub    esp,0x8
c001ab89:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab8d:	50                   	push   eax
c001ab8e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab95:	e8 c8 fc ff ff       	call   c001a862 <FAT::fixFilepath(char*)>
c001ab9a:	83 c4 10             	add    esp,0x10
c001ab9d:	83 ec 0c             	sub    esp,0xc
c001aba0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aba4:	50                   	push   eax
c001aba5:	e8 c7 b6 fe ff       	call   c0006271 <f_unlink>
c001abaa:	83 c4 10             	add    esp,0x10
c001abad:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001abb4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001abbb:	85 c0                	test   eax,eax
c001abbd:	75 07                	jne    c001abc6 <FAT::unlink(char const*)+0x6e>
c001abbf:	b8 00 00 00 00       	mov    eax,0x0
c001abc4:	eb 05                	jmp    c001abcb <FAT::unlink(char const*)+0x73>
c001abc6:	b8 01 00 00 00       	mov    eax,0x1
c001abcb:	81 c4 1c 01 00 00    	add    esp,0x11c
c001abd1:	c3                   	ret    

c001abd2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001abd2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001abd8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001abdf:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001abe6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001abea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001abee:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001abf6:	75 0a                	jne    c001ac02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001abf8:	b8 04 00 00 00       	mov    eax,0x4
c001abfd:	e9 43 01 00 00       	jmp    c001ad45 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ac02:	83 ec 08             	sub    esp,0x8
c001ac05:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac0c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac10:	50                   	push   eax
c001ac11:	e8 43 5b fe ff       	call   c0000759 <strcpy>
c001ac16:	83 c4 10             	add    esp,0x10
c001ac19:	83 ec 08             	sub    esp,0x8
c001ac1c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ac20:	50                   	push   eax
c001ac21:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac28:	e8 35 fc ff ff       	call   c001a862 <FAT::fixFilepath(char*)>
c001ac2d:	83 c4 10             	add    esp,0x10
c001ac30:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ac38:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ac40:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ac44:	25 ff 00 00 00       	and    eax,0xff
c001ac49:	83 e0 01             	and    eax,0x1
c001ac4c:	74 08                	je     c001ac56 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001ac4e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ac56:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ac5a:	25 ff 00 00 00       	and    eax,0xff
c001ac5f:	83 e0 02             	and    eax,0x2
c001ac62:	74 08                	je     c001ac6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001ac64:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001ac6c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ac70:	25 ff 00 00 00       	and    eax,0xff
c001ac75:	83 e0 04             	and    eax,0x4
c001ac78:	74 08                	je     c001ac82 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001ac7a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001ac82:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ac86:	25 ff 00 00 00       	and    eax,0xff
c001ac8b:	83 e0 08             	and    eax,0x8
c001ac8e:	74 08                	je     c001ac98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001ac90:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ac98:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac9c:	25 ff 00 00 00       	and    eax,0xff
c001aca1:	83 e0 01             	and    eax,0x1
c001aca4:	74 08                	je     c001acae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001aca6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001acae:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001acb2:	25 ff 00 00 00       	and    eax,0xff
c001acb7:	83 e0 02             	and    eax,0x2
c001acba:	74 08                	je     c001acc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001acbc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001acc4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001acc8:	25 ff 00 00 00       	and    eax,0xff
c001accd:	83 e0 04             	and    eax,0x4
c001acd0:	74 08                	je     c001acda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001acd2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001acda:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001acde:	25 ff 00 00 00       	and    eax,0xff
c001ace3:	83 e0 08             	and    eax,0x8
c001ace6:	74 08                	je     c001acf0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ace8:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001acf0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001acf7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001acfe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ad05:	31 d2                	xor    edx,edx
c001ad07:	88 c2                	mov    dl,al
c001ad09:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ad10:	25 ff 00 00 00       	and    eax,0xff
c001ad15:	83 ec 04             	sub    esp,0x4
c001ad18:	52                   	push   edx
c001ad19:	50                   	push   eax
c001ad1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad1e:	50                   	push   eax
c001ad1f:	e8 ed bb fe ff       	call   c0006911 <f_chmod>
c001ad24:	83 c4 10             	add    esp,0x10
c001ad27:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ad2e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ad35:	85 c0                	test   eax,eax
c001ad37:	75 07                	jne    c001ad40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ad39:	b8 00 00 00 00       	mov    eax,0x0
c001ad3e:	eb 05                	jmp    c001ad45 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad40:	b8 01 00 00 00       	mov    eax,0x1
c001ad45:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad4b:	c3                   	ret    

c001ad4c <FAT::rename(char const*, char const*)>:
c001ad4c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ad52:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ad5a:	74 0a                	je     c001ad66 <FAT::rename(char const*, char const*)+0x1a>
c001ad5c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ad64:	75 0a                	jne    c001ad70 <FAT::rename(char const*, char const*)+0x24>
c001ad66:	b8 04 00 00 00       	mov    eax,0x4
c001ad6b:	e9 98 00 00 00       	jmp    c001ae08 <FAT::rename(char const*, char const*)+0xbc>
c001ad70:	83 ec 08             	sub    esp,0x8
c001ad73:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ad7a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ad81:	50                   	push   eax
c001ad82:	e8 d2 59 fe ff       	call   c0000759 <strcpy>
c001ad87:	83 c4 10             	add    esp,0x10
c001ad8a:	83 ec 08             	sub    esp,0x8
c001ad8d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ad94:	50                   	push   eax
c001ad95:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ad9c:	e8 c1 fa ff ff       	call   c001a862 <FAT::fixFilepath(char*)>
c001ada1:	83 c4 10             	add    esp,0x10
c001ada4:	83 ec 08             	sub    esp,0x8
c001ada7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001adae:	8d 44 24 18          	lea    eax,[esp+0x18]
c001adb2:	50                   	push   eax
c001adb3:	e8 a1 59 fe ff       	call   c0000759 <strcpy>
c001adb8:	83 c4 10             	add    esp,0x10
c001adbb:	83 ec 08             	sub    esp,0x8
c001adbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001adc2:	50                   	push   eax
c001adc3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001adca:	e8 93 fa ff ff       	call   c001a862 <FAT::fixFilepath(char*)>
c001adcf:	83 c4 10             	add    esp,0x10
c001add2:	83 ec 08             	sub    esp,0x8
c001add5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001add9:	50                   	push   eax
c001adda:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ade1:	50                   	push   eax
c001ade2:	e8 37 b8 fe ff       	call   c000661e <f_rename>
c001ade7:	83 c4 10             	add    esp,0x10
c001adea:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001adf1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001adf8:	85 c0                	test   eax,eax
c001adfa:	75 07                	jne    c001ae03 <FAT::rename(char const*, char const*)+0xb7>
c001adfc:	b8 00 00 00 00       	mov    eax,0x0
c001ae01:	eb 05                	jmp    c001ae08 <FAT::rename(char const*, char const*)+0xbc>
c001ae03:	b8 01 00 00 00       	mov    eax,0x1
c001ae08:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ae0e:	c3                   	ret    
c001ae0f:	90                   	nop

c001ae10 <FAT::mkdir(char const*)>:
c001ae10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ae16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ae1e:	75 07                	jne    c001ae27 <FAT::mkdir(char const*)+0x17>
c001ae20:	b8 04 00 00 00       	mov    eax,0x4
c001ae25:	eb 5c                	jmp    c001ae83 <FAT::mkdir(char const*)+0x73>
c001ae27:	83 ec 08             	sub    esp,0x8
c001ae2a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae31:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae35:	50                   	push   eax
c001ae36:	e8 1e 59 fe ff       	call   c0000759 <strcpy>
c001ae3b:	83 c4 10             	add    esp,0x10
c001ae3e:	83 ec 08             	sub    esp,0x8
c001ae41:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae45:	50                   	push   eax
c001ae46:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae4d:	e8 10 fa ff ff       	call   c001a862 <FAT::fixFilepath(char*)>
c001ae52:	83 c4 10             	add    esp,0x10
c001ae55:	83 ec 0c             	sub    esp,0xc
c001ae58:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae5c:	50                   	push   eax
c001ae5d:	e8 90 b5 fe ff       	call   c00063f2 <f_mkdir>
c001ae62:	83 c4 10             	add    esp,0x10
c001ae65:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ae6c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ae73:	85 c0                	test   eax,eax
c001ae75:	75 07                	jne    c001ae7e <FAT::mkdir(char const*)+0x6e>
c001ae77:	b8 00 00 00 00       	mov    eax,0x0
c001ae7c:	eb 05                	jmp    c001ae83 <FAT::mkdir(char const*)+0x73>
c001ae7e:	b8 01 00 00 00       	mov    eax,0x1
c001ae83:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ae89:	c3                   	ret    

c001ae8a <FAT::exists(char const*)>:
c001ae8a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ae90:	83 ec 08             	sub    esp,0x8
c001ae93:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ae9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ae9e:	50                   	push   eax
c001ae9f:	e8 b5 58 fe ff       	call   c0000759 <strcpy>
c001aea4:	83 c4 10             	add    esp,0x10
c001aea7:	83 ec 08             	sub    esp,0x8
c001aeaa:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aeae:	50                   	push   eax
c001aeaf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aeb6:	e8 a7 f9 ff ff       	call   c001a862 <FAT::fixFilepath(char*)>
c001aebb:	83 c4 10             	add    esp,0x10
c001aebe:	83 ec 08             	sub    esp,0x8
c001aec1:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001aec8:	50                   	push   eax
c001aec9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aecd:	50                   	push   eax
c001aece:	e8 2f b0 fe ff       	call   c0005f02 <f_stat>
c001aed3:	83 c4 10             	add    esp,0x10
c001aed6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aedd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aee4:	85 c0                	test   eax,eax
c001aee6:	75 04                	jne    c001aeec <FAT::exists(char const*)+0x62>
c001aee8:	b0 01                	mov    al,0x1
c001aeea:	eb 02                	jmp    c001aeee <FAT::exists(char const*)+0x64>
c001aeec:	b0 00                	mov    al,0x0
c001aeee:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aef4:	c3                   	ret    
c001aef5:	90                   	nop

c001aef6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001aef6:	b8 08 00 00 00       	mov    eax,0x8
c001aefb:	c3                   	ret    

c001aefc <ISO9660::seek(void*, unsigned long long)>:
c001aefc:	53                   	push   ebx
c001aefd:	b8 04 00 00 00       	mov    eax,0x4
c001af02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001af0e:	85 d2                	test   edx,edx
c001af10:	74 17                	je     c001af29 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001af12:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001af15:	89 c8                	mov    eax,ecx
c001af17:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001af1a:	b8 01 00 00 00       	mov    eax,0x1
c001af1f:	73 08                	jae    c001af29 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001af21:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001af24:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001af27:	31 c0                	xor    eax,eax
c001af29:	5b                   	pop    ebx
c001af2a:	c3                   	ret    
c001af2b:	90                   	nop

c001af2c <ISO9660::tell(void*, unsigned long long*)>:
c001af2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af34:	85 d2                	test   edx,edx
c001af36:	74 12                	je     c001af4a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001af38:	85 c0                	test   eax,eax
c001af3a:	74 0e                	je     c001af4a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001af3c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af3f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001af42:	89 10                	mov    DWORD PTR [eax],edx
c001af44:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001af47:	31 c0                	xor    eax,eax
c001af49:	c3                   	ret    
c001af4a:	b8 04 00 00 00       	mov    eax,0x4
c001af4f:	c3                   	ret    

c001af50 <ISO9660::getName()>:
c001af50:	b8 08 31 02 c0       	mov    eax,0xc0023108
c001af55:	c3                   	ret    

c001af56 <ISO9660::stat(void*, unsigned long long*)>:
c001af56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af5e:	85 d2                	test   edx,edx
c001af60:	74 12                	je     c001af74 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001af62:	85 c0                	test   eax,eax
c001af64:	74 0e                	je     c001af74 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001af66:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001af69:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001af6c:	89 10                	mov    DWORD PTR [eax],edx
c001af6e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001af71:	31 c0                	xor    eax,eax
c001af73:	c3                   	ret    
c001af74:	b8 04 00 00 00       	mov    eax,0x4
c001af79:	c3                   	ret    

c001af7a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001af7a:	b8 01 00 00 00       	mov    eax,0x1
c001af7f:	c3                   	ret    

c001af80 <ISO9660::unlink(char const*)>:
c001af80:	b8 01 00 00 00       	mov    eax,0x1
c001af85:	c3                   	ret    

c001af86 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001af86:	b8 01 00 00 00       	mov    eax,0x1
c001af8b:	c3                   	ret    

c001af8c <ISO9660::rename(char const*, char const*)>:
c001af8c:	b8 01 00 00 00       	mov    eax,0x1
c001af91:	c3                   	ret    

c001af92 <ISO9660::mkdir(char const*)>:
c001af92:	b8 01 00 00 00       	mov    eax,0x1
c001af97:	c3                   	ret    

c001af98 <ISO9660::close(void*)>:
c001af98:	83 ec 0c             	sub    esp,0xc
c001af9b:	b8 04 00 00 00       	mov    eax,0x4
c001afa0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afa4:	85 d2                	test   edx,edx
c001afa6:	74 0e                	je     c001afb6 <ISO9660::close(void*)+0x1e>
c001afa8:	83 ec 0c             	sub    esp,0xc
c001afab:	52                   	push   edx
c001afac:	e8 32 10 ff ff       	call   c000bfe3 <free>
c001afb1:	83 c4 10             	add    esp,0x10
c001afb4:	31 c0                	xor    eax,eax
c001afb6:	83 c4 0c             	add    esp,0xc
c001afb9:	c3                   	ret    

c001afba <ISO9660::closeDir(void*)>:
c001afba:	83 ec 0c             	sub    esp,0xc
c001afbd:	b8 04 00 00 00       	mov    eax,0x4
c001afc2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afc6:	85 d2                	test   edx,edx
c001afc8:	74 0e                	je     c001afd8 <ISO9660::closeDir(void*)+0x1e>
c001afca:	83 ec 0c             	sub    esp,0xc
c001afcd:	52                   	push   edx
c001afce:	e8 10 10 ff ff       	call   c000bfe3 <free>
c001afd3:	83 c4 10             	add    esp,0x10
c001afd6:	31 c0                	xor    eax,eax
c001afd8:	83 c4 0c             	add    esp,0xc
c001afdb:	c3                   	ret    

c001afdc <ISO9660::~ISO9660()>:
c001afdc:	83 ec 0c             	sub    esp,0xc
c001afdf:	ba 5c 31 02 c0       	mov    edx,0xc002315c
c001afe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afe8:	89 10                	mov    DWORD PTR [eax],edx
c001afea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afee:	83 ec 0c             	sub    esp,0xc
c001aff1:	50                   	push   eax
c001aff2:	e8 7b 44 ff ff       	call   c000f472 <Filesystem::~Filesystem()>
c001aff7:	83 c4 10             	add    esp,0x10
c001affa:	90                   	nop
c001affb:	83 c4 0c             	add    esp,0xc
c001affe:	c3                   	ret    
c001afff:	90                   	nop

c001b000 <ISO9660::~ISO9660()>:
c001b000:	83 ec 0c             	sub    esp,0xc
c001b003:	83 ec 0c             	sub    esp,0xc
c001b006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b00a:	e8 cd ff ff ff       	call   c001afdc <ISO9660::~ISO9660()>
c001b00f:	83 c4 10             	add    esp,0x10
c001b012:	83 ec 08             	sub    esp,0x8
c001b015:	6a 08                	push   0x8
c001b017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b01b:	e8 fb 3f ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001b020:	83 c4 10             	add    esp,0x10
c001b023:	83 c4 0c             	add    esp,0xc
c001b026:	c3                   	ret    

c001b027 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b027:	55                   	push   ebp
c001b028:	31 c9                	xor    ecx,ecx
c001b02a:	57                   	push   edi
c001b02b:	56                   	push   esi
c001b02c:	53                   	push   ebx
c001b02d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b031:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b035:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b039:	89 eb                	mov    ebx,ebp
c001b03b:	39 ce                	cmp    esi,ecx
c001b03d:	7e 17                	jle    c001b056 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b03f:	31 d2                	xor    edx,edx
c001b041:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b045:	7d 13                	jge    c001b05a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b047:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b04b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b04e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b051:	75 0d                	jne    c001b060 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b053:	42                   	inc    edx
c001b054:	eb eb                	jmp    c001b041 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b056:	31 c0                	xor    eax,eax
c001b058:	eb 0a                	jmp    c001b064 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b05a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b05e:	eb 04                	jmp    c001b064 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b060:	41                   	inc    ecx
c001b061:	43                   	inc    ebx
c001b062:	eb d7                	jmp    c001b03b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b064:	5b                   	pop    ebx
c001b065:	5e                   	pop    esi
c001b066:	5f                   	pop    edi
c001b067:	5d                   	pop    ebp
c001b068:	c3                   	ret    

c001b069 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b069:	56                   	push   esi
c001b06a:	53                   	push   ebx
c001b06b:	52                   	push   edx
c001b06c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b070:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b074:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b078:	39 0d a0 5a 02 c0    	cmp    DWORD PTR ds:0xc0025aa0,ecx
c001b07e:	75 08                	jne    c001b088 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b080:	38 05 48 3f 02 c0    	cmp    BYTE PTR ds:0xc0023f48,al
c001b086:	74 2b                	je     c001b0b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b088:	83 ec 0c             	sub    esp,0xc
c001b08b:	31 db                	xor    ebx,ebx
c001b08d:	a2 48 3f 02 c0       	mov    ds:0xc0023f48,al
c001b092:	89 0d a0 5a 02 c0    	mov    DWORD PTR ds:0xc0025aa0,ecx
c001b098:	68 c0 5a 02 c0       	push   0xc0025ac0
c001b09d:	6a 01                	push   0x1
c001b09f:	53                   	push   ebx
c001b0a0:	0f be c0             	movsx  eax,al
c001b0a3:	51                   	push   ecx
c001b0a4:	ff 34 85 1c 4a 02 c0 	push   DWORD PTR [eax*4-0x3ffdb5e4]
c001b0ab:	e8 ec 76 ff ff       	call   c001279c <LogicalDisk::read(unsigned long long, int, void*)>
c001b0b0:	83 c4 20             	add    esp,0x20
c001b0b3:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b0bb:	c7 44 24 14 c0 5a 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025ac0
c001b0c3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b0c7:	58                   	pop    eax
c001b0c8:	5b                   	pop    ebx
c001b0c9:	5e                   	pop    esi
c001b0ca:	e9 b5 55 fe ff       	jmp    c0000684 <memcpy>
c001b0cf:	90                   	nop

c001b0d0 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b0d0:	81 ec 10 08 00 00    	sub    esp,0x810
c001b0d6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b0dd:	83 c0 41             	add    eax,0x41
c001b0e0:	0f be c0             	movsx  eax,al
c001b0e3:	50                   	push   eax
c001b0e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b0e8:	50                   	push   eax
c001b0e9:	6a 10                	push   0x10
c001b0eb:	e8 79 ff ff ff       	call   c001b069 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b0f0:	83 c4 10             	add    esp,0x10
c001b0f3:	31 c0                	xor    eax,eax
c001b0f5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b0fa:	75 1d                	jne    c001b119 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b0fc:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b101:	75 16                	jne    c001b119 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b103:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b108:	75 0f                	jne    c001b119 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b10a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b10f:	75 08                	jne    c001b119 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b111:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b116:	0f 94 c0             	sete   al
c001b119:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b11f:	c3                   	ret    

c001b120 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b120:	55                   	push   ebp
c001b121:	57                   	push   edi
c001b122:	56                   	push   esi
c001b123:	53                   	push   ebx
c001b124:	81 ec 34 08 00 00    	sub    esp,0x834
c001b12a:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b131:	55                   	push   ebp
c001b132:	68 23 31 02 c0       	push   0xc0023123
c001b137:	e8 05 40 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001b13c:	83 c4 10             	add    esp,0x10
c001b13f:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b147:	0f 84 06 02 00 00    	je     c001b353 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b14d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b155:	0f 84 f8 01 00 00    	je     c001b353 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b15b:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b162:	b8 01 00 00 00       	mov    eax,0x1
c001b167:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b16b:	0f 85 e7 01 00 00    	jne    c001b358 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b171:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b174:	31 d2                	xor    edx,edx
c001b176:	89 e9                	mov    ecx,ebp
c001b178:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b17b:	01 f1                	add    ecx,esi
c001b17d:	89 d3                	mov    ebx,edx
c001b17f:	11 fb                	adc    ebx,edi
c001b181:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b185:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b189:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b190:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b193:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b196:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b19a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b19e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b1a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1a6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b1aa:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b1ae:	72 19                	jb     c001b1c9 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b1b0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b1bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b1bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b1c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b1c7:	eb 13                	jmp    c001b1dc <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b1c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1d1:	29 f0                	sub    eax,esi
c001b1d3:	19 fa                	sbb    edx,edi
c001b1d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b1dc:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b1e3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b1e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1e8:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b1ec:	c1 e0 0b             	shl    eax,0xb
c001b1ef:	53                   	push   ebx
c001b1f0:	01 c6                	add    esi,eax
c001b1f2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b1f9:	11 d7                	adc    edi,edx
c001b1fb:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b1ff:	50                   	push   eax
c001b200:	89 fa                	mov    edx,edi
c001b202:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b206:	50                   	push   eax
c001b207:	89 f0                	mov    eax,esi
c001b209:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b20d:	50                   	push   eax
c001b20e:	e8 56 fe ff ff       	call   c001b069 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b213:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b21a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b21e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b222:	83 c4 10             	add    esp,0x10
c001b225:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b228:	b8 00 08 00 00       	mov    eax,0x800
c001b22d:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b233:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b237:	29 d0                	sub    eax,edx
c001b239:	39 c1                	cmp    ecx,eax
c001b23b:	83 db 00             	sbb    ebx,0x0
c001b23e:	7d 19                	jge    c001b259 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b240:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b245:	75 16                	jne    c001b25d <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b247:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b24e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b254:	e9 f6 00 00 00       	jmp    c001b34f <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b259:	89 c5                	mov    ebp,eax
c001b25b:	eb 03                	jmp    c001b260 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b25d:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b260:	51                   	push   ecx
c001b261:	55                   	push   ebp
c001b262:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b266:	50                   	push   eax
c001b267:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b26e:	e8 11 54 fe ff       	call   c0000684 <memcpy>
c001b273:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b27a:	01 e8                	add    eax,ebp
c001b27c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b280:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b284:	89 e8                	mov    eax,ebp
c001b286:	99                   	cdq    
c001b287:	01 ee                	add    esi,ebp
c001b289:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b28d:	11 d7                	adc    edi,edx
c001b28f:	29 e9                	sub    ecx,ebp
c001b291:	19 d3                	sbb    ebx,edx
c001b293:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b297:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b29b:	83 c4 10             	add    esp,0x10
c001b29e:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b2a3:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b2a6:	b8 00 00 00 00       	mov    eax,0x0
c001b2ab:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b2af:	7d 3f                	jge    c001b2f0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b2b1:	52                   	push   edx
c001b2b2:	89 fa                	mov    edx,edi
c001b2b4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b2bb:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b2bf:	50                   	push   eax
c001b2c0:	89 f0                	mov    eax,esi
c001b2c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2c6:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b2ca:	50                   	push   eax
c001b2cb:	e8 99 fd ff ff       	call   c001b069 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b2d0:	81 c6 00 08 00 00    	add    esi,0x800
c001b2d6:	83 d7 00             	adc    edi,0x0
c001b2d9:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b2e1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b2e9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b2ee:	eb ab                	jmp    c001b29b <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b2f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2f4:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b2f7:	74 34                	je     c001b32d <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b2f9:	50                   	push   eax
c001b2fa:	89 fa                	mov    edx,edi
c001b2fc:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b303:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b307:	50                   	push   eax
c001b308:	89 f0                	mov    eax,esi
c001b30a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b30e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b312:	55                   	push   ebp
c001b313:	50                   	push   eax
c001b314:	e8 50 fd ff ff       	call   c001b069 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b319:	83 c4 0c             	add    esp,0xc
c001b31c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b320:	55                   	push   ebp
c001b321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b325:	e8 5a 53 fe ff       	call   c0000684 <memcpy>
c001b32a:	83 c4 10             	add    esp,0x10
c001b32d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b334:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b338:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b33c:	89 38                	mov    DWORD PTR [eax],edi
c001b33e:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b345:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b349:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b34c:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b34f:	31 c0                	xor    eax,eax
c001b351:	eb 05                	jmp    c001b358 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b353:	b8 04 00 00 00       	mov    eax,0x4
c001b358:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b35e:	5b                   	pop    ebx
c001b35f:	5e                   	pop    esi
c001b360:	5f                   	pop    edi
c001b361:	5d                   	pop    ebp
c001b362:	c3                   	ret    
c001b363:	90                   	nop

c001b364 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b364:	55                   	push   ebp
c001b365:	57                   	push   edi
c001b366:	56                   	push   esi
c001b367:	53                   	push   ebx
c001b368:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b36e:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b375:	85 f6                	test   esi,esi
c001b377:	0f 84 62 02 00 00    	je     c001b5df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b37d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b385:	0f 84 54 02 00 00    	je     c001b5df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b38b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b38e:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b391:	75 0a                	jne    c001b39d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b393:	b8 07 00 00 00       	mov    eax,0x7
c001b398:	e9 47 02 00 00       	jmp    c001b5e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b39d:	50                   	push   eax
c001b39e:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b3a2:	50                   	push   eax
c001b3a3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b3aa:	53                   	push   ebx
c001b3ab:	8b 06                	mov    eax,DWORD PTR [esi]
c001b3ad:	c1 e0 0b             	shl    eax,0xb
c001b3b0:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b3b3:	c1 e8 0b             	shr    eax,0xb
c001b3b6:	50                   	push   eax
c001b3b7:	e8 ad fc ff ff       	call   c001b069 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b3bc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b3bf:	83 c4 10             	add    esp,0x10
c001b3c2:	89 c1                	mov    ecx,eax
c001b3c4:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b3c7:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b3cd:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b3d0:	84 db                	test   bl,bl
c001b3d2:	0f 85 90 00 00 00    	jne    c001b468 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b3d8:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b3de:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b3e4:	29 c7                	sub    edi,eax
c001b3e6:	89 fb                	mov    ebx,edi
c001b3e8:	c1 fb 1f             	sar    ebx,0x1f
c001b3eb:	01 f8                	add    eax,edi
c001b3ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b3f4:	11 da                	adc    edx,ebx
c001b3f6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b3f9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b400:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b403:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b406:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b409:	89 d8                	mov    eax,ebx
c001b40b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b40f:	ba 00 00 00 00       	mov    edx,0x0
c001b414:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b418:	b8 00 00 00 00       	mov    eax,0x0
c001b41d:	73 0b                	jae    c001b42a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b41f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b422:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b426:	29 f8                	sub    eax,edi
c001b428:	19 da                	sbb    edx,ebx
c001b42a:	89 d3                	mov    ebx,edx
c001b42c:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b42f:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b432:	09 c3                	or     ebx,eax
c001b434:	0f 84 59 ff ff ff    	je     c001b393 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b43a:	55                   	push   ebp
c001b43b:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b43f:	50                   	push   eax
c001b440:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b447:	53                   	push   ebx
c001b448:	8b 06                	mov    eax,DWORD PTR [esi]
c001b44a:	c1 e0 0b             	shl    eax,0xb
c001b44d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b451:	c1 e8 0b             	shr    eax,0xb
c001b454:	50                   	push   eax
c001b455:	e8 0f fc ff ff       	call   c001b069 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b45a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b45d:	83 c4 10             	add    esp,0x10
c001b460:	25 ff 07 00 00       	and    eax,0x7ff
c001b465:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b468:	57                   	push   edi
c001b469:	6a 28                	push   0x28
c001b46b:	6a 00                	push   0x0
c001b46d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b471:	50                   	push   eax
c001b472:	e8 43 52 fe ff       	call   c00006ba <memset>
c001b477:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b47a:	31 d2                	xor    edx,edx
c001b47c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b482:	89 f8                	mov    eax,edi
c001b484:	83 c0 21             	add    eax,0x21
c001b487:	83 d2 00             	adc    edx,0x0
c001b48a:	89 c7                	mov    edi,eax
c001b48c:	89 d5                	mov    ebp,edx
c001b48e:	83 c4 10             	add    esp,0x10
c001b491:	31 c9                	xor    ecx,ecx
c001b493:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b49a:	83 f9 28             	cmp    ecx,0x28
c001b49d:	0f 94 c2             	sete   dl
c001b4a0:	88 04 24             	mov    BYTE PTR [esp],al
c001b4a3:	88 d0                	mov    al,dl
c001b4a5:	ba ff 07 00 00       	mov    edx,0x7ff
c001b4aa:	39 fa                	cmp    edx,edi
c001b4ac:	ba 00 00 00 00       	mov    edx,0x0
c001b4b1:	19 ea                	sbb    edx,ebp
c001b4b3:	0f 92 c2             	setb   dl
c001b4b6:	09 c2                	or     edx,eax
c001b4b8:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b4bc:	0f 94 c0             	sete   al
c001b4bf:	08 d0                	or     al,dl
c001b4c1:	75 16                	jne    c001b4d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b4c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b4c7:	74 10                	je     c001b4d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b4c9:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b4cc:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b4d0:	41                   	inc    ecx
c001b4d1:	83 c7 01             	add    edi,0x1
c001b4d4:	83 d5 00             	adc    ebp,0x0
c001b4d7:	eb ba                	jmp    c001b493 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b4d9:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b4e0:	83 ec 0c             	sub    esp,0xc
c001b4e3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b4e7:	57                   	push   edi
c001b4e8:	e8 ea 51 fe ff       	call   c00006d7 <strlen>
c001b4ed:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b4f1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b4f4:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b4fb:	25 ff 07 00 00       	and    eax,0x7ff
c001b500:	01 c8                	add    eax,ecx
c001b502:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b50a:	5a                   	pop    edx
c001b50b:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b512:	59                   	pop    ecx
c001b513:	0f 95 c0             	setne  al
c001b516:	0f b6 c0             	movzx  eax,al
c001b519:	40                   	inc    eax
c001b51a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b51e:	57                   	push   edi
c001b51f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b523:	50                   	push   eax
c001b524:	e8 30 52 fe ff       	call   c0000759 <strcpy>
c001b529:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b52d:	83 c4 10             	add    esp,0x10
c001b530:	84 c0                	test   al,al
c001b532:	75 21                	jne    c001b555 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b534:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b53c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b544:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b54c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b553:	eb 28                	jmp    c001b57d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b555:	fe c8                	dec    al
c001b557:	75 24                	jne    c001b57d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b559:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b561:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b569:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b571:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b578:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b57d:	50                   	push   eax
c001b57e:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b585:	0f b6 fb             	movzx  edi,bl
c001b588:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b58c:	31 db                	xor    ebx,ebx
c001b58e:	50                   	push   eax
c001b58f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b596:	e8 e9 50 fe ff       	call   c0000684 <memcpy>
c001b59b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b5a2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b5a8:	89 f9                	mov    ecx,edi
c001b5aa:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b5ad:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b5b0:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b5b3:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b5b6:	83 c4 10             	add    esp,0x10
c001b5b9:	39 c7                	cmp    edi,eax
c001b5bb:	89 df                	mov    edi,ebx
c001b5bd:	19 d7                	sbb    edi,edx
c001b5bf:	72 10                	jb     c001b5d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b5c1:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b5c8:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b5cf:	eb 0a                	jmp    c001b5db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b5d1:	29 c8                	sub    eax,ecx
c001b5d3:	19 da                	sbb    edx,ebx
c001b5d5:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b5d8:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b5db:	31 c0                	xor    eax,eax
c001b5dd:	eb 05                	jmp    c001b5e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b5df:	b8 04 00 00 00       	mov    eax,0x4
c001b5e4:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b5ea:	5b                   	pop    ebx
c001b5eb:	5e                   	pop    esi
c001b5ec:	5f                   	pop    edi
c001b5ed:	5d                   	pop    ebp
c001b5ee:	c3                   	ret    

c001b5ef <readRoot(unsigned int*, unsigned int*, char)>:
c001b5ef:	81 ec 40 08 00 00    	sub    esp,0x840
c001b5f5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b5fd:	50                   	push   eax
c001b5fe:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b602:	50                   	push   eax
c001b603:	6a 10                	push   0x10
c001b605:	e8 5f fa ff ff       	call   c001b069 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b60a:	83 c4 0c             	add    esp,0xc
c001b60d:	6a 22                	push   0x22
c001b60f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b616:	50                   	push   eax
c001b617:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b61b:	50                   	push   eax
c001b61c:	e8 63 50 fe ff       	call   c0000684 <memcpy>
c001b621:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b628:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b62c:	89 10                	mov    DWORD PTR [eax],edx
c001b62e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b635:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b639:	89 10                	mov    DWORD PTR [eax],edx
c001b63b:	b0 01                	mov    al,0x1
c001b63d:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b643:	c3                   	ret    

c001b644 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b644:	55                   	push   ebp
c001b645:	57                   	push   edi
c001b646:	56                   	push   esi
c001b647:	53                   	push   ebx
c001b648:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b64e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b655:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b65c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b660:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b664:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b668:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b66c:	75 03                	jne    c001b671 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b66e:	83 c3 02             	add    ebx,0x2
c001b671:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b674:	75 03                	jne    c001b679 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b676:	43                   	inc    ebx
c001b677:	eb f8                	jmp    c001b671 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b679:	51                   	push   ecx
c001b67a:	68 00 01 00 00       	push   0x100
c001b67f:	6a 00                	push   0x0
c001b681:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b685:	50                   	push   eax
c001b686:	e8 2f 50 fe ff       	call   c00006ba <memset>
c001b68b:	83 c4 10             	add    esp,0x10
c001b68e:	31 d2                	xor    edx,edx
c001b690:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b693:	84 c0                	test   al,al
c001b695:	74 21                	je     c001b6b8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b697:	3c 2f                	cmp    al,0x2f
c001b699:	75 0b                	jne    c001b6a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b69b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b69f:	bd 01 00 00 00       	mov    ebp,0x1
c001b6a4:	eb 14                	jmp    c001b6ba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b6a6:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b6a9:	80 f9 19             	cmp    cl,0x19
c001b6ac:	77 03                	ja     c001b6b1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b6ae:	83 e8 20             	sub    eax,0x20
c001b6b1:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b6b5:	42                   	inc    edx
c001b6b6:	eb d8                	jmp    c001b690 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b6b8:	31 ed                	xor    ebp,ebp
c001b6ba:	83 ec 0c             	sub    esp,0xc
c001b6bd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b6c4:	e8 0a 09 ff ff       	call   c000bfd3 <malloc>
c001b6c9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b6d0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b6d6:	89 c6                	mov    esi,eax
c001b6d8:	c1 ef 0b             	shr    edi,0xb
c001b6db:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b6e2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b6e6:	83 c4 10             	add    esp,0x10
c001b6e9:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b6ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b6f2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b6f9:	74 28                	je     c001b723 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b6fb:	52                   	push   edx
c001b6fc:	57                   	push   edi
c001b6fd:	50                   	push   eax
c001b6fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b702:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b709:	e8 5b f9 ff ff       	call   c001b069 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b70e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b712:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b719:	05 00 08 00 00       	add    eax,0x800
c001b71e:	83 c4 10             	add    esp,0x10
c001b721:	eb cb                	jmp    c001b6ee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b723:	83 ec 0c             	sub    esp,0xc
c001b726:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b72a:	57                   	push   edi
c001b72b:	e8 a7 4f fe ff       	call   c00006d7 <strlen>
c001b730:	50                   	push   eax
c001b731:	57                   	push   edi
c001b732:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b739:	56                   	push   esi
c001b73a:	e8 e8 f8 ff ff       	call   c001b027 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b73f:	83 c4 20             	add    esp,0x20
c001b742:	85 c0                	test   eax,eax
c001b744:	75 13                	jne    c001b759 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b746:	83 ec 0c             	sub    esp,0xc
c001b749:	56                   	push   esi
c001b74a:	e8 94 08 ff ff       	call   c000bfe3 <free>
c001b74f:	83 c4 10             	add    esp,0x10
c001b752:	31 c0                	xor    eax,eax
c001b754:	e9 b3 00 00 00       	jmp    c001b80c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b759:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b75d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b761:	c1 e7 08             	shl    edi,0x8
c001b764:	c1 e2 10             	shl    edx,0x10
c001b767:	09 d7                	or     edi,edx
c001b769:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b76d:	09 d7                	or     edi,edx
c001b76f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b773:	c1 e2 18             	shl    edx,0x18
c001b776:	09 d7                	or     edi,edx
c001b778:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b77c:	89 d1                	mov    ecx,edx
c001b77e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b782:	c1 e1 08             	shl    ecx,0x8
c001b785:	c1 e2 10             	shl    edx,0x10
c001b788:	09 ca                	or     edx,ecx
c001b78a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b78e:	09 ca                	or     edx,ecx
c001b790:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b794:	c1 e1 18             	shl    ecx,0x18
c001b797:	09 ca                	or     edx,ecx
c001b799:	89 e9                	mov    ecx,ebp
c001b79b:	84 c9                	test   cl,cl
c001b79d:	74 3c                	je     c001b7db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b79f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b7a3:	83 ec 0c             	sub    esp,0xc
c001b7a6:	56                   	push   esi
c001b7a7:	e8 37 08 ff ff       	call   c000bfe3 <free>
c001b7ac:	83 c4 0c             	add    esp,0xc
c001b7af:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b7b6:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b7bb:	50                   	push   eax
c001b7bc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b7c3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b7ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b7ce:	52                   	push   edx
c001b7cf:	57                   	push   edi
c001b7d0:	53                   	push   ebx
c001b7d1:	e8 6e fe ff ff       	call   c001b644 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b7d6:	83 c4 20             	add    esp,0x20
c001b7d9:	eb 31                	jmp    c001b80c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b7db:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b7e2:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b7e5:	d0 e8                	shr    al,1
c001b7e7:	83 ec 0c             	sub    esp,0xc
c001b7ea:	89 3b                	mov    DWORD PTR [ebx],edi
c001b7ec:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b7f3:	83 e0 01             	and    eax,0x1
c001b7f6:	89 13                	mov    DWORD PTR [ebx],edx
c001b7f8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b7ff:	89 03                	mov    DWORD PTR [ebx],eax
c001b801:	56                   	push   esi
c001b802:	e8 dc 07 ff ff       	call   c000bfe3 <free>
c001b807:	83 c4 10             	add    esp,0x10
c001b80a:	b0 01                	mov    al,0x1
c001b80c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b812:	5b                   	pop    ebx
c001b813:	5e                   	pop    esi
c001b814:	5f                   	pop    edi
c001b815:	5d                   	pop    ebp
c001b816:	c3                   	ret    

c001b817 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b817:	55                   	push   ebp
c001b818:	57                   	push   edi
c001b819:	56                   	push   esi
c001b81a:	53                   	push   ebx
c001b81b:	83 ec 20             	sub    esp,0x20
c001b81e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b822:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b826:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b82b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b82f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b837:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b83f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b845:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b84b:	57                   	push   edi
c001b84c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b850:	50                   	push   eax
c001b851:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b855:	50                   	push   eax
c001b856:	e8 94 fd ff ff       	call   c001b5ef <readRoot(unsigned int*, unsigned int*, char)>
c001b85b:	5a                   	pop    edx
c001b85c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b860:	e8 72 4e fe ff       	call   c00006d7 <strlen>
c001b865:	83 c4 10             	add    esp,0x10
c001b868:	83 f8 03             	cmp    eax,0x3
c001b86b:	77 17                	ja     c001b884 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b86d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b871:	89 03                	mov    DWORD PTR [ebx],eax
c001b873:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b877:	89 06                	mov    DWORD PTR [esi],eax
c001b879:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b880:	b0 01                	mov    al,0x1
c001b882:	eb 19                	jmp    c001b89d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b884:	50                   	push   eax
c001b885:	55                   	push   ebp
c001b886:	57                   	push   edi
c001b887:	56                   	push   esi
c001b888:	53                   	push   ebx
c001b889:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b88d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b891:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b895:	e8 aa fd ff ff       	call   c001b644 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b89a:	83 c4 20             	add    esp,0x20
c001b89d:	83 c4 1c             	add    esp,0x1c
c001b8a0:	5b                   	pop    ebx
c001b8a1:	5e                   	pop    esi
c001b8a2:	5f                   	pop    edi
c001b8a3:	5d                   	pop    ebp
c001b8a4:	c3                   	ret    
c001b8a5:	90                   	nop

c001b8a6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b8a6:	57                   	push   edi
c001b8a7:	56                   	push   esi
c001b8a8:	53                   	push   ebx
c001b8a9:	83 ec 10             	sub    esp,0x10
c001b8ac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b8b0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b8b4:	85 f6                	test   esi,esi
c001b8b6:	74 7b                	je     c001b933 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b8b8:	85 ff                	test   edi,edi
c001b8ba:	74 77                	je     c001b933 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b8bc:	83 ec 0c             	sub    esp,0xc
c001b8bf:	6a 1c                	push   0x1c
c001b8c1:	e8 0d 07 ff ff       	call   c000bfd3 <malloc>
c001b8c6:	89 07                	mov    DWORD PTR [edi],eax
c001b8c8:	89 c3                	mov    ebx,eax
c001b8ca:	58                   	pop    eax
c001b8cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b8cf:	50                   	push   eax
c001b8d0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b8d3:	50                   	push   eax
c001b8d4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b8d8:	50                   	push   eax
c001b8d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b8dd:	50                   	push   eax
c001b8de:	56                   	push   esi
c001b8df:	e8 33 ff ff ff       	call   c001b817 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b8e4:	83 c4 20             	add    esp,0x20
c001b8e7:	84 c0                	test   al,al
c001b8e9:	74 07                	je     c001b8f2 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b8eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b8f0:	74 0b                	je     c001b8fd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b8f2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b8f6:	b8 01 00 00 00       	mov    eax,0x1
c001b8fb:	eb 3b                	jmp    c001b938 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b8fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b901:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b905:	89 03                	mov    DWORD PTR [ebx],eax
c001b907:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b90e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b912:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b919:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b920:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b923:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b92a:	8a 06                	mov    al,BYTE PTR [esi]
c001b92c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b92f:	31 c0                	xor    eax,eax
c001b931:	eb 05                	jmp    c001b938 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b933:	b8 04 00 00 00       	mov    eax,0x4
c001b938:	83 c4 10             	add    esp,0x10
c001b93b:	5b                   	pop    ebx
c001b93c:	5e                   	pop    esi
c001b93d:	5f                   	pop    edi
c001b93e:	c3                   	ret    
c001b93f:	90                   	nop

c001b940 <ISO9660::exists(char const*)>:
c001b940:	83 ec 28             	sub    esp,0x28
c001b943:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b947:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b94b:	52                   	push   edx
c001b94c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b94f:	52                   	push   edx
c001b950:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b954:	52                   	push   edx
c001b955:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b959:	52                   	push   edx
c001b95a:	50                   	push   eax
c001b95b:	e8 b7 fe ff ff       	call   c001b817 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b960:	83 c4 3c             	add    esp,0x3c
c001b963:	c3                   	ret    

c001b964 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b964:	56                   	push   esi
c001b965:	53                   	push   ebx
c001b966:	83 ec 14             	sub    esp,0x14
c001b969:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b96d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b971:	85 db                	test   ebx,ebx
c001b973:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b977:	0f 94 c2             	sete   dl
c001b97a:	85 f6                	test   esi,esi
c001b97c:	0f 94 c0             	sete   al
c001b97f:	08 c2                	or     dl,al
c001b981:	75 68                	jne    c001b9eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b983:	85 c9                	test   ecx,ecx
c001b985:	74 64                	je     c001b9eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b987:	83 ec 0c             	sub    esp,0xc
c001b98a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b98d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b993:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b99a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b99e:	50                   	push   eax
c001b99f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b9a2:	50                   	push   eax
c001b9a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b9a7:	50                   	push   eax
c001b9a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b9ac:	50                   	push   eax
c001b9ad:	51                   	push   ecx
c001b9ae:	e8 64 fe ff ff       	call   c001b817 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b9b3:	83 c4 20             	add    esp,0x20
c001b9b6:	ba 01 00 00 00       	mov    edx,0x1
c001b9bb:	84 c0                	test   al,al
c001b9bd:	74 31                	je     c001b9f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b9bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b9ca:	89 03                	mov    DWORD PTR [ebx],eax
c001b9cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9d0:	85 c0                	test   eax,eax
c001b9d2:	ba 00 00 00 00       	mov    edx,0x0
c001b9d7:	0f 95 06             	setne  BYTE PTR [esi]
c001b9da:	74 14                	je     c001b9f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b9dc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b9e2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b9e9:	eb 05                	jmp    c001b9f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b9eb:	ba 04 00 00 00       	mov    edx,0x4
c001b9f0:	83 c4 14             	add    esp,0x14
c001b9f3:	89 d0                	mov    eax,edx
c001b9f5:	5b                   	pop    ebx
c001b9f6:	5e                   	pop    esi
c001b9f7:	c3                   	ret    

c001b9f8 <ISO9660::openDir(char const*, void**)>:
c001b9f8:	57                   	push   edi
c001b9f9:	56                   	push   esi
c001b9fa:	53                   	push   ebx
c001b9fb:	83 ec 10             	sub    esp,0x10
c001b9fe:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ba02:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba06:	85 f6                	test   esi,esi
c001ba08:	0f 84 95 00 00 00    	je     c001baa3 <ISO9660::openDir(char const*, void**)+0xab>
c001ba0e:	85 ff                	test   edi,edi
c001ba10:	0f 84 8d 00 00 00    	je     c001baa3 <ISO9660::openDir(char const*, void**)+0xab>
c001ba16:	83 ec 0c             	sub    esp,0xc
c001ba19:	6a 1c                	push   0x1c
c001ba1b:	e8 b3 05 ff ff       	call   c000bfd3 <malloc>
c001ba20:	89 07                	mov    DWORD PTR [edi],eax
c001ba22:	89 c3                	mov    ebx,eax
c001ba24:	59                   	pop    ecx
c001ba25:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba29:	50                   	push   eax
c001ba2a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba2d:	50                   	push   eax
c001ba2e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba32:	50                   	push   eax
c001ba33:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba37:	50                   	push   eax
c001ba38:	56                   	push   esi
c001ba39:	e8 d9 fd ff ff       	call   c001b817 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba3e:	83 c4 20             	add    esp,0x20
c001ba41:	84 c0                	test   al,al
c001ba43:	74 07                	je     c001ba4c <ISO9660::openDir(char const*, void**)+0x54>
c001ba45:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba4a:	75 21                	jne    c001ba6d <ISO9660::openDir(char const*, void**)+0x75>
c001ba4c:	52                   	push   edx
c001ba4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ba51:	0f b6 c0             	movzx  eax,al
c001ba54:	50                   	push   eax
c001ba55:	68 36 31 02 c0       	push   0xc0023136
c001ba5a:	e8 e2 36 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001ba5f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba63:	83 c4 10             	add    esp,0x10
c001ba66:	b8 01 00 00 00       	mov    eax,0x1
c001ba6b:	eb 3b                	jmp    c001baa8 <ISO9660::openDir(char const*, void**)+0xb0>
c001ba6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba71:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ba75:	89 03                	mov    DWORD PTR [ebx],eax
c001ba77:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ba7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ba89:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba90:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ba93:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ba9a:	8a 06                	mov    al,BYTE PTR [esi]
c001ba9c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ba9f:	31 c0                	xor    eax,eax
c001baa1:	eb 05                	jmp    c001baa8 <ISO9660::openDir(char const*, void**)+0xb0>
c001baa3:	b8 04 00 00 00       	mov    eax,0x4
c001baa8:	83 c4 10             	add    esp,0x10
c001baab:	5b                   	pop    ebx
c001baac:	5e                   	pop    esi
c001baad:	5f                   	pop    edi
c001baae:	c3                   	ret    
c001baaf:	90                   	nop

c001bab0 <ISO9660::ISO9660()>:
c001bab0:	83 ec 0c             	sub    esp,0xc
c001bab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab7:	83 ec 0c             	sub    esp,0xc
c001baba:	50                   	push   eax
c001babb:	e8 8e 39 ff ff       	call   c000f44e <Filesystem::Filesystem()>
c001bac0:	83 c4 10             	add    esp,0x10
c001bac3:	ba 5c 31 02 c0       	mov    edx,0xc002315c
c001bac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bacc:	89 10                	mov    DWORD PTR [eax],edx
c001bace:	90                   	nop
c001bacf:	83 c4 0c             	add    esp,0xc
c001bad2:	c3                   	ret    
c001bad3:	90                   	nop

c001bad4 <SoundChannel::~SoundChannel()>:
c001bad4:	83 ec 0c             	sub    esp,0xc
c001bad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001badb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bade:	83 ec 0c             	sub    esp,0xc
c001bae1:	50                   	push   eax
c001bae2:	e8 fc 04 ff ff       	call   c000bfe3 <free>
c001bae7:	83 c4 10             	add    esp,0x10
c001baea:	90                   	nop
c001baeb:	83 c4 0c             	add    esp,0xc
c001baee:	c3                   	ret    
c001baef:	90                   	nop

c001baf0 <SoundChannel::setSpeed(float)>:
c001baf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baf4:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001baf8:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bafb:	c3                   	ret    

c001bafc <SoundChannel::getSpeed()>:
c001bafc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb00:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bb03:	c3                   	ret    

c001bb04 <SoundChannel::setVolume(int)>:
c001bb04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb08:	83 f8 64             	cmp    eax,0x64
c001bb0b:	7e 05                	jle    c001bb12 <SoundChannel::setVolume(int)+0xe>
c001bb0d:	b8 64 00 00 00       	mov    eax,0x64
c001bb12:	85 c0                	test   eax,eax
c001bb14:	79 02                	jns    c001bb18 <SoundChannel::setVolume(int)+0x14>
c001bb16:	31 c0                	xor    eax,eax
c001bb18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb1c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bb1f:	c3                   	ret    

c001bb20 <SoundChannel::getVolume()>:
c001bb20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb24:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bb27:	c3                   	ret    

c001bb28 <SoundChannel::pause()>:
c001bb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb2c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bb30:	c3                   	ret    
c001bb31:	90                   	nop

c001bb32 <SoundChannel::SoundChannel(int, int, int, int)>:
c001bb32:	83 ec 1c             	sub    esp,0x1c
c001bb35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bb39:	e8 ea ff ff ff       	call   c001bb28 <SoundChannel::pause()>
c001bb3e:	83 c4 04             	add    esp,0x4
c001bb41:	6a 50                	push   0x50
c001bb43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb47:	e8 b8 ff ff ff       	call   c001bb04 <SoundChannel::setVolume(int)>
c001bb4c:	83 c4 08             	add    esp,0x8
c001bb4f:	d9 e8                	fld1   
c001bb51:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bb55:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bb58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb5c:	e8 8f ff ff ff       	call   c001baf0 <SoundChannel::setSpeed(float)>
c001bb61:	83 c4 08             	add    esp,0x8
c001bb64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb68:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb6c:	89 10                	mov    DWORD PTR [eax],edx
c001bb6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb76:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bb79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb7d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bb81:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bb84:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bb89:	75 26                	jne    c001bbb1 <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bb8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb8f:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb98:	0f af c2             	imul   eax,edx
c001bb9b:	89 c2                	mov    edx,eax
c001bb9d:	c1 fa 1f             	sar    edx,0x1f
c001bba0:	83 e2 03             	and    edx,0x3
c001bba3:	01 d0                	add    eax,edx
c001bba5:	c1 f8 02             	sar    eax,0x2
c001bba8:	05 a0 0f 00 00       	add    eax,0xfa0
c001bbad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbb5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bbb9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bbbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbc0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bbc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbcb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bbd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbd6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bbd9:	c1 e0 02             	shl    eax,0x2
c001bbdc:	83 ec 0c             	sub    esp,0xc
c001bbdf:	50                   	push   eax
c001bbe0:	e8 ee 03 ff ff       	call   c000bfd3 <malloc>
c001bbe5:	83 c4 10             	add    esp,0x10
c001bbe8:	89 c2                	mov    edx,eax
c001bbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bbf1:	83 ec 04             	sub    esp,0x4
c001bbf4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bbf8:	50                   	push   eax
c001bbf9:	6a 01                	push   0x1
c001bbfb:	6a 04                	push   0x4
c001bbfd:	e8 e0 cc fe ff       	call   c00088e2 <src_new>
c001bc02:	83 c4 10             	add    esp,0x10
c001bc05:	89 c2                	mov    edx,eax
c001bc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc0b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bc0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc12:	85 c0                	test   eax,eax
c001bc14:	74 10                	je     c001bc26 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bc16:	83 ec 0c             	sub    esp,0xc
c001bc19:	68 b8 31 02 c0       	push   0xc00231b8
c001bc1e:	e8 e9 9c ff ff       	call   c001590c <Krnl::panic(char const*)>
c001bc23:	83 c4 10             	add    esp,0x10
c001bc26:	90                   	nop
c001bc27:	83 c4 1c             	add    esp,0x1c
c001bc2a:	c3                   	ret    
c001bc2b:	90                   	nop

c001bc2c <SoundChannel::play()>:
c001bc2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc30:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bc34:	c3                   	ret    
c001bc35:	90                   	nop

c001bc36 <SoundChannel::paused()>:
c001bc36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc3a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bc3d:	c3                   	ret    

c001bc3e <SoundChannel::getSampleRate()>:
c001bc3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc42:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc44:	c3                   	ret    
c001bc45:	90                   	nop

c001bc46 <SoundChannel::getBits()>:
c001bc46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc4d:	c3                   	ret    

c001bc4e <SoundChannel::getBufferUsed()>:
c001bc4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc52:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bc55:	c3                   	ret    

c001bc56 <SoundChannel::getBufferSize()>:
c001bc56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc5a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bc5d:	c3                   	ret    

c001bc5e <SoundChannel::unbuffer(float*, int, int)>:
c001bc5e:	53                   	push   ebx
c001bc5f:	83 ec 40             	sub    esp,0x40
c001bc62:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bc66:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bc6e:	db 03                	fild   DWORD PTR [ebx]
c001bc70:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bc74:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bc77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bc7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bc7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bc82:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bc86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bc8a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bc8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc92:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc96:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bc99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bc9d:	50                   	push   eax
c001bc9e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bca1:	e8 f6 c8 fe ff       	call   c000859c <src_process>
c001bca6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bcaa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bcad:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bcb0:	83 c4 0c             	add    esp,0xc
c001bcb3:	29 d0                	sub    eax,edx
c001bcb5:	c1 e0 02             	shl    eax,0x2
c001bcb8:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bcbb:	50                   	push   eax
c001bcbc:	8d 04 91             	lea    eax,[ecx+edx*4]
c001bcbf:	50                   	push   eax
c001bcc0:	51                   	push   ecx
c001bcc1:	e8 86 49 fe ff       	call   c000064c <memmove>
c001bcc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bcca:	83 c4 48             	add    esp,0x48
c001bccd:	5b                   	pop    ebx
c001bcce:	c3                   	ret    
c001bccf:	90                   	nop

c001bcd0 <SoundChannel::buffer8(unsigned char*, int)>:
c001bcd0:	53                   	push   ebx
c001bcd1:	31 c0                	xor    eax,eax
c001bcd3:	83 ec 08             	sub    esp,0x8
c001bcd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bcda:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001bcdd:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001bce0:	74 35                	je     c001bd17 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bce2:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001bce6:	7d 2f                	jge    c001bd17 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bce8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bcec:	d9 05 d4 31 02 c0    	fld    DWORD PTR ds:0xc00231d4
c001bcf2:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001bcf6:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001bcfb:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001bcfe:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001bd02:	40                   	inc    eax
c001bd03:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bd06:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001bd09:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001bd0c:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001bd0f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bd12:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001bd15:	eb c9                	jmp    c001bce0 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001bd17:	83 c4 08             	add    esp,0x8
c001bd1a:	5b                   	pop    ebx
c001bd1b:	c3                   	ret    

c001bd1c <SoundDevice::SoundDevice(char const*)>:
c001bd1c:	83 ec 1c             	sub    esp,0x1c
c001bd1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd23:	83 ec 08             	sub    esp,0x8
c001bd26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd2a:	50                   	push   eax
c001bd2b:	e8 16 4a ff ff       	call   c0010746 <Device::Device(char const*)>
c001bd30:	83 c4 10             	add    esp,0x10
c001bd33:	ba e0 31 02 c0       	mov    edx,0xc00231e0
c001bd38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd3c:	89 10                	mov    DWORD PTR [eax],edx
c001bd3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd42:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bd4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd50:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bd5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd62:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bd67:	7f 19                	jg     c001bd82 <SoundDevice::SoundDevice(char const*)+0x66>
c001bd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bd71:	83 c2 54             	add    edx,0x54
c001bd74:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bd7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bd80:	eb e0                	jmp    c001bd62 <SoundDevice::SoundDevice(char const*)+0x46>
c001bd82:	90                   	nop
c001bd83:	83 c4 1c             	add    esp,0x1c
c001bd86:	c3                   	ret    
c001bd87:	90                   	nop

c001bd88 <SoundDevice::~SoundDevice()>:
c001bd88:	53                   	push   ebx
c001bd89:	83 ec 18             	sub    esp,0x18
c001bd8c:	ba e0 31 02 c0       	mov    edx,0xc00231e0
c001bd91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd95:	89 10                	mov    DWORD PTR [eax],edx
c001bd97:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd9f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bda4:	7f 46                	jg     c001bdec <SoundDevice::~SoundDevice()+0x64>
c001bda6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bdae:	83 c2 54             	add    edx,0x54
c001bdb1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bdb5:	85 c0                	test   eax,eax
c001bdb7:	74 2d                	je     c001bde6 <SoundDevice::~SoundDevice()+0x5e>
c001bdb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bdc1:	83 c2 54             	add    edx,0x54
c001bdc4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bdc8:	85 db                	test   ebx,ebx
c001bdca:	74 1a                	je     c001bde6 <SoundDevice::~SoundDevice()+0x5e>
c001bdcc:	83 ec 0c             	sub    esp,0xc
c001bdcf:	53                   	push   ebx
c001bdd0:	e8 ff fc ff ff       	call   c001bad4 <SoundChannel::~SoundChannel()>
c001bdd5:	83 c4 10             	add    esp,0x10
c001bdd8:	83 ec 08             	sub    esp,0x8
c001bddb:	6a 2c                	push   0x2c
c001bddd:	53                   	push   ebx
c001bdde:	e8 38 32 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001bde3:	83 c4 10             	add    esp,0x10
c001bde6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bdea:	eb b3                	jmp    c001bd9f <SoundDevice::~SoundDevice()+0x17>
c001bdec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdf0:	83 ec 0c             	sub    esp,0xc
c001bdf3:	50                   	push   eax
c001bdf4:	e8 03 46 ff ff       	call   c00103fc <Device::~Device()>
c001bdf9:	83 c4 10             	add    esp,0x10
c001bdfc:	90                   	nop
c001bdfd:	83 c4 18             	add    esp,0x18
c001be00:	5b                   	pop    ebx
c001be01:	c3                   	ret    

c001be02 <SoundDevice::~SoundDevice()>:
c001be02:	83 ec 0c             	sub    esp,0xc
c001be05:	83 ec 0c             	sub    esp,0xc
c001be08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be0c:	e8 77 ff ff ff       	call   c001bd88 <SoundDevice::~SoundDevice()>
c001be11:	83 c4 10             	add    esp,0x10
c001be14:	83 ec 08             	sub    esp,0x8
c001be17:	68 e4 01 00 00       	push   0x1e4
c001be1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be20:	e8 f6 31 ff ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001be25:	83 c4 10             	add    esp,0x10
c001be28:	83 c4 0c             	add    esp,0xc
c001be2b:	c3                   	ret    

c001be2c <SoundDevice::getFreeChannelNum()>:
c001be2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be30:	31 c0                	xor    eax,eax
c001be32:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001be3a:	74 09                	je     c001be45 <SoundDevice::getFreeChannelNum()+0x19>
c001be3c:	40                   	inc    eax
c001be3d:	83 f8 20             	cmp    eax,0x20
c001be40:	75 f0                	jne    c001be32 <SoundDevice::getFreeChannelNum()+0x6>
c001be42:	83 c8 ff             	or     eax,0xffffffff
c001be45:	c3                   	ret    

c001be46 <SoundDevice::addChannel(SoundChannel*)>:
c001be46:	56                   	push   esi
c001be47:	53                   	push   ebx
c001be48:	51                   	push   ecx
c001be49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001be51:	53                   	push   ebx
c001be52:	e8 d5 ff ff ff       	call   c001be2c <SoundDevice::getFreeChannelNum()>
c001be57:	5a                   	pop    edx
c001be58:	83 f8 ff             	cmp    eax,0xffffffff
c001be5b:	74 51                	je     c001beae <SoundDevice::addChannel(SoundChannel*)+0x68>
c001be5d:	85 f6                	test   esi,esi
c001be5f:	74 4d                	je     c001beae <SoundDevice::addChannel(SoundChannel*)+0x68>
c001be61:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001be68:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001be6f:	75 30                	jne    c001bea1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001be71:	83 ec 0c             	sub    esp,0xc
c001be74:	56                   	push   esi
c001be75:	e8 c4 fd ff ff       	call   c001bc3e <SoundChannel::getSampleRate()>
c001be7a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001be80:	89 34 24             	mov    DWORD PTR [esp],esi
c001be83:	e8 be fd ff ff       	call   c001bc46 <SoundChannel::getBits()>
c001be88:	83 c4 0c             	add    esp,0xc
c001be8b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001be91:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be93:	50                   	push   eax
c001be94:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001be9a:	53                   	push   ebx
c001be9b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001be9e:	83 c4 10             	add    esp,0x10
c001bea1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bea7:	b8 01 00 00 00       	mov    eax,0x1
c001beac:	eb 03                	jmp    c001beb1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001beae:	83 c8 ff             	or     eax,0xffffffff
c001beb1:	5a                   	pop    edx
c001beb2:	5b                   	pop    ebx
c001beb3:	5e                   	pop    esi
c001beb4:	c3                   	ret    
c001beb5:	90                   	nop

c001beb6 <SoundDevice::removeChannel(int)>:
c001beb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001beba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bebe:	83 fa 1f             	cmp    edx,0x1f
c001bec1:	77 23                	ja     c001bee6 <SoundDevice::removeChannel(int)+0x30>
c001bec3:	8d 14 90             	lea    edx,[eax+edx*4]
c001bec6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001becd:	74 17                	je     c001bee6 <SoundDevice::removeChannel(int)+0x30>
c001becf:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001bed9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001bedf:	75 05                	jne    c001bee6 <SoundDevice::removeChannel(int)+0x30>
c001bee1:	8b 00                	mov    eax,DWORD PTR [eax]
c001bee3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001bee6:	c3                   	ret    
c001bee7:	90                   	nop

c001bee8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001bee8:	56                   	push   esi
c001bee9:	53                   	push   ebx
c001beea:	31 db                	xor    ebx,ebx
c001beec:	83 ec 14             	sub    esp,0x14
c001beef:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bef3:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001bef7:	7d 55                	jge    c001bf4e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001bef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001befd:	d9 e8                	fld1   
c001beff:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001bf02:	d8 0d 10 32 02 c0    	fmul   DWORD PTR ds:0xc0023210
c001bf08:	d8 0d 14 32 02 c0    	fmul   DWORD PTR ds:0xc0023214
c001bf0e:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001bf12:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bf16:	d8 15 18 32 02 c0    	fcom   DWORD PTR ds:0xc0023218
c001bf1c:	df e0                	fnstsw ax
c001bf1e:	9e                   	sahf   
c001bf1f:	72 08                	jb     c001bf29 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001bf21:	dd d8                	fstp   st(0)
c001bf23:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001bf27:	eb 22                	jmp    c001bf4b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bf29:	d9 ee                	fldz   
c001bf2b:	d8 d9                	fcomp  st(1)
c001bf2d:	df e0                	fnstsw ax
c001bf2f:	9e                   	sahf   
c001bf30:	72 08                	jb     c001bf3a <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001bf32:	dd d8                	fstp   st(0)
c001bf34:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001bf38:	eb 11                	jmp    c001bf4b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bf3a:	83 ec 10             	sub    esp,0x10
c001bf3d:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bf40:	e8 97 36 00 00       	call   c001f5dc <lrintf>
c001bf45:	83 c4 10             	add    esp,0x10
c001bf48:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001bf4b:	43                   	inc    ebx
c001bf4c:	eb a5                	jmp    c001bef3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001bf4e:	83 c4 14             	add    esp,0x14
c001bf51:	5b                   	pop    ebx
c001bf52:	5e                   	pop    esi
c001bf53:	c3                   	ret    

c001bf54 <SoundDevice::getAudio(int, float*, float*)>:
c001bf54:	55                   	push   ebp
c001bf55:	57                   	push   edi
c001bf56:	56                   	push   esi
c001bf57:	53                   	push   ebx
c001bf58:	31 db                	xor    ebx,ebx
c001bf5a:	83 ec 20             	sub    esp,0x20
c001bf5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf61:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bf65:	c1 e0 02             	shl    eax,0x2
c001bf68:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bf6c:	50                   	push   eax
c001bf6d:	6a 00                	push   0x0
c001bf6f:	55                   	push   ebp
c001bf70:	e8 45 47 fe ff       	call   c00006ba <memset>
c001bf75:	83 c4 10             	add    esp,0x10
c001bf78:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bf7c:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001bf83:	85 c0                	test   eax,eax
c001bf85:	0f 84 8c 00 00 00    	je     c001c017 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bf8b:	83 ec 0c             	sub    esp,0xc
c001bf8e:	50                   	push   eax
c001bf8f:	e8 a2 fc ff ff       	call   c001bc36 <SoundChannel::paused()>
c001bf94:	83 c4 10             	add    esp,0x10
c001bf97:	84 c0                	test   al,al
c001bf99:	75 7c                	jne    c001c017 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bf9b:	83 ec 0c             	sub    esp,0xc
c001bf9e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bfa5:	e8 76 fb ff ff       	call   c001bb20 <SoundChannel::getVolume()>
c001bfaa:	83 c4 10             	add    esp,0x10
c001bfad:	85 c0                	test   eax,eax
c001bfaf:	74 66                	je     c001c017 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bfb1:	83 ec 0c             	sub    esp,0xc
c001bfb4:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bfbb:	e8 60 fb ff ff       	call   c001bb20 <SoundChannel::getVolume()>
c001bfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bfc4:	d9 05 1c 32 02 c0    	fld    DWORD PTR ds:0xc002321c
c001bfca:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001bfce:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001bfd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001bfd6:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001bfdc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001bfe0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bfe7:	e8 72 fc ff ff       	call   c001bc5e <SoundChannel::unbuffer(float*, int, int)>
c001bfec:	83 c4 20             	add    esp,0x20
c001bfef:	31 d2                	xor    edx,edx
c001bff1:	39 c2                	cmp    edx,eax
c001bff3:	7d 1c                	jge    c001c011 <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001bff5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001bff9:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bffd:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c000:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c006:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c00a:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c00e:	42                   	inc    edx
c001c00f:	eb e0                	jmp    c001bff1 <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c011:	39 c7                	cmp    edi,eax
c001c013:	7e 02                	jle    c001c017 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c015:	89 c7                	mov    edi,eax
c001c017:	43                   	inc    ebx
c001c018:	83 fb 20             	cmp    ebx,0x20
c001c01b:	0f 85 5b ff ff ff    	jne    c001bf7c <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c021:	83 c4 1c             	add    esp,0x1c
c001c024:	89 f8                	mov    eax,edi
c001c026:	5b                   	pop    ebx
c001c027:	5e                   	pop    esi
c001c028:	5f                   	pop    edi
c001c029:	5d                   	pop    ebp
c001c02a:	c3                   	ret    
c001c02b:	90                   	nop

c001c02c <PCI::open(int, int, void*)>:
c001c02c:	83 ec 18             	sub    esp,0x18
c001c02f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c033:	8b 10                	mov    edx,DWORD PTR [eax]
c001c035:	50                   	push   eax
c001c036:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c039:	31 c0                	xor    eax,eax
c001c03b:	83 c4 1c             	add    esp,0x1c
c001c03e:	c3                   	ret    
c001c03f:	90                   	nop

c001c040 <PCI::close(int, int, void*)>:
c001c040:	31 c0                	xor    eax,eax
c001c042:	c3                   	ret    
c001c043:	90                   	nop

c001c044 <PCI::PCI()>:
c001c044:	83 ec 0c             	sub    esp,0xc
c001c047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c04b:	83 ec 08             	sub    esp,0x8
c001c04e:	68 20 32 02 c0       	push   0xc0023220
c001c053:	50                   	push   eax
c001c054:	e8 77 3d ff ff       	call   c000fdd0 <Bus::Bus(char const*)>
c001c059:	83 c4 10             	add    esp,0x10
c001c05c:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c001c061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c065:	89 10                	mov    DWORD PTR [eax],edx
c001c067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c06b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c071:	0f b6 d0             	movzx  edx,al
c001c074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c078:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c083:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c089:	0f b6 d0             	movzx  edx,al
c001c08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c090:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c099:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c09f:	8d 50 01             	lea    edx,[eax+0x1]
c001c0a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0a6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c0ac:	0f b6 d0             	movzx  edx,al
c001c0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c0b7:	83 c9 c0             	or     ecx,0xffffffc0
c001c0ba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c0be:	90                   	nop
c001c0bf:	83 c4 0c             	add    esp,0xc
c001c0c2:	c3                   	ret    
c001c0c3:	90                   	nop

c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c0c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c0c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c0cd:	89 ca                	mov    edx,ecx
c001c0cf:	c1 e0 10             	shl    eax,0x10
c001c0d2:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c0d8:	09 d0                	or     eax,edx
c001c0da:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c0df:	c1 e2 08             	shl    edx,0x8
c001c0e2:	09 d0                	or     eax,edx
c001c0e4:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c0e9:	c1 e2 0b             	shl    edx,0xb
c001c0ec:	09 d0                	or     eax,edx
c001c0ee:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c0f3:	0d 00 00 00 80       	or     eax,0x80000000
c001c0f8:	ef                   	out    dx,eax
c001c0f9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c0fe:	ed                   	in     eax,dx
c001c0ff:	83 e1 02             	and    ecx,0x2
c001c102:	0f b6 c9             	movzx  ecx,cl
c001c105:	c1 e1 03             	shl    ecx,0x3
c001c108:	d3 e8                	shr    eax,cl
c001c10a:	c3                   	ret    
c001c10b:	90                   	nop

c001c10c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c10c:	6a 00                	push   0x0
c001c10e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c113:	50                   	push   eax
c001c114:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c119:	50                   	push   eax
c001c11a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c11f:	50                   	push   eax
c001c120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c124:	e8 9b ff ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c129:	83 c4 14             	add    esp,0x14
c001c12c:	c3                   	ret    
c001c12d:	90                   	nop

c001c12e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c12e:	6a 0e                	push   0xe
c001c130:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c135:	50                   	push   eax
c001c136:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c13b:	50                   	push   eax
c001c13c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c141:	50                   	push   eax
c001c142:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c146:	e8 79 ff ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c14b:	83 c4 14             	add    esp,0x14
c001c14e:	0f b6 c0             	movzx  eax,al
c001c151:	c3                   	ret    

c001c152 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c152:	55                   	push   ebp
c001c153:	57                   	push   edi
c001c154:	56                   	push   esi
c001c155:	53                   	push   ebx
c001c156:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c15b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c160:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c165:	6a 0a                	push   0xa
c001c167:	56                   	push   esi
c001c168:	55                   	push   ebp
c001c169:	57                   	push   edi
c001c16a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c16e:	e8 51 ff ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c173:	6a 0a                	push   0xa
c001c175:	89 c3                	mov    ebx,eax
c001c177:	56                   	push   esi
c001c178:	0f b6 db             	movzx  ebx,bl
c001c17b:	55                   	push   ebp
c001c17c:	57                   	push   edi
c001c17d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c181:	e8 3e ff ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c186:	83 c4 28             	add    esp,0x28
c001c189:	25 00 ff 00 00       	and    eax,0xff00
c001c18e:	09 d8                	or     eax,ebx
c001c190:	5b                   	pop    ebx
c001c191:	5e                   	pop    esi
c001c192:	5f                   	pop    edi
c001c193:	5d                   	pop    ebp
c001c194:	c3                   	ret    
c001c195:	90                   	nop

c001c196 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c196:	6a 08                	push   0x8
c001c198:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c19d:	50                   	push   eax
c001c19e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1a3:	50                   	push   eax
c001c1a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1a9:	50                   	push   eax
c001c1aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1ae:	e8 11 ff ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1b3:	83 c4 14             	add    esp,0x14
c001c1b6:	0f b6 c4             	movzx  eax,ah
c001c1b9:	c3                   	ret    

c001c1ba <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c1ba:	6a 08                	push   0x8
c001c1bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1c1:	50                   	push   eax
c001c1c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1c7:	50                   	push   eax
c001c1c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1cd:	50                   	push   eax
c001c1ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1d2:	e8 ed fe ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1d7:	83 c4 14             	add    esp,0x14
c001c1da:	c3                   	ret    
c001c1db:	90                   	nop

c001c1dc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c1dc:	6a 3c                	push   0x3c
c001c1de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1e3:	50                   	push   eax
c001c1e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1e9:	50                   	push   eax
c001c1ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1ef:	50                   	push   eax
c001c1f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1f4:	e8 cb fe ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1f9:	83 c4 14             	add    esp,0x14
c001c1fc:	c3                   	ret    
c001c1fd:	90                   	nop

c001c1fe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c1fe:	6a 18                	push   0x18
c001c200:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c205:	50                   	push   eax
c001c206:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c20b:	50                   	push   eax
c001c20c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c211:	50                   	push   eax
c001c212:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c216:	e8 a9 fe ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c21b:	83 c4 14             	add    esp,0x14
c001c21e:	0f b6 c4             	movzx  eax,ah
c001c221:	c3                   	ret    

c001c222 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c222:	55                   	push   ebp
c001c223:	57                   	push   edi
c001c224:	56                   	push   esi
c001c225:	53                   	push   ebx
c001c226:	50                   	push   eax
c001c227:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c22b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c230:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c235:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c23a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c241:	8d 43 12             	lea    eax,[ebx+0x12]
c001c244:	83 c3 10             	add    ebx,0x10
c001c247:	0f b6 c0             	movzx  eax,al
c001c24a:	0f b6 db             	movzx  ebx,bl
c001c24d:	50                   	push   eax
c001c24e:	51                   	push   ecx
c001c24f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c253:	57                   	push   edi
c001c254:	55                   	push   ebp
c001c255:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c259:	e8 66 fe ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c25e:	53                   	push   ebx
c001c25f:	89 c6                	mov    esi,eax
c001c261:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c265:	c1 e6 10             	shl    esi,0x10
c001c268:	51                   	push   ecx
c001c269:	57                   	push   edi
c001c26a:	55                   	push   ebp
c001c26b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c26f:	e8 50 fe ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c274:	83 c4 2c             	add    esp,0x2c
c001c277:	0f b7 c0             	movzx  eax,ax
c001c27a:	5b                   	pop    ebx
c001c27b:	09 f0                	or     eax,esi
c001c27d:	5e                   	pop    esi
c001c27e:	5f                   	pop    edi
c001c27f:	5d                   	pop    ebp
c001c280:	c3                   	ret    
c001c281:	90                   	nop

c001c282 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c282:	53                   	push   ebx
c001c283:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c288:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c28d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c291:	c1 e1 10             	shl    ecx,0x10
c001c294:	25 fc 00 00 00       	and    eax,0xfc
c001c299:	09 c1                	or     ecx,eax
c001c29b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2a0:	c1 e0 08             	shl    eax,0x8
c001c2a3:	09 c1                	or     ecx,eax
c001c2a5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c2aa:	c1 e0 0b             	shl    eax,0xb
c001c2ad:	09 c1                	or     ecx,eax
c001c2af:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c2b5:	89 c8                	mov    eax,ecx
c001c2b7:	ef                   	out    dx,eax
c001c2b8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c2bd:	ed                   	in     eax,dx
c001c2be:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c2c3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c2c8:	74 0a                	je     c001c2d4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c2ca:	0f b7 d8             	movzx  ebx,ax
c001c2cd:	89 d0                	mov    eax,edx
c001c2cf:	c1 e0 10             	shl    eax,0x10
c001c2d2:	eb 05                	jmp    c001c2d9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c2d4:	66 31 c0             	xor    ax,ax
c001c2d7:	89 d3                	mov    ebx,edx
c001c2d9:	09 c3                	or     ebx,eax
c001c2db:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c2e0:	89 c8                	mov    eax,ecx
c001c2e2:	ef                   	out    dx,eax
c001c2e3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c2e8:	89 d8                	mov    eax,ebx
c001c2ea:	ef                   	out    dx,eax
c001c2eb:	5b                   	pop    ebx
c001c2ec:	c3                   	ret    
c001c2ed:	90                   	nop

c001c2ee <PCI::checkBus(unsigned char)>:
c001c2ee:	56                   	push   esi
c001c2ef:	53                   	push   ebx
c001c2f0:	31 db                	xor    ebx,ebx
c001c2f2:	51                   	push   ecx
c001c2f3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c2f8:	52                   	push   edx
c001c2f9:	53                   	push   ebx
c001c2fa:	43                   	inc    ebx
c001c2fb:	56                   	push   esi
c001c2fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c300:	e8 29 03 00 00       	call   c001c62e <PCI::checkDevice(unsigned char, unsigned char)>
c001c305:	83 c4 10             	add    esp,0x10
c001c308:	83 fb 20             	cmp    ebx,0x20
c001c30b:	75 eb                	jne    c001c2f8 <PCI::checkBus(unsigned char)+0xa>
c001c30d:	58                   	pop    eax
c001c30e:	5b                   	pop    ebx
c001c30f:	5e                   	pop    esi
c001c310:	c3                   	ret    
c001c311:	90                   	nop

c001c312 <PCI::foundDevice(PCIDeviceInfo)>:
c001c312:	55                   	push   ebp
c001c313:	57                   	push   edi
c001c314:	56                   	push   esi
c001c315:	53                   	push   ebx
c001c316:	83 ec 1c             	sub    esp,0x1c
c001c319:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c31d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c323:	0f 84 51 01 00 00    	je     c001c47a <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c329:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c32d:	66 81 f9 06 04       	cmp    cx,0x406
c001c332:	75 2c                	jne    c001c360 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c334:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c339:	50                   	push   eax
c001c33a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c33f:	50                   	push   eax
c001c340:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c345:	50                   	push   eax
c001c346:	56                   	push   esi
c001c347:	e8 b2 fe ff ff       	call   c001c1fe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c34c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c350:	0f b6 c0             	movzx  eax,al
c001c353:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c357:	83 c4 2c             	add    esp,0x2c
c001c35a:	5b                   	pop    ebx
c001c35b:	5e                   	pop    esi
c001c35c:	5f                   	pop    edi
c001c35d:	5d                   	pop    ebp
c001c35e:	eb 8e                	jmp    c001c2ee <PCI::checkBus(unsigned char)>
c001c360:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c364:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c36a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c36e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c372:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c376:	88 d3                	mov    bl,dl
c001c378:	85 c0                	test   eax,eax
c001c37a:	74 33                	je     c001c3af <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c37c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c37f:	85 d2                	test   edx,edx
c001c381:	74 28                	je     c001c3ab <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c383:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c389:	31 ef                	xor    edi,ebp
c001c38b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c391:	75 18                	jne    c001c3ab <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c393:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c397:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c39d:	75 0c                	jne    c001c3ab <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c39f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c3a5:	0f 84 cf 00 00 00    	je     c001c47a <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c3ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3ad:	eb c9                	jmp    c001c378 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c3af:	66 81 f9 01 06       	cmp    cx,0x601
c001c3b4:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c3b8:	75 18                	jne    c001c3d2 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c3ba:	83 ec 0c             	sub    esp,0xc
c001c3bd:	68 58 01 00 00       	push   0x158
c001c3c2:	e8 45 2c ff ff       	call   c000f00c <operator new(unsigned long)>
c001c3c7:	59                   	pop    ecx
c001c3c8:	89 c5                	mov    ebp,eax
c001c3ca:	5f                   	pop    edi
c001c3cb:	68 28 32 02 c0       	push   0xc0023228
c001c3d0:	eb 7d                	jmp    c001c44f <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c3d2:	66 81 f9 01 01       	cmp    cx,0x101
c001c3d7:	75 60                	jne    c001c439 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c3d9:	83 ec 0c             	sub    esp,0xc
c001c3dc:	68 70 02 00 00       	push   0x270
c001c3e1:	e8 26 2c ff ff       	call   c000f00c <operator new(unsigned long)>
c001c3e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c3e9:	89 c5                	mov    ebp,eax
c001c3eb:	e8 02 03 00 00       	call   c001c6f2 <IDE::IDE()>
c001c3f0:	58                   	pop    eax
c001c3f1:	5a                   	pop    edx
c001c3f2:	55                   	push   ebp
c001c3f3:	56                   	push   esi
c001c3f4:	e8 5d 41 ff ff       	call   c0010556 <Device::addChild(Device*)>
c001c3f9:	83 ec 1c             	sub    esp,0x1c
c001c3fc:	b9 09 00 00 00       	mov    ecx,0x9
c001c401:	fc                   	cld    
c001c402:	89 e7                	mov    edi,esp
c001c404:	89 de                	mov    esi,ebx
c001c406:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c408:	55                   	push   ebp
c001c409:	e8 26 40 ff ff       	call   c0010434 <Device::preOpenPCI(PCIDeviceInfo)>
c001c40e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c411:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c415:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c41d:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c425:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c42d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c430:	83 c4 4c             	add    esp,0x4c
c001c433:	5b                   	pop    ebx
c001c434:	5e                   	pop    esi
c001c435:	5f                   	pop    edi
c001c436:	5d                   	pop    ebp
c001c437:	ff e0                	jmp    eax
c001c439:	83 ec 0c             	sub    esp,0xc
c001c43c:	68 58 01 00 00       	push   0x158
c001c441:	e8 c6 2b ff ff       	call   c000f00c <operator new(unsigned long)>
c001c446:	59                   	pop    ecx
c001c447:	89 c5                	mov    ebp,eax
c001c449:	5f                   	pop    edi
c001c44a:	68 47 32 02 c0       	push   0xc0023247
c001c44f:	55                   	push   ebp
c001c450:	e8 ed 43 ff ff       	call   c0010842 <DriverlessDevice::DriverlessDevice(char const*)>
c001c455:	58                   	pop    eax
c001c456:	5a                   	pop    edx
c001c457:	55                   	push   ebp
c001c458:	56                   	push   esi
c001c459:	e8 f8 40 ff ff       	call   c0010556 <Device::addChild(Device*)>
c001c45e:	b9 09 00 00 00       	mov    ecx,0x9
c001c463:	fc                   	cld    
c001c464:	89 df                	mov    edi,ebx
c001c466:	89 de                	mov    esi,ebx
c001c468:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c46a:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c46e:	83 c4 2c             	add    esp,0x2c
c001c471:	5b                   	pop    ebx
c001c472:	5e                   	pop    esi
c001c473:	5f                   	pop    edi
c001c474:	5d                   	pop    ebp
c001c475:	e9 ba 3f ff ff       	jmp    c0010434 <Device::preOpenPCI(PCIDeviceInfo)>
c001c47a:	83 c4 1c             	add    esp,0x1c
c001c47d:	5b                   	pop    ebx
c001c47e:	5e                   	pop    esi
c001c47f:	5f                   	pop    edi
c001c480:	5d                   	pop    ebp
c001c481:	c3                   	ret    

c001c482 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c482:	55                   	push   ebp
c001c483:	57                   	push   edi
c001c484:	56                   	push   esi
c001c485:	53                   	push   ebx
c001c486:	83 ec 5c             	sub    esp,0x5c
c001c489:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c48d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c491:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c495:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c49a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c49e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c4a2:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c4a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4ab:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c4b0:	6a 0c                	push   0xc
c001c4b2:	55                   	push   ebp
c001c4b3:	53                   	push   ebx
c001c4b4:	57                   	push   edi
c001c4b5:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c4bc:	e8 03 fc ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c4c1:	55                   	push   ebp
c001c4c2:	53                   	push   ebx
c001c4c3:	57                   	push   edi
c001c4c4:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c4cb:	e8 82 fc ff ff       	call   c001c152 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c4d0:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c001c4d5:	83 c4 24             	add    esp,0x24
c001c4d8:	55                   	push   ebp
c001c4d9:	53                   	push   ebx
c001c4da:	57                   	push   edi
c001c4db:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c4df:	e8 f8 fc ff ff       	call   c001c1dc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c4e4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c4e8:	6a 3c                	push   0x3c
c001c4ea:	55                   	push   ebp
c001c4eb:	53                   	push   ebx
c001c4ec:	57                   	push   edi
c001c4ed:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c4f4:	e8 cb fb ff ff       	call   c001c0c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c4f9:	0f b6 c4             	movzx  eax,ah
c001c4fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c500:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c504:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001c508:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c001c50d:	83 c4 24             	add    esp,0x24
c001c510:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c516:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c51d:	74 6c                	je     c001c58b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c51f:	31 f6                	xor    esi,esi
c001c521:	8b 15 28 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024528
c001c527:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c52d:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c533:	7e 56                	jle    c001c58b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c535:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c538:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c53f:	39 cb                	cmp    ebx,ecx
c001c541:	75 45                	jne    c001c588 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c543:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c54a:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c54e:	75 38                	jne    c001c588 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c550:	83 ec 0c             	sub    esp,0xc
c001c553:	68 61 32 02 c0       	push   0xc0023261
c001c558:	e8 e4 2b ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001c55d:	8b 15 28 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024528
c001c563:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c569:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c571:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c575:	52                   	push   edx
c001c576:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c57a:	53                   	push   ebx
c001c57b:	68 86 32 02 c0       	push   0xc0023286
c001c580:	e8 bc 2b ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001c585:	83 c4 20             	add    esp,0x20
c001c588:	46                   	inc    esi
c001c589:	eb 96                	jmp    c001c521 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c001c58b:	31 d2                	xor    edx,edx
c001c58d:	83 ec 0c             	sub    esp,0xc
c001c590:	55                   	push   ebp
c001c591:	53                   	push   ebx
c001c592:	57                   	push   edi
c001c593:	52                   	push   edx
c001c594:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c598:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c59f:	e8 7e fc ff ff       	call   c001c222 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c5a4:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c5a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c5ac:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c5b0:	42                   	inc    edx
c001c5b1:	83 c4 20             	add    esp,0x20
c001c5b4:	83 fa 06             	cmp    edx,0x6
c001c5b7:	75 d4                	jne    c001c58d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c001c5b9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c5bd:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c5c1:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c5c5:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c5c9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c5cd:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c5d1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c5d6:	86 e0                	xchg   al,ah
c001c5d8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c5dd:	55                   	push   ebp
c001c5de:	53                   	push   ebx
c001c5df:	57                   	push   edi
c001c5e0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c5e4:	e8 ad fb ff ff       	call   c001c196 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c5e9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c5ed:	55                   	push   ebp
c001c5ee:	53                   	push   ebx
c001c5ef:	57                   	push   edi
c001c5f0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c5f7:	e8 10 fb ff ff       	call   c001c10c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c5fc:	83 ec 0c             	sub    esp,0xc
c001c5ff:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c604:	b9 09 00 00 00       	mov    ecx,0x9
c001c609:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c60d:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c611:	fc                   	cld    
c001c612:	89 e7                	mov    edi,esp
c001c614:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c616:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c61d:	e8 f0 fc ff ff       	call   c001c312 <PCI::foundDevice(PCIDeviceInfo)>
c001c622:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c628:	5b                   	pop    ebx
c001c629:	5e                   	pop    esi
c001c62a:	5f                   	pop    edi
c001c62b:	5d                   	pop    ebp
c001c62c:	c3                   	ret    
c001c62d:	90                   	nop

c001c62e <PCI::checkDevice(unsigned char, unsigned char)>:
c001c62e:	55                   	push   ebp
c001c62f:	57                   	push   edi
c001c630:	56                   	push   esi
c001c631:	53                   	push   ebx
c001c632:	83 ec 0c             	sub    esp,0xc
c001c635:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c639:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c63e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c643:	6a 00                	push   0x0
c001c645:	56                   	push   esi
c001c646:	57                   	push   edi
c001c647:	55                   	push   ebp
c001c648:	e8 bf fa ff ff       	call   c001c10c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c64d:	6a 00                	push   0x0
c001c64f:	56                   	push   esi
c001c650:	57                   	push   edi
c001c651:	55                   	push   ebp
c001c652:	e8 2b fe ff ff       	call   c001c482 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c657:	83 c4 20             	add    esp,0x20
c001c65a:	6a 00                	push   0x0
c001c65c:	56                   	push   esi
c001c65d:	57                   	push   edi
c001c65e:	55                   	push   ebp
c001c65f:	e8 ca fa ff ff       	call   c001c12e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c664:	83 c4 10             	add    esp,0x10
c001c667:	84 c0                	test   al,al
c001c669:	79 27                	jns    c001c692 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c66b:	bb 01 00 00 00       	mov    ebx,0x1
c001c670:	53                   	push   ebx
c001c671:	56                   	push   esi
c001c672:	57                   	push   edi
c001c673:	55                   	push   ebp
c001c674:	e8 93 fa ff ff       	call   c001c10c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c679:	83 c4 10             	add    esp,0x10
c001c67c:	66 40                	inc    ax
c001c67e:	74 0c                	je     c001c68c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c680:	53                   	push   ebx
c001c681:	56                   	push   esi
c001c682:	57                   	push   edi
c001c683:	55                   	push   ebp
c001c684:	e8 f9 fd ff ff       	call   c001c482 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c689:	83 c4 10             	add    esp,0x10
c001c68c:	43                   	inc    ebx
c001c68d:	83 fb 08             	cmp    ebx,0x8
c001c690:	75 de                	jne    c001c670 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c692:	83 c4 0c             	add    esp,0xc
c001c695:	5b                   	pop    ebx
c001c696:	5e                   	pop    esi
c001c697:	5f                   	pop    edi
c001c698:	5d                   	pop    ebp
c001c699:	c3                   	ret    

c001c69a <PCI::detect()>:
c001c69a:	56                   	push   esi
c001c69b:	53                   	push   ebx
c001c69c:	53                   	push   ebx
c001c69d:	31 db                	xor    ebx,ebx
c001c69f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6a3:	6a 00                	push   0x0
c001c6a5:	6a 00                	push   0x0
c001c6a7:	6a 00                	push   0x0
c001c6a9:	56                   	push   esi
c001c6aa:	e8 7f fa ff ff       	call   c001c12e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c6af:	83 c4 10             	add    esp,0x10
c001c6b2:	a8 80                	test   al,0x80
c001c6b4:	75 21                	jne    c001c6d7 <PCI::detect()+0x3d>
c001c6b6:	51                   	push   ecx
c001c6b7:	51                   	push   ecx
c001c6b8:	6a 00                	push   0x0
c001c6ba:	56                   	push   esi
c001c6bb:	e8 2e fc ff ff       	call   c001c2ee <PCI::checkBus(unsigned char)>
c001c6c0:	83 c4 10             	add    esp,0x10
c001c6c3:	eb 24                	jmp    c001c6e9 <PCI::detect()+0x4f>
c001c6c5:	52                   	push   edx
c001c6c6:	52                   	push   edx
c001c6c7:	53                   	push   ebx
c001c6c8:	43                   	inc    ebx
c001c6c9:	56                   	push   esi
c001c6ca:	e8 1f fc ff ff       	call   c001c2ee <PCI::checkBus(unsigned char)>
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	83 fb 08             	cmp    ebx,0x8
c001c6d5:	74 12                	je     c001c6e9 <PCI::detect()+0x4f>
c001c6d7:	53                   	push   ebx
c001c6d8:	6a 00                	push   0x0
c001c6da:	6a 00                	push   0x0
c001c6dc:	56                   	push   esi
c001c6dd:	e8 2a fa ff ff       	call   c001c10c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c6e2:	83 c4 10             	add    esp,0x10
c001c6e5:	66 40                	inc    ax
c001c6e7:	74 dc                	je     c001c6c5 <PCI::detect()+0x2b>
c001c6e9:	58                   	pop    eax
c001c6ea:	5b                   	pop    ebx
c001c6eb:	5e                   	pop    esi
c001c6ec:	c3                   	ret    
c001c6ed:	90                   	nop

c001c6ee <IDE::close(int, int, void*)>:
c001c6ee:	83 c8 ff             	or     eax,0xffffffff
c001c6f1:	c3                   	ret    

c001c6f2 <IDE::IDE()>:
c001c6f2:	83 ec 0c             	sub    esp,0xc
c001c6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f9:	83 ec 08             	sub    esp,0x8
c001c6fc:	68 d0 32 02 c0       	push   0xc00232d0
c001c701:	50                   	push   eax
c001c702:	e8 d1 41 ff ff       	call   c00108d8 <HardDiskController::HardDiskController(char const*)>
c001c707:	83 c4 10             	add    esp,0x10
c001c70a:	ba 10 35 02 c0       	mov    edx,0xc0023510
c001c70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c713:	89 10                	mov    DWORD PTR [eax],edx
c001c715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c719:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c720:	90                   	nop
c001c721:	83 c4 0c             	add    esp,0xc
c001c724:	c3                   	ret    
c001c725:	90                   	nop

c001c726 <IDE::prepareInterrupt(unsigned char)>:
c001c726:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c72b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c72f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c737:	c3                   	ret    

c001c738 <selectDrive(unsigned char, unsigned char)>:
c001c738:	c3                   	ret    
c001c739:	90                   	nop

c001c73a <IDE::getBase(unsigned char)>:
c001c73a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c73f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c743:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c74b:	c3                   	ret    

c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c74c:	55                   	push   ebp
c001c74d:	57                   	push   edi
c001c74e:	56                   	push   esi
c001c74f:	53                   	push   ebx
c001c750:	83 ec 1c             	sub    esp,0x1c
c001c753:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c757:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c75b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c75f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c763:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c766:	80 f9 03             	cmp    cl,0x3
c001c769:	77 51                	ja     c001c7bc <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c76b:	0f b6 f2             	movzx  esi,dl
c001c76e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c772:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c775:	0f b6 db             	movzx  ebx,bl
c001c778:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c77c:	83 ca 80             	or     edx,0xffffff80
c001c77f:	0f b6 d2             	movzx  edx,dl
c001c782:	52                   	push   edx
c001c783:	6a 0c                	push   0xc
c001c785:	56                   	push   esi
c001c786:	57                   	push   edi
c001c787:	e8 c0 ff ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c78c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c795:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c799:	ee                   	out    dx,al
c001c79a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c79f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c7a3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c7a7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c7ab:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c7b3:	83 c4 2c             	add    esp,0x2c
c001c7b6:	5b                   	pop    ebx
c001c7b7:	5e                   	pop    esi
c001c7b8:	5f                   	pop    edi
c001c7b9:	5d                   	pop    ebp
c001c7ba:	eb 90                	jmp    c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7bc:	80 fb 07             	cmp    bl,0x7
c001c7bf:	77 12                	ja     c001c7d3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c7c1:	0f b6 d2             	movzx  edx,dl
c001c7c4:	0f b6 db             	movzx  ebx,bl
c001c7c7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c7cf:	89 da                	mov    edx,ebx
c001c7d1:	eb 2f                	jmp    c001c802 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c7d3:	80 fb 0d             	cmp    bl,0xd
c001c7d6:	77 13                	ja     c001c7eb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c7d8:	0f b6 d2             	movzx  edx,dl
c001c7db:	0f b6 db             	movzx  ebx,bl
c001c7de:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c7e5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c7e9:	eb 17                	jmp    c001c802 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c7eb:	80 fb 15             	cmp    bl,0x15
c001c7ee:	77 13                	ja     c001c803 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c7f0:	0f b6 d2             	movzx  edx,dl
c001c7f3:	0f b6 db             	movzx  ebx,bl
c001c7f6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c7fe:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c802:	ee                   	out    dx,al
c001c803:	83 c4 1c             	add    esp,0x1c
c001c806:	5b                   	pop    ebx
c001c807:	5e                   	pop    esi
c001c808:	5f                   	pop    edi
c001c809:	5d                   	pop    ebp
c001c80a:	c3                   	ret    
c001c80b:	90                   	nop

c001c80c <IDE::read(unsigned char, unsigned char)>:
c001c80c:	55                   	push   ebp
c001c80d:	57                   	push   edi
c001c80e:	56                   	push   esi
c001c80f:	53                   	push   ebx
c001c810:	83 ec 1c             	sub    esp,0x1c
c001c813:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c817:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c81b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c81f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c822:	3c 03                	cmp    al,0x3
c001c824:	77 43                	ja     c001c869 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c826:	0f b6 f2             	movzx  esi,dl
c001c829:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c82c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c830:	83 c8 80             	or     eax,0xffffff80
c001c833:	0f b6 c0             	movzx  eax,al
c001c836:	50                   	push   eax
c001c837:	6a 0c                	push   0xc
c001c839:	56                   	push   esi
c001c83a:	57                   	push   edi
c001c83b:	e8 0c ff ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c840:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c845:	0f b6 c3             	movzx  eax,bl
c001c848:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c84c:	ec                   	in     al,dx
c001c84d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c852:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c856:	52                   	push   edx
c001c857:	6a 0c                	push   0xc
c001c859:	56                   	push   esi
c001c85a:	57                   	push   edi
c001c85b:	e8 ec fe ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c860:	83 c4 20             	add    esp,0x20
c001c863:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c867:	eb 49                	jmp    c001c8b2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c869:	80 fb 07             	cmp    bl,0x7
c001c86c:	77 12                	ja     c001c880 <IDE::read(unsigned char, unsigned char)+0x74>
c001c86e:	0f b6 d2             	movzx  edx,dl
c001c871:	0f b6 c3             	movzx  eax,bl
c001c874:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c87c:	89 c2                	mov    edx,eax
c001c87e:	eb 31                	jmp    c001c8b1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c880:	80 fb 0d             	cmp    bl,0xd
c001c883:	77 13                	ja     c001c898 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c885:	0f b6 d2             	movzx  edx,dl
c001c888:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c88f:	0f b6 d3             	movzx  edx,bl
c001c892:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c896:	eb 19                	jmp    c001c8b1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c898:	31 c0                	xor    eax,eax
c001c89a:	80 fb 15             	cmp    bl,0x15
c001c89d:	77 13                	ja     c001c8b2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c89f:	0f b6 d2             	movzx  edx,dl
c001c8a2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c8aa:	0f b6 d3             	movzx  edx,bl
c001c8ad:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c8b1:	ec                   	in     al,dx
c001c8b2:	83 c4 1c             	add    esp,0x1c
c001c8b5:	5b                   	pop    ebx
c001c8b6:	5e                   	pop    esi
c001c8b7:	5f                   	pop    edi
c001c8b8:	5d                   	pop    ebp
c001c8b9:	c3                   	ret    

c001c8ba <IDE::waitInterrupt(unsigned char)>:
c001c8ba:	57                   	push   edi
c001c8bb:	56                   	push   esi
c001c8bc:	31 f6                	xor    esi,esi
c001c8be:	53                   	push   ebx
c001c8bf:	83 ec 10             	sub    esp,0x10
c001c8c2:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001c8c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c8ca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c8ce:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c8d3:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001c8da:	84 db                	test   bl,bl
c001c8dc:	75 37                	jne    c001c915 <IDE::waitInterrupt(unsigned char)+0x5b>
c001c8de:	52                   	push   edx
c001c8df:	6a 0c                	push   0xc
c001c8e1:	50                   	push   eax
c001c8e2:	57                   	push   edi
c001c8e3:	e8 24 ff ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001c8e8:	83 c4 10             	add    esp,0x10
c001c8eb:	a8 01                	test   al,0x1
c001c8ed:	75 2e                	jne    c001c91d <IDE::waitInterrupt(unsigned char)+0x63>
c001c8ef:	f7 c6 04 00 00 00    	test   esi,0x4
c001c8f5:	75 16                	jne    c001c90d <IDE::waitInterrupt(unsigned char)+0x53>
c001c8f7:	83 fe 32             	cmp    esi,0x32
c001c8fa:	7e 11                	jle    c001c90d <IDE::waitInterrupt(unsigned char)+0x53>
c001c8fc:	50                   	push   eax
c001c8fd:	50                   	push   eax
c001c8fe:	6a 00                	push   0x0
c001c900:	68 80 96 98 00       	push   0x989680
c001c905:	e8 4d c5 ff ff       	call   c0018e57 <nanoSleep(unsigned long long)>
c001c90a:	83 c4 10             	add    esp,0x10
c001c90d:	83 fe 3c             	cmp    esi,0x3c
c001c910:	74 0b                	je     c001c91d <IDE::waitInterrupt(unsigned char)+0x63>
c001c912:	46                   	inc    esi
c001c913:	eb b9                	jmp    c001c8ce <IDE::waitInterrupt(unsigned char)+0x14>
c001c915:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001c91d:	83 c4 10             	add    esp,0x10
c001c920:	88 d8                	mov    al,bl
c001c922:	5b                   	pop    ebx
c001c923:	5e                   	pop    esi
c001c924:	5f                   	pop    edi
c001c925:	c3                   	ret    

c001c926 <ideChannel0IRQHandler(regs*, void*)>:
c001c926:	83 ec 10             	sub    esp,0x10
c001c929:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c92d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c934:	6a 07                	push   0x7
c001c936:	6a 00                	push   0x0
c001c938:	50                   	push   eax
c001c939:	e8 ce fe ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001c93e:	83 c4 1c             	add    esp,0x1c
c001c941:	c3                   	ret    

c001c942 <ideChannel1IRQHandler(regs*, void*)>:
c001c942:	83 ec 10             	sub    esp,0x10
c001c945:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c949:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c950:	6a 07                	push   0x7
c001c952:	6a 01                	push   0x1
c001c954:	50                   	push   eax
c001c955:	e8 b2 fe ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001c95a:	83 c4 1c             	add    esp,0x1c
c001c95d:	c3                   	ret    

c001c95e <IDE::enableIRQs(unsigned char, bool)>:
c001c95e:	57                   	push   edi
c001c95f:	56                   	push   esi
c001c960:	be 04 00 00 00       	mov    esi,0x4
c001c965:	53                   	push   ebx
c001c966:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c96b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c970:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c974:	0f 94 c0             	sete   al
c001c977:	01 c0                	add    eax,eax
c001c979:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c980:	0f b6 c0             	movzx  eax,al
c001c983:	50                   	push   eax
c001c984:	6a 0c                	push   0xc
c001c986:	57                   	push   edi
c001c987:	53                   	push   ebx
c001c988:	e8 bf fd ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c98d:	83 c4 10             	add    esp,0x10
c001c990:	50                   	push   eax
c001c991:	6a 0c                	push   0xc
c001c993:	57                   	push   edi
c001c994:	53                   	push   ebx
c001c995:	e8 72 fe ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001c99a:	83 c4 10             	add    esp,0x10
c001c99d:	4e                   	dec    esi
c001c99e:	75 f0                	jne    c001c990 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c9a0:	5b                   	pop    ebx
c001c9a1:	5e                   	pop    esi
c001c9a2:	5f                   	pop    edi
c001c9a3:	c3                   	ret    

c001c9a4 <IDE::open(int, int, void*)>:
c001c9a4:	55                   	push   ebp
c001c9a5:	57                   	push   edi
c001c9a6:	56                   	push   esi
c001c9a7:	53                   	push   ebx
c001c9a8:	83 ec 1c             	sub    esp,0x1c
c001c9ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c9af:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c9b8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c9c1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c9c8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c9cf:	0f 85 b2 02 00 00    	jne    c001cc87 <IDE::open(int, int, void*)+0x2e3>
c001c9d5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c9db:	88 04 24             	mov    BYTE PTR [esp],al
c001c9de:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c9e1:	83 e0 7f             	and    eax,0x7f
c001c9e4:	83 f8 05             	cmp    eax,0x5
c001c9e7:	74 05                	je     c001c9ee <IDE::open(int, int, void*)+0x4a>
c001c9e9:	83 f8 0f             	cmp    eax,0xf
c001c9ec:	75 32                	jne    c001ca20 <IDE::open(int, int, void*)+0x7c>
c001c9ee:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c9f4:	83 e0 fc             	and    eax,0xfffffffc
c001c9f7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c9fe:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ca04:	83 e0 fc             	and    eax,0xfffffffc
c001ca07:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ca0e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ca14:	83 e0 fc             	and    eax,0xfffffffc
c001ca17:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca1e:	eb 14                	jmp    c001ca34 <IDE::open(int, int, void*)+0x90>
c001ca20:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ca2a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ca34:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ca3b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ca42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca46:	89 c6                	mov    esi,eax
c001ca48:	89 e8                	mov    eax,ebp
c001ca4a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ca4f:	c1 e6 10             	shl    esi,0x10
c001ca52:	89 fa                	mov    edx,edi
c001ca54:	c1 e0 0b             	shl    eax,0xb
c001ca57:	09 f0                	or     eax,esi
c001ca59:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ca60:	c1 e6 08             	shl    esi,0x8
c001ca63:	09 c6                	or     esi,eax
c001ca65:	89 f0                	mov    eax,esi
c001ca67:	0d 08 00 00 80       	or     eax,0x80000008
c001ca6c:	ef                   	out    dx,eax
c001ca6d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001ca72:	89 ca                	mov    edx,ecx
c001ca74:	ed                   	in     eax,dx
c001ca75:	c1 e8 10             	shr    eax,0x10
c001ca78:	3d ff ff 00 00       	cmp    eax,0xffff
c001ca7d:	0f 84 f3 00 00 00    	je     c001cb76 <IDE::open(int, int, void*)+0x1d2>
c001ca83:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ca89:	89 fa                	mov    edx,edi
c001ca8b:	89 f0                	mov    eax,esi
c001ca8d:	ef                   	out    dx,eax
c001ca8e:	b0 fe                	mov    al,0xfe
c001ca90:	89 ca                	mov    edx,ecx
c001ca92:	ee                   	out    dx,al
c001ca93:	89 f0                	mov    eax,esi
c001ca95:	89 fa                	mov    edx,edi
c001ca97:	ef                   	out    dx,eax
c001ca98:	89 ca                	mov    edx,ecx
c001ca9a:	ed                   	in     eax,dx
c001ca9b:	3c fe                	cmp    al,0xfe
c001ca9d:	0f 85 a9 00 00 00    	jne    c001cb4c <IDE::open(int, int, void*)+0x1a8>
c001caa3:	8b 15 28 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024528
c001caa9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cab0:	74 33                	je     c001cae5 <IDE::open(int, int, void*)+0x141>
c001cab2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cab8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cabc:	40                   	inc    eax
c001cabd:	83 ec 0c             	sub    esp,0xc
c001cac0:	0f b6 c0             	movzx  eax,al
c001cac3:	50                   	push   eax
c001cac4:	55                   	push   ebp
c001cac5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cac9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cacf:	51                   	push   ecx
c001cad0:	e8 99 72 ff ff       	call   c0013d6e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cad5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cada:	83 c4 1c             	add    esp,0x1c
c001cadd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cae3:	eb 0a                	jmp    c001caef <IDE::open(int, int, void*)+0x14b>
c001cae5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001caef:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001caf6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cafd:	c1 e1 10             	shl    ecx,0x10
c001cb00:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cb05:	c1 e0 08             	shl    eax,0x8
c001cb08:	89 fa                	mov    edx,edi
c001cb0a:	09 c1                	or     ecx,eax
c001cb0c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cb13:	c1 e0 0b             	shl    eax,0xb
c001cb16:	09 c1                	or     ecx,eax
c001cb18:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cb1e:	89 c8                	mov    eax,ecx
c001cb20:	ef                   	out    dx,eax
c001cb21:	be fc 0c 00 00       	mov    esi,0xcfc
c001cb26:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cb2c:	89 f2                	mov    edx,esi
c001cb2e:	ee                   	out    dx,al
c001cb2f:	89 c8                	mov    eax,ecx
c001cb31:	89 fa                	mov    edx,edi
c001cb33:	ef                   	out    dx,eax
c001cb34:	89 f2                	mov    edx,esi
c001cb36:	ed                   	in     eax,dx
c001cb37:	0f b6 c0             	movzx  eax,al
c001cb3a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001cb40:	74 44                	je     c001cb86 <IDE::open(int, int, void*)+0x1e2>
c001cb42:	83 ec 0c             	sub    esp,0xc
c001cb45:	68 e8 32 02 c0       	push   0xc00232e8
c001cb4a:	eb 32                	jmp    c001cb7e <IDE::open(int, int, void*)+0x1da>
c001cb4c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cb55:	75 15                	jne    c001cb6c <IDE::open(int, int, void*)+0x1c8>
c001cb57:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001cb5b:	74 06                	je     c001cb63 <IDE::open(int, int, void*)+0x1bf>
c001cb5d:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001cb61:	75 09                	jne    c001cb6c <IDE::open(int, int, void*)+0x1c8>
c001cb63:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cb6a:	eb 1a                	jmp    c001cb86 <IDE::open(int, int, void*)+0x1e2>
c001cb6c:	83 ec 0c             	sub    esp,0xc
c001cb6f:	68 f0 32 02 c0       	push   0xc00232f0
c001cb74:	eb 08                	jmp    c001cb7e <IDE::open(int, int, void*)+0x1da>
c001cb76:	83 ec 0c             	sub    esp,0xc
c001cb79:	68 21 33 02 c0       	push   0xc0023321
c001cb7e:	e8 89 8d ff ff       	call   c001590c <Krnl::panic(char const*)>
c001cb83:	83 c4 10             	add    esp,0x10
c001cb86:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cb8d:	79 1a                	jns    c001cba9 <IDE::open(int, int, void*)+0x205>
c001cb8f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cb95:	83 e0 fc             	and    eax,0xfffffffc
c001cb98:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cb9f:	83 c0 08             	add    eax,0x8
c001cba2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cba9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cbaf:	89 c2                	mov    edx,eax
c001cbb1:	83 e2 0f             	and    edx,0xf
c001cbb4:	66 83 fa 08          	cmp    dx,0x8
c001cbb8:	75 0a                	jne    c001cbc4 <IDE::open(int, int, void*)+0x220>
c001cbba:	83 e8 02             	sub    eax,0x2
c001cbbd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cbc4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cbca:	89 c2                	mov    edx,eax
c001cbcc:	83 e2 0f             	and    edx,0xf
c001cbcf:	66 83 fa 08          	cmp    dx,0x8
c001cbd3:	75 0a                	jne    c001cbdf <IDE::open(int, int, void*)+0x23b>
c001cbd5:	83 e8 02             	sub    eax,0x2
c001cbd8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cbdf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cbe6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cbed:	89 d0                	mov    eax,edx
c001cbef:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cbf2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cbf6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cbfa:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cbfd:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cc02:	0f b6 c9             	movzx  ecx,cl
c001cc05:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cc0c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cc0f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cc13:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cc17:	8d 50 02             	lea    edx,[eax+0x2]
c001cc1a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cc1f:	0f b6 d2             	movzx  edx,dl
c001cc22:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cc28:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc2b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc2f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cc33:	8d 48 03             	lea    ecx,[eax+0x3]
c001cc36:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cc3b:	0f b6 c9             	movzx  ecx,cl
c001cc3e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cc44:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cc47:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cc4b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cc4f:	8d 50 04             	lea    edx,[eax+0x4]
c001cc52:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cc58:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cc5d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cc64:	66 85 f6             	test   si,si
c001cc67:	74 3e                	je     c001cca7 <IDE::open(int, int, void*)+0x303>
c001cc69:	0f b6 d2             	movzx  edx,dl
c001cc6c:	83 c0 05             	add    eax,0x5
c001cc6f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc72:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc76:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cc7a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cc80:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cc85:	eb 20                	jmp    c001cca7 <IDE::open(int, int, void*)+0x303>
c001cc87:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cc91:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cc9b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cca2:	e9 02 ff ff ff       	jmp    c001cba9 <IDE::open(int, int, void*)+0x205>
c001cca7:	52                   	push   edx
c001cca8:	52                   	push   edx
c001cca9:	6a 00                	push   0x0
c001ccab:	53                   	push   ebx
c001ccac:	e8 75 fa ff ff       	call   c001c726 <IDE::prepareInterrupt(unsigned char)>
c001ccb1:	59                   	pop    ecx
c001ccb2:	5e                   	pop    esi
c001ccb3:	6a 01                	push   0x1
c001ccb5:	53                   	push   ebx
c001ccb6:	e8 6b fa ff ff       	call   c001c726 <IDE::prepareInterrupt(unsigned char)>
c001ccbb:	83 c4 0c             	add    esp,0xc
c001ccbe:	6a 00                	push   0x0
c001ccc0:	6a 00                	push   0x0
c001ccc2:	53                   	push   ebx
c001ccc3:	e8 96 fc ff ff       	call   c001c95e <IDE::enableIRQs(unsigned char, bool)>
c001ccc8:	83 c4 0c             	add    esp,0xc
c001cccb:	6a 00                	push   0x0
c001cccd:	6a 01                	push   0x1
c001cccf:	53                   	push   ebx
c001ccd0:	e8 89 fc ff ff       	call   c001c95e <IDE::enableIRQs(unsigned char, bool)>
c001ccd5:	83 c4 10             	add    esp,0x10
c001ccd8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ccdf:	74 40                	je     c001cd21 <IDE::open(int, int, void*)+0x37d>
c001cce1:	83 ec 0c             	sub    esp,0xc
c001cce4:	68 4b 33 02 c0       	push   0xc002334b
c001cce9:	e8 53 24 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001ccee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccf1:	6a 01                	push   0x1
c001ccf3:	68 26 c9 01 c0       	push   0xc001c926
c001ccf8:	6a 0e                	push   0xe
c001ccfa:	53                   	push   ebx
c001ccfb:	e8 aa 37 ff ff       	call   c00104aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd00:	83 c4 14             	add    esp,0x14
c001cd03:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cd09:	53                   	push   ebx
c001cd0a:	6a 01                	push   0x1
c001cd0c:	68 42 c9 01 c0       	push   0xc001c942
c001cd11:	6a 0f                	push   0xf
c001cd13:	53                   	push   ebx
c001cd14:	e8 91 37 ff ff       	call   c00104aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd19:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cd1f:	eb 4a                	jmp    c001cd6b <IDE::open(int, int, void*)+0x3c7>
c001cd21:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cd2b:	50                   	push   eax
c001cd2c:	6a 0f                	push   0xf
c001cd2e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cd34:	68 67 33 02 c0       	push   0xc0023367
c001cd39:	e8 03 24 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001cd3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd41:	6a 00                	push   0x0
c001cd43:	68 26 c9 01 c0       	push   0xc001c926
c001cd48:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cd4e:	53                   	push   ebx
c001cd4f:	e8 56 37 ff ff       	call   c00104aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd54:	83 c4 14             	add    esp,0x14
c001cd57:	53                   	push   ebx
c001cd58:	6a 00                	push   0x0
c001cd5a:	68 42 c9 01 c0       	push   0xc001c942
c001cd5f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cd65:	53                   	push   ebx
c001cd66:	e8 3f 37 ff ff       	call   c00104aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd6b:	83 c4 20             	add    esp,0x20
c001cd6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd70:	83 ec 0c             	sub    esp,0xc
c001cd73:	53                   	push   ebx
c001cd74:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cd77:	83 c4 0c             	add    esp,0xc
c001cd7a:	6a 07                	push   0x7
c001cd7c:	6a 00                	push   0x0
c001cd7e:	53                   	push   ebx
c001cd7f:	e8 88 fa ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cd84:	83 c4 0c             	add    esp,0xc
c001cd87:	6a 07                	push   0x7
c001cd89:	6a 01                	push   0x1
c001cd8b:	53                   	push   ebx
c001cd8c:	e8 7b fa ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cd91:	83 c4 0c             	add    esp,0xc
c001cd94:	6a 01                	push   0x1
c001cd96:	6a 00                	push   0x0
c001cd98:	53                   	push   ebx
c001cd99:	e8 c0 fb ff ff       	call   c001c95e <IDE::enableIRQs(unsigned char, bool)>
c001cd9e:	83 c4 0c             	add    esp,0xc
c001cda1:	6a 01                	push   0x1
c001cda3:	6a 01                	push   0x1
c001cda5:	53                   	push   ebx
c001cda6:	e8 b3 fb ff ff       	call   c001c95e <IDE::enableIRQs(unsigned char, bool)>
c001cdab:	83 c4 2c             	add    esp,0x2c
c001cdae:	31 c0                	xor    eax,eax
c001cdb0:	5b                   	pop    ebx
c001cdb1:	5e                   	pop    esi
c001cdb2:	5f                   	pop    edi
c001cdb3:	5d                   	pop    ebp
c001cdb4:	c3                   	ret    
c001cdb5:	90                   	nop

c001cdb6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cdb6:	55                   	push   ebp
c001cdb7:	57                   	push   edi
c001cdb8:	56                   	push   esi
c001cdb9:	53                   	push   ebx
c001cdba:	83 ec 1c             	sub    esp,0x1c
c001cdbd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cdc1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cdc5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cdc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cdcd:	8d 50 f8             	lea    edx,[eax-0x8]
c001cdd0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cdd4:	80 fa 03             	cmp    dl,0x3
c001cdd7:	77 5d                	ja     c001ce36 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cdd9:	0f b6 db             	movzx  ebx,bl
c001cddc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cde0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cde4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cde7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cdeb:	83 ca 80             	or     edx,0xffffff80
c001cdee:	0f b6 d2             	movzx  edx,dl
c001cdf1:	52                   	push   edx
c001cdf2:	6a 0c                	push   0xc
c001cdf4:	53                   	push   ebx
c001cdf5:	56                   	push   esi
c001cdf6:	e8 51 f9 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdff:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ce04:	0f b6 c0             	movzx  eax,al
c001ce07:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce0b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ce0f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ce11:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ce16:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ce1a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ce1e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ce22:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ce2a:	83 c4 2c             	add    esp,0x2c
c001ce2d:	5b                   	pop    ebx
c001ce2e:	5e                   	pop    esi
c001ce2f:	5f                   	pop    edi
c001ce30:	5d                   	pop    ebp
c001ce31:	e9 16 f9 ff ff       	jmp    c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce36:	3c 07                	cmp    al,0x7
c001ce38:	77 10                	ja     c001ce4a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ce3a:	0f b6 db             	movzx  ebx,bl
c001ce3d:	0f b6 d0             	movzx  edx,al
c001ce40:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ce48:	eb 2d                	jmp    c001ce77 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ce4a:	3c 0d                	cmp    al,0xd
c001ce4c:	77 13                	ja     c001ce61 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ce4e:	0f b6 db             	movzx  ebx,bl
c001ce51:	0f b6 c0             	movzx  eax,al
c001ce54:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ce5b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ce5f:	eb 16                	jmp    c001ce77 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ce61:	3c 15                	cmp    al,0x15
c001ce63:	77 14                	ja     c001ce79 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ce65:	0f b6 db             	movzx  ebx,bl
c001ce68:	0f b6 c0             	movzx  eax,al
c001ce6b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ce73:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ce77:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ce79:	83 c4 1c             	add    esp,0x1c
c001ce7c:	5b                   	pop    ebx
c001ce7d:	5e                   	pop    esi
c001ce7e:	5f                   	pop    edi
c001ce7f:	5d                   	pop    ebp
c001ce80:	c3                   	ret    
c001ce81:	90                   	nop

c001ce82 <IDE::detect()>:
c001ce82:	55                   	push   ebp
c001ce83:	57                   	push   edi
c001ce84:	56                   	push   esi
c001ce85:	53                   	push   ebx
c001ce86:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ce8c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ce93:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ce9a:	0f 85 c0 02 00 00    	jne    c001d160 <IDE::detect()+0x2de>
c001cea0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cea7:	31 f6                	xor    esi,esi
c001cea9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ceb1:	31 ed                	xor    ebp,ebp
c001ceb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceb7:	c1 e0 06             	shl    eax,0x6
c001ceba:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cec2:	89 e8                	mov    eax,ebp
c001cec4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cec8:	c1 e0 04             	shl    eax,0x4
c001cecb:	83 c8 a0             	or     eax,0xffffffa0
c001cece:	0f b6 c0             	movzx  eax,al
c001ced1:	50                   	push   eax
c001ced2:	6a 06                	push   0x6
c001ced4:	56                   	push   esi
c001ced5:	53                   	push   ebx
c001ced6:	e8 71 f8 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cedb:	83 c4 0c             	add    esp,0xc
c001cede:	6a 0c                	push   0xc
c001cee0:	56                   	push   esi
c001cee1:	53                   	push   ebx
c001cee2:	e8 25 f9 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cee7:	83 c4 0c             	add    esp,0xc
c001ceea:	6a 0c                	push   0xc
c001ceec:	56                   	push   esi
c001ceed:	53                   	push   ebx
c001ceee:	e8 19 f9 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cef3:	83 c4 0c             	add    esp,0xc
c001cef6:	6a 0c                	push   0xc
c001cef8:	56                   	push   esi
c001cef9:	53                   	push   ebx
c001cefa:	e8 0d f9 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001ceff:	83 c4 0c             	add    esp,0xc
c001cf02:	6a 0c                	push   0xc
c001cf04:	56                   	push   esi
c001cf05:	53                   	push   ebx
c001cf06:	e8 01 f9 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cf0b:	68 ec 00 00 00       	push   0xec
c001cf10:	6a 07                	push   0x7
c001cf12:	56                   	push   esi
c001cf13:	53                   	push   ebx
c001cf14:	e8 33 f8 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf19:	83 c4 1c             	add    esp,0x1c
c001cf1c:	6a 0c                	push   0xc
c001cf1e:	56                   	push   esi
c001cf1f:	53                   	push   ebx
c001cf20:	e8 e7 f8 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cf25:	83 c4 0c             	add    esp,0xc
c001cf28:	6a 0c                	push   0xc
c001cf2a:	56                   	push   esi
c001cf2b:	53                   	push   ebx
c001cf2c:	e8 db f8 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cf31:	83 c4 0c             	add    esp,0xc
c001cf34:	6a 0c                	push   0xc
c001cf36:	56                   	push   esi
c001cf37:	53                   	push   ebx
c001cf38:	e8 cf f8 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cf3d:	83 c4 0c             	add    esp,0xc
c001cf40:	6a 0c                	push   0xc
c001cf42:	56                   	push   esi
c001cf43:	53                   	push   ebx
c001cf44:	e8 c3 f8 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cf49:	83 c4 0c             	add    esp,0xc
c001cf4c:	6a 0c                	push   0xc
c001cf4e:	56                   	push   esi
c001cf4f:	53                   	push   ebx
c001cf50:	e8 b7 f8 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cf55:	83 c4 10             	add    esp,0x10
c001cf58:	84 c0                	test   al,al
c001cf5a:	0f 84 8b 01 00 00    	je     c001d0eb <IDE::detect()+0x269>
c001cf60:	31 ff                	xor    edi,edi
c001cf62:	50                   	push   eax
c001cf63:	6a 0c                	push   0xc
c001cf65:	56                   	push   esi
c001cf66:	53                   	push   ebx
c001cf67:	e8 a0 f8 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	a8 01                	test   al,0x1
c001cf71:	0f 85 8e 01 00 00    	jne    c001d105 <IDE::detect()+0x283>
c001cf77:	84 c0                	test   al,al
c001cf79:	78 04                	js     c001cf7f <IDE::detect()+0xfd>
c001cf7b:	a8 08                	test   al,0x8
c001cf7d:	75 27                	jne    c001cfa6 <IDE::detect()+0x124>
c001cf7f:	47                   	inc    edi
c001cf80:	81 ff 17 01 00 00    	cmp    edi,0x117
c001cf86:	7e da                	jle    c001cf62 <IDE::detect()+0xe0>
c001cf88:	50                   	push   eax
c001cf89:	50                   	push   eax
c001cf8a:	6a 00                	push   0x0
c001cf8c:	68 40 4b 4c 00       	push   0x4c4b40
c001cf91:	e8 c1 be ff ff       	call   c0018e57 <nanoSleep(unsigned long long)>
c001cf96:	83 c4 10             	add    esp,0x10
c001cf99:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001cf9f:	75 c1                	jne    c001cf62 <IDE::detect()+0xe0>
c001cfa1:	e9 5f 01 00 00       	jmp    c001d105 <IDE::detect()+0x283>
c001cfa6:	31 c9                	xor    ecx,ecx
c001cfa8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001cfac:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001cfb0:	83 ec 0c             	sub    esp,0xc
c001cfb3:	68 80 00 00 00       	push   0x80
c001cfb8:	57                   	push   edi
c001cfb9:	6a 00                	push   0x0
c001cfbb:	56                   	push   esi
c001cfbc:	53                   	push   ebx
c001cfbd:	e8 f4 fd ff ff       	call   c001cdb6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001cfc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfc6:	c1 e0 06             	shl    eax,0x6
c001cfc9:	01 d8                	add    eax,ebx
c001cfcb:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001cfd0:	89 d1                	mov    ecx,edx
c001cfd2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001cfd9:	89 f2                	mov    edx,esi
c001cfdb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001cfe2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001cfe8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001cfec:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001cff2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cff6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001cffd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d005:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d00c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d014:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d01a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d021:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d027:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d02b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d02f:	83 c4 20             	add    esp,0x20
c001d032:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d035:	83 c7 02             	add    edi,0x2
c001d038:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d03e:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d041:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d047:	83 c0 02             	add    eax,0x2
c001d04a:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d04e:	75 e2                	jne    c001d032 <IDE::detect()+0x1b0>
c001d050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d054:	c1 e0 06             	shl    eax,0x6
c001d057:	01 d8                	add    eax,ebx
c001d059:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d05f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d066:	66 c1 ea 09          	shr    dx,0x9
c001d06a:	83 e2 01             	and    edx,0x1
c001d06d:	84 c9                	test   cl,cl
c001d06f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d075:	75 2f                	jne    c001d0a6 <IDE::detect()+0x224>
c001d077:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d07d:	85 c0                	test   eax,eax
c001d07f:	74 66                	je     c001d0e7 <IDE::detect()+0x265>
c001d081:	50                   	push   eax
c001d082:	55                   	push   ebp
c001d083:	56                   	push   esi
c001d084:	68 83 33 02 c0       	push   0xc0023383
c001d089:	e8 b3 20 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d08e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d095:	e8 72 1f ff ff       	call   c000f00c <operator new(unsigned long)>
c001d09a:	89 c7                	mov    edi,eax
c001d09c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d09f:	e8 f4 02 00 00       	call   c001d398 <ATA::ATA()>
c001d0a4:	eb 28                	jmp    c001d0ce <IDE::detect()+0x24c>
c001d0a6:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d0ac:	55                   	push   ebp
c001d0ad:	56                   	push   esi
c001d0ae:	68 b2 33 02 c0       	push   0xc00233b2
c001d0b3:	e8 89 20 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d0b8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d0bf:	e8 48 1f ff ff       	call   c000f00c <operator new(unsigned long)>
c001d0c4:	89 c7                	mov    edi,eax
c001d0c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0c9:	e8 1e 09 00 00       	call   c001d9ec <ATAPI::ATAPI()>
c001d0ce:	5a                   	pop    edx
c001d0cf:	59                   	pop    ecx
c001d0d0:	57                   	push   edi
c001d0d1:	53                   	push   ebx
c001d0d2:	e8 7f 34 ff ff       	call   c0010556 <Device::addChild(Device*)>
c001d0d7:	8b 07                	mov    eax,DWORD PTR [edi]
c001d0d9:	53                   	push   ebx
c001d0da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0de:	6a 00                	push   0x0
c001d0e0:	57                   	push   edi
c001d0e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0e4:	83 c4 20             	add    esp,0x20
c001d0e7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d0eb:	4d                   	dec    ebp
c001d0ec:	74 0a                	je     c001d0f8 <IDE::detect()+0x276>
c001d0ee:	bd 01 00 00 00       	mov    ebp,0x1
c001d0f3:	e9 bb fd ff ff       	jmp    c001ceb3 <IDE::detect()+0x31>
c001d0f8:	4e                   	dec    esi
c001d0f9:	74 65                	je     c001d160 <IDE::detect()+0x2de>
c001d0fb:	be 01 00 00 00       	mov    esi,0x1
c001d100:	e9 ac fd ff ff       	jmp    c001ceb1 <IDE::detect()+0x2f>
c001d105:	50                   	push   eax
c001d106:	6a 04                	push   0x4
c001d108:	56                   	push   esi
c001d109:	53                   	push   ebx
c001d10a:	e8 fd f6 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001d10f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d113:	83 c4 0c             	add    esp,0xc
c001d116:	6a 05                	push   0x5
c001d118:	56                   	push   esi
c001d119:	53                   	push   ebx
c001d11a:	e8 ed f6 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001d11f:	83 c4 10             	add    esp,0x10
c001d122:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d126:	80 fa 14             	cmp    dl,0x14
c001d129:	74 2f                	je     c001d15a <IDE::detect()+0x2d8>
c001d12b:	80 fa 69             	cmp    dl,0x69
c001d12e:	75 bb                	jne    c001d0eb <IDE::detect()+0x269>
c001d130:	3c 96                	cmp    al,0x96
c001d132:	75 b7                	jne    c001d0eb <IDE::detect()+0x269>
c001d134:	68 a1 00 00 00       	push   0xa1
c001d139:	6a 07                	push   0x7
c001d13b:	56                   	push   esi
c001d13c:	53                   	push   ebx
c001d13d:	e8 0a f6 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d142:	5f                   	pop    edi
c001d143:	58                   	pop    eax
c001d144:	6a 00                	push   0x0
c001d146:	68 40 42 0f 00       	push   0xf4240
c001d14b:	e8 07 bd ff ff       	call   c0018e57 <nanoSleep(unsigned long long)>
c001d150:	83 c4 10             	add    esp,0x10
c001d153:	b1 01                	mov    cl,0x1
c001d155:	e9 4e fe ff ff       	jmp    c001cfa8 <IDE::detect()+0x126>
c001d15a:	3c eb                	cmp    al,0xeb
c001d15c:	75 cd                	jne    c001d12b <IDE::detect()+0x2a9>
c001d15e:	eb d4                	jmp    c001d134 <IDE::detect()+0x2b2>
c001d160:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d166:	5b                   	pop    ebx
c001d167:	5e                   	pop    esi
c001d168:	5f                   	pop    edi
c001d169:	5d                   	pop    ebp
c001d16a:	c3                   	ret    
c001d16b:	90                   	nop

c001d16c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d16c:	55                   	push   ebp
c001d16d:	57                   	push   edi
c001d16e:	56                   	push   esi
c001d16f:	53                   	push   ebx
c001d170:	83 ec 1c             	sub    esp,0x1c
c001d173:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d177:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d17b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d17f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d183:	88 c3                	mov    bl,al
c001d185:	84 c0                	test   al,al
c001d187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d18b:	0f 84 67 01 00 00    	je     c001d2f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d191:	83 ec 0c             	sub    esp,0xc
c001d194:	68 e3 33 02 c0       	push   0xc00233e3
c001d199:	e8 a3 1f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d19e:	83 c4 10             	add    esp,0x10
c001d1a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1a5:	3c 01                	cmp    al,0x1
c001d1a7:	75 17                	jne    c001d1c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d1a9:	83 ec 0c             	sub    esp,0xc
c001d1ac:	b3 13                	mov    bl,0x13
c001d1ae:	68 ef 33 02 c0       	push   0xc00233ef
c001d1b3:	e8 89 1f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d1b8:	83 c4 10             	add    esp,0x10
c001d1bb:	e9 25 01 00 00       	jmp    c001d2e5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d1c0:	3c 02                	cmp    al,0x2
c001d1c2:	0f 85 ef 00 00 00    	jne    c001d2b7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d1c8:	01 f6                	add    esi,esi
c001d1ca:	52                   	push   edx
c001d1cb:	09 ee                	or     esi,ebp
c001d1cd:	6a 01                	push   0x1
c001d1cf:	89 f0                	mov    eax,esi
c001d1d1:	0f b6 f0             	movzx  esi,al
c001d1d4:	c1 e6 06             	shl    esi,0x6
c001d1d7:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d1df:	50                   	push   eax
c001d1e0:	57                   	push   edi
c001d1e1:	e8 26 f6 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001d1e6:	83 c4 10             	add    esp,0x10
c001d1e9:	89 c6                	mov    esi,eax
c001d1eb:	a8 01                	test   al,0x1
c001d1ed:	74 12                	je     c001d201 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d1ef:	83 ec 0c             	sub    esp,0xc
c001d1f2:	b3 07                	mov    bl,0x7
c001d1f4:	68 04 34 02 c0       	push   0xc0023404
c001d1f9:	e8 43 1f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d1fe:	83 c4 10             	add    esp,0x10
c001d201:	f7 c6 02 00 00 00    	test   esi,0x2
c001d207:	74 12                	je     c001d21b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d209:	83 ec 0c             	sub    esp,0xc
c001d20c:	b3 03                	mov    bl,0x3
c001d20e:	68 22 34 02 c0       	push   0xc0023422
c001d213:	e8 29 1f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d218:	83 c4 10             	add    esp,0x10
c001d21b:	f7 c6 04 00 00 00    	test   esi,0x4
c001d221:	74 12                	je     c001d235 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d223:	83 ec 0c             	sub    esp,0xc
c001d226:	b3 14                	mov    bl,0x14
c001d228:	68 42 34 02 c0       	push   0xc0023442
c001d22d:	e8 0f 1f ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d232:	83 c4 10             	add    esp,0x10
c001d235:	f7 c6 08 00 00 00    	test   esi,0x8
c001d23b:	74 12                	je     c001d24f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d23d:	83 ec 0c             	sub    esp,0xc
c001d240:	b3 03                	mov    bl,0x3
c001d242:	68 22 34 02 c0       	push   0xc0023422
c001d247:	e8 f5 1e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d24c:	83 c4 10             	add    esp,0x10
c001d24f:	f7 c6 10 00 00 00    	test   esi,0x10
c001d255:	74 12                	je     c001d269 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d257:	83 ec 0c             	sub    esp,0xc
c001d25a:	b3 15                	mov    bl,0x15
c001d25c:	68 5a 34 02 c0       	push   0xc002345a
c001d261:	e8 db 1e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d266:	83 c4 10             	add    esp,0x10
c001d269:	f7 c6 20 00 00 00    	test   esi,0x20
c001d26f:	74 12                	je     c001d283 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d271:	83 ec 0c             	sub    esp,0xc
c001d274:	b3 03                	mov    bl,0x3
c001d276:	68 22 34 02 c0       	push   0xc0023422
c001d27b:	e8 c1 1e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d280:	83 c4 10             	add    esp,0x10
c001d283:	f7 c6 40 00 00 00    	test   esi,0x40
c001d289:	74 12                	je     c001d29d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d28b:	83 ec 0c             	sub    esp,0xc
c001d28e:	b3 16                	mov    bl,0x16
c001d290:	68 74 34 02 c0       	push   0xc0023474
c001d295:	e8 a7 1e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d29a:	83 c4 10             	add    esp,0x10
c001d29d:	89 f0                	mov    eax,esi
c001d29f:	84 c0                	test   al,al
c001d2a1:	79 42                	jns    c001d2e5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d2a3:	83 ec 0c             	sub    esp,0xc
c001d2a6:	b3 0d                	mov    bl,0xd
c001d2a8:	68 95 34 02 c0       	push   0xc0023495
c001d2ad:	e8 8f 1e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d2b2:	83 c4 10             	add    esp,0x10
c001d2b5:	eb 2e                	jmp    c001d2e5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d2b7:	3c 03                	cmp    al,0x3
c001d2b9:	75 14                	jne    c001d2cf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d2bb:	83 ec 0c             	sub    esp,0xc
c001d2be:	b3 17                	mov    bl,0x17
c001d2c0:	68 a9 34 02 c0       	push   0xc00234a9
c001d2c5:	e8 77 1e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d2ca:	83 c4 10             	add    esp,0x10
c001d2cd:	eb 16                	jmp    c001d2e5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d2cf:	3c 04                	cmp    al,0x4
c001d2d1:	75 12                	jne    c001d2e5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d2d3:	83 ec 0c             	sub    esp,0xc
c001d2d6:	b3 08                	mov    bl,0x8
c001d2d8:	68 bf 34 02 c0       	push   0xc00234bf
c001d2dd:	e8 5f 1e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d2e2:	83 c4 10             	add    esp,0x10
c001d2e5:	50                   	push   eax
c001d2e6:	50                   	push   eax
c001d2e7:	0f b6 c3             	movzx  eax,bl
c001d2ea:	50                   	push   eax
c001d2eb:	68 d7 34 02 c0       	push   0xc00234d7
c001d2f0:	e8 4c 1e ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d2f5:	83 c4 10             	add    esp,0x10
c001d2f8:	83 c4 1c             	add    esp,0x1c
c001d2fb:	88 d8                	mov    al,bl
c001d2fd:	5b                   	pop    ebx
c001d2fe:	5e                   	pop    esi
c001d2ff:	5f                   	pop    edi
c001d300:	5d                   	pop    ebp
c001d301:	c3                   	ret    

c001d302 <IDE::polling(unsigned char, unsigned int)>:
c001d302:	55                   	push   ebp
c001d303:	bd 04 00 00 00       	mov    ebp,0x4
c001d308:	57                   	push   edi
c001d309:	56                   	push   esi
c001d30a:	53                   	push   ebx
c001d30b:	83 ec 0c             	sub    esp,0xc
c001d30e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d312:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d316:	52                   	push   edx
c001d317:	6a 0c                	push   0xc
c001d319:	0f b6 f3             	movzx  esi,bl
c001d31c:	56                   	push   esi
c001d31d:	57                   	push   edi
c001d31e:	e8 e9 f4 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001d323:	83 c4 10             	add    esp,0x10
c001d326:	4d                   	dec    ebp
c001d327:	75 ed                	jne    c001d316 <IDE::polling(unsigned char, unsigned int)+0x14>
c001d329:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d32e:	50                   	push   eax
c001d32f:	6a 0c                	push   0xc
c001d331:	56                   	push   esi
c001d332:	57                   	push   edi
c001d333:	e8 d4 f4 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001d338:	83 c4 10             	add    esp,0x10
c001d33b:	a8 01                	test   al,0x1
c001d33d:	74 12                	je     c001d351 <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d33f:	83 ec 0c             	sub    esp,0xc
c001d342:	68 f1 34 02 c0       	push   0xc00234f1
c001d347:	e8 f5 1d ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001d34c:	83 c4 10             	add    esp,0x10
c001d34f:	eb 17                	jmp    c001d368 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d351:	a8 20                	test   al,0x20
c001d353:	75 0f                	jne    c001d364 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d355:	4b                   	dec    ebx
c001d356:	74 10                	je     c001d368 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d358:	84 c0                	test   al,al
c001d35a:	78 d2                	js     c001d32e <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d35c:	a8 08                	test   al,0x8
c001d35e:	74 ce                	je     c001d32e <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d360:	31 c0                	xor    eax,eax
c001d362:	eb 06                	jmp    c001d36a <IDE::polling(unsigned char, unsigned int)+0x68>
c001d364:	b0 01                	mov    al,0x1
c001d366:	eb 02                	jmp    c001d36a <IDE::polling(unsigned char, unsigned int)+0x68>
c001d368:	b0 02                	mov    al,0x2
c001d36a:	83 c4 0c             	add    esp,0xc
c001d36d:	5b                   	pop    ebx
c001d36e:	5e                   	pop    esi
c001d36f:	5f                   	pop    edi
c001d370:	5d                   	pop    ebp
c001d371:	c3                   	ret    

c001d372 <ATA::close(int, int, void*)>:
c001d372:	83 ec 0c             	sub    esp,0xc
c001d375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d379:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d37f:	85 c0                	test   eax,eax
c001d381:	74 0c                	je     c001d38f <ATA::close(int, int, void*)+0x1d>
c001d383:	83 ec 0c             	sub    esp,0xc
c001d386:	8b 10                	mov    edx,DWORD PTR [eax]
c001d388:	50                   	push   eax
c001d389:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d38c:	83 c4 10             	add    esp,0x10
c001d38f:	31 c0                	xor    eax,eax
c001d391:	83 c4 0c             	add    esp,0xc
c001d394:	c3                   	ret    
c001d395:	90                   	nop

c001d396 <ATA::powerSaving(PowerSavingLevel)>:
c001d396:	c3                   	ret    
c001d397:	90                   	nop

c001d398 <ATA::ATA()>:
c001d398:	83 ec 0c             	sub    esp,0xc
c001d39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d39f:	83 ec 04             	sub    esp,0x4
c001d3a2:	68 00 02 00 00       	push   0x200
c001d3a7:	68 34 35 02 c0       	push   0xc0023534
c001d3ac:	50                   	push   eax
c001d3ad:	e8 aa 35 ff ff       	call   c001095c <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d3b2:	83 c4 10             	add    esp,0x10
c001d3b5:	ba 60 35 02 c0       	mov    edx,0xc0023560
c001d3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3be:	89 10                	mov    DWORD PTR [eax],edx
c001d3c0:	90                   	nop
c001d3c1:	83 c4 0c             	add    esp,0xc
c001d3c4:	c3                   	ret    
c001d3c5:	90                   	nop

c001d3c6 <ATA::flush(bool)>:
c001d3c6:	53                   	push   ebx
c001d3c7:	83 ec 08             	sub    esp,0x8
c001d3ca:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d3cf:	19 c0                	sbb    eax,eax
c001d3d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3d5:	83 e0 fd             	and    eax,0xfffffffd
c001d3d8:	05 ea 00 00 00       	add    eax,0xea
c001d3dd:	50                   	push   eax
c001d3de:	6a 07                	push   0x7
c001d3e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d3e7:	50                   	push   eax
c001d3e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d3ee:	e8 59 f3 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3f3:	83 c4 0c             	add    esp,0xc
c001d3f6:	6a 00                	push   0x0
c001d3f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d3ff:	50                   	push   eax
c001d400:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d406:	e8 f7 fe ff ff       	call   c001d302 <IDE::polling(unsigned char, unsigned int)>
c001d40b:	83 c4 18             	add    esp,0x18
c001d40e:	5b                   	pop    ebx
c001d40f:	c3                   	ret    

c001d410 <ATA::readyForCommand()>:
c001d410:	56                   	push   esi
c001d411:	53                   	push   ebx
c001d412:	31 db                	xor    ebx,ebx
c001d414:	50                   	push   eax
c001d415:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d419:	50                   	push   eax
c001d41a:	6a 0c                	push   0xc
c001d41c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d423:	50                   	push   eax
c001d424:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d42a:	e8 dd f3 ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001d42f:	83 c4 10             	add    esp,0x10
c001d432:	a8 88                	test   al,0x88
c001d434:	74 23                	je     c001d459 <ATA::readyForCommand()+0x49>
c001d436:	43                   	inc    ebx
c001d437:	83 fb 63             	cmp    ebx,0x63
c001d43a:	7e dd                	jle    c001d419 <ATA::readyForCommand()+0x9>
c001d43c:	51                   	push   ecx
c001d43d:	51                   	push   ecx
c001d43e:	6a 00                	push   0x0
c001d440:	68 40 42 0f 00       	push   0xf4240
c001d445:	e8 0d ba ff ff       	call   c0018e57 <nanoSleep(unsigned long long)>
c001d44a:	83 c4 10             	add    esp,0x10
c001d44d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d453:	75 c4                	jne    c001d419 <ATA::readyForCommand()+0x9>
c001d455:	31 c0                	xor    eax,eax
c001d457:	eb 02                	jmp    c001d45b <ATA::readyForCommand()+0x4b>
c001d459:	b0 01                	mov    al,0x1
c001d45b:	5a                   	pop    edx
c001d45c:	5b                   	pop    ebx
c001d45d:	5e                   	pop    esi
c001d45e:	c3                   	ret    
c001d45f:	90                   	nop

c001d460 <ATA::access(unsigned long long, int, void*, bool)>:
c001d460:	55                   	push   ebp
c001d461:	57                   	push   edi
c001d462:	56                   	push   esi
c001d463:	53                   	push   ebx
c001d464:	83 ec 2c             	sub    esp,0x2c
c001d467:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d46b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d46f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d472:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d476:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d479:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d47d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d481:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d487:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d48b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d491:	c1 e0 06             	shl    eax,0x6
c001d494:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d498:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d4a0:	74 5d                	je     c001d4ff <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d4a2:	89 fa                	mov    edx,edi
c001d4a4:	89 f0                	mov    eax,esi
c001d4a6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d4aa:	c1 ea 1c             	shr    edx,0x1c
c001d4ad:	89 d1                	mov    ecx,edx
c001d4af:	09 c1                	or     ecx,eax
c001d4b1:	74 25                	je     c001d4d8 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d4b3:	31 ed                	xor    ebp,ebp
c001d4b5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d4bc:	89 fa                	mov    edx,edi
c001d4be:	89 f0                	mov    eax,esi
c001d4c0:	0f ad d0             	shrd   eax,edx,cl
c001d4c3:	d3 ea                	shr    edx,cl
c001d4c5:	f6 c1 20             	test   cl,0x20
c001d4c8:	74 02                	je     c001d4cc <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d4ca:	89 d0                	mov    eax,edx
c001d4cc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d4d0:	45                   	inc    ebp
c001d4d1:	83 fd 06             	cmp    ebp,0x6
c001d4d4:	75 df                	jne    c001d4b5 <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d4d6:	eb 73                	jmp    c001d54b <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d4d8:	89 f0                	mov    eax,esi
c001d4da:	89 fa                	mov    edx,edi
c001d4dc:	0f ac d0 10          	shrd   eax,edx,0x10
c001d4e0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d4e5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d4e9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d4f0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d4f5:	c1 ee 18             	shr    esi,0x18
c001d4f8:	bf 01 00 00 00       	mov    edi,0x1
c001d4fd:	eb 53                	jmp    c001d552 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d4ff:	6a 00                	push   0x0
c001d501:	6a 3f                	push   0x3f
c001d503:	57                   	push   edi
c001d504:	56                   	push   esi
c001d505:	e8 82 1f 00 00       	call   c001f48c <__umoddi3>
c001d50a:	83 c4 10             	add    esp,0x10
c001d50d:	40                   	inc    eax
c001d50e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d512:	6a 00                	push   0x0
c001d514:	68 f0 03 00 00       	push   0x3f0
c001d519:	57                   	push   edi
c001d51a:	56                   	push   esi
c001d51b:	e8 6c 1e 00 00       	call   c001f38c <__udivdi3>
c001d520:	83 c4 10             	add    esp,0x10
c001d523:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d528:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d52f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d534:	6a 00                	push   0x0
c001d536:	6a 3f                	push   0x3f
c001d538:	57                   	push   edi
c001d539:	31 ff                	xor    edi,edi
c001d53b:	56                   	push   esi
c001d53c:	e8 4b 1e 00 00       	call   c001f38c <__udivdi3>
c001d541:	89 c6                	mov    esi,eax
c001d543:	83 c4 10             	add    esp,0x10
c001d546:	83 e6 0f             	and    esi,0xf
c001d549:	eb 07                	jmp    c001d552 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d54b:	31 f6                	xor    esi,esi
c001d54d:	bf 02 00 00 00       	mov    edi,0x2
c001d552:	50                   	push   eax
c001d553:	6a 00                	push   0x0
c001d555:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d55c:	50                   	push   eax
c001d55d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d561:	e8 f8 f3 ff ff       	call   c001c95e <IDE::enableIRQs(unsigned char, bool)>
c001d566:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d569:	e8 a2 fe ff ff       	call   c001d410 <ATA::readyForCommand()>
c001d56e:	83 c4 10             	add    esp,0x10
c001d571:	84 c0                	test   al,al
c001d573:	75 0a                	jne    c001d57f <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d575:	be 01 00 00 00       	mov    esi,0x1
c001d57a:	e9 79 02 00 00       	jmp    c001d7f8 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d57f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d585:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d58b:	c1 e0 04             	shl    eax,0x4
c001d58e:	09 c6                	or     esi,eax
c001d590:	89 f8                	mov    eax,edi
c001d592:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d599:	84 c0                	test   al,al
c001d59b:	75 05                	jne    c001d5a2 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d59d:	83 ce a0             	or     esi,0xffffffa0
c001d5a0:	eb 03                	jmp    c001d5a5 <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d5a2:	83 ce e0             	or     esi,0xffffffe0
c001d5a5:	89 f0                	mov    eax,esi
c001d5a7:	0f b6 f0             	movzx  esi,al
c001d5aa:	56                   	push   esi
c001d5ab:	6a 06                	push   0x6
c001d5ad:	51                   	push   ecx
c001d5ae:	52                   	push   edx
c001d5af:	e8 98 f1 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5b4:	83 c4 10             	add    esp,0x10
c001d5b7:	6a 00                	push   0x0
c001d5b9:	6a 01                	push   0x1
c001d5bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5c2:	50                   	push   eax
c001d5c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5c9:	e8 7e f1 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5ce:	89 f8                	mov    eax,edi
c001d5d0:	83 c4 10             	add    esp,0x10
c001d5d3:	3c 02                	cmp    al,0x2
c001d5d5:	75 6e                	jne    c001d645 <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d5d7:	6a 00                	push   0x0
c001d5d9:	6a 08                	push   0x8
c001d5db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5e2:	50                   	push   eax
c001d5e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5e9:	e8 5e f1 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5ee:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d5f3:	50                   	push   eax
c001d5f4:	6a 09                	push   0x9
c001d5f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5fd:	50                   	push   eax
c001d5fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d604:	e8 43 f1 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d609:	83 c4 20             	add    esp,0x20
c001d60c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d611:	50                   	push   eax
c001d612:	6a 0a                	push   0xa
c001d614:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d61b:	50                   	push   eax
c001d61c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d622:	e8 25 f1 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d627:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d62c:	50                   	push   eax
c001d62d:	6a 0b                	push   0xb
c001d62f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d636:	50                   	push   eax
c001d637:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d63d:	e8 0a f1 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d642:	83 c4 20             	add    esp,0x20
c001d645:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d64a:	50                   	push   eax
c001d64b:	6a 02                	push   0x2
c001d64d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d654:	50                   	push   eax
c001d655:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d65b:	e8 ec f0 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d660:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d665:	50                   	push   eax
c001d666:	6a 03                	push   0x3
c001d668:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d66f:	50                   	push   eax
c001d670:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d676:	e8 d1 f0 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d67b:	83 c4 20             	add    esp,0x20
c001d67e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d683:	50                   	push   eax
c001d684:	6a 04                	push   0x4
c001d686:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d68d:	50                   	push   eax
c001d68e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d694:	e8 b3 f0 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d699:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d69e:	50                   	push   eax
c001d69f:	6a 05                	push   0x5
c001d6a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6a8:	50                   	push   eax
c001d6a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6af:	e8 98 f0 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6b4:	83 c4 20             	add    esp,0x20
c001d6b7:	89 f8                	mov    eax,edi
c001d6b9:	3c 02                	cmp    al,0x2
c001d6bb:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d6c0:	75 06                	jne    c001d6c8 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d6c2:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d6c6:	75 40                	jne    c001d708 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d6c8:	89 f8                	mov    eax,edi
c001d6ca:	3c 02                	cmp    al,0x2
c001d6cc:	0f 95 c1             	setne  cl
c001d6cf:	74 0b                	je     c001d6dc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d6d1:	b8 30 00 00 00       	mov    eax,0x30
c001d6d6:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d6da:	75 31                	jne    c001d70d <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d6dc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d6df:	83 f2 01             	xor    edx,0x1
c001d6e2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d6e7:	74 09                	je     c001d6f2 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d6e9:	b8 24 00 00 00       	mov    eax,0x24
c001d6ee:	84 d2                	test   dl,dl
c001d6f0:	75 1b                	jne    c001d70d <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d6f2:	84 c9                	test   cl,cl
c001d6f4:	0f 84 7b fe ff ff    	je     c001d575 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d6fa:	b8 20 00 00 00       	mov    eax,0x20
c001d6ff:	84 d2                	test   dl,dl
c001d701:	75 0a                	jne    c001d70d <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d703:	e9 6d fe ff ff       	jmp    c001d575 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d708:	b8 34 00 00 00       	mov    eax,0x34
c001d70d:	50                   	push   eax
c001d70e:	6a 07                	push   0x7
c001d710:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d717:	50                   	push   eax
c001d718:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d71e:	e8 29 f0 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d723:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d727:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d72b:	83 c4 10             	add    esp,0x10
c001d72e:	85 f6                	test   esi,esi
c001d730:	0f 84 a9 00 00 00    	je     c001d7df <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d736:	50                   	push   eax
c001d737:	6a 01                	push   0x1
c001d739:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d740:	50                   	push   eax
c001d741:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d747:	e8 b6 fb ff ff       	call   c001d302 <IDE::polling(unsigned char, unsigned int)>
c001d74c:	83 c4 10             	add    esp,0x10
c001d74f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d755:	84 c0                	test   al,al
c001d757:	74 1d                	je     c001d776 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d759:	0f b6 f0             	movzx  esi,al
c001d75c:	56                   	push   esi
c001d75d:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d764:	0f b6 d2             	movzx  edx,dl
c001d767:	50                   	push   eax
c001d768:	52                   	push   edx
c001d769:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d76f:	e8 f8 f9 ff ff       	call   c001d16c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d774:	eb 7f                	jmp    c001d7f5 <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d776:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d77b:	74 41                	je     c001d7be <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d77d:	31 c9                	xor    ecx,ecx
c001d77f:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d783:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d787:	50                   	push   eax
c001d788:	50                   	push   eax
c001d789:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d790:	50                   	push   eax
c001d791:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d797:	e8 9e ef ff ff       	call   c001c73a <IDE::getBase(unsigned char)>
c001d79c:	89 c2                	mov    edx,eax
c001d79e:	89 e8                	mov    eax,ebp
c001d7a0:	66 ef                	out    dx,ax
c001d7a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7a6:	83 c4 10             	add    esp,0x10
c001d7a9:	41                   	inc    ecx
c001d7aa:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d7b0:	75 cd                	jne    c001d77f <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d7b2:	4e                   	dec    esi
c001d7b3:	81 c7 00 02 00 00    	add    edi,0x200
c001d7b9:	e9 70 ff ff ff       	jmp    c001d72e <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d7be:	51                   	push   ecx
c001d7bf:	51                   	push   ecx
c001d7c0:	0f b6 d2             	movzx  edx,dl
c001d7c3:	52                   	push   edx
c001d7c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7ca:	e8 6b ef ff ff       	call   c001c73a <IDE::getBase(unsigned char)>
c001d7cf:	b9 00 01 00 00       	mov    ecx,0x100
c001d7d4:	89 c2                	mov    edx,eax
c001d7d6:	fc                   	cld    
c001d7d7:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d7da:	83 c4 10             	add    esp,0x10
c001d7dd:	eb d3                	jmp    c001d7b2 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d7df:	31 f6                	xor    esi,esi
c001d7e1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d7e5:	74 11                	je     c001d7f8 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d7e7:	50                   	push   eax
c001d7e8:	50                   	push   eax
c001d7e9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d7ee:	50                   	push   eax
c001d7ef:	53                   	push   ebx
c001d7f0:	e8 d1 fb ff ff       	call   c001d3c6 <ATA::flush(bool)>
c001d7f5:	83 c4 10             	add    esp,0x10
c001d7f8:	83 c4 2c             	add    esp,0x2c
c001d7fb:	89 f0                	mov    eax,esi
c001d7fd:	5b                   	pop    ebx
c001d7fe:	5e                   	pop    esi
c001d7ff:	5f                   	pop    edi
c001d800:	5d                   	pop    ebp
c001d801:	c3                   	ret    

c001d802 <ATA::read(unsigned long long, int, void*)>:
c001d802:	57                   	push   edi
c001d803:	b8 04 00 00 00       	mov    eax,0x4
c001d808:	56                   	push   esi
c001d809:	53                   	push   ebx
c001d80a:	83 ec 10             	sub    esp,0x10
c001d80d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d811:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d815:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d819:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d81d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d820:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d826:	77 3b                	ja     c001d863 <ATA::read(unsigned long long, int, void*)+0x61>
c001d828:	b8 06 00 00 00       	mov    eax,0x6
c001d82d:	85 d2                	test   edx,edx
c001d82f:	74 32                	je     c001d863 <ATA::read(unsigned long long, int, void*)+0x61>
c001d831:	50                   	push   eax
c001d832:	50                   	push   eax
c001d833:	6a 00                	push   0x0
c001d835:	52                   	push   edx
c001d836:	53                   	push   ebx
c001d837:	57                   	push   edi
c001d838:	56                   	push   esi
c001d839:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d83d:	e8 1e fc ff ff       	call   c001d460 <ATA::access(unsigned long long, int, void*, bool)>
c001d842:	83 c4 20             	add    esp,0x20
c001d845:	85 c0                	test   eax,eax
c001d847:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d84b:	75 11                	jne    c001d85e <ATA::read(unsigned long long, int, void*)+0x5c>
c001d84d:	01 1d c4 62 02 c0    	add    DWORD PTR ds:0xc00262c4,ebx
c001d853:	e8 84 f7 fe ff       	call   c000cfdc <VgaText::updateDiskUsage()>
c001d858:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d85c:	eb 05                	jmp    c001d863 <ATA::read(unsigned long long, int, void*)+0x61>
c001d85e:	b8 01 00 00 00       	mov    eax,0x1
c001d863:	83 c4 10             	add    esp,0x10
c001d866:	5b                   	pop    ebx
c001d867:	5e                   	pop    esi
c001d868:	5f                   	pop    edi
c001d869:	c3                   	ret    

c001d86a <ATA::write(unsigned long long, int, void*)>:
c001d86a:	57                   	push   edi
c001d86b:	b8 04 00 00 00       	mov    eax,0x4
c001d870:	56                   	push   esi
c001d871:	53                   	push   ebx
c001d872:	83 ec 10             	sub    esp,0x10
c001d875:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d879:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d87d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d881:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d885:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d888:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d88e:	77 3b                	ja     c001d8cb <ATA::write(unsigned long long, int, void*)+0x61>
c001d890:	b8 06 00 00 00       	mov    eax,0x6
c001d895:	85 d2                	test   edx,edx
c001d897:	74 32                	je     c001d8cb <ATA::write(unsigned long long, int, void*)+0x61>
c001d899:	50                   	push   eax
c001d89a:	50                   	push   eax
c001d89b:	6a 01                	push   0x1
c001d89d:	52                   	push   edx
c001d89e:	53                   	push   ebx
c001d89f:	57                   	push   edi
c001d8a0:	56                   	push   esi
c001d8a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8a5:	e8 b6 fb ff ff       	call   c001d460 <ATA::access(unsigned long long, int, void*, bool)>
c001d8aa:	83 c4 20             	add    esp,0x20
c001d8ad:	85 c0                	test   eax,eax
c001d8af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8b3:	75 11                	jne    c001d8c6 <ATA::write(unsigned long long, int, void*)+0x5c>
c001d8b5:	01 1d c0 62 02 c0    	add    DWORD PTR ds:0xc00262c0,ebx
c001d8bb:	e8 1c f7 fe ff       	call   c000cfdc <VgaText::updateDiskUsage()>
c001d8c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8c4:	eb 05                	jmp    c001d8cb <ATA::write(unsigned long long, int, void*)+0x61>
c001d8c6:	b8 01 00 00 00       	mov    eax,0x1
c001d8cb:	83 c4 10             	add    esp,0x10
c001d8ce:	5b                   	pop    ebx
c001d8cf:	5e                   	pop    esi
c001d8d0:	5f                   	pop    edi
c001d8d1:	c3                   	ret    

c001d8d2 <ATA::detectCHS()>:
c001d8d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d8d6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d8dc:	c1 e0 06             	shl    eax,0x6
c001d8df:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d8e5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d8ef:	c7 44 24 04 43 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023543
c001d8f7:	e9 10 80 ff ff       	jmp    c001590c <Krnl::panic(char const*)>

c001d8fc <ATA::open(int, int, void*)>:
c001d8fc:	53                   	push   ebx
c001d8fd:	83 ec 08             	sub    esp,0x8
c001d900:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d904:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d908:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d90c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d912:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d918:	c1 e0 06             	shl    eax,0x6
c001d91b:	01 d0                	add    eax,edx
c001d91d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d924:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d92a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d931:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d93b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d941:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d948:	75 0c                	jne    c001d956 <ATA::open(int, int, void*)+0x5a>
c001d94a:	83 ec 0c             	sub    esp,0xc
c001d94d:	53                   	push   ebx
c001d94e:	e8 7f ff ff ff       	call   c001d8d2 <ATA::detectCHS()>
c001d953:	83 c4 10             	add    esp,0x10
c001d956:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d95c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d962:	c1 e0 06             	shl    eax,0x6
c001d965:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d96c:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d976:	d1 e8                	shr    eax,1
c001d978:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d97e:	6a 04                	push   0x4
c001d980:	6a 0c                	push   0xc
c001d982:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d989:	50                   	push   eax
c001d98a:	52                   	push   edx
c001d98b:	e8 bc ed ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d990:	90                   	nop
c001d991:	90                   	nop
c001d992:	6a 00                	push   0x0
c001d994:	6a 0c                	push   0xc
c001d996:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d99d:	50                   	push   eax
c001d99e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9a4:	e8 a3 ed ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9a9:	83 c4 14             	add    esp,0x14
c001d9ac:	53                   	push   ebx
c001d9ad:	e8 12 30 ff ff       	call   c00109c4 <PhysicalDisk::startCache()>
c001d9b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d9b5:	e8 e6 4f ff ff       	call   c00129a0 <createPartitionsForDisk(PhysicalDisk*)>
c001d9ba:	83 c4 18             	add    esp,0x18
c001d9bd:	31 c0                	xor    eax,eax
c001d9bf:	5b                   	pop    ebx
c001d9c0:	c3                   	ret    
c001d9c1:	90                   	nop

c001d9c2 <ATAPI::write(unsigned long long, int, void*)>:
c001d9c2:	b8 03 00 00 00       	mov    eax,0x3
c001d9c7:	c3                   	ret    

c001d9c8 <ATAPI::close(int, int, void*)>:
c001d9c8:	83 ec 0c             	sub    esp,0xc
c001d9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d9d5:	85 c0                	test   eax,eax
c001d9d7:	74 0c                	je     c001d9e5 <ATAPI::close(int, int, void*)+0x1d>
c001d9d9:	83 ec 0c             	sub    esp,0xc
c001d9dc:	8b 10                	mov    edx,DWORD PTR [eax]
c001d9de:	50                   	push   eax
c001d9df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d9e2:	83 c4 10             	add    esp,0x10
c001d9e5:	31 c0                	xor    eax,eax
c001d9e7:	83 c4 0c             	add    esp,0xc
c001d9ea:	c3                   	ret    
c001d9eb:	90                   	nop

c001d9ec <ATAPI::ATAPI()>:
c001d9ec:	83 ec 0c             	sub    esp,0xc
c001d9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9f3:	83 ec 04             	sub    esp,0x4
c001d9f6:	68 00 08 00 00       	push   0x800
c001d9fb:	68 8c 35 02 c0       	push   0xc002358c
c001da00:	50                   	push   eax
c001da01:	e8 56 2f ff ff       	call   c001095c <PhysicalDisk::PhysicalDisk(char const*, int)>
c001da06:	83 c4 10             	add    esp,0x10
c001da09:	ba cc 35 02 c0       	mov    edx,0xc00235cc
c001da0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da12:	89 10                	mov    DWORD PTR [eax],edx
c001da14:	90                   	nop
c001da15:	83 c4 0c             	add    esp,0xc
c001da18:	c3                   	ret    
c001da19:	90                   	nop

c001da1a <ATAPI::readyForCommand()>:
c001da1a:	56                   	push   esi
c001da1b:	53                   	push   ebx
c001da1c:	31 db                	xor    ebx,ebx
c001da1e:	50                   	push   eax
c001da1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da23:	50                   	push   eax
c001da24:	6a 0c                	push   0xc
c001da26:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001da2d:	50                   	push   eax
c001da2e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001da34:	e8 d3 ed ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001da39:	83 c4 10             	add    esp,0x10
c001da3c:	a8 88                	test   al,0x88
c001da3e:	74 23                	je     c001da63 <ATAPI::readyForCommand()+0x49>
c001da40:	43                   	inc    ebx
c001da41:	83 fb 63             	cmp    ebx,0x63
c001da44:	7e dd                	jle    c001da23 <ATAPI::readyForCommand()+0x9>
c001da46:	51                   	push   ecx
c001da47:	51                   	push   ecx
c001da48:	6a 00                	push   0x0
c001da4a:	68 40 42 0f 00       	push   0xf4240
c001da4f:	e8 03 b4 ff ff       	call   c0018e57 <nanoSleep(unsigned long long)>
c001da54:	83 c4 10             	add    esp,0x10
c001da57:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001da5d:	75 c4                	jne    c001da23 <ATAPI::readyForCommand()+0x9>
c001da5f:	31 c0                	xor    eax,eax
c001da61:	eb 02                	jmp    c001da65 <ATAPI::readyForCommand()+0x4b>
c001da63:	b0 01                	mov    al,0x1
c001da65:	5a                   	pop    edx
c001da66:	5b                   	pop    ebx
c001da67:	5e                   	pop    esi
c001da68:	c3                   	ret    
c001da69:	90                   	nop

c001da6a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001da6a:	55                   	push   ebp
c001da6b:	57                   	push   edi
c001da6c:	56                   	push   esi
c001da6d:	53                   	push   ebx
c001da6e:	83 ec 20             	sub    esp,0x20
c001da71:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001da75:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001da79:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da7d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001da81:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001da85:	6a 01                	push   0x1
c001da87:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001da8e:	50                   	push   eax
c001da8f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da95:	e8 c4 ee ff ff       	call   c001c95e <IDE::enableIRQs(unsigned char, bool)>
c001da9a:	5e                   	pop    esi
c001da9b:	58                   	pop    eax
c001da9c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001daa3:	50                   	push   eax
c001daa4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001daaa:	e8 77 ec ff ff       	call   c001c726 <IDE::prepareInterrupt(unsigned char)>
c001daaf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dab2:	e8 63 ff ff ff       	call   c001da1a <ATAPI::readyForCommand()>
c001dab7:	83 c4 10             	add    esp,0x10
c001daba:	84 c0                	test   al,al
c001dabc:	75 0a                	jne    c001dac8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dabe:	bb 01 00 00 00       	mov    ebx,0x1
c001dac3:	e9 57 02 00 00       	jmp    c001dd1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dac8:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001dace:	c1 e0 04             	shl    eax,0x4
c001dad1:	0f b6 c0             	movzx  eax,al
c001dad4:	50                   	push   eax
c001dad5:	6a 06                	push   0x6
c001dad7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dade:	50                   	push   eax
c001dadf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dae5:	e8 62 ec ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daea:	6a 00                	push   0x0
c001daec:	6a 01                	push   0x1
c001daee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001daf5:	50                   	push   eax
c001daf6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dafc:	e8 4b ec ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db01:	83 c4 20             	add    esp,0x20
c001db04:	0f b6 c3             	movzx  eax,bl
c001db07:	50                   	push   eax
c001db08:	6a 04                	push   0x4
c001db0a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db11:	50                   	push   eax
c001db12:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db18:	0f b6 df             	movzx  ebx,bh
c001db1b:	e8 2c ec ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db20:	53                   	push   ebx
c001db21:	6a 05                	push   0x5
c001db23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db2a:	50                   	push   eax
c001db2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db31:	e8 16 ec ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db36:	83 c4 20             	add    esp,0x20
c001db39:	68 a0 00 00 00       	push   0xa0
c001db3e:	6a 07                	push   0x7
c001db40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db47:	50                   	push   eax
c001db48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db4e:	e8 f9 eb ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db53:	83 c4 0c             	add    esp,0xc
c001db56:	6a 01                	push   0x1
c001db58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db5f:	50                   	push   eax
c001db60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db66:	e8 97 f7 ff ff       	call   c001d302 <IDE::polling(unsigned char, unsigned int)>
c001db6b:	83 c4 10             	add    esp,0x10
c001db6e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001db74:	84 c0                	test   al,al
c001db76:	74 23                	je     c001db9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001db78:	0f b6 d8             	movzx  ebx,al
c001db7b:	53                   	push   ebx
c001db7c:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001db83:	0f b6 d2             	movzx  edx,dl
c001db86:	50                   	push   eax
c001db87:	52                   	push   edx
c001db88:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db8e:	e8 d9 f5 ff ff       	call   c001d16c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001db93:	83 c4 10             	add    esp,0x10
c001db96:	e9 84 01 00 00       	jmp    c001dd1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001db9b:	53                   	push   ebx
c001db9c:	53                   	push   ebx
c001db9d:	0f b6 d2             	movzx  edx,dl
c001dba0:	52                   	push   edx
c001dba1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dba7:	e8 8e eb ff ff       	call   c001c73a <IDE::getBase(unsigned char)>
c001dbac:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dbb0:	b9 06 00 00 00       	mov    ecx,0x6
c001dbb5:	89 c2                	mov    edx,eax
c001dbb7:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dbba:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dbbe:	83 c4 10             	add    esp,0x10
c001dbc1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dbc7:	85 db                	test   ebx,ebx
c001dbc9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dbd0:	0f 84 ec 00 00 00    	je     c001dcc2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dbd6:	51                   	push   ecx
c001dbd7:	51                   	push   ecx
c001dbd8:	52                   	push   edx
c001dbd9:	50                   	push   eax
c001dbda:	e8 db ec ff ff       	call   c001c8ba <IDE::waitInterrupt(unsigned char)>
c001dbdf:	83 c4 10             	add    esp,0x10
c001dbe2:	84 c0                	test   al,al
c001dbe4:	0f 84 d4 fe ff ff    	je     c001dabe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dbea:	56                   	push   esi
c001dbeb:	56                   	push   esi
c001dbec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dbf3:	50                   	push   eax
c001dbf4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbfa:	e8 27 eb ff ff       	call   c001c726 <IDE::prepareInterrupt(unsigned char)>
c001dbff:	83 c4 0c             	add    esp,0xc
c001dc02:	6a 04                	push   0x4
c001dc04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc0b:	50                   	push   eax
c001dc0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc12:	e8 f5 eb ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001dc17:	83 c4 0c             	add    esp,0xc
c001dc1a:	6a 05                	push   0x5
c001dc1c:	89 c6                	mov    esi,eax
c001dc1e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc25:	50                   	push   eax
c001dc26:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc2c:	e8 db eb ff ff       	call   c001c80c <IDE::read(unsigned char, unsigned char)>
c001dc31:	89 f1                	mov    ecx,esi
c001dc33:	0f b6 c0             	movzx  eax,al
c001dc36:	c1 e0 08             	shl    eax,0x8
c001dc39:	0f b6 f1             	movzx  esi,cl
c001dc3c:	09 c6                	or     esi,eax
c001dc3e:	d1 fe                	sar    esi,1
c001dc40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001dc44:	83 c4 10             	add    esp,0x10
c001dc47:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001dc4c:	74 41                	je     c001dc8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001dc4e:	31 c9                	xor    ecx,ecx
c001dc50:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dc56:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dc5a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dc61:	75 0a                	jne    c001dc6d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dc63:	01 c9                	add    ecx,ecx
c001dc65:	01 cd                	add    ebp,ecx
c001dc67:	4b                   	dec    ebx
c001dc68:	e9 54 ff ff ff       	jmp    c001dbc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dc6d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001dc72:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dc76:	51                   	push   ecx
c001dc77:	51                   	push   ecx
c001dc78:	52                   	push   edx
c001dc79:	50                   	push   eax
c001dc7a:	e8 bb ea ff ff       	call   c001c73a <IDE::getBase(unsigned char)>
c001dc7f:	89 c2                	mov    edx,eax
c001dc81:	89 f0                	mov    eax,esi
c001dc83:	66 ef                	out    dx,ax
c001dc85:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dc89:	83 c4 10             	add    esp,0x10
c001dc8c:	41                   	inc    ecx
c001dc8d:	eb c1                	jmp    c001dc50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001dc8f:	31 f6                	xor    esi,esi
c001dc91:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dc97:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001dc9b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dca2:	75 06                	jne    c001dcaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001dca4:	01 f6                	add    esi,esi
c001dca6:	01 f5                	add    ebp,esi
c001dca8:	eb bd                	jmp    c001dc67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001dcaa:	51                   	push   ecx
c001dcab:	51                   	push   ecx
c001dcac:	52                   	push   edx
c001dcad:	50                   	push   eax
c001dcae:	e8 87 ea ff ff       	call   c001c73a <IDE::getBase(unsigned char)>
c001dcb3:	89 c2                	mov    edx,eax
c001dcb5:	66 ed                	in     ax,dx
c001dcb7:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001dcbc:	83 c4 10             	add    esp,0x10
c001dcbf:	46                   	inc    esi
c001dcc0:	eb cf                	jmp    c001dc91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001dcc2:	51                   	push   ecx
c001dcc3:	51                   	push   ecx
c001dcc4:	52                   	push   edx
c001dcc5:	50                   	push   eax
c001dcc6:	e8 ef eb ff ff       	call   c001c8ba <IDE::waitInterrupt(unsigned char)>
c001dccb:	83 c4 10             	add    esp,0x10
c001dcce:	84 c0                	test   al,al
c001dcd0:	0f 84 e8 fd ff ff    	je     c001dabe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dcd6:	52                   	push   edx
c001dcd7:	bb a0 86 01 00       	mov    ebx,0x186a0
c001dcdc:	52                   	push   edx
c001dcdd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dce4:	50                   	push   eax
c001dce5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dceb:	e8 36 ea ff ff       	call   c001c726 <IDE::prepareInterrupt(unsigned char)>
c001dcf0:	83 c4 10             	add    esp,0x10
c001dcf3:	50                   	push   eax
c001dcf4:	50                   	push   eax
c001dcf5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcfc:	50                   	push   eax
c001dcfd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd03:	e8 32 ea ff ff       	call   c001c73a <IDE::getBase(unsigned char)>
c001dd08:	8d 50 07             	lea    edx,[eax+0x7]
c001dd0b:	ec                   	in     al,dx
c001dd0c:	83 c4 10             	add    esp,0x10
c001dd0f:	a8 88                	test   al,0x88
c001dd11:	74 0a                	je     c001dd1d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001dd13:	4b                   	dec    ebx
c001dd14:	75 dd                	jne    c001dcf3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dd16:	bb 02 00 00 00       	mov    ebx,0x2
c001dd1b:	eb 02                	jmp    c001dd1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd1d:	31 db                	xor    ebx,ebx
c001dd1f:	83 c4 1c             	add    esp,0x1c
c001dd22:	89 d8                	mov    eax,ebx
c001dd24:	5b                   	pop    ebx
c001dd25:	5e                   	pop    esi
c001dd26:	5f                   	pop    edi
c001dd27:	5d                   	pop    ebp
c001dd28:	c3                   	ret    
c001dd29:	90                   	nop

c001dd2a <ATAPI::diskRemoved()>:
c001dd2a:	83 ec 18             	sub    esp,0x18
c001dd2d:	68 97 35 02 c0       	push   0xc0023597
c001dd32:	e8 0a 14 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001dd37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd3b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001dd42:	83 c4 1c             	add    esp,0x1c
c001dd45:	c3                   	ret    

c001dd46 <ATAPI::eject()>:
c001dd46:	57                   	push   edi
c001dd47:	b9 03 00 00 00       	mov    ecx,0x3
c001dd4c:	53                   	push   ebx
c001dd4d:	83 ec 14             	sub    esp,0x14
c001dd50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dd54:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dd58:	fc                   	cld    
c001dd59:	31 c0                	xor    eax,eax
c001dd5b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dd5d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dd62:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dd67:	50                   	push   eax
c001dd68:	50                   	push   eax
c001dd69:	6a 00                	push   0x0
c001dd6b:	6a 00                	push   0x0
c001dd6d:	6a 00                	push   0x0
c001dd6f:	6a 02                	push   0x2
c001dd71:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dd75:	50                   	push   eax
c001dd76:	53                   	push   ebx
c001dd77:	e8 ee fc ff ff       	call   c001da6a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dd7c:	83 c4 14             	add    esp,0x14
c001dd7f:	53                   	push   ebx
c001dd80:	e8 a5 ff ff ff       	call   c001dd2a <ATAPI::diskRemoved()>
c001dd85:	83 c4 24             	add    esp,0x24
c001dd88:	5b                   	pop    ebx
c001dd89:	5f                   	pop    edi
c001dd8a:	c3                   	ret    
c001dd8b:	90                   	nop

c001dd8c <ATAPI::diskInserted()>:
c001dd8c:	53                   	push   ebx
c001dd8d:	83 ec 14             	sub    esp,0x14
c001dd90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dd94:	68 ad 35 02 c0       	push   0xc00235ad
c001dd99:	e8 a3 13 ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001dd9e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001dda5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dda8:	e8 17 2c ff ff       	call   c00109c4 <PhysicalDisk::startCache()>
c001ddad:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ddb1:	83 c4 18             	add    esp,0x18
c001ddb4:	5b                   	pop    ebx
c001ddb5:	e9 e6 4b ff ff       	jmp    c00129a0 <createPartitionsForDisk(PhysicalDisk*)>

c001ddba <ATAPI::detectMedia()>:
c001ddba:	56                   	push   esi
c001ddbb:	53                   	push   ebx
c001ddbc:	83 ec 28             	sub    esp,0x28
c001ddbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ddc3:	6a 0c                	push   0xc
c001ddc5:	6a 00                	push   0x0
c001ddc7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ddcb:	56                   	push   esi
c001ddcc:	e8 e9 28 fe ff       	call   c00006ba <memset>
c001ddd1:	58                   	pop    eax
c001ddd2:	5a                   	pop    edx
c001ddd3:	6a 00                	push   0x0
c001ddd5:	6a 00                	push   0x0
c001ddd7:	6a 00                	push   0x0
c001ddd9:	6a 00                	push   0x0
c001dddb:	56                   	push   esi
c001dddc:	53                   	push   ebx
c001dddd:	e8 88 fc ff ff       	call   c001da6a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dde2:	83 c4 1c             	add    esp,0x1c
c001dde5:	6a 0c                	push   0xc
c001dde7:	6a 00                	push   0x0
c001dde9:	56                   	push   esi
c001ddea:	e8 cb 28 fe ff       	call   c00006ba <memset>
c001ddef:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ddf4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ddf9:	59                   	pop    ecx
c001ddfa:	58                   	pop    eax
c001ddfb:	6a 01                	push   0x1
c001ddfd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001de01:	50                   	push   eax
c001de02:	6a 00                	push   0x0
c001de04:	6a 12                	push   0x12
c001de06:	56                   	push   esi
c001de07:	53                   	push   ebx
c001de08:	e8 5d fc ff ff       	call   c001da6a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de0d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001de11:	83 c4 20             	add    esp,0x20
c001de14:	83 e0 7f             	and    eax,0x7f
c001de17:	3c 70                	cmp    al,0x70
c001de19:	74 15                	je     c001de30 <ATAPI::detectMedia()+0x76>
c001de1b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de22:	75 0c                	jne    c001de30 <ATAPI::detectMedia()+0x76>
c001de24:	83 ec 0c             	sub    esp,0xc
c001de27:	53                   	push   ebx
c001de28:	e8 5f ff ff ff       	call   c001dd8c <ATAPI::diskInserted()>
c001de2d:	83 c4 10             	add    esp,0x10
c001de30:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001de34:	83 e0 0f             	and    eax,0xf
c001de37:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001de3c:	75 18                	jne    c001de56 <ATAPI::detectMedia()+0x9c>
c001de3e:	3c 02                	cmp    al,0x2
c001de40:	75 14                	jne    c001de56 <ATAPI::detectMedia()+0x9c>
c001de42:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de49:	74 24                	je     c001de6f <ATAPI::detectMedia()+0xb5>
c001de4b:	83 ec 0c             	sub    esp,0xc
c001de4e:	53                   	push   ebx
c001de4f:	e8 d6 fe ff ff       	call   c001dd2a <ATAPI::diskRemoved()>
c001de54:	eb 16                	jmp    c001de6c <ATAPI::detectMedia()+0xb2>
c001de56:	84 c0                	test   al,al
c001de58:	75 15                	jne    c001de6f <ATAPI::detectMedia()+0xb5>
c001de5a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de61:	75 0c                	jne    c001de6f <ATAPI::detectMedia()+0xb5>
c001de63:	83 ec 0c             	sub    esp,0xc
c001de66:	53                   	push   ebx
c001de67:	e8 20 ff ff ff       	call   c001dd8c <ATAPI::diskInserted()>
c001de6c:	83 c4 10             	add    esp,0x10
c001de6f:	83 c4 24             	add    esp,0x24
c001de72:	5b                   	pop    ebx
c001de73:	5e                   	pop    esi
c001de74:	c3                   	ret    
c001de75:	90                   	nop

c001de76 <ATAPI::open(int, int, void*)>:
c001de76:	53                   	push   ebx
c001de77:	83 ec 08             	sub    esp,0x8
c001de7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de86:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001de8c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001de92:	c1 e0 06             	shl    eax,0x6
c001de95:	01 d0                	add    eax,edx
c001de97:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001de9e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dea4:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001deab:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001deb5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001debb:	6a 04                	push   0x4
c001debd:	6a 0c                	push   0xc
c001debf:	51                   	push   ecx
c001dec0:	52                   	push   edx
c001dec1:	e8 86 e8 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dec6:	90                   	nop
c001dec7:	90                   	nop
c001dec8:	6a 00                	push   0x0
c001deca:	6a 0c                	push   0xc
c001decc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ded3:	50                   	push   eax
c001ded4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001deda:	e8 6d e8 ff ff       	call   c001c74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dedf:	83 c4 14             	add    esp,0x14
c001dee2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dee9:	53                   	push   ebx
c001deea:	e8 cb fe ff ff       	call   c001ddba <ATAPI::detectMedia()>
c001deef:	83 c4 18             	add    esp,0x18
c001def2:	31 c0                	xor    eax,eax
c001def4:	5b                   	pop    ebx
c001def5:	c3                   	ret    

c001def6 <ATAPI::read(unsigned long long, int, void*)>:
c001def6:	55                   	push   ebp
c001def7:	57                   	push   edi
c001def8:	56                   	push   esi
c001def9:	53                   	push   ebx
c001defa:	83 ec 1c             	sub    esp,0x1c
c001defd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df01:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001df05:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001df09:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df10:	74 3c                	je     c001df4e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001df12:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001df16:	b9 03 00 00 00       	mov    ecx,0x3
c001df1b:	fc                   	cld    
c001df1c:	31 c0                	xor    eax,eax
c001df1e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001df20:	0f ce                	bswap  esi
c001df22:	89 e8                	mov    eax,ebp
c001df24:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001df29:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001df2d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001df31:	50                   	push   eax
c001df32:	50                   	push   eax
c001df33:	55                   	push   ebp
c001df34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df38:	c1 e5 0b             	shl    ebp,0xb
c001df3b:	6a 00                	push   0x0
c001df3d:	55                   	push   ebp
c001df3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001df42:	50                   	push   eax
c001df43:	53                   	push   ebx
c001df44:	e8 21 fb ff ff       	call   c001da6a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df49:	83 c4 20             	add    esp,0x20
c001df4c:	eb 1a                	jmp    c001df68 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001df4e:	83 ec 0c             	sub    esp,0xc
c001df51:	53                   	push   ebx
c001df52:	e8 63 fe ff ff       	call   c001ddba <ATAPI::detectMedia()>
c001df57:	83 c4 10             	add    esp,0x10
c001df5a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df61:	75 af                	jne    c001df12 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001df63:	b8 02 00 00 00       	mov    eax,0x2
c001df68:	83 c4 1c             	add    esp,0x1c
c001df6b:	5b                   	pop    ebx
c001df6c:	5e                   	pop    esi
c001df6d:	5f                   	pop    edi
c001df6e:	5d                   	pop    ebp
c001df6f:	c3                   	ret    

c001df70 <AVX::open(int, int, void*)>:
c001df70:	83 ec 0c             	sub    esp,0xc
c001df73:	e8 90 10 00 00       	call   c001f008 <avxInit>
c001df78:	b8 00 00 00 00       	mov    eax,0x0
c001df7d:	83 c4 0c             	add    esp,0xc
c001df80:	c3                   	ret    
c001df81:	90                   	nop

c001df82 <AVX::close(int, int, void*)>:
c001df82:	83 ec 0c             	sub    esp,0xc
c001df85:	e8 7f 10 00 00       	call   c001f009 <avxClose>
c001df8a:	b8 00 00 00 00       	mov    eax,0x0
c001df8f:	83 c4 0c             	add    esp,0xc
c001df92:	c3                   	ret    
c001df93:	90                   	nop

c001df94 <AVX::available()>:
c001df94:	83 ec 0c             	sub    esp,0xc
c001df97:	e8 64 10 00 00       	call   c001f000 <avxDetect>
c001df9c:	85 c0                	test   eax,eax
c001df9e:	0f 95 c0             	setne  al
c001dfa1:	83 c4 0c             	add    esp,0xc
c001dfa4:	c3                   	ret    
c001dfa5:	90                   	nop

c001dfa6 <AVX::save(void*)>:
c001dfa6:	83 ec 0c             	sub    esp,0xc
c001dfa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfad:	83 ec 0c             	sub    esp,0xc
c001dfb0:	50                   	push   eax
c001dfb1:	e8 50 10 00 00       	call   c001f006 <avxSave>
c001dfb6:	83 c4 10             	add    esp,0x10
c001dfb9:	90                   	nop
c001dfba:	83 c4 0c             	add    esp,0xc
c001dfbd:	c3                   	ret    

c001dfbe <AVX::load(void*)>:
c001dfbe:	83 ec 0c             	sub    esp,0xc
c001dfc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfc5:	83 ec 0c             	sub    esp,0xc
c001dfc8:	50                   	push   eax
c001dfc9:	e8 39 10 00 00       	call   c001f007 <avxLoad>
c001dfce:	83 c4 10             	add    esp,0x10
c001dfd1:	90                   	nop
c001dfd2:	83 c4 0c             	add    esp,0xc
c001dfd5:	c3                   	ret    

c001dfd6 <AVX::AVX()>:
c001dfd6:	83 ec 0c             	sub    esp,0xc
c001dfd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfdd:	83 ec 08             	sub    esp,0x8
c001dfe0:	68 f8 35 02 c0       	push   0xc00235f8
c001dfe5:	50                   	push   eax
c001dfe6:	e8 4f 2a ff ff       	call   c0010a3a <FPU::FPU(char const*)>
c001dfeb:	83 c4 10             	add    esp,0x10
c001dfee:	ba 08 36 02 c0       	mov    edx,0xc0023608
c001dff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff7:	89 10                	mov    DWORD PTR [eax],edx
c001dff9:	90                   	nop
c001dffa:	83 c4 0c             	add    esp,0xc
c001dffd:	c3                   	ret    

c001dffe <MMX::available()>:
c001dffe:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c001e003:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e009:	83 e0 20             	and    eax,0x20
c001e00c:	84 c0                	test   al,al
c001e00e:	0f 95 c0             	setne  al
c001e011:	c3                   	ret    

c001e012 <MMX::open(int, int, void*)>:
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	e8 62 10 00 00       	call   c001f07c <x87Init>
c001e01a:	b8 00 00 00 00       	mov    eax,0x0
c001e01f:	83 c4 0c             	add    esp,0xc
c001e022:	c3                   	ret    
c001e023:	90                   	nop

c001e024 <MMX::close(int, int, void*)>:
c001e024:	83 ec 0c             	sub    esp,0xc
c001e027:	e8 6a 10 00 00       	call   c001f096 <x87Close>
c001e02c:	b8 00 00 00 00       	mov    eax,0x0
c001e031:	83 c4 0c             	add    esp,0xc
c001e034:	c3                   	ret    
c001e035:	90                   	nop

c001e036 <MMX::save(void*)>:
c001e036:	83 ec 0c             	sub    esp,0xc
c001e039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e03d:	83 ec 0c             	sub    esp,0xc
c001e040:	50                   	push   eax
c001e041:	e8 2b 10 00 00       	call   c001f071 <x87Save>
c001e046:	83 c4 10             	add    esp,0x10
c001e049:	90                   	nop
c001e04a:	83 c4 0c             	add    esp,0xc
c001e04d:	c3                   	ret    

c001e04e <MMX::load(void*)>:
c001e04e:	83 ec 0c             	sub    esp,0xc
c001e051:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e055:	83 ec 0c             	sub    esp,0xc
c001e058:	50                   	push   eax
c001e059:	e8 19 10 00 00       	call   c001f077 <x87Load>
c001e05e:	83 c4 10             	add    esp,0x10
c001e061:	90                   	nop
c001e062:	83 c4 0c             	add    esp,0xc
c001e065:	c3                   	ret    

c001e066 <MMX::MMX()>:
c001e066:	83 ec 0c             	sub    esp,0xc
c001e069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e06d:	83 ec 08             	sub    esp,0x8
c001e070:	68 38 36 02 c0       	push   0xc0023638
c001e075:	50                   	push   eax
c001e076:	e8 bf 29 ff ff       	call   c0010a3a <FPU::FPU(char const*)>
c001e07b:	83 c4 10             	add    esp,0x10
c001e07e:	ba 48 36 02 c0       	mov    edx,0xc0023648
c001e083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e087:	89 10                	mov    DWORD PTR [eax],edx
c001e089:	90                   	nop
c001e08a:	83 c4 0c             	add    esp,0xc
c001e08d:	c3                   	ret    

c001e08e <SSE::open(int, int, void*)>:
c001e08e:	83 ec 0c             	sub    esp,0xc
c001e091:	e8 a1 0f 00 00       	call   c001f037 <sseInit>
c001e096:	b8 00 00 00 00       	mov    eax,0x0
c001e09b:	83 c4 0c             	add    esp,0xc
c001e09e:	c3                   	ret    
c001e09f:	90                   	nop

c001e0a0 <SSE::close(int, int, void*)>:
c001e0a0:	83 ec 0c             	sub    esp,0xc
c001e0a3:	e8 9f 0f 00 00       	call   c001f047 <sseClose>
c001e0a8:	b8 00 00 00 00       	mov    eax,0x0
c001e0ad:	83 c4 0c             	add    esp,0xc
c001e0b0:	c3                   	ret    
c001e0b1:	90                   	nop

c001e0b2 <SSE::available()>:
c001e0b2:	83 ec 1c             	sub    esp,0x1c
c001e0b5:	e8 56 0f 00 00       	call   c001f010 <sseDetect>
c001e0ba:	85 c0                	test   eax,eax
c001e0bc:	0f 95 c0             	setne  al
c001e0bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e0c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e0c7:	83 c4 1c             	add    esp,0x1c
c001e0ca:	c3                   	ret    
c001e0cb:	90                   	nop

c001e0cc <SSE::save(void*)>:
c001e0cc:	83 ec 0c             	sub    esp,0xc
c001e0cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0d3:	83 ec 0c             	sub    esp,0xc
c001e0d6:	50                   	push   eax
c001e0d7:	e8 4f 0f 00 00       	call   c001f02b <sseSave>
c001e0dc:	83 c4 10             	add    esp,0x10
c001e0df:	90                   	nop
c001e0e0:	83 c4 0c             	add    esp,0xc
c001e0e3:	c3                   	ret    

c001e0e4 <SSE::load(void*)>:
c001e0e4:	83 ec 0c             	sub    esp,0xc
c001e0e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0eb:	83 ec 0c             	sub    esp,0xc
c001e0ee:	50                   	push   eax
c001e0ef:	e8 3d 0f 00 00       	call   c001f031 <sseLoad>
c001e0f4:	83 c4 10             	add    esp,0x10
c001e0f7:	90                   	nop
c001e0f8:	83 c4 0c             	add    esp,0xc
c001e0fb:	c3                   	ret    

c001e0fc <SSE::SSE()>:
c001e0fc:	83 ec 0c             	sub    esp,0xc
c001e0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e103:	83 ec 08             	sub    esp,0x8
c001e106:	68 78 36 02 c0       	push   0xc0023678
c001e10b:	50                   	push   eax
c001e10c:	e8 29 29 ff ff       	call   c0010a3a <FPU::FPU(char const*)>
c001e111:	83 c4 10             	add    esp,0x10
c001e114:	ba 88 36 02 c0       	mov    edx,0xc0023688
c001e119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e11d:	89 10                	mov    DWORD PTR [eax],edx
c001e11f:	90                   	nop
c001e120:	83 c4 0c             	add    esp,0xc
c001e123:	c3                   	ret    

c001e124 <x87::open(int, int, void*)>:
c001e124:	83 ec 0c             	sub    esp,0xc
c001e127:	e8 50 0f 00 00       	call   c001f07c <x87Init>
c001e12c:	b8 00 00 00 00       	mov    eax,0x0
c001e131:	83 c4 0c             	add    esp,0xc
c001e134:	c3                   	ret    
c001e135:	90                   	nop

c001e136 <x87::close(int, int, void*)>:
c001e136:	83 ec 0c             	sub    esp,0xc
c001e139:	e8 58 0f 00 00       	call   c001f096 <x87Close>
c001e13e:	b8 00 00 00 00       	mov    eax,0x0
c001e143:	83 c4 0c             	add    esp,0xc
c001e146:	c3                   	ret    
c001e147:	90                   	nop

c001e148 <x87::available()>:
c001e148:	83 ec 0c             	sub    esp,0xc
c001e14b:	e8 06 0f 00 00       	call   c001f056 <x87Detect>
c001e150:	85 c0                	test   eax,eax
c001e152:	0f 95 c0             	setne  al
c001e155:	83 c4 0c             	add    esp,0xc
c001e158:	c3                   	ret    
c001e159:	90                   	nop

c001e15a <x87::save(void*)>:
c001e15a:	83 ec 0c             	sub    esp,0xc
c001e15d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e161:	83 ec 0c             	sub    esp,0xc
c001e164:	50                   	push   eax
c001e165:	e8 07 0f 00 00       	call   c001f071 <x87Save>
c001e16a:	83 c4 10             	add    esp,0x10
c001e16d:	90                   	nop
c001e16e:	83 c4 0c             	add    esp,0xc
c001e171:	c3                   	ret    

c001e172 <x87::load(void*)>:
c001e172:	83 ec 0c             	sub    esp,0xc
c001e175:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e179:	83 ec 0c             	sub    esp,0xc
c001e17c:	50                   	push   eax
c001e17d:	e8 f5 0e 00 00       	call   c001f077 <x87Load>
c001e182:	83 c4 10             	add    esp,0x10
c001e185:	90                   	nop
c001e186:	83 c4 0c             	add    esp,0xc
c001e189:	c3                   	ret    

c001e18a <x87::x87()>:
c001e18a:	83 ec 0c             	sub    esp,0xc
c001e18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e191:	83 ec 08             	sub    esp,0x8
c001e194:	68 b8 36 02 c0       	push   0xc00236b8
c001e199:	50                   	push   eax
c001e19a:	e8 9b 28 ff ff       	call   c0010a3a <FPU::FPU(char const*)>
c001e19f:	83 c4 10             	add    esp,0x10
c001e1a2:	ba c8 36 02 c0       	mov    edx,0xc00236c8
c001e1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ab:	89 10                	mov    DWORD PTR [eax],edx
c001e1ad:	90                   	nop
c001e1ae:	83 c4 0c             	add    esp,0xc
c001e1b1:	c3                   	ret    

c001e1b2 <APIC::disable()>:
c001e1b2:	90                   	nop
c001e1b3:	c3                   	ret    

c001e1b4 <APIC::close(int, int, void*)>:
c001e1b4:	55                   	push   ebp
c001e1b5:	89 e5                	mov    ebp,esp
c001e1b7:	83 ec 08             	sub    esp,0x8
c001e1ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e1bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1bf:	83 c0 3c             	add    eax,0x3c
c001e1c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e1ca:	ff d0                	call   eax
c001e1cc:	83 c4 10             	add    esp,0x10
c001e1cf:	b8 00 00 00 00       	mov    eax,0x0
c001e1d4:	c9                   	leave  
c001e1d5:	c3                   	ret    

c001e1d6 <IOAPIC::close(int, int, void*)>:
c001e1d6:	b8 00 00 00 00       	mov    eax,0x0
c001e1db:	c3                   	ret    

c001e1dc <APIC::io_wait()>:
c001e1dc:	eb 00                	jmp    c001e1de <APIC::io_wait()+0x2>
c001e1de:	eb 00                	jmp    c001e1e0 <APIC::io_wait()+0x4>
c001e1e0:	90                   	nop
c001e1e1:	c3                   	ret    

c001e1e2 <APIC::getBase()>:
c001e1e2:	55                   	push   ebp
c001e1e3:	89 e5                	mov    ebp,esp
c001e1e5:	83 ec 18             	sub    esp,0x18
c001e1e8:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c001e1ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e1f3:	83 e0 08             	and    eax,0x8
c001e1f6:	84 c0                	test   al,al
c001e1f8:	75 07                	jne    c001e201 <APIC::getBase()+0x1f>
c001e1fa:	b8 00 00 00 00       	mov    eax,0x0
c001e1ff:	eb 21                	jmp    c001e222 <APIC::getBase()+0x40>
c001e201:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c001e206:	83 ec 08             	sub    esp,0x8
c001e209:	6a 1b                	push   0x1b
c001e20b:	50                   	push   eax
c001e20c:	e8 63 d3 fe ff       	call   c000b574 <Computer::rdmsr(unsigned int)>
c001e211:	83 c4 10             	add    esp,0x10
c001e214:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e217:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e21a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e21d:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e222:	c9                   	leave  
c001e223:	c3                   	ret    

c001e224 <APIC::eoi(unsigned char)>:
c001e224:	55                   	push   ebp
c001e225:	89 e5                	mov    ebp,esp
c001e227:	83 ec 28             	sub    esp,0x28
c001e22a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e22d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e230:	83 ec 0c             	sub    esp,0xc
c001e233:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e236:	e8 a7 ff ff ff       	call   c001e1e2 <APIC::getBase()>
c001e23b:	83 c4 10             	add    esp,0x10
c001e23e:	05 b0 00 00 00       	add    eax,0xb0
c001e243:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e246:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e249:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e24f:	90                   	nop
c001e250:	c9                   	leave  
c001e251:	c3                   	ret    

c001e252 <APIC::open(int, int, void*)>:
c001e252:	55                   	push   ebp
c001e253:	89 e5                	mov    ebp,esp
c001e255:	57                   	push   edi
c001e256:	56                   	push   esi
c001e257:	53                   	push   ebx
c001e258:	83 ec 1c             	sub    esp,0x1c
c001e25b:	83 ec 0c             	sub    esp,0xc
c001e25e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e261:	e8 7c ff ff ff       	call   c001e1e2 <APIC::getBase()>
c001e266:	83 c4 10             	add    esp,0x10
c001e269:	05 f0 00 00 00       	add    eax,0xf0
c001e26e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e271:	83 ec 0c             	sub    esp,0xc
c001e274:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e277:	e8 66 ff ff ff       	call   c001e1e2 <APIC::getBase()>
c001e27c:	83 c4 10             	add    esp,0x10
c001e27f:	89 c2                	mov    edx,eax
c001e281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e284:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e28a:	89 c7                	mov    edi,eax
c001e28c:	81 e7 ff 00 00 00    	and    edi,0xff
c001e292:	89 d0                	mov    eax,edx
c001e294:	ba 00 00 00 00       	mov    edx,0x0
c001e299:	89 c1                	mov    ecx,eax
c001e29b:	80 e5 ff             	and    ch,0xff
c001e29e:	89 cb                	mov    ebx,ecx
c001e2a0:	89 d0                	mov    eax,edx
c001e2a2:	25 ff 00 00 00       	and    eax,0xff
c001e2a7:	89 c6                	mov    esi,eax
c001e2a9:	89 d8                	mov    eax,ebx
c001e2ab:	89 f2                	mov    edx,esi
c001e2ad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e2b0:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e2b3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e2b7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e2bb:	83 e0 00             	and    eax,0x0
c001e2be:	09 d0                	or     eax,edx
c001e2c0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e2c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e2cd:	8d 50 01             	lea    edx,[eax+0x1]
c001e2d0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e2d3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e2d9:	31 d2                	xor    edx,edx
c001e2db:	88 c2                	mov    dl,al
c001e2dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2e0:	83 c2 08             	add    edx,0x8
c001e2e3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e2e7:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e2ed:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e2f3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e2f7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e2fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2fc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e2ff:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e306:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e309:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e30c:	89 10                	mov    DWORD PTR [eax],edx
c001e30e:	b8 00 00 00 00       	mov    eax,0x0
c001e313:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e316:	5b                   	pop    ebx
c001e317:	5e                   	pop    esi
c001e318:	5f                   	pop    edi
c001e319:	5d                   	pop    ebp
c001e31a:	c3                   	ret    
c001e31b:	90                   	nop

c001e31c <IOAPIC::IOAPIC()>:
c001e31c:	83 ec 0c             	sub    esp,0xc
c001e31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e323:	83 ec 08             	sub    esp,0x8
c001e326:	68 f8 36 02 c0       	push   0xc00236f8
c001e32b:	50                   	push   eax
c001e32c:	e8 15 24 ff ff       	call   c0010746 <Device::Device(char const*)>
c001e331:	83 c4 10             	add    esp,0x10
c001e334:	ba 20 38 02 c0       	mov    edx,0xc0023820
c001e339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33d:	89 10                	mov    DWORD PTR [eax],edx
c001e33f:	90                   	nop
c001e340:	83 c4 0c             	add    esp,0xc
c001e343:	c3                   	ret    

c001e344 <APIC::APIC()>:
c001e344:	53                   	push   ebx
c001e345:	83 ec 18             	sub    esp,0x18
c001e348:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e34c:	83 ec 08             	sub    esp,0x8
c001e34f:	68 00 37 02 c0       	push   0xc0023700
c001e354:	50                   	push   eax
c001e355:	e8 3a 2b ff ff       	call   c0010e94 <InterruptController::InterruptController(char const*)>
c001e35a:	83 c4 10             	add    esp,0x10
c001e35d:	ba d8 37 02 c0       	mov    edx,0xc00237d8
c001e362:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e366:	89 10                	mov    DWORD PTR [eax],edx
c001e368:	a0 20 63 02 c0       	mov    al,ds:0xc0026320
c001e36d:	83 f0 01             	xor    eax,0x1
c001e370:	84 c0                	test   al,al
c001e372:	0f 84 a2 00 00 00    	je     c001e41a <APIC::APIC()+0xd6>
c001e378:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e37d:	a0 d0 4d 02 c0       	mov    al,ds:0xc0024dd0
c001e382:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e386:	0f 83 87 00 00 00    	jae    c001e413 <APIC::APIC()+0xcf>
c001e38c:	83 ec 0c             	sub    esp,0xc
c001e38f:	68 68 01 00 00       	push   0x168
c001e394:	e8 73 0c ff ff       	call   c000f00c <operator new(unsigned long)>
c001e399:	83 c4 10             	add    esp,0x10
c001e39c:	89 c3                	mov    ebx,eax
c001e39e:	83 ec 0c             	sub    esp,0xc
c001e3a1:	53                   	push   ebx
c001e3a2:	e8 75 ff ff ff       	call   c001e31c <IOAPIC::IOAPIC()>
c001e3a7:	83 c4 10             	add    esp,0x10
c001e3aa:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e3ae:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e3b2:	25 ff 00 00 00       	and    eax,0xff
c001e3b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e3bb:	89 14 85 00 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d00],edx
c001e3c2:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c001e3c7:	40                   	inc    eax
c001e3c8:	a3 e0 62 02 c0       	mov    ds:0xc00262e0,eax
c001e3cd:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c001e3d2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e3d8:	83 ec 08             	sub    esp,0x8
c001e3db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e3df:	50                   	push   eax
c001e3e0:	e8 71 21 ff ff       	call   c0010556 <Device::addChild(Device*)>
c001e3e5:	83 c4 10             	add    esp,0x10
c001e3e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e3ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3ee:	83 c0 08             	add    eax,0x8
c001e3f1:	8b 10                	mov    edx,DWORD PTR [eax]
c001e3f3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e3f7:	25 ff 00 00 00       	and    eax,0xff
c001e3fc:	6a 00                	push   0x0
c001e3fe:	6a 00                	push   0x0
c001e400:	50                   	push   eax
c001e401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e405:	ff d2                	call   edx
c001e407:	83 c4 10             	add    esp,0x10
c001e40a:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e40e:	e9 6a ff ff ff       	jmp    c001e37d <APIC::APIC()+0x39>
c001e413:	c6 05 20 63 02 c0 01 	mov    BYTE PTR ds:0xc0026320,0x1
c001e41a:	90                   	nop
c001e41b:	83 c4 18             	add    esp,0x18
c001e41e:	5b                   	pop    ebx
c001e41f:	c3                   	ret    

c001e420 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e420:	55                   	push   ebp
c001e421:	89 e5                	mov    ebp,esp
c001e423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e426:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e42c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e42f:	72 1d                	jb     c001e44e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e434:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e43a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e43d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e443:	01 d0                	add    eax,edx
c001e445:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e448:	73 04                	jae    c001e44e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e44a:	b0 01                	mov    al,0x1
c001e44c:	eb 02                	jmp    c001e450 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e44e:	b0 00                	mov    al,0x0
c001e450:	5d                   	pop    ebp
c001e451:	c3                   	ret    

c001e452 <IOAPIC::read(int)>:
c001e452:	55                   	push   ebp
c001e453:	89 e5                	mov    ebp,esp
c001e455:	83 ec 10             	sub    esp,0x10
c001e458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e45b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e461:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e464:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e467:	31 d2                	xor    edx,edx
c001e469:	88 c2                	mov    dl,al
c001e46b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e46e:	89 10                	mov    DWORD PTR [eax],edx
c001e470:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e473:	83 c0 10             	add    eax,0x10
c001e476:	8b 00                	mov    eax,DWORD PTR [eax]
c001e478:	c9                   	leave  
c001e479:	c3                   	ret    

c001e47a <IOAPIC::open(int, int, void*)>:
c001e47a:	55                   	push   ebp
c001e47b:	89 e5                	mov    ebp,esp
c001e47d:	57                   	push   edi
c001e47e:	56                   	push   esi
c001e47f:	53                   	push   ebx
c001e480:	83 ec 0c             	sub    esp,0xc
c001e483:	83 ec 0c             	sub    esp,0xc
c001e486:	68 2b 37 02 c0       	push   0xc002372b
c001e48b:	e8 b1 0c ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001e490:	83 c4 10             	add    esp,0x10
c001e493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e496:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e499:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e49f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e4a8:	8b 14 85 00 4e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb200]
c001e4af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4b2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e4b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e4c1:	8b 14 85 80 4e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb180]
c001e4c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4cb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e4d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4d4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e4da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4dd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e4e3:	89 c7                	mov    edi,eax
c001e4e5:	81 e7 ff 00 00 00    	and    edi,0xff
c001e4eb:	89 d0                	mov    eax,edx
c001e4ed:	ba 00 00 00 00       	mov    edx,0x0
c001e4f2:	89 c1                	mov    ecx,eax
c001e4f4:	80 e5 ff             	and    ch,0xff
c001e4f7:	89 cb                	mov    ebx,ecx
c001e4f9:	89 d0                	mov    eax,edx
c001e4fb:	25 ff 00 00 00       	and    eax,0xff
c001e500:	89 c6                	mov    esi,eax
c001e502:	89 d8                	mov    eax,ebx
c001e504:	89 f2                	mov    edx,esi
c001e506:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e509:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e50c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e510:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e514:	83 e0 00             	and    eax,0x0
c001e517:	09 d0                	or     eax,edx
c001e519:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e51d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e520:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e526:	8d 50 01             	lea    edx,[eax+0x1]
c001e529:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e52c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e532:	31 d2                	xor    edx,edx
c001e534:	88 c2                	mov    dl,al
c001e536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e539:	83 c2 08             	add    edx,0x8
c001e53c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e540:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e546:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e54c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e550:	83 ec 08             	sub    esp,0x8
c001e553:	6a 01                	push   0x1
c001e555:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e558:	e8 f5 fe ff ff       	call   c001e452 <IOAPIC::read(int)>
c001e55d:	83 c4 10             	add    esp,0x10
c001e560:	c1 f8 10             	sar    eax,0x10
c001e563:	25 ff 00 00 00       	and    eax,0xff
c001e568:	8d 50 01             	lea    edx,[eax+0x1]
c001e56b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e56e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e574:	b8 00 00 00 00       	mov    eax,0x0
c001e579:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e57c:	5b                   	pop    ebx
c001e57d:	5e                   	pop    esi
c001e57e:	5f                   	pop    edi
c001e57f:	5d                   	pop    ebp
c001e580:	c3                   	ret    
c001e581:	90                   	nop

c001e582 <IOAPIC::write(int, int)>:
c001e582:	55                   	push   ebp
c001e583:	89 e5                	mov    ebp,esp
c001e585:	83 ec 10             	sub    esp,0x10
c001e588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e58b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e591:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e594:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e597:	31 d2                	xor    edx,edx
c001e599:	88 c2                	mov    dl,al
c001e59b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e59e:	89 10                	mov    DWORD PTR [eax],edx
c001e5a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5a3:	8d 50 10             	lea    edx,[eax+0x10]
c001e5a6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e5a9:	89 02                	mov    DWORD PTR [edx],eax
c001e5ab:	90                   	nop
c001e5ac:	c9                   	leave  
c001e5ad:	c3                   	ret    

c001e5ae <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e5ae:	55                   	push   ebp
c001e5af:	89 e5                	mov    ebp,esp
c001e5b1:	83 ec 20             	sub    esp,0x20
c001e5b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5b7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e5ba:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e5bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e5c0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e5c3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e5c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e5c9:	88 d0                	mov    al,dl
c001e5cb:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e5ce:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e5d1:	25 ff 00 00 00       	and    eax,0xff
c001e5d6:	83 c0 08             	add    eax,0x8
c001e5d9:	01 c0                	add    eax,eax
c001e5db:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5de:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e5e1:	25 ff 00 00 00       	and    eax,0xff
c001e5e6:	83 c0 08             	add    eax,0x8
c001e5e9:	01 c0                	add    eax,eax
c001e5eb:	40                   	inc    eax
c001e5ec:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e5ef:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e5f2:	50                   	push   eax
c001e5f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e5f6:	e8 57 fe ff ff       	call   c001e452 <IOAPIC::read(int)>
c001e5fb:	83 c4 08             	add    esp,0x8
c001e5fe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e601:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e608:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e60b:	c1 e0 18             	shl    eax,0x18
c001e60e:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e611:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e614:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e617:	52                   	push   edx
c001e618:	50                   	push   eax
c001e619:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e61c:	e8 61 ff ff ff       	call   c001e582 <IOAPIC::write(int, int)>
c001e621:	83 c4 0c             	add    esp,0xc
c001e624:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e627:	50                   	push   eax
c001e628:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e62b:	e8 22 fe ff ff       	call   c001e452 <IOAPIC::read(int)>
c001e630:	83 c4 08             	add    esp,0x8
c001e633:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e636:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e63d:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e644:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e64b:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e652:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e655:	25 ff 00 00 00       	and    eax,0xff
c001e65a:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e65d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e660:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e663:	52                   	push   edx
c001e664:	50                   	push   eax
c001e665:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e668:	e8 15 ff ff ff       	call   c001e582 <IOAPIC::write(int, int)>
c001e66d:	83 c4 0c             	add    esp,0xc
c001e670:	90                   	nop
c001e671:	c9                   	leave  
c001e672:	c3                   	ret    
c001e673:	90                   	nop

c001e674 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e674:	55                   	push   ebp
c001e675:	89 e5                	mov    ebp,esp
c001e677:	56                   	push   esi
c001e678:	53                   	push   ebx
c001e679:	83 ec 20             	sub    esp,0x20
c001e67c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e67f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e682:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e686:	74 2a                	je     c001e6b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e688:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e68c:	7f 14                	jg     c001e6a2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e68e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e691:	05 80 3c 02 c0       	add    eax,0xc0023c80
c001e696:	8a 00                	mov    al,BYTE PTR [eax]
c001e698:	25 ff 00 00 00       	and    eax,0xff
c001e69d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e6a0:	eb 10                	jmp    c001e6b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e6a2:	83 ec 0c             	sub    esp,0xc
c001e6a5:	68 3c 37 02 c0       	push   0xc002373c
c001e6aa:	e8 5d 72 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001e6af:	83 c4 10             	add    esp,0x10
c001e6b2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e6b6:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c001e6bb:	83 ec 08             	sub    esp,0x8
c001e6be:	50                   	push   eax
c001e6bf:	68 74 37 02 c0       	push   0xc0023774
c001e6c4:	e8 78 0a ff ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e6d3:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c001e6d8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e6db:	7d 64                	jge    c001e741 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e6dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6e0:	8b 04 85 00 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9d00]
c001e6e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e6ea:	83 ec 08             	sub    esp,0x8
c001e6ed:	52                   	push   edx
c001e6ee:	50                   	push   eax
c001e6ef:	e8 2c fd ff ff       	call   c001e420 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e6f4:	83 c4 10             	add    esp,0x10
c001e6f7:	84 c0                	test   al,al
c001e6f9:	74 41                	je     c001e73c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e6fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6fe:	8b 1c 85 00 63 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9d00]
c001e705:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e708:	83 c0 20             	add    eax,0x20
c001e70b:	89 c6                	mov    esi,eax
c001e70d:	81 e6 ff 00 00 00    	and    esi,0xff
c001e713:	e8 85 60 ff ff       	call   c001479d <getCPUNumber()>
c001e718:	89 c2                	mov    edx,eax
c001e71a:	c1 fa 1f             	sar    edx,0x1f
c001e71d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e720:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e726:	83 ec 0c             	sub    esp,0xc
c001e729:	56                   	push   esi
c001e72a:	52                   	push   edx
c001e72b:	50                   	push   eax
c001e72c:	51                   	push   ecx
c001e72d:	53                   	push   ebx
c001e72e:	e8 7b fe ff ff       	call   c001e5ae <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e733:	83 c4 20             	add    esp,0x20
c001e736:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e73a:	eb 05                	jmp    c001e741 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e73c:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e73f:	eb 92                	jmp    c001e6d3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e741:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e744:	83 f0 01             	xor    eax,0x1
c001e747:	84 c0                	test   al,al
c001e749:	74 10                	je     c001e75b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e74b:	83 ec 0c             	sub    esp,0xc
c001e74e:	68 8b 37 02 c0       	push   0xc002378b
c001e753:	e8 b4 71 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001e758:	83 c4 10             	add    esp,0x10
c001e75b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e75f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e766:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e76a:	7f 65                	jg     c001e7d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e76c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e76f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e772:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e779:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e77c:	01 ca                	add    edx,ecx
c001e77e:	83 c2 54             	add    edx,0x54
c001e781:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e785:	85 c0                	test   eax,eax
c001e787:	75 43                	jne    c001e7cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e78c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e78f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e796:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e799:	01 ca                	add    edx,ecx
c001e79b:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e79e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e7a1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7ab:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e7b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e7b5:	01 ca                	add    edx,ecx
c001e7b7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e7bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e7c0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e7c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7c7:	83 e8 20             	sub    eax,0x20
c001e7ca:	eb 1a                	jmp    c001e7e6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e7cc:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e7cf:	eb 95                	jmp    c001e766 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e7d1:	83 ec 0c             	sub    esp,0xc
c001e7d4:	68 98 37 02 c0       	push   0xc0023798
c001e7d9:	e8 2e 71 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001e7de:	83 c4 10             	add    esp,0x10
c001e7e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e7e6:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e7e9:	5b                   	pop    ebx
c001e7ea:	5e                   	pop    esi
c001e7eb:	5d                   	pop    ebp
c001e7ec:	c3                   	ret    
c001e7ed:	90                   	nop

c001e7ee <PIC::disable()>:
c001e7ee:	55                   	push   ebp
c001e7ef:	89 e5                	mov    ebp,esp
c001e7f1:	83 ec 10             	sub    esp,0x10
c001e7f4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e7fa:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e7fe:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e801:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e805:	ee                   	out    dx,al
c001e806:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e80c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e810:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e813:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e817:	ee                   	out    dx,al
c001e818:	90                   	nop
c001e819:	c9                   	leave  
c001e81a:	c3                   	ret    
c001e81b:	90                   	nop

c001e81c <PIC::close(int, int, void*)>:
c001e81c:	55                   	push   ebp
c001e81d:	89 e5                	mov    ebp,esp
c001e81f:	83 ec 08             	sub    esp,0x8
c001e822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e825:	8b 00                	mov    eax,DWORD PTR [eax]
c001e827:	83 c0 3c             	add    eax,0x3c
c001e82a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e82c:	83 ec 0c             	sub    esp,0xc
c001e82f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e832:	ff d0                	call   eax
c001e834:	83 c4 10             	add    esp,0x10
c001e837:	b8 00 00 00 00       	mov    eax,0x0
c001e83c:	c9                   	leave  
c001e83d:	c3                   	ret    

c001e83e <PIC::PIC()>:
c001e83e:	83 ec 0c             	sub    esp,0xc
c001e841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e845:	83 ec 08             	sub    esp,0x8
c001e848:	68 44 38 02 c0       	push   0xc0023844
c001e84d:	50                   	push   eax
c001e84e:	e8 41 26 ff ff       	call   c0010e94 <InterruptController::InterruptController(char const*)>
c001e853:	83 c4 10             	add    esp,0x10
c001e856:	ba 70 38 02 c0       	mov    edx,0xc0023870
c001e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e85f:	89 10                	mov    DWORD PTR [eax],edx
c001e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e865:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e86b:	31 d2                	xor    edx,edx
c001e86d:	88 c2                	mov    dl,al
c001e86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e873:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e87e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e884:	31 d2                	xor    edx,edx
c001e886:	88 c2                	mov    dl,al
c001e888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e88c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e895:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e89b:	8d 50 01             	lea    edx,[eax+0x1]
c001e89e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8a2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e8a8:	31 d2                	xor    edx,edx
c001e8aa:	88 c2                	mov    dl,al
c001e8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e8b4:	83 e1 3f             	and    ecx,0x3f
c001e8b7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8c5:	31 d2                	xor    edx,edx
c001e8c7:	88 c2                	mov    dl,al
c001e8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8cd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8de:	31 d2                	xor    edx,edx
c001e8e0:	88 c2                	mov    dl,al
c001e8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8f5:	8d 50 01             	lea    edx,[eax+0x1]
c001e8f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8fc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e902:	31 d2                	xor    edx,edx
c001e904:	88 c2                	mov    dl,al
c001e906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e90e:	83 e1 3f             	and    ecx,0x3f
c001e911:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e915:	90                   	nop
c001e916:	83 c4 0c             	add    esp,0xc
c001e919:	c3                   	ret    

c001e91a <PIC::ioWait()>:
c001e91a:	eb 00                	jmp    c001e91c <PIC::ioWait()+0x2>
c001e91c:	eb 00                	jmp    c001e91e <PIC::ioWait()+0x4>
c001e91e:	90                   	nop
c001e91f:	c3                   	ret    

c001e920 <PIC::getIRQReg(int)>:
c001e920:	55                   	push   ebp
c001e921:	89 e5                	mov    ebp,esp
c001e923:	83 ec 10             	sub    esp,0x10
c001e926:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e929:	25 ff 00 00 00       	and    eax,0xff
c001e92e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e934:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e937:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e93a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e93e:	ee                   	out    dx,al
c001e93f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e942:	25 ff 00 00 00       	and    eax,0xff
c001e947:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e94d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e950:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e953:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e957:	ee                   	out    dx,al
c001e958:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e95e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e962:	89 c2                	mov    edx,eax
c001e964:	ec                   	in     al,dx
c001e965:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e968:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e96b:	25 ff 00 00 00       	and    eax,0xff
c001e970:	c1 e0 08             	shl    eax,0x8
c001e973:	89 c1                	mov    ecx,eax
c001e975:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e97b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e97f:	89 c2                	mov    edx,eax
c001e981:	ec                   	in     al,dx
c001e982:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e985:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e988:	25 ff 00 00 00       	and    eax,0xff
c001e98d:	09 c8                	or     eax,ecx
c001e98f:	c9                   	leave  
c001e990:	c3                   	ret    
c001e991:	90                   	nop

c001e992 <PIC::eoi(unsigned char)>:
c001e992:	55                   	push   ebp
c001e993:	89 e5                	mov    ebp,esp
c001e995:	83 ec 14             	sub    esp,0x14
c001e998:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e99b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e99e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e9a2:	75 23                	jne    c001e9c7 <PIC::eoi(unsigned char)+0x35>
c001e9a4:	6a 0b                	push   0xb
c001e9a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9a9:	e8 72 ff ff ff       	call   c001e920 <PIC::getIRQReg(int)>
c001e9ae:	83 c4 08             	add    esp,0x8
c001e9b1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e9b5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e9b9:	25 ff ff 00 00       	and    eax,0xffff
c001e9be:	25 80 00 00 00       	and    eax,0x80
c001e9c3:	85 c0                	test   eax,eax
c001e9c5:	74 5f                	je     c001ea26 <PIC::eoi(unsigned char)+0x94>
c001e9c7:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001e9cb:	75 2d                	jne    c001e9fa <PIC::eoi(unsigned char)+0x68>
c001e9cd:	6a 0b                	push   0xb
c001e9cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9d2:	e8 49 ff ff ff       	call   c001e920 <PIC::getIRQReg(int)>
c001e9d7:	83 c4 08             	add    esp,0x8
c001e9da:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001e9de:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e9e1:	66 85 c0             	test   ax,ax
c001e9e4:	78 14                	js     c001e9fa <PIC::eoi(unsigned char)+0x68>
c001e9e6:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001e9ec:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001e9f0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e9f3:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e9f7:	ee                   	out    dx,al
c001e9f8:	eb 2d                	jmp    c001ea27 <PIC::eoi(unsigned char)+0x95>
c001e9fa:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e9fe:	76 12                	jbe    c001ea12 <PIC::eoi(unsigned char)+0x80>
c001ea00:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ea06:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001ea0a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ea0d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ea11:	ee                   	out    dx,al
c001ea12:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001ea18:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001ea1c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ea1f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ea23:	ee                   	out    dx,al
c001ea24:	eb 01                	jmp    c001ea27 <PIC::eoi(unsigned char)+0x95>
c001ea26:	90                   	nop
c001ea27:	c9                   	leave  
c001ea28:	c3                   	ret    
c001ea29:	90                   	nop

c001ea2a <PIC::remap()>:
c001ea2a:	55                   	push   ebp
c001ea2b:	89 e5                	mov    ebp,esp
c001ea2d:	83 ec 48             	sub    esp,0x48
c001ea30:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ea37:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ea3e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ea44:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ea47:	89 c2                	mov    edx,eax
c001ea49:	ec                   	in     al,dx
c001ea4a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ea4d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ea50:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ea53:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ea59:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ea5c:	89 c2                	mov    edx,eax
c001ea5e:	ec                   	in     al,dx
c001ea5f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ea62:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ea65:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ea68:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ea6e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ea72:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ea75:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ea78:	ee                   	out    dx,al
c001ea79:	83 ec 0c             	sub    esp,0xc
c001ea7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea7f:	e8 96 fe ff ff       	call   c001e91a <PIC::ioWait()>
c001ea84:	83 c4 10             	add    esp,0x10
c001ea87:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ea8d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ea91:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ea94:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ea97:	ee                   	out    dx,al
c001ea98:	83 ec 0c             	sub    esp,0xc
c001ea9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea9e:	e8 77 fe ff ff       	call   c001e91a <PIC::ioWait()>
c001eaa3:	83 c4 10             	add    esp,0x10
c001eaa6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001eaa9:	25 ff 00 00 00       	and    eax,0xff
c001eaae:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001eab4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001eab7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001eaba:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001eabd:	ee                   	out    dx,al
c001eabe:	83 ec 0c             	sub    esp,0xc
c001eac1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eac4:	e8 51 fe ff ff       	call   c001e91a <PIC::ioWait()>
c001eac9:	83 c4 10             	add    esp,0x10
c001eacc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eacf:	25 ff 00 00 00       	and    eax,0xff
c001ead4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001eada:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001eadd:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001eae0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eae3:	ee                   	out    dx,al
c001eae4:	83 ec 0c             	sub    esp,0xc
c001eae7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eaea:	e8 2b fe ff ff       	call   c001e91a <PIC::ioWait()>
c001eaef:	83 c4 10             	add    esp,0x10
c001eaf2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001eaf8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001eafc:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001eaff:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001eb02:	ee                   	out    dx,al
c001eb03:	83 ec 0c             	sub    esp,0xc
c001eb06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb09:	e8 0c fe ff ff       	call   c001e91a <PIC::ioWait()>
c001eb0e:	83 c4 10             	add    esp,0x10
c001eb11:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001eb17:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001eb1b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001eb1e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001eb21:	ee                   	out    dx,al
c001eb22:	83 ec 0c             	sub    esp,0xc
c001eb25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb28:	e8 ed fd ff ff       	call   c001e91a <PIC::ioWait()>
c001eb2d:	83 c4 10             	add    esp,0x10
c001eb30:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001eb36:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001eb3a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001eb3d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001eb40:	ee                   	out    dx,al
c001eb41:	83 ec 0c             	sub    esp,0xc
c001eb44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb47:	e8 ce fd ff ff       	call   c001e91a <PIC::ioWait()>
c001eb4c:	83 c4 10             	add    esp,0x10
c001eb4f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001eb55:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001eb59:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001eb5c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb5f:	ee                   	out    dx,al
c001eb60:	83 ec 0c             	sub    esp,0xc
c001eb63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb66:	e8 af fd ff ff       	call   c001e91a <PIC::ioWait()>
c001eb6b:	83 c4 10             	add    esp,0x10
c001eb6e:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001eb71:	25 ff 00 00 00       	and    eax,0xff
c001eb76:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001eb7c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001eb7f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001eb82:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001eb85:	ee                   	out    dx,al
c001eb86:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001eb89:	25 ff 00 00 00       	and    eax,0xff
c001eb8e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001eb94:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001eb97:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001eb9a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001eb9d:	ee                   	out    dx,al
c001eb9e:	90                   	nop
c001eb9f:	c9                   	leave  
c001eba0:	c3                   	ret    
c001eba1:	90                   	nop

c001eba2 <PIC::open(int, int, void*)>:
c001eba2:	55                   	push   ebp
c001eba3:	89 e5                	mov    ebp,esp
c001eba5:	83 ec 18             	sub    esp,0x18
c001eba8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ebae:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ebb2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ebb5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ebb9:	ee                   	out    dx,al
c001ebba:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ebc0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ebc4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ebc7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ebcb:	ee                   	out    dx,al
c001ebcc:	83 ec 0c             	sub    esp,0xc
c001ebcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebd2:	e8 53 fe ff ff       	call   c001ea2a <PIC::remap()>
c001ebd7:	83 c4 10             	add    esp,0x10
c001ebda:	b8 00 00 00 00       	mov    eax,0x0
c001ebdf:	c9                   	leave  
c001ebe0:	c3                   	ret    
c001ebe1:	90                   	nop

c001ebe2 <APICTimer::close(int, int, void*)>:
c001ebe2:	b8 00 00 00 00       	mov    eax,0x0
c001ebe7:	c3                   	ret    

c001ebe8 <apicTimerHandler(regs*, void*)>:
c001ebe8:	83 ec 0c             	sub    esp,0xc
c001ebeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ebef:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf1:	89 c2                	mov    edx,eax
c001ebf3:	c1 fa 1f             	sar    edx,0x1f
c001ebf6:	52                   	push   edx
c001ebf7:	50                   	push   eax
c001ebf8:	6a 00                	push   0x0
c001ebfa:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ebff:	e8 88 07 00 00       	call   c001f38c <__udivdi3>
c001ec04:	83 c4 10             	add    esp,0x10
c001ec07:	83 ec 08             	sub    esp,0x8
c001ec0a:	52                   	push   edx
c001ec0b:	50                   	push   eax
c001ec0c:	e8 b0 40 ff ff       	call   c0012cc1 <timerHandler(unsigned long long)>
c001ec11:	83 c4 10             	add    esp,0x10
c001ec14:	90                   	nop
c001ec15:	83 c4 0c             	add    esp,0xc
c001ec18:	c3                   	ret    
c001ec19:	90                   	nop

c001ec1a <APICTimer::write(int)>:
c001ec1a:	53                   	push   ebx
c001ec1b:	83 ec 28             	sub    esp,0x28
c001ec1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ec22:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ec26:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec2c:	e8 6f 5b ff ff       	call   c00147a0 <thisCPU()>
c001ec31:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ec37:	83 ec 0c             	sub    esp,0xc
c001ec3a:	50                   	push   eax
c001ec3b:	e8 a2 f5 ff ff       	call   c001e1e2 <APIC::getBase()>
c001ec40:	83 c4 10             	add    esp,0x10
c001ec43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ec47:	a1 90 4b 02 c0       	mov    eax,ds:0xc0024b90
c001ec4c:	8b 15 94 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b94
c001ec52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ec56:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ec5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec5e:	05 e0 03 00 00       	add    eax,0x3e0
c001ec63:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ec69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec6d:	05 80 03 00 00       	add    eax,0x380
c001ec72:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001ec78:	fb                   	sti    
c001ec79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec81:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ec86:	83 d2 00             	adc    edx,0x0
c001ec89:	89 c1                	mov    ecx,eax
c001ec8b:	89 d3                	mov    ebx,edx
c001ec8d:	a1 90 4b 02 c0       	mov    eax,ds:0xc0024b90
c001ec92:	8b 15 94 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b94
c001ec98:	39 c8                	cmp    eax,ecx
c001ec9a:	89 d0                	mov    eax,edx
c001ec9c:	19 d8                	sbb    eax,ebx
c001ec9e:	73 02                	jae    c001eca2 <APICTimer::write(int)+0x88>
c001eca0:	eb d7                	jmp    c001ec79 <APICTimer::write(int)+0x5f>
c001eca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eca6:	05 20 03 00 00       	add    eax,0x320
c001ecab:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ecb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecb5:	05 90 03 00 00       	add    eax,0x390
c001ecba:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecbc:	f7 d0                	not    eax
c001ecbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecc2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ecc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecca:	ba 00 00 00 00       	mov    edx,0x0
c001eccf:	f7 f3                	div    ebx
c001ecd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ecd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ecd9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ecdf:	0d 00 00 02 00       	or     eax,0x20000
c001ece4:	89 c2                	mov    edx,eax
c001ece6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecea:	05 20 03 00 00       	add    eax,0x320
c001ecef:	89 10                	mov    DWORD PTR [eax],edx
c001ecf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecf5:	05 e0 03 00 00       	add    eax,0x3e0
c001ecfa:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ed00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed04:	05 80 03 00 00       	add    eax,0x380
c001ed09:	89 c2                	mov    edx,eax
c001ed0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed0f:	89 02                	mov    DWORD PTR [edx],eax
c001ed11:	90                   	nop
c001ed12:	83 c4 28             	add    esp,0x28
c001ed15:	5b                   	pop    ebx
c001ed16:	c3                   	ret    
c001ed17:	90                   	nop

c001ed18 <APICTimer::open(int, int, void*)>:
c001ed18:	57                   	push   edi
c001ed19:	56                   	push   esi
c001ed1a:	53                   	push   ebx
c001ed1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed21:	83 c0 24             	add    eax,0x24
c001ed24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed26:	83 ec 08             	sub    esp,0x8
c001ed29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed31:	ff d0                	call   eax
c001ed33:	83 c4 10             	add    esp,0x10
c001ed36:	e8 65 5a ff ff       	call   c00147a0 <thisCPU()>
c001ed3b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ed41:	83 ec 0c             	sub    esp,0xc
c001ed44:	50                   	push   eax
c001ed45:	e8 98 f4 ff ff       	call   c001e1e2 <APIC::getBase()>
c001ed4a:	83 c4 10             	add    esp,0x10
c001ed4d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001ed53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed57:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ed5d:	89 c7                	mov    edi,eax
c001ed5f:	81 e7 ff 00 00 00    	and    edi,0xff
c001ed65:	89 d0                	mov    eax,edx
c001ed67:	ba 00 00 00 00       	mov    edx,0x0
c001ed6c:	89 c1                	mov    ecx,eax
c001ed6e:	80 e5 ff             	and    ch,0xff
c001ed71:	89 cb                	mov    ebx,ecx
c001ed73:	89 d0                	mov    eax,edx
c001ed75:	25 ff 00 00 00       	and    eax,0xff
c001ed7a:	89 c6                	mov    esi,eax
c001ed7c:	89 d8                	mov    eax,ebx
c001ed7e:	89 f2                	mov    edx,esi
c001ed80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed84:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ed87:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ed8b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ed8f:	83 e0 00             	and    eax,0x0
c001ed92:	09 d0                	or     eax,edx
c001ed94:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ed98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eda2:	8d 50 01             	lea    edx,[eax+0x1]
c001eda5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eda9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001edaf:	31 d2                	xor    edx,edx
c001edb1:	88 c2                	mov    dl,al
c001edb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb7:	83 c2 08             	add    edx,0x8
c001edba:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001edbe:	81 e1 ff 00 00 00    	and    ecx,0xff
c001edc4:	81 c9 00 00 01 00    	or     ecx,0x10000
c001edca:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001edce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001edd6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ede4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001edea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001edee:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001edf4:	83 ec 0c             	sub    esp,0xc
c001edf7:	51                   	push   ecx
c001edf8:	6a 01                	push   0x1
c001edfa:	68 e8 eb 01 c0       	push   0xc001ebe8
c001edff:	52                   	push   edx
c001ee00:	50                   	push   eax
c001ee01:	e8 a4 16 ff ff       	call   c00104aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee06:	83 c4 20             	add    esp,0x20
c001ee09:	89 c2                	mov    edx,eax
c001ee0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee15:	b8 00 00 00 00       	mov    eax,0x0
c001ee1a:	5b                   	pop    ebx
c001ee1b:	5e                   	pop    esi
c001ee1c:	5f                   	pop    edi
c001ee1d:	c3                   	ret    

c001ee1e <APICTimer::APICTimer()>:
c001ee1e:	83 ec 0c             	sub    esp,0xc
c001ee21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee25:	83 ec 08             	sub    esp,0x8
c001ee28:	68 b0 38 02 c0       	push   0xc00238b0
c001ee2d:	50                   	push   eax
c001ee2e:	e8 ff 3d ff ff       	call   c0012c32 <Timer::Timer(char const*)>
c001ee33:	83 c4 10             	add    esp,0x10
c001ee36:	ba c4 38 02 c0       	mov    edx,0xc00238c4
c001ee3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3f:	89 10                	mov    DWORD PTR [eax],edx
c001ee41:	90                   	nop
c001ee42:	83 c4 0c             	add    esp,0xc
c001ee45:	c3                   	ret    

c001ee46 <PIT::write(int)>:
c001ee46:	83 ec 10             	sub    esp,0x10
c001ee49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee51:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee5b:	a3 24 63 02 c0       	mov    ds:0xc0026324,eax
c001ee60:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee65:	89 c2                	mov    edx,eax
c001ee67:	c1 fa 1f             	sar    edx,0x1f
c001ee6a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee72:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee79:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ee7e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ee82:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ee87:	ee                   	out    dx,al
c001ee88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee8c:	25 ff 00 00 00       	and    eax,0xff
c001ee91:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ee98:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ee9c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eea0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eea5:	ee                   	out    dx,al
c001eea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eeaa:	c1 f8 08             	sar    eax,0x8
c001eead:	25 ff 00 00 00       	and    eax,0xff
c001eeb2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eeb9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eebd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eec1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eec6:	ee                   	out    dx,al
c001eec7:	90                   	nop
c001eec8:	83 c4 10             	add    esp,0x10
c001eecb:	c3                   	ret    

c001eecc <pitHandler(regs*, void*)>:
c001eecc:	83 ec 0c             	sub    esp,0xc
c001eecf:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c001eed4:	89 c2                	mov    edx,eax
c001eed6:	c1 fa 1f             	sar    edx,0x1f
c001eed9:	52                   	push   edx
c001eeda:	50                   	push   eax
c001eedb:	6a 00                	push   0x0
c001eedd:	68 00 ca 9a 3b       	push   0x3b9aca00
c001eee2:	e8 a5 04 00 00       	call   c001f38c <__udivdi3>
c001eee7:	83 c4 10             	add    esp,0x10
c001eeea:	83 ec 08             	sub    esp,0x8
c001eeed:	52                   	push   edx
c001eeee:	50                   	push   eax
c001eeef:	e8 cd 3d ff ff       	call   c0012cc1 <timerHandler(unsigned long long)>
c001eef4:	83 c4 10             	add    esp,0x10
c001eef7:	90                   	nop
c001eef8:	83 c4 0c             	add    esp,0xc
c001eefb:	c3                   	ret    

c001eefc <PIT::open(int, int, void*)>:
c001eefc:	83 ec 0c             	sub    esp,0xc
c001eeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef03:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef05:	83 c0 24             	add    eax,0x24
c001ef08:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef0a:	83 ec 08             	sub    esp,0x8
c001ef0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef15:	ff d0                	call   eax
c001ef17:	83 c4 10             	add    esp,0x10
c001ef1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1e:	83 ec 0c             	sub    esp,0xc
c001ef21:	6a 00                	push   0x0
c001ef23:	6a 01                	push   0x1
c001ef25:	68 cc ee 01 c0       	push   0xc001eecc
c001ef2a:	6a 00                	push   0x0
c001ef2c:	50                   	push   eax
c001ef2d:	e8 78 15 ff ff       	call   c00104aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef32:	83 c4 20             	add    esp,0x20
c001ef35:	89 c2                	mov    edx,eax
c001ef37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef41:	b8 00 00 00 00       	mov    eax,0x0
c001ef46:	83 c4 0c             	add    esp,0xc
c001ef49:	c3                   	ret    

c001ef4a <PIT::close(int, int, void*)>:
c001ef4a:	83 ec 0c             	sub    esp,0xc
c001ef4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef51:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5f:	6a 01                	push   0x1
c001ef61:	68 cc ee 01 c0       	push   0xc001eecc
c001ef66:	6a 00                	push   0x0
c001ef68:	50                   	push   eax
c001ef69:	e8 9a 15 ff ff       	call   c0010508 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef6e:	83 c4 10             	add    esp,0x10
c001ef71:	b8 00 00 00 00       	mov    eax,0x0
c001ef76:	83 c4 0c             	add    esp,0xc
c001ef79:	c3                   	ret    

c001ef7a <PIT::PIT()>:
c001ef7a:	83 ec 0c             	sub    esp,0xc
c001ef7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef81:	83 ec 08             	sub    esp,0x8
c001ef84:	68 ec 38 02 c0       	push   0xc00238ec
c001ef89:	50                   	push   eax
c001ef8a:	e8 a3 3c ff ff       	call   c0012c32 <Timer::Timer(char const*)>
c001ef8f:	83 c4 10             	add    esp,0x10
c001ef92:	ba 14 39 02 c0       	mov    edx,0xc0023914
c001ef97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9b:	89 10                	mov    DWORD PTR [eax],edx
c001ef9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efa7:	31 d2                	xor    edx,edx
c001efa9:	88 c2                	mov    dl,al
c001efab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efaf:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001efb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efc0:	31 d2                	xor    edx,edx
c001efc2:	88 c2                	mov    dl,al
c001efc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001efcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efd7:	8d 50 01             	lea    edx,[eax+0x1]
c001efda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001efde:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001efe4:	31 d2                	xor    edx,edx
c001efe6:	88 c2                	mov    dl,al
c001efe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001eff0:	83 e1 3f             	and    ecx,0x3f
c001eff3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001eff7:	90                   	nop
c001eff8:	83 c4 0c             	add    esp,0xc
c001effb:	c3                   	ret    
c001effc:	66 90                	xchg   ax,ax
c001effe:	66 90                	xchg   ax,ax

c001f000 <avxDetect>:
c001f000:	b8 00 00 00 00       	mov    eax,0x0
c001f005:	c3                   	ret    

c001f006 <avxSave>:
c001f006:	c3                   	ret    

c001f007 <avxLoad>:
c001f007:	c3                   	ret    

c001f008 <avxInit>:
c001f008:	c3                   	ret    

c001f009 <avxClose>:
c001f009:	c3                   	ret    
c001f00a:	66 90                	xchg   ax,ax
c001f00c:	66 90                	xchg   ax,ax
c001f00e:	66 90                	xchg   ax,ax

c001f010 <sseDetect>:
c001f010:	b8 01 00 00 00       	mov    eax,0x1
c001f015:	0f a2                	cpuid  
c001f017:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f01d:	74 06                	je     c001f025 <sseDetect.noSSE>
c001f01f:	b8 01 00 00 00       	mov    eax,0x1
c001f024:	c3                   	ret    

c001f025 <sseDetect.noSSE>:
c001f025:	b8 00 00 00 00       	mov    eax,0x0
c001f02a:	c3                   	ret    

c001f02b <sseSave>:
c001f02b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f030:	c3                   	ret    

c001f031 <sseLoad>:
c001f031:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f036:	c3                   	ret    

c001f037 <sseInit>:
c001f037:	e8 40 00 00 00       	call   c001f07c <x87Init>
c001f03c:	0f 20 e0             	mov    eax,cr4
c001f03f:	66 0d 00 06          	or     ax,0x600
c001f043:	0f 22 e0             	mov    cr4,eax
c001f046:	c3                   	ret    

c001f047 <sseClose>:
c001f047:	c3                   	ret    
c001f048:	66 90                	xchg   ax,ax
c001f04a:	66 90                	xchg   ax,ax
c001f04c:	66 90                	xchg   ax,ax
c001f04e:	66 90                	xchg   ax,ax

c001f050 <value_37F>:
c001f050:	7f 03                	jg     c001f055 <value_37A+0x1>

c001f052 <value_37E>:
c001f052:	7e 03                	jle    c001f057 <x87Detect+0x1>

c001f054 <value_37A>:
c001f054:	7a 03                	jp     c001f059 <x87Detect+0x3>

c001f056 <x87Detect>:
c001f056:	b8 01 00 00 00       	mov    eax,0x1
c001f05b:	0f a2                	cpuid  
c001f05d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f063:	74 06                	je     c001f06b <x87Detect.nox87>
c001f065:	b8 01 00 00 00       	mov    eax,0x1
c001f06a:	c3                   	ret    

c001f06b <x87Detect.nox87>:
c001f06b:	b8 00 00 00 00       	mov    eax,0x0
c001f070:	c3                   	ret    

c001f071 <x87Save>:
c001f071:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f076:	c3                   	ret    

c001f077 <x87Load>:
c001f077:	dd 64 24 08          	frstor [esp+0x8]
c001f07b:	c3                   	ret    

c001f07c <x87Init>:
c001f07c:	9b db e3             	finit  
c001f07f:	0f 20 c0             	mov    eax,cr0
c001f082:	66 25 fb ff          	and    ax,0xfffb
c001f086:	66 0d 22 00          	or     ax,0x22
c001f08a:	0f 22 c0             	mov    cr0,eax
c001f08d:	0f 06                	clts   
c001f08f:	d9 2d 54 f0 01 c0    	fldcw  WORD PTR ds:0xc001f054
c001f095:	c3                   	ret    

c001f096 <x87Close>:
c001f096:	c3                   	ret    
c001f097:	90                   	nop

c001f098 <__do_global_ctors_aux>:
c001f098:	a1 78 01 02 c0       	mov    eax,ds:0xc0020178
c001f09d:	83 f8 ff             	cmp    eax,0xffffffff
c001f0a0:	74 1a                	je     c001f0bc <__do_global_ctors_aux+0x24>
c001f0a2:	55                   	push   ebp
c001f0a3:	89 e5                	mov    ebp,esp
c001f0a5:	53                   	push   ebx
c001f0a6:	52                   	push   edx
c001f0a7:	bb 78 01 02 c0       	mov    ebx,0xc0020178
c001f0ac:	ff d0                	call   eax
c001f0ae:	83 eb 04             	sub    ebx,0x4
c001f0b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f0b3:	83 f8 ff             	cmp    eax,0xffffffff
c001f0b6:	75 f4                	jne    c001f0ac <__do_global_ctors_aux+0x14>
c001f0b8:	58                   	pop    eax
c001f0b9:	5b                   	pop    ebx
c001f0ba:	5d                   	pop    ebp
c001f0bb:	c3                   	ret    
c001f0bc:	c3                   	ret    
c001f0bd:	66 90                	xchg   ax,ax
c001f0bf:	90                   	nop

c001f0c0 <__divdi3>:
c001f0c0:	55                   	push   ebp
c001f0c1:	57                   	push   edi
c001f0c2:	56                   	push   esi
c001f0c3:	53                   	push   ebx
c001f0c4:	83 ec 1c             	sub    esp,0x1c
c001f0c7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f0cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f0d2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f0d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f0da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f0de:	85 db                	test   ebx,ebx
c001f0e0:	0f 88 8e 00 00 00    	js     c001f174 <__divdi3+0xb4>
c001f0e6:	89 dd                	mov    ebp,ebx
c001f0e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f0f0:	89 d3                	mov    ebx,edx
c001f0f2:	85 d2                	test   edx,edx
c001f0f4:	79 0d                	jns    c001f103 <__divdi3+0x43>
c001f0f6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f0fa:	f7 d8                	neg    eax
c001f0fc:	83 d2 00             	adc    edx,0x0
c001f0ff:	f7 da                	neg    edx
c001f101:	89 d3                	mov    ebx,edx
c001f103:	89 c7                	mov    edi,eax
c001f105:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f108:	85 db                	test   ebx,ebx
c001f10a:	75 48                	jne    c001f154 <__divdi3+0x94>
c001f10c:	39 ef                	cmp    edi,ebp
c001f10e:	76 24                	jbe    c001f134 <__divdi3+0x74>
c001f110:	89 ea                	mov    edx,ebp
c001f112:	f7 f7                	div    edi
c001f114:	89 c1                	mov    ecx,eax
c001f116:	31 f6                	xor    esi,esi
c001f118:	89 c8                	mov    eax,ecx
c001f11a:	89 f2                	mov    edx,esi
c001f11c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f120:	85 c9                	test   ecx,ecx
c001f122:	74 07                	je     c001f12b <__divdi3+0x6b>
c001f124:	f7 d8                	neg    eax
c001f126:	83 d2 00             	adc    edx,0x0
c001f129:	f7 da                	neg    edx
c001f12b:	83 c4 1c             	add    esp,0x1c
c001f12e:	5b                   	pop    ebx
c001f12f:	5e                   	pop    esi
c001f130:	5f                   	pop    edi
c001f131:	5d                   	pop    ebp
c001f132:	c3                   	ret    
c001f133:	90                   	nop
c001f134:	85 ff                	test   edi,edi
c001f136:	75 0b                	jne    c001f143 <__divdi3+0x83>
c001f138:	b8 01 00 00 00       	mov    eax,0x1
c001f13d:	31 d2                	xor    edx,edx
c001f13f:	f7 f3                	div    ebx
c001f141:	89 c7                	mov    edi,eax
c001f143:	31 d2                	xor    edx,edx
c001f145:	89 e8                	mov    eax,ebp
c001f147:	f7 f7                	div    edi
c001f149:	89 c6                	mov    esi,eax
c001f14b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f14e:	f7 f7                	div    edi
c001f150:	89 c1                	mov    ecx,eax
c001f152:	eb c4                	jmp    c001f118 <__divdi3+0x58>
c001f154:	39 eb                	cmp    ebx,ebp
c001f156:	77 3c                	ja     c001f194 <__divdi3+0xd4>
c001f158:	0f bd f3             	bsr    esi,ebx
c001f15b:	83 f6 1f             	xor    esi,0x1f
c001f15e:	75 40                	jne    c001f1a0 <__divdi3+0xe0>
c001f160:	39 eb                	cmp    ebx,ebp
c001f162:	72 09                	jb     c001f16d <__divdi3+0xad>
c001f164:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f167:	0f 87 97 00 00 00    	ja     c001f204 <__divdi3+0x144>
c001f16d:	b9 01 00 00 00       	mov    ecx,0x1
c001f172:	eb a4                	jmp    c001f118 <__divdi3+0x58>
c001f174:	f7 d9                	neg    ecx
c001f176:	83 d3 00             	adc    ebx,0x0
c001f179:	f7 db                	neg    ebx
c001f17b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f17e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f182:	89 dd                	mov    ebp,ebx
c001f184:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f18c:	e9 5f ff ff ff       	jmp    c001f0f0 <__divdi3+0x30>
c001f191:	8d 76 00             	lea    esi,[esi+0x0]
c001f194:	31 f6                	xor    esi,esi
c001f196:	31 c9                	xor    ecx,ecx
c001f198:	e9 7b ff ff ff       	jmp    c001f118 <__divdi3+0x58>
c001f19d:	8d 76 00             	lea    esi,[esi+0x0]
c001f1a0:	b8 20 00 00 00       	mov    eax,0x20
c001f1a5:	29 f0                	sub    eax,esi
c001f1a7:	89 f1                	mov    ecx,esi
c001f1a9:	d3 e3                	shl    ebx,cl
c001f1ab:	89 fa                	mov    edx,edi
c001f1ad:	88 c1                	mov    cl,al
c001f1af:	d3 ea                	shr    edx,cl
c001f1b1:	09 da                	or     edx,ebx
c001f1b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f1b7:	89 f1                	mov    ecx,esi
c001f1b9:	d3 e7                	shl    edi,cl
c001f1bb:	89 eb                	mov    ebx,ebp
c001f1bd:	88 c1                	mov    cl,al
c001f1bf:	d3 eb                	shr    ebx,cl
c001f1c1:	89 f1                	mov    ecx,esi
c001f1c3:	d3 e5                	shl    ebp,cl
c001f1c5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f1c8:	88 c1                	mov    cl,al
c001f1ca:	d3 ea                	shr    edx,cl
c001f1cc:	09 d5                	or     ebp,edx
c001f1ce:	89 e8                	mov    eax,ebp
c001f1d0:	89 da                	mov    edx,ebx
c001f1d2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f1d6:	89 d3                	mov    ebx,edx
c001f1d8:	89 c5                	mov    ebp,eax
c001f1da:	f7 e7                	mul    edi
c001f1dc:	39 d3                	cmp    ebx,edx
c001f1de:	72 18                	jb     c001f1f8 <__divdi3+0x138>
c001f1e0:	74 0a                	je     c001f1ec <__divdi3+0x12c>
c001f1e2:	89 e9                	mov    ecx,ebp
c001f1e4:	31 f6                	xor    esi,esi
c001f1e6:	e9 2d ff ff ff       	jmp    c001f118 <__divdi3+0x58>
c001f1eb:	90                   	nop
c001f1ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f1ef:	89 f1                	mov    ecx,esi
c001f1f1:	d3 e7                	shl    edi,cl
c001f1f3:	39 c7                	cmp    edi,eax
c001f1f5:	73 eb                	jae    c001f1e2 <__divdi3+0x122>
c001f1f7:	90                   	nop
c001f1f8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f1fb:	31 f6                	xor    esi,esi
c001f1fd:	e9 16 ff ff ff       	jmp    c001f118 <__divdi3+0x58>
c001f202:	66 90                	xchg   ax,ax
c001f204:	31 c9                	xor    ecx,ecx
c001f206:	e9 0d ff ff ff       	jmp    c001f118 <__divdi3+0x58>
c001f20b:	90                   	nop

c001f20c <__moddi3>:
c001f20c:	55                   	push   ebp
c001f20d:	57                   	push   edi
c001f20e:	56                   	push   esi
c001f20f:	53                   	push   ebx
c001f210:	83 ec 2c             	sub    esp,0x2c
c001f213:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f217:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f21b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f21f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f223:	85 db                	test   ebx,ebx
c001f225:	0f 88 85 00 00 00    	js     c001f2b0 <__moddi3+0xa4>
c001f22b:	89 de                	mov    esi,ebx
c001f22d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f235:	89 d7                	mov    edi,edx
c001f237:	85 d2                	test   edx,edx
c001f239:	79 09                	jns    c001f244 <__moddi3+0x38>
c001f23b:	f7 d8                	neg    eax
c001f23d:	83 d2 00             	adc    edx,0x0
c001f240:	f7 da                	neg    edx
c001f242:	89 d7                	mov    edi,edx
c001f244:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f248:	89 cd                	mov    ebp,ecx
c001f24a:	85 ff                	test   edi,edi
c001f24c:	75 52                	jne    c001f2a0 <__moddi3+0x94>
c001f24e:	89 c3                	mov    ebx,eax
c001f250:	39 f0                	cmp    eax,esi
c001f252:	76 24                	jbe    c001f278 <__moddi3+0x6c>
c001f254:	89 c8                	mov    eax,ecx
c001f256:	89 f2                	mov    edx,esi
c001f258:	f7 f3                	div    ebx
c001f25a:	89 d6                	mov    esi,edx
c001f25c:	89 f0                	mov    eax,esi
c001f25e:	31 d2                	xor    edx,edx
c001f260:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f264:	85 c9                	test   ecx,ecx
c001f266:	74 07                	je     c001f26f <__moddi3+0x63>
c001f268:	f7 d8                	neg    eax
c001f26a:	83 d2 00             	adc    edx,0x0
c001f26d:	f7 da                	neg    edx
c001f26f:	83 c4 2c             	add    esp,0x2c
c001f272:	5b                   	pop    ebx
c001f273:	5e                   	pop    esi
c001f274:	5f                   	pop    edi
c001f275:	5d                   	pop    ebp
c001f276:	c3                   	ret    
c001f277:	90                   	nop
c001f278:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f27c:	85 db                	test   ebx,ebx
c001f27e:	75 0d                	jne    c001f28d <__moddi3+0x81>
c001f280:	b8 01 00 00 00       	mov    eax,0x1
c001f285:	31 d2                	xor    edx,edx
c001f287:	f7 f7                	div    edi
c001f289:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f28d:	89 f0                	mov    eax,esi
c001f28f:	31 d2                	xor    edx,edx
c001f291:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f295:	f7 f7                	div    edi
c001f297:	89 e8                	mov    eax,ebp
c001f299:	f7 f7                	div    edi
c001f29b:	89 d6                	mov    esi,edx
c001f29d:	eb bd                	jmp    c001f25c <__moddi3+0x50>
c001f29f:	90                   	nop
c001f2a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f2a4:	39 f7                	cmp    edi,esi
c001f2a6:	76 20                	jbe    c001f2c8 <__moddi3+0xbc>
c001f2a8:	89 c8                	mov    eax,ecx
c001f2aa:	89 f2                	mov    edx,esi
c001f2ac:	eb b2                	jmp    c001f260 <__moddi3+0x54>
c001f2ae:	66 90                	xchg   ax,ax
c001f2b0:	f7 d9                	neg    ecx
c001f2b2:	83 d3 00             	adc    ebx,0x0
c001f2b5:	f7 db                	neg    ebx
c001f2b7:	89 de                	mov    esi,ebx
c001f2b9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f2c1:	e9 6f ff ff ff       	jmp    c001f235 <__moddi3+0x29>
c001f2c6:	66 90                	xchg   ax,ax
c001f2c8:	0f bd c7             	bsr    eax,edi
c001f2cb:	83 f0 1f             	xor    eax,0x1f
c001f2ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f2d2:	75 24                	jne    c001f2f8 <__moddi3+0xec>
c001f2d4:	39 f7                	cmp    edi,esi
c001f2d6:	72 06                	jb     c001f2de <__moddi3+0xd2>
c001f2d8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f2dc:	77 0c                	ja     c001f2ea <__moddi3+0xde>
c001f2de:	89 e9                	mov    ecx,ebp
c001f2e0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f2e4:	19 fe                	sbb    esi,edi
c001f2e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f2ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f2ee:	89 f2                	mov    edx,esi
c001f2f0:	e9 6b ff ff ff       	jmp    c001f260 <__moddi3+0x54>
c001f2f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f2f8:	b8 20 00 00 00       	mov    eax,0x20
c001f2fd:	89 c2                	mov    edx,eax
c001f2ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f303:	29 da                	sub    edx,ebx
c001f305:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f309:	88 d9                	mov    cl,bl
c001f30b:	d3 e7                	shl    edi,cl
c001f30d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f311:	88 d1                	mov    cl,dl
c001f313:	d3 e8                	shr    eax,cl
c001f315:	09 c7                	or     edi,eax
c001f317:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f31b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f31f:	89 d8                	mov    eax,ebx
c001f321:	88 d9                	mov    cl,bl
c001f323:	d3 e7                	shl    edi,cl
c001f325:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f329:	89 f3                	mov    ebx,esi
c001f32b:	88 d1                	mov    cl,dl
c001f32d:	d3 eb                	shr    ebx,cl
c001f32f:	89 c7                	mov    edi,eax
c001f331:	88 c1                	mov    cl,al
c001f333:	d3 e6                	shl    esi,cl
c001f335:	89 e8                	mov    eax,ebp
c001f337:	88 d1                	mov    cl,dl
c001f339:	d3 e8                	shr    eax,cl
c001f33b:	09 f0                	or     eax,esi
c001f33d:	89 f9                	mov    ecx,edi
c001f33f:	d3 e5                	shl    ebp,cl
c001f341:	89 da                	mov    edx,ebx
c001f343:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f347:	89 d3                	mov    ebx,edx
c001f349:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f34d:	89 c6                	mov    esi,eax
c001f34f:	89 d1                	mov    ecx,edx
c001f351:	39 d3                	cmp    ebx,edx
c001f353:	72 27                	jb     c001f37c <__moddi3+0x170>
c001f355:	74 21                	je     c001f378 <__moddi3+0x16c>
c001f357:	29 f5                	sub    ebp,esi
c001f359:	19 cb                	sbb    ebx,ecx
c001f35b:	89 de                	mov    esi,ebx
c001f35d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f361:	d3 e6                	shl    esi,cl
c001f363:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f367:	89 f9                	mov    ecx,edi
c001f369:	d3 ed                	shr    ebp,cl
c001f36b:	09 ee                	or     esi,ebp
c001f36d:	89 f0                	mov    eax,esi
c001f36f:	d3 eb                	shr    ebx,cl
c001f371:	89 da                	mov    edx,ebx
c001f373:	e9 e8 fe ff ff       	jmp    c001f260 <__moddi3+0x54>
c001f378:	39 c5                	cmp    ebp,eax
c001f37a:	73 db                	jae    c001f357 <__moddi3+0x14b>
c001f37c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f380:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f384:	89 d1                	mov    ecx,edx
c001f386:	89 c6                	mov    esi,eax
c001f388:	eb cd                	jmp    c001f357 <__moddi3+0x14b>
c001f38a:	66 90                	xchg   ax,ax

c001f38c <__udivdi3>:
c001f38c:	55                   	push   ebp
c001f38d:	57                   	push   edi
c001f38e:	56                   	push   esi
c001f38f:	53                   	push   ebx
c001f390:	83 ec 1c             	sub    esp,0x1c
c001f393:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f397:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f39b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f39f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f3a3:	85 d2                	test   edx,edx
c001f3a5:	75 41                	jne    c001f3e8 <__udivdi3+0x5c>
c001f3a7:	39 f7                	cmp    edi,esi
c001f3a9:	76 15                	jbe    c001f3c0 <__udivdi3+0x34>
c001f3ab:	89 e8                	mov    eax,ebp
c001f3ad:	89 f2                	mov    edx,esi
c001f3af:	f7 f7                	div    edi
c001f3b1:	31 db                	xor    ebx,ebx
c001f3b3:	89 da                	mov    edx,ebx
c001f3b5:	83 c4 1c             	add    esp,0x1c
c001f3b8:	5b                   	pop    ebx
c001f3b9:	5e                   	pop    esi
c001f3ba:	5f                   	pop    edi
c001f3bb:	5d                   	pop    ebp
c001f3bc:	c3                   	ret    
c001f3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001f3c0:	89 f9                	mov    ecx,edi
c001f3c2:	85 ff                	test   edi,edi
c001f3c4:	75 0b                	jne    c001f3d1 <__udivdi3+0x45>
c001f3c6:	b8 01 00 00 00       	mov    eax,0x1
c001f3cb:	31 d2                	xor    edx,edx
c001f3cd:	f7 f7                	div    edi
c001f3cf:	89 c1                	mov    ecx,eax
c001f3d1:	31 d2                	xor    edx,edx
c001f3d3:	89 f0                	mov    eax,esi
c001f3d5:	f7 f1                	div    ecx
c001f3d7:	89 c3                	mov    ebx,eax
c001f3d9:	89 e8                	mov    eax,ebp
c001f3db:	f7 f1                	div    ecx
c001f3dd:	89 da                	mov    edx,ebx
c001f3df:	83 c4 1c             	add    esp,0x1c
c001f3e2:	5b                   	pop    ebx
c001f3e3:	5e                   	pop    esi
c001f3e4:	5f                   	pop    edi
c001f3e5:	5d                   	pop    ebp
c001f3e6:	c3                   	ret    
c001f3e7:	90                   	nop
c001f3e8:	39 f2                	cmp    edx,esi
c001f3ea:	77 1c                	ja     c001f408 <__udivdi3+0x7c>
c001f3ec:	0f bd da             	bsr    ebx,edx
c001f3ef:	83 f3 1f             	xor    ebx,0x1f
c001f3f2:	75 24                	jne    c001f418 <__udivdi3+0x8c>
c001f3f4:	39 f2                	cmp    edx,esi
c001f3f6:	72 08                	jb     c001f400 <__udivdi3+0x74>
c001f3f8:	39 ef                	cmp    edi,ebp
c001f3fa:	0f 87 84 00 00 00    	ja     c001f484 <__udivdi3+0xf8>
c001f400:	b8 01 00 00 00       	mov    eax,0x1
c001f405:	eb ac                	jmp    c001f3b3 <__udivdi3+0x27>
c001f407:	90                   	nop
c001f408:	31 db                	xor    ebx,ebx
c001f40a:	31 c0                	xor    eax,eax
c001f40c:	89 da                	mov    edx,ebx
c001f40e:	83 c4 1c             	add    esp,0x1c
c001f411:	5b                   	pop    ebx
c001f412:	5e                   	pop    esi
c001f413:	5f                   	pop    edi
c001f414:	5d                   	pop    ebp
c001f415:	c3                   	ret    
c001f416:	66 90                	xchg   ax,ax
c001f418:	b8 20 00 00 00       	mov    eax,0x20
c001f41d:	29 d8                	sub    eax,ebx
c001f41f:	88 d9                	mov    cl,bl
c001f421:	d3 e2                	shl    edx,cl
c001f423:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f427:	89 fa                	mov    edx,edi
c001f429:	88 c1                	mov    cl,al
c001f42b:	d3 ea                	shr    edx,cl
c001f42d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f431:	09 d1                	or     ecx,edx
c001f433:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f437:	88 d9                	mov    cl,bl
c001f439:	d3 e7                	shl    edi,cl
c001f43b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f43f:	89 f7                	mov    edi,esi
c001f441:	88 c1                	mov    cl,al
c001f443:	d3 ef                	shr    edi,cl
c001f445:	88 d9                	mov    cl,bl
c001f447:	d3 e6                	shl    esi,cl
c001f449:	89 ea                	mov    edx,ebp
c001f44b:	88 c1                	mov    cl,al
c001f44d:	d3 ea                	shr    edx,cl
c001f44f:	09 d6                	or     esi,edx
c001f451:	89 f0                	mov    eax,esi
c001f453:	89 fa                	mov    edx,edi
c001f455:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f459:	89 d7                	mov    edi,edx
c001f45b:	89 c6                	mov    esi,eax
c001f45d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f461:	39 d7                	cmp    edi,edx
c001f463:	72 13                	jb     c001f478 <__udivdi3+0xec>
c001f465:	74 09                	je     c001f470 <__udivdi3+0xe4>
c001f467:	89 f0                	mov    eax,esi
c001f469:	31 db                	xor    ebx,ebx
c001f46b:	e9 43 ff ff ff       	jmp    c001f3b3 <__udivdi3+0x27>
c001f470:	88 d9                	mov    cl,bl
c001f472:	d3 e5                	shl    ebp,cl
c001f474:	39 c5                	cmp    ebp,eax
c001f476:	73 ef                	jae    c001f467 <__udivdi3+0xdb>
c001f478:	8d 46 ff             	lea    eax,[esi-0x1]
c001f47b:	31 db                	xor    ebx,ebx
c001f47d:	e9 31 ff ff ff       	jmp    c001f3b3 <__udivdi3+0x27>
c001f482:	66 90                	xchg   ax,ax
c001f484:	31 c0                	xor    eax,eax
c001f486:	e9 28 ff ff ff       	jmp    c001f3b3 <__udivdi3+0x27>
c001f48b:	90                   	nop

c001f48c <__umoddi3>:
c001f48c:	55                   	push   ebp
c001f48d:	57                   	push   edi
c001f48e:	56                   	push   esi
c001f48f:	53                   	push   ebx
c001f490:	83 ec 1c             	sub    esp,0x1c
c001f493:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f497:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f49b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f49f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f4a3:	89 da                	mov    edx,ebx
c001f4a5:	85 c0                	test   eax,eax
c001f4a7:	75 37                	jne    c001f4e0 <__umoddi3+0x54>
c001f4a9:	39 df                	cmp    edi,ebx
c001f4ab:	76 13                	jbe    c001f4c0 <__umoddi3+0x34>
c001f4ad:	89 f0                	mov    eax,esi
c001f4af:	f7 f7                	div    edi
c001f4b1:	89 d0                	mov    eax,edx
c001f4b3:	31 d2                	xor    edx,edx
c001f4b5:	83 c4 1c             	add    esp,0x1c
c001f4b8:	5b                   	pop    ebx
c001f4b9:	5e                   	pop    esi
c001f4ba:	5f                   	pop    edi
c001f4bb:	5d                   	pop    ebp
c001f4bc:	c3                   	ret    
c001f4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001f4c0:	89 fd                	mov    ebp,edi
c001f4c2:	85 ff                	test   edi,edi
c001f4c4:	75 0b                	jne    c001f4d1 <__umoddi3+0x45>
c001f4c6:	b8 01 00 00 00       	mov    eax,0x1
c001f4cb:	31 d2                	xor    edx,edx
c001f4cd:	f7 f7                	div    edi
c001f4cf:	89 c5                	mov    ebp,eax
c001f4d1:	89 d8                	mov    eax,ebx
c001f4d3:	31 d2                	xor    edx,edx
c001f4d5:	f7 f5                	div    ebp
c001f4d7:	89 f0                	mov    eax,esi
c001f4d9:	f7 f5                	div    ebp
c001f4db:	89 d0                	mov    eax,edx
c001f4dd:	eb d4                	jmp    c001f4b3 <__umoddi3+0x27>
c001f4df:	90                   	nop
c001f4e0:	89 f1                	mov    ecx,esi
c001f4e2:	39 d8                	cmp    eax,ebx
c001f4e4:	76 0a                	jbe    c001f4f0 <__umoddi3+0x64>
c001f4e6:	89 f0                	mov    eax,esi
c001f4e8:	83 c4 1c             	add    esp,0x1c
c001f4eb:	5b                   	pop    ebx
c001f4ec:	5e                   	pop    esi
c001f4ed:	5f                   	pop    edi
c001f4ee:	5d                   	pop    ebp
c001f4ef:	c3                   	ret    
c001f4f0:	0f bd e8             	bsr    ebp,eax
c001f4f3:	83 f5 1f             	xor    ebp,0x1f
c001f4f6:	75 1c                	jne    c001f514 <__umoddi3+0x88>
c001f4f8:	39 d8                	cmp    eax,ebx
c001f4fa:	72 04                	jb     c001f500 <__umoddi3+0x74>
c001f4fc:	39 f7                	cmp    edi,esi
c001f4fe:	77 08                	ja     c001f508 <__umoddi3+0x7c>
c001f500:	89 da                	mov    edx,ebx
c001f502:	29 fe                	sub    esi,edi
c001f504:	19 c2                	sbb    edx,eax
c001f506:	89 f1                	mov    ecx,esi
c001f508:	89 c8                	mov    eax,ecx
c001f50a:	83 c4 1c             	add    esp,0x1c
c001f50d:	5b                   	pop    ebx
c001f50e:	5e                   	pop    esi
c001f50f:	5f                   	pop    edi
c001f510:	5d                   	pop    ebp
c001f511:	c3                   	ret    
c001f512:	66 90                	xchg   ax,ax
c001f514:	ba 20 00 00 00       	mov    edx,0x20
c001f519:	29 ea                	sub    edx,ebp
c001f51b:	89 e9                	mov    ecx,ebp
c001f51d:	d3 e0                	shl    eax,cl
c001f51f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f523:	89 f8                	mov    eax,edi
c001f525:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f529:	88 d1                	mov    cl,dl
c001f52b:	d3 e8                	shr    eax,cl
c001f52d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f531:	09 c1                	or     ecx,eax
c001f533:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f537:	89 e9                	mov    ecx,ebp
c001f539:	d3 e7                	shl    edi,cl
c001f53b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f53f:	89 d8                	mov    eax,ebx
c001f541:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f545:	88 d1                	mov    cl,dl
c001f547:	d3 e8                	shr    eax,cl
c001f549:	89 c7                	mov    edi,eax
c001f54b:	89 e9                	mov    ecx,ebp
c001f54d:	d3 e3                	shl    ebx,cl
c001f54f:	89 f0                	mov    eax,esi
c001f551:	88 d1                	mov    cl,dl
c001f553:	d3 e8                	shr    eax,cl
c001f555:	09 d8                	or     eax,ebx
c001f557:	89 e9                	mov    ecx,ebp
c001f559:	d3 e6                	shl    esi,cl
c001f55b:	89 f3                	mov    ebx,esi
c001f55d:	89 fa                	mov    edx,edi
c001f55f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f563:	89 d1                	mov    ecx,edx
c001f565:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f569:	89 c6                	mov    esi,eax
c001f56b:	89 d7                	mov    edi,edx
c001f56d:	39 d1                	cmp    ecx,edx
c001f56f:	72 27                	jb     c001f598 <__umoddi3+0x10c>
c001f571:	74 21                	je     c001f594 <__umoddi3+0x108>
c001f573:	89 ca                	mov    edx,ecx
c001f575:	29 f3                	sub    ebx,esi
c001f577:	19 fa                	sbb    edx,edi
c001f579:	89 d0                	mov    eax,edx
c001f57b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f57f:	d3 e0                	shl    eax,cl
c001f581:	89 e9                	mov    ecx,ebp
c001f583:	d3 eb                	shr    ebx,cl
c001f585:	09 d8                	or     eax,ebx
c001f587:	d3 ea                	shr    edx,cl
c001f589:	83 c4 1c             	add    esp,0x1c
c001f58c:	5b                   	pop    ebx
c001f58d:	5e                   	pop    esi
c001f58e:	5f                   	pop    edi
c001f58f:	5d                   	pop    ebp
c001f590:	c3                   	ret    
c001f591:	8d 76 00             	lea    esi,[esi+0x0]
c001f594:	39 c3                	cmp    ebx,eax
c001f596:	73 db                	jae    c001f573 <__umoddi3+0xe7>
c001f598:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f59c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f5a0:	89 d7                	mov    edi,edx
c001f5a2:	89 c6                	mov    esi,eax
c001f5a4:	eb cd                	jmp    c001f573 <__umoddi3+0xe7>
c001f5a6:	66 90                	xchg   ax,ax
c001f5a8:	66 90                	xchg   ax,ax
c001f5aa:	66 90                	xchg   ax,ax
c001f5ac:	66 90                	xchg   ax,ax
c001f5ae:	66 90                	xchg   ax,ax

c001f5b0 <fabs>:
c001f5b0:	83 ec 0c             	sub    esp,0xc
c001f5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f5be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f5c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f5c7:	dd 04 24             	fld    QWORD PTR [esp]
c001f5ca:	83 c4 0c             	add    esp,0xc
c001f5cd:	c3                   	ret    
c001f5ce:	66 90                	xchg   ax,ax

c001f5d0 <lrint>:
c001f5d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f5d4:	83 ec 04             	sub    esp,0x4
c001f5d7:	db 1c 24             	fistp  DWORD PTR [esp]
c001f5da:	58                   	pop    eax
c001f5db:	c3                   	ret    

c001f5dc <lrintf>:
c001f5dc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f5e0:	83 ec 04             	sub    esp,0x4
c001f5e3:	db 1c 24             	fistp  DWORD PTR [esp]
c001f5e6:	58                   	pop    eax
c001f5e7:	c3                   	ret    

Disassembly of section .init:

c001f5e8 <_init>:
c001f5e8:	55                   	push   ebp
c001f5e9:	89 e5                	mov    ebp,esp
c001f5eb:	e8 28 0b fe ff       	call   c0000118 <frame_dummy>
c001f5f0:	e8 a3 fa ff ff       	call   c001f098 <__do_global_ctors_aux>
c001f5f5:	5d                   	pop    ebp
c001f5f6:	c3                   	ret    

Disassembly of section .fini:

c001f5f7 <_fini>:
c001f5f7:	55                   	push   ebp
c001f5f8:	89 e5                	mov    ebp,esp
c001f5fa:	e8 a9 0a fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f5ff:	5d                   	pop    ebp
c001f600:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f602 <Computer::~Computer()>:
c001f602:	83 ec 0c             	sub    esp,0xc
c001f605:	ba 24 11 02 c0       	mov    edx,0xc0021124
c001f60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60e:	89 10                	mov    DWORD PTR [eax],edx
c001f610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f614:	83 ec 0c             	sub    esp,0xc
c001f617:	50                   	push   eax
c001f618:	e8 df 0d ff ff       	call   c00103fc <Device::~Device()>
c001f61d:	83 c4 10             	add    esp,0x10
c001f620:	90                   	nop
c001f621:	83 c4 0c             	add    esp,0xc
c001f624:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f626 <Computer::~Computer()>:
c001f626:	83 ec 0c             	sub    esp,0xc
c001f629:	83 ec 0c             	sub    esp,0xc
c001f62c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f630:	e8 cd ff ff ff       	call   c001f602 <Computer::~Computer()>
c001f635:	83 c4 10             	add    esp,0x10
c001f638:	83 ec 08             	sub    esp,0x8
c001f63b:	68 ec 01 00 00       	push   0x1ec
c001f640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f644:	e8 d2 f9 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001f649:	83 c4 10             	add    esp,0x10
c001f64c:	83 c4 0c             	add    esp,0xc
c001f64f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f650 <idleCommon()>:
c001f650:	83 ec 0c             	sub    esp,0xc
c001f653:	e8 a1 92 ff ff       	call   c00188f9 <lockScheduler()>
c001f658:	e8 e5 95 ff ff       	call   c0018c42 <schedule()>
c001f65d:	83 c4 0c             	add    esp,0xc
c001f660:	e9 96 92 ff ff       	jmp    c00188fb <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f665 <CPU::readCR3()>:
c001f665:	83 ec 10             	sub    esp,0x10
c001f668:	0f 20 d8             	mov    eax,cr3
c001f66b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f66f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f673:	83 c4 10             	add    esp,0x10
c001f676:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f677 <CPU::writeCR3(unsigned long)>:
c001f677:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f67b:	0f 22 d8             	mov    cr3,eax
c001f67e:	90                   	nop
c001f67f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f680 <LinkedList<UnixFile>::~LinkedList()>:
c001f680:	90                   	nop
c001f681:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f682 <LinkedList<UnixFile>::LinkedList()>:
c001f682:	83 ec 0c             	sub    esp,0xc
c001f685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f689:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f693:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6be:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6c5:	83 ec 0c             	sub    esp,0xc
c001f6c8:	68 9a 13 02 c0       	push   0xc002139a
c001f6cd:	e8 6f fa fe ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001f6d2:	83 c4 10             	add    esp,0x10
c001f6d5:	90                   	nop
c001f6d6:	83 c4 0c             	add    esp,0xc
c001f6d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f6da <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f6da:	83 ec 0c             	sub    esp,0xc
c001f6dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f6e2:	75 10                	jne    c001f6f4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f6e4:	83 ec 0c             	sub    esp,0xc
c001f6e7:	68 b4 13 02 c0       	push   0xc00213b4
c001f6ec:	e8 1b 62 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001f6f1:	83 c4 10             	add    esp,0x10
c001f6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6fa:	85 c0                	test   eax,eax
c001f6fc:	74 34                	je     c001f732 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f702:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f705:	85 c0                	test   eax,eax
c001f707:	74 29                	je     c001f732 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f710:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f714:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f71f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f726:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f729:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f730:	eb 65                	jmp    c001f797 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f736:	8b 00                	mov    eax,DWORD PTR [eax]
c001f738:	85 c0                	test   eax,eax
c001f73a:	75 4b                	jne    c001f787 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f740:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f743:	85 c0                	test   eax,eax
c001f745:	75 40                	jne    c001f787 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f74f:	89 10                	mov    DWORD PTR [eax],edx
c001f751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f755:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f759:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f760:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f763:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f771:	85 c0                	test   eax,eax
c001f773:	74 22                	je     c001f797 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f775:	83 ec 0c             	sub    esp,0xc
c001f778:	68 d6 13 02 c0       	push   0xc00213d6
c001f77d:	e8 8a 61 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001f782:	83 c4 10             	add    esp,0x10
c001f785:	eb 10                	jmp    c001f797 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f787:	83 ec 0c             	sub    esp,0xc
c001f78a:	68 e0 13 02 c0       	push   0xc00213e0
c001f78f:	e8 78 61 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001f794:	83 c4 10             	add    esp,0x10
c001f797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f79e:	8d 50 01             	lea    edx,[eax+0x1]
c001f7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7a8:	90                   	nop
c001f7a9:	83 c4 0c             	add    esp,0xc
c001f7ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f7ae <LinkedList<UnixFile>::getFirstElement()>:
c001f7ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f7b6 <LinkedList<UnixFile>::removeFirst()>:
c001f7b6:	83 ec 0c             	sub    esp,0xc
c001f7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7bf:	85 c0                	test   eax,eax
c001f7c1:	75 12                	jne    c001f7d5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f7c3:	83 ec 0c             	sub    esp,0xc
c001f7c6:	68 ec 13 02 c0       	push   0xc00213ec
c001f7cb:	e8 3c 61 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001f7d0:	83 c4 10             	add    esp,0x10
c001f7d3:	eb 7e                	jmp    c001f853 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7df:	85 c0                	test   eax,eax
c001f7e1:	74 10                	je     c001f7f3 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f7e3:	83 ec 0c             	sub    esp,0xc
c001f7e6:	68 37 14 02 c0       	push   0xc0021437
c001f7eb:	e8 1c 61 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001f7f0:	83 c4 10             	add    esp,0x10
c001f7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7fc:	85 c0                	test   eax,eax
c001f7fe:	75 33                	jne    c001f833 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f804:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f819:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f81c:	83 f8 01             	cmp    eax,0x1
c001f81f:	74 21                	je     c001f842 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f821:	83 ec 0c             	sub    esp,0xc
c001f824:	68 10 14 02 c0       	push   0xc0021410
c001f829:	e8 de 60 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001f82e:	83 c4 10             	add    esp,0x10
c001f831:	eb 0f                	jmp    c001f842 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f837:	8b 00                	mov    eax,DWORD PTR [eax]
c001f839:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f840:	89 10                	mov    DWORD PTR [eax],edx
c001f842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f846:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f849:	8d 50 ff             	lea    edx,[eax-0x1]
c001f84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f850:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f853:	83 c4 0c             	add    esp,0xc
c001f856:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f858 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f858:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f85c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f85f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f860 <DriverlessDevice::~DriverlessDevice()>:
c001f860:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c001f865:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f869:	89 10                	mov    DWORD PTR [eax],edx
c001f86b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f86f:	50                   	push   eax
c001f870:	e8 87 0b ff ff       	call   c00103fc <Device::~Device()>
c001f875:	83 c4 04             	add    esp,0x4
c001f878:	90                   	nop
c001f879:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f87a <DriverlessDevice::~DriverlessDevice()>:
c001f87a:	83 ec 0c             	sub    esp,0xc
c001f87d:	83 ec 0c             	sub    esp,0xc
c001f880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f884:	e8 d7 ff ff ff       	call   c001f860 <DriverlessDevice::~DriverlessDevice()>
c001f889:	83 c4 10             	add    esp,0x10
c001f88c:	83 ec 08             	sub    esp,0x8
c001f88f:	68 58 01 00 00       	push   0x158
c001f894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f898:	e8 7e f7 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001f89d:	83 c4 10             	add    esp,0x10
c001f8a0:	83 c4 0c             	add    esp,0xc
c001f8a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f8a4 <LinkedList<Device>::addElement(Device*)>:
c001f8a4:	83 ec 0c             	sub    esp,0xc
c001f8a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f8ac:	75 10                	jne    c001f8be <LinkedList<Device>::addElement(Device*)+0x1a>
c001f8ae:	83 ec 0c             	sub    esp,0xc
c001f8b1:	68 b4 13 02 c0       	push   0xc00213b4
c001f8b6:	e8 51 60 ff ff       	call   c001590c <Krnl::panic(char const*)>
c001f8bb:	83 c4 10             	add    esp,0x10
c001f8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c4:	85 c0                	test   eax,eax
c001f8c6:	74 3a                	je     c001f902 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8cf:	85 c0                	test   eax,eax
c001f8d1:	74 2f                	je     c001f902 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8de:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8f6:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f900:	eb 68                	jmp    c001f96a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f906:	8b 00                	mov    eax,DWORD PTR [eax]
c001f908:	85 c0                	test   eax,eax
c001f90a:	75 4e                	jne    c001f95a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f910:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f913:	85 c0                	test   eax,eax
c001f915:	75 43                	jne    c001f95a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f91f:	89 10                	mov    DWORD PTR [eax],edx
c001f921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f925:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f929:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f930:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f933:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f941:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f944:	85 c0                	test   eax,eax
c001f946:	74 22                	je     c001f96a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f948:	83 ec 0c             	sub    esp,0xc
c001f94b:	68 d6 13 02 c0       	push   0xc00213d6
c001f950:	e8 b7 5f ff ff       	call   c001590c <Krnl::panic(char const*)>
c001f955:	83 c4 10             	add    esp,0x10
c001f958:	eb 10                	jmp    c001f96a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f95a:	83 ec 0c             	sub    esp,0xc
c001f95d:	68 e0 13 02 c0       	push   0xc00213e0
c001f962:	e8 a5 5f ff ff       	call   c001590c <Krnl::panic(char const*)>
c001f967:	83 c4 10             	add    esp,0x10
c001f96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f971:	8d 50 01             	lea    edx,[eax+0x1]
c001f974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f978:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f97b:	90                   	nop
c001f97c:	83 c4 0c             	add    esp,0xc
c001f97f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f980 <LinkedList<Device>::LinkedList()>:
c001f980:	83 ec 0c             	sub    esp,0xc
c001f983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f987:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f991:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9bc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9c3:	83 ec 0c             	sub    esp,0xc
c001f9c6:	68 9a 13 02 c0       	push   0xc002139a
c001f9cb:	e8 71 f7 fe ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001f9d0:	83 c4 10             	add    esp,0x10
c001f9d3:	90                   	nop
c001f9d4:	83 c4 0c             	add    esp,0xc
c001f9d7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001f9d8 <CPU::readCR0()>:
c001f9d8:	83 ec 10             	sub    esp,0x10
c001f9db:	0f 20 c0             	mov    eax,cr0
c001f9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f9e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9e6:	83 c4 10             	add    esp,0x10
c001f9e9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001f9ea <CPU::writeCR0(unsigned long)>:
c001f9ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ee:	0f 22 c0             	mov    cr0,eax
c001f9f1:	90                   	nop
c001f9f2:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f9f3 <CPU::readDR0()>:
c001f9f3:	83 ec 10             	sub    esp,0x10
c001f9f6:	0f 21 c0             	mov    eax,db0
c001f9f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f9fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa01:	83 c4 10             	add    esp,0x10
c001fa04:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fa05 <CPU::readDR1()>:
c001fa05:	83 ec 10             	sub    esp,0x10
c001fa08:	0f 21 c8             	mov    eax,db1
c001fa0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa13:	83 c4 10             	add    esp,0x10
c001fa16:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fa17 <CPU::readDR2()>:
c001fa17:	83 ec 10             	sub    esp,0x10
c001fa1a:	0f 21 d0             	mov    eax,db2
c001fa1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa25:	83 c4 10             	add    esp,0x10
c001fa28:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fa29 <CPU::readDR3()>:
c001fa29:	83 ec 10             	sub    esp,0x10
c001fa2c:	0f 21 d8             	mov    eax,db3
c001fa2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa37:	83 c4 10             	add    esp,0x10
c001fa3a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fa3b <CPU::readDR6()>:
c001fa3b:	83 ec 10             	sub    esp,0x10
c001fa3e:	0f 21 f0             	mov    eax,db6
c001fa41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa49:	83 c4 10             	add    esp,0x10
c001fa4c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fa4d <CPU::readDR7()>:
c001fa4d:	83 ec 10             	sub    esp,0x10
c001fa50:	0f 21 f8             	mov    eax,db7
c001fa53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa5b:	83 c4 10             	add    esp,0x10
c001fa5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fa60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fa60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa66:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fa68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fa68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa6e:	85 c0                	test   eax,eax
c001fa70:	75 0e                	jne    c001fa80 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fa72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa79:	85 c0                	test   eax,eax
c001fa7b:	75 03                	jne    c001fa80 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fa7d:	b0 01                	mov    al,0x1
c001fa7f:	c3                   	ret    
c001fa80:	b0 00                	mov    al,0x0
c001fa82:	90                   	nop
c001fa83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fa84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fa84:	83 ec 0c             	sub    esp,0xc
c001fa87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa8d:	85 c0                	test   eax,eax
c001fa8f:	75 15                	jne    c001faa6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fa91:	83 ec 0c             	sub    esp,0xc
c001fa94:	68 ec 13 02 c0       	push   0xc00213ec
c001fa99:	e8 6e 5e ff ff       	call   c001590c <Krnl::panic(char const*)>
c001fa9e:	83 c4 10             	add    esp,0x10
c001faa1:	e9 88 00 00 00       	jmp    c001fb2e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001faa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fab0:	85 c0                	test   eax,eax
c001fab2:	0f 95 c0             	setne  al
c001fab5:	84 c0                	test   al,al
c001fab7:	74 10                	je     c001fac9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fab9:	83 ec 0c             	sub    esp,0xc
c001fabc:	68 37 14 02 c0       	push   0xc0021437
c001fac1:	e8 46 5e ff ff       	call   c001590c <Krnl::panic(char const*)>
c001fac6:	83 c4 10             	add    esp,0x10
c001fac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facd:	8b 00                	mov    eax,DWORD PTR [eax]
c001facf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fad2:	85 c0                	test   eax,eax
c001fad4:	0f 94 c0             	sete   al
c001fad7:	84 c0                	test   al,al
c001fad9:	74 33                	je     c001fb0e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faf7:	83 f8 01             	cmp    eax,0x1
c001fafa:	74 21                	je     c001fb1d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	68 10 14 02 c0       	push   0xc0021410
c001fb04:	e8 03 5e ff ff       	call   c001590c <Krnl::panic(char const*)>
c001fb09:	83 c4 10             	add    esp,0x10
c001fb0c:	eb 0f                	jmp    c001fb1d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb12:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb14:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1b:	89 10                	mov    DWORD PTR [eax],edx
c001fb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb24:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb2e:	83 c4 0c             	add    esp,0xc
c001fb31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fb32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fb32:	83 ec 0c             	sub    esp,0xc
c001fb35:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb3a:	75 10                	jne    c001fb4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fb3c:	83 ec 0c             	sub    esp,0xc
c001fb3f:	68 b4 13 02 c0       	push   0xc00213b4
c001fb44:	e8 c3 5d ff ff       	call   c001590c <Krnl::panic(char const*)>
c001fb49:	83 c4 10             	add    esp,0x10
c001fb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb52:	85 c0                	test   eax,eax
c001fb54:	74 34                	je     c001fb8a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb5d:	85 c0                	test   eax,eax
c001fb5f:	74 29                	je     c001fb8a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb6c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb81:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb88:	eb 65                	jmp    c001fbef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb90:	85 c0                	test   eax,eax
c001fb92:	75 4b                	jne    c001fbdf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb9b:	85 c0                	test   eax,eax
c001fb9d:	75 40                	jne    c001fbdf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fba7:	89 10                	mov    DWORD PTR [eax],edx
c001fba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbb1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbbb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fbc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbc9:	85 c0                	test   eax,eax
c001fbcb:	74 22                	je     c001fbef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fbcd:	83 ec 0c             	sub    esp,0xc
c001fbd0:	68 d6 13 02 c0       	push   0xc00213d6
c001fbd5:	e8 32 5d ff ff       	call   c001590c <Krnl::panic(char const*)>
c001fbda:	83 c4 10             	add    esp,0x10
c001fbdd:	eb 10                	jmp    c001fbef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fbdf:	83 ec 0c             	sub    esp,0xc
c001fbe2:	68 e0 13 02 c0       	push   0xc00213e0
c001fbe7:	e8 20 5d ff ff       	call   c001590c <Krnl::panic(char const*)>
c001fbec:	83 c4 10             	add    esp,0x10
c001fbef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbf6:	8d 50 01             	lea    edx,[eax+0x1]
c001fbf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc00:	90                   	nop
c001fc01:	83 c4 0c             	add    esp,0xc
c001fc04:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fc06 <ACPI::~ACPI()>:
c001fc06:	83 ec 0c             	sub    esp,0xc
c001fc09:	ba 3c 22 02 c0       	mov    edx,0xc002223c
c001fc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc12:	89 10                	mov    DWORD PTR [eax],edx
c001fc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc18:	83 ec 0c             	sub    esp,0xc
c001fc1b:	50                   	push   eax
c001fc1c:	e8 db 07 ff ff       	call   c00103fc <Device::~Device()>
c001fc21:	83 c4 10             	add    esp,0x10
c001fc24:	90                   	nop
c001fc25:	83 c4 0c             	add    esp,0xc
c001fc28:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fc2a <ACPI::~ACPI()>:
c001fc2a:	83 ec 0c             	sub    esp,0xc
c001fc2d:	83 ec 0c             	sub    esp,0xc
c001fc30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc34:	e8 cd ff ff ff       	call   c001fc06 <ACPI::~ACPI()>
c001fc39:	83 c4 10             	add    esp,0x10
c001fc3c:	83 ec 08             	sub    esp,0x8
c001fc3f:	68 68 22 00 00       	push   0x2268
c001fc44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc48:	e8 ce f3 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001fc4d:	83 c4 10             	add    esp,0x10
c001fc50:	83 c4 0c             	add    esp,0xc
c001fc53:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fc54 <CPU::~CPU()>:
c001fc54:	83 ec 0c             	sub    esp,0xc
c001fc57:	ba 2c 26 02 c0       	mov    edx,0xc002262c
c001fc5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc60:	89 10                	mov    DWORD PTR [eax],edx
c001fc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc66:	83 ec 0c             	sub    esp,0xc
c001fc69:	50                   	push   eax
c001fc6a:	e8 8d 07 ff ff       	call   c00103fc <Device::~Device()>
c001fc6f:	83 c4 10             	add    esp,0x10
c001fc72:	90                   	nop
c001fc73:	83 c4 0c             	add    esp,0xc
c001fc76:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fc78 <CPU::~CPU()>:
c001fc78:	83 ec 0c             	sub    esp,0xc
c001fc7b:	83 ec 0c             	sub    esp,0xc
c001fc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc82:	e8 cd ff ff ff       	call   c001fc54 <CPU::~CPU()>
c001fc87:	83 c4 10             	add    esp,0x10
c001fc8a:	83 ec 08             	sub    esp,0x8
c001fc8d:	68 98 11 00 00       	push   0x1198
c001fc92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc96:	e8 80 f3 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001fc9b:	83 c4 10             	add    esp,0x10
c001fc9e:	83 c4 0c             	add    esp,0xc
c001fca1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fca2 <CPU::readCR4()>:
c001fca2:	83 ec 10             	sub    esp,0x10
c001fca5:	0f 20 e0             	mov    eax,cr4
c001fca8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcb0:	83 c4 10             	add    esp,0x10
c001fcb3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fcb4 <CPU::writeDR7(unsigned long)>:
c001fcb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb8:	0f 23 f8             	mov    db7,eax
c001fcbb:	90                   	nop
c001fcbc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fcbd <CPU::writeCR4(unsigned long)>:
c001fcbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc1:	0f 22 e0             	mov    cr4,eax
c001fcc4:	90                   	nop
c001fcc5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fcc6 <CPU::readCR2()>:
c001fcc6:	83 ec 10             	sub    esp,0x10
c001fcc9:	0f 20 d0             	mov    eax,cr2
c001fccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcd4:	83 c4 10             	add    esp,0x10
c001fcd7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fcd8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fcd8:	90                   	nop
c001fcd9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fcda <ThreadControlBlock::ThreadControlBlock()>:
c001fcda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcde:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fce5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fcf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf4:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fcfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcff:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fd06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd0a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fd0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd12:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fd16:	90                   	nop
c001fd17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fd18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fd18:	83 ec 0c             	sub    esp,0xc
c001fd1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd29:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd34:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd54:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd5b:	83 ec 0c             	sub    esp,0xc
c001fd5e:	68 9a 13 02 c0       	push   0xc002139a
c001fd63:	e8 d9 f3 fe ff       	call   c000f141 <Dbg::kprintf(char const*, ...)>
c001fd68:	83 c4 10             	add    esp,0x10
c001fd6b:	90                   	nop
c001fd6c:	83 c4 0c             	add    esp,0xc
c001fd6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fd70 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fd70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd74:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd77:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fd78 <PCI::~PCI()>:
c001fd78:	83 ec 0c             	sub    esp,0xc
c001fd7b:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c001fd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd84:	89 10                	mov    DWORD PTR [eax],edx
c001fd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8a:	83 ec 0c             	sub    esp,0xc
c001fd8d:	50                   	push   eax
c001fd8e:	e8 73 00 ff ff       	call   c000fe06 <Bus::~Bus()>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	90                   	nop
c001fd97:	83 c4 0c             	add    esp,0xc
c001fd9a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fd9c <PCI::~PCI()>:
c001fd9c:	83 ec 0c             	sub    esp,0xc
c001fd9f:	83 ec 0c             	sub    esp,0xc
c001fda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda6:	e8 cd ff ff ff       	call   c001fd78 <PCI::~PCI()>
c001fdab:	83 c4 10             	add    esp,0x10
c001fdae:	83 ec 08             	sub    esp,0x8
c001fdb1:	68 58 01 00 00       	push   0x158
c001fdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdba:	e8 5c f2 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001fdbf:	83 c4 10             	add    esp,0x10
c001fdc2:	83 c4 0c             	add    esp,0xc
c001fdc5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fdc6 <IDE::~IDE()>:
c001fdc6:	83 ec 0c             	sub    esp,0xc
c001fdc9:	ba 10 35 02 c0       	mov    edx,0xc0023510
c001fdce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd2:	89 10                	mov    DWORD PTR [eax],edx
c001fdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd8:	83 ec 0c             	sub    esp,0xc
c001fddb:	50                   	push   eax
c001fddc:	e8 2d 0b ff ff       	call   c001090e <HardDiskController::~HardDiskController()>
c001fde1:	83 c4 10             	add    esp,0x10
c001fde4:	90                   	nop
c001fde5:	83 c4 0c             	add    esp,0xc
c001fde8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fdea <IDE::~IDE()>:
c001fdea:	83 ec 0c             	sub    esp,0xc
c001fded:	83 ec 0c             	sub    esp,0xc
c001fdf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf4:	e8 cd ff ff ff       	call   c001fdc6 <IDE::~IDE()>
c001fdf9:	83 c4 10             	add    esp,0x10
c001fdfc:	83 ec 08             	sub    esp,0x8
c001fdff:	68 70 02 00 00       	push   0x270
c001fe04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe08:	e8 0e f2 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001fe0d:	83 c4 10             	add    esp,0x10
c001fe10:	83 c4 0c             	add    esp,0xc
c001fe13:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fe14 <ATA::~ATA()>:
c001fe14:	83 ec 0c             	sub    esp,0xc
c001fe17:	ba 60 35 02 c0       	mov    edx,0xc0023560
c001fe1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe20:	89 10                	mov    DWORD PTR [eax],edx
c001fe22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe26:	83 ec 0c             	sub    esp,0xc
c001fe29:	50                   	push   eax
c001fe2a:	e8 bd 0b ff ff       	call   c00109ec <PhysicalDisk::~PhysicalDisk()>
c001fe2f:	83 c4 10             	add    esp,0x10
c001fe32:	90                   	nop
c001fe33:	83 c4 0c             	add    esp,0xc
c001fe36:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fe38 <ATA::~ATA()>:
c001fe38:	83 ec 0c             	sub    esp,0xc
c001fe3b:	83 ec 0c             	sub    esp,0xc
c001fe3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe42:	e8 cd ff ff ff       	call   c001fe14 <ATA::~ATA()>
c001fe47:	83 c4 10             	add    esp,0x10
c001fe4a:	83 ec 08             	sub    esp,0x8
c001fe4d:	68 7c 01 00 00       	push   0x17c
c001fe52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe56:	e8 c0 f1 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001fe5b:	83 c4 10             	add    esp,0x10
c001fe5e:	83 c4 0c             	add    esp,0xc
c001fe61:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fe62 <ATAPI::~ATAPI()>:
c001fe62:	83 ec 0c             	sub    esp,0xc
c001fe65:	ba cc 35 02 c0       	mov    edx,0xc00235cc
c001fe6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6e:	89 10                	mov    DWORD PTR [eax],edx
c001fe70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe74:	83 ec 0c             	sub    esp,0xc
c001fe77:	50                   	push   eax
c001fe78:	e8 6f 0b ff ff       	call   c00109ec <PhysicalDisk::~PhysicalDisk()>
c001fe7d:	83 c4 10             	add    esp,0x10
c001fe80:	90                   	nop
c001fe81:	83 c4 0c             	add    esp,0xc
c001fe84:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fe86 <ATAPI::~ATAPI()>:
c001fe86:	83 ec 0c             	sub    esp,0xc
c001fe89:	83 ec 0c             	sub    esp,0xc
c001fe8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe90:	e8 cd ff ff ff       	call   c001fe62 <ATAPI::~ATAPI()>
c001fe95:	83 c4 10             	add    esp,0x10
c001fe98:	83 ec 08             	sub    esp,0x8
c001fe9b:	68 80 01 00 00       	push   0x180
c001fea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fea4:	e8 72 f1 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001fea9:	83 c4 10             	add    esp,0x10
c001feac:	83 c4 0c             	add    esp,0xc
c001feaf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001feb0 <AVX::~AVX()>:
c001feb0:	83 ec 0c             	sub    esp,0xc
c001feb3:	ba 08 36 02 c0       	mov    edx,0xc0023608
c001feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febc:	89 10                	mov    DWORD PTR [eax],edx
c001febe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec2:	83 ec 0c             	sub    esp,0xc
c001fec5:	50                   	push   eax
c001fec6:	e8 a5 0b ff ff       	call   c0010a70 <FPU::~FPU()>
c001fecb:	83 c4 10             	add    esp,0x10
c001fece:	90                   	nop
c001fecf:	83 c4 0c             	add    esp,0xc
c001fed2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001fed4 <AVX::~AVX()>:
c001fed4:	83 ec 0c             	sub    esp,0xc
c001fed7:	83 ec 0c             	sub    esp,0xc
c001feda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fede:	e8 cd ff ff ff       	call   c001feb0 <AVX::~AVX()>
c001fee3:	83 c4 10             	add    esp,0x10
c001fee6:	83 ec 08             	sub    esp,0x8
c001fee9:	68 58 01 00 00       	push   0x158
c001feee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fef2:	e8 24 f1 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001fef7:	83 c4 10             	add    esp,0x10
c001fefa:	83 c4 0c             	add    esp,0xc
c001fefd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001fefe <MMX::~MMX()>:
c001fefe:	83 ec 0c             	sub    esp,0xc
c001ff01:	ba 48 36 02 c0       	mov    edx,0xc0023648
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	89 10                	mov    DWORD PTR [eax],edx
c001ff0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff10:	83 ec 0c             	sub    esp,0xc
c001ff13:	50                   	push   eax
c001ff14:	e8 57 0b ff ff       	call   c0010a70 <FPU::~FPU()>
c001ff19:	83 c4 10             	add    esp,0x10
c001ff1c:	90                   	nop
c001ff1d:	83 c4 0c             	add    esp,0xc
c001ff20:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ff22 <MMX::~MMX()>:
c001ff22:	83 ec 0c             	sub    esp,0xc
c001ff25:	83 ec 0c             	sub    esp,0xc
c001ff28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff2c:	e8 cd ff ff ff       	call   c001fefe <MMX::~MMX()>
c001ff31:	83 c4 10             	add    esp,0x10
c001ff34:	83 ec 08             	sub    esp,0x8
c001ff37:	68 58 01 00 00       	push   0x158
c001ff3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff40:	e8 d6 f0 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001ff45:	83 c4 10             	add    esp,0x10
c001ff48:	83 c4 0c             	add    esp,0xc
c001ff4b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ff4c <SSE::~SSE()>:
c001ff4c:	83 ec 0c             	sub    esp,0xc
c001ff4f:	ba 88 36 02 c0       	mov    edx,0xc0023688
c001ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff58:	89 10                	mov    DWORD PTR [eax],edx
c001ff5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5e:	83 ec 0c             	sub    esp,0xc
c001ff61:	50                   	push   eax
c001ff62:	e8 09 0b ff ff       	call   c0010a70 <FPU::~FPU()>
c001ff67:	83 c4 10             	add    esp,0x10
c001ff6a:	90                   	nop
c001ff6b:	83 c4 0c             	add    esp,0xc
c001ff6e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001ff70 <SSE::~SSE()>:
c001ff70:	83 ec 0c             	sub    esp,0xc
c001ff73:	83 ec 0c             	sub    esp,0xc
c001ff76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff7a:	e8 cd ff ff ff       	call   c001ff4c <SSE::~SSE()>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	83 ec 08             	sub    esp,0x8
c001ff85:	68 58 01 00 00       	push   0x158
c001ff8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8e:	e8 88 f0 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001ff93:	83 c4 10             	add    esp,0x10
c001ff96:	83 c4 0c             	add    esp,0xc
c001ff99:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001ff9a <x87::~x87()>:
c001ff9a:	83 ec 0c             	sub    esp,0xc
c001ff9d:	ba c8 36 02 c0       	mov    edx,0xc00236c8
c001ffa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa6:	89 10                	mov    DWORD PTR [eax],edx
c001ffa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffac:	83 ec 0c             	sub    esp,0xc
c001ffaf:	50                   	push   eax
c001ffb0:	e8 bb 0a ff ff       	call   c0010a70 <FPU::~FPU()>
c001ffb5:	83 c4 10             	add    esp,0x10
c001ffb8:	90                   	nop
c001ffb9:	83 c4 0c             	add    esp,0xc
c001ffbc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001ffbe <x87::~x87()>:
c001ffbe:	83 ec 0c             	sub    esp,0xc
c001ffc1:	83 ec 0c             	sub    esp,0xc
c001ffc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc8:	e8 cd ff ff ff       	call   c001ff9a <x87::~x87()>
c001ffcd:	83 c4 10             	add    esp,0x10
c001ffd0:	83 ec 08             	sub    esp,0x8
c001ffd3:	68 58 01 00 00       	push   0x158
c001ffd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffdc:	e8 3a f0 fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c001ffe1:	83 c4 10             	add    esp,0x10
c001ffe4:	83 c4 0c             	add    esp,0xc
c001ffe7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ffe8 <IOAPIC::~IOAPIC()>:
c001ffe8:	83 ec 0c             	sub    esp,0xc
c001ffeb:	ba 20 38 02 c0       	mov    edx,0xc0023820
c001fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff4:	89 10                	mov    DWORD PTR [eax],edx
c001fff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffa:	83 ec 0c             	sub    esp,0xc
c001fffd:	50                   	push   eax
c001fffe:	e8 f9 03 ff ff       	call   c00103fc <Device::~Device()>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	90                   	nop
c0020007:	83 c4 0c             	add    esp,0xc
c002000a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002000c <IOAPIC::~IOAPIC()>:
c002000c:	83 ec 0c             	sub    esp,0xc
c002000f:	83 ec 0c             	sub    esp,0xc
c0020012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020016:	e8 cd ff ff ff       	call   c001ffe8 <IOAPIC::~IOAPIC()>
c002001b:	83 c4 10             	add    esp,0x10
c002001e:	83 ec 08             	sub    esp,0x8
c0020021:	68 68 01 00 00       	push   0x168
c0020026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002002a:	e8 ec ef fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c002002f:	83 c4 10             	add    esp,0x10
c0020032:	83 c4 0c             	add    esp,0xc
c0020035:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0020036 <APIC::~APIC()>:
c0020036:	83 ec 0c             	sub    esp,0xc
c0020039:	ba d8 37 02 c0       	mov    edx,0xc00237d8
c002003e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020042:	89 10                	mov    DWORD PTR [eax],edx
c0020044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020048:	83 ec 0c             	sub    esp,0xc
c002004b:	50                   	push   eax
c002004c:	e8 e9 0e ff ff       	call   c0010f3a <InterruptController::~InterruptController()>
c0020051:	83 c4 10             	add    esp,0x10
c0020054:	90                   	nop
c0020055:	83 c4 0c             	add    esp,0xc
c0020058:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002005a <APIC::~APIC()>:
c002005a:	83 ec 0c             	sub    esp,0xc
c002005d:	83 ec 0c             	sub    esp,0xc
c0020060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020064:	e8 cd ff ff ff       	call   c0020036 <APIC::~APIC()>
c0020069:	83 c4 10             	add    esp,0x10
c002006c:	83 ec 08             	sub    esp,0x8
c002006f:	68 58 21 00 00       	push   0x2158
c0020074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020078:	e8 9e ef fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c002007d:	83 c4 10             	add    esp,0x10
c0020080:	83 c4 0c             	add    esp,0xc
c0020083:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0020084 <PIC::~PIC()>:
c0020084:	83 ec 0c             	sub    esp,0xc
c0020087:	ba 70 38 02 c0       	mov    edx,0xc0023870
c002008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020090:	89 10                	mov    DWORD PTR [eax],edx
c0020092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020096:	83 ec 0c             	sub    esp,0xc
c0020099:	50                   	push   eax
c002009a:	e8 9b 0e ff ff       	call   c0010f3a <InterruptController::~InterruptController()>
c002009f:	83 c4 10             	add    esp,0x10
c00200a2:	90                   	nop
c00200a3:	83 c4 0c             	add    esp,0xc
c00200a6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00200a8 <PIC::~PIC()>:
c00200a8:	83 ec 0c             	sub    esp,0xc
c00200ab:	83 ec 0c             	sub    esp,0xc
c00200ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200b2:	e8 cd ff ff ff       	call   c0020084 <PIC::~PIC()>
c00200b7:	83 c4 10             	add    esp,0x10
c00200ba:	83 ec 08             	sub    esp,0x8
c00200bd:	68 58 21 00 00       	push   0x2158
c00200c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c6:	e8 50 ef fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c00200cb:	83 c4 10             	add    esp,0x10
c00200ce:	83 c4 0c             	add    esp,0xc
c00200d1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00200d2 <APICTimer::~APICTimer()>:
c00200d2:	83 ec 0c             	sub    esp,0xc
c00200d5:	ba c4 38 02 c0       	mov    edx,0xc00238c4
c00200da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200de:	89 10                	mov    DWORD PTR [eax],edx
c00200e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e4:	83 ec 0c             	sub    esp,0xc
c00200e7:	50                   	push   eax
c00200e8:	e8 7b 2b ff ff       	call   c0012c68 <Timer::~Timer()>
c00200ed:	83 c4 10             	add    esp,0x10
c00200f0:	90                   	nop
c00200f1:	83 c4 0c             	add    esp,0xc
c00200f4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00200f6 <APICTimer::~APICTimer()>:
c00200f6:	83 ec 0c             	sub    esp,0xc
c00200f9:	83 ec 0c             	sub    esp,0xc
c00200fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020100:	e8 cd ff ff ff       	call   c00200d2 <APICTimer::~APICTimer()>
c0020105:	83 c4 10             	add    esp,0x10
c0020108:	83 ec 08             	sub    esp,0x8
c002010b:	68 60 01 00 00       	push   0x160
c0020110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020114:	e8 02 ef fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0020119:	83 c4 10             	add    esp,0x10
c002011c:	83 c4 0c             	add    esp,0xc
c002011f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020120 <PIT::~PIT()>:
c0020120:	83 ec 0c             	sub    esp,0xc
c0020123:	ba 14 39 02 c0       	mov    edx,0xc0023914
c0020128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012c:	89 10                	mov    DWORD PTR [eax],edx
c002012e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020132:	83 ec 0c             	sub    esp,0xc
c0020135:	50                   	push   eax
c0020136:	e8 2d 2b ff ff       	call   c0012c68 <Timer::~Timer()>
c002013b:	83 c4 10             	add    esp,0x10
c002013e:	90                   	nop
c002013f:	83 c4 0c             	add    esp,0xc
c0020142:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020144 <PIT::~PIT()>:
c0020144:	83 ec 0c             	sub    esp,0xc
c0020147:	83 ec 0c             	sub    esp,0xc
c002014a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002014e:	e8 cd ff ff ff       	call   c0020120 <PIT::~PIT()>
c0020153:	83 c4 10             	add    esp,0x10
c0020156:	83 ec 08             	sub    esp,0x8
c0020159:	68 5c 01 00 00       	push   0x15c
c002015e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020162:	e8 b4 ee fe ff       	call   c000f01b <operator delete(void*, unsigned long)>
c0020167:	83 c4 10             	add    esp,0x10
c002016a:	83 c4 0c             	add    esp,0xc
c002016d:	c3                   	ret    
