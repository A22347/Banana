
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8a d7 00 00       	call   c000d7aa <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 e9 01 00       	call   c001e968 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 44 f5 01 c0       	mov    ebx,0xc001f544
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 4c f5 01 c0    	cmp    ebx,0xc001f54c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 08 b4 03 c0       	mov    eax,0xc003b408
c0000049:	3d 08 b4 03 c0       	cmp    eax,0xc003b408
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 08 b4 03 c0       	push   0xc003b408
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 08 b4 03 c0       	mov    eax,0xc003b408
c0000075:	2d 08 b4 03 c0       	sub    eax,0xc003b408
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 08 b4 03 c0       	push   0xc003b408
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 b5 03 c0 00 	cmp    BYTE PTR ds:0xc003b5a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 54 f5 01 c0       	mov    ebx,0xc001f554
c00000bb:	81 eb 50 f5 01 c0    	sub    ebx,0xc001f550
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 50 f5 01 c0       	mov    esi,0xc001f550
c00000ca:	a1 ac b5 03 c0       	mov    eax,ds:0xc003b5ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac b5 03 c0       	mov    ds:0xc003b5ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac b5 03 c0       	mov    eax,ds:0xc003b5ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 08 b4 03 c0       	push   0xc003b408
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 b5 03 c0 01 	mov    BYTE PTR ds:0xc003b5a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 b5 03 c0       	push   0xc003b5b0
c000012c:	68 08 b4 03 c0       	push   0xc003b408
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 d5 20 01 00       	call   c0012334 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 19 dd 00 00       	call   c000df82 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 05 e1 00 00       	call   c000e395 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 ab e8 00 00       	call   c000eb44 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 da dc 00 00       	call   c000df82 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 84 bb 03 c0 	lgdtd  ds:0xc003bb84
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 f7 3f 01 c0       	mov    ecx,0xc0013ff7
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 f7 3f 01 c0       	mov    ecx,0xc0013ff7
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	55                   	push   ebp
c0000570:	89 e5                	mov    ebp,esp
c0000572:	83 ec 10             	sub    esp,0x10
c0000575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000578:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000057b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000057e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0000581:	eb 06                	jmp    c0000589 <memcmp+0x1a>
c0000583:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000586:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c0000589:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000058c:	8d 50 ff             	lea    edx,[eax-0x1]
c000058f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c0000592:	85 c0                	test   eax,eax
c0000594:	74 0e                	je     c00005a4 <memcmp+0x35>
c0000596:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000599:	8a 10                	mov    dl,BYTE PTR [eax]
c000059b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c000059e:	8a 00                	mov    al,BYTE PTR [eax]
c00005a0:	38 c2                	cmp    dl,al
c00005a2:	74 df                	je     c0000583 <memcmp+0x14>
c00005a4:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c00005a8:	74 16                	je     c00005c0 <memcmp+0x51>
c00005aa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005ad:	8a 00                	mov    al,BYTE PTR [eax]
c00005af:	0f b6 d0             	movzx  edx,al
c00005b2:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005b5:	8a 00                	mov    al,BYTE PTR [eax]
c00005b7:	0f b6 c0             	movzx  eax,al
c00005ba:	29 c2                	sub    edx,eax
c00005bc:	89 d0                	mov    eax,edx
c00005be:	eb 05                	jmp    c00005c5 <memcmp+0x56>
c00005c0:	b8 00 00 00 00       	mov    eax,0x0
c00005c5:	c9                   	leave  
c00005c6:	c3                   	ret    

c00005c7 <memmove>:
c00005c7:	55                   	push   ebp
c00005c8:	89 e5                	mov    ebp,esp
c00005ca:	83 ec 10             	sub    esp,0x10
c00005cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005d0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00005d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00005d6:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c00005d9:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005dc:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c00005df:	76 1d                	jbe    c00005fe <memmove+0x37>
c00005e1:	eb 13                	jmp    c00005f6 <memmove+0x2f>
c00005e3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005e6:	8a 10                	mov    dl,BYTE PTR [eax]
c00005e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005eb:	88 10                	mov    BYTE PTR [eax],dl
c00005ed:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00005f0:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c00005f3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00005f6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00005fa:	75 e7                	jne    c00005e3 <memmove+0x1c>
c00005fc:	eb 31                	jmp    c000062f <memmove+0x68>
c00005fe:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000601:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c0000604:	73 29                	jae    c000062f <memmove+0x68>
c0000606:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000609:	48                   	dec    eax
c000060a:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
c000060d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000610:	48                   	dec    eax
c0000611:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
c0000614:	eb 13                	jmp    c0000629 <memmove+0x62>
c0000616:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000619:	8a 10                	mov    dl,BYTE PTR [eax]
c000061b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000061e:	88 10                	mov    BYTE PTR [eax],dl
c0000620:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000623:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
c0000626:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000629:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000062d:	75 e7                	jne    c0000616 <memmove+0x4f>
c000062f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000632:	c9                   	leave  
c0000633:	c3                   	ret    

c0000634 <memcpy>:
c0000634:	55                   	push   ebp
c0000635:	89 e5                	mov    ebp,esp
c0000637:	57                   	push   edi
c0000638:	56                   	push   esi
c0000639:	83 ec 20             	sub    esp,0x20
c000063c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000063f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000645:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0000648:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000064b:	83 e0 03             	and    eax,0x3
c000064e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0000651:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000654:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0000657:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000065a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000065d:	c1 e8 02             	shr    eax,0x2
c0000660:	89 c1                	mov    ecx,eax
c0000662:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000665:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000668:	89 c6                	mov    esi,eax
c000066a:	89 d7                	mov    edi,edx
c000066c:	fc                   	cld    
c000066d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000066f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0000676:	eb 21                	jmp    c0000699 <memcpy+0x65>
c0000678:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000067b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000067e:	01 c2                	add    edx,eax
c0000680:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000683:	01 d0                	add    eax,edx
c0000685:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0000688:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000068b:	01 d1                	add    ecx,edx
c000068d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0000690:	01 ca                	add    edx,ecx
c0000692:	8a 00                	mov    al,BYTE PTR [eax]
c0000694:	88 02                	mov    BYTE PTR [edx],al
c0000696:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0000699:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000069c:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
c000069f:	72 d7                	jb     c0000678 <memcpy+0x44>
c00006a1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00006a4:	83 c4 20             	add    esp,0x20
c00006a7:	5e                   	pop    esi
c00006a8:	5f                   	pop    edi
c00006a9:	5d                   	pop    ebp
c00006aa:	c3                   	ret    

c00006ab <memset>:
c00006ab:	55                   	push   ebp
c00006ac:	89 e5                	mov    ebp,esp
c00006ae:	83 ec 10             	sub    esp,0x10
c00006b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006b4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00006b7:	eb 10                	jmp    c00006c9 <memset+0x1e>
c00006b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00006bc:	88 c2                	mov    dl,al
c00006be:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00006c1:	88 10                	mov    BYTE PTR [eax],dl
c00006c3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00006c6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00006c9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00006cd:	75 ea                	jne    c00006b9 <memset+0xe>
c00006cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006d2:	c9                   	leave  
c00006d3:	c3                   	ret    

c00006d4 <strlen>:
c00006d4:	55                   	push   ebp
c00006d5:	89 e5                	mov    ebp,esp
c00006d7:	83 ec 10             	sub    esp,0x10
c00006da:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c00006e1:	eb 06                	jmp    c00006e9 <strlen+0x15>
c00006e3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00006e6:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c00006e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006ec:	8a 00                	mov    al,BYTE PTR [eax]
c00006ee:	84 c0                	test   al,al
c00006f0:	75 f1                	jne    c00006e3 <strlen+0xf>
c00006f2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00006f5:	c9                   	leave  
c00006f6:	c3                   	ret    

c00006f7 <strpbrk>:
c00006f7:	55                   	push   ebp
c00006f8:	89 e5                	mov    ebp,esp
c00006fa:	83 ec 10             	sub    esp,0x10
c00006fd:	eb 2a                	jmp    c0000729 <strpbrk+0x32>
c00006ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000702:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000705:	eb 16                	jmp    c000071d <strpbrk+0x26>
c0000707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000070a:	8a 10                	mov    dl,BYTE PTR [eax]
c000070c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000070f:	8a 00                	mov    al,BYTE PTR [eax]
c0000711:	38 c2                	cmp    dl,al
c0000713:	75 05                	jne    c000071a <strpbrk+0x23>
c0000715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000718:	eb 1d                	jmp    c0000737 <strpbrk+0x40>
c000071a:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000071d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000720:	8a 00                	mov    al,BYTE PTR [eax]
c0000722:	84 c0                	test   al,al
c0000724:	75 e1                	jne    c0000707 <strpbrk+0x10>
c0000726:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000072c:	8a 00                	mov    al,BYTE PTR [eax]
c000072e:	84 c0                	test   al,al
c0000730:	75 cd                	jne    c00006ff <strpbrk+0x8>
c0000732:	b8 00 00 00 00       	mov    eax,0x0
c0000737:	c9                   	leave  
c0000738:	c3                   	ret    

c0000739 <strtok>:
c0000739:	55                   	push   ebp
c000073a:	89 e5                	mov    ebp,esp
c000073c:	83 ec 10             	sub    esp,0x10
c000073f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000742:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000745:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c0000749:	75 18                	jne    c0000763 <strtok+0x2a>
c000074b:	a1 c8 b5 03 c0       	mov    eax,ds:0xc003b5c8
c0000750:	85 c0                	test   eax,eax
c0000752:	75 07                	jne    c000075b <strtok+0x22>
c0000754:	b8 00 00 00 00       	mov    eax,0x0
c0000759:	eb 6a                	jmp    c00007c5 <strtok+0x8c>
c000075b:	a1 c8 b5 03 c0       	mov    eax,ds:0xc003b5c8
c0000760:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000763:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000766:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000769:	e8 89 ff ff ff       	call   c00006f7 <strpbrk>
c000076e:	83 c4 08             	add    esp,0x8
c0000771:	a3 c8 b5 03 c0       	mov    ds:0xc003b5c8,eax
c0000776:	eb 1f                	jmp    c0000797 <strtok+0x5e>
c0000778:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000077b:	8d 50 01             	lea    edx,[eax+0x1]
c000077e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0000781:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000784:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000787:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000078a:	e8 68 ff ff ff       	call   c00006f7 <strpbrk>
c000078f:	83 c4 08             	add    esp,0x8
c0000792:	a3 c8 b5 03 c0       	mov    ds:0xc003b5c8,eax
c0000797:	a1 c8 b5 03 c0       	mov    eax,ds:0xc003b5c8
c000079c:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c000079f:	74 d7                	je     c0000778 <strtok+0x3f>
c00007a1:	a1 c8 b5 03 c0       	mov    eax,ds:0xc003b5c8
c00007a6:	85 c0                	test   eax,eax
c00007a8:	74 16                	je     c00007c0 <strtok+0x87>
c00007aa:	a1 c8 b5 03 c0       	mov    eax,ds:0xc003b5c8
c00007af:	8d 50 01             	lea    edx,[eax+0x1]
c00007b2:	89 15 c8 b5 03 c0    	mov    DWORD PTR ds:0xc003b5c8,edx
c00007b8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007be:	eb 05                	jmp    c00007c5 <strtok+0x8c>
c00007c0:	b8 00 00 00 00       	mov    eax,0x0
c00007c5:	c9                   	leave  
c00007c6:	c3                   	ret    

c00007c7 <strcpy>:
c00007c7:	55                   	push   ebp
c00007c8:	89 e5                	mov    ebp,esp
c00007ca:	83 ec 10             	sub    esp,0x10
c00007cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00007d0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00007d3:	eb 10                	jmp    c00007e5 <strcpy+0x1e>
c00007d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00007d8:	8a 10                	mov    dl,BYTE PTR [eax]
c00007da:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007dd:	88 10                	mov    BYTE PTR [eax],dl
c00007df:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00007e2:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c00007e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00007e8:	8a 00                	mov    al,BYTE PTR [eax]
c00007ea:	84 c0                	test   al,al
c00007ec:	75 e7                	jne    c00007d5 <strcpy+0xe>
c00007ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007f1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00007f7:	c9                   	leave  
c00007f8:	c3                   	ret    

c00007f9 <strncpy>:
c00007f9:	55                   	push   ebp
c00007fa:	89 e5                	mov    ebp,esp
c00007fc:	83 ec 10             	sub    esp,0x10
c00007ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000802:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000808:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000080b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000080f:	74 2a                	je     c000083b <strncpy+0x42>
c0000811:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000814:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000817:	8d 42 01             	lea    eax,[edx+0x1]
c000081a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000081d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000820:	8d 48 01             	lea    ecx,[eax+0x1]
c0000823:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000826:	8a 12                	mov    dl,BYTE PTR [edx]
c0000828:	88 10                	mov    BYTE PTR [eax],dl
c000082a:	8a 00                	mov    al,BYTE PTR [eax]
c000082c:	84 c0                	test   al,al
c000082e:	75 db                	jne    c000080b <strncpy+0x12>
c0000830:	eb 09                	jmp    c000083b <strncpy+0x42>
c0000832:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000835:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000838:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000083b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000083e:	8d 50 ff             	lea    edx,[eax-0x1]
c0000841:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c0000844:	85 c0                	test   eax,eax
c0000846:	75 ea                	jne    c0000832 <strncpy+0x39>
c0000848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000084b:	c9                   	leave  
c000084c:	c3                   	ret    

c000084d <strcmp>:
c000084d:	55                   	push   ebp
c000084e:	89 e5                	mov    ebp,esp
c0000850:	eb 19                	jmp    c000086b <strcmp+0x1e>
c0000852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000855:	8d 50 01             	lea    edx,[eax+0x1]
c0000858:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c000085b:	8a 00                	mov    al,BYTE PTR [eax]
c000085d:	84 c0                	test   al,al
c000085f:	75 07                	jne    c0000868 <strcmp+0x1b>
c0000861:	b8 00 00 00 00       	mov    eax,0x0
c0000866:	eb 25                	jmp    c000088d <strcmp+0x40>
c0000868:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c000086b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000086e:	8a 10                	mov    dl,BYTE PTR [eax]
c0000870:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000873:	8a 00                	mov    al,BYTE PTR [eax]
c0000875:	38 c2                	cmp    dl,al
c0000877:	74 d9                	je     c0000852 <strcmp+0x5>
c0000879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000087c:	8a 00                	mov    al,BYTE PTR [eax]
c000087e:	0f b6 d0             	movzx  edx,al
c0000881:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000884:	8a 00                	mov    al,BYTE PTR [eax]
c0000886:	0f b6 c0             	movzx  eax,al
c0000889:	29 c2                	sub    edx,eax
c000088b:	89 d0                	mov    eax,edx
c000088d:	5d                   	pop    ebp
c000088e:	c3                   	ret    

c000088f <strchr>:
c000088f:	55                   	push   ebp
c0000890:	89 e5                	mov    ebp,esp
c0000892:	eb 14                	jmp    c00008a8 <strchr+0x19>
c0000894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000897:	8a 00                	mov    al,BYTE PTR [eax]
c0000899:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000089c:	38 d0                	cmp    al,dl
c000089e:	75 05                	jne    c00008a5 <strchr+0x16>
c00008a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008a3:	eb 11                	jmp    c00008b6 <strchr+0x27>
c00008a5:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c00008a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008ab:	8a 00                	mov    al,BYTE PTR [eax]
c00008ad:	84 c0                	test   al,al
c00008af:	75 e3                	jne    c0000894 <strchr+0x5>
c00008b1:	b8 00 00 00 00       	mov    eax,0x0
c00008b6:	5d                   	pop    ebp
c00008b7:	c3                   	ret    

c00008b8 <strncmp>:
c00008b8:	55                   	push   ebp
c00008b9:	89 e5                	mov    ebp,esp
c00008bb:	eb 19                	jmp    c00008d6 <strncmp+0x1e>
c00008bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008c0:	8d 50 01             	lea    edx,[eax+0x1]
c00008c3:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c00008c6:	8a 00                	mov    al,BYTE PTR [eax]
c00008c8:	84 c0                	test   al,al
c00008ca:	75 07                	jne    c00008d3 <strncmp+0x1b>
c00008cc:	b8 00 00 00 00       	mov    eax,0x0
c00008d1:	eb 3f                	jmp    c0000912 <strncmp+0x5a>
c00008d3:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c00008d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00008d9:	8d 50 ff             	lea    edx,[eax-0x1]
c00008dc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c00008df:	85 c0                	test   eax,eax
c00008e1:	74 0e                	je     c00008f1 <strncmp+0x39>
c00008e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008e6:	8a 10                	mov    dl,BYTE PTR [eax]
c00008e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008eb:	8a 00                	mov    al,BYTE PTR [eax]
c00008ed:	38 c2                	cmp    dl,al
c00008ef:	74 cc                	je     c00008bd <strncmp+0x5>
c00008f1:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c00008f5:	74 16                	je     c000090d <strncmp+0x55>
c00008f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008fa:	8a 00                	mov    al,BYTE PTR [eax]
c00008fc:	0f b6 d0             	movzx  edx,al
c00008ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000902:	8a 00                	mov    al,BYTE PTR [eax]
c0000904:	0f b6 c0             	movzx  eax,al
c0000907:	29 c2                	sub    edx,eax
c0000909:	89 d0                	mov    eax,edx
c000090b:	eb 05                	jmp    c0000912 <strncmp+0x5a>
c000090d:	b8 00 00 00 00       	mov    eax,0x0
c0000912:	5d                   	pop    ebp
c0000913:	c3                   	ret    

c0000914 <strcat>:
c0000914:	55                   	push   ebp
c0000915:	89 e5                	mov    ebp,esp
c0000917:	83 ec 10             	sub    esp,0x10
c000091a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000091d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000920:	90                   	nop
c0000921:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000924:	8d 50 01             	lea    edx,[eax+0x1]
c0000927:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000092a:	8a 00                	mov    al,BYTE PTR [eax]
c000092c:	84 c0                	test   al,al
c000092e:	75 f1                	jne    c0000921 <strcat+0xd>
c0000930:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000933:	90                   	nop
c0000934:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000937:	8d 42 01             	lea    eax,[edx+0x1]
c000093a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000093d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000940:	8d 48 01             	lea    ecx,[eax+0x1]
c0000943:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000946:	8a 12                	mov    dl,BYTE PTR [edx]
c0000948:	88 10                	mov    BYTE PTR [eax],dl
c000094a:	8a 00                	mov    al,BYTE PTR [eax]
c000094c:	84 c0                	test   al,al
c000094e:	75 e4                	jne    c0000934 <strcat+0x20>
c0000950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000953:	c9                   	leave  
c0000954:	c3                   	ret    

c0000955 <strncat>:
c0000955:	55                   	push   ebp
c0000956:	89 e5                	mov    ebp,esp
c0000958:	83 ec 10             	sub    esp,0x10
c000095b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000095f:	74 4b                	je     c00009ac <strncat+0x57>
c0000961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000964:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000967:	90                   	nop
c0000968:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000096b:	8d 50 01             	lea    edx,[eax+0x1]
c000096e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0000971:	8a 00                	mov    al,BYTE PTR [eax]
c0000973:	84 c0                	test   al,al
c0000975:	75 f1                	jne    c0000968 <strncat+0x13>
c0000977:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c000097a:	90                   	nop
c000097b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000097e:	8d 42 01             	lea    eax,[edx+0x1]
c0000981:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0000984:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000987:	8d 48 01             	lea    ecx,[eax+0x1]
c000098a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c000098d:	8a 12                	mov    dl,BYTE PTR [edx]
c000098f:	88 10                	mov    BYTE PTR [eax],dl
c0000991:	8a 00                	mov    al,BYTE PTR [eax]
c0000993:	84 c0                	test   al,al
c0000995:	74 09                	je     c00009a0 <strncat+0x4b>
c0000997:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000099a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000099e:	75 db                	jne    c000097b <strncat+0x26>
c00009a0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009a4:	75 06                	jne    c00009ac <strncat+0x57>
c00009a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009a9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00009ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009af:	c9                   	leave  
c00009b0:	c3                   	ret    

c00009b1 <strstr>:
c00009b1:	55                   	push   ebp
c00009b2:	89 e5                	mov    ebp,esp
c00009b4:	83 ec 10             	sub    esp,0x10
c00009b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00009ba:	e8 15 fd ff ff       	call   c00006d4 <strlen>
c00009bf:	83 c4 04             	add    esp,0x4
c00009c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00009c5:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c00009c9:	75 22                	jne    c00009ed <strstr+0x3c>
c00009cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009ce:	eb 32                	jmp    c0000a02 <strstr+0x51>
c00009d0:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00009d3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00009d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00009d9:	e8 91 fb ff ff       	call   c000056f <memcmp>
c00009de:	83 c4 0c             	add    esp,0xc
c00009e1:	85 c0                	test   eax,eax
c00009e3:	75 05                	jne    c00009ea <strstr+0x39>
c00009e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009e8:	eb 18                	jmp    c0000a02 <strstr+0x51>
c00009ea:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c00009ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00009f0:	e8 df fc ff ff       	call   c00006d4 <strlen>
c00009f5:	83 c4 04             	add    esp,0x4
c00009f8:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c00009fb:	76 d3                	jbe    c00009d0 <strstr+0x1f>
c00009fd:	b8 00 00 00 00       	mov    eax,0x0
c0000a02:	c9                   	leave  
c0000a03:	c3                   	ret    

c0000a04 <toupper>:
c0000a04:	55                   	push   ebp
c0000a05:	89 e5                	mov    ebp,esp
c0000a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a0a:	0f b6 c0             	movzx  eax,al
c0000a0d:	8a 80 60 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0aa0]
c0000a13:	0f b6 c0             	movzx  eax,al
c0000a16:	83 e0 02             	and    eax,0x2
c0000a19:	85 c0                	test   eax,eax
c0000a1b:	74 08                	je     c0000a25 <toupper+0x21>
c0000a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a20:	83 e8 20             	sub    eax,0x20
c0000a23:	eb 03                	jmp    c0000a28 <toupper+0x24>
c0000a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a28:	5d                   	pop    ebp
c0000a29:	c3                   	ret    

c0000a2a <tolower>:
c0000a2a:	55                   	push   ebp
c0000a2b:	89 e5                	mov    ebp,esp
c0000a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a30:	0f b6 c0             	movzx  eax,al
c0000a33:	8a 80 60 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0aa0]
c0000a39:	0f b6 c0             	movzx  eax,al
c0000a3c:	83 e0 01             	and    eax,0x1
c0000a3f:	85 c0                	test   eax,eax
c0000a41:	74 08                	je     c0000a4b <tolower+0x21>
c0000a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a46:	83 c0 20             	add    eax,0x20
c0000a49:	eb 03                	jmp    c0000a4e <tolower+0x24>
c0000a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a4e:	5d                   	pop    ebp
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	89 e5                	mov    ebp,esp
c0000a53:	83 ec 28             	sub    esp,0x28
c0000a56:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0000a5d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000a64:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0000a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a6e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0000a71:	eb 03                	jmp    c0000a76 <simple_strtoul+0x26>
c0000a73:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a79:	8a 00                	mov    al,BYTE PTR [eax]
c0000a7b:	0f b6 c0             	movzx  eax,al
c0000a7e:	8a 80 60 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0aa0]
c0000a84:	0f b6 c0             	movzx  eax,al
c0000a87:	83 e0 08             	and    eax,0x8
c0000a8a:	85 c0                	test   eax,eax
c0000a8c:	75 e5                	jne    c0000a73 <simple_strtoul+0x23>
c0000a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a91:	8a 00                	mov    al,BYTE PTR [eax]
c0000a93:	3c 09                	cmp    al,0x9
c0000a95:	74 dc                	je     c0000a73 <simple_strtoul+0x23>
c0000a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a9a:	8a 00                	mov    al,BYTE PTR [eax]
c0000a9c:	3c 2d                	cmp    al,0x2d
c0000a9e:	75 0c                	jne    c0000aac <simple_strtoul+0x5c>
c0000aa0:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
c0000aa7:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000aaa:	eb 1c                	jmp    c0000ac8 <simple_strtoul+0x78>
c0000aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000aaf:	8a 00                	mov    al,BYTE PTR [eax]
c0000ab1:	3c 2b                	cmp    al,0x2b
c0000ab3:	75 0c                	jne    c0000ac1 <simple_strtoul+0x71>
c0000ab5:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ab8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000abf:	eb 07                	jmp    c0000ac8 <simple_strtoul+0x78>
c0000ac1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000ac8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000acc:	75 43                	jne    c0000b11 <simple_strtoul+0xc1>
c0000ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ad1:	8a 00                	mov    al,BYTE PTR [eax]
c0000ad3:	3c 30                	cmp    al,0x30
c0000ad5:	75 31                	jne    c0000b08 <simple_strtoul+0xb8>
c0000ad7:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000add:	8a 00                	mov    al,BYTE PTR [eax]
c0000adf:	0f be c0             	movsx  eax,al
c0000ae2:	83 ec 0c             	sub    esp,0xc
c0000ae5:	50                   	push   eax
c0000ae6:	e8 3f ff ff ff       	call   c0000a2a <tolower>
c0000aeb:	83 c4 10             	add    esp,0x10
c0000aee:	83 f8 78             	cmp    eax,0x78
c0000af1:	75 0c                	jne    c0000aff <simple_strtoul+0xaf>
c0000af3:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
c0000afa:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000afd:	eb 26                	jmp    c0000b25 <simple_strtoul+0xd5>
c0000aff:	c7 45 10 08 00 00 00 	mov    DWORD PTR [ebp+0x10],0x8
c0000b06:	eb 1d                	jmp    c0000b25 <simple_strtoul+0xd5>
c0000b08:	c7 45 10 0a 00 00 00 	mov    DWORD PTR [ebp+0x10],0xa
c0000b0f:	eb 14                	jmp    c0000b25 <simple_strtoul+0xd5>
c0000b11:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
c0000b15:	0f 86 07 01 00 00    	jbe    c0000c22 <simple_strtoul+0x1d2>
c0000b1b:	83 7d 10 24          	cmp    DWORD PTR [ebp+0x10],0x24
c0000b1f:	0f 87 fd 00 00 00    	ja     c0000c22 <simple_strtoul+0x1d2>
c0000b25:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
c0000b29:	75 0c                	jne    c0000b37 <simple_strtoul+0xe7>
c0000b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b2e:	8a 00                	mov    al,BYTE PTR [eax]
c0000b30:	3c 30                	cmp    al,0x30
c0000b32:	75 03                	jne    c0000b37 <simple_strtoul+0xe7>
c0000b34:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b37:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
c0000b3b:	0f 85 d2 00 00 00    	jne    c0000c13 <simple_strtoul+0x1c3>
c0000b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b44:	8a 00                	mov    al,BYTE PTR [eax]
c0000b46:	3c 30                	cmp    al,0x30
c0000b48:	0f 85 c5 00 00 00    	jne    c0000c13 <simple_strtoul+0x1c3>
c0000b4e:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b54:	8a 00                	mov    al,BYTE PTR [eax]
c0000b56:	0f be c0             	movsx  eax,al
c0000b59:	83 ec 0c             	sub    esp,0xc
c0000b5c:	50                   	push   eax
c0000b5d:	e8 c8 fe ff ff       	call   c0000a2a <tolower>
c0000b62:	83 c4 10             	add    esp,0x10
c0000b65:	83 f8 78             	cmp    eax,0x78
c0000b68:	0f 85 a5 00 00 00    	jne    c0000c13 <simple_strtoul+0x1c3>
c0000b6e:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b71:	e9 9d 00 00 00       	jmp    c0000c13 <simple_strtoul+0x1c3>
c0000b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b79:	8a 00                	mov    al,BYTE PTR [eax]
c0000b7b:	0f b6 c0             	movzx  eax,al
c0000b7e:	8a 80 60 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0aa0]
c0000b84:	0f b6 c0             	movzx  eax,al
c0000b87:	83 e0 04             	and    eax,0x4
c0000b8a:	85 c0                	test   eax,eax
c0000b8c:	74 10                	je     c0000b9e <simple_strtoul+0x14e>
c0000b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b91:	8a 00                	mov    al,BYTE PTR [eax]
c0000b93:	0f b6 c0             	movzx  eax,al
c0000b96:	83 e8 30             	sub    eax,0x30
c0000b99:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000b9c:	eb 31                	jmp    c0000bcf <simple_strtoul+0x17f>
c0000b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0000ba3:	0f be c0             	movsx  eax,al
c0000ba6:	83 ec 0c             	sub    esp,0xc
c0000ba9:	50                   	push   eax
c0000baa:	e8 55 fe ff ff       	call   c0000a04 <toupper>
c0000baf:	83 c4 10             	add    esp,0x10
c0000bb2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000bb5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000bb8:	0f b6 c0             	movzx  eax,al
c0000bbb:	8a 80 60 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0aa0]
c0000bc1:	0f b6 c0             	movzx  eax,al
c0000bc4:	83 e0 01             	and    eax,0x1
c0000bc7:	85 c0                	test   eax,eax
c0000bc9:	74 5a                	je     c0000c25 <simple_strtoul+0x1d5>
c0000bcb:	83 6d f0 37          	sub    DWORD PTR [ebp-0x10],0x37
c0000bcf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000bd2:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
c0000bd5:	73 51                	jae    c0000c28 <simple_strtoul+0x1d8>
c0000bd7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000bda:	f7 d0                	not    eax
c0000bdc:	ba 00 00 00 00       	mov    edx,0x0
c0000be1:	f7 75 10             	div    DWORD PTR [ebp+0x10]
c0000be4:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0000be7:	76 10                	jbe    c0000bf9 <simple_strtoul+0x1a9>
c0000be9:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
c0000bf0:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000bf7:	eb 17                	jmp    c0000c10 <simple_strtoul+0x1c0>
c0000bf9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000bfc:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
c0000c00:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0000c03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c06:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0000c09:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
c0000c10:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000c16:	8a 00                	mov    al,BYTE PTR [eax]
c0000c18:	84 c0                	test   al,al
c0000c1a:	0f 85 56 ff ff ff    	jne    c0000b76 <simple_strtoul+0x126>
c0000c20:	eb 07                	jmp    c0000c29 <simple_strtoul+0x1d9>
c0000c22:	90                   	nop
c0000c23:	eb 04                	jmp    c0000c29 <simple_strtoul+0x1d9>
c0000c25:	90                   	nop
c0000c26:	eb 01                	jmp    c0000c29 <simple_strtoul+0x1d9>
c0000c28:	90                   	nop
c0000c29:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
c0000c2d:	74 24                	je     c0000c53 <simple_strtoul+0x203>
c0000c2f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0000c33:	75 16                	jne    c0000c4b <simple_strtoul+0x1fb>
c0000c35:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0000c39:	75 10                	jne    c0000c4b <simple_strtoul+0x1fb>
c0000c3b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0000c3f:	74 0a                	je     c0000c4b <simple_strtoul+0x1fb>
c0000c41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c44:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0000c47:	89 10                	mov    DWORD PTR [eax],edx
c0000c49:	eb 08                	jmp    c0000c53 <simple_strtoul+0x203>
c0000c4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c4e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000c51:	89 10                	mov    DWORD PTR [eax],edx
c0000c53:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
c0000c57:	75 07                	jne    c0000c60 <simple_strtoul+0x210>
c0000c59:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
c0000c60:	83 7d ec 01          	cmp    DWORD PTR [ebp-0x14],0x1
c0000c64:	75 03                	jne    c0000c69 <simple_strtoul+0x219>
c0000c66:	f7 5d e8             	neg    DWORD PTR [ebp-0x18]
c0000c69:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c6c:	c9                   	leave  
c0000c6d:	c3                   	ret    

c0000c6e <largebin_index>:
c0000c6e:	89 c2                	mov    edx,eax
c0000c70:	c1 ea 08             	shr    edx,0x8
c0000c73:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c79:	77 10                	ja     c0000c8b <largebin_index+0x1d>
c0000c7b:	0f bd d2             	bsr    edx,edx
c0000c7e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c81:	d3 e8                	shr    eax,cl
c0000c83:	83 e0 03             	and    eax,0x3
c0000c86:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c8a:	c3                   	ret    
c0000c8b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c90:	c3                   	ret    

c0000c91 <malloc_init_state>:
c0000c91:	53                   	push   ebx
c0000c92:	8d 50 34             	lea    edx,[eax+0x34]
c0000c95:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c9b:	89 d1                	mov    ecx,edx
c0000c9d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000ca0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000ca3:	83 c2 08             	add    edx,0x8
c0000ca6:	39 da                	cmp    edx,ebx
c0000ca8:	75 f3                	jne    c0000c9d <malloc_init_state+0xc>
c0000caa:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cac:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000cb6:	83 e2 03             	and    edx,0x3
c0000cb9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cc3:	83 ca 48             	or     edx,0x48
c0000cc6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cd0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cda:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ce1:	89 10                	mov    DWORD PTR [eax],edx
c0000ce3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ce6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cf0:	5b                   	pop    ebx
c0000cf1:	c3                   	ret    

c0000cf2 <malloc_consolidate>:
c0000cf2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cf4:	85 d2                	test   edx,edx
c0000cf6:	0f 84 d8 00 00 00    	je     c0000dd4 <malloc_consolidate+0xe2>
c0000cfc:	55                   	push   ebp
c0000cfd:	83 e2 fd             	and    edx,0xfffffffd
c0000d00:	57                   	push   edi
c0000d01:	89 c5                	mov    ebp,eax
c0000d03:	56                   	push   esi
c0000d04:	8d 78 34             	lea    edi,[eax+0x34]
c0000d07:	53                   	push   ebx
c0000d08:	83 ec 10             	sub    esp,0x10
c0000d0b:	89 10                	mov    DWORD PTR [eax],edx
c0000d0d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d11:	c1 ea 03             	shr    edx,0x3
c0000d14:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d18:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d1f:	85 d2                	test   edx,edx
c0000d21:	0f 84 98 00 00 00    	je     c0000dbf <malloc_consolidate+0xcd>
c0000d27:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d2e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d31:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d38:	89 f9                	mov    ecx,edi
c0000d3a:	83 e1 fe             	and    ecx,0xfffffffe
c0000d3d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d40:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d43:	83 e3 fc             	and    ebx,0xfffffffc
c0000d46:	83 e7 01             	and    edi,0x1
c0000d49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d4c:	75 14                	jne    c0000d62 <malloc_consolidate+0x70>
c0000d4e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d50:	29 fa                	sub    edx,edi
c0000d52:	01 f9                	add    ecx,edi
c0000d54:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d57:	89 fb                	mov    ebx,edi
c0000d59:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d5c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d5f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d62:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d65:	74 40                	je     c0000da7 <malloc_consolidate+0xb5>
c0000d67:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d6a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d6d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d71:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d74:	83 e7 01             	and    edi,0x1
c0000d77:	75 0e                	jne    c0000d87 <malloc_consolidate+0x95>
c0000d79:	01 d9                	add    ecx,ebx
c0000d7b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d7e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d81:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d84:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d87:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d8a:	89 ce                	mov    esi,ecx
c0000d8c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d8f:	83 ce 01             	or     esi,0x1
c0000d92:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d95:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d98:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d9b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d9f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000da2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000da5:	eb 0c                	jmp    c0000db3 <malloc_consolidate+0xc1>
c0000da7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000daa:	83 c9 01             	or     ecx,0x1
c0000dad:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000db0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000db3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000db7:	85 d2                	test   edx,edx
c0000db9:	0f 85 6f ff ff ff    	jne    c0000d2e <malloc_consolidate+0x3c>
c0000dbf:	83 c5 04             	add    ebp,0x4
c0000dc2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000dc6:	0f 85 50 ff ff ff    	jne    c0000d1c <malloc_consolidate+0x2a>
c0000dcc:	83 c4 10             	add    esp,0x10
c0000dcf:	5b                   	pop    ebx
c0000dd0:	5e                   	pop    esi
c0000dd1:	5f                   	pop    edi
c0000dd2:	5d                   	pop    ebp
c0000dd3:	c3                   	ret    
c0000dd4:	e9 b8 fe ff ff       	jmp    c0000c91 <malloc_init_state>

c0000dd9 <dlfree>:
c0000dd9:	57                   	push   edi
c0000dda:	56                   	push   esi
c0000ddb:	53                   	push   ebx
c0000ddc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000de0:	85 db                	test   ebx,ebx
c0000de2:	0f 84 e2 00 00 00    	je     c0000eca <dlfree+0xf1>
c0000de8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000deb:	8b 0d e0 b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b5e0
c0000df1:	89 f0                	mov    eax,esi
c0000df3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000df6:	83 e0 fc             	and    eax,0xfffffffc
c0000df9:	39 c1                	cmp    ecx,eax
c0000dfb:	72 24                	jb     c0000e21 <dlfree+0x48>
c0000dfd:	83 c9 03             	or     ecx,0x3
c0000e00:	c1 e8 03             	shr    eax,0x3
c0000e03:	89 0d e0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5e0,ecx
c0000e09:	83 e8 02             	sub    eax,0x2
c0000e0c:	8b 0c 85 e4 b5 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc4a1c]
c0000e13:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e15:	89 14 85 e4 b5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4a1c],edx
c0000e1c:	e9 a9 00 00 00       	jmp    c0000eca <dlfree+0xf1>
c0000e21:	83 e6 02             	and    esi,0x2
c0000e24:	0f 85 a0 00 00 00    	jne    c0000eca <dlfree+0xf1>
c0000e2a:	83 c9 01             	or     ecx,0x1
c0000e2d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e30:	89 0d e0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5e0,ecx
c0000e36:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e39:	83 e1 fc             	and    ecx,0xfffffffc
c0000e3c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e40:	75 13                	jne    c0000e55 <dlfree+0x7c>
c0000e42:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e45:	29 da                	sub    edx,ebx
c0000e47:	01 d8                	add    eax,ebx
c0000e49:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e4c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e4f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e52:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e55:	39 35 0c b6 03 c0    	cmp    DWORD PTR ds:0xc003b60c,esi
c0000e5b:	74 40                	je     c0000e9d <dlfree+0xc4>
c0000e5d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e61:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e64:	80 e3 01             	and    bl,0x1
c0000e67:	75 0e                	jne    c0000e77 <dlfree+0x9e>
c0000e69:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e6c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e6f:	01 c8                	add    eax,ecx
c0000e71:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e74:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e77:	8b 0d 1c b6 03 c0    	mov    ecx,DWORD PTR ds:0xc003b61c
c0000e7d:	c7 42 0c 14 b6 03 c0 	mov    DWORD PTR [edx+0xc],0xc003b614
c0000e84:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e87:	89 15 1c b6 03 c0    	mov    DWORD PTR ds:0xc003b61c,edx
c0000e8d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e90:	89 c1                	mov    ecx,eax
c0000e92:	83 c9 01             	or     ecx,0x1
c0000e95:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e98:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e9b:	eb 10                	jmp    c0000ead <dlfree+0xd4>
c0000e9d:	01 c8                	add    eax,ecx
c0000e9f:	89 c1                	mov    ecx,eax
c0000ea1:	83 c9 01             	or     ecx,0x1
c0000ea4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ea7:	89 15 0c b6 03 c0    	mov    DWORD PTR ds:0xc003b60c,edx
c0000ead:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000eb2:	76 16                	jbe    c0000eca <dlfree+0xf1>
c0000eb4:	f6 05 e0 b5 03 c0 02 	test   BYTE PTR ds:0xc003b5e0,0x2
c0000ebb:	74 0d                	je     c0000eca <dlfree+0xf1>
c0000ebd:	5b                   	pop    ebx
c0000ebe:	b8 e0 b5 03 c0       	mov    eax,0xc003b5e0
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	e9 28 fe ff ff       	jmp    c0000cf2 <malloc_consolidate>
c0000eca:	5b                   	pop    ebx
c0000ecb:	5e                   	pop    esi
c0000ecc:	5f                   	pop    edi
c0000ecd:	c3                   	ret    

c0000ece <sYSMALLOc>:
c0000ece:	55                   	push   ebp
c0000ecf:	57                   	push   edi
c0000ed0:	56                   	push   esi
c0000ed1:	53                   	push   ebx
c0000ed2:	89 d3                	mov    ebx,edx
c0000ed4:	83 ec 2c             	sub    esp,0x2c
c0000ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000edb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ee1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ee4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ee7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eeb:	74 1f                	je     c0000f0c <sYSMALLOc+0x3e>
c0000eed:	89 d8                	mov    eax,ebx
c0000eef:	e8 fe fd ff ff       	call   c0000cf2 <malloc_consolidate>
c0000ef4:	83 ec 0c             	sub    esp,0xc
c0000ef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000efb:	83 e8 07             	sub    eax,0x7
c0000efe:	50                   	push   eax
c0000eff:	e8 30 02 00 00       	call   c0001134 <dlmalloc>
c0000f04:	83 c4 10             	add    esp,0x10
c0000f07:	e9 20 02 00 00       	jmp    c000112c <sYSMALLOc+0x25e>
c0000f0c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f0f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f15:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f18:	83 e0 fc             	and    eax,0xfffffffc
c0000f1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f23:	83 c0 10             	add    eax,0x10
c0000f26:	01 c1                	add    ecx,eax
c0000f28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f2c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f33:	74 04                	je     c0000f39 <sYSMALLOc+0x6b>
c0000f35:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f39:	f7 da                	neg    edx
c0000f3b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f3f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f43:	21 d1                	and    ecx,edx
c0000f45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f49:	7f 07                	jg     c0000f52 <sYSMALLOc+0x84>
c0000f4b:	31 c0                	xor    eax,eax
c0000f4d:	e9 da 01 00 00       	jmp    c000112c <sYSMALLOc+0x25e>
c0000f52:	83 ec 0c             	sub    esp,0xc
c0000f55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f59:	e8 aa c3 00 00       	call   c000d308 <sbrk>
c0000f5e:	83 c4 10             	add    esp,0x10
c0000f61:	89 c6                	mov    esi,eax
c0000f63:	83 f8 ff             	cmp    eax,0xffffffff
c0000f66:	74 e3                	je     c0000f4b <sYSMALLOc+0x7d>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f70:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f73:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f79:	39 f1                	cmp    ecx,esi
c0000f7b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f81:	75 13                	jne    c0000f96 <sYSMALLOc+0xc8>
c0000f83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f87:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f8b:	83 c8 01             	or     eax,0x1
c0000f8e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f91:	e9 3e 01 00 00       	jmp    c00010d4 <sYSMALLOc+0x206>
c0000f96:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f9c:	88 d0                	mov    al,dl
c0000f9e:	83 e0 01             	and    eax,0x1
c0000fa1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fa6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000faa:	0f 95 c0             	setne  al
c0000fad:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000fb1:	39 f1                	cmp    ecx,esi
c0000fb3:	76 12                	jbe    c0000fc7 <sYSMALLOc+0xf9>
c0000fb5:	84 c0                	test   al,al
c0000fb7:	74 0e                	je     c0000fc7 <sYSMALLOc+0xf9>
c0000fb9:	83 e2 fe             	and    edx,0xfffffffe
c0000fbc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fc2:	e9 83 00 00 00       	jmp    c000104a <sYSMALLOc+0x17c>
c0000fc7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fcc:	74 7c                	je     c000104a <sYSMALLOc+0x17c>
c0000fce:	84 c0                	test   al,al
c0000fd0:	74 0c                	je     c0000fde <sYSMALLOc+0x110>
c0000fd2:	89 f0                	mov    eax,esi
c0000fd4:	29 c8                	sub    eax,ecx
c0000fd6:	01 e8                	add    eax,ebp
c0000fd8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fde:	89 f2                	mov    edx,esi
c0000fe0:	83 e2 07             	and    edx,0x7
c0000fe3:	74 0c                	je     c0000ff1 <sYSMALLOc+0x123>
c0000fe5:	b8 08 00 00 00       	mov    eax,0x8
c0000fea:	29 d0                	sub    eax,edx
c0000fec:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fef:	eb 04                	jmp    c0000ff5 <sYSMALLOc+0x127>
c0000ff1:	89 f5                	mov    ebp,esi
c0000ff3:	31 c0                	xor    eax,eax
c0000ff5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ff9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ffd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001001:	01 c1                	add    ecx,eax
c0001003:	83 ec 0c             	sub    esp,0xc
c0001006:	01 f1                	add    ecx,esi
c0001008:	01 ca                	add    edx,ecx
c000100a:	29 c8                	sub    eax,ecx
c000100c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0001010:	01 c2                	add    edx,eax
c0001012:	52                   	push   edx
c0001013:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001017:	e8 ec c2 00 00       	call   c000d308 <sbrk>
c000101c:	83 c4 10             	add    esp,0x10
c000101f:	83 f8 ff             	cmp    eax,0xffffffff
c0001022:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001026:	75 0f                	jne    c0001037 <sYSMALLOc+0x169>
c0001028:	83 ec 0c             	sub    esp,0xc
c000102b:	6a 00                	push   0x0
c000102d:	e8 d6 c2 00 00       	call   c000d308 <sbrk>
c0001032:	83 c4 10             	add    esp,0x10
c0001035:	eb 30                	jmp    c0001067 <sYSMALLOc+0x199>
c0001037:	39 c6                	cmp    esi,eax
c0001039:	76 33                	jbe    c000106e <sYSMALLOc+0x1a0>
c000103b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001046:	01 f0                	add    eax,esi
c0001048:	eb 1d                	jmp    c0001067 <sYSMALLOc+0x199>
c000104a:	83 ec 0c             	sub    esp,0xc
c000104d:	89 f5                	mov    ebp,esi
c000104f:	6a 00                	push   0x0
c0001051:	e8 b2 c2 00 00       	call   c000d308 <sbrk>
c0001056:	89 c2                	mov    edx,eax
c0001058:	29 f2                	sub    edx,esi
c000105a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000105e:	83 c4 10             	add    esp,0x10
c0001061:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001067:	31 d2                	xor    edx,edx
c0001069:	83 f8 ff             	cmp    eax,0xffffffff
c000106c:	74 66                	je     c00010d4 <sYSMALLOc+0x206>
c000106e:	29 e8                	sub    eax,ebp
c0001070:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001073:	01 d0                	add    eax,edx
c0001075:	83 c8 01             	or     eax,0x1
c0001078:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000107b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001081:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001086:	74 4c                	je     c00010d4 <sYSMALLOc+0x206>
c0001088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000108c:	83 e8 0c             	sub    eax,0xc
c000108f:	83 e0 f8             	and    eax,0xfffffff8
c0001092:	89 c2                	mov    edx,eax
c0001094:	83 ca 01             	or     edx,0x1
c0001097:	83 f8 0f             	cmp    eax,0xf
c000109a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000109d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00010a5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010ad:	76 25                	jbe    c00010d4 <sYSMALLOc+0x206>
c00010af:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010b5:	83 ec 0c             	sub    esp,0xc
c00010b8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010c2:	83 c7 08             	add    edi,0x8
c00010c5:	57                   	push   edi
c00010c6:	e8 0e fd ff ff       	call   c0000dd9 <dlfree>
c00010cb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010d1:	83 c4 10             	add    esp,0x10
c00010d4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010da:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010e0:	73 06                	jae    c00010e8 <sYSMALLOc+0x21a>
c00010e2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010e8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010ee:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010f4:	73 06                	jae    c00010fc <sYSMALLOc+0x22e>
c00010f6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010fc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ff:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001102:	83 e2 fc             	and    edx,0xfffffffc
c0001105:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001109:	0f 82 3c fe ff ff    	jb     c0000f4b <sYSMALLOc+0x7d>
c000110f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001113:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001116:	29 fa                	sub    edx,edi
c0001118:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000111b:	83 ca 01             	or     edx,0x1
c000111e:	89 fb                	mov    ebx,edi
c0001120:	83 c0 08             	add    eax,0x8
c0001123:	83 cb 01             	or     ebx,0x1
c0001126:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001129:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000112c:	83 c4 2c             	add    esp,0x2c
c000112f:	5b                   	pop    ebx
c0001130:	5e                   	pop    esi
c0001131:	5f                   	pop    edi
c0001132:	5d                   	pop    ebp
c0001133:	c3                   	ret    

c0001134 <dlmalloc>:
c0001134:	55                   	push   ebp
c0001135:	57                   	push   edi
c0001136:	56                   	push   esi
c0001137:	53                   	push   ebx
c0001138:	83 ec 1c             	sub    esp,0x1c
c000113b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000113f:	83 f8 df             	cmp    eax,0xffffffdf
c0001142:	0f 87 70 03 00 00    	ja     c00014b8 <dlmalloc+0x384>
c0001148:	83 c0 0b             	add    eax,0xb
c000114b:	be 10 00 00 00       	mov    esi,0x10
c0001150:	83 f8 0f             	cmp    eax,0xf
c0001153:	76 05                	jbe    c000115a <dlmalloc+0x26>
c0001155:	83 e0 f8             	and    eax,0xfffffff8
c0001158:	89 c6                	mov    esi,eax
c000115a:	8b 3d e0 b5 03 c0    	mov    edi,DWORD PTR ds:0xc003b5e0
c0001160:	f7 c7 01 00 00 00    	test   edi,0x1
c0001166:	75 17                	jne    c000117f <dlmalloc+0x4b>
c0001168:	85 ff                	test   edi,edi
c000116a:	0f 85 05 03 00 00    	jne    c0001475 <dlmalloc+0x341>
c0001170:	b8 e0 b5 03 c0       	mov    eax,0xc003b5e0
c0001175:	e8 78 fb ff ff       	call   c0000cf2 <malloc_consolidate>
c000117a:	e9 f6 02 00 00       	jmp    c0001475 <dlmalloc+0x341>
c000117f:	39 f7                	cmp    edi,esi
c0001181:	72 1f                	jb     c00011a2 <dlmalloc+0x6e>
c0001183:	89 f2                	mov    edx,esi
c0001185:	c1 ea 03             	shr    edx,0x3
c0001188:	83 ea 02             	sub    edx,0x2
c000118b:	8b 04 95 e4 b5 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4a1c]
c0001192:	85 c0                	test   eax,eax
c0001194:	74 0c                	je     c00011a2 <dlmalloc+0x6e>
c0001196:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001199:	89 0c 95 e4 b5 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4a1c],ecx
c00011a0:	eb 30                	jmp    c00011d2 <dlmalloc+0x9e>
c00011a2:	89 f0                	mov    eax,esi
c00011a4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011aa:	77 2e                	ja     c00011da <dlmalloc+0xa6>
c00011ac:	c1 e8 03             	shr    eax,0x3
c00011af:	8d 14 c5 14 b6 03 c0 	lea    edx,[eax*8-0x3ffc49ec]
c00011b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011ba:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011bd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011c0:	39 c3                	cmp    ebx,eax
c00011c2:	74 2e                	je     c00011f2 <dlmalloc+0xbe>
c00011c4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011c7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011cc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011cf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011d2:	83 c0 08             	add    eax,0x8
c00011d5:	e9 e0 02 00 00       	jmp    c00014ba <dlmalloc+0x386>
c00011da:	e8 8f fa ff ff       	call   c0000c6e <largebin_index>
c00011df:	83 e7 02             	and    edi,0x2
c00011e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011e6:	74 0a                	je     c00011f2 <dlmalloc+0xbe>
c00011e8:	b8 e0 b5 03 c0       	mov    eax,0xc003b5e0
c00011ed:	e8 00 fb ff ff       	call   c0000cf2 <malloc_consolidate>
c00011f2:	8d 46 10             	lea    eax,[esi+0x10]
c00011f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011f9:	8b 1d 20 b6 03 c0    	mov    ebx,DWORD PTR ds:0xc003b620
c00011ff:	81 fb 14 b6 03 c0    	cmp    ebx,0xc003b614
c0001205:	0f 84 13 01 00 00    	je     c000131e <dlmalloc+0x1ea>
c000120b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000120e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001211:	83 e7 fc             	and    edi,0xfffffffc
c0001214:	81 fe ff 00 00 00    	cmp    esi,0xff
c000121a:	77 4c                	ja     c0001268 <dlmalloc+0x134>
c000121c:	3d 14 b6 03 c0       	cmp    eax,0xc003b614
c0001221:	75 45                	jne    c0001268 <dlmalloc+0x134>
c0001223:	39 1d 10 b6 03 c0    	cmp    DWORD PTR ds:0xc003b610,ebx
c0001229:	75 3d                	jne    c0001268 <dlmalloc+0x134>
c000122b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000122f:	73 37                	jae    c0001268 <dlmalloc+0x134>
c0001231:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001234:	89 fa                	mov    edx,edi
c0001236:	a3 1c b6 03 c0       	mov    ds:0xc003b61c,eax
c000123b:	a3 20 b6 03 c0       	mov    ds:0xc003b620,eax
c0001240:	a3 10 b6 03 c0       	mov    ds:0xc003b610,eax
c0001245:	29 f2                	sub    edx,esi
c0001247:	c7 40 08 14 b6 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b614
c000124e:	c7 40 0c 14 b6 03 c0 	mov    DWORD PTR [eax+0xc],0xc003b614
c0001255:	83 ce 01             	or     esi,0x1
c0001258:	89 d1                	mov    ecx,edx
c000125a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000125d:	83 c9 01             	or     ecx,0x1
c0001260:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001263:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001266:	eb 15                	jmp    c000127d <dlmalloc+0x149>
c0001268:	a3 20 b6 03 c0       	mov    ds:0xc003b620,eax
c000126d:	39 fe                	cmp    esi,edi
c000126f:	c7 40 08 14 b6 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b614
c0001276:	75 0d                	jne    c0001285 <dlmalloc+0x151>
c0001278:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000127d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001280:	e9 35 02 00 00       	jmp    c00014ba <dlmalloc+0x386>
c0001285:	89 f8                	mov    eax,edi
c0001287:	81 ff ff 00 00 00    	cmp    edi,0xff
c000128d:	77 19                	ja     c00012a8 <dlmalloc+0x174>
c000128f:	c1 e8 03             	shr    eax,0x3
c0001292:	8d 14 00             	lea    edx,[eax+eax*1]
c0001295:	83 c2 0d             	add    edx,0xd
c0001298:	8d 2c 95 d8 b5 03 c0 	lea    ebp,[edx*4-0x3ffc4a28]
c000129f:	8b 14 95 e0 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4a20]
c00012a6:	eb 46                	jmp    c00012ee <dlmalloc+0x1ba>
c00012a8:	e8 c1 f9 ff ff       	call   c0000c6e <largebin_index>
c00012ad:	8d 14 00             	lea    edx,[eax+eax*1]
c00012b0:	83 c2 0d             	add    edx,0xd
c00012b3:	8d 0c 95 e0 b5 03 c0 	lea    ecx,[edx*4-0x3ffc4a20]
c00012ba:	8b 14 95 e0 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4a20]
c00012c1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012c4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012c8:	89 d5                	mov    ebp,edx
c00012ca:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012ce:	74 1e                	je     c00012ee <dlmalloc+0x1ba>
c00012d0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012d3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012d6:	77 12                	ja     c00012ea <dlmalloc+0x1b6>
c00012d8:	83 cf 01             	or     edi,0x1
c00012db:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012de:	76 05                	jbe    c00012e5 <dlmalloc+0x1b1>
c00012e0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012e3:	eb f6                	jmp    c00012db <dlmalloc+0x1a7>
c00012e5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012e8:	eb 04                	jmp    c00012ee <dlmalloc+0x1ba>
c00012ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012ee:	89 c7                	mov    edi,eax
c00012f0:	88 c1                	mov    cl,al
c00012f2:	c1 ff 05             	sar    edi,0x5
c00012f5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012f9:	bf 01 00 00 00       	mov    edi,0x1
c00012fe:	d3 e7                	shl    edi,cl
c0001300:	89 f8                	mov    eax,edi
c0001302:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001306:	09 04 bd 14 b9 03 c0 	or     DWORD PTR [edi*4-0x3ffc46ec],eax
c000130d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001310:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001313:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001316:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001319:	e9 db fe ff ff       	jmp    c00011f9 <dlmalloc+0xc5>
c000131e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001324:	76 78                	jbe    c000139e <dlmalloc+0x26a>
c0001326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000132a:	8d 04 c5 14 b6 03 c0 	lea    eax,[eax*8-0x3ffc49ec]
c0001331:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001334:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001337:	39 ca                	cmp    edx,ecx
c0001339:	74 63                	je     c000139e <dlmalloc+0x26a>
c000133b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000133e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001341:	83 e3 fc             	and    ebx,0xfffffffc
c0001344:	39 de                	cmp    esi,ebx
c0001346:	77 52                	ja     c000139a <dlmalloc+0x266>
c0001348:	89 df                	mov    edi,ebx
c000134a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000134d:	29 f7                	sub    edi,esi
c000134f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001352:	01 d3                	add    ebx,edx
c0001354:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001357:	83 ff 0f             	cmp    edi,0xf
c000135a:	8d 42 08             	lea    eax,[edx+0x8]
c000135d:	77 09                	ja     c0001368 <dlmalloc+0x234>
c000135f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001363:	e9 52 01 00 00       	jmp    c00014ba <dlmalloc+0x386>
c0001368:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000136b:	83 ce 01             	or     esi,0x1
c000136e:	89 0d 1c b6 03 c0    	mov    DWORD PTR ds:0xc003b61c,ecx
c0001374:	89 0d 20 b6 03 c0    	mov    DWORD PTR ds:0xc003b620,ecx
c000137a:	c7 41 08 14 b6 03 c0 	mov    DWORD PTR [ecx+0x8],0xc003b614
c0001381:	c7 41 0c 14 b6 03 c0 	mov    DWORD PTR [ecx+0xc],0xc003b614
c0001388:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000138b:	89 fa                	mov    edx,edi
c000138d:	83 ca 01             	or     edx,0x1
c0001390:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001393:	89 3b                	mov    DWORD PTR [ebx],edi
c0001395:	e9 20 01 00 00       	jmp    c00014ba <dlmalloc+0x386>
c000139a:	89 c2                	mov    edx,eax
c000139c:	eb 99                	jmp    c0001337 <dlmalloc+0x203>
c000139e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013a2:	b8 01 00 00 00       	mov    eax,0x1
c00013a7:	41                   	inc    ecx
c00013a8:	89 cb                	mov    ebx,ecx
c00013aa:	8d 14 cd 0c b6 03 c0 	lea    edx,[ecx*8-0x3ffc49f4]
c00013b1:	c1 eb 05             	shr    ebx,0x5
c00013b4:	d3 e0                	shl    eax,cl
c00013b6:	8b 3c 9d 14 b9 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc46ec]
c00013bd:	39 f8                	cmp    eax,edi
c00013bf:	77 04                	ja     c00013c5 <dlmalloc+0x291>
c00013c1:	85 c0                	test   eax,eax
c00013c3:	75 26                	jne    c00013eb <dlmalloc+0x2b7>
c00013c5:	43                   	inc    ebx
c00013c6:	83 fb 02             	cmp    ebx,0x2
c00013c9:	0f 87 a6 00 00 00    	ja     c0001475 <dlmalloc+0x341>
c00013cf:	8b 3c 9d 14 b9 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc46ec]
c00013d6:	85 ff                	test   edi,edi
c00013d8:	74 eb                	je     c00013c5 <dlmalloc+0x291>
c00013da:	89 d8                	mov    eax,ebx
c00013dc:	c1 e0 06             	shl    eax,0x6
c00013df:	8d 14 85 0c b6 03 c0 	lea    edx,[eax*4-0x3ffc49f4]
c00013e6:	b8 01 00 00 00       	mov    eax,0x1
c00013eb:	85 f8                	test   eax,edi
c00013ed:	75 07                	jne    c00013f6 <dlmalloc+0x2c2>
c00013ef:	83 c2 08             	add    edx,0x8
c00013f2:	01 c0                	add    eax,eax
c00013f4:	eb f5                	jmp    c00013eb <dlmalloc+0x2b7>
c00013f6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013f9:	39 ca                	cmp    edx,ecx
c00013fb:	75 14                	jne    c0001411 <dlmalloc+0x2dd>
c00013fd:	89 c1                	mov    ecx,eax
c00013ff:	83 c2 08             	add    edx,0x8
c0001402:	f7 d1                	not    ecx
c0001404:	01 c0                	add    eax,eax
c0001406:	21 cf                	and    edi,ecx
c0001408:	89 3c 9d 14 b9 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc46ec],edi
c000140f:	eb ac                	jmp    c00013bd <dlmalloc+0x289>
c0001411:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001414:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001417:	83 e0 fc             	and    eax,0xfffffffc
c000141a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000141d:	89 c3                	mov    ebx,eax
c000141f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001422:	29 f3                	sub    ebx,esi
c0001424:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001427:	83 fb 0f             	cmp    ebx,0xf
c000142a:	8d 41 08             	lea    eax,[ecx+0x8]
c000142d:	77 09                	ja     c0001438 <dlmalloc+0x304>
c000142f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001433:	e9 82 00 00 00       	jmp    c00014ba <dlmalloc+0x386>
c0001438:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000143b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001441:	89 3d 1c b6 03 c0    	mov    DWORD PTR ds:0xc003b61c,edi
c0001447:	89 3d 20 b6 03 c0    	mov    DWORD PTR ds:0xc003b620,edi
c000144d:	c7 47 08 14 b6 03 c0 	mov    DWORD PTR [edi+0x8],0xc003b614
c0001454:	c7 47 0c 14 b6 03 c0 	mov    DWORD PTR [edi+0xc],0xc003b614
c000145b:	77 06                	ja     c0001463 <dlmalloc+0x32f>
c000145d:	89 3d 10 b6 03 c0    	mov    DWORD PTR ds:0xc003b610,edi
c0001463:	83 ce 01             	or     esi,0x1
c0001466:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001469:	89 d9                	mov    ecx,ebx
c000146b:	83 c9 01             	or     ecx,0x1
c000146e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001471:	89 1a                	mov    DWORD PTR [edx],ebx
c0001473:	eb 45                	jmp    c00014ba <dlmalloc+0x386>
c0001475:	a1 0c b6 03 c0       	mov    eax,ds:0xc003b60c
c000147a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000147d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001480:	83 e2 fc             	and    edx,0xfffffffc
c0001483:	39 d1                	cmp    ecx,edx
c0001485:	77 1e                	ja     c00014a5 <dlmalloc+0x371>
c0001487:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000148a:	89 f3                	mov    ebx,esi
c000148c:	89 0d 0c b6 03 c0    	mov    DWORD PTR ds:0xc003b60c,ecx
c0001492:	83 cb 01             	or     ebx,0x1
c0001495:	29 f2                	sub    edx,esi
c0001497:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000149a:	83 ca 01             	or     edx,0x1
c000149d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a0:	e9 2d fd ff ff       	jmp    c00011d2 <dlmalloc+0x9e>
c00014a5:	83 c4 1c             	add    esp,0x1c
c00014a8:	89 f0                	mov    eax,esi
c00014aa:	5b                   	pop    ebx
c00014ab:	ba e0 b5 03 c0       	mov    edx,0xc003b5e0
c00014b0:	5e                   	pop    esi
c00014b1:	5f                   	pop    edi
c00014b2:	5d                   	pop    ebp
c00014b3:	e9 16 fa ff ff       	jmp    c0000ece <sYSMALLOc>
c00014b8:	31 c0                	xor    eax,eax
c00014ba:	83 c4 1c             	add    esp,0x1c
c00014bd:	5b                   	pop    ebx
c00014be:	5e                   	pop    esi
c00014bf:	5f                   	pop    edi
c00014c0:	5d                   	pop    ebp
c00014c1:	c3                   	ret    

c00014c2 <iALLOc>:
c00014c2:	55                   	push   ebp
c00014c3:	89 c5                	mov    ebp,eax
c00014c5:	57                   	push   edi
c00014c6:	56                   	push   esi
c00014c7:	53                   	push   ebx
c00014c8:	83 ec 2c             	sub    esp,0x2c
c00014cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014cf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014d7:	83 3d e0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5e0,0x0
c00014de:	75 12                	jne    c00014f2 <iALLOc+0x30>
c00014e0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014e4:	b8 e0 b5 03 c0       	mov    eax,0xc003b5e0
c00014e9:	e8 04 f8 ff ff       	call   c0000cf2 <malloc_consolidate>
c00014ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014f2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f7:	74 12                	je     c000150b <iALLOc+0x49>
c00014f9:	85 ed                	test   ebp,ebp
c00014fb:	0f 84 64 01 00 00    	je     c0001665 <iALLOc+0x1a3>
c0001501:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001509:	eb 33                	jmp    c000153e <iALLOc+0x7c>
c000150b:	85 ed                	test   ebp,ebp
c000150d:	75 14                	jne    c0001523 <iALLOc+0x61>
c000150f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001517:	83 c4 2c             	add    esp,0x2c
c000151a:	5b                   	pop    ebx
c000151b:	5e                   	pop    esi
c000151c:	5f                   	pop    edi
c000151d:	5d                   	pop    ebp
c000151e:	e9 11 fc ff ff       	jmp    c0001134 <dlmalloc>
c0001523:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000152a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001532:	83 f8 0f             	cmp    eax,0xf
c0001535:	76 07                	jbe    c000153e <iALLOc+0x7c>
c0001537:	83 e0 f8             	and    eax,0xfffffff8
c000153a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000153e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001543:	75 09                	jne    c000154e <iALLOc+0x8c>
c0001545:	89 d0                	mov    eax,edx
c0001547:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000154a:	31 f6                	xor    esi,esi
c000154c:	eb 3b                	jmp    c0001589 <iALLOc+0xc7>
c000154e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001550:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001558:	83 c0 0b             	add    eax,0xb
c000155b:	83 f8 0f             	cmp    eax,0xf
c000155e:	76 07                	jbe    c0001567 <iALLOc+0xa5>
c0001560:	83 e0 f8             	and    eax,0xfffffff8
c0001563:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001567:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000156b:	0f af f5             	imul   esi,ebp
c000156e:	eb 25                	jmp    c0001595 <iALLOc+0xd3>
c0001570:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001572:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001575:	bb 10 00 00 00       	mov    ebx,0x10
c000157a:	83 f9 0f             	cmp    ecx,0xf
c000157d:	76 05                	jbe    c0001584 <iALLOc+0xc2>
c000157f:	83 e1 f8             	and    ecx,0xfffffff8
c0001582:	89 cb                	mov    ebx,ecx
c0001584:	01 de                	add    esi,ebx
c0001586:	83 c0 04             	add    eax,0x4
c0001589:	39 c7                	cmp    edi,eax
c000158b:	75 e3                	jne    c0001570 <iALLOc+0xae>
c000158d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001595:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001599:	8b 1d 34 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b934
c000159f:	83 ec 0c             	sub    esp,0xc
c00015a2:	c7 05 34 b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b934,0x0
c00015ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015b0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015b4:	50                   	push   eax
c00015b5:	e8 7a fb ff ff       	call   c0001134 <dlmalloc>
c00015ba:	83 c4 10             	add    esp,0x10
c00015bd:	89 1d 34 b9 03 c0    	mov    DWORD PTR ds:0xc003b934,ebx
c00015c3:	85 c0                	test   eax,eax
c00015c5:	0f 84 92 00 00 00    	je     c000165d <iALLOc+0x19b>
c00015cb:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015ce:	8d 78 f8             	lea    edi,[eax-0x8]
c00015d1:	83 e3 fc             	and    ebx,0xfffffffc
c00015d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015d8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015dd:	74 1e                	je     c00015fd <iALLOc+0x13b>
c00015df:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015e3:	89 d9                	mov    ecx,ebx
c00015e5:	52                   	push   edx
c00015e6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015ea:	83 e9 04             	sub    ecx,0x4
c00015ed:	51                   	push   ecx
c00015ee:	6a 00                	push   0x0
c00015f0:	50                   	push   eax
c00015f1:	e8 b5 f0 ff ff       	call   c00006ab <memset>
c00015f6:	83 c4 10             	add    esp,0x10
c00015f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015fd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001602:	75 14                	jne    c0001618 <iALLOc+0x156>
c0001604:	8d 04 37             	lea    eax,[edi+esi*1]
c0001607:	29 f3                	sub    ebx,esi
c0001609:	8d 48 08             	lea    ecx,[eax+0x8]
c000160c:	83 cb 01             	or     ebx,0x1
c000160f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001613:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001616:	89 f3                	mov    ebx,esi
c0001618:	31 c0                	xor    eax,eax
c000161a:	4d                   	dec    ebp
c000161b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000161e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001622:	39 c5                	cmp    ebp,eax
c0001624:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001627:	74 2c                	je     c0001655 <iALLOc+0x193>
c0001629:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000162d:	85 c9                	test   ecx,ecx
c000162f:	75 15                	jne    c0001646 <iALLOc+0x184>
c0001631:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001634:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001637:	b9 10 00 00 00       	mov    ecx,0x10
c000163c:	83 fe 0f             	cmp    esi,0xf
c000163f:	76 05                	jbe    c0001646 <iALLOc+0x184>
c0001641:	83 e6 f8             	and    esi,0xfffffff8
c0001644:	89 f1                	mov    ecx,esi
c0001646:	89 ce                	mov    esi,ecx
c0001648:	29 cb                	sub    ebx,ecx
c000164a:	83 ce 01             	or     esi,0x1
c000164d:	40                   	inc    eax
c000164e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001651:	01 cf                	add    edi,ecx
c0001653:	eb c6                	jmp    c000161b <iALLOc+0x159>
c0001655:	83 cb 01             	or     ebx,0x1
c0001658:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000165b:	eb 08                	jmp    c0001665 <iALLOc+0x1a3>
c000165d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001669:	83 c4 2c             	add    esp,0x2c
c000166c:	5b                   	pop    ebx
c000166d:	5e                   	pop    esi
c000166e:	5f                   	pop    edi
c000166f:	5d                   	pop    ebp
c0001670:	c3                   	ret    

c0001671 <dlrealloc>:
c0001671:	55                   	push   ebp
c0001672:	57                   	push   edi
c0001673:	56                   	push   esi
c0001674:	53                   	push   ebx
c0001675:	83 ec 1c             	sub    esp,0x1c
c0001678:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000167c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001680:	85 db                	test   ebx,ebx
c0001682:	75 10                	jne    c0001694 <dlrealloc+0x23>
c0001684:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001688:	83 c4 1c             	add    esp,0x1c
c000168b:	5b                   	pop    ebx
c000168c:	5e                   	pop    esi
c000168d:	5f                   	pop    edi
c000168e:	5d                   	pop    ebp
c000168f:	e9 a0 fa ff ff       	jmp    c0001134 <dlmalloc>
c0001694:	83 f8 df             	cmp    eax,0xffffffdf
c0001697:	76 07                	jbe    c00016a0 <dlrealloc+0x2f>
c0001699:	31 db                	xor    ebx,ebx
c000169b:	e9 7c 01 00 00       	jmp    c000181c <dlrealloc+0x1ab>
c00016a0:	83 c0 0b             	add    eax,0xb
c00016a3:	bf 10 00 00 00       	mov    edi,0x10
c00016a8:	83 f8 0f             	cmp    eax,0xf
c00016ab:	76 05                	jbe    c00016b2 <dlrealloc+0x41>
c00016ad:	83 e0 f8             	and    eax,0xfffffff8
c00016b0:	89 c7                	mov    edi,eax
c00016b2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016b5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016b8:	89 c6                	mov    esi,eax
c00016ba:	83 e6 fc             	and    esi,0xfffffffc
c00016bd:	a8 02                	test   al,0x2
c00016bf:	75 d8                	jne    c0001699 <dlrealloc+0x28>
c00016c1:	39 f7                	cmp    edi,esi
c00016c3:	0f 86 15 01 00 00    	jbe    c00017de <dlrealloc+0x16d>
c00016c9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016cd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016d0:	39 15 0c b6 03 c0    	cmp    DWORD PTR ds:0xc003b60c,edx
c00016d6:	75 33                	jne    c000170b <dlrealloc+0x9a>
c00016d8:	83 e1 fc             	and    ecx,0xfffffffc
c00016db:	01 f1                	add    ecx,esi
c00016dd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016e1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016e4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016e8:	77 49                	ja     c0001733 <dlrealloc+0xc2>
c00016ea:	01 fd                	add    ebp,edi
c00016ec:	83 e0 01             	and    eax,0x1
c00016ef:	09 f8                	or     eax,edi
c00016f1:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016f4:	89 2d 0c b6 03 c0    	mov    DWORD PTR ds:0xc003b60c,ebp
c00016fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016fe:	29 f8                	sub    eax,edi
c0001700:	83 c8 01             	or     eax,0x1
c0001703:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001706:	e9 11 01 00 00       	jmp    c000181c <dlrealloc+0x1ab>
c000170b:	89 c8                	mov    eax,ecx
c000170d:	83 e0 fe             	and    eax,0xfffffffe
c0001710:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001715:	75 1c                	jne    c0001733 <dlrealloc+0xc2>
c0001717:	83 e1 fc             	and    ecx,0xfffffffc
c000171a:	01 f1                	add    ecx,esi
c000171c:	39 cf                	cmp    edi,ecx
c000171e:	77 13                	ja     c0001733 <dlrealloc+0xc2>
c0001720:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001723:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001726:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001729:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	e9 ab 00 00 00       	jmp    c00017de <dlrealloc+0x16d>
c0001733:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001737:	8d 47 f9             	lea    eax,[edi-0x7]
c000173a:	83 ec 0c             	sub    esp,0xc
c000173d:	50                   	push   eax
c000173e:	e8 f1 f9 ff ff       	call   c0001134 <dlmalloc>
c0001743:	83 c4 10             	add    esp,0x10
c0001746:	89 c1                	mov    ecx,eax
c0001748:	85 c0                	test   eax,eax
c000174a:	0f 84 49 ff ff ff    	je     c0001699 <dlrealloc+0x28>
c0001750:	8d 40 f8             	lea    eax,[eax-0x8]
c0001753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001757:	39 c2                	cmp    edx,eax
c0001759:	75 0a                	jne    c0001765 <dlrealloc+0xf4>
c000175b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000175e:	83 e0 fc             	and    eax,0xfffffffc
c0001761:	01 c6                	add    esi,eax
c0001763:	eb 79                	jmp    c00017de <dlrealloc+0x16d>
c0001765:	83 ee 04             	sub    esi,0x4
c0001768:	83 fe 27             	cmp    esi,0x27
c000176b:	76 16                	jbe    c0001783 <dlrealloc+0x112>
c000176d:	50                   	push   eax
c000176e:	56                   	push   esi
c000176f:	53                   	push   ebx
c0001770:	51                   	push   ecx
c0001771:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001775:	e8 ba ee ff ff       	call   c0000634 <memcpy>
c000177a:	83 c4 10             	add    esp,0x10
c000177d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001781:	eb 43                	jmp    c00017c6 <dlrealloc+0x155>
c0001783:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001785:	83 fe 13             	cmp    esi,0x13
c0001788:	89 01                	mov    DWORD PTR [ecx],eax
c000178a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000178d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001790:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001793:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001796:	76 2e                	jbe    c00017c6 <dlrealloc+0x155>
c0001798:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000179b:	83 fe 1b             	cmp    esi,0x1b
c000179e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00017a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00017a4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00017a7:	76 1d                	jbe    c00017c6 <dlrealloc+0x155>
c00017a9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00017ac:	83 fe 23             	cmp    esi,0x23
c00017af:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00017b2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017b5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017b8:	76 0c                	jbe    c00017c6 <dlrealloc+0x155>
c00017ba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017bd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017c3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	53                   	push   ebx
c00017ce:	e8 06 f6 ff ff       	call   c0000dd9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017da:	89 cb                	mov    ebx,ecx
c00017dc:	eb 3e                	jmp    c000181c <dlrealloc+0x1ab>
c00017de:	89 f2                	mov    edx,esi
c00017e0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017e3:	29 fa                	sub    edx,edi
c00017e5:	83 e1 01             	and    ecx,0x1
c00017e8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017ec:	83 fa 0f             	cmp    edx,0xf
c00017ef:	77 0b                	ja     c00017fc <dlrealloc+0x18b>
c00017f1:	09 ce                	or     esi,ecx
c00017f3:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017f6:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017fa:	eb 20                	jmp    c000181c <dlrealloc+0x1ab>
c00017fc:	01 fd                	add    ebp,edi
c00017fe:	83 ec 0c             	sub    esp,0xc
c0001801:	09 cf                	or     edi,ecx
c0001803:	83 ca 01             	or     edx,0x1
c0001806:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001809:	83 c5 08             	add    ebp,0x8
c000180c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000180f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001813:	55                   	push   ebp
c0001814:	e8 c0 f5 ff ff       	call   c0000dd9 <dlfree>
c0001819:	83 c4 10             	add    esp,0x10
c000181c:	83 c4 1c             	add    esp,0x1c
c000181f:	89 d8                	mov    eax,ebx
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlmemalign>:
c0001826:	55                   	push   ebp
c0001827:	57                   	push   edi
c0001828:	56                   	push   esi
c0001829:	53                   	push   ebx
c000182a:	83 ec 0c             	sub    esp,0xc
c000182d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001831:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001835:	83 fa 08             	cmp    edx,0x8
c0001838:	77 10                	ja     c000184a <dlmemalign+0x24>
c000183a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000183e:	83 c4 0c             	add    esp,0xc
c0001841:	5b                   	pop    ebx
c0001842:	5e                   	pop    esi
c0001843:	5f                   	pop    edi
c0001844:	5d                   	pop    ebp
c0001845:	e9 ea f8 ff ff       	jmp    c0001134 <dlmalloc>
c000184a:	bf 10 00 00 00       	mov    edi,0x10
c000184f:	83 fa 0f             	cmp    edx,0xf
c0001852:	76 13                	jbe    c0001867 <dlmemalign+0x41>
c0001854:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001857:	85 d1                	test   ecx,edx
c0001859:	75 04                	jne    c000185f <dlmemalign+0x39>
c000185b:	89 d7                	mov    edi,edx
c000185d:	eb 08                	jmp    c0001867 <dlmemalign+0x41>
c000185f:	39 d7                	cmp    edi,edx
c0001861:	73 04                	jae    c0001867 <dlmemalign+0x41>
c0001863:	01 ff                	add    edi,edi
c0001865:	eb f8                	jmp    c000185f <dlmemalign+0x39>
c0001867:	83 f8 df             	cmp    eax,0xffffffdf
c000186a:	76 07                	jbe    c0001873 <dlmemalign+0x4d>
c000186c:	31 c0                	xor    eax,eax
c000186e:	e9 ce 00 00 00       	jmp    c0001941 <dlmemalign+0x11b>
c0001873:	83 c0 0b             	add    eax,0xb
c0001876:	bd 10 00 00 00       	mov    ebp,0x10
c000187b:	83 f8 0f             	cmp    eax,0xf
c000187e:	76 05                	jbe    c0001885 <dlmemalign+0x5f>
c0001880:	83 e0 f8             	and    eax,0xfffffff8
c0001883:	89 c5                	mov    ebp,eax
c0001885:	83 ec 0c             	sub    esp,0xc
c0001888:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000188c:	50                   	push   eax
c000188d:	e8 a2 f8 ff ff       	call   c0001134 <dlmalloc>
c0001892:	83 c4 10             	add    esp,0x10
c0001895:	89 c1                	mov    ecx,eax
c0001897:	85 c0                	test   eax,eax
c0001899:	74 d1                	je     c000186c <dlmemalign+0x46>
c000189b:	31 d2                	xor    edx,edx
c000189d:	8d 70 f8             	lea    esi,[eax-0x8]
c00018a0:	f7 f7                	div    edi
c00018a2:	85 d2                	test   edx,edx
c00018a4:	74 62                	je     c0001908 <dlmemalign+0xe2>
c00018a6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018aa:	89 f8                	mov    eax,edi
c00018ac:	f7 d8                	neg    eax
c00018ae:	21 c3                	and    ebx,eax
c00018b0:	83 eb 08             	sub    ebx,0x8
c00018b3:	89 d8                	mov    eax,ebx
c00018b5:	29 f0                	sub    eax,esi
c00018b7:	83 f8 0f             	cmp    eax,0xf
c00018ba:	77 02                	ja     c00018be <dlmemalign+0x98>
c00018bc:	01 fb                	add    ebx,edi
c00018be:	89 d8                	mov    eax,ebx
c00018c0:	29 f0                	sub    eax,esi
c00018c2:	89 c6                	mov    esi,eax
c00018c4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018c7:	89 c2                	mov    edx,eax
c00018c9:	83 e2 fc             	and    edx,0xfffffffc
c00018cc:	29 f2                	sub    edx,esi
c00018ce:	a8 02                	test   al,0x2
c00018d0:	74 10                	je     c00018e2 <dlmemalign+0xbc>
c00018d2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018d5:	83 ca 02             	or     edx,0x2
c00018d8:	8d 43 08             	lea    eax,[ebx+0x8]
c00018db:	89 33                	mov    DWORD PTR [ebx],esi
c00018dd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018e0:	eb 5f                	jmp    c0001941 <dlmemalign+0x11b>
c00018e2:	83 ec 0c             	sub    esp,0xc
c00018e5:	89 d0                	mov    eax,edx
c00018e7:	83 c8 01             	or     eax,0x1
c00018ea:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018ed:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018f2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018f5:	83 e0 01             	and    eax,0x1
c00018f8:	09 f0                	or     eax,esi
c00018fa:	89 de                	mov    esi,ebx
c00018fc:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ff:	51                   	push   ecx
c0001900:	e8 d4 f4 ff ff       	call   c0000dd9 <dlfree>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000190b:	a8 02                	test   al,0x2
c000190d:	75 2f                	jne    c000193e <dlmemalign+0x118>
c000190f:	83 e0 fc             	and    eax,0xfffffffc
c0001912:	8d 55 10             	lea    edx,[ebp+0x10]
c0001915:	39 c2                	cmp    edx,eax
c0001917:	73 25                	jae    c000193e <dlmemalign+0x118>
c0001919:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000191c:	83 ec 0c             	sub    esp,0xc
c000191f:	29 e8                	sub    eax,ebp
c0001921:	83 c2 08             	add    edx,0x8
c0001924:	83 c8 01             	or     eax,0x1
c0001927:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000192a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000192d:	83 e0 01             	and    eax,0x1
c0001930:	09 c5                	or     ebp,eax
c0001932:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001935:	52                   	push   edx
c0001936:	e8 9e f4 ff ff       	call   c0000dd9 <dlfree>
c000193b:	83 c4 10             	add    esp,0x10
c000193e:	8d 46 08             	lea    eax,[esi+0x8]
c0001941:	83 c4 0c             	add    esp,0xc
c0001944:	5b                   	pop    ebx
c0001945:	5e                   	pop    esi
c0001946:	5f                   	pop    edi
c0001947:	5d                   	pop    ebp
c0001948:	c3                   	ret    

c0001949 <dlcalloc>:
c0001949:	53                   	push   ebx
c000194a:	83 ec 14             	sub    esp,0x14
c000194d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001951:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001956:	50                   	push   eax
c0001957:	e8 d8 f7 ff ff       	call   c0001134 <dlmalloc>
c000195c:	83 c4 10             	add    esp,0x10
c000195f:	89 c3                	mov    ebx,eax
c0001961:	85 c0                	test   eax,eax
c0001963:	74 77                	je     c00019dc <dlcalloc+0x93>
c0001965:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001968:	89 d0                	mov    eax,edx
c000196a:	83 e0 fc             	and    eax,0xfffffffc
c000196d:	80 e2 02             	and    dl,0x2
c0001970:	75 5a                	jne    c00019cc <dlcalloc+0x83>
c0001972:	83 e8 04             	sub    eax,0x4
c0001975:	83 f8 27             	cmp    eax,0x27
c0001978:	76 03                	jbe    c000197d <dlcalloc+0x34>
c000197a:	51                   	push   ecx
c000197b:	eb 53                	jmp    c00019d0 <dlcalloc+0x87>
c000197d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001983:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000198a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001991:	83 f8 13             	cmp    eax,0x13
c0001994:	76 46                	jbe    c00019dc <dlcalloc+0x93>
c0001996:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000199d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019a4:	83 f8 1b             	cmp    eax,0x1b
c00019a7:	76 33                	jbe    c00019dc <dlcalloc+0x93>
c00019a9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019b0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019b7:	83 f8 23             	cmp    eax,0x23
c00019ba:	76 20                	jbe    c00019dc <dlcalloc+0x93>
c00019bc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019c3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ca:	eb 10                	jmp    c00019dc <dlcalloc+0x93>
c00019cc:	83 e8 08             	sub    eax,0x8
c00019cf:	52                   	push   edx
c00019d0:	50                   	push   eax
c00019d1:	6a 00                	push   0x0
c00019d3:	53                   	push   ebx
c00019d4:	e8 d2 ec ff ff       	call   c00006ab <memset>
c00019d9:	83 c4 10             	add    esp,0x10
c00019dc:	89 d8                	mov    eax,ebx
c00019de:	83 c4 08             	add    esp,0x8
c00019e1:	5b                   	pop    ebx
c00019e2:	c3                   	ret    

c00019e3 <dlcfree>:
c00019e3:	e9 f1 f3 ff ff       	jmp    c0000dd9 <dlfree>

c00019e8 <dlindependent_calloc>:
c00019e8:	83 ec 28             	sub    esp,0x28
c00019eb:	b9 03 00 00 00       	mov    ecx,0x3
c00019f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019fc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a04:	e8 b9 fa ff ff       	call   c00014c2 <iALLOc>
c0001a09:	83 c4 2c             	add    esp,0x2c
c0001a0c:	c3                   	ret    

c0001a0d <dlindependent_comalloc>:
c0001a0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a15:	31 c9                	xor    ecx,ecx
c0001a17:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a1f:	e9 9e fa ff ff       	jmp    c00014c2 <iALLOc>

c0001a24 <dlvalloc>:
c0001a24:	83 ec 0c             	sub    esp,0xc
c0001a27:	83 3d e0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5e0,0x0
c0001a2e:	75 0a                	jne    c0001a3a <dlvalloc+0x16>
c0001a30:	b8 e0 b5 03 c0       	mov    eax,0xc003b5e0
c0001a35:	e8 b8 f2 ff ff       	call   c0000cf2 <malloc_consolidate>
c0001a3a:	50                   	push   eax
c0001a3b:	50                   	push   eax
c0001a3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a40:	ff 35 3c b9 03 c0    	push   DWORD PTR ds:0xc003b93c
c0001a46:	e8 db fd ff ff       	call   c0001826 <dlmemalign>
c0001a4b:	83 c4 1c             	add    esp,0x1c
c0001a4e:	c3                   	ret    

c0001a4f <dlpvalloc>:
c0001a4f:	83 ec 0c             	sub    esp,0xc
c0001a52:	83 3d e0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5e0,0x0
c0001a59:	75 0a                	jne    c0001a65 <dlpvalloc+0x16>
c0001a5b:	b8 e0 b5 03 c0       	mov    eax,0xc003b5e0
c0001a60:	e8 8d f2 ff ff       	call   c0000cf2 <malloc_consolidate>
c0001a65:	a1 3c b9 03 c0       	mov    eax,ds:0xc003b93c
c0001a6a:	89 c1                	mov    ecx,eax
c0001a6c:	52                   	push   edx
c0001a6d:	f7 d9                	neg    ecx
c0001a6f:	52                   	push   edx
c0001a70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a74:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a78:	21 ca                	and    edx,ecx
c0001a7a:	52                   	push   edx
c0001a7b:	50                   	push   eax
c0001a7c:	e8 a5 fd ff ff       	call   c0001826 <dlmemalign>
c0001a81:	83 c4 1c             	add    esp,0x1c
c0001a84:	c3                   	ret    

c0001a85 <dlmalloc_trim>:
c0001a85:	b8 e0 b5 03 c0       	mov    eax,0xc003b5e0
c0001a8a:	e8 63 f2 ff ff       	call   c0000cf2 <malloc_consolidate>
c0001a8f:	31 c0                	xor    eax,eax
c0001a91:	c3                   	ret    

c0001a92 <dlmalloc_usable_size>:
c0001a92:	53                   	push   ebx
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a99:	85 c9                	test   ecx,ecx
c0001a9b:	74 24                	je     c0001ac1 <dlmalloc_usable_size+0x2f>
c0001a9d:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001aa0:	f6 c2 02             	test   dl,0x2
c0001aa3:	74 08                	je     c0001aad <dlmalloc_usable_size+0x1b>
c0001aa5:	83 e2 fc             	and    edx,0xfffffffc
c0001aa8:	8d 42 f8             	lea    eax,[edx-0x8]
c0001aab:	eb 14                	jmp    c0001ac1 <dlmalloc_usable_size+0x2f>
c0001aad:	89 d3                	mov    ebx,edx
c0001aaf:	31 c0                	xor    eax,eax
c0001ab1:	83 e3 fe             	and    ebx,0xfffffffe
c0001ab4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ab9:	74 06                	je     c0001ac1 <dlmalloc_usable_size+0x2f>
c0001abb:	83 e2 fc             	and    edx,0xfffffffc
c0001abe:	8d 42 fc             	lea    eax,[edx-0x4]
c0001ac1:	5b                   	pop    ebx
c0001ac2:	c3                   	ret    

c0001ac3 <dlmallinfo>:
c0001ac3:	55                   	push   ebp
c0001ac4:	57                   	push   edi
c0001ac5:	56                   	push   esi
c0001ac6:	53                   	push   ebx
c0001ac7:	83 ec 08             	sub    esp,0x8
c0001aca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ace:	83 3d 0c b6 03 c0 00 	cmp    DWORD PTR ds:0xc003b60c,0x0
c0001ad5:	75 0a                	jne    c0001ae1 <dlmallinfo+0x1e>
c0001ad7:	b8 e0 b5 03 c0       	mov    eax,0xc003b5e0
c0001adc:	e8 11 f2 ff ff       	call   c0000cf2 <malloc_consolidate>
c0001ae1:	a1 0c b6 03 c0       	mov    eax,ds:0xc003b60c
c0001ae6:	31 ed                	xor    ebp,ebp
c0001ae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001aeb:	31 c9                	xor    ecx,ecx
c0001aed:	83 e0 fc             	and    eax,0xfffffffc
c0001af0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001af4:	31 c0                	xor    eax,eax
c0001af6:	8b 14 85 e4 b5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4a1c]
c0001afd:	85 d2                	test   edx,edx
c0001aff:	74 0e                	je     c0001b0f <dlmallinfo+0x4c>
c0001b01:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b04:	45                   	inc    ebp
c0001b05:	83 e6 fc             	and    esi,0xfffffffc
c0001b08:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b0b:	01 f1                	add    ecx,esi
c0001b0d:	eb ee                	jmp    c0001afd <dlmallinfo+0x3a>
c0001b0f:	40                   	inc    eax
c0001b10:	83 f8 0a             	cmp    eax,0xa
c0001b13:	75 e1                	jne    c0001af6 <dlmallinfo+0x33>
c0001b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b19:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b20:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b23:	b8 14 b6 03 c0       	mov    eax,0xc003b614
c0001b28:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b2b:	39 f0                	cmp    eax,esi
c0001b2d:	74 10                	je     c0001b3f <dlmallinfo+0x7c>
c0001b2f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b32:	ff 04 24             	inc    DWORD PTR [esp]
c0001b35:	83 e7 fc             	and    edi,0xfffffffc
c0001b38:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b3b:	01 fa                	add    edx,edi
c0001b3d:	eb ec                	jmp    c0001b2b <dlmallinfo+0x68>
c0001b3f:	83 c0 08             	add    eax,0x8
c0001b42:	3d 0c b9 03 c0       	cmp    eax,0xc003b90c
c0001b47:	75 df                	jne    c0001b28 <dlmallinfo+0x65>
c0001b49:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b4c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b4f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b52:	a1 48 b9 03 c0       	mov    eax,ds:0xc003b948
c0001b57:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b5a:	89 03                	mov    DWORD PTR [ebx],eax
c0001b5c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b5f:	8b 35 30 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b930
c0001b65:	29 d0                	sub    eax,edx
c0001b67:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b6a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b6d:	8b 35 44 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b944
c0001b73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b77:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b7a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b7d:	8b 35 54 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b954
c0001b83:	89 d8                	mov    eax,ebx
c0001b85:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b88:	83 c4 08             	add    esp,0x8
c0001b8b:	5b                   	pop    ebx
c0001b8c:	5e                   	pop    esi
c0001b8d:	5f                   	pop    edi
c0001b8e:	5d                   	pop    ebp
c0001b8f:	c2 04 00             	ret    0x4

c0001b92 <dlmalloc_stats>:
c0001b92:	83 ec 30             	sub    esp,0x30
c0001b95:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b99:	50                   	push   eax
c0001b9a:	e8 24 ff ff ff       	call   c0001ac3 <dlmallinfo>
c0001b9f:	83 c4 30             	add    esp,0x30
c0001ba2:	c3                   	ret    

c0001ba3 <dlmallopt>:
c0001ba3:	56                   	push   esi
c0001ba4:	b8 e0 b5 03 c0       	mov    eax,0xc003b5e0
c0001ba9:	53                   	push   ebx
c0001baa:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bb2:	e8 3b f1 ff ff       	call   c0000cf2 <malloc_consolidate>
c0001bb7:	8d 46 04             	lea    eax,[esi+0x4]
c0001bba:	83 f8 05             	cmp    eax,0x5
c0001bbd:	77 67                	ja     c0001c26 <dlmallopt+0x83>
c0001bbf:	ff 24 85 64 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe099c]
c0001bc6:	83 fb 50             	cmp    ebx,0x50
c0001bc9:	77 5b                	ja     c0001c26 <dlmallopt+0x83>
c0001bcb:	ba 08 00 00 00       	mov    edx,0x8
c0001bd0:	85 db                	test   ebx,ebx
c0001bd2:	74 12                	je     c0001be6 <dlmallopt+0x43>
c0001bd4:	83 c3 0b             	add    ebx,0xb
c0001bd7:	ba 10 00 00 00       	mov    edx,0x10
c0001bdc:	83 fb 0f             	cmp    ebx,0xf
c0001bdf:	76 05                	jbe    c0001be6 <dlmallopt+0x43>
c0001be1:	89 da                	mov    edx,ebx
c0001be3:	83 e2 f8             	and    edx,0xfffffff8
c0001be6:	a1 e0 b5 03 c0       	mov    eax,ds:0xc003b5e0
c0001beb:	83 e0 03             	and    eax,0x3
c0001bee:	09 d0                	or     eax,edx
c0001bf0:	a3 e0 b5 03 c0       	mov    ds:0xc003b5e0,eax
c0001bf5:	eb 31                	jmp    c0001c28 <dlmallopt+0x85>
c0001bf7:	89 1d 24 b9 03 c0    	mov    DWORD PTR ds:0xc003b924,ebx
c0001bfd:	eb 06                	jmp    c0001c05 <dlmallopt+0x62>
c0001bff:	89 1d 28 b9 03 c0    	mov    DWORD PTR ds:0xc003b928,ebx
c0001c05:	be 01 00 00 00       	mov    esi,0x1
c0001c0a:	eb 1c                	jmp    c0001c28 <dlmallopt+0x85>
c0001c0c:	89 1d 2c b9 03 c0    	mov    DWORD PTR ds:0xc003b92c,ebx
c0001c12:	eb f1                	jmp    c0001c05 <dlmallopt+0x62>
c0001c14:	31 f6                	xor    esi,esi
c0001c16:	85 db                	test   ebx,ebx
c0001c18:	75 0e                	jne    c0001c28 <dlmallopt+0x85>
c0001c1a:	c7 05 34 b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b934,0x0
c0001c24:	eb df                	jmp    c0001c05 <dlmallopt+0x62>
c0001c26:	31 f6                	xor    esi,esi
c0001c28:	89 f0                	mov    eax,esi
c0001c2a:	5b                   	pop    ebx
c0001c2b:	5e                   	pop    esi
c0001c2c:	c3                   	ret    

c0001c2d <disk_status>:
c0001c2d:	31 c0                	xor    eax,eax
c0001c2f:	c3                   	ret    

c0001c30 <disk_initialize>:
c0001c30:	31 c0                	xor    eax,eax
c0001c32:	c3                   	ret    

c0001c33 <disk_read>:
c0001c33:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c38:	0f b6 04 85 40 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc37c0]
c0001c40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c44:	e9 25 7a 01 00       	jmp    c001966e <fatWrapperReadDisk>

c0001c49 <disk_write>:
c0001c49:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c4e:	0f b6 04 85 40 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc37c0]
c0001c56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5a:	e9 56 7a 01 00       	jmp    c00196b5 <fatWrapperWriteDisk>

c0001c5f <disk_ioctl>:
c0001c5f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c68:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c6d:	0f b6 04 85 40 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc37c0]
c0001c75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c79:	e9 7e 7a 01 00       	jmp    c00196fc <fatWrapperIoctl>

c0001c7e <ld_word>:
c0001c7e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c82:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c85:	c1 e2 08             	shl    edx,0x8
c0001c88:	09 d0                	or     eax,edx
c0001c8a:	c3                   	ret    

c0001c8b <ld_dword>:
c0001c8b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c8f:	89 d1                	mov    ecx,edx
c0001c91:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c95:	c1 e1 08             	shl    ecx,0x8
c0001c98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c9b:	09 ca                	or     edx,ecx
c0001c9d:	c1 e2 08             	shl    edx,0x8
c0001ca0:	09 d0                	or     eax,edx
c0001ca2:	c3                   	ret    

c0001ca3 <ld_qword>:
c0001ca3:	57                   	push   edi
c0001ca4:	56                   	push   esi
c0001ca5:	53                   	push   ebx
c0001ca6:	31 db                	xor    ebx,ebx
c0001ca8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001cab:	89 df                	mov    edi,ebx
c0001cad:	89 ce                	mov    esi,ecx
c0001caf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001cb3:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb7:	c1 e6 08             	shl    esi,0x8
c0001cba:	09 f2                	or     edx,esi
c0001cbc:	89 d6                	mov    esi,edx
c0001cbe:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cc2:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc6:	c1 e6 08             	shl    esi,0x8
c0001cc9:	09 f2                	or     edx,esi
c0001ccb:	89 d6                	mov    esi,edx
c0001ccd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cd1:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cd5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cd8:	c1 e6 08             	shl    esi,0x8
c0001cdb:	89 fb                	mov    ebx,edi
c0001cdd:	09 f2                	or     edx,esi
c0001cdf:	89 d1                	mov    ecx,edx
c0001ce1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ce5:	c1 e1 08             	shl    ecx,0x8
c0001ce8:	89 da                	mov    edx,ebx
c0001cea:	09 c8                	or     eax,ecx
c0001cec:	5b                   	pop    ebx
c0001ced:	5e                   	pop    esi
c0001cee:	5f                   	pop    edi
c0001cef:	c3                   	ret    

c0001cf0 <st_word>:
c0001cf0:	66 89 10             	mov    WORD PTR [eax],dx
c0001cf3:	c3                   	ret    

c0001cf4 <st_dword>:
c0001cf4:	89 10                	mov    DWORD PTR [eax],edx
c0001cf6:	c3                   	ret    

c0001cf7 <st_qword>:
c0001cf7:	89 10                	mov    DWORD PTR [eax],edx
c0001cf9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cfc:	c3                   	ret    

c0001cfd <mem_cpy>:
c0001cfd:	85 c9                	test   ecx,ecx
c0001cff:	74 10                	je     c0001d11 <mem_cpy+0x14>
c0001d01:	57                   	push   edi
c0001d02:	01 c1                	add    ecx,eax
c0001d04:	56                   	push   esi
c0001d05:	89 c7                	mov    edi,eax
c0001d07:	89 d6                	mov    esi,edx
c0001d09:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d0a:	39 f9                	cmp    ecx,edi
c0001d0c:	75 fb                	jne    c0001d09 <mem_cpy+0xc>
c0001d0e:	5e                   	pop    esi
c0001d0f:	5f                   	pop    edi
c0001d10:	c3                   	ret    
c0001d11:	c3                   	ret    

c0001d12 <mem_set>:
c0001d12:	01 c1                	add    ecx,eax
c0001d14:	40                   	inc    eax
c0001d15:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d18:	39 c8                	cmp    eax,ecx
c0001d1a:	75 f8                	jne    c0001d14 <mem_set+0x2>
c0001d1c:	c3                   	ret    

c0001d1d <mem_cmp>:
c0001d1d:	57                   	push   edi
c0001d1e:	56                   	push   esi
c0001d1f:	89 c6                	mov    esi,eax
c0001d21:	53                   	push   ebx
c0001d22:	46                   	inc    esi
c0001d23:	42                   	inc    edx
c0001d24:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d28:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d2c:	29 fb                	sub    ebx,edi
c0001d2e:	89 cf                	mov    edi,ecx
c0001d30:	29 f7                	sub    edi,esi
c0001d32:	01 c7                	add    edi,eax
c0001d34:	74 04                	je     c0001d3a <mem_cmp+0x1d>
c0001d36:	85 db                	test   ebx,ebx
c0001d38:	74 e8                	je     c0001d22 <mem_cmp+0x5>
c0001d3a:	89 d8                	mov    eax,ebx
c0001d3c:	5b                   	pop    ebx
c0001d3d:	5e                   	pop    esi
c0001d3e:	5f                   	pop    edi
c0001d3f:	c3                   	ret    

c0001d40 <chk_chr>:
c0001d40:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d43:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d46:	74 07                	je     c0001d4f <chk_chr+0xf>
c0001d48:	39 d1                	cmp    ecx,edx
c0001d4a:	74 03                	je     c0001d4f <chk_chr+0xf>
c0001d4c:	40                   	inc    eax
c0001d4d:	eb f1                	jmp    c0001d40 <chk_chr>
c0001d4f:	89 c8                	mov    eax,ecx
c0001d51:	c3                   	ret    

c0001d52 <dbc_1st>:
c0001d52:	31 c0                	xor    eax,eax
c0001d54:	c3                   	ret    

c0001d55 <dbc_2nd>:
c0001d55:	31 c0                	xor    eax,eax
c0001d57:	c3                   	ret    

c0001d58 <tchar2uni>:
c0001d58:	57                   	push   edi
c0001d59:	89 c7                	mov    edi,eax
c0001d5b:	56                   	push   esi
c0001d5c:	53                   	push   ebx
c0001d5d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d5f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d61:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d64:	84 c9                	test   cl,cl
c0001d66:	78 0a                	js     c0001d72 <tchar2uni+0x1a>
c0001d68:	0f b6 d1             	movzx  edx,cl
c0001d6b:	89 f3                	mov    ebx,esi
c0001d6d:	e9 9f 00 00 00       	jmp    c0001e11 <tchar2uni+0xb9>
c0001d72:	88 ca                	mov    dl,cl
c0001d74:	83 e2 e0             	and    edx,0xffffffe0
c0001d77:	80 fa c0             	cmp    dl,0xc0
c0001d7a:	75 0c                	jne    c0001d88 <tchar2uni+0x30>
c0001d7c:	89 ca                	mov    edx,ecx
c0001d7e:	b9 01 00 00 00       	mov    ecx,0x1
c0001d83:	83 e2 1f             	and    edx,0x1f
c0001d86:	eb 2e                	jmp    c0001db6 <tchar2uni+0x5e>
c0001d88:	88 ca                	mov    dl,cl
c0001d8a:	83 e2 f0             	and    edx,0xfffffff0
c0001d8d:	80 fa e0             	cmp    dl,0xe0
c0001d90:	75 0c                	jne    c0001d9e <tchar2uni+0x46>
c0001d92:	89 ca                	mov    edx,ecx
c0001d94:	b9 02 00 00 00       	mov    ecx,0x2
c0001d99:	83 e2 0f             	and    edx,0xf
c0001d9c:	eb 18                	jmp    c0001db6 <tchar2uni+0x5e>
c0001d9e:	88 ca                	mov    dl,cl
c0001da0:	83 e2 f8             	and    edx,0xfffffff8
c0001da3:	88 d0                	mov    al,dl
c0001da5:	83 ca ff             	or     edx,0xffffffff
c0001da8:	3c f0                	cmp    al,0xf0
c0001daa:	75 6c                	jne    c0001e18 <tchar2uni+0xc0>
c0001dac:	89 ca                	mov    edx,ecx
c0001dae:	b9 03 00 00 00       	mov    ecx,0x3
c0001db3:	83 e2 07             	and    edx,0x7
c0001db6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001dba:	46                   	inc    esi
c0001dbb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001dbe:	88 c8                	mov    al,cl
c0001dc0:	83 e0 c0             	and    eax,0xffffffc0
c0001dc3:	3c 80                	cmp    al,0x80
c0001dc5:	75 4e                	jne    c0001e15 <tchar2uni+0xbd>
c0001dc7:	c1 e2 06             	shl    edx,0x6
c0001dca:	83 e1 3f             	and    ecx,0x3f
c0001dcd:	09 ca                	or     edx,ecx
c0001dcf:	39 de                	cmp    esi,ebx
c0001dd1:	75 e7                	jne    c0001dba <tchar2uni+0x62>
c0001dd3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dd6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ddc:	77 37                	ja     c0001e15 <tchar2uni+0xbd>
c0001dde:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001de4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dea:	76 29                	jbe    c0001e15 <tchar2uni+0xbd>
c0001dec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001df2:	76 1d                	jbe    c0001e11 <tchar2uni+0xb9>
c0001df4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001dfa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e00:	c1 e1 06             	shl    ecx,0x6
c0001e03:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e09:	09 ca                	or     edx,ecx
c0001e0b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e11:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e13:	eb 03                	jmp    c0001e18 <tchar2uni+0xc0>
c0001e15:	83 ca ff             	or     edx,0xffffffff
c0001e18:	5b                   	pop    ebx
c0001e19:	89 d0                	mov    eax,edx
c0001e1b:	5e                   	pop    esi
c0001e1c:	5f                   	pop    edi
c0001e1d:	c3                   	ret    

c0001e1e <put_utf>:
c0001e1e:	53                   	push   ebx
c0001e1f:	83 f8 7f             	cmp    eax,0x7f
c0001e22:	89 c3                	mov    ebx,eax
c0001e24:	b0 00                	mov    al,0x0
c0001e26:	77 11                	ja     c0001e39 <put_utf+0x1b>
c0001e28:	85 c9                	test   ecx,ecx
c0001e2a:	0f 84 e5 00 00 00    	je     c0001f15 <put_utf+0xf7>
c0001e30:	88 1a                	mov    BYTE PTR [edx],bl
c0001e32:	b0 01                	mov    al,0x1
c0001e34:	e9 dc 00 00 00       	jmp    c0001f15 <put_utf+0xf7>
c0001e39:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e3f:	77 23                	ja     c0001e64 <put_utf+0x46>
c0001e41:	83 f9 01             	cmp    ecx,0x1
c0001e44:	0f 86 cb 00 00 00    	jbe    c0001f15 <put_utf+0xf7>
c0001e4a:	89 d8                	mov    eax,ebx
c0001e4c:	83 e3 3f             	and    ebx,0x3f
c0001e4f:	c1 e8 06             	shr    eax,0x6
c0001e52:	83 cb 80             	or     ebx,0xffffff80
c0001e55:	83 c8 c0             	or     eax,0xffffffc0
c0001e58:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e5b:	88 02                	mov    BYTE PTR [edx],al
c0001e5d:	b0 02                	mov    al,0x2
c0001e5f:	e9 b1 00 00 00       	jmp    c0001f15 <put_utf+0xf7>
c0001e64:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e6a:	77 40                	ja     c0001eac <put_utf+0x8e>
c0001e6c:	83 f9 02             	cmp    ecx,0x2
c0001e6f:	0f 86 a0 00 00 00    	jbe    c0001f15 <put_utf+0xf7>
c0001e75:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e7b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e81:	0f 86 8e 00 00 00    	jbe    c0001f15 <put_utf+0xf7>
c0001e87:	89 d8                	mov    eax,ebx
c0001e89:	c1 e8 0c             	shr    eax,0xc
c0001e8c:	83 c8 e0             	or     eax,0xffffffe0
c0001e8f:	88 02                	mov    BYTE PTR [edx],al
c0001e91:	89 d8                	mov    eax,ebx
c0001e93:	83 e3 3f             	and    ebx,0x3f
c0001e96:	c1 e8 06             	shr    eax,0x6
c0001e99:	83 cb 80             	or     ebx,0xffffff80
c0001e9c:	83 e0 3f             	and    eax,0x3f
c0001e9f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ea2:	83 c8 80             	or     eax,0xffffff80
c0001ea5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea8:	b0 03                	mov    al,0x3
c0001eaa:	eb 69                	jmp    c0001f15 <put_utf+0xf7>
c0001eac:	83 f9 03             	cmp    ecx,0x3
c0001eaf:	76 64                	jbe    c0001f15 <put_utf+0xf7>
c0001eb1:	89 d9                	mov    ecx,ebx
c0001eb3:	0f b7 c3             	movzx  eax,bx
c0001eb6:	66 31 c9             	xor    cx,cx
c0001eb9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ebf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ec5:	c1 e9 06             	shr    ecx,0x6
c0001ec8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ece:	77 43                	ja     c0001f13 <put_utf+0xf5>
c0001ed0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ed6:	77 3b                	ja     c0001f13 <put_utf+0xf5>
c0001ed8:	09 cb                	or     ebx,ecx
c0001eda:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ee0:	89 d8                	mov    eax,ebx
c0001ee2:	c1 e8 12             	shr    eax,0x12
c0001ee5:	83 c8 f0             	or     eax,0xfffffff0
c0001ee8:	88 02                	mov    BYTE PTR [edx],al
c0001eea:	89 d8                	mov    eax,ebx
c0001eec:	c1 e8 0c             	shr    eax,0xc
c0001eef:	83 e0 3f             	and    eax,0x3f
c0001ef2:	83 c8 80             	or     eax,0xffffff80
c0001ef5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef8:	89 d8                	mov    eax,ebx
c0001efa:	83 e3 3f             	and    ebx,0x3f
c0001efd:	c1 e8 06             	shr    eax,0x6
c0001f00:	83 cb 80             	or     ebx,0xffffff80
c0001f03:	83 e0 3f             	and    eax,0x3f
c0001f06:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f09:	83 c8 80             	or     eax,0xffffff80
c0001f0c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f0f:	b0 04                	mov    al,0x4
c0001f11:	eb 02                	jmp    c0001f15 <put_utf+0xf7>
c0001f13:	31 c0                	xor    eax,eax
c0001f15:	5b                   	pop    ebx
c0001f16:	c3                   	ret    

c0001f17 <clst2sect>:
c0001f17:	89 c1                	mov    ecx,eax
c0001f19:	83 ea 02             	sub    edx,0x2
c0001f1c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f1f:	83 e8 02             	sub    eax,0x2
c0001f22:	39 d0                	cmp    eax,edx
c0001f24:	76 0d                	jbe    c0001f33 <clst2sect+0x1c>
c0001f26:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f2a:	f7 e2                	mul    edx
c0001f2c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f2f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f32:	c3                   	ret    
c0001f33:	31 c0                	xor    eax,eax
c0001f35:	31 d2                	xor    edx,edx
c0001f37:	c3                   	ret    

c0001f38 <clmt_clust>:
c0001f38:	57                   	push   edi
c0001f39:	89 cf                	mov    edi,ecx
c0001f3b:	56                   	push   esi
c0001f3c:	89 d6                	mov    esi,edx
c0001f3e:	53                   	push   ebx
c0001f3f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f43:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f46:	89 f2                	mov    edx,esi
c0001f48:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f4a:	c1 ef 09             	shr    edi,0x9
c0001f4d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f51:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f54:	89 f9                	mov    ecx,edi
c0001f56:	31 ff                	xor    edi,edi
c0001f58:	57                   	push   edi
c0001f59:	56                   	push   esi
c0001f5a:	51                   	push   ecx
c0001f5b:	52                   	push   edx
c0001f5c:	e8 ab c7 01 00       	call   c001e70c <__udivdi3>
c0001f61:	83 c4 10             	add    esp,0x10
c0001f64:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f66:	85 d2                	test   edx,edx
c0001f68:	74 10                	je     c0001f7a <clmt_clust+0x42>
c0001f6a:	39 d0                	cmp    eax,edx
c0001f6c:	72 07                	jb     c0001f75 <clmt_clust+0x3d>
c0001f6e:	29 d0                	sub    eax,edx
c0001f70:	83 c3 08             	add    ebx,0x8
c0001f73:	eb ef                	jmp    c0001f64 <clmt_clust+0x2c>
c0001f75:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f78:	89 c2                	mov    edx,eax
c0001f7a:	5b                   	pop    ebx
c0001f7b:	89 d0                	mov    eax,edx
c0001f7d:	5e                   	pop    esi
c0001f7e:	5f                   	pop    edi
c0001f7f:	c3                   	ret    

c0001f80 <pick_lfn>:
c0001f80:	55                   	push   ebp
c0001f81:	57                   	push   edi
c0001f82:	56                   	push   esi
c0001f83:	89 d6                	mov    esi,edx
c0001f85:	53                   	push   ebx
c0001f86:	89 c3                	mov    ebx,eax
c0001f88:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8b:	e8 ee fc ff ff       	call   c0001c7e <ld_word>
c0001f90:	66 85 c0             	test   ax,ax
c0001f93:	74 04                	je     c0001f99 <pick_lfn+0x19>
c0001f95:	31 c0                	xor    eax,eax
c0001f97:	eb 5c                	jmp    c0001ff5 <pick_lfn+0x75>
c0001f99:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9c:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa1:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa4:	31 ff                	xor    edi,edi
c0001fa6:	49                   	dec    ecx
c0001fa7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001faa:	0f b6 87 80 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0880]
c0001fb1:	01 f0                	add    eax,esi
c0001fb3:	e8 c6 fc ff ff       	call   c0001c7e <ld_word>
c0001fb8:	66 85 ed             	test   bp,bp
c0001fbb:	74 11                	je     c0001fce <pick_lfn+0x4e>
c0001fbd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc3:	77 d0                	ja     c0001f95 <pick_lfn+0x15>
c0001fc5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fc9:	89 c5                	mov    ebp,eax
c0001fcb:	41                   	inc    ecx
c0001fcc:	eb 04                	jmp    c0001fd2 <pick_lfn+0x52>
c0001fce:	66 40                	inc    ax
c0001fd0:	75 c3                	jne    c0001f95 <pick_lfn+0x15>
c0001fd2:	47                   	inc    edi
c0001fd3:	83 ff 0d             	cmp    edi,0xd
c0001fd6:	75 d2                	jne    c0001faa <pick_lfn+0x2a>
c0001fd8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdb:	74 13                	je     c0001ff0 <pick_lfn+0x70>
c0001fdd:	66 85 ed             	test   bp,bp
c0001fe0:	74 0e                	je     c0001ff0 <pick_lfn+0x70>
c0001fe2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe8:	77 ab                	ja     c0001f95 <pick_lfn+0x15>
c0001fea:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff0:	b8 01 00 00 00       	mov    eax,0x1
c0001ff5:	5b                   	pop    ebx
c0001ff6:	5e                   	pop    esi
c0001ff7:	5f                   	pop    edi
c0001ff8:	5d                   	pop    ebp
c0001ff9:	c3                   	ret    

c0001ffa <put_lfn>:
c0001ffa:	55                   	push   ebp
c0001ffb:	31 ed                	xor    ebp,ebp
c0001ffd:	57                   	push   edi
c0001ffe:	89 d7                	mov    edi,edx
c0002000:	56                   	push   esi
c0002001:	31 f6                	xor    esi,esi
c0002003:	53                   	push   ebx
c0002004:	83 ec 08             	sub    esp,0x8
c0002007:	89 04 24             	mov    DWORD PTR [esp],eax
c000200a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c000200e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002012:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002018:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000201e:	31 d2                	xor    edx,edx
c0002020:	e8 cb fc ff ff       	call   c0001cf0 <st_word>
c0002025:	0f b6 d9             	movzx  ebx,cl
c0002028:	4b                   	dec    ebx
c0002029:	6b db 0d             	imul   ebx,ebx,0xd
c000202c:	66 83 fe ff          	cmp    si,0xffff
c0002030:	74 08                	je     c000203a <put_lfn+0x40>
c0002032:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002035:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002039:	43                   	inc    ebx
c000203a:	0f b6 85 80 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0880]
c0002041:	0f b7 d6             	movzx  edx,si
c0002044:	01 f8                	add    eax,edi
c0002046:	e8 a5 fc ff ff       	call   c0001cf0 <st_word>
c000204b:	66 85 f6             	test   si,si
c000204e:	75 03                	jne    c0002053 <put_lfn+0x59>
c0002050:	83 ce ff             	or     esi,0xffffffff
c0002053:	45                   	inc    ebp
c0002054:	83 fd 0d             	cmp    ebp,0xd
c0002057:	75 d3                	jne    c000202c <put_lfn+0x32>
c0002059:	66 46                	inc    si
c000205b:	74 0a                	je     c0002067 <put_lfn+0x6d>
c000205d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002060:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002065:	75 09                	jne    c0002070 <put_lfn+0x76>
c0002067:	88 c8                	mov    al,cl
c0002069:	83 c8 40             	or     eax,0x40
c000206c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002070:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002074:	88 07                	mov    BYTE PTR [edi],al
c0002076:	83 c4 08             	add    esp,0x8
c0002079:	5b                   	pop    ebx
c000207a:	5e                   	pop    esi
c000207b:	5f                   	pop    edi
c000207c:	5d                   	pop    ebp
c000207d:	c3                   	ret    

c000207e <gen_numname>:
c000207e:	57                   	push   edi
c000207f:	89 cf                	mov    edi,ecx
c0002081:	56                   	push   esi
c0002082:	b9 0b 00 00 00       	mov    ecx,0xb
c0002087:	53                   	push   ebx
c0002088:	89 c6                	mov    esi,eax
c000208a:	83 ec 10             	sub    esp,0x10
c000208d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002091:	e8 67 fc ff ff       	call   c0001cfd <mem_cpy>
c0002096:	83 fb 05             	cmp    ebx,0x5
c0002099:	76 2d                	jbe    c00020c8 <gen_numname+0x4a>
c000209b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000209e:	66 85 c0             	test   ax,ax
c00020a1:	74 25                	je     c00020c8 <gen_numname+0x4a>
c00020a3:	83 c7 02             	add    edi,0x2
c00020a6:	ba 10 00 00 00       	mov    edx,0x10
c00020ab:	01 db                	add    ebx,ebx
c00020ad:	89 c1                	mov    ecx,eax
c00020af:	66 d1 e8             	shr    ax,1
c00020b2:	83 e1 01             	and    ecx,0x1
c00020b5:	01 cb                	add    ebx,ecx
c00020b7:	0f ba e3 10          	bt     ebx,0x10
c00020bb:	73 06                	jae    c00020c3 <gen_numname+0x45>
c00020bd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c3:	4a                   	dec    edx
c00020c4:	75 e5                	jne    c00020ab <gen_numname+0x2d>
c00020c6:	eb d3                	jmp    c000209b <gen_numname+0x1d>
c00020c8:	b8 07 00 00 00       	mov    eax,0x7
c00020cd:	88 d9                	mov    cl,bl
c00020cf:	83 e1 0f             	and    ecx,0xf
c00020d2:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d5:	80 fa 39             	cmp    dl,0x39
c00020d8:	76 03                	jbe    c00020dd <gen_numname+0x5f>
c00020da:	8d 51 37             	lea    edx,[ecx+0x37]
c00020dd:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e4:	89 da                	mov    edx,ebx
c00020e6:	c1 ea 04             	shr    edx,0x4
c00020e9:	83 fb 0f             	cmp    ebx,0xf
c00020ec:	76 06                	jbe    c00020f4 <gen_numname+0x76>
c00020ee:	89 c8                	mov    eax,ecx
c00020f0:	89 d3                	mov    ebx,edx
c00020f2:	eb d9                	jmp    c00020cd <gen_numname+0x4f>
c00020f4:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020fe:	8d 04 16             	lea    eax,[esi+edx*1]
c0002101:	39 ca                	cmp    edx,ecx
c0002103:	73 18                	jae    c000211d <gen_numname+0x9f>
c0002105:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002108:	3c 20                	cmp    al,0x20
c000210a:	74 11                	je     c000211d <gen_numname+0x9f>
c000210c:	e8 41 fc ff ff       	call   c0001d52 <dbc_1st>
c0002111:	85 c0                	test   eax,eax
c0002113:	74 05                	je     c000211a <gen_numname+0x9c>
c0002115:	39 d3                	cmp    ebx,edx
c0002117:	74 04                	je     c000211d <gen_numname+0x9f>
c0002119:	42                   	inc    edx
c000211a:	42                   	inc    edx
c000211b:	eb e1                	jmp    c00020fe <gen_numname+0x80>
c000211d:	b0 20                	mov    al,0x20
c000211f:	83 f9 07             	cmp    ecx,0x7
c0002122:	77 05                	ja     c0002129 <gen_numname+0xab>
c0002124:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002128:	41                   	inc    ecx
c0002129:	42                   	inc    edx
c000212a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000212e:	83 fa 07             	cmp    edx,0x7
c0002131:	76 ea                	jbe    c000211d <gen_numname+0x9f>
c0002133:	83 c4 10             	add    esp,0x10
c0002136:	5b                   	pop    ebx
c0002137:	5e                   	pop    esi
c0002138:	5f                   	pop    edi
c0002139:	c3                   	ret    

c000213a <sum_sfn>:
c000213a:	31 c9                	xor    ecx,ecx
c000213c:	31 d2                	xor    edx,edx
c000213e:	d0 ca                	ror    dl,1
c0002140:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002143:	41                   	inc    ecx
c0002144:	83 f9 0b             	cmp    ecx,0xb
c0002147:	75 f5                	jne    c000213e <sum_sfn+0x4>
c0002149:	88 d0                	mov    al,dl
c000214b:	c3                   	ret    

c000214c <xdir_sum>:
c000214c:	56                   	push   esi
c000214d:	31 c9                	xor    ecx,ecx
c000214f:	53                   	push   ebx
c0002150:	31 d2                	xor    edx,edx
c0002152:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002156:	43                   	inc    ebx
c0002157:	c1 e3 05             	shl    ebx,0x5
c000215a:	83 fa 02             	cmp    edx,0x2
c000215d:	74 0b                	je     c000216a <xdir_sum+0x1e>
c000215f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002163:	66 d1 c9             	ror    cx,1
c0002166:	01 f1                	add    ecx,esi
c0002168:	eb 05                	jmp    c000216f <xdir_sum+0x23>
c000216a:	ba 03 00 00 00       	mov    edx,0x3
c000216f:	42                   	inc    edx
c0002170:	39 d3                	cmp    ebx,edx
c0002172:	77 e6                	ja     c000215a <xdir_sum+0xe>
c0002174:	89 c8                	mov    eax,ecx
c0002176:	5b                   	pop    ebx
c0002177:	5e                   	pop    esi
c0002178:	c3                   	ret    

c0002179 <xsum32>:
c0002179:	d1 ca                	ror    edx,1
c000217b:	0f b6 c0             	movzx  eax,al
c000217e:	01 d0                	add    eax,edx
c0002180:	c3                   	ret    

c0002181 <get_xfileinfo>:
c0002181:	55                   	push   ebp
c0002182:	31 c9                	xor    ecx,ecx
c0002184:	57                   	push   edi
c0002185:	bd 40 00 00 00       	mov    ebp,0x40
c000218a:	56                   	push   esi
c000218b:	31 ff                	xor    edi,edi
c000218d:	53                   	push   ebx
c000218e:	89 c6                	mov    esi,eax
c0002190:	83 ec 0c             	sub    esp,0xc
c0002193:	89 d3                	mov    ebx,edx
c0002195:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000219c:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00021a0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00021a3:	76 6d                	jbe    c0002212 <get_xfileinfo+0x91>
c00021a5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00021ab:	76 0b                	jbe    c00021b8 <get_xfileinfo+0x37>
c00021ad:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00021b1:	bf 01 00 00 00       	mov    edi,0x1
c00021b6:	eb 63                	jmp    c000221b <get_xfileinfo+0x9a>
c00021b8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021be:	75 03                	jne    c00021c3 <get_xfileinfo+0x42>
c00021c0:	83 c5 02             	add    ebp,0x2
c00021c3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021c6:	83 c5 02             	add    ebp,0x2
c00021c9:	e8 b0 fa ff ff       	call   c0001c7e <ld_word>
c00021ce:	ff 04 24             	inc    DWORD PTR [esp]
c00021d1:	66 85 c9             	test   cx,cx
c00021d4:	75 0d                	jne    c00021e3 <get_xfileinfo+0x62>
c00021d6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021dc:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021e1:	76 2b                	jbe    c000220e <get_xfileinfo+0x8d>
c00021e3:	c1 e1 10             	shl    ecx,0x10
c00021e6:	ba ff 00 00 00       	mov    edx,0xff
c00021eb:	0f b7 c0             	movzx  eax,ax
c00021ee:	29 fa                	sub    edx,edi
c00021f0:	09 c8                	or     eax,ecx
c00021f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021f6:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021fa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021fe:	e8 1b fc ff ff       	call   c0001e1e <put_utf>
c0002203:	84 c0                	test   al,al
c0002205:	74 a6                	je     c00021ad <get_xfileinfo+0x2c>
c0002207:	0f b6 c0             	movzx  eax,al
c000220a:	01 c7                	add    edi,eax
c000220c:	31 c0                	xor    eax,eax
c000220e:	89 c1                	mov    ecx,eax
c0002210:	eb 8a                	jmp    c000219c <get_xfileinfo+0x1b>
c0002212:	85 ff                	test   edi,edi
c0002214:	74 97                	je     c00021ad <get_xfileinfo+0x2c>
c0002216:	66 85 c9             	test   cx,cx
c0002219:	75 92                	jne    c00021ad <get_xfileinfo+0x2c>
c000221b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002220:	31 c0                	xor    eax,eax
c0002222:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002226:	31 d2                	xor    edx,edx
c0002228:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000222b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000222e:	80 e1 10             	and    cl,0x10
c0002231:	75 08                	jne    c000223b <get_xfileinfo+0xba>
c0002233:	8d 46 38             	lea    eax,[esi+0x38]
c0002236:	e8 68 fa ff ff       	call   c0001ca3 <ld_qword>
c000223b:	89 03                	mov    DWORD PTR [ebx],eax
c000223d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002240:	8d 46 0c             	lea    eax,[esi+0xc]
c0002243:	e8 36 fa ff ff       	call   c0001c7e <ld_word>
c0002248:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000224c:	8d 46 0e             	lea    eax,[esi+0xe]
c000224f:	e8 2a fa ff ff       	call   c0001c7e <ld_word>
c0002254:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002258:	83 c4 0c             	add    esp,0xc
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	5d                   	pop    ebp
c000225f:	c3                   	ret    

c0002260 <get_ldnumber>:
c0002260:	8b 10                	mov    edx,DWORD PTR [eax]
c0002262:	85 d2                	test   edx,edx
c0002264:	74 14                	je     c000227a <get_ldnumber+0x1a>
c0002266:	56                   	push   esi
c0002267:	53                   	push   ebx
c0002268:	89 d3                	mov    ebx,edx
c000226a:	43                   	inc    ebx
c000226b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000226e:	80 f9 1f             	cmp    cl,0x1f
c0002271:	76 0d                	jbe    c0002280 <get_ldnumber+0x20>
c0002273:	80 f9 3a             	cmp    cl,0x3a
c0002276:	75 f2                	jne    c000226a <get_ldnumber+0xa>
c0002278:	eb 0a                	jmp    c0002284 <get_ldnumber+0x24>
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	89 c8                	mov    eax,ecx
c000227f:	c3                   	ret    
c0002280:	31 c9                	xor    ecx,ecx
c0002282:	eb 24                	jmp    c00022a8 <get_ldnumber+0x48>
c0002284:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002287:	8d 4e d0             	lea    ecx,[esi-0x30]
c000228a:	80 f9 09             	cmp    cl,0x9
c000228d:	77 16                	ja     c00022a5 <get_ldnumber+0x45>
c000228f:	83 c2 02             	add    edx,0x2
c0002292:	83 c9 ff             	or     ecx,0xffffffff
c0002295:	39 d3                	cmp    ebx,edx
c0002297:	75 0f                	jne    c00022a8 <get_ldnumber+0x48>
c0002299:	89 f2                	mov    edx,esi
c000229b:	89 18                	mov    DWORD PTR [eax],ebx
c000229d:	0f be ca             	movsx  ecx,dl
c00022a0:	83 e9 30             	sub    ecx,0x30
c00022a3:	eb 03                	jmp    c00022a8 <get_ldnumber+0x48>
c00022a5:	83 c9 ff             	or     ecx,0xffffffff
c00022a8:	89 c8                	mov    eax,ecx
c00022aa:	5b                   	pop    ebx
c00022ab:	5e                   	pop    esi
c00022ac:	c3                   	ret    

c00022ad <crc32>:
c00022ad:	56                   	push   esi
c00022ae:	89 d6                	mov    esi,edx
c00022b0:	53                   	push   ebx
c00022b1:	b2 01                	mov    dl,0x1
c00022b3:	bb 08 00 00 00       	mov    ebx,0x8
c00022b8:	89 f1                	mov    ecx,esi
c00022ba:	84 d1                	test   cl,dl
c00022bc:	0f 95 c1             	setne  cl
c00022bf:	0f b6 c9             	movzx  ecx,cl
c00022c2:	31 c1                	xor    ecx,eax
c00022c4:	89 c8                	mov    eax,ecx
c00022c6:	d1 e8                	shr    eax,1
c00022c8:	80 e1 01             	and    cl,0x1
c00022cb:	74 05                	je     c00022d2 <crc32+0x25>
c00022cd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022d2:	d1 e2                	shl    edx,1
c00022d4:	4b                   	dec    ebx
c00022d5:	75 e1                	jne    c00022b8 <crc32+0xb>
c00022d7:	5b                   	pop    ebx
c00022d8:	5e                   	pop    esi
c00022d9:	c3                   	ret    

c00022da <test_gpt_header>:
c00022da:	55                   	push   ebp
c00022db:	b9 10 00 00 00       	mov    ecx,0x10
c00022e0:	57                   	push   edi
c00022e1:	ba 80 f6 01 c0       	mov    edx,0xc001f680
c00022e6:	56                   	push   esi
c00022e7:	31 ff                	xor    edi,edi
c00022e9:	53                   	push   ebx
c00022ea:	89 c3                	mov    ebx,eax
c00022ec:	e8 2c fa ff ff       	call   c0001d1d <mem_cmp>
c00022f1:	85 c0                	test   eax,eax
c00022f3:	75 55                	jne    c000234a <test_gpt_header+0x70>
c00022f5:	89 c7                	mov    edi,eax
c00022f7:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022fc:	83 ce ff             	or     esi,0xffffffff
c00022ff:	31 d2                	xor    edx,edx
c0002301:	83 fd 03             	cmp    ebp,0x3
c0002304:	76 05                	jbe    c000230b <test_gpt_header+0x31>
c0002306:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000230b:	89 f0                	mov    eax,esi
c000230d:	45                   	inc    ebp
c000230e:	e8 9a ff ff ff       	call   c00022ad <crc32>
c0002313:	83 fd 4c             	cmp    ebp,0x4c
c0002316:	89 c6                	mov    esi,eax
c0002318:	75 e5                	jne    c00022ff <test_gpt_header+0x25>
c000231a:	8d 43 10             	lea    eax,[ebx+0x10]
c000231d:	f7 d6                	not    esi
c000231f:	e8 67 f9 ff ff       	call   c0001c8b <ld_dword>
c0002324:	39 c6                	cmp    esi,eax
c0002326:	75 22                	jne    c000234a <test_gpt_header+0x70>
c0002328:	8d 43 54             	lea    eax,[ebx+0x54]
c000232b:	e8 5b f9 ff ff       	call   c0001c8b <ld_dword>
c0002330:	83 c0 80             	add    eax,0xffffff80
c0002333:	75 15                	jne    c000234a <test_gpt_header+0x70>
c0002335:	8d 43 50             	lea    eax,[ebx+0x50]
c0002338:	e8 4e f9 ff ff       	call   c0001c8b <ld_dword>
c000233d:	3d 80 00 00 00       	cmp    eax,0x80
c0002342:	0f 96 c0             	setbe  al
c0002345:	0f b6 c0             	movzx  eax,al
c0002348:	89 c7                	mov    edi,eax
c000234a:	5b                   	pop    ebx
c000234b:	89 f8                	mov    eax,edi
c000234d:	5e                   	pop    esi
c000234e:	5f                   	pop    edi
c000234f:	5d                   	pop    ebp
c0002350:	c3                   	ret    

c0002351 <make_rand>:
c0002351:	56                   	push   esi
c0002352:	85 c0                	test   eax,eax
c0002354:	53                   	push   ebx
c0002355:	75 05                	jne    c000235c <make_rand+0xb>
c0002357:	b8 01 00 00 00       	mov    eax,0x1
c000235c:	01 d1                	add    ecx,edx
c000235e:	bb 08 00 00 00       	mov    ebx,0x8
c0002363:	89 c6                	mov    esi,eax
c0002365:	d1 e8                	shr    eax,1
c0002367:	83 e6 01             	and    esi,0x1
c000236a:	85 f6                	test   esi,esi
c000236c:	74 05                	je     c0002373 <make_rand+0x22>
c000236e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002373:	4b                   	dec    ebx
c0002374:	75 ed                	jne    c0002363 <make_rand+0x12>
c0002376:	42                   	inc    edx
c0002377:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000237a:	39 ca                	cmp    edx,ecx
c000237c:	75 e0                	jne    c000235e <make_rand+0xd>
c000237e:	5b                   	pop    ebx
c000237f:	5e                   	pop    esi
c0002380:	c3                   	ret    

c0002381 <validate>:
c0002381:	56                   	push   esi
c0002382:	53                   	push   ebx
c0002383:	89 d6                	mov    esi,edx
c0002385:	51                   	push   ecx
c0002386:	85 c0                	test   eax,eax
c0002388:	75 09                	jne    c0002393 <validate+0x12>
c000238a:	b8 09 00 00 00       	mov    eax,0x9
c000238f:	31 c9                	xor    ecx,ecx
c0002391:	eb 2f                	jmp    c00023c2 <validate+0x41>
c0002393:	89 c3                	mov    ebx,eax
c0002395:	8b 00                	mov    eax,DWORD PTR [eax]
c0002397:	85 c0                	test   eax,eax
c0002399:	74 ef                	je     c000238a <validate+0x9>
c000239b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000239e:	74 ea                	je     c000238a <validate+0x9>
c00023a0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00023a4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00023a8:	75 e0                	jne    c000238a <validate+0x9>
c00023aa:	83 ec 0c             	sub    esp,0xc
c00023ad:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023b1:	50                   	push   eax
c00023b2:	e8 76 f8 ff ff       	call   c0001c2d <disk_status>
c00023b7:	83 c4 10             	add    esp,0x10
c00023ba:	a8 01                	test   al,0x1
c00023bc:	75 cc                	jne    c000238a <validate+0x9>
c00023be:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023c0:	31 c0                	xor    eax,eax
c00023c2:	89 0e                	mov    DWORD PTR [esi],ecx
c00023c4:	5a                   	pop    edx
c00023c5:	5b                   	pop    ebx
c00023c6:	5e                   	pop    esi
c00023c7:	c3                   	ret    

c00023c8 <sync_window>:
c00023c8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023cc:	0f 84 85 00 00 00    	je     c0002457 <sync_window+0x8f>
c00023d2:	55                   	push   ebp
c00023d3:	8d 68 54             	lea    ebp,[eax+0x54]
c00023d6:	57                   	push   edi
c00023d7:	56                   	push   esi
c00023d8:	53                   	push   ebx
c00023d9:	89 c3                	mov    ebx,eax
c00023db:	83 ec 28             	sub    esp,0x28
c00023de:	6a 01                	push   0x1
c00023e0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023e3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 58 f8 ff ff       	call   c0001c49 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	ba 01 00 00 00       	mov    edx,0x1
c00023f9:	85 c0                	test   eax,eax
c00023fb:	75 50                	jne    c000244d <sync_window+0x85>
c00023fd:	31 ff                	xor    edi,edi
c00023ff:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002402:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002406:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000240a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000240d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002410:	89 c6                	mov    esi,eax
c0002412:	89 d7                	mov    edi,edx
c0002414:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002417:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000241b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000241e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002422:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002426:	73 23                	jae    c000244b <sync_window+0x83>
c0002428:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000242c:	75 1d                	jne    c000244b <sync_window+0x83>
c000242e:	83 ec 0c             	sub    esp,0xc
c0002431:	6a 01                	push   0x1
c0002433:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002437:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000243b:	52                   	push   edx
c000243c:	50                   	push   eax
c000243d:	55                   	push   ebp
c000243e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002442:	50                   	push   eax
c0002443:	e8 01 f8 ff ff       	call   c0001c49 <disk_write>
c0002448:	83 c4 20             	add    esp,0x20
c000244b:	31 d2                	xor    edx,edx
c000244d:	83 c4 1c             	add    esp,0x1c
c0002450:	89 d0                	mov    eax,edx
c0002452:	5b                   	pop    ebx
c0002453:	5e                   	pop    esi
c0002454:	5f                   	pop    edi
c0002455:	5d                   	pop    ebp
c0002456:	c3                   	ret    
c0002457:	31 d2                	xor    edx,edx
c0002459:	89 d0                	mov    eax,edx
c000245b:	c3                   	ret    

c000245c <move_window>:
c000245c:	56                   	push   esi
c000245d:	53                   	push   ebx
c000245e:	89 c3                	mov    ebx,eax
c0002460:	83 ec 14             	sub    esp,0x14
c0002463:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002466:	75 07                	jne    c000246f <move_window+0x13>
c0002468:	31 f6                	xor    esi,esi
c000246a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000246d:	74 59                	je     c00024c8 <move_window+0x6c>
c000246f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002473:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002477:	89 d8                	mov    eax,ebx
c0002479:	e8 4a ff ff ff       	call   c00023c8 <sync_window>
c000247e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002482:	89 c6                	mov    esi,eax
c0002484:	85 c0                	test   eax,eax
c0002486:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000248a:	75 3c                	jne    c00024c8 <move_window+0x6c>
c000248c:	83 ec 0c             	sub    esp,0xc
c000248f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002492:	6a 01                	push   0x1
c0002494:	51                   	push   ecx
c0002495:	52                   	push   edx
c0002496:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000249a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000249e:	50                   	push   eax
c000249f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024a3:	50                   	push   eax
c00024a4:	e8 8a f7 ff ff       	call   c0001c33 <disk_read>
c00024a9:	83 c4 20             	add    esp,0x20
c00024ac:	85 c0                	test   eax,eax
c00024ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024b6:	74 0a                	je     c00024c2 <move_window+0x66>
c00024b8:	83 ca ff             	or     edx,0xffffffff
c00024bb:	be 01 00 00 00       	mov    esi,0x1
c00024c0:	89 d1                	mov    ecx,edx
c00024c2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024c5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024c8:	89 f0                	mov    eax,esi
c00024ca:	83 c4 14             	add    esp,0x14
c00024cd:	5b                   	pop    ebx
c00024ce:	5e                   	pop    esi
c00024cf:	c3                   	ret    

c00024d0 <check_fs>:
c00024d0:	53                   	push   ebx
c00024d1:	89 c3                	mov    ebx,eax
c00024d3:	83 ec 08             	sub    esp,0x8
c00024d6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024da:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024e1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024e8:	e8 6f ff ff ff       	call   c000245c <move_window>
c00024ed:	ba 04 00 00 00       	mov    edx,0x4
c00024f2:	85 c0                	test   eax,eax
c00024f4:	0f 85 89 00 00 00    	jne    c0002583 <check_fs+0xb3>
c00024fa:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002500:	e8 79 f7 ff ff       	call   c0001c7e <ld_word>
c0002505:	ba 03 00 00 00       	mov    edx,0x3
c000250a:	66 3d 55 aa          	cmp    ax,0xaa55
c000250e:	75 73                	jne    c0002583 <check_fs+0xb3>
c0002510:	ba a0 f7 01 c0       	mov    edx,0xc001f7a0
c0002515:	8d 43 54             	lea    eax,[ebx+0x54]
c0002518:	b9 0b 00 00 00       	mov    ecx,0xb
c000251d:	e8 fb f7 ff ff       	call   c0001d1d <mem_cmp>
c0002522:	ba 01 00 00 00       	mov    edx,0x1
c0002527:	85 c0                	test   eax,eax
c0002529:	74 58                	je     c0002583 <check_fs+0xb3>
c000252b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000252e:	8d 50 18             	lea    edx,[eax+0x18]
c0002531:	80 fa 01             	cmp    dl,0x1
c0002534:	76 09                	jbe    c000253f <check_fs+0x6f>
c0002536:	ba 02 00 00 00       	mov    edx,0x2
c000253b:	3c eb                	cmp    al,0xeb
c000253d:	75 44                	jne    c0002583 <check_fs+0xb3>
c000253f:	ba 94 a4 03 c0       	mov    edx,0xc003a494
c0002544:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000254a:	b9 03 00 00 00       	mov    ecx,0x3
c000254f:	e8 c9 f7 ff ff       	call   c0001d1d <mem_cmp>
c0002554:	31 d2                	xor    edx,edx
c0002556:	85 c0                	test   eax,eax
c0002558:	74 29                	je     c0002583 <check_fs+0xb3>
c000255a:	ba ac f7 01 c0       	mov    edx,0xc001f7ac
c000255f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002565:	b9 05 00 00 00       	mov    ecx,0x5
c000256a:	e8 ae f7 ff ff       	call   c0001d1d <mem_cmp>
c000256f:	31 d2                	xor    edx,edx
c0002571:	85 c0                	test   eax,eax
c0002573:	74 0e                	je     c0002583 <check_fs+0xb3>
c0002575:	31 d2                	xor    edx,edx
c0002577:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000257e:	0f 95 c2             	setne  dl
c0002581:	01 d2                	add    edx,edx
c0002583:	89 d0                	mov    eax,edx
c0002585:	83 c4 08             	add    esp,0x8
c0002588:	5b                   	pop    ebx
c0002589:	c3                   	ret    

c000258a <find_volume>:
c000258a:	55                   	push   ebp
c000258b:	31 c9                	xor    ecx,ecx
c000258d:	57                   	push   edi
c000258e:	56                   	push   esi
c000258f:	89 d6                	mov    esi,edx
c0002591:	53                   	push   ebx
c0002592:	31 d2                	xor    edx,edx
c0002594:	83 ec 3c             	sub    esp,0x3c
c0002597:	89 c3                	mov    ebx,eax
c0002599:	e8 32 ff ff ff       	call   c00024d0 <check_fs>
c000259e:	83 f8 02             	cmp    eax,0x2
c00025a1:	74 0e                	je     c00025b1 <find_volume+0x27>
c00025a3:	0f 87 5d 01 00 00    	ja     c0002706 <find_volume+0x17c>
c00025a9:	85 f6                	test   esi,esi
c00025ab:	0f 84 55 01 00 00    	je     c0002706 <find_volume+0x17c>
c00025b1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025b8:	0f 85 dd 00 00 00    	jne    c000269b <find_volume+0x111>
c00025be:	31 c9                	xor    ecx,ecx
c00025c0:	ba 01 00 00 00       	mov    edx,0x1
c00025c5:	89 d8                	mov    eax,ebx
c00025c7:	e8 90 fe ff ff       	call   c000245c <move_window>
c00025cc:	85 c0                	test   eax,eax
c00025ce:	74 0a                	je     c00025da <find_volume+0x50>
c00025d0:	b8 04 00 00 00       	mov    eax,0x4
c00025d5:	e9 2c 01 00 00       	jmp    c0002706 <find_volume+0x17c>
c00025da:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025dd:	89 e8                	mov    eax,ebp
c00025df:	e8 f6 fc ff ff       	call   c00022da <test_gpt_header>
c00025e4:	85 c0                	test   eax,eax
c00025e6:	75 0a                	jne    c00025f2 <find_volume+0x68>
c00025e8:	b8 03 00 00 00       	mov    eax,0x3
c00025ed:	e9 14 01 00 00       	jmp    c0002706 <find_volume+0x17c>
c00025f2:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025f8:	e8 8e f6 ff ff       	call   c0001c8b <ld_dword>
c00025fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002601:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002607:	e8 97 f6 ff ff       	call   c0001ca3 <ld_qword>
c000260c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002614:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002618:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000261c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002624:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002628:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000262c:	74 ba                	je     c00025e8 <find_volume+0x5e>
c000262e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002632:	31 c9                	xor    ecx,ecx
c0002634:	c1 e7 07             	shl    edi,0x7
c0002637:	89 d8                	mov    eax,ebx
c0002639:	89 fa                	mov    edx,edi
c000263b:	c1 ea 09             	shr    edx,0x9
c000263e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002642:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002646:	e8 11 fe ff ff       	call   c000245c <move_window>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 81                	jne    c00025d0 <find_volume+0x46>
c000264f:	81 e7 80 01 00 00    	and    edi,0x180
c0002655:	b9 10 00 00 00       	mov    ecx,0x10
c000265a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000265e:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c0002663:	e8 b5 f6 ff ff       	call   c0001d1d <mem_cmp>
c0002668:	85 c0                	test   eax,eax
c000266a:	75 29                	jne    c0002695 <find_volume+0x10b>
c000266c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002670:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002674:	e8 2a f6 ff ff       	call   c0001ca3 <ld_qword>
c0002679:	89 d1                	mov    ecx,edx
c000267b:	89 c2                	mov    edx,eax
c000267d:	89 d8                	mov    eax,ebx
c000267f:	e8 4c fe ff ff       	call   c00024d0 <check_fs>
c0002684:	85 f6                	test   esi,esi
c0002686:	75 07                	jne    c000268f <find_volume+0x105>
c0002688:	83 f8 01             	cmp    eax,0x1
c000268b:	77 08                	ja     c0002695 <find_volume+0x10b>
c000268d:	eb 77                	jmp    c0002706 <find_volume+0x17c>
c000268f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002693:	74 71                	je     c0002706 <find_volume+0x17c>
c0002695:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002699:	eb 89                	jmp    c0002624 <find_volume+0x9a>
c000269b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000269f:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00026a5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00026ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026af:	89 cd                	mov    ebp,ecx
c00026b1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026b5:	89 f8                	mov    eax,edi
c00026b7:	83 c7 10             	add    edi,0x10
c00026ba:	e8 cc f5 ff ff       	call   c0001c8b <ld_dword>
c00026bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026c3:	89 01                	mov    DWORD PTR [ecx],eax
c00026c5:	83 c1 04             	add    ecx,0x4
c00026c8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026cc:	75 e3                	jne    c00026b1 <find_volume+0x127>
c00026ce:	31 ff                	xor    edi,edi
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 03                	je     c00026d7 <find_volume+0x14d>
c00026d4:	8d 7e ff             	lea    edi,[esi-0x1]
c00026d7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026db:	85 d2                	test   edx,edx
c00026dd:	74 14                	je     c00026f3 <find_volume+0x169>
c00026df:	31 c9                	xor    ecx,ecx
c00026e1:	89 d8                	mov    eax,ebx
c00026e3:	e8 e8 fd ff ff       	call   c00024d0 <check_fs>
c00026e8:	83 f8 01             	cmp    eax,0x1
c00026eb:	76 19                	jbe    c0002706 <find_volume+0x17c>
c00026ed:	85 f6                	test   esi,esi
c00026ef:	74 0f                	je     c0002700 <find_volume+0x176>
c00026f1:	eb 13                	jmp    c0002706 <find_volume+0x17c>
c00026f3:	85 f6                	test   esi,esi
c00026f5:	0f 85 ed fe ff ff    	jne    c00025e8 <find_volume+0x5e>
c00026fb:	b8 03 00 00 00       	mov    eax,0x3
c0002700:	47                   	inc    edi
c0002701:	83 ff 03             	cmp    edi,0x3
c0002704:	76 d1                	jbe    c00026d7 <find_volume+0x14d>
c0002706:	83 c4 3c             	add    esp,0x3c
c0002709:	5b                   	pop    ebx
c000270a:	5e                   	pop    esi
c000270b:	5f                   	pop    edi
c000270c:	5d                   	pop    ebp
c000270d:	c3                   	ret    

c000270e <mount_volume>:
c000270e:	55                   	push   ebp
c000270f:	57                   	push   edi
c0002710:	89 cf                	mov    edi,ecx
c0002712:	56                   	push   esi
c0002713:	53                   	push   ebx
c0002714:	bb 0b 00 00 00       	mov    ebx,0xb
c0002719:	83 ec 3c             	sub    esp,0x3c
c000271c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002722:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002726:	e8 35 fb ff ff       	call   c0002260 <get_ldnumber>
c000272b:	85 c0                	test   eax,eax
c000272d:	0f 88 3a 05 00 00    	js     c0002c6d <mount_volume+0x55f>
c0002733:	8b 2c 85 80 b9 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc4680]
c000273a:	89 c6                	mov    esi,eax
c000273c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002741:	85 ed                	test   ebp,ebp
c0002743:	0f 84 24 05 00 00    	je     c0002c6d <mount_volume+0x55f>
c0002749:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000274d:	83 e7 fe             	and    edi,0xfffffffe
c0002750:	89 2a                	mov    DWORD PTR [edx],ebp
c0002752:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002756:	74 32                	je     c000278a <mount_volume+0x7c>
c0002758:	83 ec 0c             	sub    esp,0xc
c000275b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000275f:	50                   	push   eax
c0002760:	e8 c8 f4 ff ff       	call   c0001c2d <disk_status>
c0002765:	83 c4 10             	add    esp,0x10
c0002768:	a8 01                	test   al,0x1
c000276a:	75 1e                	jne    c000278a <mount_volume+0x7c>
c000276c:	31 db                	xor    ebx,ebx
c000276e:	89 f9                	mov    ecx,edi
c0002770:	84 c9                	test   cl,cl
c0002772:	0f 84 f5 04 00 00    	je     c0002c6d <mount_volume+0x55f>
c0002778:	a8 04                	test   al,0x4
c000277a:	0f 84 ed 04 00 00    	je     c0002c6d <mount_volume+0x55f>
c0002780:	bb 0a 00 00 00       	mov    ebx,0xa
c0002785:	e9 e3 04 00 00       	jmp    c0002c6d <mount_volume+0x55f>
c000278a:	83 ec 0c             	sub    esp,0xc
c000278d:	89 f0                	mov    eax,esi
c000278f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002793:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002796:	0f b6 f0             	movzx  esi,al
c0002799:	bb 03 00 00 00       	mov    ebx,0x3
c000279e:	56                   	push   esi
c000279f:	e8 8c f4 ff ff       	call   c0001c30 <disk_initialize>
c00027a4:	83 c4 10             	add    esp,0x10
c00027a7:	a8 01                	test   al,0x1
c00027a9:	0f 85 be 04 00 00    	jne    c0002c6d <mount_volume+0x55f>
c00027af:	89 f9                	mov    ecx,edi
c00027b1:	84 c9                	test   cl,cl
c00027b3:	74 04                	je     c00027b9 <mount_volume+0xab>
c00027b5:	a8 04                	test   al,0x4
c00027b7:	75 c7                	jne    c0002780 <mount_volume+0x72>
c00027b9:	31 d2                	xor    edx,edx
c00027bb:	89 e8                	mov    eax,ebp
c00027bd:	e8 c8 fd ff ff       	call   c000258a <find_volume>
c00027c2:	83 f8 04             	cmp    eax,0x4
c00027c5:	75 0a                	jne    c00027d1 <mount_volume+0xc3>
c00027c7:	bb 01 00 00 00       	mov    ebx,0x1
c00027cc:	e9 9c 04 00 00       	jmp    c0002c6d <mount_volume+0x55f>
c00027d1:	83 f8 01             	cmp    eax,0x1
c00027d4:	76 0a                	jbe    c00027e0 <mount_volume+0xd2>
c00027d6:	bb 0d 00 00 00       	mov    ebx,0xd
c00027db:	e9 8d 04 00 00       	jmp    c0002c6d <mount_volume+0x55f>
c00027e0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027e3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027ee:	75 17                	jne    c0002807 <mount_volume+0xf9>
c00027f0:	b8 0b 00 00 00       	mov    eax,0xb
c00027f5:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027fa:	75 da                	jne    c00027d6 <mount_volume+0xc8>
c00027fc:	40                   	inc    eax
c00027fd:	83 f8 40             	cmp    eax,0x40
c0002800:	75 f3                	jne    c00027f5 <mount_volume+0xe7>
c0002802:	e9 5a 02 00 00       	jmp    c0002a61 <mount_volume+0x353>
c0002807:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000280a:	e8 6f f4 ff ff       	call   c0001c7e <ld_word>
c000280f:	66 3d 00 02          	cmp    ax,0x200
c0002813:	75 c1                	jne    c00027d6 <mount_volume+0xc8>
c0002815:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002818:	e8 61 f4 ff ff       	call   c0001c7e <ld_word>
c000281d:	0f b7 c0             	movzx  eax,ax
c0002820:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002824:	85 c0                	test   eax,eax
c0002826:	75 0c                	jne    c0002834 <mount_volume+0x126>
c0002828:	8d 45 78             	lea    eax,[ebp+0x78]
c000282b:	e8 5b f4 ff ff       	call   c0001c8b <ld_dword>
c0002830:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002838:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000283b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000283e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002842:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002845:	48                   	dec    eax
c0002846:	3c 01                	cmp    al,0x1
c0002848:	77 8c                	ja     c00027d6 <mount_volume+0xc8>
c000284a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000284e:	89 c3                	mov    ebx,eax
c0002850:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002854:	66 85 c0             	test   ax,ax
c0002857:	0f 84 79 ff ff ff    	je     c00027d6 <mount_volume+0xc8>
c000285d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002860:	85 d8                	test   eax,ebx
c0002862:	0f 85 6e ff ff ff    	jne    c00027d6 <mount_volume+0xc8>
c0002868:	8d 45 65             	lea    eax,[ebp+0x65]
c000286b:	e8 0e f4 ff ff       	call   c0001c7e <ld_word>
c0002870:	89 c7                	mov    edi,eax
c0002872:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002876:	a8 0f                	test   al,0xf
c0002878:	0f 85 58 ff ff ff    	jne    c00027d6 <mount_volume+0xc8>
c000287e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002881:	e8 f8 f3 ff ff       	call   c0001c7e <ld_word>
c0002886:	0f b7 f0             	movzx  esi,ax
c0002889:	85 f6                	test   esi,esi
c000288b:	75 0a                	jne    c0002897 <mount_volume+0x189>
c000288d:	8d 45 74             	lea    eax,[ebp+0x74]
c0002890:	e8 f6 f3 ff ff       	call   c0001c8b <ld_dword>
c0002895:	89 c6                	mov    esi,eax
c0002897:	8d 45 62             	lea    eax,[ebp+0x62]
c000289a:	e8 df f3 ff ff       	call   c0001c7e <ld_word>
c000289f:	66 85 c0             	test   ax,ax
c00028a2:	0f 84 2e ff ff ff    	je     c00027d6 <mount_volume+0xc8>
c00028a8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00028ad:	0f b7 c8             	movzx  ecx,ax
c00028b0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028b9:	89 fa                	mov    edx,edi
c00028bb:	66 c1 ea 04          	shr    dx,0x4
c00028bf:	0f b7 d2             	movzx  edx,dx
c00028c2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028c6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028cd:	39 c6                	cmp    esi,eax
c00028cf:	0f 82 01 ff ff ff    	jb     c00027d6 <mount_volume+0xc8>
c00028d5:	29 c6                	sub    esi,eax
c00028d7:	31 d2                	xor    edx,edx
c00028d9:	89 f0                	mov    eax,esi
c00028db:	f7 f3                	div    ebx
c00028dd:	39 de                	cmp    esi,ebx
c00028df:	0f 82 f1 fe ff ff    	jb     c00027d6 <mount_volume+0xc8>
c00028e5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028ea:	0f 87 e6 fe ff ff    	ja     c00027d6 <mount_volume+0xc8>
c00028f0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028f5:	0f 86 63 03 00 00    	jbe    c0002c5e <mount_volume+0x550>
c00028fb:	bb 03 00 00 00       	mov    ebx,0x3
c0002900:	8d 70 02             	lea    esi,[eax+0x2]
c0002903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002907:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000290b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000290e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002911:	31 d2                	xor    edx,edx
c0002913:	89 c8                	mov    eax,ecx
c0002915:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002918:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002920:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002924:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002928:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000292b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000292e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002932:	31 d2                	xor    edx,edx
c0002934:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002938:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000293c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000293f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002942:	83 fb 03             	cmp    ebx,0x3
c0002945:	75 2b                	jne    c0002972 <mount_volume+0x264>
c0002947:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000294a:	e8 2f f3 ff ff       	call   c0001c7e <ld_word>
c000294f:	66 09 c7             	or     di,ax
c0002952:	0f 85 7e fe ff ff    	jne    c00027d6 <mount_volume+0xc8>
c0002958:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000295e:	c1 e6 02             	shl    esi,0x2
c0002961:	e8 25 f3 ff ff       	call   c0001c8b <ld_dword>
c0002966:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000296d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002970:	eb 30                	jmp    c00029a2 <mount_volume+0x294>
c0002972:	66 85 ff             	test   di,di
c0002975:	0f 84 5b fe ff ff    	je     c00027d6 <mount_volume+0xc8>
c000297b:	31 d2                	xor    edx,edx
c000297d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002981:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002985:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002989:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000298c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000298f:	83 fb 02             	cmp    ebx,0x2
c0002992:	75 04                	jne    c0002998 <mount_volume+0x28a>
c0002994:	01 f6                	add    esi,esi
c0002996:	eb 0a                	jmp    c00029a2 <mount_volume+0x294>
c0002998:	8d 04 76             	lea    eax,[esi+esi*2]
c000299b:	83 e6 01             	and    esi,0x1
c000299e:	d1 e8                	shr    eax,1
c00029a0:	01 c6                	add    esi,eax
c00029a2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00029a8:	c1 ee 09             	shr    esi,0x9
c00029ab:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00029af:	0f 87 21 fe ff ff    	ja     c00027d6 <mount_volume+0xc8>
c00029b5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029bc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029c3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029c7:	83 fb 03             	cmp    ebx,0x3
c00029ca:	75 7a                	jne    c0002a46 <mount_volume+0x338>
c00029cc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029d2:	e8 a7 f2 ff ff       	call   c0001c7e <ld_word>
c00029d7:	66 48                	dec    ax
c00029d9:	75 6b                	jne    c0002a46 <mount_volume+0x338>
c00029db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029e3:	83 c2 01             	add    edx,0x1
c00029e6:	89 e8                	mov    eax,ebp
c00029e8:	83 d1 00             	adc    ecx,0x0
c00029eb:	e8 6c fa ff ff       	call   c000245c <move_window>
c00029f0:	85 c0                	test   eax,eax
c00029f2:	75 52                	jne    c0002a46 <mount_volume+0x338>
c00029f4:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029f8:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029fe:	e8 7b f2 ff ff       	call   c0001c7e <ld_word>
c0002a03:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a07:	75 3d                	jne    c0002a46 <mount_volume+0x338>
c0002a09:	8d 45 54             	lea    eax,[ebp+0x54]
c0002a0c:	e8 7a f2 ff ff       	call   c0001c8b <ld_dword>
c0002a11:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a16:	75 2e                	jne    c0002a46 <mount_volume+0x338>
c0002a18:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a1e:	e8 68 f2 ff ff       	call   c0001c8b <ld_dword>
c0002a23:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a28:	75 1c                	jne    c0002a46 <mount_volume+0x338>
c0002a2a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a30:	e8 56 f2 ff ff       	call   c0001c8b <ld_dword>
c0002a35:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a38:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a3e:	e8 48 f2 ff ff       	call   c0001c8b <ld_dword>
c0002a43:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a46:	66 a1 60 b9 03 c0    	mov    ax,ds:0xc003b960
c0002a4c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a4f:	40                   	inc    eax
c0002a50:	31 db                	xor    ebx,ebx
c0002a52:	66 a3 60 b9 03 c0    	mov    ds:0xc003b960,ax
c0002a58:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a5c:	e9 0c 02 00 00       	jmp    c0002c6d <mount_volume+0x55f>
c0002a61:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a67:	e8 12 f2 ff ff       	call   c0001c7e <ld_word>
c0002a6c:	66 3d 00 01          	cmp    ax,0x100
c0002a70:	0f 85 60 fd ff ff    	jne    c00027d6 <mount_volume+0xc8>
c0002a76:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a7d:	0f 85 53 fd ff ff    	jne    c00027d6 <mount_volume+0xc8>
c0002a83:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a89:	e8 15 f2 ff ff       	call   c0001ca3 <ld_qword>
c0002a8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a92:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a96:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a9c:	e8 ea f1 ff ff       	call   c0001c8b <ld_dword>
c0002aa1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002aa4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002aaa:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002aad:	fe c8                	dec    al
c0002aaf:	0f 85 21 fd ff ff    	jne    c00027d6 <mount_volume+0xc8>
c0002ab5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002abc:	bb 01 00 00 00       	mov    ebx,0x1
c0002ac1:	d3 e3                	shl    ebx,cl
c0002ac3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ac7:	66 85 db             	test   bx,bx
c0002aca:	0f 84 06 fd ff ff    	je     c00027d6 <mount_volume+0xc8>
c0002ad0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ad6:	e8 b0 f1 ff ff       	call   c0001c8b <ld_dword>
c0002adb:	89 c6                	mov    esi,eax
c0002add:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ae2:	0f 87 ee fc ff ff    	ja     c00027d6 <mount_volume+0xc8>
c0002ae8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002aec:	8d 40 02             	lea    eax,[eax+0x2]
c0002aef:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002af2:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002af5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002af9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002afc:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002b02:	e8 84 f1 ff ff       	call   c0001c8b <ld_dword>
c0002b07:	31 d2                	xor    edx,edx
c0002b09:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b0d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b19:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b1c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b1f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b25:	e8 61 f1 ff ff       	call   c0001c8b <ld_dword>
c0002b2a:	31 d2                	xor    edx,edx
c0002b2c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b30:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b34:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b38:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b3b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b3e:	0f b7 c3             	movzx  eax,bx
c0002b41:	31 d2                	xor    edx,edx
c0002b43:	0f af f0             	imul   esi,eax
c0002b46:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b4a:	89 f0                	mov    eax,esi
c0002b4c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b50:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b54:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b58:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b5c:	39 c1                	cmp    ecx,eax
c0002b5e:	89 df                	mov    edi,ebx
c0002b60:	19 d7                	sbb    edi,edx
c0002b62:	0f 82 6e fc ff ff    	jb     c00027d6 <mount_volume+0xc8>
c0002b68:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b6e:	31 db                	xor    ebx,ebx
c0002b70:	e8 16 f1 ff ff       	call   c0001c8b <ld_dword>
c0002b75:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b7c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b7f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b87:	85 db                	test   ebx,ebx
c0002b89:	75 39                	jne    c0002bc4 <mount_volume+0x4b6>
c0002b8b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b8f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b93:	0f 86 3d fc ff ff    	jbe    c00027d6 <mount_volume+0xc8>
c0002b99:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b9c:	31 ff                	xor    edi,edi
c0002b9e:	89 e8                	mov    eax,ebp
c0002ba0:	e8 72 f3 ff ff       	call   c0001f17 <clst2sect>
c0002ba5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002ba9:	01 c6                	add    esi,eax
c0002bab:	89 e8                	mov    eax,ebp
c0002bad:	11 d7                	adc    edi,edx
c0002baf:	89 f2                	mov    edx,esi
c0002bb1:	89 f9                	mov    ecx,edi
c0002bb3:	e8 a4 f8 ff ff       	call   c000245c <move_window>
c0002bb8:	85 c0                	test   eax,eax
c0002bba:	0f 85 07 fc ff ff    	jne    c00027c7 <mount_volume+0xb9>
c0002bc0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bc4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bc9:	74 0b                	je     c0002bd6 <mount_volume+0x4c8>
c0002bcb:	83 c3 20             	add    ebx,0x20
c0002bce:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bd4:	eb b1                	jmp    c0002b87 <mount_volume+0x479>
c0002bd6:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bd9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bdd:	e8 a9 f0 ff ff       	call   c0001c8b <ld_dword>
c0002be2:	89 c3                	mov    ebx,eax
c0002be4:	83 f8 01             	cmp    eax,0x1
c0002be7:	0f 86 e9 fb ff ff    	jbe    c00027d6 <mount_volume+0xc8>
c0002bed:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bf0:	0f 86 e0 fb ff ff    	jbe    c00027d6 <mount_volume+0xc8>
c0002bf6:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bf9:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bfd:	0f af c2             	imul   eax,edx
c0002c00:	31 d2                	xor    edx,edx
c0002c02:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002c05:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002c08:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002c0b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002c0e:	31 c9                	xor    ecx,ecx
c0002c10:	89 da                	mov    edx,ebx
c0002c12:	89 e8                	mov    eax,ebp
c0002c14:	c1 ea 07             	shr    edx,0x7
c0002c17:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c1a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c1d:	e8 3a f8 ff ff       	call   c000245c <move_window>
c0002c22:	85 c0                	test   eax,eax
c0002c24:	0f 85 9d fb ff ff    	jne    c00027c7 <mount_volume+0xb9>
c0002c2a:	89 d8                	mov    eax,ebx
c0002c2c:	83 e0 7f             	and    eax,0x7f
c0002c2f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c32:	e8 54 f0 ff ff       	call   c0001c8b <ld_dword>
c0002c37:	83 f8 ff             	cmp    eax,0xffffffff
c0002c3a:	74 0a                	je     c0002c46 <mount_volume+0x538>
c0002c3c:	43                   	inc    ebx
c0002c3d:	39 d8                	cmp    eax,ebx
c0002c3f:	74 cd                	je     c0002c0e <mount_volume+0x500>
c0002c41:	e9 90 fb ff ff       	jmp    c00027d6 <mount_volume+0xc8>
c0002c46:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c4d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c54:	bb 04 00 00 00       	mov    ebx,0x4
c0002c59:	e9 e8 fd ff ff       	jmp    c0002a46 <mount_volume+0x338>
c0002c5e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c63:	19 db                	sbb    ebx,ebx
c0002c65:	83 c3 02             	add    ebx,0x2
c0002c68:	e9 93 fc ff ff       	jmp    c0002900 <mount_volume+0x1f2>
c0002c6d:	83 c4 3c             	add    esp,0x3c
c0002c70:	89 d8                	mov    eax,ebx
c0002c72:	5b                   	pop    ebx
c0002c73:	5e                   	pop    esi
c0002c74:	5f                   	pop    edi
c0002c75:	5d                   	pop    ebp
c0002c76:	c3                   	ret    

c0002c77 <find_bitmap>:
c0002c77:	55                   	push   ebp
c0002c78:	57                   	push   edi
c0002c79:	89 c7                	mov    edi,eax
c0002c7b:	56                   	push   esi
c0002c7c:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c7f:	53                   	push   ebx
c0002c80:	83 ec 1c             	sub    esp,0x1c
c0002c83:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c86:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c8a:	83 e8 02             	sub    eax,0x2
c0002c8d:	39 f0                	cmp    eax,esi
c0002c8f:	77 02                	ja     c0002c93 <find_bitmap+0x1c>
c0002c91:	31 f6                	xor    esi,esi
c0002c93:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c97:	89 f3                	mov    ebx,esi
c0002c99:	31 ed                	xor    ebp,ebp
c0002c9b:	31 c9                	xor    ecx,ecx
c0002c9d:	89 da                	mov    edx,ebx
c0002c9f:	89 f8                	mov    eax,edi
c0002ca1:	c1 ea 0c             	shr    edx,0xc
c0002ca4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002ca7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002caa:	e8 ad f7 ff ff       	call   c000245c <move_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	75 68                	jne    c0002d1b <find_bitmap+0xa4>
c0002cb3:	89 da                	mov    edx,ebx
c0002cb5:	89 d9                	mov    ecx,ebx
c0002cb7:	c1 ea 03             	shr    edx,0x3
c0002cba:	83 e1 07             	and    ecx,0x7
c0002cbd:	b8 01 00 00 00       	mov    eax,0x1
c0002cc2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cc8:	d3 e0                	shl    eax,cl
c0002cca:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ccd:	83 e9 02             	sub    ecx,0x2
c0002cd0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cd4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cd8:	43                   	inc    ebx
c0002cd9:	21 c1                	and    ecx,eax
c0002cdb:	d1 e0                	shl    eax,1
c0002cdd:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ce1:	77 09                	ja     c0002cec <find_bitmap+0x75>
c0002ce3:	31 db                	xor    ebx,ebx
c0002ce5:	ba 00 02 00 00       	mov    edx,0x200
c0002cea:	31 c0                	xor    eax,eax
c0002cec:	84 c9                	test   cl,cl
c0002cee:	75 10                	jne    c0002d00 <find_bitmap+0x89>
c0002cf0:	45                   	inc    ebp
c0002cf1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cf5:	75 0f                	jne    c0002d06 <find_bitmap+0x8f>
c0002cf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cfb:	83 c0 02             	add    eax,0x2
c0002cfe:	eb 22                	jmp    c0002d22 <find_bitmap+0xab>
c0002d00:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002d04:	31 ed                	xor    ebp,ebp
c0002d06:	39 de                	cmp    esi,ebx
c0002d08:	74 16                	je     c0002d20 <find_bitmap+0xa9>
c0002d0a:	84 c0                	test   al,al
c0002d0c:	75 c6                	jne    c0002cd4 <find_bitmap+0x5d>
c0002d0e:	42                   	inc    edx
c0002d0f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d15:	77 84                	ja     c0002c9b <find_bitmap+0x24>
c0002d17:	b0 01                	mov    al,0x1
c0002d19:	eb b9                	jmp    c0002cd4 <find_bitmap+0x5d>
c0002d1b:	83 c8 ff             	or     eax,0xffffffff
c0002d1e:	eb 02                	jmp    c0002d22 <find_bitmap+0xab>
c0002d20:	31 c0                	xor    eax,eax
c0002d22:	83 c4 1c             	add    esp,0x1c
c0002d25:	5b                   	pop    ebx
c0002d26:	5e                   	pop    esi
c0002d27:	5f                   	pop    edi
c0002d28:	5d                   	pop    ebp
c0002d29:	c3                   	ret    

c0002d2a <change_bitmap>:
c0002d2a:	55                   	push   ebp
c0002d2b:	89 cd                	mov    ebp,ecx
c0002d2d:	57                   	push   edi
c0002d2e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d31:	56                   	push   esi
c0002d32:	89 c7                	mov    edi,eax
c0002d34:	53                   	push   ebx
c0002d35:	89 c8                	mov    eax,ecx
c0002d37:	83 ec 1c             	sub    esp,0x1c
c0002d3a:	31 d2                	xor    edx,edx
c0002d3c:	89 ce                	mov    esi,ecx
c0002d3e:	c1 e8 0c             	shr    eax,0xc
c0002d41:	bb 01 00 00 00       	mov    ebx,0x1
c0002d46:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d49:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d4c:	c1 ee 03             	shr    esi,0x3
c0002d4f:	83 e1 07             	and    ecx,0x7
c0002d52:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d58:	d3 e3                	shl    ebx,cl
c0002d5a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	89 d3                	mov    ebx,edx
c0002d62:	83 c1 01             	add    ecx,0x1
c0002d65:	83 d3 00             	adc    ebx,0x0
c0002d68:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d6c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d70:	89 d1                	mov    ecx,edx
c0002d72:	89 c2                	mov    edx,eax
c0002d74:	89 f8                	mov    eax,edi
c0002d76:	e8 e1 f6 ff ff       	call   c000245c <move_window>
c0002d7b:	89 c1                	mov    ecx,eax
c0002d7d:	85 c0                	test   eax,eax
c0002d7f:	75 48                	jne    c0002dc9 <change_bitmap+0x9f>
c0002d81:	31 d2                	xor    edx,edx
c0002d83:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d87:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d8b:	0f 95 c2             	setne  dl
c0002d8e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d92:	74 3c                	je     c0002dd0 <change_bitmap+0xa6>
c0002d94:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d98:	4d                   	dec    ebp
c0002d99:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d9d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002da1:	74 32                	je     c0002dd5 <change_bitmap+0xab>
c0002da3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002da7:	75 d8                	jne    c0002d81 <change_bitmap+0x57>
c0002da9:	8d 46 01             	lea    eax,[esi+0x1]
c0002dac:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002db1:	89 c3                	mov    ebx,eax
c0002db3:	31 f6                	xor    esi,esi
c0002db5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002db9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002dbd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dc3:	74 99                	je     c0002d5e <change_bitmap+0x34>
c0002dc5:	89 de                	mov    esi,ebx
c0002dc7:	eb b8                	jmp    c0002d81 <change_bitmap+0x57>
c0002dc9:	b9 01 00 00 00       	mov    ecx,0x1
c0002dce:	eb 05                	jmp    c0002dd5 <change_bitmap+0xab>
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	83 c4 1c             	add    esp,0x1c
c0002dd8:	89 c8                	mov    eax,ecx
c0002dda:	5b                   	pop    ebx
c0002ddb:	5e                   	pop    esi
c0002ddc:	5f                   	pop    edi
c0002ddd:	5d                   	pop    ebp
c0002dde:	c3                   	ret    

c0002ddf <put_fat>:
c0002ddf:	83 fa 01             	cmp    edx,0x1
c0002de2:	0f 86 7b 01 00 00    	jbe    c0002f63 <put_fat+0x184>
c0002de8:	55                   	push   ebp
c0002de9:	57                   	push   edi
c0002dea:	89 cf                	mov    edi,ecx
c0002dec:	56                   	push   esi
c0002ded:	b9 02 00 00 00       	mov    ecx,0x2
c0002df2:	53                   	push   ebx
c0002df3:	89 c6                	mov    esi,eax
c0002df5:	83 ec 1c             	sub    esp,0x1c
c0002df8:	89 d3                	mov    ebx,edx
c0002dfa:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dfd:	0f 86 68 01 00 00    	jbe    c0002f6b <put_fat+0x18c>
c0002e03:	8a 00                	mov    al,BYTE PTR [eax]
c0002e05:	3c 02                	cmp    al,0x2
c0002e07:	0f 84 c7 00 00 00    	je     c0002ed4 <put_fat+0xf5>
c0002e0d:	77 09                	ja     c0002e18 <put_fat+0x39>
c0002e0f:	fe c8                	dec    al
c0002e11:	74 17                	je     c0002e2a <put_fat+0x4b>
c0002e13:	e9 53 01 00 00       	jmp    c0002f6b <put_fat+0x18c>
c0002e18:	b9 02 00 00 00       	mov    ecx,0x2
c0002e1d:	3c 04                	cmp    al,0x4
c0002e1f:	0f 86 e1 00 00 00    	jbe    c0002f06 <put_fat+0x127>
c0002e25:	e9 41 01 00 00       	jmp    c0002f6b <put_fat+0x18c>
c0002e2a:	89 d5                	mov    ebp,edx
c0002e2c:	31 c9                	xor    ecx,ecx
c0002e2e:	d1 ed                	shr    ebp,1
c0002e30:	89 f0                	mov    eax,esi
c0002e32:	01 d5                	add    ebp,edx
c0002e34:	89 ea                	mov    edx,ebp
c0002e36:	c1 ea 09             	shr    edx,0x9
c0002e39:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e3c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3f:	e8 18 f6 ff ff       	call   c000245c <move_window>
c0002e44:	89 c1                	mov    ecx,eax
c0002e46:	85 c0                	test   eax,eax
c0002e48:	0f 85 1d 01 00 00    	jne    c0002f6b <put_fat+0x18c>
c0002e4e:	8d 46 54             	lea    eax,[esi+0x54]
c0002e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e55:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e58:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e62:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e66:	89 f8                	mov    eax,edi
c0002e68:	83 e3 01             	and    ebx,0x1
c0002e6b:	74 0d                	je     c0002e7a <put_fat+0x9b>
c0002e6d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e70:	89 fa                	mov    edx,edi
c0002e72:	83 e0 0f             	and    eax,0xf
c0002e75:	c1 e2 04             	shl    edx,0x4
c0002e78:	09 d0                	or     eax,edx
c0002e7a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e81:	31 c9                	xor    ecx,ecx
c0002e83:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e87:	c1 ea 09             	shr    edx,0x9
c0002e8a:	89 f0                	mov    eax,esi
c0002e8c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e8f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e92:	e8 c5 f5 ff ff       	call   c000245c <move_window>
c0002e97:	89 c1                	mov    ecx,eax
c0002e99:	85 c0                	test   eax,eax
c0002e9b:	0f 85 ca 00 00 00    	jne    c0002f6b <put_fat+0x18c>
c0002ea1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ea5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002eab:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002eaf:	85 db                	test   ebx,ebx
c0002eb1:	74 07                	je     c0002eba <put_fat+0xdb>
c0002eb3:	c1 ef 04             	shr    edi,0x4
c0002eb6:	89 fa                	mov    edx,edi
c0002eb8:	eb 0e                	jmp    c0002ec8 <put_fat+0xe9>
c0002eba:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ebd:	c1 ef 08             	shr    edi,0x8
c0002ec0:	83 e2 f0             	and    edx,0xfffffff0
c0002ec3:	83 e7 0f             	and    edi,0xf
c0002ec6:	09 fa                	or     edx,edi
c0002ec8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ecb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ecf:	e9 97 00 00 00       	jmp    c0002f6b <put_fat+0x18c>
c0002ed4:	31 c9                	xor    ecx,ecx
c0002ed6:	c1 ea 08             	shr    edx,0x8
c0002ed9:	89 f0                	mov    eax,esi
c0002edb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ede:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ee1:	e8 76 f5 ff ff       	call   c000245c <move_window>
c0002ee6:	89 c1                	mov    ecx,eax
c0002ee8:	85 c0                	test   eax,eax
c0002eea:	75 7f                	jne    c0002f6b <put_fat+0x18c>
c0002eec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef0:	01 db                	add    ebx,ebx
c0002ef2:	0f b7 d7             	movzx  edx,di
c0002ef5:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002efb:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eff:	e8 ec ed ff ff       	call   c0001cf0 <st_word>
c0002f04:	eb 53                	jmp    c0002f59 <put_fat+0x17a>
c0002f06:	31 c9                	xor    ecx,ecx
c0002f08:	c1 ea 07             	shr    edx,0x7
c0002f0b:	89 f0                	mov    eax,esi
c0002f0d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f10:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f13:	e8 44 f5 ff ff       	call   c000245c <move_window>
c0002f18:	89 c1                	mov    ecx,eax
c0002f1a:	85 c0                	test   eax,eax
c0002f1c:	75 4d                	jne    c0002f6b <put_fat+0x18c>
c0002f1e:	c1 e3 02             	shl    ebx,0x2
c0002f21:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f27:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f2a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f2e:	74 1c                	je     c0002f4c <put_fat+0x16d>
c0002f30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f34:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f3a:	89 d8                	mov    eax,ebx
c0002f3c:	e8 4a ed ff ff       	call   c0001c8b <ld_dword>
c0002f41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f45:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f4a:	09 c7                	or     edi,eax
c0002f4c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f50:	89 fa                	mov    edx,edi
c0002f52:	89 d8                	mov    eax,ebx
c0002f54:	e8 9b ed ff ff       	call   c0001cf4 <st_dword>
c0002f59:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f61:	eb 08                	jmp    c0002f6b <put_fat+0x18c>
c0002f63:	b9 02 00 00 00       	mov    ecx,0x2
c0002f68:	89 c8                	mov    eax,ecx
c0002f6a:	c3                   	ret    
c0002f6b:	83 c4 1c             	add    esp,0x1c
c0002f6e:	89 c8                	mov    eax,ecx
c0002f70:	5b                   	pop    ebx
c0002f71:	5e                   	pop    esi
c0002f72:	5f                   	pop    edi
c0002f73:	5d                   	pop    ebp
c0002f74:	c3                   	ret    

c0002f75 <fill_last_frag>:
c0002f75:	57                   	push   edi
c0002f76:	89 cf                	mov    edi,ecx
c0002f78:	56                   	push   esi
c0002f79:	89 d6                	mov    esi,edx
c0002f7b:	53                   	push   ebx
c0002f7c:	89 c3                	mov    ebx,eax
c0002f7e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f81:	85 c0                	test   eax,eax
c0002f83:	74 21                	je     c0002fa6 <fill_last_frag+0x31>
c0002f85:	89 f9                	mov    ecx,edi
c0002f87:	83 f8 01             	cmp    eax,0x1
c0002f8a:	76 05                	jbe    c0002f91 <fill_last_frag+0x1c>
c0002f8c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f8f:	29 c1                	sub    ecx,eax
c0002f91:	8d 56 01             	lea    edx,[esi+0x1]
c0002f94:	29 c2                	sub    edx,eax
c0002f96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f98:	e8 42 fe ff ff       	call   c0002ddf <put_fat>
c0002f9d:	85 c0                	test   eax,eax
c0002f9f:	75 05                	jne    c0002fa6 <fill_last_frag+0x31>
c0002fa1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002fa4:	eb d8                	jmp    c0002f7e <fill_last_frag+0x9>
c0002fa6:	5b                   	pop    ebx
c0002fa7:	5e                   	pop    esi
c0002fa8:	5f                   	pop    edi
c0002fa9:	c3                   	ret    

c0002faa <fill_first_frag>:
c0002faa:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002fae:	75 2d                	jne    c0002fdd <fill_first_frag+0x33>
c0002fb0:	57                   	push   edi
c0002fb1:	56                   	push   esi
c0002fb2:	53                   	push   ebx
c0002fb3:	89 c3                	mov    ebx,eax
c0002fb5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fb8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fbb:	01 d7                	add    edi,edx
c0002fbd:	39 fa                	cmp    edx,edi
c0002fbf:	74 14                	je     c0002fd5 <fill_first_frag+0x2b>
c0002fc1:	8d 72 01             	lea    esi,[edx+0x1]
c0002fc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fc6:	89 f1                	mov    ecx,esi
c0002fc8:	e8 12 fe ff ff       	call   c0002ddf <put_fat>
c0002fcd:	89 f2                	mov    edx,esi
c0002fcf:	85 c0                	test   eax,eax
c0002fd1:	74 ea                	je     c0002fbd <fill_first_frag+0x13>
c0002fd3:	eb 0b                	jmp    c0002fe0 <fill_first_frag+0x36>
c0002fd5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd9:	31 c0                	xor    eax,eax
c0002fdb:	eb 03                	jmp    c0002fe0 <fill_first_frag+0x36>
c0002fdd:	31 c0                	xor    eax,eax
c0002fdf:	c3                   	ret    
c0002fe0:	5b                   	pop    ebx
c0002fe1:	5e                   	pop    esi
c0002fe2:	5f                   	pop    edi
c0002fe3:	c3                   	ret    

c0002fe4 <get_fat>:
c0002fe4:	83 fa 01             	cmp    edx,0x1
c0002fe7:	0f 86 db 01 00 00    	jbe    c00031c8 <get_fat+0x1e4>
c0002fed:	55                   	push   ebp
c0002fee:	b9 01 00 00 00       	mov    ecx,0x1
c0002ff3:	57                   	push   edi
c0002ff4:	56                   	push   esi
c0002ff5:	53                   	push   ebx
c0002ff6:	83 ec 1c             	sub    esp,0x1c
c0002ff9:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ffb:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ffe:	0f 86 cc 01 00 00    	jbe    c00031d0 <get_fat+0x1ec>
c0003004:	89 c3                	mov    ebx,eax
c0003006:	89 d6                	mov    esi,edx
c0003008:	8a 07                	mov    al,BYTE PTR [edi]
c000300a:	3c 02                	cmp    al,0x2
c000300c:	0f 84 99 00 00 00    	je     c00030ab <get_fat+0xc7>
c0003012:	77 09                	ja     c000301d <get_fat+0x39>
c0003014:	fe c8                	dec    al
c0003016:	74 1a                	je     c0003032 <get_fat+0x4e>
c0003018:	e9 b3 01 00 00       	jmp    c00031d0 <get_fat+0x1ec>
c000301d:	3c 03                	cmp    al,0x3
c000301f:	0f 84 b5 00 00 00    	je     c00030da <get_fat+0xf6>
c0003025:	3c 04                	cmp    al,0x4
c0003027:	0f 84 e3 00 00 00    	je     c0003110 <get_fat+0x12c>
c000302d:	e9 9e 01 00 00       	jmp    c00031d0 <get_fat+0x1ec>
c0003032:	89 d3                	mov    ebx,edx
c0003034:	31 c9                	xor    ecx,ecx
c0003036:	d1 eb                	shr    ebx,1
c0003038:	89 f8                	mov    eax,edi
c000303a:	01 d3                	add    ebx,edx
c000303c:	89 da                	mov    edx,ebx
c000303e:	c1 ea 09             	shr    edx,0x9
c0003041:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003044:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003047:	e8 10 f4 ff ff       	call   c000245c <move_window>
c000304c:	85 c0                	test   eax,eax
c000304e:	74 08                	je     c0003058 <get_fat+0x74>
c0003050:	83 c9 ff             	or     ecx,0xffffffff
c0003053:	e9 78 01 00 00       	jmp    c00031d0 <get_fat+0x1ec>
c0003058:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000305b:	31 c9                	xor    ecx,ecx
c000305d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003063:	89 ea                	mov    edx,ebp
c0003065:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003069:	c1 ea 09             	shr    edx,0x9
c000306c:	89 f8                	mov    eax,edi
c000306e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003071:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003074:	e8 e3 f3 ff ff       	call   c000245c <move_window>
c0003079:	85 c0                	test   eax,eax
c000307b:	75 d3                	jne    c0003050 <get_fat+0x6c>
c000307d:	0f b6 c3             	movzx  eax,bl
c0003080:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003086:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000308b:	c1 e3 08             	shl    ebx,0x8
c000308e:	09 c3                	or     ebx,eax
c0003090:	89 d9                	mov    ecx,ebx
c0003092:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003098:	83 e6 01             	and    esi,0x1
c000309b:	0f 84 2f 01 00 00    	je     c00031d0 <get_fat+0x1ec>
c00030a1:	89 d9                	mov    ecx,ebx
c00030a3:	c1 e9 04             	shr    ecx,0x4
c00030a6:	e9 25 01 00 00       	jmp    c00031d0 <get_fat+0x1ec>
c00030ab:	31 c9                	xor    ecx,ecx
c00030ad:	c1 ea 08             	shr    edx,0x8
c00030b0:	89 f8                	mov    eax,edi
c00030b2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030b5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030b8:	e8 9f f3 ff ff       	call   c000245c <move_window>
c00030bd:	85 c0                	test   eax,eax
c00030bf:	75 8f                	jne    c0003050 <get_fat+0x6c>
c00030c1:	01 f6                	add    esi,esi
c00030c3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030c9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030cd:	e8 ac eb ff ff       	call   c0001c7e <ld_word>
c00030d2:	0f b7 c8             	movzx  ecx,ax
c00030d5:	e9 f6 00 00 00       	jmp    c00031d0 <get_fat+0x1ec>
c00030da:	31 c9                	xor    ecx,ecx
c00030dc:	c1 ea 07             	shr    edx,0x7
c00030df:	89 f8                	mov    eax,edi
c00030e1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030e4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030e7:	e8 70 f3 ff ff       	call   c000245c <move_window>
c00030ec:	85 c0                	test   eax,eax
c00030ee:	0f 85 5c ff ff ff    	jne    c0003050 <get_fat+0x6c>
c00030f4:	c1 e6 02             	shl    esi,0x2
c00030f7:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030fd:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003101:	e8 85 eb ff ff       	call   c0001c8b <ld_dword>
c0003106:	25 ff ff ff 0f       	and    eax,0xfffffff
c000310b:	e9 b4 00 00 00       	jmp    c00031c4 <get_fat+0x1e0>
c0003110:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003113:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003116:	89 d1                	mov    ecx,edx
c0003118:	09 c1                	or     ecx,eax
c000311a:	74 06                	je     c0003122 <get_fat+0x13e>
c000311c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003120:	75 0f                	jne    c0003131 <get_fat+0x14d>
c0003122:	b9 01 00 00 00       	mov    ecx,0x1
c0003127:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000312b:	0f 85 9f 00 00 00    	jne    c00031d0 <get_fat+0x1ec>
c0003131:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003135:	89 f5                	mov    ebp,esi
c0003137:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000313c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000313f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003142:	80 f9 02             	cmp    cl,0x2
c0003145:	75 35                	jne    c000317c <get_fat+0x198>
c0003147:	83 c0 ff             	add    eax,0xffffffff
c000314a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000314f:	83 d2 ff             	adc    edx,0xffffffff
c0003152:	31 db                	xor    ebx,ebx
c0003154:	0f ac d0 09          	shrd   eax,edx,0x9
c0003158:	53                   	push   ebx
c0003159:	c1 ea 09             	shr    edx,0x9
c000315c:	51                   	push   ecx
c000315d:	52                   	push   edx
c000315e:	50                   	push   eax
c000315f:	e8 a8 b5 01 00       	call   c001e70c <__udivdi3>
c0003164:	83 c4 10             	add    esp,0x10
c0003167:	b9 01 00 00 00       	mov    ecx,0x1
c000316c:	39 c5                	cmp    ebp,eax
c000316e:	77 60                	ja     c00031d0 <get_fat+0x1ec>
c0003170:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003175:	74 59                	je     c00031d0 <get_fat+0x1ec>
c0003177:	8d 4e 01             	lea    ecx,[esi+0x1]
c000317a:	eb 54                	jmp    c00031d0 <get_fat+0x1ec>
c000317c:	80 f9 03             	cmp    cl,0x3
c000317f:	75 05                	jne    c0003186 <get_fat+0x1a2>
c0003181:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003184:	77 f1                	ja     c0003177 <get_fat+0x193>
c0003186:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000318b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000318f:	75 3f                	jne    c00031d0 <get_fat+0x1ec>
c0003191:	31 c9                	xor    ecx,ecx
c0003193:	89 f2                	mov    edx,esi
c0003195:	89 f8                	mov    eax,edi
c0003197:	c1 ea 07             	shr    edx,0x7
c000319a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000319d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00031a0:	e8 b7 f2 ff ff       	call   c000245c <move_window>
c00031a5:	85 c0                	test   eax,eax
c00031a7:	0f 85 a3 fe ff ff    	jne    c0003050 <get_fat+0x6c>
c00031ad:	c1 e6 02             	shl    esi,0x2
c00031b0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031b6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031ba:	e8 cc ea ff ff       	call   c0001c8b <ld_dword>
c00031bf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031c4:	89 c1                	mov    ecx,eax
c00031c6:	eb 08                	jmp    c00031d0 <get_fat+0x1ec>
c00031c8:	b9 01 00 00 00       	mov    ecx,0x1
c00031cd:	89 c8                	mov    eax,ecx
c00031cf:	c3                   	ret    
c00031d0:	83 c4 1c             	add    esp,0x1c
c00031d3:	89 c8                	mov    eax,ecx
c00031d5:	5b                   	pop    ebx
c00031d6:	5e                   	pop    esi
c00031d7:	5f                   	pop    edi
c00031d8:	5d                   	pop    ebp
c00031d9:	c3                   	ret    

c00031da <dir_sdi>:
c00031da:	55                   	push   ebp
c00031db:	57                   	push   edi
c00031dc:	56                   	push   esi
c00031dd:	53                   	push   ebx
c00031de:	89 c3                	mov    ebx,eax
c00031e0:	83 ec 1c             	sub    esp,0x1c
c00031e3:	8b 38                	mov    edi,DWORD PTR [eax]
c00031e5:	31 c0                	xor    eax,eax
c00031e7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031ea:	0f 94 c0             	sete   al
c00031ed:	48                   	dec    eax
c00031ee:	25 00 00 20 f0       	and    eax,0xf0200000
c00031f3:	05 00 00 00 10       	add    eax,0x10000000
c00031f8:	39 d0                	cmp    eax,edx
c00031fa:	77 0a                	ja     c0003206 <dir_sdi+0x2c>
c00031fc:	b8 02 00 00 00       	mov    eax,0x2
c0003201:	e9 c4 00 00 00       	jmp    c00032ca <dir_sdi+0xf0>
c0003206:	89 d6                	mov    esi,edx
c0003208:	f6 c2 1f             	test   dl,0x1f
c000320b:	75 ef                	jne    c00031fc <dir_sdi+0x22>
c000320d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003210:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003213:	85 c9                	test   ecx,ecx
c0003215:	75 2d                	jne    c0003244 <dir_sdi+0x6a>
c0003217:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000321a:	77 1b                	ja     c0003237 <dir_sdi+0x5d>
c000321c:	89 f2                	mov    edx,esi
c000321e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003222:	c1 ea 05             	shr    edx,0x5
c0003225:	39 c2                	cmp    edx,eax
c0003227:	73 d3                	jae    c00031fc <dir_sdi+0x22>
c0003229:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000322c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000322f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003232:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003235:	eb 4b                	jmp    c0003282 <dir_sdi+0xa8>
c0003237:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000323a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000323e:	85 c0                	test   eax,eax
c0003240:	74 da                	je     c000321c <dir_sdi+0x42>
c0003242:	89 c1                	mov    ecx,eax
c0003244:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003248:	c1 e5 09             	shl    ebp,0x9
c000324b:	89 ca                	mov    edx,ecx
c000324d:	39 ee                	cmp    esi,ebp
c000324f:	72 1c                	jb     c000326d <dir_sdi+0x93>
c0003251:	89 d8                	mov    eax,ebx
c0003253:	e8 8c fd ff ff       	call   c0002fe4 <get_fat>
c0003258:	89 c1                	mov    ecx,eax
c000325a:	83 f8 ff             	cmp    eax,0xffffffff
c000325d:	74 66                	je     c00032c5 <dir_sdi+0xeb>
c000325f:	83 f8 01             	cmp    eax,0x1
c0003262:	76 98                	jbe    c00031fc <dir_sdi+0x22>
c0003264:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003267:	76 93                	jbe    c00031fc <dir_sdi+0x22>
c0003269:	29 ee                	sub    esi,ebp
c000326b:	eb de                	jmp    c000324b <dir_sdi+0x71>
c000326d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003271:	89 f8                	mov    eax,edi
c0003273:	e8 9f ec ff ff       	call   c0001f17 <clst2sect>
c0003278:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000327c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000327f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003282:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003285:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003288:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000328b:	89 d1                	mov    ecx,edx
c000328d:	09 c1                	or     ecx,eax
c000328f:	0f 84 67 ff ff ff    	je     c00031fc <dir_sdi+0x22>
c0003295:	89 f1                	mov    ecx,esi
c0003297:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000329f:	c1 e9 09             	shr    ecx,0x9
c00032a2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032a6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00032aa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00032ae:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032b1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032b7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032ba:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032be:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032c1:	31 c0                	xor    eax,eax
c00032c3:	eb 05                	jmp    c00032ca <dir_sdi+0xf0>
c00032c5:	b8 01 00 00 00       	mov    eax,0x1
c00032ca:	83 c4 1c             	add    esp,0x1c
c00032cd:	5b                   	pop    ebx
c00032ce:	5e                   	pop    esi
c00032cf:	5f                   	pop    edi
c00032d0:	5d                   	pop    ebp
c00032d1:	c3                   	ret    

c00032d2 <create_chain>:
c00032d2:	55                   	push   ebp
c00032d3:	89 c5                	mov    ebp,eax
c00032d5:	57                   	push   edi
c00032d6:	56                   	push   esi
c00032d7:	53                   	push   ebx
c00032d8:	83 ec 1c             	sub    esp,0x1c
c00032db:	85 d2                	test   edx,edx
c00032dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032e1:	8b 30                	mov    esi,DWORD PTR [eax]
c00032e3:	75 0e                	jne    c00032f3 <create_chain+0x21>
c00032e5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032e8:	85 ff                	test   edi,edi
c00032ea:	74 39                	je     c0003325 <create_chain+0x53>
c00032ec:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032ef:	77 39                	ja     c000332a <create_chain+0x58>
c00032f1:	eb 32                	jmp    c0003325 <create_chain+0x53>
c00032f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032f7:	e8 e8 fc ff ff       	call   c0002fe4 <get_fat>
c00032fc:	89 c3                	mov    ebx,eax
c00032fe:	83 f8 01             	cmp    eax,0x1
c0003301:	77 0a                	ja     c000330d <create_chain+0x3b>
c0003303:	bb 01 00 00 00       	mov    ebx,0x1
c0003308:	e9 ba 01 00 00       	jmp    c00034c7 <create_chain+0x1f5>
c000330d:	83 f8 ff             	cmp    eax,0xffffffff
c0003310:	0f 84 62 01 00 00    	je     c0003478 <create_chain+0x1a6>
c0003316:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003319:	0f 87 a8 01 00 00    	ja     c00034c7 <create_chain+0x1f5>
c000331f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003323:	eb 05                	jmp    c000332a <create_chain+0x58>
c0003325:	bf 01 00 00 00       	mov    edi,0x1
c000332a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000332e:	75 07                	jne    c0003337 <create_chain+0x65>
c0003330:	31 db                	xor    ebx,ebx
c0003332:	e9 90 01 00 00       	jmp    c00034c7 <create_chain+0x1f5>
c0003337:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000333a:	75 74                	jne    c00033b0 <create_chain+0xde>
c000333c:	b9 01 00 00 00       	mov    ecx,0x1
c0003341:	89 fa                	mov    edx,edi
c0003343:	89 f0                	mov    eax,esi
c0003345:	e8 2d f9 ff ff       	call   c0002c77 <find_bitmap>
c000334a:	89 c3                	mov    ebx,eax
c000334c:	8d 40 ff             	lea    eax,[eax-0x1]
c000334f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003352:	0f 87 6f 01 00 00    	ja     c00034c7 <create_chain+0x1f5>
c0003358:	83 ec 0c             	sub    esp,0xc
c000335b:	b9 01 00 00 00       	mov    ecx,0x1
c0003360:	6a 01                	push   0x1
c0003362:	89 da                	mov    edx,ebx
c0003364:	89 f0                	mov    eax,esi
c0003366:	e8 bf f9 ff ff       	call   c0002d2a <change_bitmap>
c000336b:	83 c4 10             	add    esp,0x10
c000336e:	83 f8 02             	cmp    eax,0x2
c0003371:	74 90                	je     c0003303 <create_chain+0x31>
c0003373:	83 f8 01             	cmp    eax,0x1
c0003376:	0f 84 fc 00 00 00    	je     c0003478 <create_chain+0x1a6>
c000337c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003381:	75 09                	jne    c000338c <create_chain+0xba>
c0003383:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003387:	e9 0c 01 00 00       	jmp    c0003498 <create_chain+0x1c6>
c000338c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003390:	0f 85 e7 00 00 00    	jne    c000347d <create_chain+0x1ab>
c0003396:	8d 57 01             	lea    edx,[edi+0x1]
c0003399:	39 da                	cmp    edx,ebx
c000339b:	0f 84 f7 00 00 00    	je     c0003498 <create_chain+0x1c6>
c00033a1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00033a4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00033a8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00033ab:	e9 cd 00 00 00       	jmp    c000347d <create_chain+0x1ab>
c00033b0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033b4:	75 41                	jne    c00033f7 <create_chain+0x125>
c00033b6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033b9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033bc:	77 05                	ja     c00033c3 <create_chain+0xf1>
c00033be:	bb 02 00 00 00       	mov    ebx,0x2
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 e8                	mov    eax,ebp
c00033c7:	e8 18 fc ff ff       	call   c0002fe4 <get_fat>
c00033cc:	83 f8 01             	cmp    eax,0x1
c00033cf:	0f 84 2e ff ff ff    	je     c0003303 <create_chain+0x31>
c00033d5:	83 f8 ff             	cmp    eax,0xffffffff
c00033d8:	0f 84 9a 00 00 00    	je     c0003478 <create_chain+0x1a6>
c00033de:	85 c0                	test   eax,eax
c00033e0:	74 11                	je     c00033f3 <create_chain+0x121>
c00033e2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033e5:	83 f8 01             	cmp    eax,0x1
c00033e8:	76 0d                	jbe    c00033f7 <create_chain+0x125>
c00033ea:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033ed:	76 08                	jbe    c00033f7 <create_chain+0x125>
c00033ef:	89 c7                	mov    edi,eax
c00033f1:	eb 04                	jmp    c00033f7 <create_chain+0x125>
c00033f3:	85 db                	test   ebx,ebx
c00033f5:	75 38                	jne    c000342f <create_chain+0x15d>
c00033f7:	89 fb                	mov    ebx,edi
c00033f9:	43                   	inc    ebx
c00033fa:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033fd:	77 0e                	ja     c000340d <create_chain+0x13b>
c00033ff:	83 ff 01             	cmp    edi,0x1
c0003402:	0f 86 28 ff ff ff    	jbe    c0003330 <create_chain+0x5e>
c0003408:	bb 02 00 00 00       	mov    ebx,0x2
c000340d:	89 da                	mov    edx,ebx
c000340f:	89 e8                	mov    eax,ebp
c0003411:	e8 ce fb ff ff       	call   c0002fe4 <get_fat>
c0003416:	85 c0                	test   eax,eax
c0003418:	74 15                	je     c000342f <create_chain+0x15d>
c000341a:	83 f8 01             	cmp    eax,0x1
c000341d:	0f 84 e0 fe ff ff    	je     c0003303 <create_chain+0x31>
c0003423:	40                   	inc    eax
c0003424:	74 52                	je     c0003478 <create_chain+0x1a6>
c0003426:	39 fb                	cmp    ebx,edi
c0003428:	75 cf                	jne    c00033f9 <create_chain+0x127>
c000342a:	e9 01 ff ff ff       	jmp    c0003330 <create_chain+0x5e>
c000342f:	83 c9 ff             	or     ecx,0xffffffff
c0003432:	89 da                	mov    edx,ebx
c0003434:	89 f0                	mov    eax,esi
c0003436:	e8 a4 f9 ff ff       	call   c0002ddf <put_fat>
c000343b:	85 c0                	test   eax,eax
c000343d:	75 32                	jne    c0003471 <create_chain+0x19f>
c000343f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003444:	74 11                	je     c0003457 <create_chain+0x185>
c0003446:	89 d9                	mov    ecx,ebx
c0003448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000344c:	89 f0                	mov    eax,esi
c000344e:	e8 8c f9 ff ff       	call   c0002ddf <put_fat>
c0003453:	85 c0                	test   eax,eax
c0003455:	75 1a                	jne    c0003471 <create_chain+0x19f>
c0003457:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000345a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000345d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003460:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003463:	39 d0                	cmp    eax,edx
c0003465:	77 04                	ja     c000346b <create_chain+0x199>
c0003467:	48                   	dec    eax
c0003468:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000346b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000346f:	eb 56                	jmp    c00034c7 <create_chain+0x1f5>
c0003471:	48                   	dec    eax
c0003472:	0f 85 8b fe ff ff    	jne    c0003303 <create_chain+0x31>
c0003478:	83 cb ff             	or     ebx,0xffffffff
c000347b:	eb 4a                	jmp    c00034c7 <create_chain+0x1f5>
c000347d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003481:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003484:	41                   	inc    ecx
c0003485:	39 d9                	cmp    ecx,ebx
c0003487:	75 19                	jne    c00034a2 <create_chain+0x1d0>
c0003489:	b9 02 00 00 00       	mov    ecx,0x2
c000348e:	85 d2                	test   edx,edx
c0003490:	74 03                	je     c0003495 <create_chain+0x1c3>
c0003492:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003495:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003498:	85 c0                	test   eax,eax
c000349a:	0f 85 63 fe ff ff    	jne    c0003303 <create_chain+0x31>
c00034a0:	eb b5                	jmp    c0003457 <create_chain+0x185>
c00034a2:	85 d2                	test   edx,edx
c00034a4:	75 07                	jne    c00034ad <create_chain+0x1db>
c00034a6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034ad:	89 d9                	mov    ecx,ebx
c00034af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034b3:	89 e8                	mov    eax,ebp
c00034b5:	e8 bb fa ff ff       	call   c0002f75 <fill_last_frag>
c00034ba:	85 c0                	test   eax,eax
c00034bc:	75 b3                	jne    c0003471 <create_chain+0x19f>
c00034be:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034c5:	eb 90                	jmp    c0003457 <create_chain+0x185>
c00034c7:	83 c4 1c             	add    esp,0x1c
c00034ca:	89 d8                	mov    eax,ebx
c00034cc:	5b                   	pop    ebx
c00034cd:	5e                   	pop    esi
c00034ce:	5f                   	pop    edi
c00034cf:	5d                   	pop    ebp
c00034d0:	c3                   	ret    

c00034d1 <remove_chain>:
c00034d1:	55                   	push   ebp
c00034d2:	57                   	push   edi
c00034d3:	56                   	push   esi
c00034d4:	53                   	push   ebx
c00034d5:	83 ec 1c             	sub    esp,0x1c
c00034d8:	83 fa 01             	cmp    edx,0x1
c00034db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034df:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034e1:	77 0a                	ja     c00034ed <remove_chain+0x1c>
c00034e3:	b8 02 00 00 00       	mov    eax,0x2
c00034e8:	e9 24 01 00 00       	jmp    c0003611 <remove_chain+0x140>
c00034ed:	89 d6                	mov    esi,edx
c00034ef:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034f2:	76 ef                	jbe    c00034e3 <remove_chain+0x12>
c00034f4:	89 c7                	mov    edi,eax
c00034f6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034fb:	75 06                	jne    c0003503 <remove_chain+0x32>
c00034fd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003501:	eb 54                	jmp    c0003557 <remove_chain+0x86>
c0003503:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003506:	75 06                	jne    c000350e <remove_chain+0x3d>
c0003508:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000350c:	74 ef                	je     c00034fd <remove_chain+0x2c>
c000350e:	83 c9 ff             	or     ecx,0xffffffff
c0003511:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003515:	89 d8                	mov    eax,ebx
c0003517:	e8 c3 f8 ff ff       	call   c0002ddf <put_fat>
c000351c:	85 c0                	test   eax,eax
c000351e:	74 dd                	je     c00034fd <remove_chain+0x2c>
c0003520:	e9 ec 00 00 00       	jmp    c0003611 <remove_chain+0x140>
c0003525:	83 f8 01             	cmp    eax,0x1
c0003528:	74 b9                	je     c00034e3 <remove_chain+0x12>
c000352a:	83 f8 ff             	cmp    eax,0xffffffff
c000352d:	74 6d                	je     c000359c <remove_chain+0xcb>
c000352f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003532:	75 6f                	jne    c00035a3 <remove_chain+0xd2>
c0003534:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003537:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000353a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000353d:	39 d0                	cmp    eax,edx
c000353f:	73 08                	jae    c0003549 <remove_chain+0x78>
c0003541:	40                   	inc    eax
c0003542:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003546:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003549:	8d 4e 01             	lea    ecx,[esi+0x1]
c000354c:	39 e9                	cmp    ecx,ebp
c000354e:	75 64                	jne    c00035b4 <remove_chain+0xe3>
c0003550:	89 ee                	mov    esi,ebp
c0003552:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003555:	76 0f                	jbe    c0003566 <remove_chain+0x95>
c0003557:	89 f2                	mov    edx,esi
c0003559:	89 f8                	mov    eax,edi
c000355b:	e8 84 fa ff ff       	call   c0002fe4 <get_fat>
c0003560:	89 c5                	mov    ebp,eax
c0003562:	85 c0                	test   eax,eax
c0003564:	75 bf                	jne    c0003525 <remove_chain+0x54>
c0003566:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003569:	0f 85 a0 00 00 00    	jne    c000360f <remove_chain+0x13e>
c000356f:	eb 6c                	jmp    c00035dd <remove_chain+0x10c>
c0003571:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003574:	84 c0                	test   al,al
c0003576:	75 7d                	jne    c00035f5 <remove_chain+0x124>
c0003578:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000357b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000357f:	0f 84 86 00 00 00    	je     c000360b <remove_chain+0x13a>
c0003585:	89 da                	mov    edx,ebx
c0003587:	89 f8                	mov    eax,edi
c0003589:	e8 56 fa ff ff       	call   c0002fe4 <get_fat>
c000358e:	83 f8 01             	cmp    eax,0x1
c0003591:	0f 86 4c ff ff ff    	jbe    c00034e3 <remove_chain+0x12>
c0003597:	83 f8 ff             	cmp    eax,0xffffffff
c000359a:	75 4e                	jne    c00035ea <remove_chain+0x119>
c000359c:	b8 01 00 00 00       	mov    eax,0x1
c00035a1:	eb 6e                	jmp    c0003611 <remove_chain+0x140>
c00035a3:	31 c9                	xor    ecx,ecx
c00035a5:	89 f2                	mov    edx,esi
c00035a7:	89 d8                	mov    eax,ebx
c00035a9:	e8 31 f8 ff ff       	call   c0002ddf <put_fat>
c00035ae:	85 c0                	test   eax,eax
c00035b0:	74 82                	je     c0003534 <remove_chain+0x63>
c00035b2:	eb 5d                	jmp    c0003611 <remove_chain+0x140>
c00035b4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035b7:	75 1b                	jne    c00035d4 <remove_chain+0x103>
c00035b9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035bd:	89 d8                	mov    eax,ebx
c00035bf:	83 ec 0c             	sub    esp,0xc
c00035c2:	6a 00                	push   0x0
c00035c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035c8:	e8 5d f7 ff ff       	call   c0002d2a <change_bitmap>
c00035cd:	83 c4 10             	add    esp,0x10
c00035d0:	85 c0                	test   eax,eax
c00035d2:	75 3d                	jne    c0003611 <remove_chain+0x140>
c00035d4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035d8:	e9 73 ff ff ff       	jmp    c0003550 <remove_chain+0x7f>
c00035dd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035e2:	75 8d                	jne    c0003571 <remove_chain+0xa0>
c00035e4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035e8:	eb 25                	jmp    c000360f <remove_chain+0x13e>
c00035ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00035ed:	89 c3                	mov    ebx,eax
c00035ef:	39 c2                	cmp    edx,eax
c00035f1:	74 88                	je     c000357b <remove_chain+0xaa>
c00035f3:	eb 1a                	jmp    c000360f <remove_chain+0x13e>
c00035f5:	3c 03                	cmp    al,0x3
c00035f7:	75 16                	jne    c000360f <remove_chain+0x13e>
c00035f9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035fc:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003600:	77 0d                	ja     c000360f <remove_chain+0x13e>
c0003602:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003605:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003609:	72 04                	jb     c000360f <remove_chain+0x13e>
c000360b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000360f:	31 c0                	xor    eax,eax
c0003611:	83 c4 1c             	add    esp,0x1c
c0003614:	5b                   	pop    ebx
c0003615:	5e                   	pop    esi
c0003616:	5f                   	pop    edi
c0003617:	5d                   	pop    ebp
c0003618:	c3                   	ret    

c0003619 <dir_clear>:
c0003619:	55                   	push   ebp
c000361a:	57                   	push   edi
c000361b:	56                   	push   esi
c000361c:	89 c6                	mov    esi,eax
c000361e:	53                   	push   ebx
c000361f:	83 ec 1c             	sub    esp,0x1c
c0003622:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003626:	e8 9d ed ff ff       	call   c00023c8 <sync_window>
c000362b:	85 c0                	test   eax,eax
c000362d:	0f 85 de 00 00 00    	jne    c0003711 <dir_clear+0xf8>
c0003633:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003637:	89 f0                	mov    eax,esi
c0003639:	8d 6e 54             	lea    ebp,[esi+0x54]
c000363c:	e8 d6 e8 ff ff       	call   c0001f17 <clst2sect>
c0003641:	b9 00 02 00 00       	mov    ecx,0x200
c0003646:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000364a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000364e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003651:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003654:	89 e8                	mov    eax,ebp
c0003656:	31 d2                	xor    edx,edx
c0003658:	e8 b5 e6 ff ff       	call   c0001d12 <mem_set>
c000365d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003661:	c1 e3 09             	shl    ebx,0x9
c0003664:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000366a:	76 1f                	jbe    c000368b <dir_clear+0x72>
c000366c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003671:	eb 18                	jmp    c000368b <dir_clear+0x72>
c0003673:	83 ec 0c             	sub    esp,0xc
c0003676:	53                   	push   ebx
c0003677:	e8 35 4e 00 00       	call   c00084b1 <ff_memalloc>
c000367c:	83 c4 10             	add    esp,0x10
c000367f:	89 c7                	mov    edi,eax
c0003681:	85 c0                	test   eax,eax
c0003683:	0f 85 8f 00 00 00    	jne    c0003718 <dir_clear+0xff>
c0003689:	d1 eb                	shr    ebx,1
c000368b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003691:	77 e0                	ja     c0003673 <dir_clear+0x5a>
c0003693:	31 db                	xor    ebx,ebx
c0003695:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003699:	39 d8                	cmp    eax,ebx
c000369b:	76 66                	jbe    c0003703 <dir_clear+0xea>
c000369d:	83 ec 0c             	sub    esp,0xc
c00036a0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036a4:	6a 01                	push   0x1
c00036a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036ae:	55                   	push   ebp
c00036af:	50                   	push   eax
c00036b0:	e8 94 e5 ff ff       	call   c0001c49 <disk_write>
c00036b5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036ba:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036bf:	83 c4 20             	add    esp,0x20
c00036c2:	85 c0                	test   eax,eax
c00036c4:	75 3d                	jne    c0003703 <dir_clear+0xea>
c00036c6:	43                   	inc    ebx
c00036c7:	eb cc                	jmp    c0003695 <dir_clear+0x7c>
c00036c9:	83 ec 0c             	sub    esp,0xc
c00036cc:	31 d2                	xor    edx,edx
c00036ce:	55                   	push   ebp
c00036cf:	89 d8                	mov    eax,ebx
c00036d1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036d5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036d9:	52                   	push   edx
c00036da:	50                   	push   eax
c00036db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036df:	57                   	push   edi
c00036e0:	50                   	push   eax
c00036e1:	e8 63 e5 ff ff       	call   c0001c49 <disk_write>
c00036e6:	83 c4 20             	add    esp,0x20
c00036e9:	85 c0                	test   eax,eax
c00036eb:	75 0a                	jne    c00036f7 <dir_clear+0xde>
c00036ed:	01 eb                	add    ebx,ebp
c00036ef:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f3:	39 d8                	cmp    eax,ebx
c00036f5:	77 d2                	ja     c00036c9 <dir_clear+0xb0>
c00036f7:	83 ec 0c             	sub    esp,0xc
c00036fa:	57                   	push   edi
c00036fb:	e8 c7 4d 00 00       	call   c00084c7 <ff_memfree>
c0003700:	83 c4 10             	add    esp,0x10
c0003703:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003707:	39 d8                	cmp    eax,ebx
c0003709:	0f 95 c0             	setne  al
c000370c:	0f b6 c0             	movzx  eax,al
c000370f:	eb 19                	jmp    c000372a <dir_clear+0x111>
c0003711:	b8 01 00 00 00       	mov    eax,0x1
c0003716:	eb 12                	jmp    c000372a <dir_clear+0x111>
c0003718:	89 d9                	mov    ecx,ebx
c000371a:	31 d2                	xor    edx,edx
c000371c:	c1 eb 09             	shr    ebx,0x9
c000371f:	e8 ee e5 ff ff       	call   c0001d12 <mem_set>
c0003724:	89 dd                	mov    ebp,ebx
c0003726:	31 db                	xor    ebx,ebx
c0003728:	eb c5                	jmp    c00036ef <dir_clear+0xd6>
c000372a:	83 c4 1c             	add    esp,0x1c
c000372d:	5b                   	pop    ebx
c000372e:	5e                   	pop    esi
c000372f:	5f                   	pop    edi
c0003730:	5d                   	pop    ebp
c0003731:	c3                   	ret    

c0003732 <dir_next>:
c0003732:	55                   	push   ebp
c0003733:	57                   	push   edi
c0003734:	56                   	push   esi
c0003735:	53                   	push   ebx
c0003736:	89 c3                	mov    ebx,eax
c0003738:	83 ec 1c             	sub    esp,0x1c
c000373b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000373d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003741:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003744:	8d 78 20             	lea    edi,[eax+0x20]
c0003747:	31 c0                	xor    eax,eax
c0003749:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000374d:	0f 94 c0             	sete   al
c0003750:	48                   	dec    eax
c0003751:	25 00 00 20 f0       	and    eax,0xf0200000
c0003756:	05 00 00 00 10       	add    eax,0x10000000
c000375b:	39 f8                	cmp    eax,edi
c000375d:	77 0e                	ja     c000376d <dir_next+0x3b>
c000375f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003766:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003770:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003773:	b8 04 00 00 00       	mov    eax,0x4
c0003778:	89 ce                	mov    esi,ecx
c000377a:	09 d6                	or     esi,edx
c000377c:	0f 84 da 00 00 00    	je     c000385c <dir_next+0x12a>
c0003782:	89 f8                	mov    eax,edi
c0003784:	25 ff 01 00 00       	and    eax,0x1ff
c0003789:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000378d:	0f 85 b9 00 00 00    	jne    c000384c <dir_next+0x11a>
c0003793:	83 c2 01             	add    edx,0x1
c0003796:	83 d1 00             	adc    ecx,0x0
c0003799:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000379c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000379f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037a2:	85 d2                	test   edx,edx
c00037a4:	75 29                	jne    c00037cf <dir_next+0x9d>
c00037a6:	89 fa                	mov    edx,edi
c00037a8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ac:	c1 ea 05             	shr    edx,0x5
c00037af:	39 c2                	cmp    edx,eax
c00037b1:	0f 82 95 00 00 00    	jb     c000384c <dir_next+0x11a>
c00037b7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037be:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037c5:	b8 04 00 00 00       	mov    eax,0x4
c00037ca:	e9 8d 00 00 00       	jmp    c000385c <dir_next+0x12a>
c00037cf:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037d3:	89 f9                	mov    ecx,edi
c00037d5:	48                   	dec    eax
c00037d6:	c1 e9 09             	shr    ecx,0x9
c00037d9:	85 c8                	test   eax,ecx
c00037db:	75 6f                	jne    c000384c <dir_next+0x11a>
c00037dd:	89 d8                	mov    eax,ebx
c00037df:	e8 00 f8 ff ff       	call   c0002fe4 <get_fat>
c00037e4:	89 c6                	mov    esi,eax
c00037e6:	83 f8 01             	cmp    eax,0x1
c00037e9:	77 07                	ja     c00037f2 <dir_next+0xc0>
c00037eb:	b8 02 00 00 00       	mov    eax,0x2
c00037f0:	eb 6a                	jmp    c000385c <dir_next+0x12a>
c00037f2:	83 f8 ff             	cmp    eax,0xffffffff
c00037f5:	75 07                	jne    c00037fe <dir_next+0xcc>
c00037f7:	b8 01 00 00 00       	mov    eax,0x1
c00037fc:	eb 5e                	jmp    c000385c <dir_next+0x12a>
c00037fe:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003801:	77 37                	ja     c000383a <dir_next+0x108>
c0003803:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003808:	74 ad                	je     c00037b7 <dir_next+0x85>
c000380a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000380d:	89 d8                	mov    eax,ebx
c000380f:	e8 be fa ff ff       	call   c00032d2 <create_chain>
c0003814:	89 c6                	mov    esi,eax
c0003816:	b8 07 00 00 00       	mov    eax,0x7
c000381b:	85 f6                	test   esi,esi
c000381d:	74 3d                	je     c000385c <dir_next+0x12a>
c000381f:	83 fe 01             	cmp    esi,0x1
c0003822:	74 c7                	je     c00037eb <dir_next+0xb9>
c0003824:	83 fe ff             	cmp    esi,0xffffffff
c0003827:	74 ce                	je     c00037f7 <dir_next+0xc5>
c0003829:	89 f2                	mov    edx,esi
c000382b:	89 e8                	mov    eax,ebp
c000382d:	e8 e7 fd ff ff       	call   c0003619 <dir_clear>
c0003832:	85 c0                	test   eax,eax
c0003834:	75 c1                	jne    c00037f7 <dir_next+0xc5>
c0003836:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000383a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000383d:	89 f2                	mov    edx,esi
c000383f:	89 e8                	mov    eax,ebp
c0003841:	e8 d1 e6 ff ff       	call   c0001f17 <clst2sect>
c0003846:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003849:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000384c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003850:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003853:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003857:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000385a:	31 c0                	xor    eax,eax
c000385c:	83 c4 1c             	add    esp,0x1c
c000385f:	5b                   	pop    ebx
c0003860:	5e                   	pop    esi
c0003861:	5f                   	pop    edi
c0003862:	5d                   	pop    ebp
c0003863:	c3                   	ret    

c0003864 <load_xdir>:
c0003864:	55                   	push   ebp
c0003865:	57                   	push   edi
c0003866:	56                   	push   esi
c0003867:	89 c6                	mov    esi,eax
c0003869:	53                   	push   ebx
c000386a:	83 ec 1c             	sub    esp,0x1c
c000386d:	8b 00                	mov    eax,DWORD PTR [eax]
c000386f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003872:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003875:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003878:	e8 df eb ff ff       	call   c000245c <move_window>
c000387d:	89 c3                	mov    ebx,eax
c000387f:	85 c0                	test   eax,eax
c0003881:	0f 85 0c 01 00 00    	jne    c0003993 <load_xdir+0x12f>
c0003887:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000388a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000388d:	0f 85 fb 00 00 00    	jne    c000398e <load_xdir+0x12a>
c0003893:	89 f8                	mov    eax,edi
c0003895:	b9 20 00 00 00       	mov    ecx,0x20
c000389a:	e8 5e e4 ff ff       	call   c0001cfd <mem_cpy>
c000389f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00038a3:	40                   	inc    eax
c00038a4:	c1 e0 05             	shl    eax,0x5
c00038a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038ab:	83 e8 60             	sub    eax,0x60
c00038ae:	3d 00 02 00 00       	cmp    eax,0x200
c00038b3:	0f 87 d5 00 00 00    	ja     c000398e <load_xdir+0x12a>
c00038b9:	31 d2                	xor    edx,edx
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	e8 70 fe ff ff       	call   c0003732 <dir_next>
c00038c2:	89 c3                	mov    ebx,eax
c00038c4:	83 f8 04             	cmp    eax,0x4
c00038c7:	0f 84 c1 00 00 00    	je     c000398e <load_xdir+0x12a>
c00038cd:	85 c0                	test   eax,eax
c00038cf:	0f 85 be 00 00 00    	jne    c0003993 <load_xdir+0x12f>
c00038d5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038d8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038db:	8b 06                	mov    eax,DWORD PTR [esi]
c00038dd:	e8 7a eb ff ff       	call   c000245c <move_window>
c00038e2:	89 c3                	mov    ebx,eax
c00038e4:	85 c0                	test   eax,eax
c00038e6:	0f 85 a7 00 00 00    	jne    c0003993 <load_xdir+0x12f>
c00038ec:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038ef:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038f2:	0f 85 96 00 00 00    	jne    c000398e <load_xdir+0x12a>
c00038f8:	8d 47 20             	lea    eax,[edi+0x20]
c00038fb:	b9 20 00 00 00       	mov    ecx,0x20
c0003900:	e8 f8 e3 ff ff       	call   c0001cfd <mem_cpy>
c0003905:	31 d2                	xor    edx,edx
c0003907:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000390b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003910:	83 c0 2c             	add    eax,0x2c
c0003913:	f7 f1                	div    ecx
c0003915:	c1 e0 05             	shl    eax,0x5
c0003918:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000391c:	77 70                	ja     c000398e <load_xdir+0x12a>
c000391e:	bd 40 00 00 00       	mov    ebp,0x40
c0003923:	31 d2                	xor    edx,edx
c0003925:	89 f0                	mov    eax,esi
c0003927:	e8 06 fe ff ff       	call   c0003732 <dir_next>
c000392c:	89 c3                	mov    ebx,eax
c000392e:	83 f8 04             	cmp    eax,0x4
c0003931:	74 5b                	je     c000398e <load_xdir+0x12a>
c0003933:	85 c0                	test   eax,eax
c0003935:	75 5c                	jne    c0003993 <load_xdir+0x12f>
c0003937:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000393a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000393d:	8b 06                	mov    eax,DWORD PTR [esi]
c000393f:	e8 18 eb ff ff       	call   c000245c <move_window>
c0003944:	89 c3                	mov    ebx,eax
c0003946:	85 c0                	test   eax,eax
c0003948:	75 49                	jne    c0003993 <load_xdir+0x12f>
c000394a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000394d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003950:	75 3c                	jne    c000398e <load_xdir+0x12a>
c0003952:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003958:	77 0d                	ja     c0003967 <load_xdir+0x103>
c000395a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000395d:	b9 20 00 00 00       	mov    ecx,0x20
c0003962:	e8 96 e3 ff ff       	call   c0001cfd <mem_cpy>
c0003967:	83 c5 20             	add    ebp,0x20
c000396a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000396e:	77 b3                	ja     c0003923 <load_xdir+0xbf>
c0003970:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003976:	77 1b                	ja     c0003993 <load_xdir+0x12f>
c0003978:	89 f8                	mov    eax,edi
c000397a:	e8 cd e7 ff ff       	call   c000214c <xdir_sum>
c000397f:	89 c1                	mov    ecx,eax
c0003981:	8d 47 02             	lea    eax,[edi+0x2]
c0003984:	e8 f5 e2 ff ff       	call   c0001c7e <ld_word>
c0003989:	66 39 c1             	cmp    cx,ax
c000398c:	74 05                	je     c0003993 <load_xdir+0x12f>
c000398e:	bb 02 00 00 00       	mov    ebx,0x2
c0003993:	83 c4 1c             	add    esp,0x1c
c0003996:	89 d8                	mov    eax,ebx
c0003998:	5b                   	pop    ebx
c0003999:	5e                   	pop    esi
c000399a:	5f                   	pop    edi
c000399b:	5d                   	pop    ebp
c000399c:	c3                   	ret    

c000399d <load_obj_xdir>:
c000399d:	53                   	push   ebx
c000399e:	89 c3                	mov    ebx,eax
c00039a0:	83 ec 08             	sub    esp,0x8
c00039a3:	8b 02                	mov    eax,DWORD PTR [edx]
c00039a5:	89 03                	mov    DWORD PTR [ebx],eax
c00039a7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00039aa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039ad:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039b0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039b3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039b6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039bd:	30 c0                	xor    al,al
c00039bf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039c6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039c9:	89 d8                	mov    eax,ebx
c00039cb:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039ce:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039d1:	e8 04 f8 ff ff       	call   c00031da <dir_sdi>
c00039d6:	85 c0                	test   eax,eax
c00039d8:	75 0b                	jne    c00039e5 <load_obj_xdir+0x48>
c00039da:	89 d8                	mov    eax,ebx
c00039dc:	83 c4 08             	add    esp,0x8
c00039df:	5b                   	pop    ebx
c00039e0:	e9 7f fe ff ff       	jmp    c0003864 <load_xdir>
c00039e5:	83 c4 08             	add    esp,0x8
c00039e8:	5b                   	pop    ebx
c00039e9:	c3                   	ret    

c00039ea <dir_read>:
c00039ea:	55                   	push   ebp
c00039eb:	bd 04 00 00 00       	mov    ebp,0x4
c00039f0:	57                   	push   edi
c00039f1:	56                   	push   esi
c00039f2:	be ff ff ff ff       	mov    esi,0xffffffff
c00039f7:	53                   	push   ebx
c00039f8:	89 c3                	mov    ebx,eax
c00039fa:	83 ec 1c             	sub    esp,0x1c
c00039fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a01:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a03:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a08:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a0b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a0e:	89 c8                	mov    eax,ecx
c0003a10:	09 d0                	or     eax,edx
c0003a12:	0f 84 25 01 00 00    	je     c0003b3d <dir_read+0x153>
c0003a18:	89 f8                	mov    eax,edi
c0003a1a:	e8 3d ea ff ff       	call   c000245c <move_window>
c0003a1f:	89 c5                	mov    ebp,eax
c0003a21:	85 c0                	test   eax,eax
c0003a23:	0f 85 23 01 00 00    	jne    c0003b4c <dir_read+0x162>
c0003a29:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a2c:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a2e:	84 c9                	test   cl,cl
c0003a30:	0f 84 11 01 00 00    	je     c0003b47 <dir_read+0x15d>
c0003a36:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a39:	75 48                	jne    c0003a83 <dir_read+0x99>
c0003a3b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a40:	74 10                	je     c0003a52 <dir_read+0x68>
c0003a42:	80 f9 83             	cmp    cl,0x83
c0003a45:	0f 85 dd 00 00 00    	jne    c0003b28 <dir_read+0x13e>
c0003a4b:	31 ed                	xor    ebp,ebp
c0003a4d:	e9 08 01 00 00       	jmp    c0003b5a <dir_read+0x170>
c0003a52:	80 f9 85             	cmp    cl,0x85
c0003a55:	0f 85 cd 00 00 00    	jne    c0003b28 <dir_read+0x13e>
c0003a5b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a5e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a61:	89 d8                	mov    eax,ebx
c0003a63:	e8 fc fd ff ff       	call   c0003864 <load_xdir>
c0003a68:	89 c5                	mov    ebp,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	0f 85 da 00 00 00    	jne    c0003b4c <dir_read+0x162>
c0003a72:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a75:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a78:	83 e0 3f             	and    eax,0x3f
c0003a7b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a7e:	e9 d7 00 00 00       	jmp    c0003b5a <dir_read+0x170>
c0003a83:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a86:	83 e0 3f             	and    eax,0x3f
c0003a89:	80 f9 2e             	cmp    cl,0x2e
c0003a8c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a90:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a93:	0f 84 8a 00 00 00    	je     c0003b23 <dir_read+0x139>
c0003a99:	80 f9 e5             	cmp    cl,0xe5
c0003a9c:	0f 84 81 00 00 00    	je     c0003b23 <dir_read+0x139>
c0003aa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003aa6:	83 e0 1f             	and    eax,0x1f
c0003aa9:	83 f8 08             	cmp    eax,0x8
c0003aac:	0f 94 c0             	sete   al
c0003aaf:	0f b6 c0             	movzx  eax,al
c0003ab2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003ab6:	75 6b                	jne    c0003b23 <dir_read+0x139>
c0003ab8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003abd:	75 44                	jne    c0003b03 <dir_read+0x119>
c0003abf:	f6 c1 40             	test   cl,0x40
c0003ac2:	74 12                	je     c0003ad6 <dir_read+0xec>
c0003ac4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ac7:	83 e1 bf             	and    ecx,0xffffffbf
c0003aca:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ace:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ad1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ad4:	eb 06                	jmp    c0003adc <dir_read+0xf2>
c0003ad6:	89 f0                	mov    eax,esi
c0003ad8:	38 c8                	cmp    al,cl
c0003ada:	75 47                	jne    c0003b23 <dir_read+0x139>
c0003adc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ae0:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ae5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ae8:	75 3e                	jne    c0003b28 <dir_read+0x13e>
c0003aea:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003aee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003af1:	e8 8a e4 ff ff       	call   c0001f80 <pick_lfn>
c0003af6:	85 c0                	test   eax,eax
c0003af8:	74 2e                	je     c0003b28 <dir_read+0x13e>
c0003afa:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003afe:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003b01:	eb 25                	jmp    c0003b28 <dir_read+0x13e>
c0003b03:	89 f0                	mov    eax,esi
c0003b05:	84 c0                	test   al,al
c0003b07:	75 11                	jne    c0003b1a <dir_read+0x130>
c0003b09:	89 d0                	mov    eax,edx
c0003b0b:	e8 2a e6 ff ff       	call   c000213a <sum_sfn>
c0003b10:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b14:	0f 84 31 ff ff ff    	je     c0003a4b <dir_read+0x61>
c0003b1a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b21:	eb 37                	jmp    c0003b5a <dir_read+0x170>
c0003b23:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b28:	31 d2                	xor    edx,edx
c0003b2a:	89 d8                	mov    eax,ebx
c0003b2c:	e8 01 fc ff ff       	call   c0003732 <dir_next>
c0003b31:	89 c5                	mov    ebp,eax
c0003b33:	85 c0                	test   eax,eax
c0003b35:	0f 84 cd fe ff ff    	je     c0003a08 <dir_read+0x1e>
c0003b3b:	eb 0f                	jmp    c0003b4c <dir_read+0x162>
c0003b3d:	85 ed                	test   ebp,ebp
c0003b3f:	0f 84 06 ff ff ff    	je     c0003a4b <dir_read+0x61>
c0003b45:	eb 05                	jmp    c0003b4c <dir_read+0x162>
c0003b47:	bd 04 00 00 00       	mov    ebp,0x4
c0003b4c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b53:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b5a:	83 c4 1c             	add    esp,0x1c
c0003b5d:	89 e8                	mov    eax,ebp
c0003b5f:	5b                   	pop    ebx
c0003b60:	5e                   	pop    esi
c0003b61:	5f                   	pop    edi
c0003b62:	5d                   	pop    ebp
c0003b63:	c3                   	ret    

c0003b64 <dir_alloc>:
c0003b64:	55                   	push   ebp
c0003b65:	89 d5                	mov    ebp,edx
c0003b67:	57                   	push   edi
c0003b68:	31 d2                	xor    edx,edx
c0003b6a:	56                   	push   esi
c0003b6b:	53                   	push   ebx
c0003b6c:	89 c3                	mov    ebx,eax
c0003b6e:	83 ec 0c             	sub    esp,0xc
c0003b71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b73:	e8 62 f6 ff ff       	call   c00031da <dir_sdi>
c0003b78:	85 c0                	test   eax,eax
c0003b7a:	75 4e                	jne    c0003bca <dir_alloc+0x66>
c0003b7c:	31 f6                	xor    esi,esi
c0003b7e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b81:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b84:	89 f8                	mov    eax,edi
c0003b86:	e8 d1 e8 ff ff       	call   c000245c <move_window>
c0003b8b:	85 c0                	test   eax,eax
c0003b8d:	75 3b                	jne    c0003bca <dir_alloc+0x66>
c0003b8f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b92:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b95:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b97:	75 07                	jne    c0003ba0 <dir_alloc+0x3c>
c0003b99:	f7 d2                	not    edx
c0003b9b:	c0 ea 07             	shr    dl,0x7
c0003b9e:	eb 0d                	jmp    c0003bad <dir_alloc+0x49>
c0003ba0:	84 d2                	test   dl,dl
c0003ba2:	0f 94 c1             	sete   cl
c0003ba5:	80 fa e5             	cmp    dl,0xe5
c0003ba8:	0f 94 c2             	sete   dl
c0003bab:	09 ca                	or     edx,ecx
c0003bad:	84 d2                	test   dl,dl
c0003baf:	74 07                	je     c0003bb8 <dir_alloc+0x54>
c0003bb1:	46                   	inc    esi
c0003bb2:	39 ee                	cmp    esi,ebp
c0003bb4:	75 04                	jne    c0003bba <dir_alloc+0x56>
c0003bb6:	eb 1c                	jmp    c0003bd4 <dir_alloc+0x70>
c0003bb8:	31 f6                	xor    esi,esi
c0003bba:	ba 01 00 00 00       	mov    edx,0x1
c0003bbf:	89 d8                	mov    eax,ebx
c0003bc1:	e8 6c fb ff ff       	call   c0003732 <dir_next>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 b4                	je     c0003b7e <dir_alloc+0x1a>
c0003bca:	83 f8 04             	cmp    eax,0x4
c0003bcd:	75 05                	jne    c0003bd4 <dir_alloc+0x70>
c0003bcf:	b8 07 00 00 00       	mov    eax,0x7
c0003bd4:	83 c4 0c             	add    esp,0xc
c0003bd7:	5b                   	pop    ebx
c0003bd8:	5e                   	pop    esi
c0003bd9:	5f                   	pop    edi
c0003bda:	5d                   	pop    ebp
c0003bdb:	c3                   	ret    

c0003bdc <store_xdir>:
c0003bdc:	55                   	push   ebp
c0003bdd:	57                   	push   edi
c0003bde:	89 c7                	mov    edi,eax
c0003be0:	56                   	push   esi
c0003be1:	53                   	push   ebx
c0003be2:	83 ec 0c             	sub    esp,0xc
c0003be5:	8b 00                	mov    eax,DWORD PTR [eax]
c0003be7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bea:	89 e8                	mov    eax,ebp
c0003bec:	e8 5b e5 ff ff       	call   c000214c <xdir_sum>
c0003bf1:	0f b7 d0             	movzx  edx,ax
c0003bf4:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bf7:	e8 f4 e0 ff ff       	call   c0001cf0 <st_word>
c0003bfc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003c00:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003c03:	89 f8                	mov    eax,edi
c0003c05:	e8 d0 f5 ff ff       	call   c00031da <dir_sdi>
c0003c0a:	89 c6                	mov    esi,eax
c0003c0c:	85 f6                	test   esi,esi
c0003c0e:	75 3d                	jne    c0003c4d <store_xdir+0x71>
c0003c10:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c13:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c16:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c18:	e8 3f e8 ff ff       	call   c000245c <move_window>
c0003c1d:	89 c6                	mov    esi,eax
c0003c1f:	85 c0                	test   eax,eax
c0003c21:	75 2a                	jne    c0003c4d <store_xdir+0x71>
c0003c23:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c26:	b9 20 00 00 00       	mov    ecx,0x20
c0003c2b:	89 ea                	mov    edx,ebp
c0003c2d:	e8 cb e0 ff ff       	call   c0001cfd <mem_cpy>
c0003c32:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c34:	85 db                	test   ebx,ebx
c0003c36:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c3a:	74 11                	je     c0003c4d <store_xdir+0x71>
c0003c3c:	31 d2                	xor    edx,edx
c0003c3e:	89 f8                	mov    eax,edi
c0003c40:	83 c5 20             	add    ebp,0x20
c0003c43:	e8 ea fa ff ff       	call   c0003732 <dir_next>
c0003c48:	4b                   	dec    ebx
c0003c49:	89 c6                	mov    esi,eax
c0003c4b:	eb bf                	jmp    c0003c0c <store_xdir+0x30>
c0003c4d:	89 f0                	mov    eax,esi
c0003c4f:	83 fe 02             	cmp    esi,0x2
c0003c52:	76 05                	jbe    c0003c59 <store_xdir+0x7d>
c0003c54:	b8 02 00 00 00       	mov    eax,0x2
c0003c59:	83 c4 0c             	add    esp,0xc
c0003c5c:	5b                   	pop    ebx
c0003c5d:	5e                   	pop    esi
c0003c5e:	5f                   	pop    edi
c0003c5f:	5d                   	pop    ebp
c0003c60:	c3                   	ret    

c0003c61 <dir_remove>:
c0003c61:	57                   	push   edi
c0003c62:	56                   	push   esi
c0003c63:	53                   	push   ebx
c0003c64:	89 c3                	mov    ebx,eax
c0003c66:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c69:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c6b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c6e:	83 fa ff             	cmp    edx,0xffffffff
c0003c71:	74 09                	je     c0003c7c <dir_remove+0x1b>
c0003c73:	e8 62 f5 ff ff       	call   c00031da <dir_sdi>
c0003c78:	85 c0                	test   eax,eax
c0003c7a:	75 41                	jne    c0003cbd <dir_remove+0x5c>
c0003c7c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c7f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c82:	89 f0                	mov    eax,esi
c0003c84:	e8 d3 e7 ff ff       	call   c000245c <move_window>
c0003c89:	85 c0                	test   eax,eax
c0003c8b:	75 26                	jne    c0003cb3 <dir_remove+0x52>
c0003c8d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c90:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c93:	75 05                	jne    c0003c9a <dir_remove+0x39>
c0003c95:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c98:	eb 03                	jmp    c0003c9d <dir_remove+0x3c>
c0003c9a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c9d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003ca1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003ca4:	73 17                	jae    c0003cbd <dir_remove+0x5c>
c0003ca6:	31 d2                	xor    edx,edx
c0003ca8:	89 d8                	mov    eax,ebx
c0003caa:	e8 83 fa ff ff       	call   c0003732 <dir_next>
c0003caf:	85 c0                	test   eax,eax
c0003cb1:	74 c9                	je     c0003c7c <dir_remove+0x1b>
c0003cb3:	83 f8 04             	cmp    eax,0x4
c0003cb6:	75 05                	jne    c0003cbd <dir_remove+0x5c>
c0003cb8:	b8 02 00 00 00       	mov    eax,0x2
c0003cbd:	5b                   	pop    ebx
c0003cbe:	5e                   	pop    esi
c0003cbf:	5f                   	pop    edi
c0003cc0:	c3                   	ret    

c0003cc1 <create_name>:
c0003cc1:	55                   	push   ebp
c0003cc2:	89 d5                	mov    ebp,edx
c0003cc4:	57                   	push   edi
c0003cc5:	89 c7                	mov    edi,eax
c0003cc7:	56                   	push   esi
c0003cc8:	31 f6                	xor    esi,esi
c0003cca:	53                   	push   ebx
c0003ccb:	83 ec 3c             	sub    esp,0x3c
c0003cce:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cd4:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cd6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cd9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cdd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ce1:	e8 72 e0 ff ff       	call   c0001d58 <tchar2uni>
c0003ce6:	89 c3                	mov    ebx,eax
c0003ce8:	83 f8 ff             	cmp    eax,0xffffffff
c0003ceb:	75 0a                	jne    c0003cf7 <create_name+0x36>
c0003ced:	b8 06 00 00 00       	mov    eax,0x6
c0003cf2:	e9 9e 02 00 00       	jmp    c0003f95 <create_name+0x2d4>
c0003cf7:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cfc:	76 0c                	jbe    c0003d0a <create_name+0x49>
c0003cfe:	c1 e8 10             	shr    eax,0x10
c0003d01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003d05:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003d09:	46                   	inc    esi
c0003d0a:	66 83 fb 1f          	cmp    bx,0x1f
c0003d0e:	76 4f                	jbe    c0003d5f <create_name+0x9e>
c0003d10:	66 83 fb 5c          	cmp    bx,0x5c
c0003d14:	74 35                	je     c0003d4b <create_name+0x8a>
c0003d16:	66 83 fb 2f          	cmp    bx,0x2f
c0003d1a:	74 2f                	je     c0003d4b <create_name+0x8a>
c0003d1c:	66 83 fb 7f          	cmp    bx,0x7f
c0003d20:	77 11                	ja     c0003d33 <create_name+0x72>
c0003d22:	0f b7 d3             	movzx  edx,bx
c0003d25:	b8 b2 f7 01 c0       	mov    eax,0xc001f7b2
c0003d2a:	e8 11 e0 ff ff       	call   c0001d40 <chk_chr>
c0003d2f:	85 c0                	test   eax,eax
c0003d31:	75 ba                	jne    c0003ced <create_name+0x2c>
c0003d33:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d39:	77 b2                	ja     c0003ced <create_name+0x2c>
c0003d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d3f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d43:	46                   	inc    esi
c0003d44:	eb 97                	jmp    c0003cdd <create_name+0x1c>
c0003d46:	40                   	inc    eax
c0003d47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d4f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d51:	80 fa 2f             	cmp    dl,0x2f
c0003d54:	74 f0                	je     c0003d46 <create_name+0x85>
c0003d56:	80 fa 5c             	cmp    dl,0x5c
c0003d59:	74 eb                	je     c0003d46 <create_name+0x85>
c0003d5b:	31 db                	xor    ebx,ebx
c0003d5d:	eb 02                	jmp    c0003d61 <create_name+0xa0>
c0003d5f:	b3 04                	mov    bl,0x4
c0003d61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d65:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d68:	85 f6                	test   esi,esi
c0003d6a:	74 18                	je     c0003d84 <create_name+0xc3>
c0003d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d70:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d75:	66 83 f8 20          	cmp    ax,0x20
c0003d79:	74 06                	je     c0003d81 <create_name+0xc0>
c0003d7b:	66 83 f8 2e          	cmp    ax,0x2e
c0003d7f:	75 03                	jne    c0003d84 <create_name+0xc3>
c0003d81:	4e                   	dec    esi
c0003d82:	eb e4                	jmp    c0003d68 <create_name+0xa7>
c0003d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d88:	31 ed                	xor    ebp,ebp
c0003d8a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d90:	85 f6                	test   esi,esi
c0003d92:	0f 84 55 ff ff ff    	je     c0003ced <create_name+0x2c>
c0003d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d9c:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d9f:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003da3:	66 83 f8 20          	cmp    ax,0x20
c0003da7:	75 04                	jne    c0003dad <create_name+0xec>
c0003da9:	89 d5                	mov    ebp,edx
c0003dab:	eb eb                	jmp    c0003d98 <create_name+0xd7>
c0003dad:	85 ed                	test   ebp,ebp
c0003daf:	75 06                	jne    c0003db7 <create_name+0xf6>
c0003db1:	66 83 f8 2e          	cmp    ax,0x2e
c0003db5:	75 08                	jne    c0003dbf <create_name+0xfe>
c0003db7:	83 cb 03             	or     ebx,0x3
c0003dba:	eb 03                	jmp    c0003dbf <create_name+0xfe>
c0003dbc:	4e                   	dec    esi
c0003dbd:	74 0c                	je     c0003dcb <create_name+0x10a>
c0003dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dc3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dc9:	75 f1                	jne    c0003dbc <create_name+0xfb>
c0003dcb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dd0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dd3:	ba 20 00 00 00       	mov    edx,0x20
c0003dd8:	e8 35 df ff ff       	call   c0001d12 <mem_set>
c0003ddd:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003de5:	31 c9                	xor    ecx,ecx
c0003de7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dec:	8d 45 01             	lea    eax,[ebp+0x1]
c0003def:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003df7:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dfb:	66 85 ed             	test   bp,bp
c0003dfe:	0f 84 30 01 00 00    	je     c0003f34 <create_name+0x273>
c0003e04:	66 83 fd 20          	cmp    bp,0x20
c0003e08:	74 10                	je     c0003e1a <create_name+0x159>
c0003e0a:	66 83 fd 2e          	cmp    bp,0x2e
c0003e0e:	75 13                	jne    c0003e23 <create_name+0x162>
c0003e10:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e14:	0f 84 6b 01 00 00    	je     c0003f85 <create_name+0x2c4>
c0003e1a:	83 cb 03             	or     ebx,0x3
c0003e1d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e21:	eb c9                	jmp    c0003dec <create_name+0x12b>
c0003e23:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e27:	73 0b                	jae    c0003e34 <create_name+0x173>
c0003e29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e2d:	75 47                	jne    c0003e76 <create_name+0x1b5>
c0003e2f:	e9 51 01 00 00       	jmp    c0003f85 <create_name+0x2c4>
c0003e34:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e39:	75 10                	jne    c0003e4b <create_name+0x18a>
c0003e3b:	83 cb 03             	or     ebx,0x3
c0003e3e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e46:	e9 e9 00 00 00       	jmp    c0003f34 <create_name+0x273>
c0003e4b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e4f:	74 0d                	je     c0003e5e <create_name+0x19d>
c0003e51:	83 cb 03             	or     ebx,0x3
c0003e54:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e58:	0f 87 d6 00 00 00    	ja     c0003f34 <create_name+0x273>
c0003e5e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e63:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e67:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e6f:	b9 08 00 00 00       	mov    ecx,0x8
c0003e74:	eb a7                	jmp    c0003e1d <create_name+0x15c>
c0003e76:	66 83 fd 7f          	cmp    bp,0x7f
c0003e7a:	76 68                	jbe    c0003ee4 <create_name+0x223>
c0003e7c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e80:	88 da                	mov    dl,bl
c0003e82:	83 ca 02             	or     edx,0x2
c0003e85:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e89:	50                   	push   eax
c0003e8a:	50                   	push   eax
c0003e8b:	68 b5 01 00 00       	push   0x1b5
c0003e90:	55                   	push   ebp
c0003e91:	e8 48 46 00 00       	call   c00084de <ff_uni2oem>
c0003e96:	83 c4 10             	add    esp,0x10
c0003e99:	89 c5                	mov    ebp,eax
c0003e9b:	a8 80                	test   al,0x80
c0003e9d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ea1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ea5:	74 0c                	je     c0003eb3 <create_name+0x1f2>
c0003ea7:	83 e5 7f             	and    ebp,0x7f
c0003eaa:	0f b6 ad 00 f7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0900]
c0003eb1:	eb 2a                	jmp    c0003edd <create_name+0x21c>
c0003eb3:	66 3d ff 00          	cmp    ax,0xff
c0003eb7:	76 24                	jbe    c0003edd <create_name+0x21c>
c0003eb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ebd:	48                   	dec    eax
c0003ebe:	39 c8                	cmp    eax,ecx
c0003ec0:	77 0c                	ja     c0003ece <create_name+0x20d>
c0003ec2:	83 cb 03             	or     ebx,0x3
c0003ec5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ec9:	e9 4f ff ff ff       	jmp    c0003e1d <create_name+0x15c>
c0003ece:	89 e8                	mov    eax,ebp
c0003ed0:	88 d3                	mov    bl,dl
c0003ed2:	66 c1 e8 08          	shr    ax,0x8
c0003ed6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003eda:	41                   	inc    ecx
c0003edb:	eb 4b                	jmp    c0003f28 <create_name+0x267>
c0003edd:	88 d3                	mov    bl,dl
c0003edf:	66 85 ed             	test   bp,bp
c0003ee2:	74 19                	je     c0003efd <create_name+0x23c>
c0003ee4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ee8:	0f b7 d5             	movzx  edx,bp
c0003eeb:	b8 bb f7 01 c0       	mov    eax,0xc001f7bb
c0003ef0:	e8 4b de ff ff       	call   c0001d40 <chk_chr>
c0003ef5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ef9:	85 c0                	test   eax,eax
c0003efb:	74 0a                	je     c0003f07 <create_name+0x246>
c0003efd:	83 cb 03             	or     ebx,0x3
c0003f00:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003f05:	eb 21                	jmp    c0003f28 <create_name+0x267>
c0003f07:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003f0a:	66 83 f8 19          	cmp    ax,0x19
c0003f0e:	77 07                	ja     c0003f17 <create_name+0x256>
c0003f10:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f15:	eb 11                	jmp    c0003f28 <create_name+0x267>
c0003f17:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f1a:	66 83 f8 19          	cmp    ax,0x19
c0003f1e:	77 08                	ja     c0003f28 <create_name+0x267>
c0003f20:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f25:	83 ed 20             	sub    ebp,0x20
c0003f28:	89 e8                	mov    eax,ebp
c0003f2a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f2e:	41                   	inc    ecx
c0003f2f:	e9 e9 fe ff ff       	jmp    c0003e1d <create_name+0x15c>
c0003f34:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f38:	75 04                	jne    c0003f3e <create_name+0x27d>
c0003f3a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f3e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f43:	75 05                	jne    c0003f4a <create_name+0x289>
c0003f45:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f4a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f4e:	83 e0 0c             	and    eax,0xc
c0003f51:	3c 0c                	cmp    al,0xc
c0003f53:	74 0b                	je     c0003f60 <create_name+0x29f>
c0003f55:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f59:	83 e0 03             	and    eax,0x3
c0003f5c:	3c 03                	cmp    al,0x3
c0003f5e:	75 05                	jne    c0003f65 <create_name+0x2a4>
c0003f60:	83 cb 02             	or     ebx,0x2
c0003f63:	eb 19                	jmp    c0003f7e <create_name+0x2bd>
c0003f65:	f6 c3 02             	test   bl,0x2
c0003f68:	75 14                	jne    c0003f7e <create_name+0x2bd>
c0003f6a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f6f:	74 03                	je     c0003f74 <create_name+0x2b3>
c0003f71:	83 cb 10             	or     ebx,0x10
c0003f74:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f79:	74 03                	je     c0003f7e <create_name+0x2bd>
c0003f7b:	83 cb 08             	or     ebx,0x8
c0003f7e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f81:	31 c0                	xor    eax,eax
c0003f83:	eb 10                	jmp    c0003f95 <create_name+0x2d4>
c0003f85:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f8a:	0f 85 ce fe ff ff    	jne    c0003e5e <create_name+0x19d>
c0003f90:	e9 a6 fe ff ff       	jmp    c0003e3b <create_name+0x17a>
c0003f95:	83 c4 3c             	add    esp,0x3c
c0003f98:	5b                   	pop    ebx
c0003f99:	5e                   	pop    esi
c0003f9a:	5f                   	pop    edi
c0003f9b:	5d                   	pop    ebp
c0003f9c:	c3                   	ret    

c0003f9d <xname_sum>:
c0003f9d:	56                   	push   esi
c0003f9e:	53                   	push   ebx
c0003f9f:	89 c6                	mov    esi,eax
c0003fa1:	51                   	push   ecx
c0003fa2:	31 db                	xor    ebx,ebx
c0003fa4:	83 c6 02             	add    esi,0x2
c0003fa7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003fab:	66 85 c0             	test   ax,ax
c0003fae:	74 1f                	je     c0003fcf <xname_sum+0x32>
c0003fb0:	83 ec 0c             	sub    esp,0xc
c0003fb3:	66 d1 cb             	ror    bx,1
c0003fb6:	50                   	push   eax
c0003fb7:	e8 1e 46 00 00       	call   c00085da <ff_wtoupper>
c0003fbc:	83 c4 10             	add    esp,0x10
c0003fbf:	0f b6 d0             	movzx  edx,al
c0003fc2:	66 c1 e8 08          	shr    ax,0x8
c0003fc6:	01 d3                	add    ebx,edx
c0003fc8:	66 d1 cb             	ror    bx,1
c0003fcb:	01 c3                	add    ebx,eax
c0003fcd:	eb d5                	jmp    c0003fa4 <xname_sum+0x7>
c0003fcf:	89 d8                	mov    eax,ebx
c0003fd1:	5a                   	pop    edx
c0003fd2:	5b                   	pop    ebx
c0003fd3:	5e                   	pop    esi
c0003fd4:	c3                   	ret    

c0003fd5 <create_xdir>:
c0003fd5:	55                   	push   ebp
c0003fd6:	b9 40 00 00 00       	mov    ecx,0x40
c0003fdb:	57                   	push   edi
c0003fdc:	bd 01 00 00 00       	mov    ebp,0x1
c0003fe1:	56                   	push   esi
c0003fe2:	31 ff                	xor    edi,edi
c0003fe4:	53                   	push   ebx
c0003fe5:	be 40 00 00 00       	mov    esi,0x40
c0003fea:	89 c3                	mov    ebx,eax
c0003fec:	83 ec 1c             	sub    esp,0x1c
c0003fef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ff3:	31 d2                	xor    edx,edx
c0003ff5:	e8 18 dd ff ff       	call   c0001d12 <mem_set>
c0003ffa:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ffd:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0004001:	31 c9                	xor    ecx,ecx
c0004003:	8d 46 01             	lea    eax,[esi+0x1]
c0004006:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c000400a:	83 c6 02             	add    esi,0x2
c000400d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0004011:	66 85 ed             	test   bp,bp
c0004014:	74 12                	je     c0004028 <create_xdir+0x53>
c0004016:	0f b6 c1             	movzx  eax,cl
c0004019:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000401d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004021:	66 83 fd 01          	cmp    bp,0x1
c0004025:	80 d9 ff             	sbb    cl,0xff
c0004028:	8d 04 33             	lea    eax,[ebx+esi*1]
c000402b:	0f b7 d5             	movzx  edx,bp
c000402e:	83 c6 02             	add    esi,0x2
c0004031:	e8 ba dc ff ff       	call   c0001cf0 <st_word>
c0004036:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000403c:	75 d3                	jne    c0004011 <create_xdir+0x3c>
c000403e:	8d 47 01             	lea    eax,[edi+0x1]
c0004041:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004045:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004049:	0f b6 c1             	movzx  eax,cl
c000404c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004051:	74 07                	je     c000405a <create_xdir+0x85>
c0004053:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004058:	eb a9                	jmp    c0004003 <create_xdir+0x2e>
c000405a:	8d 47 02             	lea    eax,[edi+0x2]
c000405d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004060:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004063:	89 d0                	mov    eax,edx
c0004065:	e8 33 ff ff ff       	call   c0003f9d <xname_sum>
c000406a:	83 c4 1c             	add    esp,0x1c
c000406d:	0f b7 d0             	movzx  edx,ax
c0004070:	8d 43 24             	lea    eax,[ebx+0x24]
c0004073:	5b                   	pop    ebx
c0004074:	5e                   	pop    esi
c0004075:	5f                   	pop    edi
c0004076:	5d                   	pop    ebp
c0004077:	e9 74 dc ff ff       	jmp    c0001cf0 <st_word>

c000407c <cmp_lfn>:
c000407c:	55                   	push   ebp
c000407d:	57                   	push   edi
c000407e:	89 d7                	mov    edi,edx
c0004080:	56                   	push   esi
c0004081:	53                   	push   ebx
c0004082:	83 ec 1c             	sub    esp,0x1c
c0004085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004089:	8d 42 1a             	lea    eax,[edx+0x1a]
c000408c:	e8 ed db ff ff       	call   c0001c7e <ld_word>
c0004091:	66 85 c0             	test   ax,ax
c0004094:	74 07                	je     c000409d <cmp_lfn+0x21>
c0004096:	31 c0                	xor    eax,eax
c0004098:	e9 9a 00 00 00       	jmp    c0004137 <cmp_lfn+0xbb>
c000409d:	8a 1f                	mov    bl,BYTE PTR [edi]
c000409f:	bd 01 00 00 00       	mov    ebp,0x1
c00040a4:	83 e3 3f             	and    ebx,0x3f
c00040a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00040af:	4b                   	dec    ebx
c00040b0:	6b db 0d             	imul   ebx,ebx,0xd
c00040b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040b7:	0f b6 80 80 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0880]
c00040be:	01 f8                	add    eax,edi
c00040c0:	e8 b9 db ff ff       	call   c0001c7e <ld_word>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	89 c6                	mov    esi,eax
c00040ca:	74 3c                	je     c0004108 <cmp_lfn+0x8c>
c00040cc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040d2:	77 c2                	ja     c0004096 <cmp_lfn+0x1a>
c00040d4:	83 ec 0c             	sub    esp,0xc
c00040d7:	0f b7 c0             	movzx  eax,ax
c00040da:	50                   	push   eax
c00040db:	e8 fa 44 00 00       	call   c00085da <ff_wtoupper>
c00040e0:	89 c5                	mov    ebp,eax
c00040e2:	8d 43 01             	lea    eax,[ebx+0x1]
c00040e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040ed:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00040f4:	e8 e1 44 00 00       	call   c00085da <ff_wtoupper>
c00040f9:	83 c4 10             	add    esp,0x10
c00040fc:	39 c5                	cmp    ebp,eax
c00040fe:	75 96                	jne    c0004096 <cmp_lfn+0x1a>
c0004100:	89 f5                	mov    ebp,esi
c0004102:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0004106:	eb 04                	jmp    c000410c <cmp_lfn+0x90>
c0004108:	66 46                	inc    si
c000410a:	75 8a                	jne    c0004096 <cmp_lfn+0x1a>
c000410c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0004110:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004115:	75 9c                	jne    c00040b3 <cmp_lfn+0x37>
c0004117:	f6 07 40             	test   BYTE PTR [edi],0x40
c000411a:	74 16                	je     c0004132 <cmp_lfn+0xb6>
c000411c:	66 85 ed             	test   bp,bp
c000411f:	74 11                	je     c0004132 <cmp_lfn+0xb6>
c0004121:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004125:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000412a:	0f 94 c0             	sete   al
c000412d:	0f b6 c0             	movzx  eax,al
c0004130:	eb 05                	jmp    c0004137 <cmp_lfn+0xbb>
c0004132:	b8 01 00 00 00       	mov    eax,0x1
c0004137:	83 c4 1c             	add    esp,0x1c
c000413a:	5b                   	pop    ebx
c000413b:	5e                   	pop    esi
c000413c:	5f                   	pop    edi
c000413d:	5d                   	pop    ebp
c000413e:	c3                   	ret    

c000413f <dir_find>:
c000413f:	55                   	push   ebp
c0004140:	31 d2                	xor    edx,edx
c0004142:	57                   	push   edi
c0004143:	56                   	push   esi
c0004144:	53                   	push   ebx
c0004145:	89 c3                	mov    ebx,eax
c0004147:	83 ec 1c             	sub    esp,0x1c
c000414a:	8b 30                	mov    esi,DWORD PTR [eax]
c000414c:	e8 89 f0 ff ff       	call   c00031da <dir_sdi>
c0004151:	89 04 24             	mov    DWORD PTR [esp],eax
c0004154:	85 c0                	test   eax,eax
c0004156:	0f 85 9e 01 00 00    	jne    c00042fa <dir_find+0x1bb>
c000415c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000415f:	0f 85 8d 00 00 00    	jne    c00041f2 <dir_find+0xb3>
c0004165:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004168:	e8 30 fe ff ff       	call   c0003f9d <xname_sum>
c000416d:	89 c7                	mov    edi,eax
c000416f:	31 d2                	xor    edx,edx
c0004171:	89 d8                	mov    eax,ebx
c0004173:	e8 72 f8 ff ff       	call   c00039ea <dir_read>
c0004178:	85 c0                	test   eax,eax
c000417a:	0f 85 5e 01 00 00    	jne    c00042de <dir_find+0x19f>
c0004180:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004183:	8d 41 24             	lea    eax,[ecx+0x24]
c0004186:	e8 f3 da ff ff       	call   c0001c7e <ld_word>
c000418b:	66 39 f8             	cmp    ax,di
c000418e:	75 df                	jne    c000416f <dir_find+0x30>
c0004190:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004193:	31 ed                	xor    ebp,ebp
c0004195:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004199:	ba 40 00 00 00       	mov    edx,0x40
c000419e:	89 e9                	mov    ecx,ebp
c00041a0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c00041a4:	0f 84 42 01 00 00    	je     c00042ec <dir_find+0x1ad>
c00041aa:	f6 c2 1f             	test   dl,0x1f
c00041ad:	75 03                	jne    c00041b2 <dir_find+0x73>
c00041af:	83 c2 02             	add    edx,0x2
c00041b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041b6:	89 d0                	mov    eax,edx
c00041b8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041bb:	e8 be da ff ff       	call   c0001c7e <ld_word>
c00041c0:	83 ec 0c             	sub    esp,0xc
c00041c3:	0f b7 c0             	movzx  eax,ax
c00041c6:	50                   	push   eax
c00041c7:	e8 0e 44 00 00       	call   c00085da <ff_wtoupper>
c00041cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041d0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041d3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00041da:	e8 fb 43 00 00       	call   c00085da <ff_wtoupper>
c00041df:	83 c4 10             	add    esp,0x10
c00041e2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041e6:	75 87                	jne    c000416f <dir_find+0x30>
c00041e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041ec:	45                   	inc    ebp
c00041ed:	83 c2 02             	add    edx,0x2
c00041f0:	eb ac                	jmp    c000419e <dir_find+0x5f>
c00041f2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041f9:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041fe:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 f0                	mov    eax,esi
c000420b:	e8 4c e2 ff ff       	call   c000245c <move_window>
c0004210:	85 c0                	test   eax,eax
c0004212:	0f 85 c6 00 00 00    	jne    c00042de <dir_find+0x19f>
c0004218:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000421b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000421e:	84 c9                	test   cl,cl
c0004220:	0f 84 bd 00 00 00    	je     c00042e3 <dir_find+0x1a4>
c0004226:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004229:	88 d0                	mov    al,dl
c000422b:	83 e0 3f             	and    eax,0x3f
c000422e:	80 f9 e5             	cmp    cl,0xe5
c0004231:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004234:	0f 84 87 00 00 00    	je     c00042c1 <dir_find+0x182>
c000423a:	80 e2 08             	and    dl,0x8
c000423d:	74 06                	je     c0004245 <dir_find+0x106>
c000423f:	3c 0f                	cmp    al,0xf
c0004241:	75 7e                	jne    c00042c1 <dir_find+0x182>
c0004243:	eb 04                	jmp    c0004249 <dir_find+0x10a>
c0004245:	3c 0f                	cmp    al,0xf
c0004247:	75 4c                	jne    c0004295 <dir_find+0x156>
c0004249:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000424d:	75 7e                	jne    c00042cd <dir_find+0x18e>
c000424f:	f6 c1 40             	test   cl,0x40
c0004252:	74 12                	je     c0004266 <dir_find+0x127>
c0004254:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004257:	83 e1 bf             	and    ecx,0xffffffbf
c000425a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000425e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004261:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004264:	eb 06                	jmp    c000426c <dir_find+0x12d>
c0004266:	89 f8                	mov    eax,edi
c0004268:	38 c8                	cmp    al,cl
c000426a:	75 5c                	jne    c00042c8 <dir_find+0x189>
c000426c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004270:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004275:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004278:	75 53                	jne    c00042cd <dir_find+0x18e>
c000427a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000427e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004281:	89 ea                	mov    edx,ebp
c0004283:	e8 f4 fd ff ff       	call   c000407c <cmp_lfn>
c0004288:	85 c0                	test   eax,eax
c000428a:	74 41                	je     c00042cd <dir_find+0x18e>
c000428c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004290:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004293:	eb 38                	jmp    c00042cd <dir_find+0x18e>
c0004295:	89 f8                	mov    eax,edi
c0004297:	84 c0                	test   al,al
c0004299:	75 0d                	jne    c00042a8 <dir_find+0x169>
c000429b:	89 e8                	mov    eax,ebp
c000429d:	e8 98 de ff ff       	call   c000213a <sum_sfn>
c00042a2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c00042a6:	74 52                	je     c00042fa <dir_find+0x1bb>
c00042a8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00042ac:	75 13                	jne    c00042c1 <dir_find+0x182>
c00042ae:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00042b1:	b9 0b 00 00 00       	mov    ecx,0xb
c00042b6:	89 e8                	mov    eax,ebp
c00042b8:	e8 60 da ff ff       	call   c0001d1d <mem_cmp>
c00042bd:	85 c0                	test   eax,eax
c00042bf:	74 39                	je     c00042fa <dir_find+0x1bb>
c00042c1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042cd:	31 d2                	xor    edx,edx
c00042cf:	89 d8                	mov    eax,ebx
c00042d1:	e8 5c f4 ff ff       	call   c0003732 <dir_next>
c00042d6:	85 c0                	test   eax,eax
c00042d8:	0f 84 25 ff ff ff    	je     c0004203 <dir_find+0xc4>
c00042de:	89 04 24             	mov    DWORD PTR [esp],eax
c00042e1:	eb 17                	jmp    c00042fa <dir_find+0x1bb>
c00042e3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042ea:	eb 0e                	jmp    c00042fa <dir_find+0x1bb>
c00042ec:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042ef:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042f4:	0f 85 75 fe ff ff    	jne    c000416f <dir_find+0x30>
c00042fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042fd:	83 c4 1c             	add    esp,0x1c
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <dir_register>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	be 06 00 00 00       	mov    esi,0x6
c000430d:	53                   	push   ebx
c000430e:	83 ec 6c             	sub    esp,0x6c
c0004311:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004315:	0f 85 62 02 00 00    	jne    c000457d <dir_register+0x278>
c000431b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000431d:	31 ff                	xor    edi,edi
c000431f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004322:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004327:	74 03                	je     c000432c <dir_register+0x27>
c0004329:	47                   	inc    edi
c000432a:	eb f6                	jmp    c0004322 <dir_register+0x1d>
c000432c:	89 c3                	mov    ebx,eax
c000432e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004332:	0f 85 e1 00 00 00    	jne    c0004419 <dir_register+0x114>
c0004338:	83 c7 0e             	add    edi,0xe
c000433b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004340:	89 f8                	mov    eax,edi
c0004342:	31 d2                	xor    edx,edx
c0004344:	f7 f1                	div    ecx
c0004346:	8d 50 02             	lea    edx,[eax+0x2]
c0004349:	89 c7                	mov    edi,eax
c000434b:	89 d8                	mov    eax,ebx
c000434d:	e8 12 f8 ff ff       	call   c0003b64 <dir_alloc>
c0004352:	89 c6                	mov    esi,eax
c0004354:	85 c0                	test   eax,eax
c0004356:	0f 85 21 02 00 00    	jne    c000457d <dir_register+0x278>
c000435c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004362:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004365:	c1 e7 05             	shl    edi,0x5
c0004368:	29 f8                	sub    eax,edi
c000436a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000436d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004370:	a8 04                	test   al,0x4
c0004372:	0f 84 91 00 00 00    	je     c0004409 <dir_register+0x104>
c0004378:	83 e0 fb             	and    eax,0xfffffffb
c000437b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000437e:	89 d8                	mov    eax,ebx
c0004380:	e8 25 ec ff ff       	call   c0002faa <fill_first_frag>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 ee 01 00 00    	jne    c000457b <dir_register+0x276>
c000438d:	83 c9 ff             	or     ecx,0xffffffff
c0004390:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 db eb ff ff       	call   c0002f75 <fill_last_frag>
c000439a:	85 c0                	test   eax,eax
c000439c:	0f 85 d9 01 00 00    	jne    c000457b <dir_register+0x276>
c00043a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043a6:	74 61                	je     c0004409 <dir_register+0x104>
c00043a8:	89 da                	mov    edx,ebx
c00043aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043ae:	e8 ea f5 ff ff       	call   c000399d <load_obj_xdir>
c00043b3:	85 c0                	test   eax,eax
c00043b5:	0f 85 c0 01 00 00    	jne    c000457b <dir_register+0x276>
c00043bb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043bf:	31 c9                	xor    ecx,ecx
c00043c1:	c1 e2 09             	shl    edx,0x9
c00043c4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043c7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ca:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043cd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043d3:	83 c0 38             	add    eax,0x38
c00043d6:	e8 1c d9 ff ff       	call   c0001cf7 <st_qword>
c00043db:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043de:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043e1:	83 c0 28             	add    eax,0x28
c00043e4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043e7:	e8 0b d9 ff ff       	call   c0001cf7 <st_qword>
c00043ec:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043ef:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043f2:	83 c8 01             	or     eax,0x1
c00043f5:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043fc:	e8 db f7 ff ff       	call   c0003bdc <store_xdir>
c0004401:	85 c0                	test   eax,eax
c0004403:	0f 85 72 01 00 00    	jne    c000457b <dir_register+0x276>
c0004409:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000440c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000440f:	e8 c1 fb ff ff       	call   c0003fd5 <create_xdir>
c0004414:	e9 64 01 00 00       	jmp    c000457d <dir_register+0x278>
c0004419:	8d 40 3c             	lea    eax,[eax+0x3c]
c000441c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004421:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004425:	89 c2                	mov    edx,eax
c0004427:	8d 44 24 14          	lea    eax,[esp+0x14]
c000442b:	e8 cd d8 ff ff       	call   c0001cfd <mem_cpy>
c0004430:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004435:	74 58                	je     c000448f <dir_register+0x18a>
c0004437:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000443b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004443:	83 ec 0c             	sub    esp,0xc
c0004446:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004449:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000444d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004455:	e8 24 dc ff ff       	call   c000207e <gen_numname>
c000445a:	89 d8                	mov    eax,ebx
c000445c:	e8 de fc ff ff       	call   c000413f <dir_find>
c0004461:	83 c4 10             	add    esp,0x10
c0004464:	89 c6                	mov    esi,eax
c0004466:	85 c0                	test   eax,eax
c0004468:	75 15                	jne    c000447f <dir_register+0x17a>
c000446a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000446e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004473:	75 ce                	jne    c0004443 <dir_register+0x13e>
c0004475:	be 07 00 00 00       	mov    esi,0x7
c000447a:	e9 fe 00 00 00       	jmp    c000457d <dir_register+0x278>
c000447f:	83 f8 04             	cmp    eax,0x4
c0004482:	0f 85 f5 00 00 00    	jne    c000457d <dir_register+0x278>
c0004488:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000448c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000448f:	b9 01 00 00 00       	mov    ecx,0x1
c0004494:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004499:	74 0f                	je     c00044aa <dir_register+0x1a5>
c000449b:	b9 0d 00 00 00       	mov    ecx,0xd
c00044a0:	8d 47 0c             	lea    eax,[edi+0xc]
c00044a3:	31 d2                	xor    edx,edx
c00044a5:	f7 f1                	div    ecx
c00044a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00044aa:	89 ca                	mov    edx,ecx
c00044ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b0:	89 d8                	mov    eax,ebx
c00044b2:	e8 ad f6 ff ff       	call   c0003b64 <dir_alloc>
c00044b7:	89 c6                	mov    esi,eax
c00044b9:	85 c0                	test   eax,eax
c00044bb:	0f 85 bc 00 00 00    	jne    c000457d <dir_register+0x278>
c00044c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044c5:	49                   	dec    ecx
c00044c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ca:	74 6a                	je     c0004536 <dir_register+0x231>
c00044cc:	89 c8                	mov    eax,ecx
c00044ce:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044d1:	c1 e0 05             	shl    eax,0x5
c00044d4:	29 c2                	sub    edx,eax
c00044d6:	89 d8                	mov    eax,ebx
c00044d8:	e8 fd ec ff ff       	call   c00031da <dir_sdi>
c00044dd:	89 c6                	mov    esi,eax
c00044df:	85 c0                	test   eax,eax
c00044e1:	0f 85 96 00 00 00    	jne    c000457d <dir_register+0x278>
c00044e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044eb:	e8 4a dc ff ff       	call   c000213a <sum_sfn>
c00044f0:	0f b6 f8             	movzx  edi,al
c00044f3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044f6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044f9:	89 e8                	mov    eax,ebp
c00044fb:	e8 5c df ff ff       	call   c000245c <move_window>
c0004500:	89 c6                	mov    esi,eax
c0004502:	85 c0                	test   eax,eax
c0004504:	75 77                	jne    c000457d <dir_register+0x278>
c0004506:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000450b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000450e:	83 ec 0c             	sub    esp,0xc
c0004511:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004514:	57                   	push   edi
c0004515:	e8 e0 da ff ff       	call   c0001ffa <put_lfn>
c000451a:	31 d2                	xor    edx,edx
c000451c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004520:	89 d8                	mov    eax,ebx
c0004522:	e8 0b f2 ff ff       	call   c0003732 <dir_next>
c0004527:	83 c4 10             	add    esp,0x10
c000452a:	89 c6                	mov    esi,eax
c000452c:	85 c0                	test   eax,eax
c000452e:	75 4d                	jne    c000457d <dir_register+0x278>
c0004530:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004534:	75 bd                	jne    c00044f3 <dir_register+0x1ee>
c0004536:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004539:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000453c:	89 e8                	mov    eax,ebp
c000453e:	e8 19 df ff ff       	call   c000245c <move_window>
c0004543:	89 c6                	mov    esi,eax
c0004545:	85 c0                	test   eax,eax
c0004547:	75 34                	jne    c000457d <dir_register+0x278>
c0004549:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000454c:	b9 20 00 00 00       	mov    ecx,0x20
c0004551:	31 d2                	xor    edx,edx
c0004553:	e8 ba d7 ff ff       	call   c0001d12 <mem_set>
c0004558:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000455b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000455f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004564:	e8 94 d7 ff ff       	call   c0001cfd <mem_cpy>
c0004569:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000456c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000456f:	83 e0 18             	and    eax,0x18
c0004572:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004575:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004579:	eb 02                	jmp    c000457d <dir_register+0x278>
c000457b:	89 c6                	mov    esi,eax
c000457d:	83 c4 6c             	add    esp,0x6c
c0004580:	89 f0                	mov    eax,esi
c0004582:	5b                   	pop    ebx
c0004583:	5e                   	pop    esi
c0004584:	5f                   	pop    edi
c0004585:	5d                   	pop    ebp
c0004586:	c3                   	ret    

c0004587 <sync_fs>:
c0004587:	56                   	push   esi
c0004588:	53                   	push   ebx
c0004589:	53                   	push   ebx
c000458a:	89 c3                	mov    ebx,eax
c000458c:	e8 37 de ff ff       	call   c00023c8 <sync_window>
c0004591:	85 c0                	test   eax,eax
c0004593:	0f 85 b1 00 00 00    	jne    c000464a <sync_fs+0xc3>
c0004599:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000459c:	0f 85 8e 00 00 00    	jne    c0004630 <sync_fs+0xa9>
c00045a2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00045a6:	0f 85 84 00 00 00    	jne    c0004630 <sync_fs+0xa9>
c00045ac:	b9 00 02 00 00       	mov    ecx,0x200
c00045b1:	8d 73 54             	lea    esi,[ebx+0x54]
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 f0                	mov    eax,esi
c00045b8:	e8 55 d7 ff ff       	call   c0001d12 <mem_set>
c00045bd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045c3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045c8:	e8 23 d7 ff ff       	call   c0001cf0 <st_word>
c00045cd:	ba 52 52 61 41       	mov    edx,0x41615252
c00045d2:	89 f0                	mov    eax,esi
c00045d4:	e8 1b d7 ff ff       	call   c0001cf4 <st_dword>
c00045d9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045df:	ba 72 72 41 61       	mov    edx,0x61417272
c00045e4:	e8 0b d7 ff ff       	call   c0001cf4 <st_dword>
c00045e9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045ec:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045f2:	e8 fd d6 ff ff       	call   c0001cf4 <st_dword>
c00045f7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045fa:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004600:	e8 ef d6 ff ff       	call   c0001cf4 <st_dword>
c0004605:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004608:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000460b:	83 c0 01             	add    eax,0x1
c000460e:	83 d2 00             	adc    edx,0x0
c0004611:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004614:	83 ec 0c             	sub    esp,0xc
c0004617:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000461a:	6a 01                	push   0x1
c000461c:	52                   	push   edx
c000461d:	50                   	push   eax
c000461e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004622:	56                   	push   esi
c0004623:	50                   	push   eax
c0004624:	e8 20 d6 ff ff       	call   c0001c49 <disk_write>
c0004629:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000462d:	83 c4 20             	add    esp,0x20
c0004630:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004634:	51                   	push   ecx
c0004635:	6a 00                	push   0x0
c0004637:	6a 00                	push   0x0
c0004639:	50                   	push   eax
c000463a:	e8 20 d6 ff ff       	call   c0001c5f <disk_ioctl>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	0f 95 c0             	setne  al
c0004647:	0f b6 c0             	movzx  eax,al
c000464a:	5a                   	pop    edx
c000464b:	5b                   	pop    ebx
c000464c:	5e                   	pop    esi
c000464d:	c3                   	ret    

c000464e <create_partition>:
c000464e:	55                   	push   ebp
c000464f:	0f b6 c0             	movzx  eax,al
c0004652:	57                   	push   edi
c0004653:	56                   	push   esi
c0004654:	53                   	push   ebx
c0004655:	83 ec 60             	sub    esp,0x60
c0004658:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004660:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004664:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004668:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000466c:	50                   	push   eax
c000466d:	6a 01                	push   0x1
c000466f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004673:	e8 e7 d5 ff ff       	call   c0001c5f <disk_ioctl>
c0004678:	83 c4 10             	add    esp,0x10
c000467b:	85 c0                	test   eax,eax
c000467d:	74 0a                	je     c0004689 <create_partition+0x3b>
c000467f:	b8 01 00 00 00       	mov    eax,0x1
c0004684:	e9 67 05 00 00       	jmp    c0004bf0 <create_partition+0x5a2>
c0004689:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000468d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004691:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004695:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004699:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000469e:	0f 86 ed 03 00 00    	jbe    c0004a91 <create_partition+0x443>
c00046a4:	83 c0 df             	add    eax,0xffffffdf
c00046a7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046c2:	83 c0 bd             	add    eax,0xffffffbd
c00046c5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046cc:	83 d2 ff             	adc    edx,0xffffffff
c00046cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046d7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046df:	be 22 00 00 00       	mov    esi,0x22
c00046e4:	31 ff                	xor    edi,edi
c00046e6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046ee:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046f6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046fe:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004702:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004708:	75 0e                	jne    c0004718 <create_partition+0xca>
c000470a:	b9 00 02 00 00       	mov    ecx,0x200
c000470f:	31 d2                	xor    edx,edx
c0004711:	89 d8                	mov    eax,ebx
c0004713:	e8 fa d5 ff ff       	call   c0001d12 <mem_set>
c0004718:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000471c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004724:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004727:	0f 84 23 01 00 00    	je     c0004850 <create_partition+0x202>
c000472d:	89 f0                	mov    eax,esi
c000472f:	89 fa                	mov    edx,edi
c0004731:	05 ff 07 00 00       	add    eax,0x7ff
c0004736:	83 d2 00             	adc    edx,0x0
c0004739:	89 c1                	mov    ecx,eax
c000473b:	89 d7                	mov    edi,edx
c000473d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004743:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004747:	89 ce                	mov    esi,ecx
c0004749:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000474d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004751:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004755:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004758:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000475c:	89 04 24             	mov    DWORD PTR [esp],eax
c000475f:	b8 64 00 00 00       	mov    eax,0x64
c0004764:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004767:	b8 00 00 00 00       	mov    eax,0x0
c000476c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004770:	72 41                	jb     c00047b3 <create_partition+0x165>
c0004772:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000477a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000477e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004783:	01 c1                	add    ecx,eax
c0004785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004789:	f7 24 24             	mul    DWORD PTR [esp]
c000478c:	6a 00                	push   0x0
c000478e:	01 ca                	add    edx,ecx
c0004790:	6a 64                	push   0x64
c0004792:	52                   	push   edx
c0004793:	50                   	push   eax
c0004794:	e8 73 9f 01 00       	call   c001e70c <__udivdi3>
c0004799:	83 c4 10             	add    esp,0x10
c000479c:	05 ff 07 00 00       	add    eax,0x7ff
c00047a1:	83 d2 00             	adc    edx,0x0
c00047a4:	89 c1                	mov    ecx,eax
c00047a6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047aa:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00047b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047ba:	01 f0                	add    eax,esi
c00047bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047c0:	11 fa                	adc    edx,edi
c00047c2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047c6:	19 d1                	sbb    ecx,edx
c00047c8:	73 2e                	jae    c00047f8 <create_partition+0x1aa>
c00047ca:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047ce:	89 f8                	mov    eax,edi
c00047d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047d7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047e3:	73 6b                	jae    c0004850 <create_partition+0x202>
c00047e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047ed:	29 f0                	sub    eax,esi
c00047ef:	19 fa                	sbb    edx,edi
c00047f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00047f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047fc:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ff:	74 4f                	je     c0004850 <create_partition+0x202>
c0004801:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004804:	b9 10 00 00 00       	mov    ecx,0x10
c0004809:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c000480e:	e8 ea d4 ff ff       	call   c0001cfd <mem_cpy>
c0004813:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004817:	b9 10 00 00 00       	mov    ecx,0x10
c000481c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004820:	e8 2c db ff ff       	call   c0002351 <make_rand>
c0004825:	89 f2                	mov    edx,esi
c0004827:	89 f9                	mov    ecx,edi
c0004829:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000482d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004831:	e8 c1 d4 ff ff       	call   c0001cf7 <st_qword>
c0004836:	03 34 24             	add    esi,DWORD PTR [esp]
c0004839:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000483d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004841:	89 f2                	mov    edx,esi
c0004843:	89 f9                	mov    ecx,edi
c0004845:	83 c2 ff             	add    edx,0xffffffff
c0004848:	83 d1 ff             	adc    ecx,0xffffffff
c000484b:	e8 a7 d4 ff ff       	call   c0001cf7 <st_qword>
c0004850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004854:	83 e8 80             	sub    eax,0xffffff80
c0004857:	89 c5                	mov    ebp,eax
c0004859:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000485d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004863:	75 6b                	jne    c00048d0 <create_partition+0x282>
c0004865:	45                   	inc    ebp
c0004866:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000486a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000486f:	e8 39 da ff ff       	call   c00022ad <crc32>
c0004874:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000487a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000487e:	75 e5                	jne    c0004865 <create_partition+0x217>
c0004880:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004884:	31 d2                	xor    edx,edx
c0004886:	83 ec 0c             	sub    esp,0xc
c0004889:	c1 ed 09             	shr    ebp,0x9
c000488c:	6a 01                	push   0x1
c000488e:	8d 45 02             	lea    eax,[ebp+0x2]
c0004891:	52                   	push   edx
c0004892:	50                   	push   eax
c0004893:	53                   	push   ebx
c0004894:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004898:	e8 ac d3 ff ff       	call   c0001c49 <disk_write>
c000489d:	83 c4 20             	add    esp,0x20
c00048a0:	85 c0                	test   eax,eax
c00048a2:	0f 85 d7 fd ff ff    	jne    c000467f <create_partition+0x31>
c00048a8:	83 ec 0c             	sub    esp,0xc
c00048ab:	31 d2                	xor    edx,edx
c00048ad:	6a 01                	push   0x1
c00048af:	89 e8                	mov    eax,ebp
c00048b1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048b5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048b9:	52                   	push   edx
c00048ba:	50                   	push   eax
c00048bb:	53                   	push   ebx
c00048bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c0:	e8 84 d3 ff ff       	call   c0001c49 <disk_write>
c00048c5:	83 c4 20             	add    esp,0x20
c00048c8:	85 c0                	test   eax,eax
c00048ca:	0f 85 af fd ff ff    	jne    c000467f <create_partition+0x31>
c00048d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048d8:	3d 00 40 00 00       	cmp    eax,0x4000
c00048dd:	74 0d                	je     c00048ec <create_partition+0x29e>
c00048df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048e7:	e9 12 fe ff ff       	jmp    c00046fe <create_partition+0xb0>
c00048ec:	31 d2                	xor    edx,edx
c00048ee:	b9 00 02 00 00       	mov    ecx,0x200
c00048f3:	89 d8                	mov    eax,ebx
c00048f5:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048f8:	e8 15 d4 ff ff       	call   c0001d12 <mem_set>
c00048fd:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004900:	b9 10 00 00 00       	mov    ecx,0x10
c0004905:	ba 80 f6 01 c0       	mov    edx,0xc001f680
c000490a:	89 d8                	mov    eax,ebx
c000490c:	e8 ec d3 ff ff       	call   c0001cfd <mem_cpy>
c0004911:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004915:	8d 43 58             	lea    eax,[ebx+0x58]
c0004918:	f7 d2                	not    edx
c000491a:	e8 d5 d3 ff ff       	call   c0001cf4 <st_dword>
c000491f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004922:	31 c9                	xor    ecx,ecx
c0004924:	89 04 24             	mov    DWORD PTR [esp],eax
c0004927:	ba 01 00 00 00       	mov    edx,0x1
c000492c:	e8 c6 d3 ff ff       	call   c0001cf7 <st_qword>
c0004931:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004935:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004939:	83 c2 ff             	add    edx,0xffffffff
c000493c:	89 e8                	mov    eax,ebp
c000493e:	83 d1 ff             	adc    ecx,0xffffffff
c0004941:	e8 b1 d3 ff ff       	call   c0001cf7 <st_qword>
c0004946:	31 c9                	xor    ecx,ecx
c0004948:	8d 43 28             	lea    eax,[ebx+0x28]
c000494b:	ba 22 00 00 00       	mov    edx,0x22
c0004950:	e8 a2 d3 ff ff       	call   c0001cf7 <st_qword>
c0004955:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004959:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000495d:	83 c2 de             	add    edx,0xffffffde
c0004960:	8d 43 30             	lea    eax,[ebx+0x30]
c0004963:	83 d1 ff             	adc    ecx,0xffffffff
c0004966:	31 f6                	xor    esi,esi
c0004968:	e8 8a d3 ff ff       	call   c0001cf7 <st_qword>
c000496d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004970:	ba 80 00 00 00       	mov    edx,0x80
c0004975:	e8 7a d3 ff ff       	call   c0001cf4 <st_dword>
c000497a:	8d 43 50             	lea    eax,[ebx+0x50]
c000497d:	ba 80 00 00 00       	mov    edx,0x80
c0004982:	e8 6d d3 ff ff       	call   c0001cf4 <st_dword>
c0004987:	ba 02 00 00 00       	mov    edx,0x2
c000498c:	89 f8                	mov    eax,edi
c000498e:	e8 61 d3 ff ff       	call   c0001cf4 <st_dword>
c0004993:	8d 53 38             	lea    edx,[ebx+0x38]
c0004996:	b9 10 00 00 00       	mov    ecx,0x10
c000499b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000499f:	e8 ad d9 ff ff       	call   c0002351 <make_rand>
c00049a4:	83 c8 ff             	or     eax,0xffffffff
c00049a7:	46                   	inc    esi
c00049a8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00049ad:	e8 fb d8 ff ff       	call   c00022ad <crc32>
c00049b2:	83 fe 5c             	cmp    esi,0x5c
c00049b5:	75 f0                	jne    c00049a7 <create_partition+0x359>
c00049b7:	f7 d0                	not    eax
c00049b9:	8d 73 10             	lea    esi,[ebx+0x10]
c00049bc:	89 c2                	mov    edx,eax
c00049be:	89 f0                	mov    eax,esi
c00049c0:	e8 2f d3 ff ff       	call   c0001cf4 <st_dword>
c00049c5:	83 ec 0c             	sub    esp,0xc
c00049c8:	6a 01                	push   0x1
c00049ca:	6a 00                	push   0x0
c00049cc:	6a 01                	push   0x1
c00049ce:	53                   	push   ebx
c00049cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049d3:	e8 71 d2 ff ff       	call   c0001c49 <disk_write>
c00049d8:	83 c4 20             	add    esp,0x20
c00049db:	85 c0                	test   eax,eax
c00049dd:	0f 85 9c fc ff ff    	jne    c000467f <create_partition+0x31>
c00049e3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049e7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049eb:	83 c2 ff             	add    edx,0xffffffff
c00049ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049f1:	83 d1 ff             	adc    ecx,0xffffffff
c00049f4:	e8 fe d2 ff ff       	call   c0001cf7 <st_qword>
c00049f9:	ba 01 00 00 00       	mov    edx,0x1
c00049fe:	31 c9                	xor    ecx,ecx
c0004a00:	89 e8                	mov    eax,ebp
c0004a02:	e8 f0 d2 ff ff       	call   c0001cf7 <st_qword>
c0004a07:	89 f8                	mov    eax,edi
c0004a09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004a0d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004a11:	31 ff                	xor    edi,edi
c0004a13:	e8 df d2 ff ff       	call   c0001cf7 <st_qword>
c0004a18:	89 f0                	mov    eax,esi
c0004a1a:	31 d2                	xor    edx,edx
c0004a1c:	e8 d3 d2 ff ff       	call   c0001cf4 <st_dword>
c0004a21:	83 c8 ff             	or     eax,0xffffffff
c0004a24:	47                   	inc    edi
c0004a25:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a2a:	e8 7e d8 ff ff       	call   c00022ad <crc32>
c0004a2f:	83 ff 5c             	cmp    edi,0x5c
c0004a32:	75 f0                	jne    c0004a24 <create_partition+0x3d6>
c0004a34:	f7 d0                	not    eax
c0004a36:	89 c2                	mov    edx,eax
c0004a38:	89 f0                	mov    eax,esi
c0004a3a:	e8 b5 d2 ff ff       	call   c0001cf4 <st_dword>
c0004a3f:	83 ec 0c             	sub    esp,0xc
c0004a42:	6a 01                	push   0x1
c0004a44:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a48:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a4c:	83 c0 ff             	add    eax,0xffffffff
c0004a4f:	83 d2 ff             	adc    edx,0xffffffff
c0004a52:	52                   	push   edx
c0004a53:	50                   	push   eax
c0004a54:	53                   	push   ebx
c0004a55:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a59:	e8 eb d1 ff ff       	call   c0001c49 <disk_write>
c0004a5e:	83 c4 20             	add    esp,0x20
c0004a61:	85 c0                	test   eax,eax
c0004a63:	0f 85 16 fc ff ff    	jne    c000467f <create_partition+0x31>
c0004a69:	31 d2                	xor    edx,edx
c0004a6b:	89 d8                	mov    eax,ebx
c0004a6d:	b9 00 02 00 00       	mov    ecx,0x200
c0004a72:	e8 9b d2 ff ff       	call   c0001d12 <mem_set>
c0004a77:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a7d:	b9 10 00 00 00       	mov    ecx,0x10
c0004a82:	ba 90 f6 01 c0       	mov    edx,0xc001f690
c0004a87:	e8 71 d2 ff ff       	call   c0001cfd <mem_cpy>
c0004a8c:	e9 21 01 00 00       	jmp    c0004bb2 <create_partition+0x564>
c0004a91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a95:	b9 05 00 00 00       	mov    ecx,0x5
c0004a9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a9d:	bf 08 00 00 00       	mov    edi,0x8
c0004aa2:	89 f8                	mov    eax,edi
c0004aa4:	31 d2                	xor    edx,edx
c0004aa6:	0f b6 f0             	movzx  esi,al
c0004aa9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004aac:	f7 f6                	div    esi
c0004aae:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004ab3:	76 0a                	jbe    c0004abf <create_partition+0x471>
c0004ab5:	d1 e7                	shl    edi,1
c0004ab7:	49                   	dec    ecx
c0004ab8:	75 e8                	jne    c0004aa2 <create_partition+0x454>
c0004aba:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004abf:	b9 00 02 00 00       	mov    ecx,0x200
c0004ac4:	31 d2                	xor    edx,edx
c0004ac6:	89 d8                	mov    eax,ebx
c0004ac8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ace:	e8 3f d2 ff ff       	call   c0001d12 <mem_set>
c0004ad3:	b9 64 00 00 00       	mov    ecx,0x64
c0004ad8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004adb:	31 d2                	xor    edx,edx
c0004add:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ae5:	f7 f1                	div    ecx
c0004ae7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004aec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004af0:	89 f8                	mov    eax,edi
c0004af2:	0f b6 c0             	movzx  eax,al
c0004af5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004af9:	e9 80 00 00 00       	jmp    c0004b7e <create_partition+0x530>
c0004afe:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b01:	29 cf                	sub    edi,ecx
c0004b03:	89 ca                	mov    edx,ecx
c0004b05:	89 f0                	mov    eax,esi
c0004b07:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b0c:	e8 e3 d1 ff ff       	call   c0001cf4 <st_dword>
c0004b11:	8d 46 04             	lea    eax,[esi+0x4]
c0004b14:	89 fa                	mov    edx,edi
c0004b16:	83 c6 10             	add    esi,0x10
c0004b19:	e8 d6 d1 ff ff       	call   c0001cf4 <st_dword>
c0004b1e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b22:	31 d2                	xor    edx,edx
c0004b24:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b27:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b2b:	89 c8                	mov    eax,ecx
c0004b2d:	01 f9                	add    ecx,edi
c0004b2f:	f7 f5                	div    ebp
c0004b31:	89 d5                	mov    ebp,edx
c0004b33:	31 d2                	xor    edx,edx
c0004b35:	45                   	inc    ebp
c0004b36:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b3a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b3d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b40:	89 c2                	mov    edx,eax
c0004b42:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b45:	c1 ea 02             	shr    edx,0x2
c0004b48:	83 e2 c0             	and    edx,0xffffffc0
c0004b4b:	09 ea                	or     edx,ebp
c0004b4d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b52:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b55:	31 d2                	xor    edx,edx
c0004b57:	f7 f5                	div    ebp
c0004b59:	89 d7                	mov    edi,edx
c0004b5b:	31 d2                	xor    edx,edx
c0004b5d:	47                   	inc    edi
c0004b5e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b62:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b65:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b68:	89 c5                	mov    ebp,eax
c0004b6a:	c1 ed 02             	shr    ebp,0x2
c0004b6d:	83 e5 c0             	and    ebp,0xffffffc0
c0004b70:	09 ef                	or     edi,ebp
c0004b72:	89 fa                	mov    edx,edi
c0004b74:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b77:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b7c:	74 34                	je     c0004bb2 <create_partition+0x564>
c0004b7e:	85 c9                	test   ecx,ecx
c0004b80:	74 30                	je     c0004bb2 <create_partition+0x564>
c0004b82:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b85:	76 2b                	jbe    c0004bb2 <create_partition+0x564>
c0004b87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b8b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b8f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b92:	83 ff 64             	cmp    edi,0x64
c0004b95:	76 4b                	jbe    c0004be2 <create_partition+0x594>
c0004b97:	89 f8                	mov    eax,edi
c0004b99:	01 c8                	add    eax,ecx
c0004b9b:	0f 82 5d ff ff ff    	jb     c0004afe <create_partition+0x4b0>
c0004ba1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004ba4:	0f 87 54 ff ff ff    	ja     c0004afe <create_partition+0x4b0>
c0004baa:	85 ff                	test   edi,edi
c0004bac:	0f 85 51 ff ff ff    	jne    c0004b03 <create_partition+0x4b5>
c0004bb2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004bb8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004bbd:	e8 2e d1 ff ff       	call   c0001cf0 <st_word>
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	6a 01                	push   0x1
c0004bc7:	6a 00                	push   0x0
c0004bc9:	6a 00                	push   0x0
c0004bcb:	53                   	push   ebx
c0004bcc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bd0:	e8 74 d0 ff ff       	call   c0001c49 <disk_write>
c0004bd5:	83 c4 20             	add    esp,0x20
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	0f 95 c0             	setne  al
c0004bdd:	0f b6 c0             	movzx  eax,al
c0004be0:	eb 0e                	jmp    c0004bf0 <create_partition+0x5a2>
c0004be2:	74 07                	je     c0004beb <create_partition+0x59d>
c0004be4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004be9:	eb ac                	jmp    c0004b97 <create_partition+0x549>
c0004beb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bee:	eb a7                	jmp    c0004b97 <create_partition+0x549>
c0004bf0:	83 c4 5c             	add    esp,0x5c
c0004bf3:	5b                   	pop    ebx
c0004bf4:	5e                   	pop    esi
c0004bf5:	5f                   	pop    edi
c0004bf6:	5d                   	pop    ebp
c0004bf7:	c3                   	ret    

c0004bf8 <get_fileinfo>:
c0004bf8:	55                   	push   ebp
c0004bf9:	57                   	push   edi
c0004bfa:	56                   	push   esi
c0004bfb:	53                   	push   ebx
c0004bfc:	83 ec 1c             	sub    esp,0x1c
c0004bff:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c01:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004c05:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004c09:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004c0c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004c0f:	0f 84 dc 01 00 00    	je     c0004df1 <get_fileinfo+0x1f9>
c0004c15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c18:	75 0f                	jne    c0004c29 <get_fileinfo+0x31>
c0004c1a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c1d:	83 c4 1c             	add    esp,0x1c
c0004c20:	5b                   	pop    ebx
c0004c21:	5e                   	pop    esi
c0004c22:	5f                   	pop    edi
c0004c23:	5d                   	pop    ebp
c0004c24:	e9 58 d5 ff ff       	jmp    c0002181 <get_xfileinfo>
c0004c29:	89 d3                	mov    ebx,edx
c0004c2b:	89 c6                	mov    esi,eax
c0004c2d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c31:	74 6a                	je     c0004c9d <get_fileinfo+0xa5>
c0004c33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c3b:	31 ed                	xor    ebp,ebp
c0004c3d:	31 ff                	xor    edi,edi
c0004c3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c47:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c4a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c4e:	66 85 d2             	test   dx,dx
c0004c51:	74 3e                	je     c0004c91 <get_fileinfo+0x99>
c0004c53:	66 85 ed             	test   bp,bp
c0004c56:	75 0c                	jne    c0004c64 <get_fileinfo+0x6c>
c0004c58:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c5e:	66 3d ff 07          	cmp    ax,0x7ff
c0004c62:	76 22                	jbe    c0004c86 <get_fileinfo+0x8e>
c0004c64:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c69:	89 e8                	mov    eax,ebp
c0004c6b:	29 f9                	sub    ecx,edi
c0004c6d:	c1 e0 10             	shl    eax,0x10
c0004c70:	09 d0                	or     eax,edx
c0004c72:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c76:	e8 a3 d1 ff ff       	call   c0001e1e <put_utf>
c0004c7b:	84 c0                	test   al,al
c0004c7d:	74 10                	je     c0004c8f <get_fileinfo+0x97>
c0004c7f:	0f b6 c0             	movzx  eax,al
c0004c82:	31 d2                	xor    edx,edx
c0004c84:	01 c7                	add    edi,eax
c0004c86:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c8b:	89 d5                	mov    ebp,edx
c0004c8d:	eb b0                	jmp    c0004c3f <get_fileinfo+0x47>
c0004c8f:	31 ff                	xor    edi,edi
c0004c91:	66 85 ed             	test   bp,bp
c0004c94:	74 02                	je     c0004c98 <get_fileinfo+0xa0>
c0004c96:	31 ff                	xor    edi,edi
c0004c98:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c9d:	31 ff                	xor    edi,edi
c0004c9f:	31 c9                	xor    ecx,ecx
c0004ca1:	83 f9 0a             	cmp    ecx,0xa
c0004ca4:	0f 87 ad 00 00 00    	ja     c0004d57 <get_fileinfo+0x15f>
c0004caa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cad:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004cb0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004cb4:	66 83 fa 20          	cmp    dx,0x20
c0004cb8:	0f 84 92 00 00 00    	je     c0004d50 <get_fileinfo+0x158>
c0004cbe:	66 83 fa 05          	cmp    dx,0x5
c0004cc2:	75 05                	jne    c0004cc9 <get_fileinfo+0xd1>
c0004cc4:	ba e5 00 00 00       	mov    edx,0xe5
c0004cc9:	83 ff 0b             	cmp    edi,0xb
c0004ccc:	77 0b                	ja     c0004cd9 <get_fileinfo+0xe1>
c0004cce:	83 fd 09             	cmp    ebp,0x9
c0004cd1:	75 06                	jne    c0004cd9 <get_fileinfo+0xe1>
c0004cd3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cd8:	47                   	inc    edi
c0004cd9:	0f b7 c2             	movzx  eax,dx
c0004cdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce0:	e8 6d d0 ff ff       	call   c0001d52 <dbc_1st>
c0004ce5:	85 c0                	test   eax,eax
c0004ce7:	74 2f                	je     c0004d18 <get_fileinfo+0x120>
c0004ce9:	83 fd 08             	cmp    ebp,0x8
c0004cec:	74 2a                	je     c0004d18 <get_fileinfo+0x120>
c0004cee:	83 fd 0b             	cmp    ebp,0xb
c0004cf1:	74 25                	je     c0004d18 <get_fileinfo+0x120>
c0004cf3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cf6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cfa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004cfe:	e8 52 d0 ff ff       	call   c0001d55 <dbc_2nd>
c0004d03:	85 c0                	test   eax,eax
c0004d05:	74 11                	je     c0004d18 <get_fileinfo+0x120>
c0004d07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004d0b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004d10:	c1 e2 08             	shl    edx,0x8
c0004d13:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d16:	09 c2                	or     edx,eax
c0004d18:	0f b7 d2             	movzx  edx,dx
c0004d1b:	50                   	push   eax
c0004d1c:	50                   	push   eax
c0004d1d:	68 b5 01 00 00       	push   0x1b5
c0004d22:	52                   	push   edx
c0004d23:	e8 46 38 00 00       	call   c000856e <ff_oem2uni>
c0004d28:	83 c4 10             	add    esp,0x10
c0004d2b:	66 85 c0             	test   ax,ax
c0004d2e:	75 04                	jne    c0004d34 <get_fileinfo+0x13c>
c0004d30:	31 ff                	xor    edi,edi
c0004d32:	eb 23                	jmp    c0004d57 <get_fileinfo+0x15f>
c0004d34:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d39:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d3d:	29 f9                	sub    ecx,edi
c0004d3f:	0f b7 c0             	movzx  eax,ax
c0004d42:	e8 d7 d0 ff ff       	call   c0001e1e <put_utf>
c0004d47:	84 c0                	test   al,al
c0004d49:	74 e5                	je     c0004d30 <get_fileinfo+0x138>
c0004d4b:	0f b6 c0             	movzx  eax,al
c0004d4e:	01 c7                	add    edi,eax
c0004d50:	89 e9                	mov    ecx,ebp
c0004d52:	e9 4a ff ff ff       	jmp    c0004ca1 <get_fileinfo+0xa9>
c0004d57:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d5c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d60:	75 54                	jne    c0004db6 <get_fileinfo+0x1be>
c0004d62:	85 ff                	test   edi,edi
c0004d64:	75 0b                	jne    c0004d71 <get_fileinfo+0x179>
c0004d66:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d6a:	ba 01 00 00 00       	mov    edx,0x1
c0004d6f:	eb 33                	jmp    c0004da4 <get_fileinfo+0x1ac>
c0004d71:	b1 08                	mov    cl,0x8
c0004d73:	31 d2                	xor    edx,edx
c0004d75:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d7b:	84 c0                	test   al,al
c0004d7d:	74 25                	je     c0004da4 <get_fileinfo+0x1ac>
c0004d7f:	66 83 f8 2e          	cmp    ax,0x2e
c0004d83:	74 16                	je     c0004d9b <get_fileinfo+0x1a3>
c0004d85:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d88:	66 83 ff 19          	cmp    di,0x19
c0004d8c:	77 0f                	ja     c0004d9d <get_fileinfo+0x1a5>
c0004d8e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d91:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d94:	74 07                	je     c0004d9d <get_fileinfo+0x1a5>
c0004d96:	83 c0 20             	add    eax,0x20
c0004d99:	eb 02                	jmp    c0004d9d <get_fileinfo+0x1a5>
c0004d9b:	b1 10                	mov    cl,0x10
c0004d9d:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004da1:	42                   	inc    edx
c0004da2:	eb d1                	jmp    c0004d75 <get_fileinfo+0x17d>
c0004da4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004da9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dac:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004db0:	75 04                	jne    c0004db6 <get_fileinfo+0x1be>
c0004db2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004dbc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004dbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc2:	83 c0 1c             	add    eax,0x1c
c0004dc5:	e8 c1 ce ff ff       	call   c0001c8b <ld_dword>
c0004dca:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dd1:	89 03                	mov    DWORD PTR [ebx],eax
c0004dd3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd6:	83 c0 16             	add    eax,0x16
c0004dd9:	e8 a0 ce ff ff       	call   c0001c7e <ld_word>
c0004dde:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004de2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004de5:	83 c0 18             	add    eax,0x18
c0004de8:	e8 91 ce ff ff       	call   c0001c7e <ld_word>
c0004ded:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004df1:	83 c4 1c             	add    esp,0x1c
c0004df4:	5b                   	pop    ebx
c0004df5:	5e                   	pop    esi
c0004df6:	5f                   	pop    edi
c0004df7:	5d                   	pop    ebp
c0004df8:	c3                   	ret    

c0004df9 <ld_clust.isra.0>:
c0004df9:	56                   	push   esi
c0004dfa:	89 c6                	mov    esi,eax
c0004dfc:	53                   	push   ebx
c0004dfd:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004e00:	89 d3                	mov    ebx,edx
c0004e02:	e8 77 ce ff ff       	call   c0001c7e <ld_word>
c0004e07:	0f b7 c8             	movzx  ecx,ax
c0004e0a:	89 f0                	mov    eax,esi
c0004e0c:	3c 03                	cmp    al,0x3
c0004e0e:	75 0d                	jne    c0004e1d <ld_clust.isra.0+0x24>
c0004e10:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e13:	e8 66 ce ff ff       	call   c0001c7e <ld_word>
c0004e18:	c1 e0 10             	shl    eax,0x10
c0004e1b:	09 c1                	or     ecx,eax
c0004e1d:	89 c8                	mov    eax,ecx
c0004e1f:	5b                   	pop    ebx
c0004e20:	5e                   	pop    esi
c0004e21:	c3                   	ret    

c0004e22 <st_clust.isra.1>:
c0004e22:	56                   	push   esi
c0004e23:	89 c6                	mov    esi,eax
c0004e25:	53                   	push   ebx
c0004e26:	89 d3                	mov    ebx,edx
c0004e28:	0f b7 d1             	movzx  edx,cx
c0004e2b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e2e:	e8 bd ce ff ff       	call   c0001cf0 <st_word>
c0004e33:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e36:	75 0f                	jne    c0004e47 <st_clust.isra.1+0x25>
c0004e38:	c1 e9 10             	shr    ecx,0x10
c0004e3b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e3e:	89 ca                	mov    edx,ecx
c0004e40:	5b                   	pop    ebx
c0004e41:	5e                   	pop    esi
c0004e42:	e9 a9 ce ff ff       	jmp    c0001cf0 <st_word>
c0004e47:	5b                   	pop    ebx
c0004e48:	5e                   	pop    esi
c0004e49:	c3                   	ret    

c0004e4a <init_alloc_info.isra.2>:
c0004e4a:	56                   	push   esi
c0004e4b:	53                   	push   ebx
c0004e4c:	89 c6                	mov    esi,eax
c0004e4e:	89 d3                	mov    ebx,edx
c0004e50:	51                   	push   ecx
c0004e51:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e53:	83 c0 34             	add    eax,0x34
c0004e56:	e8 30 ce ff ff       	call   c0001c8b <ld_dword>
c0004e5b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e5e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e60:	83 c0 38             	add    eax,0x38
c0004e63:	e8 3b ce ff ff       	call   c0001ca3 <ld_qword>
c0004e68:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e6b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e70:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e73:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e7a:	83 e0 02             	and    eax,0x2
c0004e7d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e80:	5b                   	pop    ebx
c0004e81:	5b                   	pop    ebx
c0004e82:	5e                   	pop    esi
c0004e83:	c3                   	ret    

c0004e84 <follow_path>:
c0004e84:	56                   	push   esi
c0004e85:	53                   	push   ebx
c0004e86:	89 c3                	mov    ebx,eax
c0004e88:	83 ec 14             	sub    esp,0x14
c0004e8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e8f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e95:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e97:	80 fa 5c             	cmp    dl,0x5c
c0004e9a:	75 07                	jne    c0004ea3 <follow_path+0x1f>
c0004e9c:	40                   	inc    eax
c0004e9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ea1:	eb ee                	jmp    c0004e91 <follow_path+0xd>
c0004ea3:	80 fa 2f             	cmp    dl,0x2f
c0004ea6:	74 f4                	je     c0004e9c <follow_path+0x18>
c0004ea8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004eaf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004eb6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004eb9:	77 52                	ja     c0004f0d <follow_path+0x89>
c0004ebb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ebf:	31 d2                	xor    edx,edx
c0004ec1:	89 d8                	mov    eax,ebx
c0004ec3:	e8 12 e3 ff ff       	call   c00031da <dir_sdi>
c0004ec8:	eb 7c                	jmp    c0004f46 <follow_path+0xc2>
c0004eca:	89 d8                	mov    eax,ebx
c0004ecc:	e8 6e f2 ff ff       	call   c000413f <dir_find>
c0004ed1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ed4:	85 c0                	test   eax,eax
c0004ed6:	75 46                	jne    c0004f1e <follow_path+0x9a>
c0004ed8:	80 e2 04             	and    dl,0x4
c0004edb:	75 69                	jne    c0004f46 <follow_path+0xc2>
c0004edd:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ee1:	74 5e                	je     c0004f41 <follow_path+0xbd>
c0004ee3:	8a 06                	mov    al,BYTE PTR [esi]
c0004ee5:	3c 04                	cmp    al,0x4
c0004ee7:	75 41                	jne    c0004f2a <follow_path+0xa6>
c0004ee9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004eec:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ef0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ef3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ef6:	30 c0                	xor    al,al
c0004ef8:	09 d0                	or     eax,edx
c0004efa:	89 da                	mov    edx,ebx
c0004efc:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eff:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004f02:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f05:	8d 46 10             	lea    eax,[esi+0x10]
c0004f08:	e8 3d ff ff ff       	call   c0004e4a <init_alloc_info.isra.2>
c0004f0d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004f11:	89 d8                	mov    eax,ebx
c0004f13:	e8 a9 ed ff ff       	call   c0003cc1 <create_name>
c0004f18:	85 c0                	test   eax,eax
c0004f1a:	74 ae                	je     c0004eca <follow_path+0x46>
c0004f1c:	eb 28                	jmp    c0004f46 <follow_path+0xc2>
c0004f1e:	83 f8 04             	cmp    eax,0x4
c0004f21:	75 23                	jne    c0004f46 <follow_path+0xc2>
c0004f23:	80 e2 04             	and    dl,0x4
c0004f26:	74 19                	je     c0004f41 <follow_path+0xbd>
c0004f28:	eb 1c                	jmp    c0004f46 <follow_path+0xc2>
c0004f2a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f2d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f33:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f37:	e8 bd fe ff ff       	call   c0004df9 <ld_clust.isra.0>
c0004f3c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f3f:	eb cc                	jmp    c0004f0d <follow_path+0x89>
c0004f41:	b8 05 00 00 00       	mov    eax,0x5
c0004f46:	83 c4 14             	add    esp,0x14
c0004f49:	5b                   	pop    ebx
c0004f4a:	5e                   	pop    esi
c0004f4b:	c3                   	ret    

c0004f4c <f_mount>:
c0004f4c:	53                   	push   ebx
c0004f4d:	83 ec 18             	sub    esp,0x18
c0004f50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f54:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f60:	e8 fb d2 ff ff       	call   c0002260 <get_ldnumber>
c0004f65:	89 c2                	mov    edx,eax
c0004f67:	b8 0b 00 00 00       	mov    eax,0xb
c0004f6c:	85 d2                	test   edx,edx
c0004f6e:	78 39                	js     c0004fa9 <f_mount+0x5d>
c0004f70:	8b 04 95 80 b9 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4680]
c0004f77:	85 c0                	test   eax,eax
c0004f79:	74 03                	je     c0004f7e <f_mount+0x32>
c0004f7b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f82:	85 c0                	test   eax,eax
c0004f84:	74 03                	je     c0004f89 <f_mount+0x3d>
c0004f86:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f8d:	89 04 95 80 b9 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4680],eax
c0004f94:	31 c0                	xor    eax,eax
c0004f96:	84 db                	test   bl,bl
c0004f98:	74 0f                	je     c0004fa9 <f_mount+0x5d>
c0004f9a:	31 c9                	xor    ecx,ecx
c0004f9c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fa0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fa4:	e8 65 d7 ff ff       	call   c000270e <mount_volume>
c0004fa9:	83 c4 18             	add    esp,0x18
c0004fac:	5b                   	pop    ebx
c0004fad:	c3                   	ret    

c0004fae <f_open>:
c0004fae:	55                   	push   ebp
c0004faf:	bd 09 00 00 00       	mov    ebp,0x9
c0004fb4:	57                   	push   edi
c0004fb5:	56                   	push   esi
c0004fb6:	53                   	push   ebx
c0004fb7:	83 ec 7c             	sub    esp,0x7c
c0004fba:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fc1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fc8:	85 db                	test   ebx,ebx
c0004fca:	0f 84 10 04 00 00    	je     c00053e0 <f_open+0x432>
c0004fd0:	89 fe                	mov    esi,edi
c0004fd2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fd6:	83 e6 3f             	and    esi,0x3f
c0004fd9:	89 f0                	mov    eax,esi
c0004fdb:	0f b6 c8             	movzx  ecx,al
c0004fde:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fe5:	e8 24 d7 ff ff       	call   c000270e <mount_volume>
c0004fea:	89 c5                	mov    ebp,eax
c0004fec:	85 c0                	test   eax,eax
c0004fee:	0f 85 e6 03 00 00    	jne    c00053da <f_open+0x42c>
c0004ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff8:	bd 11 00 00 00       	mov    ebp,0x11
c0004ffd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005001:	83 ec 0c             	sub    esp,0xc
c0005004:	68 60 04 00 00       	push   0x460
c0005009:	e8 a3 34 00 00       	call   c00084b1 <ff_memalloc>
c000500e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005012:	83 c4 10             	add    esp,0x10
c0005015:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000501a:	0f 84 c0 03 00 00    	je     c00053e0 <f_open+0x432>
c0005020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005024:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005028:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c000502e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005031:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005034:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000503b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000503f:	e8 40 fe ff ff       	call   c0004e84 <follow_path>
c0005044:	89 c5                	mov    ebp,eax
c0005046:	85 c0                	test   eax,eax
c0005048:	75 0c                	jne    c0005056 <f_open+0xa8>
c000504a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000504f:	79 05                	jns    c0005056 <f_open+0xa8>
c0005051:	bd 06 00 00 00       	mov    ebp,0x6
c0005056:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000505c:	0f 84 84 01 00 00    	je     c00051e6 <f_open+0x238>
c0005062:	85 ed                	test   ebp,ebp
c0005064:	74 20                	je     c0005086 <f_open+0xd8>
c0005066:	83 fd 04             	cmp    ebp,0x4
c0005069:	0f 85 58 03 00 00    	jne    c00053c7 <f_open+0x419>
c000506f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005073:	83 ce 08             	or     esi,0x8
c0005076:	e8 8a f2 ff ff       	call   c0004305 <dir_register>
c000507b:	89 c5                	mov    ebp,eax
c000507d:	85 c0                	test   eax,eax
c000507f:	74 2f                	je     c00050b0 <f_open+0x102>
c0005081:	e9 41 03 00 00       	jmp    c00053c7 <f_open+0x419>
c0005086:	bd 07 00 00 00       	mov    ebp,0x7
c000508b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005090:	0f 85 31 03 00 00    	jne    c00053c7 <f_open+0x419>
c0005096:	bd 08 00 00 00       	mov    ebp,0x8
c000509b:	f7 c7 04 00 00 00    	test   edi,0x4
c00050a1:	0f 85 20 03 00 00    	jne    c00053c7 <f_open+0x419>
c00050a7:	83 e7 08             	and    edi,0x8
c00050aa:	0f 84 65 01 00 00    	je     c0005215 <f_open+0x267>
c00050b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050b4:	8a 02                	mov    al,BYTE PTR [edx]
c00050b6:	3c 04                	cmp    al,0x4
c00050b8:	0f 85 97 00 00 00    	jne    c0005155 <f_open+0x1a7>
c00050be:	8d 42 10             	lea    eax,[edx+0x10]
c00050c1:	89 13                	mov    DWORD PTR [ebx],edx
c00050c3:	89 da                	mov    edx,ebx
c00050c5:	e8 80 fd ff ff       	call   c0004e4a <init_alloc_info.isra.2>
c00050ca:	31 d2                	xor    edx,edx
c00050cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d0:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d8:	83 c0 02             	add    eax,0x2
c00050db:	e8 32 cc ff ff       	call   c0001d12 <mem_set>
c00050e0:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050e5:	31 d2                	xor    edx,edx
c00050e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ee:	83 c0 26             	add    eax,0x26
c00050f1:	e8 1c cc ff ff       	call   c0001d12 <mem_set>
c00050f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050fa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050fd:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0005101:	ba 00 00 21 50       	mov    edx,0x50210000
c0005106:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005109:	83 c0 08             	add    eax,0x8
c000510c:	e8 e3 cb ff ff       	call   c0001cf4 <st_dword>
c0005111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005115:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005118:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c000511c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005120:	e8 b7 ea ff ff       	call   c0003bdc <store_xdir>
c0005125:	89 c5                	mov    ebp,eax
c0005127:	85 c0                	test   eax,eax
c0005129:	0f 85 98 02 00 00    	jne    c00053c7 <f_open+0x419>
c000512f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005132:	85 d2                	test   edx,edx
c0005134:	0f 84 db 00 00 00    	je     c0005215 <f_open+0x267>
c000513a:	31 c9                	xor    ecx,ecx
c000513c:	89 d8                	mov    eax,ebx
c000513e:	e8 8e e3 ff ff       	call   c00034d1 <remove_chain>
c0005143:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005147:	89 c5                	mov    ebp,eax
c0005149:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000514c:	48                   	dec    eax
c000514d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005150:	e9 b8 00 00 00       	jmp    c000520d <f_open+0x25f>
c0005155:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005159:	89 ea                	mov    edx,ebp
c000515b:	e8 99 fc ff ff       	call   c0004df9 <ld_clust.isra.0>
c0005160:	ba 00 00 21 50       	mov    edx,0x50210000
c0005165:	89 c7                	mov    edi,eax
c0005167:	8d 45 0e             	lea    eax,[ebp+0xe]
c000516a:	e8 85 cb ff ff       	call   c0001cf4 <st_dword>
c000516f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005173:	31 c9                	xor    ecx,ecx
c0005175:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005179:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005181:	e8 9c fc ff ff       	call   c0004e22 <st_clust.isra.1>
c0005186:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000518a:	31 d2                	xor    edx,edx
c000518c:	83 c0 1c             	add    eax,0x1c
c000518f:	e8 60 cb ff ff       	call   c0001cf4 <st_dword>
c0005194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005198:	85 ff                	test   edi,edi
c000519a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000519e:	74 75                	je     c0005215 <f_open+0x267>
c00051a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051a4:	31 c9                	xor    ecx,ecx
c00051a6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c00051a9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c00051ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051b4:	89 fa                	mov    edx,edi
c00051b6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051ba:	e8 12 e3 ff ff       	call   c00034d1 <remove_chain>
c00051bf:	89 c5                	mov    ebp,eax
c00051c1:	85 c0                	test   eax,eax
c00051c3:	0f 85 fe 01 00 00    	jne    c00053c7 <f_open+0x419>
c00051c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051d5:	4f                   	dec    edi
c00051d6:	e8 81 d2 ff ff       	call   c000245c <move_window>
c00051db:	89 c5                	mov    ebp,eax
c00051dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051e4:	eb 27                	jmp    c000520d <f_open+0x25f>
c00051e6:	85 ed                	test   ebp,ebp
c00051e8:	0f 85 d9 01 00 00    	jne    c00053c7 <f_open+0x419>
c00051ee:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051f2:	bd 04 00 00 00       	mov    ebp,0x4
c00051f7:	a8 10                	test   al,0x10
c00051f9:	0f 85 c8 01 00 00    	jne    c00053c7 <f_open+0x419>
c00051ff:	83 e7 02             	and    edi,0x2
c0005202:	74 11                	je     c0005215 <f_open+0x267>
c0005204:	bd 07 00 00 00       	mov    ebp,0x7
c0005209:	a8 01                	test   al,0x1
c000520b:	eb 02                	jmp    c000520f <f_open+0x261>
c000520d:	85 ed                	test   ebp,ebp
c000520f:	0f 85 b2 01 00 00    	jne    c00053c7 <f_open+0x419>
c0005215:	f7 c6 08 00 00 00    	test   esi,0x8
c000521b:	74 03                	je     c0005220 <f_open+0x272>
c000521d:	83 ce 40             	or     esi,0x40
c0005220:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005224:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005227:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000522a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000522d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005230:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005234:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005237:	8a 02                	mov    al,BYTE PTR [edx]
c0005239:	3c 04                	cmp    al,0x4
c000523b:	75 2a                	jne    c0005267 <f_open+0x2b9>
c000523d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005241:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005246:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000524d:	30 c0                	xor    al,al
c000524f:	09 c8                	or     eax,ecx
c0005251:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005254:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005258:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000525b:	8d 42 10             	lea    eax,[edx+0x10]
c000525e:	89 da                	mov    edx,ebx
c0005260:	e8 e5 fb ff ff       	call   c0004e4a <init_alloc_info.isra.2>
c0005265:	eb 1c                	jmp    c0005283 <f_open+0x2d5>
c0005267:	89 fa                	mov    edx,edi
c0005269:	e8 8b fb ff ff       	call   c0004df9 <ld_clust.isra.0>
c000526e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005271:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005274:	e8 12 ca ff ff       	call   c0001c8b <ld_dword>
c0005279:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005280:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005287:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000528e:	89 03                	mov    DWORD PTR [ebx],eax
c0005290:	31 d2                	xor    edx,edx
c0005292:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005296:	b9 00 02 00 00       	mov    ecx,0x200
c000529b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000529f:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c00052a3:	89 f0                	mov    eax,esi
c00052a5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00052ac:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00052af:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052b6:	8d 43 50             	lea    eax,[ebx+0x50]
c00052b9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052c0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052cb:	e8 42 ca ff ff       	call   c0001d12 <mem_set>
c00052d0:	83 e6 20             	and    esi,0x20
c00052d3:	75 07                	jne    c00052dc <f_open+0x32e>
c00052d5:	31 ed                	xor    ebp,ebp
c00052d7:	e9 eb 00 00 00       	jmp    c00053c7 <f_open+0x419>
c00052dc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052df:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052ee:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052f2:	74 e1                	je     c00052d5 <f_open+0x327>
c00052f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052fc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ff:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005306:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005309:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000530d:	31 ff                	xor    edi,edi
c000530f:	c1 e5 09             	shl    ebp,0x9
c0005312:	89 ee                	mov    esi,ebp
c0005314:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005318:	89 f8                	mov    eax,edi
c000531a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000531e:	73 22                	jae    c0005342 <f_open+0x394>
c0005320:	89 d8                	mov    eax,ebx
c0005322:	e8 bd dc ff ff       	call   c0002fe4 <get_fat>
c0005327:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000532b:	89 c2                	mov    edx,eax
c000532d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005331:	83 f8 01             	cmp    eax,0x1
c0005334:	76 10                	jbe    c0005346 <f_open+0x398>
c0005336:	83 f8 ff             	cmp    eax,0xffffffff
c0005339:	75 d9                	jne    c0005314 <f_open+0x366>
c000533b:	bd 01 00 00 00       	mov    ebp,0x1
c0005340:	eb 09                	jmp    c000534b <f_open+0x39d>
c0005342:	31 ed                	xor    ebp,ebp
c0005344:	eb 05                	jmp    c000534b <f_open+0x39d>
c0005346:	bd 02 00 00 00       	mov    ebp,0x2
c000534b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000534e:	85 ed                	test   ebp,ebp
c0005350:	75 75                	jne    c00053c7 <f_open+0x419>
c0005352:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005356:	25 ff 01 00 00       	and    eax,0x1ff
c000535b:	0f 84 74 ff ff ff    	je     c00052d5 <f_open+0x327>
c0005361:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005365:	bd 02 00 00 00       	mov    ebp,0x2
c000536a:	89 c8                	mov    eax,ecx
c000536c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005370:	e8 a2 cb ff ff       	call   c0001f17 <clst2sect>
c0005375:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005379:	89 d7                	mov    edi,edx
c000537b:	09 c7                	or     edi,eax
c000537d:	74 48                	je     c00053c7 <f_open+0x419>
c000537f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005383:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005387:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000538f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005393:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005397:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000539b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000539e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00053a2:	83 ec 0c             	sub    esp,0xc
c00053a5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00053a8:	6a 01                	push   0x1
c00053aa:	52                   	push   edx
c00053ab:	50                   	push   eax
c00053ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00053b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053b4:	50                   	push   eax
c00053b5:	e8 79 c8 ff ff       	call   c0001c33 <disk_read>
c00053ba:	83 c4 20             	add    esp,0x20
c00053bd:	85 c0                	test   eax,eax
c00053bf:	0f 95 c0             	setne  al
c00053c2:	0f b6 c0             	movzx  eax,al
c00053c5:	89 c5                	mov    ebp,eax
c00053c7:	83 ec 0c             	sub    esp,0xc
c00053ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053ce:	e8 f4 30 00 00       	call   c00084c7 <ff_memfree>
c00053d3:	83 c4 10             	add    esp,0x10
c00053d6:	85 ed                	test   ebp,ebp
c00053d8:	74 06                	je     c00053e0 <f_open+0x432>
c00053da:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053e0:	83 c4 7c             	add    esp,0x7c
c00053e3:	89 e8                	mov    eax,ebp
c00053e5:	5b                   	pop    ebx
c00053e6:	5e                   	pop    esi
c00053e7:	5f                   	pop    edi
c00053e8:	5d                   	pop    ebp
c00053e9:	c3                   	ret    

c00053ea <f_read>:
c00053ea:	55                   	push   ebp
c00053eb:	57                   	push   edi
c00053ec:	56                   	push   esi
c00053ed:	53                   	push   ebx
c00053ee:	83 ec 2c             	sub    esp,0x2c
c00053f1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053f5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ff:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005403:	89 d8                	mov    eax,ebx
c0005405:	e8 77 cf ff ff       	call   c0002381 <validate>
c000540a:	89 c5                	mov    ebp,eax
c000540c:	85 c0                	test   eax,eax
c000540e:	0f 85 4c 02 00 00    	jne    c0005660 <f_read+0x276>
c0005414:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005418:	85 ed                	test   ebp,ebp
c000541a:	0f 85 40 02 00 00    	jne    c0005660 <f_read+0x276>
c0005420:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005424:	0f 84 31 02 00 00    	je     c000565b <f_read+0x271>
c000542a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000542d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005430:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005433:	bf 00 00 00 00       	mov    edi,0x0
c0005438:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000543b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000543f:	89 d1                	mov    ecx,edx
c0005441:	19 f9                	sbb    ecx,edi
c0005443:	0f 83 cf 00 00 00    	jae    c0005518 <f_read+0x12e>
c0005449:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000544d:	e9 c6 00 00 00       	jmp    c0005518 <f_read+0x12e>
c0005452:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005455:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005458:	89 d0                	mov    eax,edx
c000545a:	25 ff 01 00 00       	and    eax,0x1ff
c000545f:	0f 85 c9 01 00 00    	jne    c000562e <f_read+0x244>
c0005465:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005469:	89 d6                	mov    esi,edx
c000546b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000546f:	89 cf                	mov    edi,ecx
c0005471:	48                   	dec    eax
c0005472:	0f ac fe 09          	shrd   esi,edi,0x9
c0005476:	21 f0                	and    eax,esi
c0005478:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000547c:	0f 84 a6 00 00 00    	je     c0005528 <f_read+0x13e>
c0005482:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005486:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005489:	89 c8                	mov    eax,ecx
c000548b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000548e:	e8 84 ca ff ff       	call   c0001f17 <clst2sect>
c0005493:	89 d7                	mov    edi,edx
c0005495:	09 c7                	or     edi,eax
c0005497:	0f 84 b4 00 00 00    	je     c0005551 <f_read+0x167>
c000549d:	31 ff                	xor    edi,edi
c000549f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054a3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00054a6:	01 c6                	add    esi,eax
c00054a8:	11 d7                	adc    edi,edx
c00054aa:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054b2:	0f 86 fd 00 00 00    	jbe    c00055b5 <f_read+0x1cb>
c00054b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054c0:	c1 e8 09             	shr    eax,0x9
c00054c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ca:	03 14 24             	add    edx,DWORD PTR [esp]
c00054cd:	39 c2                	cmp    edx,eax
c00054cf:	76 07                	jbe    c00054d8 <f_read+0xee>
c00054d1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00054d8:	83 ec 0c             	sub    esp,0xc
c00054db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054df:	57                   	push   edi
c00054e0:	56                   	push   esi
c00054e1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054e9:	50                   	push   eax
c00054ea:	e8 44 c7 ff ff       	call   c0001c33 <disk_read>
c00054ef:	83 c4 20             	add    esp,0x20
c00054f2:	85 c0                	test   eax,eax
c00054f4:	75 6e                	jne    c0005564 <f_read+0x17a>
c00054f6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054fa:	78 7e                	js     c000557a <f_read+0x190>
c00054fc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ff:	c1 e6 09             	shl    esi,0x9
c0005502:	31 ff                	xor    edi,edi
c0005504:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005508:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000550c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005510:	01 30                	add    DWORD PTR [eax],esi
c0005512:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005515:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005518:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000551d:	0f 85 2f ff ff ff    	jne    c0005452 <f_read+0x68>
c0005523:	e9 38 01 00 00       	jmp    c0005660 <f_read+0x276>
c0005528:	89 c8                	mov    eax,ecx
c000552a:	09 d0                	or     eax,edx
c000552c:	75 05                	jne    c0005533 <f_read+0x149>
c000552e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005531:	eb 19                	jmp    c000554c <f_read+0x162>
c0005533:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005537:	74 09                	je     c0005542 <f_read+0x158>
c0005539:	89 d8                	mov    eax,ebx
c000553b:	e8 f8 c9 ff ff       	call   c0001f38 <clmt_clust>
c0005540:	eb 0a                	jmp    c000554c <f_read+0x162>
c0005542:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005545:	89 d8                	mov    eax,ebx
c0005547:	e8 98 da ff ff       	call   c0002fe4 <get_fat>
c000554c:	83 f8 01             	cmp    eax,0x1
c000554f:	77 0e                	ja     c000555f <f_read+0x175>
c0005551:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005555:	bd 02 00 00 00       	mov    ebp,0x2
c000555a:	e9 01 01 00 00       	jmp    c0005660 <f_read+0x276>
c000555f:	83 f8 ff             	cmp    eax,0xffffffff
c0005562:	75 0e                	jne    c0005572 <f_read+0x188>
c0005564:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005568:	bd 01 00 00 00       	mov    ebp,0x1
c000556d:	e9 ee 00 00 00       	jmp    c0005660 <f_read+0x276>
c0005572:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005575:	e9 08 ff ff ff       	jmp    c0005482 <f_read+0x98>
c000557a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000557d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005580:	29 f0                	sub    eax,esi
c0005582:	19 fa                	sbb    edx,edi
c0005584:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005587:	89 d7                	mov    edi,edx
c0005589:	ba 00 00 00 00       	mov    edx,0x0
c000558e:	89 f9                	mov    ecx,edi
c0005590:	19 d1                	sbb    ecx,edx
c0005592:	0f 83 64 ff ff ff    	jae    c00054fc <f_read+0x112>
c0005598:	89 c7                	mov    edi,eax
c000559a:	8d 53 50             	lea    edx,[ebx+0x50]
c000559d:	c1 e7 09             	shl    edi,0x9
c00055a0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a4:	b9 00 02 00 00       	mov    ecx,0x200
c00055a9:	01 f8                	add    eax,edi
c00055ab:	e8 4d c7 ff ff       	call   c0001cfd <mem_cpy>
c00055b0:	e9 47 ff ff ff       	jmp    c00054fc <f_read+0x112>
c00055b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055b8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00055be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055c2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055c6:	75 05                	jne    c00055cd <f_read+0x1e3>
c00055c8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055cb:	74 5b                	je     c0005628 <f_read+0x23e>
c00055cd:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	79 2a                	jns    c0005604 <f_read+0x21a>
c00055da:	83 ec 0c             	sub    esp,0xc
c00055dd:	6a 01                	push   0x1
c00055df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ef:	50                   	push   eax
c00055f0:	e8 54 c6 ff ff       	call   c0001c49 <disk_write>
c00055f5:	83 c4 20             	add    esp,0x20
c00055f8:	85 c0                	test   eax,eax
c00055fa:	0f 85 64 ff ff ff    	jne    c0005564 <f_read+0x17a>
c0005600:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005604:	83 ec 0c             	sub    esp,0xc
c0005607:	6a 01                	push   0x1
c0005609:	57                   	push   edi
c000560a:	56                   	push   esi
c000560b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000560f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005613:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005617:	50                   	push   eax
c0005618:	e8 16 c6 ff ff       	call   c0001c33 <disk_read>
c000561d:	83 c4 20             	add    esp,0x20
c0005620:	85 c0                	test   eax,eax
c0005622:	0f 85 3c ff ff ff    	jne    c0005564 <f_read+0x17a>
c0005628:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000562b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000562e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005631:	ba 00 02 00 00       	mov    edx,0x200
c0005636:	25 ff 01 00 00       	and    eax,0x1ff
c000563b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000563f:	29 c2                	sub    edx,eax
c0005641:	39 d6                	cmp    esi,edx
c0005643:	76 02                	jbe    c0005647 <f_read+0x25d>
c0005645:	89 d6                	mov    esi,edx
c0005647:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000564b:	89 f1                	mov    ecx,esi
c000564d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005651:	e8 a7 c6 ff ff       	call   c0001cfd <mem_cpy>
c0005656:	e9 a7 fe ff ff       	jmp    c0005502 <f_read+0x118>
c000565b:	bd 07 00 00 00       	mov    ebp,0x7
c0005660:	83 c4 2c             	add    esp,0x2c
c0005663:	89 e8                	mov    eax,ebp
c0005665:	5b                   	pop    ebx
c0005666:	5e                   	pop    esi
c0005667:	5f                   	pop    edi
c0005668:	5d                   	pop    ebp
c0005669:	c3                   	ret    

c000566a <f_write>:
c000566a:	55                   	push   ebp
c000566b:	57                   	push   edi
c000566c:	56                   	push   esi
c000566d:	53                   	push   ebx
c000566e:	83 ec 2c             	sub    esp,0x2c
c0005671:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005675:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005679:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000567f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005683:	89 d8                	mov    eax,ebx
c0005685:	e8 f7 cc ff ff       	call   c0002381 <validate>
c000568a:	89 c5                	mov    ebp,eax
c000568c:	85 c0                	test   eax,eax
c000568e:	0f 85 86 02 00 00    	jne    c000591a <f_write+0x2b0>
c0005694:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005698:	85 ed                	test   ebp,ebp
c000569a:	0f 85 7a 02 00 00    	jne    c000591a <f_write+0x2b0>
c00056a0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00056a4:	0f 84 6b 02 00 00    	je     c0005915 <f_write+0x2ab>
c00056aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056b1:	0f 84 43 01 00 00    	je     c00057fa <f_write+0x190>
c00056b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056ba:	89 c1                	mov    ecx,eax
c00056bc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056c0:	0f 83 34 01 00 00    	jae    c00057fa <f_write+0x190>
c00056c6:	f7 d0                	not    eax
c00056c8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056cc:	e9 29 01 00 00       	jmp    c00057fa <f_write+0x190>
c00056d1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056d4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056d7:	89 d0                	mov    eax,edx
c00056d9:	25 ff 01 00 00       	and    eax,0x1ff
c00056de:	0f 85 00 02 00 00    	jne    c00058e4 <f_write+0x27a>
c00056e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e8:	89 d6                	mov    esi,edx
c00056ea:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056ee:	89 cf                	mov    edi,ecx
c00056f0:	48                   	dec    eax
c00056f1:	0f ac fe 09          	shrd   esi,edi,0x9
c00056f5:	21 f0                	and    eax,esi
c00056f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056fb:	0f 84 06 01 00 00    	je     c0005807 <f_write+0x19d>
c0005701:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005705:	0f 88 6e 01 00 00    	js     c0005879 <f_write+0x20f>
c000570b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000570f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005712:	89 c8                	mov    eax,ecx
c0005714:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005718:	e8 fa c7 ff ff       	call   c0001f17 <clst2sect>
c000571d:	89 d1                	mov    ecx,edx
c000571f:	09 c1                	or     ecx,eax
c0005721:	0f 84 1c 01 00 00    	je     c0005843 <f_write+0x1d9>
c0005727:	31 ff                	xor    edi,edi
c0005729:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000572d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005731:	01 c6                	add    esi,eax
c0005733:	11 d7                	adc    edi,edx
c0005735:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000573d:	0f 86 63 01 00 00    	jbe    c00058a6 <f_write+0x23c>
c0005743:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005747:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000574b:	c1 e8 09             	shr    eax,0x9
c000574e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005752:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005756:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000575a:	39 c2                	cmp    edx,eax
c000575c:	76 08                	jbe    c0005766 <f_write+0xfc>
c000575e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005762:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005766:	83 ec 0c             	sub    esp,0xc
c0005769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000576d:	57                   	push   edi
c000576e:	56                   	push   esi
c000576f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005773:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005777:	50                   	push   eax
c0005778:	e8 cc c4 ff ff       	call   c0001c49 <disk_write>
c000577d:	83 c4 20             	add    esp,0x20
c0005780:	85 c0                	test   eax,eax
c0005782:	0f 85 ce 00 00 00    	jne    c0005856 <f_write+0x1ec>
c0005788:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000578b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000578e:	29 f0                	sub    eax,esi
c0005790:	19 fa                	sbb    edx,edi
c0005792:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005796:	89 d7                	mov    edi,edx
c0005798:	ba 00 00 00 00       	mov    edx,0x0
c000579d:	89 f9                	mov    ecx,edi
c000579f:	19 d1                	sbb    ecx,edx
c00057a1:	73 1c                	jae    c00057bf <f_write+0x155>
c00057a3:	89 c7                	mov    edi,eax
c00057a5:	b9 00 02 00 00       	mov    ecx,0x200
c00057aa:	c1 e7 09             	shl    edi,0x9
c00057ad:	8d 43 50             	lea    eax,[ebx+0x50]
c00057b0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057b4:	89 fa                	mov    edx,edi
c00057b6:	e8 42 c5 ff ff       	call   c0001cfd <mem_cpy>
c00057bb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057bf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057c3:	c1 e6 09             	shl    esi,0x9
c00057c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ca:	31 ff                	xor    edi,edi
c00057cc:	01 30                	add    DWORD PTR [eax],esi
c00057ce:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057d2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057d6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057df:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057e2:	89 c1                	mov    ecx,eax
c00057e4:	39 f2                	cmp    edx,esi
c00057e6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057e9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057ec:	19 f9                	sbb    ecx,edi
c00057ee:	73 04                	jae    c00057f4 <f_write+0x18a>
c00057f0:	89 f2                	mov    edx,esi
c00057f2:	89 f8                	mov    eax,edi
c00057f4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057f7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057fa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ff:	0f 85 cc fe ff ff    	jne    c00056d1 <f_write+0x67>
c0005805:	eb 2e                	jmp    c0005835 <f_write+0x1cb>
c0005807:	89 c8                	mov    eax,ecx
c0005809:	09 d0                	or     eax,edx
c000580b:	75 0b                	jne    c0005818 <f_write+0x1ae>
c000580d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005810:	31 d2                	xor    edx,edx
c0005812:	85 c0                	test   eax,eax
c0005814:	75 28                	jne    c000583e <f_write+0x1d4>
c0005816:	eb 12                	jmp    c000582a <f_write+0x1c0>
c0005818:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000581c:	74 09                	je     c0005827 <f_write+0x1bd>
c000581e:	89 d8                	mov    eax,ebx
c0005820:	e8 13 c7 ff ff       	call   c0001f38 <clmt_clust>
c0005825:	eb 0a                	jmp    c0005831 <f_write+0x1c7>
c0005827:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000582a:	89 d8                	mov    eax,ebx
c000582c:	e8 a1 da ff ff       	call   c00032d2 <create_chain>
c0005831:	85 c0                	test   eax,eax
c0005833:	75 09                	jne    c000583e <f_write+0x1d4>
c0005835:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005839:	e9 dc 00 00 00       	jmp    c000591a <f_write+0x2b0>
c000583e:	83 f8 01             	cmp    eax,0x1
c0005841:	75 0e                	jne    c0005851 <f_write+0x1e7>
c0005843:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005847:	bd 02 00 00 00       	mov    ebp,0x2
c000584c:	e9 c9 00 00 00       	jmp    c000591a <f_write+0x2b0>
c0005851:	83 f8 ff             	cmp    eax,0xffffffff
c0005854:	75 0e                	jne    c0005864 <f_write+0x1fa>
c0005856:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000585a:	bd 01 00 00 00       	mov    ebp,0x1
c000585f:	e9 b6 00 00 00       	jmp    c000591a <f_write+0x2b0>
c0005864:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005867:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000586b:	0f 85 90 fe ff ff    	jne    c0005701 <f_write+0x97>
c0005871:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005874:	e9 88 fe ff ff       	jmp    c0005701 <f_write+0x97>
c0005879:	83 ec 0c             	sub    esp,0xc
c000587c:	8d 43 50             	lea    eax,[ebx+0x50]
c000587f:	6a 01                	push   0x1
c0005881:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005884:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005887:	50                   	push   eax
c0005888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000588c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005890:	50                   	push   eax
c0005891:	e8 b3 c3 ff ff       	call   c0001c49 <disk_write>
c0005896:	83 c4 20             	add    esp,0x20
c0005899:	85 c0                	test   eax,eax
c000589b:	75 b9                	jne    c0005856 <f_write+0x1ec>
c000589d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00058a1:	e9 65 fe ff ff       	jmp    c000570b <f_write+0xa1>
c00058a6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00058a9:	75 05                	jne    c00058b0 <f_write+0x246>
c00058ab:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00058ae:	74 2e                	je     c00058de <f_write+0x274>
c00058b0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058b6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058b9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058bc:	73 20                	jae    c00058de <f_write+0x274>
c00058be:	83 ec 0c             	sub    esp,0xc
c00058c1:	8d 43 50             	lea    eax,[ebx+0x50]
c00058c4:	6a 01                	push   0x1
c00058c6:	57                   	push   edi
c00058c7:	56                   	push   esi
c00058c8:	50                   	push   eax
c00058c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058cd:	50                   	push   eax
c00058ce:	e8 60 c3 ff ff       	call   c0001c33 <disk_read>
c00058d3:	83 c4 20             	add    esp,0x20
c00058d6:	85 c0                	test   eax,eax
c00058d8:	0f 85 78 ff ff ff    	jne    c0005856 <f_write+0x1ec>
c00058de:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058e1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058e4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058e7:	ba 00 02 00 00       	mov    edx,0x200
c00058ec:	25 ff 01 00 00       	and    eax,0x1ff
c00058f1:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058f5:	29 c2                	sub    edx,eax
c00058f7:	39 d6                	cmp    esi,edx
c00058f9:	76 02                	jbe    c00058fd <f_write+0x293>
c00058fb:	89 d6                	mov    esi,edx
c00058fd:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005901:	89 f1                	mov    ecx,esi
c0005903:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005907:	e8 f1 c3 ff ff       	call   c0001cfd <mem_cpy>
c000590c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005910:	e9 b1 fe ff ff       	jmp    c00057c6 <f_write+0x15c>
c0005915:	bd 07 00 00 00       	mov    ebp,0x7
c000591a:	83 c4 2c             	add    esp,0x2c
c000591d:	89 e8                	mov    eax,ebp
c000591f:	5b                   	pop    ebx
c0005920:	5e                   	pop    esi
c0005921:	5f                   	pop    edi
c0005922:	5d                   	pop    ebp
c0005923:	c3                   	ret    

c0005924 <f_sync>:
c0005924:	56                   	push   esi
c0005925:	53                   	push   ebx
c0005926:	83 ec 64             	sub    esp,0x64
c0005929:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000592d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005931:	89 d8                	mov    eax,ebx
c0005933:	e8 49 ca ff ff       	call   c0002381 <validate>
c0005938:	85 c0                	test   eax,eax
c000593a:	0f 85 ba 01 00 00    	jne    c0005afa <f_sync+0x1d6>
c0005940:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005943:	f6 c2 40             	test   dl,0x40
c0005946:	0f 84 ae 01 00 00    	je     c0005afa <f_sync+0x1d6>
c000594c:	84 d2                	test   dl,dl
c000594e:	79 33                	jns    c0005983 <f_sync+0x5f>
c0005950:	83 ec 0c             	sub    esp,0xc
c0005953:	8d 43 50             	lea    eax,[ebx+0x50]
c0005956:	6a 01                	push   0x1
c0005958:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000595b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000595e:	50                   	push   eax
c000595f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005963:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005967:	50                   	push   eax
c0005968:	e8 dc c2 ff ff       	call   c0001c49 <disk_write>
c000596d:	83 c4 20             	add    esp,0x20
c0005970:	89 c2                	mov    edx,eax
c0005972:	b8 01 00 00 00       	mov    eax,0x1
c0005977:	85 d2                	test   edx,edx
c0005979:	0f 85 7b 01 00 00    	jne    c0005afa <f_sync+0x1d6>
c000597f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005987:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000598a:	0f 85 11 01 00 00    	jne    c0005aa1 <f_sync+0x17d>
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 13 d6 ff ff       	call   c0002faa <fill_first_frag>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 5b 01 00 00    	jne    c0005afa <f_sync+0x1d6>
c000599f:	83 c9 ff             	or     ecx,0xffffffff
c00059a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00059a5:	89 d8                	mov    eax,ebx
c00059a7:	e8 c9 d5 ff ff       	call   c0002f75 <fill_last_frag>
c00059ac:	85 c0                	test   eax,eax
c00059ae:	0f 85 46 01 00 00    	jne    c0005afa <f_sync+0x1d6>
c00059b4:	83 ec 0c             	sub    esp,0xc
c00059b7:	68 60 04 00 00       	push   0x460
c00059bc:	e8 f0 2a 00 00       	call   c00084b1 <ff_memalloc>
c00059c1:	83 c4 10             	add    esp,0x10
c00059c4:	89 c6                	mov    esi,eax
c00059c6:	b8 11 00 00 00       	mov    eax,0x11
c00059cb:	85 f6                	test   esi,esi
c00059cd:	0f 84 27 01 00 00    	je     c0005afa <f_sync+0x1d6>
c00059d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059d7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059dd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059e0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059e3:	89 da                	mov    edx,ebx
c00059e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059e9:	e8 af df ff ff       	call   c000399d <load_obj_xdir>
c00059ee:	85 c0                	test   eax,eax
c00059f0:	0f 85 95 00 00 00    	jne    c0005a8b <f_sync+0x167>
c00059f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059fa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059fd:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005a01:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005a04:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005a07:	83 ca 01             	or     edx,0x1
c0005a0a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005a0d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005a10:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a13:	83 c0 34             	add    eax,0x34
c0005a16:	e8 d9 c2 ff ff       	call   c0001cf4 <st_dword>
c0005a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a22:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a25:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a28:	83 c0 38             	add    eax,0x38
c0005a2b:	e8 c7 c2 ff ff       	call   c0001cf7 <st_qword>
c0005a30:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a37:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a3a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3d:	83 c0 28             	add    eax,0x28
c0005a40:	e8 b2 c2 ff ff       	call   c0001cf7 <st_qword>
c0005a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a49:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a4e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a51:	83 c0 0c             	add    eax,0xc
c0005a54:	e8 9b c2 ff ff       	call   c0001cf4 <st_dword>
c0005a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a5d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a60:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a64:	31 d2                	xor    edx,edx
c0005a66:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a69:	83 c0 10             	add    eax,0x10
c0005a6c:	e8 83 c2 ff ff       	call   c0001cf4 <st_dword>
c0005a71:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a75:	e8 62 e1 ff ff       	call   c0003bdc <store_xdir>
c0005a7a:	85 c0                	test   eax,eax
c0005a7c:	75 0d                	jne    c0005a8b <f_sync+0x167>
c0005a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a82:	e8 00 eb ff ff       	call   c0004587 <sync_fs>
c0005a87:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	56                   	push   esi
c0005a93:	e8 2f 2a 00 00       	call   c00084c7 <ff_memfree>
c0005a98:	83 c4 10             	add    esp,0x10
c0005a9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a9f:	eb 59                	jmp    c0005afa <f_sync+0x1d6>
c0005aa1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005aa4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005aa7:	e8 b0 c9 ff ff       	call   c000245c <move_window>
c0005aac:	85 c0                	test   eax,eax
c0005aae:	75 4a                	jne    c0005afa <f_sync+0x1d6>
c0005ab0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005ab3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005ab7:	89 f2                	mov    edx,esi
c0005ab9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005abc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005abe:	e8 5f f3 ff ff       	call   c0004e22 <st_clust.isra.1>
c0005ac3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ac6:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ac9:	e8 26 c2 ff ff       	call   c0001cf4 <st_dword>
c0005ace:	8d 46 16             	lea    eax,[esi+0x16]
c0005ad1:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ad6:	e8 19 c2 ff ff       	call   c0001cf4 <st_dword>
c0005adb:	8d 46 12             	lea    eax,[esi+0x12]
c0005ade:	31 d2                	xor    edx,edx
c0005ae0:	e8 0b c2 ff ff       	call   c0001cf0 <st_word>
c0005ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ae9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	e8 91 ea ff ff       	call   c0004587 <sync_fs>
c0005af6:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005afa:	83 c4 64             	add    esp,0x64
c0005afd:	5b                   	pop    ebx
c0005afe:	5e                   	pop    esi
c0005aff:	c3                   	ret    

c0005b00 <f_close>:
c0005b00:	53                   	push   ebx
c0005b01:	83 ec 24             	sub    esp,0x24
c0005b04:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005b08:	53                   	push   ebx
c0005b09:	e8 16 fe ff ff       	call   c0005924 <f_sync>
c0005b0e:	83 c4 10             	add    esp,0x10
c0005b11:	85 c0                	test   eax,eax
c0005b13:	75 15                	jne    c0005b2a <f_close+0x2a>
c0005b15:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b19:	89 d8                	mov    eax,ebx
c0005b1b:	e8 61 c8 ff ff       	call   c0002381 <validate>
c0005b20:	85 c0                	test   eax,eax
c0005b22:	75 06                	jne    c0005b2a <f_close+0x2a>
c0005b24:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b2a:	83 c4 18             	add    esp,0x18
c0005b2d:	5b                   	pop    ebx
c0005b2e:	c3                   	ret    

c0005b2f <f_lseek>:
c0005b2f:	55                   	push   ebp
c0005b30:	57                   	push   edi
c0005b31:	56                   	push   esi
c0005b32:	53                   	push   ebx
c0005b33:	83 ec 3c             	sub    esp,0x3c
c0005b36:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b3a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b3e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b42:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b49:	89 d8                	mov    eax,ebx
c0005b4b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b4f:	e8 2d c8 ff ff       	call   c0002381 <validate>
c0005b54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b58:	85 c0                	test   eax,eax
c0005b5a:	0f 85 7a 04 00 00    	jne    c0005fda <f_lseek+0x4ab>
c0005b60:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b68:	85 c0                	test   eax,eax
c0005b6a:	0f 85 6a 04 00 00    	jne    c0005fda <f_lseek+0x4ab>
c0005b70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b74:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b77:	74 0c                	je     c0005b85 <f_lseek+0x56>
c0005b79:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b7c:	85 c0                	test   eax,eax
c0005b7e:	75 1f                	jne    c0005b9f <f_lseek+0x70>
c0005b80:	e9 b5 01 00 00       	jmp    c0005d3a <f_lseek+0x20b>
c0005b85:	83 c9 ff             	or     ecx,0xffffffff
c0005b88:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b8b:	89 d8                	mov    eax,ebx
c0005b8d:	e8 e3 d3 ff ff       	call   c0002f75 <fill_last_frag>
c0005b92:	85 c0                	test   eax,eax
c0005b94:	74 e3                	je     c0005b79 <f_lseek+0x4a>
c0005b96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b9a:	e9 3b 04 00 00       	jmp    c0005fda <f_lseek+0x4ab>
c0005b9f:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005ba4:	0f 85 ac 00 00 00    	jne    c0005c56 <f_lseek+0x127>
c0005baa:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005bae:	0f 85 a2 00 00 00    	jne    c0005c56 <f_lseek+0x127>
c0005bb4:	8d 78 04             	lea    edi,[eax+0x4]
c0005bb7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005bba:	8b 00                	mov    eax,DWORD PTR [eax]
c0005bbc:	be 02 00 00 00       	mov    esi,0x2
c0005bc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bc5:	85 ed                	test   ebp,ebp
c0005bc7:	74 73                	je     c0005c3c <f_lseek+0x10d>
c0005bc9:	89 e9                	mov    ecx,ebp
c0005bcb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bd2:	ff 04 24             	inc    DWORD PTR [esp]
c0005bd5:	89 ca                	mov    edx,ecx
c0005bd7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bdb:	89 d8                	mov    eax,ebx
c0005bdd:	e8 02 d4 ff ff       	call   c0002fe4 <get_fat>
c0005be2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005be6:	83 f8 01             	cmp    eax,0x1
c0005be9:	77 11                	ja     c0005bfc <f_lseek+0xcd>
c0005beb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bef:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bf7:	e9 de 03 00 00       	jmp    c0005fda <f_lseek+0x4ab>
c0005bfc:	83 f8 ff             	cmp    eax,0xffffffff
c0005bff:	75 11                	jne    c0005c12 <f_lseek+0xe3>
c0005c01:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005c05:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005c0d:	e9 c8 03 00 00       	jmp    c0005fda <f_lseek+0x4ab>
c0005c12:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c15:	89 c1                	mov    ecx,eax
c0005c17:	39 c2                	cmp    edx,eax
c0005c19:	74 b7                	je     c0005bd2 <f_lseek+0xa3>
c0005c1b:	83 c6 02             	add    esi,0x2
c0005c1e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c22:	72 0b                	jb     c0005c2f <f_lseek+0x100>
c0005c24:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c27:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c2a:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c2c:	83 c7 08             	add    edi,0x8
c0005c2f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c33:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c36:	76 04                	jbe    c0005c3c <f_lseek+0x10d>
c0005c38:	89 c5                	mov    ebp,eax
c0005c3a:	eb 8d                	jmp    c0005bc9 <f_lseek+0x9a>
c0005c3c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c3f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c43:	89 30                	mov    DWORD PTR [eax],esi
c0005c45:	0f 87 87 03 00 00    	ja     c0005fd2 <f_lseek+0x4a3>
c0005c4b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c51:	e9 84 03 00 00       	jmp    c0005fda <f_lseek+0x4ab>
c0005c56:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c59:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c68:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c73:	73 0f                	jae    c0005c84 <f_lseek+0x155>
c0005c75:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c8c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c8f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c96:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c9a:	0f 84 3a 03 00 00    	je     c0005fda <f_lseek+0x4ab>
c0005ca0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005ca4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005ca8:	83 c6 ff             	add    esi,0xffffffff
c0005cab:	89 d8                	mov    eax,ebx
c0005cad:	83 d7 ff             	adc    edi,0xffffffff
c0005cb0:	89 f2                	mov    edx,esi
c0005cb2:	89 f9                	mov    ecx,edi
c0005cb4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005cb8:	89 34 24             	mov    DWORD PTR [esp],esi
c0005cbb:	e8 78 c2 ff ff       	call   c0001f38 <clmt_clust>
c0005cc0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005cc4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc7:	89 c2                	mov    edx,eax
c0005cc9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ccd:	89 c8                	mov    eax,ecx
c0005ccf:	e8 43 c2 ff ff       	call   c0001f17 <clst2sect>
c0005cd4:	89 d7                	mov    edi,edx
c0005cd6:	09 c7                	or     edi,eax
c0005cd8:	0f 84 0d ff ff ff    	je     c0005beb <f_lseek+0xbc>
c0005cde:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ce2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ce8:	0f 84 ec 02 00 00    	je     c0005fda <f_lseek+0x4ab>
c0005cee:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cf2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cf6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cf9:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cfd:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d01:	4d                   	dec    ebp
c0005d02:	31 ff                	xor    edi,edi
c0005d04:	21 ee                	and    esi,ebp
c0005d06:	01 c6                	add    esi,eax
c0005d08:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d0b:	11 d7                	adc    edi,edx
c0005d0d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d10:	39 fa                	cmp    edx,edi
c0005d12:	75 08                	jne    c0005d1c <f_lseek+0x1ed>
c0005d14:	39 f0                	cmp    eax,esi
c0005d16:	0f 84 be 02 00 00    	je     c0005fda <f_lseek+0x4ab>
c0005d1c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d1f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d23:	0f 89 80 02 00 00    	jns    c0005fa9 <f_lseek+0x47a>
c0005d29:	83 ec 0c             	sub    esp,0xc
c0005d2c:	6a 01                	push   0x1
c0005d2e:	52                   	push   edx
c0005d2f:	50                   	push   eax
c0005d30:	55                   	push   ebp
c0005d31:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d35:	e9 5a 02 00 00       	jmp    c0005f94 <f_lseek+0x465>
c0005d3a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d3e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d41:	74 16                	je     c0005d59 <f_lseek+0x22a>
c0005d43:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d48:	76 0f                	jbe    c0005d59 <f_lseek+0x22a>
c0005d4a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d59:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d5c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d5f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d62:	89 c7                	mov    edi,eax
c0005d64:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d68:	73 0d                	jae    c0005d77 <f_lseek+0x248>
c0005d6a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d6e:	75 07                	jne    c0005d77 <f_lseek+0x248>
c0005d70:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d77:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d7a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d7d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d81:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d88:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d8f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d92:	75 09                	jne    c0005d9d <f_lseek+0x26e>
c0005d94:	31 f6                	xor    esi,esi
c0005d96:	31 ff                	xor    edi,edi
c0005d98:	e9 af 01 00 00       	jmp    c0005f4c <f_lseek+0x41d>
c0005d9d:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005da1:	89 d7                	mov    edi,edx
c0005da3:	c1 e1 09             	shl    ecx,0x9
c0005da6:	09 c7                	or     edi,eax
c0005da8:	89 cd                	mov    ebp,ecx
c0005daa:	74 6d                	je     c0005e19 <f_lseek+0x2ea>
c0005dac:	83 c0 ff             	add    eax,0xffffffff
c0005daf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005db3:	83 d2 ff             	adc    edx,0xffffffff
c0005db6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005db9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005dbd:	83 c0 ff             	add    eax,0xffffffff
c0005dc0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005dc4:	83 d2 ff             	adc    edx,0xffffffff
c0005dc7:	31 ff                	xor    edi,edi
c0005dc9:	57                   	push   edi
c0005dca:	51                   	push   ecx
c0005dcb:	52                   	push   edx
c0005dcc:	50                   	push   eax
c0005dcd:	e8 3a 89 01 00       	call   c001e70c <__udivdi3>
c0005dd2:	83 c4 10             	add    esp,0x10
c0005dd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dd9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ddd:	57                   	push   edi
c0005dde:	55                   	push   ebp
c0005ddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005de3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005de7:	e8 20 89 01 00       	call   c001e70c <__udivdi3>
c0005dec:	83 c4 10             	add    esp,0x10
c0005def:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005df3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005df7:	19 d1                	sbb    ecx,edx
c0005df9:	72 1e                	jb     c0005e19 <f_lseek+0x2ea>
c0005dfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dff:	89 e9                	mov    ecx,ebp
c0005e01:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005e04:	f7 d9                	neg    ecx
c0005e06:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005e09:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005e0d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005e10:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e13:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e17:	eb 28                	jmp    c0005e41 <f_lseek+0x312>
c0005e19:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e1c:	85 c0                	test   eax,eax
c0005e1e:	75 1e                	jne    c0005e3e <f_lseek+0x30f>
c0005e20:	31 d2                	xor    edx,edx
c0005e22:	89 d8                	mov    eax,ebx
c0005e24:	e8 a9 d4 ff ff       	call   c00032d2 <create_chain>
c0005e29:	83 f8 01             	cmp    eax,0x1
c0005e2c:	0f 84 b9 fd ff ff    	je     c0005beb <f_lseek+0xbc>
c0005e32:	83 f8 ff             	cmp    eax,0xffffffff
c0005e35:	0f 84 c6 fd ff ff    	je     c0005c01 <f_lseek+0xd2>
c0005e3b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e3e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e41:	85 c0                	test   eax,eax
c0005e43:	0f 84 4b ff ff ff    	je     c0005d94 <f_lseek+0x265>
c0005e49:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e4d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e55:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e58:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e5c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e5f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e62:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e66:	0f 83 9d 00 00 00    	jae    c0005f09 <f_lseek+0x3da>
c0005e6c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e70:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e74:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e77:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e7b:	01 f2                	add    edx,esi
c0005e7d:	11 f9                	adc    ecx,edi
c0005e7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e83:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e87:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e8a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e8d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e90:	f6 c1 02             	test   cl,0x2
c0005e93:	74 35                	je     c0005eca <f_lseek+0x39b>
c0005e95:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e99:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e9c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e9f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ea3:	73 16                	jae    c0005ebb <f_lseek+0x38c>
c0005ea5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005ea9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005ead:	88 ca                	mov    dl,cl
c0005eaf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005eb2:	83 ca 40             	or     edx,0x40
c0005eb5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005eb8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ebb:	89 c2                	mov    edx,eax
c0005ebd:	89 d8                	mov    eax,ebx
c0005ebf:	e8 0e d4 ff ff       	call   c00032d2 <create_chain>
c0005ec4:	85 c0                	test   eax,eax
c0005ec6:	75 0b                	jne    c0005ed3 <f_lseek+0x3a4>
c0005ec8:	eb 30                	jmp    c0005efa <f_lseek+0x3cb>
c0005eca:	89 c2                	mov    edx,eax
c0005ecc:	89 d8                	mov    eax,ebx
c0005ece:	e8 11 d1 ff ff       	call   c0002fe4 <get_fat>
c0005ed3:	83 f8 ff             	cmp    eax,0xffffffff
c0005ed6:	0f 84 25 fd ff ff    	je     c0005c01 <f_lseek+0xd2>
c0005edc:	83 f8 01             	cmp    eax,0x1
c0005edf:	0f 86 06 fd ff ff    	jbe    c0005beb <f_lseek+0xbc>
c0005ee5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ee9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005eec:	0f 86 f9 fc ff ff    	jbe    c0005beb <f_lseek+0xbc>
c0005ef2:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ef5:	e9 5b ff ff ff       	jmp    c0005e55 <f_lseek+0x326>
c0005efa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005f01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005f09:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005f0c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005f10:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f13:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f16:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f19:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f1f:	0f 84 6f fe ff ff    	je     c0005d94 <f_lseek+0x265>
c0005f25:	89 c2                	mov    edx,eax
c0005f27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f2b:	e8 e7 bf ff ff       	call   c0001f17 <clst2sect>
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	09 c7                	or     edi,eax
c0005f34:	0f 84 b1 fc ff ff    	je     c0005beb <f_lseek+0xbc>
c0005f3a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f3e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f41:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f45:	c1 ef 09             	shr    edi,0x9
c0005f48:	01 c6                	add    esi,eax
c0005f4a:	11 d7                	adc    edi,edx
c0005f4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f52:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f55:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f58:	19 d1                	sbb    ecx,edx
c0005f5a:	73 0a                	jae    c0005f66 <f_lseek+0x437>
c0005f5c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f5f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f62:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f66:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f6b:	74 6d                	je     c0005fda <f_lseek+0x4ab>
c0005f6d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f70:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f73:	39 fa                	cmp    edx,edi
c0005f75:	75 04                	jne    c0005f7b <f_lseek+0x44c>
c0005f77:	39 f0                	cmp    eax,esi
c0005f79:	74 5f                	je     c0005fda <f_lseek+0x4ab>
c0005f7b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f7e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f82:	79 25                	jns    c0005fa9 <f_lseek+0x47a>
c0005f84:	83 ec 0c             	sub    esp,0xc
c0005f87:	6a 01                	push   0x1
c0005f89:	52                   	push   edx
c0005f8a:	50                   	push   eax
c0005f8b:	55                   	push   ebp
c0005f8c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f90:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f94:	50                   	push   eax
c0005f95:	e8 af bc ff ff       	call   c0001c49 <disk_write>
c0005f9a:	83 c4 20             	add    esp,0x20
c0005f9d:	85 c0                	test   eax,eax
c0005f9f:	0f 85 5c fc ff ff    	jne    c0005c01 <f_lseek+0xd2>
c0005fa5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005fa9:	83 ec 0c             	sub    esp,0xc
c0005fac:	6a 01                	push   0x1
c0005fae:	57                   	push   edi
c0005faf:	56                   	push   esi
c0005fb0:	55                   	push   ebp
c0005fb1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fb5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fb9:	50                   	push   eax
c0005fba:	e8 74 bc ff ff       	call   c0001c33 <disk_read>
c0005fbf:	83 c4 20             	add    esp,0x20
c0005fc2:	85 c0                	test   eax,eax
c0005fc4:	0f 85 37 fc ff ff    	jne    c0005c01 <f_lseek+0xd2>
c0005fca:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fcd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fd0:	eb 08                	jmp    c0005fda <f_lseek+0x4ab>
c0005fd2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fde:	83 c4 3c             	add    esp,0x3c
c0005fe1:	5b                   	pop    ebx
c0005fe2:	5e                   	pop    esi
c0005fe3:	5f                   	pop    edi
c0005fe4:	5d                   	pop    ebp
c0005fe5:	c3                   	ret    

c0005fe6 <f_opendir>:
c0005fe6:	56                   	push   esi
c0005fe7:	b8 09 00 00 00       	mov    eax,0x9
c0005fec:	53                   	push   ebx
c0005fed:	83 ec 24             	sub    esp,0x24
c0005ff0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff4:	85 db                	test   ebx,ebx
c0005ff6:	0f 84 e6 00 00 00    	je     c00060e2 <f_opendir+0xfc>
c0005ffc:	31 c9                	xor    ecx,ecx
c0005ffe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006002:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006006:	e8 03 c7 ff ff       	call   c000270e <mount_volume>
c000600b:	85 c0                	test   eax,eax
c000600d:	0f 85 c9 00 00 00    	jne    c00060dc <f_opendir+0xf6>
c0006013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006017:	83 ec 0c             	sub    esp,0xc
c000601a:	89 03                	mov    DWORD PTR [ebx],eax
c000601c:	68 60 04 00 00       	push   0x460
c0006021:	e8 8b 24 00 00       	call   c00084b1 <ff_memalloc>
c0006026:	83 c4 10             	add    esp,0x10
c0006029:	89 c6                	mov    esi,eax
c000602b:	b8 11 00 00 00       	mov    eax,0x11
c0006030:	85 f6                	test   esi,esi
c0006032:	0f 84 aa 00 00 00    	je     c00060e2 <f_opendir+0xfc>
c0006038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000603c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006042:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006045:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006048:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000604c:	89 d8                	mov    eax,ebx
c000604e:	e8 31 ee ff ff       	call   c0004e84 <follow_path>
c0006053:	85 c0                	test   eax,eax
c0006055:	75 61                	jne    c00060b8 <f_opendir+0xd2>
c0006057:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000605b:	78 46                	js     c00060a3 <f_opendir+0xbd>
c000605d:	b8 05 00 00 00       	mov    eax,0x5
c0006062:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006066:	74 50                	je     c00060b8 <f_opendir+0xd2>
c0006068:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000606c:	8a 01                	mov    al,BYTE PTR [ecx]
c000606e:	3c 04                	cmp    al,0x4
c0006070:	75 26                	jne    c0006098 <f_opendir+0xb2>
c0006072:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006075:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006078:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000607b:	30 d2                	xor    dl,dl
c000607d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006081:	09 c2                	or     edx,eax
c0006083:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006086:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006089:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000608c:	89 da                	mov    edx,ebx
c000608e:	8d 41 10             	lea    eax,[ecx+0x10]
c0006091:	e8 b4 ed ff ff       	call   c0004e4a <init_alloc_info.isra.2>
c0006096:	eb 0b                	jmp    c00060a3 <f_opendir+0xbd>
c0006098:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000609b:	e8 59 ed ff ff       	call   c0004df9 <ld_clust.isra.0>
c00060a0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00060a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a7:	31 d2                	xor    edx,edx
c00060a9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00060ad:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00060b1:	89 d8                	mov    eax,ebx
c00060b3:	e8 22 d1 ff ff       	call   c00031da <dir_sdi>
c00060b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060bc:	83 ec 0c             	sub    esp,0xc
c00060bf:	56                   	push   esi
c00060c0:	e8 02 24 00 00       	call   c00084c7 <ff_memfree>
c00060c5:	83 c4 10             	add    esp,0x10
c00060c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060cc:	83 f8 04             	cmp    eax,0x4
c00060cf:	74 06                	je     c00060d7 <f_opendir+0xf1>
c00060d1:	85 c0                	test   eax,eax
c00060d3:	74 0d                	je     c00060e2 <f_opendir+0xfc>
c00060d5:	eb 05                	jmp    c00060dc <f_opendir+0xf6>
c00060d7:	b8 05 00 00 00       	mov    eax,0x5
c00060dc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e2:	83 c4 24             	add    esp,0x24
c00060e5:	5b                   	pop    ebx
c00060e6:	5e                   	pop    esi
c00060e7:	c3                   	ret    

c00060e8 <f_closedir>:
c00060e8:	53                   	push   ebx
c00060e9:	83 ec 18             	sub    esp,0x18
c00060ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060f0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060f4:	89 d8                	mov    eax,ebx
c00060f6:	e8 86 c2 ff ff       	call   c0002381 <validate>
c00060fb:	85 c0                	test   eax,eax
c00060fd:	75 06                	jne    c0006105 <f_closedir+0x1d>
c00060ff:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0006105:	83 c4 18             	add    esp,0x18
c0006108:	5b                   	pop    ebx
c0006109:	c3                   	ret    

c000610a <f_readdir>:
c000610a:	57                   	push   edi
c000610b:	56                   	push   esi
c000610c:	53                   	push   ebx
c000610d:	83 ec 20             	sub    esp,0x20
c0006110:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006114:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006118:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 5e c2 ff ff       	call   c0002381 <validate>
c0006123:	85 c0                	test   eax,eax
c0006125:	75 77                	jne    c000619e <f_readdir+0x94>
c0006127:	85 ff                	test   edi,edi
c0006129:	75 0b                	jne    c0006136 <f_readdir+0x2c>
c000612b:	31 d2                	xor    edx,edx
c000612d:	89 d8                	mov    eax,ebx
c000612f:	e8 a6 d0 ff ff       	call   c00031da <dir_sdi>
c0006134:	eb 68                	jmp    c000619e <f_readdir+0x94>
c0006136:	83 ec 0c             	sub    esp,0xc
c0006139:	68 60 04 00 00       	push   0x460
c000613e:	e8 6e 23 00 00       	call   c00084b1 <ff_memalloc>
c0006143:	83 c4 10             	add    esp,0x10
c0006146:	89 c6                	mov    esi,eax
c0006148:	b8 11 00 00 00       	mov    eax,0x11
c000614d:	85 f6                	test   esi,esi
c000614f:	74 4d                	je     c000619e <f_readdir+0x94>
c0006151:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006155:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000615b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000615e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006161:	31 d2                	xor    edx,edx
c0006163:	89 d8                	mov    eax,ebx
c0006165:	e8 80 d8 ff ff       	call   c00039ea <dir_read>
c000616a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000616f:	75 19                	jne    c000618a <f_readdir+0x80>
c0006171:	89 fa                	mov    edx,edi
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7e ea ff ff       	call   c0004bf8 <get_fileinfo>
c000617a:	31 d2                	xor    edx,edx
c000617c:	89 d8                	mov    eax,ebx
c000617e:	e8 af d5 ff ff       	call   c0003732 <dir_next>
c0006183:	83 f8 04             	cmp    eax,0x4
c0006186:	75 02                	jne    c000618a <f_readdir+0x80>
c0006188:	31 c0                	xor    eax,eax
c000618a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000618e:	83 ec 0c             	sub    esp,0xc
c0006191:	56                   	push   esi
c0006192:	e8 30 23 00 00       	call   c00084c7 <ff_memfree>
c0006197:	83 c4 10             	add    esp,0x10
c000619a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000619e:	83 c4 20             	add    esp,0x20
c00061a1:	5b                   	pop    ebx
c00061a2:	5e                   	pop    esi
c00061a3:	5f                   	pop    edi
c00061a4:	c3                   	ret    

c00061a5 <f_stat>:
c00061a5:	57                   	push   edi
c00061a6:	31 c9                	xor    ecx,ecx
c00061a8:	56                   	push   esi
c00061a9:	53                   	push   ebx
c00061aa:	83 ec 50             	sub    esp,0x50
c00061ad:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00061b1:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061b5:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061b9:	e8 50 c5 ff ff       	call   c000270e <mount_volume>
c00061be:	89 c3                	mov    ebx,eax
c00061c0:	85 c0                	test   eax,eax
c00061c2:	75 67                	jne    c000622b <f_stat+0x86>
c00061c4:	83 ec 0c             	sub    esp,0xc
c00061c7:	bb 11 00 00 00       	mov    ebx,0x11
c00061cc:	68 60 04 00 00       	push   0x460
c00061d1:	e8 db 22 00 00       	call   c00084b1 <ff_memalloc>
c00061d6:	83 c4 10             	add    esp,0x10
c00061d9:	89 c6                	mov    esi,eax
c00061db:	85 c0                	test   eax,eax
c00061dd:	74 4c                	je     c000622b <f_stat+0x86>
c00061df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061e3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061e9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061ec:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061ef:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061f3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f7:	e8 88 ec ff ff       	call   c0004e84 <follow_path>
c00061fc:	89 c3                	mov    ebx,eax
c00061fe:	85 c0                	test   eax,eax
c0006200:	75 1d                	jne    c000621f <f_stat+0x7a>
c0006202:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0006207:	78 11                	js     c000621a <f_stat+0x75>
c0006209:	85 ff                	test   edi,edi
c000620b:	74 12                	je     c000621f <f_stat+0x7a>
c000620d:	89 fa                	mov    edx,edi
c000620f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006213:	e8 e0 e9 ff ff       	call   c0004bf8 <get_fileinfo>
c0006218:	eb 05                	jmp    c000621f <f_stat+0x7a>
c000621a:	bb 06 00 00 00       	mov    ebx,0x6
c000621f:	83 ec 0c             	sub    esp,0xc
c0006222:	56                   	push   esi
c0006223:	e8 9f 22 00 00       	call   c00084c7 <ff_memfree>
c0006228:	83 c4 10             	add    esp,0x10
c000622b:	83 c4 50             	add    esp,0x50
c000622e:	89 d8                	mov    eax,ebx
c0006230:	5b                   	pop    ebx
c0006231:	5e                   	pop    esi
c0006232:	5f                   	pop    edi
c0006233:	c3                   	ret    

c0006234 <f_getfree>:
c0006234:	55                   	push   ebp
c0006235:	31 c9                	xor    ecx,ecx
c0006237:	57                   	push   edi
c0006238:	56                   	push   esi
c0006239:	53                   	push   ebx
c000623a:	83 ec 5c             	sub    esp,0x5c
c000623d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006241:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006245:	e8 c4 c4 ff ff       	call   c000270e <mount_volume>
c000624a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000624e:	85 c0                	test   eax,eax
c0006250:	0f 85 9d 01 00 00    	jne    c00063f3 <f_getfree+0x1bf>
c0006256:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000625e:	89 02                	mov    DWORD PTR [edx],eax
c0006260:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006263:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006266:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006269:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000626d:	39 f2                	cmp    edx,esi
c000626f:	77 0b                	ja     c000627c <f_getfree+0x48>
c0006271:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006275:	89 10                	mov    DWORD PTR [eax],edx
c0006277:	e9 77 01 00 00       	jmp    c00063f3 <f_getfree+0x1bf>
c000627c:	8a 10                	mov    dl,BYTE PTR [eax]
c000627e:	80 fa 01             	cmp    dl,0x1
c0006281:	75 3a                	jne    c00062bd <f_getfree+0x89>
c0006283:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006287:	be 02 00 00 00       	mov    esi,0x2
c000628c:	31 db                	xor    ebx,ebx
c000628e:	89 f2                	mov    edx,esi
c0006290:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006294:	e8 4b cd ff ff       	call   c0002fe4 <get_fat>
c0006299:	83 f8 ff             	cmp    eax,0xffffffff
c000629c:	0f 84 28 01 00 00    	je     c00063ca <f_getfree+0x196>
c00062a2:	83 f8 01             	cmp    eax,0x1
c00062a5:	0f 84 29 01 00 00    	je     c00063d4 <f_getfree+0x1a0>
c00062ab:	83 d3 00             	adc    ebx,0x0
c00062ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062b2:	46                   	inc    esi
c00062b3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062b6:	77 d6                	ja     c000628e <f_getfree+0x5a>
c00062b8:	e9 25 01 00 00       	jmp    c00063e2 <f_getfree+0x1ae>
c00062bd:	80 fa 04             	cmp    dl,0x4
c00062c0:	0f 85 88 00 00 00    	jne    c000634e <f_getfree+0x11a>
c00062c6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062c9:	31 ed                	xor    ebp,ebp
c00062cb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062d6:	31 db                	xor    ebx,ebx
c00062d8:	85 ed                	test   ebp,ebp
c00062da:	75 3f                	jne    c000631b <f_getfree+0xe7>
c00062dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062e4:	83 c0 01             	add    eax,0x1
c00062e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062eb:	83 d2 00             	adc    edx,0x0
c00062ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062fe:	e8 59 c1 ff ff       	call   c000245c <move_window>
c0006303:	85 c0                	test   eax,eax
c0006305:	0f 85 d3 00 00 00    	jne    c00063de <f_getfree+0x1aa>
c000630b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000630f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006313:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006317:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000631b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000631f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006322:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006326:	89 cf                	mov    edi,ecx
c0006328:	85 f6                	test   esi,esi
c000632a:	74 12                	je     c000633e <f_getfree+0x10a>
c000632c:	88 c1                	mov    cl,al
c000632e:	83 e1 01             	and    ecx,0x1
c0006331:	80 f9 01             	cmp    cl,0x1
c0006334:	83 d3 00             	adc    ebx,0x0
c0006337:	d0 e8                	shr    al,1
c0006339:	4e                   	dec    esi
c000633a:	39 fe                	cmp    esi,edi
c000633c:	75 ea                	jne    c0006328 <f_getfree+0xf4>
c000633e:	45                   	inc    ebp
c000633f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006345:	85 f6                	test   esi,esi
c0006347:	75 8f                	jne    c00062d8 <f_getfree+0xa4>
c0006349:	e9 94 00 00 00       	jmp    c00063e2 <f_getfree+0x1ae>
c000634e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006351:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006354:	31 f6                	xor    esi,esi
c0006356:	31 db                	xor    ebx,ebx
c0006358:	85 f6                	test   esi,esi
c000635a:	75 1b                	jne    c0006377 <f_getfree+0x143>
c000635c:	89 d7                	mov    edi,edx
c000635e:	89 cd                	mov    ebp,ecx
c0006360:	83 c7 01             	add    edi,0x1
c0006363:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006367:	83 d5 00             	adc    ebp,0x0
c000636a:	e8 ed c0 ff ff       	call   c000245c <move_window>
c000636f:	85 c0                	test   eax,eax
c0006371:	75 6b                	jne    c00063de <f_getfree+0x1aa>
c0006373:	89 fa                	mov    edx,edi
c0006375:	89 e9                	mov    ecx,ebp
c0006377:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000637b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000637f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006383:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006386:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000638a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000638e:	75 11                	jne    c00063a1 <f_getfree+0x16d>
c0006390:	e8 e9 b8 ff ff       	call   c0001c7e <ld_word>
c0006395:	66 83 f8 01          	cmp    ax,0x1
c0006399:	83 d3 00             	adc    ebx,0x0
c000639c:	83 c6 02             	add    esi,0x2
c000639f:	eb 13                	jmp    c00063b4 <f_getfree+0x180>
c00063a1:	e8 e5 b8 ff ff       	call   c0001c8b <ld_dword>
c00063a6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00063ab:	83 f8 01             	cmp    eax,0x1
c00063ae:	83 d3 00             	adc    ebx,0x0
c00063b1:	83 c6 04             	add    esi,0x4
c00063b4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063be:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063c2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063c6:	75 90                	jne    c0006358 <f_getfree+0x124>
c00063c8:	eb 18                	jmp    c00063e2 <f_getfree+0x1ae>
c00063ca:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063d2:	eb 0e                	jmp    c00063e2 <f_getfree+0x1ae>
c00063d4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063dc:	eb 04                	jmp    c00063e2 <f_getfree+0x1ae>
c00063de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063e6:	89 18                	mov    DWORD PTR [eax],ebx
c00063e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063ec:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063ef:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f7:	83 c4 5c             	add    esp,0x5c
c00063fa:	5b                   	pop    ebx
c00063fb:	5e                   	pop    esi
c00063fc:	5f                   	pop    edi
c00063fd:	5d                   	pop    ebp
c00063fe:	c3                   	ret    

c00063ff <f_truncate>:
c00063ff:	56                   	push   esi
c0006400:	53                   	push   ebx
c0006401:	83 ec 14             	sub    esp,0x14
c0006404:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006408:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 6e bf ff ff       	call   c0002381 <validate>
c0006413:	89 c6                	mov    esi,eax
c0006415:	85 c0                	test   eax,eax
c0006417:	0f 85 d2 00 00 00    	jne    c00064ef <f_truncate+0xf0>
c000641d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006421:	85 f6                	test   esi,esi
c0006423:	0f 85 c6 00 00 00    	jne    c00064ef <f_truncate+0xf0>
c0006429:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000642d:	0f 84 b7 00 00 00    	je     c00064ea <f_truncate+0xeb>
c0006433:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006436:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006439:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000643c:	89 d1                	mov    ecx,edx
c000643e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006441:	0f 83 a8 00 00 00    	jae    c00064ef <f_truncate+0xf0>
c0006447:	09 c2                	or     edx,eax
c0006449:	75 15                	jne    c0006460 <f_truncate+0x61>
c000644b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000644e:	31 c9                	xor    ecx,ecx
c0006450:	89 d8                	mov    eax,ebx
c0006452:	e8 7a d0 ff ff       	call   c00034d1 <remove_chain>
c0006457:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000645e:	eb 35                	jmp    c0006495 <f_truncate+0x96>
c0006460:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006463:	89 d8                	mov    eax,ebx
c0006465:	e8 7a cb ff ff       	call   c0002fe4 <get_fat>
c000646a:	89 c2                	mov    edx,eax
c000646c:	b8 01 00 00 00       	mov    eax,0x1
c0006471:	83 fa ff             	cmp    edx,0xffffffff
c0006474:	74 1f                	je     c0006495 <f_truncate+0x96>
c0006476:	b8 02 00 00 00       	mov    eax,0x2
c000647b:	83 fa 01             	cmp    edx,0x1
c000647e:	74 15                	je     c0006495 <f_truncate+0x96>
c0006480:	31 c0                	xor    eax,eax
c0006482:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006486:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006489:	76 0a                	jbe    c0006495 <f_truncate+0x96>
c000648b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000648e:	89 d8                	mov    eax,ebx
c0006490:	e8 3c d0 ff ff       	call   c00034d1 <remove_chain>
c0006495:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006498:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000649b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000649e:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00064a1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00064a4:	83 ca 40             	or     edx,0x40
c00064a7:	85 c0                	test   eax,eax
c00064a9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00064ac:	75 35                	jne    c00064e3 <f_truncate+0xe4>
c00064ae:	84 d2                	test   dl,dl
c00064b0:	79 3d                	jns    c00064ef <f_truncate+0xf0>
c00064b2:	83 ec 0c             	sub    esp,0xc
c00064b5:	8d 43 50             	lea    eax,[ebx+0x50]
c00064b8:	6a 01                	push   0x1
c00064ba:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064bd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064c0:	50                   	push   eax
c00064c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064c9:	50                   	push   eax
c00064ca:	e8 7a b7 ff ff       	call   c0001c49 <disk_write>
c00064cf:	83 c4 20             	add    esp,0x20
c00064d2:	85 c0                	test   eax,eax
c00064d4:	75 08                	jne    c00064de <f_truncate+0xdf>
c00064d6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064da:	31 f6                	xor    esi,esi
c00064dc:	eb 11                	jmp    c00064ef <f_truncate+0xf0>
c00064de:	b8 01 00 00 00       	mov    eax,0x1
c00064e3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064e6:	89 c6                	mov    esi,eax
c00064e8:	eb 05                	jmp    c00064ef <f_truncate+0xf0>
c00064ea:	be 07 00 00 00       	mov    esi,0x7
c00064ef:	89 f0                	mov    eax,esi
c00064f1:	83 c4 14             	add    esp,0x14
c00064f4:	5b                   	pop    ebx
c00064f5:	5e                   	pop    esi
c00064f6:	c3                   	ret    

c00064f7 <f_unlink>:
c00064f7:	56                   	push   esi
c00064f8:	b9 02 00 00 00       	mov    ecx,0x2
c00064fd:	53                   	push   ebx
c00064fe:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006504:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006508:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000650f:	e8 fa c1 ff ff       	call   c000270e <mount_volume>
c0006514:	85 c0                	test   eax,eax
c0006516:	0f 85 55 01 00 00    	jne    c0006671 <f_unlink+0x17a>
c000651c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006520:	83 ec 0c             	sub    esp,0xc
c0006523:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006527:	68 60 04 00 00       	push   0x460
c000652c:	e8 80 1f 00 00       	call   c00084b1 <ff_memalloc>
c0006531:	83 c4 10             	add    esp,0x10
c0006534:	89 c3                	mov    ebx,eax
c0006536:	b8 11 00 00 00       	mov    eax,0x11
c000653b:	85 db                	test   ebx,ebx
c000653d:	0f 84 2e 01 00 00    	je     c0006671 <f_unlink+0x17a>
c0006543:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006547:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000654d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006550:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006553:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000655a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000655e:	e8 21 e9 ff ff       	call   c0004e84 <follow_path>
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 f2 00 00 00    	jne    c000665d <f_unlink+0x166>
c000656b:	b8 06 00 00 00       	mov    eax,0x6
c0006570:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006578:	0f 88 df 00 00 00    	js     c000665d <f_unlink+0x166>
c000657e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006583:	74 0a                	je     c000658f <f_unlink+0x98>
c0006585:	b8 07 00 00 00       	mov    eax,0x7
c000658a:	e9 ce 00 00 00       	jmp    c000665d <f_unlink+0x166>
c000658f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006593:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006597:	8a 02                	mov    al,BYTE PTR [edx]
c0006599:	3c 04                	cmp    al,0x4
c000659b:	75 12                	jne    c00065af <f_unlink+0xb8>
c000659d:	8d 42 10             	lea    eax,[edx+0x10]
c00065a0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00065a4:	e8 a1 e8 ff ff       	call   c0004e4a <init_alloc_info.isra.2>
c00065a9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00065ad:	eb 0e                	jmp    c00065bd <f_unlink+0xc6>
c00065af:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065b6:	e8 3e e8 ff ff       	call   c0004df9 <ld_clust.isra.0>
c00065bb:	89 c6                	mov    esi,eax
c00065bd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065c2:	75 12                	jne    c00065d6 <f_unlink+0xdf>
c00065c4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065c8:	e8 94 d6 ff ff       	call   c0003c61 <dir_remove>
c00065cd:	85 c0                	test   eax,eax
c00065cf:	74 6c                	je     c000663d <f_unlink+0x146>
c00065d1:	e9 87 00 00 00       	jmp    c000665d <f_unlink+0x166>
c00065d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065da:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065e1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065eb:	75 21                	jne    c000660e <f_unlink+0x117>
c00065ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065f5:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065fc:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006603:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006607:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000660e:	31 d2                	xor    edx,edx
c0006610:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006617:	e8 be cb ff ff       	call   c00031da <dir_sdi>
c000661c:	85 c0                	test   eax,eax
c000661e:	75 3d                	jne    c000665d <f_unlink+0x166>
c0006620:	31 d2                	xor    edx,edx
c0006622:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006629:	e8 bc d3 ff ff       	call   c00039ea <dir_read>
c000662e:	85 c0                	test   eax,eax
c0006630:	0f 84 4f ff ff ff    	je     c0006585 <f_unlink+0x8e>
c0006636:	83 f8 04             	cmp    eax,0x4
c0006639:	75 22                	jne    c000665d <f_unlink+0x166>
c000663b:	eb 87                	jmp    c00065c4 <f_unlink+0xcd>
c000663d:	85 f6                	test   esi,esi
c000663f:	75 0b                	jne    c000664c <f_unlink+0x155>
c0006641:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006645:	e8 3d df ff ff       	call   c0004587 <sync_fs>
c000664a:	eb 11                	jmp    c000665d <f_unlink+0x166>
c000664c:	31 c9                	xor    ecx,ecx
c000664e:	89 f2                	mov    edx,esi
c0006650:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006654:	e8 78 ce ff ff       	call   c00034d1 <remove_chain>
c0006659:	85 c0                	test   eax,eax
c000665b:	74 e4                	je     c0006641 <f_unlink+0x14a>
c000665d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006661:	83 ec 0c             	sub    esp,0xc
c0006664:	53                   	push   ebx
c0006665:	e8 5d 1e 00 00       	call   c00084c7 <ff_memfree>
c000666a:	83 c4 10             	add    esp,0x10
c000666d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006671:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006677:	5b                   	pop    ebx
c0006678:	5e                   	pop    esi
c0006679:	c3                   	ret    

c000667a <f_mkdir>:
c000667a:	57                   	push   edi
c000667b:	b9 02 00 00 00       	mov    ecx,0x2
c0006680:	56                   	push   esi
c0006681:	53                   	push   ebx
c0006682:	83 c4 80             	add    esp,0xffffff80
c0006685:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006689:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006690:	e8 79 c0 ff ff       	call   c000270e <mount_volume>
c0006695:	89 c3                	mov    ebx,eax
c0006697:	85 c0                	test   eax,eax
c0006699:	0f 85 fe 01 00 00    	jne    c000689d <f_mkdir+0x223>
c000669f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a3:	bb 11 00 00 00       	mov    ebx,0x11
c00066a8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00066ac:	83 ec 0c             	sub    esp,0xc
c00066af:	68 60 04 00 00       	push   0x460
c00066b4:	e8 f8 1d 00 00       	call   c00084b1 <ff_memalloc>
c00066b9:	83 c4 10             	add    esp,0x10
c00066bc:	89 c7                	mov    edi,eax
c00066be:	85 c0                	test   eax,eax
c00066c0:	0f 84 d7 01 00 00    	je     c000689d <f_mkdir+0x223>
c00066c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ca:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066d0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066d3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066d6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066e1:	e8 9e e7 ff ff       	call   c0004e84 <follow_path>
c00066e6:	89 c3                	mov    ebx,eax
c00066e8:	85 c0                	test   eax,eax
c00066ea:	74 3e                	je     c000672a <f_mkdir+0xb0>
c00066ec:	83 f8 04             	cmp    eax,0x4
c00066ef:	75 3e                	jne    c000672f <f_mkdir+0xb5>
c00066f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f5:	31 d2                	xor    edx,edx
c00066f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ff:	e8 ce cb ff ff       	call   c00032d2 <create_chain>
c0006704:	89 c6                	mov    esi,eax
c0006706:	85 c0                	test   eax,eax
c0006708:	74 0c                	je     c0006716 <f_mkdir+0x9c>
c000670a:	bb 02 00 00 00       	mov    ebx,0x2
c000670f:	83 f8 01             	cmp    eax,0x1
c0006712:	74 07                	je     c000671b <f_mkdir+0xa1>
c0006714:	eb 2a                	jmp    c0006740 <f_mkdir+0xc6>
c0006716:	bb 07 00 00 00       	mov    ebx,0x7
c000671b:	31 c9                	xor    ecx,ecx
c000671d:	89 f2                	mov    edx,esi
c000671f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006723:	e8 a9 cd ff ff       	call   c00034d1 <remove_chain>
c0006728:	eb 05                	jmp    c000672f <f_mkdir+0xb5>
c000672a:	bb 08 00 00 00       	mov    ebx,0x8
c000672f:	83 ec 0c             	sub    esp,0xc
c0006732:	57                   	push   edi
c0006733:	e8 8f 1d 00 00       	call   c00084c7 <ff_memfree>
c0006738:	83 c4 10             	add    esp,0x10
c000673b:	e9 5d 01 00 00       	jmp    c000689d <f_mkdir+0x223>
c0006740:	bb 01 00 00 00       	mov    ebx,0x1
c0006745:	83 f8 ff             	cmp    eax,0xffffffff
c0006748:	74 d1                	je     c000671b <f_mkdir+0xa1>
c000674a:	89 f2                	mov    edx,esi
c000674c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006750:	e8 c4 ce ff ff       	call   c0003619 <dir_clear>
c0006755:	89 c3                	mov    ebx,eax
c0006757:	85 c0                	test   eax,eax
c0006759:	75 c0                	jne    c000671b <f_mkdir+0xa1>
c000675b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006762:	74 69                	je     c00067cd <f_mkdir+0x153>
c0006764:	b9 0b 00 00 00       	mov    ecx,0xb
c0006769:	83 c0 54             	add    eax,0x54
c000676c:	ba 20 00 00 00       	mov    edx,0x20
c0006771:	e8 9c b5 ff ff       	call   c0001d12 <mem_set>
c0006776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677a:	ba 00 00 21 50       	mov    edx,0x50210000
c000677f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006783:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006787:	83 c0 6a             	add    eax,0x6a
c000678a:	e8 65 b5 ff ff       	call   c0001cf4 <st_dword>
c000678f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006793:	89 f1                	mov    ecx,esi
c0006795:	8d 50 54             	lea    edx,[eax+0x54]
c0006798:	e8 85 e6 ff ff       	call   c0004e22 <st_clust.isra.1>
c000679d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a1:	b9 20 00 00 00       	mov    ecx,0x20
c00067a6:	8d 50 54             	lea    edx,[eax+0x54]
c00067a9:	83 c0 74             	add    eax,0x74
c00067ac:	e8 4c b5 ff ff       	call   c0001cfd <mem_cpy>
c00067b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067b9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067bd:	8d 50 74             	lea    edx,[eax+0x74]
c00067c0:	e8 5d e6 ff ff       	call   c0004e22 <st_clust.isra.1>
c00067c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067cd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067d1:	e8 2f db ff ff       	call   c0004305 <dir_register>
c00067d6:	89 c3                	mov    ebx,eax
c00067d8:	85 c0                	test   eax,eax
c00067da:	0f 85 3b ff ff ff    	jne    c000671b <f_mkdir+0xa1>
c00067e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067e7:	75 74                	jne    c000685d <f_mkdir+0x1e3>
c00067e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00067f1:	83 c0 0c             	add    eax,0xc
c00067f4:	e8 fb b4 ff ff       	call   c0001cf4 <st_dword>
c00067f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067fd:	89 f2                	mov    edx,esi
c00067ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006802:	83 c0 34             	add    eax,0x34
c0006805:	e8 ea b4 ff ff       	call   c0001cf4 <st_dword>
c000680a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006812:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006815:	c1 e2 09             	shl    edx,0x9
c0006818:	83 c0 38             	add    eax,0x38
c000681b:	e8 d4 b4 ff ff       	call   c0001cf4 <st_dword>
c0006820:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006824:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006828:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682b:	c1 e2 09             	shl    edx,0x9
c000682e:	83 c0 28             	add    eax,0x28
c0006831:	e8 be b4 ff ff       	call   c0001cf4 <st_dword>
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000683d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006841:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006844:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006848:	8d 44 24 34          	lea    eax,[esp+0x34]
c000684c:	e8 8b d3 ff ff       	call   c0003bdc <store_xdir>
c0006851:	89 c3                	mov    ebx,eax
c0006853:	85 c0                	test   eax,eax
c0006855:	0f 85 d4 fe ff ff    	jne    c000672f <f_mkdir+0xb5>
c000685b:	eb 30                	jmp    c000688d <f_mkdir+0x213>
c000685d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006861:	ba 00 00 21 50       	mov    edx,0x50210000
c0006866:	83 c0 16             	add    eax,0x16
c0006869:	e8 86 b4 ff ff       	call   c0001cf4 <st_dword>
c000686e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006872:	89 f1                	mov    ecx,esi
c0006874:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006878:	e8 a5 e5 ff ff       	call   c0004e22 <st_clust.isra.1>
c000687d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006881:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006885:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006889:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000688d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006891:	e8 f1 dc ff ff       	call   c0004587 <sync_fs>
c0006896:	89 c3                	mov    ebx,eax
c0006898:	e9 92 fe ff ff       	jmp    c000672f <f_mkdir+0xb5>
c000689d:	83 ec 80             	sub    esp,0xffffff80
c00068a0:	89 d8                	mov    eax,ebx
c00068a2:	5b                   	pop    ebx
c00068a3:	5e                   	pop    esi
c00068a4:	5f                   	pop    edi
c00068a5:	c3                   	ret    

c00068a6 <f_rename>:
c00068a6:	55                   	push   ebp
c00068a7:	57                   	push   edi
c00068a8:	56                   	push   esi
c00068a9:	53                   	push   ebx
c00068aa:	81 ec fc 00 00 00    	sub    esp,0xfc
c00068b0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068b7:	e8 a4 b9 ff ff       	call   c0002260 <get_ldnumber>
c00068bc:	b9 02 00 00 00       	mov    ecx,0x2
c00068c1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068c5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068cc:	e8 3d be ff ff       	call   c000270e <mount_volume>
c00068d1:	85 c0                	test   eax,eax
c00068d3:	0f 85 b5 02 00 00    	jne    c0006b8e <f_rename+0x2e8>
c00068d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068dd:	83 ec 0c             	sub    esp,0xc
c00068e0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068e4:	68 60 04 00 00       	push   0x460
c00068e9:	e8 c3 1b 00 00       	call   c00084b1 <ff_memalloc>
c00068ee:	83 c4 10             	add    esp,0x10
c00068f1:	89 c3                	mov    ebx,eax
c00068f3:	b8 11 00 00 00       	mov    eax,0x11
c00068f8:	85 db                	test   ebx,ebx
c00068fa:	0f 84 8e 02 00 00    	je     c0006b8e <f_rename+0x2e8>
c0006900:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006904:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000690a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000690d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006910:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006917:	8d 44 24 58          	lea    eax,[esp+0x58]
c000691b:	e8 64 e5 ff ff       	call   c0004e84 <follow_path>
c0006920:	85 c0                	test   eax,eax
c0006922:	0f 85 52 02 00 00    	jne    c0006b7a <f_rename+0x2d4>
c0006928:	b8 06 00 00 00       	mov    eax,0x6
c000692d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006935:	0f 85 3f 02 00 00    	jne    c0006b7a <f_rename+0x2d4>
c000693b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000693f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006942:	0f 85 05 01 00 00    	jne    c0006a4d <f_rename+0x1a7>
c0006948:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000694b:	b9 40 00 00 00       	mov    ecx,0x40
c0006950:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006954:	e8 a4 b3 ff ff       	call   c0001cfd <mem_cpy>
c0006959:	b9 4c 00 00 00       	mov    ecx,0x4c
c000695e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006962:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006969:	e8 8f b3 ff ff       	call   c0001cfd <mem_cpy>
c000696e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006975:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000697c:	e8 03 e5 ff ff       	call   c0004e84 <follow_path>
c0006981:	85 c0                	test   eax,eax
c0006983:	75 29                	jne    c00069ae <f_rename+0x108>
c0006985:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006989:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006990:	74 0a                	je     c000699c <f_rename+0xf6>
c0006992:	b8 08 00 00 00       	mov    eax,0x8
c0006997:	e9 de 01 00 00       	jmp    c0006b7a <f_rename+0x2d4>
c000699c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069a3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069aa:	75 e6                	jne    c0006992 <f_rename+0xec>
c00069ac:	eb 09                	jmp    c00069b7 <f_rename+0x111>
c00069ae:	83 f8 04             	cmp    eax,0x4
c00069b1:	0f 85 c3 01 00 00    	jne    c0006b7a <f_rename+0x2d4>
c00069b7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069be:	e8 42 d9 ff ff       	call   c0004305 <dir_register>
c00069c3:	85 c0                	test   eax,eax
c00069c5:	0f 85 af 01 00 00    	jne    c0006b7a <f_rename+0x2d4>
c00069cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cf:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069d2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069d5:	89 c5                	mov    ebp,eax
c00069d7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069da:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069de:	8d 46 24             	lea    eax,[esi+0x24]
c00069e1:	e8 98 b2 ff ff       	call   c0001c7e <ld_word>
c00069e6:	b9 40 00 00 00       	mov    ecx,0x40
c00069eb:	89 c7                	mov    edi,eax
c00069ed:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069f1:	89 f0                	mov    eax,esi
c00069f3:	e8 05 b3 ff ff       	call   c0001cfd <mem_cpy>
c00069f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069fc:	89 e9                	mov    ecx,ebp
c00069fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a01:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006a04:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006a08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a0c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006a12:	0f b7 d7             	movzx  edx,di
c0006a15:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a18:	83 c0 24             	add    eax,0x24
c0006a1b:	e8 d0 b2 ff ff       	call   c0001cf0 <st_word>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a27:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a2a:	a8 10                	test   al,0x10
c0006a2c:	75 06                	jne    c0006a34 <f_rename+0x18e>
c0006a2e:	83 c8 20             	or     eax,0x20
c0006a31:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a34:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a3b:	e8 9c d1 ff ff       	call   c0003bdc <store_xdir>
c0006a40:	85 c0                	test   eax,eax
c0006a42:	0f 84 1c 01 00 00    	je     c0006b64 <f_rename+0x2be>
c0006a48:	e9 2d 01 00 00       	jmp    c0006b7a <f_rename+0x2d4>
c0006a4d:	b9 20 00 00 00       	mov    ecx,0x20
c0006a52:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a5d:	e8 9b b2 ff ff       	call   c0001cfd <mem_cpy>
c0006a62:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a67:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a6b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a72:	e8 86 b2 ff ff       	call   c0001cfd <mem_cpy>
c0006a77:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a7e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a85:	e8 fa e3 ff ff       	call   c0004e84 <follow_path>
c0006a8a:	85 c0                	test   eax,eax
c0006a8c:	75 27                	jne    c0006ab5 <f_rename+0x20f>
c0006a8e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a92:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a99:	0f 85 f3 fe ff ff    	jne    c0006992 <f_rename+0xec>
c0006a9f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006aa6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006aad:	0f 85 df fe ff ff    	jne    c0006992 <f_rename+0xec>
c0006ab3:	eb 09                	jmp    c0006abe <f_rename+0x218>
c0006ab5:	83 f8 04             	cmp    eax,0x4
c0006ab8:	0f 85 bc 00 00 00    	jne    c0006b7a <f_rename+0x2d4>
c0006abe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ac5:	e8 3b d8 ff ff       	call   c0004305 <dir_register>
c0006aca:	85 c0                	test   eax,eax
c0006acc:	0f 85 a8 00 00 00    	jne    c0006b7a <f_rename+0x2d4>
c0006ad2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ad9:	b9 13 00 00 00       	mov    ecx,0x13
c0006ade:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ae1:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ae5:	e8 13 b2 ff ff       	call   c0001cfd <mem_cpy>
c0006aea:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006aee:	a8 10                	test   al,0x10
c0006af0:	75 03                	jne    c0006af5 <f_rename+0x24f>
c0006af2:	83 c8 20             	or     eax,0x20
c0006af5:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006af8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006afc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b00:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006b04:	74 5e                	je     c0006b64 <f_rename+0x2be>
c0006b06:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006b0d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006b11:	74 51                	je     c0006b64 <f_rename+0x2be>
c0006b13:	89 f2                	mov    edx,esi
c0006b15:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b19:	8a 07                	mov    al,BYTE PTR [edi]
c0006b1b:	e8 d9 e2 ff ff       	call   c0004df9 <ld_clust.isra.0>
c0006b20:	89 c2                	mov    edx,eax
c0006b22:	89 f8                	mov    eax,edi
c0006b24:	e8 ee b3 ff ff       	call   c0001f17 <clst2sect>
c0006b29:	89 c6                	mov    esi,eax
c0006b2b:	89 d1                	mov    ecx,edx
c0006b2d:	b8 02 00 00 00       	mov    eax,0x2
c0006b32:	09 f2                	or     edx,esi
c0006b34:	74 44                	je     c0006b7a <f_rename+0x2d4>
c0006b36:	89 f2                	mov    edx,esi
c0006b38:	89 f8                	mov    eax,edi
c0006b3a:	e8 1d b9 ff ff       	call   c000245c <move_window>
c0006b3f:	85 c0                	test   eax,eax
c0006b41:	75 37                	jne    c0006b7a <f_rename+0x2d4>
c0006b43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b47:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b4b:	75 17                	jne    c0006b64 <f_rename+0x2be>
c0006b4d:	8d 50 74             	lea    edx,[eax+0x74]
c0006b50:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b57:	e8 c6 e2 ff ff       	call   c0004e22 <st_clust.isra.1>
c0006b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b60:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b64:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b68:	e8 f4 d0 ff ff       	call   c0003c61 <dir_remove>
c0006b6d:	85 c0                	test   eax,eax
c0006b6f:	75 09                	jne    c0006b7a <f_rename+0x2d4>
c0006b71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b75:	e8 0d da ff ff       	call   c0004587 <sync_fs>
c0006b7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b7e:	83 ec 0c             	sub    esp,0xc
c0006b81:	53                   	push   ebx
c0006b82:	e8 40 19 00 00       	call   c00084c7 <ff_memfree>
c0006b87:	83 c4 10             	add    esp,0x10
c0006b8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b8e:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b94:	5b                   	pop    ebx
c0006b95:	5e                   	pop    esi
c0006b96:	5f                   	pop    edi
c0006b97:	5d                   	pop    ebp
c0006b98:	c3                   	ret    

c0006b99 <f_chmod>:
c0006b99:	57                   	push   edi
c0006b9a:	b9 02 00 00 00       	mov    ecx,0x2
c0006b9f:	56                   	push   esi
c0006ba0:	53                   	push   ebx
c0006ba1:	83 ec 60             	sub    esp,0x60
c0006ba4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006ba8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006bac:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006bb0:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006bb4:	e8 55 bb ff ff       	call   c000270e <mount_volume>
c0006bb9:	85 c0                	test   eax,eax
c0006bbb:	0f 85 af 00 00 00    	jne    c0006c70 <f_chmod+0xd7>
c0006bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc5:	83 ec 0c             	sub    esp,0xc
c0006bc8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bcc:	68 60 04 00 00       	push   0x460
c0006bd1:	e8 db 18 00 00       	call   c00084b1 <ff_memalloc>
c0006bd6:	83 c4 10             	add    esp,0x10
c0006bd9:	89 c6                	mov    esi,eax
c0006bdb:	b8 11 00 00 00       	mov    eax,0x11
c0006be0:	85 f6                	test   esi,esi
c0006be2:	0f 84 88 00 00 00    	je     c0006c70 <f_chmod+0xd7>
c0006be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bec:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bf2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bf5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bf8:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c00:	e8 7f e2 ff ff       	call   c0004e84 <follow_path>
c0006c05:	85 c0                	test   eax,eax
c0006c07:	75 53                	jne    c0006c5c <f_chmod+0xc3>
c0006c09:	b8 06 00 00 00       	mov    eax,0x6
c0006c0e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c13:	75 47                	jne    c0006c5c <f_chmod+0xc3>
c0006c15:	89 f9                	mov    ecx,edi
c0006c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1b:	83 e1 27             	and    ecx,0x27
c0006c1e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c21:	75 1d                	jne    c0006c40 <f_chmod+0xa7>
c0006c23:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c26:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c29:	21 cb                	and    ebx,ecx
c0006c2b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c2e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c31:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c35:	e8 a2 cf ff ff       	call   c0003bdc <store_xdir>
c0006c3a:	85 c0                	test   eax,eax
c0006c3c:	75 1e                	jne    c0006c5c <f_chmod+0xc3>
c0006c3e:	eb 13                	jmp    c0006c53 <f_chmod+0xba>
c0006c40:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c44:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c47:	21 cb                	and    ebx,ecx
c0006c49:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c4c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c4f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c57:	e8 2b d9 ff ff       	call   c0004587 <sync_fs>
c0006c5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c60:	83 ec 0c             	sub    esp,0xc
c0006c63:	56                   	push   esi
c0006c64:	e8 5e 18 00 00       	call   c00084c7 <ff_memfree>
c0006c69:	83 c4 10             	add    esp,0x10
c0006c6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c70:	83 c4 60             	add    esp,0x60
c0006c73:	5b                   	pop    ebx
c0006c74:	5e                   	pop    esi
c0006c75:	5f                   	pop    edi
c0006c76:	c3                   	ret    

c0006c77 <f_utime>:
c0006c77:	56                   	push   esi
c0006c78:	b9 02 00 00 00       	mov    ecx,0x2
c0006c7d:	53                   	push   ebx
c0006c7e:	83 ec 64             	sub    esp,0x64
c0006c81:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c85:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c89:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c8d:	e8 7c ba ff ff       	call   c000270e <mount_volume>
c0006c92:	85 c0                	test   eax,eax
c0006c94:	0f 85 b5 00 00 00    	jne    c0006d4f <f_utime+0xd8>
c0006c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9e:	83 ec 0c             	sub    esp,0xc
c0006ca1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006ca5:	68 60 04 00 00       	push   0x460
c0006caa:	e8 02 18 00 00       	call   c00084b1 <ff_memalloc>
c0006caf:	83 c4 10             	add    esp,0x10
c0006cb2:	89 c3                	mov    ebx,eax
c0006cb4:	b8 11 00 00 00       	mov    eax,0x11
c0006cb9:	85 db                	test   ebx,ebx
c0006cbb:	0f 84 8e 00 00 00    	je     c0006d4f <f_utime+0xd8>
c0006cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cc5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ccb:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cce:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cd1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cd5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cd9:	e8 a6 e1 ff ff       	call   c0004e84 <follow_path>
c0006cde:	85 c0                	test   eax,eax
c0006ce0:	75 59                	jne    c0006d3b <f_utime+0xc4>
c0006ce2:	b8 06 00 00 00       	mov    eax,0x6
c0006ce7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cec:	75 4d                	jne    c0006d3b <f_utime+0xc4>
c0006cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf2:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cf6:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cfa:	c1 e2 10             	shl    edx,0x10
c0006cfd:	09 ca                	or     edx,ecx
c0006cff:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d02:	75 1a                	jne    c0006d1e <f_utime+0xa7>
c0006d04:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006d07:	83 c0 0c             	add    eax,0xc
c0006d0a:	e8 e5 af ff ff       	call   c0001cf4 <st_dword>
c0006d0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d13:	e8 c4 ce ff ff       	call   c0003bdc <store_xdir>
c0006d18:	85 c0                	test   eax,eax
c0006d1a:	75 1f                	jne    c0006d3b <f_utime+0xc4>
c0006d1c:	eb 14                	jmp    c0006d32 <f_utime+0xbb>
c0006d1e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d22:	83 c0 16             	add    eax,0x16
c0006d25:	e8 ca af ff ff       	call   c0001cf4 <st_dword>
c0006d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d2e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d36:	e8 4c d8 ff ff       	call   c0004587 <sync_fs>
c0006d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d3f:	83 ec 0c             	sub    esp,0xc
c0006d42:	53                   	push   ebx
c0006d43:	e8 7f 17 00 00       	call   c00084c7 <ff_memfree>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d4f:	83 c4 64             	add    esp,0x64
c0006d52:	5b                   	pop    ebx
c0006d53:	5e                   	pop    esi
c0006d54:	c3                   	ret    

c0006d55 <f_getlabel>:
c0006d55:	55                   	push   ebp
c0006d56:	31 c9                	xor    ecx,ecx
c0006d58:	57                   	push   edi
c0006d59:	56                   	push   esi
c0006d5a:	53                   	push   ebx
c0006d5b:	83 ec 6c             	sub    esp,0x6c
c0006d5e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d62:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d69:	e8 a0 b9 ff ff       	call   c000270e <mount_volume>
c0006d6e:	89 c6                	mov    esi,eax
c0006d70:	85 c0                	test   eax,eax
c0006d72:	0f 85 c1 01 00 00    	jne    c0006f39 <f_getlabel+0x1e4>
c0006d78:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d80:	0f 84 5f 01 00 00    	je     c0006ee5 <f_getlabel+0x190>
c0006d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d8a:	31 d2                	xor    edx,edx
c0006d8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d90:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d98:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9c:	e8 39 c4 ff ff       	call   c00031da <dir_sdi>
c0006da1:	85 c0                	test   eax,eax
c0006da3:	0f 85 2d 01 00 00    	jne    c0006ed6 <f_getlabel+0x181>
c0006da9:	ba 01 00 00 00       	mov    edx,0x1
c0006dae:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006db2:	e8 33 cc ff ff       	call   c00039ea <dir_read>
c0006db7:	85 c0                	test   eax,eax
c0006db9:	0f 85 17 01 00 00    	jne    c0006ed6 <f_getlabel+0x181>
c0006dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006dc6:	74 09                	je     c0006dd1 <f_getlabel+0x7c>
c0006dc8:	31 db                	xor    ebx,ebx
c0006dca:	31 c9                	xor    ecx,ecx
c0006dcc:	e9 c8 00 00 00       	jmp    c0006e99 <f_getlabel+0x144>
c0006dd1:	31 ed                	xor    ebp,ebp
c0006dd3:	31 db                	xor    ebx,ebx
c0006dd5:	31 ff                	xor    edi,edi
c0006dd7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ddb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ddf:	39 fa                	cmp    edx,edi
c0006de1:	76 4b                	jbe    c0006e2e <f_getlabel+0xd9>
c0006de3:	47                   	inc    edi
c0006de4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006de7:	01 d0                	add    eax,edx
c0006de9:	e8 90 ae ff ff       	call   c0001c7e <ld_word>
c0006dee:	66 85 ed             	test   bp,bp
c0006df1:	75 0d                	jne    c0006e00 <f_getlabel+0xab>
c0006df3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006df9:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006dfe:	76 28                	jbe    c0006e28 <f_getlabel+0xd3>
c0006e00:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e07:	89 e9                	mov    ecx,ebp
c0006e09:	01 da                	add    edx,ebx
c0006e0b:	c1 e1 10             	shl    ecx,0x10
c0006e0e:	0f b7 c0             	movzx  eax,ax
c0006e11:	09 c8                	or     eax,ecx
c0006e13:	b9 04 00 00 00       	mov    ecx,0x4
c0006e18:	e8 01 b0 ff ff       	call   c0001e1e <put_utf>
c0006e1d:	84 c0                	test   al,al
c0006e1f:	74 0b                	je     c0006e2c <f_getlabel+0xd7>
c0006e21:	0f b6 c0             	movzx  eax,al
c0006e24:	01 c3                	add    ebx,eax
c0006e26:	31 c0                	xor    eax,eax
c0006e28:	89 c5                	mov    ebp,eax
c0006e2a:	eb ab                	jmp    c0006dd7 <f_getlabel+0x82>
c0006e2c:	31 db                	xor    ebx,ebx
c0006e2e:	66 85 ed             	test   bp,bp
c0006e31:	74 02                	je     c0006e35 <f_getlabel+0xe0>
c0006e33:	31 db                	xor    ebx,ebx
c0006e35:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e3c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e40:	e9 a0 00 00 00       	jmp    c0006ee5 <f_getlabel+0x190>
c0006e45:	83 ff 0b             	cmp    edi,0xb
c0006e48:	74 11                	je     c0006e5b <f_getlabel+0x106>
c0006e4a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e53:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e56:	c1 e0 08             	shl    eax,0x8
c0006e59:	09 c2                	or     edx,eax
c0006e5b:	0f b7 d2             	movzx  edx,dx
c0006e5e:	50                   	push   eax
c0006e5f:	50                   	push   eax
c0006e60:	68 b5 01 00 00       	push   0x1b5
c0006e65:	52                   	push   edx
c0006e66:	e8 03 17 00 00       	call   c000856e <ff_oem2uni>
c0006e6b:	83 c4 10             	add    esp,0x10
c0006e6e:	66 85 c0             	test   ax,ax
c0006e71:	74 46                	je     c0006eb9 <f_getlabel+0x164>
c0006e73:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e7a:	0f b7 c0             	movzx  eax,ax
c0006e7d:	01 da                	add    edx,ebx
c0006e7f:	b9 04 00 00 00       	mov    ecx,0x4
c0006e84:	e8 95 af ff ff       	call   c0001e1e <put_utf>
c0006e89:	84 c0                	test   al,al
c0006e8b:	74 2c                	je     c0006eb9 <f_getlabel+0x164>
c0006e8d:	0f b6 c0             	movzx  eax,al
c0006e90:	01 c3                	add    ebx,eax
c0006e92:	83 ff 0b             	cmp    edi,0xb
c0006e95:	74 24                	je     c0006ebb <f_getlabel+0x166>
c0006e97:	89 f9                	mov    ecx,edi
c0006e99:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e9d:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ea0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ea5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006eaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006eae:	e8 9f ae ff ff       	call   c0001d52 <dbc_1st>
c0006eb3:	85 c0                	test   eax,eax
c0006eb5:	74 a4                	je     c0006e5b <f_getlabel+0x106>
c0006eb7:	eb 8c                	jmp    c0006e45 <f_getlabel+0xf0>
c0006eb9:	31 db                	xor    ebx,ebx
c0006ebb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ec2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ec5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ecc:	74 17                	je     c0006ee5 <f_getlabel+0x190>
c0006ece:	4b                   	dec    ebx
c0006ecf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ed2:	74 ee                	je     c0006ec2 <f_getlabel+0x16d>
c0006ed4:	eb 0f                	jmp    c0006ee5 <f_getlabel+0x190>
c0006ed6:	83 f8 04             	cmp    eax,0x4
c0006ed9:	75 5c                	jne    c0006f37 <f_getlabel+0x1e2>
c0006edb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ee2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ee5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006eed:	74 4a                	je     c0006f39 <f_getlabel+0x1e4>
c0006eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ef3:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ef6:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ef9:	e8 5e b5 ff ff       	call   c000245c <move_window>
c0006efe:	89 c6                	mov    esi,eax
c0006f00:	85 c0                	test   eax,eax
c0006f02:	75 35                	jne    c0006f39 <f_getlabel+0x1e4>
c0006f04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006f08:	b8 43 00 00 00       	mov    eax,0x43
c0006f0d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006f0f:	80 f9 03             	cmp    cl,0x3
c0006f12:	74 0f                	je     c0006f23 <f_getlabel+0x1ce>
c0006f14:	31 c0                	xor    eax,eax
c0006f16:	80 f9 04             	cmp    cl,0x4
c0006f19:	0f 94 c0             	sete   al
c0006f1c:	48                   	dec    eax
c0006f1d:	83 e0 c3             	and    eax,0xffffffc3
c0006f20:	83 c0 64             	add    eax,0x64
c0006f23:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f27:	e8 5f ad ff ff       	call   c0001c8b <ld_dword>
c0006f2c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f33:	89 07                	mov    DWORD PTR [edi],eax
c0006f35:	eb 02                	jmp    c0006f39 <f_getlabel+0x1e4>
c0006f37:	89 c6                	mov    esi,eax
c0006f39:	83 c4 6c             	add    esp,0x6c
c0006f3c:	89 f0                	mov    eax,esi
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    

c0006f43 <f_setlabel>:
c0006f43:	56                   	push   esi
c0006f44:	b9 02 00 00 00       	mov    ecx,0x2
c0006f49:	53                   	push   ebx
c0006f4a:	83 ec 74             	sub    esp,0x74
c0006f4d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f51:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f58:	e8 b1 b7 ff ff       	call   c000270e <mount_volume>
c0006f5d:	89 c6                	mov    esi,eax
c0006f5f:	85 c0                	test   eax,eax
c0006f61:	0f 85 41 02 00 00    	jne    c00071a8 <f_setlabel+0x265>
c0006f67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f6b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f6e:	0f 85 8e 00 00 00    	jne    c0007002 <f_setlabel+0xbf>
c0006f74:	b9 16 00 00 00       	mov    ecx,0x16
c0006f79:	31 d2                	xor    edx,edx
c0006f7b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f7f:	31 db                	xor    ebx,ebx
c0006f81:	e8 8c ad ff ff       	call   c0001d12 <mem_set>
c0006f86:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f8d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f90:	0f 86 0a 01 00 00    	jbe    c00070a0 <f_setlabel+0x15d>
c0006f96:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f9d:	e8 b6 ad ff ff       	call   c0001d58 <tchar2uni>
c0006fa2:	89 c6                	mov    esi,eax
c0006fa4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fa9:	76 2a                	jbe    c0006fd5 <f_setlabel+0x92>
c0006fab:	83 f8 ff             	cmp    eax,0xffffffff
c0006fae:	74 05                	je     c0006fb5 <f_setlabel+0x72>
c0006fb0:	83 fb 09             	cmp    ebx,0x9
c0006fb3:	76 0a                	jbe    c0006fbf <f_setlabel+0x7c>
c0006fb5:	be 06 00 00 00       	mov    esi,0x6
c0006fba:	e9 e9 01 00 00       	jmp    c00071a8 <f_setlabel+0x265>
c0006fbf:	89 c2                	mov    edx,eax
c0006fc1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fc5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fc8:	c1 ea 10             	shr    edx,0x10
c0006fcb:	01 c8                	add    eax,ecx
c0006fcd:	43                   	inc    ebx
c0006fce:	e8 1d ad ff ff       	call   c0001cf0 <st_word>
c0006fd3:	eb 04                	jmp    c0006fd9 <f_setlabel+0x96>
c0006fd5:	85 c0                	test   eax,eax
c0006fd7:	74 dc                	je     c0006fb5 <f_setlabel+0x72>
c0006fd9:	89 f2                	mov    edx,esi
c0006fdb:	b8 d7 f6 01 c0       	mov    eax,0xc001f6d7
c0006fe0:	e8 5b ad ff ff       	call   c0001d40 <chk_chr>
c0006fe5:	85 c0                	test   eax,eax
c0006fe7:	75 cc                	jne    c0006fb5 <f_setlabel+0x72>
c0006fe9:	83 fb 0a             	cmp    ebx,0xa
c0006fec:	77 c7                	ja     c0006fb5 <f_setlabel+0x72>
c0006fee:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ff1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ff5:	0f b7 d6             	movzx  edx,si
c0006ff8:	01 c8                	add    eax,ecx
c0006ffa:	43                   	inc    ebx
c0006ffb:	e8 f0 ac ff ff       	call   c0001cf0 <st_word>
c0007000:	eb 84                	jmp    c0006f86 <f_setlabel+0x43>
c0007002:	b9 0b 00 00 00       	mov    ecx,0xb
c0007007:	ba 20 00 00 00       	mov    edx,0x20
c000700c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0007010:	31 db                	xor    ebx,ebx
c0007012:	e8 fb ac ff ff       	call   c0001d12 <mem_set>
c0007017:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000701e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007021:	76 60                	jbe    c0007083 <f_setlabel+0x140>
c0007023:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000702a:	e8 29 ad ff ff       	call   c0001d58 <tchar2uni>
c000702f:	3d ff ff 00 00       	cmp    eax,0xffff
c0007034:	0f 87 7b ff ff ff    	ja     c0006fb5 <f_setlabel+0x72>
c000703a:	83 ec 0c             	sub    esp,0xc
c000703d:	50                   	push   eax
c000703e:	e8 97 15 00 00       	call   c00085da <ff_wtoupper>
c0007043:	5a                   	pop    edx
c0007044:	59                   	pop    ecx
c0007045:	68 b5 01 00 00       	push   0x1b5
c000704a:	50                   	push   eax
c000704b:	e8 8e 14 00 00       	call   c00084de <ff_uni2oem>
c0007050:	83 c4 10             	add    esp,0x10
c0007053:	89 c6                	mov    esi,eax
c0007055:	66 85 c0             	test   ax,ax
c0007058:	0f 84 57 ff ff ff    	je     c0006fb5 <f_setlabel+0x72>
c000705e:	0f b7 d0             	movzx  edx,ax
c0007061:	b8 d0 f6 01 c0       	mov    eax,0xc001f6d0
c0007066:	e8 d5 ac ff ff       	call   c0001d40 <chk_chr>
c000706b:	85 c0                	test   eax,eax
c000706d:	0f 85 42 ff ff ff    	jne    c0006fb5 <f_setlabel+0x72>
c0007073:	66 81 fe ff 00       	cmp    si,0xff
c0007078:	0f 87 14 01 00 00    	ja     c0007192 <f_setlabel+0x24f>
c000707e:	e9 fa 00 00 00       	jmp    c000717d <f_setlabel+0x23a>
c0007083:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007088:	0f 84 27 ff ff ff    	je     c0006fb5 <f_setlabel+0x72>
c000708e:	85 db                	test   ebx,ebx
c0007090:	74 0e                	je     c00070a0 <f_setlabel+0x15d>
c0007092:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007095:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000709a:	75 04                	jne    c00070a0 <f_setlabel+0x15d>
c000709c:	89 c3                	mov    ebx,eax
c000709e:	eb ee                	jmp    c000708e <f_setlabel+0x14b>
c00070a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070a4:	31 d2                	xor    edx,edx
c00070a6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00070aa:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00070b2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b6:	e8 1f c1 ff ff       	call   c00031da <dir_sdi>
c00070bb:	89 c6                	mov    esi,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 e3 00 00 00    	jne    c00071a8 <f_setlabel+0x265>
c00070c5:	ba 01 00 00 00       	mov    edx,0x1
c00070ca:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070ce:	e8 17 c9 ff ff       	call   c00039ea <dir_read>
c00070d3:	85 c0                	test   eax,eax
c00070d5:	75 21                	jne    c00070f8 <f_setlabel+0x1b5>
c00070d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070db:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070df:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070e2:	74 5d                	je     c0007141 <f_setlabel+0x1fe>
c00070e4:	85 db                	test   ebx,ebx
c00070e6:	74 0b                	je     c00070f3 <f_setlabel+0x1b0>
c00070e8:	b9 0b 00 00 00       	mov    ecx,0xb
c00070ed:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070f1:	eb 70                	jmp    c0007163 <f_setlabel+0x220>
c00070f3:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070f6:	eb 70                	jmp    c0007168 <f_setlabel+0x225>
c00070f8:	83 f8 04             	cmp    eax,0x4
c00070fb:	75 7c                	jne    c0007179 <f_setlabel+0x236>
c00070fd:	85 db                	test   ebx,ebx
c00070ff:	0f 84 a3 00 00 00    	je     c00071a8 <f_setlabel+0x265>
c0007105:	ba 01 00 00 00       	mov    edx,0x1
c000710a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000710e:	e8 51 ca ff ff       	call   c0003b64 <dir_alloc>
c0007113:	89 c6                	mov    esi,eax
c0007115:	85 c0                	test   eax,eax
c0007117:	0f 85 8b 00 00 00    	jne    c00071a8 <f_setlabel+0x265>
c000711d:	31 d2                	xor    edx,edx
c000711f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007123:	b9 20 00 00 00       	mov    ecx,0x20
c0007128:	e8 e5 ab ff ff       	call   c0001d12 <mem_set>
c000712d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007131:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007138:	75 18                	jne    c0007152 <f_setlabel+0x20f>
c000713a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000713d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007141:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007144:	b9 16 00 00 00       	mov    ecx,0x16
c0007149:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000714d:	83 c0 02             	add    eax,0x2
c0007150:	eb 9b                	jmp    c00070ed <f_setlabel+0x1aa>
c0007152:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007156:	b9 0b 00 00 00       	mov    ecx,0xb
c000715b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000715f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007163:	e8 95 ab ff ff       	call   c0001cfd <mem_cpy>
c0007168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000716c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007174:	e8 0e d4 ff ff       	call   c0004587 <sync_fs>
c0007179:	89 c6                	mov    esi,eax
c000717b:	eb 2b                	jmp    c00071a8 <f_setlabel+0x265>
c000717d:	83 fb 0a             	cmp    ebx,0xa
c0007180:	0f 87 2f fe ff ff    	ja     c0006fb5 <f_setlabel+0x72>
c0007186:	89 f0                	mov    eax,esi
c0007188:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000718c:	43                   	inc    ebx
c000718d:	e9 85 fe ff ff       	jmp    c0007017 <f_setlabel+0xd4>
c0007192:	83 fb 09             	cmp    ebx,0x9
c0007195:	0f 87 1a fe ff ff    	ja     c0006fb5 <f_setlabel+0x72>
c000719b:	89 f0                	mov    eax,esi
c000719d:	66 c1 e8 08          	shr    ax,0x8
c00071a1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071a5:	43                   	inc    ebx
c00071a6:	eb de                	jmp    c0007186 <f_setlabel+0x243>
c00071a8:	89 f0                	mov    eax,esi
c00071aa:	83 c4 74             	add    esp,0x74
c00071ad:	5b                   	pop    ebx
c00071ae:	5e                   	pop    esi
c00071af:	c3                   	ret    

c00071b0 <f_forward>:
c00071b0:	55                   	push   ebp
c00071b1:	57                   	push   edi
c00071b2:	56                   	push   esi
c00071b3:	53                   	push   ebx
c00071b4:	83 ec 2c             	sub    esp,0x2c
c00071b7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071c5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071c9:	89 d8                	mov    eax,ebx
c00071cb:	e8 b1 b1 ff ff       	call   c0002381 <validate>
c00071d0:	89 c5                	mov    ebp,eax
c00071d2:	85 c0                	test   eax,eax
c00071d4:	0f 85 aa 01 00 00    	jne    c0007384 <f_forward+0x1d4>
c00071da:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071de:	85 ed                	test   ebp,ebp
c00071e0:	0f 85 9e 01 00 00    	jne    c0007384 <f_forward+0x1d4>
c00071e6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071ea:	0f 84 8f 01 00 00    	je     c000737f <f_forward+0x1cf>
c00071f0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071f3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071f6:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071f9:	bf 00 00 00 00       	mov    edi,0x0
c00071fe:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007201:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007205:	89 d1                	mov    ecx,edx
c0007207:	19 f9                	sbb    ecx,edi
c0007209:	0f 83 cf 00 00 00    	jae    c00072de <f_forward+0x12e>
c000720f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007213:	e9 c6 00 00 00       	jmp    c00072de <f_forward+0x12e>
c0007218:	50                   	push   eax
c0007219:	50                   	push   eax
c000721a:	6a 00                	push   0x0
c000721c:	6a 00                	push   0x0
c000721e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007222:	83 c4 10             	add    esp,0x10
c0007225:	85 c0                	test   eax,eax
c0007227:	0f 84 57 01 00 00    	je     c0007384 <f_forward+0x1d4>
c000722d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007230:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007234:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007237:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000723b:	89 d7                	mov    edi,edx
c000723d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007240:	89 c6                	mov    esi,eax
c0007242:	0f ac fe 09          	shrd   esi,edi,0x9
c0007246:	21 ce                	and    esi,ecx
c0007248:	89 c1                	mov    ecx,eax
c000724a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007250:	0f 84 98 00 00 00    	je     c00072ee <f_forward+0x13e>
c0007256:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000725a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000725d:	89 c8                	mov    eax,ecx
c000725f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007263:	e8 af ac ff ff       	call   c0001f17 <clst2sect>
c0007268:	89 d7                	mov    edi,edx
c000726a:	09 c7                	or     edi,eax
c000726c:	0f 84 9e 00 00 00    	je     c0007310 <f_forward+0x160>
c0007272:	31 ff                	xor    edi,edi
c0007274:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007277:	01 c6                	add    esi,eax
c0007279:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000727d:	11 d7                	adc    edi,edx
c000727f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007282:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007285:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007289:	39 fa                	cmp    edx,edi
c000728b:	0f 85 a2 00 00 00    	jne    c0007333 <f_forward+0x183>
c0007291:	39 f0                	cmp    eax,esi
c0007293:	0f 85 9a 00 00 00    	jne    c0007333 <f_forward+0x183>
c0007299:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000729c:	ba 00 02 00 00       	mov    edx,0x200
c00072a1:	25 ff 01 00 00       	and    eax,0x1ff
c00072a6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00072aa:	29 c2                	sub    edx,eax
c00072ac:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00072af:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00072b2:	39 d1                	cmp    ecx,edx
c00072b4:	76 02                	jbe    c00072b8 <f_forward+0x108>
c00072b6:	89 d1                	mov    ecx,edx
c00072b8:	8d 73 50             	lea    esi,[ebx+0x50]
c00072bb:	52                   	push   edx
c00072bc:	01 c6                	add    esi,eax
c00072be:	52                   	push   edx
c00072bf:	51                   	push   ecx
c00072c0:	56                   	push   esi
c00072c1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	85 c0                	test   eax,eax
c00072ca:	74 44                	je     c0007310 <f_forward+0x160>
c00072cc:	31 ff                	xor    edi,edi
c00072ce:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072d1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072d4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072d8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072dc:	01 07                	add    DWORD PTR [edi],eax
c00072de:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072e3:	0f 85 2f ff ff ff    	jne    c0007218 <f_forward+0x68>
c00072e9:	e9 96 00 00 00       	jmp    c0007384 <f_forward+0x1d4>
c00072ee:	85 f6                	test   esi,esi
c00072f0:	0f 85 60 ff ff ff    	jne    c0007256 <f_forward+0xa6>
c00072f6:	89 d7                	mov    edi,edx
c00072f8:	09 c7                	or     edi,eax
c00072fa:	75 05                	jne    c0007301 <f_forward+0x151>
c00072fc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ff:	eb 0a                	jmp    c000730b <f_forward+0x15b>
c0007301:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007304:	89 d8                	mov    eax,ebx
c0007306:	e8 d9 bc ff ff       	call   c0002fe4 <get_fat>
c000730b:	83 f8 01             	cmp    eax,0x1
c000730e:	77 0b                	ja     c000731b <f_forward+0x16b>
c0007310:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007314:	bd 02 00 00 00       	mov    ebp,0x2
c0007319:	eb 69                	jmp    c0007384 <f_forward+0x1d4>
c000731b:	83 f8 ff             	cmp    eax,0xffffffff
c000731e:	75 0b                	jne    c000732b <f_forward+0x17b>
c0007320:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007324:	bd 01 00 00 00       	mov    ebp,0x1
c0007329:	eb 59                	jmp    c0007384 <f_forward+0x1d4>
c000732b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000732e:	e9 23 ff ff ff       	jmp    c0007256 <f_forward+0xa6>
c0007333:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007337:	79 20                	jns    c0007359 <f_forward+0x1a9>
c0007339:	83 ec 0c             	sub    esp,0xc
c000733c:	6a 01                	push   0x1
c000733e:	52                   	push   edx
c000733f:	50                   	push   eax
c0007340:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007344:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007348:	50                   	push   eax
c0007349:	e8 fb a8 ff ff       	call   c0001c49 <disk_write>
c000734e:	83 c4 20             	add    esp,0x20
c0007351:	85 c0                	test   eax,eax
c0007353:	75 cb                	jne    c0007320 <f_forward+0x170>
c0007355:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007359:	83 ec 0c             	sub    esp,0xc
c000735c:	6a 01                	push   0x1
c000735e:	57                   	push   edi
c000735f:	56                   	push   esi
c0007360:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007364:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007368:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000736c:	50                   	push   eax
c000736d:	e8 c1 a8 ff ff       	call   c0001c33 <disk_read>
c0007372:	83 c4 20             	add    esp,0x20
c0007375:	85 c0                	test   eax,eax
c0007377:	0f 84 1c ff ff ff    	je     c0007299 <f_forward+0xe9>
c000737d:	eb a1                	jmp    c0007320 <f_forward+0x170>
c000737f:	bd 07 00 00 00       	mov    ebp,0x7
c0007384:	83 c4 2c             	add    esp,0x2c
c0007387:	89 e8                	mov    eax,ebp
c0007389:	5b                   	pop    ebx
c000738a:	5e                   	pop    esi
c000738b:	5f                   	pop    edi
c000738c:	5d                   	pop    ebp
c000738d:	c3                   	ret    

c000738e <f_mkfs>:
c000738e:	55                   	push   ebp
c000738f:	57                   	push   edi
c0007390:	56                   	push   esi
c0007391:	53                   	push   ebx
c0007392:	bb 0b 00 00 00       	mov    ebx,0xb
c0007397:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000739d:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00073a4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00073ab:	e8 b0 ae ff ff       	call   c0002260 <get_ldnumber>
c00073b0:	85 c0                	test   eax,eax
c00073b2:	0f 88 ec 10 00 00    	js     c00084a4 <f_mkfs+0x1116>
c00073b8:	8b 14 85 80 b9 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4680]
c00073bf:	85 d2                	test   edx,edx
c00073c1:	74 03                	je     c00073c6 <f_mkfs+0x38>
c00073c3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073c6:	85 f6                	test   esi,esi
c00073c8:	75 05                	jne    c00073cf <f_mkfs+0x41>
c00073ca:	be c0 f6 01 c0       	mov    esi,0xc001f6c0
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	0f b6 c0             	movzx  eax,al
c00073d5:	bb 03 00 00 00       	mov    ebx,0x3
c00073da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073e2:	e8 49 a8 ff ff       	call   c0001c30 <disk_initialize>
c00073e7:	83 c4 10             	add    esp,0x10
c00073ea:	a8 01                	test   al,0x1
c00073ec:	0f 85 b2 10 00 00    	jne    c00084a4 <f_mkfs+0x1116>
c00073f2:	bb 0a 00 00 00       	mov    ebx,0xa
c00073f7:	a8 04                	test   al,0x4
c00073f9:	0f 85 a5 10 00 00    	jne    c00084a4 <f_mkfs+0x1116>
c00073ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007402:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007406:	85 c0                	test   eax,eax
c0007408:	75 20                	jne    c000742a <f_mkfs+0x9c>
c000740a:	51                   	push   ecx
c000740b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000740f:	50                   	push   eax
c0007410:	6a 03                	push   0x3
c0007412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007416:	e8 44 a8 ff ff       	call   c0001c5f <disk_ioctl>
c000741b:	83 c4 10             	add    esp,0x10
c000741e:	85 c0                	test   eax,eax
c0007420:	74 08                	je     c000742a <f_mkfs+0x9c>
c0007422:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000742a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000742e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007431:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007436:	77 04                	ja     c000743c <f_mkfs+0xae>
c0007438:	85 c2                	test   edx,eax
c000743a:	74 08                	je     c0007444 <f_mkfs+0xb6>
c000743c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007444:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007447:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000744b:	48                   	dec    eax
c000744c:	3c 01                	cmp    al,0x1
c000744e:	76 05                	jbe    c0007455 <f_mkfs+0xc7>
c0007450:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007455:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007458:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000745c:	48                   	dec    eax
c000745d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007462:	77 07                	ja     c000746b <f_mkfs+0xdd>
c0007464:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007469:	74 08                	je     c0007473 <f_mkfs+0xe5>
c000746b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007473:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007476:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000747c:	77 07                	ja     c0007485 <f_mkfs+0xf7>
c000747e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007481:	85 d8                	test   eax,ebx
c0007483:	74 02                	je     c0007487 <f_mkfs+0xf9>
c0007485:	31 db                	xor    ebx,ebx
c0007487:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007492:	77 0a                	ja     c000749e <f_mkfs+0x110>
c0007494:	bb 11 00 00 00       	mov    ebx,0x11
c0007499:	e9 06 10 00 00       	jmp    c00084a4 <f_mkfs+0x1116>
c000749e:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00074a5:	8b 36                	mov    esi,DWORD PTR [esi]
c00074a7:	85 ed                	test   ebp,ebp
c00074a9:	75 1e                	jne    c00074c9 <f_mkfs+0x13b>
c00074ab:	83 ec 0c             	sub    esp,0xc
c00074ae:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074b5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074ba:	50                   	push   eax
c00074bb:	e8 f1 0f 00 00       	call   c00084b1 <ff_memalloc>
c00074c0:	83 c4 10             	add    esp,0x10
c00074c3:	89 c5                	mov    ebp,eax
c00074c5:	85 c0                	test   eax,eax
c00074c7:	74 cb                	je     c0007494 <f_mkfs+0x106>
c00074c9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074d1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074d9:	52                   	push   edx
c00074da:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074de:	50                   	push   eax
c00074df:	6a 01                	push   0x1
c00074e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074e5:	e8 75 a7 ff ff       	call   c0001c5f <disk_ioctl>
c00074ea:	83 c4 10             	add    esp,0x10
c00074ed:	85 c0                	test   eax,eax
c00074ef:	0f 85 4a 0f 00 00    	jne    c000843f <f_mkfs+0x10b1>
c00074f5:	89 f1                	mov    ecx,esi
c00074f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ff:	83 e1 0f             	and    ecx,0xf
c0007502:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000750a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000750e:	83 e6 08             	and    esi,0x8
c0007511:	75 56                	jne    c0007569 <f_mkfs+0x1db>
c0007513:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007517:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000751b:	83 ff 00             	cmp    edi,0x0
c000751e:	76 20                	jbe    c0007540 <f_mkfs+0x1b2>
c0007520:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007525:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000752d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007533:	83 d7 ff             	adc    edi,0xffffffff
c0007536:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000753a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000753e:	eb 21                	jmp    c0007561 <f_mkfs+0x1d3>
c0007540:	ba 3f 00 00 00       	mov    edx,0x3f
c0007545:	39 f2                	cmp    edx,esi
c0007547:	19 f8                	sbb    eax,edi
c0007549:	73 1e                	jae    c0007569 <f_mkfs+0x1db>
c000754b:	83 c6 c1             	add    esi,0xffffffc1
c000754e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007556:	83 d7 ff             	adc    edi,0xffffffff
c0007559:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000755d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007561:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007569:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000756d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007571:	89 04 24             	mov    DWORD PTR [esp],eax
c0007574:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007578:	31 c0                	xor    eax,eax
c000757a:	ba 7f 00 00 00       	mov    edx,0x7f
c000757f:	89 c7                	mov    edi,eax
c0007581:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007584:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007588:	0f 83 c5 0a 00 00    	jae    c0008053 <f_mkfs+0xcc5>
c000758e:	89 df                	mov    edi,ebx
c0007590:	c1 ef 09             	shr    edi,0x9
c0007593:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007597:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000759e:	c1 ef 09             	shr    edi,0x9
c00075a1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00075a6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00075aa:	74 29                	je     c00075d5 <f_mkfs+0x247>
c00075ac:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075b2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075b7:	0f 97 c2             	seta   dl
c00075ba:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075bd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075c1:	0f 92 c0             	setb   al
c00075c4:	08 c2                	or     dl,al
c00075c6:	75 5b                	jne    c0007623 <f_mkfs+0x295>
c00075c8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075cc:	83 e0 07             	and    eax,0x7
c00075cf:	3c 04                	cmp    al,0x4
c00075d1:	74 50                	je     c0007623 <f_mkfs+0x295>
c00075d3:	eb 1b                	jmp    c00075f0 <f_mkfs+0x262>
c00075d5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075da:	0f 87 73 0a 00 00    	ja     c0008053 <f_mkfs+0xcc5>
c00075e0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075e6:	76 08                	jbe    c00075f0 <f_mkfs+0x262>
c00075e8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075f0:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075f4:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075f8:	83 e0 01             	and    eax,0x1
c00075fb:	80 e1 02             	and    cl,0x2
c00075fe:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007602:	74 0d                	je     c0007611 <f_mkfs+0x283>
c0007604:	84 c0                	test   al,al
c0007606:	0f 84 53 09 00 00    	je     c0007f5f <f_mkfs+0xbd1>
c000760c:	e9 12 08 00 00       	jmp    c0007e23 <f_mkfs+0xa95>
c0007611:	bb 13 00 00 00       	mov    ebx,0x13
c0007616:	84 c0                	test   al,al
c0007618:	0f 85 05 08 00 00    	jne    c0007e23 <f_mkfs+0xa95>
c000761e:	e9 39 0e 00 00       	jmp    c000845c <f_mkfs+0x10ce>
c0007623:	31 c0                	xor    eax,eax
c0007625:	ba ff 0f 00 00       	mov    edx,0xfff
c000762a:	89 c7                	mov    edi,eax
c000762c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000762f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007633:	0f 83 1a 0a 00 00    	jae    c0008053 <f_mkfs+0xcc5>
c0007639:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000763f:	77 39                	ja     c000767a <f_mkfs+0x2ec>
c0007641:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007646:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000764e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007651:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007655:	73 08                	jae    c000765f <f_mkfs+0x2d1>
c0007657:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000765f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007664:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007667:	b8 00 00 00 00       	mov    eax,0x0
c000766c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007670:	73 08                	jae    c000767a <f_mkfs+0x2ec>
c0007672:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000767a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000767e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007682:	83 c0 20             	add    eax,0x20
c0007685:	83 d2 00             	adc    edx,0x0
c0007688:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000768c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007694:	31 d2                	xor    edx,edx
c0007696:	31 ff                	xor    edi,edi
c0007698:	52                   	push   edx
c0007699:	89 fb                	mov    ebx,edi
c000769b:	50                   	push   eax
c000769c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076a4:	e8 63 70 01 00       	call   c001e70c <__udivdi3>
c00076a9:	83 c4 10             	add    esp,0x10
c00076ac:	c1 e0 02             	shl    eax,0x2
c00076af:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076b3:	05 07 02 00 00       	add    eax,0x207
c00076b8:	89 f1                	mov    ecx,esi
c00076ba:	c1 e8 09             	shr    eax,0x9
c00076bd:	83 c1 ff             	add    ecx,0xffffffff
c00076c0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076c4:	83 d3 ff             	adc    ebx,0xffffffff
c00076c7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076cb:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076cf:	31 d2                	xor    edx,edx
c00076d1:	01 c8                	add    eax,ecx
c00076d3:	11 da                	adc    edx,ebx
c00076d5:	89 c1                	mov    ecx,eax
c00076d7:	f7 de                	neg    esi
c00076d9:	89 d0                	mov    eax,edx
c00076db:	83 d7 00             	adc    edi,0x0
c00076de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076e2:	f7 df                	neg    edi
c00076e4:	21 f1                	and    ecx,esi
c00076e6:	21 f8                	and    eax,edi
c00076e8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076f0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076f8:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ff:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007703:	0f ac d0 01          	shrd   eax,edx,0x1
c0007707:	89 df                	mov    edi,ebx
c0007709:	d1 ea                	shr    edx,1
c000770b:	39 c1                	cmp    ecx,eax
c000770d:	19 d7                	sbb    edi,edx
c000770f:	0f 83 3e 09 00 00    	jae    c0008053 <f_mkfs+0xcc5>
c0007715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007719:	31 d2                	xor    edx,edx
c000771b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000771f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007723:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007727:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000772a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000772e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007732:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007736:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000773a:	83 f8 0f             	cmp    eax,0xf
c000773d:	0f 86 10 09 00 00    	jbe    c0008053 <f_mkfs+0xcc5>
c0007743:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000774b:	0f 87 02 09 00 00    	ja     c0008053 <f_mkfs+0xcc5>
c0007751:	31 d2                	xor    edx,edx
c0007753:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007757:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000775f:	83 c0 07             	add    eax,0x7
c0007762:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000776a:	c1 e8 03             	shr    eax,0x3
c000776d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007774:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007778:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000777c:	c1 e0 09             	shl    eax,0x9
c000777f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007783:	48                   	dec    eax
c0007784:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007788:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000778c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007790:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007794:	31 d2                	xor    edx,edx
c0007796:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000779a:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00077a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00077aa:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00077ae:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00077b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077b6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077ba:	31 ff                	xor    edi,edi
c00077bc:	31 f6                	xor    esi,esi
c00077be:	31 db                	xor    ebx,ebx
c00077c0:	85 ff                	test   edi,edi
c00077c2:	74 05                	je     c00077c9 <f_mkfs+0x43b>
c00077c4:	4f                   	dec    edi
c00077c5:	74 44                	je     c000780b <f_mkfs+0x47d>
c00077c7:	eb 4f                	jmp    c0007818 <f_mkfs+0x48a>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	0f b7 c3             	movzx  eax,bx
c00077cf:	50                   	push   eax
c00077d0:	e8 05 0e 00 00       	call   c00085da <ff_wtoupper>
c00077d5:	83 c4 10             	add    esp,0x10
c00077d8:	89 c1                	mov    ecx,eax
c00077da:	8d 53 01             	lea    edx,[ebx+0x1]
c00077dd:	66 39 c3             	cmp    bx,ax
c00077e0:	75 3e                	jne    c0007820 <f_mkfs+0x492>
c00077e2:	be 01 00 00 00       	mov    esi,0x1
c00077e7:	89 df                	mov    edi,ebx
c00077e9:	66 01 f7             	add    di,si
c00077ec:	75 07                	jne    c00077f5 <f_mkfs+0x467>
c00077ee:	83 fe 7f             	cmp    esi,0x7f
c00077f1:	77 31                	ja     c0007824 <f_mkfs+0x496>
c00077f3:	eb 16                	jmp    c000780b <f_mkfs+0x47d>
c00077f5:	83 ec 0c             	sub    esp,0xc
c00077f8:	0f b7 ff             	movzx  edi,di
c00077fb:	57                   	push   edi
c00077fc:	e8 d9 0d 00 00       	call   c00085da <ff_wtoupper>
c0007801:	83 c4 10             	add    esp,0x10
c0007804:	39 c7                	cmp    edi,eax
c0007806:	75 e6                	jne    c00077ee <f_mkfs+0x460>
c0007808:	46                   	inc    esi
c0007809:	eb dc                	jmp    c00077e7 <f_mkfs+0x459>
c000780b:	31 c0                	xor    eax,eax
c000780d:	89 d9                	mov    ecx,ebx
c000780f:	4e                   	dec    esi
c0007810:	0f 95 c0             	setne  al
c0007813:	43                   	inc    ebx
c0007814:	89 c7                	mov    edi,eax
c0007816:	eb 14                	jmp    c000782c <f_mkfs+0x49e>
c0007818:	89 f1                	mov    ecx,esi
c000781a:	01 f3                	add    ebx,esi
c000781c:	31 ff                	xor    edi,edi
c000781e:	eb 0c                	jmp    c000782c <f_mkfs+0x49e>
c0007820:	89 d3                	mov    ebx,edx
c0007822:	eb 08                	jmp    c000782c <f_mkfs+0x49e>
c0007824:	bf 02 00 00 00       	mov    edi,0x2
c0007829:	83 c9 ff             	or     ecx,0xffffffff
c000782c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007837:	0f b6 c1             	movzx  eax,cl
c000783a:	e8 3a a9 ff ff       	call   c0002179 <xsum32>
c000783f:	66 c1 e9 08          	shr    cx,0x8
c0007843:	89 c2                	mov    edx,eax
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000784c:	0f b7 c1             	movzx  eax,cx
c000784f:	e8 25 a9 ff ff       	call   c0002179 <xsum32>
c0007854:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007859:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000785d:	66 85 db             	test   bx,bx
c0007860:	74 1f                	je     c0007881 <f_mkfs+0x4f3>
c0007862:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007865:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000786c:	83 c0 02             	add    eax,0x2
c000786f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007875:	39 c2                	cmp    edx,eax
c0007877:	74 08                	je     c0007881 <f_mkfs+0x4f3>
c0007879:	89 04 24             	mov    DWORD PTR [esp],eax
c000787c:	e9 3f ff ff ff       	jmp    c00077c0 <f_mkfs+0x432>
c0007881:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007884:	83 ec 0c             	sub    esp,0xc
c0007887:	05 01 02 00 00       	add    eax,0x201
c000788c:	c1 e8 09             	shr    eax,0x9
c000788f:	50                   	push   eax
c0007890:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007894:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007898:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000789c:	55                   	push   ebp
c000789d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078a1:	e8 a3 a3 ff ff       	call   c0001c49 <disk_write>
c00078a6:	83 c4 20             	add    esp,0x20
c00078a9:	85 c0                	test   eax,eax
c00078ab:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00078ae:	0f 85 8b 0b 00 00    	jne    c000843f <f_mkfs+0x10b1>
c00078b4:	89 d0                	mov    eax,edx
c00078b6:	31 d2                	xor    edx,edx
c00078b8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078bc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078c0:	66 85 db             	test   bx,bx
c00078c3:	74 04                	je     c00078c9 <f_mkfs+0x53b>
c00078c5:	31 c0                	xor    eax,eax
c00078c7:	eb b0                	jmp    c0007879 <f_mkfs+0x4eb>
c00078c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078cd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078d1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078d5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078db:	31 d2                	xor    edx,edx
c00078dd:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078e8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078ec:	c1 eb 09             	shr    ebx,0x9
c00078ef:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078fa:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007902:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007906:	8d 70 01             	lea    esi,[eax+0x1]
c0007909:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000790d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007911:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007918:	31 d2                	xor    edx,edx
c000791a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000791f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007922:	89 c1                	mov    ecx,eax
c0007924:	89 e8                	mov    eax,ebp
c0007926:	e8 e7 a3 ff ff       	call   c0001d12 <mem_set>
c000792b:	31 c0                	xor    eax,eax
c000792d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007930:	76 10                	jbe    c0007942 <f_mkfs+0x5b4>
c0007932:	83 fe 07             	cmp    esi,0x7
c0007935:	76 0b                	jbe    c0007942 <f_mkfs+0x5b4>
c0007937:	40                   	inc    eax
c0007938:	83 ee 08             	sub    esi,0x8
c000793b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007940:	eb eb                	jmp    c000792d <f_mkfs+0x59f>
c0007942:	b2 01                	mov    dl,0x1
c0007944:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007948:	85 f6                	test   esi,esi
c000794a:	74 0c                	je     c0007958 <f_mkfs+0x5ca>
c000794c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000794f:	76 07                	jbe    c0007958 <f_mkfs+0x5ca>
c0007951:	08 11                	or     BYTE PTR [ecx],dl
c0007953:	4e                   	dec    esi
c0007954:	d1 e2                	shl    edx,1
c0007956:	eb f0                	jmp    c0007948 <f_mkfs+0x5ba>
c0007958:	89 df                	mov    edi,ebx
c000795a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000795e:	76 04                	jbe    c0007964 <f_mkfs+0x5d6>
c0007960:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007964:	83 ec 0c             	sub    esp,0xc
c0007967:	57                   	push   edi
c0007968:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000796c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007970:	55                   	push   ebp
c0007971:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007975:	e8 cf a2 ff ff       	call   c0001c49 <disk_write>
c000797a:	83 c4 20             	add    esp,0x20
c000797d:	85 c0                	test   eax,eax
c000797f:	0f 85 ba 0a 00 00    	jne    c000843f <f_mkfs+0x10b1>
c0007985:	31 d2                	xor    edx,edx
c0007987:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000798b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000798f:	29 fb                	sub    ebx,edi
c0007991:	0f 85 7a ff ff ff    	jne    c0007911 <f_mkfs+0x583>
c0007997:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000799b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00079a3:	31 f6                	xor    esi,esi
c00079a5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079a9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00079ac:	31 d2                	xor    edx,edx
c00079ae:	89 e8                	mov    eax,ebp
c00079b0:	e8 5d a3 ff ff       	call   c0001d12 <mem_set>
c00079b5:	31 c9                	xor    ecx,ecx
c00079b7:	85 db                	test   ebx,ebx
c00079b9:	75 40                	jne    c00079fb <f_mkfs+0x66d>
c00079bb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079c0:	89 e8                	mov    eax,ebp
c00079c2:	bb 02 00 00 00       	mov    ebx,0x2
c00079c7:	e8 28 a3 ff ff       	call   c0001cf4 <st_dword>
c00079cc:	8d 45 04             	lea    eax,[ebp+0x4]
c00079cf:	83 ca ff             	or     edx,0xffffffff
c00079d2:	e8 1d a3 ff ff       	call   c0001cf4 <st_dword>
c00079d7:	b9 08 00 00 00       	mov    ecx,0x8
c00079dc:	eb 1d                	jmp    c00079fb <f_mkfs+0x66d>
c00079de:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079e1:	76 3b                	jbe    c0007a1e <f_mkfs+0x690>
c00079e3:	43                   	inc    ebx
c00079e4:	83 fe 01             	cmp    esi,0x1
c00079e7:	89 da                	mov    edx,ebx
c00079e9:	77 03                	ja     c00079ee <f_mkfs+0x660>
c00079eb:	83 ca ff             	or     edx,0xffffffff
c00079ee:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079f2:	4e                   	dec    esi
c00079f3:	e8 fc a2 ff ff       	call   c0001cf4 <st_dword>
c00079f8:	83 c1 04             	add    ecx,0x4
c00079fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ff:	85 f6                	test   esi,esi
c0007a01:	75 db                	jne    c00079de <f_mkfs+0x650>
c0007a03:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007a08:	77 14                	ja     c0007a1e <f_mkfs+0x690>
c0007a0a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007a0e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a15:	85 f6                	test   esi,esi
c0007a17:	74 05                	je     c0007a1e <f_mkfs+0x690>
c0007a19:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a1c:	77 dd                	ja     c00079fb <f_mkfs+0x66d>
c0007a1e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a22:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a26:	39 cf                	cmp    edi,ecx
c0007a28:	76 02                	jbe    c0007a2c <f_mkfs+0x69e>
c0007a2a:	89 cf                	mov    edi,ecx
c0007a2c:	83 ec 0c             	sub    esp,0xc
c0007a2f:	57                   	push   edi
c0007a30:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a34:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a38:	55                   	push   ebp
c0007a39:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a3d:	e8 07 a2 ff ff       	call   c0001c49 <disk_write>
c0007a42:	83 c4 20             	add    esp,0x20
c0007a45:	85 c0                	test   eax,eax
c0007a47:	0f 85 f2 09 00 00    	jne    c000843f <f_mkfs+0x10b1>
c0007a4d:	31 d2                	xor    edx,edx
c0007a4f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a53:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a57:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a5b:	0f 85 48 ff ff ff    	jne    c00079a9 <f_mkfs+0x61b>
c0007a61:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a64:	31 d2                	xor    edx,edx
c0007a66:	89 e8                	mov    eax,ebp
c0007a68:	31 ff                	xor    edi,edi
c0007a6a:	e8 a3 a2 ff ff       	call   c0001d12 <mem_set>
c0007a6f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a72:	ba 02 00 00 00       	mov    edx,0x2
c0007a77:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a7b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a7f:	e8 70 a2 ff ff       	call   c0001cf4 <st_dword>
c0007a84:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a87:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a8b:	e8 64 a2 ff ff       	call   c0001cf4 <st_dword>
c0007a90:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a93:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a97:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a9b:	e8 54 a2 ff ff       	call   c0001cf4 <st_dword>
c0007aa0:	8d 45 54             	lea    eax,[ebp+0x54]
c0007aa3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007aa7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007aab:	83 c2 02             	add    edx,0x2
c0007aae:	e8 41 a2 ff ff       	call   c0001cf4 <st_dword>
c0007ab3:	8d 45 58             	lea    eax,[ebp+0x58]
c0007ab6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007abe:	e8 31 a2 ff ff       	call   c0001cf4 <st_dword>
c0007ac3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ac7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007acc:	89 c6                	mov    esi,eax
c0007ace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ad2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ad6:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ad9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007add:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ae0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ae4:	39 cb                	cmp    ebx,ecx
c0007ae6:	76 02                	jbe    c0007aea <f_mkfs+0x75c>
c0007ae8:	89 cb                	mov    ebx,ecx
c0007aea:	83 ec 0c             	sub    esp,0xc
c0007aed:	53                   	push   ebx
c0007aee:	57                   	push   edi
c0007aef:	56                   	push   esi
c0007af0:	55                   	push   ebp
c0007af1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007af5:	e8 4f a1 ff ff       	call   c0001c49 <disk_write>
c0007afa:	83 c4 20             	add    esp,0x20
c0007afd:	85 c0                	test   eax,eax
c0007aff:	0f 85 3a 09 00 00    	jne    c000843f <f_mkfs+0x10b1>
c0007b05:	31 d2                	xor    edx,edx
c0007b07:	b9 00 02 00 00       	mov    ecx,0x200
c0007b0c:	89 e8                	mov    eax,ebp
c0007b0e:	e8 ff a1 ff ff       	call   c0001d12 <mem_set>
c0007b13:	31 d2                	xor    edx,edx
c0007b15:	01 de                	add    esi,ebx
c0007b17:	11 d7                	adc    edi,edx
c0007b19:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b1c:	75 bf                	jne    c0007add <f_mkfs+0x74f>
c0007b1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b22:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b26:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b2e:	b9 00 02 00 00       	mov    ecx,0x200
c0007b33:	31 d2                	xor    edx,edx
c0007b35:	89 e8                	mov    eax,ebp
c0007b37:	e8 d6 a1 ff ff       	call   c0001d12 <mem_set>
c0007b3c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b41:	ba a0 f7 01 c0       	mov    edx,0xc001f7a0
c0007b46:	89 e8                	mov    eax,ebp
c0007b48:	e8 b0 a1 ff ff       	call   c0001cfd <mem_cpy>
c0007b4d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b54:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b58:	e8 9a a1 ff ff       	call   c0001cf7 <st_qword>
c0007b5d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b61:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b64:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b68:	e8 8a a1 ff ff       	call   c0001cf7 <st_qword>
c0007b6d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b70:	ba 20 00 00 00       	mov    edx,0x20
c0007b75:	e8 7a a1 ff ff       	call   c0001cf4 <st_dword>
c0007b7a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b7e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b82:	e8 6d a1 ff ff       	call   c0001cf4 <st_dword>
c0007b87:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b8b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b8f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b93:	e8 5c a1 ff ff       	call   c0001cf4 <st_dword>
c0007b98:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b9f:	e8 50 a1 ff ff       	call   c0001cf4 <st_dword>
c0007ba4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007ba8:	8d 50 02             	lea    edx,[eax+0x2]
c0007bab:	8d 45 60             	lea    eax,[ebp+0x60]
c0007bae:	e8 41 a1 ff ff       	call   c0001cf4 <st_dword>
c0007bb3:	8d 45 64             	lea    eax,[ebp+0x64]
c0007bb6:	ba 00 00 21 50       	mov    edx,0x50210000
c0007bbb:	e8 34 a1 ff ff       	call   c0001cf4 <st_dword>
c0007bc0:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bc3:	ba 00 01 00 00       	mov    edx,0x100
c0007bc8:	e8 23 a1 ff ff       	call   c0001cf0 <st_word>
c0007bcd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bd1:	b8 0a 00 00 00       	mov    eax,0xa
c0007bd6:	48                   	dec    eax
c0007bd7:	74 05                	je     c0007bde <f_mkfs+0x850>
c0007bd9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bdc:	eb f8                	jmp    c0007bd6 <f_mkfs+0x848>
c0007bde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007be6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bea:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bee:	74 05                	je     c0007bf5 <f_mkfs+0x867>
c0007bf0:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bf3:	eb f5                	jmp    c0007bea <f_mkfs+0x85c>
c0007bf5:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bf8:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bfd:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007c03:	31 db                	xor    ebx,ebx
c0007c05:	e8 e6 a0 ff ff       	call   c0001cf0 <st_word>
c0007c0a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007c10:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c15:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c18:	e8 d3 a0 ff ff       	call   c0001cf0 <st_word>
c0007c1d:	31 c9                	xor    ecx,ecx
c0007c1f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c22:	83 f8 01             	cmp    eax,0x1
c0007c25:	76 13                	jbe    c0007c3a <f_mkfs+0x8ac>
c0007c27:	83 f9 70             	cmp    ecx,0x70
c0007c2a:	74 0e                	je     c0007c3a <f_mkfs+0x8ac>
c0007c2c:	89 da                	mov    edx,ebx
c0007c2e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c33:	e8 41 a5 ff ff       	call   c0002179 <xsum32>
c0007c38:	89 c3                	mov    ebx,eax
c0007c3a:	41                   	inc    ecx
c0007c3b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c41:	75 dc                	jne    c0007c1f <f_mkfs+0x891>
c0007c43:	89 f0                	mov    eax,esi
c0007c45:	89 fa                	mov    edx,edi
c0007c47:	83 c0 01             	add    eax,0x1
c0007c4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c4e:	83 d2 00             	adc    edx,0x0
c0007c51:	83 ec 0c             	sub    esp,0xc
c0007c54:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c58:	6a 01                	push   0x1
c0007c5a:	57                   	push   edi
c0007c5b:	56                   	push   esi
c0007c5c:	55                   	push   ebp
c0007c5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c61:	e8 e3 9f ff ff       	call   c0001c49 <disk_write>
c0007c66:	83 c4 20             	add    esp,0x20
c0007c69:	85 c0                	test   eax,eax
c0007c6b:	0f 85 ce 07 00 00    	jne    c000843f <f_mkfs+0x10b1>
c0007c71:	31 d2                	xor    edx,edx
c0007c73:	b9 00 02 00 00       	mov    ecx,0x200
c0007c78:	89 e8                	mov    eax,ebp
c0007c7a:	e8 93 a0 ff ff       	call   c0001d12 <mem_set>
c0007c7f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c84:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c87:	e8 64 a0 ff ff       	call   c0001cf0 <st_word>
c0007c8c:	89 f0                	mov    eax,esi
c0007c8e:	89 fa                	mov    edx,edi
c0007c90:	83 c0 09             	add    eax,0x9
c0007c93:	83 d2 00             	adc    edx,0x0
c0007c96:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c99:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c9d:	31 c9                	xor    ecx,ecx
c0007c9f:	41                   	inc    ecx
c0007ca0:	89 da                	mov    edx,ebx
c0007ca2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ca7:	e8 cd a4 ff ff       	call   c0002179 <xsum32>
c0007cac:	89 c3                	mov    ebx,eax
c0007cae:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cb4:	75 e9                	jne    c0007c9f <f_mkfs+0x911>
c0007cb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007cba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007cbe:	83 c0 01             	add    eax,0x1
c0007cc1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cc5:	83 d2 00             	adc    edx,0x0
c0007cc8:	83 ec 0c             	sub    esp,0xc
c0007ccb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007ccf:	6a 01                	push   0x1
c0007cd1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cd5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cd9:	55                   	push   ebp
c0007cda:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cde:	e8 66 9f ff ff       	call   c0001c49 <disk_write>
c0007ce3:	83 c4 20             	add    esp,0x20
c0007ce6:	85 c0                	test   eax,eax
c0007ce8:	0f 85 51 07 00 00    	jne    c000843f <f_mkfs+0x10b1>
c0007cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf2:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cf6:	75 09                	jne    c0007d01 <f_mkfs+0x973>
c0007cf8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cfb:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cff:	74 12                	je     c0007d13 <f_mkfs+0x985>
c0007d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d05:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007d09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d0d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007d11:	eb 8a                	jmp    c0007c9d <f_mkfs+0x90f>
c0007d13:	31 d2                	xor    edx,edx
c0007d15:	b9 00 02 00 00       	mov    ecx,0x200
c0007d1a:	89 e8                	mov    eax,ebp
c0007d1c:	e8 f1 9f ff ff       	call   c0001d12 <mem_set>
c0007d21:	83 c6 0b             	add    esi,0xb
c0007d24:	83 d7 00             	adc    edi,0x0
c0007d27:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d2b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d2f:	31 c9                	xor    ecx,ecx
c0007d31:	41                   	inc    ecx
c0007d32:	89 da                	mov    edx,ebx
c0007d34:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d39:	e8 3b a4 ff ff       	call   c0002179 <xsum32>
c0007d3e:	89 c3                	mov    ebx,eax
c0007d40:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d46:	75 e9                	jne    c0007d31 <f_mkfs+0x9a3>
c0007d48:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d4b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d4f:	83 c6 01             	add    esi,0x1
c0007d52:	83 d7 00             	adc    edi,0x0
c0007d55:	83 ec 0c             	sub    esp,0xc
c0007d58:	6a 01                	push   0x1
c0007d5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d62:	55                   	push   ebp
c0007d63:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d67:	e8 dd 9e ff ff       	call   c0001c49 <disk_write>
c0007d6c:	83 c4 20             	add    esp,0x20
c0007d6f:	85 c0                	test   eax,eax
c0007d71:	0f 85 c8 06 00 00    	jne    c000843f <f_mkfs+0x10b1>
c0007d77:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d7b:	75 06                	jne    c0007d83 <f_mkfs+0x9f5>
c0007d7d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d81:	74 09                	je     c0007d8c <f_mkfs+0x9fe>
c0007d83:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d86:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d8a:	eb a3                	jmp    c0007d2f <f_mkfs+0x9a1>
c0007d8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d90:	89 da                	mov    edx,ebx
c0007d92:	01 e8                	add    eax,ebp
c0007d94:	e8 5b 9f ff ff       	call   c0001cf4 <st_dword>
c0007d99:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d9e:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007da6:	75 e4                	jne    c0007d8c <f_mkfs+0x9fe>
c0007da8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007dab:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007daf:	83 c6 02             	add    esi,0x2
c0007db2:	83 d7 00             	adc    edi,0x0
c0007db5:	83 ec 0c             	sub    esp,0xc
c0007db8:	6a 01                	push   0x1
c0007dba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dbe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dc2:	55                   	push   ebp
c0007dc3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007dc7:	e8 7d 9e ff ff       	call   c0001c49 <disk_write>
c0007dcc:	83 c4 20             	add    esp,0x20
c0007dcf:	85 c0                	test   eax,eax
c0007dd1:	0f 85 68 06 00 00    	jne    c000843f <f_mkfs+0x10b1>
c0007dd7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ddc:	74 0d                	je     c0007deb <f_mkfs+0xa5d>
c0007dde:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007de6:	e9 43 fd ff ff       	jmp    c0007b2e <f_mkfs+0x7a0>
c0007deb:	b1 07                	mov    cl,0x7
c0007ded:	e9 e3 05 00 00       	jmp    c00083d5 <f_mkfs+0x1047>
c0007df2:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007df7:	0f 85 4f 02 00 00    	jne    c000804c <f_mkfs+0xcbe>
c0007dfd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e02:	0f 86 22 02 00 00    	jbe    c000802a <f_mkfs+0xc9c>
c0007e08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e0d:	0f 85 81 06 00 00    	jne    c0008494 <f_mkfs+0x1106>
c0007e13:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e1a:	83 f8 40             	cmp    eax,0x40
c0007e1d:	0f 87 51 06 00 00    	ja     c0008474 <f_mkfs+0x10e6>
c0007e23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e27:	85 ff                	test   edi,edi
c0007e29:	75 1c                	jne    c0007e47 <f_mkfs+0xab9>
c0007e2b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e2e:	ba a0 f6 01 c0       	mov    edx,0xc001f6a0
c0007e33:	c1 e9 0c             	shr    ecx,0xc
c0007e36:	bf 01 00 00 00       	mov    edi,0x1
c0007e3b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e3e:	66 85 c0             	test   ax,ax
c0007e41:	0f 85 95 01 00 00    	jne    c0007fdc <f_mkfs+0xc4e>
c0007e47:	31 d2                	xor    edx,edx
c0007e49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e4c:	f7 f7                	div    edi
c0007e4e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e53:	0f 86 95 01 00 00    	jbe    c0007fee <f_mkfs+0xc60>
c0007e59:	83 c0 02             	add    eax,0x2
c0007e5c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e61:	01 c0                	add    eax,eax
c0007e63:	05 ff 01 00 00       	add    eax,0x1ff
c0007e68:	be 01 00 00 00       	mov    esi,0x1
c0007e6d:	c1 e8 09             	shr    eax,0x9
c0007e70:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e78:	c1 e0 05             	shl    eax,0x5
c0007e7b:	c1 e8 09             	shr    eax,0x9
c0007e7e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e82:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e87:	31 d2                	xor    edx,edx
c0007e89:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e8d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e91:	89 f0                	mov    eax,esi
c0007e93:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e97:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e9b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e9f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007ea3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007ea7:	31 d2                	xor    edx,edx
c0007ea9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007eae:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007eb2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007eb6:	31 db                	xor    ebx,ebx
c0007eb8:	01 c8                	add    eax,ecx
c0007eba:	11 da                	adc    edx,ebx
c0007ebc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ec0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ec4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ec8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ecc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ed0:	f7 da                	neg    edx
c0007ed2:	21 d1                	and    ecx,edx
c0007ed4:	29 d9                	sub    ecx,ebx
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	0f 85 20 01 00 00    	jne    c0008001 <f_mkfs+0xc73>
c0007ee1:	31 db                	xor    ebx,ebx
c0007ee3:	01 ce                	add    esi,ecx
c0007ee5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ee9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007eed:	31 d2                	xor    edx,edx
c0007eef:	89 f8                	mov    eax,edi
c0007ef1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ef5:	c1 e0 04             	shl    eax,0x4
c0007ef8:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007efc:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007f00:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007f04:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007f08:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007f0b:	19 d3                	sbb    ebx,edx
c0007f0d:	0f 82 40 01 00 00    	jb     c0008053 <f_mkfs+0xcc5>
c0007f13:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f16:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f1a:	89 c8                	mov    eax,ecx
c0007f1c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f21:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f25:	29 f0                	sub    eax,esi
c0007f27:	29 d0                	sub    eax,edx
c0007f29:	31 d2                	xor    edx,edx
c0007f2b:	f7 f7                	div    edi
c0007f2d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f32:	89 c3                	mov    ebx,eax
c0007f34:	0f 85 b8 fe ff ff    	jne    c0007df2 <f_mkfs+0xa64>
c0007f3a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f3f:	0f 87 1d 01 00 00    	ja     c0008062 <f_mkfs+0xcd4>
c0007f45:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f4a:	0f 85 03 01 00 00    	jne    c0008053 <f_mkfs+0xcc5>
c0007f50:	83 ff 01             	cmp    edi,0x1
c0007f53:	0f 86 fa 00 00 00    	jbe    c0008053 <f_mkfs+0xcc5>
c0007f59:	d1 ef                	shr    edi,1
c0007f5b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f5f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f63:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f66:	85 db                	test   ebx,ebx
c0007f68:	75 2d                	jne    c0007f97 <f_mkfs+0xc09>
c0007f6a:	89 cb                	mov    ebx,ecx
c0007f6c:	ba b0 f6 01 c0       	mov    edx,0xc001f6b0
c0007f71:	c1 eb 11             	shr    ebx,0x11
c0007f74:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f7c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f7f:	66 85 c0             	test   ax,ax
c0007f82:	74 11                	je     c0007f95 <f_mkfs+0xc07>
c0007f84:	83 c2 02             	add    edx,0x2
c0007f87:	39 d8                	cmp    eax,ebx
c0007f89:	77 0a                	ja     c0007f95 <f_mkfs+0xc07>
c0007f8b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f8f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f93:	eb e7                	jmp    c0007f7c <f_mkfs+0xbee>
c0007f95:	31 db                	xor    ebx,ebx
c0007f97:	31 d2                	xor    edx,edx
c0007f99:	89 c8                	mov    eax,ecx
c0007f9b:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f9f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007fa6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007fab:	c1 ea 09             	shr    edx,0x9
c0007fae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fb3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fb7:	0f 87 96 00 00 00    	ja     c0008053 <f_mkfs+0xcc5>
c0007fbd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fc1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fc9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fcd:	be 20 00 00 00       	mov    esi,0x20
c0007fd2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fd7:	e9 a6 fe ff ff       	jmp    c0007e82 <f_mkfs+0xaf4>
c0007fdc:	83 c2 02             	add    edx,0x2
c0007fdf:	39 c8                	cmp    eax,ecx
c0007fe1:	0f 87 60 fe ff ff    	ja     c0007e47 <f_mkfs+0xab9>
c0007fe7:	01 ff                	add    edi,edi
c0007fe9:	e9 4d fe ff ff       	jmp    c0007e3b <f_mkfs+0xaad>
c0007fee:	8d 04 40             	lea    eax,[eax+eax*2]
c0007ff1:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007ff6:	40                   	inc    eax
c0007ff7:	d1 e8                	shr    eax,1
c0007ff9:	83 c0 03             	add    eax,0x3
c0007ffc:	e9 62 fe ff ff       	jmp    c0007e63 <f_mkfs+0xad5>
c0008001:	31 d2                	xor    edx,edx
c0008003:	89 c8                	mov    eax,ecx
c0008005:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008009:	85 d2                	test   edx,edx
c000800b:	74 0c                	je     c0008019 <f_mkfs+0xc8b>
c000800d:	49                   	dec    ecx
c000800e:	46                   	inc    esi
c000800f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008014:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008019:	89 c8                	mov    eax,ecx
c000801b:	31 d2                	xor    edx,edx
c000801d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008021:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008025:	e9 c3 fe ff ff       	jmp    c0007eed <f_mkfs+0xb5f>
c000802a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000802f:	77 31                	ja     c0008062 <f_mkfs+0xcd4>
c0008031:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008036:	75 1b                	jne    c0008053 <f_mkfs+0xcc5>
c0008038:	8d 04 3f             	lea    eax,[edi+edi*1]
c000803b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000803f:	3d 80 00 00 00       	cmp    eax,0x80
c0008044:	0f 86 d9 fd ff ff    	jbe    c0007e23 <f_mkfs+0xa95>
c000804a:	eb 07                	jmp    c0008053 <f_mkfs+0xcc5>
c000804c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008051:	76 0a                	jbe    c000805d <f_mkfs+0xccf>
c0008053:	bb 0e 00 00 00       	mov    ebx,0xe
c0008058:	e9 ff 03 00 00       	jmp    c000845c <f_mkfs+0x10ce>
c000805d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008062:	31 d2                	xor    edx,edx
c0008064:	b9 00 02 00 00       	mov    ecx,0x200
c0008069:	89 e8                	mov    eax,ebp
c000806b:	e8 a2 9c ff ff       	call   c0001d12 <mem_set>
c0008070:	b9 0b 00 00 00       	mov    ecx,0xb
c0008075:	ba c2 f7 01 c0       	mov    edx,0xc001f7c2
c000807a:	89 e8                	mov    eax,ebp
c000807c:	e8 7c 9c ff ff       	call   c0001cfd <mem_cpy>
c0008081:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008084:	ba 00 02 00 00       	mov    edx,0x200
c0008089:	e8 62 9c ff ff       	call   c0001cf0 <st_word>
c000808e:	89 f8                	mov    eax,edi
c0008090:	0f b7 d6             	movzx  edx,si
c0008093:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008096:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008099:	e8 52 9c ff ff       	call   c0001cf0 <st_word>
c000809e:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00080a2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080a7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00080aa:	75 08                	jne    c00080b4 <f_mkfs+0xd26>
c00080ac:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080b4:	8d 45 11             	lea    eax,[ebp+0x11]
c00080b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080bb:	e8 30 9c ff ff       	call   c0001cf0 <st_word>
c00080c0:	b8 ff ff 00 00       	mov    eax,0xffff
c00080c5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080c9:	39 d0                	cmp    eax,edx
c00080cb:	b8 00 00 00 00       	mov    eax,0x0
c00080d0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080d4:	72 0a                	jb     c00080e0 <f_mkfs+0xd52>
c00080d6:	8d 45 13             	lea    eax,[ebp+0x13]
c00080d9:	e8 12 9c ff ff       	call   c0001cf0 <st_word>
c00080de:	eb 08                	jmp    c00080e8 <f_mkfs+0xd5a>
c00080e0:	8d 45 20             	lea    eax,[ebp+0x20]
c00080e3:	e8 0c 9c ff ff       	call   c0001cf4 <st_dword>
c00080e8:	8d 45 18             	lea    eax,[ebp+0x18]
c00080eb:	ba 3f 00 00 00       	mov    edx,0x3f
c00080f0:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080f4:	e8 f7 9b ff ff       	call   c0001cf0 <st_word>
c00080f9:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080fc:	ba ff 00 00 00       	mov    edx,0xff
c0008101:	e8 ea 9b ff ff       	call   c0001cf0 <st_word>
c0008106:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008109:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000810d:	e8 e2 9b ff ff       	call   c0001cf4 <st_dword>
c0008112:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008117:	75 57                	jne    c0008170 <f_mkfs+0xde2>
c0008119:	8d 45 43             	lea    eax,[ebp+0x43]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 ce 9b ff ff       	call   c0001cf4 <st_dword>
c0008126:	8d 45 24             	lea    eax,[ebp+0x24]
c0008129:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000812d:	e8 c2 9b ff ff       	call   c0001cf4 <st_dword>
c0008132:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008135:	ba 02 00 00 00       	mov    edx,0x2
c000813a:	e8 b5 9b ff ff       	call   c0001cf4 <st_dword>
c000813f:	8d 45 30             	lea    eax,[ebp+0x30]
c0008142:	ba 01 00 00 00       	mov    edx,0x1
c0008147:	e8 a4 9b ff ff       	call   c0001cf0 <st_word>
c000814c:	8d 45 32             	lea    eax,[ebp+0x32]
c000814f:	ba 06 00 00 00       	mov    edx,0x6
c0008154:	e8 97 9b ff ff       	call   c0001cf0 <st_word>
c0008159:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000815d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008161:	8d 45 47             	lea    eax,[ebp+0x47]
c0008164:	b9 13 00 00 00       	mov    ecx,0x13
c0008169:	ba ce f7 01 c0       	mov    edx,0xc001f7ce
c000816e:	eb 2f                	jmp    c000819f <f_mkfs+0xe11>
c0008170:	8d 45 27             	lea    eax,[ebp+0x27]
c0008173:	ba 00 00 21 50       	mov    edx,0x50210000
c0008178:	e8 77 9b ff ff       	call   c0001cf4 <st_dword>
c000817d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008182:	8d 45 16             	lea    eax,[ebp+0x16]
c0008185:	e8 66 9b ff ff       	call   c0001cf0 <st_word>
c000818a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000818e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008192:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008195:	b9 13 00 00 00       	mov    ecx,0x13
c000819a:	ba e2 f7 01 c0       	mov    edx,0xc001f7e2
c000819f:	e8 59 9b ff ff       	call   c0001cfd <mem_cpy>
c00081a4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00081aa:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081af:	89 f0                	mov    eax,esi
c00081b1:	e8 3a 9b ff ff       	call   c0001cf0 <st_word>
c00081b6:	83 ec 0c             	sub    esp,0xc
c00081b9:	6a 01                	push   0x1
c00081bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081c3:	55                   	push   ebp
c00081c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c8:	e8 7c 9a ff ff       	call   c0001c49 <disk_write>
c00081cd:	83 c4 20             	add    esp,0x20
c00081d0:	85 c0                	test   eax,eax
c00081d2:	0f 85 67 02 00 00    	jne    c000843f <f_mkfs+0x10b1>
c00081d8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081dd:	0f 85 b7 00 00 00    	jne    c000829a <f_mkfs+0xf0c>
c00081e3:	83 ec 0c             	sub    esp,0xc
c00081e6:	6a 01                	push   0x1
c00081e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081ec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081f0:	83 c0 06             	add    eax,0x6
c00081f3:	83 d2 00             	adc    edx,0x0
c00081f6:	52                   	push   edx
c00081f7:	50                   	push   eax
c00081f8:	55                   	push   ebp
c00081f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081fd:	e8 47 9a ff ff       	call   c0001c49 <disk_write>
c0008202:	83 c4 20             	add    esp,0x20
c0008205:	b9 00 02 00 00       	mov    ecx,0x200
c000820a:	31 d2                	xor    edx,edx
c000820c:	89 e8                	mov    eax,ebp
c000820e:	e8 ff 9a ff ff       	call   c0001d12 <mem_set>
c0008213:	ba 52 52 61 41       	mov    edx,0x41615252
c0008218:	89 e8                	mov    eax,ebp
c000821a:	e8 d5 9a ff ff       	call   c0001cf4 <st_dword>
c000821f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008225:	ba 72 72 41 61       	mov    edx,0x61417272
c000822a:	e8 c5 9a ff ff       	call   c0001cf4 <st_dword>
c000822f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008232:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008238:	e8 b7 9a ff ff       	call   c0001cf4 <st_dword>
c000823d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008243:	ba 02 00 00 00       	mov    edx,0x2
c0008248:	e8 a7 9a ff ff       	call   c0001cf4 <st_dword>
c000824d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008252:	89 f0                	mov    eax,esi
c0008254:	e8 97 9a ff ff       	call   c0001cf0 <st_word>
c0008259:	83 ec 0c             	sub    esp,0xc
c000825c:	6a 01                	push   0x1
c000825e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008262:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008266:	83 c0 07             	add    eax,0x7
c0008269:	83 d2 00             	adc    edx,0x0
c000826c:	52                   	push   edx
c000826d:	50                   	push   eax
c000826e:	55                   	push   ebp
c000826f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008273:	e8 d1 99 ff ff       	call   c0001c49 <disk_write>
c0008278:	83 c4 14             	add    esp,0x14
c000827b:	6a 01                	push   0x1
c000827d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008281:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008285:	83 c0 01             	add    eax,0x1
c0008288:	83 d2 00             	adc    edx,0x0
c000828b:	52                   	push   edx
c000828c:	50                   	push   eax
c000828d:	55                   	push   ebp
c000828e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008292:	e8 b2 99 ff ff       	call   c0001c49 <disk_write>
c0008297:	83 c4 20             	add    esp,0x20
c000829a:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00082a1:	31 d2                	xor    edx,edx
c00082a3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00082a9:	31 db                	xor    ebx,ebx
c00082ab:	89 e8                	mov    eax,ebp
c00082ad:	e8 60 9a ff ff       	call   c0001d12 <mem_set>
c00082b2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082be:	0f 94 c3             	sete   bl
c00082c1:	4b                   	dec    ebx
c00082c2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082c8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082ce:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082d3:	75 21                	jne    c00082f6 <f_mkfs+0xf68>
c00082d5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082da:	89 e8                	mov    eax,ebp
c00082dc:	e8 13 9a ff ff       	call   c0001cf4 <st_dword>
c00082e1:	8d 45 04             	lea    eax,[ebp+0x4]
c00082e4:	83 ca ff             	or     edx,0xffffffff
c00082e7:	e8 08 9a ff ff       	call   c0001cf4 <st_dword>
c00082ec:	8d 45 08             	lea    eax,[ebp+0x8]
c00082ef:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082f4:	eb 04                	jmp    c00082fa <f_mkfs+0xf6c>
c00082f6:	89 da                	mov    edx,ebx
c00082f8:	89 e8                	mov    eax,ebp
c00082fa:	e8 f5 99 ff ff       	call   c0001cf4 <st_dword>
c00082ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008307:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000830b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000830f:	39 ce                	cmp    esi,ecx
c0008311:	76 02                	jbe    c0008315 <f_mkfs+0xf87>
c0008313:	89 ce                	mov    esi,ecx
c0008315:	83 ec 0c             	sub    esp,0xc
c0008318:	56                   	push   esi
c0008319:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000831d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008321:	55                   	push   ebp
c0008322:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008326:	e8 1e 99 ff ff       	call   c0001c49 <disk_write>
c000832b:	83 c4 20             	add    esp,0x20
c000832e:	85 c0                	test   eax,eax
c0008330:	0f 85 09 01 00 00    	jne    c000843f <f_mkfs+0x10b1>
c0008336:	31 d2                	xor    edx,edx
c0008338:	b9 00 02 00 00       	mov    ecx,0x200
c000833d:	89 e8                	mov    eax,ebp
c000833f:	e8 ce 99 ff ff       	call   c0001d12 <mem_set>
c0008344:	31 d2                	xor    edx,edx
c0008346:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000834a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000834e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008352:	75 b3                	jne    c0008307 <f_mkfs+0xf79>
c0008354:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008357:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000835e:	40                   	inc    eax
c000835f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008363:	0f 87 65 ff ff ff    	ja     c00082ce <f_mkfs+0xf40>
c0008369:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000836e:	74 04                	je     c0008374 <f_mkfs+0xfe6>
c0008370:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008374:	89 fb                	mov    ebx,edi
c0008376:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000837a:	76 04                	jbe    c0008380 <f_mkfs+0xff2>
c000837c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008380:	83 ec 0c             	sub    esp,0xc
c0008383:	53                   	push   ebx
c0008384:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008388:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000838c:	55                   	push   ebp
c000838d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008391:	e8 b3 98 ff ff       	call   c0001c49 <disk_write>
c0008396:	83 c4 20             	add    esp,0x20
c0008399:	85 c0                	test   eax,eax
c000839b:	0f 85 9e 00 00 00    	jne    c000843f <f_mkfs+0x10b1>
c00083a1:	31 d2                	xor    edx,edx
c00083a3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00083a7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00083ab:	29 df                	sub    edi,ebx
c00083ad:	75 c5                	jne    c0008374 <f_mkfs+0xfe6>
c00083af:	b1 0c                	mov    cl,0xc
c00083b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083b6:	74 1d                	je     c00083d5 <f_mkfs+0x1047>
c00083b8:	b8 ff ff 00 00       	mov    eax,0xffff
c00083bd:	b1 06                	mov    cl,0x6
c00083bf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083c3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083c7:	72 0c                	jb     c00083d5 <f_mkfs+0x1047>
c00083c9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083ce:	0f 94 c1             	sete   cl
c00083d1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083d5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083da:	75 4c                	jne    c0008428 <f_mkfs+0x109a>
c00083dc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083e0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083e4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083eb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083f2:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083fd:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008408:	0f b6 c9             	movzx  ecx,cl
c000840b:	83 ec 0c             	sub    esp,0xc
c000840e:	55                   	push   ebp
c000840f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000841a:	e8 2f c2 ff ff       	call   c000464e <create_partition>
c000841f:	83 c4 10             	add    esp,0x10
c0008422:	89 c3                	mov    ebx,eax
c0008424:	85 c0                	test   eax,eax
c0008426:	75 34                	jne    c000845c <f_mkfs+0x10ce>
c0008428:	31 db                	xor    ebx,ebx
c000842a:	50                   	push   eax
c000842b:	6a 00                	push   0x0
c000842d:	6a 00                	push   0x0
c000842f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008433:	e8 27 98 ff ff       	call   c0001c5f <disk_ioctl>
c0008438:	83 c4 10             	add    esp,0x10
c000843b:	85 c0                	test   eax,eax
c000843d:	74 1d                	je     c000845c <f_mkfs+0x10ce>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 0c                	jne    c0008455 <f_mkfs+0x10c7>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 75 00 00 00       	call   c00084c7 <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	bb 01 00 00 00       	mov    ebx,0x1
c000845a:	eb 48                	jmp    c00084a4 <f_mkfs+0x1116>
c000845c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008464:	75 3e                	jne    c00084a4 <f_mkfs+0x1116>
c0008466:	83 ec 0c             	sub    esp,0xc
c0008469:	55                   	push   ebp
c000846a:	e8 58 00 00 00       	call   c00084c7 <ff_memfree>
c000846f:	83 c4 10             	add    esp,0x10
c0008472:	eb 30                	jmp    c00084a4 <f_mkfs+0x1116>
c0008474:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008479:	0f 85 eb fa ff ff    	jne    c0007f6a <f_mkfs+0xbdc>
c000847f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008483:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008489:	0f 86 b8 f9 ff ff    	jbe    c0007e47 <f_mkfs+0xab9>
c000848f:	e9 bf fb ff ff       	jmp    c0008053 <f_mkfs+0xcc5>
c0008494:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008499:	0f 85 c0 fa ff ff    	jne    c0007f5f <f_mkfs+0xbd1>
c000849f:	e9 af fb ff ff       	jmp    c0008053 <f_mkfs+0xcc5>
c00084a4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00084aa:	89 d8                	mov    eax,ebx
c00084ac:	5b                   	pop    ebx
c00084ad:	5e                   	pop    esi
c00084ae:	5f                   	pop    edi
c00084af:	5d                   	pop    ebp
c00084b0:	c3                   	ret    

c00084b1 <ff_memalloc>:
c00084b1:	83 ec 0c             	sub    esp,0xc
c00084b4:	83 ec 0c             	sub    esp,0xc
c00084b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084bb:	e8 fb 4f 00 00       	call   c000d4bb <malloc>
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	83 c4 0c             	add    esp,0xc
c00084c6:	c3                   	ret    

c00084c7 <ff_memfree>:
c00084c7:	83 ec 0c             	sub    esp,0xc
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d1:	e8 f5 4f 00 00       	call   c000d4cb <free>
c00084d6:	83 c4 10             	add    esp,0x10
c00084d9:	90                   	nop
c00084da:	83 c4 0c             	add    esp,0xc
c00084dd:	c3                   	ret    

c00084de <ff_uni2oem>:
c00084de:	83 ec 14             	sub    esp,0x14
c00084e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084e5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084e9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084f0:	c7 44 24 0c 00 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fb00
c00084f8:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084fd:	77 0b                	ja     c000850a <ff_uni2oem+0x2c>
c00084ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008503:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008508:	eb 5b                	jmp    c0008565 <ff_uni2oem+0x87>
c000850a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008512:	77 51                	ja     c0008565 <ff_uni2oem+0x87>
c0008514:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000851a:	75 49                	jne    c0008565 <ff_uni2oem+0x87>
c000851c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008523:	eb 0b                	jmp    c0008530 <ff_uni2oem+0x52>
c0008525:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000852a:	40                   	inc    eax
c000852b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008530:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008536:	77 1b                	ja     c0008553 <ff_uni2oem+0x75>
c0008538:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000853d:	01 c0                	add    eax,eax
c000853f:	89 c2                	mov    edx,eax
c0008541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008545:	01 d0                	add    eax,edx
c0008547:	66 8b 00             	mov    ax,WORD PTR [eax]
c000854a:	0f b7 c0             	movzx  eax,ax
c000854d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008551:	75 d2                	jne    c0008525 <ff_uni2oem+0x47>
c0008553:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008558:	83 e8 80             	sub    eax,0xffffff80
c000855b:	25 ff 00 00 00       	and    eax,0xff
c0008560:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008565:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000856a:	83 c4 14             	add    esp,0x14
c000856d:	c3                   	ret    

c000856e <ff_oem2uni>:
c000856e:	83 ec 18             	sub    esp,0x18
c0008571:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008579:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000857e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008582:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008589:	c7 44 24 10 00 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb00
c0008591:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008597:	77 0b                	ja     c00085a4 <ff_oem2uni+0x36>
c0008599:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000859d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085a2:	eb 2d                	jmp    c00085d1 <ff_oem2uni+0x63>
c00085a4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00085aa:	75 25                	jne    c00085d1 <ff_oem2uni+0x63>
c00085ac:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085b3:	77 1c                	ja     c00085d1 <ff_oem2uni+0x63>
c00085b5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085ba:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085bf:	01 c0                	add    eax,eax
c00085c1:	89 c2                	mov    edx,eax
c00085c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085c7:	01 d0                	add    eax,edx
c00085c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085cc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085d1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085d6:	83 c4 18             	add    esp,0x18
c00085d9:	c3                   	ret    

c00085da <ff_wtoupper>:
c00085da:	83 ec 10             	sub    esp,0x10
c00085dd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085e5:	0f 87 3e 01 00 00    	ja     c0008729 <ff_wtoupper+0x14f>
c00085eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085ef:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085f4:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085fb:	77 07                	ja     c0008604 <ff_wtoupper+0x2a>
c00085fd:	b8 00 f9 01 c0       	mov    eax,0xc001f900
c0008602:	eb 05                	jmp    c0008609 <ff_wtoupper+0x2f>
c0008604:	b8 40 f8 01 c0       	mov    eax,0xc001f840
c0008609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000860d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008611:	8d 50 02             	lea    edx,[eax+0x2]
c0008614:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008618:	66 8b 00             	mov    ax,WORD PTR [eax]
c000861b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008620:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008626:	0f 84 f4 00 00 00    	je     c0008720 <ff_wtoupper+0x146>
c000862c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008631:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008636:	0f 82 e4 00 00 00    	jb     c0008720 <ff_wtoupper+0x146>
c000863c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008640:	8d 50 02             	lea    edx,[eax+0x2]
c0008643:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008647:	66 8b 00             	mov    ax,WORD PTR [eax]
c000864a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000864f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008654:	66 c1 e8 08          	shr    ax,0x8
c0008658:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000865d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008664:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008669:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000866e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008673:	01 ca                	add    edx,ecx
c0008675:	39 d0                	cmp    eax,edx
c0008677:	0f 8d 86 00 00 00    	jge    c0008703 <ff_wtoupper+0x129>
c000867d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008682:	83 f8 08             	cmp    eax,0x8
c0008685:	0f 87 94 00 00 00    	ja     c000871f <ff_wtoupper+0x145>
c000868b:	8b 04 85 00 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0800]
c0008692:	ff e0                	jmp    eax
c0008694:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008699:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000869e:	29 c2                	sub    edx,eax
c00086a0:	89 d0                	mov    eax,edx
c00086a2:	01 c0                	add    eax,eax
c00086a4:	89 c2                	mov    edx,eax
c00086a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086aa:	01 d0                	add    eax,edx
c00086ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086af:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086b4:	eb 4b                	jmp    c0008701 <ff_wtoupper+0x127>
c00086b6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086bf:	83 e0 01             	and    eax,0x1
c00086c2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086c7:	eb 38                	jmp    c0008701 <ff_wtoupper+0x127>
c00086c9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086cf:	eb 30                	jmp    c0008701 <ff_wtoupper+0x127>
c00086d1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086d7:	eb 28                	jmp    c0008701 <ff_wtoupper+0x127>
c00086d9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086df:	eb 20                	jmp    c0008701 <ff_wtoupper+0x127>
c00086e1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086e7:	eb 18                	jmp    c0008701 <ff_wtoupper+0x127>
c00086e9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086ef:	eb 10                	jmp    c0008701 <ff_wtoupper+0x127>
c00086f1:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086f7:	eb 08                	jmp    c0008701 <ff_wtoupper+0x127>
c00086f9:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008700:	90                   	nop
c0008701:	eb 1c                	jmp    c000871f <ff_wtoupper+0x145>
c0008703:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008709:	0f 85 fe fe ff ff    	jne    c000860d <ff_wtoupper+0x33>
c000870f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008714:	01 c0                	add    eax,eax
c0008716:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000871a:	e9 ee fe ff ff       	jmp    c000860d <ff_wtoupper+0x33>
c000871f:	90                   	nop
c0008720:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008725:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008729:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000872d:	83 c4 10             	add    esp,0x10
c0008730:	c3                   	ret    

c0008731 <is_bad_src_ratio>:
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008738:	89 04 24             	mov    DWORD PTR [esp],eax
c000873b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000873f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008743:	dd 04 24             	fld    QWORD PTR [esp]
c0008746:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c000874c:	de d9                	fcompp 
c000874e:	df e0                	fnstsw ax
c0008750:	f6 c4 45             	test   ah,0x45
c0008753:	74 10                	je     c0008765 <is_bad_src_ratio+0x34>
c0008755:	dd 04 24             	fld    QWORD PTR [esp]
c0008758:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c000875e:	df e0                	fnstsw ax
c0008760:	f6 c4 45             	test   ah,0x45
c0008763:	75 07                	jne    c000876c <is_bad_src_ratio+0x3b>
c0008765:	b8 01 00 00 00       	mov    eax,0x1
c000876a:	eb 05                	jmp    c0008771 <is_bad_src_ratio+0x40>
c000876c:	b8 00 00 00 00       	mov    eax,0x0
c0008771:	83 c4 0c             	add    esp,0xc
c0008774:	c3                   	ret    

c0008775 <psrc_set_converter>:
c0008775:	56                   	push   esi
c0008776:	89 d6                	mov    esi,edx
c0008778:	53                   	push   ebx
c0008779:	89 c3                	mov    ebx,eax
c000877b:	83 ec 0c             	sub    esp,0xc
c000877e:	52                   	push   edx
c000877f:	50                   	push   eax
c0008780:	e8 33 24 00 00       	call   c000abb8 <sinc_set_converter>
c0008785:	83 c4 10             	add    esp,0x10
c0008788:	85 c0                	test   eax,eax
c000878a:	74 25                	je     c00087b1 <psrc_set_converter+0x3c>
c000878c:	50                   	push   eax
c000878d:	50                   	push   eax
c000878e:	56                   	push   esi
c000878f:	53                   	push   ebx
c0008790:	e8 39 29 00 00       	call   c000b0ce <zoh_set_converter>
c0008795:	83 c4 10             	add    esp,0x10
c0008798:	85 c0                	test   eax,eax
c000879a:	74 15                	je     c00087b1 <psrc_set_converter+0x3c>
c000879c:	51                   	push   ecx
c000879d:	51                   	push   ecx
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	e8 10 0a 00 00       	call   c00091b5 <linear_set_converter>
c00087a5:	83 c4 10             	add    esp,0x10
c00087a8:	ba 0a 00 00 00       	mov    edx,0xa
c00087ad:	85 c0                	test   eax,eax
c00087af:	75 02                	jne    c00087b3 <psrc_set_converter+0x3e>
c00087b1:	31 d2                	xor    edx,edx
c00087b3:	89 d0                	mov    eax,edx
c00087b5:	5a                   	pop    edx
c00087b6:	5b                   	pop    ebx
c00087b7:	5e                   	pop    esi
c00087b8:	c3                   	ret    

c00087b9 <src_delete>:
c00087b9:	53                   	push   ebx
c00087ba:	83 ec 08             	sub    esp,0x8
c00087bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c1:	85 db                	test   ebx,ebx
c00087c3:	74 29                	je     c00087ee <src_delete+0x35>
c00087c5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087c8:	85 c0                	test   eax,eax
c00087ca:	74 0c                	je     c00087d8 <src_delete+0x1f>
c00087cc:	83 ec 0c             	sub    esp,0xc
c00087cf:	50                   	push   eax
c00087d0:	e8 f6 4c 00 00       	call   c000d4cb <free>
c00087d5:	83 c4 10             	add    esp,0x10
c00087d8:	50                   	push   eax
c00087d9:	6a 3c                	push   0x3c
c00087db:	6a 00                	push   0x0
c00087dd:	53                   	push   ebx
c00087de:	e8 c8 7e ff ff       	call   c00006ab <memset>
c00087e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00087e6:	e8 e0 4c 00 00       	call   c000d4cb <free>
c00087eb:	83 c4 10             	add    esp,0x10
c00087ee:	31 c0                	xor    eax,eax
c00087f0:	83 c4 08             	add    esp,0x8
c00087f3:	5b                   	pop    ebx
c00087f4:	c3                   	ret    

c00087f5 <src_process>:
c00087f5:	56                   	push   esi
c00087f6:	53                   	push   ebx
c00087f7:	53                   	push   ebx
c00087f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00087fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008800:	85 f6                	test   esi,esi
c0008802:	0f 84 e2 00 00 00    	je     c00088ea <src_process+0xf5>
c0008808:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000880c:	0f 84 df 00 00 00    	je     c00088f1 <src_process+0xfc>
c0008812:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008816:	0f 84 d5 00 00 00    	je     c00088f1 <src_process+0xfc>
c000881c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008823:	0f 85 cf 00 00 00    	jne    c00088f8 <src_process+0x103>
c0008829:	85 db                	test   ebx,ebx
c000882b:	0f 84 ce 00 00 00    	je     c00088ff <src_process+0x10a>
c0008831:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008834:	0f 84 cc 00 00 00    	je     c0008906 <src_process+0x111>
c000883a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000883e:	0f 84 c2 00 00 00    	je     c0008906 <src_process+0x111>
c0008844:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008847:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000884a:	e8 e2 fe ff ff       	call   c0008731 <is_bad_src_ratio>
c000884f:	5a                   	pop    edx
c0008850:	85 c0                	test   eax,eax
c0008852:	59                   	pop    ecx
c0008853:	0f 85 b4 00 00 00    	jne    c000890d <src_process+0x118>
c0008859:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000885d:	79 07                	jns    c0008866 <src_process+0x71>
c000885f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008866:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000886a:	79 07                	jns    c0008873 <src_process+0x7e>
c000886c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008873:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008875:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008878:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000887b:	39 ca                	cmp    edx,ecx
c000887d:	73 0b                	jae    c000888a <src_process+0x95>
c000887f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008883:	8d 04 82             	lea    eax,[edx+eax*4]
c0008886:	39 c1                	cmp    ecx,eax
c0008888:	eb 09                	jmp    c0008893 <src_process+0x9e>
c000888a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000888e:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008891:	39 c2                	cmp    edx,eax
c0008893:	72 7f                	jb     c0008914 <src_process+0x11f>
c0008895:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000889c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088a3:	d9 05 e0 00 02 c0    	fld    DWORD PTR ds:0xc00200e0
c00088a9:	dc 1e                	fcomp  QWORD PTR [esi]
c00088ab:	df e0                	fnstsw ax
c00088ad:	9e                   	sahf   
c00088ae:	76 05                	jbe    c00088b5 <src_process+0xc0>
c00088b0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00088b3:	dd 1e                	fstp   QWORD PTR [esi]
c00088b5:	83 ec 10             	sub    esp,0x10
c00088b8:	dd 06                	fld    QWORD PTR [esi]
c00088ba:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00088bd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00088c0:	e8 6b 60 01 00       	call   c001e930 <fabs>
c00088c5:	83 c4 10             	add    esp,0x10
c00088c8:	dd 05 d0 00 02 c0    	fld    QWORD PTR ds:0xc00200d0
c00088ce:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00088d2:	de d9                	fcompp 
c00088d4:	df e0                	fnstsw ax
c00088d6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00088da:	9e                   	sahf   
c00088db:	76 05                	jbe    c00088e2 <src_process+0xed>
c00088dd:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00088e0:	eb 03                	jmp    c00088e5 <src_process+0xf0>
c00088e2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00088e5:	59                   	pop    ecx
c00088e6:	5b                   	pop    ebx
c00088e7:	5e                   	pop    esi
c00088e8:	ff e0                	jmp    eax
c00088ea:	b8 02 00 00 00       	mov    eax,0x2
c00088ef:	eb 28                	jmp    c0008919 <src_process+0x124>
c00088f1:	b8 07 00 00 00       	mov    eax,0x7
c00088f6:	eb 21                	jmp    c0008919 <src_process+0x124>
c00088f8:	b8 12 00 00 00       	mov    eax,0x12
c00088fd:	eb 1a                	jmp    c0008919 <src_process+0x124>
c00088ff:	b8 03 00 00 00       	mov    eax,0x3
c0008904:	eb 13                	jmp    c0008919 <src_process+0x124>
c0008906:	b8 04 00 00 00       	mov    eax,0x4
c000890b:	eb 0c                	jmp    c0008919 <src_process+0x124>
c000890d:	b8 06 00 00 00       	mov    eax,0x6
c0008912:	eb 05                	jmp    c0008919 <src_process+0x124>
c0008914:	b8 10 00 00 00       	mov    eax,0x10
c0008919:	5a                   	pop    edx
c000891a:	5b                   	pop    ebx
c000891b:	5e                   	pop    esi
c000891c:	c3                   	ret    

c000891d <src_callback_read>:
c000891d:	55                   	push   ebp
c000891e:	57                   	push   edi
c000891f:	56                   	push   esi
c0008920:	53                   	push   ebx
c0008921:	83 ec 4c             	sub    esp,0x4c
c0008924:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008928:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000892c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008930:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008934:	85 ff                	test   edi,edi
c0008936:	0f 8e 36 01 00 00    	jle    c0008a72 <src_callback_read+0x155>
c000893c:	85 db                	test   ebx,ebx
c000893e:	0f 84 2e 01 00 00    	je     c0008a72 <src_callback_read+0x155>
c0008944:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000894b:	74 0c                	je     c0008959 <src_callback_read+0x3c>
c000894d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008954:	e9 19 01 00 00       	jmp    c0008a72 <src_callback_read+0x155>
c0008959:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000895d:	75 0c                	jne    c000896b <src_callback_read+0x4e>
c000895f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008966:	e9 07 01 00 00       	jmp    c0008a72 <src_callback_read+0x155>
c000896b:	51                   	push   ecx
c000896c:	6a 24                	push   0x24
c000896e:	6a 00                	push   0x0
c0008970:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008974:	50                   	push   eax
c0008975:	e8 31 7d ff ff       	call   c00006ab <memset>
c000897a:	5e                   	pop    esi
c000897b:	5d                   	pop    ebp
c000897c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008980:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008984:	e8 a8 fd ff ff       	call   c0008731 <is_bad_src_ratio>
c0008989:	83 c4 10             	add    esp,0x10
c000898c:	85 c0                	test   eax,eax
c000898e:	74 0c                	je     c000899c <src_callback_read+0x7f>
c0008990:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008997:	e9 d6 00 00 00       	jmp    c0008a72 <src_callback_read+0x155>
c000899c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00089a0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00089a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00089a8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00089ac:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089af:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00089b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089b7:	31 f6                	xor    esi,esi
c00089b9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089c0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00089c5:	75 30                	jne    c00089f7 <src_callback_read+0xda>
c00089c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00089cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00089cf:	52                   	push   edx
c00089d0:	52                   	push   edx
c00089d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00089d5:	50                   	push   eax
c00089d6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089d9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00089e0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00089e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00089e8:	83 c4 10             	add    esp,0x10
c00089eb:	85 c0                	test   eax,eax
c00089ed:	75 08                	jne    c00089f7 <src_callback_read+0xda>
c00089ef:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00089f7:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00089fe:	50                   	push   eax
c00089ff:	50                   	push   eax
c0008a00:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008a04:	50                   	push   eax
c0008a05:	53                   	push   ebx
c0008a06:	e8 ea fd ff ff       	call   c00087f5 <src_process>
c0008a0b:	83 c4 10             	add    esp,0x10
c0008a0e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a15:	85 c0                	test   eax,eax
c0008a17:	75 42                	jne    c0008a5b <src_callback_read+0x13e>
c0008a19:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0008a1d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a20:	89 e9                	mov    ecx,ebp
c0008a22:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008a26:	0f af ca             	imul   ecx,edx
c0008a29:	c1 e1 02             	shl    ecx,0x2
c0008a2c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008a30:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008a34:	0f af d1             	imul   edx,ecx
c0008a37:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008a3b:	c1 e2 02             	shl    edx,0x2
c0008a3e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008a42:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a45:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008a4a:	75 04                	jne    c0008a50 <src_callback_read+0x133>
c0008a4c:	85 c9                	test   ecx,ecx
c0008a4e:	74 0b                	je     c0008a5b <src_callback_read+0x13e>
c0008a50:	39 d7                	cmp    edi,edx
c0008a52:	7e 09                	jle    c0008a5d <src_callback_read+0x140>
c0008a54:	89 d6                	mov    esi,edx
c0008a56:	e9 65 ff ff ff       	jmp    c00089c0 <src_callback_read+0xa3>
c0008a5b:	89 f2                	mov    edx,esi
c0008a5d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008a61:	85 c0                	test   eax,eax
c0008a63:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a66:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008a6a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a6d:	74 05                	je     c0008a74 <src_callback_read+0x157>
c0008a6f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a72:	31 d2                	xor    edx,edx
c0008a74:	83 c4 4c             	add    esp,0x4c
c0008a77:	89 d0                	mov    eax,edx
c0008a79:	5b                   	pop    ebx
c0008a7a:	5e                   	pop    esi
c0008a7b:	5f                   	pop    edi
c0008a7c:	5d                   	pop    ebp
c0008a7d:	c3                   	ret    

c0008a7e <src_set_ratio>:
c0008a7e:	53                   	push   ebx
c0008a7f:	b8 02 00 00 00       	mov    eax,0x2
c0008a84:	83 ec 08             	sub    esp,0x8
c0008a87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a8b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008a8f:	85 db                	test   ebx,ebx
c0008a91:	74 33                	je     c0008ac6 <src_set_ratio+0x48>
c0008a93:	b8 07 00 00 00       	mov    eax,0x7
c0008a98:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008a9c:	74 2c                	je     c0008aca <src_set_ratio+0x4c>
c0008a9e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aa2:	74 2a                	je     c0008ace <src_set_ratio+0x50>
c0008aa4:	50                   	push   eax
c0008aa5:	50                   	push   eax
c0008aa6:	dd 14 24             	fst    QWORD PTR [esp]
c0008aa9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008aad:	e8 7f fc ff ff       	call   c0008731 <is_bad_src_ratio>
c0008ab2:	5a                   	pop    edx
c0008ab3:	85 c0                	test   eax,eax
c0008ab5:	59                   	pop    ecx
c0008ab6:	75 07                	jne    c0008abf <src_set_ratio+0x41>
c0008ab8:	dd 04 24             	fld    QWORD PTR [esp]
c0008abb:	dd 1b                	fstp   QWORD PTR [ebx]
c0008abd:	eb 11                	jmp    c0008ad0 <src_set_ratio+0x52>
c0008abf:	b8 06 00 00 00       	mov    eax,0x6
c0008ac4:	eb 0a                	jmp    c0008ad0 <src_set_ratio+0x52>
c0008ac6:	dd d8                	fstp   st(0)
c0008ac8:	eb 06                	jmp    c0008ad0 <src_set_ratio+0x52>
c0008aca:	dd d8                	fstp   st(0)
c0008acc:	eb 02                	jmp    c0008ad0 <src_set_ratio+0x52>
c0008ace:	dd d8                	fstp   st(0)
c0008ad0:	83 c4 08             	add    esp,0x8
c0008ad3:	5b                   	pop    ebx
c0008ad4:	c3                   	ret    

c0008ad5 <src_get_channels>:
c0008ad5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008ad9:	b8 02 00 00 00       	mov    eax,0x2
c0008ade:	85 d2                	test   edx,edx
c0008ae0:	74 14                	je     c0008af6 <src_get_channels+0x21>
c0008ae2:	b8 07 00 00 00       	mov    eax,0x7
c0008ae7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008aeb:	74 09                	je     c0008af6 <src_get_channels+0x21>
c0008aed:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008af1:	74 03                	je     c0008af6 <src_get_channels+0x21>
c0008af3:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008af6:	c3                   	ret    

c0008af7 <src_reset>:
c0008af7:	53                   	push   ebx
c0008af8:	b8 02 00 00 00       	mov    eax,0x2
c0008afd:	83 ec 08             	sub    esp,0x8
c0008b00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b04:	85 db                	test   ebx,ebx
c0008b06:	74 2e                	je     c0008b36 <src_reset+0x3f>
c0008b08:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b0b:	85 c0                	test   eax,eax
c0008b0d:	74 09                	je     c0008b18 <src_reset+0x21>
c0008b0f:	83 ec 0c             	sub    esp,0xc
c0008b12:	53                   	push   ebx
c0008b13:	ff d0                	call   eax
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	d9 ee                	fldz   
c0008b1a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b21:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008b24:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b2b:	dd 1b                	fstp   QWORD PTR [ebx]
c0008b2d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b34:	31 c0                	xor    eax,eax
c0008b36:	83 c4 08             	add    esp,0x8
c0008b39:	5b                   	pop    ebx
c0008b3a:	c3                   	ret    

c0008b3b <src_new>:
c0008b3b:	57                   	push   edi
c0008b3c:	56                   	push   esi
c0008b3d:	53                   	push   ebx
c0008b3e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b46:	85 f6                	test   esi,esi
c0008b48:	74 73                	je     c0008bbd <src_new+0x82>
c0008b4a:	85 ff                	test   edi,edi
c0008b4c:	7f 08                	jg     c0008b56 <src_new+0x1b>
c0008b4e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b54:	eb 1e                	jmp    c0008b74 <src_new+0x39>
c0008b56:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b5c:	50                   	push   eax
c0008b5d:	50                   	push   eax
c0008b5e:	6a 3c                	push   0x3c
c0008b60:	6a 01                	push   0x1
c0008b62:	e8 84 49 00 00       	call   c000d4eb <calloc>
c0008b67:	83 c4 10             	add    esp,0x10
c0008b6a:	89 c3                	mov    ebx,eax
c0008b6c:	85 c0                	test   eax,eax
c0008b6e:	75 10                	jne    c0008b80 <src_new+0x45>
c0008b70:	85 f6                	test   esi,esi
c0008b72:	75 04                	jne    c0008b78 <src_new+0x3d>
c0008b74:	31 db                	xor    ebx,ebx
c0008b76:	eb 4b                	jmp    c0008bc3 <src_new+0x88>
c0008b78:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008b7e:	eb 43                	jmp    c0008bc3 <src_new+0x88>
c0008b80:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008b83:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008b8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b8e:	e8 e2 fb ff ff       	call   c0008775 <psrc_set_converter>
c0008b93:	85 c0                	test   eax,eax
c0008b95:	74 18                	je     c0008baf <src_new+0x74>
c0008b97:	85 f6                	test   esi,esi
c0008b99:	74 06                	je     c0008ba1 <src_new+0x66>
c0008b9b:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008ba1:	83 ec 0c             	sub    esp,0xc
c0008ba4:	53                   	push   ebx
c0008ba5:	31 db                	xor    ebx,ebx
c0008ba7:	e8 1f 49 00 00       	call   c000d4cb <free>
c0008bac:	83 c4 10             	add    esp,0x10
c0008baf:	83 ec 0c             	sub    esp,0xc
c0008bb2:	53                   	push   ebx
c0008bb3:	e8 3f ff ff ff       	call   c0008af7 <src_reset>
c0008bb8:	83 c4 10             	add    esp,0x10
c0008bbb:	eb 06                	jmp    c0008bc3 <src_new+0x88>
c0008bbd:	85 ff                	test   edi,edi
c0008bbf:	7f 9b                	jg     c0008b5c <src_new+0x21>
c0008bc1:	eb b1                	jmp    c0008b74 <src_new+0x39>
c0008bc3:	89 d8                	mov    eax,ebx
c0008bc5:	5b                   	pop    ebx
c0008bc6:	5e                   	pop    esi
c0008bc7:	5f                   	pop    edi
c0008bc8:	c3                   	ret    

c0008bc9 <src_callback_new>:
c0008bc9:	56                   	push   esi
c0008bca:	53                   	push   ebx
c0008bcb:	53                   	push   ebx
c0008bcc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 0e                	jne    c0008be6 <src_callback_new+0x1d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	85 c0                	test   eax,eax
c0008bdc:	74 47                	je     c0008c25 <src_callback_new+0x5c>
c0008bde:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008be4:	eb 3f                	jmp    c0008c25 <src_callback_new+0x5c>
c0008be6:	85 c0                	test   eax,eax
c0008be8:	74 06                	je     c0008bf0 <src_callback_new+0x27>
c0008bea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008bf0:	51                   	push   ecx
c0008bf1:	50                   	push   eax
c0008bf2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008bf6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008bfa:	e8 3c ff ff ff       	call   c0008b3b <src_new>
c0008bff:	83 c4 10             	add    esp,0x10
c0008c02:	89 c3                	mov    ebx,eax
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 1d                	je     c0008c25 <src_callback_new+0x5c>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	50                   	push   eax
c0008c0c:	e8 e6 fe ff ff       	call   c0008af7 <src_reset>
c0008c11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c15:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c1c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c1f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	89 d8                	mov    eax,ebx
c0008c27:	5a                   	pop    edx
c0008c28:	5b                   	pop    ebx
c0008c29:	5e                   	pop    esi
c0008c2a:	c3                   	ret    

c0008c2b <src_get_name>:
c0008c2b:	53                   	push   ebx
c0008c2c:	83 ec 14             	sub    esp,0x14
c0008c2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c33:	53                   	push   ebx
c0008c34:	e8 59 1f 00 00       	call   c000ab92 <sinc_get_name>
c0008c39:	83 c4 10             	add    esp,0x10
c0008c3c:	85 c0                	test   eax,eax
c0008c3e:	75 1d                	jne    c0008c5d <src_get_name+0x32>
c0008c40:	83 ec 0c             	sub    esp,0xc
c0008c43:	53                   	push   ebx
c0008c44:	e8 67 24 00 00       	call   c000b0b0 <zoh_get_name>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	85 c0                	test   eax,eax
c0008c4e:	75 0d                	jne    c0008c5d <src_get_name+0x32>
c0008c50:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c54:	83 c4 08             	add    esp,0x8
c0008c57:	5b                   	pop    ebx
c0008c58:	e9 3a 05 00 00       	jmp    c0009197 <linear_get_name>
c0008c5d:	83 c4 08             	add    esp,0x8
c0008c60:	5b                   	pop    ebx
c0008c61:	c3                   	ret    

c0008c62 <src_get_description>:
c0008c62:	53                   	push   ebx
c0008c63:	83 ec 14             	sub    esp,0x14
c0008c66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c6a:	53                   	push   ebx
c0008c6b:	e8 35 1f 00 00       	call   c000aba5 <sinc_get_description>
c0008c70:	83 c4 10             	add    esp,0x10
c0008c73:	85 c0                	test   eax,eax
c0008c75:	75 1d                	jne    c0008c94 <src_get_description+0x32>
c0008c77:	83 ec 0c             	sub    esp,0xc
c0008c7a:	53                   	push   ebx
c0008c7b:	e8 3f 24 00 00       	call   c000b0bf <zoh_get_description>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	85 c0                	test   eax,eax
c0008c85:	75 0d                	jne    c0008c94 <src_get_description+0x32>
c0008c87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c8b:	83 c4 08             	add    esp,0x8
c0008c8e:	5b                   	pop    ebx
c0008c8f:	e9 12 05 00 00       	jmp    c00091a6 <linear_get_description>
c0008c94:	83 c4 08             	add    esp,0x8
c0008c97:	5b                   	pop    ebx
c0008c98:	c3                   	ret    

c0008c99 <src_get_version>:
c0008c99:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c0008c9e:	c3                   	ret    

c0008c9f <src_is_valid_ratio>:
c0008c9f:	50                   	push   eax
c0008ca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008ca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008ca8:	e8 84 fa ff ff       	call   c0008731 <is_bad_src_ratio>
c0008cad:	85 c0                	test   eax,eax
c0008caf:	0f 94 c0             	sete   al
c0008cb2:	83 c4 0c             	add    esp,0xc
c0008cb5:	0f b6 c0             	movzx  eax,al
c0008cb8:	c3                   	ret    

c0008cb9 <src_error>:
c0008cb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cbd:	31 c0                	xor    eax,eax
c0008cbf:	85 d2                	test   edx,edx
c0008cc1:	74 03                	je     c0008cc6 <src_error+0xd>
c0008cc3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008cc6:	c3                   	ret    

c0008cc7 <src_strerror>:
c0008cc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008ccb:	31 c0                	xor    eax,eax
c0008ccd:	83 fa 17             	cmp    edx,0x17
c0008cd0:	77 07                	ja     c0008cd9 <src_strerror+0x12>
c0008cd2:	8b 04 95 60 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdffa0]
c0008cd9:	c3                   	ret    

c0008cda <src_simple>:
c0008cda:	56                   	push   esi
c0008cdb:	53                   	push   ebx
c0008cdc:	83 ec 18             	sub    esp,0x18
c0008cdf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ce3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008ce7:	50                   	push   eax
c0008ce8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008cec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008cf0:	e8 46 fe ff ff       	call   c0008b3b <src_new>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	85 c0                	test   eax,eax
c0008cfa:	75 06                	jne    c0008d02 <src_simple+0x28>
c0008cfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d00:	eb 25                	jmp    c0008d27 <src_simple+0x4d>
c0008d02:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d09:	89 c3                	mov    ebx,eax
c0008d0b:	50                   	push   eax
c0008d0c:	50                   	push   eax
c0008d0d:	56                   	push   esi
c0008d0e:	53                   	push   ebx
c0008d0f:	e8 e1 fa ff ff       	call   c00087f5 <src_process>
c0008d14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d1b:	e8 99 fa ff ff       	call   c00087b9 <src_delete>
c0008d20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d24:	83 c4 10             	add    esp,0x10
c0008d27:	83 c4 14             	add    esp,0x14
c0008d2a:	5b                   	pop    ebx
c0008d2b:	5e                   	pop    esi
c0008d2c:	c3                   	ret    

c0008d2d <src_short_to_float_array>:
c0008d2d:	83 ec 0c             	sub    esp,0xc
c0008d30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008d3c:	85 c0                	test   eax,eax
c0008d3e:	74 0f                	je     c0008d4f <src_short_to_float_array+0x22>
c0008d40:	48                   	dec    eax
c0008d41:	d9 05 e4 00 02 c0    	fld    DWORD PTR ds:0xc00200e4
c0008d47:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008d4a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008d4d:	eb ed                	jmp    c0008d3c <src_short_to_float_array+0xf>
c0008d4f:	83 c4 0c             	add    esp,0xc
c0008d52:	c3                   	ret    

c0008d53 <src_float_to_short_array>:
c0008d53:	56                   	push   esi
c0008d54:	53                   	push   ebx
c0008d55:	52                   	push   edx
c0008d56:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008d5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008d5e:	85 db                	test   ebx,ebx
c0008d60:	74 51                	je     c0008db3 <src_float_to_short_array+0x60>
c0008d62:	4b                   	dec    ebx
c0008d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d67:	d9 05 e8 00 02 c0    	fld    DWORD PTR ds:0xc00200e8
c0008d6d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008d70:	dc 15 d8 00 02 c0    	fcom   QWORD PTR ds:0xc00200d8
c0008d76:	df e0                	fnstsw ax
c0008d78:	9e                   	sahf   
c0008d79:	72 0a                	jb     c0008d85 <src_float_to_short_array+0x32>
c0008d7b:	dd d8                	fstp   st(0)
c0008d7d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008d83:	eb d9                	jmp    c0008d5e <src_float_to_short_array+0xb>
c0008d85:	d9 05 ec 00 02 c0    	fld    DWORD PTR ds:0xc00200ec
c0008d8b:	d8 d9                	fcomp  st(1)
c0008d8d:	df e0                	fnstsw ax
c0008d8f:	9e                   	sahf   
c0008d90:	72 0a                	jb     c0008d9c <src_float_to_short_array+0x49>
c0008d92:	dd d8                	fstp   st(0)
c0008d94:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008d9a:	eb c2                	jmp    c0008d5e <src_float_to_short_array+0xb>
c0008d9c:	83 ec 10             	sub    esp,0x10
c0008d9f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008da2:	e8 a9 5b 01 00       	call   c001e950 <lrint>
c0008da7:	83 c4 10             	add    esp,0x10
c0008daa:	c1 f8 10             	sar    eax,0x10
c0008dad:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008db1:	eb ab                	jmp    c0008d5e <src_float_to_short_array+0xb>
c0008db3:	58                   	pop    eax
c0008db4:	5b                   	pop    ebx
c0008db5:	5e                   	pop    esi
c0008db6:	c3                   	ret    

c0008db7 <src_int_to_float_array>:
c0008db7:	83 ec 0c             	sub    esp,0xc
c0008dba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dbe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008dc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008dc6:	85 c0                	test   eax,eax
c0008dc8:	74 0f                	je     c0008dd9 <src_int_to_float_array+0x22>
c0008dca:	48                   	dec    eax
c0008dcb:	d9 05 f0 00 02 c0    	fld    DWORD PTR ds:0xc00200f0
c0008dd1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008dd4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008dd7:	eb ed                	jmp    c0008dc6 <src_int_to_float_array+0xf>
c0008dd9:	83 c4 0c             	add    esp,0xc
c0008ddc:	c3                   	ret    

c0008ddd <src_float_to_int_array>:
c0008ddd:	56                   	push   esi
c0008dde:	53                   	push   ebx
c0008ddf:	52                   	push   edx
c0008de0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008de4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008de8:	85 db                	test   ebx,ebx
c0008dea:	74 4f                	je     c0008e3b <src_float_to_int_array+0x5e>
c0008dec:	4b                   	dec    ebx
c0008ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008df1:	d9 05 e8 00 02 c0    	fld    DWORD PTR ds:0xc00200e8
c0008df7:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008dfa:	dc 15 d8 00 02 c0    	fcom   QWORD PTR ds:0xc00200d8
c0008e00:	df e0                	fnstsw ax
c0008e02:	9e                   	sahf   
c0008e03:	72 0b                	jb     c0008e10 <src_float_to_int_array+0x33>
c0008e05:	dd d8                	fstp   st(0)
c0008e07:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008e0e:	eb d8                	jmp    c0008de8 <src_float_to_int_array+0xb>
c0008e10:	d9 05 ec 00 02 c0    	fld    DWORD PTR ds:0xc00200ec
c0008e16:	d8 d9                	fcomp  st(1)
c0008e18:	df e0                	fnstsw ax
c0008e1a:	9e                   	sahf   
c0008e1b:	72 0b                	jb     c0008e28 <src_float_to_int_array+0x4b>
c0008e1d:	dd d8                	fstp   st(0)
c0008e1f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008e26:	eb c0                	jmp    c0008de8 <src_float_to_int_array+0xb>
c0008e28:	83 ec 10             	sub    esp,0x10
c0008e2b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e2e:	e8 1d 5b 01 00       	call   c001e950 <lrint>
c0008e33:	83 c4 10             	add    esp,0x10
c0008e36:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008e39:	eb ad                	jmp    c0008de8 <src_float_to_int_array+0xb>
c0008e3b:	58                   	pop    eax
c0008e3c:	5b                   	pop    ebx
c0008e3d:	5e                   	pop    esi
c0008e3e:	c3                   	ret    

c0008e3f <is_bad_src_ratio>:
c0008e3f:	83 ec 0c             	sub    esp,0xc
c0008e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e46:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008e4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e51:	dd 04 24             	fld    QWORD PTR [esp]
c0008e54:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c0008e5a:	de d9                	fcompp 
c0008e5c:	df e0                	fnstsw ax
c0008e5e:	f6 c4 45             	test   ah,0x45
c0008e61:	74 10                	je     c0008e73 <is_bad_src_ratio+0x34>
c0008e63:	dd 04 24             	fld    QWORD PTR [esp]
c0008e66:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c0008e6c:	df e0                	fnstsw ax
c0008e6e:	f6 c4 45             	test   ah,0x45
c0008e71:	75 07                	jne    c0008e7a <is_bad_src_ratio+0x3b>
c0008e73:	b8 01 00 00 00       	mov    eax,0x1
c0008e78:	eb 05                	jmp    c0008e7f <is_bad_src_ratio+0x40>
c0008e7a:	b8 00 00 00 00       	mov    eax,0x0
c0008e7f:	83 c4 0c             	add    esp,0xc
c0008e82:	c3                   	ret    

c0008e83 <fmod_one>:
c0008e83:	83 ec 2c             	sub    esp,0x2c
c0008e86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e96:	83 ec 08             	sub    esp,0x8
c0008e99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea1:	e8 aa 5a 01 00       	call   c001e950 <lrint>
c0008ea6:	83 c4 10             	add    esp,0x10
c0008ea9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ead:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008eb1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008eb5:	de e1                	fsubrp st(1),st
c0008eb7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008ebb:	d9 ee                	fldz   
c0008ebd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008ec1:	df e0                	fnstsw ax
c0008ec3:	f6 c4 45             	test   ah,0x45
c0008ec6:	75 0a                	jne    c0008ed2 <fmod_one+0x4f>
c0008ec8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ecc:	d9 e8                	fld1   
c0008ece:	de c1                	faddp  st(1),st
c0008ed0:	eb 04                	jmp    c0008ed6 <fmod_one+0x53>
c0008ed2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ed6:	83 c4 2c             	add    esp,0x2c
c0008ed9:	c3                   	ret    

c0008eda <linear_vari_process>:
c0008eda:	55                   	push   ebp
c0008edb:	57                   	push   edi
c0008edc:	56                   	push   esi
c0008edd:	53                   	push   ebx
c0008ede:	83 ec 2c             	sub    esp,0x2c
c0008ee1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008ee5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008ee9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008ef1:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008ef5:	0f 8e 5e 02 00 00    	jle    c0009159 <linear_vari_process+0x27f>
c0008efb:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008efe:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008f06:	85 db                	test   ebx,ebx
c0008f08:	0f 84 4b 02 00 00    	je     c0009159 <linear_vari_process+0x27f>
c0008f0e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008f11:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008f15:	74 19                	je     c0008f30 <linear_vari_process+0x56>
c0008f17:	31 d2                	xor    edx,edx
c0008f19:	39 c2                	cmp    edx,eax
c0008f1b:	7d 0c                	jge    c0008f29 <linear_vari_process+0x4f>
c0008f1d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008f1f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008f22:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f26:	42                   	inc    edx
c0008f27:	eb f0                	jmp    c0008f19 <linear_vari_process+0x3f>
c0008f29:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008f30:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008f33:	0f af d0             	imul   edx,eax
c0008f36:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f39:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f3d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f44:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f47:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f4e:	dd 07                	fld    QWORD PTR [edi]
c0008f50:	dd 14 24             	fst    QWORD PTR [esp]
c0008f53:	50                   	push   eax
c0008f54:	50                   	push   eax
c0008f55:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008f58:	e8 e2 fe ff ff       	call   c0008e3f <is_bad_src_ratio>
c0008f5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f61:	5a                   	pop    edx
c0008f62:	59                   	pop    ecx
c0008f63:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008f68:	0f 85 e3 01 00 00    	jne    c0009151 <linear_vari_process+0x277>
c0008f6e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008f71:	d9 e8                	fld1   
c0008f73:	d8 d1                	fcom   st(1)
c0008f75:	df e0                	fnstsw ax
c0008f77:	9e                   	sahf   
c0008f78:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008f7c:	0f 86 99 00 00 00    	jbe    c000901b <linear_vari_process+0x141>
c0008f82:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008f85:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008f88:	0f 8d 8d 00 00 00    	jge    c000901b <linear_vari_process+0x141>
c0008f8e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008f92:	d8 c1                	fadd   st,st(1)
c0008f94:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008f97:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008f9a:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008f9d:	df e0                	fnstsw ax
c0008f9f:	9e                   	sahf   
c0008fa0:	73 79                	jae    c000901b <linear_vari_process+0x141>
c0008fa2:	85 d2                	test   edx,edx
c0008fa4:	7e 38                	jle    c0008fde <linear_vari_process+0x104>
c0008fa6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008faa:	83 ec 10             	sub    esp,0x10
c0008fad:	dd 07                	fld    QWORD PTR [edi]
c0008faf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008fb2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008fb5:	e8 76 59 01 00       	call   c001e930 <fabs>
c0008fba:	83 c4 10             	add    esp,0x10
c0008fbd:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c0008fc3:	df e0                	fnstsw ax
c0008fc5:	9e                   	sahf   
c0008fc6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008fca:	76 12                	jbe    c0008fde <linear_vari_process+0x104>
c0008fcc:	dd 07                	fld    QWORD PTR [edi]
c0008fce:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008fd1:	d8 e1                	fsub   st,st(1)
c0008fd3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008fd6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008fd9:	de c1                	faddp  st(1),st
c0008fdb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008fde:	31 c0                	xor    eax,eax
c0008fe0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008fe3:	7e 1f                	jle    c0009004 <linear_vari_process+0x12a>
c0008fe5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008fe9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008feb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008fee:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008ff2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008ff5:	d8 e1                	fsub   st,st(1)
c0008ff7:	40                   	inc    eax
c0008ff8:	d8 ca                	fmul   st,st(2)
c0008ffa:	de c1                	faddp  st(1),st
c0008ffc:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008fff:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009002:	eb dc                	jmp    c0008fe0 <linear_vari_process+0x106>
c0009004:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009008:	dc 34 24             	fdiv   QWORD PTR [esp]
c000900b:	de c1                	faddp  st(1),st
c000900d:	e9 5f ff ff ff       	jmp    c0008f71 <linear_vari_process+0x97>
c0009012:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009016:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009019:	de c1                	faddp  st(1),st
c000901b:	83 ec 10             	sub    esp,0x10
c000901e:	dd 14 24             	fst    QWORD PTR [esp]
c0009021:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009025:	e8 59 fe ff ff       	call   c0008e83 <fmod_one>
c000902a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000902d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009031:	d8 e1                	fsub   st,st(1)
c0009033:	d9 c9                	fxch   st(1)
c0009035:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009039:	dd 1c 24             	fstp   QWORD PTR [esp]
c000903c:	e8 0f 59 01 00       	call   c001e950 <lrint>
c0009041:	83 c4 10             	add    esp,0x10
c0009044:	0f af e8             	imul   ebp,eax
c0009047:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000904b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000904e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009051:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0009054:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0009057:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000905a:	0f 8d 97 00 00 00    	jge    c00090f7 <linear_vari_process+0x21d>
c0009060:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009064:	d9 c0                	fld    st(0)
c0009066:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0009069:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000906d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0009071:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0009075:	de d9                	fcompp 
c0009077:	df e0                	fnstsw ax
c0009079:	9e                   	sahf   
c000907a:	76 7b                	jbe    c00090f7 <linear_vari_process+0x21d>
c000907c:	85 ed                	test   ebp,ebp
c000907e:	7e 38                	jle    c00090b8 <linear_vari_process+0x1de>
c0009080:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009084:	83 ec 10             	sub    esp,0x10
c0009087:	dd 07                	fld    QWORD PTR [edi]
c0009089:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000908c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000908f:	e8 9c 58 01 00       	call   c001e930 <fabs>
c0009094:	83 c4 10             	add    esp,0x10
c0009097:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c000909d:	df e0                	fnstsw ax
c000909f:	9e                   	sahf   
c00090a0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00090a4:	76 12                	jbe    c00090b8 <linear_vari_process+0x1de>
c00090a6:	dd 07                	fld    QWORD PTR [edi]
c00090a8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c00090ab:	d8 e1                	fsub   st,st(1)
c00090ad:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c00090b0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c00090b3:	de c1                	faddp  st(1),st
c00090b5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090b8:	31 c0                	xor    eax,eax
c00090ba:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00090bd:	39 c2                	cmp    edx,eax
c00090bf:	0f 8e 4d ff ff ff    	jle    c0009012 <linear_vari_process+0x138>
c00090c5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00090c7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00090ca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00090ce:	89 e9                	mov    ecx,ebp
c00090d0:	01 c5                	add    ebp,eax
c00090d2:	29 d1                	sub    ecx,edx
c00090d4:	89 ca                	mov    edx,ecx
c00090d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00090da:	01 c2                	add    edx,eax
c00090dc:	40                   	inc    eax
c00090dd:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c00090e0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00090e3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c00090e6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090e9:	d8 e1                	fsub   st,st(1)
c00090eb:	d8 ca                	fmul   st,st(2)
c00090ed:	de c1                	faddp  st(1),st
c00090ef:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c00090f2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00090f5:	eb c3                	jmp    c00090ba <linear_vari_process+0x1e0>
c00090f7:	39 d1                	cmp    ecx,edx
c00090f9:	7d 13                	jge    c000910e <linear_vari_process+0x234>
c00090fb:	89 d0                	mov    eax,edx
c00090fd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0009100:	29 c8                	sub    eax,ecx
c0009102:	99                   	cdq    
c0009103:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009106:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c000910e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0009111:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009114:	85 c0                	test   eax,eax
c0009116:	7f 1b                	jg     c0009133 <linear_vari_process+0x259>
c0009118:	dd 04 24             	fld    QWORD PTR [esp]
c000911b:	dd 1f                	fstp   QWORD PTR [edi]
c000911d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009120:	99                   	cdq    
c0009121:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009124:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009127:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000912a:	99                   	cdq    
c000912b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000912e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0009131:	eb 26                	jmp    c0009159 <linear_vari_process+0x27f>
c0009133:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009136:	31 d2                	xor    edx,edx
c0009138:	29 c8                	sub    eax,ecx
c000913a:	c1 e0 02             	shl    eax,0x2
c000913d:	39 d1                	cmp    ecx,edx
c000913f:	7e d7                	jle    c0009118 <linear_vari_process+0x23e>
c0009141:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009143:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0009147:	83 c0 04             	add    eax,0x4
c000914a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000914e:	42                   	inc    edx
c000914f:	eb ec                	jmp    c000913d <linear_vari_process+0x263>
c0009151:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0009159:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000915d:	83 c4 2c             	add    esp,0x2c
c0009160:	5b                   	pop    ebx
c0009161:	5e                   	pop    esi
c0009162:	5f                   	pop    edi
c0009163:	5d                   	pop    ebp
c0009164:	c3                   	ret    

c0009165 <linear_reset>:
c0009165:	83 ec 0c             	sub    esp,0xc
c0009168:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000916c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000916f:	85 c0                	test   eax,eax
c0009171:	74 20                	je     c0009193 <linear_reset+0x2e>
c0009173:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009176:	83 c0 1c             	add    eax,0x1c
c0009179:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000917c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009183:	c1 e2 02             	shl    edx,0x2
c0009186:	51                   	push   ecx
c0009187:	52                   	push   edx
c0009188:	6a 00                	push   0x0
c000918a:	50                   	push   eax
c000918b:	e8 1b 75 ff ff       	call   c00006ab <memset>
c0009190:	83 c4 10             	add    esp,0x10
c0009193:	83 c4 0c             	add    esp,0xc
c0009196:	c3                   	ret    

c0009197 <linear_get_name>:
c0009197:	31 c0                	xor    eax,eax
c0009199:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000919e:	75 05                	jne    c00091a5 <linear_get_name+0xe>
c00091a0:	b8 f4 00 02 c0       	mov    eax,0xc00200f4
c00091a5:	c3                   	ret    

c00091a6 <linear_get_description>:
c00091a6:	31 c0                	xor    eax,eax
c00091a8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091ad:	75 05                	jne    c00091b4 <linear_get_description+0xe>
c00091af:	b8 08 01 02 c0       	mov    eax,0xc0020108
c00091b4:	c3                   	ret    

c00091b5 <linear_set_converter>:
c00091b5:	53                   	push   ebx
c00091b6:	b8 0a 00 00 00       	mov    eax,0xa
c00091bb:	83 ec 08             	sub    esp,0x8
c00091be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091c2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c00091c7:	75 6e                	jne    c0009237 <linear_set_converter+0x82>
c00091c9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00091cc:	85 c0                	test   eax,eax
c00091ce:	74 13                	je     c00091e3 <linear_set_converter+0x2e>
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	50                   	push   eax
c00091d4:	e8 f2 42 00 00       	call   c000d4cb <free>
c00091d9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00091e0:	83 c4 10             	add    esp,0x10
c00091e3:	50                   	push   eax
c00091e4:	50                   	push   eax
c00091e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00091e8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00091ef:	50                   	push   eax
c00091f0:	6a 01                	push   0x1
c00091f2:	e8 f4 42 00 00       	call   c000d4eb <calloc>
c00091f7:	83 c4 10             	add    esp,0x10
c00091fa:	89 c2                	mov    edx,eax
c00091fc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00091ff:	85 d2                	test   edx,edx
c0009201:	b8 01 00 00 00       	mov    eax,0x1
c0009206:	74 2f                	je     c0009237 <linear_set_converter+0x82>
c0009208:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009214:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009217:	c7 43 24 da 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008eda
c000921e:	c7 43 20 da 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008eda
c0009225:	c7 43 28 65 91 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009165
c000922c:	53                   	push   ebx
c000922d:	e8 33 ff ff ff       	call   c0009165 <linear_reset>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	31 c0                	xor    eax,eax
c0009237:	83 c4 08             	add    esp,0x8
c000923a:	5b                   	pop    ebx
c000923b:	c3                   	ret    

c000923c <is_bad_src_ratio>:
c000923c:	83 ec 0c             	sub    esp,0xc
c000923f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009243:	89 04 24             	mov    DWORD PTR [esp],eax
c0009246:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000924a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000924e:	dd 04 24             	fld    QWORD PTR [esp]
c0009251:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c0009257:	de d9                	fcompp 
c0009259:	df e0                	fnstsw ax
c000925b:	f6 c4 45             	test   ah,0x45
c000925e:	74 10                	je     c0009270 <is_bad_src_ratio+0x34>
c0009260:	dd 04 24             	fld    QWORD PTR [esp]
c0009263:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c0009269:	df e0                	fnstsw ax
c000926b:	f6 c4 45             	test   ah,0x45
c000926e:	75 07                	jne    c0009277 <is_bad_src_ratio+0x3b>
c0009270:	b8 01 00 00 00       	mov    eax,0x1
c0009275:	eb 05                	jmp    c000927c <is_bad_src_ratio+0x40>
c0009277:	b8 00 00 00 00       	mov    eax,0x0
c000927c:	83 c4 0c             	add    esp,0xc
c000927f:	c3                   	ret    

c0009280 <int_to_fp>:
c0009280:	c1 e0 0c             	shl    eax,0xc
c0009283:	c3                   	ret    

c0009284 <fp_to_int>:
c0009284:	c1 f8 0c             	sar    eax,0xc
c0009287:	c3                   	ret    

c0009288 <fp_fraction_part>:
c0009288:	25 ff 0f 00 00       	and    eax,0xfff
c000928d:	c3                   	ret    

c000928e <fp_to_double>:
c000928e:	83 ec 0c             	sub    esp,0xc
c0009291:	e8 f2 ff ff ff       	call   c0009288 <fp_fraction_part>
c0009296:	d9 05 00 88 03 c0    	fld    DWORD PTR ds:0xc0038800
c000929c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092a0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c00092a4:	83 c4 0c             	add    esp,0xc
c00092a7:	c3                   	ret    

c00092a8 <calc_output_single>:
c00092a8:	55                   	push   ebp
c00092a9:	57                   	push   edi
c00092aa:	89 c7                	mov    edi,eax
c00092ac:	56                   	push   esi
c00092ad:	53                   	push   ebx
c00092ae:	89 d3                	mov    ebx,edx
c00092b0:	83 ec 24             	sub    esp,0x24
c00092b3:	89 de                	mov    esi,ebx
c00092b5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092b8:	e8 c3 ff ff ff       	call   c0009280 <int_to_fp>
c00092bd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00092c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00092cb:	29 c8                	sub    eax,ecx
c00092cd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00092d5:	99                   	cdq    
c00092d6:	f7 fb                	idiv   ebx
c00092d8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00092db:	0f af f0             	imul   esi,eax
c00092de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00092e2:	01 ce                	add    esi,ecx
c00092e4:	29 c2                	sub    edx,eax
c00092e6:	8d 14 97             	lea    edx,[edi+edx*4]
c00092e9:	89 f0                	mov    eax,esi
c00092eb:	e8 9e ff ff ff       	call   c000928e <fp_to_double>
c00092f0:	89 f0                	mov    eax,esi
c00092f2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00092f6:	e8 89 ff ff ff       	call   c0009284 <fp_to_int>
c00092fb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092ff:	83 c2 04             	add    edx,0x4
c0009302:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009306:	d8 e1                	fsub   st,st(1)
c0009308:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000930c:	de c9                	fmulp  st(1),st
c000930e:	de c1                	faddp  st(1),st
c0009310:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009316:	29 de                	sub    esi,ebx
c0009318:	dc 04 24             	fadd   QWORD PTR [esp]
c000931b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000931e:	79 c9                	jns    c00092e9 <calc_output_single+0x41>
c0009320:	89 d8                	mov    eax,ebx
c0009322:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009326:	29 c8                	sub    eax,ecx
c0009328:	d9 ee                	fldz   
c000932a:	89 c1                	mov    ecx,eax
c000932c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009330:	29 c8                	sub    eax,ecx
c0009332:	99                   	cdq    
c0009333:	f7 fb                	idiv   ebx
c0009335:	89 da                	mov    edx,ebx
c0009337:	0f af d0             	imul   edx,eax
c000933a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000933e:	01 d1                	add    ecx,edx
c0009340:	8d 14 87             	lea    edx,[edi+eax*4]
c0009343:	89 c8                	mov    eax,ecx
c0009345:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009349:	e8 40 ff ff ff       	call   c000928e <fp_to_double>
c000934e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009352:	89 c8                	mov    eax,ecx
c0009354:	e8 2b ff ff ff       	call   c0009284 <fp_to_int>
c0009359:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000935d:	29 d9                	sub    ecx,ebx
c000935f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009363:	83 ea 04             	sub    edx,0x4
c0009366:	d8 e1                	fsub   st,st(1)
c0009368:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936c:	de c9                	fmulp  st(1),st
c000936e:	de c1                	faddp  st(1),st
c0009370:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009376:	85 c9                	test   ecx,ecx
c0009378:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000937c:	de c1                	faddp  st(1),st
c000937e:	7f c3                	jg     c0009343 <calc_output_single+0x9b>
c0009380:	dd 04 24             	fld    QWORD PTR [esp]
c0009383:	83 c4 24             	add    esp,0x24
c0009386:	de c1                	faddp  st(1),st
c0009388:	5b                   	pop    ebx
c0009389:	5e                   	pop    esi
c000938a:	5f                   	pop    edi
c000938b:	5d                   	pop    ebp
c000938c:	c3                   	ret    

c000938d <calc_output_stereo>:
c000938d:	55                   	push   ebp
c000938e:	57                   	push   edi
c000938f:	89 c7                	mov    edi,eax
c0009391:	56                   	push   esi
c0009392:	53                   	push   ebx
c0009393:	89 d3                	mov    ebx,edx
c0009395:	83 ec 44             	sub    esp,0x44
c0009398:	89 de                	mov    esi,ebx
c000939a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000939e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093a1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093a5:	e8 d6 fe ff ff       	call   c0009280 <int_to_fp>
c00093aa:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093b1:	d9 ee                	fldz   
c00093b3:	29 c8                	sub    eax,ecx
c00093b5:	dd 14 24             	fst    QWORD PTR [esp]
c00093b8:	99                   	cdq    
c00093b9:	f7 fb                	idiv   ebx
c00093bb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093be:	0f af f0             	imul   esi,eax
c00093c1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00093c5:	01 ce                	add    esi,ecx
c00093c7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093ca:	0f af c2             	imul   eax,edx
c00093cd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00093d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00093d5:	29 c2                	sub    edx,eax
c00093d7:	8d 14 97             	lea    edx,[edi+edx*4]
c00093da:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00093de:	89 f0                	mov    eax,esi
c00093e0:	e8 a9 fe ff ff       	call   c000928e <fp_to_double>
c00093e5:	89 f0                	mov    eax,esi
c00093e7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00093eb:	e8 94 fe ff ff       	call   c0009284 <fp_to_int>
c00093f0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093f4:	83 c2 08             	add    edx,0x8
c00093f7:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093fb:	d8 e1                	fsub   st,st(1)
c00093fd:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009401:	de c9                	fmulp  st(1),st
c0009403:	de c1                	faddp  st(1),st
c0009405:	d9 c0                	fld    st(0)
c0009407:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000940d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009410:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009413:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009419:	29 de                	sub    esi,ebx
c000941b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000941f:	de c1                	faddp  st(1),st
c0009421:	79 b7                	jns    c00093da <calc_output_stereo+0x4d>
c0009423:	89 d8                	mov    eax,ebx
c0009425:	d9 ee                	fldz   
c0009427:	d9 ee                	fldz   
c0009429:	29 c8                	sub    eax,ecx
c000942b:	89 c1                	mov    ecx,eax
c000942d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009431:	29 c8                	sub    eax,ecx
c0009433:	99                   	cdq    
c0009434:	f7 fb                	idiv   ebx
c0009436:	89 da                	mov    edx,ebx
c0009438:	0f af d0             	imul   edx,eax
c000943b:	40                   	inc    eax
c000943c:	01 d1                	add    ecx,edx
c000943e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009443:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009447:	8d 14 87             	lea    edx,[edi+eax*4]
c000944a:	eb 04                	jmp    c0009450 <calc_output_stereo+0xc3>
c000944c:	d9 ca                	fxch   st(2)
c000944e:	d9 c9                	fxch   st(1)
c0009450:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009454:	d9 c9                	fxch   st(1)
c0009456:	89 c8                	mov    eax,ecx
c0009458:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000945c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009460:	e8 29 fe ff ff       	call   c000928e <fp_to_double>
c0009465:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009469:	89 c8                	mov    eax,ecx
c000946b:	e8 14 fe ff ff       	call   c0009284 <fp_to_int>
c0009470:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009474:	29 d9                	sub    ecx,ebx
c0009476:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000947a:	83 ea 08             	sub    edx,0x8
c000947d:	d8 e1                	fsub   st,st(1)
c000947f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009483:	de c9                	fmulp  st(1),st
c0009485:	de c1                	faddp  st(1),st
c0009487:	d9 c0                	fld    st(0)
c0009489:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000948f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009493:	de c1                	faddp  st(1),st
c0009495:	d9 c9                	fxch   st(1)
c0009497:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c000949d:	85 c9                	test   ecx,ecx
c000949f:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00094a3:	de c1                	faddp  st(1),st
c00094a5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00094a9:	7f a1                	jg     c000944c <calc_output_stereo+0xbf>
c00094ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00094af:	dd 04 24             	fld    QWORD PTR [esp]
c00094b2:	de c3                	faddp  st(3),st
c00094b4:	d9 ca                	fxch   st(2)
c00094b6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094ba:	d9 18                	fstp   DWORD PTR [eax]
c00094bc:	de c1                	faddp  st(1),st
c00094be:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094c2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00094c5:	83 c4 44             	add    esp,0x44
c00094c8:	5b                   	pop    ebx
c00094c9:	5e                   	pop    esi
c00094ca:	5f                   	pop    edi
c00094cb:	5d                   	pop    ebp
c00094cc:	c3                   	ret    

c00094cd <calc_output_quad>:
c00094cd:	55                   	push   ebp
c00094ce:	57                   	push   edi
c00094cf:	56                   	push   esi
c00094d0:	89 c6                	mov    esi,eax
c00094d2:	53                   	push   ebx
c00094d3:	89 d3                	mov    ebx,edx
c00094d5:	83 ec 5c             	sub    esp,0x5c
c00094d8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00094dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00094df:	dd 1c 24             	fstp   QWORD PTR [esp]
c00094e2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00094e6:	e8 95 fd ff ff       	call   c0009280 <int_to_fp>
c00094eb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00094ee:	d9 ee                	fldz   
c00094f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00094f4:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00094f8:	29 c8                	sub    eax,ecx
c00094fa:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094fe:	99                   	cdq    
c00094ff:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009503:	f7 fb                	idiv   ebx
c0009505:	89 da                	mov    edx,ebx
c0009507:	0f af d0             	imul   edx,eax
c000950a:	01 ca                	add    edx,ecx
c000950c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009510:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009513:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009517:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000951a:	0f af c2             	imul   eax,edx
c000951d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009521:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009525:	29 c2                	sub    edx,eax
c0009527:	8d 14 96             	lea    edx,[esi+edx*4]
c000952a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000952e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009532:	e8 57 fd ff ff       	call   c000928e <fp_to_double>
c0009537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000953b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000953f:	e8 40 fd ff ff       	call   c0009284 <fp_to_int>
c0009544:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009548:	83 c2 10             	add    edx,0x10
c000954b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000954f:	d8 e1                	fsub   st,st(1)
c0009551:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009555:	de c9                	fmulp  st(1),st
c0009557:	de c1                	faddp  st(1),st
c0009559:	d9 c0                	fld    st(0)
c000955b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009561:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009565:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009569:	d9 c0                	fld    st(0)
c000956b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009571:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009575:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009579:	d9 c0                	fld    st(0)
c000957b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009581:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009585:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009589:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000958f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009593:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009597:	de c1                	faddp  st(1),st
c0009599:	79 8f                	jns    c000952a <calc_output_quad+0x5d>
c000959b:	89 d8                	mov    eax,ebx
c000959d:	d9 ee                	fldz   
c000959f:	29 c8                	sub    eax,ecx
c00095a1:	d9 ee                	fldz   
c00095a3:	89 c1                	mov    ecx,eax
c00095a5:	d9 ee                	fldz   
c00095a7:	d9 ee                	fldz   
c00095a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00095ad:	29 c8                	sub    eax,ecx
c00095af:	99                   	cdq    
c00095b0:	f7 fb                	idiv   ebx
c00095b2:	89 da                	mov    edx,ebx
c00095b4:	0f af d0             	imul   edx,eax
c00095b7:	40                   	inc    eax
c00095b8:	01 d1                	add    ecx,edx
c00095ba:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00095bf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00095c3:	8d 14 86             	lea    edx,[esi+eax*4]
c00095c6:	eb 0a                	jmp    c00095d2 <calc_output_quad+0x105>
c00095c8:	d9 cc                	fxch   st(4)
c00095ca:	d9 ca                	fxch   st(2)
c00095cc:	d9 c9                	fxch   st(1)
c00095ce:	d9 cb                	fxch   st(3)
c00095d0:	d9 c9                	fxch   st(1)
c00095d2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095d6:	d9 c9                	fxch   st(1)
c00095d8:	89 c8                	mov    eax,ecx
c00095da:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095de:	d9 c9                	fxch   st(1)
c00095e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00095e4:	d9 c9                	fxch   st(1)
c00095e6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095ea:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00095ee:	e8 9b fc ff ff       	call   c000928e <fp_to_double>
c00095f3:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00095f7:	89 c8                	mov    eax,ecx
c00095f9:	e8 86 fc ff ff       	call   c0009284 <fp_to_int>
c00095fe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009602:	29 d9                	sub    ecx,ebx
c0009604:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009608:	83 ea 10             	sub    edx,0x10
c000960b:	d8 e1                	fsub   st,st(1)
c000960d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009611:	de c9                	fmulp  st(1),st
c0009613:	de c1                	faddp  st(1),st
c0009615:	d9 c0                	fld    st(0)
c0009617:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000961d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009621:	de c1                	faddp  st(1),st
c0009623:	d9 c1                	fld    st(1)
c0009625:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000962b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000962f:	de c1                	faddp  st(1),st
c0009631:	d9 c2                	fld    st(2)
c0009633:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009639:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000963d:	de c1                	faddp  st(1),st
c000963f:	d9 cb                	fxch   st(3)
c0009641:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009647:	85 c9                	test   ecx,ecx
c0009649:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000964d:	de c1                	faddp  st(1),st
c000964f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009653:	0f 8f 6f ff ff ff    	jg     c00095c8 <calc_output_quad+0xfb>
c0009659:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000965d:	de c4                	faddp  st(4),st
c000965f:	d9 cb                	fxch   st(3)
c0009661:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009664:	d9 1f                	fstp   DWORD PTR [edi]
c0009666:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000966a:	de c2                	faddp  st(2),st
c000966c:	d9 c9                	fxch   st(1)
c000966e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009671:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009674:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009678:	de c3                	faddp  st(3),st
c000967a:	d9 ca                	fxch   st(2)
c000967c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000967f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009682:	de c1                	faddp  st(1),st
c0009684:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009687:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000968a:	83 c4 5c             	add    esp,0x5c
c000968d:	5b                   	pop    ebx
c000968e:	5e                   	pop    esi
c000968f:	5f                   	pop    edi
c0009690:	5d                   	pop    ebp
c0009691:	c3                   	ret    

c0009692 <calc_output_hex>:
c0009692:	55                   	push   ebp
c0009693:	57                   	push   edi
c0009694:	89 c7                	mov    edi,eax
c0009696:	56                   	push   esi
c0009697:	53                   	push   ebx
c0009698:	89 d3                	mov    ebx,edx
c000969a:	83 ec 7c             	sub    esp,0x7c
c000969d:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00096a4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096a7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00096aa:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00096b1:	e8 ca fb ff ff       	call   c0009280 <int_to_fp>
c00096b6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00096b9:	d9 ee                	fldz   
c00096bb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00096bf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00096c3:	29 c8                	sub    eax,ecx
c00096c5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00096c9:	99                   	cdq    
c00096ca:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00096ce:	f7 fb                	idiv   ebx
c00096d0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00096d4:	89 da                	mov    edx,ebx
c00096d6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00096da:	0f af d0             	imul   edx,eax
c00096dd:	01 ca                	add    edx,ecx
c00096df:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00096e3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00096e6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00096ea:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00096ed:	0f af c2             	imul   eax,edx
c00096f0:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00096f4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00096f8:	29 c2                	sub    edx,eax
c00096fa:	8d 14 97             	lea    edx,[edi+edx*4]
c00096fd:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009705:	e8 84 fb ff ff       	call   c000928e <fp_to_double>
c000970a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000970e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009712:	e8 6d fb ff ff       	call   c0009284 <fp_to_int>
c0009717:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000971b:	83 c2 18             	add    edx,0x18
c000971e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009722:	d8 e1                	fsub   st,st(1)
c0009724:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009728:	de c9                	fmulp  st(1),st
c000972a:	de c1                	faddp  st(1),st
c000972c:	d9 c0                	fld    st(0)
c000972e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009734:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009738:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000973c:	d9 c0                	fld    st(0)
c000973e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009744:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009748:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000974c:	d9 c0                	fld    st(0)
c000974e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009754:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009758:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000975c:	d9 c0                	fld    st(0)
c000975e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009764:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009768:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000976c:	d9 c0                	fld    st(0)
c000976e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009774:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009778:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000977c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009782:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009786:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000978a:	de c1                	faddp  st(1),st
c000978c:	0f 89 6b ff ff ff    	jns    c00096fd <calc_output_hex+0x6b>
c0009792:	d9 ee                	fldz   
c0009794:	d9 ee                	fldz   
c0009796:	89 d8                	mov    eax,ebx
c0009798:	29 c8                	sub    eax,ecx
c000979a:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c000979e:	89 c1                	mov    ecx,eax
c00097a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00097a4:	29 c8                	sub    eax,ecx
c00097a6:	99                   	cdq    
c00097a7:	f7 fb                	idiv   ebx
c00097a9:	89 da                	mov    edx,ebx
c00097ab:	0f af d0             	imul   edx,eax
c00097ae:	40                   	inc    eax
c00097af:	01 d1                	add    ecx,edx
c00097b1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00097b6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00097ba:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00097be:	8d 14 87             	lea    edx,[edi+eax*4]
c00097c1:	d9 ee                	fldz   
c00097c3:	d9 ee                	fldz   
c00097c5:	d9 ca                	fxch   st(2)
c00097c7:	eb 08                	jmp    c00097d1 <calc_output_hex+0x13f>
c00097c9:	d9 cc                	fxch   st(4)
c00097cb:	d9 cb                	fxch   st(3)
c00097cd:	d9 ca                	fxch   st(2)
c00097cf:	d9 c9                	fxch   st(1)
c00097d1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00097d5:	89 c8                	mov    eax,ecx
c00097d7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00097db:	d9 ca                	fxch   st(2)
c00097dd:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00097e1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00097e5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00097e9:	e8 a0 fa ff ff       	call   c000928e <fp_to_double>
c00097ee:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00097f2:	89 c8                	mov    eax,ecx
c00097f4:	e8 8b fa ff ff       	call   c0009284 <fp_to_int>
c00097f9:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00097fd:	29 d9                	sub    ecx,ebx
c00097ff:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009803:	83 ea 18             	sub    edx,0x18
c0009806:	d8 e1                	fsub   st,st(1)
c0009808:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000980c:	de c9                	fmulp  st(1),st
c000980e:	de c1                	faddp  st(1),st
c0009810:	d9 c0                	fld    st(0)
c0009812:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009818:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000981c:	de c1                	faddp  st(1),st
c000981e:	d9 c1                	fld    st(1)
c0009820:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009826:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000982a:	de c1                	faddp  st(1),st
c000982c:	d9 c2                	fld    st(2)
c000982e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009834:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009838:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000983c:	d9 c2                	fld    st(2)
c000983e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009844:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009848:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000984c:	d9 c2                	fld    st(2)
c000984e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009854:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009858:	de c1                	faddp  st(1),st
c000985a:	d9 cb                	fxch   st(3)
c000985c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009862:	85 c9                	test   ecx,ecx
c0009864:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009868:	de c1                	faddp  st(1),st
c000986a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000986e:	0f 8f 55 ff ff ff    	jg     c00097c9 <calc_output_hex+0x137>
c0009874:	d9 cb                	fxch   st(3)
c0009876:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000987a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000987d:	d9 1e                	fstp   DWORD PTR [esi]
c000987f:	d9 c9                	fxch   st(1)
c0009881:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009885:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009888:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000988b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000988f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009893:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009896:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009899:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000989d:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00098a1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098a4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00098a7:	d9 ca                	fxch   st(2)
c00098a9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00098ad:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098b0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00098b3:	de c1                	faddp  st(1),st
c00098b5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098b8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00098bb:	83 c4 7c             	add    esp,0x7c
c00098be:	5b                   	pop    ebx
c00098bf:	5e                   	pop    esi
c00098c0:	5f                   	pop    edi
c00098c1:	5d                   	pop    ebp
c00098c2:	c3                   	ret    

c00098c3 <calc_output_multi>:
c00098c3:	55                   	push   ebp
c00098c4:	57                   	push   edi
c00098c5:	8d 78 44             	lea    edi,[eax+0x44]
c00098c8:	56                   	push   esi
c00098c9:	89 c6                	mov    esi,eax
c00098cb:	53                   	push   ebx
c00098cc:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00098d2:	83 ec 4c             	sub    esp,0x4c
c00098d5:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00098d9:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00098dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00098e1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098e5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00098e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098ed:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00098f0:	e8 8b f9 ff ff       	call   c0009280 <int_to_fp>
c00098f5:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c00098f8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00098fc:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009900:	99                   	cdq    
c0009901:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009905:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009909:	0f af d0             	imul   edx,eax
c000990c:	0f af c3             	imul   eax,ebx
c000990f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009913:	29 c5                	sub    ebp,eax
c0009915:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009919:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000991d:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009924:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009928:	52                   	push   edx
c0009929:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000992d:	6a 00                	push   0x0
c000992f:	57                   	push   edi
c0009930:	e8 76 6d ff ff       	call   c00006ab <memset>
c0009935:	83 c4 10             	add    esp,0x10
c0009938:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000993c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009940:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009944:	e8 45 f9 ff ff       	call   c000928e <fp_to_double>
c0009949:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000994d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009951:	e8 2e f9 ff ff       	call   c0009284 <fp_to_int>
c0009956:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009959:	89 d9                	mov    ecx,ebx
c000995b:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000995e:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009962:	d8 e1                	fsub   st,st(1)
c0009964:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009968:	de c9                	fmulp  st(1),st
c000996a:	de c1                	faddp  st(1),st
c000996c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009970:	89 c8                	mov    eax,ecx
c0009972:	bd 08 00 00 00       	mov    ebp,0x8
c0009977:	99                   	cdq    
c0009978:	f7 fd                	idiv   ebp
c000997a:	4a                   	dec    edx
c000997b:	83 fa 06             	cmp    edx,0x6
c000997e:	77 07                	ja     c0009987 <calc_output_multi+0xc4>
c0009980:	ff 24 95 40 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfec0]
c0009987:	49                   	dec    ecx
c0009988:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000998c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000998f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009996:	d9 c1                	fld    st(1)
c0009998:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000999c:	dc 00                	fadd   QWORD PTR [eax]
c000999e:	dd 18                	fstp   QWORD PTR [eax]
c00099a0:	49                   	dec    ecx
c00099a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099a5:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099a8:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099af:	d9 c1                	fld    st(1)
c00099b1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099b5:	dc 00                	fadd   QWORD PTR [eax]
c00099b7:	dd 18                	fstp   QWORD PTR [eax]
c00099b9:	49                   	dec    ecx
c00099ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099be:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099c1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099c8:	d9 c1                	fld    st(1)
c00099ca:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099ce:	dc 00                	fadd   QWORD PTR [eax]
c00099d0:	dd 18                	fstp   QWORD PTR [eax]
c00099d2:	49                   	dec    ecx
c00099d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099d7:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099da:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099e1:	d9 c1                	fld    st(1)
c00099e3:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e7:	dc 00                	fadd   QWORD PTR [eax]
c00099e9:	dd 18                	fstp   QWORD PTR [eax]
c00099eb:	49                   	dec    ecx
c00099ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099f0:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099f3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099fa:	d9 c1                	fld    st(1)
c00099fc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a00:	dc 00                	fadd   QWORD PTR [eax]
c0009a02:	dd 18                	fstp   QWORD PTR [eax]
c0009a04:	49                   	dec    ecx
c0009a05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a09:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a0c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a13:	d9 c1                	fld    st(1)
c0009a15:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a19:	dc 00                	fadd   QWORD PTR [eax]
c0009a1b:	dd 18                	fstp   QWORD PTR [eax]
c0009a1d:	49                   	dec    ecx
c0009a1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a22:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a25:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a2c:	d9 c1                	fld    st(1)
c0009a2e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a32:	dc 00                	fadd   QWORD PTR [eax]
c0009a34:	dd 18                	fstp   QWORD PTR [eax]
c0009a36:	49                   	dec    ecx
c0009a37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a3b:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a3e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a45:	d9 c1                	fld    st(1)
c0009a47:	85 c9                	test   ecx,ecx
c0009a49:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a4d:	dc 00                	fadd   QWORD PTR [eax]
c0009a4f:	dd 18                	fstp   QWORD PTR [eax]
c0009a51:	0f 8f 19 ff ff ff    	jg     c0009970 <calc_output_multi+0xad>
c0009a57:	dd d9                	fstp   st(1)
c0009a59:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c0009a5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a61:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009a65:	0f 89 d1 fe ff ff    	jns    c000993c <calc_output_multi+0x79>
c0009a6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a6f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009a73:	89 d1                	mov    ecx,edx
c0009a75:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a79:	29 c8                	sub    eax,ecx
c0009a7b:	99                   	cdq    
c0009a7c:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009a80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a84:	0f af d0             	imul   edx,eax
c0009a87:	40                   	inc    eax
c0009a88:	01 d1                	add    ecx,edx
c0009a8a:	0f af c3             	imul   eax,ebx
c0009a8d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009a91:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009a94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a98:	50                   	push   eax
c0009a99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009a9d:	6a 00                	push   0x0
c0009a9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009aa3:	e8 03 6c ff ff       	call   c00006ab <memset>
c0009aa8:	83 c4 10             	add    esp,0x10
c0009aab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009aaf:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009ab3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ab7:	e8 d2 f7 ff ff       	call   c000928e <fp_to_double>
c0009abc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ac0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009ac4:	e8 bb f7 ff ff       	call   c0009284 <fp_to_int>
c0009ac9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009acc:	89 d9                	mov    ecx,ebx
c0009ace:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009ad1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009ad5:	d8 e1                	fsub   st,st(1)
c0009ad7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009adb:	de c9                	fmulp  st(1),st
c0009add:	de c1                	faddp  st(1),st
c0009adf:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009ae3:	89 c8                	mov    eax,ecx
c0009ae5:	bd 08 00 00 00       	mov    ebp,0x8
c0009aea:	99                   	cdq    
c0009aeb:	f7 fd                	idiv   ebp
c0009aed:	4a                   	dec    edx
c0009aee:	83 fa 06             	cmp    edx,0x6
c0009af1:	77 07                	ja     c0009afa <calc_output_multi+0x237>
c0009af3:	ff 24 95 5c 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfea4]
c0009afa:	49                   	dec    ecx
c0009afb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009aff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b03:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b06:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b0d:	d9 c1                	fld    st(1)
c0009b0f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b13:	dc 00                	fadd   QWORD PTR [eax]
c0009b15:	dd 18                	fstp   QWORD PTR [eax]
c0009b17:	49                   	dec    ecx
c0009b18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b20:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b23:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b2a:	d9 c1                	fld    st(1)
c0009b2c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b30:	dc 00                	fadd   QWORD PTR [eax]
c0009b32:	dd 18                	fstp   QWORD PTR [eax]
c0009b34:	49                   	dec    ecx
c0009b35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b3d:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b40:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b47:	d9 c1                	fld    st(1)
c0009b49:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b4d:	dc 00                	fadd   QWORD PTR [eax]
c0009b4f:	dd 18                	fstp   QWORD PTR [eax]
c0009b51:	49                   	dec    ecx
c0009b52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b5a:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b5d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b64:	d9 c1                	fld    st(1)
c0009b66:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b6a:	dc 00                	fadd   QWORD PTR [eax]
c0009b6c:	dd 18                	fstp   QWORD PTR [eax]
c0009b6e:	49                   	dec    ecx
c0009b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b77:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b7a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b81:	d9 c1                	fld    st(1)
c0009b83:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b87:	dc 00                	fadd   QWORD PTR [eax]
c0009b89:	dd 18                	fstp   QWORD PTR [eax]
c0009b8b:	49                   	dec    ecx
c0009b8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b94:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b97:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b9e:	d9 c1                	fld    st(1)
c0009ba0:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009ba4:	dc 00                	fadd   QWORD PTR [eax]
c0009ba6:	dd 18                	fstp   QWORD PTR [eax]
c0009ba8:	49                   	dec    ecx
c0009ba9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bb1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bb4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bbb:	d9 c1                	fld    st(1)
c0009bbd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bc1:	dc 00                	fadd   QWORD PTR [eax]
c0009bc3:	dd 18                	fstp   QWORD PTR [eax]
c0009bc5:	49                   	dec    ecx
c0009bc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bce:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bd1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bd8:	d9 c1                	fld    st(1)
c0009bda:	85 c9                	test   ecx,ecx
c0009bdc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009be0:	dc 00                	fadd   QWORD PTR [eax]
c0009be2:	dd 18                	fstp   QWORD PTR [eax]
c0009be4:	0f 8f f9 fe ff ff    	jg     c0009ae3 <calc_output_multi+0x220>
c0009bea:	dd d9                	fstp   st(1)
c0009bec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009bf0:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009bf4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009bf8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009bfd:	0f 8f ac fe ff ff    	jg     c0009aaf <calc_output_multi+0x1ec>
c0009c03:	b9 08 00 00 00       	mov    ecx,0x8
c0009c08:	89 d8                	mov    eax,ebx
c0009c0a:	99                   	cdq    
c0009c0b:	f7 f9                	idiv   ecx
c0009c0d:	4a                   	dec    edx
c0009c0e:	83 fa 06             	cmp    edx,0x6
c0009c11:	77 07                	ja     c0009c1a <calc_output_multi+0x357>
c0009c13:	ff 24 95 78 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe88]
c0009c1a:	4b                   	dec    ebx
c0009c1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c1f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c22:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c25:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c29:	d8 c9                	fmul   st,st(1)
c0009c2b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c2e:	4b                   	dec    ebx
c0009c2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c33:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c36:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c39:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c3d:	d8 c9                	fmul   st,st(1)
c0009c3f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c42:	4b                   	dec    ebx
c0009c43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c47:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c4a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c4d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c51:	d8 c9                	fmul   st,st(1)
c0009c53:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c56:	4b                   	dec    ebx
c0009c57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c5b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c5e:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c61:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c65:	d8 c9                	fmul   st,st(1)
c0009c67:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c6a:	4b                   	dec    ebx
c0009c6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c6f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c72:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c75:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c79:	d8 c9                	fmul   st,st(1)
c0009c7b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c7e:	4b                   	dec    ebx
c0009c7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c83:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c86:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c89:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c8d:	d8 c9                	fmul   st,st(1)
c0009c8f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c92:	4b                   	dec    ebx
c0009c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c97:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c9a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c9d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ca1:	d8 c9                	fmul   st,st(1)
c0009ca3:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ca6:	4b                   	dec    ebx
c0009ca7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cab:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cae:	85 db                	test   ebx,ebx
c0009cb0:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cb3:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cb7:	d8 c9                	fmul   st,st(1)
c0009cb9:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cbc:	0f 8f 46 ff ff ff    	jg     c0009c08 <calc_output_multi+0x345>
c0009cc2:	dd d8                	fstp   st(0)
c0009cc4:	83 c4 4c             	add    esp,0x4c
c0009cc7:	5b                   	pop    ebx
c0009cc8:	5e                   	pop    esi
c0009cc9:	5f                   	pop    edi
c0009cca:	5d                   	pop    ebp
c0009ccb:	c3                   	ret    

c0009ccc <sinc_reset>:
c0009ccc:	56                   	push   esi
c0009ccd:	53                   	push   ebx
c0009cce:	51                   	push   ecx
c0009ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd3:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009cd6:	85 db                	test   ebx,ebx
c0009cd8:	74 51                	je     c0009d2b <sinc_reset+0x5f>
c0009cda:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009ce1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009ce8:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009cef:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009cf5:	d9 ee                	fldz   
c0009cf7:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009cfa:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009cfd:	52                   	push   edx
c0009cfe:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d01:	c1 e0 02             	shl    eax,0x2
c0009d04:	50                   	push   eax
c0009d05:	6a 00                	push   0x0
c0009d07:	56                   	push   esi
c0009d08:	e8 9e 69 ff ff       	call   c00006ab <memset>
c0009d0d:	83 c4 0c             	add    esp,0xc
c0009d10:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009d13:	c1 e0 02             	shl    eax,0x2
c0009d16:	50                   	push   eax
c0009d17:	68 aa 00 00 00       	push   0xaa
c0009d1c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d1f:	8d 04 86             	lea    eax,[esi+eax*4]
c0009d22:	50                   	push   eax
c0009d23:	e8 83 69 ff ff       	call   c00006ab <memset>
c0009d28:	83 c4 10             	add    esp,0x10
c0009d2b:	58                   	pop    eax
c0009d2c:	5b                   	pop    ebx
c0009d2d:	5e                   	pop    esi
c0009d2e:	c3                   	ret    

c0009d2f <double_to_fp>:
c0009d2f:	d9 05 04 88 03 c0    	fld    DWORD PTR ds:0xc0038804
c0009d35:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009d39:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009d3d:	e9 0e 4c 01 00       	jmp    c001e950 <lrint>

c0009d42 <fmod_one>:
c0009d42:	83 ec 2c             	sub    esp,0x2c
c0009d45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d55:	83 ec 08             	sub    esp,0x8
c0009d58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d60:	e8 eb 4b 01 00       	call   c001e950 <lrint>
c0009d65:	83 c4 10             	add    esp,0x10
c0009d68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009d6c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009d70:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d74:	de e1                	fsubrp st(1),st
c0009d76:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009d7a:	d9 ee                	fldz   
c0009d7c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009d80:	df e0                	fnstsw ax
c0009d82:	f6 c4 45             	test   ah,0x45
c0009d85:	75 0a                	jne    c0009d91 <fmod_one+0x4f>
c0009d87:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009d8b:	d9 e8                	fld1   
c0009d8d:	de c1                	faddp  st(1),st
c0009d8f:	eb 04                	jmp    c0009d95 <fmod_one+0x53>
c0009d91:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009d95:	83 c4 2c             	add    esp,0x2c
c0009d98:	c3                   	ret    

c0009d99 <prepare_data>:
c0009d99:	55                   	push   ebp
c0009d9a:	57                   	push   edi
c0009d9b:	56                   	push   esi
c0009d9c:	53                   	push   ebx
c0009d9d:	83 ec 1c             	sub    esp,0x1c
c0009da0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009da4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009da8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009dac:	0f 89 57 01 00 00    	jns    c0009f09 <prepare_data+0x170>
c0009db2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009db5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009db8:	85 d2                	test   edx,edx
c0009dba:	75 0d                	jne    c0009dc9 <prepare_data+0x30>
c0009dbc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009dbf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009dc2:	29 d0                	sub    eax,edx
c0009dc4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009dc7:	eb 44                	jmp    c0009e0d <prepare_data+0x74>
c0009dc9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009dcc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009dcf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009dd2:	39 c1                	cmp    ecx,eax
c0009dd4:	7d 04                	jge    c0009dda <prepare_data+0x41>
c0009dd6:	29 d0                	sub    eax,edx
c0009dd8:	eb 2d                	jmp    c0009e07 <prepare_data+0x6e>
c0009dda:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009de0:	29 d7                	sub    edi,edx
c0009de2:	01 f7                	add    edi,esi
c0009de4:	51                   	push   ecx
c0009de5:	29 f2                	sub    edx,esi
c0009de7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009dee:	8d 14 90             	lea    edx,[eax+edx*4]
c0009df1:	51                   	push   ecx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	e8 ce 67 ff ff       	call   c00005c7 <memmove>
c0009df9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009dfc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009dff:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009e02:	29 f0                	sub    eax,esi
c0009e04:	83 c4 10             	add    esp,0x10
c0009e07:	29 f0                	sub    eax,esi
c0009e09:	79 02                	jns    c0009e0d <prepare_data+0x74>
c0009e0b:	31 c0                	xor    eax,eax
c0009e0d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009e10:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009e13:	29 ef                	sub    edi,ebp
c0009e15:	39 c7                	cmp    edi,eax
c0009e17:	7e 02                	jle    c0009e1b <prepare_data+0x82>
c0009e19:	89 c7                	mov    edi,eax
c0009e1b:	89 f8                	mov    eax,edi
c0009e1d:	99                   	cdq    
c0009e1e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e21:	b8 15 00 00 00       	mov    eax,0x15
c0009e26:	29 d7                	sub    edi,edx
c0009e28:	0f 88 dd 00 00 00    	js     c0009f0b <prepare_data+0x172>
c0009e2e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009e31:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009e34:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009e37:	0f 8f ce 00 00 00    	jg     c0009f0b <prepare_data+0x172>
c0009e3d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009e43:	50                   	push   eax
c0009e44:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009e4b:	50                   	push   eax
c0009e4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009e50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e52:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009e55:	50                   	push   eax
c0009e56:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009e59:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009e5d:	50                   	push   eax
c0009e5e:	e8 d1 67 ff ff       	call   c0000634 <memcpy>
c0009e63:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009e66:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009e69:	01 fd                	add    ebp,edi
c0009e6b:	01 f9                	add    ecx,edi
c0009e6d:	83 c4 10             	add    esp,0x10
c0009e70:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009e73:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009e76:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009e79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e7d:	0f 85 86 00 00 00    	jne    c0009f09 <prepare_data+0x170>
c0009e83:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009e86:	89 e8                	mov    eax,ebp
c0009e88:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009e8b:	29 c8                	sub    eax,ecx
c0009e8d:	39 f8                	cmp    eax,edi
c0009e8f:	7d 78                	jge    c0009f09 <prepare_data+0x170>
c0009e91:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009e95:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009e99:	74 6e                	je     c0009f09 <prepare_data+0x170>
c0009e9b:	8d 7e 04             	lea    edi,[esi+0x4]
c0009e9e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009ea2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009ea5:	29 ef                	sub    edi,ebp
c0009ea7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009eab:	7c 29                	jl     c0009ed6 <prepare_data+0x13d>
c0009ead:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009eb0:	29 f1                	sub    ecx,esi
c0009eb2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009eb9:	55                   	push   ebp
c0009eba:	50                   	push   eax
c0009ebb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009ebe:	50                   	push   eax
c0009ebf:	52                   	push   edx
c0009ec0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ec4:	e8 fe 66 ff ff       	call   c00005c7 <memmove>
c0009ec9:	83 c4 10             	add    esp,0x10
c0009ecc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ecf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009ed2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ed6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009ed9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009edc:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009edf:	83 c6 05             	add    esi,0x5
c0009ee2:	78 07                	js     c0009eeb <prepare_data+0x152>
c0009ee4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009ee7:	39 cf                	cmp    edi,ecx
c0009ee9:	7e 04                	jle    c0009eef <prepare_data+0x156>
c0009eeb:	89 ce                	mov    esi,ecx
c0009eed:	29 c6                	sub    esi,eax
c0009eef:	8d 04 82             	lea    eax,[edx+eax*4]
c0009ef2:	51                   	push   ecx
c0009ef3:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009efa:	51                   	push   ecx
c0009efb:	6a 00                	push   0x0
c0009efd:	50                   	push   eax
c0009efe:	e8 a8 67 ff ff       	call   c00006ab <memset>
c0009f03:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009f06:	83 c4 10             	add    esp,0x10
c0009f09:	31 c0                	xor    eax,eax
c0009f0b:	83 c4 1c             	add    esp,0x1c
c0009f0e:	5b                   	pop    ebx
c0009f0f:	5e                   	pop    esi
c0009f10:	5f                   	pop    edi
c0009f11:	5d                   	pop    ebp
c0009f12:	c3                   	ret    

c0009f13 <sinc_multichan_vari_process>:
c0009f13:	55                   	push   ebp
c0009f14:	b8 05 00 00 00       	mov    eax,0x5
c0009f19:	57                   	push   edi
c0009f1a:	56                   	push   esi
c0009f1b:	53                   	push   ebx
c0009f1c:	83 ec 3c             	sub    esp,0x3c
c0009f1f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f23:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f27:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f2a:	85 db                	test   ebx,ebx
c0009f2c:	0f 84 5d 02 00 00    	je     c000a18f <sinc_multichan_vari_process+0x27c>
c0009f32:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f38:	0f af d0             	imul   edx,eax
c0009f3b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f3e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f42:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f49:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f4c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f53:	dd 06                	fld    QWORD PTR [esi]
c0009f55:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f59:	55                   	push   ebp
c0009f5a:	55                   	push   ebp
c0009f5b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f5e:	e8 d9 f2 ff ff       	call   c000923c <is_bad_src_ratio>
c0009f63:	89 c2                	mov    edx,eax
c0009f65:	58                   	pop    eax
c0009f66:	85 d2                	test   edx,edx
c0009f68:	59                   	pop    ecx
c0009f69:	b8 16 00 00 00       	mov    eax,0x16
c0009f6e:	0f 85 1b 02 00 00    	jne    c000a18f <sinc_multichan_vari_process+0x27c>
c0009f74:	d9 05 08 88 03 c0    	fld    DWORD PTR ds:0xc0038808
c0009f7a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f7d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f80:	dd 06                	fld    QWORD PTR [esi]
c0009f82:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f85:	d8 d1                	fcom   st(1)
c0009f87:	df e0                	fnstsw ax
c0009f89:	9e                   	sahf   
c0009f8a:	76 0f                	jbe    c0009f9b <sinc_multichan_vari_process+0x88>
c0009f8c:	dd d8                	fstp   st(0)
c0009f8e:	d9 e8                	fld1   
c0009f90:	d8 d9                	fcomp  st(1)
c0009f92:	df e0                	fnstsw ax
c0009f94:	9e                   	sahf   
c0009f95:	77 0f                	ja     c0009fa6 <sinc_multichan_vari_process+0x93>
c0009f97:	dd d8                	fstp   st(0)
c0009f99:	eb 11                	jmp    c0009fac <sinc_multichan_vari_process+0x99>
c0009f9b:	dd d9                	fstp   st(1)
c0009f9d:	d9 e8                	fld1   
c0009f9f:	d8 d9                	fcomp  st(1)
c0009fa1:	df e0                	fnstsw ax
c0009fa3:	9e                   	sahf   
c0009fa4:	76 04                	jbe    c0009faa <sinc_multichan_vari_process+0x97>
c0009fa6:	de f9                	fdivp  st(1),st
c0009fa8:	eb 02                	jmp    c0009fac <sinc_multichan_vari_process+0x99>
c0009faa:	dd d8                	fstp   st(0)
c0009fac:	83 ec 10             	sub    esp,0x10
c0009faf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fb2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fb5:	e8 96 49 01 00       	call   c001e950 <lrint>
c0009fba:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fbd:	40                   	inc    eax
c0009fbe:	dd 14 24             	fst    QWORD PTR [esp]
c0009fc1:	0f af c5             	imul   eax,ebp
c0009fc4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009fc8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009fcc:	e8 71 fd ff ff       	call   c0009d42 <fmod_one>
c0009fd1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009fd4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009fd8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fdb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009fdf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fe3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009fe7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fea:	e8 61 49 01 00       	call   c001e950 <lrint>
c0009fef:	0f af e8             	imul   ebp,eax
c0009ff2:	d9 e8                	fld1   
c0009ff4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009ff8:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009ffc:	01 e8                	add    eax,ebp
c0009ffe:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000a004:	99                   	cdq    
c000a005:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a009:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a00c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a00f:	83 c4 10             	add    esp,0x10
c000a012:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a015:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a018:	7d 4b                	jge    c000a065 <sinc_multichan_vari_process+0x152>
c000a01a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a01d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a020:	01 c8                	add    eax,ecx
c000a022:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a025:	99                   	cdq    
c000a026:	f7 f9                	idiv   ecx
c000a028:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a02c:	7d 09                	jge    c000a037 <sinc_multichan_vari_process+0x124>
c000a02e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a031:	85 c0                	test   eax,eax
c000a033:	79 57                	jns    c000a08c <sinc_multichan_vari_process+0x179>
c000a035:	eb 70                	jmp    c000a0a7 <sinc_multichan_vari_process+0x194>
c000a037:	51                   	push   ecx
c000a038:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a03c:	57                   	push   edi
c000a03d:	53                   	push   ebx
c000a03e:	e8 56 fd ff ff       	call   c0009d99 <prepare_data>
c000a043:	83 c4 10             	add    esp,0x10
c000a046:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a049:	85 c0                	test   eax,eax
c000a04b:	0f 85 3e 01 00 00    	jne    c000a18f <sinc_multichan_vari_process+0x27c>
c000a051:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a054:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a057:	01 c8                	add    eax,ecx
c000a059:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a05c:	99                   	cdq    
c000a05d:	f7 f9                	idiv   ecx
c000a05f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a063:	7c c9                	jl     c000a02e <sinc_multichan_vari_process+0x11b>
c000a065:	dd 04 24             	fld    QWORD PTR [esp]
c000a068:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a06b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a06f:	dd 1e                	fstp   QWORD PTR [esi]
c000a071:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a074:	99                   	cdq    
c000a075:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a078:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a07b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a07e:	99                   	cdq    
c000a07f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a082:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a085:	31 c0                	xor    eax,eax
c000a087:	e9 03 01 00 00       	jmp    c000a18f <sinc_multichan_vari_process+0x27c>
c000a08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a090:	dd 04 24             	fld    QWORD PTR [esp]
c000a093:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a096:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a09a:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a09e:	d9 c9                	fxch   st(1)
c000a0a0:	de d9                	fcompp 
c000a0a2:	df e0                	fnstsw ax
c000a0a4:	9e                   	sahf   
c000a0a5:	73 be                	jae    c000a065 <sinc_multichan_vari_process+0x152>
c000a0a7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0ab:	7e 31                	jle    c000a0de <sinc_multichan_vari_process+0x1cb>
c000a0ad:	83 ec 10             	sub    esp,0x10
c000a0b0:	dd 06                	fld    QWORD PTR [esi]
c000a0b2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0b5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0b8:	e8 73 48 01 00       	call   c001e930 <fabs>
c000a0bd:	83 c4 10             	add    esp,0x10
c000a0c0:	dc 1d f8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387f8
c000a0c6:	df e0                	fnstsw ax
c000a0c8:	9e                   	sahf   
c000a0c9:	76 13                	jbe    c000a0de <sinc_multichan_vari_process+0x1cb>
c000a0cb:	dd 06                	fld    QWORD PTR [esi]
c000a0cd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0d0:	d8 e1                	fsub   st,st(1)
c000a0d2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0d5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a0d8:	de c1                	faddp  st(1),st
c000a0da:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a0de:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a0e1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a0e5:	d9 e8                	fld1   
c000a0e7:	d8 d9                	fcomp  st(1)
c000a0e9:	df e0                	fnstsw ax
c000a0eb:	9e                   	sahf   
c000a0ec:	77 04                	ja     c000a0f2 <sinc_multichan_vari_process+0x1df>
c000a0ee:	dd d8                	fstp   st(0)
c000a0f0:	d9 e8                	fld1   
c000a0f2:	de c9                	fmulp  st(1),st
c000a0f4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a0f8:	50                   	push   eax
c000a0f9:	50                   	push   eax
c000a0fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a102:	e8 28 fc ff ff       	call   c0009d2f <double_to_fp>
c000a107:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a10b:	89 c5                	mov    ebp,eax
c000a10d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a111:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a114:	e8 16 fc ff ff       	call   c0009d2f <double_to_fp>
c000a119:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a11c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a11f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a122:	89 c1                	mov    ecx,eax
c000a124:	52                   	push   edx
c000a125:	89 d8                	mov    eax,ebx
c000a127:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c000a12b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a12e:	52                   	push   edx
c000a12f:	52                   	push   edx
c000a130:	89 ea                	mov    edx,ebp
c000a132:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a135:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a138:	e8 86 f7 ff ff       	call   c00098c3 <calc_output_multi>
c000a13d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000a140:	d9 e8                	fld1   
c000a142:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000a145:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c000a149:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a14d:	83 c4 10             	add    esp,0x10
c000a150:	dd 14 24             	fst    QWORD PTR [esp]
c000a153:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a157:	e8 e6 fb ff ff       	call   c0009d42 <fmod_one>
c000a15c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a15f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a163:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a166:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a16a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a16e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a172:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a175:	e8 d6 47 01 00       	call   c001e950 <lrint>
c000a17a:	0f af e8             	imul   ebp,eax
c000a17d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a181:	01 e8                	add    eax,ebp
c000a183:	99                   	cdq    
c000a184:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a187:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a18a:	e9 80 fe ff ff       	jmp    c000a00f <sinc_multichan_vari_process+0xfc>
c000a18f:	83 c4 3c             	add    esp,0x3c
c000a192:	5b                   	pop    ebx
c000a193:	5e                   	pop    esi
c000a194:	5f                   	pop    edi
c000a195:	5d                   	pop    ebp
c000a196:	c3                   	ret    

c000a197 <sinc_hex_vari_process>:
c000a197:	55                   	push   ebp
c000a198:	b8 05 00 00 00       	mov    eax,0x5
c000a19d:	57                   	push   edi
c000a19e:	56                   	push   esi
c000a19f:	53                   	push   ebx
c000a1a0:	83 ec 3c             	sub    esp,0x3c
c000a1a3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1a7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1ab:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1ae:	85 db                	test   ebx,ebx
c000a1b0:	0f 84 58 02 00 00    	je     c000a40e <sinc_hex_vari_process+0x277>
c000a1b6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1b9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1bc:	0f af d0             	imul   edx,eax
c000a1bf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1c2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1c6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1cd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1d0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1d7:	dd 06                	fld    QWORD PTR [esi]
c000a1d9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a1dd:	55                   	push   ebp
c000a1de:	55                   	push   ebp
c000a1df:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1e2:	e8 55 f0 ff ff       	call   c000923c <is_bad_src_ratio>
c000a1e7:	89 c2                	mov    edx,eax
c000a1e9:	58                   	pop    eax
c000a1ea:	85 d2                	test   edx,edx
c000a1ec:	59                   	pop    ecx
c000a1ed:	b8 16 00 00 00       	mov    eax,0x16
c000a1f2:	0f 85 16 02 00 00    	jne    c000a40e <sinc_hex_vari_process+0x277>
c000a1f8:	d9 05 08 88 03 c0    	fld    DWORD PTR ds:0xc0038808
c000a1fe:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a201:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a204:	dd 06                	fld    QWORD PTR [esi]
c000a206:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a209:	d8 d1                	fcom   st(1)
c000a20b:	df e0                	fnstsw ax
c000a20d:	9e                   	sahf   
c000a20e:	76 0f                	jbe    c000a21f <sinc_hex_vari_process+0x88>
c000a210:	dd d8                	fstp   st(0)
c000a212:	d9 e8                	fld1   
c000a214:	d8 d9                	fcomp  st(1)
c000a216:	df e0                	fnstsw ax
c000a218:	9e                   	sahf   
c000a219:	77 0f                	ja     c000a22a <sinc_hex_vari_process+0x93>
c000a21b:	dd d8                	fstp   st(0)
c000a21d:	eb 11                	jmp    c000a230 <sinc_hex_vari_process+0x99>
c000a21f:	dd d9                	fstp   st(1)
c000a221:	d9 e8                	fld1   
c000a223:	d8 d9                	fcomp  st(1)
c000a225:	df e0                	fnstsw ax
c000a227:	9e                   	sahf   
c000a228:	76 04                	jbe    c000a22e <sinc_hex_vari_process+0x97>
c000a22a:	de f9                	fdivp  st(1),st
c000a22c:	eb 02                	jmp    c000a230 <sinc_hex_vari_process+0x99>
c000a22e:	dd d8                	fstp   st(0)
c000a230:	83 ec 10             	sub    esp,0x10
c000a233:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a236:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a239:	e8 12 47 01 00       	call   c001e950 <lrint>
c000a23e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a241:	40                   	inc    eax
c000a242:	dd 14 24             	fst    QWORD PTR [esp]
c000a245:	0f af c5             	imul   eax,ebp
c000a248:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a24c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a250:	e8 ed fa ff ff       	call   c0009d42 <fmod_one>
c000a255:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a258:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a25c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a25f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a267:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a26b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a26e:	e8 dd 46 01 00       	call   c001e950 <lrint>
c000a273:	0f af e8             	imul   ebp,eax
c000a276:	d9 e8                	fld1   
c000a278:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a27c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a280:	01 e8                	add    eax,ebp
c000a282:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000a288:	99                   	cdq    
c000a289:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a28d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a290:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a293:	83 c4 10             	add    esp,0x10
c000a296:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a299:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a29c:	7d 4b                	jge    c000a2e9 <sinc_hex_vari_process+0x152>
c000a29e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2a1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2a4:	01 c8                	add    eax,ecx
c000a2a6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2a9:	99                   	cdq    
c000a2aa:	f7 f9                	idiv   ecx
c000a2ac:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2b0:	7d 09                	jge    c000a2bb <sinc_hex_vari_process+0x124>
c000a2b2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2b5:	85 c0                	test   eax,eax
c000a2b7:	79 57                	jns    c000a310 <sinc_hex_vari_process+0x179>
c000a2b9:	eb 70                	jmp    c000a32b <sinc_hex_vari_process+0x194>
c000a2bb:	51                   	push   ecx
c000a2bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2c0:	57                   	push   edi
c000a2c1:	53                   	push   ebx
c000a2c2:	e8 d2 fa ff ff       	call   c0009d99 <prepare_data>
c000a2c7:	83 c4 10             	add    esp,0x10
c000a2ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2cd:	85 c0                	test   eax,eax
c000a2cf:	0f 85 39 01 00 00    	jne    c000a40e <sinc_hex_vari_process+0x277>
c000a2d5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2d8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2db:	01 c8                	add    eax,ecx
c000a2dd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2e0:	99                   	cdq    
c000a2e1:	f7 f9                	idiv   ecx
c000a2e3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2e7:	7c c9                	jl     c000a2b2 <sinc_hex_vari_process+0x11b>
c000a2e9:	dd 04 24             	fld    QWORD PTR [esp]
c000a2ec:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a2ef:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f3:	dd 1e                	fstp   QWORD PTR [esi]
c000a2f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a2f8:	99                   	cdq    
c000a2f9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a2fc:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a2ff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a302:	99                   	cdq    
c000a303:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a306:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a309:	31 c0                	xor    eax,eax
c000a30b:	e9 fe 00 00 00       	jmp    c000a40e <sinc_hex_vari_process+0x277>
c000a310:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a314:	dd 04 24             	fld    QWORD PTR [esp]
c000a317:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a31a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a31e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a322:	d9 c9                	fxch   st(1)
c000a324:	de d9                	fcompp 
c000a326:	df e0                	fnstsw ax
c000a328:	9e                   	sahf   
c000a329:	73 be                	jae    c000a2e9 <sinc_hex_vari_process+0x152>
c000a32b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a32f:	7e 31                	jle    c000a362 <sinc_hex_vari_process+0x1cb>
c000a331:	83 ec 10             	sub    esp,0x10
c000a334:	dd 06                	fld    QWORD PTR [esi]
c000a336:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a339:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a33c:	e8 ef 45 01 00       	call   c001e930 <fabs>
c000a341:	83 c4 10             	add    esp,0x10
c000a344:	dc 1d f8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387f8
c000a34a:	df e0                	fnstsw ax
c000a34c:	9e                   	sahf   
c000a34d:	76 13                	jbe    c000a362 <sinc_hex_vari_process+0x1cb>
c000a34f:	dd 06                	fld    QWORD PTR [esi]
c000a351:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a354:	d8 e1                	fsub   st,st(1)
c000a356:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a359:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a35c:	de c1                	faddp  st(1),st
c000a35e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a362:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a365:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a369:	d9 e8                	fld1   
c000a36b:	d8 d9                	fcomp  st(1)
c000a36d:	df e0                	fnstsw ax
c000a36f:	9e                   	sahf   
c000a370:	77 04                	ja     c000a376 <sinc_hex_vari_process+0x1df>
c000a372:	dd d8                	fstp   st(0)
c000a374:	d9 e8                	fld1   
c000a376:	de c9                	fmulp  st(1),st
c000a378:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a37c:	50                   	push   eax
c000a37d:	50                   	push   eax
c000a37e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a382:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a386:	e8 a4 f9 ff ff       	call   c0009d2f <double_to_fp>
c000a38b:	89 c5                	mov    ebp,eax
c000a38d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a391:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a395:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a398:	e8 92 f9 ff ff       	call   c0009d2f <double_to_fp>
c000a39d:	83 c4 0c             	add    esp,0xc
c000a3a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3a3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3a6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3a9:	89 c1                	mov    ecx,eax
c000a3ab:	52                   	push   edx
c000a3ac:	89 d8                	mov    eax,ebx
c000a3ae:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3b2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3b5:	52                   	push   edx
c000a3b6:	52                   	push   edx
c000a3b7:	89 ea                	mov    edx,ebp
c000a3b9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3bc:	e8 d1 f2 ff ff       	call   c0009692 <calc_output_hex>
c000a3c1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a3c5:	d9 e8                	fld1   
c000a3c7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3cb:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a3d2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3d6:	e8 67 f9 ff ff       	call   c0009d42 <fmod_one>
c000a3db:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3de:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a3e2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a3e5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a3e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3ed:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a3f1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f4:	e8 57 45 01 00       	call   c001e950 <lrint>
c000a3f9:	0f af e8             	imul   ebp,eax
c000a3fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a400:	01 e8                	add    eax,ebp
c000a402:	99                   	cdq    
c000a403:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a406:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a409:	e9 85 fe ff ff       	jmp    c000a293 <sinc_hex_vari_process+0xfc>
c000a40e:	83 c4 3c             	add    esp,0x3c
c000a411:	5b                   	pop    ebx
c000a412:	5e                   	pop    esi
c000a413:	5f                   	pop    edi
c000a414:	5d                   	pop    ebp
c000a415:	c3                   	ret    

c000a416 <sinc_quad_vari_process>:
c000a416:	55                   	push   ebp
c000a417:	b8 05 00 00 00       	mov    eax,0x5
c000a41c:	57                   	push   edi
c000a41d:	56                   	push   esi
c000a41e:	53                   	push   ebx
c000a41f:	83 ec 3c             	sub    esp,0x3c
c000a422:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a426:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a42a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a42d:	85 db                	test   ebx,ebx
c000a42f:	0f 84 58 02 00 00    	je     c000a68d <sinc_quad_vari_process+0x277>
c000a435:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a438:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a43b:	0f af d0             	imul   edx,eax
c000a43e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a441:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a445:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a44c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a44f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a456:	dd 06                	fld    QWORD PTR [esi]
c000a458:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a45c:	55                   	push   ebp
c000a45d:	55                   	push   ebp
c000a45e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a461:	e8 d6 ed ff ff       	call   c000923c <is_bad_src_ratio>
c000a466:	89 c2                	mov    edx,eax
c000a468:	58                   	pop    eax
c000a469:	85 d2                	test   edx,edx
c000a46b:	59                   	pop    ecx
c000a46c:	b8 16 00 00 00       	mov    eax,0x16
c000a471:	0f 85 16 02 00 00    	jne    c000a68d <sinc_quad_vari_process+0x277>
c000a477:	d9 05 08 88 03 c0    	fld    DWORD PTR ds:0xc0038808
c000a47d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a480:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a483:	dd 06                	fld    QWORD PTR [esi]
c000a485:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a488:	d8 d1                	fcom   st(1)
c000a48a:	df e0                	fnstsw ax
c000a48c:	9e                   	sahf   
c000a48d:	76 0f                	jbe    c000a49e <sinc_quad_vari_process+0x88>
c000a48f:	dd d8                	fstp   st(0)
c000a491:	d9 e8                	fld1   
c000a493:	d8 d9                	fcomp  st(1)
c000a495:	df e0                	fnstsw ax
c000a497:	9e                   	sahf   
c000a498:	77 0f                	ja     c000a4a9 <sinc_quad_vari_process+0x93>
c000a49a:	dd d8                	fstp   st(0)
c000a49c:	eb 11                	jmp    c000a4af <sinc_quad_vari_process+0x99>
c000a49e:	dd d9                	fstp   st(1)
c000a4a0:	d9 e8                	fld1   
c000a4a2:	d8 d9                	fcomp  st(1)
c000a4a4:	df e0                	fnstsw ax
c000a4a6:	9e                   	sahf   
c000a4a7:	76 04                	jbe    c000a4ad <sinc_quad_vari_process+0x97>
c000a4a9:	de f9                	fdivp  st(1),st
c000a4ab:	eb 02                	jmp    c000a4af <sinc_quad_vari_process+0x99>
c000a4ad:	dd d8                	fstp   st(0)
c000a4af:	83 ec 10             	sub    esp,0x10
c000a4b2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4b5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4b8:	e8 93 44 01 00       	call   c001e950 <lrint>
c000a4bd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4c0:	40                   	inc    eax
c000a4c1:	dd 14 24             	fst    QWORD PTR [esp]
c000a4c4:	0f af c5             	imul   eax,ebp
c000a4c7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4cf:	e8 6e f8 ff ff       	call   c0009d42 <fmod_one>
c000a4d4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4d7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a4db:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4de:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4e6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a4ea:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4ed:	e8 5e 44 01 00       	call   c001e950 <lrint>
c000a4f2:	0f af e8             	imul   ebp,eax
c000a4f5:	d9 e8                	fld1   
c000a4f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a4fb:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a4ff:	01 e8                	add    eax,ebp
c000a501:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000a507:	99                   	cdq    
c000a508:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a50c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a50f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a518:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a51b:	7d 4b                	jge    c000a568 <sinc_quad_vari_process+0x152>
c000a51d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a520:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a523:	01 c8                	add    eax,ecx
c000a525:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a528:	99                   	cdq    
c000a529:	f7 f9                	idiv   ecx
c000a52b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a52f:	7d 09                	jge    c000a53a <sinc_quad_vari_process+0x124>
c000a531:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a534:	85 c0                	test   eax,eax
c000a536:	79 57                	jns    c000a58f <sinc_quad_vari_process+0x179>
c000a538:	eb 70                	jmp    c000a5aa <sinc_quad_vari_process+0x194>
c000a53a:	51                   	push   ecx
c000a53b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a53f:	57                   	push   edi
c000a540:	53                   	push   ebx
c000a541:	e8 53 f8 ff ff       	call   c0009d99 <prepare_data>
c000a546:	83 c4 10             	add    esp,0x10
c000a549:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a54c:	85 c0                	test   eax,eax
c000a54e:	0f 85 39 01 00 00    	jne    c000a68d <sinc_quad_vari_process+0x277>
c000a554:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a557:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a55a:	01 c8                	add    eax,ecx
c000a55c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a55f:	99                   	cdq    
c000a560:	f7 f9                	idiv   ecx
c000a562:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a566:	7c c9                	jl     c000a531 <sinc_quad_vari_process+0x11b>
c000a568:	dd 04 24             	fld    QWORD PTR [esp]
c000a56b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a56e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a572:	dd 1e                	fstp   QWORD PTR [esi]
c000a574:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a577:	99                   	cdq    
c000a578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a57b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a57e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a581:	99                   	cdq    
c000a582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a585:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a588:	31 c0                	xor    eax,eax
c000a58a:	e9 fe 00 00 00       	jmp    c000a68d <sinc_quad_vari_process+0x277>
c000a58f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a593:	dd 04 24             	fld    QWORD PTR [esp]
c000a596:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a599:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a59d:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5a1:	d9 c9                	fxch   st(1)
c000a5a3:	de d9                	fcompp 
c000a5a5:	df e0                	fnstsw ax
c000a5a7:	9e                   	sahf   
c000a5a8:	73 be                	jae    c000a568 <sinc_quad_vari_process+0x152>
c000a5aa:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5ae:	7e 31                	jle    c000a5e1 <sinc_quad_vari_process+0x1cb>
c000a5b0:	83 ec 10             	sub    esp,0x10
c000a5b3:	dd 06                	fld    QWORD PTR [esi]
c000a5b5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5b8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5bb:	e8 70 43 01 00       	call   c001e930 <fabs>
c000a5c0:	83 c4 10             	add    esp,0x10
c000a5c3:	dc 1d f8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387f8
c000a5c9:	df e0                	fnstsw ax
c000a5cb:	9e                   	sahf   
c000a5cc:	76 13                	jbe    c000a5e1 <sinc_quad_vari_process+0x1cb>
c000a5ce:	dd 06                	fld    QWORD PTR [esi]
c000a5d0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5d3:	d8 e1                	fsub   st,st(1)
c000a5d5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5d8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5db:	de c1                	faddp  st(1),st
c000a5dd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a5e1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a5e4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5e8:	d9 e8                	fld1   
c000a5ea:	d8 d9                	fcomp  st(1)
c000a5ec:	df e0                	fnstsw ax
c000a5ee:	9e                   	sahf   
c000a5ef:	77 04                	ja     c000a5f5 <sinc_quad_vari_process+0x1df>
c000a5f1:	dd d8                	fstp   st(0)
c000a5f3:	d9 e8                	fld1   
c000a5f5:	de c9                	fmulp  st(1),st
c000a5f7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a5fb:	50                   	push   eax
c000a5fc:	50                   	push   eax
c000a5fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a601:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a605:	e8 25 f7 ff ff       	call   c0009d2f <double_to_fp>
c000a60a:	89 c5                	mov    ebp,eax
c000a60c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a610:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a614:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a617:	e8 13 f7 ff ff       	call   c0009d2f <double_to_fp>
c000a61c:	83 c4 0c             	add    esp,0xc
c000a61f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a622:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a625:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a628:	89 c1                	mov    ecx,eax
c000a62a:	52                   	push   edx
c000a62b:	89 d8                	mov    eax,ebx
c000a62d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a631:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a634:	52                   	push   edx
c000a635:	52                   	push   edx
c000a636:	89 ea                	mov    edx,ebp
c000a638:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a63b:	e8 8d ee ff ff       	call   c00094cd <calc_output_quad>
c000a640:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a644:	d9 e8                	fld1   
c000a646:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a64a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a64e:	dd 14 24             	fst    QWORD PTR [esp]
c000a651:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a655:	e8 e8 f6 ff ff       	call   c0009d42 <fmod_one>
c000a65a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a65d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a661:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a664:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a668:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a66c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a670:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a673:	e8 d8 42 01 00       	call   c001e950 <lrint>
c000a678:	0f af e8             	imul   ebp,eax
c000a67b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a67f:	01 e8                	add    eax,ebp
c000a681:	99                   	cdq    
c000a682:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a685:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a688:	e9 85 fe ff ff       	jmp    c000a512 <sinc_quad_vari_process+0xfc>
c000a68d:	83 c4 3c             	add    esp,0x3c
c000a690:	5b                   	pop    ebx
c000a691:	5e                   	pop    esi
c000a692:	5f                   	pop    edi
c000a693:	5d                   	pop    ebp
c000a694:	c3                   	ret    

c000a695 <sinc_stereo_vari_process>:
c000a695:	55                   	push   ebp
c000a696:	b8 05 00 00 00       	mov    eax,0x5
c000a69b:	57                   	push   edi
c000a69c:	56                   	push   esi
c000a69d:	53                   	push   ebx
c000a69e:	83 ec 3c             	sub    esp,0x3c
c000a6a1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6a5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6a9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6ac:	85 db                	test   ebx,ebx
c000a6ae:	0f 84 58 02 00 00    	je     c000a90c <sinc_stereo_vari_process+0x277>
c000a6b4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6b7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6ba:	0f af d0             	imul   edx,eax
c000a6bd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6c0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6c4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6cb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6ce:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6d5:	dd 06                	fld    QWORD PTR [esi]
c000a6d7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6db:	55                   	push   ebp
c000a6dc:	55                   	push   ebp
c000a6dd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6e0:	e8 57 eb ff ff       	call   c000923c <is_bad_src_ratio>
c000a6e5:	89 c2                	mov    edx,eax
c000a6e7:	58                   	pop    eax
c000a6e8:	85 d2                	test   edx,edx
c000a6ea:	59                   	pop    ecx
c000a6eb:	b8 16 00 00 00       	mov    eax,0x16
c000a6f0:	0f 85 16 02 00 00    	jne    c000a90c <sinc_stereo_vari_process+0x277>
c000a6f6:	d9 05 08 88 03 c0    	fld    DWORD PTR ds:0xc0038808
c000a6fc:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a6ff:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a702:	dd 06                	fld    QWORD PTR [esi]
c000a704:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a707:	d8 d1                	fcom   st(1)
c000a709:	df e0                	fnstsw ax
c000a70b:	9e                   	sahf   
c000a70c:	76 0f                	jbe    c000a71d <sinc_stereo_vari_process+0x88>
c000a70e:	dd d8                	fstp   st(0)
c000a710:	d9 e8                	fld1   
c000a712:	d8 d9                	fcomp  st(1)
c000a714:	df e0                	fnstsw ax
c000a716:	9e                   	sahf   
c000a717:	77 0f                	ja     c000a728 <sinc_stereo_vari_process+0x93>
c000a719:	dd d8                	fstp   st(0)
c000a71b:	eb 11                	jmp    c000a72e <sinc_stereo_vari_process+0x99>
c000a71d:	dd d9                	fstp   st(1)
c000a71f:	d9 e8                	fld1   
c000a721:	d8 d9                	fcomp  st(1)
c000a723:	df e0                	fnstsw ax
c000a725:	9e                   	sahf   
c000a726:	76 04                	jbe    c000a72c <sinc_stereo_vari_process+0x97>
c000a728:	de f9                	fdivp  st(1),st
c000a72a:	eb 02                	jmp    c000a72e <sinc_stereo_vari_process+0x99>
c000a72c:	dd d8                	fstp   st(0)
c000a72e:	83 ec 10             	sub    esp,0x10
c000a731:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a734:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a737:	e8 14 42 01 00       	call   c001e950 <lrint>
c000a73c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a73f:	40                   	inc    eax
c000a740:	dd 14 24             	fst    QWORD PTR [esp]
c000a743:	0f af c5             	imul   eax,ebp
c000a746:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a74a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a74e:	e8 ef f5 ff ff       	call   c0009d42 <fmod_one>
c000a753:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a756:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a75a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a75d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a761:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a765:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a769:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a76c:	e8 df 41 01 00       	call   c001e950 <lrint>
c000a771:	0f af e8             	imul   ebp,eax
c000a774:	d9 e8                	fld1   
c000a776:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a77a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a77e:	01 e8                	add    eax,ebp
c000a780:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000a786:	99                   	cdq    
c000a787:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a78b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a78e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a791:	83 c4 10             	add    esp,0x10
c000a794:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a797:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a79a:	7d 4b                	jge    c000a7e7 <sinc_stereo_vari_process+0x152>
c000a79c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a79f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7a2:	01 c8                	add    eax,ecx
c000a7a4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7a7:	99                   	cdq    
c000a7a8:	f7 f9                	idiv   ecx
c000a7aa:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a7ae:	7d 09                	jge    c000a7b9 <sinc_stereo_vari_process+0x124>
c000a7b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7b3:	85 c0                	test   eax,eax
c000a7b5:	79 57                	jns    c000a80e <sinc_stereo_vari_process+0x179>
c000a7b7:	eb 70                	jmp    c000a829 <sinc_stereo_vari_process+0x194>
c000a7b9:	51                   	push   ecx
c000a7ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7be:	57                   	push   edi
c000a7bf:	53                   	push   ebx
c000a7c0:	e8 d4 f5 ff ff       	call   c0009d99 <prepare_data>
c000a7c5:	83 c4 10             	add    esp,0x10
c000a7c8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7cb:	85 c0                	test   eax,eax
c000a7cd:	0f 85 39 01 00 00    	jne    c000a90c <sinc_stereo_vari_process+0x277>
c000a7d3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7d6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7d9:	01 c8                	add    eax,ecx
c000a7db:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7de:	99                   	cdq    
c000a7df:	f7 f9                	idiv   ecx
c000a7e1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a7e5:	7c c9                	jl     c000a7b0 <sinc_stereo_vari_process+0x11b>
c000a7e7:	dd 04 24             	fld    QWORD PTR [esp]
c000a7ea:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a7ed:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7f1:	dd 1e                	fstp   QWORD PTR [esi]
c000a7f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a7f6:	99                   	cdq    
c000a7f7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a7fa:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a7fd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a800:	99                   	cdq    
c000a801:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a804:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a807:	31 c0                	xor    eax,eax
c000a809:	e9 fe 00 00 00       	jmp    c000a90c <sinc_stereo_vari_process+0x277>
c000a80e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a812:	dd 04 24             	fld    QWORD PTR [esp]
c000a815:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a818:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a81c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a820:	d9 c9                	fxch   st(1)
c000a822:	de d9                	fcompp 
c000a824:	df e0                	fnstsw ax
c000a826:	9e                   	sahf   
c000a827:	73 be                	jae    c000a7e7 <sinc_stereo_vari_process+0x152>
c000a829:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a82d:	7e 31                	jle    c000a860 <sinc_stereo_vari_process+0x1cb>
c000a82f:	83 ec 10             	sub    esp,0x10
c000a832:	dd 06                	fld    QWORD PTR [esi]
c000a834:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a837:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a83a:	e8 f1 40 01 00       	call   c001e930 <fabs>
c000a83f:	83 c4 10             	add    esp,0x10
c000a842:	dc 1d f8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387f8
c000a848:	df e0                	fnstsw ax
c000a84a:	9e                   	sahf   
c000a84b:	76 13                	jbe    c000a860 <sinc_stereo_vari_process+0x1cb>
c000a84d:	dd 06                	fld    QWORD PTR [esi]
c000a84f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a852:	d8 e1                	fsub   st,st(1)
c000a854:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a857:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a85a:	de c1                	faddp  st(1),st
c000a85c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a860:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a863:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a867:	d9 e8                	fld1   
c000a869:	d8 d9                	fcomp  st(1)
c000a86b:	df e0                	fnstsw ax
c000a86d:	9e                   	sahf   
c000a86e:	77 04                	ja     c000a874 <sinc_stereo_vari_process+0x1df>
c000a870:	dd d8                	fstp   st(0)
c000a872:	d9 e8                	fld1   
c000a874:	de c9                	fmulp  st(1),st
c000a876:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a87a:	50                   	push   eax
c000a87b:	50                   	push   eax
c000a87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a880:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a884:	e8 a6 f4 ff ff       	call   c0009d2f <double_to_fp>
c000a889:	89 c5                	mov    ebp,eax
c000a88b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a88f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a893:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a896:	e8 94 f4 ff ff       	call   c0009d2f <double_to_fp>
c000a89b:	83 c4 0c             	add    esp,0xc
c000a89e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8a1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a8a4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a8a7:	89 c1                	mov    ecx,eax
c000a8a9:	52                   	push   edx
c000a8aa:	89 d8                	mov    eax,ebx
c000a8ac:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8b0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8b3:	52                   	push   edx
c000a8b4:	52                   	push   edx
c000a8b5:	89 ea                	mov    edx,ebp
c000a8b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8ba:	e8 ce ea ff ff       	call   c000938d <calc_output_stereo>
c000a8bf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a8c3:	d9 e8                	fld1   
c000a8c5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8c9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8cd:	dd 14 24             	fst    QWORD PTR [esp]
c000a8d0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a8d4:	e8 69 f4 ff ff       	call   c0009d42 <fmod_one>
c000a8d9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8dc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8e0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a8e3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a8e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a8eb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a8ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8f2:	e8 59 40 01 00       	call   c001e950 <lrint>
c000a8f7:	0f af e8             	imul   ebp,eax
c000a8fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8fe:	01 e8                	add    eax,ebp
c000a900:	99                   	cdq    
c000a901:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a904:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a907:	e9 85 fe ff ff       	jmp    c000a791 <sinc_stereo_vari_process+0xfc>
c000a90c:	83 c4 3c             	add    esp,0x3c
c000a90f:	5b                   	pop    ebx
c000a910:	5e                   	pop    esi
c000a911:	5f                   	pop    edi
c000a912:	5d                   	pop    ebp
c000a913:	c3                   	ret    

c000a914 <sinc_mono_vari_process>:
c000a914:	55                   	push   ebp
c000a915:	b8 05 00 00 00       	mov    eax,0x5
c000a91a:	57                   	push   edi
c000a91b:	56                   	push   esi
c000a91c:	53                   	push   ebx
c000a91d:	83 ec 3c             	sub    esp,0x3c
c000a920:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a924:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a928:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a92b:	85 db                	test   ebx,ebx
c000a92d:	0f 84 57 02 00 00    	je     c000ab8a <sinc_mono_vari_process+0x276>
c000a933:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a936:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a939:	0f af d0             	imul   edx,eax
c000a93c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a93f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a943:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a94a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a94d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a954:	dd 06                	fld    QWORD PTR [esi]
c000a956:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a95a:	51                   	push   ecx
c000a95b:	51                   	push   ecx
c000a95c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a95f:	e8 d8 e8 ff ff       	call   c000923c <is_bad_src_ratio>
c000a964:	5d                   	pop    ebp
c000a965:	89 c2                	mov    edx,eax
c000a967:	58                   	pop    eax
c000a968:	85 d2                	test   edx,edx
c000a96a:	b8 16 00 00 00       	mov    eax,0x16
c000a96f:	0f 85 15 02 00 00    	jne    c000ab8a <sinc_mono_vari_process+0x276>
c000a975:	d9 05 08 88 03 c0    	fld    DWORD PTR ds:0xc0038808
c000a97b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a97e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a981:	dd 06                	fld    QWORD PTR [esi]
c000a983:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a986:	d8 d1                	fcom   st(1)
c000a988:	df e0                	fnstsw ax
c000a98a:	9e                   	sahf   
c000a98b:	76 0f                	jbe    c000a99c <sinc_mono_vari_process+0x88>
c000a98d:	dd d8                	fstp   st(0)
c000a98f:	d9 e8                	fld1   
c000a991:	d8 d9                	fcomp  st(1)
c000a993:	df e0                	fnstsw ax
c000a995:	9e                   	sahf   
c000a996:	77 0f                	ja     c000a9a7 <sinc_mono_vari_process+0x93>
c000a998:	dd d8                	fstp   st(0)
c000a99a:	eb 11                	jmp    c000a9ad <sinc_mono_vari_process+0x99>
c000a99c:	dd d9                	fstp   st(1)
c000a99e:	d9 e8                	fld1   
c000a9a0:	d8 d9                	fcomp  st(1)
c000a9a2:	df e0                	fnstsw ax
c000a9a4:	9e                   	sahf   
c000a9a5:	76 04                	jbe    c000a9ab <sinc_mono_vari_process+0x97>
c000a9a7:	de f9                	fdivp  st(1),st
c000a9a9:	eb 02                	jmp    c000a9ad <sinc_mono_vari_process+0x99>
c000a9ab:	dd d8                	fstp   st(0)
c000a9ad:	83 ec 10             	sub    esp,0x10
c000a9b0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a9b3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a9b6:	e8 95 3f 01 00       	call   c001e950 <lrint>
c000a9bb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a9be:	40                   	inc    eax
c000a9bf:	dd 14 24             	fst    QWORD PTR [esp]
c000a9c2:	0f af e8             	imul   ebp,eax
c000a9c5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a9c9:	e8 74 f3 ff ff       	call   c0009d42 <fmod_one>
c000a9ce:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a9d1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a9d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a9d9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a9dd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a9e0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a9e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a9e8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a9eb:	e8 60 3f 01 00       	call   c001e950 <lrint>
c000a9f0:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a9f5:	d9 e8                	fld1   
c000a9f7:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a9fb:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a9ff:	99                   	cdq    
c000aa00:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000aa06:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000aa09:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000aa0d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000aa10:	83 c4 10             	add    esp,0x10
c000aa13:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000aa16:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000aa19:	7d 44                	jge    c000aa5f <sinc_mono_vari_process+0x14b>
c000aa1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa21:	01 c8                	add    eax,ecx
c000aa23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa26:	99                   	cdq    
c000aa27:	f7 f9                	idiv   ecx
c000aa29:	39 d5                	cmp    ebp,edx
c000aa2b:	7d 09                	jge    c000aa36 <sinc_mono_vari_process+0x122>
c000aa2d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000aa30:	85 c0                	test   eax,eax
c000aa32:	79 52                	jns    c000aa86 <sinc_mono_vari_process+0x172>
c000aa34:	eb 6b                	jmp    c000aaa1 <sinc_mono_vari_process+0x18d>
c000aa36:	52                   	push   edx
c000aa37:	55                   	push   ebp
c000aa38:	57                   	push   edi
c000aa39:	53                   	push   ebx
c000aa3a:	e8 5a f3 ff ff       	call   c0009d99 <prepare_data>
c000aa3f:	83 c4 10             	add    esp,0x10
c000aa42:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000aa45:	85 c0                	test   eax,eax
c000aa47:	0f 85 3d 01 00 00    	jne    c000ab8a <sinc_mono_vari_process+0x276>
c000aa4d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa50:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa53:	01 c8                	add    eax,ecx
c000aa55:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa58:	99                   	cdq    
c000aa59:	f7 f9                	idiv   ecx
c000aa5b:	39 d5                	cmp    ebp,edx
c000aa5d:	7c ce                	jl     c000aa2d <sinc_mono_vari_process+0x119>
c000aa5f:	dd 04 24             	fld    QWORD PTR [esp]
c000aa62:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000aa65:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa69:	dd 1e                	fstp   QWORD PTR [esi]
c000aa6b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000aa6e:	99                   	cdq    
c000aa6f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aa72:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000aa75:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000aa78:	99                   	cdq    
c000aa79:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aa7c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aa7f:	31 c0                	xor    eax,eax
c000aa81:	e9 04 01 00 00       	jmp    c000ab8a <sinc_mono_vari_process+0x276>
c000aa86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa8a:	dd 04 24             	fld    QWORD PTR [esp]
c000aa8d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000aa90:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000aa94:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000aa98:	d9 c9                	fxch   st(1)
c000aa9a:	de d9                	fcompp 
c000aa9c:	df e0                	fnstsw ax
c000aa9e:	9e                   	sahf   
c000aa9f:	77 be                	ja     c000aa5f <sinc_mono_vari_process+0x14b>
c000aaa1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000aaa5:	7e 31                	jle    c000aad8 <sinc_mono_vari_process+0x1c4>
c000aaa7:	83 ec 10             	sub    esp,0x10
c000aaaa:	dd 06                	fld    QWORD PTR [esi]
c000aaac:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000aaaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aab2:	e8 79 3e 01 00       	call   c001e930 <fabs>
c000aab7:	83 c4 10             	add    esp,0x10
c000aaba:	dc 1d f8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387f8
c000aac0:	df e0                	fnstsw ax
c000aac2:	9e                   	sahf   
c000aac3:	76 13                	jbe    c000aad8 <sinc_mono_vari_process+0x1c4>
c000aac5:	dd 06                	fld    QWORD PTR [esi]
c000aac7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000aaca:	d8 e1                	fsub   st,st(1)
c000aacc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000aacf:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000aad2:	de c1                	faddp  st(1),st
c000aad4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000aad8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000aadb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aadf:	d9 e8                	fld1   
c000aae1:	d8 d9                	fcomp  st(1)
c000aae3:	df e0                	fnstsw ax
c000aae5:	9e                   	sahf   
c000aae6:	77 04                	ja     c000aaec <sinc_mono_vari_process+0x1d8>
c000aae8:	dd d8                	fstp   st(0)
c000aaea:	d9 e8                	fld1   
c000aaec:	de c9                	fmulp  st(1),st
c000aaee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aaf2:	50                   	push   eax
c000aaf3:	50                   	push   eax
c000aaf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aafc:	e8 2e f2 ff ff       	call   c0009d2f <double_to_fp>
c000ab01:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab05:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab09:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab0d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab10:	e8 1a f2 ff ff       	call   c0009d2f <double_to_fp>
c000ab15:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ab19:	89 c1                	mov    ecx,eax
c000ab1b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000ab1f:	89 d8                	mov    eax,ebx
c000ab21:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000ab24:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000ab28:	e8 7b e7 ff ff       	call   c00092a8 <calc_output_single>
c000ab2d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab30:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ab33:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab37:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000ab3a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000ab3d:	d9 e8                	fld1   
c000ab3f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000ab43:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000ab47:	dd 14 24             	fst    QWORD PTR [esp]
c000ab4a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000ab4e:	e8 ef f1 ff ff       	call   c0009d42 <fmod_one>
c000ab53:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ab56:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab5a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab5e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000ab62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab65:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000ab69:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab6d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab70:	e8 db 3d 01 00       	call   c001e950 <lrint>
c000ab75:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000ab7a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000ab7e:	99                   	cdq    
c000ab7f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ab82:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ab85:	e9 86 fe ff ff       	jmp    c000aa10 <sinc_mono_vari_process+0xfc>
c000ab8a:	83 c4 3c             	add    esp,0x3c
c000ab8d:	5b                   	pop    ebx
c000ab8e:	5e                   	pop    esi
c000ab8f:	5f                   	pop    edi
c000ab90:	5d                   	pop    ebp
c000ab91:	c3                   	ret    

c000ab92 <sinc_get_name>:
c000ab92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ab96:	31 c0                	xor    eax,eax
c000ab98:	83 fa 02             	cmp    edx,0x2
c000ab9b:	77 07                	ja     c000aba4 <sinc_get_name+0x12>
c000ab9d:	8b 04 95 a0 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe60]
c000aba4:	c3                   	ret    

c000aba5 <sinc_get_description>:
c000aba5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aba9:	31 c0                	xor    eax,eax
c000abab:	83 fa 02             	cmp    edx,0x2
c000abae:	77 07                	ja     c000abb7 <sinc_get_description+0x12>
c000abb0:	8b 04 95 94 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe6c]
c000abb7:	c3                   	ret    

c000abb8 <sinc_set_converter>:
c000abb8:	55                   	push   ebp
c000abb9:	57                   	push   edi
c000abba:	56                   	push   esi
c000abbb:	53                   	push   ebx
c000abbc:	81 ec 5c 08 00 00    	sub    esp,0x85c
c000abc2:	8b 9c 24 70 08 00 00 	mov    ebx,DWORD PTR [esp+0x870]
c000abc9:	8b ac 24 74 08 00 00 	mov    ebp,DWORD PTR [esp+0x874]
c000abd0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000abd3:	85 c0                	test   eax,eax
c000abd5:	74 13                	je     c000abea <sinc_set_converter+0x32>
c000abd7:	83 ec 0c             	sub    esp,0xc
c000abda:	50                   	push   eax
c000abdb:	e8 eb 28 00 00       	call   c000d4cb <free>
c000abe0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	56                   	push   esi
c000abeb:	68 44 08 00 00       	push   0x844
c000abf0:	6a 00                	push   0x0
c000abf2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000abf6:	56                   	push   esi
c000abf7:	e8 af 5a ff ff       	call   c00006ab <memset>
c000abfc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000abff:	c7 44 24 1c 50 50 6a 02 	mov    DWORD PTR [esp+0x1c],0x26a5050
c000ac07:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ac0b:	b8 0b 00 00 00       	mov    eax,0xb
c000ac10:	83 c4 10             	add    esp,0x10
c000ac13:	81 fa 80 00 00 00    	cmp    edx,0x80
c000ac19:	0f 8f 58 01 00 00    	jg     c000ad77 <sinc_set_converter+0x1bf>
c000ac1f:	83 fa 01             	cmp    edx,0x1
c000ac22:	75 10                	jne    c000ac34 <sinc_set_converter+0x7c>
c000ac24:	c7 43 24 14 a9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a914
c000ac2b:	c7 43 20 14 a9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a914
c000ac32:	eb 4d                	jmp    c000ac81 <sinc_set_converter+0xc9>
c000ac34:	83 fa 02             	cmp    edx,0x2
c000ac37:	75 10                	jne    c000ac49 <sinc_set_converter+0x91>
c000ac39:	c7 43 24 95 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a695
c000ac40:	c7 43 20 95 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a695
c000ac47:	eb 38                	jmp    c000ac81 <sinc_set_converter+0xc9>
c000ac49:	83 fa 04             	cmp    edx,0x4
c000ac4c:	75 10                	jne    c000ac5e <sinc_set_converter+0xa6>
c000ac4e:	c7 43 24 16 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a416
c000ac55:	c7 43 20 16 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a416
c000ac5c:	eb 23                	jmp    c000ac81 <sinc_set_converter+0xc9>
c000ac5e:	83 fa 06             	cmp    edx,0x6
c000ac61:	75 10                	jne    c000ac73 <sinc_set_converter+0xbb>
c000ac63:	c7 43 24 97 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a197
c000ac6a:	c7 43 20 97 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a197
c000ac71:	eb 0e                	jmp    c000ac81 <sinc_set_converter+0xc9>
c000ac73:	c7 43 24 13 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f13
c000ac7a:	c7 43 20 13 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f13
c000ac81:	c7 43 28 cc 9c 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009ccc
c000ac88:	83 fd 01             	cmp    ebp,0x1
c000ac8b:	74 28                	je     c000acb5 <sinc_set_converter+0xfd>
c000ac8d:	b8 0a 00 00 00       	mov    eax,0xa
c000ac92:	83 fd 02             	cmp    ebp,0x2
c000ac95:	0f 85 dc 00 00 00    	jne    c000ad77 <sinc_set_converter+0x1bf>
c000ac9b:	c7 44 24 3c 64 60 03 c0 	mov    DWORD PTR [esp+0x3c],0xc0036064
c000aca3:	c7 44 24 24 9e 09 00 00 	mov    DWORD PTR [esp+0x24],0x99e
c000acab:	c7 44 24 28 80 00 00 00 	mov    DWORD PTR [esp+0x28],0x80
c000acb3:	eb 18                	jmp    c000accd <sinc_set_converter+0x115>
c000acb5:	c7 44 24 3c c4 01 02 c0 	mov    DWORD PTR [esp+0x3c],0xc00201c4
c000acbd:	c7 44 24 24 a4 57 00 00 	mov    DWORD PTR [esp+0x24],0x57a4
c000acc5:	c7 44 24 28 eb 01 00 00 	mov    DWORD PTR [esp+0x28],0x1eb
c000accd:	83 ec 10             	sub    esp,0x10
c000acd0:	d9 05 0c 88 03 c0    	fld    DWORD PTR ds:0xc003880c
c000acd6:	da 4c 24 34          	fimul  DWORD PTR [esp+0x34]
c000acda:	da 74 24 38          	fidiv  DWORD PTR [esp+0x38]
c000acde:	d8 0d 10 88 03 c0    	fmul   DWORD PTR ds:0xc0038810
c000ace4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ace7:	e8 64 3c 01 00       	call   c001e950 <lrint>
c000acec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	3d 00 10 00 00       	cmp    eax,0x1000
c000acf8:	7d 05                	jge    c000acff <sinc_set_converter+0x147>
c000acfa:	b8 00 10 00 00       	mov    eax,0x1000
c000acff:	0f af c2             	imul   eax,edx
c000ad02:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ad06:	51                   	push   ecx
c000ad07:	8d 84 02 11 02 00 00 	lea    eax,[edx+eax*1+0x211]
c000ad0e:	51                   	push   ecx
c000ad0f:	c1 e0 02             	shl    eax,0x2
c000ad12:	50                   	push   eax
c000ad13:	6a 01                	push   0x1
c000ad15:	e8 d1 27 00 00       	call   c000d4eb <calloc>
c000ad1a:	83 c4 10             	add    esp,0x10
c000ad1d:	89 c5                	mov    ebp,eax
c000ad1f:	b8 01 00 00 00       	mov    eax,0x1
c000ad24:	85 ed                	test   ebp,ebp
c000ad26:	74 4f                	je     c000ad77 <sinc_set_converter+0x1bf>
c000ad28:	b9 11 02 00 00       	mov    ecx,0x211
c000ad2d:	fc                   	cld    
c000ad2e:	89 ef                	mov    edi,ebp
c000ad30:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad32:	50                   	push   eax
c000ad33:	68 44 08 00 00       	push   0x844
c000ad38:	68 ee 00 00 00       	push   0xee
c000ad3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ad41:	50                   	push   eax
c000ad42:	e8 64 59 ff ff       	call   c00006ab <memset>
c000ad47:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000ad4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad4d:	e8 7a ef ff ff       	call   c0009ccc <sinc_reset>
c000ad52:	bb 01 00 00 00       	mov    ebx,0x1
c000ad57:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000ad5a:	83 c4 10             	add    esp,0x10
c000ad5d:	31 c9                	xor    ecx,ecx
c000ad5f:	89 da                	mov    edx,ebx
c000ad61:	d3 e2                	shl    edx,cl
c000ad63:	39 c2                	cmp    edx,eax
c000ad65:	7d 05                	jge    c000ad6c <sinc_set_converter+0x1b4>
c000ad67:	09 d0                	or     eax,edx
c000ad69:	41                   	inc    ecx
c000ad6a:	eb f3                	jmp    c000ad5f <sinc_set_converter+0x1a7>
c000ad6c:	31 c0                	xor    eax,eax
c000ad6e:	83 f9 15             	cmp    ecx,0x15
c000ad71:	0f 9d c0             	setge  al
c000ad74:	8d 04 c0             	lea    eax,[eax+eax*8]
c000ad77:	81 c4 5c 08 00 00    	add    esp,0x85c
c000ad7d:	5b                   	pop    ebx
c000ad7e:	5e                   	pop    esi
c000ad7f:	5f                   	pop    edi
c000ad80:	5d                   	pop    ebp
c000ad81:	c3                   	ret    

c000ad82 <is_bad_src_ratio>:
c000ad82:	83 ec 0c             	sub    esp,0xc
c000ad85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad94:	dd 04 24             	fld    QWORD PTR [esp]
c000ad97:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c000ad9d:	de d9                	fcompp 
c000ad9f:	df e0                	fnstsw ax
c000ada1:	f6 c4 45             	test   ah,0x45
c000ada4:	74 10                	je     c000adb6 <is_bad_src_ratio+0x34>
c000ada6:	dd 04 24             	fld    QWORD PTR [esp]
c000ada9:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c000adaf:	df e0                	fnstsw ax
c000adb1:	f6 c4 45             	test   ah,0x45
c000adb4:	75 07                	jne    c000adbd <is_bad_src_ratio+0x3b>
c000adb6:	b8 01 00 00 00       	mov    eax,0x1
c000adbb:	eb 05                	jmp    c000adc2 <is_bad_src_ratio+0x40>
c000adbd:	b8 00 00 00 00       	mov    eax,0x0
c000adc2:	83 c4 0c             	add    esp,0xc
c000adc5:	c3                   	ret    

c000adc6 <fmod_one>:
c000adc6:	83 ec 2c             	sub    esp,0x2c
c000adc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000add1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000add5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000add9:	83 ec 08             	sub    esp,0x8
c000addc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade4:	e8 67 3b 01 00       	call   c001e950 <lrint>
c000ade9:	83 c4 10             	add    esp,0x10
c000adec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adf0:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000adf4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000adf8:	de e1                	fsubrp st(1),st
c000adfa:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000adfe:	d9 ee                	fldz   
c000ae00:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000ae04:	df e0                	fnstsw ax
c000ae06:	f6 c4 45             	test   ah,0x45
c000ae09:	75 0a                	jne    c000ae15 <fmod_one+0x4f>
c000ae0b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae0f:	d9 e8                	fld1   
c000ae11:	de c1                	faddp  st(1),st
c000ae13:	eb 04                	jmp    c000ae19 <fmod_one+0x53>
c000ae15:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae19:	83 c4 2c             	add    esp,0x2c
c000ae1c:	c3                   	ret    

c000ae1d <zoh_vari_process>:
c000ae1d:	55                   	push   ebp
c000ae1e:	57                   	push   edi
c000ae1f:	56                   	push   esi
c000ae20:	53                   	push   ebx
c000ae21:	83 ec 2c             	sub    esp,0x2c
c000ae24:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000ae28:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ae2c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ae34:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000ae38:	0f 8e 34 02 00 00    	jle    c000b072 <zoh_vari_process+0x255>
c000ae3e:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000ae41:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ae49:	85 db                	test   ebx,ebx
c000ae4b:	0f 84 21 02 00 00    	je     c000b072 <zoh_vari_process+0x255>
c000ae51:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ae54:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ae58:	74 19                	je     c000ae73 <zoh_vari_process+0x56>
c000ae5a:	31 d2                	xor    edx,edx
c000ae5c:	39 c2                	cmp    edx,eax
c000ae5e:	7d 0c                	jge    c000ae6c <zoh_vari_process+0x4f>
c000ae60:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae62:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ae65:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ae69:	42                   	inc    edx
c000ae6a:	eb f0                	jmp    c000ae5c <zoh_vari_process+0x3f>
c000ae6c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ae73:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ae76:	0f af d0             	imul   edx,eax
c000ae79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ae7c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ae80:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ae87:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ae8a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ae91:	dd 07                	fld    QWORD PTR [edi]
c000ae93:	dd 14 24             	fst    QWORD PTR [esp]
c000ae96:	50                   	push   eax
c000ae97:	50                   	push   eax
c000ae98:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ae9b:	e8 e2 fe ff ff       	call   c000ad82 <is_bad_src_ratio>
c000aea0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aea4:	5a                   	pop    edx
c000aea5:	59                   	pop    ecx
c000aea6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aeab:	0f 85 b9 01 00 00    	jne    c000b06a <zoh_vari_process+0x24d>
c000aeb1:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aeb4:	d9 e8                	fld1   
c000aeb6:	d8 d1                	fcom   st(1)
c000aeb8:	df e0                	fnstsw ax
c000aeba:	9e                   	sahf   
c000aebb:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aebf:	0f 86 85 00 00 00    	jbe    c000af4a <zoh_vari_process+0x12d>
c000aec5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aec8:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aecb:	7d 7d                	jge    c000af4a <zoh_vari_process+0x12d>
c000aecd:	d9 c0                	fld    st(0)
c000aecf:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aed2:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aed5:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aed8:	df e0                	fnstsw ax
c000aeda:	9e                   	sahf   
c000aedb:	73 6d                	jae    c000af4a <zoh_vari_process+0x12d>
c000aedd:	85 d2                	test   edx,edx
c000aedf:	7e 38                	jle    c000af19 <zoh_vari_process+0xfc>
c000aee1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aee5:	83 ec 10             	sub    esp,0x10
c000aee8:	dd 07                	fld    QWORD PTR [edi]
c000aeea:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aeed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aef0:	e8 3b 3a 01 00       	call   c001e930 <fabs>
c000aef5:	83 c4 10             	add    esp,0x10
c000aef8:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c000aefe:	df e0                	fnstsw ax
c000af00:	9e                   	sahf   
c000af01:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000af05:	76 12                	jbe    c000af19 <zoh_vari_process+0xfc>
c000af07:	dd 07                	fld    QWORD PTR [edi]
c000af09:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000af0c:	d8 e1                	fsub   st,st(1)
c000af0e:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000af11:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000af14:	de c1                	faddp  st(1),st
c000af16:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af19:	31 c0                	xor    eax,eax
c000af1b:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000af1e:	7e 13                	jle    c000af33 <zoh_vari_process+0x116>
c000af20:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000af24:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000af27:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000af2a:	40                   	inc    eax
c000af2b:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000af2e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000af31:	eb e8                	jmp    c000af1b <zoh_vari_process+0xfe>
c000af33:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af37:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af3a:	de c1                	faddp  st(1),st
c000af3c:	e9 73 ff ff ff       	jmp    c000aeb4 <zoh_vari_process+0x97>
c000af41:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af45:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af48:	de c1                	faddp  st(1),st
c000af4a:	83 ec 10             	sub    esp,0x10
c000af4d:	dd 14 24             	fst    QWORD PTR [esp]
c000af50:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af54:	e8 6d fe ff ff       	call   c000adc6 <fmod_one>
c000af59:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000af5c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000af60:	d8 e1                	fsub   st,st(1)
c000af62:	d9 c9                	fxch   st(1)
c000af64:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af68:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af6b:	e8 e0 39 01 00       	call   c001e950 <lrint>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	0f af e8             	imul   ebp,eax
c000af76:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000af79:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000af7c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000af80:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000af83:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000af86:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000af89:	0f 8d 82 00 00 00    	jge    c000b011 <zoh_vari_process+0x1f4>
c000af8f:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000af93:	d9 c0                	fld    st(0)
c000af95:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000af98:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000af9c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000afa0:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000afa4:	de d9                	fcompp 
c000afa6:	df e0                	fnstsw ax
c000afa8:	9e                   	sahf   
c000afa9:	72 66                	jb     c000b011 <zoh_vari_process+0x1f4>
c000afab:	85 d2                	test   edx,edx
c000afad:	7e 38                	jle    c000afe7 <zoh_vari_process+0x1ca>
c000afaf:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000afb3:	83 ec 10             	sub    esp,0x10
c000afb6:	dd 07                	fld    QWORD PTR [edi]
c000afb8:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000afbb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000afbe:	e8 6d 39 01 00       	call   c001e930 <fabs>
c000afc3:	83 c4 10             	add    esp,0x10
c000afc6:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c000afcc:	df e0                	fnstsw ax
c000afce:	9e                   	sahf   
c000afcf:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000afd3:	76 12                	jbe    c000afe7 <zoh_vari_process+0x1ca>
c000afd5:	dd 07                	fld    QWORD PTR [edi]
c000afd7:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000afda:	d8 e1                	fsub   st,st(1)
c000afdc:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000afdf:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000afe2:	de c1                	faddp  st(1),st
c000afe4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000afe7:	31 d2                	xor    edx,edx
c000afe9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000afec:	39 d0                	cmp    eax,edx
c000afee:	0f 8e 4d ff ff ff    	jle    c000af41 <zoh_vari_process+0x124>
c000aff4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000aff7:	29 c1                	sub    ecx,eax
c000aff9:	89 c8                	mov    eax,ecx
c000affb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000affd:	01 d0                	add    eax,edx
c000afff:	42                   	inc    edx
c000b000:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000b003:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000b006:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b009:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000b00c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000b00f:	eb d8                	jmp    c000afe9 <zoh_vari_process+0x1cc>
c000b011:	39 e9                	cmp    ecx,ebp
c000b013:	7d 13                	jge    c000b028 <zoh_vari_process+0x20b>
c000b015:	89 e8                	mov    eax,ebp
c000b017:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000b01a:	29 c8                	sub    eax,ecx
c000b01c:	99                   	cdq    
c000b01d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b020:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b024:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000b028:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000b02b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b02e:	85 c0                	test   eax,eax
c000b030:	7f 1b                	jg     c000b04d <zoh_vari_process+0x230>
c000b032:	dd 04 24             	fld    QWORD PTR [esp]
c000b035:	dd 1f                	fstp   QWORD PTR [edi]
c000b037:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b03a:	99                   	cdq    
c000b03b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b03e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000b041:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b044:	99                   	cdq    
c000b045:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b048:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000b04b:	eb 25                	jmp    c000b072 <zoh_vari_process+0x255>
c000b04d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b050:	31 d2                	xor    edx,edx
c000b052:	29 e8                	sub    eax,ebp
c000b054:	c1 e0 02             	shl    eax,0x2
c000b057:	39 d5                	cmp    ebp,edx
c000b059:	7e d7                	jle    c000b032 <zoh_vari_process+0x215>
c000b05b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b05d:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000b060:	83 c0 04             	add    eax,0x4
c000b063:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000b067:	42                   	inc    edx
c000b068:	eb ed                	jmp    c000b057 <zoh_vari_process+0x23a>
c000b06a:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000b072:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b076:	83 c4 2c             	add    esp,0x2c
c000b079:	5b                   	pop    ebx
c000b07a:	5e                   	pop    esi
c000b07b:	5f                   	pop    edi
c000b07c:	5d                   	pop    ebp
c000b07d:	c3                   	ret    

c000b07e <zoh_reset>:
c000b07e:	83 ec 0c             	sub    esp,0xc
c000b081:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b085:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000b088:	85 c0                	test   eax,eax
c000b08a:	74 20                	je     c000b0ac <zoh_reset+0x2e>
c000b08c:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000b08f:	83 c0 1c             	add    eax,0x1c
c000b092:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000b095:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000b09c:	c1 e2 02             	shl    edx,0x2
c000b09f:	51                   	push   ecx
c000b0a0:	52                   	push   edx
c000b0a1:	6a 00                	push   0x0
c000b0a3:	50                   	push   eax
c000b0a4:	e8 02 56 ff ff       	call   c00006ab <memset>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	83 c4 0c             	add    esp,0xc
c000b0af:	c3                   	ret    

c000b0b0 <zoh_get_name>:
c000b0b0:	31 c0                	xor    eax,eax
c000b0b2:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0b7:	75 05                	jne    c000b0be <zoh_get_name+0xe>
c000b0b9:	b8 14 88 03 c0       	mov    eax,0xc0038814
c000b0be:	c3                   	ret    

c000b0bf <zoh_get_description>:
c000b0bf:	31 c0                	xor    eax,eax
c000b0c1:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0c6:	75 05                	jne    c000b0cd <zoh_get_description+0xe>
c000b0c8:	b8 25 88 03 c0       	mov    eax,0xc0038825
c000b0cd:	c3                   	ret    

c000b0ce <zoh_set_converter>:
c000b0ce:	53                   	push   ebx
c000b0cf:	b8 0a 00 00 00       	mov    eax,0xa
c000b0d4:	83 ec 08             	sub    esp,0x8
c000b0d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0db:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000b0e0:	75 6e                	jne    c000b150 <zoh_set_converter+0x82>
c000b0e2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b0e5:	85 c0                	test   eax,eax
c000b0e7:	74 13                	je     c000b0fc <zoh_set_converter+0x2e>
c000b0e9:	83 ec 0c             	sub    esp,0xc
c000b0ec:	50                   	push   eax
c000b0ed:	e8 d9 23 00 00       	call   c000d4cb <free>
c000b0f2:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b0f9:	83 c4 10             	add    esp,0x10
c000b0fc:	50                   	push   eax
c000b0fd:	50                   	push   eax
c000b0fe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b101:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000b108:	50                   	push   eax
c000b109:	6a 01                	push   0x1
c000b10b:	e8 db 23 00 00       	call   c000d4eb <calloc>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	89 c2                	mov    edx,eax
c000b115:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000b118:	85 d2                	test   edx,edx
c000b11a:	b8 01 00 00 00       	mov    eax,0x1
c000b11f:	74 2f                	je     c000b150 <zoh_set_converter+0x82>
c000b121:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000b127:	83 ec 0c             	sub    esp,0xc
c000b12a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b12d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b130:	c7 43 24 1d ae 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ae1d
c000b137:	c7 43 20 1d ae 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ae1d
c000b13e:	c7 43 28 7e b0 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000b07e
c000b145:	53                   	push   ebx
c000b146:	e8 33 ff ff ff       	call   c000b07e <zoh_reset>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	31 c0                	xor    eax,eax
c000b150:	83 c4 08             	add    esp,0x8
c000b153:	5b                   	pop    ebx
c000b154:	c3                   	ret    
c000b155:	90                   	nop

c000b156 <Computer::close(int, int, void*)>:
c000b156:	57                   	push   edi
c000b157:	56                   	push   esi
c000b158:	53                   	push   ebx
c000b159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b15d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b161:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b165:	83 ec 0c             	sub    esp,0xc
c000b168:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000b16e:	e8 7d 87 00 00       	call   c00138f0 <Device::closeAll()>
c000b173:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b179:	83 c4 10             	add    esp,0x10
c000b17c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b17e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000b182:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000b18a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b18e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b192:	5b                   	pop    ebx
c000b193:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000b196:	5e                   	pop    esi
c000b197:	5f                   	pop    edi
c000b198:	ff e0                	jmp    eax

c000b19a <Computer::Computer()>:
c000b19a:	83 ec 0c             	sub    esp,0xc
c000b19d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a1:	83 ec 08             	sub    esp,0x8
c000b1a4:	68 5c 88 03 c0       	push   0xc003885c
c000b1a9:	50                   	push   eax
c000b1aa:	e8 bb 87 00 00       	call   c001396a <Device::Device(char const*)>
c000b1af:	83 c4 10             	add    esp,0x10
c000b1b2:	ba d8 88 03 c0       	mov    edx,0xc00388d8
c000b1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1bb:	89 10                	mov    DWORD PTR [eax],edx
c000b1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cf:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000b1d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1dd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000b1e3:	83 ca 04             	or     edx,0x4
c000b1e6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000b1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b1f6:	0f b6 d0             	movzx  edx,al
c000b1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fd:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000b204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b208:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b20e:	0f b6 d0             	movzx  edx,al
c000b211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b215:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000b21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b224:	8d 50 01             	lea    edx,[eax+0x1]
c000b227:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b22b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b231:	0f b6 d0             	movzx  edx,al
c000b234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b238:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b23c:	83 e1 3f             	and    ecx,0x3f
c000b23f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b247:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b24d:	0f b6 d0             	movzx  edx,al
c000b250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b254:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000b25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b25f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b265:	0f b6 d0             	movzx  edx,al
c000b268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b26c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b275:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b27b:	8d 50 01             	lea    edx,[eax+0x1]
c000b27e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b282:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b288:	0f b6 d0             	movzx  edx,al
c000b28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b293:	83 e1 3f             	and    ecx,0x3f
c000b296:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b29e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2a4:	0f b6 d0             	movzx  edx,al
c000b2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ab:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000b2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2bc:	0f b6 d0             	movzx  edx,al
c000b2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2c3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2d2:	8d 50 01             	lea    edx,[eax+0x1]
c000b2d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2d9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b2df:	0f b6 d0             	movzx  edx,al
c000b2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b2ea:	83 e1 3f             	and    ecx,0x3f
c000b2ed:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b2f1:	90                   	nop
c000b2f2:	83 c4 0c             	add    esp,0xc
c000b2f5:	c3                   	ret    

c000b2f6 <Computer::setBootMessage(char const*)>:
c000b2f6:	c3                   	ret    
c000b2f7:	90                   	nop

c000b2f8 <Computer::start()>:
c000b2f8:	56                   	push   esi
c000b2f9:	53                   	push   ebx
c000b2fa:	50                   	push   eax
c000b2fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b2ff:	e8 5e 30 00 00       	call   c000e362 <lockScheduler()>
c000b304:	e8 8d 33 00 00       	call   c000e696 <schedule()>
c000b309:	e8 56 30 00 00       	call   c000e364 <unlockScheduler()>
c000b30e:	fb                   	sti    
c000b30f:	83 ec 0c             	sub    esp,0xc
c000b312:	68 3b 07 00 00       	push   0x73b
c000b317:	e8 54 71 00 00       	call   c0012470 <operator new(unsigned long)>
c000b31c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b323:	89 c6                	mov    esi,eax
c000b325:	ff 35 3c bc 03 c0    	push   DWORD PTR ds:0xc003bc3c
c000b32b:	68 65 88 03 c0       	push   0xc0038865
c000b330:	6a 01                	push   0x1
c000b332:	50                   	push   eax
c000b333:	e8 8a 2e 00 00       	call   c000e1c2 <Process::Process(bool, char const*, Process*, char**)>
c000b338:	83 c4 20             	add    esp,0x20
c000b33b:	68 ff 00 00 00       	push   0xff
c000b340:	6a 00                	push   0x0
c000b342:	68 2f c9 00 c0       	push   0xc000c92f
c000b347:	56                   	push   esi
c000b348:	e8 3f 31 00 00       	call   c000e48c <Process::createThread(void (*)(void*), void*, int)>
c000b34d:	6a 7a                	push   0x7a
c000b34f:	6a 00                	push   0x0
c000b351:	68 d2 ee 00 c0       	push   0xc000eed2
c000b356:	ff 35 3c bc 03 c0    	push   DWORD PTR ds:0xc003bc3c
c000b35c:	e8 2b 31 00 00       	call   c000e48c <Process::createThread(void (*)(void*), void*, int)>
c000b361:	83 c4 20             	add    esp,0x20
c000b364:	a3 f0 bb 03 c0       	mov    ds:0xc003bbf0,eax
c000b369:	c6 05 ed b9 03 c0 01 	mov    BYTE PTR ds:0xc003b9ed,0x1
c000b370:	e8 55 73 00 00       	call   c00126ca <initVFS()>
c000b375:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b37b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b37d:	6a 00                	push   0x0
c000b37f:	6a 00                	push   0x0
c000b381:	6a 00                	push   0x0
c000b383:	50                   	push   eax
c000b384:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b387:	e8 e3 48 00 00       	call   c000fc6f <setupSystemCalls()>
c000b38c:	e8 37 7e 00 00       	call   c00131c8 <loadClockSettings()>
c000b391:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b394:	e8 2b 85 00 00       	call   c00138c4 <Device::loadDriversForAll()>
c000b399:	c7 04 24 72 88 03 c0 	mov    DWORD PTR [esp],0xc0038872
c000b3a0:	8b 1d e8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9e8
c000b3a6:	e8 f6 12 00 00       	call   c000c6a1 <loadDLL(char const*)>
c000b3ab:	5a                   	pop    edx
c000b3ac:	59                   	pop    ecx
c000b3ad:	53                   	push   ebx
c000b3ae:	50                   	push   eax
c000b3af:	e8 b6 13 00 00       	call   c000c76a <executeDLL(unsigned long, void*)>
c000b3b4:	c7 04 24 d4 9f 03 c0 	mov    DWORD PTR [esp],0xc0039fd4
c000b3bb:	e8 00 1b 00 00       	call   c000cec0 <kprintf(char const*, ...)>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	83 ec 0c             	sub    esp,0xc
c000b3c6:	6a 02                	push   0x2
c000b3c8:	e8 94 35 00 00       	call   c000e961 <blockTask(TaskState)>
c000b3cd:	83 c4 10             	add    esp,0x10
c000b3d0:	eb f1                	jmp    c000b3c3 <Computer::start()+0xcb>

c000b3d2 <firstTask()>:
c000b3d2:	83 ec 18             	sub    esp,0x18
c000b3d5:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c000b3db:	e8 18 ff ff ff       	call   c000b2f8 <Computer::start()>

c000b3e0 <Computer::detectFeatures()>:
c000b3e0:	55                   	push   ebp
c000b3e1:	57                   	push   edi
c000b3e2:	56                   	push   esi
c000b3e3:	53                   	push   ebx
c000b3e4:	83 ec 1c             	sub    esp,0x1c
c000b3e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b3eb:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b3f5:	e8 c5 4e ff ff       	call   c00002bf <detectCPUID>
c000b3fa:	85 c0                	test   eax,eax
c000b3fc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b402:	0f 95 c2             	setne  dl
c000b405:	83 e0 fd             	and    eax,0xfffffffd
c000b408:	d1 e2                	shl    edx,1
c000b40a:	09 d0                	or     eax,edx
c000b40c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b412:	a8 02                	test   al,0x2
c000b414:	75 46                	jne    c000b45c <Computer::detectFeatures()+0x7c>
c000b416:	f6 05 95 bb 03 c0 04 	test   BYTE PTR ds:0xc003bb95,0x4
c000b41d:	74 07                	je     c000b426 <Computer::detectFeatures()+0x46>
c000b41f:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b426:	e8 ab 2f 01 00       	call   c001e3d6 <x87Detect>
c000b42b:	83 e0 01             	and    eax,0x1
c000b42e:	c1 e0 04             	shl    eax,0x4
c000b431:	88 c2                	mov    dl,al
c000b433:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b439:	83 e0 ef             	and    eax,0xffffffef
c000b43c:	09 d0                	or     eax,edx
c000b43e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b444:	a8 10                	test   al,0x10
c000b446:	0f 85 10 01 00 00    	jne    c000b55c <Computer::detectFeatures()+0x17c>
c000b44c:	84 c0                	test   al,al
c000b44e:	0f 88 2b 01 00 00    	js     c000b57f <Computer::detectFeatures()+0x19f>
c000b454:	83 c4 1c             	add    esp,0x1c
c000b457:	5b                   	pop    ebx
c000b458:	5e                   	pop    esi
c000b459:	5f                   	pop    edi
c000b45a:	5d                   	pop    ebp
c000b45b:	c3                   	ret    
c000b45c:	83 ec 0c             	sub    esp,0xc
c000b45f:	6a 20                	push   0x20
c000b461:	e8 89 bc 00 00       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c000b466:	83 e0 01             	and    eax,0x1
c000b469:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b470:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b476:	83 e0 f7             	and    eax,0xfffffff7
c000b479:	09 d0                	or     eax,edx
c000b47b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b481:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b488:	e8 62 bc 00 00       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c000b48d:	83 e0 01             	and    eax,0x1
c000b490:	88 c2                	mov    dl,al
c000b492:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b498:	83 e0 fe             	and    eax,0xfffffffe
c000b49b:	09 d0                	or     eax,edx
c000b49d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4a3:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b4aa:	e8 40 bc 00 00       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c000b4af:	c1 e0 07             	shl    eax,0x7
c000b4b2:	88 c2                	mov    dl,al
c000b4b4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4ba:	83 e0 7f             	and    eax,0x7f
c000b4bd:	09 d0                	or     eax,edx
c000b4bf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4c5:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b4cc:	e8 1e bc 00 00       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c000b4d1:	83 c4 10             	add    esp,0x10
c000b4d4:	83 e0 01             	and    eax,0x1
c000b4d7:	c1 e0 05             	shl    eax,0x5
c000b4da:	88 c2                	mov    dl,al
c000b4dc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b4e2:	83 e0 df             	and    eax,0xffffffdf
c000b4e5:	09 d0                	or     eax,edx
c000b4e7:	f7 05 94 bb 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003bb94,0x401
c000b4f1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b4f7:	0f 84 a8 00 00 00    	je     c000b5a5 <Computer::detectFeatures()+0x1c5>
c000b4fd:	83 ec 0c             	sub    esp,0xc
c000b500:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b507:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b50b:	50                   	push   eax
c000b50c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b510:	55                   	push   ebp
c000b511:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b515:	57                   	push   edi
c000b516:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b51a:	56                   	push   esi
c000b51b:	68 00 00 00 80       	push   0x80000000
c000b520:	e8 47 bb 00 00       	call   c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b525:	83 c4 20             	add    esp,0x20
c000b528:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b52f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b533:	0f 86 dd fe ff ff    	jbe    c000b416 <Computer::detectFeatures()+0x36>
c000b539:	83 ec 0c             	sub    esp,0xc
c000b53c:	50                   	push   eax
c000b53d:	55                   	push   ebp
c000b53e:	57                   	push   edi
c000b53f:	56                   	push   esi
c000b540:	68 01 00 00 80       	push   0x80000001
c000b545:	e8 22 bb 00 00       	call   c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b54a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b554:	83 c4 20             	add    esp,0x20
c000b557:	e9 ba fe ff ff       	jmp    c000b416 <Computer::detectFeatures()+0x36>
c000b55c:	e8 2f 2e 01 00       	call   c001e390 <sseDetect>
c000b561:	88 c2                	mov    dl,al
c000b563:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b569:	c1 e2 07             	shl    edx,0x7
c000b56c:	83 e0 7f             	and    eax,0x7f
c000b56f:	09 d0                	or     eax,edx
c000b571:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b577:	84 c0                	test   al,al
c000b579:	0f 89 d5 fe ff ff    	jns    c000b454 <Computer::detectFeatures()+0x74>
c000b57f:	e8 fc 2d 01 00       	call   c001e380 <avxDetect>
c000b584:	83 e0 01             	and    eax,0x1
c000b587:	c1 e0 05             	shl    eax,0x5
c000b58a:	88 c2                	mov    dl,al
c000b58c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b592:	83 e0 df             	and    eax,0xffffffdf
c000b595:	09 d0                	or     eax,edx
c000b597:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b59d:	83 c4 1c             	add    esp,0x1c
c000b5a0:	5b                   	pop    ebx
c000b5a1:	5e                   	pop    esi
c000b5a2:	5f                   	pop    edi
c000b5a3:	5d                   	pop    ebp
c000b5a4:	c3                   	ret    
c000b5a5:	83 ec 0c             	sub    esp,0xc
c000b5a8:	68 00 02 00 00       	push   0x200
c000b5ad:	e8 3d bb 00 00       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c000b5b2:	83 c4 10             	add    esp,0x10
c000b5b5:	e9 43 ff ff ff       	jmp    c000b4fd <Computer::detectFeatures()+0x11d>

c000b5ba <Computer::displayFeatures()>:
c000b5ba:	c3                   	ret    
c000b5bb:	90                   	nop

c000b5bc <Computer::rdmsr(unsigned int)>:
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5c3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ca:	74 0a                	je     c000b5d6 <Computer::rdmsr(unsigned int)+0x1a>
c000b5cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5d0:	0f 32                	rdmsr  
c000b5d2:	83 c4 0c             	add    esp,0xc
c000b5d5:	c3                   	ret    
c000b5d6:	83 ec 0c             	sub    esp,0xc
c000b5d9:	68 8e 88 03 c0       	push   0xc003888e
c000b5de:	e8 fb 19 00 00       	call   c000cfde <panic(char const*)>
c000b5e3:	83 c4 10             	add    esp,0x10
c000b5e6:	eb e4                	jmp    c000b5cc <Computer::rdmsr(unsigned int)+0x10>

c000b5e8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5e8:	57                   	push   edi
c000b5e9:	56                   	push   esi
c000b5ea:	52                   	push   edx
c000b5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5f3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5f7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5fe:	74 0e                	je     c000b60e <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b600:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b604:	89 f0                	mov    eax,esi
c000b606:	89 fa                	mov    edx,edi
c000b608:	0f 30                	wrmsr  
c000b60a:	58                   	pop    eax
c000b60b:	5e                   	pop    esi
c000b60c:	5f                   	pop    edi
c000b60d:	c3                   	ret    
c000b60e:	83 ec 0c             	sub    esp,0xc
c000b611:	68 94 88 03 c0       	push   0xc0038894
c000b616:	e8 c3 19 00 00       	call   c000cfde <panic(char const*)>
c000b61b:	83 c4 10             	add    esp,0x10
c000b61e:	eb e0                	jmp    c000b600 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b620 <Computer::nmiEnabled()>:
c000b620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b624:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b62a:	c3                   	ret    
c000b62b:	90                   	nop

c000b62c <Computer::readCMOS(unsigned char)>:
c000b62c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b630:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b637:	19 c0                	sbb    eax,eax
c000b639:	83 e0 80             	and    eax,0xffffff80
c000b63c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b640:	e6 70                	out    0x70,al
c000b642:	e4 71                	in     al,0x71
c000b644:	c3                   	ret    
c000b645:	90                   	nop

c000b646 <Computer::enableNMI(bool)>:
c000b646:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b64a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b654:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b65c:	eb ce                	jmp    c000b62c <Computer::readCMOS(unsigned char)>

c000b65e <Computer::open(int, int, void*)>:
c000b65e:	56                   	push   esi
c000b65f:	53                   	push   ebx
c000b660:	83 ec 10             	sub    esp,0x10
c000b663:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b667:	f6 05 94 bb 03 c0 04 	test   BYTE PTR ds:0xc003bb94,0x4
c000b66e:	68 68 22 00 00       	push   0x2268
c000b673:	0f 94 05 20 ae 03 c0 	sete   BYTE PTR ds:0xc003ae20
c000b67a:	e8 f1 6d 00 00       	call   c0012470 <operator new(unsigned long)>
c000b67f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b682:	89 c6                	mov    esi,eax
c000b684:	e8 25 b1 00 00       	call   c00167ae <ACPI::ACPI()>
c000b689:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b68f:	58                   	pop    eax
c000b690:	5a                   	pop    edx
c000b691:	56                   	push   esi
c000b692:	53                   	push   ebx
c000b693:	e8 e2 80 00 00       	call   c001377a <Device::addChild(Device*)>
c000b698:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b69b:	e8 40 fd ff ff       	call   c000b3e0 <Computer::detectFeatures()>
c000b6a0:	59                   	pop    ecx
c000b6a1:	5e                   	pop    esi
c000b6a2:	6a 01                	push   0x1
c000b6a4:	53                   	push   ebx
c000b6a5:	e8 9c ff ff ff       	call   c000b646 <Computer::enableNMI(bool)>
c000b6aa:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6b1:	e8 ba 6d 00 00       	call   c0012470 <operator new(unsigned long)>
c000b6b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6b9:	89 c6                	mov    esi,eax
c000b6bb:	e8 fa ba 00 00       	call   c00171ba <CPU::CPU()>
c000b6c0:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6c6:	58                   	pop    eax
c000b6c7:	5a                   	pop    edx
c000b6c8:	56                   	push   esi
c000b6c9:	53                   	push   ebx
c000b6ca:	e8 ab 80 00 00       	call   c001377a <Device::addChild(Device*)>
c000b6cf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6db:	6a 00                	push   0x0
c000b6dd:	6a 00                	push   0x0
c000b6df:	50                   	push   eax
c000b6e0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6e3:	83 c4 20             	add    esp,0x20
c000b6e6:	e8 f7 85 00 00       	call   c0013ce2 <setupFPU()>
c000b6eb:	83 ec 08             	sub    esp,0x8
c000b6ee:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6f4:	50                   	push   eax
c000b6f5:	53                   	push   ebx
c000b6f6:	e8 7f 80 00 00       	call   c001377a <Device::addChild(Device*)>
c000b6fb:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b701:	8b 10                	mov    edx,DWORD PTR [eax]
c000b703:	6a 00                	push   0x0
c000b705:	6a 00                	push   0x0
c000b707:	6a 00                	push   0x0
c000b709:	50                   	push   eax
c000b70a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b70d:	83 c4 14             	add    esp,0x14
c000b710:	68 d2 b3 00 c0       	push   0xc000b3d2
c000b715:	e8 72 2e 00 00       	call   c000e58c <setupMultitasking(void (*)())>
c000b71a:	83 c4 14             	add    esp,0x14
c000b71d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b722:	5b                   	pop    ebx
c000b723:	5e                   	pop    esi
c000b724:	c3                   	ret    
c000b725:	90                   	nop

c000b726 <Computer::disableNMI()>:
c000b726:	6a 00                	push   0x0
c000b728:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b72c:	e8 15 ff ff ff       	call   c000b646 <Computer::enableNMI(bool)>
c000b731:	58                   	pop    eax
c000b732:	5a                   	pop    edx
c000b733:	c3                   	ret    

c000b734 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b738:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b73f:	19 c0                	sbb    eax,eax
c000b741:	83 e0 80             	and    eax,0xffffff80
c000b744:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b748:	e6 70                	out    0x70,al
c000b74a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b74e:	e6 71                	out    0x71,al
c000b750:	c3                   	ret    
c000b751:	90                   	nop

c000b752 <Computer::handleNMI()>:
c000b752:	56                   	push   esi
c000b753:	53                   	push   ebx
c000b754:	83 ec 10             	sub    esp,0x10
c000b757:	e4 92                	in     al,0x92
c000b759:	89 c6                	mov    esi,eax
c000b75b:	e4 61                	in     al,0x61
c000b75d:	68 9a 88 03 c0       	push   0xc003889a
c000b762:	88 c3                	mov    bl,al
c000b764:	e8 57 17 00 00       	call   c000cec0 <kprintf(char const*, ...)>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	83 e6 10             	and    esi,0x10
c000b76f:	75 0d                	jne    c000b77e <Computer::handleNMI()+0x2c>
c000b771:	f6 c3 40             	test   bl,0x40
c000b774:	75 1d                	jne    c000b793 <Computer::handleNMI()+0x41>
c000b776:	84 db                	test   bl,bl
c000b778:	78 2d                	js     c000b7a7 <Computer::handleNMI()+0x55>
c000b77a:	58                   	pop    eax
c000b77b:	5b                   	pop    ebx
c000b77c:	5e                   	pop    esi
c000b77d:	c3                   	ret    
c000b77e:	83 ec 0c             	sub    esp,0xc
c000b781:	68 ab 88 03 c0       	push   0xc00388ab
c000b786:	e8 53 18 00 00       	call   c000cfde <panic(char const*)>
c000b78b:	83 c4 10             	add    esp,0x10
c000b78e:	f6 c3 40             	test   bl,0x40
c000b791:	74 e3                	je     c000b776 <Computer::handleNMI()+0x24>
c000b793:	83 ec 0c             	sub    esp,0xc
c000b796:	68 b8 88 03 c0       	push   0xc00388b8
c000b79b:	e8 3e 18 00 00       	call   c000cfde <panic(char const*)>
c000b7a0:	83 c4 10             	add    esp,0x10
c000b7a3:	84 db                	test   bl,bl
c000b7a5:	79 d3                	jns    c000b77a <Computer::handleNMI()+0x28>
c000b7a7:	c7 44 24 10 c2 88 03 c0 	mov    DWORD PTR [esp+0x10],0xc00388c2
c000b7af:	5a                   	pop    edx
c000b7b0:	5b                   	pop    ebx
c000b7b1:	5e                   	pop    esi
c000b7b2:	e9 27 18 00 00       	jmp    c000cfde <panic(char const*)>
c000b7b7:	90                   	nop

c000b7b8 <Computer::setDiskActivityLight(int, bool)>:
c000b7b8:	56                   	push   esi
c000b7b9:	53                   	push   ebx
c000b7ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7be:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7c3:	77 1b                	ja     c000b7e0 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7c5:	e4 92                	in     al,0x92
c000b7c7:	bb 40 00 00 00       	mov    ebx,0x40
c000b7cc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7d0:	89 da                	mov    edx,ebx
c000b7d2:	d3 e2                	shl    edx,cl
c000b7d4:	89 f1                	mov    ecx,esi
c000b7d6:	f7 d2                	not    edx
c000b7d8:	d3 e3                	shl    ebx,cl
c000b7da:	21 d0                	and    eax,edx
c000b7dc:	09 d8                	or     eax,ebx
c000b7de:	e6 92                	out    0x92,al
c000b7e0:	5b                   	pop    ebx
c000b7e1:	5e                   	pop    esi
c000b7e2:	c3                   	ret    

c000b7e3 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b7e3:	55                   	push   ebp
c000b7e4:	89 e5                	mov    ebp,esp
c000b7e6:	57                   	push   edi
c000b7e7:	56                   	push   esi
c000b7e8:	53                   	push   ebx
c000b7e9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b7ef:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b7f2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b7f5:	85 c0                	test   eax,eax
c000b7f7:	0f 95 c1             	setne  cl
c000b7fa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b7fe:	0f 94 c2             	sete   dl
c000b801:	84 d1                	test   cl,dl
c000b803:	74 26                	je     c000b82b <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b805:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b80c:	74 1d                	je     c000b82b <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b80e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b811:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b817:	89 d6                	mov    esi,edx
c000b819:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b81f:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b825:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b828:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b82b:	83 ec 0c             	sub    esp,0xc
c000b82e:	05 ff 0f 00 00       	add    eax,0xfff
c000b833:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b836:	6a 01                	push   0x1
c000b838:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b83e:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b844:	e8 96 5a 00 00       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c000b849:	83 c4 10             	add    esp,0x10
c000b84c:	89 c6                	mov    esi,eax
c000b84e:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b854:	0f 86 21 01 00 00    	jbe    c000b97b <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b85a:	c1 eb 0c             	shr    ebx,0xc
c000b85d:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b867:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b86d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b870:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b873:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b879:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b87c:	29 d8                	sub    eax,ebx
c000b87e:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b884:	0f 83 f4 00 00 00    	jae    c000b97e <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b88a:	83 ec 0c             	sub    esp,0xc
c000b88d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b893:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b896:	3d 00 10 00 00       	cmp    eax,0x1000
c000b89b:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b89d:	52                   	push   edx
c000b89e:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b8a4:	52                   	push   edx
c000b8a5:	76 05                	jbe    c000b8ac <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b8a7:	b8 00 10 00 00       	mov    eax,0x1000
c000b8ac:	31 d2                	xor    edx,edx
c000b8ae:	52                   	push   edx
c000b8af:	50                   	push   eax
c000b8b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b8b3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b8b6:	83 c4 20             	add    esp,0x20
c000b8b9:	85 c0                	test   eax,eax
c000b8bb:	74 1f                	je     c000b8dc <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b8bd:	51                   	push   ecx
c000b8be:	51                   	push   ecx
c000b8bf:	50                   	push   eax
c000b8c0:	68 fc 88 03 c0       	push   0xc00388fc
c000b8c5:	e8 f6 15 00 00       	call   c000cec0 <kprintf(char const*, ...)>
c000b8ca:	89 34 24             	mov    DWORD PTR [esp],esi
c000b8cd:	e8 43 5d 00 00       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c000b8d2:	83 c4 10             	add    esp,0x10
c000b8d5:	31 c0                	xor    eax,eax
c000b8d7:	e9 7c 01 00 00       	jmp    c000ba58 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b8dc:	e8 81 2a 00 00       	call   c000e362 <lockScheduler()>
c000b8e1:	e8 7f 21 00 00       	call   c000da65 <Phys::allocatePage()>
c000b8e6:	6a 07                	push   0x7
c000b8e8:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b8ee:	56                   	push   esi
c000b8ef:	50                   	push   eax
c000b8f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b8f6:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b8f9:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b8ff:	e8 12 60 00 00       	call   c0011916 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b904:	83 c4 0c             	add    esp,0xc
c000b907:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b90d:	6a 00                	push   0x0
c000b90f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b915:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b918:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b91e:	e8 51 5e 00 00       	call   c0011774 <VAS::mapOtherVASIn(bool, VAS*)>
c000b923:	58                   	pop    eax
c000b924:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b92a:	5a                   	pop    edx
c000b92b:	68 07 04 00 00       	push   0x407
c000b930:	53                   	push   ebx
c000b931:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b937:	50                   	push   eax
c000b938:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b93e:	6a 00                	push   0x0
c000b940:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b945:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b948:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b94e:	e8 c3 66 00 00       	call   c0012016 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b953:	83 c4 1c             	add    esp,0x1c
c000b956:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b95c:	68 00 10 00 00       	push   0x1000
c000b961:	50                   	push   eax
c000b962:	56                   	push   esi
c000b963:	e8 cc 4c ff ff       	call   c0000634 <memcpy>
c000b968:	e8 f7 29 00 00       	call   c000e364 <unlockScheduler()>
c000b96d:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b973:	83 c4 10             	add    esp,0x10
c000b976:	e9 f5 fe ff ff       	jmp    c000b870 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b97b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b97e:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b988:	0f 86 bc 00 00 00    	jbe    c000ba4a <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b98e:	e8 cf 29 00 00       	call   c000e362 <lockScheduler()>
c000b993:	51                   	push   ecx
c000b994:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b99a:	6a 00                	push   0x0
c000b99c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b9a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b9a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b9aa:	e8 c5 5d 00 00       	call   c0011774 <VAS::mapOtherVASIn(bool, VAS*)>
c000b9af:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b9b5:	83 c4 10             	add    esp,0x10
c000b9b8:	c1 e8 0c             	shr    eax,0xc
c000b9bb:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b9c5:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b9cb:	e8 95 20 00 00       	call   c000da65 <Phys::allocatePage()>
c000b9d0:	6a 07                	push   0x7
c000b9d2:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000b9d8:	56                   	push   esi
c000b9d9:	50                   	push   eax
c000b9da:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000b9e0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000b9e3:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000b9e9:	e8 28 5f 00 00       	call   c0011916 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b9ee:	58                   	pop    eax
c000b9ef:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000b9f5:	5a                   	pop    edx
c000b9f6:	68 07 04 00 00       	push   0x407
c000b9fb:	53                   	push   ebx
c000b9fc:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ba02:	50                   	push   eax
c000ba03:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000ba09:	6a 00                	push   0x0
c000ba0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ba10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ba13:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ba19:	e8 f8 65 00 00       	call   c0012016 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000ba1e:	83 c4 1c             	add    esp,0x1c
c000ba21:	68 00 10 00 00       	push   0x1000
c000ba26:	6a 00                	push   0x0
c000ba28:	56                   	push   esi
c000ba29:	e8 7d 4c ff ff       	call   c00006ab <memset>
c000ba2e:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000ba34:	83 c4 10             	add    esp,0x10
c000ba37:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000ba3d:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000ba43:	77 86                	ja     c000b9cb <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000ba45:	e8 1a 29 00 00       	call   c000e364 <unlockScheduler()>
c000ba4a:	83 ec 0c             	sub    esp,0xc
c000ba4d:	56                   	push   esi
c000ba4e:	e8 c2 5b 00 00       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c000ba53:	83 c4 10             	add    esp,0x10
c000ba56:	b0 01                	mov    al,0x1
c000ba58:	8d 65 f4             	lea    esp,[ebp-0xc]
c000ba5b:	5b                   	pop    ebx
c000ba5c:	5e                   	pop    esi
c000ba5d:	5f                   	pop    edi
c000ba5e:	5d                   	pop    ebp
c000ba5f:	c3                   	ret    

c000ba60 <loadProgramIntoMemory(Process*, char const*)>:
c000ba60:	55                   	push   ebp
c000ba61:	57                   	push   edi
c000ba62:	56                   	push   esi
c000ba63:	53                   	push   ebx
c000ba64:	83 ec 48             	sub    esp,0x48
c000ba67:	68 14 01 00 00       	push   0x114
c000ba6c:	e8 ff 69 00 00       	call   c0012470 <operator new(unsigned long)>
c000ba71:	83 c4 0c             	add    esp,0xc
c000ba74:	89 c6                	mov    esi,eax
c000ba76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ba7a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ba7e:	50                   	push   eax
c000ba7f:	e8 1a 6e 00 00       	call   c001289e <File::File(char const*, Process*)>
c000ba84:	58                   	pop    eax
c000ba85:	5a                   	pop    edx
c000ba86:	6a 01                	push   0x1
c000ba88:	56                   	push   esi
c000ba89:	e8 74 6e 00 00       	call   c0012902 <File::open(FileOpenMode)>
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	85 c0                	test   eax,eax
c000ba93:	0f 85 47 01 00 00    	jne    c000bbe0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000ba99:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000baa1:	83 ec 0c             	sub    esp,0xc
c000baa4:	6a 34                	push   0x34
c000baa6:	e8 10 1a 00 00       	call   c000d4bb <malloc>
c000baab:	89 c3                	mov    ebx,eax
c000baad:	58                   	pop    eax
c000baae:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000bab4:	57                   	push   edi
c000bab5:	53                   	push   ebx
c000bab6:	6a 00                	push   0x0
c000bab8:	6a 34                	push   0x34
c000baba:	56                   	push   esi
c000babb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000babe:	83 c4 20             	add    esp,0x20
c000bac1:	85 c0                	test   eax,eax
c000bac3:	0f 85 17 01 00 00    	jne    c000bbe0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bac9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000bacf:	0f 85 0b 01 00 00    	jne    c000bbe0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bad5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000bad8:	85 c0                	test   eax,eax
c000bada:	0f 84 00 01 00 00    	je     c000bbe0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bae0:	31 d2                	xor    edx,edx
c000bae2:	55                   	push   ebp
c000bae3:	52                   	push   edx
c000bae4:	50                   	push   eax
c000bae5:	56                   	push   esi
c000bae6:	e8 d5 6e 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000baeb:	83 c4 10             	add    esp,0x10
c000baee:	85 c0                	test   eax,eax
c000baf0:	0f 85 ea 00 00 00    	jne    c000bbe0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000baf6:	83 ec 0c             	sub    esp,0xc
c000baf9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000bafc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb04:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb08:	0f af c2             	imul   eax,edx
c000bb0b:	50                   	push   eax
c000bb0c:	e8 aa 19 00 00       	call   c000d4bb <malloc>
c000bb11:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb18:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb1e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb22:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb26:	0f af c2             	imul   eax,edx
c000bb29:	99                   	cdq    
c000bb2a:	52                   	push   edx
c000bb2b:	50                   	push   eax
c000bb2c:	56                   	push   esi
c000bb2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bb30:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000bb33:	83 c4 20             	add    esp,0x20
c000bb36:	85 c0                	test   eax,eax
c000bb38:	0f 84 a2 00 00 00    	je     c000bbe0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb3e:	31 d2                	xor    edx,edx
c000bb40:	51                   	push   ecx
c000bb41:	52                   	push   edx
c000bb42:	50                   	push   eax
c000bb43:	56                   	push   esi
c000bb44:	e8 77 6e 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000bb49:	83 c4 10             	add    esp,0x10
c000bb4c:	85 c0                	test   eax,eax
c000bb4e:	0f 85 8c 00 00 00    	jne    c000bbe0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb54:	83 ec 0c             	sub    esp,0xc
c000bb57:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bb5b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bb5f:	31 ed                	xor    ebp,ebp
c000bb61:	0f af c2             	imul   eax,edx
c000bb64:	50                   	push   eax
c000bb65:	e8 51 19 00 00       	call   c000d4bb <malloc>
c000bb6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb71:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb77:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bb7b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bb7f:	0f af c2             	imul   eax,edx
c000bb82:	99                   	cdq    
c000bb83:	52                   	push   edx
c000bb84:	50                   	push   eax
c000bb85:	56                   	push   esi
c000bb86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bb89:	83 c4 20             	add    esp,0x20
c000bb8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bb94:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000bb98:	0f 86 80 00 00 00    	jbe    c000bc1e <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000bb9e:	0f b7 fd             	movzx  edi,bp
c000bba1:	c1 e7 05             	shl    edi,0x5
c000bba4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000bba8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000bbab:	75 6b                	jne    c000bc18 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bbad:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bbb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbb4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	52                   	push   edx
c000bbbc:	31 d2                	xor    edx,edx
c000bbbe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bbc1:	52                   	push   edx
c000bbc2:	50                   	push   eax
c000bbc3:	56                   	push   esi
c000bbc4:	e8 f7 6d 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	85 c0                	test   eax,eax
c000bbce:	74 17                	je     c000bbe7 <loadProgramIntoMemory(Process*, char const*)+0x187>
c000bbd0:	83 ec 0c             	sub    esp,0xc
c000bbd3:	68 27 89 03 c0       	push   0xc0038927
c000bbd8:	e8 e3 12 00 00       	call   c000cec0 <kprintf(char const*, ...)>
c000bbdd:	83 c4 10             	add    esp,0x10
c000bbe0:	31 c0                	xor    eax,eax
c000bbe2:	e9 87 00 00 00       	jmp    c000bc6e <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000bbe7:	83 ec 0c             	sub    esp,0xc
c000bbea:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000bbed:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000bbf0:	50                   	push   eax
c000bbf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbf9:	56                   	push   esi
c000bbfa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000bbfe:	e8 e0 fb ff ff       	call   c000b7e3 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000bc03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bc07:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000bc0b:	83 c4 20             	add    esp,0x20
c000bc0e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000bc12:	73 04                	jae    c000bc18 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bc14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc18:	45                   	inc    ebp
c000bc19:	e9 76 ff ff ff       	jmp    c000bb94 <loadProgramIntoMemory(Process*, char const*)+0x134>
c000bc1e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000bc22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bc26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc2a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000bc30:	83 ec 0c             	sub    esp,0xc
c000bc33:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000bc39:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc3e:	05 00 10 00 00       	add    eax,0x1000
c000bc43:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000bc46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc4a:	e8 7c 18 00 00       	call   c000d4cb <free>
c000bc4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc52:	e8 74 18 00 00       	call   c000d4cb <free>
c000bc57:	58                   	pop    eax
c000bc58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc5c:	e8 6a 18 00 00       	call   c000d4cb <free>
c000bc61:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc64:	e8 f7 6c 00 00       	call   c0012960 <File::close()>
c000bc69:	83 c4 10             	add    esp,0x10
c000bc6c:	b0 01                	mov    al,0x1
c000bc6e:	83 c4 3c             	add    esp,0x3c
c000bc71:	5b                   	pop    ebx
c000bc72:	5e                   	pop    esi
c000bc73:	5f                   	pop    edi
c000bc74:	5d                   	pop    ebp
c000bc75:	c3                   	ret    

c000bc76 <runtimeReferenceHelper()>:
c000bc76:	83 ec 18             	sub    esp,0x18
c000bc79:	68 2f 89 03 c0       	push   0xc003892f
c000bc7e:	e8 3d 12 00 00       	call   c000cec0 <kprintf(char const*, ...)>
c000bc83:	fa                   	cli    
c000bc84:	83 c4 10             	add    esp,0x10
c000bc87:	eb fe                	jmp    c000bc87 <runtimeReferenceHelper()+0x11>

c000bc89 <getAddressOfKernelSymbol(char const*)>:
c000bc89:	57                   	push   edi
c000bc8a:	56                   	push   esi
c000bc8b:	53                   	push   ebx
c000bc8c:	31 db                	xor    ebx,ebx
c000bc8e:	39 1d 80 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb80,ebx
c000bc94:	7e 3c                	jle    c000bcd2 <getAddressOfKernelSymbol(char const*)+0x49>
c000bc96:	8b 34 9d 00 bb 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc4500]
c000bc9d:	31 ff                	xor    edi,edi
c000bc9f:	39 3c 9d 00 ba 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc4600],edi
c000bca6:	7e 27                	jle    c000bccf <getAddressOfKernelSymbol(char const*)+0x46>
c000bca8:	50                   	push   eax
c000bca9:	50                   	push   eax
c000bcaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcae:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb0:	03 04 9d 80 ba 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc4580]
c000bcb7:	50                   	push   eax
c000bcb8:	e8 90 4b ff ff       	call   c000084d <strcmp>
c000bcbd:	83 c4 10             	add    esp,0x10
c000bcc0:	85 c0                	test   eax,eax
c000bcc2:	75 05                	jne    c000bcc9 <getAddressOfKernelSymbol(char const*)+0x40>
c000bcc4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000bcc7:	eb 0b                	jmp    c000bcd4 <getAddressOfKernelSymbol(char const*)+0x4b>
c000bcc9:	83 c6 10             	add    esi,0x10
c000bccc:	47                   	inc    edi
c000bccd:	eb d0                	jmp    c000bc9f <getAddressOfKernelSymbol(char const*)+0x16>
c000bccf:	43                   	inc    ebx
c000bcd0:	eb bc                	jmp    c000bc8e <getAddressOfKernelSymbol(char const*)+0x5>
c000bcd2:	31 c0                	xor    eax,eax
c000bcd4:	5b                   	pop    ebx
c000bcd5:	5e                   	pop    esi
c000bcd6:	5f                   	pop    edi
c000bcd7:	c3                   	ret    

c000bcd8 <loadKernelSymbolTable(char const*)>:
c000bcd8:	55                   	push   ebp
c000bcd9:	57                   	push   edi
c000bcda:	56                   	push   esi
c000bcdb:	53                   	push   ebx
c000bcdc:	83 ec 68             	sub    esp,0x68
c000bcdf:	8b 35 3c bc 03 c0    	mov    esi,DWORD PTR ds:0xc003bc3c
c000bce5:	68 14 01 00 00       	push   0x114
c000bcea:	e8 81 67 00 00       	call   c0012470 <operator new(unsigned long)>
c000bcef:	83 c4 0c             	add    esp,0xc
c000bcf2:	89 c3                	mov    ebx,eax
c000bcf4:	56                   	push   esi
c000bcf5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000bcf9:	50                   	push   eax
c000bcfa:	e8 9f 6b 00 00       	call   c001289e <File::File(char const*, Process*)>
c000bcff:	5e                   	pop    esi
c000bd00:	5f                   	pop    edi
c000bd01:	6a 01                	push   0x1
c000bd03:	53                   	push   ebx
c000bd04:	e8 f9 6b 00 00       	call   c0012902 <File::open(FileOpenMode)>
c000bd09:	83 c4 10             	add    esp,0x10
c000bd0c:	31 d2                	xor    edx,edx
c000bd0e:	85 c0                	test   eax,eax
c000bd10:	0f 85 79 02 00 00    	jne    c000bf8f <loadKernelSymbolTable(char const*)+0x2b7>
c000bd16:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000bd1e:	83 ec 0c             	sub    esp,0xc
c000bd21:	6a 34                	push   0x34
c000bd23:	e8 93 17 00 00       	call   c000d4bb <malloc>
c000bd28:	59                   	pop    ecx
c000bd29:	89 c7                	mov    edi,eax
c000bd2b:	8d 74 24 34          	lea    esi,[esp+0x34]
c000bd2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd31:	56                   	push   esi
c000bd32:	57                   	push   edi
c000bd33:	6a 00                	push   0x0
c000bd35:	6a 34                	push   0x34
c000bd37:	53                   	push   ebx
c000bd38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bd3b:	83 c4 20             	add    esp,0x20
c000bd3e:	85 c0                	test   eax,eax
c000bd40:	74 17                	je     c000bd59 <loadKernelSymbolTable(char const*)+0x81>
c000bd42:	83 ec 0c             	sub    esp,0xc
c000bd45:	68 51 89 03 c0       	push   0xc0038951
c000bd4a:	e8 8f 12 00 00       	call   c000cfde <panic(char const*)>
c000bd4f:	83 c4 10             	add    esp,0x10
c000bd52:	31 d2                	xor    edx,edx
c000bd54:	e9 36 02 00 00       	jmp    c000bf8f <loadKernelSymbolTable(char const*)+0x2b7>
c000bd59:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bd5f:	75 e1                	jne    c000bd42 <loadKernelSymbolTable(char const*)+0x6a>
c000bd61:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bd64:	85 c0                	test   eax,eax
c000bd66:	74 da                	je     c000bd42 <loadKernelSymbolTable(char const*)+0x6a>
c000bd68:	52                   	push   edx
c000bd69:	31 d2                	xor    edx,edx
c000bd6b:	52                   	push   edx
c000bd6c:	50                   	push   eax
c000bd6d:	53                   	push   ebx
c000bd6e:	e8 4d 6c 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000bd73:	83 c4 10             	add    esp,0x10
c000bd76:	85 c0                	test   eax,eax
c000bd78:	75 c8                	jne    c000bd42 <loadKernelSymbolTable(char const*)+0x6a>
c000bd7a:	83 ec 0c             	sub    esp,0xc
c000bd7d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bd81:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bd85:	31 ed                	xor    ebp,ebp
c000bd87:	0f af c2             	imul   eax,edx
c000bd8a:	50                   	push   eax
c000bd8b:	e8 2b 17 00 00       	call   c000d4bb <malloc>
c000bd90:	89 34 24             	mov    DWORD PTR [esp],esi
c000bd93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd97:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000bd99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bd9d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bda1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bda5:	0f af c2             	imul   eax,edx
c000bda8:	99                   	cdq    
c000bda9:	52                   	push   edx
c000bdaa:	50                   	push   eax
c000bdab:	53                   	push   ebx
c000bdac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bdaf:	83 c4 20             	add    esp,0x20
c000bdb2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bdba:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bdc2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bdca:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bdd2:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000bdd6:	0f 86 aa 00 00 00    	jbe    c000be86 <loadKernelSymbolTable(char const*)+0x1ae>
c000bddc:	0f b7 f5             	movzx  esi,bp
c000bddf:	6b f6 28             	imul   esi,esi,0x28
c000bde2:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000bde6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000bde9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bded:	50                   	push   eax
c000bdee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bdf2:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000bdf6:	8b 16                	mov    edx,DWORD PTR [esi]
c000bdf8:	6b c0 28             	imul   eax,eax,0x28
c000bdfb:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000bdff:	89 d0                	mov    eax,edx
c000be01:	31 d2                	xor    edx,edx
c000be03:	52                   	push   edx
c000be04:	50                   	push   eax
c000be05:	53                   	push   ebx
c000be06:	e8 b5 6b 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000be0b:	83 c4 0c             	add    esp,0xc
c000be0e:	6a 20                	push   0x20
c000be10:	6a 00                	push   0x0
c000be12:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be16:	52                   	push   edx
c000be17:	e8 8f 48 ff ff       	call   c00006ab <memset>
c000be1c:	58                   	pop    eax
c000be1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be1f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000be23:	51                   	push   ecx
c000be24:	8d 54 24 40          	lea    edx,[esp+0x40]
c000be28:	52                   	push   edx
c000be29:	6a 00                	push   0x0
c000be2b:	6a 1f                	push   0x1f
c000be2d:	53                   	push   ebx
c000be2e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be31:	83 c4 18             	add    esp,0x18
c000be34:	68 68 89 03 c0       	push   0xc0038968
c000be39:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be3d:	52                   	push   edx
c000be3e:	e8 0a 4a ff ff       	call   c000084d <strcmp>
c000be43:	83 c4 10             	add    esp,0x10
c000be46:	85 c0                	test   eax,eax
c000be48:	75 0f                	jne    c000be59 <loadKernelSymbolTable(char const*)+0x181>
c000be4a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be59:	50                   	push   eax
c000be5a:	50                   	push   eax
c000be5b:	68 70 89 03 c0       	push   0xc0038970
c000be60:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000be64:	50                   	push   eax
c000be65:	e8 e3 49 ff ff       	call   c000084d <strcmp>
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	85 c0                	test   eax,eax
c000be6f:	75 0f                	jne    c000be80 <loadKernelSymbolTable(char const*)+0x1a8>
c000be71:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000be80:	45                   	inc    ebp
c000be81:	e9 4c ff ff ff       	jmp    c000bdd2 <loadKernelSymbolTable(char const*)+0xfa>
c000be86:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000be8b:	75 10                	jne    c000be9d <loadKernelSymbolTable(char const*)+0x1c5>
c000be8d:	83 ec 0c             	sub    esp,0xc
c000be90:	68 78 89 03 c0       	push   0xc0038978
c000be95:	e8 44 11 00 00       	call   c000cfde <panic(char const*)>
c000be9a:	83 c4 10             	add    esp,0x10
c000be9d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bea2:	75 10                	jne    c000beb4 <loadKernelSymbolTable(char const*)+0x1dc>
c000bea4:	83 ec 0c             	sub    esp,0xc
c000bea7:	68 78 89 03 c0       	push   0xc0038978
c000beac:	e8 2d 11 00 00       	call   c000cfde <panic(char const*)>
c000beb1:	83 c4 10             	add    esp,0x10
c000beb4:	31 d2                	xor    edx,edx
c000beb6:	50                   	push   eax
c000beb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	53                   	push   ebx
c000bebe:	e8 fd 6a 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000bec3:	5a                   	pop    edx
c000bec4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bec8:	e8 ee 15 00 00       	call   c000d4bb <malloc>
c000becd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bed5:	89 c1                	mov    ecx,eax
c000bed7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bedb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bedf:	5e                   	pop    esi
c000bee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bee2:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000bee6:	55                   	push   ebp
c000bee7:	51                   	push   ecx
c000bee8:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000beec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bef0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bef4:	53                   	push   ebx
c000bef5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bef8:	83 c4 14             	add    esp,0x14
c000befb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beff:	e8 b7 15 00 00       	call   c000d4bb <malloc>
c000bf04:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf07:	89 c6                	mov    esi,eax
c000bf09:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf0b:	56                   	push   esi
c000bf0c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf14:	53                   	push   ebx
c000bf15:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bf1c:	8b 15 80 bb 03 c0    	mov    edx,DWORD PTR ds:0xc003bb80
c000bf22:	83 c4 1c             	add    esp,0x1c
c000bf25:	c1 e8 04             	shr    eax,0x4
c000bf28:	89 04 95 00 ba 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4600],eax
c000bf2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf33:	31 d2                	xor    edx,edx
c000bf35:	52                   	push   edx
c000bf36:	50                   	push   eax
c000bf37:	53                   	push   ebx
c000bf38:	e8 83 6a 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000bf3d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf40:	31 d2                	xor    edx,edx
c000bf42:	56                   	push   esi
c000bf43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf47:	52                   	push   edx
c000bf48:	50                   	push   eax
c000bf49:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf4b:	53                   	push   ebx
c000bf4c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf4f:	83 c4 14             	add    esp,0x14
c000bf52:	53                   	push   ebx
c000bf53:	e8 08 6a 00 00       	call   c0012960 <File::close()>
c000bf58:	5d                   	pop    ebp
c000bf59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5d:	e8 69 15 00 00       	call   c000d4cb <free>
c000bf62:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bf65:	e8 61 15 00 00       	call   c000d4cb <free>
c000bf6a:	a1 80 bb 03 c0       	mov    eax,ds:0xc003bb80
c000bf6f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bf73:	8d 50 01             	lea    edx,[eax+0x1]
c000bf76:	89 0c 85 00 bb 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4500],ecx
c000bf7d:	89 15 80 bb 03 c0    	mov    DWORD PTR ds:0xc003bb80,edx
c000bf83:	89 34 85 80 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4580],esi
c000bf8a:	83 c4 10             	add    esp,0x10
c000bf8d:	b2 01                	mov    dl,0x1
c000bf8f:	83 c4 5c             	add    esp,0x5c
c000bf92:	88 d0                	mov    al,dl
c000bf94:	5b                   	pop    ebx
c000bf95:	5e                   	pop    esi
c000bf96:	5f                   	pop    edi
c000bf97:	5d                   	pop    ebp
c000bf98:	c3                   	ret    

c000bf99 <loadDriverIntoMemory(char const*, unsigned long)>:
c000bf99:	55                   	push   ebp
c000bf9a:	57                   	push   edi
c000bf9b:	56                   	push   esi
c000bf9c:	53                   	push   ebx
c000bf9d:	81 ec 68 03 00 00    	sub    esp,0x368
c000bfa3:	8b 1d 3c bc 03 c0    	mov    ebx,DWORD PTR ds:0xc003bc3c
c000bfa9:	68 14 01 00 00       	push   0x114
c000bfae:	e8 bd 64 00 00       	call   c0012470 <operator new(unsigned long)>
c000bfb3:	83 c4 0c             	add    esp,0xc
c000bfb6:	89 c5                	mov    ebp,eax
c000bfb8:	53                   	push   ebx
c000bfb9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c000bfc0:	50                   	push   eax
c000bfc1:	e8 d8 68 00 00       	call   c001289e <File::File(char const*, Process*)>
c000bfc6:	58                   	pop    eax
c000bfc7:	5a                   	pop    edx
c000bfc8:	6a 01                	push   0x1
c000bfca:	55                   	push   ebp
c000bfcb:	e8 32 69 00 00       	call   c0012902 <File::open(FileOpenMode)>
c000bfd0:	83 c4 10             	add    esp,0x10
c000bfd3:	85 c0                	test   eax,eax
c000bfd5:	0f 85 2e 01 00 00    	jne    c000c109 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bfdb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000bfe3:	83 ec 0c             	sub    esp,0xc
c000bfe6:	6a 34                	push   0x34
c000bfe8:	e8 ce 14 00 00       	call   c000d4bb <malloc>
c000bfed:	89 c7                	mov    edi,eax
c000bfef:	58                   	pop    eax
c000bff0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bff3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000bff7:	53                   	push   ebx
c000bff8:	57                   	push   edi
c000bff9:	6a 00                	push   0x0
c000bffb:	6a 34                	push   0x34
c000bffd:	55                   	push   ebp
c000bffe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c001:	83 c4 20             	add    esp,0x20
c000c004:	85 c0                	test   eax,eax
c000c006:	0f 85 fd 00 00 00    	jne    c000c109 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000c00c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000c012:	0f 85 f1 00 00 00    	jne    c000c109 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000c018:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000c01b:	85 c0                	test   eax,eax
c000c01d:	0f 84 e6 00 00 00    	je     c000c109 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000c023:	31 d2                	xor    edx,edx
c000c025:	56                   	push   esi
c000c026:	52                   	push   edx
c000c027:	50                   	push   eax
c000c028:	55                   	push   ebp
c000c029:	e8 92 69 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000c02e:	83 c4 10             	add    esp,0x10
c000c031:	85 c0                	test   eax,eax
c000c033:	0f 85 d0 00 00 00    	jne    c000c109 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000c039:	83 ec 0c             	sub    esp,0xc
c000c03c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c000c03f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000c043:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c047:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c04b:	0f af c2             	imul   eax,edx
c000c04e:	50                   	push   eax
c000c04f:	e8 67 14 00 00       	call   c000d4bb <malloc>
c000c054:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c057:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c05b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c05e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c062:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000c066:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c06a:	0f af c2             	imul   eax,edx
c000c06d:	99                   	cdq    
c000c06e:	52                   	push   edx
c000c06f:	50                   	push   eax
c000c070:	55                   	push   ebp
c000c071:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c074:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000c077:	83 c4 20             	add    esp,0x20
c000c07a:	85 c0                	test   eax,eax
c000c07c:	0f 84 87 00 00 00    	je     c000c109 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000c082:	31 d2                	xor    edx,edx
c000c084:	51                   	push   ecx
c000c085:	52                   	push   edx
c000c086:	50                   	push   eax
c000c087:	55                   	push   ebp
c000c088:	e8 33 69 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000c08d:	83 c4 10             	add    esp,0x10
c000c090:	85 c0                	test   eax,eax
c000c092:	75 75                	jne    c000c109 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000c094:	83 ec 0c             	sub    esp,0xc
c000c097:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000c09b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000c09f:	31 f6                	xor    esi,esi
c000c0a1:	0f af c2             	imul   eax,edx
c000c0a4:	50                   	push   eax
c000c0a5:	e8 11 14 00 00       	call   c000d4bb <malloc>
c000c0aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c0ad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c0b1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c0b4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c0b8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000c0bc:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000c0c0:	0f af c2             	imul   eax,edx
c000c0c3:	99                   	cdq    
c000c0c4:	52                   	push   edx
c000c0c5:	50                   	push   eax
c000c0c6:	55                   	push   ebp
c000c0c7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c0ca:	83 c4 20             	add    esp,0x20
c000c0cd:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c000c0d1:	0f 86 8d 00 00 00    	jbe    c000c164 <loadDriverIntoMemory(char const*, unsigned long)+0x1cb>
c000c0d7:	0f b7 de             	movzx  ebx,si
c000c0da:	c1 e3 05             	shl    ebx,0x5
c000c0dd:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
c000c0e1:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000c0e4:	75 78                	jne    c000c15e <loadDriverIntoMemory(char const*, unsigned long)+0x1c5>
c000c0e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c0e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c0f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c0f4:	52                   	push   edx
c000c0f5:	31 d2                	xor    edx,edx
c000c0f7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c0fa:	52                   	push   edx
c000c0fb:	50                   	push   eax
c000c0fc:	55                   	push   ebp
c000c0fd:	e8 be 68 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000c102:	83 c4 10             	add    esp,0x10
c000c105:	85 c0                	test   eax,eax
c000c107:	74 07                	je     c000c110 <loadDriverIntoMemory(char const*, unsigned long)+0x177>
c000c109:	31 c0                	xor    eax,eax
c000c10b:	e9 86 05 00 00       	jmp    c000c696 <loadDriverIntoMemory(char const*, unsigned long)+0x6fd>
c000c110:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c000c117:	31 d2                	xor    edx,edx
c000c119:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000c11d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c120:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c124:	83 ec 0c             	sub    esp,0xc
c000c127:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c12b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c132:	50                   	push   eax
c000c133:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c13b:	52                   	push   edx
c000c13c:	50                   	push   eax
c000c13d:	55                   	push   ebp
c000c13e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c141:	83 c4 1c             	add    esp,0x1c
c000c144:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c147:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000c14a:	50                   	push   eax
c000c14b:	6a 00                	push   0x0
c000c14d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c151:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000c155:	50                   	push   eax
c000c156:	e8 50 45 ff ff       	call   c00006ab <memset>
c000c15b:	83 c4 10             	add    esp,0x10
c000c15e:	46                   	inc    esi
c000c15f:	e9 69 ff ff ff       	jmp    c000c0cd <loadDriverIntoMemory(char const*, unsigned long)+0x134>
c000c164:	31 db                	xor    ebx,ebx
c000c166:	50                   	push   eax
c000c167:	68 00 01 00 00       	push   0x100
c000c16c:	6a 00                	push   0x0
c000c16e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c172:	50                   	push   eax
c000c173:	e8 33 45 ff ff       	call   c00006ab <memset>
c000c178:	83 c4 0c             	add    esp,0xc
c000c17b:	68 00 01 00 00       	push   0x100
c000c180:	6a 00                	push   0x0
c000c182:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000c189:	50                   	push   eax
c000c18a:	e8 1c 45 ff ff       	call   c00006ab <memset>
c000c18f:	83 c4 10             	add    esp,0x10
c000c192:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c19a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c1a2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c1aa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c1b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1ba:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c000c1be:	0f 86 30 01 00 00    	jbe    c000c2f4 <loadDriverIntoMemory(char const*, unsigned long)+0x35b>
c000c1c4:	0f b7 f3             	movzx  esi,bx
c000c1c7:	6b f6 28             	imul   esi,esi,0x28
c000c1ca:	03 74 24 24          	add    esi,DWORD PTR [esp+0x24]
c000c1ce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000c1d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1d5:	50                   	push   eax
c000c1d6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c1da:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c000c1de:	8b 06                	mov    eax,DWORD PTR [esi]
c000c1e0:	6b d2 28             	imul   edx,edx,0x28
c000c1e3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c000c1e7:	31 d2                	xor    edx,edx
c000c1e9:	52                   	push   edx
c000c1ea:	50                   	push   eax
c000c1eb:	55                   	push   ebp
c000c1ec:	e8 cf 67 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000c1f1:	83 c4 0c             	add    esp,0xc
c000c1f4:	6a 20                	push   0x20
c000c1f6:	6a 00                	push   0x0
c000c1f8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000c1ff:	51                   	push   ecx
c000c200:	e8 a6 44 ff ff       	call   c00006ab <memset>
c000c205:	58                   	pop    eax
c000c206:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c209:	8d 54 24 58          	lea    edx,[esp+0x58]
c000c20d:	52                   	push   edx
c000c20e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c000c215:	51                   	push   ecx
c000c216:	6a 00                	push   0x0
c000c218:	6a 1f                	push   0x1f
c000c21a:	55                   	push   ebp
c000c21b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c21e:	83 c4 1c             	add    esp,0x1c
c000c221:	6a 09                	push   0x9
c000c223:	68 92 89 03 c0       	push   0xc0038992
c000c228:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000c22f:	51                   	push   ecx
c000c230:	e8 3a 43 ff ff       	call   c000056f <memcmp>
c000c235:	83 c4 10             	add    esp,0x10
c000c238:	85 c0                	test   eax,eax
c000c23a:	75 21                	jne    c000c25d <loadDriverIntoMemory(char const*, unsigned long)+0x2c4>
c000c23c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c240:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c244:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000c248:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c24c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c24f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c000c256:	89 d0                	mov    eax,edx
c000c258:	40                   	inc    eax
c000c259:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25d:	50                   	push   eax
c000c25e:	6a 09                	push   0x9
c000c260:	68 9c 89 03 c0       	push   0xc003899c
c000c265:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c26c:	50                   	push   eax
c000c26d:	e8 fd 42 ff ff       	call   c000056f <memcmp>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	85 c0                	test   eax,eax
c000c277:	75 21                	jne    c000c29a <loadDriverIntoMemory(char const*, unsigned long)+0x301>
c000c279:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c27d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c281:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000c285:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c289:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c28c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c000c293:	89 d0                	mov    eax,edx
c000c295:	40                   	inc    eax
c000c296:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c29a:	50                   	push   eax
c000c29b:	50                   	push   eax
c000c29c:	68 68 89 03 c0       	push   0xc0038968
c000c2a1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c2a8:	50                   	push   eax
c000c2a9:	e8 9f 45 ff ff       	call   c000084d <strcmp>
c000c2ae:	83 c4 10             	add    esp,0x10
c000c2b1:	85 c0                	test   eax,eax
c000c2b3:	75 0f                	jne    c000c2c4 <loadDriverIntoMemory(char const*, unsigned long)+0x32b>
c000c2b5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c4:	50                   	push   eax
c000c2c5:	50                   	push   eax
c000c2c6:	68 70 89 03 c0       	push   0xc0038970
c000c2cb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c2d2:	50                   	push   eax
c000c2d3:	e8 75 45 ff ff       	call   c000084d <strcmp>
c000c2d8:	83 c4 10             	add    esp,0x10
c000c2db:	85 c0                	test   eax,eax
c000c2dd:	75 0f                	jne    c000c2ee <loadDriverIntoMemory(char const*, unsigned long)+0x355>
c000c2df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c2e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c2ee:	43                   	inc    ebx
c000c2ef:	e9 c6 fe ff ff       	jmp    c000c1ba <loadDriverIntoMemory(char const*, unsigned long)+0x221>
c000c2f4:	31 d2                	xor    edx,edx
c000c2f6:	51                   	push   ecx
c000c2f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2fb:	52                   	push   edx
c000c2fc:	50                   	push   eax
c000c2fd:	55                   	push   ebp
c000c2fe:	e8 bd 66 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000c303:	5b                   	pop    ebx
c000c304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c308:	e8 ae 11 00 00       	call   c000d4bb <malloc>
c000c30d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c310:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c314:	31 d2                	xor    edx,edx
c000c316:	5e                   	pop    esi
c000c317:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c31b:	53                   	push   ebx
c000c31c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c324:	52                   	push   edx
c000c325:	50                   	push   eax
c000c326:	55                   	push   ebp
c000c327:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c32a:	83 c4 14             	add    esp,0x14
c000c32d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c331:	e8 85 11 00 00       	call   c000d4bb <malloc>
c000c336:	31 d2                	xor    edx,edx
c000c338:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c33c:	83 c4 0c             	add    esp,0xc
c000c33f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c343:	52                   	push   edx
c000c344:	50                   	push   eax
c000c345:	55                   	push   ebp
c000c346:	e8 75 66 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000c34b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c34e:	31 d2                	xor    edx,edx
c000c350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c354:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c357:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c35b:	52                   	push   edx
c000c35c:	50                   	push   eax
c000c35d:	55                   	push   ebp
c000c35e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c361:	83 c4 20             	add    esp,0x20
c000c364:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c36c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c370:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c374:	0f 84 f2 02 00 00    	je     c000c66c <loadDriverIntoMemory(char const*, unsigned long)+0x6d3>
c000c37a:	8b 84 8c 50 01 00 00 	mov    eax,DWORD PTR [esp+ecx*4+0x150]
c000c381:	31 d2                	xor    edx,edx
c000c383:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c387:	c1 e8 03             	shr    eax,0x3
c000c38a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c38e:	50                   	push   eax
c000c38f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c393:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c000c397:	52                   	push   edx
c000c398:	50                   	push   eax
c000c399:	55                   	push   ebp
c000c39a:	e8 21 66 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000c39f:	58                   	pop    eax
c000c3a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3a4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c000c3ab:	e8 0b 11 00 00       	call   c000d4bb <malloc>
c000c3b0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c3b3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c3b7:	5a                   	pop    edx
c000c3b8:	31 d2                	xor    edx,edx
c000c3ba:	8d 44 24 58          	lea    eax,[esp+0x58]
c000c3be:	50                   	push   eax
c000c3bf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c3c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3c7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c000c3ce:	52                   	push   edx
c000c3cf:	50                   	push   eax
c000c3d0:	55                   	push   ebp
c000c3d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c3d4:	83 c4 20             	add    esp,0x20
c000c3d7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c3e3:	39 54 24 18          	cmp    DWORD PTR [esp+0x18],edx
c000c3e7:	0f 8d 67 02 00 00    	jge    c000c654 <loadDriverIntoMemory(char const*, unsigned long)+0x6bb>
c000c3ed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c3f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3f5:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000c3fa:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000c3fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c401:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c405:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c000c409:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c40d:	c1 e8 08             	shr    eax,0x8
c000c410:	89 c6                	mov    esi,eax
c000c412:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c416:	c1 e6 04             	shl    esi,0x4
c000c419:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c000c41d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c000c420:	85 db                	test   ebx,ebx
c000c422:	0f 85 15 01 00 00    	jne    c000c53d <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c428:	83 ec 0c             	sub    esp,0xc
c000c42b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c42f:	03 06                	add    eax,DWORD PTR [esi]
c000c431:	50                   	push   eax
c000c432:	e8 52 f8 ff ff       	call   c000bc89 <getAddressOfKernelSymbol(char const*)>
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	89 c3                	mov    ebx,eax
c000c43c:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c441:	85 c0                	test   eax,eax
c000c443:	0f 85 f4 00 00 00    	jne    c000c53d <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c449:	50                   	push   eax
c000c44a:	50                   	push   eax
c000c44b:	68 a6 89 03 c0       	push   0xc00389a6
c000c450:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c454:	03 06                	add    eax,DWORD PTR [esi]
c000c456:	50                   	push   eax
c000c457:	e8 f1 43 ff ff       	call   c000084d <strcmp>
c000c45c:	83 c4 10             	add    esp,0x10
c000c45f:	85 c0                	test   eax,eax
c000c461:	75 0a                	jne    c000c46d <loadDriverIntoMemory(char const*, unsigned long)+0x4d4>
c000c463:	bb 0c e7 01 c0       	mov    ebx,0xc001e70c
c000c468:	e9 cb 00 00 00       	jmp    c000c538 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c46d:	50                   	push   eax
c000c46e:	50                   	push   eax
c000c46f:	68 b0 89 03 c0       	push   0xc00389b0
c000c474:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c478:	03 06                	add    eax,DWORD PTR [esi]
c000c47a:	50                   	push   eax
c000c47b:	e8 cd 43 ff ff       	call   c000084d <strcmp>
c000c480:	83 c4 10             	add    esp,0x10
c000c483:	85 c0                	test   eax,eax
c000c485:	75 0a                	jne    c000c491 <loadDriverIntoMemory(char const*, unsigned long)+0x4f8>
c000c487:	bb 40 e4 01 c0       	mov    ebx,0xc001e440
c000c48c:	e9 a7 00 00 00       	jmp    c000c538 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c491:	50                   	push   eax
c000c492:	50                   	push   eax
c000c493:	68 b9 89 03 c0       	push   0xc00389b9
c000c498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c49c:	03 06                	add    eax,DWORD PTR [esi]
c000c49e:	50                   	push   eax
c000c49f:	e8 a9 43 ff ff       	call   c000084d <strcmp>
c000c4a4:	83 c4 10             	add    esp,0x10
c000c4a7:	85 c0                	test   eax,eax
c000c4a9:	75 0a                	jne    c000c4b5 <loadDriverIntoMemory(char const*, unsigned long)+0x51c>
c000c4ab:	bb 0c e8 01 c0       	mov    ebx,0xc001e80c
c000c4b0:	e9 83 00 00 00       	jmp    c000c538 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c4b5:	50                   	push   eax
c000c4b6:	50                   	push   eax
c000c4b7:	68 c3 89 03 c0       	push   0xc00389c3
c000c4bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4c0:	03 06                	add    eax,DWORD PTR [esi]
c000c4c2:	50                   	push   eax
c000c4c3:	e8 85 43 ff ff       	call   c000084d <strcmp>
c000c4c8:	83 c4 10             	add    esp,0x10
c000c4cb:	85 c0                	test   eax,eax
c000c4cd:	74 64                	je     c000c533 <loadDriverIntoMemory(char const*, unsigned long)+0x59a>
c000c4cf:	50                   	push   eax
c000c4d0:	50                   	push   eax
c000c4d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c4d5:	03 06                	add    eax,DWORD PTR [esi]
c000c4d7:	50                   	push   eax
c000c4d8:	68 cc 89 03 c0       	push   0xc00389cc
c000c4dd:	e8 de 09 00 00       	call   c000cec0 <kprintf(char const*, ...)>
c000c4e2:	58                   	pop    eax
c000c4e3:	5a                   	pop    edx
c000c4e4:	68 e6 89 03 c0       	push   0xc00389e6
c000c4e9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c4f0:	50                   	push   eax
c000c4f1:	e8 d1 42 ff ff       	call   c00007c7 <strcpy>
c000c4f6:	59                   	pop    ecx
c000c4f7:	58                   	pop    eax
c000c4f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c4fc:	03 06                	add    eax,DWORD PTR [esi]
c000c4fe:	50                   	push   eax
c000c4ff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c506:	50                   	push   eax
c000c507:	e8 08 44 ff ff       	call   c0000914 <strcat>
c000c50c:	58                   	pop    eax
c000c50d:	5a                   	pop    edx
c000c50e:	68 7c 8a 03 c0       	push   0xc0038a7c
c000c513:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c51a:	50                   	push   eax
c000c51b:	e8 f4 43 ff ff       	call   c0000914 <strcat>
c000c520:	59                   	pop    ecx
c000c521:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c528:	50                   	push   eax
c000c529:	e8 b0 0a 00 00       	call   c000cfde <panic(char const*)>
c000c52e:	83 c4 10             	add    esp,0x10
c000c531:	eb 0a                	jmp    c000c53d <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c533:	bb 8c e5 01 c0       	mov    ebx,0xc001e58c
c000c538:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c53d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c000c542:	75 7a                	jne    c000c5be <loadDriverIntoMemory(char const*, unsigned long)+0x625>
c000c544:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c000c54b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c000c54f:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c000c553:	01 ce                	add    esi,ecx
c000c555:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c55d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c55f:	0f 94 c2             	sete   dl
c000c562:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c56a:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c000c56f:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c000c573:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c578:	74 2b                	je     c000c5a5 <loadDriverIntoMemory(char const*, unsigned long)+0x60c>
c000c57a:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c000c57d:	84 d2                	test   dl,dl
c000c57f:	75 0a                	jne    c000c58b <loadDriverIntoMemory(char const*, unsigned long)+0x5f2>
c000c581:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c585:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c589:	76 2c                	jbe    c000c5b7 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c58b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c58f:	83 ec 0c             	sub    esp,0xc
c000c592:	68 fd 89 03 c0       	push   0xc00389fd
c000c597:	e8 42 0a 00 00       	call   c000cfde <panic(char const*)>
c000c59c:	83 c4 10             	add    esp,0x10
c000c59f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5a3:	eb 12                	jmp    c000c5b7 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c5a5:	01 c1                	add    ecx,eax
c000c5a7:	84 d2                	test   dl,dl
c000c5a9:	75 0c                	jne    c000c5b7 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c5ab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c5af:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c5b3:	77 02                	ja     c000c5b7 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c5b5:	01 d9                	add    ecx,ebx
c000c5b7:	89 0e                	mov    DWORD PTR [esi],ecx
c000c5b9:	e9 8d 00 00 00       	jmp    c000c64b <loadDriverIntoMemory(char const*, unsigned long)+0x6b2>
c000c5be:	80 7c 24 10 02       	cmp    BYTE PTR [esp+0x10],0x2
c000c5c3:	75 65                	jne    c000c62a <loadDriverIntoMemory(char const*, unsigned long)+0x691>
c000c5c5:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c000c5cc:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c000c5d0:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c000c5d4:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c5dc:	74 14                	je     c000c5f2 <loadDriverIntoMemory(char const*, unsigned long)+0x659>
c000c5de:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c5e6:	74 0a                	je     c000c5f2 <loadDriverIntoMemory(char const*, unsigned long)+0x659>
c000c5e8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c5ec:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c5f0:	76 10                	jbe    c000c602 <loadDriverIntoMemory(char const*, unsigned long)+0x669>
c000c5f2:	83 ec 0c             	sub    esp,0xc
c000c5f5:	68 19 8a 03 c0       	push   0xc0038a19
c000c5fa:	e8 df 09 00 00       	call   c000cfde <panic(char const*)>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	8b 16                	mov    edx,DWORD PTR [esi]
c000c604:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c609:	74 13                	je     c000c61e <loadDriverIntoMemory(char const*, unsigned long)+0x685>
c000c60b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c60f:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c000c616:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000c61a:	01 d0                	add    eax,edx
c000c61c:	eb 06                	jmp    c000c624 <loadDriverIntoMemory(char const*, unsigned long)+0x68b>
c000c61e:	89 d0                	mov    eax,edx
c000c620:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000c624:	01 c3                	add    ebx,eax
c000c626:	89 1e                	mov    DWORD PTR [esi],ebx
c000c628:	eb 21                	jmp    c000c64b <loadDriverIntoMemory(char const*, unsigned long)+0x6b2>
c000c62a:	51                   	push   ecx
c000c62b:	51                   	push   ecx
c000c62c:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c631:	50                   	push   eax
c000c632:	68 35 8a 03 c0       	push   0xc0038a35
c000c637:	e8 84 08 00 00       	call   c000cec0 <kprintf(char const*, ...)>
c000c63c:	c7 04 24 40 8a 03 c0 	mov    DWORD PTR [esp],0xc0038a40
c000c643:	e8 96 09 00 00       	call   c000cfde <panic(char const*)>
c000c648:	83 c4 10             	add    esp,0x10
c000c64b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c64f:	e9 8b fd ff ff       	jmp    c000c3df <loadDriverIntoMemory(char const*, unsigned long)+0x446>
c000c654:	83 ec 0c             	sub    esp,0xc
c000c657:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65b:	e8 6b 0e 00 00       	call   c000d4cb <free>
c000c660:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000c664:	83 c4 10             	add    esp,0x10
c000c667:	e9 00 fd ff ff       	jmp    c000c36c <loadDriverIntoMemory(char const*, unsigned long)+0x3d3>
c000c66c:	83 ec 0c             	sub    esp,0xc
c000c66f:	55                   	push   ebp
c000c670:	e8 eb 62 00 00       	call   c0012960 <File::close()>
c000c675:	58                   	pop    eax
c000c676:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c67a:	e8 4c 0e 00 00       	call   c000d4cb <free>
c000c67f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c682:	e8 44 0e 00 00       	call   c000d4cb <free>
c000c687:	5a                   	pop    edx
c000c688:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c68c:	e8 3a 0e 00 00       	call   c000d4cb <free>
c000c691:	83 c4 10             	add    esp,0x10
c000c694:	b0 01                	mov    al,0x1
c000c696:	81 c4 5c 03 00 00    	add    esp,0x35c
c000c69c:	5b                   	pop    ebx
c000c69d:	5e                   	pop    esi
c000c69e:	5f                   	pop    edi
c000c69f:	5d                   	pop    ebp
c000c6a0:	c3                   	ret    

c000c6a1 <loadDLL(char const*)>:
c000c6a1:	57                   	push   edi
c000c6a2:	56                   	push   esi
c000c6a3:	53                   	push   ebx
c000c6a4:	81 ec 18 01 00 00    	sub    esp,0x118
c000c6aa:	8b 9c 24 28 01 00 00 	mov    ebx,DWORD PTR [esp+0x128]
c000c6b1:	53                   	push   ebx
c000c6b2:	68 58 8a 03 c0       	push   0xc0038a58
c000c6b7:	e8 04 08 00 00       	call   c000cec0 <kprintf(char const*, ...)>
c000c6bc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c6c3:	e8 a8 5d 00 00       	call   c0012470 <operator new(unsigned long)>
c000c6c8:	83 c4 0c             	add    esp,0xc
c000c6cb:	89 c6                	mov    esi,eax
c000c6cd:	ff 35 3c bc 03 c0    	push   DWORD PTR ds:0xc003bc3c
c000c6d3:	53                   	push   ebx
c000c6d4:	50                   	push   eax
c000c6d5:	e8 c4 61 00 00       	call   c001289e <File::File(char const*, Process*)>
c000c6da:	83 c4 0c             	add    esp,0xc
c000c6dd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c6e1:	50                   	push   eax
c000c6e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c6e6:	50                   	push   eax
c000c6e7:	56                   	push   esi
c000c6e8:	e8 c1 64 00 00       	call   c0012bae <File::stat(unsigned long long*, bool*)>
c000c6ed:	83 c4 10             	add    esp,0x10
c000c6f0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c6f5:	75 0a                	jne    c000c701 <loadDLL(char const*)+0x60>
c000c6f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6fb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c6ff:	75 32                	jne    c000c733 <loadDLL(char const*)+0x92>
c000c701:	50                   	push   eax
c000c702:	50                   	push   eax
c000c703:	68 69 8a 03 c0       	push   0xc0038a69
c000c708:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000c70c:	57                   	push   edi
c000c70d:	e8 b5 40 ff ff       	call   c00007c7 <strcpy>
c000c712:	58                   	pop    eax
c000c713:	5a                   	pop    edx
c000c714:	53                   	push   ebx
c000c715:	57                   	push   edi
c000c716:	e8 f9 41 ff ff       	call   c0000914 <strcat>
c000c71b:	59                   	pop    ecx
c000c71c:	58                   	pop    eax
c000c71d:	68 7c 8a 03 c0       	push   0xc0038a7c
c000c722:	57                   	push   edi
c000c723:	e8 ec 41 ff ff       	call   c0000914 <strcat>
c000c728:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c72b:	e8 ae 08 00 00       	call   c000cfde <panic(char const*)>
c000c730:	83 c4 10             	add    esp,0x10
c000c733:	83 ec 0c             	sub    esp,0xc
c000c736:	8b 06                	mov    eax,DWORD PTR [esi]
c000c738:	56                   	push   esi
c000c739:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c73c:	58                   	pop    eax
c000c73d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c741:	e8 75 0d 00 00       	call   c000d4bb <malloc>
c000c746:	5a                   	pop    edx
c000c747:	89 c6                	mov    esi,eax
c000c749:	59                   	pop    ecx
c000c74a:	50                   	push   eax
c000c74b:	68 7e 8a 03 c0       	push   0xc0038a7e
c000c750:	e8 6b 07 00 00       	call   c000cec0 <kprintf(char const*, ...)>
c000c755:	5f                   	pop    edi
c000c756:	58                   	pop    eax
c000c757:	56                   	push   esi
c000c758:	53                   	push   ebx
c000c759:	e8 3b f8 ff ff       	call   c000bf99 <loadDriverIntoMemory(char const*, unsigned long)>
c000c75e:	81 c4 20 01 00 00    	add    esp,0x120
c000c764:	89 f0                	mov    eax,esi
c000c766:	5b                   	pop    ebx
c000c767:	5e                   	pop    esi
c000c768:	5f                   	pop    edi
c000c769:	c3                   	ret    

c000c76a <executeDLL(unsigned long, void*)>:
c000c76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c76e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c772:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c776:	ff e0                	jmp    eax

c000c778 <GDTEntry::setBase(unsigned int)>:
c000c778:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c77c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c780:	89 c1                	mov    ecx,eax
c000c782:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c786:	c1 e9 10             	shr    ecx,0x10
c000c789:	c1 e8 18             	shr    eax,0x18
c000c78c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c78f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c792:	c3                   	ret    
c000c793:	90                   	nop

c000c794 <GDTEntry::setLimit(unsigned int)>:
c000c794:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c798:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c79c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c79f:	66 89 01             	mov    WORD PTR [ecx],ax
c000c7a2:	83 e2 f0             	and    edx,0xfffffff0
c000c7a5:	c1 e8 10             	shr    eax,0x10
c000c7a8:	83 e0 0f             	and    eax,0xf
c000c7ab:	09 d0                	or     eax,edx
c000c7ad:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c7b0:	c3                   	ret    
c000c7b1:	90                   	nop

c000c7b2 <GDT::GDT()>:
c000c7b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7c6:	90                   	nop
c000c7c7:	c3                   	ret    

c000c7c8 <GDT::addEntry(GDTEntry)>:
c000c7c8:	53                   	push   ebx
c000c7c9:	83 ec 0c             	sub    esp,0xc
c000c7cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c7d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7d2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c7d9:	52                   	push   edx
c000c7da:	50                   	push   eax
c000c7db:	68 9d 8a 03 c0       	push   0xc0038a9d
c000c7e0:	e8 db 06 00 00       	call   c000cec0 <kprintf(char const*, ...)>
c000c7e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7e7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c7eb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c7ef:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c7f3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c7f7:	8d 50 01             	lea    edx,[eax+0x1]
c000c7fa:	c1 e0 03             	shl    eax,0x3
c000c7fd:	89 13                	mov    DWORD PTR [ebx],edx
c000c7ff:	83 c4 18             	add    esp,0x18
c000c802:	5b                   	pop    ebx
c000c803:	c3                   	ret    

c000c804 <GDT::getNumberOfEntries()>:
c000c804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c808:	8b 00                	mov    eax,DWORD PTR [eax]
c000c80a:	c3                   	ret    
c000c80b:	90                   	nop

c000c80c <GDT::flush()>:
c000c80c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c810:	8b 10                	mov    edx,DWORD PTR [eax]
c000c812:	83 c0 04             	add    eax,0x4
c000c815:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c81c:	a3 86 bb 03 c0       	mov    ds:0xc003bb86,eax
c000c821:	66 89 15 84 bb 03 c0 	mov    WORD PTR ds:0xc003bb84,dx
c000c828:	e9 06 3b ff ff       	jmp    c0000333 <loadGDT>
c000c82d:	90                   	nop

c000c82e <GDT::setup()>:
c000c82e:	55                   	push   ebp
c000c82f:	57                   	push   edi
c000c830:	56                   	push   esi
c000c831:	53                   	push   ebx
c000c832:	83 ec 3c             	sub    esp,0x3c
c000c835:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c839:	6a 00                	push   0x0
c000c83b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c83f:	53                   	push   ebx
c000c840:	e8 33 ff ff ff       	call   c000c778 <GDTEntry::setBase(unsigned int)>
c000c845:	6a 00                	push   0x0
c000c847:	53                   	push   ebx
c000c848:	e8 47 ff ff ff       	call   c000c794 <GDTEntry::setLimit(unsigned int)>
c000c84d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c855:	6a 00                	push   0x0
c000c857:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c85b:	53                   	push   ebx
c000c85c:	e8 17 ff ff ff       	call   c000c778 <GDTEntry::setBase(unsigned int)>
c000c861:	68 ff ff ff 00       	push   0xffffff
c000c866:	53                   	push   ebx
c000c867:	e8 28 ff ff ff       	call   c000c794 <GDTEntry::setLimit(unsigned int)>
c000c86c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c870:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c875:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c87a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c87e:	83 c4 20             	add    esp,0x20
c000c881:	6a 00                	push   0x0
c000c883:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c887:	53                   	push   ebx
c000c888:	e8 eb fe ff ff       	call   c000c778 <GDTEntry::setBase(unsigned int)>
c000c88d:	68 ff ff ff 00       	push   0xffffff
c000c892:	53                   	push   ebx
c000c893:	e8 fc fe ff ff       	call   c000c794 <GDTEntry::setLimit(unsigned int)>
c000c898:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c89c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8a0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c8a4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c8a8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c8ac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c8b1:	0d 00 92 c0 00       	or     eax,0xc09200
c000c8b6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c8ba:	89 d8                	mov    eax,ebx
c000c8bc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c8c0:	80 cc 60             	or     ah,0x60
c000c8c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c8c7:	83 c4 0c             	add    esp,0xc
c000c8ca:	89 f8                	mov    eax,edi
c000c8cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8d0:	80 cc 60             	or     ah,0x60
c000c8d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8d7:	89 c7                	mov    edi,eax
c000c8d9:	55                   	push   ebp
c000c8da:	e8 e9 fe ff ff       	call   c000c7c8 <GDT::addEntry(GDTEntry)>
c000c8df:	83 c4 0c             	add    esp,0xc
c000c8e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c8e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c8ea:	55                   	push   ebp
c000c8eb:	e8 d8 fe ff ff       	call   c000c7c8 <GDT::addEntry(GDTEntry)>
c000c8f0:	83 c4 0c             	add    esp,0xc
c000c8f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c8f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c8fb:	55                   	push   ebp
c000c8fc:	e8 c7 fe ff ff       	call   c000c7c8 <GDT::addEntry(GDTEntry)>
c000c901:	83 c4 0c             	add    esp,0xc
c000c904:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c908:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c90c:	53                   	push   ebx
c000c90d:	51                   	push   ecx
c000c90e:	55                   	push   ebp
c000c90f:	e8 b4 fe ff ff       	call   c000c7c8 <GDT::addEntry(GDTEntry)>
c000c914:	83 c4 0c             	add    esp,0xc
c000c917:	57                   	push   edi
c000c918:	56                   	push   esi
c000c919:	55                   	push   ebp
c000c91a:	e8 a9 fe ff ff       	call   c000c7c8 <GDT::addEntry(GDTEntry)>
c000c91f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c922:	e8 e5 fe ff ff       	call   c000c80c <GDT::flush()>
c000c927:	83 c4 4c             	add    esp,0x4c
c000c92a:	5b                   	pop    ebx
c000c92b:	5e                   	pop    esi
c000c92c:	5f                   	pop    edi
c000c92d:	5d                   	pop    ebp
c000c92e:	c3                   	ret    

c000c92f <idleFunction(void*)>:
c000c92f:	53                   	push   ebx
c000c930:	83 ec 08             	sub    esp,0x8
c000c933:	e8 2c 1a 00 00       	call   c000e364 <unlockScheduler()>
c000c938:	e8 69 a8 00 00       	call   c00171a6 <thisCPU()>
c000c93d:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c944:	74 41                	je     c000c987 <idleFunction(void*)+0x58>
c000c946:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c000c94b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c952:	74 33                	je     c000c987 <idleFunction(void*)+0x58>
c000c954:	31 db                	xor    ebx,ebx
c000c956:	52                   	push   edx
c000c957:	52                   	push   edx
c000c958:	68 e1 00 00 00       	push   0xe1
c000c95d:	50                   	push   eax
c000c95e:	e8 59 ec ff ff       	call   c000b5bc <Computer::rdmsr(unsigned int)>
c000c963:	53                   	push   ebx
c000c964:	83 e0 02             	and    eax,0x2
c000c967:	50                   	push   eax
c000c968:	68 e1 00 00 00       	push   0xe1
c000c96d:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c000c973:	e8 70 ec ff ff       	call   c000b5e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c978:	83 c4 20             	add    esp,0x20
c000c97b:	e8 d0 37 ff ff       	call   c0000150 <doTPAUSE>
c000c980:	e8 4b 20 01 00       	call   c001e9d0 <idleCommon()>
c000c985:	eb f4                	jmp    c000c97b <idleFunction(void*)+0x4c>
c000c987:	fb                   	sti    
c000c988:	f4                   	hlt    
c000c989:	e8 42 20 01 00       	call   c001e9d0 <idleCommon()>
c000c98e:	eb f7                	jmp    c000c987 <idleFunction(void*)+0x58>

c000c990 <IDTEntry::IDTEntry(bool)>:
c000c990:	83 ec 04             	sub    esp,0x4
c000c993:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c997:	88 04 24             	mov    BYTE PTR [esp],al
c000c99a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c99e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c9a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9a8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c9ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9b0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9b3:	83 e2 f0             	and    edx,0xfffffff0
c000c9b6:	83 ca 0e             	or     edx,0xe
c000c9b9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9c0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9c3:	83 e2 ef             	and    edx,0xffffffef
c000c9c6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9c9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000c9cd:	74 04                	je     c000c9d3 <IDTEntry::IDTEntry(bool)+0x43>
c000c9cf:	b2 03                	mov    dl,0x3
c000c9d1:	eb 02                	jmp    c000c9d5 <IDTEntry::IDTEntry(bool)+0x45>
c000c9d3:	b2 00                	mov    dl,0x0
c000c9d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9d9:	83 e2 03             	and    edx,0x3
c000c9dc:	88 d1                	mov    cl,dl
c000c9de:	c1 e1 05             	shl    ecx,0x5
c000c9e1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9e4:	83 e2 9f             	and    edx,0xffffff9f
c000c9e7:	09 ca                	or     edx,ecx
c000c9e9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9f3:	83 ca 80             	or     edx,0xffffff80
c000c9f6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9f9:	90                   	nop
c000c9fa:	83 c4 04             	add    esp,0x4
c000c9fd:	c3                   	ret    

c000c9fe <IDTEntry::setOffset(unsigned int)>:
c000c9fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca06:	66 89 02             	mov    WORD PTR [edx],ax
c000ca09:	c1 e8 10             	shr    eax,0x10
c000ca0c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ca10:	c3                   	ret    
c000ca11:	90                   	nop

c000ca12 <IDT::IDT()>:
c000ca12:	90                   	nop
c000ca13:	c3                   	ret    

c000ca14 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ca14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca18:	83 c0 30             	add    eax,0x30
c000ca1b:	c3                   	ret    

c000ca1c <IDT::addEntry(IDTEntry, int)>:
c000ca1c:	53                   	push   ebx
c000ca1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ca25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca2d:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ca30:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ca34:	5b                   	pop    ebx
c000ca35:	c3                   	ret    

c000ca36 <IDT::addEntry(int, void (*)(), bool)>:
c000ca36:	53                   	push   ebx
c000ca37:	83 ec 10             	sub    esp,0x10
c000ca3a:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ca3f:	50                   	push   eax
c000ca40:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ca44:	53                   	push   ebx
c000ca45:	e8 46 ff ff ff       	call   c000c990 <IDTEntry::IDTEntry(bool)>
c000ca4a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ca4e:	53                   	push   ebx
c000ca4f:	e8 aa ff ff ff       	call   c000c9fe <IDTEntry::setOffset(unsigned int)>
c000ca54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca64:	e8 b3 ff ff ff       	call   c000ca1c <IDT::addEntry(IDTEntry, int)>
c000ca69:	83 c4 30             	add    esp,0x30
c000ca6c:	5b                   	pop    ebx
c000ca6d:	c3                   	ret    

c000ca6e <IDT::flush()>:
c000ca6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca72:	66 c7 05 8c bb 03 c0 ff 07 	mov    WORD PTR ds:0xc003bb8c,0x7ff
c000ca7b:	a3 8e bb 03 c0       	mov    ds:0xc003bb8e,eax
c000ca80:	0f 01 1d 8c bb 03 c0 	lidtd  ds:0xc003bb8c
c000ca87:	c3                   	ret    

c000ca88 <IDT::setup()>:
c000ca88:	57                   	push   edi
c000ca89:	56                   	push   esi
c000ca8a:	53                   	push   ebx
c000ca8b:	83 ec 10             	sub    esp,0x10
c000ca8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ca92:	6a 00                	push   0x0
c000ca94:	68 53 03 00 c0       	push   0xc0000353
c000ca99:	6a 00                	push   0x0
c000ca9b:	53                   	push   ebx
c000ca9c:	e8 95 ff ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000caa1:	6a 00                	push   0x0
c000caa3:	68 63 03 00 c0       	push   0xc0000363
c000caa8:	6a 01                	push   0x1
c000caaa:	53                   	push   ebx
c000caab:	e8 86 ff ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cab0:	83 c4 20             	add    esp,0x20
c000cab3:	6a 00                	push   0x0
c000cab5:	68 6d 03 00 c0       	push   0xc000036d
c000caba:	6a 02                	push   0x2
c000cabc:	53                   	push   ebx
c000cabd:	e8 74 ff ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cac2:	6a 00                	push   0x0
c000cac4:	68 77 03 00 c0       	push   0xc0000377
c000cac9:	6a 03                	push   0x3
c000cacb:	53                   	push   ebx
c000cacc:	e8 65 ff ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cad1:	83 c4 20             	add    esp,0x20
c000cad4:	6a 00                	push   0x0
c000cad6:	68 81 03 00 c0       	push   0xc0000381
c000cadb:	6a 04                	push   0x4
c000cadd:	53                   	push   ebx
c000cade:	e8 53 ff ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cae3:	6a 00                	push   0x0
c000cae5:	68 8b 03 00 c0       	push   0xc000038b
c000caea:	6a 05                	push   0x5
c000caec:	53                   	push   ebx
c000caed:	e8 44 ff ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000caf2:	83 c4 20             	add    esp,0x20
c000caf5:	6a 00                	push   0x0
c000caf7:	68 95 03 00 c0       	push   0xc0000395
c000cafc:	6a 06                	push   0x6
c000cafe:	53                   	push   ebx
c000caff:	e8 32 ff ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cb04:	6a 00                	push   0x0
c000cb06:	68 9f 03 00 c0       	push   0xc000039f
c000cb0b:	6a 07                	push   0x7
c000cb0d:	53                   	push   ebx
c000cb0e:	e8 23 ff ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cb13:	83 c4 20             	add    esp,0x20
c000cb16:	6a 00                	push   0x0
c000cb18:	68 a9 03 00 c0       	push   0xc00003a9
c000cb1d:	6a 08                	push   0x8
c000cb1f:	53                   	push   ebx
c000cb20:	e8 11 ff ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cb25:	6a 00                	push   0x0
c000cb27:	68 b1 03 00 c0       	push   0xc00003b1
c000cb2c:	6a 09                	push   0x9
c000cb2e:	53                   	push   ebx
c000cb2f:	e8 02 ff ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cb34:	83 c4 20             	add    esp,0x20
c000cb37:	6a 00                	push   0x0
c000cb39:	68 bb 03 00 c0       	push   0xc00003bb
c000cb3e:	6a 0a                	push   0xa
c000cb40:	53                   	push   ebx
c000cb41:	e8 f0 fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cb46:	6a 00                	push   0x0
c000cb48:	68 c3 03 00 c0       	push   0xc00003c3
c000cb4d:	6a 0b                	push   0xb
c000cb4f:	53                   	push   ebx
c000cb50:	e8 e1 fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cb55:	83 c4 20             	add    esp,0x20
c000cb58:	6a 00                	push   0x0
c000cb5a:	68 cb 03 00 c0       	push   0xc00003cb
c000cb5f:	6a 0c                	push   0xc
c000cb61:	53                   	push   ebx
c000cb62:	e8 cf fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cb67:	6a 00                	push   0x0
c000cb69:	68 d3 03 00 c0       	push   0xc00003d3
c000cb6e:	6a 0d                	push   0xd
c000cb70:	53                   	push   ebx
c000cb71:	e8 c0 fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cb76:	83 c4 20             	add    esp,0x20
c000cb79:	6a 00                	push   0x0
c000cb7b:	68 db 03 00 c0       	push   0xc00003db
c000cb80:	6a 0e                	push   0xe
c000cb82:	53                   	push   ebx
c000cb83:	e8 ae fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cb88:	6a 00                	push   0x0
c000cb8a:	68 e3 03 00 c0       	push   0xc00003e3
c000cb8f:	6a 0f                	push   0xf
c000cb91:	53                   	push   ebx
c000cb92:	e8 9f fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cb97:	83 c4 20             	add    esp,0x20
c000cb9a:	6a 00                	push   0x0
c000cb9c:	68 ed 03 00 c0       	push   0xc00003ed
c000cba1:	6a 10                	push   0x10
c000cba3:	53                   	push   ebx
c000cba4:	e8 8d fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cba9:	6a 00                	push   0x0
c000cbab:	68 f7 03 00 c0       	push   0xc00003f7
c000cbb0:	6a 11                	push   0x11
c000cbb2:	53                   	push   ebx
c000cbb3:	e8 7e fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cbb8:	83 c4 20             	add    esp,0x20
c000cbbb:	6a 00                	push   0x0
c000cbbd:	68 01 04 00 c0       	push   0xc0000401
c000cbc2:	6a 12                	push   0x12
c000cbc4:	53                   	push   ebx
c000cbc5:	e8 6c fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cbca:	6a 01                	push   0x1
c000cbcc:	68 0b 04 00 c0       	push   0xc000040b
c000cbd1:	6a 60                	push   0x60
c000cbd3:	53                   	push   ebx
c000cbd4:	e8 5d fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cbd9:	83 c4 20             	add    esp,0x20
c000cbdc:	6a 00                	push   0x0
c000cbde:	68 15 04 00 c0       	push   0xc0000415
c000cbe3:	6a 20                	push   0x20
c000cbe5:	53                   	push   ebx
c000cbe6:	e8 4b fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cbeb:	6a 00                	push   0x0
c000cbed:	68 1f 04 00 c0       	push   0xc000041f
c000cbf2:	6a 21                	push   0x21
c000cbf4:	53                   	push   ebx
c000cbf5:	e8 3c fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cbfa:	83 c4 20             	add    esp,0x20
c000cbfd:	6a 00                	push   0x0
c000cbff:	68 29 04 00 c0       	push   0xc0000429
c000cc04:	6a 22                	push   0x22
c000cc06:	53                   	push   ebx
c000cc07:	e8 2a fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cc0c:	6a 00                	push   0x0
c000cc0e:	68 33 04 00 c0       	push   0xc0000433
c000cc13:	6a 23                	push   0x23
c000cc15:	53                   	push   ebx
c000cc16:	e8 1b fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cc1b:	83 c4 20             	add    esp,0x20
c000cc1e:	6a 00                	push   0x0
c000cc20:	68 3d 04 00 c0       	push   0xc000043d
c000cc25:	6a 24                	push   0x24
c000cc27:	53                   	push   ebx
c000cc28:	e8 09 fe ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cc2d:	6a 00                	push   0x0
c000cc2f:	68 47 04 00 c0       	push   0xc0000447
c000cc34:	6a 25                	push   0x25
c000cc36:	53                   	push   ebx
c000cc37:	e8 fa fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cc3c:	83 c4 20             	add    esp,0x20
c000cc3f:	6a 00                	push   0x0
c000cc41:	68 51 04 00 c0       	push   0xc0000451
c000cc46:	6a 26                	push   0x26
c000cc48:	53                   	push   ebx
c000cc49:	e8 e8 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cc4e:	6a 00                	push   0x0
c000cc50:	68 5b 04 00 c0       	push   0xc000045b
c000cc55:	6a 27                	push   0x27
c000cc57:	53                   	push   ebx
c000cc58:	e8 d9 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cc5d:	83 c4 20             	add    esp,0x20
c000cc60:	6a 00                	push   0x0
c000cc62:	68 65 04 00 c0       	push   0xc0000465
c000cc67:	6a 28                	push   0x28
c000cc69:	53                   	push   ebx
c000cc6a:	e8 c7 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cc6f:	6a 00                	push   0x0
c000cc71:	68 6f 04 00 c0       	push   0xc000046f
c000cc76:	6a 29                	push   0x29
c000cc78:	53                   	push   ebx
c000cc79:	e8 b8 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cc7e:	83 c4 20             	add    esp,0x20
c000cc81:	6a 00                	push   0x0
c000cc83:	68 79 04 00 c0       	push   0xc0000479
c000cc88:	6a 2a                	push   0x2a
c000cc8a:	53                   	push   ebx
c000cc8b:	e8 a6 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cc90:	6a 00                	push   0x0
c000cc92:	68 83 04 00 c0       	push   0xc0000483
c000cc97:	6a 2b                	push   0x2b
c000cc99:	53                   	push   ebx
c000cc9a:	e8 97 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cc9f:	83 c4 20             	add    esp,0x20
c000cca2:	6a 00                	push   0x0
c000cca4:	68 8d 04 00 c0       	push   0xc000048d
c000cca9:	6a 2c                	push   0x2c
c000ccab:	53                   	push   ebx
c000ccac:	e8 85 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000ccb1:	6a 00                	push   0x0
c000ccb3:	68 97 04 00 c0       	push   0xc0000497
c000ccb8:	6a 2d                	push   0x2d
c000ccba:	53                   	push   ebx
c000ccbb:	e8 76 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000ccc0:	83 c4 20             	add    esp,0x20
c000ccc3:	6a 00                	push   0x0
c000ccc5:	68 a1 04 00 c0       	push   0xc00004a1
c000ccca:	6a 2e                	push   0x2e
c000cccc:	53                   	push   ebx
c000cccd:	e8 64 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000ccd2:	6a 00                	push   0x0
c000ccd4:	68 ab 04 00 c0       	push   0xc00004ab
c000ccd9:	6a 2f                	push   0x2f
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 55 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cce1:	83 c4 20             	add    esp,0x20
c000cce4:	6a 00                	push   0x0
c000cce6:	68 b5 04 00 c0       	push   0xc00004b5
c000cceb:	6a 30                	push   0x30
c000cced:	53                   	push   ebx
c000ccee:	e8 43 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000ccf3:	6a 00                	push   0x0
c000ccf5:	68 bf 04 00 c0       	push   0xc00004bf
c000ccfa:	6a 31                	push   0x31
c000ccfc:	53                   	push   ebx
c000ccfd:	e8 34 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cd02:	83 c4 20             	add    esp,0x20
c000cd05:	6a 00                	push   0x0
c000cd07:	68 c9 04 00 c0       	push   0xc00004c9
c000cd0c:	6a 32                	push   0x32
c000cd0e:	53                   	push   ebx
c000cd0f:	e8 22 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cd14:	6a 00                	push   0x0
c000cd16:	68 d3 04 00 c0       	push   0xc00004d3
c000cd1b:	6a 33                	push   0x33
c000cd1d:	53                   	push   ebx
c000cd1e:	e8 13 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cd23:	83 c4 20             	add    esp,0x20
c000cd26:	6a 00                	push   0x0
c000cd28:	68 dd 04 00 c0       	push   0xc00004dd
c000cd2d:	6a 34                	push   0x34
c000cd2f:	53                   	push   ebx
c000cd30:	e8 01 fd ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cd35:	6a 00                	push   0x0
c000cd37:	68 e7 04 00 c0       	push   0xc00004e7
c000cd3c:	6a 35                	push   0x35
c000cd3e:	53                   	push   ebx
c000cd3f:	e8 f2 fc ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cd44:	83 c4 20             	add    esp,0x20
c000cd47:	6a 00                	push   0x0
c000cd49:	68 f1 04 00 c0       	push   0xc00004f1
c000cd4e:	6a 36                	push   0x36
c000cd50:	53                   	push   ebx
c000cd51:	e8 e0 fc ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cd56:	6a 00                	push   0x0
c000cd58:	68 fb 04 00 c0       	push   0xc00004fb
c000cd5d:	6a 37                	push   0x37
c000cd5f:	53                   	push   ebx
c000cd60:	e8 d1 fc ff ff       	call   c000ca36 <IDT::addEntry(int, void (*)(), bool)>
c000cd65:	83 c4 20             	add    esp,0x20
c000cd68:	e8 02 47 00 00       	call   c001146f <Virt::getAKernelVAS()>
c000cd6d:	52                   	push   edx
c000cd6e:	6a 03                	push   0x3
c000cd70:	6a 02                	push   0x2
c000cd72:	50                   	push   eax
c000cd73:	e8 9e 4c 00 00       	call   c0011a16 <VAS::allocatePages(int, int)>
c000cd78:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cd7f:	89 c6                	mov    esi,eax
c000cd81:	e8 ea 56 00 00       	call   c0012470 <operator new(unsigned long)>
c000cd86:	81 c6 00 20 00 00    	add    esi,0x2000
c000cd8c:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd8f:	89 c7                	mov    edi,eax
c000cd91:	e8 30 40 00 00       	call   c0010dc6 <TSS::TSS()>
c000cd96:	83 c4 0c             	add    esp,0xc
c000cd99:	68 a9 03 00 c0       	push   0xc00003a9
c000cd9e:	56                   	push   esi
c000cd9f:	57                   	push   edi
c000cda0:	e8 61 40 00 00       	call   c0010e06 <TSS::setup(unsigned long, unsigned long)>
c000cda5:	59                   	pop    ecx
c000cda6:	89 c6                	mov    esi,eax
c000cda8:	5f                   	pop    edi
c000cda9:	6a 00                	push   0x0
c000cdab:	8d 44 24 14          	lea    eax,[esp+0x14]
c000cdaf:	50                   	push   eax
c000cdb0:	e8 db fb ff ff       	call   c000c990 <IDTEntry::IDTEntry(bool)>
c000cdb5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdb9:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000cdbe:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000cdc5:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000cdcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cdcf:	80 ce 05             	or     dh,0x5
c000cdd2:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000cdd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdd9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cddd:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000cde0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cde3:	e8 86 fc ff ff       	call   c000ca6e <IDT::flush()>
c000cde8:	83 c4 20             	add    esp,0x20
c000cdeb:	5b                   	pop    ebx
c000cdec:	5e                   	pop    esi
c000cded:	5f                   	pop    edi
c000cdee:	c3                   	ret    

c000cdef <stringifyxWithBase(unsigned int, char*, int)>:
c000cdef:	57                   	push   edi
c000cdf0:	b9 3f 00 00 00       	mov    ecx,0x3f
c000cdf5:	56                   	push   esi
c000cdf6:	be bc 8a 03 c0       	mov    esi,0xc0038abc
c000cdfb:	53                   	push   ebx
c000cdfc:	83 ec 40             	sub    esp,0x40
c000cdff:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ce03:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ce07:	fc                   	cld    
c000ce08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ce0a:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ce0e:	83 f9 3e             	cmp    ecx,0x3e
c000ce11:	7e 05                	jle    c000ce18 <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ce13:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ce18:	89 df                	mov    edi,ebx
c000ce1a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ce1e:	eb 02                	jmp    c000ce22 <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ce20:	89 c7                	mov    edi,eax
c000ce22:	31 d2                	xor    edx,edx
c000ce24:	46                   	inc    esi
c000ce25:	89 f8                	mov    eax,edi
c000ce27:	f7 f1                	div    ecx
c000ce29:	39 cf                	cmp    edi,ecx
c000ce2b:	73 f3                	jae    c000ce20 <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ce2d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce30:	eb 02                	jmp    c000ce34 <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ce32:	89 c3                	mov    ebx,eax
c000ce34:	31 d2                	xor    edx,edx
c000ce36:	4e                   	dec    esi
c000ce37:	89 d8                	mov    eax,ebx
c000ce39:	f7 f1                	div    ecx
c000ce3b:	39 cb                	cmp    ebx,ecx
c000ce3d:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ce41:	88 16                	mov    BYTE PTR [esi],dl
c000ce43:	73 ed                	jae    c000ce32 <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ce45:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce49:	83 c4 40             	add    esp,0x40
c000ce4c:	5b                   	pop    ebx
c000ce4d:	5e                   	pop    esi
c000ce4e:	5f                   	pop    edi
c000ce4f:	c3                   	ret    

c000ce50 <logc(char)>:
c000ce50:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce54:	ba fd 03 00 00       	mov    edx,0x3fd
c000ce59:	ec                   	in     al,dx
c000ce5a:	a8 20                	test   al,0x20
c000ce5c:	74 fb                	je     c000ce59 <logc(char)+0x9>
c000ce5e:	ba f8 03 00 00       	mov    edx,0x3f8
c000ce63:	88 c8                	mov    al,cl
c000ce65:	ee                   	out    dx,al
c000ce66:	c3                   	ret    

c000ce67 <logs(char*)>:
c000ce67:	53                   	push   ebx
c000ce68:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ce6c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ce6f:	84 c0                	test   al,al
c000ce71:	74 0f                	je     c000ce82 <logs(char*)+0x1b>
c000ce73:	50                   	push   eax
c000ce74:	43                   	inc    ebx
c000ce75:	e8 d6 ff ff ff       	call   c000ce50 <logc(char)>
c000ce7a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ce7d:	5a                   	pop    edx
c000ce7e:	84 c0                	test   al,al
c000ce80:	75 f1                	jne    c000ce73 <logs(char*)+0xc>
c000ce82:	5b                   	pop    ebx
c000ce83:	c3                   	ret    

c000ce84 <logWriteInt(unsigned int)>:
c000ce84:	83 ec 10             	sub    esp,0x10
c000ce87:	6a 0a                	push   0xa
c000ce89:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ce8d:	50                   	push   eax
c000ce8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce92:	e8 58 ff ff ff       	call   c000cdef <stringifyxWithBase(unsigned int, char*, int)>
c000ce97:	50                   	push   eax
c000ce98:	e8 ca ff ff ff       	call   c000ce67 <logs(char*)>
c000ce9d:	83 c4 20             	add    esp,0x20
c000cea0:	c3                   	ret    

c000cea1 <logWriteIntBase(unsigned int, int)>:
c000cea1:	83 ec 10             	sub    esp,0x10
c000cea4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cea8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ceac:	50                   	push   eax
c000cead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceb1:	e8 39 ff ff ff       	call   c000cdef <stringifyxWithBase(unsigned int, char*, int)>
c000ceb6:	50                   	push   eax
c000ceb7:	e8 ab ff ff ff       	call   c000ce67 <logs(char*)>
c000cebc:	83 c4 20             	add    esp,0x20
c000cebf:	c3                   	ret    

c000cec0 <kprintf(char const*, ...)>:
c000cec0:	55                   	push   ebp
c000cec1:	57                   	push   edi
c000cec2:	56                   	push   esi
c000cec3:	53                   	push   ebx
c000cec4:	83 ec 0c             	sub    esp,0xc
c000cec7:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cecb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cecf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ced3:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ced6:	84 c0                	test   al,al
c000ced8:	74 4a                	je     c000cf24 <kprintf(char const*, ...)+0x64>
c000ceda:	31 db                	xor    ebx,ebx
c000cedc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cedf:	3c 25                	cmp    al,0x25
c000cee1:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cee4:	0f 85 e4 00 00 00    	jne    c000cfce <kprintf(char const*, ...)+0x10e>
c000ceea:	83 c3 02             	add    ebx,0x2
c000ceed:	8a 07                	mov    al,BYTE PTR [edi]
c000ceef:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cef2:	83 e8 25             	sub    eax,0x25
c000cef5:	3c 53                	cmp    al,0x53
c000cef7:	0f 87 ba 00 00 00    	ja     c000cfb7 <kprintf(char const*, ...)+0xf7>
c000cefd:	0f b6 c0             	movzx  eax,al
c000cf00:	ff 24 85 10 8c 03 c0 	jmp    DWORD PTR [eax*4-0x3ffc73f0]
c000cf07:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf0b:	89 c8                	mov    eax,ecx
c000cf0d:	83 c1 04             	add    ecx,0x4
c000cf10:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf14:	ff 30                	push   DWORD PTR [eax]
c000cf16:	e8 4c ff ff ff       	call   c000ce67 <logs(char*)>
c000cf1b:	58                   	pop    eax
c000cf1c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cf20:	84 c0                	test   al,al
c000cf22:	75 b8                	jne    c000cedc <kprintf(char const*, ...)+0x1c>
c000cf24:	83 c4 0c             	add    esp,0xc
c000cf27:	5b                   	pop    ebx
c000cf28:	5e                   	pop    esi
c000cf29:	5f                   	pop    edi
c000cf2a:	5d                   	pop    ebp
c000cf2b:	c3                   	ret    
c000cf2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf30:	89 d0                	mov    eax,edx
c000cf32:	83 c2 04             	add    edx,0x4
c000cf35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf39:	ff 30                	push   DWORD PTR [eax]
c000cf3b:	e8 44 ff ff ff       	call   c000ce84 <logWriteInt(unsigned int)>
c000cf40:	58                   	pop    eax
c000cf41:	eb d9                	jmp    c000cf1c <kprintf(char const*, ...)+0x5c>
c000cf43:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf47:	89 d0                	mov    eax,edx
c000cf49:	83 c2 04             	add    edx,0x4
c000cf4c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cf4f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf53:	50                   	push   eax
c000cf54:	e8 f7 fe ff ff       	call   c000ce50 <logc(char)>
c000cf59:	58                   	pop    eax
c000cf5a:	eb c0                	jmp    c000cf1c <kprintf(char const*, ...)+0x5c>
c000cf5c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf60:	89 c8                	mov    eax,ecx
c000cf62:	83 c1 04             	add    ecx,0x4
c000cf65:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf69:	ff 30                	push   DWORD PTR [eax]
c000cf6b:	e8 14 ff ff ff       	call   c000ce84 <logWriteInt(unsigned int)>
c000cf70:	5f                   	pop    edi
c000cf71:	eb a9                	jmp    c000cf1c <kprintf(char const*, ...)+0x5c>
c000cf73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf77:	89 c8                	mov    eax,ecx
c000cf79:	83 c1 04             	add    ecx,0x4
c000cf7c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf80:	6a 10                	push   0x10
c000cf82:	ff 30                	push   DWORD PTR [eax]
c000cf84:	e8 18 ff ff ff       	call   c000cea1 <logWriteIntBase(unsigned int, int)>
c000cf89:	59                   	pop    ecx
c000cf8a:	5f                   	pop    edi
c000cf8b:	eb 8f                	jmp    c000cf1c <kprintf(char const*, ...)+0x5c>
c000cf8d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf91:	89 d0                	mov    eax,edx
c000cf93:	83 c2 08             	add    edx,0x8
c000cf96:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf9a:	6a 10                	push   0x10
c000cf9c:	ff 30                	push   DWORD PTR [eax]
c000cf9e:	e8 fe fe ff ff       	call   c000cea1 <logWriteIntBase(unsigned int, int)>
c000cfa3:	58                   	pop    eax
c000cfa4:	5a                   	pop    edx
c000cfa5:	e9 72 ff ff ff       	jmp    c000cf1c <kprintf(char const*, ...)+0x5c>
c000cfaa:	6a 25                	push   0x25
c000cfac:	e8 9f fe ff ff       	call   c000ce50 <logc(char)>
c000cfb1:	58                   	pop    eax
c000cfb2:	e9 65 ff ff ff       	jmp    c000cf1c <kprintf(char const*, ...)+0x5c>
c000cfb7:	6a 25                	push   0x25
c000cfb9:	e8 92 fe ff ff       	call   c000ce50 <logc(char)>
c000cfbe:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cfc1:	50                   	push   eax
c000cfc2:	e8 89 fe ff ff       	call   c000ce50 <logc(char)>
c000cfc7:	5a                   	pop    edx
c000cfc8:	59                   	pop    ecx
c000cfc9:	e9 4e ff ff ff       	jmp    c000cf1c <kprintf(char const*, ...)+0x5c>
c000cfce:	50                   	push   eax
c000cfcf:	89 eb                	mov    ebx,ebp
c000cfd1:	e8 7a fe ff ff       	call   c000ce50 <logc(char)>
c000cfd6:	89 fd                	mov    ebp,edi
c000cfd8:	58                   	pop    eax
c000cfd9:	e9 3e ff ff ff       	jmp    c000cf1c <kprintf(char const*, ...)+0x5c>

c000cfde <panic(char const*)>:
c000cfde:	55                   	push   ebp
c000cfdf:	89 e5                	mov    ebp,esp
c000cfe1:	53                   	push   ebx
c000cfe2:	50                   	push   eax
c000cfe3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000cfe6:	fa                   	cli    
c000cfe7:	c6 05 92 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bb92,0x1
c000cfee:	53                   	push   ebx
c000cfef:	c6 05 20 ae 03 c0 00 	mov    BYTE PTR ds:0xc003ae20,0x0
c000cff6:	68 60 8d 03 c0       	push   0xc0038d60
c000cffb:	e8 c0 fe ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000d000:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d005:	52                   	push   edx
c000d006:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d00c:	e8 36 36 00 00       	call   c0010647 <setActiveTerminal(VgaText*)>
c000d011:	83 c4 0c             	add    esp,0xc
c000d014:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d019:	6a 01                	push   0x1
c000d01b:	6a 0f                	push   0xf
c000d01d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d023:	e8 5e 30 00 00       	call   c0010086 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d028:	59                   	pop    ecx
c000d029:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d02e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d034:	e8 af 38 00 00       	call   c00108e8 <VgaText::clearScreen()>
c000d039:	58                   	pop    eax
c000d03a:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d03f:	5a                   	pop    edx
c000d040:	68 79 8d 03 c0       	push   0xc0038d79
c000d045:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d04b:	e8 16 3a 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d050:	59                   	pop    ecx
c000d051:	58                   	pop    eax
c000d052:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d057:	68 fc 8a 03 c0       	push   0xc0038afc
c000d05c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d062:	e8 ff 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d067:	58                   	pop    eax
c000d068:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d06d:	5a                   	pop    edx
c000d06e:	68 95 8d 03 c0       	push   0xc0038d95
c000d073:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d079:	e8 e8 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d07e:	59                   	pop    ecx
c000d07f:	58                   	pop    eax
c000d080:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d085:	53                   	push   ebx
c000d086:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d08c:	e8 d5 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d091:	58                   	pop    eax
c000d092:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d097:	5a                   	pop    edx
c000d098:	68 b5 8d 03 c0       	push   0xc0038db5
c000d09d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0a3:	e8 be 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d0a8:	59                   	pop    ecx
c000d0a9:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d0ae:	5b                   	pop    ebx
c000d0af:	68 38 8b 03 c0       	push   0xc0038b38
c000d0b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0ba:	e8 a7 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d0bf:	58                   	pop    eax
c000d0c0:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d0c5:	5a                   	pop    edx
c000d0c6:	68 95 8d 03 c0       	push   0xc0038d95
c000d0cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0d1:	e8 90 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d0d6:	59                   	pop    ecx
c000d0d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d0dc:	5b                   	pop    ebx
c000d0dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d0e0:	83 c0 0c             	add    eax,0xc
c000d0e3:	50                   	push   eax
c000d0e4:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d0e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0ef:	e8 72 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d0f4:	58                   	pop    eax
c000d0f5:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d0fa:	5a                   	pop    edx
c000d0fb:	68 b4 8d 03 c0       	push   0xc0038db4
c000d100:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d106:	e8 5b 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d10b:	59                   	pop    ecx
c000d10c:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d111:	5b                   	pop    ebx
c000d112:	68 64 8b 03 c0       	push   0xc0038b64
c000d117:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d11d:	e8 44 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d122:	58                   	pop    eax
c000d123:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d128:	5a                   	pop    edx
c000d129:	68 a4 8b 03 c0       	push   0xc0038ba4
c000d12e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d134:	e8 2d 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d139:	59                   	pop    ecx
c000d13a:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d13f:	5b                   	pop    ebx
c000d140:	68 a0 8d 03 c0       	push   0xc0038da0
c000d145:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d14b:	e8 16 39 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d150:	58                   	pop    eax
c000d151:	5a                   	pop    edx
c000d152:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d155:	68 b8 8d 03 c0       	push   0xc0038db8
c000d15a:	e8 61 fd ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000d15f:	59                   	pop    ecx
c000d160:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d163:	5b                   	pop    ebx
c000d164:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d167:	68 c1 8d 03 c0       	push   0xc0038dc1
c000d16c:	e8 4f fd ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000d171:	5a                   	pop    edx
c000d172:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d175:	59                   	pop    ecx
c000d176:	8b 00                	mov    eax,DWORD PTR [eax]
c000d178:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d17b:	68 59 9c 03 c0       	push   0xc0039c59
c000d180:	e8 3b fd ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000d185:	5b                   	pop    ebx
c000d186:	58                   	pop    eax
c000d187:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d18c:	68 e8 8b 03 c0       	push   0xc0038be8
c000d191:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d197:	e8 ca 38 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d19c:	58                   	pop    eax
c000d19d:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d1a2:	5a                   	pop    edx
c000d1a3:	68 ca 8d 03 c0       	push   0xc0038dca
c000d1a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1ae:	e8 b3 38 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d1b3:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d1b8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d1be:	e8 22 18 01 00       	call   c001e9e5 <CPU::readCR0()>
c000d1c3:	59                   	pop    ecx
c000d1c4:	5a                   	pop    edx
c000d1c5:	50                   	push   eax
c000d1c6:	53                   	push   ebx
c000d1c7:	e8 c0 38 00 00       	call   c0010a8c <VgaText::putx(unsigned int)>
c000d1cc:	59                   	pop    ecx
c000d1cd:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d1d2:	5b                   	pop    ebx
c000d1d3:	68 d4 8d 03 c0       	push   0xc0038dd4
c000d1d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1de:	e8 83 38 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d1e3:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d1e8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d1ee:	e8 04 18 01 00       	call   c001e9f7 <CPU::readCR2()>
c000d1f3:	5a                   	pop    edx
c000d1f4:	59                   	pop    ecx
c000d1f5:	50                   	push   eax
c000d1f6:	53                   	push   ebx
c000d1f7:	e8 90 38 00 00       	call   c0010a8c <VgaText::putx(unsigned int)>
c000d1fc:	5b                   	pop    ebx
c000d1fd:	58                   	pop    eax
c000d1fe:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d203:	68 de 8d 03 c0       	push   0xc0038dde
c000d208:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d20e:	e8 53 38 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d213:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d218:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d21e:	e8 e6 17 01 00       	call   c001ea09 <CPU::readCR3()>
c000d223:	5a                   	pop    edx
c000d224:	59                   	pop    ecx
c000d225:	50                   	push   eax
c000d226:	53                   	push   ebx
c000d227:	e8 60 38 00 00       	call   c0010a8c <VgaText::putx(unsigned int)>
c000d22c:	5b                   	pop    ebx
c000d22d:	58                   	pop    eax
c000d22e:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d233:	68 f1 8d 03 c0       	push   0xc0038df1
c000d238:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d23e:	e8 23 38 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d243:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d248:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d24e:	e8 c8 17 01 00       	call   c001ea1b <CPU::readCR4()>
c000d253:	5a                   	pop    edx
c000d254:	59                   	pop    ecx
c000d255:	50                   	push   eax
c000d256:	53                   	push   ebx
c000d257:	e8 30 38 00 00       	call   c0010a8c <VgaText::putx(unsigned int)>
c000d25c:	5b                   	pop    ebx
c000d25d:	58                   	pop    eax
c000d25e:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d263:	68 fb 8d 03 c0       	push   0xc0038dfb
c000d268:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d26e:	e8 f3 37 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d273:	5a                   	pop    edx
c000d274:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d279:	59                   	pop    ecx
c000d27a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d280:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d283:	50                   	push   eax
c000d284:	e8 03 38 00 00       	call   c0010a8c <VgaText::putx(unsigned int)>
c000d289:	5b                   	pop    ebx
c000d28a:	58                   	pop    eax
c000d28b:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d290:	68 12 8e 03 c0       	push   0xc0038e12
c000d295:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d29b:	e8 c6 37 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d2a0:	5a                   	pop    edx
c000d2a1:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d2a6:	59                   	pop    ecx
c000d2a7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d2ad:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d2b0:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d2b3:	50                   	push   eax
c000d2b4:	e8 d3 37 00 00       	call   c0010a8c <VgaText::putx(unsigned int)>
c000d2b9:	5b                   	pop    ebx
c000d2ba:	58                   	pop    eax
c000d2bb:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d2c0:	68 12 8e 03 c0       	push   0xc0038e12
c000d2c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d2cb:	e8 96 37 00 00       	call   c0010a66 <VgaText::puts(char const*)>
c000d2d0:	59                   	pop    ecx
c000d2d1:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c000d2d6:	5b                   	pop    ebx
c000d2d7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d2dd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d2e0:	8b 12                	mov    edx,DWORD PTR [edx]
c000d2e2:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d2e5:	50                   	push   eax
c000d2e6:	e8 a1 37 00 00       	call   c0010a8c <VgaText::putx(unsigned int)>
c000d2eb:	83 c4 10             	add    esp,0x10
c000d2ee:	b2 fe                	mov    dl,0xfe
c000d2f0:	e4 60                	in     al,0x60
c000d2f2:	3c 1c                	cmp    al,0x1c
c000d2f4:	74 04                	je     c000d2fa <panic(char const*)+0x31c>
c000d2f6:	3c 5a                	cmp    al,0x5a
c000d2f8:	75 f6                	jne    c000d2f0 <panic(char const*)+0x312>
c000d2fa:	e4 64                	in     al,0x64
c000d2fc:	a8 02                	test   al,0x2
c000d2fe:	75 fa                	jne    c000d2fa <panic(char const*)+0x31c>
c000d300:	88 d0                	mov    al,dl
c000d302:	e6 64                	out    0x64,al
c000d304:	fa                   	cli    
c000d305:	f4                   	hlt    
c000d306:	eb e8                	jmp    c000d2f0 <panic(char const*)+0x312>

c000d308 <sbrk>:
c000d308:	55                   	push   ebp
c000d309:	57                   	push   edi
c000d30a:	56                   	push   esi
c000d30b:	53                   	push   ebx
c000d30c:	83 ec 1c             	sub    esp,0x1c
c000d30f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d313:	85 db                	test   ebx,ebx
c000d315:	74 37                	je     c000d34e <sbrk+0x46>
c000d317:	78 3f                	js     c000d358 <sbrk+0x50>
c000d319:	e8 88 9e 00 00       	call   c00171a6 <thisCPU()>
c000d31e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000d324:	83 e0 01             	and    eax,0x1
c000d327:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d32b:	a1 10 ae 03 c0       	mov    eax,ds:0xc003ae10
c000d330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d334:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000d33a:	89 d8                	mov    eax,ebx
c000d33c:	78 35                	js     c000d373 <sbrk+0x6b>
c000d33e:	c1 f8 0c             	sar    eax,0xc
c000d341:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d345:	89 c7                	mov    edi,eax
c000d347:	be 00 00 00 00       	mov    esi,0x0
c000d34c:	eb 3c                	jmp    c000d38a <sbrk+0x82>
c000d34e:	a1 10 ae 03 c0       	mov    eax,ds:0xc003ae10
c000d353:	e9 ad 00 00 00       	jmp    c000d405 <sbrk+0xfd>
c000d358:	83 ec 08             	sub    esp,0x8
c000d35b:	53                   	push   ebx
c000d35c:	68 18 8e 03 c0       	push   0xc0038e18
c000d361:	e8 5a fb ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000d366:	83 c4 10             	add    esp,0x10
c000d369:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d36e:	e9 92 00 00 00       	jmp    c000d405 <sbrk+0xfd>
c000d373:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000d379:	eb c3                	jmp    c000d33e <sbrk+0x36>
c000d37b:	81 05 10 ae 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc003ae10,0x1000
c000d385:	46                   	inc    esi
c000d386:	39 f7                	cmp    edi,esi
c000d388:	74 34                	je     c000d3be <sbrk+0xb6>
c000d38a:	e8 e0 40 00 00       	call   c001146f <Virt::getAKernelVAS()>
c000d38f:	89 c3                	mov    ebx,eax
c000d391:	8b 2d 10 ae 03 c0    	mov    ebp,DWORD PTR ds:0xc003ae10
c000d397:	e8 c9 06 00 00       	call   c000da65 <Phys::allocatePage()>
c000d39c:	68 01 04 00 00       	push   0x401
c000d3a1:	55                   	push   ebp
c000d3a2:	50                   	push   eax
c000d3a3:	53                   	push   ebx
c000d3a4:	e8 6d 45 00 00       	call   c0011916 <VAS::mapPage(unsigned long, unsigned long, int)>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d3b1:	74 c8                	je     c000d37b <sbrk+0x73>
c000d3b3:	8b 1d 10 ae 03 c0    	mov    ebx,DWORD PTR ds:0xc003ae10
c000d3b9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d3bc:	eb bd                	jmp    c000d37b <sbrk+0x73>
c000d3be:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d3c3:	74 48                	je     c000d40d <sbrk+0x105>
c000d3c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3c9:	89 d3                	mov    ebx,edx
c000d3cb:	c1 eb 0a             	shr    ebx,0xa
c000d3ce:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000d3d4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000d3da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3de:	c1 e0 0c             	shl    eax,0xc
c000d3e1:	01 d0                	add    eax,edx
c000d3e3:	c1 e8 0a             	shr    eax,0xa
c000d3e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d3eb:	2d 00 00 40 00       	sub    eax,0x400000
c000d3f0:	39 c3                	cmp    ebx,eax
c000d3f2:	77 0d                	ja     c000d401 <sbrk+0xf9>
c000d3f4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d3f7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d3fd:	39 d8                	cmp    eax,ebx
c000d3ff:	73 f3                	jae    c000d3f4 <sbrk+0xec>
c000d401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d405:	83 c4 1c             	add    esp,0x1c
c000d408:	5b                   	pop    ebx
c000d409:	5e                   	pop    esi
c000d40a:	5f                   	pop    edi
c000d40b:	5d                   	pop    ebp
c000d40c:	c3                   	ret    
c000d40d:	e8 f7 15 01 00       	call   c001ea09 <CPU::readCR3()>
c000d412:	83 ec 0c             	sub    esp,0xc
c000d415:	50                   	push   eax
c000d416:	e8 12 16 01 00       	call   c001ea2d <CPU::writeCR3(unsigned long)>
c000d41b:	83 c4 10             	add    esp,0x10
c000d41e:	eb e1                	jmp    c000d401 <sbrk+0xf9>

c000d420 <mmap>:
c000d420:	83 ec 18             	sub    esp,0x18
c000d423:	68 48 8e 03 c0       	push   0xc0038e48
c000d428:	e8 b1 fb ff ff       	call   c000cfde <panic(char const*)>
c000d42d:	b8 00 00 00 00       	mov    eax,0x0
c000d432:	83 c4 1c             	add    esp,0x1c
c000d435:	c3                   	ret    

c000d436 <munmap>:
c000d436:	83 ec 18             	sub    esp,0x18
c000d439:	68 4d 8e 03 c0       	push   0xc0038e4d
c000d43e:	e8 9b fb ff ff       	call   c000cfde <panic(char const*)>
c000d443:	b8 00 00 00 00       	mov    eax,0x0
c000d448:	83 c4 1c             	add    esp,0x1c
c000d44b:	c3                   	ret    

c000d44c <liballoc_lock()>:
c000d44c:	83 ec 0c             	sub    esp,0xc
c000d44f:	e8 0e 0f 00 00       	call   c000e362 <lockScheduler()>
c000d454:	b8 00 00 00 00       	mov    eax,0x0
c000d459:	83 c4 0c             	add    esp,0xc
c000d45c:	c3                   	ret    

c000d45d <liballoc_unlock()>:
c000d45d:	83 ec 0c             	sub    esp,0xc
c000d460:	e8 ff 0e 00 00       	call   c000e364 <unlockScheduler()>
c000d465:	b8 00 00 00 00       	mov    eax,0x0
c000d46a:	83 c4 0c             	add    esp,0xc
c000d46d:	c3                   	ret    

c000d46e <liballoc_alloc(int)>:
c000d46e:	83 ec 0c             	sub    esp,0xc
c000d471:	e8 f9 3f 00 00       	call   c001146f <Virt::getAKernelVAS()>
c000d476:	83 ec 04             	sub    esp,0x4
c000d479:	6a 01                	push   0x1
c000d47b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d47f:	50                   	push   eax
c000d480:	e8 91 45 00 00       	call   c0011a16 <VAS::allocatePages(int, int)>
c000d485:	83 c4 1c             	add    esp,0x1c
c000d488:	c3                   	ret    

c000d489 <liballoc_free(void*, int)>:
c000d489:	83 ec 0c             	sub    esp,0xc
c000d48c:	e8 de 3f 00 00       	call   c001146f <Virt::getAKernelVAS()>
c000d491:	83 ec 08             	sub    esp,0x8
c000d494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d498:	50                   	push   eax
c000d499:	e8 9a 42 00 00       	call   c0011738 <VAS::freeAllocatedPages(unsigned long)>
c000d49e:	b8 00 00 00 00       	mov    eax,0x0
c000d4a3:	83 c4 1c             	add    esp,0x1c
c000d4a6:	c3                   	ret    

c000d4a7 <realloc>:
c000d4a7:	83 ec 14             	sub    esp,0x14
c000d4aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4b2:	e8 ba 41 ff ff       	call   c0001671 <dlrealloc>
c000d4b7:	83 c4 1c             	add    esp,0x1c
c000d4ba:	c3                   	ret    

c000d4bb <malloc>:
c000d4bb:	83 ec 18             	sub    esp,0x18
c000d4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c2:	e8 6d 3c ff ff       	call   c0001134 <dlmalloc>
c000d4c7:	83 c4 1c             	add    esp,0x1c
c000d4ca:	c3                   	ret    

c000d4cb <free>:
c000d4cb:	83 ec 18             	sub    esp,0x18
c000d4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d2:	e8 02 39 ff ff       	call   c0000dd9 <dlfree>
c000d4d7:	83 c4 1c             	add    esp,0x1c
c000d4da:	c3                   	ret    

c000d4db <rfree>:
c000d4db:	83 ec 18             	sub    esp,0x18
c000d4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4e2:	e8 e4 ff ff ff       	call   c000d4cb <free>
c000d4e7:	83 c4 1c             	add    esp,0x1c
c000d4ea:	c3                   	ret    

c000d4eb <calloc>:
c000d4eb:	56                   	push   esi
c000d4ec:	53                   	push   ebx
c000d4ed:	83 ec 10             	sub    esp,0x10
c000d4f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d4f4:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d4f9:	53                   	push   ebx
c000d4fa:	e8 bc ff ff ff       	call   c000d4bb <malloc>
c000d4ff:	89 c6                	mov    esi,eax
c000d501:	83 c4 0c             	add    esp,0xc
c000d504:	53                   	push   ebx
c000d505:	6a 00                	push   0x0
c000d507:	50                   	push   eax
c000d508:	e8 9e 31 ff ff       	call   c00006ab <memset>
c000d50d:	89 f0                	mov    eax,esi
c000d50f:	83 c4 14             	add    esp,0x14
c000d512:	5b                   	pop    ebx
c000d513:	5e                   	pop    esi
c000d514:	c3                   	ret    

c000d515 <hwTextMode_loadInData(VgaText*)>:
c000d515:	57                   	push   edi
c000d516:	56                   	push   esi
c000d517:	53                   	push   ebx
c000d518:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d51c:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d522:	85 c0                	test   eax,eax
c000d524:	7e 30                	jle    c000d556 <hwTextMode_loadInData(VgaText*)+0x41>
c000d526:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d529:	31 f6                	xor    esi,esi
c000d52b:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d52e:	31 c0                	xor    eax,eax
c000d530:	c1 e1 05             	shl    ecx,0x5
c000d533:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d539:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d53d:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d541:	40                   	inc    eax
c000d542:	83 f8 50             	cmp    eax,0x50
c000d545:	75 f2                	jne    c000d539 <hwTextMode_loadInData(VgaText*)+0x24>
c000d547:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d54d:	46                   	inc    esi
c000d54e:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d554:	7f d5                	jg     c000d52b <hwTextMode_loadInData(VgaText*)+0x16>
c000d556:	5b                   	pop    ebx
c000d557:	5e                   	pop    esi
c000d558:	5f                   	pop    edi
c000d559:	c3                   	ret    

c000d55a <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d55a:	56                   	push   esi
c000d55b:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d560:	53                   	push   ebx
c000d561:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d565:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d569:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d56f:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d575:	c1 e0 04             	shl    eax,0x4
c000d578:	83 e6 0f             	and    esi,0xf
c000d57b:	0f b6 c0             	movzx  eax,al
c000d57e:	41                   	inc    ecx
c000d57f:	09 f0                	or     eax,esi
c000d581:	83 c2 02             	add    edx,0x2
c000d584:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d588:	c1 e0 08             	shl    eax,0x8
c000d58b:	09 f0                	or     eax,esi
c000d58d:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d591:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d597:	75 d0                	jne    c000d569 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d599:	5b                   	pop    ebx
c000d59a:	5e                   	pop    esi
c000d59b:	c3                   	ret    

c000d59c <hwTextMode_showCursor(VgaText*, bool)>:
c000d59c:	56                   	push   esi
c000d59d:	53                   	push   ebx
c000d59e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d5a3:	74 38                	je     c000d5dd <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d5a5:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d5aa:	b0 0a                	mov    al,0xa
c000d5ac:	89 da                	mov    edx,ebx
c000d5ae:	ee                   	out    dx,al
c000d5af:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d5b4:	89 ca                	mov    edx,ecx
c000d5b6:	ec                   	in     al,dx
c000d5b7:	b2 0f                	mov    dl,0xf
c000d5b9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d5bd:	83 e0 c0             	and    eax,0xffffffc0
c000d5c0:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d5c6:	09 d0                	or     eax,edx
c000d5c8:	89 ca                	mov    edx,ecx
c000d5ca:	ee                   	out    dx,al
c000d5cb:	b0 0b                	mov    al,0xb
c000d5cd:	89 da                	mov    edx,ebx
c000d5cf:	ee                   	out    dx,al
c000d5d0:	89 ca                	mov    edx,ecx
c000d5d2:	ec                   	in     al,dx
c000d5d3:	83 e0 e0             	and    eax,0xffffffe0
c000d5d6:	83 c8 0f             	or     eax,0xf
c000d5d9:	ee                   	out    dx,al
c000d5da:	5b                   	pop    ebx
c000d5db:	5e                   	pop    esi
c000d5dc:	c3                   	ret    
c000d5dd:	b0 0a                	mov    al,0xa
c000d5df:	ba d4 03 00 00       	mov    edx,0x3d4
c000d5e4:	ee                   	out    dx,al
c000d5e5:	b0 20                	mov    al,0x20
c000d5e7:	ba d5 03 00 00       	mov    edx,0x3d5
c000d5ec:	ee                   	out    dx,al
c000d5ed:	5b                   	pop    ebx
c000d5ee:	5e                   	pop    esi
c000d5ef:	c3                   	ret    

c000d5f0 <hwTextMode_update(VgaText*)>:
c000d5f0:	c3                   	ret    

c000d5f1 <hwTextMode_updateCursor(VgaText*)>:
c000d5f1:	56                   	push   esi
c000d5f2:	b9 19 00 00 00       	mov    ecx,0x19
c000d5f7:	53                   	push   ebx
c000d5f8:	be d4 03 00 00       	mov    esi,0x3d4
c000d5fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d601:	89 f2                	mov    edx,esi
c000d603:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d609:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d60f:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d612:	c1 e1 04             	shl    ecx,0x4
c000d615:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d61b:	b0 0f                	mov    al,0xf
c000d61d:	ee                   	out    dx,al
c000d61e:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d623:	88 c8                	mov    al,cl
c000d625:	89 da                	mov    edx,ebx
c000d627:	ee                   	out    dx,al
c000d628:	b0 0e                	mov    al,0xe
c000d62a:	89 f2                	mov    edx,esi
c000d62c:	ee                   	out    dx,al
c000d62d:	89 c8                	mov    eax,ecx
c000d62f:	89 da                	mov    edx,ebx
c000d631:	66 c1 e8 08          	shr    ax,0x8
c000d635:	ee                   	out    dx,al
c000d636:	5b                   	pop    ebx
c000d637:	5e                   	pop    esi
c000d638:	c3                   	ret    

c000d639 <hwTextMode_disableBlink(VgaText*, bool)>:
c000d639:	ba da 03 00 00       	mov    edx,0x3da
c000d63e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d643:	75 18                	jne    c000d65d <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d645:	ec                   	in     al,dx
c000d646:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d64b:	b0 30                	mov    al,0x30
c000d64d:	89 ca                	mov    edx,ecx
c000d64f:	ee                   	out    dx,al
c000d650:	ba c1 03 00 00       	mov    edx,0x3c1
c000d655:	ec                   	in     al,dx
c000d656:	83 c8 08             	or     eax,0x8
c000d659:	89 ca                	mov    edx,ecx
c000d65b:	ee                   	out    dx,al
c000d65c:	c3                   	ret    
c000d65d:	ec                   	in     al,dx
c000d65e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d663:	b0 30                	mov    al,0x30
c000d665:	89 ca                	mov    edx,ecx
c000d667:	ee                   	out    dx,al
c000d668:	ba c1 03 00 00       	mov    edx,0x3c1
c000d66d:	ec                   	in     al,dx
c000d66e:	83 e0 f7             	and    eax,0xfffffff7
c000d671:	89 ca                	mov    edx,ecx
c000d673:	ee                   	out    dx,al
c000d674:	c3                   	ret    

c000d675 <hwTextMode_scrollScreen(VgaText*)>:
c000d675:	55                   	push   ebp
c000d676:	bd 02 00 00 00       	mov    ebp,0x2
c000d67b:	57                   	push   edi
c000d67c:	56                   	push   esi
c000d67d:	53                   	push   ebx
c000d67e:	83 ec 1c             	sub    esp,0x1c
c000d681:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d689:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d68d:	31 c0                	xor    eax,eax
c000d68f:	eb 0b                	jmp    c000d69c <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d691:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d697:	74 57                	je     c000d6f0 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d699:	43                   	inc    ebx
c000d69a:	89 f0                	mov    eax,esi
c000d69c:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d6a2:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d6a8:	88 13                	mov    BYTE PTR [ebx],dl
c000d6aa:	8d 70 01             	lea    esi,[eax+0x1]
c000d6ad:	83 fd 18             	cmp    ebp,0x18
c000d6b0:	75 df                	jne    c000d691 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d6b2:	a8 01                	test   al,0x1
c000d6b4:	75 13                	jne    c000d6c9 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d6b6:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d6b9:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d6bf:	75 d8                	jne    c000d699 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d6c1:	83 c4 1c             	add    esp,0x1c
c000d6c4:	5b                   	pop    ebx
c000d6c5:	5e                   	pop    esi
c000d6c6:	5f                   	pop    edi
c000d6c7:	5d                   	pop    ebp
c000d6c8:	c3                   	ret    
c000d6c9:	83 ec 08             	sub    esp,0x8
c000d6cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6d0:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d6d7:	50                   	push   eax
c000d6d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d6dc:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d6e3:	50                   	push   eax
c000d6e4:	e8 bd 29 00 00       	call   c00100a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	88 07                	mov    BYTE PTR [edi],al
c000d6ee:	eb c9                	jmp    c000d6b9 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d6f0:	45                   	inc    ebp
c000d6f1:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d6f9:	eb 8e                	jmp    c000d689 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d6fb <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d6fb:	56                   	push   esi
c000d6fc:	53                   	push   ebx
c000d6fd:	83 ec 0c             	sub    esp,0xc
c000d700:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d704:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d708:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d70d:	50                   	push   eax
c000d70e:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d713:	50                   	push   eax
c000d714:	e8 8d 29 00 00       	call   c00100a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000d719:	5a                   	pop    edx
c000d71a:	0f b6 c0             	movzx  eax,al
c000d71d:	59                   	pop    ecx
c000d71e:	50                   	push   eax
c000d71f:	89 f0                	mov    eax,esi
c000d721:	0f be f0             	movsx  esi,al
c000d724:	56                   	push   esi
c000d725:	e8 22 2a 00 00       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c000d72a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d72e:	ba 19 00 00 00       	mov    edx,0x19
c000d733:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d739:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d73c:	8d 14 92             	lea    edx,[edx+edx*4]
c000d73f:	c1 e1 04             	shl    ecx,0x4
c000d742:	c1 e2 04             	shl    edx,0x4
c000d745:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d749:	01 ca                	add    edx,ecx
c000d74b:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d753:	83 c4 14             	add    esp,0x14
c000d756:	5b                   	pop    ebx
c000d757:	5e                   	pop    esi
c000d758:	c3                   	ret    

c000d759 <setupTextMode()>:
c000d759:	c7 05 78 be 03 c0 39 d6 00 c0 	mov    DWORD PTR ds:0xc003be78,0xc000d639
c000d763:	c7 05 64 be 03 c0 15 d5 00 c0 	mov    DWORD PTR ds:0xc003be64,0xc000d515
c000d76d:	c7 05 60 be 03 c0 5a d5 00 c0 	mov    DWORD PTR ds:0xc003be60,0xc000d55a
c000d777:	c7 05 6c be 03 c0 75 d6 00 c0 	mov    DWORD PTR ds:0xc003be6c,0xc000d675
c000d781:	c7 05 74 be 03 c0 9c d5 00 c0 	mov    DWORD PTR ds:0xc003be74,0xc000d59c
c000d78b:	c7 05 68 be 03 c0 f0 d5 00 c0 	mov    DWORD PTR ds:0xc003be68,0xc000d5f0
c000d795:	c7 05 70 be 03 c0 f1 d5 00 c0 	mov    DWORD PTR ds:0xc003be70,0xc000d5f1
c000d79f:	c7 05 7c be 03 c0 fb d6 00 c0 	mov    DWORD PTR ds:0xc003be7c,0xc000d6fb
c000d7a9:	c3                   	ret    

c000d7aa <kernel_main>:
c000d7aa:	57                   	push   edi
c000d7ab:	bf f9 03 00 00       	mov    edi,0x3f9
c000d7b0:	56                   	push   esi
c000d7b1:	31 f6                	xor    esi,esi
c000d7b3:	53                   	push   ebx
c000d7b4:	83 ec 10             	sub    esp,0x10
c000d7b7:	e8 44 27 00 00       	call   c000ff00 <installVgaTextImplementation()>
c000d7bc:	e8 98 ff ff ff       	call   c000d759 <setupTextMode()>
c000d7c1:	89 f0                	mov    eax,esi
c000d7c3:	89 fa                	mov    edx,edi
c000d7c5:	ee                   	out    dx,al
c000d7c6:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d7cb:	b0 80                	mov    al,0x80
c000d7cd:	89 da                	mov    edx,ebx
c000d7cf:	ee                   	out    dx,al
c000d7d0:	b1 03                	mov    cl,0x3
c000d7d2:	ba f8 03 00 00       	mov    edx,0x3f8
c000d7d7:	88 c8                	mov    al,cl
c000d7d9:	ee                   	out    dx,al
c000d7da:	89 f0                	mov    eax,esi
c000d7dc:	89 fa                	mov    edx,edi
c000d7de:	ee                   	out    dx,al
c000d7df:	88 c8                	mov    al,cl
c000d7e1:	89 da                	mov    edx,ebx
c000d7e3:	ee                   	out    dx,al
c000d7e4:	b0 c7                	mov    al,0xc7
c000d7e6:	ba fa 03 00 00       	mov    edx,0x3fa
c000d7eb:	ee                   	out    dx,al
c000d7ec:	b0 0b                	mov    al,0xb
c000d7ee:	ba fc 03 00 00       	mov    edx,0x3fc
c000d7f3:	ee                   	out    dx,al
c000d7f4:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d7f9:	83 ec 0c             	sub    esp,0xc
c000d7fc:	05 ff 0f 00 00       	add    eax,0xfff
c000d801:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d806:	50                   	push   eax
c000d807:	e8 4d 03 00 00       	call   c000db59 <Phys::physicalMemorySetup(unsigned int)>
c000d80c:	e8 df 3b 00 00       	call   c00113f0 <Virt::virtualMemorySetup()>
c000d811:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d817:	83 c4 10             	add    esp,0x10
c000d81a:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d820:	75 0e                	jne    c000d830 <kernel_main+0x86>
c000d822:	89 d8                	mov    eax,ebx
c000d824:	25 48 03 00 00       	and    eax,0x348
c000d829:	3d 00 03 00 00       	cmp    eax,0x300
c000d82e:	74 10                	je     c000d840 <kernel_main+0x96>
c000d830:	83 ec 0c             	sub    esp,0xc
c000d833:	68 b7 8d 03 c0       	push   0xc0038db7
c000d838:	e8 a1 f7 ff ff       	call   c000cfde <panic(char const*)>
c000d83d:	83 c4 10             	add    esp,0x10
c000d840:	83 ec 0c             	sub    esp,0xc
c000d843:	89 1d 94 bb 03 c0    	mov    DWORD PTR ds:0xc003bb94,ebx
c000d849:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d84d:	53                   	push   ebx
c000d84e:	e8 47 3d 00 00       	call   c001159a <VAS::VAS()>
c000d853:	89 1d 9c be 03 c0    	mov    DWORD PTR ds:0xc003be9c,ebx
c000d859:	e8 c2 27 ff ff       	call   c0000020 <callGlobalConstructors>
c000d85e:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d865:	e8 06 4c 00 00       	call   c0012470 <operator new(unsigned long)>
c000d86a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d86d:	89 c6                	mov    esi,eax
c000d86f:	e8 26 d9 ff ff       	call   c000b19a <Computer::Computer()>
c000d874:	6a 00                	push   0x0
c000d876:	89 35 e8 b9 03 c0    	mov    DWORD PTR ds:0xc003b9e8,esi
c000d87c:	6a 00                	push   0x0
c000d87e:	6a 00                	push   0x0
c000d880:	56                   	push   esi
c000d881:	e8 d8 dd ff ff       	call   c000b65e <Computer::open(int, int, void*)>
c000d886:	83 c4 14             	add    esp,0x14
c000d889:	53                   	push   ebx
c000d88a:	e8 1b 3f 00 00       	call   c00117aa <VAS::~VAS()>
c000d88f:	c7 04 24 54 8e 03 c0 	mov    DWORD PTR [esp],0xc0038e54
c000d896:	e8 43 f7 ff ff       	call   c000cfde <panic(char const*)>
c000d89b:	83 c4 20             	add    esp,0x20
c000d89e:	5b                   	pop    ebx
c000d89f:	5e                   	pop    esi
c000d8a0:	5f                   	pop    edi
c000d8a1:	c3                   	ret    

c000d8a2 <Phys::allocateDMA(unsigned long)>:
c000d8a2:	55                   	push   ebp
c000d8a3:	31 d2                	xor    edx,edx
c000d8a5:	57                   	push   edi
c000d8a6:	31 ed                	xor    ebp,ebp
c000d8a8:	56                   	push   esi
c000d8a9:	31 c9                	xor    ecx,ecx
c000d8ab:	53                   	push   ebx
c000d8ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d8b0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d8b6:	31 c0                	xor    eax,eax
c000d8b8:	c1 ee 0c             	shr    esi,0xc
c000d8bb:	eb 17                	jmp    c000d8d4 <Phys::allocateDMA(unsigned long)+0x32>
c000d8bd:	85 c9                	test   ecx,ecx
c000d8bf:	75 04                	jne    c000d8c5 <Phys::allocateDMA(unsigned long)+0x23>
c000d8c1:	89 d5                	mov    ebp,edx
c000d8c3:	89 d0                	mov    eax,edx
c000d8c5:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d8c8:	39 de                	cmp    esi,ebx
c000d8ca:	74 20                	je     c000d8ec <Phys::allocateDMA(unsigned long)+0x4a>
c000d8cc:	42                   	inc    edx
c000d8cd:	89 d9                	mov    ecx,ebx
c000d8cf:	83 fa 2f             	cmp    edx,0x2f
c000d8d2:	7f 11                	jg     c000d8e5 <Phys::allocateDMA(unsigned long)+0x43>
c000d8d4:	80 ba c0 bb 03 c0 00 	cmp    BYTE PTR [edx-0x3ffc4440],0x0
c000d8db:	74 e0                	je     c000d8bd <Phys::allocateDMA(unsigned long)+0x1b>
c000d8dd:	31 c9                	xor    ecx,ecx
c000d8df:	42                   	inc    edx
c000d8e0:	83 fa 2f             	cmp    edx,0x2f
c000d8e3:	7e ef                	jle    c000d8d4 <Phys::allocateDMA(unsigned long)+0x32>
c000d8e5:	5b                   	pop    ebx
c000d8e6:	31 c0                	xor    eax,eax
c000d8e8:	5e                   	pop    esi
c000d8e9:	5f                   	pop    edi
c000d8ea:	5d                   	pop    ebp
c000d8eb:	c3                   	ret    
c000d8ec:	8d 14 30             	lea    edx,[eax+esi*1]
c000d8ef:	89 d7                	mov    edi,edx
c000d8f1:	4f                   	dec    edi
c000d8f2:	79 03                	jns    c000d8f7 <Phys::allocateDMA(unsigned long)+0x55>
c000d8f4:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d8f7:	c1 ff 04             	sar    edi,0x4
c000d8fa:	89 c2                	mov    edx,eax
c000d8fc:	c1 fa 04             	sar    edx,0x4
c000d8ff:	39 fa                	cmp    edx,edi
c000d901:	75 2f                	jne    c000d932 <Phys::allocateDMA(unsigned long)+0x90>
c000d903:	85 db                	test   ebx,ebx
c000d905:	74 1a                	je     c000d921 <Phys::allocateDMA(unsigned long)+0x7f>
c000d907:	be c0 bb 03 c0       	mov    esi,0xc003bbc0
c000d90c:	8d 90 c0 bb 03 c0    	lea    edx,[eax-0x3ffc4440]
c000d912:	f7 d6                	not    esi
c000d914:	29 c6                	sub    esi,eax
c000d916:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d919:	42                   	inc    edx
c000d91a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d91d:	39 d9                	cmp    ecx,ebx
c000d91f:	7f f5                	jg     c000d916 <Phys::allocateDMA(unsigned long)+0x74>
c000d921:	85 ff                	test   edi,edi
c000d923:	74 13                	je     c000d938 <Phys::allocateDMA(unsigned long)+0x96>
c000d925:	5b                   	pop    ebx
c000d926:	05 50 20 0c 00       	add    eax,0xc2050
c000d92b:	5e                   	pop    esi
c000d92c:	c1 e0 0c             	shl    eax,0xc
c000d92f:	5f                   	pop    edi
c000d930:	5d                   	pop    ebp
c000d931:	c3                   	ret    
c000d932:	89 ea                	mov    edx,ebp
c000d934:	31 c9                	xor    ecx,ecx
c000d936:	eb a7                	jmp    c000d8df <Phys::allocateDMA(unsigned long)+0x3d>
c000d938:	5b                   	pop    ebx
c000d939:	c1 e0 0c             	shl    eax,0xc
c000d93c:	5e                   	pop    esi
c000d93d:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d942:	5f                   	pop    edi
c000d943:	5d                   	pop    ebp
c000d944:	c3                   	ret    

c000d945 <Phys::freeDMA(unsigned long, unsigned long)>:
c000d945:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d949:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d94d:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d953:	c1 e9 0c             	shr    ecx,0xc
c000d956:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d95b:	76 25                	jbe    c000d982 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d95d:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d962:	c1 e8 0c             	shr    eax,0xc
c000d965:	8d 50 10             	lea    edx,[eax+0x10]
c000d968:	85 c9                	test   ecx,ecx
c000d96a:	74 15                	je     c000d981 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d96c:	8d 82 c0 bb 03 c0    	lea    eax,[edx-0x3ffc4440]
c000d972:	8d 94 11 c0 bb 03 c0 	lea    edx,[ecx+edx*1-0x3ffc4440]
c000d979:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d97c:	40                   	inc    eax
c000d97d:	39 d0                	cmp    eax,edx
c000d97f:	75 f8                	jne    c000d979 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d981:	c3                   	ret    
c000d982:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d988:	c1 ea 0c             	shr    edx,0xc
c000d98b:	eb db                	jmp    c000d968 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d98d <Phys::setPageState(unsigned long, bool)>:
c000d98d:	56                   	push   esi
c000d98e:	ba 01 00 00 00       	mov    edx,0x1
c000d993:	53                   	push   ebx
c000d994:	8b 35 14 ae 03 c0    	mov    esi,DWORD PTR ds:0xc003ae14
c000d99a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d99e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d9a2:	89 c8                	mov    eax,ecx
c000d9a4:	83 e1 07             	and    ecx,0x7
c000d9a7:	c1 e8 03             	shr    eax,0x3
c000d9aa:	d3 e3                	shl    ebx,cl
c000d9ac:	01 c6                	add    esi,eax
c000d9ae:	d3 e2                	shl    edx,cl
c000d9b0:	f7 d2                	not    edx
c000d9b2:	20 16                	and    BYTE PTR [esi],dl
c000d9b4:	03 05 14 ae 03 c0    	add    eax,DWORD PTR ds:0xc003ae14
c000d9ba:	08 18                	or     BYTE PTR [eax],bl
c000d9bc:	5b                   	pop    ebx
c000d9bd:	5e                   	pop    esi
c000d9be:	c3                   	ret    

c000d9bf <Phys::getPageState(unsigned long)>:
c000d9bf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d9c3:	8b 15 14 ae 03 c0    	mov    edx,DWORD PTR ds:0xc003ae14
c000d9c9:	89 c8                	mov    eax,ecx
c000d9cb:	83 e1 07             	and    ecx,0x7
c000d9ce:	c1 e8 03             	shr    eax,0x3
c000d9d1:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000d9d5:	d3 f8                	sar    eax,cl
c000d9d7:	83 e0 01             	and    eax,0x1
c000d9da:	c3                   	ret    

c000d9db <Phys::freePage(unsigned long)>:
c000d9db:	53                   	push   ebx
c000d9dc:	83 ec 08             	sub    esp,0x8
c000d9df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d9e3:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000d9e9:	76 57                	jbe    c000da42 <Phys::freePage(unsigned long)+0x67>
c000d9eb:	c1 eb 0c             	shr    ebx,0xc
c000d9ee:	53                   	push   ebx
c000d9ef:	e8 cb ff ff ff       	call   c000d9bf <Phys::getPageState(unsigned long)>
c000d9f4:	5a                   	pop    edx
c000d9f5:	84 c0                	test   al,al
c000d9f7:	74 5b                	je     c000da54 <Phys::freePage(unsigned long)+0x79>
c000d9f9:	a1 ac bb 03 c0       	mov    eax,ds:0xc003bbac
c000d9fe:	48                   	dec    eax
c000d9ff:	a3 ac bb 03 c0       	mov    ds:0xc003bbac,eax
c000da04:	8d 04 80             	lea    eax,[eax+eax*4]
c000da07:	8d 04 80             	lea    eax,[eax+eax*4]
c000da0a:	c1 e0 02             	shl    eax,0x2
c000da0d:	99                   	cdq    
c000da0e:	f7 3d b0 bb 03 c0    	idiv   DWORD PTR ds:0xc003bbb0
c000da14:	39 05 a8 bb 03 c0    	cmp    DWORD PTR ds:0xc003bba8,eax
c000da1a:	75 13                	jne    c000da2f <Phys::freePage(unsigned long)+0x54>
c000da1c:	83 ec 08             	sub    esp,0x8
c000da1f:	6a 00                	push   0x0
c000da21:	53                   	push   ebx
c000da22:	e8 66 ff ff ff       	call   c000d98d <Phys::setPageState(unsigned long, bool)>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	83 c4 08             	add    esp,0x8
c000da2d:	5b                   	pop    ebx
c000da2e:	c3                   	ret    
c000da2f:	83 ec 0c             	sub    esp,0xc
c000da32:	a3 a8 bb 03 c0       	mov    ds:0xc003bba8,eax
c000da37:	50                   	push   eax
c000da38:	e8 57 28 00 00       	call   c0010294 <VgaText::updateRAMUsageDisplay(int)>
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	eb da                	jmp    c000da1c <Phys::freePage(unsigned long)+0x41>
c000da42:	68 00 10 00 00       	push   0x1000
c000da47:	53                   	push   ebx
c000da48:	e8 f8 fe ff ff       	call   c000d945 <Phys::freeDMA(unsigned long, unsigned long)>
c000da4d:	59                   	pop    ecx
c000da4e:	5b                   	pop    ebx
c000da4f:	83 c4 08             	add    esp,0x8
c000da52:	5b                   	pop    ebx
c000da53:	c3                   	ret    
c000da54:	c7 44 24 10 6f 8e 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038e6f
c000da5c:	83 c4 08             	add    esp,0x8
c000da5f:	5b                   	pop    ebx
c000da60:	e9 79 f5 ff ff       	jmp    c000cfde <panic(char const*)>

c000da65 <Phys::allocatePage()>:
c000da65:	56                   	push   esi
c000da66:	53                   	push   ebx
c000da67:	51                   	push   ecx
c000da68:	8b 35 a0 bb 03 c0    	mov    esi,DWORD PTR ds:0xc003bba0
c000da6e:	89 f3                	mov    ebx,esi
c000da70:	eb 0a                	jmp    c000da7c <Phys::allocatePage()+0x17>
c000da72:	89 1d a0 bb 03 c0    	mov    DWORD PTR ds:0xc003bba0,ebx
c000da78:	39 de                	cmp    esi,ebx
c000da7a:	74 24                	je     c000daa0 <Phys::allocatePage()+0x3b>
c000da7c:	53                   	push   ebx
c000da7d:	e8 3d ff ff ff       	call   c000d9bf <Phys::getPageState(unsigned long)>
c000da82:	5a                   	pop    edx
c000da83:	84 c0                	test   al,al
c000da85:	74 4e                	je     c000dad5 <Phys::allocatePage()+0x70>
c000da87:	43                   	inc    ebx
c000da88:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000da8e:	75 e2                	jne    c000da72 <Phys::allocatePage()+0xd>
c000da90:	31 db                	xor    ebx,ebx
c000da92:	c7 05 a0 bb 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bba0,0x0
c000da9c:	39 de                	cmp    esi,ebx
c000da9e:	75 dc                	jne    c000da7c <Phys::allocatePage()+0x17>
c000daa0:	83 ec 0c             	sub    esp,0xc
c000daa3:	68 00 10 00 00       	push   0x1000
c000daa8:	e8 f5 fd ff ff       	call   c000d8a2 <Phys::allocateDMA(unsigned long)>
c000daad:	83 c4 10             	add    esp,0x10
c000dab0:	85 c0                	test   eax,eax
c000dab2:	75 56                	jne    c000db0a <Phys::allocatePage()+0xa5>
c000dab4:	83 ec 0c             	sub    esp,0xc
c000dab7:	68 85 8e 03 c0       	push   0xc0038e85
c000dabc:	e8 1d f5 ff ff       	call   c000cfde <panic(char const*)>
c000dac1:	83 c4 10             	add    esp,0x10
c000dac4:	8b 1d a0 bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bba0
c000daca:	53                   	push   ebx
c000dacb:	e8 ef fe ff ff       	call   c000d9bf <Phys::getPageState(unsigned long)>
c000dad0:	5a                   	pop    edx
c000dad1:	84 c0                	test   al,al
c000dad3:	75 b2                	jne    c000da87 <Phys::allocatePage()+0x22>
c000dad5:	6a 01                	push   0x1
c000dad7:	53                   	push   ebx
c000dad8:	e8 b0 fe ff ff       	call   c000d98d <Phys::setPageState(unsigned long, bool)>
c000dadd:	a1 ac bb 03 c0       	mov    eax,ds:0xc003bbac
c000dae2:	59                   	pop    ecx
c000dae3:	40                   	inc    eax
c000dae4:	5b                   	pop    ebx
c000dae5:	a3 ac bb 03 c0       	mov    ds:0xc003bbac,eax
c000daea:	8d 04 80             	lea    eax,[eax+eax*4]
c000daed:	8d 04 80             	lea    eax,[eax+eax*4]
c000daf0:	c1 e0 02             	shl    eax,0x2
c000daf3:	99                   	cdq    
c000daf4:	f7 3d b0 bb 03 c0    	idiv   DWORD PTR ds:0xc003bbb0
c000dafa:	39 05 a8 bb 03 c0    	cmp    DWORD PTR ds:0xc003bba8,eax
c000db00:	75 0c                	jne    c000db0e <Phys::allocatePage()+0xa9>
c000db02:	a1 a0 bb 03 c0       	mov    eax,ds:0xc003bba0
c000db07:	c1 e0 0c             	shl    eax,0xc
c000db0a:	5a                   	pop    edx
c000db0b:	5b                   	pop    ebx
c000db0c:	5e                   	pop    esi
c000db0d:	c3                   	ret    
c000db0e:	83 ec 0c             	sub    esp,0xc
c000db11:	a3 a8 bb 03 c0       	mov    ds:0xc003bba8,eax
c000db16:	50                   	push   eax
c000db17:	e8 78 27 00 00       	call   c0010294 <VgaText::updateRAMUsageDisplay(int)>
c000db1c:	83 c4 10             	add    esp,0x10
c000db1f:	eb e1                	jmp    c000db02 <Phys::allocatePage()+0x9d>

c000db21 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000db21:	56                   	push   esi
c000db22:	53                   	push   ebx
c000db23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db27:	39 1d a4 bb 03 c0    	cmp    DWORD PTR ds:0xc003bba4,ebx
c000db2d:	73 06                	jae    c000db35 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000db2f:	89 1d a4 bb 03 c0    	mov    DWORD PTR ds:0xc003bba4,ebx
c000db35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db39:	c1 eb 0c             	shr    ebx,0xc
c000db3c:	c1 e8 0c             	shr    eax,0xc
c000db3f:	39 d8                	cmp    eax,ebx
c000db41:	73 13                	jae    c000db56 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000db43:	6a 00                	push   0x0
c000db45:	8d 70 01             	lea    esi,[eax+0x1]
c000db48:	50                   	push   eax
c000db49:	e8 3f fe ff ff       	call   c000d98d <Phys::setPageState(unsigned long, bool)>
c000db4e:	5a                   	pop    edx
c000db4f:	89 f0                	mov    eax,esi
c000db51:	59                   	pop    ecx
c000db52:	39 f3                	cmp    ebx,esi
c000db54:	75 ed                	jne    c000db43 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000db56:	5b                   	pop    ebx
c000db57:	5e                   	pop    esi
c000db58:	c3                   	ret    

c000db59 <Phys::physicalMemorySetup(unsigned int)>:
c000db59:	55                   	push   ebp
c000db5a:	57                   	push   edi
c000db5b:	56                   	push   esi
c000db5c:	53                   	push   ebx
c000db5d:	31 db                	xor    ebx,ebx
c000db5f:	83 ec 30             	sub    esp,0x30
c000db62:	6a 30                	push   0x30
c000db64:	6a 00                	push   0x0
c000db66:	68 c0 bb 03 c0       	push   0xc003bbc0
c000db6b:	e8 3b 2b ff ff       	call   c00006ab <memset>
c000db70:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000db74:	25 00 f0 ff ff       	and    eax,0xfffff000
c000db79:	05 00 10 00 00       	add    eax,0x1000
c000db7e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	83 ec 08             	sub    esp,0x8
c000db88:	6a 01                	push   0x1
c000db8a:	53                   	push   ebx
c000db8b:	43                   	inc    ebx
c000db8c:	e8 fc fd ff ff       	call   c000d98d <Phys::setPageState(unsigned long, bool)>
c000db91:	83 c4 10             	add    esp,0x10
c000db94:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000db9a:	75 e9                	jne    c000db85 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000db9c:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000dba3:	66 85 c0             	test   ax,ax
c000dba6:	0f 84 28 01 00 00    	je     c000dcd4 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000dbac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb0:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000dbb6:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000dbbb:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000dbc1:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000dbc7:	89 f1                	mov    ecx,esi
c000dbc9:	89 fb                	mov    ebx,edi
c000dbcb:	01 c1                	add    ecx,eax
c000dbcd:	89 d5                	mov    ebp,edx
c000dbcf:	11 d3                	adc    ebx,edx
c000dbd1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dbd4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dbd8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dbdc:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000dbe2:	09 dd                	or     ebp,ebx
c000dbe4:	0f 85 fa 00 00 00    	jne    c000dce4 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dbea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dbee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dbf6:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000dbfe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc02:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000dc0a:	eb 45                	jmp    c000dc51 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000dc0c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000dc10:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000dc15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc19:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000dc1d:	0f 84 c1 00 00 00    	je     c000dce4 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc23:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dc27:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc2a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc2d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000dc30:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000dc33:	89 c1                	mov    ecx,eax
c000dc35:	89 d3                	mov    ebx,edx
c000dc37:	01 f1                	add    ecx,esi
c000dc39:	11 fb                	adc    ebx,edi
c000dc3b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dc3e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dc42:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000dc45:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc49:	09 d3                	or     ebx,edx
c000dc4b:	0f 85 93 00 00 00    	jne    c000dce4 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc51:	49                   	dec    ecx
c000dc52:	75 b8                	jne    c000dc0c <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc54:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000dc57:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc5b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc5f:	39 e9                	cmp    ecx,ebp
c000dc61:	89 d9                	mov    ecx,ebx
c000dc63:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dc67:	72 a3                	jb     c000dc0c <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc69:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000dc6e:	39 f1                	cmp    ecx,esi
c000dc70:	b9 00 00 00 00       	mov    ecx,0x0
c000dc75:	19 f9                	sbb    ecx,edi
c000dc77:	73 93                	jae    c000dc0c <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc79:	39 e8                	cmp    eax,ebp
c000dc7b:	89 d1                	mov    ecx,edx
c000dc7d:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dc81:	73 13                	jae    c000dc96 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000dc83:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc86:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dc8a:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000dc8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc92:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000dc96:	83 ec 08             	sub    esp,0x8
c000dc99:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dc9d:	50                   	push   eax
c000dc9e:	e8 7e fe ff ff       	call   c000db21 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000dca3:	83 c4 0c             	add    esp,0xc
c000dca6:	89 fa                	mov    edx,edi
c000dca8:	89 f0                	mov    eax,esi
c000dcaa:	0f ac d0 0c          	shrd   eax,edx,0xc
c000dcae:	03 05 b0 bb 03 c0    	add    eax,DWORD PTR ds:0xc003bbb0
c000dcb4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dcbb:	a3 b0 bb 03 c0       	mov    ds:0xc003bbb0,eax
c000dcc0:	52                   	push   edx
c000dcc1:	50                   	push   eax
c000dcc2:	68 a1 8e 03 c0       	push   0xc0038ea1
c000dcc7:	e8 f4 f1 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000dccc:	83 c4 10             	add    esp,0x10
c000dccf:	e9 38 ff ff ff       	jmp    c000dc0c <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dcd4:	83 ec 0c             	sub    esp,0xc
c000dcd7:	68 93 8e 03 c0       	push   0xc0038e93
c000dcdc:	e8 fd f2 ff ff       	call   c000cfde <panic(char const*)>
c000dce1:	83 c4 10             	add    esp,0x10
c000dce4:	bb 40 01 00 00       	mov    ebx,0x140
c000dce9:	83 ec 08             	sub    esp,0x8
c000dcec:	6a 00                	push   0x0
c000dcee:	53                   	push   ebx
c000dcef:	43                   	inc    ebx
c000dcf0:	e8 98 fc ff ff       	call   c000d98d <Phys::setPageState(unsigned long, bool)>
c000dcf5:	ff 05 b0 bb 03 c0    	inc    DWORD PTR ds:0xc003bbb0
c000dcfb:	83 c4 10             	add    esp,0x10
c000dcfe:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000dd04:	75 e3                	jne    c000dce9 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000dd06:	83 c4 2c             	add    esp,0x2c
c000dd09:	5b                   	pop    ebx
c000dd0a:	5e                   	pop    esi
c000dd0b:	5f                   	pop    edi
c000dd0c:	5d                   	pop    ebp
c000dd0d:	c3                   	ret    

c000dd0e <Pipe::isAtty()>:
c000dd0e:	31 c0                	xor    eax,eax
c000dd10:	c3                   	ret    
c000dd11:	90                   	nop

c000dd12 <Pipe::~Pipe()>:
c000dd12:	83 ec 0c             	sub    esp,0xc
c000dd15:	ba 00 8f 03 c0       	mov    edx,0xc0038f00
c000dd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd1e:	89 10                	mov    DWORD PTR [eax],edx
c000dd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	50                   	push   eax
c000dd28:	e8 d3 33 00 00       	call   c0011100 <UnixFile::~UnixFile()>
c000dd2d:	83 c4 10             	add    esp,0x10
c000dd30:	90                   	nop
c000dd31:	83 c4 0c             	add    esp,0xc
c000dd34:	c3                   	ret    
c000dd35:	90                   	nop

c000dd36 <Pipe::~Pipe()>:
c000dd36:	83 ec 0c             	sub    esp,0xc
c000dd39:	83 ec 0c             	sub    esp,0xc
c000dd3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd40:	e8 cd ff ff ff       	call   c000dd12 <Pipe::~Pipe()>
c000dd45:	83 c4 10             	add    esp,0x10
c000dd48:	83 ec 08             	sub    esp,0x8
c000dd4b:	6a 20                	push   0x20
c000dd4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd51:	e8 29 47 00 00       	call   c001247f <operator delete(void*, unsigned long)>
c000dd56:	83 c4 10             	add    esp,0x10
c000dd59:	83 c4 0c             	add    esp,0xc
c000dd5c:	c3                   	ret    
c000dd5d:	90                   	nop

c000dd5e <Pipe::read(unsigned long long, void*, int*)>:
c000dd5e:	55                   	push   ebp
c000dd5f:	57                   	push   edi
c000dd60:	56                   	push   esi
c000dd61:	53                   	push   ebx
c000dd62:	83 ec 1c             	sub    esp,0x1c
c000dd65:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd69:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dd6d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd71:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dd74:	89 c8                	mov    eax,ecx
c000dd76:	99                   	cdq    
c000dd77:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000dd7b:	74 19                	je     c000dd96 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dd7d:	39 f9                	cmp    ecx,edi
c000dd7f:	89 d1                	mov    ecx,edx
c000dd81:	19 f1                	sbb    ecx,esi
c000dd83:	73 11                	jae    c000dd96 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dd85:	e8 d8 05 00 00       	call   c000e362 <lockScheduler()>
c000dd8a:	e8 07 09 00 00       	call   c000e696 <schedule()>
c000dd8f:	e8 d0 05 00 00       	call   c000e364 <unlockScheduler()>
c000dd94:	eb db                	jmp    c000dd71 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000dd96:	39 f8                	cmp    eax,edi
c000dd98:	89 d1                	mov    ecx,edx
c000dd9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dd9e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000dda2:	19 f1                	sbb    ecx,esi
c000dda4:	73 08                	jae    c000ddae <Pipe::read(unsigned long long, void*, int*)+0x50>
c000dda6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ddb1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ddb4:	29 c6                	sub    esi,eax
c000ddb6:	89 f1                	mov    ecx,esi
c000ddb8:	c1 f9 1f             	sar    ecx,0x1f
c000ddbb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000ddbf:	89 ca                	mov    edx,ecx
c000ddc1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ddc5:	19 d1                	sbb    ecx,edx
c000ddc7:	73 04                	jae    c000ddcd <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000ddc9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ddcd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ddd1:	89 fd                	mov    ebp,edi
c000ddd3:	29 f5                	sub    ebp,esi
c000ddd5:	85 f6                	test   esi,esi
c000ddd7:	74 12                	je     c000ddeb <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000ddd9:	52                   	push   edx
c000ddda:	56                   	push   esi
c000dddb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000ddde:	50                   	push   eax
c000dddf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000dde3:	e8 4c 28 ff ff       	call   c0000634 <memcpy>
c000dde8:	83 c4 10             	add    esp,0x10
c000ddeb:	85 ed                	test   ebp,ebp
c000dded:	74 12                	je     c000de01 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ddef:	50                   	push   eax
c000ddf0:	55                   	push   ebp
c000ddf1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ddf4:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ddf8:	56                   	push   esi
c000ddf9:	e8 36 28 ff ff       	call   c0000634 <memcpy>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000de04:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de07:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000de0a:	99                   	cdq    
c000de0b:	89 f7                	mov    edi,esi
c000de0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000de15:	c1 ff 1f             	sar    edi,0x1f
c000de18:	57                   	push   edi
c000de19:	56                   	push   esi
c000de1a:	52                   	push   edx
c000de1b:	50                   	push   eax
c000de1c:	e8 eb 09 01 00       	call   c001e80c <__umoddi3>
c000de21:	83 c4 10             	add    esp,0x10
c000de24:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000de27:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000de2c:	75 10                	jne    c000de3e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000de2e:	83 ec 0c             	sub    esp,0xc
c000de31:	68 bd 8e 03 c0       	push   0xc0038ebd
c000de36:	e8 a3 f1 ff ff       	call   c000cfde <panic(char const*)>
c000de3b:	83 c4 10             	add    esp,0x10
c000de3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000de46:	89 10                	mov    DWORD PTR [eax],edx
c000de48:	83 c4 1c             	add    esp,0x1c
c000de4b:	31 c0                	xor    eax,eax
c000de4d:	5b                   	pop    ebx
c000de4e:	5e                   	pop    esi
c000de4f:	5f                   	pop    edi
c000de50:	5d                   	pop    ebp
c000de51:	c3                   	ret    

c000de52 <Pipe::write(unsigned long long, void*, int*)>:
c000de52:	55                   	push   ebp
c000de53:	57                   	push   edi
c000de54:	56                   	push   esi
c000de55:	53                   	push   ebx
c000de56:	83 ec 1c             	sub    esp,0x1c
c000de59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de5d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000de61:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de65:	89 04 24             	mov    DWORD PTR [esp],eax
c000de68:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000de6b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000de6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de72:	89 de                	mov    esi,ebx
c000de74:	89 df                	mov    edi,ebx
c000de76:	c1 ff 1f             	sar    edi,0x1f
c000de79:	01 c6                	add    esi,eax
c000de7b:	89 c8                	mov    eax,ecx
c000de7d:	11 d7                	adc    edi,edx
c000de7f:	99                   	cdq    
c000de80:	39 f1                	cmp    ecx,esi
c000de82:	89 d0                	mov    eax,edx
c000de84:	19 f8                	sbb    eax,edi
c000de86:	b8 01 00 00 00       	mov    eax,0x1
c000de8b:	0f 82 80 00 00 00    	jb     c000df11 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000de91:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000de94:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000de97:	01 d8                	add    eax,ebx
c000de99:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000de9d:	99                   	cdq    
c000de9e:	f7 f9                	idiv   ecx
c000dea0:	29 d1                	sub    ecx,edx
c000dea2:	89 d7                	mov    edi,edx
c000dea4:	89 c8                	mov    eax,ecx
c000dea6:	99                   	cdq    
c000dea7:	39 ce                	cmp    esi,ecx
c000dea9:	19 d3                	sbb    ebx,edx
c000deab:	bb 00 00 00 00       	mov    ebx,0x0
c000deb0:	72 04                	jb     c000deb6 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000deb2:	89 f3                	mov    ebx,esi
c000deb4:	29 cb                	sub    ebx,ecx
c000deb6:	89 f1                	mov    ecx,esi
c000deb8:	29 d9                	sub    ecx,ebx
c000deba:	74 1a                	je     c000ded6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000debc:	52                   	push   edx
c000debd:	51                   	push   ecx
c000debe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dec2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dec6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000dec9:	57                   	push   edi
c000deca:	e8 65 27 ff ff       	call   c0000634 <memcpy>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ded6:	85 db                	test   ebx,ebx
c000ded8:	74 12                	je     c000deec <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000deda:	50                   	push   eax
c000dedb:	53                   	push   ebx
c000dedc:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000dee0:	51                   	push   ecx
c000dee1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dee4:	e8 4b 27 ff ff       	call   c0000634 <memcpy>
c000dee9:	83 c4 10             	add    esp,0x10
c000deec:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000deef:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000def4:	75 10                	jne    c000df06 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	68 d9 8e 03 c0       	push   0xc0038ed9
c000defe:	e8 db f0 ff ff       	call   c000cfde <panic(char const*)>
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df0a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000df0d:	89 38                	mov    DWORD PTR [eax],edi
c000df0f:	31 c0                	xor    eax,eax
c000df11:	83 c4 1c             	add    esp,0x1c
c000df14:	5b                   	pop    ebx
c000df15:	5e                   	pop    esi
c000df16:	5f                   	pop    edi
c000df17:	5d                   	pop    ebp
c000df18:	c3                   	ret    
c000df19:	90                   	nop

c000df1a <Pipe::Pipe(int)>:
c000df1a:	83 ec 0c             	sub    esp,0xc
c000df1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df21:	83 ec 08             	sub    esp,0x8
c000df24:	6a 00                	push   0x0
c000df26:	50                   	push   eax
c000df27:	e8 70 31 00 00       	call   c001109c <UnixFile::UnixFile(int)>
c000df2c:	83 c4 10             	add    esp,0x10
c000df2f:	ba 00 8f 03 c0       	mov    edx,0xc0038f00
c000df34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df38:	89 10                	mov    DWORD PTR [eax],edx
c000df3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df42:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000df45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df49:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000df5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df5f:	83 ec 0c             	sub    esp,0xc
c000df62:	50                   	push   eax
c000df63:	e8 53 f5 ff ff       	call   c000d4bb <malloc>
c000df68:	83 c4 10             	add    esp,0x10
c000df6b:	89 c2                	mov    edx,eax
c000df6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df71:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df78:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000df7c:	90                   	nop
c000df7d:	83 c4 0c             	add    esp,0xc
c000df80:	c3                   	ret    
c000df81:	90                   	nop

c000df82 <changeTSS>:
c000df82:	83 ec 0c             	sub    esp,0xc
c000df85:	e8 1c 92 00 00       	call   c00171a6 <thisCPU()>
c000df8a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000df90:	83 ec 08             	sub    esp,0x8
c000df93:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000df96:	05 7c 11 00 00       	add    eax,0x117c
c000df9b:	c1 e1 15             	shl    ecx,0x15
c000df9e:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000dfa3:	29 ca                	sub    edx,ecx
c000dfa5:	52                   	push   edx
c000dfa6:	50                   	push   eax
c000dfa7:	e8 28 2e 00 00       	call   c0010dd4 <TSS::setESP(unsigned long)>
c000dfac:	83 c4 1c             	add    esp,0x1c
c000dfaf:	c3                   	ret    

c000dfb0 <Process::addArgs(char**)>:
c000dfb0:	57                   	push   edi
c000dfb1:	56                   	push   esi
c000dfb2:	53                   	push   ebx
c000dfb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfb7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dfbb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000dfc5:	85 ff                	test   edi,edi
c000dfc7:	74 3d                	je     c000e006 <Process::addArgs(char**)+0x56>
c000dfc9:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfcb:	85 c0                	test   eax,eax
c000dfcd:	74 37                	je     c000e006 <Process::addArgs(char**)+0x56>
c000dfcf:	31 db                	xor    ebx,ebx
c000dfd1:	83 ec 0c             	sub    esp,0xc
c000dfd4:	50                   	push   eax
c000dfd5:	e8 fa 26 ff ff       	call   c00006d4 <strlen>
c000dfda:	40                   	inc    eax
c000dfdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfde:	e8 d8 f4 ff ff       	call   c000d4bb <malloc>
c000dfe3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000dfea:	5a                   	pop    edx
c000dfeb:	59                   	pop    ecx
c000dfec:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000dfef:	43                   	inc    ebx
c000dff0:	50                   	push   eax
c000dff1:	e8 d1 27 ff ff       	call   c00007c7 <strcpy>
c000dff6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000e002:	85 c0                	test   eax,eax
c000e004:	75 cb                	jne    c000dfd1 <Process::addArgs(char**)+0x21>
c000e006:	5b                   	pop    ebx
c000e007:	5e                   	pop    esi
c000e008:	5f                   	pop    edi
c000e009:	c3                   	ret    

c000e00a <Process::Process(char const*, Process*, char**)>:
c000e00a:	56                   	push   esi
c000e00b:	53                   	push   ebx
c000e00c:	83 ec 14             	sub    esp,0x14
c000e00f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e013:	05 0c 02 00 00       	add    eax,0x20c
c000e018:	bb 07 00 00 00       	mov    ebx,0x7
c000e01d:	89 c6                	mov    esi,eax
c000e01f:	85 db                	test   ebx,ebx
c000e021:	78 12                	js     c000e035 <Process::Process(char const*, Process*, char**)+0x2b>
c000e023:	83 ec 0c             	sub    esp,0xc
c000e026:	56                   	push   esi
c000e027:	e8 0c 0a 01 00       	call   c001ea38 <ThreadControlBlock::ThreadControlBlock()>
c000e02c:	83 c4 10             	add    esp,0x10
c000e02f:	83 c6 63             	add    esi,0x63
c000e032:	4b                   	dec    ebx
c000e033:	eb ea                	jmp    c000e01f <Process::Process(char const*, Process*, char**)+0x15>
c000e035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e039:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e044:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e04d:	a1 18 ae 03 c0       	mov    eax,ds:0xc003ae18
c000e052:	8d 50 01             	lea    edx,[eax+0x1]
c000e055:	89 15 18 ae 03 c0    	mov    DWORD PTR ds:0xc003ae18,edx
c000e05b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e05f:	89 02                	mov    DWORD PTR [edx],eax
c000e061:	83 ec 0c             	sub    esp,0xc
c000e064:	6a 10                	push   0x10
c000e066:	e8 05 44 00 00       	call   c0012470 <operator new(unsigned long)>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	89 c3                	mov    ebx,eax
c000e070:	83 ec 08             	sub    esp,0x8
c000e073:	6a 00                	push   0x0
c000e075:	53                   	push   ebx
c000e076:	e8 89 40 00 00       	call   c0012104 <VAS::VAS(bool)>
c000e07b:	83 c4 10             	add    esp,0x10
c000e07e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e082:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e08c:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e09a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e09e:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e0a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0a8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e0ae:	85 c0                	test   eax,eax
c000e0b0:	74 42                	je     c000e0f4 <Process::Process(char const*, Process*, char**)+0xea>
c000e0b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0b6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e0bc:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e0c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c6:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e0cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0d0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e0d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e0dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0e0:	05 0c 01 00 00       	add    eax,0x10c
c000e0e5:	83 ec 08             	sub    esp,0x8
c000e0e8:	52                   	push   edx
c000e0e9:	50                   	push   eax
c000e0ea:	e8 d8 26 ff ff       	call   c00007c7 <strcpy>
c000e0ef:	83 c4 10             	add    esp,0x10
c000e0f2:	eb 5c                	jmp    c000e150 <Process::Process(char const*, Process*, char**)+0x146>
c000e0f4:	83 ec 0c             	sub    esp,0xc
c000e0f7:	68 60 12 00 00       	push   0x1260
c000e0fc:	e8 6f 43 00 00       	call   c0012470 <operator new(unsigned long)>
c000e101:	83 c4 10             	add    esp,0x10
c000e104:	89 c3                	mov    ebx,eax
c000e106:	83 ec 08             	sub    esp,0x8
c000e109:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e10d:	53                   	push   ebx
c000e10e:	e8 bf 29 00 00       	call   c0010ad2 <VgaText::VgaText(char const*)>
c000e113:	83 c4 10             	add    esp,0x10
c000e116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e11a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e124:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e12a:	83 ec 0c             	sub    esp,0xc
c000e12d:	50                   	push   eax
c000e12e:	e8 a0 1d 00 00       	call   c000fed3 <addToTerminalCycle(VgaText*)>
c000e133:	83 c4 10             	add    esp,0x10
c000e136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e13a:	05 0c 01 00 00       	add    eax,0x10c
c000e13f:	83 ec 08             	sub    esp,0x8
c000e142:	68 14 8f 03 c0       	push   0xc0038f14
c000e147:	50                   	push   eax
c000e148:	e8 7a 26 ff ff       	call   c00007c7 <strcpy>
c000e14d:	83 c4 10             	add    esp,0x10
c000e150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e154:	83 c0 0c             	add    eax,0xc
c000e157:	83 ec 08             	sub    esp,0x8
c000e15a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e15e:	50                   	push   eax
c000e15f:	e8 63 26 ff ff       	call   c00007c7 <strcpy>
c000e164:	83 c4 10             	add    esp,0x10
c000e167:	83 ec 08             	sub    esp,0x8
c000e16a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e16e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e172:	e8 39 fe ff ff       	call   c000dfb0 <Process::addArgs(char**)>
c000e177:	83 c4 10             	add    esp,0x10
c000e17a:	83 ec 08             	sub    esp,0x8
c000e17d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e185:	e8 d6 d8 ff ff       	call   c000ba60 <loadProgramIntoMemory(Process*, char const*)>
c000e18a:	83 c4 10             	add    esp,0x10
c000e18d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e191:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e195:	83 f0 01             	xor    eax,0x1
c000e198:	88 c2                	mov    dl,al
c000e19a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e19e:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000e1a4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e1a9:	83 ec 08             	sub    esp,0x8
c000e1ac:	50                   	push   eax
c000e1ad:	68 68 8f 03 c0       	push   0xc0038f68
c000e1b2:	e8 09 ed ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000e1b7:	83 c4 10             	add    esp,0x10
c000e1ba:	90                   	nop
c000e1bb:	83 c4 14             	add    esp,0x14
c000e1be:	5b                   	pop    ebx
c000e1bf:	5e                   	pop    esi
c000e1c0:	c3                   	ret    
c000e1c1:	90                   	nop

c000e1c2 <Process::Process(bool, char const*, Process*, char**)>:
c000e1c2:	56                   	push   esi
c000e1c3:	53                   	push   ebx
c000e1c4:	83 ec 14             	sub    esp,0x14
c000e1c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e1cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e1cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d3:	05 0c 02 00 00       	add    eax,0x20c
c000e1d8:	bb 07 00 00 00       	mov    ebx,0x7
c000e1dd:	89 c6                	mov    esi,eax
c000e1df:	85 db                	test   ebx,ebx
c000e1e1:	78 12                	js     c000e1f5 <Process::Process(bool, char const*, Process*, char**)+0x33>
c000e1e3:	83 ec 0c             	sub    esp,0xc
c000e1e6:	56                   	push   esi
c000e1e7:	e8 4c 08 01 00       	call   c001ea38 <ThreadControlBlock::ThreadControlBlock()>
c000e1ec:	83 c4 10             	add    esp,0x10
c000e1ef:	83 c6 63             	add    esi,0x63
c000e1f2:	4b                   	dec    ebx
c000e1f3:	eb ea                	jmp    c000e1df <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000e1f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f9:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e204:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e20d:	a1 18 ae 03 c0       	mov    eax,ds:0xc003ae18
c000e212:	8d 50 01             	lea    edx,[eax+0x1]
c000e215:	89 15 18 ae 03 c0    	mov    DWORD PTR ds:0xc003ae18,edx
c000e21b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e21f:	89 02                	mov    DWORD PTR [edx],eax
c000e221:	83 ec 0c             	sub    esp,0xc
c000e224:	6a 10                	push   0x10
c000e226:	e8 45 42 00 00       	call   c0012470 <operator new(unsigned long)>
c000e22b:	83 c4 10             	add    esp,0x10
c000e22e:	89 c3                	mov    ebx,eax
c000e230:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000e235:	83 ec 08             	sub    esp,0x8
c000e238:	50                   	push   eax
c000e239:	53                   	push   ebx
c000e23a:	e8 c5 3e 00 00       	call   c0012104 <VAS::VAS(bool)>
c000e23f:	83 c4 10             	add    esp,0x10
c000e242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e246:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e24c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e250:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e25a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e25e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e262:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e26c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e272:	85 c0                	test   eax,eax
c000e274:	74 42                	je     c000e2b8 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000e276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e27a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e280:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e28a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e294:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e29a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e2a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2a4:	05 0c 01 00 00       	add    eax,0x10c
c000e2a9:	83 ec 08             	sub    esp,0x8
c000e2ac:	52                   	push   edx
c000e2ad:	50                   	push   eax
c000e2ae:	e8 14 25 ff ff       	call   c00007c7 <strcpy>
c000e2b3:	83 c4 10             	add    esp,0x10
c000e2b6:	eb 5c                	jmp    c000e314 <Process::Process(bool, char const*, Process*, char**)+0x152>
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	68 60 12 00 00       	push   0x1260
c000e2c0:	e8 ab 41 00 00       	call   c0012470 <operator new(unsigned long)>
c000e2c5:	83 c4 10             	add    esp,0x10
c000e2c8:	89 c3                	mov    ebx,eax
c000e2ca:	83 ec 08             	sub    esp,0x8
c000e2cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e2d1:	53                   	push   ebx
c000e2d2:	e8 fb 27 00 00       	call   c0010ad2 <VgaText::VgaText(char const*)>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2de:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e2e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e2ee:	83 ec 0c             	sub    esp,0xc
c000e2f1:	50                   	push   eax
c000e2f2:	e8 dc 1b 00 00       	call   c000fed3 <addToTerminalCycle(VgaText*)>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2fe:	05 0c 01 00 00       	add    eax,0x10c
c000e303:	83 ec 08             	sub    esp,0x8
c000e306:	68 14 8f 03 c0       	push   0xc0038f14
c000e30b:	50                   	push   eax
c000e30c:	e8 b6 24 ff ff       	call   c00007c7 <strcpy>
c000e311:	83 c4 10             	add    esp,0x10
c000e314:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e318:	83 c0 0c             	add    eax,0xc
c000e31b:	83 ec 08             	sub    esp,0x8
c000e31e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e322:	50                   	push   eax
c000e323:	e8 9f 24 ff ff       	call   c00007c7 <strcpy>
c000e328:	83 c4 10             	add    esp,0x10
c000e32b:	83 ec 08             	sub    esp,0x8
c000e32e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e332:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e336:	e8 75 fc ff ff       	call   c000dfb0 <Process::addArgs(char**)>
c000e33b:	83 c4 10             	add    esp,0x10
c000e33e:	90                   	nop
c000e33f:	83 c4 14             	add    esp,0x14
c000e342:	5b                   	pop    ebx
c000e343:	5e                   	pop    esi
c000e344:	c3                   	ret    

c000e345 <disableIRQs()>:
c000e345:	fa                   	cli    
c000e346:	ff 05 14 bc 03 c0    	inc    DWORD PTR ds:0xc003bc14
c000e34c:	c3                   	ret    

c000e34d <getIRQNestingLevel()>:
c000e34d:	a1 14 bc 03 c0       	mov    eax,ds:0xc003bc14
c000e352:	c3                   	ret    

c000e353 <enableIRQs()>:
c000e353:	a1 14 bc 03 c0       	mov    eax,ds:0xc003bc14
c000e358:	48                   	dec    eax
c000e359:	a3 14 bc 03 c0       	mov    ds:0xc003bc14,eax
c000e35e:	75 01                	jne    c000e361 <enableIRQs()+0xe>
c000e360:	fb                   	sti    
c000e361:	c3                   	ret    

c000e362 <lockScheduler()>:
c000e362:	eb e1                	jmp    c000e345 <disableIRQs()>

c000e364 <unlockScheduler()>:
c000e364:	eb ed                	jmp    c000e353 <enableIRQs()>

c000e366 <userModeEntryPoint(void*)>:
c000e366:	83 ec 0c             	sub    esp,0xc
c000e369:	e8 f6 ff ff ff       	call   c000e364 <unlockScheduler()>
c000e36e:	fb                   	sti    
c000e36f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e374:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e377:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e37d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e381:	83 c4 0c             	add    esp,0xc
c000e384:	e9 5d 1e ff ff       	jmp    c00001e6 <goToUsermode>

c000e389 <lockStuff()>:
c000e389:	e8 b7 ff ff ff       	call   c000e345 <disableIRQs()>
c000e38e:	ff 05 10 bc 03 c0    	inc    DWORD PTR ds:0xc003bc10
c000e394:	c3                   	ret    

c000e395 <taskStartupFunction>:
c000e395:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e39a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000e39d:	c3                   	ret    

c000e39e <updateTimeUsed()>:
c000e39e:	57                   	push   edi
c000e39f:	56                   	push   esi
c000e3a0:	53                   	push   ebx
c000e3a1:	e8 00 8e 00 00       	call   c00171a6 <thisCPU()>
c000e3a6:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000e3ad:	74 49                	je     c000e3f8 <updateTimeUsed()+0x5a>
c000e3af:	0f 31                	rdtsc  
c000e3b1:	89 c1                	mov    ecx,eax
c000e3b3:	a3 50 bc 03 c0       	mov    ds:0xc003bc50,eax
c000e3b8:	2b 0d 40 bc 03 c0    	sub    ecx,DWORD PTR ds:0xc003bc40
c000e3be:	89 d3                	mov    ebx,edx
c000e3c0:	89 0d 48 bc 03 c0    	mov    DWORD PTR ds:0xc003bc48,ecx
c000e3c6:	1b 1d 44 bc 03 c0    	sbb    ebx,DWORD PTR ds:0xc003bc44
c000e3cc:	a3 40 bc 03 c0       	mov    ds:0xc003bc40,eax
c000e3d1:	89 1d 4c bc 03 c0    	mov    DWORD PTR ds:0xc003bc4c,ebx
c000e3d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e3dc:	89 15 54 bc 03 c0    	mov    DWORD PTR ds:0xc003bc54,edx
c000e3e2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000e3e5:	89 15 44 bc 03 c0    	mov    DWORD PTR ds:0xc003bc44,edx
c000e3eb:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000e3ee:	01 f1                	add    ecx,esi
c000e3f0:	11 fb                	adc    ebx,edi
c000e3f2:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000e3f5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e3f8:	5b                   	pop    ebx
c000e3f9:	5e                   	pop    esi
c000e3fa:	5f                   	pop    edi
c000e3fb:	c3                   	ret    

c000e3fc <switchToThread(ThreadControlBlock*)>:
c000e3fc:	53                   	push   ebx
c000e3fd:	83 ec 08             	sub    esp,0x8
c000e400:	a1 10 bc 03 c0       	mov    eax,ds:0xc003bc10
c000e405:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e409:	85 c0                	test   eax,eax
c000e40b:	75 30                	jne    c000e43d <switchToThread(ThreadControlBlock*)+0x41>
c000e40d:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e410:	3c ff                	cmp    al,0xff
c000e412:	74 25                	je     c000e439 <switchToThread(ThreadControlBlock*)+0x3d>
c000e414:	0f b6 d0             	movzx  edx,al
c000e417:	b8 84 03 00 00       	mov    eax,0x384
c000e41c:	29 d0                	sub    eax,edx
c000e41e:	c1 e0 10             	shl    eax,0x10
c000e421:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e424:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e427:	e8 72 ff ff ff       	call   c000e39e <updateTimeUsed()>
c000e42c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e430:	83 c4 08             	add    esp,0x8
c000e433:	5b                   	pop    ebx
c000e434:	e9 e6 1d ff ff       	jmp    c000021f <switchToThreadASM>
c000e439:	31 c0                	xor    eax,eax
c000e43b:	eb e7                	jmp    c000e424 <switchToThread(ThreadControlBlock*)+0x28>
c000e43d:	c7 05 0c bc 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bc0c,0x1
c000e447:	83 c4 08             	add    esp,0x8
c000e44a:	5b                   	pop    ebx
c000e44b:	c3                   	ret    

c000e44c <Semaphore::Semaphore(int)>:
c000e44c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e450:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e454:	89 10                	mov    DWORD PTR [eax],edx
c000e456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e45a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e465:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e46c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e470:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e477:	90                   	nop
c000e478:	c3                   	ret    
c000e479:	90                   	nop

c000e47a <Mutex::Mutex()>:
c000e47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e47e:	6a 01                	push   0x1
c000e480:	50                   	push   eax
c000e481:	e8 c6 ff ff ff       	call   c000e44c <Semaphore::Semaphore(int)>
c000e486:	83 c4 08             	add    esp,0x8
c000e489:	90                   	nop
c000e48a:	c3                   	ret    
c000e48b:	90                   	nop

c000e48c <Process::createThread(void (*)(void*), void*, int)>:
c000e48c:	55                   	push   ebp
c000e48d:	31 c9                	xor    ecx,ecx
c000e48f:	57                   	push   edi
c000e490:	56                   	push   esi
c000e491:	53                   	push   ebx
c000e492:	83 ec 1c             	sub    esp,0x1c
c000e495:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e499:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e4a0:	89 f2                	mov    edx,esi
c000e4a2:	0f b7 c2             	movzx  eax,dx
c000e4a5:	83 e2 01             	and    edx,0x1
c000e4a8:	74 14                	je     c000e4be <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e4aa:	d1 f8                	sar    eax,1
c000e4ac:	41                   	inc    ecx
c000e4ad:	89 c2                	mov    edx,eax
c000e4af:	83 f9 10             	cmp    ecx,0x10
c000e4b2:	75 ee                	jne    c000e4a2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e4b4:	83 c4 1c             	add    esp,0x1c
c000e4b7:	31 c0                	xor    eax,eax
c000e4b9:	5b                   	pop    ebx
c000e4ba:	5e                   	pop    esi
c000e4bb:	5f                   	pop    edi
c000e4bc:	5d                   	pop    ebp
c000e4bd:	c3                   	ret    
c000e4be:	83 ec 08             	sub    esp,0x8
c000e4c1:	b8 01 00 00 00       	mov    eax,0x1
c000e4c6:	d3 e0                	shl    eax,cl
c000e4c8:	09 c6                	or     esi,eax
c000e4ca:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e4d0:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e4d7:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e4da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4dd:	01 ce                	add    esi,ecx
c000e4df:	89 f0                	mov    eax,esi
c000e4e1:	c1 e0 05             	shl    eax,0x5
c000e4e4:	01 c6                	add    esi,eax
c000e4e6:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e4e9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e4ef:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e4f5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e4f9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e4ff:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e505:	89 ca                	mov    edx,ecx
c000e507:	f7 da                	neg    edx
c000e509:	c1 e2 15             	shl    edx,0x15
c000e50c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e512:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e518:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e51c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e526:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e52c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e530:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e536:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e540:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e54a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e551:	50                   	push   eax
c000e552:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e556:	68 30 bc 03 c0       	push   0xc003bc30
c000e55b:	e8 6e 05 01 00       	call   c001eace <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e560:	83 c4 10             	add    esp,0x10
c000e563:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e567:	83 c4 1c             	add    esp,0x1c
c000e56a:	5b                   	pop    ebx
c000e56b:	5e                   	pop    esi
c000e56c:	5f                   	pop    edi
c000e56d:	5d                   	pop    ebp
c000e56e:	c3                   	ret    
c000e56f:	90                   	nop

c000e570 <Process::createUserThread()>:
c000e570:	83 ec 0c             	sub    esp,0xc
c000e573:	68 80 00 00 00       	push   0x80
c000e578:	6a 00                	push   0x0
c000e57a:	68 66 e3 00 c0       	push   0xc000e366
c000e57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e583:	e8 04 ff ff ff       	call   c000e48c <Process::createThread(void (*)(void*), void*, int)>
c000e588:	83 c4 1c             	add    esp,0x1c
c000e58b:	c3                   	ret    

c000e58c <setupMultitasking(void (*)())>:
c000e58c:	56                   	push   esi
c000e58d:	53                   	push   ebx
c000e58e:	53                   	push   ebx
c000e58f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e593:	eb 10                	jmp    c000e5a5 <setupMultitasking(void (*)())+0x19>
c000e595:	83 ec 0c             	sub    esp,0xc
c000e598:	68 30 bc 03 c0       	push   0xc003bc30
c000e59d:	e8 1c 06 01 00       	call   c001ebbe <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	83 ec 0c             	sub    esp,0xc
c000e5a8:	68 30 bc 03 c0       	push   0xc003bc30
c000e5ad:	e8 f0 05 01 00       	call   c001eba2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e5b2:	83 c4 10             	add    esp,0x10
c000e5b5:	84 c0                	test   al,al
c000e5b7:	74 dc                	je     c000e595 <setupMultitasking(void (*)())+0x9>
c000e5b9:	83 ec 0c             	sub    esp,0xc
c000e5bc:	68 3b 07 00 00       	push   0x73b
c000e5c1:	e8 aa 3e 00 00       	call   c0012470 <operator new(unsigned long)>
c000e5c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e5cd:	89 c3                	mov    ebx,eax
c000e5cf:	6a 00                	push   0x0
c000e5d1:	68 18 8f 03 c0       	push   0xc0038f18
c000e5d6:	6a 01                	push   0x1
c000e5d8:	50                   	push   eax
c000e5d9:	e8 e4 fb ff ff       	call   c000e1c2 <Process::Process(bool, char const*, Process*, char**)>
c000e5de:	83 c4 18             	add    esp,0x18
c000e5e1:	89 1d 3c bc 03 c0    	mov    DWORD PTR ds:0xc003bc3c,ebx
c000e5e7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e5ed:	68 90 8f 03 c0       	push   0xc0038f90
c000e5f2:	e8 c9 e8 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000e5f7:	58                   	pop    eax
c000e5f8:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e5fe:	e8 44 20 00 00       	call   c0010647 <setActiveTerminal(VgaText*)>
c000e603:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e60b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e611:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e614:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e61e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e624:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e62a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e634:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e63e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e648:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e64e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e654:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e65e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e664:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e66e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e674:	5a                   	pop    edx
c000e675:	59                   	pop    ecx
c000e676:	68 14 8f 03 c0       	push   0xc0038f14
c000e67b:	50                   	push   eax
c000e67c:	e8 46 21 ff ff       	call   c00007c7 <strcpy>
c000e681:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e688:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e68c:	83 c4 14             	add    esp,0x14
c000e68f:	5b                   	pop    ebx
c000e690:	5e                   	pop    esi
c000e691:	e9 7b 1b ff ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c000e696 <schedule()>:
c000e696:	a1 10 bc 03 c0       	mov    eax,ds:0xc003bc10
c000e69b:	85 c0                	test   eax,eax
c000e69d:	74 0b                	je     c000e6aa <schedule()+0x14>
c000e69f:	c7 05 0c bc 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bc0c,0x1
c000e6a9:	c3                   	ret    
c000e6aa:	53                   	push   ebx
c000e6ab:	83 ec 14             	sub    esp,0x14
c000e6ae:	68 30 bc 03 c0       	push   0xc003bc30
c000e6b3:	e8 ea 04 01 00       	call   c001eba2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e6b8:	83 c4 10             	add    esp,0x10
c000e6bb:	84 c0                	test   al,al
c000e6bd:	75 38                	jne    c000e6f7 <schedule()+0x61>
c000e6bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e6c7:	4a                   	dec    edx
c000e6c8:	74 32                	je     c000e6fc <schedule()+0x66>
c000e6ca:	83 ec 0c             	sub    esp,0xc
c000e6cd:	68 30 bc 03 c0       	push   0xc003bc30
c000e6d2:	e8 95 05 01 00       	call   c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e6d7:	c7 04 24 30 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc30
c000e6de:	89 c3                	mov    ebx,eax
c000e6e0:	e8 d9 04 01 00       	call   c001ebbe <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e6e5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e6ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6ef:	e8 08 fd ff ff       	call   c000e3fc <switchToThread(ThreadControlBlock*)>
c000e6f4:	83 c4 10             	add    esp,0x10
c000e6f7:	83 c4 08             	add    esp,0x8
c000e6fa:	5b                   	pop    ebx
c000e6fb:	c3                   	ret    
c000e6fc:	83 ec 08             	sub    esp,0x8
c000e6ff:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e706:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e70c:	68 30 bc 03 c0       	push   0xc003bc30
c000e711:	e8 b8 03 01 00       	call   c001eace <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e716:	83 c4 10             	add    esp,0x10
c000e719:	eb af                	jmp    c000e6ca <schedule()+0x34>

c000e71b <unlockStuff()>:
c000e71b:	a1 10 bc 03 c0       	mov    eax,ds:0xc003bc10
c000e720:	48                   	dec    eax
c000e721:	a3 10 bc 03 c0       	mov    ds:0xc003bc10,eax
c000e726:	75 09                	jne    c000e731 <unlockStuff()+0x16>
c000e728:	a1 0c bc 03 c0       	mov    eax,ds:0xc003bc0c
c000e72d:	85 c0                	test   eax,eax
c000e72f:	75 05                	jne    c000e736 <unlockStuff()+0x1b>
c000e731:	e9 1d fc ff ff       	jmp    c000e353 <enableIRQs()>
c000e736:	83 ec 0c             	sub    esp,0xc
c000e739:	c7 05 0c bc 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bc0c,0x0
c000e743:	e8 4e ff ff ff       	call   c000e696 <schedule()>
c000e748:	83 c4 0c             	add    esp,0xc
c000e74b:	e9 03 fc ff ff       	jmp    c000e353 <enableIRQs()>

c000e750 <forkProcess(regs*)>:
c000e750:	56                   	push   esi
c000e751:	53                   	push   ebx
c000e752:	50                   	push   eax
c000e753:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e758:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e75b:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e763:	0f 85 3e 01 00 00    	jne    c000e8a7 <forkProcess(regs*)+0x157>
c000e769:	e8 1b fc ff ff       	call   c000e389 <lockStuff()>
c000e76e:	83 ec 0c             	sub    esp,0xc
c000e771:	68 3b 07 00 00       	push   0x73b
c000e776:	e8 f5 3c 00 00       	call   c0012470 <operator new(unsigned long)>
c000e77b:	89 c3                	mov    ebx,eax
c000e77d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e782:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e785:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e78c:	50                   	push   eax
c000e78d:	83 c0 0c             	add    eax,0xc
c000e790:	50                   	push   eax
c000e791:	6a 00                	push   0x0
c000e793:	53                   	push   ebx
c000e794:	e8 29 fa ff ff       	call   c000e1c2 <Process::Process(bool, char const*, Process*, char**)>
c000e799:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e79f:	83 c4 20             	add    esp,0x20
c000e7a2:	85 f6                	test   esi,esi
c000e7a4:	74 16                	je     c000e7bc <forkProcess(regs*)+0x6c>
c000e7a6:	83 ec 0c             	sub    esp,0xc
c000e7a9:	56                   	push   esi
c000e7aa:	e8 fb 2f 00 00       	call   c00117aa <VAS::~VAS()>
c000e7af:	59                   	pop    ecx
c000e7b0:	58                   	pop    eax
c000e7b1:	6a 10                	push   0x10
c000e7b3:	56                   	push   esi
c000e7b4:	e8 c6 3c 00 00       	call   c001247f <operator delete(void*, unsigned long)>
c000e7b9:	83 c4 10             	add    esp,0x10
c000e7bc:	83 ec 0c             	sub    esp,0xc
c000e7bf:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e7c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7d0:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e7d6:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e7dc:	6a 10                	push   0x10
c000e7de:	e8 8d 3c 00 00       	call   c0012470 <operator new(unsigned long)>
c000e7e3:	59                   	pop    ecx
c000e7e4:	89 c6                	mov    esi,eax
c000e7e6:	58                   	pop    eax
c000e7e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7ef:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e7f5:	56                   	push   esi
c000e7f6:	e8 d1 34 00 00       	call   c0011ccc <VAS::VAS(VAS*)>
c000e7fb:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e801:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e804:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e806:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e80c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e811:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e814:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e81a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e81f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e822:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e828:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e82d:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e830:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e83a:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e840:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e846:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e84c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e851:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e854:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e85b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e85e:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e865:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e86c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e873:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e878:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e87b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e87e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e883:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e886:	58                   	pop    eax
c000e887:	5a                   	pop    edx
c000e888:	53                   	push   ebx
c000e889:	68 30 bc 03 c0       	push   0xc003bc30
c000e88e:	e8 3b 02 01 00       	call   c001eace <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e893:	e8 83 fe ff ff       	call   c000e71b <unlockStuff()>
c000e898:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e89d:	83 c4 10             	add    esp,0x10
c000e8a0:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e8a3:	5a                   	pop    edx
c000e8a4:	5b                   	pop    ebx
c000e8a5:	5e                   	pop    esi
c000e8a6:	c3                   	ret    
c000e8a7:	83 ec 0c             	sub    esp,0xc
c000e8aa:	68 c4 8f 03 c0       	push   0xc0038fc4
c000e8af:	e8 0c e6 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000e8b4:	83 c4 10             	add    esp,0x10
c000e8b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e8bc:	eb e5                	jmp    c000e8a3 <forkProcess(regs*)+0x153>

c000e8be <Semaphore::tryAcquire()>:
c000e8be:	83 ec 0c             	sub    esp,0xc
c000e8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c5:	e8 bf fa ff ff       	call   c000e389 <lockStuff()>
c000e8ca:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e8cd:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e8cf:	7c 0b                	jl     c000e8dc <Semaphore::tryAcquire()+0x1e>
c000e8d1:	e8 45 fe ff ff       	call   c000e71b <unlockStuff()>
c000e8d6:	31 c0                	xor    eax,eax
c000e8d8:	83 c4 0c             	add    esp,0xc
c000e8db:	c3                   	ret    
c000e8dc:	42                   	inc    edx
c000e8dd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e8e0:	e8 36 fe ff ff       	call   c000e71b <unlockStuff()>
c000e8e5:	b0 01                	mov    al,0x1
c000e8e7:	83 c4 0c             	add    esp,0xc
c000e8ea:	c3                   	ret    
c000e8eb:	90                   	nop

c000e8ec <Semaphore::assertLocked(char const*)>:
c000e8ec:	83 ec 0c             	sub    esp,0xc
c000e8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e8f7:	e8 8d fa ff ff       	call   c000e389 <lockStuff()>
c000e8fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e8fe:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e901:	7c 08                	jl     c000e90b <Semaphore::assertLocked(char const*)+0x1f>
c000e903:	83 c4 0c             	add    esp,0xc
c000e906:	e9 10 fe ff ff       	jmp    c000e71b <unlockStuff()>
c000e90b:	83 ec 0c             	sub    esp,0xc
c000e90e:	52                   	push   edx
c000e90f:	e8 ca e6 ff ff       	call   c000cfde <panic(char const*)>
c000e914:	83 c4 10             	add    esp,0x10
c000e917:	83 c4 0c             	add    esp,0xc
c000e91a:	e9 fc fd ff ff       	jmp    c000e71b <unlockStuff()>

c000e91f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e91f:	83 ec 0c             	sub    esp,0xc
c000e922:	e8 26 fa ff ff       	call   c000e34d <getIRQNestingLevel()>
c000e927:	83 ec 08             	sub    esp,0x8
c000e92a:	50                   	push   eax
c000e92b:	68 f0 8f 03 c0       	push   0xc0038ff0
c000e930:	e8 8b e5 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000e935:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e939:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e93e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e941:	e8 50 fd ff ff       	call   c000e696 <schedule()>
c000e946:	e8 19 fa ff ff       	call   c000e364 <unlockScheduler()>
c000e94b:	e8 fd f9 ff ff       	call   c000e34d <getIRQNestingLevel()>
c000e950:	5a                   	pop    edx
c000e951:	59                   	pop    ecx
c000e952:	50                   	push   eax
c000e953:	68 24 90 03 c0       	push   0xc0039024
c000e958:	e8 63 e5 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000e95d:	83 c4 1c             	add    esp,0x1c
c000e960:	c3                   	ret    

c000e961 <blockTask(TaskState)>:
c000e961:	83 ec 0c             	sub    esp,0xc
c000e964:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e968:	e8 f5 f9 ff ff       	call   c000e362 <lockScheduler()>
c000e96d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e972:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e975:	e8 1c fd ff ff       	call   c000e696 <schedule()>
c000e97a:	83 c4 0c             	add    esp,0xc
c000e97d:	e9 e2 f9 ff ff       	jmp    c000e364 <unlockScheduler()>

c000e982 <waitTask(int, int*, int)>:
c000e982:	83 ec 18             	sub    esp,0x18
c000e985:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e98a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e98e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e991:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e99a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e99d:	6a 07                	push   0x7
c000e99f:	e8 bd ff ff ff       	call   c000e961 <blockTask(TaskState)>
c000e9a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9a9:	83 c4 10             	add    esp,0x10
c000e9ac:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e9af:	85 d2                	test   edx,edx
c000e9b1:	74 0a                	je     c000e9bd <waitTask(int, int*, int)+0x3b>
c000e9b3:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e9b6:	89 02                	mov    DWORD PTR [edx],eax
c000e9b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9bd:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000e9c0:	83 c4 0c             	add    esp,0xc
c000e9c3:	c3                   	ret    

c000e9c4 <nanoSleepUntil(unsigned long long)>:
c000e9c4:	83 ec 0c             	sub    esp,0xc
c000e9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e9cf:	3b 05 b0 c3 03 c0    	cmp    eax,DWORD PTR ds:0xc003c3b0
c000e9d5:	89 d1                	mov    ecx,edx
c000e9d7:	1b 0d b4 c3 03 c0    	sbb    ecx,DWORD PTR ds:0xc003c3b4
c000e9dd:	73 04                	jae    c000e9e3 <nanoSleepUntil(unsigned long long)+0x1f>
c000e9df:	83 c4 0c             	add    esp,0xc
c000e9e2:	c3                   	ret    
c000e9e3:	e8 a1 f9 ff ff       	call   c000e389 <lockStuff()>
c000e9e8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e9ee:	83 ec 08             	sub    esp,0x8
c000e9f1:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000e9f4:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000e9f7:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e9fd:	68 24 bc 03 c0       	push   0xc003bc24
c000ea02:	e8 c7 00 01 00       	call   c001eace <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ea07:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ea0e:	e8 4e ff ff ff       	call   c000e961 <blockTask(TaskState)>
c000ea13:	83 c4 1c             	add    esp,0x1c
c000ea16:	e9 00 fd ff ff       	jmp    c000e71b <unlockStuff()>

c000ea1b <nanoSleep(unsigned long long)>:
c000ea1b:	a1 b0 c3 03 c0       	mov    eax,ds:0xc003c3b0
c000ea20:	8b 15 b4 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c3b4
c000ea26:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000ea2a:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000ea2e:	eb 94                	jmp    c000e9c4 <nanoSleepUntil(unsigned long long)>

c000ea30 <sleep(unsigned long long)>:
c000ea30:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000ea38:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000ea3d:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000ea41:	01 ca                	add    edx,ecx
c000ea43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ea47:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ea4b:	eb ce                	jmp    c000ea1b <nanoSleep(unsigned long long)>
c000ea4d:	90                   	nop

c000ea4e <Semaphore::acquire()>:
c000ea4e:	83 ec 0c             	sub    esp,0xc
c000ea51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea55:	e8 2f f9 ff ff       	call   c000e389 <lockStuff()>
c000ea5a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ea5d:	3b 10                	cmp    edx,DWORD PTR [eax]
c000ea5f:	7d 0c                	jge    c000ea6d <Semaphore::acquire()+0x1f>
c000ea61:	42                   	inc    edx
c000ea62:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ea65:	83 c4 0c             	add    esp,0xc
c000ea68:	e9 ae fc ff ff       	jmp    c000e71b <unlockStuff()>
c000ea6d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea73:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000ea7a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ea7d:	85 d2                	test   edx,edx
c000ea7f:	74 2a                	je     c000eaab <Semaphore::acquire()+0x5d>
c000ea81:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ea84:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ea8a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000ea8d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea93:	83 ec 0c             	sub    esp,0xc
c000ea96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ea99:	6a 05                	push   0x5
c000ea9b:	e8 c1 fe ff ff       	call   c000e961 <blockTask(TaskState)>
c000eaa0:	83 c4 10             	add    esp,0x10
c000eaa3:	83 c4 0c             	add    esp,0xc
c000eaa6:	e9 70 fc ff ff       	jmp    c000e71b <unlockStuff()>
c000eaab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000eab1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eab4:	eb d7                	jmp    c000ea8d <Semaphore::acquire()+0x3f>

c000eab6 <execveProcess(char const*, char* const*, char* const*)>:
c000eab6:	56                   	push   esi
c000eab7:	53                   	push   ebx
c000eab8:	50                   	push   eax
c000eab9:	e8 cb f8 ff ff       	call   c000e389 <lockStuff()>
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eac6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eac9:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000eacf:	68 3b 07 00 00       	push   0x73b
c000ead4:	e8 97 39 00 00       	call   c0012470 <operator new(unsigned long)>
c000ead9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eadd:	89 c3                	mov    ebx,eax
c000eadf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eae4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eae7:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000eaed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaf1:	53                   	push   ebx
c000eaf2:	e8 13 f5 ff ff       	call   c000e00a <Process::Process(char const*, Process*, char**)>
c000eaf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eafc:	83 c4 20             	add    esp,0x20
c000eaff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb02:	85 f6                	test   esi,esi
c000eb04:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb06:	89 03                	mov    DWORD PTR [ebx],eax
c000eb08:	74 06                	je     c000eb10 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000eb0a:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000eb10:	83 ec 0c             	sub    esp,0xc
c000eb13:	53                   	push   ebx
c000eb14:	e8 57 fa ff ff       	call   c000e570 <Process::createUserThread()>
c000eb19:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eb20:	e8 3c fe ff ff       	call   c000e961 <blockTask(TaskState)>
c000eb25:	e8 f1 fb ff ff       	call   c000e71b <unlockStuff()>
c000eb2a:	e8 33 f8 ff ff       	call   c000e362 <lockScheduler()>
c000eb2f:	e8 62 fb ff ff       	call   c000e696 <schedule()>
c000eb34:	e8 2b f8 ff ff       	call   c000e364 <unlockScheduler()>
c000eb39:	83 c4 14             	add    esp,0x14
c000eb3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb41:	5b                   	pop    ebx
c000eb42:	5e                   	pop    esi
c000eb43:	c3                   	ret    

c000eb44 <taskReturned>:
c000eb44:	83 ec 0c             	sub    esp,0xc
c000eb47:	e8 18 f8 ff ff       	call   c000e364 <unlockScheduler()>
c000eb4c:	83 ec 08             	sub    esp,0x8
c000eb4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb54:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb57:	83 c0 0c             	add    eax,0xc
c000eb5a:	50                   	push   eax
c000eb5b:	68 1f 8f 03 c0       	push   0xc0038f1f
c000eb60:	e8 5b e3 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000eb65:	83 c4 10             	add    esp,0x10
c000eb68:	83 ec 0c             	sub    esp,0xc
c000eb6b:	6a 02                	push   0x2
c000eb6d:	e8 ef fd ff ff       	call   c000e961 <blockTask(TaskState)>
c000eb72:	e8 eb f7 ff ff       	call   c000e362 <lockScheduler()>
c000eb77:	e8 1a fb ff ff       	call   c000e696 <schedule()>
c000eb7c:	e8 e3 f7 ff ff       	call   c000e364 <unlockScheduler()>
c000eb81:	83 c4 10             	add    esp,0x10
c000eb84:	eb e2                	jmp    c000eb68 <taskReturned+0x24>

c000eb86 <unblockTask(ThreadControlBlock*)>:
c000eb86:	53                   	push   ebx
c000eb87:	83 ec 08             	sub    esp,0x8
c000eb8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb8e:	e8 cf f7 ff ff       	call   c000e362 <lockScheduler()>
c000eb93:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eb96:	85 c0                	test   eax,eax
c000eb98:	74 5c                	je     c000ebf6 <unblockTask(ThreadControlBlock*)+0x70>
c000eb9a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eb9d:	48                   	dec    eax
c000eb9e:	74 31                	je     c000ebd1 <unblockTask(ThreadControlBlock*)+0x4b>
c000eba0:	83 ec 0c             	sub    esp,0xc
c000eba3:	68 30 bc 03 c0       	push   0xc003bc30
c000eba8:	e8 bf 00 01 00       	call   c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	85 c0                	test   eax,eax
c000ebb2:	75 17                	jne    c000ebcb <unblockTask(ThreadControlBlock*)+0x45>
c000ebb4:	eb 65                	jmp    c000ec1b <unblockTask(ThreadControlBlock*)+0x95>
c000ebb6:	83 ec 08             	sub    esp,0x8
c000ebb9:	50                   	push   eax
c000ebba:	68 30 bc 03 c0       	push   0xc003bc30
c000ebbf:	e8 b0 00 01 00       	call   c001ec74 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000ebc4:	83 c4 10             	add    esp,0x10
c000ebc7:	85 c0                	test   eax,eax
c000ebc9:	74 50                	je     c000ec1b <unblockTask(ThreadControlBlock*)+0x95>
c000ebcb:	39 c3                	cmp    ebx,eax
c000ebcd:	75 e7                	jne    c000ebb6 <unblockTask(ThreadControlBlock*)+0x30>
c000ebcf:	eb 1c                	jmp    c000ebed <unblockTask(ThreadControlBlock*)+0x67>
c000ebd1:	83 ec 0c             	sub    esp,0xc
c000ebd4:	68 14 91 03 c0       	push   0xc0039114
c000ebd9:	e8 e2 e2 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000ebde:	c7 04 24 a0 90 03 c0 	mov    DWORD PTR [esp],0xc00390a0
c000ebe5:	e8 d6 e2 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000ebea:	83 c4 10             	add    esp,0x10
c000ebed:	83 c4 08             	add    esp,0x8
c000ebf0:	5b                   	pop    ebx
c000ebf1:	e9 6e f7 ff ff       	jmp    c000e364 <unlockScheduler()>
c000ebf6:	83 ec 0c             	sub    esp,0xc
c000ebf9:	68 58 90 03 c0       	push   0xc0039058
c000ebfe:	e8 bd e2 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000ec03:	c7 04 24 a0 90 03 c0 	mov    DWORD PTR [esp],0xc00390a0
c000ec0a:	e8 b1 e2 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000ec0f:	83 c4 10             	add    esp,0x10
c000ec12:	83 c4 08             	add    esp,0x8
c000ec15:	5b                   	pop    ebx
c000ec16:	e9 49 f7 ff ff       	jmp    c000e364 <unlockScheduler()>
c000ec1b:	83 ec 08             	sub    esp,0x8
c000ec1e:	53                   	push   ebx
c000ec1f:	68 30 bc 03 c0       	push   0xc003bc30
c000ec24:	e8 a5 fe 00 00       	call   c001eace <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ec29:	83 c4 10             	add    esp,0x10
c000ec2c:	83 c4 08             	add    esp,0x8
c000ec2f:	5b                   	pop    ebx
c000ec30:	e9 2f f7 ff ff       	jmp    c000e364 <unlockScheduler()>

c000ec35 <cleanupTerminatedTask(ThreadControlBlock*)>:
c000ec35:	55                   	push   ebp
c000ec36:	57                   	push   edi
c000ec37:	56                   	push   esi
c000ec38:	53                   	push   ebx
c000ec39:	83 ec 1c             	sub    esp,0x1c
c000ec3c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ec40:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec43:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000ec49:	85 c9                	test   ecx,ecx
c000ec4b:	7e 20                	jle    c000ec6d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000ec4d:	31 f6                	xor    esi,esi
c000ec4f:	83 ec 0c             	sub    esp,0xc
c000ec52:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000ec59:	46                   	inc    esi
c000ec5a:	e8 6c e8 ff ff       	call   c000d4cb <free>
c000ec5f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec62:	83 c4 10             	add    esp,0x10
c000ec65:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000ec6b:	7f e2                	jg     c000ec4f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000ec6d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000ec77:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000ec7c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000ec7f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ec82:	d3 c0                	rol    eax,cl
c000ec84:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000ec8b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ec8e:	89 f7                	mov    edi,esi
c000ec90:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000ec98:	0f 85 4f 01 00 00    	jne    c000eded <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000ec9e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000eca4:	85 c0                	test   eax,eax
c000eca6:	0f 84 aa 00 00 00    	je     c000ed56 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ecac:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000ecaf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ecb3:	31 c9                	xor    ecx,ecx
c000ecb5:	eb 10                	jmp    c000ecc7 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000ecb7:	41                   	inc    ecx
c000ecb8:	83 f9 10             	cmp    ecx,0x10
c000ecbb:	0f 84 95 00 00 00    	je     c000ed56 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ecc1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ecc7:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000ecce:	d3 fa                	sar    edx,cl
c000ecd0:	83 e2 01             	and    edx,0x1
c000ecd3:	74 e2                	je     c000ecb7 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ecd5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000ecd8:	01 ca                	add    edx,ecx
c000ecda:	89 d5                	mov    ebp,edx
c000ecdc:	c1 e5 05             	shl    ebp,0x5
c000ecdf:	01 ea                	add    edx,ebp
c000ece1:	01 d0                	add    eax,edx
c000ece3:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000ece9:	83 fd 07             	cmp    ebp,0x7
c000ecec:	75 c9                	jne    c000ecb7 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ecee:	05 40 02 00 00       	add    eax,0x240
c000ecf3:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000ecf6:	83 fd ff             	cmp    ebp,0xffffffff
c000ecf9:	0f 8c 01 01 00 00    	jl     c000ee00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000ecff:	0f 84 b2 01 00 00    	je     c000eeb7 <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000ed05:	85 ed                	test   ebp,ebp
c000ed07:	0f 84 99 01 00 00    	je     c000eea6 <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000ed0d:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000ed0f:	75 a6                	jne    c000ecb7 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ed11:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ed17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ed1b:	01 d0                	add    eax,edx
c000ed1d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ed21:	83 ec 0c             	sub    esp,0xc
c000ed24:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000ed2a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed2d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ed33:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000ed3a:	50                   	push   eax
c000ed3b:	e8 46 fe ff ff       	call   c000eb86 <unblockTask(ThreadControlBlock*)>
c000ed40:	83 c4 10             	add    esp,0x10
c000ed43:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ed46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed4a:	89 f7                	mov    edi,esi
c000ed4c:	41                   	inc    ecx
c000ed4d:	83 f9 10             	cmp    ecx,0x10
c000ed50:	0f 85 6b ff ff ff    	jne    c000ecc1 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000ed56:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000ed5c:	85 c0                	test   eax,eax
c000ed5e:	74 5d                	je     c000edbd <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ed60:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000ed66:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000ed6c:	74 4f                	je     c000edbd <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ed6e:	83 ec 0c             	sub    esp,0xc
c000ed71:	68 30 bc 03 c0       	push   0xc003bc30
c000ed76:	e8 f1 fe 00 00       	call   c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ed7b:	c7 04 24 30 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc30
c000ed82:	89 c7                	mov    edi,eax
c000ed84:	e8 19 fe 00 00       	call   c001eba2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ed89:	83 c4 10             	add    esp,0x10
c000ed8c:	84 c0                	test   al,al
c000ed8e:	0f 84 dd 00 00 00    	je     c000ee71 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000ed94:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed97:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000ed9d:	85 d2                	test   edx,edx
c000ed9f:	74 0f                	je     c000edb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000eda1:	83 ec 0c             	sub    esp,0xc
c000eda4:	8b 02                	mov    eax,DWORD PTR [edx]
c000eda6:	52                   	push   edx
c000eda7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000edaa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000edad:	83 c4 10             	add    esp,0x10
c000edb0:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000edba:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000edbd:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000edc3:	85 f6                	test   esi,esi
c000edc5:	74 16                	je     c000eddd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000edc7:	83 ec 0c             	sub    esp,0xc
c000edca:	56                   	push   esi
c000edcb:	e8 da 29 00 00       	call   c00117aa <VAS::~VAS()>
c000edd0:	58                   	pop    eax
c000edd1:	5a                   	pop    edx
c000edd2:	6a 10                	push   0x10
c000edd4:	56                   	push   esi
c000edd5:	e8 a5 36 00 00       	call   c001247f <operator delete(void*, unsigned long)>
c000edda:	83 c4 10             	add    esp,0x10
c000eddd:	83 ec 0c             	sub    esp,0xc
c000ede0:	68 3b 8f 03 c0       	push   0xc0038f3b
c000ede5:	e8 d6 e0 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000edea:	83 c4 10             	add    esp,0x10
c000eded:	83 ec 08             	sub    esp,0x8
c000edf0:	6a 63                	push   0x63
c000edf2:	53                   	push   ebx
c000edf3:	e8 87 36 00 00       	call   c001247f <operator delete(void*, unsigned long)>
c000edf8:	83 c4 2c             	add    esp,0x2c
c000edfb:	5b                   	pop    ebx
c000edfc:	5e                   	pop    esi
c000edfd:	5f                   	pop    edi
c000edfe:	5d                   	pop    ebp
c000edff:	c3                   	ret    
c000ee00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ee04:	83 ec 0c             	sub    esp,0xc
c000ee07:	68 58 91 03 c0       	push   0xc0039158
c000ee0c:	e8 cd e1 ff ff       	call   c000cfde <panic(char const*)>
c000ee11:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ee14:	83 c4 10             	add    esp,0x10
c000ee17:	89 f7                	mov    edi,esi
c000ee19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee1d:	e9 95 fe ff ff       	jmp    c000ecb7 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ee22:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000ee28:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000ee2e:	75 1c                	jne    c000ee4c <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee30:	83 ec 0c             	sub    esp,0xc
c000ee33:	68 c0 91 03 c0       	push   0xc00391c0
c000ee38:	e8 83 e0 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000ee3d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ee44:	e8 18 fb ff ff       	call   c000e961 <blockTask(TaskState)>
c000ee49:	83 c4 10             	add    esp,0x10
c000ee4c:	83 ec 08             	sub    esp,0x8
c000ee4f:	56                   	push   esi
c000ee50:	68 30 bc 03 c0       	push   0xc003bc30
c000ee55:	e8 74 fc 00 00       	call   c001eace <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ee5a:	c7 04 24 30 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc30
c000ee61:	e8 06 fe 00 00       	call   c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ee66:	83 c4 10             	add    esp,0x10
c000ee69:	39 f8                	cmp    eax,edi
c000ee6b:	0f 84 23 ff ff ff    	je     c000ed94 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000ee71:	83 ec 0c             	sub    esp,0xc
c000ee74:	68 30 bc 03 c0       	push   0xc003bc30
c000ee79:	e8 ee fd 00 00       	call   c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ee7e:	c7 04 24 30 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc30
c000ee85:	89 c6                	mov    esi,eax
c000ee87:	e8 32 fd 00 00       	call   c001ebbe <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ee8c:	83 c4 10             	add    esp,0x10
c000ee8f:	39 f3                	cmp    ebx,esi
c000ee91:	74 b9                	je     c000ee4c <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee93:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000ee96:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ee99:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000ee9f:	75 ab                	jne    c000ee4c <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eea1:	e9 7c ff ff ff       	jmp    c000ee22 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000eea6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eeaa:	83 ec 0c             	sub    esp,0xc
c000eead:	68 8c 91 03 c0       	push   0xc003918c
c000eeb2:	e9 55 ff ff ff       	jmp    c000ee0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000eeb7:	8b 36                	mov    esi,DWORD PTR [esi]
c000eeb9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eebd:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000eec0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eec3:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000eec9:	01 d7                	add    edi,edx
c000eecb:	89 f8                	mov    eax,edi
c000eecd:	e9 4b fe ff ff       	jmp    c000ed1d <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000eed2 <cleanerTaskFunction(void*)>:
c000eed2:	53                   	push   ebx
c000eed3:	83 ec 08             	sub    esp,0x8
c000eed6:	e8 89 f4 ff ff       	call   c000e364 <unlockScheduler()>
c000eedb:	e8 82 f4 ff ff       	call   c000e362 <lockScheduler()>
c000eee0:	80 3d f4 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbf4,0x0
c000eee7:	75 72                	jne    c000ef5b <cleanerTaskFunction(void*)+0x89>
c000eee9:	83 ec 0c             	sub    esp,0xc
c000eeec:	6a 02                	push   0x2
c000eeee:	e8 2c fa ff ff       	call   c000e91f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000eef3:	83 c4 10             	add    esp,0x10
c000eef6:	c6 05 f4 bb 03 c0 00 	mov    BYTE PTR ds:0xc003bbf4,0x0
c000eefd:	e8 87 f4 ff ff       	call   c000e389 <lockStuff()>
c000ef02:	e8 5b f4 ff ff       	call   c000e362 <lockScheduler()>
c000ef07:	83 ec 0c             	sub    esp,0xc
c000ef0a:	68 18 bc 03 c0       	push   0xc003bc18
c000ef0f:	e8 8e fc 00 00       	call   c001eba2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ef14:	83 c4 10             	add    esp,0x10
c000ef17:	84 c0                	test   al,al
c000ef19:	75 28                	jne    c000ef43 <cleanerTaskFunction(void*)+0x71>
c000ef1b:	83 ec 0c             	sub    esp,0xc
c000ef1e:	68 18 bc 03 c0       	push   0xc003bc18
c000ef23:	e8 44 fd 00 00       	call   c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ef28:	c7 04 24 18 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc18
c000ef2f:	89 c3                	mov    ebx,eax
c000ef31:	e8 88 fc 00 00       	call   c001ebbe <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ef36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef39:	e8 f7 fc ff ff       	call   c000ec35 <cleanupTerminatedTask(ThreadControlBlock*)>
c000ef3e:	83 c4 10             	add    esp,0x10
c000ef41:	eb c4                	jmp    c000ef07 <cleanerTaskFunction(void*)+0x35>
c000ef43:	e8 1c f4 ff ff       	call   c000e364 <unlockScheduler()>
c000ef48:	e8 ce f7 ff ff       	call   c000e71b <unlockStuff()>
c000ef4d:	e8 10 f4 ff ff       	call   c000e362 <lockScheduler()>
c000ef52:	80 3d f4 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbf4,0x0
c000ef59:	74 8e                	je     c000eee9 <cleanerTaskFunction(void*)+0x17>
c000ef5b:	e8 04 f4 ff ff       	call   c000e364 <unlockScheduler()>
c000ef60:	eb 94                	jmp    c000eef6 <cleanerTaskFunction(void*)+0x24>

c000ef62 <terminateTask(int)>:
c000ef62:	83 ec 0c             	sub    esp,0xc
c000ef65:	e8 1f f4 ff ff       	call   c000e389 <lockStuff()>
c000ef6a:	e8 f3 f3 ff ff       	call   c000e362 <lockScheduler()>
c000ef6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef78:	83 ec 08             	sub    esp,0x8
c000ef7b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000ef7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef83:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000ef86:	50                   	push   eax
c000ef87:	68 18 bc 03 c0       	push   0xc003bc18
c000ef8c:	e8 3d fb 00 00       	call   c001eace <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ef91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef96:	83 c4 10             	add    esp,0x10
c000ef99:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000efa0:	a1 f0 bb 03 c0       	mov    eax,ds:0xc003bbf0
c000efa5:	85 c0                	test   eax,eax
c000efa7:	74 2e                	je     c000efd7 <terminateTask(int)+0x75>
c000efa9:	83 ec 0c             	sub    esp,0xc
c000efac:	c6 05 f4 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bbf4,0x1
c000efb3:	50                   	push   eax
c000efb4:	e8 cd fb ff ff       	call   c000eb86 <unblockTask(ThreadControlBlock*)>
c000efb9:	83 c4 10             	add    esp,0x10
c000efbc:	e8 a3 f3 ff ff       	call   c000e364 <unlockScheduler()>
c000efc1:	e8 55 f7 ff ff       	call   c000e71b <unlockStuff()>
c000efc6:	e8 97 f3 ff ff       	call   c000e362 <lockScheduler()>
c000efcb:	e8 c6 f6 ff ff       	call   c000e696 <schedule()>
c000efd0:	e8 8f f3 ff ff       	call   c000e364 <unlockScheduler()>
c000efd5:	eb ef                	jmp    c000efc6 <terminateTask(int)+0x64>
c000efd7:	83 ec 0c             	sub    esp,0xc
c000efda:	68 49 8f 03 c0       	push   0xc0038f49
c000efdf:	e8 dc de ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000efe4:	83 c4 10             	add    esp,0x10
c000efe7:	eb d3                	jmp    c000efbc <terminateTask(int)+0x5a>
c000efe9:	90                   	nop

c000efea <Semaphore::release()>:
c000efea:	83 ec 0c             	sub    esp,0xc
c000efed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eff1:	e8 93 f3 ff ff       	call   c000e389 <lockStuff()>
c000eff6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eff9:	85 d2                	test   edx,edx
c000effb:	74 1a                	je     c000f017 <Semaphore::release()+0x2d>
c000effd:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000f000:	83 ec 0c             	sub    esp,0xc
c000f003:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000f006:	52                   	push   edx
c000f007:	e8 7a fb ff ff       	call   c000eb86 <unblockTask(ThreadControlBlock*)>
c000f00c:	83 c4 10             	add    esp,0x10
c000f00f:	83 c4 0c             	add    esp,0xc
c000f012:	e9 04 f7 ff ff       	jmp    c000e71b <unlockStuff()>
c000f017:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000f01a:	83 c4 0c             	add    esp,0xc
c000f01d:	e9 f9 f6 ff ff       	jmp    c000e71b <unlockStuff()>

c000f022 <__static_initialization_and_destruction_0(int, int)>:
c000f022:	83 ec 0c             	sub    esp,0xc
c000f025:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f02a:	0f 85 88 00 00 00    	jne    c000f0b8 <__static_initialization_and_destruction_0(int, int)+0x96>
c000f030:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000f038:	75 7e                	jne    c000f0b8 <__static_initialization_and_destruction_0(int, int)+0x96>
c000f03a:	83 ec 0c             	sub    esp,0xc
c000f03d:	68 30 bc 03 c0       	push   0xc003bc30
c000f042:	e8 2f fa 00 00       	call   c001ea76 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f047:	83 c4 10             	add    esp,0x10
c000f04a:	83 ec 04             	sub    esp,0x4
c000f04d:	68 0c ae 03 c0       	push   0xc003ae0c
c000f052:	68 30 bc 03 c0       	push   0xc003bc30
c000f057:	68 36 ea 01 c0       	push   0xc001ea36
c000f05c:	e8 9a 33 00 00       	call   c00123fb <__cxa_atexit>
c000f061:	83 c4 10             	add    esp,0x10
c000f064:	83 ec 0c             	sub    esp,0xc
c000f067:	68 24 bc 03 c0       	push   0xc003bc24
c000f06c:	e8 05 fa 00 00       	call   c001ea76 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f071:	83 c4 10             	add    esp,0x10
c000f074:	83 ec 04             	sub    esp,0x4
c000f077:	68 0c ae 03 c0       	push   0xc003ae0c
c000f07c:	68 24 bc 03 c0       	push   0xc003bc24
c000f081:	68 36 ea 01 c0       	push   0xc001ea36
c000f086:	e8 70 33 00 00       	call   c00123fb <__cxa_atexit>
c000f08b:	83 c4 10             	add    esp,0x10
c000f08e:	83 ec 0c             	sub    esp,0xc
c000f091:	68 18 bc 03 c0       	push   0xc003bc18
c000f096:	e8 db f9 00 00       	call   c001ea76 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f09b:	83 c4 10             	add    esp,0x10
c000f09e:	83 ec 04             	sub    esp,0x4
c000f0a1:	68 0c ae 03 c0       	push   0xc003ae0c
c000f0a6:	68 18 bc 03 c0       	push   0xc003bc18
c000f0ab:	68 36 ea 01 c0       	push   0xc001ea36
c000f0b0:	e8 46 33 00 00       	call   c00123fb <__cxa_atexit>
c000f0b5:	83 c4 10             	add    esp,0x10
c000f0b8:	90                   	nop
c000f0b9:	83 c4 0c             	add    esp,0xc
c000f0bc:	c3                   	ret    

c000f0bd <_GLOBAL__sub_I_kernelProcess>:
c000f0bd:	83 ec 0c             	sub    esp,0xc
c000f0c0:	83 ec 08             	sub    esp,0x8
c000f0c3:	68 ff ff 00 00       	push   0xffff
c000f0c8:	6a 01                	push   0x1
c000f0ca:	e8 53 ff ff ff       	call   c000f022 <__static_initialization_and_destruction_0(int, int)>
c000f0cf:	83 c4 10             	add    esp,0x10
c000f0d2:	83 c4 0c             	add    esp,0xc
c000f0d5:	c3                   	ret    

c000f0d6 <sysCallGetPID(regs*)>:
c000f0d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0e0:	99                   	cdq    
c000f0e1:	c3                   	ret    

c000f0e2 <sysCallSeekDir(regs*)>:
c000f0e2:	31 c0                	xor    eax,eax
c000f0e4:	31 d2                	xor    edx,edx
c000f0e6:	c3                   	ret    

c000f0e7 <sysCallTellDir(regs*)>:
c000f0e7:	31 c0                	xor    eax,eax
c000f0e9:	31 d2                	xor    edx,edx
c000f0eb:	c3                   	ret    

c000f0ec <sysCallVerify(regs*)>:
c000f0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f0:	31 d2                	xor    edx,edx
c000f0f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f0f5:	c3                   	ret    

c000f0f6 <sysCallGetArgc(regs*)>:
c000f0f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0fe:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000f104:	99                   	cdq    
c000f105:	c3                   	ret    

c000f106 <sysFormatDisk(regs*)>:
c000f106:	56                   	push   esi
c000f107:	53                   	push   ebx
c000f108:	53                   	push   ebx
c000f109:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f10d:	8b 1d a0 be 03 c0    	mov    ebx,DWORD PTR ds:0xc003bea0
c000f113:	eb 25                	jmp    c000f13a <sysFormatDisk(regs*)+0x34>
c000f115:	83 ec 0c             	sub    esp,0xc
c000f118:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f11b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f11d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f120:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f123:	50                   	push   eax
c000f124:	ff 34 85 40 c3 03 c0 	push   DWORD PTR [eax*4-0x3ffc3cc0]
c000f12b:	53                   	push   ebx
c000f12c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000f12f:	83 c4 20             	add    esp,0x20
c000f132:	83 f8 08             	cmp    eax,0x8
c000f135:	75 12                	jne    c000f149 <sysFormatDisk(regs*)+0x43>
c000f137:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f13a:	85 db                	test   ebx,ebx
c000f13c:	75 d7                	jne    c000f115 <sysFormatDisk(regs*)+0xf>
c000f13e:	59                   	pop    ecx
c000f13f:	b8 03 00 00 00       	mov    eax,0x3
c000f144:	31 d2                	xor    edx,edx
c000f146:	5b                   	pop    ebx
c000f147:	5e                   	pop    esi
c000f148:	c3                   	ret    
c000f149:	85 c0                	test   eax,eax
c000f14b:	74 1b                	je     c000f168 <sysFormatDisk(regs*)+0x62>
c000f14d:	83 f8 09             	cmp    eax,0x9
c000f150:	74 0b                	je     c000f15d <sysFormatDisk(regs*)+0x57>
c000f152:	59                   	pop    ecx
c000f153:	b8 02 00 00 00       	mov    eax,0x2
c000f158:	31 d2                	xor    edx,edx
c000f15a:	5b                   	pop    ebx
c000f15b:	5e                   	pop    esi
c000f15c:	c3                   	ret    
c000f15d:	59                   	pop    ecx
c000f15e:	b8 01 00 00 00       	mov    eax,0x1
c000f163:	31 d2                	xor    edx,edx
c000f165:	5b                   	pop    ebx
c000f166:	5e                   	pop    esi
c000f167:	c3                   	ret    
c000f168:	59                   	pop    ecx
c000f169:	31 c0                	xor    eax,eax
c000f16b:	31 d2                	xor    edx,edx
c000f16d:	5b                   	pop    ebx
c000f16e:	5e                   	pop    esi
c000f16f:	c3                   	ret    

c000f170 <sysSetDiskVolumeLabel(regs*)>:
c000f170:	56                   	push   esi
c000f171:	53                   	push   ebx
c000f172:	53                   	push   ebx
c000f173:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f177:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f17a:	83 f8 19             	cmp    eax,0x19
c000f17d:	77 29                	ja     c000f1a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f17f:	8b 0c 85 40 c3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc3cc0]
c000f186:	85 c9                	test   ecx,ecx
c000f188:	74 1e                	je     c000f1a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f18a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000f18d:	85 d2                	test   edx,edx
c000f18f:	74 17                	je     c000f1a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f191:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000f197:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f199:	52                   	push   edx
c000f19a:	50                   	push   eax
c000f19b:	51                   	push   ecx
c000f19c:	53                   	push   ebx
c000f19d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000f1a0:	83 c4 10             	add    esp,0x10
c000f1a3:	99                   	cdq    
c000f1a4:	59                   	pop    ecx
c000f1a5:	5b                   	pop    ebx
c000f1a6:	5e                   	pop    esi
c000f1a7:	c3                   	ret    
c000f1a8:	59                   	pop    ecx
c000f1a9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f1ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1b3:	5b                   	pop    ebx
c000f1b4:	5e                   	pop    esi
c000f1b5:	c3                   	ret    

c000f1b6 <sysGetDiskVolumeLabel(regs*)>:
c000f1b6:	57                   	push   edi
c000f1b7:	56                   	push   esi
c000f1b8:	53                   	push   ebx
c000f1b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1bd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f1c0:	83 fa 19             	cmp    edx,0x19
c000f1c3:	77 34                	ja     c000f1f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1c5:	8b 0c 95 40 c3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc3cc0]
c000f1cc:	85 c9                	test   ecx,ecx
c000f1ce:	74 29                	je     c000f1f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1d0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f1d3:	85 db                	test   ebx,ebx
c000f1d5:	74 22                	je     c000f1f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1d7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f1da:	85 c0                	test   eax,eax
c000f1dc:	74 1b                	je     c000f1f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1de:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000f1e4:	83 ec 0c             	sub    esp,0xc
c000f1e7:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f1e9:	50                   	push   eax
c000f1ea:	53                   	push   ebx
c000f1eb:	52                   	push   edx
c000f1ec:	51                   	push   ecx
c000f1ed:	56                   	push   esi
c000f1ee:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000f1f1:	83 c4 20             	add    esp,0x20
c000f1f4:	99                   	cdq    
c000f1f5:	5b                   	pop    ebx
c000f1f6:	5e                   	pop    esi
c000f1f7:	5f                   	pop    edi
c000f1f8:	c3                   	ret    
c000f1f9:	5b                   	pop    ebx
c000f1fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f1ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f204:	5e                   	pop    esi
c000f205:	5f                   	pop    edi
c000f206:	c3                   	ret    

c000f207 <sysShutdown(regs*)>:
c000f207:	83 ec 0c             	sub    esp,0xc
c000f20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f20e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f211:	85 c0                	test   eax,eax
c000f213:	74 24                	je     c000f239 <sysShutdown(regs*)+0x32>
c000f215:	48                   	dec    eax
c000f216:	74 0e                	je     c000f226 <sysShutdown(regs*)+0x1f>
c000f218:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f21d:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f222:	83 c4 0c             	add    esp,0xc
c000f225:	c3                   	ret    
c000f226:	a1 c0 c3 03 c0       	mov    eax,ds:0xc003c3c0
c000f22b:	85 c0                	test   eax,eax
c000f22d:	74 02                	je     c000f231 <sysShutdown(regs*)+0x2a>
c000f22f:	ff d0                	call   eax
c000f231:	31 c0                	xor    eax,eax
c000f233:	31 d2                	xor    edx,edx
c000f235:	83 c4 0c             	add    esp,0xc
c000f238:	c3                   	ret    
c000f239:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c000f23e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f240:	6a 00                	push   0x0
c000f242:	6a 00                	push   0x0
c000f244:	6a 00                	push   0x0
c000f246:	50                   	push   eax
c000f247:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f24a:	83 c4 10             	add    esp,0x10
c000f24d:	eb c9                	jmp    c000f218 <sysShutdown(regs*)+0x11>

c000f24f <sysCallGetCwd(regs*)>:
c000f24f:	83 ec 10             	sub    esp,0x10
c000f252:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f256:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f259:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f25c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f261:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f264:	e8 a6 39 00 00       	call   c0012c0f <getcwd(Process*, char*, int)>
c000f269:	83 c4 1c             	add    esp,0x1c
c000f26c:	99                   	cdq    
c000f26d:	c3                   	ret    

c000f26e <sysCallSetCwd(regs*)>:
c000f26e:	83 ec 14             	sub    esp,0x14
c000f271:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f275:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f27d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f280:	e8 b4 39 00 00       	call   c0012c39 <setcwd(Process*, char*)>
c000f285:	83 c4 1c             	add    esp,0x1c
c000f288:	99                   	cdq    
c000f289:	c3                   	ret    

c000f28a <sysCallRealpath(regs*)>:
c000f28a:	83 ec 0c             	sub    esp,0xc
c000f28d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f291:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000f294:	85 d2                	test   edx,edx
c000f296:	74 07                	je     c000f29f <sysCallRealpath(regs*)+0x15>
c000f298:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f29b:	85 c0                	test   eax,eax
c000f29d:	75 0b                	jne    c000f2aa <sysCallRealpath(regs*)+0x20>
c000f29f:	b8 01 00 00 00       	mov    eax,0x1
c000f2a4:	31 d2                	xor    edx,edx
c000f2a6:	83 c4 0c             	add    esp,0xc
c000f2a9:	c3                   	ret    
c000f2aa:	51                   	push   ecx
c000f2ab:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f2b1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f2b4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000f2ba:	51                   	push   ecx
c000f2bb:	52                   	push   edx
c000f2bc:	50                   	push   eax
c000f2bd:	e8 32 34 00 00       	call   c00126f4 <standardiseFiles(char*, char const*, char const*)>
c000f2c2:	83 c4 10             	add    esp,0x10
c000f2c5:	31 c0                	xor    eax,eax
c000f2c7:	31 d2                	xor    edx,edx
c000f2c9:	83 c4 0c             	add    esp,0xc
c000f2cc:	c3                   	ret    

c000f2cd <sysCallOpen(regs*)>:
c000f2cd:	56                   	push   esi
c000f2ce:	53                   	push   ebx
c000f2cf:	81 ec 04 01 00 00    	sub    esp,0x104
c000f2d5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000f2dc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f2df:	85 d2                	test   edx,edx
c000f2e1:	0f 84 c3 00 00 00    	je     c000f3aa <sysCallOpen(regs*)+0xdd>
c000f2e7:	50                   	push   eax
c000f2e8:	68 8f 92 03 c0       	push   0xc003928f
c000f2ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f2f0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f2f4:	56                   	push   esi
c000f2f5:	e8 fa 33 00 00       	call   c00126f4 <standardiseFiles(char*, char const*, char const*)>
c000f2fa:	89 34 24             	mov    DWORD PTR [esp],esi
c000f2fd:	e8 d2 13 ff ff       	call   c00006d4 <strlen>
c000f302:	83 c4 10             	add    esp,0x10
c000f305:	48                   	dec    eax
c000f306:	74 1d                	je     c000f325 <sysCallOpen(regs*)+0x58>
c000f308:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000f30b:	eb 0f                	jmp    c000f31c <sysCallOpen(regs*)+0x4f>
c000f30d:	80 fa 3a             	cmp    dl,0x3a
c000f310:	74 0f                	je     c000f321 <sysCallOpen(regs*)+0x54>
c000f312:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000f316:	48                   	dec    eax
c000f317:	74 0c                	je     c000f325 <sysCallOpen(regs*)+0x58>
c000f319:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000f31c:	80 fa 2e             	cmp    dl,0x2e
c000f31f:	75 ec                	jne    c000f30d <sysCallOpen(regs*)+0x40>
c000f321:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000f325:	83 ec 0c             	sub    esp,0xc
c000f328:	68 14 01 00 00       	push   0x114
c000f32d:	e8 3e 31 00 00       	call   c0012470 <operator new(unsigned long)>
c000f332:	83 c4 0c             	add    esp,0xc
c000f335:	89 c6                	mov    esi,eax
c000f337:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f33c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f33f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f342:	56                   	push   esi
c000f343:	e8 56 35 00 00       	call   c001289e <File::File(char const*, Process*)>
c000f348:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f34b:	83 c4 10             	add    esp,0x10
c000f34e:	0f b6 d0             	movzx  edx,al
c000f351:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000f354:	89 c2                	mov    edx,eax
c000f356:	83 e2 01             	and    edx,0x1
c000f359:	a8 02                	test   al,0x2
c000f35b:	74 03                	je     c000f360 <sysCallOpen(regs*)+0x93>
c000f35d:	83 ca 02             	or     edx,0x2
c000f360:	a8 04                	test   al,0x4
c000f362:	74 03                	je     c000f367 <sysCallOpen(regs*)+0x9a>
c000f364:	83 ca 04             	or     edx,0x4
c000f367:	a8 08                	test   al,0x8
c000f369:	74 03                	je     c000f36e <sysCallOpen(regs*)+0xa1>
c000f36b:	83 ca 0a             	or     edx,0xa
c000f36e:	a8 10                	test   al,0x10
c000f370:	74 03                	je     c000f375 <sysCallOpen(regs*)+0xa8>
c000f372:	83 ca 12             	or     edx,0x12
c000f375:	83 ec 08             	sub    esp,0x8
c000f378:	52                   	push   edx
c000f379:	56                   	push   esi
c000f37a:	e8 83 35 00 00       	call   c0012902 <File::open(FileOpenMode)>
c000f37f:	83 c4 10             	add    esp,0x10
c000f382:	85 c0                	test   eax,eax
c000f384:	75 24                	jne    c000f3aa <sysCallOpen(regs*)+0xdd>
c000f386:	83 ec 0c             	sub    esp,0xc
c000f389:	56                   	push   esi
c000f38a:	e8 05 1d 00 00       	call   c0011094 <UnixFile::getFileDescriptor()>
c000f38f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f392:	83 c4 10             	add    esp,0x10
c000f395:	89 02                	mov    DWORD PTR [edx],eax
c000f397:	c1 f8 1f             	sar    eax,0x1f
c000f39a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f39d:	81 c4 04 01 00 00    	add    esp,0x104
c000f3a3:	31 c0                	xor    eax,eax
c000f3a5:	31 d2                	xor    edx,edx
c000f3a7:	5b                   	pop    ebx
c000f3a8:	5e                   	pop    esi
c000f3a9:	c3                   	ret    
c000f3aa:	81 c4 04 01 00 00    	add    esp,0x104
c000f3b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f3ba:	5b                   	pop    ebx
c000f3bb:	5e                   	pop    esi
c000f3bc:	c3                   	ret    

c000f3bd <sysCallReadDir(regs*)>:
c000f3bd:	53                   	push   ebx
c000f3be:	83 ec 18             	sub    esp,0x18
c000f3c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3c5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f3c8:	83 f8 02             	cmp    eax,0x2
c000f3cb:	77 0c                	ja     c000f3d9 <sysCallReadDir(regs*)+0x1c>
c000f3cd:	b8 01 00 00 00       	mov    eax,0x1
c000f3d2:	31 d2                	xor    edx,edx
c000f3d4:	83 c4 18             	add    esp,0x18
c000f3d7:	5b                   	pop    ebx
c000f3d8:	c3                   	ret    
c000f3d9:	83 ec 0c             	sub    esp,0xc
c000f3dc:	50                   	push   eax
c000f3dd:	e8 17 1e 00 00       	call   c00111f9 <getFromFileDescriptor(int)>
c000f3e2:	83 c4 10             	add    esp,0x10
c000f3e5:	85 c0                	test   eax,eax
c000f3e7:	74 37                	je     c000f420 <sysCallReadDir(regs*)+0x63>
c000f3e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f3f1:	83 ec 0c             	sub    esp,0xc
c000f3f4:	8b 10                	mov    edx,DWORD PTR [eax]
c000f3f6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f3fa:	51                   	push   ecx
c000f3fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f3fe:	6a 00                	push   0x0
c000f400:	68 10 01 00 00       	push   0x110
c000f405:	50                   	push   eax
c000f406:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f409:	83 c4 20             	add    esp,0x20
c000f40c:	85 c0                	test   eax,eax
c000f40e:	74 0c                	je     c000f41c <sysCallReadDir(regs*)+0x5f>
c000f410:	83 f8 07             	cmp    eax,0x7
c000f413:	74 b8                	je     c000f3cd <sysCallReadDir(regs*)+0x10>
c000f415:	b8 02 00 00 00       	mov    eax,0x2
c000f41a:	eb b6                	jmp    c000f3d2 <sysCallReadDir(regs*)+0x15>
c000f41c:	31 c0                	xor    eax,eax
c000f41e:	eb b2                	jmp    c000f3d2 <sysCallReadDir(regs*)+0x15>
c000f420:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f425:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f42a:	eb a8                	jmp    c000f3d4 <sysCallReadDir(regs*)+0x17>

c000f42c <sysCallIsATTY(regs*)>:
c000f42c:	83 ec 0c             	sub    esp,0xc
c000f42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f433:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f436:	83 f8 02             	cmp    eax,0x2
c000f439:	77 26                	ja     c000f461 <sysCallIsATTY(regs*)+0x35>
c000f43b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f440:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f443:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f449:	85 c0                	test   eax,eax
c000f44b:	74 24                	je     c000f471 <sysCallIsATTY(regs*)+0x45>
c000f44d:	83 ec 0c             	sub    esp,0xc
c000f450:	8b 10                	mov    edx,DWORD PTR [eax]
c000f452:	50                   	push   eax
c000f453:	ff 12                	call   DWORD PTR [edx]
c000f455:	31 d2                	xor    edx,edx
c000f457:	0f b6 c0             	movzx  eax,al
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	83 c4 0c             	add    esp,0xc
c000f460:	c3                   	ret    
c000f461:	83 ec 0c             	sub    esp,0xc
c000f464:	50                   	push   eax
c000f465:	e8 8f 1d 00 00       	call   c00111f9 <getFromFileDescriptor(int)>
c000f46a:	83 c4 10             	add    esp,0x10
c000f46d:	85 c0                	test   eax,eax
c000f46f:	75 dc                	jne    c000f44d <sysCallIsATTY(regs*)+0x21>
c000f471:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f476:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f47b:	83 c4 0c             	add    esp,0xc
c000f47e:	c3                   	ret    

c000f47f <sysCallSeek(regs*)>:
c000f47f:	53                   	push   ebx
c000f480:	83 ec 08             	sub    esp,0x8
c000f483:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f487:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f48a:	83 f8 02             	cmp    eax,0x2
c000f48d:	76 32                	jbe    c000f4c1 <sysCallSeek(regs*)+0x42>
c000f48f:	83 ec 0c             	sub    esp,0xc
c000f492:	50                   	push   eax
c000f493:	e8 61 1d 00 00       	call   c00111f9 <getFromFileDescriptor(int)>
c000f498:	83 c4 0c             	add    esp,0xc
c000f49b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f49e:	31 db                	xor    ebx,ebx
c000f4a0:	53                   	push   ebx
c000f4a1:	51                   	push   ecx
c000f4a2:	50                   	push   eax
c000f4a3:	e8 18 35 00 00       	call   c00129c0 <File::seek(unsigned long long)>
c000f4a8:	83 c4 10             	add    esp,0x10
c000f4ab:	85 c0                	test   eax,eax
c000f4ad:	0f 95 c0             	setne  al
c000f4b0:	31 d2                	xor    edx,edx
c000f4b2:	0f b6 c0             	movzx  eax,al
c000f4b5:	f7 d8                	neg    eax
c000f4b7:	83 d2 00             	adc    edx,0x0
c000f4ba:	83 c4 08             	add    esp,0x8
c000f4bd:	f7 da                	neg    edx
c000f4bf:	5b                   	pop    ebx
c000f4c0:	c3                   	ret    
c000f4c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4cb:	83 c4 08             	add    esp,0x8
c000f4ce:	5b                   	pop    ebx
c000f4cf:	c3                   	ret    

c000f4d0 <sysCallTell(regs*)>:
c000f4d0:	53                   	push   ebx
c000f4d1:	83 ec 08             	sub    esp,0x8
c000f4d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f4d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f4db:	83 f8 02             	cmp    eax,0x2
c000f4de:	76 2d                	jbe    c000f50d <sysCallTell(regs*)+0x3d>
c000f4e0:	83 ec 0c             	sub    esp,0xc
c000f4e3:	50                   	push   eax
c000f4e4:	e8 10 1d 00 00       	call   c00111f9 <getFromFileDescriptor(int)>
c000f4e9:	5a                   	pop    edx
c000f4ea:	59                   	pop    ecx
c000f4eb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f4ee:	50                   	push   eax
c000f4ef:	e8 22 35 00 00       	call   c0012a16 <File::tell(unsigned long long*)>
c000f4f4:	83 c4 10             	add    esp,0x10
c000f4f7:	85 c0                	test   eax,eax
c000f4f9:	0f 95 c0             	setne  al
c000f4fc:	31 d2                	xor    edx,edx
c000f4fe:	0f b6 c0             	movzx  eax,al
c000f501:	f7 d8                	neg    eax
c000f503:	83 d2 00             	adc    edx,0x0
c000f506:	83 c4 08             	add    esp,0x8
c000f509:	f7 da                	neg    edx
c000f50b:	5b                   	pop    ebx
c000f50c:	c3                   	ret    
c000f50d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f512:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f517:	83 c4 08             	add    esp,0x8
c000f51a:	5b                   	pop    ebx
c000f51b:	c3                   	ret    

c000f51c <sysCallSizeFromFilename(regs*)>:
c000f51c:	57                   	push   edi
c000f51d:	56                   	push   esi
c000f51e:	53                   	push   ebx
c000f51f:	83 ec 10             	sub    esp,0x10
c000f522:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f526:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f529:	83 ff 02             	cmp    edi,0x2
c000f52c:	76 56                	jbe    c000f584 <sysCallSizeFromFilename(regs*)+0x68>
c000f52e:	83 ec 0c             	sub    esp,0xc
c000f531:	68 14 01 00 00       	push   0x114
c000f536:	e8 35 2f 00 00       	call   c0012470 <operator new(unsigned long)>
c000f53b:	83 c4 0c             	add    esp,0xc
c000f53e:	89 c3                	mov    ebx,eax
c000f540:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f545:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f548:	57                   	push   edi
c000f549:	53                   	push   ebx
c000f54a:	e8 4f 33 00 00       	call   c001289e <File::File(char const*, Process*)>
c000f54f:	83 c4 0c             	add    esp,0xc
c000f552:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f556:	50                   	push   eax
c000f557:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f55a:	53                   	push   ebx
c000f55b:	e8 4e 36 00 00       	call   c0012bae <File::stat(unsigned long long*, bool*)>
c000f560:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f563:	89 c6                	mov    esi,eax
c000f565:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f567:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f56a:	83 c4 10             	add    esp,0x10
c000f56d:	31 c0                	xor    eax,eax
c000f56f:	85 f6                	test   esi,esi
c000f571:	0f 95 c0             	setne  al
c000f574:	31 d2                	xor    edx,edx
c000f576:	f7 d8                	neg    eax
c000f578:	83 d2 00             	adc    edx,0x0
c000f57b:	83 c4 10             	add    esp,0x10
c000f57e:	f7 da                	neg    edx
c000f580:	5b                   	pop    ebx
c000f581:	5e                   	pop    esi
c000f582:	5f                   	pop    edi
c000f583:	c3                   	ret    
c000f584:	83 c4 10             	add    esp,0x10
c000f587:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f58c:	5b                   	pop    ebx
c000f58d:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f592:	5e                   	pop    esi
c000f593:	5f                   	pop    edi
c000f594:	c3                   	ret    

c000f595 <sysCallSize(regs*)>:
c000f595:	53                   	push   ebx
c000f596:	83 ec 18             	sub    esp,0x18
c000f599:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f59d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f5a0:	83 f8 02             	cmp    eax,0x2
c000f5a3:	76 33                	jbe    c000f5d8 <sysCallSize(regs*)+0x43>
c000f5a5:	83 ec 0c             	sub    esp,0xc
c000f5a8:	50                   	push   eax
c000f5a9:	e8 4b 1c 00 00       	call   c00111f9 <getFromFileDescriptor(int)>
c000f5ae:	83 c4 0c             	add    esp,0xc
c000f5b1:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f5b5:	52                   	push   edx
c000f5b6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f5b9:	50                   	push   eax
c000f5ba:	e8 ef 35 00 00       	call   c0012bae <File::stat(unsigned long long*, bool*)>
c000f5bf:	83 c4 10             	add    esp,0x10
c000f5c2:	85 c0                	test   eax,eax
c000f5c4:	0f 95 c0             	setne  al
c000f5c7:	31 d2                	xor    edx,edx
c000f5c9:	0f b6 c0             	movzx  eax,al
c000f5cc:	f7 d8                	neg    eax
c000f5ce:	83 d2 00             	adc    edx,0x0
c000f5d1:	83 c4 18             	add    esp,0x18
c000f5d4:	f7 da                	neg    edx
c000f5d6:	5b                   	pop    ebx
c000f5d7:	c3                   	ret    
c000f5d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f5dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f5e2:	83 c4 18             	add    esp,0x18
c000f5e5:	5b                   	pop    ebx
c000f5e6:	c3                   	ret    

c000f5e7 <sysCallClose(regs*)>:
c000f5e7:	53                   	push   ebx
c000f5e8:	83 ec 08             	sub    esp,0x8
c000f5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f5f2:	83 f8 02             	cmp    eax,0x2
c000f5f5:	76 2f                	jbe    c000f626 <sysCallClose(regs*)+0x3f>
c000f5f7:	83 ec 0c             	sub    esp,0xc
c000f5fa:	50                   	push   eax
c000f5fb:	e8 f9 1b 00 00       	call   c00111f9 <getFromFileDescriptor(int)>
c000f600:	89 c3                	mov    ebx,eax
c000f602:	89 04 24             	mov    DWORD PTR [esp],eax
c000f605:	e8 56 33 00 00       	call   c0012960 <File::close()>
c000f60a:	83 c4 10             	add    esp,0x10
c000f60d:	85 db                	test   ebx,ebx
c000f60f:	74 0c                	je     c000f61d <sysCallClose(regs*)+0x36>
c000f611:	83 ec 0c             	sub    esp,0xc
c000f614:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f616:	53                   	push   ebx
c000f617:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f61a:	83 c4 10             	add    esp,0x10
c000f61d:	31 c0                	xor    eax,eax
c000f61f:	31 d2                	xor    edx,edx
c000f621:	83 c4 08             	add    esp,0x8
c000f624:	5b                   	pop    ebx
c000f625:	c3                   	ret    
c000f626:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f62b:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f630:	83 c4 08             	add    esp,0x8
c000f633:	5b                   	pop    ebx
c000f634:	c3                   	ret    

c000f635 <sysCallOpenDir(regs*)>:
c000f635:	56                   	push   esi
c000f636:	53                   	push   ebx
c000f637:	53                   	push   ebx
c000f638:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f63c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f63f:	85 f6                	test   esi,esi
c000f641:	74 51                	je     c000f694 <sysCallOpenDir(regs*)+0x5f>
c000f643:	83 ec 0c             	sub    esp,0xc
c000f646:	68 14 01 00 00       	push   0x114
c000f64b:	e8 20 2e 00 00       	call   c0012470 <operator new(unsigned long)>
c000f650:	83 c4 0c             	add    esp,0xc
c000f653:	89 c6                	mov    esi,eax
c000f655:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f65a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f65d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f660:	56                   	push   esi
c000f661:	e8 fa 36 00 00       	call   c0012d60 <Directory::Directory(char const*, Process*)>
c000f666:	89 34 24             	mov    DWORD PTR [esp],esi
c000f669:	e8 56 37 00 00       	call   c0012dc4 <Directory::open()>
c000f66e:	83 c4 10             	add    esp,0x10
c000f671:	85 c0                	test   eax,eax
c000f673:	75 1f                	jne    c000f694 <sysCallOpenDir(regs*)+0x5f>
c000f675:	83 ec 0c             	sub    esp,0xc
c000f678:	56                   	push   esi
c000f679:	e8 16 1a 00 00       	call   c0011094 <UnixFile::getFileDescriptor()>
c000f67e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f681:	83 c4 10             	add    esp,0x10
c000f684:	89 02                	mov    DWORD PTR [edx],eax
c000f686:	c1 f8 1f             	sar    eax,0x1f
c000f689:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f68c:	31 c0                	xor    eax,eax
c000f68e:	59                   	pop    ecx
c000f68f:	31 d2                	xor    edx,edx
c000f691:	5b                   	pop    ebx
c000f692:	5e                   	pop    esi
c000f693:	c3                   	ret    
c000f694:	59                   	pop    ecx
c000f695:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f69a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f69f:	5b                   	pop    ebx
c000f6a0:	5e                   	pop    esi
c000f6a1:	c3                   	ret    

c000f6a2 <sysCallMakeDir(regs*)>:
c000f6a2:	56                   	push   esi
c000f6a3:	53                   	push   ebx
c000f6a4:	83 ec 10             	sub    esp,0x10
c000f6a7:	68 14 01 00 00       	push   0x114
c000f6ac:	e8 bf 2d 00 00       	call   c0012470 <operator new(unsigned long)>
c000f6b1:	83 c4 0c             	add    esp,0xc
c000f6b4:	89 c3                	mov    ebx,eax
c000f6b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6bb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f6be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f6c5:	53                   	push   ebx
c000f6c6:	e8 95 36 00 00       	call   c0012d60 <Directory::Directory(char const*, Process*)>
c000f6cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6ce:	e8 d1 38 00 00       	call   c0012fa4 <Directory::create()>
c000f6d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6d6:	89 c6                	mov    esi,eax
c000f6d8:	e8 43 37 00 00       	call   c0012e20 <Directory::close()>
c000f6dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f6df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f6e5:	31 c0                	xor    eax,eax
c000f6e7:	85 f6                	test   esi,esi
c000f6e9:	0f 95 c0             	setne  al
c000f6ec:	31 d2                	xor    edx,edx
c000f6ee:	f7 d8                	neg    eax
c000f6f0:	83 d2 00             	adc    edx,0x0
c000f6f3:	83 c4 14             	add    esp,0x14
c000f6f6:	f7 da                	neg    edx
c000f6f8:	5b                   	pop    ebx
c000f6f9:	5e                   	pop    esi
c000f6fa:	c3                   	ret    

c000f6fb <sysCallCloseDir(regs*)>:
c000f6fb:	53                   	push   ebx
c000f6fc:	83 ec 08             	sub    esp,0x8
c000f6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f703:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f706:	83 f8 02             	cmp    eax,0x2
c000f709:	76 2f                	jbe    c000f73a <sysCallCloseDir(regs*)+0x3f>
c000f70b:	83 ec 0c             	sub    esp,0xc
c000f70e:	50                   	push   eax
c000f70f:	e8 e5 1a 00 00       	call   c00111f9 <getFromFileDescriptor(int)>
c000f714:	89 c3                	mov    ebx,eax
c000f716:	89 04 24             	mov    DWORD PTR [esp],eax
c000f719:	e8 02 37 00 00       	call   c0012e20 <Directory::close()>
c000f71e:	83 c4 10             	add    esp,0x10
c000f721:	85 db                	test   ebx,ebx
c000f723:	74 0c                	je     c000f731 <sysCallCloseDir(regs*)+0x36>
c000f725:	83 ec 0c             	sub    esp,0xc
c000f728:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f72a:	53                   	push   ebx
c000f72b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f72e:	83 c4 10             	add    esp,0x10
c000f731:	31 c0                	xor    eax,eax
c000f733:	31 d2                	xor    edx,edx
c000f735:	83 c4 08             	add    esp,0x8
c000f738:	5b                   	pop    ebx
c000f739:	c3                   	ret    
c000f73a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f73f:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f744:	83 c4 08             	add    esp,0x8
c000f747:	5b                   	pop    ebx
c000f748:	c3                   	ret    

c000f749 <sysCallWait(regs*)>:
c000f749:	83 ec 10             	sub    esp,0x10
c000f74c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f750:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f753:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f756:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f759:	e8 24 f2 ff ff       	call   c000e982 <waitTask(int, int*, int)>
c000f75e:	83 c4 1c             	add    esp,0x1c
c000f761:	99                   	cdq    
c000f762:	c3                   	ret    

c000f763 <sysCallFork(regs*)>:
c000f763:	83 ec 18             	sub    esp,0x18
c000f766:	68 93 92 03 c0       	push   0xc0039293
c000f76b:	e8 50 d7 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000f770:	58                   	pop    eax
c000f771:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f775:	e8 d6 ef ff ff       	call   c000e750 <forkProcess(regs*)>
c000f77a:	83 c4 1c             	add    esp,0x1c
c000f77d:	99                   	cdq    
c000f77e:	c3                   	ret    

c000f77f <sysCallExecve(regs*)>:
c000f77f:	53                   	push   ebx
c000f780:	81 ec 24 01 00 00    	sub    esp,0x124
c000f786:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f78d:	68 a1 92 03 c0       	push   0xc00392a1
c000f792:	e8 29 d7 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000f797:	83 c4 0c             	add    esp,0xc
c000f79a:	68 00 01 00 00       	push   0x100
c000f79f:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f7a3:	50                   	push   eax
c000f7a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7a9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f7ac:	e8 5e 34 00 00       	call   c0012c0f <getcwd(Process*, char*, int)>
c000f7b1:	83 c4 0c             	add    esp,0xc
c000f7b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f7b7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f7ba:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f7bd:	e8 f4 f2 ff ff       	call   c000eab6 <execveProcess(char const*, char* const*, char* const*)>
c000f7c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f7cc:	81 c4 28 01 00 00    	add    esp,0x128
c000f7d2:	5b                   	pop    ebx
c000f7d3:	c3                   	ret    

c000f7d4 <sysCallRmdir(regs*)>:
c000f7d4:	56                   	push   esi
c000f7d5:	53                   	push   ebx
c000f7d6:	83 ec 10             	sub    esp,0x10
c000f7d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f7dd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f7e0:	68 14 01 00 00       	push   0x114
c000f7e5:	e8 86 2c 00 00       	call   c0012470 <operator new(unsigned long)>
c000f7ea:	83 c4 0c             	add    esp,0xc
c000f7ed:	89 c3                	mov    ebx,eax
c000f7ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7f4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f7f7:	56                   	push   esi
c000f7f8:	53                   	push   ebx
c000f7f9:	e8 a0 30 00 00       	call   c001289e <File::File(char const*, Process*)>
c000f7fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f801:	e8 74 32 00 00       	call   c0012a7a <File::unlink()>
c000f806:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f809:	89 c6                	mov    esi,eax
c000f80b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f80d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f810:	31 c0                	xor    eax,eax
c000f812:	85 f6                	test   esi,esi
c000f814:	0f 95 c0             	setne  al
c000f817:	31 d2                	xor    edx,edx
c000f819:	f7 d8                	neg    eax
c000f81b:	83 d2 00             	adc    edx,0x0
c000f81e:	83 c4 14             	add    esp,0x14
c000f821:	f7 da                	neg    edx
c000f823:	5b                   	pop    ebx
c000f824:	5e                   	pop    esi
c000f825:	c3                   	ret    

c000f826 <sysCallUnlink(regs*)>:
c000f826:	56                   	push   esi
c000f827:	53                   	push   ebx
c000f828:	83 ec 10             	sub    esp,0x10
c000f82b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f82f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f832:	68 14 01 00 00       	push   0x114
c000f837:	e8 34 2c 00 00       	call   c0012470 <operator new(unsigned long)>
c000f83c:	83 c4 0c             	add    esp,0xc
c000f83f:	89 c3                	mov    ebx,eax
c000f841:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f846:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f849:	56                   	push   esi
c000f84a:	53                   	push   ebx
c000f84b:	e8 4e 30 00 00       	call   c001289e <File::File(char const*, Process*)>
c000f850:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f853:	e8 22 32 00 00       	call   c0012a7a <File::unlink()>
c000f858:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f85b:	89 c6                	mov    esi,eax
c000f85d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f85f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f862:	31 c0                	xor    eax,eax
c000f864:	85 f6                	test   esi,esi
c000f866:	0f 95 c0             	setne  al
c000f869:	31 d2                	xor    edx,edx
c000f86b:	f7 d8                	neg    eax
c000f86d:	83 d2 00             	adc    edx,0x0
c000f870:	83 c4 14             	add    esp,0x14
c000f873:	f7 da                	neg    edx
c000f875:	5b                   	pop    ebx
c000f876:	5e                   	pop    esi
c000f877:	c3                   	ret    

c000f878 <sysCallGetArgv(regs*)>:
c000f878:	83 ec 0c             	sub    esp,0xc
c000f87b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f87f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f882:	85 c0                	test   eax,eax
c000f884:	78 2b                	js     c000f8b1 <sysCallGetArgv(regs*)+0x39>
c000f886:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f88c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f88f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f895:	7d 1a                	jge    c000f8b1 <sysCallGetArgv(regs*)+0x39>
c000f897:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f89e:	85 c0                	test   eax,eax
c000f8a0:	74 17                	je     c000f8b9 <sysCallGetArgv(regs*)+0x41>
c000f8a2:	83 ec 08             	sub    esp,0x8
c000f8a5:	50                   	push   eax
c000f8a6:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f8a9:	e8 19 0f ff ff       	call   c00007c7 <strcpy>
c000f8ae:	83 c4 10             	add    esp,0x10
c000f8b1:	31 c0                	xor    eax,eax
c000f8b3:	31 d2                	xor    edx,edx
c000f8b5:	83 c4 0c             	add    esp,0xc
c000f8b8:	c3                   	ret    
c000f8b9:	b8 01 00 00 00       	mov    eax,0x1
c000f8be:	31 d2                	xor    edx,edx
c000f8c0:	83 c4 0c             	add    esp,0xc
c000f8c3:	c3                   	ret    

c000f8c4 <sysCallTTYName(regs*)>:
c000f8c4:	56                   	push   esi
c000f8c5:	53                   	push   ebx
c000f8c6:	53                   	push   ebx
c000f8c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f8cb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f8ce:	85 c0                	test   eax,eax
c000f8d0:	74 58                	je     c000f92a <sysCallTTYName(regs*)+0x66>
c000f8d2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f8d5:	83 f8 02             	cmp    eax,0x2
c000f8d8:	77 3e                	ja     c000f918 <sysCallTTYName(regs*)+0x54>
c000f8da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f8df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f8e2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f8e8:	85 db                	test   ebx,ebx
c000f8ea:	74 3e                	je     c000f92a <sysCallTTYName(regs*)+0x66>
c000f8ec:	83 ec 0c             	sub    esp,0xc
c000f8ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f8f1:	53                   	push   ebx
c000f8f2:	ff 10                	call   DWORD PTR [eax]
c000f8f4:	83 c4 10             	add    esp,0x10
c000f8f7:	84 c0                	test   al,al
c000f8f9:	74 3a                	je     c000f935 <sysCallTTYName(regs*)+0x71>
c000f8fb:	83 ec 08             	sub    esp,0x8
c000f8fe:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f904:	53                   	push   ebx
c000f905:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f908:	e8 ba 0e ff ff       	call   c00007c7 <strcpy>
c000f90d:	83 c4 10             	add    esp,0x10
c000f910:	31 c0                	xor    eax,eax
c000f912:	59                   	pop    ecx
c000f913:	31 d2                	xor    edx,edx
c000f915:	5b                   	pop    ebx
c000f916:	5e                   	pop    esi
c000f917:	c3                   	ret    
c000f918:	83 ec 0c             	sub    esp,0xc
c000f91b:	50                   	push   eax
c000f91c:	e8 d8 18 00 00       	call   c00111f9 <getFromFileDescriptor(int)>
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	89 c3                	mov    ebx,eax
c000f926:	85 db                	test   ebx,ebx
c000f928:	75 c2                	jne    c000f8ec <sysCallTTYName(regs*)+0x28>
c000f92a:	59                   	pop    ecx
c000f92b:	b8 01 00 00 00       	mov    eax,0x1
c000f930:	31 d2                	xor    edx,edx
c000f932:	5b                   	pop    ebx
c000f933:	5e                   	pop    esi
c000f934:	c3                   	ret    
c000f935:	59                   	pop    ecx
c000f936:	b8 02 00 00 00       	mov    eax,0x2
c000f93b:	31 d2                	xor    edx,edx
c000f93d:	5b                   	pop    ebx
c000f93e:	5e                   	pop    esi
c000f93f:	c3                   	ret    

c000f940 <sysCallGetEnv(regs*)>:
c000f940:	83 ec 0c             	sub    esp,0xc
c000f943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f947:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f94a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f94d:	85 c9                	test   ecx,ecx
c000f94f:	75 0c                	jne    c000f95d <sysCallGetEnv(regs*)+0x1d>
c000f951:	85 d2                	test   edx,edx
c000f953:	74 14                	je     c000f969 <sysCallGetEnv(regs*)+0x29>
c000f955:	31 c0                	xor    eax,eax
c000f957:	31 d2                	xor    edx,edx
c000f959:	83 c4 0c             	add    esp,0xc
c000f95c:	c3                   	ret    
c000f95d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f960:	85 d2                	test   edx,edx
c000f962:	74 1b                	je     c000f97f <sysCallGetEnv(regs*)+0x3f>
c000f964:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f967:	eb ec                	jmp    c000f955 <sysCallGetEnv(regs*)+0x15>
c000f969:	83 ec 0c             	sub    esp,0xc
c000f96c:	68 ec 92 03 c0       	push   0xc00392ec
c000f971:	e8 5e 0d ff ff       	call   c00006d4 <strlen>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	31 d2                	xor    edx,edx
c000f97b:	83 c4 0c             	add    esp,0xc
c000f97e:	c3                   	ret    
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 ec 92 03 c0       	push   0xc00392ec
c000f987:	50                   	push   eax
c000f988:	e8 3a 0e ff ff       	call   c00007c7 <strcpy>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	eb c3                	jmp    c000f955 <sysCallGetEnv(regs*)+0x15>

c000f992 <sysCallUSleep(regs*)>:
c000f992:	83 ec 14             	sub    esp,0x14
c000f995:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f99a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f99e:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f9a5:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f9a8:	01 ca                	add    edx,ecx
c000f9aa:	52                   	push   edx
c000f9ab:	50                   	push   eax
c000f9ac:	e8 6a f0 ff ff       	call   c000ea1b <nanoSleep(unsigned long long)>
c000f9b1:	31 c0                	xor    eax,eax
c000f9b3:	31 d2                	xor    edx,edx
c000f9b5:	83 c4 1c             	add    esp,0x1c
c000f9b8:	c3                   	ret    

c000f9b9 <sysCallSpawn(regs*)>:
c000f9b9:	56                   	push   esi
c000f9ba:	53                   	push   ebx
c000f9bb:	53                   	push   ebx
c000f9bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9c0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000f9c3:	85 f6                	test   esi,esi
c000f9c5:	75 08                	jne    c000f9cf <sysCallSpawn(regs*)+0x16>
c000f9c7:	59                   	pop    ecx
c000f9c8:	31 c0                	xor    eax,eax
c000f9ca:	31 d2                	xor    edx,edx
c000f9cc:	5b                   	pop    ebx
c000f9cd:	5e                   	pop    esi
c000f9ce:	c3                   	ret    
c000f9cf:	83 ec 0c             	sub    esp,0xc
c000f9d2:	68 b1 92 03 c0       	push   0xc00392b1
c000f9d7:	e8 e4 d4 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000f9dc:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000f9e3:	e8 88 2a 00 00       	call   c0012470 <operator new(unsigned long)>
c000f9e8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f9eb:	89 c6                	mov    esi,eax
c000f9ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9f2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f9f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f9f8:	56                   	push   esi
c000f9f9:	e8 0c e6 ff ff       	call   c000e00a <Process::Process(char const*, Process*, char**)>
c000f9fe:	83 c4 20             	add    esp,0x20
c000fa01:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000fa08:	75 bd                	jne    c000f9c7 <sysCallSpawn(regs*)+0xe>
c000fa0a:	83 ec 0c             	sub    esp,0xc
c000fa0d:	68 bc 92 03 c0       	push   0xc00392bc
c000fa12:	e8 a9 d4 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000fa17:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa1a:	e8 51 eb ff ff       	call   c000e570 <Process::createUserThread()>
c000fa1f:	8b 06                	mov    eax,DWORD PTR [esi]
c000fa21:	83 c4 10             	add    esp,0x10
c000fa24:	99                   	cdq    
c000fa25:	59                   	pop    ecx
c000fa26:	5b                   	pop    ebx
c000fa27:	5e                   	pop    esi
c000fa28:	c3                   	ret    

c000fa29 <sysAppSettings(regs*)>:
c000fa29:	53                   	push   ebx
c000fa2a:	83 ec 08             	sub    esp,0x8
c000fa2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa31:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000fa34:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000fa3a:	25 e0 1f 00 00       	and    eax,0x1fe0
c000fa3f:	66 3d c0 09          	cmp    ax,0x9c0
c000fa43:	75 2f                	jne    c000fa74 <sysAppSettings(regs*)+0x4b>
c000fa45:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000fa4b:	83 e0 1f             	and    eax,0x1f
c000fa4e:	3c 01                	cmp    al,0x1
c000fa50:	74 2e                	je     c000fa80 <sysAppSettings(regs*)+0x57>
c000fa52:	3c 07                	cmp    al,0x7
c000fa54:	0f 84 bd 00 00 00    	je     c000fb17 <sysAppSettings(regs*)+0xee>
c000fa5a:	84 c0                	test   al,al
c000fa5c:	0f 84 dc 00 00 00    	je     c000fb3e <sysAppSettings(regs*)+0x115>
c000fa62:	3c 08                	cmp    al,0x8
c000fa64:	74 6d                	je     c000fad3 <sysAppSettings(regs*)+0xaa>
c000fa66:	0f b6 c0             	movzx  eax,al
c000fa69:	83 c4 08             	add    esp,0x8
c000fa6c:	05 e8 03 00 00       	add    eax,0x3e8
c000fa71:	5b                   	pop    ebx
c000fa72:	99                   	cdq    
c000fa73:	c3                   	ret    
c000fa74:	b8 01 00 00 00       	mov    eax,0x1
c000fa79:	31 d2                	xor    edx,edx
c000fa7b:	83 c4 08             	add    esp,0x8
c000fa7e:	5b                   	pop    ebx
c000fa7f:	c3                   	ret    
c000fa80:	51                   	push   ecx
c000fa81:	68 00 01 00 00       	push   0x100
c000fa86:	6a 00                	push   0x0
c000fa88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa8d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa90:	83 c0 0c             	add    eax,0xc
c000fa93:	50                   	push   eax
c000fa94:	e8 12 0c ff ff       	call   c00006ab <memset>
c000fa99:	83 c4 0c             	add    esp,0xc
c000fa9c:	68 ff 00 00 00       	push   0xff
c000faa1:	53                   	push   ebx
c000faa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000faa7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000faaa:	83 c0 0c             	add    eax,0xc
c000faad:	50                   	push   eax
c000faae:	e8 81 0b ff ff       	call   c0000634 <memcpy>
c000fab3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fab8:	5b                   	pop    ebx
c000fab9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fabc:	5a                   	pop    edx
c000fabd:	8d 50 0c             	lea    edx,[eax+0xc]
c000fac0:	52                   	push   edx
c000fac1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fac7:	e8 ee 09 00 00       	call   c00104ba <VgaText::setTitle(char*)>
c000facc:	83 c4 10             	add    esp,0x10
c000facf:	31 c0                	xor    eax,eax
c000fad1:	eb a6                	jmp    c000fa79 <sysAppSettings(regs*)+0x50>
c000fad3:	83 ec 08             	sub    esp,0x8
c000fad6:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fadc:	83 e0 0f             	and    eax,0xf
c000fadf:	50                   	push   eax
c000fae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fae5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fae8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000faee:	e8 b7 09 00 00       	call   c00104aa <VgaText::setTitleColour(VgaColour)>
c000faf3:	58                   	pop    eax
c000faf4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fafa:	5a                   	pop    edx
c000fafb:	c1 e8 04             	shr    eax,0x4
c000fafe:	83 e0 0f             	and    eax,0xf
c000fb01:	50                   	push   eax
c000fb02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fb0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fb10:	e8 85 09 00 00       	call   c001049a <VgaText::setTitleTextColour(VgaColour)>
c000fb15:	eb b5                	jmp    c000facc <sysAppSettings(regs*)+0xa3>
c000fb17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb1c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fb1f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000fb25:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000fb2b:	c0 e8 06             	shr    al,0x6
c000fb2e:	83 e0 01             	and    eax,0x1
c000fb31:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000fb37:	31 c0                	xor    eax,eax
c000fb39:	e9 3b ff ff ff       	jmp    c000fa79 <sysAppSettings(regs*)+0x50>
c000fb3e:	b8 02 00 00 00       	mov    eax,0x2
c000fb43:	e9 31 ff ff ff       	jmp    c000fa79 <sysAppSettings(regs*)+0x50>

c000fb48 <sysSetFatAttrib(regs*)>:
c000fb48:	57                   	push   edi
c000fb49:	56                   	push   esi
c000fb4a:	53                   	push   ebx
c000fb4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb4f:	83 ec 0c             	sub    esp,0xc
c000fb52:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000fb55:	68 14 01 00 00       	push   0x114
c000fb5a:	e8 11 29 00 00       	call   c0012470 <operator new(unsigned long)>
c000fb5f:	83 c4 0c             	add    esp,0xc
c000fb62:	89 c3                	mov    ebx,eax
c000fb64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb69:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000fb6c:	57                   	push   edi
c000fb6d:	53                   	push   ebx
c000fb6e:	e8 2b 2d 00 00       	call   c001289e <File::File(char const*, Process*)>
c000fb73:	83 c4 0c             	add    esp,0xc
c000fb76:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000fb79:	0f b6 d4             	movzx  edx,ah
c000fb7c:	0f b6 c0             	movzx  eax,al
c000fb7f:	52                   	push   edx
c000fb80:	50                   	push   eax
c000fb81:	53                   	push   ebx
c000fb82:	e8 8d 2f 00 00       	call   c0012b14 <File::chfatattr(unsigned char, unsigned char)>
c000fb87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb8a:	89 c6                	mov    esi,eax
c000fb8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fb91:	83 c4 10             	add    esp,0x10
c000fb94:	31 c0                	xor    eax,eax
c000fb96:	5b                   	pop    ebx
c000fb97:	85 f6                	test   esi,esi
c000fb99:	5e                   	pop    esi
c000fb9a:	0f 95 c0             	setne  al
c000fb9d:	5f                   	pop    edi
c000fb9e:	31 d2                	xor    edx,edx
c000fba0:	f7 d8                	neg    eax
c000fba2:	83 d2 00             	adc    edx,0x0
c000fba5:	f7 da                	neg    edx
c000fba7:	c3                   	ret    

c000fba8 <sysPanic(regs*)>:
c000fba8:	83 ec 18             	sub    esp,0x18
c000fbab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbaf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000fbb2:	e8 27 d4 ff ff       	call   c000cfde <panic(char const*)>
c000fbb7:	c7 04 24 c9 92 03 c0 	mov    DWORD PTR [esp],0xc00392c9
c000fbbe:	e8 1b d4 ff ff       	call   c000cfde <panic(char const*)>
c000fbc3:	b8 01 00 00 00       	mov    eax,0x1
c000fbc8:	31 d2                	xor    edx,edx
c000fbca:	83 c4 1c             	add    esp,0x1c
c000fbcd:	c3                   	ret    

c000fbce <sysPipe(regs*)>:
c000fbce:	57                   	push   edi
c000fbcf:	56                   	push   esi
c000fbd0:	53                   	push   ebx
c000fbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbd5:	83 ec 0c             	sub    esp,0xc
c000fbd8:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000fbdb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000fbde:	6a 20                	push   0x20
c000fbe0:	e8 8b 28 00 00       	call   c0012470 <operator new(unsigned long)>
c000fbe5:	89 c3                	mov    ebx,eax
c000fbe7:	58                   	pop    eax
c000fbe8:	5a                   	pop    edx
c000fbe9:	68 00 50 00 00       	push   0x5000
c000fbee:	53                   	push   ebx
c000fbef:	e8 26 e3 ff ff       	call   c000df1a <Pipe::Pipe(int)>
c000fbf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbf7:	e8 98 14 00 00       	call   c0011094 <UnixFile::getFileDescriptor()>
c000fbfc:	89 07                	mov    DWORD PTR [edi],eax
c000fbfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc01:	e8 8e 14 00 00       	call   c0011094 <UnixFile::getFileDescriptor()>
c000fc06:	83 c4 10             	add    esp,0x10
c000fc09:	89 06                	mov    DWORD PTR [esi],eax
c000fc0b:	31 d2                	xor    edx,edx
c000fc0d:	5b                   	pop    ebx
c000fc0e:	31 c0                	xor    eax,eax
c000fc10:	5e                   	pop    esi
c000fc11:	5f                   	pop    edi
c000fc12:	c3                   	ret    

c000fc13 <sysGetUnixTime(regs*)>:
c000fc13:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c000fc18:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fc1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fc22:	e9 3f 36 00 00       	jmp    c0013266 <Clock::timeInSecondsLocal()>

c000fc27 <string_ends_with(char const*, char const*)>:
c000fc27:	57                   	push   edi
c000fc28:	56                   	push   esi
c000fc29:	53                   	push   ebx
c000fc2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc32:	83 ec 0c             	sub    esp,0xc
c000fc35:	53                   	push   ebx
c000fc36:	e8 99 0a ff ff       	call   c00006d4 <strlen>
c000fc3b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc3e:	89 c6                	mov    esi,eax
c000fc40:	e8 8f 0a ff ff       	call   c00006d4 <strlen>
c000fc45:	83 c4 10             	add    esp,0x10
c000fc48:	39 c6                	cmp    esi,eax
c000fc4a:	7d 06                	jge    c000fc52 <string_ends_with(char const*, char const*)+0x2b>
c000fc4c:	5b                   	pop    ebx
c000fc4d:	31 c0                	xor    eax,eax
c000fc4f:	5e                   	pop    esi
c000fc50:	5f                   	pop    edi
c000fc51:	c3                   	ret    
c000fc52:	83 ec 08             	sub    esp,0x8
c000fc55:	29 c6                	sub    esi,eax
c000fc57:	57                   	push   edi
c000fc58:	01 f3                	add    ebx,esi
c000fc5a:	53                   	push   ebx
c000fc5b:	e8 ed 0b ff ff       	call   c000084d <strcmp>
c000fc60:	83 c4 10             	add    esp,0x10
c000fc63:	85 c0                	test   eax,eax
c000fc65:	5b                   	pop    ebx
c000fc66:	0f 94 c0             	sete   al
c000fc69:	5e                   	pop    esi
c000fc6a:	0f b6 c0             	movzx  eax,al
c000fc6d:	5f                   	pop    edi
c000fc6e:	c3                   	ret    

c000fc6f <setupSystemCalls()>:
c000fc6f:	c7 05 60 bc 03 c0 ec 84 01 c0 	mov    DWORD PTR ds:0xc003bc60,0xc00184ec
c000fc79:	c7 05 64 bc 03 c0 af 83 01 c0 	mov    DWORD PTR ds:0xc003bc64,0xc00183af
c000fc83:	c7 05 68 bc 03 c0 2f 84 01 c0 	mov    DWORD PTR ds:0xc003bc68,0xc001842f
c000fc8d:	c7 05 6c bc 03 c0 84 84 01 c0 	mov    DWORD PTR ds:0xc003bc6c,0xc0018484
c000fc97:	c7 05 70 bc 03 c0 c7 83 01 c0 	mov    DWORD PTR ds:0xc003bc70,0xc00183c7
c000fca1:	c7 05 74 bc 03 c0 d6 f0 00 c0 	mov    DWORD PTR ds:0xc003bc74,0xc000f0d6
c000fcab:	c7 05 78 bc 03 c0 4f f2 00 c0 	mov    DWORD PTR ds:0xc003bc78,0xc000f24f
c000fcb5:	c7 05 7c bc 03 c0 6e f2 00 c0 	mov    DWORD PTR ds:0xc003bc7c,0xc000f26e
c000fcbf:	c7 05 84 bc 03 c0 e7 f5 00 c0 	mov    DWORD PTR ds:0xc003bc84,0xc000f5e7
c000fcc9:	c7 05 80 bc 03 c0 cd f2 00 c0 	mov    DWORD PTR ds:0xc003bc80,0xc000f2cd
c000fcd3:	c7 05 88 bc 03 c0 35 f6 00 c0 	mov    DWORD PTR ds:0xc003bc88,0xc000f635
c000fcdd:	c7 05 8c bc 03 c0 bd f3 00 c0 	mov    DWORD PTR ds:0xc003bc8c,0xc000f3bd
c000fce7:	c7 05 90 bc 03 c0 e2 f0 00 c0 	mov    DWORD PTR ds:0xc003bc90,0xc000f0e2
c000fcf1:	c7 05 94 bc 03 c0 e7 f0 00 c0 	mov    DWORD PTR ds:0xc003bc94,0xc000f0e7
c000fcfb:	c7 05 98 bc 03 c0 a2 f6 00 c0 	mov    DWORD PTR ds:0xc003bc98,0xc000f6a2
c000fd05:	c7 05 9c bc 03 c0 fb f6 00 c0 	mov    DWORD PTR ds:0xc003bc9c,0xc000f6fb
c000fd0f:	c7 05 a0 bc 03 c0 7f f4 00 c0 	mov    DWORD PTR ds:0xc003bca0,0xc000f47f
c000fd19:	c7 05 a4 bc 03 c0 d0 f4 00 c0 	mov    DWORD PTR ds:0xc003bca4,0xc000f4d0
c000fd23:	c7 05 a8 bc 03 c0 95 f5 00 c0 	mov    DWORD PTR ds:0xc003bca8,0xc000f595
c000fd2d:	c7 05 ac bc 03 c0 ec f0 00 c0 	mov    DWORD PTR ds:0xc003bcac,0xc000f0ec
c000fd37:	c7 05 b0 bc 03 c0 49 f7 00 c0 	mov    DWORD PTR ds:0xc003bcb0,0xc000f749
c000fd41:	c7 05 b4 bc 03 c0 63 f7 00 c0 	mov    DWORD PTR ds:0xc003bcb4,0xc000f763
c000fd4b:	c7 05 b8 bc 03 c0 7f f7 00 c0 	mov    DWORD PTR ds:0xc003bcb8,0xc000f77f
c000fd55:	c7 05 bc bc 03 c0 d4 f7 00 c0 	mov    DWORD PTR ds:0xc003bcbc,0xc000f7d4
c000fd5f:	c7 05 c0 bc 03 c0 26 f8 00 c0 	mov    DWORD PTR ds:0xc003bcc0,0xc000f826
c000fd69:	c7 05 c4 bc 03 c0 f6 f0 00 c0 	mov    DWORD PTR ds:0xc003bcc4,0xc000f0f6
c000fd73:	c7 05 c8 bc 03 c0 78 f8 00 c0 	mov    DWORD PTR ds:0xc003bcc8,0xc000f878
c000fd7d:	c7 05 cc bc 03 c0 8a f2 00 c0 	mov    DWORD PTR ds:0xc003bccc,0xc000f28a
c000fd87:	c7 05 d0 bc 03 c0 c4 f8 00 c0 	mov    DWORD PTR ds:0xc003bcd0,0xc000f8c4
c000fd91:	c7 05 d4 bc 03 c0 2c f4 00 c0 	mov    DWORD PTR ds:0xc003bcd4,0xc000f42c
c000fd9b:	c7 05 d8 bc 03 c0 92 f9 00 c0 	mov    DWORD PTR ds:0xc003bcd8,0xc000f992
c000fda5:	c7 05 dc bc 03 c0 1c f5 00 c0 	mov    DWORD PTR ds:0xc003bcdc,0xc000f51c
c000fdaf:	c7 05 e0 bc 03 c0 b9 f9 00 c0 	mov    DWORD PTR ds:0xc003bce0,0xc000f9b9
c000fdb9:	c7 05 e4 bc 03 c0 40 f9 00 c0 	mov    DWORD PTR ds:0xc003bce4,0xc000f940
c000fdc3:	c7 05 e8 bc 03 c0 29 fa 00 c0 	mov    DWORD PTR ds:0xc003bce8,0xc000fa29
c000fdcd:	c7 05 ec bc 03 c0 06 f1 00 c0 	mov    DWORD PTR ds:0xc003bcec,0xc000f106
c000fdd7:	c7 05 f0 bc 03 c0 70 f1 00 c0 	mov    DWORD PTR ds:0xc003bcf0,0xc000f170
c000fde1:	c7 05 f4 bc 03 c0 b6 f1 00 c0 	mov    DWORD PTR ds:0xc003bcf4,0xc000f1b6
c000fdeb:	c7 05 f8 bc 03 c0 48 fb 00 c0 	mov    DWORD PTR ds:0xc003bcf8,0xc000fb48
c000fdf5:	c7 05 fc bc 03 c0 a8 fb 00 c0 	mov    DWORD PTR ds:0xc003bcfc,0xc000fba8
c000fdff:	c7 05 00 bd 03 c0 07 f2 00 c0 	mov    DWORD PTR ds:0xc003bd00,0xc000f207
c000fe09:	c7 05 04 bd 03 c0 ce fb 00 c0 	mov    DWORD PTR ds:0xc003bd04,0xc000fbce
c000fe13:	c7 05 08 bd 03 c0 13 fc 00 c0 	mov    DWORD PTR ds:0xc003bd08,0xc000fc13
c000fe1d:	c3                   	ret    

c000fe1e <systemCall(regs*, void*)>:
c000fe1e:	53                   	push   ebx
c000fe1f:	83 ec 08             	sub    esp,0x8
c000fe22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe26:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fe29:	83 f8 7f             	cmp    eax,0x7f
c000fe2c:	77 16                	ja     c000fe44 <systemCall(regs*, void*)+0x26>
c000fe2e:	8b 14 85 60 bc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc43a0]
c000fe35:	85 d2                	test   edx,edx
c000fe37:	74 0b                	je     c000fe44 <systemCall(regs*, void*)+0x26>
c000fe39:	83 ec 0c             	sub    esp,0xc
c000fe3c:	53                   	push   ebx
c000fe3d:	ff d2                	call   edx
c000fe3f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fe42:	eb 0d                	jmp    c000fe51 <systemCall(regs*, void*)+0x33>
c000fe44:	52                   	push   edx
c000fe45:	52                   	push   edx
c000fe46:	50                   	push   eax
c000fe47:	68 d8 92 03 c0       	push   0xc00392d8
c000fe4c:	e8 6f d0 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fe59:	31 d2                	xor    edx,edx
c000fe5b:	83 c4 08             	add    esp,0x8
c000fe5e:	5b                   	pop    ebx
c000fe5f:	c3                   	ret    

c000fe60 <VgaText::isAtty()>:
c000fe60:	b0 01                	mov    al,0x1
c000fe62:	c3                   	ret    
c000fe63:	90                   	nop

c000fe64 <VgaText::~VgaText()>:
c000fe64:	83 ec 0c             	sub    esp,0xc
c000fe67:	ba e0 93 03 c0       	mov    edx,0xc00393e0
c000fe6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe70:	89 10                	mov    DWORD PTR [eax],edx
c000fe72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe76:	83 ec 0c             	sub    esp,0xc
c000fe79:	50                   	push   eax
c000fe7a:	e8 81 12 00 00       	call   c0011100 <UnixFile::~UnixFile()>
c000fe7f:	83 c4 10             	add    esp,0x10
c000fe82:	90                   	nop
c000fe83:	83 c4 0c             	add    esp,0xc
c000fe86:	c3                   	ret    
c000fe87:	90                   	nop

c000fe88 <VgaText::~VgaText()>:
c000fe88:	83 ec 0c             	sub    esp,0xc
c000fe8b:	83 ec 0c             	sub    esp,0xc
c000fe8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe92:	e8 cd ff ff ff       	call   c000fe64 <VgaText::~VgaText()>
c000fe97:	83 c4 10             	add    esp,0x10
c000fe9a:	83 ec 08             	sub    esp,0x8
c000fe9d:	68 60 12 00 00       	push   0x1260
c000fea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fea6:	e8 d4 25 00 00       	call   c001247f <operator delete(void*, unsigned long)>
c000feab:	83 c4 10             	add    esp,0x10
c000feae:	83 c4 0c             	add    esp,0xc
c000feb1:	c3                   	ret    

c000feb2 <VgaText::read(unsigned long long, void*, int*)>:
c000feb2:	83 ec 10             	sub    esp,0x10
c000feb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000febd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fec1:	e8 34 4f 00 00       	call   c0014dfa <readKeyboard(VgaText*, char*, unsigned long)>
c000fec6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000feca:	89 02                	mov    DWORD PTR [edx],eax
c000fecc:	31 c0                	xor    eax,eax
c000fece:	83 c4 1c             	add    esp,0x1c
c000fed1:	c3                   	ret    

c000fed2 <setTerminalScrollLock(bool)>:
c000fed2:	c3                   	ret    

c000fed3 <addToTerminalCycle(VgaText*)>:
c000fed3:	8b 15 80 be 03 c0    	mov    edx,DWORD PTR ds:0xc003be80
c000fed9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fedd:	85 d2                	test   edx,edx
c000fedf:	75 0c                	jne    c000feed <addToTerminalCycle(VgaText*)+0x1a>
c000fee1:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fee7:	a3 80 be 03 c0       	mov    ds:0xc003be80,eax
c000feec:	c3                   	ret    
c000feed:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fef3:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fef9:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000feff:	c3                   	ret    

c000ff00 <installVgaTextImplementation()>:
c000ff00:	83 ec 10             	sub    esp,0x10
c000ff03:	6a 20                	push   0x20
c000ff05:	6a 00                	push   0x0
c000ff07:	68 60 be 03 c0       	push   0xc003be60
c000ff0c:	e8 9a 07 ff ff       	call   c00006ab <memset>
c000ff11:	83 c4 1c             	add    esp,0x1c
c000ff14:	c3                   	ret    

c000ff15 <scrollTerminalScrollLock(int)>:
c000ff15:	c3                   	ret    

c000ff16 <VgaText::load()>:
c000ff16:	53                   	push   ebx
c000ff17:	31 c0                	xor    eax,eax
c000ff19:	83 ec 58             	sub    esp,0x58
c000ff1c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ff20:	89 e2                	mov    edx,esp
c000ff22:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ff26:	40                   	inc    eax
c000ff27:	83 f8 50             	cmp    eax,0x50
c000ff2a:	75 f6                	jne    c000ff22 <VgaText::load()+0xc>
c000ff2c:	31 c0                	xor    eax,eax
c000ff2e:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000ff35:	84 c9                	test   cl,cl
c000ff37:	74 06                	je     c000ff3f <VgaText::load()+0x29>
c000ff39:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ff3c:	40                   	inc    eax
c000ff3d:	eb ef                	jmp    c000ff2e <VgaText::load()+0x18>
c000ff3f:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000ff45:	85 c0                	test   eax,eax
c000ff47:	74 09                	je     c000ff52 <VgaText::load()+0x3c>
c000ff49:	51                   	push   ecx
c000ff4a:	51                   	push   ecx
c000ff4b:	52                   	push   edx
c000ff4c:	53                   	push   ebx
c000ff4d:	ff d0                	call   eax
c000ff4f:	83 c4 10             	add    esp,0x10
c000ff52:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000ff58:	85 c0                	test   eax,eax
c000ff5a:	74 09                	je     c000ff65 <VgaText::load()+0x4f>
c000ff5c:	83 ec 0c             	sub    esp,0xc
c000ff5f:	53                   	push   ebx
c000ff60:	ff d0                	call   eax
c000ff62:	83 c4 10             	add    esp,0x10
c000ff65:	83 c4 58             	add    esp,0x58
c000ff68:	5b                   	pop    ebx
c000ff69:	c3                   	ret    

c000ff6a <VgaText::updateCursor()>:
c000ff6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff6e:	39 05 84 be 03 c0    	cmp    DWORD PTR ds:0xc003be84,eax
c000ff74:	75 0c                	jne    c000ff82 <VgaText::updateCursor()+0x18>
c000ff76:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000ff7c:	85 c0                	test   eax,eax
c000ff7e:	74 02                	je     c000ff82 <VgaText::updateCursor()+0x18>
c000ff80:	ff e0                	jmp    eax
c000ff82:	c3                   	ret    
c000ff83:	90                   	nop

c000ff84 <VgaText::showCursor(bool)>:
c000ff84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff8c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000ff92:	c3                   	ret    
c000ff93:	90                   	nop

c000ff94 <VgaText::disableBlink(bool)>:
c000ff94:	56                   	push   esi
c000ff95:	53                   	push   ebx
c000ff96:	51                   	push   ecx
c000ff97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff9b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff9f:	39 1d 84 be 03 c0    	cmp    DWORD PTR ds:0xc003be84,ebx
c000ffa5:	75 18                	jne    c000ffbf <VgaText::disableBlink(bool)+0x2b>
c000ffa7:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ffad:	85 c0                	test   eax,eax
c000ffaf:	74 0e                	je     c000ffbf <VgaText::disableBlink(bool)+0x2b>
c000ffb1:	89 f1                	mov    ecx,esi
c000ffb3:	52                   	push   edx
c000ffb4:	52                   	push   edx
c000ffb5:	0f b6 d1             	movzx  edx,cl
c000ffb8:	52                   	push   edx
c000ffb9:	53                   	push   ebx
c000ffba:	ff d0                	call   eax
c000ffbc:	83 c4 10             	add    esp,0x10
c000ffbf:	89 f0                	mov    eax,esi
c000ffc1:	83 f0 01             	xor    eax,0x1
c000ffc4:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ffca:	58                   	pop    eax
c000ffcb:	5b                   	pop    ebx
c000ffcc:	5e                   	pop    esi
c000ffcd:	c3                   	ret    

c000ffce <VgaText::doANSI_SGR(int)>:
c000ffce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffd6:	85 d2                	test   edx,edx
c000ffd8:	75 14                	jne    c000ffee <VgaText::doANSI_SGR(int)+0x20>
c000ffda:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ffe0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ffe6:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ffec:	eb 65                	jmp    c0010053 <VgaText::doANSI_SGR(int)+0x85>
c000ffee:	83 fa 07             	cmp    edx,0x7
c000fff1:	75 14                	jne    c0010007 <VgaText::doANSI_SGR(int)+0x39>
c000fff3:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fff9:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ffff:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010005:	eb 4c                	jmp    c0010053 <VgaText::doANSI_SGR(int)+0x85>
c0010007:	83 fa 1b             	cmp    edx,0x1b
c001000a:	74 ce                	je     c000ffda <VgaText::doANSI_SGR(int)+0xc>
c001000c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001000f:	83 f9 07             	cmp    ecx,0x7
c0010012:	77 09                	ja     c001001d <VgaText::doANSI_SGR(int)+0x4f>
c0010014:	8b 14 8d 40 ae 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc51c0]
c001001b:	eb 20                	jmp    c001003d <VgaText::doANSI_SGR(int)+0x6f>
c001001d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010020:	83 f9 07             	cmp    ecx,0x7
c0010023:	77 09                	ja     c001002e <VgaText::doANSI_SGR(int)+0x60>
c0010025:	8b 14 8d 40 ae 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc51c0]
c001002c:	eb 25                	jmp    c0010053 <VgaText::doANSI_SGR(int)+0x85>
c001002e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010031:	83 f9 07             	cmp    ecx,0x7
c0010034:	77 0e                	ja     c0010044 <VgaText::doANSI_SGR(int)+0x76>
c0010036:	8b 14 95 f8 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5308]
c001003d:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010043:	c3                   	ret    
c0010044:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010047:	83 f9 07             	cmp    ecx,0x7
c001004a:	77 0d                	ja     c0010059 <VgaText::doANSI_SGR(int)+0x8b>
c001004c:	8b 14 95 d0 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5330]
c0010053:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010059:	c3                   	ret    

c001005a <VgaText::setDefaultBgColour(VgaColour)>:
c001005a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001005e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010062:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010068:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001006e:	c3                   	ret    
c001006f:	90                   	nop

c0010070 <VgaText::setDefaultFgColour(VgaColour)>:
c0010070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010074:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010078:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001007e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010084:	c3                   	ret    
c0010085:	90                   	nop

c0010086 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010086:	53                   	push   ebx
c0010087:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001008b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001008f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010093:	51                   	push   ecx
c0010094:	e8 c1 ff ff ff       	call   c001005a <VgaText::setDefaultBgColour(VgaColour)>
c0010099:	58                   	pop    eax
c001009a:	5a                   	pop    edx
c001009b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001009f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00100a3:	5b                   	pop    ebx
c00100a4:	eb ca                	jmp    c0010070 <VgaText::setDefaultFgColour(VgaColour)>

c00100a6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00100a6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00100aa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00100af:	83 e0 0f             	and    eax,0xf
c00100b2:	c1 e2 04             	shl    edx,0x4
c00100b5:	09 d0                	or     eax,edx
c00100b7:	c3                   	ret    

c00100b8 <VgaText::scrollScreen()>:
c00100b8:	57                   	push   edi
c00100b9:	56                   	push   esi
c00100ba:	be 01 00 00 00       	mov    esi,0x1
c00100bf:	53                   	push   ebx
c00100c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100c4:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00100ca:	31 ff                	xor    edi,edi
c00100cc:	01 d9                	add    ecx,ebx
c00100ce:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00100d1:	83 fe 17             	cmp    esi,0x17
c00100d4:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00100da:	75 28                	jne    c0010104 <VgaText::scrollScreen()+0x4c>
c00100dc:	f7 c7 01 00 00 00    	test   edi,0x1
c00100e2:	74 1c                	je     c0010100 <VgaText::scrollScreen()+0x48>
c00100e4:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00100eb:	50                   	push   eax
c00100ec:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00100f3:	50                   	push   eax
c00100f4:	e8 ad ff ff ff       	call   c00100a6 <VgaText::combineColours(unsigned char, unsigned char)>
c00100f9:	5a                   	pop    edx
c00100fa:	5a                   	pop    edx
c00100fb:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00100fe:	eb 04                	jmp    c0010104 <VgaText::scrollScreen()+0x4c>
c0010100:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010104:	47                   	inc    edi
c0010105:	41                   	inc    ecx
c0010106:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001010c:	75 c0                	jne    c00100ce <VgaText::scrollScreen()+0x16>
c001010e:	46                   	inc    esi
c001010f:	83 fe 18             	cmp    esi,0x18
c0010112:	75 b0                	jne    c00100c4 <VgaText::scrollScreen()+0xc>
c0010114:	39 1d 84 be 03 c0    	cmp    DWORD PTR ds:0xc003be84,ebx
c001011a:	75 24                	jne    c0010140 <VgaText::scrollScreen()+0x88>
c001011c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010123:	74 08                	je     c001012d <VgaText::scrollScreen()+0x75>
c0010125:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001012b:	eb 13                	jmp    c0010140 <VgaText::scrollScreen()+0x88>
c001012d:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010133:	85 c0                	test   eax,eax
c0010135:	74 09                	je     c0010140 <VgaText::scrollScreen()+0x88>
c0010137:	83 ec 0c             	sub    esp,0xc
c001013a:	53                   	push   ebx
c001013b:	ff d0                	call   eax
c001013d:	83 c4 10             	add    esp,0x10
c0010140:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010144:	5b                   	pop    ebx
c0010145:	5e                   	pop    esi
c0010146:	5f                   	pop    edi
c0010147:	e9 1e fe ff ff       	jmp    c000ff6a <VgaText::updateCursor()>

c001014c <VgaText::combineCharAndColour(char, unsigned char)>:
c001014c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010151:	c1 e0 08             	shl    eax,0x8
c0010154:	89 c2                	mov    edx,eax
c0010156:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001015b:	09 d0                	or     eax,edx
c001015d:	c3                   	ret    

c001015e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001015e:	53                   	push   ebx
c001015f:	83 ec 08             	sub    esp,0x8
c0010162:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010166:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001016b:	50                   	push   eax
c001016c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010171:	50                   	push   eax
c0010172:	e8 2f ff ff ff       	call   c00100a6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010177:	5a                   	pop    edx
c0010178:	0f b6 c0             	movzx  eax,al
c001017b:	5b                   	pop    ebx
c001017c:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010181:	50                   	push   eax
c0010182:	53                   	push   ebx
c0010183:	e8 c4 ff ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c0010188:	5a                   	pop    edx
c0010189:	5a                   	pop    edx
c001018a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010190:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010194:	0f b7 d2             	movzx  edx,dx
c0010197:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001019c:	39 0d 84 be 03 c0    	cmp    DWORD PTR ds:0xc003be84,ecx
c00101a2:	75 14                	jne    c00101b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00101a4:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00101aa:	85 c0                	test   eax,eax
c00101ac:	74 0a                	je     c00101b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00101ae:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00101b2:	83 c4 08             	add    esp,0x8
c00101b5:	5b                   	pop    ebx
c00101b6:	ff e0                	jmp    eax
c00101b8:	83 c4 08             	add    esp,0x8
c00101bb:	5b                   	pop    ebx
c00101bc:	c3                   	ret    
c00101bd:	90                   	nop

c00101be <VgaText::getCursorX()>:
c00101be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c2:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00101c8:	c3                   	ret    
c00101c9:	90                   	nop

c00101ca <VgaText::getCursorY()>:
c00101ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ce:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00101d4:	c3                   	ret    
c00101d5:	90                   	nop

c00101d6 <VgaText::setCursor(int, int)>:
c00101d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101de:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00101e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101e8:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00101ee:	e9 77 fd ff ff       	jmp    c000ff6a <VgaText::updateCursor()>
c00101f3:	90                   	nop

c00101f4 <VgaText::setCursorX(int)>:
c00101f4:	83 ec 10             	sub    esp,0x10
c00101f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101fb:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010201:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010205:	50                   	push   eax
c0010206:	e8 cb ff ff ff       	call   c00101d6 <VgaText::setCursor(int, int)>
c001020b:	83 c4 1c             	add    esp,0x1c
c001020e:	c3                   	ret    
c001020f:	90                   	nop

c0010210 <VgaText::setCursorY(int)>:
c0010210:	83 ec 10             	sub    esp,0x10
c0010213:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010217:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001021b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010221:	50                   	push   eax
c0010222:	e8 af ff ff ff       	call   c00101d6 <VgaText::setCursor(int, int)>
c0010227:	83 c4 1c             	add    esp,0x1c
c001022a:	c3                   	ret    
c001022b:	90                   	nop

c001022c <VgaText::incrementCursor(bool)>:
c001022c:	56                   	push   esi
c001022d:	53                   	push   ebx
c001022e:	51                   	push   ecx
c001022f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010233:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010237:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001023d:	40                   	inc    eax
c001023e:	83 f8 50             	cmp    eax,0x50
c0010241:	74 08                	je     c001024b <VgaText::incrementCursor(bool)+0x1f>
c0010243:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010249:	eb 33                	jmp    c001027e <VgaText::incrementCursor(bool)+0x52>
c001024b:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010251:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001025b:	8d 50 01             	lea    edx,[eax+0x1]
c001025e:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010264:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001026a:	75 12                	jne    c001027e <VgaText::incrementCursor(bool)+0x52>
c001026c:	83 ec 0c             	sub    esp,0xc
c001026f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010275:	53                   	push   ebx
c0010276:	e8 3d fe ff ff       	call   c00100b8 <VgaText::scrollScreen()>
c001027b:	83 c4 10             	add    esp,0x10
c001027e:	89 f0                	mov    eax,esi
c0010280:	84 c0                	test   al,al
c0010282:	74 0c                	je     c0010290 <VgaText::incrementCursor(bool)+0x64>
c0010284:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010288:	5a                   	pop    edx
c0010289:	5b                   	pop    ebx
c001028a:	5e                   	pop    esi
c001028b:	e9 da fc ff ff       	jmp    c000ff6a <VgaText::updateCursor()>
c0010290:	58                   	pop    eax
c0010291:	5b                   	pop    ebx
c0010292:	5e                   	pop    esi
c0010293:	c3                   	ret    

c0010294 <VgaText::updateRAMUsageDisplay(int)>:
c0010294:	53                   	push   ebx
c0010295:	bb 0a 00 00 00       	mov    ebx,0xa
c001029a:	6a 0f                	push   0xf
c001029c:	6a 00                	push   0x0
c001029e:	e8 03 fe ff ff       	call   c00100a6 <VgaText::combineColours(unsigned char, unsigned char)>
c00102a3:	5a                   	pop    edx
c00102a4:	59                   	pop    ecx
c00102a5:	0f b6 c8             	movzx  ecx,al
c00102a8:	51                   	push   ecx
c00102a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102ad:	99                   	cdq    
c00102ae:	f7 fb                	idiv   ebx
c00102b0:	89 d3                	mov    ebx,edx
c00102b2:	83 c0 30             	add    eax,0x30
c00102b5:	83 c3 30             	add    ebx,0x30
c00102b8:	0f be c0             	movsx  eax,al
c00102bb:	0f b6 db             	movzx  ebx,bl
c00102be:	50                   	push   eax
c00102bf:	e8 88 fe ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c00102c4:	5a                   	pop    edx
c00102c5:	5a                   	pop    edx
c00102c6:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00102cc:	51                   	push   ecx
c00102cd:	53                   	push   ebx
c00102ce:	e8 79 fe ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c00102d3:	5b                   	pop    ebx
c00102d4:	5a                   	pop    edx
c00102d5:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c00102db:	51                   	push   ecx
c00102dc:	6a 25                	push   0x25
c00102de:	e8 69 fe ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c00102e3:	59                   	pop    ecx
c00102e4:	5b                   	pop    ebx
c00102e5:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c00102eb:	5b                   	pop    ebx
c00102ec:	c3                   	ret    
c00102ed:	90                   	nop

c00102ee <VgaText::updateDiskUsage()>:
c00102ee:	55                   	push   ebp
c00102ef:	bd 10 27 00 00       	mov    ebp,0x2710
c00102f4:	57                   	push   edi
c00102f5:	56                   	push   esi
c00102f6:	53                   	push   ebx
c00102f7:	6a 0f                	push   0xf
c00102f9:	6a 00                	push   0x0
c00102fb:	e8 a6 fd ff ff       	call   c00100a6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010300:	5a                   	pop    edx
c0010301:	0f b6 d8             	movzx  ebx,al
c0010304:	59                   	pop    ecx
c0010305:	a1 c8 d0 03 c0       	mov    eax,ds:0xc003d0c8
c001030a:	53                   	push   ebx
c001030b:	b9 0a 00 00 00       	mov    ecx,0xa
c0010310:	99                   	cdq    
c0010311:	f7 fd                	idiv   ebp
c0010313:	99                   	cdq    
c0010314:	f7 f9                	idiv   ecx
c0010316:	8d 42 30             	lea    eax,[edx+0x30]
c0010319:	0f b6 c0             	movzx  eax,al
c001031c:	50                   	push   eax
c001031d:	e8 2a fe ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c0010322:	5e                   	pop    esi
c0010323:	5f                   	pop    edi
c0010324:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001032a:	bf e8 03 00 00       	mov    edi,0x3e8
c001032f:	53                   	push   ebx
c0010330:	a1 c8 d0 03 c0       	mov    eax,ds:0xc003d0c8
c0010335:	99                   	cdq    
c0010336:	f7 ff                	idiv   edi
c0010338:	99                   	cdq    
c0010339:	f7 f9                	idiv   ecx
c001033b:	8d 42 30             	lea    eax,[edx+0x30]
c001033e:	0f b6 c0             	movzx  eax,al
c0010341:	50                   	push   eax
c0010342:	e8 05 fe ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c0010347:	5a                   	pop    edx
c0010348:	5e                   	pop    esi
c0010349:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001034f:	be 64 00 00 00       	mov    esi,0x64
c0010354:	53                   	push   ebx
c0010355:	a1 c8 d0 03 c0       	mov    eax,ds:0xc003d0c8
c001035a:	99                   	cdq    
c001035b:	f7 fe                	idiv   esi
c001035d:	99                   	cdq    
c001035e:	f7 f9                	idiv   ecx
c0010360:	8d 42 30             	lea    eax,[edx+0x30]
c0010363:	0f b6 c0             	movzx  eax,al
c0010366:	50                   	push   eax
c0010367:	e8 e0 fd ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c001036c:	5a                   	pop    edx
c001036d:	5a                   	pop    edx
c001036e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010374:	53                   	push   ebx
c0010375:	a1 c8 d0 03 c0       	mov    eax,ds:0xc003d0c8
c001037a:	99                   	cdq    
c001037b:	f7 f9                	idiv   ecx
c001037d:	99                   	cdq    
c001037e:	f7 f9                	idiv   ecx
c0010380:	8d 42 30             	lea    eax,[edx+0x30]
c0010383:	0f b6 c0             	movzx  eax,al
c0010386:	50                   	push   eax
c0010387:	e8 c0 fd ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c001038c:	5a                   	pop    edx
c001038d:	5a                   	pop    edx
c001038e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c0010394:	53                   	push   ebx
c0010395:	a1 c8 d0 03 c0       	mov    eax,ds:0xc003d0c8
c001039a:	99                   	cdq    
c001039b:	f7 f9                	idiv   ecx
c001039d:	8d 42 30             	lea    eax,[edx+0x30]
c00103a0:	0f b6 c0             	movzx  eax,al
c00103a3:	50                   	push   eax
c00103a4:	e8 a3 fd ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c00103a9:	5a                   	pop    edx
c00103aa:	5a                   	pop    edx
c00103ab:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00103b1:	53                   	push   ebx
c00103b2:	a1 c4 d0 03 c0       	mov    eax,ds:0xc003d0c4
c00103b7:	99                   	cdq    
c00103b8:	f7 fd                	idiv   ebp
c00103ba:	99                   	cdq    
c00103bb:	f7 f9                	idiv   ecx
c00103bd:	8d 42 30             	lea    eax,[edx+0x30]
c00103c0:	0f b6 c0             	movzx  eax,al
c00103c3:	50                   	push   eax
c00103c4:	e8 83 fd ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c00103c9:	5d                   	pop    ebp
c00103ca:	5a                   	pop    edx
c00103cb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00103d1:	53                   	push   ebx
c00103d2:	a1 c4 d0 03 c0       	mov    eax,ds:0xc003d0c4
c00103d7:	99                   	cdq    
c00103d8:	f7 ff                	idiv   edi
c00103da:	99                   	cdq    
c00103db:	f7 f9                	idiv   ecx
c00103dd:	8d 42 30             	lea    eax,[edx+0x30]
c00103e0:	0f b6 c0             	movzx  eax,al
c00103e3:	50                   	push   eax
c00103e4:	e8 63 fd ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c00103e9:	5f                   	pop    edi
c00103ea:	5d                   	pop    ebp
c00103eb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00103f1:	53                   	push   ebx
c00103f2:	a1 c4 d0 03 c0       	mov    eax,ds:0xc003d0c4
c00103f7:	99                   	cdq    
c00103f8:	f7 fe                	idiv   esi
c00103fa:	99                   	cdq    
c00103fb:	f7 f9                	idiv   ecx
c00103fd:	8d 42 30             	lea    eax,[edx+0x30]
c0010400:	0f b6 c0             	movzx  eax,al
c0010403:	50                   	push   eax
c0010404:	e8 43 fd ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c0010409:	5a                   	pop    edx
c001040a:	5e                   	pop    esi
c001040b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010411:	53                   	push   ebx
c0010412:	a1 c4 d0 03 c0       	mov    eax,ds:0xc003d0c4
c0010417:	99                   	cdq    
c0010418:	f7 f9                	idiv   ecx
c001041a:	99                   	cdq    
c001041b:	f7 f9                	idiv   ecx
c001041d:	8d 42 30             	lea    eax,[edx+0x30]
c0010420:	0f b6 c0             	movzx  eax,al
c0010423:	50                   	push   eax
c0010424:	e8 23 fd ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c0010429:	5f                   	pop    edi
c001042a:	5d                   	pop    ebp
c001042b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010431:	53                   	push   ebx
c0010432:	a1 c4 d0 03 c0       	mov    eax,ds:0xc003d0c4
c0010437:	99                   	cdq    
c0010438:	f7 f9                	idiv   ecx
c001043a:	83 c2 30             	add    edx,0x30
c001043d:	0f b6 d2             	movzx  edx,dl
c0010440:	52                   	push   edx
c0010441:	e8 06 fd ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c0010446:	5a                   	pop    edx
c0010447:	59                   	pop    ecx
c0010448:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001044e:	5b                   	pop    ebx
c001044f:	5e                   	pop    esi
c0010450:	5f                   	pop    edi
c0010451:	5d                   	pop    ebp
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::updateTitle()>:
c0010454:	53                   	push   ebx
c0010455:	31 c0                	xor    eax,eax
c0010457:	83 ec 58             	sub    esp,0x58
c001045a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001045e:	89 e1                	mov    ecx,esp
c0010460:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010464:	40                   	inc    eax
c0010465:	83 f8 50             	cmp    eax,0x50
c0010468:	75 f6                	jne    c0010460 <VgaText::updateTitle()+0xc>
c001046a:	31 c0                	xor    eax,eax
c001046c:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010473:	84 db                	test   bl,bl
c0010475:	74 06                	je     c001047d <VgaText::updateTitle()+0x29>
c0010477:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001047a:	40                   	inc    eax
c001047b:	eb ef                	jmp    c001046c <VgaText::updateTitle()+0x18>
c001047d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010483:	85 c0                	test   eax,eax
c0010485:	74 09                	je     c0010490 <VgaText::updateTitle()+0x3c>
c0010487:	53                   	push   ebx
c0010488:	53                   	push   ebx
c0010489:	51                   	push   ecx
c001048a:	52                   	push   edx
c001048b:	ff d0                	call   eax
c001048d:	83 c4 10             	add    esp,0x10
c0010490:	e8 59 fe ff ff       	call   c00102ee <VgaText::updateDiskUsage()>
c0010495:	83 c4 58             	add    esp,0x58
c0010498:	5b                   	pop    ebx
c0010499:	c3                   	ret    

c001049a <VgaText::setTitleTextColour(VgaColour)>:
c001049a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001049e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104a2:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00104a8:	eb aa                	jmp    c0010454 <VgaText::updateTitle()>

c00104aa <VgaText::setTitleColour(VgaColour)>:
c00104aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104b2:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00104b8:	eb 9a                	jmp    c0010454 <VgaText::updateTitle()>

c00104ba <VgaText::setTitle(char*)>:
c00104ba:	53                   	push   ebx
c00104bb:	83 ec 10             	sub    esp,0x10
c00104be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00104c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c6:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00104cc:	50                   	push   eax
c00104cd:	e8 f5 02 ff ff       	call   c00007c7 <strcpy>
c00104d2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104d6:	83 c4 18             	add    esp,0x18
c00104d9:	5b                   	pop    ebx
c00104da:	e9 75 ff ff ff       	jmp    c0010454 <VgaText::updateTitle()>
c00104df:	90                   	nop

c00104e0 <VgaText::decrementCursor(bool)>:
c00104e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00104e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104e8:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00104ee:	85 c0                	test   eax,eax
c00104f0:	74 07                	je     c00104f9 <VgaText::decrementCursor(bool)+0x19>
c00104f2:	48                   	dec    eax
c00104f3:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00104f9:	84 c9                	test   cl,cl
c00104fb:	74 09                	je     c0010506 <VgaText::decrementCursor(bool)+0x26>
c00104fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010501:	e9 64 fa ff ff       	jmp    c000ff6a <VgaText::updateCursor()>
c0010506:	c3                   	ret    
c0010507:	90                   	nop

c0010508 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010508:	53                   	push   ebx
c0010509:	83 ec 08             	sub    esp,0x8
c001050c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010510:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010514:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010518:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001051c:	3c 07                	cmp    al,0x7
c001051e:	75 2a                	jne    c001054a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010520:	a1 a4 be 03 c0       	mov    eax,ds:0xc003bea4
c0010525:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001052d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010535:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001053d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010541:	83 c4 08             	add    esp,0x8
c0010544:	5b                   	pop    ebx
c0010545:	e9 10 2c 00 00       	jmp    c001315a <Buzzer::beep(int, int, bool)>
c001054a:	3c 0d                	cmp    al,0xd
c001054c:	75 0c                	jne    c001055a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001054e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010558:	eb 3b                	jmp    c0010595 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001055a:	3c 0a                	cmp    al,0xa
c001055c:	75 40                	jne    c001059e <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001055e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010564:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001056e:	8d 50 01             	lea    edx,[eax+0x1]
c0010571:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010577:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001057d:	75 12                	jne    c0010591 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001057f:	83 ec 0c             	sub    esp,0xc
c0010582:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010588:	53                   	push   ebx
c0010589:	e8 2a fb ff ff       	call   c00100b8 <VgaText::scrollScreen()>
c001058e:	83 c4 10             	add    esp,0x10
c0010591:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010595:	83 c4 08             	add    esp,0x8
c0010598:	5b                   	pop    ebx
c0010599:	e9 cc f9 ff ff       	jmp    c000ff6a <VgaText::updateCursor()>
c001059e:	3c 08                	cmp    al,0x8
c00105a0:	75 31                	jne    c00105d3 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00105a2:	50                   	push   eax
c00105a3:	50                   	push   eax
c00105a4:	6a 01                	push   0x1
c00105a6:	53                   	push   ebx
c00105a7:	e8 34 ff ff ff       	call   c00104e0 <VgaText::decrementCursor(bool)>
c00105ac:	5a                   	pop    edx
c00105ad:	59                   	pop    ecx
c00105ae:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00105b4:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00105ba:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00105c0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00105c6:	6a 20                	push   0x20
c00105c8:	53                   	push   ebx
c00105c9:	e8 90 fb ff ff       	call   c001015e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105ce:	83 c4 28             	add    esp,0x28
c00105d1:	5b                   	pop    ebx
c00105d2:	c3                   	ret    
c00105d3:	83 ec 08             	sub    esp,0x8
c00105d6:	0f be c0             	movsx  eax,al
c00105d9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00105df:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00105e5:	51                   	push   ecx
c00105e6:	52                   	push   edx
c00105e7:	50                   	push   eax
c00105e8:	53                   	push   ebx
c00105e9:	e8 70 fb ff ff       	call   c001015e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105ee:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00105f2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00105fa:	83 c4 28             	add    esp,0x28
c00105fd:	5b                   	pop    ebx
c00105fe:	e9 29 fc ff ff       	jmp    c001022c <VgaText::incrementCursor(bool)>
c0010603:	90                   	nop

c0010604 <VgaText::isShowingCursor()>:
c0010604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010608:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001060e:	c3                   	ret    
c001060f:	90                   	nop

c0010610 <VgaText::isBlinkDisabled()>:
c0010610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010614:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001061a:	83 f0 01             	xor    eax,0x1
c001061d:	c3                   	ret    

c001061e <VgaText::setCursorHeight(int)>:
c001061e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010622:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010626:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c001062c:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010633:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010637:	e9 48 f9 ff ff       	jmp    c000ff84 <VgaText::showCursor(bool)>

c001063c <VgaText::getCursorHeight()>:
c001063c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010640:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010646:	c3                   	ret    

c0010647 <setActiveTerminal(VgaText*)>:
c0010647:	53                   	push   ebx
c0010648:	83 ec 08             	sub    esp,0x8
c001064b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001064f:	85 db                	test   ebx,ebx
c0010651:	75 11                	jne    c0010664 <setActiveTerminal(VgaText*)+0x1d>
c0010653:	c7 44 24 10 38 93 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039338
c001065b:	83 c4 08             	add    esp,0x8
c001065e:	5b                   	pop    ebx
c001065f:	e9 7a c9 ff ff       	jmp    c000cfde <panic(char const*)>
c0010664:	50                   	push   eax
c0010665:	50                   	push   eax
c0010666:	53                   	push   ebx
c0010667:	68 46 93 03 c0       	push   0xc0039346
c001066c:	e8 4f c8 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0010671:	a1 84 be 03 c0       	mov    eax,ds:0xc003be84
c0010676:	83 c4 10             	add    esp,0x10
c0010679:	85 c0                	test   eax,eax
c001067b:	74 0c                	je     c0010689 <setActiveTerminal(VgaText*)+0x42>
c001067d:	83 ec 0c             	sub    esp,0xc
c0010680:	50                   	push   eax
c0010681:	e8 e4 f8 ff ff       	call   c000ff6a <VgaText::updateCursor()>
c0010686:	83 c4 10             	add    esp,0x10
c0010689:	89 1d 84 be 03 c0    	mov    DWORD PTR ds:0xc003be84,ebx
c001068f:	51                   	push   ecx
c0010690:	51                   	push   ecx
c0010691:	53                   	push   ebx
c0010692:	68 5e 93 03 c0       	push   0xc003935e
c0010697:	e8 24 c8 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001069c:	83 c4 0c             	add    esp,0xc
c001069f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00106a5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00106ab:	53                   	push   ebx
c00106ac:	e8 25 fb ff ff       	call   c00101d6 <VgaText::setCursor(int, int)>
c00106b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106b4:	e8 57 ff ff ff       	call   c0010610 <VgaText::isBlinkDisabled()>
c00106b9:	5a                   	pop    edx
c00106ba:	0f b6 c0             	movzx  eax,al
c00106bd:	59                   	pop    ecx
c00106be:	50                   	push   eax
c00106bf:	53                   	push   ebx
c00106c0:	e8 cf f8 ff ff       	call   c000ff94 <VgaText::disableBlink(bool)>
c00106c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106c8:	e8 6f ff ff ff       	call   c001063c <VgaText::getCursorHeight()>
c00106cd:	5a                   	pop    edx
c00106ce:	59                   	pop    ecx
c00106cf:	50                   	push   eax
c00106d0:	53                   	push   ebx
c00106d1:	e8 48 ff ff ff       	call   c001061e <VgaText::setCursorHeight(int)>
c00106d6:	83 c4 10             	add    esp,0x10
c00106d9:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00106e0:	75 0a                	jne    c00106ec <setActiveTerminal(VgaText*)+0xa5>
c00106e2:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00106ec:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106f0:	83 c4 08             	add    esp,0x8
c00106f3:	5b                   	pop    ebx
c00106f4:	e9 1d f8 ff ff       	jmp    c000ff16 <VgaText::load()>

c00106f9 <doTerminalCycle()>:
c00106f9:	83 ec 18             	sub    esp,0x18
c00106fc:	a1 80 be 03 c0       	mov    eax,ds:0xc003be80
c0010701:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010707:	50                   	push   eax
c0010708:	a3 80 be 03 c0       	mov    ds:0xc003be80,eax
c001070d:	e8 35 ff ff ff       	call   c0010647 <setActiveTerminal(VgaText*)>
c0010712:	83 c4 1c             	add    esp,0x1c
c0010715:	c3                   	ret    

c0010716 <VgaText::doUpdate()>:
c0010716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001071a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010720:	85 c0                	test   eax,eax
c0010722:	74 02                	je     c0010726 <VgaText::doUpdate()+0x10>
c0010724:	ff e0                	jmp    eax
c0010726:	c3                   	ret    
c0010727:	90                   	nop

c0010728 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010728:	55                   	push   ebp
c0010729:	57                   	push   edi
c001072a:	56                   	push   esi
c001072b:	53                   	push   ebx
c001072c:	83 ec 1c             	sub    esp,0x1c
c001072f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010733:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010738:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001073f:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010742:	50                   	push   eax
c0010743:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010748:	50                   	push   eax
c0010749:	e8 58 f9 ff ff       	call   c00100a6 <VgaText::combineColours(unsigned char, unsigned char)>
c001074e:	59                   	pop    ecx
c001074f:	0f b6 c0             	movzx  eax,al
c0010752:	5b                   	pop    ebx
c0010753:	31 c9                	xor    ecx,ecx
c0010755:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001075d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010761:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010767:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001076b:	0f b7 db             	movzx  ebx,bx
c001076e:	01 db                	add    ebx,ebx
c0010770:	01 fb                	add    ebx,edi
c0010772:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010775:	84 c0                	test   al,al
c0010777:	0f 84 38 01 00 00    	je     c00108b5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c001077d:	3c 0d                	cmp    al,0xd
c001077f:	75 0f                	jne    c0010790 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010781:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001078b:	e9 1f 01 00 00       	jmp    c00108af <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010790:	3c 0a                	cmp    al,0xa
c0010792:	75 5b                	jne    c00107ef <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010794:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c001079a:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00107a4:	8d 48 01             	lea    ecx,[eax+0x1]
c00107a7:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00107ad:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00107b3:	75 12                	jne    c00107c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00107b5:	83 ec 0c             	sub    esp,0xc
c00107b8:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00107be:	55                   	push   ebp
c00107bf:	e8 f4 f8 ff ff       	call   c00100b8 <VgaText::scrollScreen()>
c00107c4:	83 c4 10             	add    esp,0x10
c00107c7:	83 ec 0c             	sub    esp,0xc
c00107ca:	55                   	push   ebp
c00107cb:	e8 9a f7 ff ff       	call   c000ff6a <VgaText::updateCursor()>
c00107d0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00107d8:	83 c4 10             	add    esp,0x10
c00107db:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00107e1:	31 c9                	xor    ecx,ecx
c00107e3:	0f b7 db             	movzx  ebx,bx
c00107e6:	01 db                	add    ebx,ebx
c00107e8:	01 fb                	add    ebx,edi
c00107ea:	e9 c0 00 00 00       	jmp    c00108af <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00107ef:	3c 08                	cmp    al,0x8
c00107f1:	75 4e                	jne    c0010841 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00107f3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00107f7:	53                   	push   ebx
c00107f8:	53                   	push   ebx
c00107f9:	6a 01                	push   0x1
c00107fb:	55                   	push   ebp
c00107fc:	e8 df fc ff ff       	call   c00104e0 <VgaText::decrementCursor(bool)>
c0010801:	58                   	pop    eax
c0010802:	5a                   	pop    edx
c0010803:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010809:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001080f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010815:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c001081b:	6a 20                	push   0x20
c001081d:	55                   	push   ebp
c001081e:	e8 3b f9 ff ff       	call   c001015e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010823:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001082b:	83 c4 20             	add    esp,0x20
c001082e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010834:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010838:	0f b7 db             	movzx  ebx,bx
c001083b:	01 db                	add    ebx,ebx
c001083d:	01 fb                	add    ebx,edi
c001083f:	eb 6e                	jmp    c00108af <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010841:	51                   	push   ecx
c0010842:	51                   	push   ecx
c0010843:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010847:	50                   	push   eax
c0010848:	e8 ff f8 ff ff       	call   c001014c <VgaText::combineCharAndColour(char, unsigned char)>
c001084d:	83 c4 10             	add    esp,0x10
c0010850:	66 89 03             	mov    WORD PTR [ebx],ax
c0010853:	39 2d 84 be 03 c0    	cmp    DWORD PTR ds:0xc003be84,ebp
c0010859:	75 2a                	jne    c0010885 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001085b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010861:	85 c0                	test   eax,eax
c0010863:	74 20                	je     c0010885 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010865:	52                   	push   edx
c0010866:	52                   	push   edx
c0010867:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001086d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010873:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010877:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001087b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c001087e:	51                   	push   ecx
c001087f:	55                   	push   ebp
c0010880:	ff d0                	call   eax
c0010882:	83 c4 20             	add    esp,0x20
c0010885:	83 c3 02             	add    ebx,0x2
c0010888:	50                   	push   eax
c0010889:	50                   	push   eax
c001088a:	6a 00                	push   0x0
c001088c:	55                   	push   ebp
c001088d:	e8 9a f9 ff ff       	call   c001022c <VgaText::incrementCursor(bool)>
c0010892:	83 c4 10             	add    esp,0x10
c0010895:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c001089c:	75 0f                	jne    c00108ad <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c001089e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00108a6:	0f b7 db             	movzx  ebx,bx
c00108a9:	01 db                	add    ebx,ebx
c00108ab:	01 fb                	add    ebx,edi
c00108ad:	b1 01                	mov    cl,0x1
c00108af:	46                   	inc    esi
c00108b0:	e9 bd fe ff ff       	jmp    c0010772 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00108b5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00108b9:	83 ec 0c             	sub    esp,0xc
c00108bc:	55                   	push   ebp
c00108bd:	e8 a8 f6 ff ff       	call   c000ff6a <VgaText::updateCursor()>
c00108c2:	83 c4 10             	add    esp,0x10
c00108c5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00108c9:	84 c9                	test   cl,cl
c00108cb:	74 0c                	je     c00108d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00108cd:	83 ec 0c             	sub    esp,0xc
c00108d0:	55                   	push   ebp
c00108d1:	e8 40 fe ff ff       	call   c0010716 <VgaText::doUpdate()>
c00108d6:	83 c4 10             	add    esp,0x10
c00108d9:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c00108e0:	83 c4 1c             	add    esp,0x1c
c00108e3:	5b                   	pop    ebx
c00108e4:	5e                   	pop    esi
c00108e5:	5f                   	pop    edi
c00108e6:	5d                   	pop    ebp
c00108e7:	c3                   	ret    

c00108e8 <VgaText::clearScreen()>:
c00108e8:	57                   	push   edi
c00108e9:	56                   	push   esi
c00108ea:	31 f6                	xor    esi,esi
c00108ec:	53                   	push   ebx
c00108ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108f1:	52                   	push   edx
c00108f2:	6a 00                	push   0x0
c00108f4:	6a 00                	push   0x0
c00108f6:	53                   	push   ebx
c00108f7:	e8 da f8 ff ff       	call   c00101d6 <VgaText::setCursor(int, int)>
c00108fc:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010903:	83 c4 10             	add    esp,0x10
c0010906:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001090c:	7e 26                	jle    c0010934 <VgaText::clearScreen()+0x4c>
c001090e:	31 ff                	xor    edi,edi
c0010910:	50                   	push   eax
c0010911:	50                   	push   eax
c0010912:	56                   	push   esi
c0010913:	57                   	push   edi
c0010914:	47                   	inc    edi
c0010915:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001091b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010921:	6a 20                	push   0x20
c0010923:	53                   	push   ebx
c0010924:	e8 35 f8 ff ff       	call   c001015e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010929:	83 c4 20             	add    esp,0x20
c001092c:	83 ff 50             	cmp    edi,0x50
c001092f:	75 df                	jne    c0010910 <VgaText::clearScreen()+0x28>
c0010931:	46                   	inc    esi
c0010932:	eb d2                	jmp    c0010906 <VgaText::clearScreen()+0x1e>
c0010934:	83 ec 0c             	sub    esp,0xc
c0010937:	53                   	push   ebx
c0010938:	e8 d9 fd ff ff       	call   c0010716 <VgaText::doUpdate()>
c001093d:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010944:	83 c4 10             	add    esp,0x10
c0010947:	5b                   	pop    ebx
c0010948:	5e                   	pop    esi
c0010949:	5f                   	pop    edi
c001094a:	c3                   	ret    
c001094b:	90                   	nop

c001094c <VgaText::putchar(char)>:
c001094c:	56                   	push   esi
c001094d:	53                   	push   ebx
c001094e:	83 ec 14             	sub    esp,0x14
c0010951:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010955:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010959:	3c 5b                	cmp    al,0x5b
c001095b:	75 21                	jne    c001097e <VgaText::putchar(char)+0x32>
c001095d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010964:	74 28                	je     c001098e <VgaText::putchar(char)+0x42>
c0010966:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001096f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010979:	e9 e2 00 00 00       	jmp    c0010a60 <VgaText::putchar(char)+0x114>
c001097e:	3c 1b                	cmp    al,0x1b
c0010980:	75 0c                	jne    c001098e <VgaText::putchar(char)+0x42>
c0010982:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010989:	e9 d2 00 00 00       	jmp    c0010a60 <VgaText::putchar(char)+0x114>
c001098e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010994:	84 c9                	test   cl,cl
c0010996:	0f 84 ab 00 00 00    	je     c0010a47 <VgaText::putchar(char)+0xfb>
c001099c:	8d 50 c0             	lea    edx,[eax-0x40]
c001099f:	80 fa 3e             	cmp    dl,0x3e
c00109a2:	0f 87 82 00 00 00    	ja     c0010a2a <VgaText::putchar(char)+0xde>
c00109a8:	3c 6d                	cmp    al,0x6d
c00109aa:	75 4d                	jne    c00109f9 <VgaText::putchar(char)+0xad>
c00109ac:	31 f6                	xor    esi,esi
c00109ae:	31 d2                	xor    edx,edx
c00109b0:	31 c0                	xor    eax,eax
c00109b2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00109b8:	7e 30                	jle    c00109ea <VgaText::putchar(char)+0x9e>
c00109ba:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00109c2:	80 fa 3b             	cmp    dl,0x3b
c00109c5:	75 17                	jne    c00109de <VgaText::putchar(char)+0x92>
c00109c7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109cb:	50                   	push   eax
c00109cc:	53                   	push   ebx
c00109cd:	e8 fc f5 ff ff       	call   c000ffce <VgaText::doANSI_SGR(int)>
c00109d2:	59                   	pop    ecx
c00109d3:	31 d2                	xor    edx,edx
c00109d5:	58                   	pop    eax
c00109d6:	31 c0                	xor    eax,eax
c00109d8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00109dc:	eb 09                	jmp    c00109e7 <VgaText::putchar(char)+0x9b>
c00109de:	6b c0 0a             	imul   eax,eax,0xa
c00109e1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00109e5:	88 ca                	mov    dl,cl
c00109e7:	46                   	inc    esi
c00109e8:	eb c8                	jmp    c00109b2 <VgaText::putchar(char)+0x66>
c00109ea:	84 d2                	test   dl,dl
c00109ec:	74 31                	je     c0010a1f <VgaText::putchar(char)+0xd3>
c00109ee:	50                   	push   eax
c00109ef:	53                   	push   ebx
c00109f0:	e8 d9 f5 ff ff       	call   c000ffce <VgaText::doANSI_SGR(int)>
c00109f5:	58                   	pop    eax
c00109f6:	5a                   	pop    edx
c00109f7:	eb 26                	jmp    c0010a1f <VgaText::putchar(char)+0xd3>
c00109f9:	3c 4a                	cmp    al,0x4a
c00109fb:	75 22                	jne    c0010a1f <VgaText::putchar(char)+0xd3>
c00109fd:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010a04:	75 19                	jne    c0010a1f <VgaText::putchar(char)+0xd3>
c0010a06:	83 ec 0c             	sub    esp,0xc
c0010a09:	53                   	push   ebx
c0010a0a:	e8 d9 fe ff ff       	call   c00108e8 <VgaText::clearScreen()>
c0010a0f:	83 c4 0c             	add    esp,0xc
c0010a12:	6a 00                	push   0x0
c0010a14:	6a 00                	push   0x0
c0010a16:	53                   	push   ebx
c0010a17:	e8 ba f7 ff ff       	call   c00101d6 <VgaText::setCursor(int, int)>
c0010a1c:	83 c4 10             	add    esp,0x10
c0010a1f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010a28:	eb 36                	jmp    c0010a60 <VgaText::putchar(char)+0x114>
c0010a2a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010a30:	83 fa 0e             	cmp    edx,0xe
c0010a33:	7f 2b                	jg     c0010a60 <VgaText::putchar(char)+0x114>
c0010a35:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a38:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010a3e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010a45:	eb 19                	jmp    c0010a60 <VgaText::putchar(char)+0x114>
c0010a47:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a4d:	0f be c0             	movsx  eax,al
c0010a50:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a56:	50                   	push   eax
c0010a57:	53                   	push   ebx
c0010a58:	e8 ab fa ff ff       	call   c0010508 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a5d:	83 c4 10             	add    esp,0x10
c0010a60:	83 c4 14             	add    esp,0x14
c0010a63:	5b                   	pop    ebx
c0010a64:	5e                   	pop    esi
c0010a65:	c3                   	ret    

c0010a66 <VgaText::puts(char const*)>:
c0010a66:	53                   	push   ebx
c0010a67:	83 ec 08             	sub    esp,0x8
c0010a6a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a6e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010a71:	84 c0                	test   al,al
c0010a73:	74 12                	je     c0010a87 <VgaText::puts(char const*)+0x21>
c0010a75:	43                   	inc    ebx
c0010a76:	51                   	push   ecx
c0010a77:	51                   	push   ecx
c0010a78:	50                   	push   eax
c0010a79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a7d:	e8 ca fe ff ff       	call   c001094c <VgaText::putchar(char)>
c0010a82:	83 c4 10             	add    esp,0x10
c0010a85:	eb e7                	jmp    c0010a6e <VgaText::puts(char const*)+0x8>
c0010a87:	83 c4 08             	add    esp,0x8
c0010a8a:	5b                   	pop    ebx
c0010a8b:	c3                   	ret    

c0010a8c <VgaText::putx(unsigned int)>:
c0010a8c:	57                   	push   edi
c0010a8d:	b9 11 00 00 00       	mov    ecx,0x11
c0010a92:	56                   	push   esi
c0010a93:	be 7a 93 03 c0       	mov    esi,0xc003937a
c0010a98:	53                   	push   ebx
c0010a99:	83 ec 20             	sub    esp,0x20
c0010a9c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010aa0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010aa4:	fc                   	cld    
c0010aa5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010aa7:	be 08 00 00 00       	mov    esi,0x8
c0010aac:	50                   	push   eax
c0010aad:	50                   	push   eax
c0010aae:	89 d8                	mov    eax,ebx
c0010ab0:	c1 e3 04             	shl    ebx,0x4
c0010ab3:	c1 e8 1c             	shr    eax,0x1c
c0010ab6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010abb:	50                   	push   eax
c0010abc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ac0:	e8 87 fe ff ff       	call   c001094c <VgaText::putchar(char)>
c0010ac5:	83 c4 10             	add    esp,0x10
c0010ac8:	4e                   	dec    esi
c0010ac9:	75 e1                	jne    c0010aac <VgaText::putx(unsigned int)+0x20>
c0010acb:	83 c4 20             	add    esp,0x20
c0010ace:	5b                   	pop    ebx
c0010acf:	5e                   	pop    esi
c0010ad0:	5f                   	pop    edi
c0010ad1:	c3                   	ret    

c0010ad2 <VgaText::VgaText(char const*)>:
c0010ad2:	57                   	push   edi
c0010ad3:	56                   	push   esi
c0010ad4:	53                   	push   ebx
c0010ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad9:	83 ec 08             	sub    esp,0x8
c0010adc:	6a 00                	push   0x0
c0010ade:	50                   	push   eax
c0010adf:	e8 b8 05 00 00       	call   c001109c <UnixFile::UnixFile(int)>
c0010ae4:	83 c4 10             	add    esp,0x10
c0010ae7:	ba e0 93 03 c0       	mov    edx,0xc00393e0
c0010aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af0:	89 10                	mov    DWORD PTR [eax],edx
c0010af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af6:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b04:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b12:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b28:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b36:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b44:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010b60:	bb 60 be 03 c0       	mov    ebx,0xc003be60
c0010b65:	b8 08 00 00 00       	mov    eax,0x8
c0010b6a:	fc                   	cld    
c0010b6b:	89 d7                	mov    edi,edx
c0010b6d:	89 de                	mov    esi,ebx
c0010b6f:	89 c1                	mov    ecx,eax
c0010b71:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b77:	05 1e 10 00 00       	add    eax,0x101e
c0010b7c:	83 ec 08             	sub    esp,0x8
c0010b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b83:	50                   	push   eax
c0010b84:	e8 3e fc fe ff       	call   c00007c7 <strcpy>
c0010b89:	83 c4 10             	add    esp,0x10
c0010b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b90:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9e:	83 c0 0c             	add    eax,0xc
c0010ba1:	83 ec 04             	sub    esp,0x4
c0010ba4:	68 00 0f 00 00       	push   0xf00
c0010ba9:	6a 00                	push   0x0
c0010bab:	50                   	push   eax
c0010bac:	e8 fa fa fe ff       	call   c00006ab <memset>
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	83 ec 04             	sub    esp,0x4
c0010bb7:	6a 00                	push   0x0
c0010bb9:	6a 07                	push   0x7
c0010bbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbf:	e8 c2 f4 ff ff       	call   c0010086 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010bc4:	83 c4 10             	add    esp,0x10
c0010bc7:	83 ec 08             	sub    esp,0x8
c0010bca:	6a 02                	push   0x2
c0010bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd0:	e8 49 fa ff ff       	call   c001061e <VgaText::setCursorHeight(int)>
c0010bd5:	83 c4 10             	add    esp,0x10
c0010bd8:	83 ec 04             	sub    esp,0x4
c0010bdb:	6a 00                	push   0x0
c0010bdd:	6a 00                	push   0x0
c0010bdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be3:	e8 ee f5 ff ff       	call   c00101d6 <VgaText::setCursor(int, int)>
c0010be8:	83 c4 10             	add    esp,0x10
c0010beb:	83 ec 08             	sub    esp,0x8
c0010bee:	6a 01                	push   0x1
c0010bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf4:	e8 8b f3 ff ff       	call   c000ff84 <VgaText::showCursor(bool)>
c0010bf9:	83 c4 10             	add    esp,0x10
c0010bfc:	83 ec 08             	sub    esp,0x8
c0010bff:	6a 01                	push   0x1
c0010c01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c05:	e8 8a f3 ff ff       	call   c000ff94 <VgaText::disableBlink(bool)>
c0010c0a:	83 c4 10             	add    esp,0x10
c0010c0d:	83 ec 0c             	sub    esp,0xc
c0010c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c14:	e8 cf fc ff ff       	call   c00108e8 <VgaText::clearScreen()>
c0010c19:	83 c4 10             	add    esp,0x10
c0010c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c20:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010c27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c2b:	05 9e 10 00 00       	add    eax,0x109e
c0010c30:	83 ec 04             	sub    esp,0x4
c0010c33:	68 96 00 00 00       	push   0x96
c0010c38:	6a 00                	push   0x0
c0010c3a:	50                   	push   eax
c0010c3b:	e8 6b fa fe ff       	call   c00006ab <memset>
c0010c40:	83 c4 10             	add    esp,0x10
c0010c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c47:	05 34 11 00 00       	add    eax,0x1134
c0010c4c:	83 ec 04             	sub    esp,0x4
c0010c4f:	68 2c 01 00 00       	push   0x12c
c0010c54:	6a 00                	push   0x0
c0010c56:	50                   	push   eax
c0010c57:	e8 4f fa fe ff       	call   c00006ab <memset>
c0010c5c:	83 c4 10             	add    esp,0x10
c0010c5f:	90                   	nop
c0010c60:	5b                   	pop    ebx
c0010c61:	5e                   	pop    esi
c0010c62:	5f                   	pop    edi
c0010c63:	c3                   	ret    

c0010c64 <VgaText::receiveKey(unsigned char)>:
c0010c64:	55                   	push   ebp
c0010c65:	57                   	push   edi
c0010c66:	56                   	push   esi
c0010c67:	53                   	push   ebx
c0010c68:	83 ec 1c             	sub    esp,0x1c
c0010c6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c6f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c73:	84 db                	test   bl,bl
c0010c75:	0f 84 c9 00 00 00    	je     c0010d44 <VgaText::receiveKey(unsigned char)+0xe0>
c0010c7b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010c81:	80 fb 08             	cmp    bl,0x8
c0010c84:	75 2c                	jne    c0010cb2 <VgaText::receiveKey(unsigned char)+0x4e>
c0010c86:	83 ec 0c             	sub    esp,0xc
c0010c89:	57                   	push   edi
c0010c8a:	e8 45 fa fe ff       	call   c00006d4 <strlen>
c0010c8f:	83 c4 10             	add    esp,0x10
c0010c92:	85 c0                	test   eax,eax
c0010c94:	74 41                	je     c0010cd7 <VgaText::receiveKey(unsigned char)+0x73>
c0010c96:	50                   	push   eax
c0010c97:	50                   	push   eax
c0010c98:	6a 08                	push   0x8
c0010c9a:	56                   	push   esi
c0010c9b:	e8 ac fc ff ff       	call   c001094c <VgaText::putchar(char)>
c0010ca0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ca3:	e8 2c fa fe ff       	call   c00006d4 <strlen>
c0010ca8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010cb0:	eb 22                	jmp    c0010cd4 <VgaText::receiveKey(unsigned char)+0x70>
c0010cb2:	0f be c3             	movsx  eax,bl
c0010cb5:	52                   	push   edx
c0010cb6:	52                   	push   edx
c0010cb7:	50                   	push   eax
c0010cb8:	56                   	push   esi
c0010cb9:	e8 8e fc ff ff       	call   c001094c <VgaText::putchar(char)>
c0010cbe:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010cc2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010cc7:	59                   	pop    ecx
c0010cc8:	5d                   	pop    ebp
c0010cc9:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ccd:	50                   	push   eax
c0010cce:	57                   	push   edi
c0010ccf:	e8 40 fc fe ff       	call   c0000914 <strcat>
c0010cd4:	83 c4 10             	add    esp,0x10
c0010cd7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010cde:	75 05                	jne    c0010ce5 <VgaText::receiveKey(unsigned char)+0x81>
c0010ce0:	80 fb 0a             	cmp    bl,0xa
c0010ce3:	75 53                	jne    c0010d38 <VgaText::receiveKey(unsigned char)+0xd4>
c0010ce5:	83 ec 0c             	sub    esp,0xc
c0010ce8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010cee:	53                   	push   ebx
c0010cef:	e8 e0 f9 fe ff       	call   c00006d4 <strlen>
c0010cf4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cf7:	89 c5                	mov    ebp,eax
c0010cf9:	e8 d6 f9 fe ff       	call   c00006d4 <strlen>
c0010cfe:	83 c4 10             	add    esp,0x10
c0010d01:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d05:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d0a:	76 10                	jbe    c0010d1c <VgaText::receiveKey(unsigned char)+0xb8>
c0010d0c:	83 ec 0c             	sub    esp,0xc
c0010d0f:	68 8b 93 03 c0       	push   0xc003938b
c0010d14:	e8 c5 c2 ff ff       	call   c000cfde <panic(char const*)>
c0010d19:	83 c4 10             	add    esp,0x10
c0010d1c:	50                   	push   eax
c0010d1d:	50                   	push   eax
c0010d1e:	57                   	push   edi
c0010d1f:	53                   	push   ebx
c0010d20:	e8 ef fb fe ff       	call   c0000914 <strcat>
c0010d25:	83 c4 0c             	add    esp,0xc
c0010d28:	68 96 00 00 00       	push   0x96
c0010d2d:	6a 00                	push   0x0
c0010d2f:	57                   	push   edi
c0010d30:	e8 76 f9 fe ff       	call   c00006ab <memset>
c0010d35:	83 c4 10             	add    esp,0x10
c0010d38:	83 ec 0c             	sub    esp,0xc
c0010d3b:	56                   	push   esi
c0010d3c:	e8 d5 f9 ff ff       	call   c0010716 <VgaText::doUpdate()>
c0010d41:	83 c4 10             	add    esp,0x10
c0010d44:	83 c4 1c             	add    esp,0x1c
c0010d47:	5b                   	pop    ebx
c0010d48:	5e                   	pop    esi
c0010d49:	5f                   	pop    edi
c0010d4a:	5d                   	pop    ebp
c0010d4b:	c3                   	ret    

c0010d4c <VgaText::write(unsigned long long, void*, int*)>:
c0010d4c:	55                   	push   ebp
c0010d4d:	57                   	push   edi
c0010d4e:	56                   	push   esi
c0010d4f:	53                   	push   ebx
c0010d50:	83 ec 0c             	sub    esp,0xc
c0010d53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d57:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d5b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d5f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010d66:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d69:	39 eb                	cmp    ebx,ebp
c0010d6b:	74 13                	je     c0010d80 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d6d:	43                   	inc    ebx
c0010d6e:	50                   	push   eax
c0010d6f:	50                   	push   eax
c0010d70:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010d74:	50                   	push   eax
c0010d75:	56                   	push   esi
c0010d76:	e8 d1 fb ff ff       	call   c001094c <VgaText::putchar(char)>
c0010d7b:	83 c4 10             	add    esp,0x10
c0010d7e:	eb e9                	jmp    c0010d69 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010d80:	83 ec 0c             	sub    esp,0xc
c0010d83:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010d8a:	56                   	push   esi
c0010d8b:	e8 86 f9 ff ff       	call   c0010716 <VgaText::doUpdate()>
c0010d90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010d94:	89 38                	mov    DWORD PTR [eax],edi
c0010d96:	83 c4 1c             	add    esp,0x1c
c0010d99:	31 c0                	xor    eax,eax
c0010d9b:	5b                   	pop    ebx
c0010d9c:	5e                   	pop    esi
c0010d9d:	5f                   	pop    edi
c0010d9e:	5d                   	pop    ebp
c0010d9f:	c3                   	ret    

c0010da0 <newTerminal(char*)>:
c0010da0:	83 ec 28             	sub    esp,0x28
c0010da3:	68 60 12 00 00       	push   0x1260
c0010da8:	e8 c3 16 00 00       	call   c0012470 <operator new(unsigned long)>
c0010dad:	5a                   	pop    edx
c0010dae:	59                   	pop    ecx
c0010daf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010db3:	50                   	push   eax
c0010db4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010db8:	e8 15 fd ff ff       	call   c0010ad2 <VgaText::VgaText(char const*)>
c0010dbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010dc1:	83 c4 2c             	add    esp,0x2c
c0010dc4:	c3                   	ret    
c0010dc5:	90                   	nop

c0010dc6 <TSS::TSS()>:
c0010dc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dd1:	90                   	nop
c0010dd2:	c3                   	ret    
c0010dd3:	90                   	nop

c0010dd4 <TSS::setESP(unsigned long)>:
c0010dd4:	55                   	push   ebp
c0010dd5:	89 e5                	mov    ebp,esp
c0010dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ddd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010de0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010de3:	90                   	nop
c0010de4:	5d                   	pop    ebp
c0010de5:	c3                   	ret    

c0010de6 <TSS::flush()>:
c0010de6:	55                   	push   ebp
c0010de7:	89 e5                	mov    ebp,esp
c0010de9:	83 ec 10             	sub    esp,0x10
c0010dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010def:	8b 00                	mov    eax,DWORD PTR [eax]
c0010df1:	83 c8 03             	or     eax,0x3
c0010df4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010df8:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010dfc:	66 89 d0             	mov    ax,dx
c0010dff:	0f 00 d8             	ltr    ax
c0010e02:	90                   	nop
c0010e03:	c9                   	leave  
c0010e04:	c3                   	ret    
c0010e05:	90                   	nop

c0010e06 <TSS::setup(unsigned long, unsigned long)>:
c0010e06:	55                   	push   ebp
c0010e07:	89 e5                	mov    ebp,esp
c0010e09:	53                   	push   ebx
c0010e0a:	83 ec 14             	sub    esp,0x14
c0010e0d:	83 ec 0c             	sub    esp,0xc
c0010e10:	6a 68                	push   0x68
c0010e12:	e8 a4 c6 ff ff       	call   c000d4bb <malloc>
c0010e17:	83 c4 10             	add    esp,0x10
c0010e1a:	89 c2                	mov    edx,eax
c0010e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e28:	83 ec 04             	sub    esp,0x4
c0010e2b:	6a 68                	push   0x68
c0010e2d:	6a 00                	push   0x0
c0010e2f:	50                   	push   eax
c0010e30:	e8 76 f8 fe ff       	call   c00006ab <memset>
c0010e35:	83 c4 10             	add    esp,0x10
c0010e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e3e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e4a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e56:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e59:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e62:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e6e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e86:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e92:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010e95:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ea1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eaa:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010eb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eb4:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010eb7:	e8 4d db 00 00       	call   c001ea09 <CPU::readCR3()>
c0010ebc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010ebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ec2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec5:	83 ec 08             	sub    esp,0x8
c0010ec8:	50                   	push   eax
c0010ec9:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010ecc:	50                   	push   eax
c0010ecd:	e8 a6 b8 ff ff       	call   c000c778 <GDTEntry::setBase(unsigned int)>
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	83 ec 08             	sub    esp,0x8
c0010ed8:	6a 68                	push   0x68
c0010eda:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010edd:	50                   	push   eax
c0010ede:	e8 b1 b8 ff ff       	call   c000c794 <GDTEntry::setLimit(unsigned int)>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010eea:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010eed:	83 e0 0f             	and    eax,0xf
c0010ef0:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010ef3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010ef6:	83 c8 40             	or     eax,0x40
c0010ef9:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010efc:	e8 a5 62 00 00       	call   c00171a6 <thisCPU()>
c0010f01:	05 78 01 00 00       	add    eax,0x178
c0010f06:	83 ec 04             	sub    esp,0x4
c0010f09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010f0c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f0f:	50                   	push   eax
c0010f10:	e8 b3 b8 ff ff       	call   c000c7c8 <GDT::addEntry(GDTEntry)>
c0010f15:	83 c4 10             	add    esp,0x10
c0010f18:	89 c2                	mov    edx,eax
c0010f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f1d:	89 10                	mov    DWORD PTR [eax],edx
c0010f1f:	e8 82 62 00 00       	call   c00171a6 <thisCPU()>
c0010f24:	05 78 01 00 00       	add    eax,0x178
c0010f29:	83 ec 0c             	sub    esp,0xc
c0010f2c:	50                   	push   eax
c0010f2d:	e8 da b8 ff ff       	call   c000c80c <GDT::flush()>
c0010f32:	83 c4 10             	add    esp,0x10
c0010f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f38:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f3a:	83 ec 08             	sub    esp,0x8
c0010f3d:	50                   	push   eax
c0010f3e:	68 f4 93 03 c0       	push   0xc00393f4
c0010f43:	e8 78 bf ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010f53:	c9                   	leave  
c0010f54:	c3                   	ret    
c0010f55:	90                   	nop

c0010f56 <ReservedFilename::isAtty()>:
c0010f56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f5a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f5d:	31 c0                	xor    eax,eax
c0010f5f:	83 fa 08             	cmp    edx,0x8
c0010f62:	74 06                	je     c0010f6a <ReservedFilename::isAtty()+0x14>
c0010f64:	83 fa 06             	cmp    edx,0x6
c0010f67:	0f 94 c0             	sete   al
c0010f6a:	c3                   	ret    
c0010f6b:	90                   	nop

c0010f6c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010f6c:	55                   	push   ebp
c0010f6d:	57                   	push   edi
c0010f6e:	56                   	push   esi
c0010f6f:	53                   	push   ebx
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f77:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010f7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f7e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f82:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010f86:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f8a:	83 f8 08             	cmp    eax,0x8
c0010f8d:	75 08                	jne    c0010f97 <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010f8f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f95:	eb 5c                	jmp    c0010ff3 <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010f97:	83 f8 06             	cmp    eax,0x6
c0010f9a:	75 3d                	jne    c0010fd9 <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010f9c:	83 ec 0c             	sub    esp,0xc
c0010f9f:	68 12 94 03 c0       	push   0xc0039412
c0010fa4:	e8 17 bf ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0010fa9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fb1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fb7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fb9:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010fbd:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010fc1:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010fc5:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010fc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010fcd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0010fd0:	83 c4 1c             	add    esp,0x1c
c0010fd3:	5b                   	pop    ebx
c0010fd4:	5e                   	pop    esi
c0010fd5:	5f                   	pop    edi
c0010fd6:	5d                   	pop    ebp
c0010fd7:	ff e0                	jmp    eax
c0010fd9:	89 c2                	mov    edx,eax
c0010fdb:	83 e2 fd             	and    edx,0xfffffffd
c0010fde:	83 fa 05             	cmp    edx,0x5
c0010fe1:	74 ac                	je     c0010f8f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010fe3:	8d 50 f5             	lea    edx,[eax-0xb]
c0010fe6:	83 fa 08             	cmp    edx,0x8
c0010fe9:	76 a4                	jbe    c0010f8f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010feb:	83 e8 15             	sub    eax,0x15
c0010fee:	83 f8 08             	cmp    eax,0x8
c0010ff1:	76 9c                	jbe    c0010f8f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010ff3:	83 c4 0c             	add    esp,0xc
c0010ff6:	31 c0                	xor    eax,eax
c0010ff8:	5b                   	pop    ebx
c0010ff9:	5e                   	pop    esi
c0010ffa:	5f                   	pop    edi
c0010ffb:	5d                   	pop    ebp
c0010ffc:	c3                   	ret    
c0010ffd:	90                   	nop

c0010ffe <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010ffe:	55                   	push   ebp
c0010fff:	57                   	push   edi
c0011000:	56                   	push   esi
c0011001:	53                   	push   ebx
c0011002:	83 ec 0c             	sub    esp,0xc
c0011005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011009:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001100d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011010:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011014:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0011018:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001101c:	83 f8 08             	cmp    eax,0x8
c001101f:	75 08                	jne    c0011029 <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c0011021:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011027:	eb 60                	jmp    c0011089 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0011029:	83 f8 06             	cmp    eax,0x6
c001102c:	75 3d                	jne    c001106b <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c001102e:	83 ec 0c             	sub    esp,0xc
c0011031:	68 1f 94 03 c0       	push   0xc003941f
c0011036:	e8 85 be ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001103b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011040:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011043:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011049:	8b 10                	mov    edx,DWORD PTR [eax]
c001104b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001104f:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0011053:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0011057:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c001105b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001105f:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0011062:	83 c4 1c             	add    esp,0x1c
c0011065:	5b                   	pop    ebx
c0011066:	5e                   	pop    esi
c0011067:	5f                   	pop    edi
c0011068:	5d                   	pop    ebp
c0011069:	ff e0                	jmp    eax
c001106b:	83 f8 05             	cmp    eax,0x5
c001106e:	75 04                	jne    c0011074 <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c0011070:	89 33                	mov    DWORD PTR [ebx],esi
c0011072:	eb 15                	jmp    c0011089 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0011074:	83 f8 07             	cmp    eax,0x7
c0011077:	74 a8                	je     c0011021 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0011079:	8d 50 f5             	lea    edx,[eax-0xb]
c001107c:	83 fa 08             	cmp    edx,0x8
c001107f:	76 a0                	jbe    c0011021 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0011081:	83 e8 15             	sub    eax,0x15
c0011084:	83 f8 08             	cmp    eax,0x8
c0011087:	76 98                	jbe    c0011021 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0011089:	83 c4 0c             	add    esp,0xc
c001108c:	31 c0                	xor    eax,eax
c001108e:	5b                   	pop    ebx
c001108f:	5e                   	pop    esi
c0011090:	5f                   	pop    edi
c0011091:	5d                   	pop    ebp
c0011092:	c3                   	ret    
c0011093:	90                   	nop

c0011094 <UnixFile::getFileDescriptor()>:
c0011094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001109b:	c3                   	ret    

c001109c <UnixFile::UnixFile(int)>:
c001109c:	83 ec 0c             	sub    esp,0xc
c001109f:	ba 84 94 03 c0       	mov    edx,0xc0039484
c00110a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a8:	89 10                	mov    DWORD PTR [eax],edx
c00110aa:	a1 80 ae 03 c0       	mov    eax,ds:0xc003ae80
c00110af:	8d 50 01             	lea    edx,[eax+0x1]
c00110b2:	89 15 80 ae 03 c0    	mov    DWORD PTR ds:0xc003ae80,edx
c00110b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00110bc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00110bf:	83 ec 08             	sub    esp,0x8
c00110c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110c6:	68 90 be 03 c0       	push   0xc003be90
c00110cb:	e8 b8 dc 00 00       	call   c001ed88 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110d0:	83 c4 10             	add    esp,0x10
c00110d3:	90                   	nop
c00110d4:	83 c4 0c             	add    esp,0xc
c00110d7:	c3                   	ret    

c00110d8 <ReservedFilename::ReservedFilename(int)>:
c00110d8:	83 ec 0c             	sub    esp,0xc
c00110db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110df:	83 ec 08             	sub    esp,0x8
c00110e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110e6:	50                   	push   eax
c00110e7:	e8 b0 ff ff ff       	call   c001109c <UnixFile::UnixFile(int)>
c00110ec:	83 c4 10             	add    esp,0x10
c00110ef:	ba a0 94 03 c0       	mov    edx,0xc00394a0
c00110f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f8:	89 10                	mov    DWORD PTR [eax],edx
c00110fa:	90                   	nop
c00110fb:	83 c4 0c             	add    esp,0xc
c00110fe:	c3                   	ret    
c00110ff:	90                   	nop

c0011100 <UnixFile::~UnixFile()>:
c0011100:	83 ec 1c             	sub    esp,0x1c
c0011103:	ba 84 94 03 c0       	mov    edx,0xc0039484
c0011108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001110c:	89 10                	mov    DWORD PTR [eax],edx
c001110e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011116:	83 ec 0c             	sub    esp,0xc
c0011119:	68 90 be 03 c0       	push   0xc003be90
c001111e:	e8 b3 db 00 00       	call   c001ecd6 <LinkedList<UnixFile>::getFirstElement()>
c0011123:	83 c4 10             	add    esp,0x10
c0011126:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001112a:	83 ec 0c             	sub    esp,0xc
c001112d:	68 90 be 03 c0       	push   0xc003be90
c0011132:	e8 a7 db 00 00       	call   c001ecde <LinkedList<UnixFile>::removeFirst()>
c0011137:	83 c4 10             	add    esp,0x10
c001113a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001113e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011142:	74 3d                	je     c0011181 <UnixFile::~UnixFile()+0x81>
c0011144:	83 ec 08             	sub    esp,0x8
c0011147:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001114b:	68 90 be 03 c0       	push   0xc003be90
c0011150:	e8 33 dc 00 00       	call   c001ed88 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011155:	83 c4 10             	add    esp,0x10
c0011158:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001115c:	8d 50 01             	lea    edx,[eax+0x1]
c001115f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011163:	3d 88 13 00 00       	cmp    eax,0x1388
c0011168:	0f 94 c0             	sete   al
c001116b:	84 c0                	test   al,al
c001116d:	74 a7                	je     c0011116 <UnixFile::~UnixFile()+0x16>
c001116f:	83 ec 0c             	sub    esp,0xc
c0011172:	68 5c 94 03 c0       	push   0xc003945c
c0011177:	e8 62 be ff ff       	call   c000cfde <panic(char const*)>
c001117c:	83 c4 10             	add    esp,0x10
c001117f:	eb 95                	jmp    c0011116 <UnixFile::~UnixFile()+0x16>
c0011181:	90                   	nop
c0011182:	83 c4 1c             	add    esp,0x1c
c0011185:	c3                   	ret    

c0011186 <UnixFile::~UnixFile()>:
c0011186:	83 ec 0c             	sub    esp,0xc
c0011189:	83 ec 0c             	sub    esp,0xc
c001118c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011190:	e8 6b ff ff ff       	call   c0011100 <UnixFile::~UnixFile()>
c0011195:	83 c4 10             	add    esp,0x10
c0011198:	83 ec 08             	sub    esp,0x8
c001119b:	6a 0c                	push   0xc
c001119d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111a1:	e8 d9 12 00 00       	call   c001247f <operator delete(void*, unsigned long)>
c00111a6:	83 c4 10             	add    esp,0x10
c00111a9:	83 c4 0c             	add    esp,0xc
c00111ac:	c3                   	ret    
c00111ad:	90                   	nop

c00111ae <ReservedFilename::~ReservedFilename()>:
c00111ae:	83 ec 0c             	sub    esp,0xc
c00111b1:	ba a0 94 03 c0       	mov    edx,0xc00394a0
c00111b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ba:	89 10                	mov    DWORD PTR [eax],edx
c00111bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c0:	83 ec 0c             	sub    esp,0xc
c00111c3:	50                   	push   eax
c00111c4:	e8 37 ff ff ff       	call   c0011100 <UnixFile::~UnixFile()>
c00111c9:	83 c4 10             	add    esp,0x10
c00111cc:	90                   	nop
c00111cd:	83 c4 0c             	add    esp,0xc
c00111d0:	c3                   	ret    
c00111d1:	90                   	nop

c00111d2 <ReservedFilename::~ReservedFilename()>:
c00111d2:	83 ec 0c             	sub    esp,0xc
c00111d5:	83 ec 0c             	sub    esp,0xc
c00111d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111dc:	e8 cd ff ff ff       	call   c00111ae <ReservedFilename::~ReservedFilename()>
c00111e1:	83 c4 10             	add    esp,0x10
c00111e4:	83 ec 08             	sub    esp,0x8
c00111e7:	6a 0c                	push   0xc
c00111e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ed:	e8 8d 12 00 00       	call   c001247f <operator delete(void*, unsigned long)>
c00111f2:	83 c4 10             	add    esp,0x10
c00111f5:	83 c4 0c             	add    esp,0xc
c00111f8:	c3                   	ret    

c00111f9 <getFromFileDescriptor(int)>:
c00111f9:	83 ec 18             	sub    esp,0x18
c00111fc:	68 90 be 03 c0       	push   0xc003be90
c0011201:	e8 d0 da 00 00       	call   c001ecd6 <LinkedList<UnixFile>::getFirstElement()>
c0011206:	83 c4 10             	add    esp,0x10
c0011209:	85 c0                	test   eax,eax
c001120b:	74 18                	je     c0011225 <getFromFileDescriptor(int)+0x2c>
c001120d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011211:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c0011214:	74 0f                	je     c0011225 <getFromFileDescriptor(int)+0x2c>
c0011216:	52                   	push   edx
c0011217:	52                   	push   edx
c0011218:	50                   	push   eax
c0011219:	68 90 be 03 c0       	push   0xc003be90
c001121e:	e8 5d db 00 00       	call   c001ed80 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011223:	eb e1                	jmp    c0011206 <getFromFileDescriptor(int)+0xd>
c0011225:	83 c4 0c             	add    esp,0xc
c0011228:	c3                   	ret    

c0011229 <__static_initialization_and_destruction_0(int, int)>:
c0011229:	83 ec 0c             	sub    esp,0xc
c001122c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011231:	75 34                	jne    c0011267 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011233:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001123b:	75 2a                	jne    c0011267 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001123d:	83 ec 0c             	sub    esp,0xc
c0011240:	68 90 be 03 c0       	push   0xc003be90
c0011245:	e8 34 da 00 00       	call   c001ec7e <LinkedList<UnixFile>::LinkedList()>
c001124a:	83 c4 10             	add    esp,0x10
c001124d:	83 ec 04             	sub    esp,0x4
c0011250:	68 0c ae 03 c0       	push   0xc003ae0c
c0011255:	68 90 be 03 c0       	push   0xc003be90
c001125a:	68 7c ec 01 c0       	push   0xc001ec7c
c001125f:	e8 97 11 00 00       	call   c00123fb <__cxa_atexit>
c0011264:	83 c4 10             	add    esp,0x10
c0011267:	90                   	nop
c0011268:	83 c4 0c             	add    esp,0xc
c001126b:	c3                   	ret    

c001126c <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001126c:	83 ec 0c             	sub    esp,0xc
c001126f:	83 ec 08             	sub    esp,0x8
c0011272:	68 ff ff 00 00       	push   0xffff
c0011277:	6a 01                	push   0x1
c0011279:	e8 ab ff ff ff       	call   c0011229 <__static_initialization_and_destruction_0(int, int)>
c001127e:	83 c4 10             	add    esp,0x10
c0011281:	83 c4 0c             	add    esp,0xc
c0011284:	c3                   	ret    
c0011285:	90                   	nop

c0011286 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011286:	53                   	push   ebx
c0011287:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001128b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001128f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011295:	89 c8                	mov    eax,ecx
c0011297:	d1 e8                	shr    eax,1
c0011299:	03 05 88 ae 03 c0    	add    eax,DWORD PTR ds:0xc003ae88
c001129f:	83 e1 01             	and    ecx,0x1
c00112a2:	8a 10                	mov    dl,BYTE PTR [eax]
c00112a4:	75 09                	jne    c00112af <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00112a6:	83 e2 f0             	and    edx,0xfffffff0
c00112a9:	09 da                	or     edx,ebx
c00112ab:	88 10                	mov    BYTE PTR [eax],dl
c00112ad:	5b                   	pop    ebx
c00112ae:	c3                   	ret    
c00112af:	c1 e3 04             	shl    ebx,0x4
c00112b2:	83 e2 0f             	and    edx,0xf
c00112b5:	09 da                	or     edx,ebx
c00112b7:	88 10                	mov    BYTE PTR [eax],dl
c00112b9:	5b                   	pop    ebx
c00112ba:	c3                   	ret    

c00112bb <Virt::getPageState(unsigned long)>:
c00112bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112bf:	8b 0d 88 ae 03 c0    	mov    ecx,DWORD PTR ds:0xc003ae88
c00112c5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00112cb:	89 d0                	mov    eax,edx
c00112cd:	d1 e8                	shr    eax,1
c00112cf:	83 e2 01             	and    edx,0x1
c00112d2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00112d5:	75 04                	jne    c00112db <Virt::getPageState(unsigned long)+0x20>
c00112d7:	83 e0 0f             	and    eax,0xf
c00112da:	c3                   	ret    
c00112db:	c0 e8 04             	shr    al,0x4
c00112de:	c3                   	ret    

c00112df <Virt::allocateKernelVirtualPages(int)>:
c00112df:	55                   	push   ebp
c00112e0:	31 ed                	xor    ebp,ebp
c00112e2:	57                   	push   edi
c00112e3:	56                   	push   esi
c00112e4:	53                   	push   ebx
c00112e5:	31 db                	xor    ebx,ebx
c00112e7:	83 ec 1c             	sub    esp,0x1c
c00112ea:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112ee:	8b 3d 84 ae 03 c0    	mov    edi,DWORD PTR ds:0xc003ae84
c00112f4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00112f9:	57                   	push   edi
c00112fa:	e8 bc ff ff ff       	call   c00112bb <Virt::getPageState(unsigned long)>
c00112ff:	5a                   	pop    edx
c0011300:	84 c0                	test   al,al
c0011302:	75 3a                	jne    c001133e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011304:	85 db                	test   ebx,ebx
c0011306:	75 02                	jne    c001130a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011308:	89 fd                	mov    ebp,edi
c001130a:	43                   	inc    ebx
c001130b:	39 f3                	cmp    ebx,esi
c001130d:	74 5a                	je     c0011369 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001130f:	47                   	inc    edi
c0011310:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011316:	76 31                	jbe    c0011349 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011318:	c7 05 84 ae 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc003ae84,0xc8000
c0011322:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011327:	75 28                	jne    c0011351 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011329:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001132e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011333:	57                   	push   edi
c0011334:	e8 82 ff ff ff       	call   c00112bb <Virt::getPageState(unsigned long)>
c0011339:	5a                   	pop    edx
c001133a:	84 c0                	test   al,al
c001133c:	74 c6                	je     c0011304 <Virt::allocateKernelVirtualPages(int)+0x25>
c001133e:	31 db                	xor    ebx,ebx
c0011340:	47                   	inc    edi
c0011341:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011347:	77 cf                	ja     c0011318 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011349:	89 3d 84 ae 03 c0    	mov    DWORD PTR ds:0xc003ae84,edi
c001134f:	eb a8                	jmp    c00112f9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011351:	83 ec 0c             	sub    esp,0xc
c0011354:	68 b4 94 03 c0       	push   0xc00394b4
c0011359:	e8 80 bc ff ff       	call   c000cfde <panic(char const*)>
c001135e:	8b 3d 84 ae 03 c0    	mov    edi,DWORD PTR ds:0xc003ae84
c0011364:	83 c4 10             	add    esp,0x10
c0011367:	eb 90                	jmp    c00112f9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011369:	89 2d 84 ae 03 c0    	mov    DWORD PTR ds:0xc003ae84,ebp
c001136f:	4b                   	dec    ebx
c0011370:	74 5f                	je     c00113d1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011372:	85 f6                	test   esi,esi
c0011374:	74 3d                	je     c00113b3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011376:	89 e8                	mov    eax,ebp
c0011378:	31 db                	xor    ebx,ebx
c001137a:	8d 7e ff             	lea    edi,[esi-0x1]
c001137d:	eb 14                	jmp    c0011393 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001137f:	6a 01                	push   0x1
c0011381:	43                   	inc    ebx
c0011382:	50                   	push   eax
c0011383:	e8 fe fe ff ff       	call   c0011286 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011388:	58                   	pop    eax
c0011389:	39 f3                	cmp    ebx,esi
c001138b:	5a                   	pop    edx
c001138c:	74 25                	je     c00113b3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001138e:	a1 84 ae 03 c0       	mov    eax,ds:0xc003ae84
c0011393:	8d 50 01             	lea    edx,[eax+0x1]
c0011396:	85 db                	test   ebx,ebx
c0011398:	89 15 84 ae 03 c0    	mov    DWORD PTR ds:0xc003ae84,edx
c001139e:	74 20                	je     c00113c0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00113a0:	39 df                	cmp    edi,ebx
c00113a2:	75 db                	jne    c001137f <Virt::allocateKernelVirtualPages(int)+0xa0>
c00113a4:	6a 03                	push   0x3
c00113a6:	43                   	inc    ebx
c00113a7:	50                   	push   eax
c00113a8:	e8 d9 fe ff ff       	call   c0011286 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ad:	59                   	pop    ecx
c00113ae:	39 f3                	cmp    ebx,esi
c00113b0:	58                   	pop    eax
c00113b1:	75 db                	jne    c001138e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00113b3:	83 c4 1c             	add    esp,0x1c
c00113b6:	89 e8                	mov    eax,ebp
c00113b8:	5b                   	pop    ebx
c00113b9:	c1 e0 0c             	shl    eax,0xc
c00113bc:	5e                   	pop    esi
c00113bd:	5f                   	pop    edi
c00113be:	5d                   	pop    ebp
c00113bf:	c3                   	ret    
c00113c0:	6a 02                	push   0x2
c00113c2:	bb 01 00 00 00       	mov    ebx,0x1
c00113c7:	50                   	push   eax
c00113c8:	e8 b9 fe ff ff       	call   c0011286 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113cd:	58                   	pop    eax
c00113ce:	5a                   	pop    edx
c00113cf:	eb bd                	jmp    c001138e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00113d1:	6a 04                	push   0x4
c00113d3:	8d 45 01             	lea    eax,[ebp+0x1]
c00113d6:	55                   	push   ebp
c00113d7:	a3 84 ae 03 c0       	mov    ds:0xc003ae84,eax
c00113dc:	e8 a5 fe ff ff       	call   c0011286 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e1:	59                   	pop    ecx
c00113e2:	89 e8                	mov    eax,ebp
c00113e4:	5b                   	pop    ebx
c00113e5:	c1 e0 0c             	shl    eax,0xc
c00113e8:	83 c4 1c             	add    esp,0x1c
c00113eb:	5b                   	pop    ebx
c00113ec:	5e                   	pop    esi
c00113ed:	5f                   	pop    edi
c00113ee:	5d                   	pop    ebp
c00113ef:	c3                   	ret    

c00113f0 <Virt::virtualMemorySetup()>:
c00113f0:	53                   	push   ebx
c00113f1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113f6:	83 ec 08             	sub    esp,0x8
c00113f9:	6a 0f                	push   0xf
c00113fb:	53                   	push   ebx
c00113fc:	43                   	inc    ebx
c00113fd:	e8 84 fe ff ff       	call   c0011286 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011402:	59                   	pop    ecx
c0011403:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011409:	58                   	pop    eax
c001140a:	75 ed                	jne    c00113f9 <Virt::virtualMemorySetup()+0x9>
c001140c:	83 ec 08             	sub    esp,0x8
c001140f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011414:	68 00 00 00 c8       	push   0xc8000000
c0011419:	68 5f 96 03 c0       	push   0xc003965f
c001141e:	e8 9d ba ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011423:	58                   	pop    eax
c0011424:	5a                   	pop    edx
c0011425:	68 00 f0 ff ef       	push   0xeffff000
c001142a:	68 73 96 03 c0       	push   0xc0039673
c001142f:	e8 8c ba ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011434:	83 c4 10             	add    esp,0x10
c0011437:	83 ec 08             	sub    esp,0x8
c001143a:	6a 00                	push   0x0
c001143c:	53                   	push   ebx
c001143d:	43                   	inc    ebx
c001143e:	e8 43 fe ff ff       	call   c0011286 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011443:	83 c4 10             	add    esp,0x10
c0011446:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001144c:	75 e9                	jne    c0011437 <Virt::virtualMemorySetup()+0x47>
c001144e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011453:	83 ec 08             	sub    esp,0x8
c0011456:	6a 0f                	push   0xf
c0011458:	53                   	push   ebx
c0011459:	43                   	inc    ebx
c001145a:	e8 27 fe ff ff       	call   c0011286 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001145f:	83 c4 10             	add    esp,0x10
c0011462:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011468:	75 e9                	jne    c0011453 <Virt::virtualMemorySetup()+0x63>
c001146a:	83 c4 08             	add    esp,0x8
c001146d:	5b                   	pop    ebx
c001146e:	c3                   	ret    

c001146f <Virt::getAKernelVAS()>:
c001146f:	a1 9c be 03 c0       	mov    eax,ds:0xc003be9c
c0011474:	c3                   	ret    

c0011475 <Virt::setupPageSwapping(int)>:
c0011475:	57                   	push   edi
c0011476:	56                   	push   esi
c0011477:	53                   	push   ebx
c0011478:	83 ec 1c             	sub    esp,0x1c
c001147b:	68 14 01 00 00       	push   0x114
c0011480:	e8 eb 0f 00 00       	call   c0012470 <operator new(unsigned long)>
c0011485:	83 c4 0c             	add    esp,0xc
c0011488:	89 c6                	mov    esi,eax
c001148a:	ff 35 3c bc 03 c0    	push   DWORD PTR ds:0xc003bc3c
c0011490:	68 87 96 03 c0       	push   0xc0039687
c0011495:	50                   	push   eax
c0011496:	e8 03 14 00 00       	call   c001289e <File::File(char const*, Process*)>
c001149b:	89 34 24             	mov    DWORD PTR [esp],esi
c001149e:	e8 d7 15 00 00       	call   c0012a7a <File::unlink()>
c00114a3:	58                   	pop    eax
c00114a4:	5a                   	pop    edx
c00114a5:	6a 12                	push   0x12
c00114a7:	56                   	push   esi
c00114a8:	e8 55 14 00 00       	call   c0012902 <File::open(FileOpenMode)>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	85 c0                	test   eax,eax
c00114b2:	0f 85 bf 00 00 00    	jne    c0011577 <Virt::setupPageSwapping(int)+0x102>
c00114b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114c4:	c1 e3 08             	shl    ebx,0x8
c00114c7:	83 ec 0c             	sub    esp,0xc
c00114ca:	68 00 00 01 00       	push   0x10000
c00114cf:	e8 e7 bf ff ff       	call   c000d4bb <malloc>
c00114d4:	83 c4 0c             	add    esp,0xc
c00114d7:	89 c7                	mov    edi,eax
c00114d9:	68 00 00 01 00       	push   0x10000
c00114de:	6a 00                	push   0x0
c00114e0:	50                   	push   eax
c00114e1:	e8 c5 f1 fe ff       	call   c00006ab <memset>
c00114e6:	83 c4 10             	add    esp,0x10
c00114e9:	85 db                	test   ebx,ebx
c00114eb:	79 03                	jns    c00114f0 <Virt::setupPageSwapping(int)+0x7b>
c00114ed:	83 c3 0f             	add    ebx,0xf
c00114f0:	c1 fb 04             	sar    ebx,0x4
c00114f3:	4b                   	dec    ebx
c00114f4:	83 fb ff             	cmp    ebx,0xffffffff
c00114f7:	74 4b                	je     c0011544 <Virt::setupPageSwapping(int)+0xcf>
c00114f9:	83 ec 0c             	sub    esp,0xc
c00114fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00114fe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011502:	52                   	push   edx
c0011503:	57                   	push   edi
c0011504:	6a 00                	push   0x0
c0011506:	68 00 00 01 00       	push   0x10000
c001150b:	56                   	push   esi
c001150c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001150f:	83 c4 20             	add    esp,0x20
c0011512:	85 c0                	test   eax,eax
c0011514:	75 4e                	jne    c0011564 <Virt::setupPageSwapping(int)+0xef>
c0011516:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001151a:	3d 00 00 01 00       	cmp    eax,0x10000
c001151f:	74 d2                	je     c00114f3 <Virt::setupPageSwapping(int)+0x7e>
c0011521:	83 ec 08             	sub    esp,0x8
c0011524:	4b                   	dec    ebx
c0011525:	50                   	push   eax
c0011526:	68 da 96 03 c0       	push   0xc00396da
c001152b:	e8 90 b9 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011530:	c7 04 24 e3 96 03 c0 	mov    DWORD PTR [esp],0xc00396e3
c0011537:	e8 a2 ba ff ff       	call   c000cfde <panic(char const*)>
c001153c:	83 c4 10             	add    esp,0x10
c001153f:	83 fb ff             	cmp    ebx,0xffffffff
c0011542:	75 b5                	jne    c00114f9 <Virt::setupPageSwapping(int)+0x84>
c0011544:	83 ec 0c             	sub    esp,0xc
c0011547:	56                   	push   esi
c0011548:	e8 13 14 00 00       	call   c0012960 <File::close()>
c001154d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011550:	e8 86 bf ff ff       	call   c000d4db <rfree>
c0011555:	89 34 24             	mov    DWORD PTR [esp],esi
c0011558:	8b 06                	mov    eax,DWORD PTR [esi]
c001155a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001155d:	83 c4 20             	add    esp,0x20
c0011560:	5b                   	pop    ebx
c0011561:	5e                   	pop    esi
c0011562:	5f                   	pop    edi
c0011563:	c3                   	ret    
c0011564:	83 ec 08             	sub    esp,0x8
c0011567:	50                   	push   eax
c0011568:	68 c2 96 03 c0       	push   0xc00396c2
c001156d:	e8 4e b9 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011572:	83 c4 10             	add    esp,0x10
c0011575:	eb 9f                	jmp    c0011516 <Virt::setupPageSwapping(int)+0xa1>
c0011577:	83 ec 08             	sub    esp,0x8
c001157a:	50                   	push   eax
c001157b:	68 9e 96 03 c0       	push   0xc003969e
c0011580:	e8 3b b9 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011585:	c7 04 24 a7 96 03 c0 	mov    DWORD PTR [esp],0xc00396a7
c001158c:	e8 4d ba ff ff       	call   c000cfde <panic(char const*)>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	e9 1f ff ff ff       	jmp    c00114b8 <Virt::setupPageSwapping(int)+0x43>
c0011599:	90                   	nop

c001159a <VAS::VAS()>:
c001159a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001159e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115a9:	a3 9c be 03 c0       	mov    ds:0xc003be9c,eax
c00115ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b2:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ba:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c1:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c00115c8:	90                   	nop
c00115c9:	c3                   	ret    

c00115ca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115ce:	89 c2                	mov    edx,eax
c00115d0:	c1 e8 0a             	shr    eax,0xa
c00115d3:	c1 ea 16             	shr    edx,0x16
c00115d6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115db:	19 c9                	sbb    ecx,ecx
c00115dd:	c1 e2 0c             	shl    edx,0xc
c00115e0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115e6:	25 fc 0f 00 00       	and    eax,0xffc
c00115eb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115f2:	01 d0                	add    eax,edx
c00115f4:	c3                   	ret    
c00115f5:	90                   	nop

c00115f6 <VAS::getPageTableEntry(unsigned long)>:
c00115f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115fa:	89 ca                	mov    edx,ecx
c00115fc:	c1 e9 0a             	shr    ecx,0xa
c00115ff:	c1 ea 16             	shr    edx,0x16
c0011602:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011608:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001160e:	c1 e0 0c             	shl    eax,0xc
c0011611:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011614:	c3                   	ret    

c0011615 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011615:	57                   	push   edi
c0011616:	56                   	push   esi
c0011617:	be 01 00 00 00       	mov    esi,0x1
c001161c:	53                   	push   ebx
c001161d:	83 ec 10             	sub    esp,0x10
c0011620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011624:	c1 eb 0c             	shr    ebx,0xc
c0011627:	eb 3f                	jmp    c0011668 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011629:	e8 41 fe ff ff       	call   c001146f <Virt::getAKernelVAS()>
c001162e:	83 ec 08             	sub    esp,0x8
c0011631:	57                   	push   edi
c0011632:	50                   	push   eax
c0011633:	e8 be ff ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c0011638:	83 c4 10             	add    esp,0x10
c001163b:	8b 00                	mov    eax,DWORD PTR [eax]
c001163d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011641:	f6 c4 04             	test   ah,0x4
c0011644:	75 5f                	jne    c00116a5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011646:	80 fa 04             	cmp    dl,0x4
c0011649:	74 78                	je     c00116c3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001164b:	80 fa 02             	cmp    dl,0x2
c001164e:	0f 84 88 00 00 00    	je     c00116dc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011654:	80 fa 03             	cmp    dl,0x3
c0011657:	0f 84 ad 00 00 00    	je     c001170a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001165d:	fe ca                	dec    dl
c001165f:	0f 84 92 00 00 00    	je     c00116f7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011665:	43                   	inc    ebx
c0011666:	31 f6                	xor    esi,esi
c0011668:	53                   	push   ebx
c0011669:	e8 4d fc ff ff       	call   c00112bb <Virt::getPageState(unsigned long)>
c001166e:	5f                   	pop    edi
c001166f:	89 df                	mov    edi,ebx
c0011671:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011675:	c1 e7 0c             	shl    edi,0xc
c0011678:	84 c0                	test   al,al
c001167a:	75 ad                	jne    c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001167c:	83 ec 0c             	sub    esp,0xc
c001167f:	68 e9 96 03 c0       	push   0xc00396e9
c0011684:	e8 55 b9 ff ff       	call   c000cfde <panic(char const*)>
c0011689:	e8 e1 fd ff ff       	call   c001146f <Virt::getAKernelVAS()>
c001168e:	5a                   	pop    edx
c001168f:	59                   	pop    ecx
c0011690:	57                   	push   edi
c0011691:	50                   	push   eax
c0011692:	e8 5f ff ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c0011697:	83 c4 10             	add    esp,0x10
c001169a:	8b 00                	mov    eax,DWORD PTR [eax]
c001169c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116a0:	f6 c4 04             	test   ah,0x4
c00116a3:	74 c0                	je     c0011665 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116a5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116ae:	83 ec 0c             	sub    esp,0xc
c00116b1:	50                   	push   eax
c00116b2:	e8 24 c3 ff ff       	call   c000d9db <Phys::freePage(unsigned long)>
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116be:	80 fa 04             	cmp    dl,0x4
c00116c1:	75 88                	jne    c001164b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116c3:	89 f0                	mov    eax,esi
c00116c5:	84 c0                	test   al,al
c00116c7:	75 47                	jne    c0011710 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116c9:	c7 44 24 20 d4 94 03 c0 	mov    DWORD PTR [esp+0x20],0xc00394d4
c00116d1:	83 c4 10             	add    esp,0x10
c00116d4:	5b                   	pop    ebx
c00116d5:	5e                   	pop    esi
c00116d6:	5f                   	pop    edi
c00116d7:	e9 02 b9 ff ff       	jmp    c000cfde <panic(char const*)>
c00116dc:	89 f0                	mov    eax,esi
c00116de:	84 c0                	test   al,al
c00116e0:	75 15                	jne    c00116f7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116e2:	83 ec 0c             	sub    esp,0xc
c00116e5:	68 05 97 03 c0       	push   0xc0039705
c00116ea:	e8 ef b8 ff ff       	call   c000cfde <panic(char const*)>
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	e9 6e ff ff ff       	jmp    c0011665 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f7:	83 ec 08             	sub    esp,0x8
c00116fa:	6a 00                	push   0x0
c00116fc:	53                   	push   ebx
c00116fd:	e8 84 fb ff ff       	call   c0011286 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	e9 5b ff ff ff       	jmp    c0011665 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001170a:	89 f0                	mov    eax,esi
c001170c:	84 c0                	test   al,al
c001170e:	75 15                	jne    c0011725 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011710:	83 ec 08             	sub    esp,0x8
c0011713:	6a 00                	push   0x0
c0011715:	53                   	push   ebx
c0011716:	e8 6b fb ff ff       	call   c0011286 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001171b:	83 c4 10             	add    esp,0x10
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	5b                   	pop    ebx
c0011722:	5e                   	pop    esi
c0011723:	5f                   	pop    edi
c0011724:	c3                   	ret    
c0011725:	c7 44 24 20 21 97 03 c0 	mov    DWORD PTR [esp+0x20],0xc0039721
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	5b                   	pop    ebx
c0011731:	5e                   	pop    esi
c0011732:	5f                   	pop    edi
c0011733:	e9 a6 b8 ff ff       	jmp    c000cfde <panic(char const*)>

c0011738 <VAS::freeAllocatedPages(unsigned long)>:
c0011738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001173c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011740:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011744:	74 09                	je     c001174f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011746:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001174a:	e9 c6 fe ff ff       	jmp    c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c001174f:	c7 44 24 04 f8 94 03 c0 	mov    DWORD PTR [esp+0x4],0xc00394f8
c0011757:	e9 64 b7 ff ff       	jmp    c000cec0 <kprintf(char const*, ...)>

c001175c <VAS::virtualToPhysical(unsigned long)>:
c001175c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011760:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011764:	e8 8d fe ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c0011769:	5a                   	pop    edx
c001176a:	8b 00                	mov    eax,DWORD PTR [eax]
c001176c:	59                   	pop    ecx
c001176d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011772:	c3                   	ret    
c0011773:	90                   	nop

c0011774 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001177c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011780:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011787:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001178a:	19 c0                	sbb    eax,eax
c001178c:	83 ca 03             	or     edx,0x3
c001178f:	83 e0 fc             	and    eax,0xfffffffc
c0011792:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011799:	e8 6b d2 00 00       	call   c001ea09 <CPU::readCR3()>
c001179e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117a2:	83 c4 0c             	add    esp,0xc
c00117a5:	e9 83 d2 00 00       	jmp    c001ea2d <CPU::writeCR3(unsigned long)>

c00117aa <VAS::~VAS()>:
c00117aa:	83 ec 2c             	sub    esp,0x2c
c00117ad:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117b5:	e8 a8 cb ff ff       	call   c000e362 <lockScheduler()>
c00117ba:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00117c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117c4:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00117ca:	83 ec 04             	sub    esp,0x4
c00117cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117d1:	6a 01                	push   0x1
c00117d3:	50                   	push   eax
c00117d4:	e8 9b ff ff ff       	call   c0011774 <VAS::mapOtherVASIn(bool, VAS*)>
c00117d9:	83 c4 10             	add    esp,0x10
c00117dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117e4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00117ec:	0f 8f d7 00 00 00    	jg     c00118c9 <VAS::~VAS()+0x11f>
c00117f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00117f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00117fd:	c1 e2 02             	shl    edx,0x2
c0011800:	01 d0                	add    eax,edx
c0011802:	8b 00                	mov    eax,DWORD PTR [eax]
c0011804:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001180c:	83 e0 01             	and    eax,0x1
c001180f:	0f 84 ab 00 00 00    	je     c00118c0 <VAS::~VAS()+0x116>
c0011815:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001181d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011825:	7f 75                	jg     c001189c <VAS::~VAS()+0xf2>
c0011827:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001182b:	c1 e0 0a             	shl    eax,0xa
c001182e:	89 c2                	mov    edx,eax
c0011830:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011834:	01 d0                	add    eax,edx
c0011836:	c1 e0 0c             	shl    eax,0xc
c0011839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001183d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011842:	8b 00                	mov    eax,DWORD PTR [eax]
c0011844:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011847:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001184d:	83 ec 04             	sub    esp,0x4
c0011850:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011854:	6a 01                	push   0x1
c0011856:	50                   	push   eax
c0011857:	e8 6e fd ff ff       	call   c00115ca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011867:	8b 00                	mov    eax,DWORD PTR [eax]
c0011869:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001186d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011871:	25 01 04 00 00       	and    eax,0x401
c0011876:	3d 01 04 00 00       	cmp    eax,0x401
c001187b:	75 19                	jne    c0011896 <VAS::~VAS()+0xec>
c001187d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011881:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011886:	83 ec 0c             	sub    esp,0xc
c0011889:	50                   	push   eax
c001188a:	e8 4c c1 ff ff       	call   c000d9db <Phys::freePage(unsigned long)>
c001188f:	83 c4 10             	add    esp,0x10
c0011892:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011896:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001189a:	eb 81                	jmp    c001181d <VAS::~VAS()+0x73>
c001189c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a0:	25 00 04 00 00       	and    eax,0x400
c00118a5:	74 19                	je     c00118c0 <VAS::~VAS()+0x116>
c00118a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	50                   	push   eax
c00118b4:	e8 22 c1 ff ff       	call   c000d9db <Phys::freePage(unsigned long)>
c00118b9:	83 c4 10             	add    esp,0x10
c00118bc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118c0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118c4:	e9 1b ff ff ff       	jmp    c00117e4 <VAS::~VAS()+0x3a>
c00118c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	50                   	push   eax
c00118d4:	e8 3c fd ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c00118d9:	83 c4 10             	add    esp,0x10
c00118dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118e3:	83 ec 0c             	sub    esp,0xc
c00118e6:	50                   	push   eax
c00118e7:	e8 ef c0 ff ff       	call   c000d9db <Phys::freePage(unsigned long)>
c00118ec:	83 c4 10             	add    esp,0x10
c00118ef:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118f7:	c1 e0 02             	shl    eax,0x2
c00118fa:	83 ec 08             	sub    esp,0x8
c00118fd:	50                   	push   eax
c00118fe:	68 1c 95 03 c0       	push   0xc003951c
c0011903:	e8 b8 b5 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011908:	83 c4 10             	add    esp,0x10
c001190b:	e8 54 ca ff ff       	call   c000e364 <unlockScheduler()>
c0011910:	90                   	nop
c0011911:	83 c4 2c             	add    esp,0x2c
c0011914:	c3                   	ret    
c0011915:	90                   	nop

c0011916 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011916:	55                   	push   ebp
c0011917:	57                   	push   edi
c0011918:	56                   	push   esi
c0011919:	53                   	push   ebx
c001191a:	83 ec 1c             	sub    esp,0x1c
c001191d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011921:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011925:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001192b:	77 08                	ja     c0011935 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001192d:	0f 20 d8             	mov    eax,cr3
c0011930:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011933:	75 47                	jne    c001197c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011935:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011939:	09 d8                	or     eax,ebx
c001193b:	a9 ff 0f 00 00       	test   eax,0xfff
c0011940:	75 57                	jne    c0011999 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011942:	89 de                	mov    esi,ebx
c0011944:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011947:	c1 ee 16             	shr    esi,0x16
c001194a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011951:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011955:	74 54                	je     c00119ab <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011957:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001195b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011961:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011965:	c1 e6 0c             	shl    esi,0xc
c0011968:	c1 eb 0a             	shr    ebx,0xa
c001196b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011971:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011974:	83 c4 1c             	add    esp,0x1c
c0011977:	5b                   	pop    ebx
c0011978:	5e                   	pop    esi
c0011979:	5f                   	pop    edi
c001197a:	5d                   	pop    ebp
c001197b:	c3                   	ret    
c001197c:	83 ec 0c             	sub    esp,0xc
c001197f:	68 3c 95 03 c0       	push   0xc003953c
c0011984:	e8 37 b5 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011990:	09 d8                	or     eax,ebx
c0011992:	a9 ff 0f 00 00       	test   eax,0xfff
c0011997:	74 a9                	je     c0011942 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011999:	83 ec 0c             	sub    esp,0xc
c001199c:	68 a4 95 03 c0       	push   0xc00395a4
c00119a1:	e8 38 b6 ff ff       	call   c000cfde <panic(char const*)>
c00119a6:	83 c4 10             	add    esp,0x10
c00119a9:	eb 97                	jmp    c0011942 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119af:	e8 b1 c0 ff ff       	call   c000da65 <Phys::allocatePage()>
c00119b4:	89 c5                	mov    ebp,eax
c00119b6:	e8 b4 fa ff ff       	call   c001146f <Virt::getAKernelVAS()>
c00119bb:	83 ec 0c             	sub    esp,0xc
c00119be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119c2:	6a 01                	push   0x1
c00119c4:	e8 16 f9 ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c00119c9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00119d0:	6a 01                	push   0x1
c00119d2:	50                   	push   eax
c00119d3:	55                   	push   ebp
c00119d4:	81 cd 07 04 00 00    	or     ebp,0x407
c00119da:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00119de:	51                   	push   ecx
c00119df:	e8 1e 02 00 00       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119e4:	83 c4 1c             	add    esp,0x1c
c00119e7:	68 00 10 00 00       	push   0x1000
c00119ec:	6a 00                	push   0x0
c00119ee:	50                   	push   eax
c00119ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00119f3:	e8 b3 ec fe ff       	call   c00006ab <memset>
c00119f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00119fc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00119ff:	e8 11 fc ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a08:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a0b:	83 c4 10             	add    esp,0x10
c0011a0e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a11:	e9 41 ff ff ff       	jmp    c0011957 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a16 <VAS::allocatePages(int, int)>:
c0011a16:	55                   	push   ebp
c0011a17:	57                   	push   edi
c0011a18:	56                   	push   esi
c0011a19:	53                   	push   ebx
c0011a1a:	83 ec 1c             	sub    esp,0x1c
c0011a1d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a21:	e8 80 57 00 00       	call   c00171a6 <thisCPU()>
c0011a26:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a2c:	83 e0 01             	and    eax,0x1
c0011a2f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a33:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a37:	0f 85 d7 00 00 00    	jne    c0011b14 <VAS::allocatePages(int, int)+0xfe>
c0011a3d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a44:	85 c0                	test   eax,eax
c0011a46:	0f 84 ac 00 00 00    	je     c0011af8 <VAS::allocatePages(int, int)+0xe2>
c0011a4c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a54:	c1 e6 0c             	shl    esi,0xc
c0011a57:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a5b:	85 c0                	test   eax,eax
c0011a5d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a60:	7e 33                	jle    c0011a95 <VAS::allocatePages(int, int)+0x7f>
c0011a62:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011a66:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a6a:	81 cd 00 04 00 00    	or     ebp,0x400
c0011a70:	e8 f0 bf ff ff       	call   c000da65 <Phys::allocatePage()>
c0011a75:	55                   	push   ebp
c0011a76:	53                   	push   ebx
c0011a77:	50                   	push   eax
c0011a78:	57                   	push   edi
c0011a79:	e8 98 fe ff ff       	call   c0011916 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a7e:	83 c4 10             	add    esp,0x10
c0011a81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a86:	74 03                	je     c0011a8b <VAS::allocatePages(int, int)+0x75>
c0011a88:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011a8b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011a91:	39 de                	cmp    esi,ebx
c0011a93:	75 db                	jne    c0011a70 <VAS::allocatePages(int, int)+0x5a>
c0011a95:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a9a:	74 3f                	je     c0011adb <VAS::allocatePages(int, int)+0xc5>
c0011a9c:	c1 ee 0a             	shr    esi,0xa
c0011a9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aa3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011aa9:	c1 eb 0a             	shr    ebx,0xa
c0011aac:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011ab2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ab8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011abe:	39 f3                	cmp    ebx,esi
c0011ac0:	77 0d                	ja     c0011acf <VAS::allocatePages(int, int)+0xb9>
c0011ac2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ac5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011acb:	39 de                	cmp    esi,ebx
c0011acd:	73 f3                	jae    c0011ac2 <VAS::allocatePages(int, int)+0xac>
c0011acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ad3:	83 c4 1c             	add    esp,0x1c
c0011ad6:	5b                   	pop    ebx
c0011ad7:	5e                   	pop    esi
c0011ad8:	5f                   	pop    edi
c0011ad9:	5d                   	pop    ebp
c0011ada:	c3                   	ret    
c0011adb:	e8 29 cf 00 00       	call   c001ea09 <CPU::readCR3()>
c0011ae0:	83 ec 0c             	sub    esp,0xc
c0011ae3:	50                   	push   eax
c0011ae4:	e8 44 cf 00 00       	call   c001ea2d <CPU::writeCR3(unsigned long)>
c0011ae9:	83 c4 10             	add    esp,0x10
c0011aec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af0:	83 c4 1c             	add    esp,0x1c
c0011af3:	5b                   	pop    ebx
c0011af4:	5e                   	pop    esi
c0011af5:	5f                   	pop    edi
c0011af6:	5d                   	pop    ebp
c0011af7:	c3                   	ret    
c0011af8:	83 ec 0c             	sub    esp,0xc
c0011afb:	68 c8 95 03 c0       	push   0xc00395c8
c0011b00:	e8 d9 b4 ff ff       	call   c000cfde <panic(char const*)>
c0011b05:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b0c:	83 c4 10             	add    esp,0x10
c0011b0f:	e9 38 ff ff ff       	jmp    c0011a4c <VAS::allocatePages(int, int)+0x36>
c0011b14:	83 ec 0c             	sub    esp,0xc
c0011b17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b1b:	e8 bf f7 ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c0011b20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b24:	83 c4 10             	add    esp,0x10
c0011b27:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b2c:	0f 87 94 00 00 00    	ja     c0011bc6 <VAS::allocatePages(int, int)+0x1b0>
c0011b32:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b36:	85 d2                	test   edx,edx
c0011b38:	7e 3c                	jle    c0011b76 <VAS::allocatePages(int, int)+0x160>
c0011b3a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b3e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b46:	c1 e5 0c             	shl    ebp,0xc
c0011b49:	81 ce 00 04 00 00    	or     esi,0x400
c0011b4f:	01 dd                	add    ebp,ebx
c0011b51:	e8 0f bf ff ff       	call   c000da65 <Phys::allocatePage()>
c0011b56:	56                   	push   esi
c0011b57:	53                   	push   ebx
c0011b58:	50                   	push   eax
c0011b59:	57                   	push   edi
c0011b5a:	e8 b7 fd ff ff       	call   c0011916 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b5f:	83 c4 10             	add    esp,0x10
c0011b62:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b67:	74 03                	je     c0011b6c <VAS::allocatePages(int, int)+0x156>
c0011b69:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b6c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b72:	39 dd                	cmp    ebp,ebx
c0011b74:	75 db                	jne    c0011b51 <VAS::allocatePages(int, int)+0x13b>
c0011b76:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b7b:	0f 84 5a ff ff ff    	je     c0011adb <VAS::allocatePages(int, int)+0xc5>
c0011b81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b89:	89 d3                	mov    ebx,edx
c0011b8b:	c1 e0 0c             	shl    eax,0xc
c0011b8e:	c1 eb 0a             	shr    ebx,0xa
c0011b91:	01 d0                	add    eax,edx
c0011b93:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b99:	c1 e8 0a             	shr    eax,0xa
c0011b9c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ba2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ba7:	2d 00 00 40 00       	sub    eax,0x400000
c0011bac:	39 c3                	cmp    ebx,eax
c0011bae:	0f 87 1b ff ff ff    	ja     c0011acf <VAS::allocatePages(int, int)+0xb9>
c0011bb4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bb7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bbd:	39 d8                	cmp    eax,ebx
c0011bbf:	73 f3                	jae    c0011bb4 <VAS::allocatePages(int, int)+0x19e>
c0011bc1:	e9 09 ff ff ff       	jmp    c0011acf <VAS::allocatePages(int, int)+0xb9>
c0011bc6:	e8 db 55 00 00       	call   c00171a6 <thisCPU()>
c0011bcb:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011bd2:	0f 84 5a ff ff ff    	je     c0011b32 <VAS::allocatePages(int, int)+0x11c>
c0011bd8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011be0:	e9 4d ff ff ff       	jmp    c0011b32 <VAS::allocatePages(int, int)+0x11c>
c0011be5:	90                   	nop

c0011be6 <VAS::setCPUSpecific(unsigned long)>:
c0011be6:	83 ec 0c             	sub    esp,0xc
c0011be9:	6a 05                	push   0x5
c0011beb:	68 00 00 40 c2       	push   0xc2400000
c0011bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bf8:	e8 19 fd ff ff       	call   c0011916 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bfd:	83 c4 1c             	add    esp,0x1c
c0011c00:	c3                   	ret    
c0011c01:	90                   	nop

c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c02:	55                   	push   ebp
c0011c03:	57                   	push   edi
c0011c04:	56                   	push   esi
c0011c05:	53                   	push   ebx
c0011c06:	83 ec 1c             	sub    esp,0x1c
c0011c09:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c0d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c11:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c15:	e8 8c 55 00 00       	call   c00171a6 <thisCPU()>
c0011c1a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c20:	83 e0 01             	and    eax,0x1
c0011c23:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c2b:	85 c0                	test   eax,eax
c0011c2d:	7e 39                	jle    c0011c68 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c33:	89 f3                	mov    ebx,esi
c0011c35:	c1 e0 0c             	shl    eax,0xc
c0011c38:	01 f0                	add    eax,esi
c0011c3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c3e:	55                   	push   ebp
c0011c3f:	53                   	push   ebx
c0011c40:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c44:	29 f0                	sub    eax,esi
c0011c46:	01 d8                	add    eax,ebx
c0011c48:	50                   	push   eax
c0011c49:	57                   	push   edi
c0011c4a:	e8 c7 fc ff ff       	call   c0011916 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c4f:	83 c4 10             	add    esp,0x10
c0011c52:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c57:	74 03                	je     c0011c5c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c59:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c5c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c62:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011c66:	75 d6                	jne    c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011c68:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c6d:	74 42                	je     c0011cb1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011c6f:	89 f3                	mov    ebx,esi
c0011c71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c75:	c1 eb 0a             	shr    ebx,0xa
c0011c78:	c1 e0 0c             	shl    eax,0xc
c0011c7b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c81:	01 f0                	add    eax,esi
c0011c83:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c89:	c1 e8 0a             	shr    eax,0xa
c0011c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c91:	2d 00 00 40 00       	sub    eax,0x400000
c0011c96:	39 c3                	cmp    ebx,eax
c0011c98:	77 0d                	ja     c0011ca7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011c9a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c9d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ca3:	39 d8                	cmp    eax,ebx
c0011ca5:	73 f3                	jae    c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011ca7:	83 c4 1c             	add    esp,0x1c
c0011caa:	89 f0                	mov    eax,esi
c0011cac:	5b                   	pop    ebx
c0011cad:	5e                   	pop    esi
c0011cae:	5f                   	pop    edi
c0011caf:	5d                   	pop    ebp
c0011cb0:	c3                   	ret    
c0011cb1:	e8 53 cd 00 00       	call   c001ea09 <CPU::readCR3()>
c0011cb6:	83 ec 0c             	sub    esp,0xc
c0011cb9:	50                   	push   eax
c0011cba:	e8 6e cd 00 00       	call   c001ea2d <CPU::writeCR3(unsigned long)>
c0011cbf:	89 f0                	mov    eax,esi
c0011cc1:	83 c4 10             	add    esp,0x10
c0011cc4:	83 c4 1c             	add    esp,0x1c
c0011cc7:	5b                   	pop    ebx
c0011cc8:	5e                   	pop    esi
c0011cc9:	5f                   	pop    edi
c0011cca:	5d                   	pop    ebp
c0011ccb:	c3                   	ret    

c0011ccc <VAS::VAS(VAS*)>:
c0011ccc:	53                   	push   ebx
c0011ccd:	83 ec 38             	sub    esp,0x38
c0011cd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cdb:	e8 a9 c6 ff ff       	call   c000e389 <lockStuff()>
c0011ce0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011ce4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011ce7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ceb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011cee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011cf2:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0011cf5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cf9:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011cfc:	e8 64 bd ff ff       	call   c000da65 <Phys::allocatePage()>
c0011d01:	89 c2                	mov    edx,eax
c0011d03:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d07:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011d0a:	e8 60 f7 ff ff       	call   c001146f <Virt::getAKernelVAS()>
c0011d0f:	89 c3                	mov    ebx,eax
c0011d11:	83 ec 0c             	sub    esp,0xc
c0011d14:	6a 01                	push   0x1
c0011d16:	e8 c4 f5 ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c0011d1b:	83 c4 10             	add    esp,0x10
c0011d1e:	89 c2                	mov    edx,eax
c0011d20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	6a 03                	push   0x3
c0011d2c:	6a 01                	push   0x1
c0011d2e:	52                   	push   edx
c0011d2f:	50                   	push   eax
c0011d30:	53                   	push   ebx
c0011d31:	e8 cc fe ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d36:	83 c4 20             	add    esp,0x20
c0011d39:	89 c2                	mov    edx,eax
c0011d3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d3f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011d42:	83 ec 04             	sub    esp,0x4
c0011d45:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011d49:	6a 01                	push   0x1
c0011d4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011d4f:	e8 20 fa ff ff       	call   c0011774 <VAS::mapOtherVASIn(bool, VAS*)>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	83 ec 0c             	sub    esp,0xc
c0011d5a:	6a 01                	push   0x1
c0011d5c:	e8 7e f5 ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c0011d61:	83 c4 10             	add    esp,0x10
c0011d64:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011d68:	83 ec 0c             	sub    esp,0xc
c0011d6b:	6a 01                	push   0x1
c0011d6d:	e8 6d f5 ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c0011d72:	83 c4 10             	add    esp,0x10
c0011d75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d79:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011d81:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011d89:	0f 8f 5e 02 00 00    	jg     c0011fed <VAS::VAS(VAS*)+0x321>
c0011d8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d94:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d99:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011da2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011da6:	c1 e2 02             	shl    edx,0x2
c0011da9:	01 d0                	add    eax,edx
c0011dab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011db1:	83 ec 08             	sub    esp,0x8
c0011db4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011db8:	68 3b 97 03 c0       	push   0xc003973b
c0011dbd:	e8 fe b0 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011dc2:	83 c4 10             	add    esp,0x10
c0011dc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011dc9:	25 01 04 00 00       	and    eax,0x401
c0011dce:	3d 01 04 00 00       	cmp    eax,0x401
c0011dd3:	0f 85 e5 01 00 00    	jne    c0011fbe <VAS::VAS(VAS*)+0x2f2>
c0011dd9:	83 ec 0c             	sub    esp,0xc
c0011ddc:	68 4c 97 03 c0       	push   0xc003974c
c0011de1:	e8 da b0 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	e8 77 bc ff ff       	call   c000da65 <Phys::allocatePage()>
c0011dee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011df2:	83 ec 08             	sub    esp,0x8
c0011df5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011df9:	68 62 97 03 c0       	push   0xc0039762
c0011dfe:	e8 bd b0 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011e03:	83 c4 10             	add    esp,0x10
c0011e06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e0a:	25 ff 0f 00 00       	and    eax,0xfff
c0011e0f:	89 c1                	mov    ecx,eax
c0011e11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e15:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e18:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e1c:	c1 e2 02             	shl    edx,0x2
c0011e1f:	01 c2                	add    edx,eax
c0011e21:	89 c8                	mov    eax,ecx
c0011e23:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011e27:	89 02                	mov    DWORD PTR [edx],eax
c0011e29:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011e31:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011e39:	0f 8f a5 01 00 00    	jg     c0011fe4 <VAS::VAS(VAS*)+0x318>
c0011e3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e43:	c1 e0 0a             	shl    eax,0xa
c0011e46:	89 c2                	mov    edx,eax
c0011e48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e4c:	01 d0                	add    eax,edx
c0011e4e:	c1 e0 0c             	shl    eax,0xc
c0011e51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e55:	83 ec 08             	sub    esp,0x8
c0011e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e60:	e8 91 f7 ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c0011e65:	83 c4 10             	add    esp,0x10
c0011e68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e6e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e75:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e78:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e7e:	83 ec 04             	sub    esp,0x4
c0011e81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e85:	6a 01                	push   0x1
c0011e87:	50                   	push   eax
c0011e88:	e8 3d f7 ff ff       	call   c00115ca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011e8d:	83 c4 10             	add    esp,0x10
c0011e90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e94:	83 ec 04             	sub    esp,0x4
c0011e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e9f:	68 f4 95 03 c0       	push   0xc00395f4
c0011ea4:	e8 17 b0 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011ea9:	83 c4 10             	add    esp,0x10
c0011eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb0:	25 01 04 00 00       	and    eax,0x401
c0011eb5:	3d 01 04 00 00       	cmp    eax,0x401
c0011eba:	0f 85 db 00 00 00    	jne    c0011f9b <VAS::VAS(VAS*)+0x2cf>
c0011ec0:	83 ec 0c             	sub    esp,0xc
c0011ec3:	68 71 97 03 c0       	push   0xc0039771
c0011ec8:	e8 f3 af ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011ecd:	83 c4 10             	add    esp,0x10
c0011ed0:	e8 90 bb ff ff       	call   c000da65 <Phys::allocatePage()>
c0011ed5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ed9:	83 ec 08             	sub    esp,0x8
c0011edc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011ee0:	68 80 97 03 c0       	push   0xc0039780
c0011ee5:	e8 d6 af ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ef1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ef6:	83 ec 08             	sub    esp,0x8
c0011ef9:	50                   	push   eax
c0011efa:	68 94 97 03 c0       	push   0xc0039794
c0011eff:	e8 bc af ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011f04:	83 c4 10             	add    esp,0x10
c0011f07:	e8 63 f5 ff ff       	call   c001146f <Virt::getAKernelVAS()>
c0011f0c:	83 ec 0c             	sub    esp,0xc
c0011f0f:	6a 03                	push   0x3
c0011f11:	6a 01                	push   0x1
c0011f13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011f17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011f1b:	50                   	push   eax
c0011f1c:	e8 e1 fc ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f21:	83 c4 20             	add    esp,0x20
c0011f24:	e8 46 f5 ff ff       	call   c001146f <Virt::getAKernelVAS()>
c0011f29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011f2d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f33:	83 ec 0c             	sub    esp,0xc
c0011f36:	6a 03                	push   0x3
c0011f38:	6a 01                	push   0x1
c0011f3a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f3e:	52                   	push   edx
c0011f3f:	50                   	push   eax
c0011f40:	e8 bd fc ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f45:	83 c4 20             	add    esp,0x20
c0011f48:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f50:	83 ec 04             	sub    esp,0x4
c0011f53:	68 00 10 00 00       	push   0x1000
c0011f58:	52                   	push   edx
c0011f59:	50                   	push   eax
c0011f5a:	e8 d5 e6 fe ff       	call   c0000634 <memcpy>
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f66:	25 ff 0f 00 00       	and    eax,0xfff
c0011f6b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011f6f:	89 c2                	mov    edx,eax
c0011f71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f75:	89 10                	mov    DWORD PTR [eax],edx
c0011f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f7b:	25 ff 0f 00 00       	and    eax,0xfff
c0011f80:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011f84:	83 ec 04             	sub    esp,0x4
c0011f87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f8b:	50                   	push   eax
c0011f8c:	68 18 96 03 c0       	push   0xc0039618
c0011f91:	e8 2a af ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011f96:	83 c4 10             	add    esp,0x10
c0011f99:	eb 1a                	jmp    c0011fb5 <VAS::VAS(VAS*)+0x2e9>
c0011f9b:	83 ec 0c             	sub    esp,0xc
c0011f9e:	68 a8 97 03 c0       	push   0xc00397a8
c0011fa3:	e8 18 af ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011fa8:	83 c4 10             	add    esp,0x10
c0011fab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011faf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011fb3:	89 10                	mov    DWORD PTR [eax],edx
c0011fb5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011fb9:	e9 73 fe ff ff       	jmp    c0011e31 <VAS::VAS(VAS*)+0x165>
c0011fbe:	83 ec 0c             	sub    esp,0xc
c0011fc1:	68 ac 97 03 c0       	push   0xc00397ac
c0011fc6:	e8 f5 ae ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0011fcb:	83 c4 10             	add    esp,0x10
c0011fce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011fd2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011fd5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011fd9:	c1 e2 02             	shl    edx,0x2
c0011fdc:	01 c2                	add    edx,eax
c0011fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fe2:	89 02                	mov    DWORD PTR [edx],eax
c0011fe4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011fe8:	e9 94 fd ff ff       	jmp    c0011d81 <VAS::VAS(VAS*)+0xb5>
c0011fed:	83 ec 0c             	sub    esp,0xc
c0011ff0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ff4:	e8 1c f6 ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ff9:	83 c4 10             	add    esp,0x10
c0011ffc:	83 ec 0c             	sub    esp,0xc
c0011fff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012003:	e8 0d f6 ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c0012008:	83 c4 10             	add    esp,0x10
c001200b:	e8 0b c7 ff ff       	call   c000e71b <unlockStuff()>
c0012010:	90                   	nop
c0012011:	83 c4 38             	add    esp,0x38
c0012014:	5b                   	pop    ebx
c0012015:	c3                   	ret    

c0012016 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012016:	55                   	push   ebp
c0012017:	57                   	push   edi
c0012018:	56                   	push   esi
c0012019:	53                   	push   ebx
c001201a:	83 ec 1c             	sub    esp,0x1c
c001201d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012021:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012025:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012029:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001202d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012032:	75 4a                	jne    c001207e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012034:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012038:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001203b:	c1 eb 16             	shr    ebx,0x16
c001203e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012045:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012049:	74 4d                	je     c0012098 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001204b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001204f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012053:	c1 e8 0a             	shr    eax,0xa
c0012056:	80 fa 01             	cmp    dl,0x1
c0012059:	19 d2                	sbb    edx,edx
c001205b:	c1 e3 0c             	shl    ebx,0xc
c001205e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012062:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012068:	25 fc 0f 00 00       	and    eax,0xffc
c001206d:	01 d8                	add    eax,ebx
c001206f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012076:	83 c4 1c             	add    esp,0x1c
c0012079:	5b                   	pop    ebx
c001207a:	5e                   	pop    esi
c001207b:	5f                   	pop    edi
c001207c:	5d                   	pop    ebp
c001207d:	c3                   	ret    
c001207e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012082:	83 ec 0c             	sub    esp,0xc
c0012085:	68 3c 96 03 c0       	push   0xc003963c
c001208a:	e8 4f af ff ff       	call   c000cfde <panic(char const*)>
c001208f:	83 c4 10             	add    esp,0x10
c0012092:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012096:	eb 9c                	jmp    c0012034 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012098:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001209c:	e8 c4 b9 ff ff       	call   c000da65 <Phys::allocatePage()>
c00120a1:	89 c5                	mov    ebp,eax
c00120a3:	e8 c7 f3 ff ff       	call   c001146f <Virt::getAKernelVAS()>
c00120a8:	83 ec 0c             	sub    esp,0xc
c00120ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120af:	6a 01                	push   0x1
c00120b1:	e8 29 f2 ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c00120b6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00120bd:	6a 01                	push   0x1
c00120bf:	50                   	push   eax
c00120c0:	55                   	push   ebp
c00120c1:	81 cd 07 04 00 00    	or     ebp,0x407
c00120c7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00120cb:	51                   	push   ecx
c00120cc:	e8 31 fb ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120d1:	83 c4 1c             	add    esp,0x1c
c00120d4:	68 00 10 00 00       	push   0x1000
c00120d9:	6a 00                	push   0x0
c00120db:	50                   	push   eax
c00120dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120e0:	e8 c6 e5 fe ff       	call   c00006ab <memset>
c00120e5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00120e9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00120ec:	e8 24 f5 ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c00120f1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120f4:	83 c4 10             	add    esp,0x10
c00120f7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00120fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120fe:	e9 48 ff ff ff       	jmp    c001204b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012103:	90                   	nop

c0012104 <VAS::VAS(bool)>:
c0012104:	53                   	push   ebx
c0012105:	83 ec 28             	sub    esp,0x28
c0012108:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001210c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012110:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012114:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001211b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001211f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012123:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012126:	e8 3a b9 ff ff       	call   c000da65 <Phys::allocatePage()>
c001212b:	89 c2                	mov    edx,eax
c001212d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012131:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012134:	e8 36 f3 ff ff       	call   c001146f <Virt::getAKernelVAS()>
c0012139:	89 c3                	mov    ebx,eax
c001213b:	83 ec 0c             	sub    esp,0xc
c001213e:	6a 01                	push   0x1
c0012140:	e8 9a f1 ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c0012145:	83 c4 10             	add    esp,0x10
c0012148:	89 c2                	mov    edx,eax
c001214a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001214e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012151:	83 ec 0c             	sub    esp,0xc
c0012154:	6a 03                	push   0x3
c0012156:	6a 01                	push   0x1
c0012158:	52                   	push   edx
c0012159:	50                   	push   eax
c001215a:	53                   	push   ebx
c001215b:	e8 a2 fa ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012160:	83 c4 20             	add    esp,0x20
c0012163:	89 c2                	mov    edx,eax
c0012165:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012169:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001216c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012174:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001217c:	7f 1c                	jg     c001219a <VAS::VAS(bool)+0x96>
c001217e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012182:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012185:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012189:	c1 e2 02             	shl    edx,0x2
c001218c:	01 d0                	add    eax,edx
c001218e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012194:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012198:	eb da                	jmp    c0012174 <VAS::VAS(bool)+0x70>
c001219a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00121a2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00121aa:	7f 71                	jg     c001221d <VAS::VAS(bool)+0x119>
c00121ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121b0:	2d 00 02 00 00       	sub    eax,0x200
c00121b5:	c1 e0 0c             	shl    eax,0xc
c00121b8:	83 c8 03             	or     eax,0x3
c00121bb:	89 c3                	mov    ebx,eax
c00121bd:	e8 e4 4f 00 00       	call   c00171a6 <thisCPU()>
c00121c2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00121c8:	83 e0 10             	and    eax,0x10
c00121cb:	84 c0                	test   al,al
c00121cd:	74 07                	je     c00121d6 <VAS::VAS(bool)+0xd2>
c00121cf:	b8 00 01 00 00       	mov    eax,0x100
c00121d4:	eb 05                	jmp    c00121db <VAS::VAS(bool)+0xd7>
c00121d6:	b8 00 00 00 00       	mov    eax,0x0
c00121db:	09 d8                	or     eax,ebx
c00121dd:	89 c1                	mov    ecx,eax
c00121df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121e6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121ea:	c1 e2 02             	shl    edx,0x2
c00121ed:	01 d0                	add    eax,edx
c00121ef:	89 ca                	mov    edx,ecx
c00121f1:	89 10                	mov    DWORD PTR [eax],edx
c00121f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121f7:	2d 40 03 00 00       	sub    eax,0x340
c00121fc:	83 f8 7f             	cmp    eax,0x7f
c00121ff:	77 16                	ja     c0012217 <VAS::VAS(bool)+0x113>
c0012201:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012205:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012208:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001220c:	c1 e2 02             	shl    edx,0x2
c001220f:	01 d0                	add    eax,edx
c0012211:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012217:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001221b:	eb 85                	jmp    c00121a2 <VAS::VAS(bool)+0x9e>
c001221d:	e8 84 4f 00 00       	call   c00171a6 <thisCPU()>
c0012222:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012228:	83 e0 10             	and    eax,0x10
c001222b:	84 c0                	test   al,al
c001222d:	74 07                	je     c0012236 <VAS::VAS(bool)+0x132>
c001222f:	b8 03 41 00 00       	mov    eax,0x4103
c0012234:	eb 05                	jmp    c001223b <VAS::VAS(bool)+0x137>
c0012236:	b8 03 40 00 00       	mov    eax,0x4003
c001223b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001223f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012242:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012248:	89 02                	mov    DWORD PTR [edx],eax
c001224a:	e8 57 4f 00 00       	call   c00171a6 <thisCPU()>
c001224f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012255:	83 ec 08             	sub    esp,0x8
c0012258:	50                   	push   eax
c0012259:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001225d:	e8 84 f9 ff ff       	call   c0011be6 <VAS::setCPUSpecific(unsigned long)>
c0012262:	83 c4 10             	add    esp,0x10
c0012265:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012269:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c001226c:	e8 35 4f 00 00       	call   c00171a6 <thisCPU()>
c0012271:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012277:	83 e0 10             	and    eax,0x10
c001227a:	84 c0                	test   al,al
c001227c:	74 07                	je     c0012285 <VAS::VAS(bool)+0x181>
c001227e:	b8 00 01 00 00       	mov    eax,0x100
c0012283:	eb 05                	jmp    c001228a <VAS::VAS(bool)+0x186>
c0012285:	b8 00 00 00 00       	mov    eax,0x0
c001228a:	09 d8                	or     eax,ebx
c001228c:	89 c2                	mov    edx,eax
c001228e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012292:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012295:	05 fc 0f 00 00       	add    eax,0xffc
c001229a:	83 ca 03             	or     edx,0x3
c001229d:	89 10                	mov    DWORD PTR [eax],edx
c001229f:	e8 02 4f 00 00       	call   c00171a6 <thisCPU()>
c00122a4:	83 ec 0c             	sub    esp,0xc
c00122a7:	50                   	push   eax
c00122a8:	e8 af 17 00 00       	call   c0013a5c <Device::getName()>
c00122ad:	83 c4 10             	add    esp,0x10
c00122b0:	83 ec 08             	sub    esp,0x8
c00122b3:	68 bc 97 03 c0       	push   0xc00397bc
c00122b8:	50                   	push   eax
c00122b9:	e8 8f e5 fe ff       	call   c000084d <strcmp>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	85 c0                	test   eax,eax
c00122c3:	0f 94 c0             	sete   al
c00122c6:	84 c0                	test   al,al
c00122c8:	74 64                	je     c001232e <VAS::VAS(bool)+0x22a>
c00122ca:	e8 76 c0 ff ff       	call   c000e345 <disableIRQs()>
c00122cf:	e8 d2 4e 00 00       	call   c00171a6 <thisCPU()>
c00122d4:	05 7c 09 00 00       	add    eax,0x97c
c00122d9:	83 ec 0c             	sub    esp,0xc
c00122dc:	50                   	push   eax
c00122dd:	e8 32 a7 ff ff       	call   c000ca14 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00122e2:	83 c4 10             	add    esp,0x10
c00122e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ea:	89 c3                	mov    ebx,eax
c00122ec:	e8 b5 4e 00 00       	call   c00171a6 <thisCPU()>
c00122f1:	05 7c 09 00 00       	add    eax,0x97c
c00122f6:	83 ec 0c             	sub    esp,0xc
c00122f9:	50                   	push   eax
c00122fa:	e8 15 a7 ff ff       	call   c000ca14 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00122ff:	83 c4 10             	add    esp,0x10
c0012302:	83 ec 08             	sub    esp,0x8
c0012305:	50                   	push   eax
c0012306:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001230a:	e8 e7 f2 ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c001230f:	83 c4 10             	add    esp,0x10
c0012312:	8b 00                	mov    eax,DWORD PTR [eax]
c0012314:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012319:	6a 11                	push   0x11
c001231b:	53                   	push   ebx
c001231c:	50                   	push   eax
c001231d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012321:	e8 f0 f5 ff ff       	call   c0011916 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012326:	83 c4 10             	add    esp,0x10
c0012329:	e8 25 c0 ff ff       	call   c000e353 <enableIRQs()>
c001232e:	90                   	nop
c001232f:	83 c4 28             	add    esp,0x28
c0012332:	5b                   	pop    ebx
c0012333:	c3                   	ret    

c0012334 <mapVASFirstTime>:
c0012334:	55                   	push   ebp
c0012335:	57                   	push   edi
c0012336:	56                   	push   esi
c0012337:	53                   	push   ebx
c0012338:	83 ec 0c             	sub    esp,0xc
c001233b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012340:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012343:	4a                   	dec    edx
c0012344:	0f 84 99 00 00 00    	je     c00123e3 <mapVASFirstTime+0xaf>
c001234a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001234d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012350:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012355:	c1 e5 15             	shl    ebp,0x15
c0012358:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001235d:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012363:	29 eb                	sub    ebx,ebp
c0012365:	29 ee                	sub    esi,ebp
c0012367:	e8 f9 b6 ff ff       	call   c000da65 <Phys::allocatePage()>
c001236c:	83 ec 0c             	sub    esp,0xc
c001236f:	68 03 04 00 00       	push   0x403
c0012374:	6a 01                	push   0x1
c0012376:	53                   	push   ebx
c0012377:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001237d:	50                   	push   eax
c001237e:	57                   	push   edi
c001237f:	e8 7e f8 ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012384:	83 c4 20             	add    esp,0x20
c0012387:	39 f3                	cmp    ebx,esi
c0012389:	75 dc                	jne    c0012367 <mapVASFirstTime+0x33>
c001238b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012390:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012395:	29 ee                	sub    esi,ebp
c0012397:	29 e8                	sub    eax,ebp
c0012399:	89 c5                	mov    ebp,eax
c001239b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001239f:	19 db                	sbb    ebx,ebx
c00123a1:	e8 bf b6 ff ff       	call   c000da65 <Phys::allocatePage()>
c00123a6:	83 e3 04             	and    ebx,0x4
c00123a9:	83 ec 0c             	sub    esp,0xc
c00123ac:	81 c3 03 04 00 00    	add    ebx,0x403
c00123b2:	53                   	push   ebx
c00123b3:	6a 01                	push   0x1
c00123b5:	56                   	push   esi
c00123b6:	81 ee 00 10 00 00    	sub    esi,0x1000
c00123bc:	50                   	push   eax
c00123bd:	57                   	push   edi
c00123be:	e8 3f f8 ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123c3:	83 c4 20             	add    esp,0x20
c00123c6:	39 f5                	cmp    ebp,esi
c00123c8:	75 d1                	jne    c001239b <mapVASFirstTime+0x67>
c00123ca:	e8 3a c6 00 00       	call   c001ea09 <CPU::readCR3()>
c00123cf:	83 ec 0c             	sub    esp,0xc
c00123d2:	50                   	push   eax
c00123d3:	e8 55 c6 00 00       	call   c001ea2d <CPU::writeCR3(unsigned long)>
c00123d8:	83 c4 10             	add    esp,0x10
c00123db:	83 c4 0c             	add    esp,0xc
c00123de:	5b                   	pop    ebx
c00123df:	5e                   	pop    esi
c00123e0:	5f                   	pop    edi
c00123e1:	5d                   	pop    ebp
c00123e2:	c3                   	ret    
c00123e3:	83 ec 0c             	sub    esp,0xc
c00123e6:	68 ca 97 03 c0       	push   0xc00397ca
c00123eb:	e8 d0 aa ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00123f0:	83 c4 10             	add    esp,0x10
c00123f3:	83 c4 0c             	add    esp,0xc
c00123f6:	5b                   	pop    ebx
c00123f7:	5e                   	pop    esi
c00123f8:	5f                   	pop    edi
c00123f9:	5d                   	pop    ebp
c00123fa:	c3                   	ret    

c00123fb <__cxa_atexit>:
c00123fb:	31 c0                	xor    eax,eax
c00123fd:	c3                   	ret    

c00123fe <__cxa_finalize>:
c00123fe:	c3                   	ret    

c00123ff <__stack_chk_fail>:
c00123ff:	55                   	push   ebp
c0012400:	89 e5                	mov    ebp,esp
c0012402:	83 ec 10             	sub    esp,0x10
c0012405:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012408:	68 e3 97 03 c0       	push   0xc00397e3
c001240d:	e8 ae aa ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0012412:	58                   	pop    eax
c0012413:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012416:	5a                   	pop    edx
c0012417:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001241a:	68 e3 97 03 c0       	push   0xc00397e3
c001241f:	e8 9c aa ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0012424:	59                   	pop    ecx
c0012425:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012428:	5a                   	pop    edx
c0012429:	8b 00                	mov    eax,DWORD PTR [eax]
c001242b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001242e:	68 e3 97 03 c0       	push   0xc00397e3
c0012433:	e8 88 aa ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0012438:	59                   	pop    ecx
c0012439:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001243c:	5a                   	pop    edx
c001243d:	8b 00                	mov    eax,DWORD PTR [eax]
c001243f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012441:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012444:	68 e3 97 03 c0       	push   0xc00397e3
c0012449:	e8 72 aa ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001244e:	c7 04 24 eb 97 03 c0 	mov    DWORD PTR [esp],0xc00397eb
c0012455:	e8 84 ab ff ff       	call   c000cfde <panic(char const*)>
c001245a:	83 c4 10             	add    esp,0x10
c001245d:	c9                   	leave  
c001245e:	c3                   	ret    

c001245f <__cxa_pure_virtual>:
c001245f:	83 ec 18             	sub    esp,0x18
c0012462:	68 03 98 03 c0       	push   0xc0039803
c0012467:	e8 72 ab ff ff       	call   c000cfde <panic(char const*)>
c001246c:	83 c4 1c             	add    esp,0x1c
c001246f:	c3                   	ret    

c0012470 <operator new(unsigned long)>:
c0012470:	e9 46 b0 ff ff       	jmp    c000d4bb <malloc>

c0012475 <operator new[](unsigned long)>:
c0012475:	e9 41 b0 ff ff       	jmp    c000d4bb <malloc>

c001247a <operator delete(void*)>:
c001247a:	e9 5c b0 ff ff       	jmp    c000d4db <rfree>

c001247f <operator delete(void*, unsigned long)>:
c001247f:	e9 57 b0 ff ff       	jmp    c000d4db <rfree>

c0012484 <operator delete[](void*)>:
c0012484:	e9 52 b0 ff ff       	jmp    c000d4db <rfree>

c0012489 <operator delete[](void*, unsigned long)>:
c0012489:	e9 4d b0 ff ff       	jmp    c000d4db <rfree>

c001248e <File::read(unsigned long long, void*, int*)>:
c001248e:	53                   	push   ebx
c001248f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012493:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012497:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001249e:	3c 19                	cmp    al,0x19
c00124a0:	77 35                	ja     c00124d7 <File::read(unsigned long long, void*, int*)+0x49>
c00124a2:	8b 04 85 40 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3cc0]
c00124a9:	85 c0                	test   eax,eax
c00124ab:	74 2a                	je     c00124d7 <File::read(unsigned long long, void*, int*)+0x49>
c00124ad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00124b3:	85 c0                	test   eax,eax
c00124b5:	74 20                	je     c00124d7 <File::read(unsigned long long, void*, int*)+0x49>
c00124b7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00124bb:	74 21                	je     c00124de <File::read(unsigned long long, void*, int*)+0x50>
c00124bd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00124bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00124c3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00124c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00124d1:	5b                   	pop    ebx
c00124d2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00124d5:	ff e0                	jmp    eax
c00124d7:	b8 0b 00 00 00       	mov    eax,0xb
c00124dc:	eb 05                	jmp    c00124e3 <File::read(unsigned long long, void*, int*)+0x55>
c00124de:	b8 05 00 00 00       	mov    eax,0x5
c00124e3:	5b                   	pop    ebx
c00124e4:	c3                   	ret    
c00124e5:	90                   	nop

c00124e6 <File::write(unsigned long long, void*, int*)>:
c00124e6:	53                   	push   ebx
c00124e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124ef:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00124f6:	3c 19                	cmp    al,0x19
c00124f8:	77 35                	ja     c001252f <File::write(unsigned long long, void*, int*)+0x49>
c00124fa:	8b 04 85 40 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3cc0]
c0012501:	85 c0                	test   eax,eax
c0012503:	74 2a                	je     c001252f <File::write(unsigned long long, void*, int*)+0x49>
c0012505:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001250b:	85 c0                	test   eax,eax
c001250d:	74 20                	je     c001252f <File::write(unsigned long long, void*, int*)+0x49>
c001250f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012513:	74 21                	je     c0012536 <File::write(unsigned long long, void*, int*)+0x50>
c0012515:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012517:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001251b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012529:	5b                   	pop    ebx
c001252a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001252d:	ff e0                	jmp    eax
c001252f:	b8 0b 00 00 00       	mov    eax,0xb
c0012534:	eb 05                	jmp    c001253b <File::write(unsigned long long, void*, int*)+0x55>
c0012536:	b8 05 00 00 00       	mov    eax,0x5
c001253b:	5b                   	pop    ebx
c001253c:	c3                   	ret    
c001253d:	90                   	nop

c001253e <Directory::read(unsigned long long, void*, int*)>:
c001253e:	53                   	push   ebx
c001253f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012543:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012547:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001254e:	3c 19                	cmp    al,0x19
c0012550:	77 35                	ja     c0012587 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012552:	8b 04 85 40 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3cc0]
c0012559:	85 c0                	test   eax,eax
c001255b:	74 2a                	je     c0012587 <Directory::read(unsigned long long, void*, int*)+0x49>
c001255d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012563:	85 c0                	test   eax,eax
c0012565:	74 20                	je     c0012587 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012567:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001256b:	74 21                	je     c001258e <Directory::read(unsigned long long, void*, int*)+0x50>
c001256d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001256f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012573:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012581:	5b                   	pop    ebx
c0012582:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012585:	ff e0                	jmp    eax
c0012587:	b8 0b 00 00 00       	mov    eax,0xb
c001258c:	eb 05                	jmp    c0012593 <Directory::read(unsigned long long, void*, int*)+0x55>
c001258e:	b8 05 00 00 00       	mov    eax,0x5
c0012593:	5b                   	pop    ebx
c0012594:	c3                   	ret    
c0012595:	90                   	nop

c0012596 <Directory::write(unsigned long long, void*, int*)>:
c0012596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001259a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00125a1:	b8 0b 00 00 00       	mov    eax,0xb
c00125a6:	80 fa 19             	cmp    dl,0x19
c00125a9:	77 18                	ja     c00125c3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00125ab:	8b 14 95 40 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3cc0]
c00125b2:	85 d2                	test   edx,edx
c00125b4:	74 0d                	je     c00125c3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00125b6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00125bd:	19 c0                	sbb    eax,eax
c00125bf:	83 e0 0a             	and    eax,0xa
c00125c2:	40                   	inc    eax
c00125c3:	c3                   	ret    

c00125c4 <File::isAtty()>:
c00125c4:	31 c0                	xor    eax,eax
c00125c6:	c3                   	ret    
c00125c7:	90                   	nop

c00125c8 <Directory::isAtty()>:
c00125c8:	31 c0                	xor    eax,eax
c00125ca:	c3                   	ret    
c00125cb:	90                   	nop

c00125cc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00125cc:	b8 0a 00 00 00       	mov    eax,0xa
c00125d1:	c3                   	ret    

c00125d2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00125d2:	b8 0a 00 00 00       	mov    eax,0xa
c00125d7:	c3                   	ret    

c00125d8 <File::~File()>:
c00125d8:	83 ec 0c             	sub    esp,0xc
c00125db:	ba 84 98 03 c0       	mov    edx,0xc0039884
c00125e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125e4:	89 10                	mov    DWORD PTR [eax],edx
c00125e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ea:	83 ec 0c             	sub    esp,0xc
c00125ed:	50                   	push   eax
c00125ee:	e8 0d eb ff ff       	call   c0011100 <UnixFile::~UnixFile()>
c00125f3:	83 c4 10             	add    esp,0x10
c00125f6:	90                   	nop
c00125f7:	83 c4 0c             	add    esp,0xc
c00125fa:	c3                   	ret    
c00125fb:	90                   	nop

c00125fc <File::~File()>:
c00125fc:	83 ec 0c             	sub    esp,0xc
c00125ff:	83 ec 0c             	sub    esp,0xc
c0012602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012606:	e8 cd ff ff ff       	call   c00125d8 <File::~File()>
c001260b:	83 c4 10             	add    esp,0x10
c001260e:	83 ec 08             	sub    esp,0x8
c0012611:	68 14 01 00 00       	push   0x114
c0012616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001261a:	e8 60 fe ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001261f:	83 c4 10             	add    esp,0x10
c0012622:	83 c4 0c             	add    esp,0xc
c0012625:	c3                   	ret    

c0012626 <Directory::~Directory()>:
c0012626:	83 ec 0c             	sub    esp,0xc
c0012629:	ba a0 98 03 c0       	mov    edx,0xc00398a0
c001262e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012632:	89 10                	mov    DWORD PTR [eax],edx
c0012634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012638:	83 ec 0c             	sub    esp,0xc
c001263b:	50                   	push   eax
c001263c:	e8 bf ea ff ff       	call   c0011100 <UnixFile::~UnixFile()>
c0012641:	83 c4 10             	add    esp,0x10
c0012644:	90                   	nop
c0012645:	83 c4 0c             	add    esp,0xc
c0012648:	c3                   	ret    
c0012649:	90                   	nop

c001264a <Directory::~Directory()>:
c001264a:	83 ec 0c             	sub    esp,0xc
c001264d:	83 ec 0c             	sub    esp,0xc
c0012650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012654:	e8 cd ff ff ff       	call   c0012626 <Directory::~Directory()>
c0012659:	83 c4 10             	add    esp,0x10
c001265c:	83 ec 08             	sub    esp,0x8
c001265f:	68 14 01 00 00       	push   0x114
c0012664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012668:	e8 12 fe ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001266d:	83 c4 10             	add    esp,0x10
c0012670:	83 c4 0c             	add    esp,0xc
c0012673:	c3                   	ret    

c0012674 <Filesystem::Filesystem()>:
c0012674:	ba 20 98 03 c0       	mov    edx,0xc0039820
c0012679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001267d:	89 10                	mov    DWORD PTR [eax],edx
c001267f:	8b 15 a0 be 03 c0    	mov    edx,DWORD PTR ds:0xc003bea0
c0012685:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012689:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001268c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012690:	a3 a0 be 03 c0       	mov    ds:0xc003bea0,eax
c0012695:	90                   	nop
c0012696:	c3                   	ret    
c0012697:	90                   	nop

c0012698 <Filesystem::~Filesystem()>:
c0012698:	ba 20 98 03 c0       	mov    edx,0xc0039820
c001269d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126a1:	89 10                	mov    DWORD PTR [eax],edx
c00126a3:	90                   	nop
c00126a4:	c3                   	ret    
c00126a5:	90                   	nop

c00126a6 <Filesystem::~Filesystem()>:
c00126a6:	83 ec 0c             	sub    esp,0xc
c00126a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00126ad:	e8 e6 ff ff ff       	call   c0012698 <Filesystem::~Filesystem()>
c00126b2:	83 c4 04             	add    esp,0x4
c00126b5:	83 ec 08             	sub    esp,0x8
c00126b8:	6a 08                	push   0x8
c00126ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126be:	e8 bc fd ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	83 c4 0c             	add    esp,0xc
c00126c9:	c3                   	ret    

c00126ca <initVFS()>:
c00126ca:	83 ec 18             	sub    esp,0x18
c00126cd:	6a 08                	push   0x8
c00126cf:	e8 9c fd ff ff       	call   c0012470 <operator new(unsigned long)>
c00126d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00126d7:	e8 24 71 00 00       	call   c0019800 <FAT::FAT()>
c00126dc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00126e3:	e8 88 fd ff ff       	call   c0012470 <operator new(unsigned long)>
c00126e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00126eb:	e8 1a 83 00 00       	call   c001aa0a <ISO9660::ISO9660()>
c00126f0:	83 c4 1c             	add    esp,0x1c
c00126f3:	c3                   	ret    

c00126f4 <standardiseFiles(char*, char const*, char const*)>:
c00126f4:	55                   	push   ebp
c00126f5:	57                   	push   edi
c00126f6:	56                   	push   esi
c00126f7:	53                   	push   ebx
c00126f8:	81 ec 10 04 00 00    	sub    esp,0x410
c00126fe:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012705:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001270c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012713:	68 00 04 00 00       	push   0x400
c0012718:	6a 00                	push   0x0
c001271a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001271e:	56                   	push   esi
c001271f:	e8 87 df fe ff       	call   c00006ab <memset>
c0012724:	83 c4 10             	add    esp,0x10
c0012727:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001272b:	75 0b                	jne    c0012738 <standardiseFiles(char*, char const*, char const*)+0x44>
c001272d:	50                   	push   eax
c001272e:	50                   	push   eax
c001272f:	57                   	push   edi
c0012730:	56                   	push   esi
c0012731:	e8 91 e0 fe ff       	call   c00007c7 <strcpy>
c0012736:	eb 41                	jmp    c0012779 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012738:	8a 07                	mov    al,BYTE PTR [edi]
c001273a:	3c 5c                	cmp    al,0x5c
c001273c:	74 04                	je     c0012742 <standardiseFiles(char*, char const*, char const*)+0x4e>
c001273e:	3c 2f                	cmp    al,0x2f
c0012740:	75 18                	jne    c001275a <standardiseFiles(char*, char const*, char const*)+0x66>
c0012742:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012745:	3c 60                	cmp    al,0x60
c0012747:	7e 03                	jle    c001274c <standardiseFiles(char*, char const*, char const*)+0x58>
c0012749:	83 e8 20             	sub    eax,0x20
c001274c:	88 04 24             	mov    BYTE PTR [esp],al
c001274f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012756:	50                   	push   eax
c0012757:	50                   	push   eax
c0012758:	eb 18                	jmp    c0012772 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001275a:	50                   	push   eax
c001275b:	50                   	push   eax
c001275c:	55                   	push   ebp
c001275d:	56                   	push   esi
c001275e:	e8 64 e0 fe ff       	call   c00007c7 <strcpy>
c0012763:	5a                   	pop    edx
c0012764:	59                   	pop    ecx
c0012765:	68 16 8f 03 c0       	push   0xc0038f16
c001276a:	56                   	push   esi
c001276b:	e8 a4 e1 fe ff       	call   c0000914 <strcat>
c0012770:	5d                   	pop    ebp
c0012771:	58                   	pop    eax
c0012772:	57                   	push   edi
c0012773:	56                   	push   esi
c0012774:	e8 9b e1 fe ff       	call   c0000914 <strcat>
c0012779:	83 c4 10             	add    esp,0x10
c001277c:	8a 04 24             	mov    al,BYTE PTR [esp]
c001277f:	3c 60                	cmp    al,0x60
c0012781:	7e 03                	jle    c0012786 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012783:	83 e8 20             	sub    eax,0x20
c0012786:	88 04 24             	mov    BYTE PTR [esp],al
c0012789:	88 03                	mov    BYTE PTR [ebx],al
c001278b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012792:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012798:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001279c:	bf 03 00 00 00       	mov    edi,0x3
c00127a1:	b8 03 00 00 00       	mov    eax,0x3
c00127a6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00127a9:	84 d2                	test   dl,dl
c00127ab:	0f 84 91 00 00 00    	je     c0012842 <standardiseFiles(char*, char const*, char const*)+0x14e>
c00127b1:	8d 4f 01             	lea    ecx,[edi+0x1]
c00127b4:	80 fa 5c             	cmp    dl,0x5c
c00127b7:	74 05                	je     c00127be <standardiseFiles(char*, char const*, char const*)+0xca>
c00127b9:	80 fa 2f             	cmp    dl,0x2f
c00127bc:	75 12                	jne    c00127d0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00127be:	89 c5                	mov    ebp,eax
c00127c0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00127c5:	74 09                	je     c00127d0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00127c7:	40                   	inc    eax
c00127c8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00127cc:	89 cf                	mov    edi,ecx
c00127ce:	eb d6                	jmp    c00127a6 <standardiseFiles(char*, char const*, char const*)+0xb2>
c00127d0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00127d5:	75 5b                	jne    c0012832 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00127d7:	80 fa 2e             	cmp    dl,0x2e
c00127da:	75 56                	jne    c0012832 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00127dc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00127e0:	74 19                	je     c00127fb <standardiseFiles(char*, char const*, char const*)+0x107>
c00127e2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00127e7:	74 53                	je     c001283c <standardiseFiles(char*, char const*, char const*)+0x148>
c00127e9:	89 f9                	mov    ecx,edi
c00127eb:	41                   	inc    ecx
c00127ec:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00127ef:	80 fa 2f             	cmp    dl,0x2f
c00127f2:	74 f7                	je     c00127eb <standardiseFiles(char*, char const*, char const*)+0xf7>
c00127f4:	80 fa 5c             	cmp    dl,0x5c
c00127f7:	74 f2                	je     c00127eb <standardiseFiles(char*, char const*, char const*)+0xf7>
c00127f9:	eb d1                	jmp    c00127cc <standardiseFiles(char*, char const*, char const*)+0xd8>
c00127fb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012800:	74 3a                	je     c001283c <standardiseFiles(char*, char const*, char const*)+0x148>
c0012802:	83 f8 03             	cmp    eax,0x3
c0012805:	74 c5                	je     c00127cc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012807:	41                   	inc    ecx
c0012808:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001280b:	80 fa 2f             	cmp    dl,0x2f
c001280e:	74 f7                	je     c0012807 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012810:	80 fa 5c             	cmp    dl,0x5c
c0012813:	74 f2                	je     c0012807 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012815:	48                   	dec    eax
c0012816:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001281a:	75 06                	jne    c0012822 <standardiseFiles(char*, char const*, char const*)+0x12e>
c001281c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012820:	eb f3                	jmp    c0012815 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012822:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012826:	74 07                	je     c001282f <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012828:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001282c:	48                   	dec    eax
c001282d:	eb f3                	jmp    c0012822 <standardiseFiles(char*, char const*, char const*)+0x12e>
c001282f:	40                   	inc    eax
c0012830:	eb 9a                	jmp    c00127cc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012832:	80 fa 2f             	cmp    dl,0x2f
c0012835:	74 95                	je     c00127cc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012837:	80 fa 5c             	cmp    dl,0x5c
c001283a:	74 90                	je     c00127cc <standardiseFiles(char*, char const*, char const*)+0xd8>
c001283c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001283f:	40                   	inc    eax
c0012840:	eb 8a                	jmp    c00127cc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012842:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012846:	83 ec 0c             	sub    esp,0xc
c0012849:	53                   	push   ebx
c001284a:	e8 85 de fe ff       	call   c00006d4 <strlen>
c001284f:	83 c4 10             	add    esp,0x10
c0012852:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012857:	75 26                	jne    c001287f <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012859:	83 ec 0c             	sub    esp,0xc
c001285c:	53                   	push   ebx
c001285d:	e8 72 de fe ff       	call   c00006d4 <strlen>
c0012862:	83 c4 10             	add    esp,0x10
c0012865:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001286a:	74 26                	je     c0012892 <standardiseFiles(char*, char const*, char const*)+0x19e>
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	53                   	push   ebx
c0012870:	e8 5f de fe ff       	call   c00006d4 <strlen>
c0012875:	83 c4 10             	add    esp,0x10
c0012878:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001287d:	eb c7                	jmp    c0012846 <standardiseFiles(char*, char const*, char const*)+0x152>
c001287f:	83 ec 0c             	sub    esp,0xc
c0012882:	53                   	push   ebx
c0012883:	e8 4c de fe ff       	call   c00006d4 <strlen>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012890:	74 c7                	je     c0012859 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012892:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012898:	5b                   	pop    ebx
c0012899:	5e                   	pop    esi
c001289a:	5f                   	pop    edi
c001289b:	5d                   	pop    ebp
c001289c:	c3                   	ret    
c001289d:	90                   	nop

c001289e <File::File(char const*, Process*)>:
c001289e:	83 ec 0c             	sub    esp,0xc
c00128a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128a5:	83 ec 08             	sub    esp,0x8
c00128a8:	6a 00                	push   0x0
c00128aa:	50                   	push   eax
c00128ab:	e8 ec e7 ff ff       	call   c001109c <UnixFile::UnixFile(int)>
c00128b0:	83 c4 10             	add    esp,0x10
c00128b3:	ba 84 98 03 c0       	mov    edx,0xc0039884
c00128b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128bc:	89 10                	mov    DWORD PTR [eax],edx
c00128be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128c2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00128c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128cc:	83 c0 0d             	add    eax,0xd
c00128cf:	83 ec 04             	sub    esp,0x4
c00128d2:	52                   	push   edx
c00128d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128d7:	50                   	push   eax
c00128d8:	e8 17 fe ff ff       	call   c00126f4 <standardiseFiles(char*, char const*, char const*)>
c00128dd:	83 c4 10             	add    esp,0x10
c00128e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00128e7:	8d 50 bf             	lea    edx,[eax-0x41]
c00128ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ee:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00128f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00128fc:	90                   	nop
c00128fd:	83 c4 0c             	add    esp,0xc
c0012900:	c3                   	ret    
c0012901:	90                   	nop

c0012902 <File::open(FileOpenMode)>:
c0012902:	53                   	push   ebx
c0012903:	b8 0b 00 00 00       	mov    eax,0xb
c0012908:	83 ec 08             	sub    esp,0x8
c001290b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001290f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012916:	80 fa 19             	cmp    dl,0x19
c0012919:	77 40                	ja     c001295b <File::open(FileOpenMode)+0x59>
c001291b:	8b 14 95 40 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3cc0]
c0012922:	85 d2                	test   edx,edx
c0012924:	74 35                	je     c001295b <File::open(FileOpenMode)+0x59>
c0012926:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001292c:	85 d2                	test   edx,edx
c001292e:	74 2b                	je     c001295b <File::open(FileOpenMode)+0x59>
c0012930:	b8 06 00 00 00       	mov    eax,0x6
c0012935:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012939:	75 20                	jne    c001295b <File::open(FileOpenMode)+0x59>
c001293b:	8b 02                	mov    eax,DWORD PTR [edx]
c001293d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012943:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012947:	51                   	push   ecx
c0012948:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001294b:	51                   	push   ecx
c001294c:	52                   	push   edx
c001294d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012950:	83 c4 10             	add    esp,0x10
c0012953:	85 c0                	test   eax,eax
c0012955:	75 04                	jne    c001295b <File::open(FileOpenMode)+0x59>
c0012957:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001295b:	83 c4 08             	add    esp,0x8
c001295e:	5b                   	pop    ebx
c001295f:	c3                   	ret    

c0012960 <File::close()>:
c0012960:	53                   	push   ebx
c0012961:	b8 0b 00 00 00       	mov    eax,0xb
c0012966:	83 ec 08             	sub    esp,0x8
c0012969:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001296d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012974:	80 fa 19             	cmp    dl,0x19
c0012977:	77 41                	ja     c00129ba <File::close()+0x5a>
c0012979:	8b 1c 95 40 c3 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3cc0]
c0012980:	85 db                	test   ebx,ebx
c0012982:	74 36                	je     c00129ba <File::close()+0x5a>
c0012984:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001298b:	74 2d                	je     c00129ba <File::close()+0x5a>
c001298d:	b8 05 00 00 00       	mov    eax,0x5
c0012992:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012996:	74 22                	je     c00129ba <File::close()+0x5a>
c0012998:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001299c:	8b 04 95 40 c3 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3cc0]
c00129a3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129a9:	53                   	push   ebx
c00129aa:	53                   	push   ebx
c00129ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00129ad:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00129b3:	50                   	push   eax
c00129b4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00129b7:	83 c4 10             	add    esp,0x10
c00129ba:	83 c4 08             	add    esp,0x8
c00129bd:	5b                   	pop    ebx
c00129be:	c3                   	ret    
c00129bf:	90                   	nop

c00129c0 <File::seek(unsigned long long)>:
c00129c0:	56                   	push   esi
c00129c1:	53                   	push   ebx
c00129c2:	b8 0b 00 00 00       	mov    eax,0xb
c00129c7:	51                   	push   ecx
c00129c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00129cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00129d0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00129d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00129db:	80 fa 19             	cmp    dl,0x19
c00129de:	77 31                	ja     c0012a11 <File::seek(unsigned long long)+0x51>
c00129e0:	8b 14 95 40 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3cc0]
c00129e7:	85 d2                	test   edx,edx
c00129e9:	74 26                	je     c0012a11 <File::seek(unsigned long long)+0x51>
c00129eb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00129f1:	85 d2                	test   edx,edx
c00129f3:	74 1c                	je     c0012a11 <File::seek(unsigned long long)+0x51>
c00129f5:	b8 05 00 00 00       	mov    eax,0x5
c00129fa:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00129fe:	74 11                	je     c0012a11 <File::seek(unsigned long long)+0x51>
c0012a00:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a02:	53                   	push   ebx
c0012a03:	51                   	push   ecx
c0012a04:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012a0a:	52                   	push   edx
c0012a0b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012a0e:	83 c4 10             	add    esp,0x10
c0012a11:	5a                   	pop    edx
c0012a12:	5b                   	pop    ebx
c0012a13:	5e                   	pop    esi
c0012a14:	c3                   	ret    
c0012a15:	90                   	nop

c0012a16 <File::tell(unsigned long long*)>:
c0012a16:	83 ec 0c             	sub    esp,0xc
c0012a19:	b8 0b 00 00 00       	mov    eax,0xb
c0012a1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012a22:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012a29:	80 fa 19             	cmp    dl,0x19
c0012a2c:	77 34                	ja     c0012a62 <File::tell(unsigned long long*)+0x4c>
c0012a2e:	8b 14 95 40 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3cc0]
c0012a35:	85 d2                	test   edx,edx
c0012a37:	74 29                	je     c0012a62 <File::tell(unsigned long long*)+0x4c>
c0012a39:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012a3f:	85 d2                	test   edx,edx
c0012a41:	74 1f                	je     c0012a62 <File::tell(unsigned long long*)+0x4c>
c0012a43:	b8 05 00 00 00       	mov    eax,0x5
c0012a48:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012a4c:	74 14                	je     c0012a62 <File::tell(unsigned long long*)+0x4c>
c0012a4e:	50                   	push   eax
c0012a4f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a55:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012a5b:	52                   	push   edx
c0012a5c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012a5f:	83 c4 10             	add    esp,0x10
c0012a62:	83 c4 0c             	add    esp,0xc
c0012a65:	c3                   	ret    

c0012a66 <File::rewind()>:
c0012a66:	83 ec 10             	sub    esp,0x10
c0012a69:	6a 00                	push   0x0
c0012a6b:	6a 00                	push   0x0
c0012a6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a71:	e8 4a ff ff ff       	call   c00129c0 <File::seek(unsigned long long)>
c0012a76:	83 c4 1c             	add    esp,0x1c
c0012a79:	c3                   	ret    

c0012a7a <File::unlink()>:
c0012a7a:	83 ec 0c             	sub    esp,0xc
c0012a7d:	b8 0b 00 00 00       	mov    eax,0xb
c0012a82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a8d:	80 f9 19             	cmp    cl,0x19
c0012a90:	77 2f                	ja     c0012ac1 <File::unlink()+0x47>
c0012a92:	8b 0c 8d 40 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3cc0]
c0012a99:	85 c9                	test   ecx,ecx
c0012a9b:	74 24                	je     c0012ac1 <File::unlink()+0x47>
c0012a9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012aa3:	85 c9                	test   ecx,ecx
c0012aa5:	74 1a                	je     c0012ac1 <File::unlink()+0x47>
c0012aa7:	b8 06 00 00 00       	mov    eax,0x6
c0012aac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ab0:	75 0f                	jne    c0012ac1 <File::unlink()+0x47>
c0012ab2:	83 c2 0d             	add    edx,0xd
c0012ab5:	50                   	push   eax
c0012ab6:	50                   	push   eax
c0012ab7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ab9:	52                   	push   edx
c0012aba:	51                   	push   ecx
c0012abb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012abe:	83 c4 10             	add    esp,0x10
c0012ac1:	83 c4 0c             	add    esp,0xc
c0012ac4:	c3                   	ret    
c0012ac5:	90                   	nop

c0012ac6 <File::rename(char const*)>:
c0012ac6:	83 ec 0c             	sub    esp,0xc
c0012ac9:	b8 0b 00 00 00       	mov    eax,0xb
c0012ace:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ad2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ad9:	80 f9 19             	cmp    cl,0x19
c0012adc:	77 32                	ja     c0012b10 <File::rename(char const*)+0x4a>
c0012ade:	8b 0c 8d 40 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3cc0]
c0012ae5:	85 c9                	test   ecx,ecx
c0012ae7:	74 27                	je     c0012b10 <File::rename(char const*)+0x4a>
c0012ae9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012aef:	85 c9                	test   ecx,ecx
c0012af1:	74 1d                	je     c0012b10 <File::rename(char const*)+0x4a>
c0012af3:	b8 06 00 00 00       	mov    eax,0x6
c0012af8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012afc:	75 12                	jne    c0012b10 <File::rename(char const*)+0x4a>
c0012afe:	83 c2 0d             	add    edx,0xd
c0012b01:	50                   	push   eax
c0012b02:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b08:	52                   	push   edx
c0012b09:	51                   	push   ecx
c0012b0a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012b0d:	83 c4 10             	add    esp,0x10
c0012b10:	83 c4 0c             	add    esp,0xc
c0012b13:	c3                   	ret    

c0012b14 <File::chfatattr(unsigned char, unsigned char)>:
c0012b14:	57                   	push   edi
c0012b15:	b8 0b 00 00 00       	mov    eax,0xb
c0012b1a:	56                   	push   esi
c0012b1b:	53                   	push   ebx
c0012b1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b20:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b24:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b2b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012b2f:	80 f9 19             	cmp    cl,0x19
c0012b32:	77 37                	ja     c0012b6b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b34:	8b 0c 8d 40 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3cc0]
c0012b3b:	85 c9                	test   ecx,ecx
c0012b3d:	74 2c                	je     c0012b6b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b3f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b45:	85 c9                	test   ecx,ecx
c0012b47:	74 22                	je     c0012b6b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b49:	b8 06 00 00 00       	mov    eax,0x6
c0012b4e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b52:	75 17                	jne    c0012b6b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b54:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012b56:	89 f0                	mov    eax,esi
c0012b58:	83 c2 0d             	add    edx,0xd
c0012b5b:	0f b6 f0             	movzx  esi,al
c0012b5e:	0f b6 db             	movzx  ebx,bl
c0012b61:	56                   	push   esi
c0012b62:	53                   	push   ebx
c0012b63:	52                   	push   edx
c0012b64:	51                   	push   ecx
c0012b65:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012b68:	83 c4 10             	add    esp,0x10
c0012b6b:	5b                   	pop    ebx
c0012b6c:	5e                   	pop    esi
c0012b6d:	5f                   	pop    edi
c0012b6e:	c3                   	ret    
c0012b6f:	90                   	nop

c0012b70 <File::exists()>:
c0012b70:	83 ec 0c             	sub    esp,0xc
c0012b73:	31 c0                	xor    eax,eax
c0012b75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b79:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b80:	80 f9 19             	cmp    cl,0x19
c0012b83:	77 24                	ja     c0012ba9 <File::exists()+0x39>
c0012b85:	8b 0c 8d 40 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3cc0]
c0012b8c:	85 c9                	test   ecx,ecx
c0012b8e:	74 19                	je     c0012ba9 <File::exists()+0x39>
c0012b90:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b96:	85 c9                	test   ecx,ecx
c0012b98:	74 0f                	je     c0012ba9 <File::exists()+0x39>
c0012b9a:	83 c2 0d             	add    edx,0xd
c0012b9d:	50                   	push   eax
c0012b9e:	50                   	push   eax
c0012b9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ba1:	52                   	push   edx
c0012ba2:	51                   	push   ecx
c0012ba3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ba6:	83 c4 10             	add    esp,0x10
c0012ba9:	83 c4 0c             	add    esp,0xc
c0012bac:	c3                   	ret    
c0012bad:	90                   	nop

c0012bae <File::stat(unsigned long long*, bool*)>:
c0012bae:	56                   	push   esi
c0012baf:	53                   	push   ebx
c0012bb0:	50                   	push   eax
c0012bb1:	b8 0b 00 00 00       	mov    eax,0xb
c0012bb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012bba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012bbe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012bc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012bc9:	80 f9 19             	cmp    cl,0x19
c0012bcc:	77 3d                	ja     c0012c0b <File::stat(unsigned long long*, bool*)+0x5d>
c0012bce:	8b 0c 8d 40 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3cc0]
c0012bd5:	85 c9                	test   ecx,ecx
c0012bd7:	74 32                	je     c0012c0b <File::stat(unsigned long long*, bool*)+0x5d>
c0012bd9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012bdf:	85 c9                	test   ecx,ecx
c0012be1:	74 28                	je     c0012c0b <File::stat(unsigned long long*, bool*)+0x5d>
c0012be3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012be5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012be9:	74 13                	je     c0012bfe <File::stat(unsigned long long*, bool*)+0x50>
c0012beb:	83 ec 04             	sub    esp,0x4
c0012bee:	56                   	push   esi
c0012bef:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012bf5:	51                   	push   ecx
c0012bf6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012bf9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012bfc:	eb 0a                	jmp    c0012c08 <File::stat(unsigned long long*, bool*)+0x5a>
c0012bfe:	53                   	push   ebx
c0012bff:	83 c2 0d             	add    edx,0xd
c0012c02:	56                   	push   esi
c0012c03:	52                   	push   edx
c0012c04:	51                   	push   ecx
c0012c05:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012c08:	83 c4 10             	add    esp,0x10
c0012c0b:	5a                   	pop    edx
c0012c0c:	5b                   	pop    ebx
c0012c0d:	5e                   	pop    esi
c0012c0e:	c3                   	ret    

c0012c0f <getcwd(Process*, char*, int)>:
c0012c0f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c13:	31 c0                	xor    eax,eax
c0012c15:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c18:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c1c:	7d 15                	jge    c0012c33 <getcwd(Process*, char*, int)+0x24>
c0012c1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c22:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c29:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c2c:	84 c9                	test   cl,cl
c0012c2e:	74 06                	je     c0012c36 <getcwd(Process*, char*, int)+0x27>
c0012c30:	40                   	inc    eax
c0012c31:	eb e2                	jmp    c0012c15 <getcwd(Process*, char*, int)+0x6>
c0012c33:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c36:	31 c0                	xor    eax,eax
c0012c38:	c3                   	ret    

c0012c39 <setcwd(Process*, char*)>:
c0012c39:	55                   	push   ebp
c0012c3a:	57                   	push   edi
c0012c3b:	56                   	push   esi
c0012c3c:	53                   	push   ebx
c0012c3d:	81 ec 20 02 00 00    	sub    esp,0x220
c0012c43:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012c4a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012c50:	57                   	push   edi
c0012c51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012c58:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012c5c:	56                   	push   esi
c0012c5d:	e8 92 fa ff ff       	call   c00126f4 <standardiseFiles(char*, char const*, char const*)>
c0012c62:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c65:	e8 6a da fe ff       	call   c00006d4 <strlen>
c0012c6a:	83 c4 10             	add    esp,0x10
c0012c6d:	83 f8 02             	cmp    eax,0x2
c0012c70:	77 17                	ja     c0012c89 <setcwd(Process*, char*)+0x50>
c0012c72:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012c77:	83 e8 41             	sub    eax,0x41
c0012c7a:	83 f8 19             	cmp    eax,0x19
c0012c7d:	76 24                	jbe    c0012ca3 <setcwd(Process*, char*)+0x6a>
c0012c7f:	b8 03 00 00 00       	mov    eax,0x3
c0012c84:	e9 cb 00 00 00       	jmp    c0012d54 <setcwd(Process*, char*)+0x11b>
c0012c89:	83 ec 0c             	sub    esp,0xc
c0012c8c:	56                   	push   esi
c0012c8d:	e8 42 da fe ff       	call   c00006d4 <strlen>
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	83 f8 03             	cmp    eax,0x3
c0012c98:	75 33                	jne    c0012ccd <setcwd(Process*, char*)+0x94>
c0012c9a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012c9f:	75 2c                	jne    c0012ccd <setcwd(Process*, char*)+0x94>
c0012ca1:	eb cf                	jmp    c0012c72 <setcwd(Process*, char*)+0x39>
c0012ca3:	8b 14 85 40 c3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3cc0]
c0012caa:	b8 05 00 00 00       	mov    eax,0x5
c0012caf:	85 d2                	test   edx,edx
c0012cb1:	0f 84 9d 00 00 00    	je     c0012d54 <setcwd(Process*, char*)+0x11b>
c0012cb7:	b8 06 00 00 00       	mov    eax,0x6
c0012cbc:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012cc3:	0f 84 8b 00 00 00    	je     c0012d54 <setcwd(Process*, char*)+0x11b>
c0012cc9:	51                   	push   ecx
c0012cca:	51                   	push   ecx
c0012ccb:	eb 7b                	jmp    c0012d48 <setcwd(Process*, char*)+0x10f>
c0012ccd:	83 ec 0c             	sub    esp,0xc
c0012cd0:	68 14 01 00 00       	push   0x114
c0012cd5:	e8 96 f7 ff ff       	call   c0012470 <operator new(unsigned long)>
c0012cda:	83 c4 0c             	add    esp,0xc
c0012cdd:	89 c3                	mov    ebx,eax
c0012cdf:	55                   	push   ebp
c0012ce0:	56                   	push   esi
c0012ce1:	50                   	push   eax
c0012ce2:	e8 b7 fb ff ff       	call   c001289e <File::File(char const*, Process*)>
c0012ce7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012cec:	83 c4 0c             	add    esp,0xc
c0012cef:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012cf3:	50                   	push   eax
c0012cf4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012cf8:	50                   	push   eax
c0012cf9:	53                   	push   ebx
c0012cfa:	e8 af fe ff ff       	call   c0012bae <File::stat(unsigned long long*, bool*)>
c0012cff:	83 c4 10             	add    esp,0x10
c0012d02:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012d04:	83 f8 02             	cmp    eax,0x2
c0012d07:	75 09                	jne    c0012d12 <setcwd(Process*, char*)+0xd9>
c0012d09:	83 ec 0c             	sub    esp,0xc
c0012d0c:	53                   	push   ebx
c0012d0d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012d10:	eb 0d                	jmp    c0012d1f <setcwd(Process*, char*)+0xe6>
c0012d12:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012d15:	85 c0                	test   eax,eax
c0012d17:	74 10                	je     c0012d29 <setcwd(Process*, char*)+0xf0>
c0012d19:	83 ec 0c             	sub    esp,0xc
c0012d1c:	53                   	push   ebx
c0012d1d:	ff d2                	call   edx
c0012d1f:	83 c4 10             	add    esp,0x10
c0012d22:	b8 01 00 00 00       	mov    eax,0x1
c0012d27:	eb 2b                	jmp    c0012d54 <setcwd(Process*, char*)+0x11b>
c0012d29:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012d2e:	75 10                	jne    c0012d40 <setcwd(Process*, char*)+0x107>
c0012d30:	83 ec 0c             	sub    esp,0xc
c0012d33:	53                   	push   ebx
c0012d34:	ff d2                	call   edx
c0012d36:	83 c4 10             	add    esp,0x10
c0012d39:	b8 02 00 00 00       	mov    eax,0x2
c0012d3e:	eb 14                	jmp    c0012d54 <setcwd(Process*, char*)+0x11b>
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	53                   	push   ebx
c0012d44:	ff d2                	call   edx
c0012d46:	58                   	pop    eax
c0012d47:	5a                   	pop    edx
c0012d48:	56                   	push   esi
c0012d49:	57                   	push   edi
c0012d4a:	e8 78 da fe ff       	call   c00007c7 <strcpy>
c0012d4f:	83 c4 10             	add    esp,0x10
c0012d52:	31 c0                	xor    eax,eax
c0012d54:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012d5a:	5b                   	pop    ebx
c0012d5b:	5e                   	pop    esi
c0012d5c:	5f                   	pop    edi
c0012d5d:	5d                   	pop    ebp
c0012d5e:	c3                   	ret    
c0012d5f:	90                   	nop

c0012d60 <Directory::Directory(char const*, Process*)>:
c0012d60:	83 ec 0c             	sub    esp,0xc
c0012d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d67:	83 ec 08             	sub    esp,0x8
c0012d6a:	6a 00                	push   0x0
c0012d6c:	50                   	push   eax
c0012d6d:	e8 2a e3 ff ff       	call   c001109c <UnixFile::UnixFile(int)>
c0012d72:	83 c4 10             	add    esp,0x10
c0012d75:	ba a0 98 03 c0       	mov    edx,0xc00398a0
c0012d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d7e:	89 10                	mov    DWORD PTR [eax],edx
c0012d80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d84:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8e:	83 c0 0d             	add    eax,0xd
c0012d91:	83 ec 04             	sub    esp,0x4
c0012d94:	52                   	push   edx
c0012d95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d99:	50                   	push   eax
c0012d9a:	e8 55 f9 ff ff       	call   c00126f4 <standardiseFiles(char*, char const*, char const*)>
c0012d9f:	83 c4 10             	add    esp,0x10
c0012da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012da9:	8d 50 bf             	lea    edx,[eax-0x41]
c0012dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dba:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012dbe:	90                   	nop
c0012dbf:	83 c4 0c             	add    esp,0xc
c0012dc2:	c3                   	ret    
c0012dc3:	90                   	nop

c0012dc4 <Directory::open()>:
c0012dc4:	53                   	push   ebx
c0012dc5:	b8 0b 00 00 00       	mov    eax,0xb
c0012dca:	83 ec 08             	sub    esp,0x8
c0012dcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012dd1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012dd8:	80 fa 19             	cmp    dl,0x19
c0012ddb:	77 3d                	ja     c0012e1a <Directory::open()+0x56>
c0012ddd:	8b 14 95 40 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3cc0]
c0012de4:	85 d2                	test   edx,edx
c0012de6:	74 32                	je     c0012e1a <Directory::open()+0x56>
c0012de8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dee:	85 d2                	test   edx,edx
c0012df0:	74 28                	je     c0012e1a <Directory::open()+0x56>
c0012df2:	b8 06 00 00 00       	mov    eax,0x6
c0012df7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012dfb:	75 1d                	jne    c0012e1a <Directory::open()+0x56>
c0012dfd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e03:	50                   	push   eax
c0012e04:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e06:	51                   	push   ecx
c0012e07:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e0a:	51                   	push   ecx
c0012e0b:	52                   	push   edx
c0012e0c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012e0f:	83 c4 10             	add    esp,0x10
c0012e12:	85 c0                	test   eax,eax
c0012e14:	75 04                	jne    c0012e1a <Directory::open()+0x56>
c0012e16:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012e1a:	83 c4 08             	add    esp,0x8
c0012e1d:	5b                   	pop    ebx
c0012e1e:	c3                   	ret    
c0012e1f:	90                   	nop

c0012e20 <Directory::close()>:
c0012e20:	53                   	push   ebx
c0012e21:	b8 0b 00 00 00       	mov    eax,0xb
c0012e26:	83 ec 08             	sub    esp,0x8
c0012e29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e2d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e34:	80 fa 19             	cmp    dl,0x19
c0012e37:	77 41                	ja     c0012e7a <Directory::close()+0x5a>
c0012e39:	8b 1c 95 40 c3 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3cc0]
c0012e40:	85 db                	test   ebx,ebx
c0012e42:	74 36                	je     c0012e7a <Directory::close()+0x5a>
c0012e44:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012e4b:	74 2d                	je     c0012e7a <Directory::close()+0x5a>
c0012e4d:	b8 05 00 00 00       	mov    eax,0x5
c0012e52:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e56:	74 22                	je     c0012e7a <Directory::close()+0x5a>
c0012e58:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012e5c:	8b 04 95 40 c3 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3cc0]
c0012e63:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012e69:	53                   	push   ebx
c0012e6a:	53                   	push   ebx
c0012e6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e6d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e73:	50                   	push   eax
c0012e74:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012e77:	83 c4 10             	add    esp,0x10
c0012e7a:	83 c4 08             	add    esp,0x8
c0012e7d:	5b                   	pop    ebx
c0012e7e:	c3                   	ret    
c0012e7f:	90                   	nop

c0012e80 <Directory::unlink()>:
c0012e80:	83 ec 0c             	sub    esp,0xc
c0012e83:	b8 0b 00 00 00       	mov    eax,0xb
c0012e88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e93:	80 f9 19             	cmp    cl,0x19
c0012e96:	77 2f                	ja     c0012ec7 <Directory::unlink()+0x47>
c0012e98:	8b 0c 8d 40 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3cc0]
c0012e9f:	85 c9                	test   ecx,ecx
c0012ea1:	74 24                	je     c0012ec7 <Directory::unlink()+0x47>
c0012ea3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ea9:	85 c9                	test   ecx,ecx
c0012eab:	74 1a                	je     c0012ec7 <Directory::unlink()+0x47>
c0012ead:	b8 06 00 00 00       	mov    eax,0x6
c0012eb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eb6:	75 0f                	jne    c0012ec7 <Directory::unlink()+0x47>
c0012eb8:	83 c2 0d             	add    edx,0xd
c0012ebb:	50                   	push   eax
c0012ebc:	50                   	push   eax
c0012ebd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ebf:	52                   	push   edx
c0012ec0:	51                   	push   ecx
c0012ec1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	83 c4 0c             	add    esp,0xc
c0012eca:	c3                   	ret    
c0012ecb:	90                   	nop

c0012ecc <Directory::rename(char const*)>:
c0012ecc:	83 ec 0c             	sub    esp,0xc
c0012ecf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ed4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ed8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012edf:	80 f9 19             	cmp    cl,0x19
c0012ee2:	77 32                	ja     c0012f16 <Directory::rename(char const*)+0x4a>
c0012ee4:	8b 0c 8d 40 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3cc0]
c0012eeb:	85 c9                	test   ecx,ecx
c0012eed:	74 27                	je     c0012f16 <Directory::rename(char const*)+0x4a>
c0012eef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ef5:	85 c9                	test   ecx,ecx
c0012ef7:	74 1d                	je     c0012f16 <Directory::rename(char const*)+0x4a>
c0012ef9:	b8 06 00 00 00       	mov    eax,0x6
c0012efe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f02:	75 12                	jne    c0012f16 <Directory::rename(char const*)+0x4a>
c0012f04:	83 c2 0d             	add    edx,0xd
c0012f07:	50                   	push   eax
c0012f08:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f0e:	52                   	push   edx
c0012f0f:	51                   	push   ecx
c0012f10:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f13:	83 c4 10             	add    esp,0x10
c0012f16:	83 c4 0c             	add    esp,0xc
c0012f19:	c3                   	ret    

c0012f1a <Directory::exists()>:
c0012f1a:	83 ec 0c             	sub    esp,0xc
c0012f1d:	31 c0                	xor    eax,eax
c0012f1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f23:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f2a:	80 f9 19             	cmp    cl,0x19
c0012f2d:	77 24                	ja     c0012f53 <Directory::exists()+0x39>
c0012f2f:	8b 0c 8d 40 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3cc0]
c0012f36:	85 c9                	test   ecx,ecx
c0012f38:	74 19                	je     c0012f53 <Directory::exists()+0x39>
c0012f3a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f40:	85 c9                	test   ecx,ecx
c0012f42:	74 0f                	je     c0012f53 <Directory::exists()+0x39>
c0012f44:	83 c2 0d             	add    edx,0xd
c0012f47:	50                   	push   eax
c0012f48:	50                   	push   eax
c0012f49:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f4b:	52                   	push   edx
c0012f4c:	51                   	push   ecx
c0012f4d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f50:	83 c4 10             	add    esp,0x10
c0012f53:	83 c4 0c             	add    esp,0xc
c0012f56:	c3                   	ret    
c0012f57:	90                   	nop

c0012f58 <Directory::read(dirent*)>:
c0012f58:	83 ec 1c             	sub    esp,0x1c
c0012f5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f60:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012f64:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f6b:	80 fa 19             	cmp    dl,0x19
c0012f6e:	77 30                	ja     c0012fa0 <Directory::read(dirent*)+0x48>
c0012f70:	8b 14 95 40 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3cc0]
c0012f77:	85 d2                	test   edx,edx
c0012f79:	74 25                	je     c0012fa0 <Directory::read(dirent*)+0x48>
c0012f7b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f82:	74 1c                	je     c0012fa0 <Directory::read(dirent*)+0x48>
c0012f84:	83 ec 0c             	sub    esp,0xc
c0012f87:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f89:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012f8d:	52                   	push   edx
c0012f8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012f92:	6a 00                	push   0x0
c0012f94:	68 10 01 00 00       	push   0x110
c0012f99:	51                   	push   ecx
c0012f9a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f9d:	83 c4 20             	add    esp,0x20
c0012fa0:	83 c4 1c             	add    esp,0x1c
c0012fa3:	c3                   	ret    

c0012fa4 <Directory::create()>:
c0012fa4:	83 ec 0c             	sub    esp,0xc
c0012fa7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fb0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fb7:	80 f9 19             	cmp    cl,0x19
c0012fba:	77 2f                	ja     c0012feb <Directory::create()+0x47>
c0012fbc:	8b 0c 8d 40 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3cc0]
c0012fc3:	85 c9                	test   ecx,ecx
c0012fc5:	74 24                	je     c0012feb <Directory::create()+0x47>
c0012fc7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fcd:	85 c9                	test   ecx,ecx
c0012fcf:	74 1a                	je     c0012feb <Directory::create()+0x47>
c0012fd1:	b8 06 00 00 00       	mov    eax,0x6
c0012fd6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fda:	75 0f                	jne    c0012feb <Directory::create()+0x47>
c0012fdc:	83 c2 0d             	add    edx,0xd
c0012fdf:	50                   	push   eax
c0012fe0:	50                   	push   eax
c0012fe1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fe3:	52                   	push   edx
c0012fe4:	51                   	push   ecx
c0012fe5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012fe8:	83 c4 10             	add    esp,0x10
c0012feb:	83 c4 0c             	add    esp,0xc
c0012fee:	c3                   	ret    
c0012fef:	90                   	nop

c0012ff0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ff0:	b8 0a 00 00 00       	mov    eax,0xa
c0012ff5:	c3                   	ret    

c0012ff6 <Bus::Bus(char const*)>:
c0012ff6:	83 ec 0c             	sub    esp,0xc
c0012ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ffd:	83 ec 08             	sub    esp,0x8
c0013000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013004:	50                   	push   eax
c0013005:	e8 60 09 00 00       	call   c001396a <Device::Device(char const*)>
c001300a:	83 c4 10             	add    esp,0x10
c001300d:	ba bc 98 03 c0       	mov    edx,0xc00398bc
c0013012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013016:	89 10                	mov    DWORD PTR [eax],edx
c0013018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013026:	90                   	nop
c0013027:	83 c4 0c             	add    esp,0xc
c001302a:	c3                   	ret    
c001302b:	90                   	nop

c001302c <Bus::~Bus()>:
c001302c:	83 ec 0c             	sub    esp,0xc
c001302f:	ba bc 98 03 c0       	mov    edx,0xc00398bc
c0013034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013038:	89 10                	mov    DWORD PTR [eax],edx
c001303a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303e:	83 ec 0c             	sub    esp,0xc
c0013041:	50                   	push   eax
c0013042:	e8 d5 05 00 00       	call   c001361c <Device::~Device()>
c0013047:	83 c4 10             	add    esp,0x10
c001304a:	90                   	nop
c001304b:	83 c4 0c             	add    esp,0xc
c001304e:	c3                   	ret    
c001304f:	90                   	nop

c0013050 <Bus::~Bus()>:
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	83 ec 0c             	sub    esp,0xc
c0013056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001305a:	e8 cd ff ff ff       	call   c001302c <Bus::~Bus()>
c001305f:	83 c4 10             	add    esp,0x10
c0013062:	83 ec 08             	sub    esp,0x8
c0013065:	68 58 01 00 00       	push   0x158
c001306a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001306e:	e8 0c f4 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0013073:	83 c4 10             	add    esp,0x10
c0013076:	83 c4 0c             	add    esp,0xc
c0013079:	c3                   	ret    

c001307a <Buzzer::Buzzer(char const*)>:
c001307a:	83 ec 0c             	sub    esp,0xc
c001307d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013081:	83 ec 08             	sub    esp,0x8
c0013084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013088:	50                   	push   eax
c0013089:	e8 dc 08 00 00       	call   c001396a <Device::Device(char const*)>
c001308e:	83 c4 10             	add    esp,0x10
c0013091:	ba e8 98 03 c0       	mov    edx,0xc00398e8
c0013096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309a:	89 10                	mov    DWORD PTR [eax],edx
c001309c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00130aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ae:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00130b8:	90                   	nop
c00130b9:	83 c4 0c             	add    esp,0xc
c00130bc:	c3                   	ret    
c00130bd:	90                   	nop

c00130be <Buzzer::~Buzzer()>:
c00130be:	83 ec 0c             	sub    esp,0xc
c00130c1:	ba e8 98 03 c0       	mov    edx,0xc00398e8
c00130c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ca:	89 10                	mov    DWORD PTR [eax],edx
c00130cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	50                   	push   eax
c00130d4:	e8 43 05 00 00       	call   c001361c <Device::~Device()>
c00130d9:	83 c4 10             	add    esp,0x10
c00130dc:	90                   	nop
c00130dd:	83 c4 0c             	add    esp,0xc
c00130e0:	c3                   	ret    
c00130e1:	90                   	nop

c00130e2 <Buzzer::~Buzzer()>:
c00130e2:	83 ec 0c             	sub    esp,0xc
c00130e5:	83 ec 0c             	sub    esp,0xc
c00130e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ec:	e8 cd ff ff ff       	call   c00130be <Buzzer::~Buzzer()>
c00130f1:	83 c4 10             	add    esp,0x10
c00130f4:	83 ec 08             	sub    esp,0x8
c00130f7:	68 5c 01 00 00       	push   0x15c
c00130fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013100:	e8 7a f3 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0013105:	83 c4 10             	add    esp,0x10
c0013108:	83 c4 0c             	add    esp,0xc
c001310b:	c3                   	ret    

c001310c <Buzzer::stop()>:
c001310c:	83 ec 14             	sub    esp,0x14
c001310f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013113:	8b 10                	mov    edx,DWORD PTR [eax]
c0013115:	6a 00                	push   0x0
c0013117:	50                   	push   eax
c0013118:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001311b:	83 c4 1c             	add    esp,0x1c
c001311e:	c3                   	ret    

c001311f <beepThread(void*)>:
c001311f:	53                   	push   ebx
c0013120:	83 ec 08             	sub    esp,0x8
c0013123:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013127:	e8 38 b2 ff ff       	call   c000e364 <unlockScheduler()>
c001312c:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013131:	52                   	push   edx
c0013132:	52                   	push   edx
c0013133:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013139:	52                   	push   edx
c001313a:	50                   	push   eax
c001313b:	e8 db b8 ff ff       	call   c000ea1b <nanoSleep(unsigned long long)>
c0013140:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013143:	e8 c4 ff ff ff       	call   c001310c <Buzzer::stop()>
c0013148:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013150:	83 c4 18             	add    esp,0x18
c0013153:	5b                   	pop    ebx
c0013154:	e9 08 b8 ff ff       	jmp    c000e961 <blockTask(TaskState)>
c0013159:	90                   	nop

c001315a <Buzzer::beep(int, int, bool)>:
c001315a:	57                   	push   edi
c001315b:	56                   	push   esi
c001315c:	53                   	push   ebx
c001315d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013161:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013165:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013169:	52                   	push   edx
c001316a:	52                   	push   edx
c001316b:	8b 06                	mov    eax,DWORD PTR [esi]
c001316d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013171:	56                   	push   esi
c0013172:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	89 f8                	mov    eax,edi
c001317a:	84 c0                	test   al,al
c001317c:	74 1f                	je     c001319d <Buzzer::beep(int, int, bool)+0x43>
c001317e:	50                   	push   eax
c001317f:	50                   	push   eax
c0013180:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013186:	99                   	cdq    
c0013187:	52                   	push   edx
c0013188:	50                   	push   eax
c0013189:	e8 8d b8 ff ff       	call   c000ea1b <nanoSleep(unsigned long long)>
c001318e:	83 c4 10             	add    esp,0x10
c0013191:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013195:	5b                   	pop    ebx
c0013196:	5e                   	pop    esi
c0013197:	5f                   	pop    edi
c0013198:	e9 6f ff ff ff       	jmp    c001310c <Buzzer::stop()>
c001319d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00131a3:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00131a8:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00131b0:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00131b4:	c7 44 24 14 1f 31 01 c0 	mov    DWORD PTR [esp+0x14],0xc001311f
c00131bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00131c0:	5b                   	pop    ebx
c00131c1:	5e                   	pop    esi
c00131c2:	5f                   	pop    edi
c00131c3:	e9 c4 b2 ff ff       	jmp    c000e48c <Process::createThread(void (*)(void*), void*, int)>

c00131c8 <loadClockSettings()>:
c00131c8:	c7 05 ac be 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc003beac,0xa
c00131d2:	c6 05 a9 be 03 c0 00 	mov    BYTE PTR ds:0xc003bea9,0x0
c00131d9:	c6 05 a8 be 03 c0 01 	mov    BYTE PTR ds:0xc003bea8,0x1
c00131e0:	c3                   	ret    
c00131e1:	90                   	nop

c00131e2 <Clock::Clock(char const*)>:
c00131e2:	83 ec 0c             	sub    esp,0xc
c00131e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e9:	83 ec 08             	sub    esp,0x8
c00131ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f0:	50                   	push   eax
c00131f1:	e8 74 07 00 00       	call   c001396a <Device::Device(char const*)>
c00131f6:	83 c4 10             	add    esp,0x10
c00131f9:	ba 18 99 03 c0       	mov    edx,0xc0039918
c00131fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013202:	89 10                	mov    DWORD PTR [eax],edx
c0013204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013208:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013212:	90                   	nop
c0013213:	83 c4 0c             	add    esp,0xc
c0013216:	c3                   	ret    
c0013217:	90                   	nop

c0013218 <Clock::~Clock()>:
c0013218:	83 ec 0c             	sub    esp,0xc
c001321b:	ba 18 99 03 c0       	mov    edx,0xc0039918
c0013220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013224:	89 10                	mov    DWORD PTR [eax],edx
c0013226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001322a:	83 ec 0c             	sub    esp,0xc
c001322d:	50                   	push   eax
c001322e:	e8 e9 03 00 00       	call   c001361c <Device::~Device()>
c0013233:	83 c4 10             	add    esp,0x10
c0013236:	90                   	nop
c0013237:	83 c4 0c             	add    esp,0xc
c001323a:	c3                   	ret    
c001323b:	90                   	nop

c001323c <Clock::~Clock()>:
c001323c:	83 ec 0c             	sub    esp,0xc
c001323f:	83 ec 0c             	sub    esp,0xc
c0013242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013246:	e8 cd ff ff ff       	call   c0013218 <Clock::~Clock()>
c001324b:	83 c4 10             	add    esp,0x10
c001324e:	83 ec 08             	sub    esp,0x8
c0013251:	68 58 01 00 00       	push   0x158
c0013256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001325a:	e8 20 f2 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001325f:	83 c4 10             	add    esp,0x10
c0013262:	83 c4 0c             	add    esp,0xc
c0013265:	c3                   	ret    

c0013266 <Clock::timeInSecondsLocal()>:
c0013266:	53                   	push   ebx
c0013267:	83 ec 14             	sub    esp,0x14
c001326a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001326e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013270:	50                   	push   eax
c0013271:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013274:	0f b6 0d a8 be 03 c0 	movzx  ecx,BYTE PTR ds:0xc003bea8
c001327b:	03 0d ac be 03 c0    	add    ecx,DWORD PTR ds:0xc003beac
c0013281:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013287:	89 cb                	mov    ebx,ecx
c0013289:	c1 fb 1f             	sar    ebx,0x1f
c001328c:	01 c8                	add    eax,ecx
c001328e:	11 da                	adc    edx,ebx
c0013290:	83 c4 10             	add    esp,0x10
c0013293:	31 c9                	xor    ecx,ecx
c0013295:	80 3d a9 be 03 c0 00 	cmp    BYTE PTR ds:0xc003bea9,0x0
c001329c:	74 05                	je     c00132a3 <Clock::timeInSecondsLocal()+0x3d>
c001329e:	b9 08 07 00 00       	mov    ecx,0x708
c00132a3:	31 db                	xor    ebx,ebx
c00132a5:	01 c8                	add    eax,ecx
c00132a7:	11 da                	adc    edx,ebx
c00132a9:	83 c4 08             	add    esp,0x8
c00132ac:	5b                   	pop    ebx
c00132ad:	c3                   	ret    

c00132ae <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00132ae:	57                   	push   edi
c00132af:	56                   	push   esi
c00132b0:	53                   	push   ebx
c00132b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00132b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00132b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00132bf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00132c2:	0f b6 05 a8 be 03 c0 	movzx  eax,BYTE PTR ds:0xc003bea8
c00132c9:	03 05 ac be 03 c0    	add    eax,DWORD PTR ds:0xc003beac
c00132cf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00132d5:	99                   	cdq    
c00132d6:	29 c6                	sub    esi,eax
c00132d8:	19 d7                	sbb    edi,edx
c00132da:	89 f0                	mov    eax,esi
c00132dc:	89 fa                	mov    edx,edi
c00132de:	31 f6                	xor    esi,esi
c00132e0:	80 3d a9 be 03 c0 00 	cmp    BYTE PTR ds:0xc003bea9,0x0
c00132e7:	74 05                	je     c00132ee <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00132e9:	be 08 07 00 00       	mov    esi,0x708
c00132ee:	31 ff                	xor    edi,edi
c00132f0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00132f4:	29 f0                	sub    eax,esi
c00132f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132fa:	19 fa                	sbb    edx,edi
c00132fc:	89 d8                	mov    eax,ebx
c00132fe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013302:	5b                   	pop    ebx
c0013303:	5e                   	pop    esi
c0013304:	5f                   	pop    edi
c0013305:	ff e0                	jmp    eax

c0013307 <datetimeToSeconds(datetime_t)>:
c0013307:	55                   	push   ebp
c0013308:	57                   	push   edi
c0013309:	56                   	push   esi
c001330a:	53                   	push   ebx
c001330b:	83 ec 14             	sub    esp,0x14
c001330e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013312:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013316:	89 d3                	mov    ebx,edx
c0013318:	0f b6 c6             	movzx  eax,dh
c001331b:	c1 eb 10             	shr    ebx,0x10
c001331e:	48                   	dec    eax
c001331f:	66 81 eb 6c 07       	sub    bx,0x76c
c0013324:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013328:	0f b6 f5             	movzx  esi,ch
c001332b:	89 cf                	mov    edi,ecx
c001332d:	6b f6 3c             	imul   esi,esi,0x3c
c0013330:	c1 ef 10             	shr    edi,0x10
c0013333:	0f b6 c9             	movzx  ecx,cl
c0013336:	89 f8                	mov    eax,edi
c0013338:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001333e:	0f b6 f8             	movzx  edi,al
c0013341:	0f b6 d2             	movzx  edx,dl
c0013344:	01 fe                	add    esi,edi
c0013346:	01 f1                	add    ecx,esi
c0013348:	0f b7 f3             	movzx  esi,bx
c001334b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001334f:	c1 f9 1f             	sar    ecx,0x1f
c0013352:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013357:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001335b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013360:	8b 0c 8d 60 99 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc66a0]
c0013367:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001336b:	76 29                	jbe    c0013396 <datetimeToSeconds(datetime_t)+0x8f>
c001336d:	f6 c3 03             	test   bl,0x3
c0013370:	75 24                	jne    c0013396 <datetimeToSeconds(datetime_t)+0x8f>
c0013372:	31 d2                	xor    edx,edx
c0013374:	bf 64 00 00 00       	mov    edi,0x64
c0013379:	89 d8                	mov    eax,ebx
c001337b:	66 f7 f7             	div    di
c001337e:	66 85 d2             	test   dx,dx
c0013381:	75 12                	jne    c0013395 <datetimeToSeconds(datetime_t)+0x8e>
c0013383:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013389:	bf 90 01 00 00       	mov    edi,0x190
c001338e:	99                   	cdq    
c001338f:	f7 ff                	idiv   edi
c0013391:	85 d2                	test   edx,edx
c0013393:	75 01                	jne    c0013396 <datetimeToSeconds(datetime_t)+0x8f>
c0013395:	41                   	inc    ecx
c0013396:	66 83 fb 46          	cmp    bx,0x46
c001339a:	76 45                	jbe    c00133e1 <datetimeToSeconds(datetime_t)+0xda>
c001339c:	bb 46 00 00 00       	mov    ebx,0x46
c00133a1:	bf 64 00 00 00       	mov    edi,0x64
c00133a6:	bd 90 01 00 00       	mov    ebp,0x190
c00133ab:	b8 6d 01 00 00       	mov    eax,0x16d
c00133b0:	f6 c3 03             	test   bl,0x3
c00133b3:	75 23                	jne    c00133d8 <datetimeToSeconds(datetime_t)+0xd1>
c00133b5:	89 d8                	mov    eax,ebx
c00133b7:	99                   	cdq    
c00133b8:	f7 ff                	idiv   edi
c00133ba:	b8 6e 01 00 00       	mov    eax,0x16e
c00133bf:	85 d2                	test   edx,edx
c00133c1:	75 15                	jne    c00133d8 <datetimeToSeconds(datetime_t)+0xd1>
c00133c3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00133c9:	99                   	cdq    
c00133ca:	f7 fd                	idiv   ebp
c00133cc:	83 fa 01             	cmp    edx,0x1
c00133cf:	19 c0                	sbb    eax,eax
c00133d1:	f7 d0                	not    eax
c00133d3:	05 6e 01 00 00       	add    eax,0x16e
c00133d8:	01 c1                	add    ecx,eax
c00133da:	43                   	inc    ebx
c00133db:	39 f3                	cmp    ebx,esi
c00133dd:	7c cc                	jl     c00133ab <datetimeToSeconds(datetime_t)+0xa4>
c00133df:	eb 35                	jmp    c0013416 <datetimeToSeconds(datetime_t)+0x10f>
c00133e1:	74 33                	je     c0013416 <datetimeToSeconds(datetime_t)+0x10f>
c00133e3:	b8 45 00 00 00       	mov    eax,0x45
c00133e8:	89 c2                	mov    edx,eax
c00133ea:	83 e2 03             	and    edx,0x3
c00133ed:	39 f0                	cmp    eax,esi
c00133ef:	7e 0f                	jle    c0013400 <datetimeToSeconds(datetime_t)+0xf9>
c00133f1:	83 fa 01             	cmp    edx,0x1
c00133f4:	19 d2                	sbb    edx,edx
c00133f6:	48                   	dec    eax
c00133f7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00133fe:	eb e8                	jmp    c00133e8 <datetimeToSeconds(datetime_t)+0xe1>
c0013400:	b8 6d 01 00 00       	mov    eax,0x16d
c0013405:	85 d2                	test   edx,edx
c0013407:	75 0b                	jne    c0013414 <datetimeToSeconds(datetime_t)+0x10d>
c0013409:	66 83 fb 01          	cmp    bx,0x1
c001340d:	19 c0                	sbb    eax,eax
c001340f:	05 6e 01 00 00       	add    eax,0x16e
c0013414:	29 c1                	sub    ecx,eax
c0013416:	b8 80 51 01 00       	mov    eax,0x15180
c001341b:	f7 e9                	imul   ecx
c001341d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013421:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013425:	83 c4 14             	add    esp,0x14
c0013428:	5b                   	pop    ebx
c0013429:	5e                   	pop    esi
c001342a:	5f                   	pop    edi
c001342b:	5d                   	pop    ebp
c001342c:	c3                   	ret    
c001342d:	90                   	nop

c001342e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001342e:	57                   	push   edi
c001342f:	56                   	push   esi
c0013430:	53                   	push   ebx
c0013431:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013435:	8b 06                	mov    eax,DWORD PTR [esi]
c0013437:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001343a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001343e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013442:	e8 c0 fe ff ff       	call   c0013307 <datetimeToSeconds(datetime_t)>
c0013447:	59                   	pop    ecx
c0013448:	0f b6 0d a8 be 03 c0 	movzx  ecx,BYTE PTR ds:0xc003bea8
c001344f:	5b                   	pop    ebx
c0013450:	03 0d ac be 03 c0    	add    ecx,DWORD PTR ds:0xc003beac
c0013456:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001345c:	89 cb                	mov    ebx,ecx
c001345e:	c1 fb 1f             	sar    ebx,0x1f
c0013461:	29 c8                	sub    eax,ecx
c0013463:	19 da                	sbb    edx,ebx
c0013465:	31 c9                	xor    ecx,ecx
c0013467:	80 3d a9 be 03 c0 00 	cmp    BYTE PTR ds:0xc003bea9,0x0
c001346e:	74 05                	je     c0013475 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013470:	b9 08 07 00 00       	mov    ecx,0x708
c0013475:	31 db                	xor    ebx,ebx
c0013477:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001347b:	29 c8                	sub    eax,ecx
c001347d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013481:	19 da                	sbb    edx,ebx
c0013483:	89 f8                	mov    eax,edi
c0013485:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013489:	5b                   	pop    ebx
c001348a:	5e                   	pop    esi
c001348b:	5f                   	pop    edi
c001348c:	ff e0                	jmp    eax

c001348e <secondsToDatetime(unsigned long long)>:
c001348e:	55                   	push   ebp
c001348f:	57                   	push   edi
c0013490:	56                   	push   esi
c0013491:	53                   	push   ebx
c0013492:	83 ec 1c             	sub    esp,0x1c
c0013495:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013499:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001349d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00134a1:	6a 00                	push   0x0
c00134a3:	68 80 51 01 00       	push   0x15180
c00134a8:	55                   	push   ebp
c00134a9:	57                   	push   edi
c00134aa:	e8 5d b2 00 00       	call   c001e70c <__udivdi3>
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00134b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134bc:	6a 00                	push   0x0
c00134be:	68 80 51 01 00       	push   0x15180
c00134c3:	55                   	push   ebp
c00134c4:	57                   	push   edi
c00134c5:	bf 10 0e 00 00       	mov    edi,0xe10
c00134ca:	e8 3d b3 00 00       	call   c001e80c <__umoddi3>
c00134cf:	83 c4 10             	add    esp,0x10
c00134d2:	99                   	cdq    
c00134d3:	f7 ff                	idiv   edi
c00134d5:	bf 3c 00 00 00       	mov    edi,0x3c
c00134da:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00134dd:	89 d0                	mov    eax,edx
c00134df:	99                   	cdq    
c00134e0:	f7 ff                	idiv   edi
c00134e2:	85 db                	test   ebx,ebx
c00134e4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00134e7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00134ea:	79 11                	jns    c00134fd <secondsToDatetime(unsigned long long)+0x6f>
c00134ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00134f0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00134f6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00134fb:	eb 07                	jmp    c0013504 <secondsToDatetime(unsigned long long)+0x76>
c00134fd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013502:	89 d8                	mov    eax,ebx
c0013504:	bf b4 05 00 00       	mov    edi,0x5b4
c0013509:	99                   	cdq    
c001350a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001350f:	f7 f9                	idiv   ecx
c0013511:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013516:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001351a:	31 d2                	xor    edx,edx
c001351c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013524:	01 c3                	add    ebx,eax
c0013526:	89 d8                	mov    eax,ebx
c0013528:	f7 f1                	div    ecx
c001352a:	31 d2                	xor    edx,edx
c001352c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001352f:	89 d8                	mov    eax,ebx
c0013531:	f7 f7                	div    edi
c0013533:	31 d2                	xor    edx,edx
c0013535:	29 c1                	sub    ecx,eax
c0013537:	89 d8                	mov    eax,ebx
c0013539:	f7 f5                	div    ebp
c001353b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013540:	29 c1                	sub    ecx,eax
c0013542:	31 d2                	xor    edx,edx
c0013544:	89 c8                	mov    eax,ecx
c0013546:	f7 f5                	div    ebp
c0013548:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001354d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013551:	31 d2                	xor    edx,edx
c0013553:	89 c8                	mov    eax,ecx
c0013555:	f7 f5                	div    ebp
c0013557:	31 d2                	xor    edx,edx
c0013559:	01 c3                	add    ebx,eax
c001355b:	89 c8                	mov    eax,ecx
c001355d:	f7 f7                	div    edi
c001355f:	bf 99 00 00 00       	mov    edi,0x99
c0013564:	29 c3                	sub    ebx,eax
c0013566:	31 d2                	xor    edx,edx
c0013568:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013570:	29 c3                	sub    ebx,eax
c0013572:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013575:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013578:	bb 05 00 00 00       	mov    ebx,0x5
c001357d:	83 c1 02             	add    ecx,0x2
c0013580:	89 c8                	mov    eax,ecx
c0013582:	f7 f7                	div    edi
c0013584:	31 d2                	xor    edx,edx
c0013586:	89 c7                	mov    edi,eax
c0013588:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001358e:	83 c0 02             	add    eax,0x2
c0013591:	f7 f3                	div    ebx
c0013593:	89 eb                	mov    ebx,ebp
c0013595:	29 c3                	sub    ebx,eax
c0013597:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001359d:	88 1e                	mov    BYTE PTR [esi],bl
c001359f:	19 c0                	sbb    eax,eax
c00135a1:	31 d2                	xor    edx,edx
c00135a3:	83 e0 0c             	and    eax,0xc
c00135a6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00135aa:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00135b2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00135b6:	83 f9 01             	cmp    ecx,0x1
c00135b9:	0f 96 c2             	setbe  dl
c00135bc:	41                   	inc    ecx
c00135bd:	01 d0                	add    eax,edx
c00135bf:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00135c2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00135c6:	83 c4 1c             	add    esp,0x1c
c00135c9:	89 f0                	mov    eax,esi
c00135cb:	5b                   	pop    ebx
c00135cc:	5e                   	pop    esi
c00135cd:	5f                   	pop    edi
c00135ce:	5d                   	pop    ebp
c00135cf:	c2 04 00             	ret    0x4

c00135d2 <Clock::timeInDatetimeLocal()>:
c00135d2:	53                   	push   ebx
c00135d3:	83 ec 14             	sub    esp,0x14
c00135d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00135da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00135de:	e8 83 fc ff ff       	call   c0013266 <Clock::timeInSecondsLocal()>
c00135e3:	83 c4 0c             	add    esp,0xc
c00135e6:	52                   	push   edx
c00135e7:	50                   	push   eax
c00135e8:	53                   	push   ebx
c00135e9:	e8 a0 fe ff ff       	call   c001348e <secondsToDatetime(unsigned long long)>
c00135ee:	89 d8                	mov    eax,ebx
c00135f0:	83 c4 14             	add    esp,0x14
c00135f3:	5b                   	pop    ebx
c00135f4:	c2 04 00             	ret    0x4
c00135f7:	90                   	nop

c00135f8 <Device::hibernate()>:
c00135f8:	c3                   	ret    
c00135f9:	90                   	nop

c00135fa <Device::wake()>:
c00135fa:	c3                   	ret    
c00135fb:	90                   	nop

c00135fc <Device::detect()>:
c00135fc:	c3                   	ret    
c00135fd:	90                   	nop

c00135fe <Device::disableLegacy()>:
c00135fe:	c3                   	ret    
c00135ff:	90                   	nop

c0013600 <Device::powerSaving(PowerSavingLevel)>:
c0013600:	c3                   	ret    
c0013601:	90                   	nop

c0013602 <DriverlessDevice::close(int, int, void*)>:
c0013602:	31 c0                	xor    eax,eax
c0013604:	c3                   	ret    
c0013605:	90                   	nop

c0013606 <DriverlessDevice::detect()>:
c0013606:	c3                   	ret    
c0013607:	90                   	nop

c0013608 <DriverlessDevice::open(int, int, void*)>:
c0013608:	83 ec 18             	sub    esp,0x18
c001360b:	68 90 99 03 c0       	push   0xc0039990
c0013610:	e8 c9 99 ff ff       	call   c000cfde <panic(char const*)>
c0013615:	83 c8 ff             	or     eax,0xffffffff
c0013618:	83 c4 1c             	add    esp,0x1c
c001361b:	c3                   	ret    

c001361c <Device::~Device()>:
c001361c:	ba b8 99 03 c0       	mov    edx,0xc00399b8
c0013621:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013625:	89 10                	mov    DWORD PTR [eax],edx
c0013627:	90                   	nop
c0013628:	c3                   	ret    
c0013629:	90                   	nop

c001362a <Device::~Device()>:
c001362a:	83 ec 0c             	sub    esp,0xc
c001362d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013631:	e8 e6 ff ff ff       	call   c001361c <Device::~Device()>
c0013636:	83 c4 04             	add    esp,0x4
c0013639:	83 ec 08             	sub    esp,0x8
c001363c:	68 58 01 00 00       	push   0x158
c0013641:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013645:	e8 35 ee ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001364a:	83 c4 10             	add    esp,0x10
c001364d:	83 c4 0c             	add    esp,0xc
c0013650:	c3                   	ret    
c0013651:	90                   	nop

c0013652 <Device::findAndLoadDriver()>:
c0013652:	c3                   	ret    
c0013653:	90                   	nop

c0013654 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013654:	57                   	push   edi
c0013655:	b9 09 00 00 00       	mov    ecx,0x9
c001365a:	56                   	push   esi
c001365b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001365f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013663:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001366d:	81 c7 18 01 00 00    	add    edi,0x118
c0013673:	fc                   	cld    
c0013674:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013676:	5e                   	pop    esi
c0013677:	5f                   	pop    edi
c0013678:	c3                   	ret    
c0013679:	90                   	nop

c001367a <Device::preOpenACPI(void*, char*, char*)>:
c001367a:	56                   	push   esi
c001367b:	53                   	push   ebx
c001367c:	83 ec 08             	sub    esp,0x8
c001367f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013683:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013687:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013691:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013695:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001369b:	6a 1e                	push   0x1e
c001369d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00136a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00136a7:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00136ad:	50                   	push   eax
c00136ae:	e8 81 cf fe ff       	call   c0000634 <memcpy>
c00136b3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00136b7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00136bb:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00136c3:	83 c4 14             	add    esp,0x14
c00136c6:	5b                   	pop    ebx
c00136c7:	5e                   	pop    esi
c00136c8:	e9 67 cf fe ff       	jmp    c0000634 <memcpy>
c00136cd:	90                   	nop

c00136ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00136ce:	55                   	push   ebp
c00136cf:	57                   	push   edi
c00136d0:	56                   	push   esi
c00136d1:	53                   	push   ebx
c00136d2:	83 ec 0c             	sub    esp,0xc
c00136d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136d9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00136dd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00136e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00136e5:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00136ea:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00136f1:	75 0b                	jne    c00136fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00136f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00136f5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00136f9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00136fc:	eb 24                	jmp    c0013722 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00136fe:	e8 a3 3a 00 00       	call   c00171a6 <thisCPU()>
c0013703:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013709:	8b 10                	mov    edx,DWORD PTR [eax]
c001370b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001370f:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0013713:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0013717:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001371b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001371f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013722:	83 c4 0c             	add    esp,0xc
c0013725:	5b                   	pop    ebx
c0013726:	5e                   	pop    esi
c0013727:	5f                   	pop    edi
c0013728:	5d                   	pop    ebp
c0013729:	ff e0                	jmp    eax
c001372b:	90                   	nop

c001372c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001372c:	57                   	push   edi
c001372d:	56                   	push   esi
c001372e:	53                   	push   ebx
c001372f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013733:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013737:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001373b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013740:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013747:	75 0b                	jne    c0013754 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013749:	8b 00                	mov    eax,DWORD PTR [eax]
c001374b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001374f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013752:	eb 20                	jmp    c0013774 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013754:	e8 4d 3a 00 00       	call   c00171a6 <thisCPU()>
c0013759:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001375f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013761:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013765:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013769:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001376d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013771:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013774:	5b                   	pop    ebx
c0013775:	5e                   	pop    esi
c0013776:	5f                   	pop    edi
c0013777:	ff e0                	jmp    eax
c0013779:	90                   	nop

c001377a <Device::addChild(Device*)>:
c001377a:	53                   	push   ebx
c001377b:	83 ec 08             	sub    esp,0x8
c001377e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013782:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013786:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001378c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013792:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013794:	85 d2                	test   edx,edx
c0013796:	74 04                	je     c001379c <Device::addChild(Device*)+0x22>
c0013798:	89 d3                	mov    ebx,edx
c001379a:	eb f6                	jmp    c0013792 <Device::addChild(Device*)+0x18>
c001379c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001379f:	83 ec 0c             	sub    esp,0xc
c00137a2:	6a 08                	push   0x8
c00137a4:	e8 c7 ec ff ff       	call   c0012470 <operator new(unsigned long)>
c00137a9:	89 03                	mov    DWORD PTR [ebx],eax
c00137ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00137b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137b8:	83 c4 18             	add    esp,0x18
c00137bb:	5b                   	pop    ebx
c00137bc:	c3                   	ret    
c00137bd:	90                   	nop

c00137be <Device::removeAllChildren()>:
c00137be:	56                   	push   esi
c00137bf:	53                   	push   ebx
c00137c0:	52                   	push   edx
c00137c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137c5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00137cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137ce:	74 17                	je     c00137e7 <Device::removeAllChildren()+0x29>
c00137d0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00137d3:	85 c0                	test   eax,eax
c00137d5:	74 0c                	je     c00137e3 <Device::removeAllChildren()+0x25>
c00137d7:	83 ec 0c             	sub    esp,0xc
c00137da:	8b 10                	mov    edx,DWORD PTR [eax]
c00137dc:	50                   	push   eax
c00137dd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00137e0:	83 c4 10             	add    esp,0x10
c00137e3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137e5:	eb e4                	jmp    c00137cb <Device::removeAllChildren()+0xd>
c00137e7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00137ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00137f3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00137f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013800:	58                   	pop    eax
c0013801:	5b                   	pop    ebx
c0013802:	5e                   	pop    esi
c0013803:	c3                   	ret    

c0013804 <Device::hibernateAll()>:
c0013804:	53                   	push   ebx
c0013805:	83 ec 14             	sub    esp,0x14
c0013808:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001380c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001380e:	53                   	push   ebx
c001380f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013812:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013818:	83 c4 10             	add    esp,0x10
c001381b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001381e:	74 0f                	je     c001382f <Device::hibernateAll()+0x2b>
c0013820:	83 ec 0c             	sub    esp,0xc
c0013823:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013826:	e8 d9 ff ff ff       	call   c0013804 <Device::hibernateAll()>
c001382b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001382d:	eb e9                	jmp    c0013818 <Device::hibernateAll()+0x14>
c001382f:	83 c4 08             	add    esp,0x8
c0013832:	5b                   	pop    ebx
c0013833:	c3                   	ret    

c0013834 <Device::wakeAll()>:
c0013834:	53                   	push   ebx
c0013835:	83 ec 14             	sub    esp,0x14
c0013838:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001383c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001383e:	53                   	push   ebx
c001383f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013842:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001384e:	74 0f                	je     c001385f <Device::wakeAll()+0x2b>
c0013850:	83 ec 0c             	sub    esp,0xc
c0013853:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013856:	e8 d9 ff ff ff       	call   c0013834 <Device::wakeAll()>
c001385b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001385d:	eb e9                	jmp    c0013848 <Device::wakeAll()+0x14>
c001385f:	83 c4 08             	add    esp,0x8
c0013862:	5b                   	pop    ebx
c0013863:	c3                   	ret    

c0013864 <Device::detectAll()>:
c0013864:	53                   	push   ebx
c0013865:	83 ec 14             	sub    esp,0x14
c0013868:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001386c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001386e:	53                   	push   ebx
c001386f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013872:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013878:	83 c4 10             	add    esp,0x10
c001387b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001387e:	74 0f                	je     c001388f <Device::detectAll()+0x2b>
c0013880:	83 ec 0c             	sub    esp,0xc
c0013883:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013886:	e8 d9 ff ff ff       	call   c0013864 <Device::detectAll()>
c001388b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001388d:	eb e9                	jmp    c0013878 <Device::detectAll()+0x14>
c001388f:	83 c4 08             	add    esp,0x8
c0013892:	5b                   	pop    ebx
c0013893:	c3                   	ret    

c0013894 <Device::disableLegacyAll()>:
c0013894:	53                   	push   ebx
c0013895:	83 ec 14             	sub    esp,0x14
c0013898:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001389c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001389e:	53                   	push   ebx
c001389f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00138a2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00138a8:	83 c4 10             	add    esp,0x10
c00138ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00138ae:	74 0f                	je     c00138bf <Device::disableLegacyAll()+0x2b>
c00138b0:	83 ec 0c             	sub    esp,0xc
c00138b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00138b6:	e8 d9 ff ff ff       	call   c0013894 <Device::disableLegacyAll()>
c00138bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00138bd:	eb e9                	jmp    c00138a8 <Device::disableLegacyAll()+0x14>
c00138bf:	83 c4 08             	add    esp,0x8
c00138c2:	5b                   	pop    ebx
c00138c3:	c3                   	ret    

c00138c4 <Device::loadDriversForAll()>:
c00138c4:	53                   	push   ebx
c00138c5:	83 ec 08             	sub    esp,0x8
c00138c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138cc:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138d2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00138d4:	85 db                	test   ebx,ebx
c00138d6:	74 12                	je     c00138ea <Device::loadDriversForAll()+0x26>
c00138d8:	83 ec 0c             	sub    esp,0xc
c00138db:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00138de:	e8 e1 ff ff ff       	call   c00138c4 <Device::loadDriversForAll()>
c00138e3:	83 c4 10             	add    esp,0x10
c00138e6:	89 d8                	mov    eax,ebx
c00138e8:	eb e8                	jmp    c00138d2 <Device::loadDriversForAll()+0xe>
c00138ea:	83 c4 08             	add    esp,0x8
c00138ed:	5b                   	pop    ebx
c00138ee:	c3                   	ret    
c00138ef:	90                   	nop

c00138f0 <Device::closeAll()>:
c00138f0:	53                   	push   ebx
c00138f1:	83 ec 08             	sub    esp,0x8
c00138f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138fa:	6a 00                	push   0x0
c00138fc:	6a 00                	push   0x0
c00138fe:	6a 00                	push   0x0
c0013900:	53                   	push   ebx
c0013901:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013904:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001390a:	83 c4 10             	add    esp,0x10
c001390d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013910:	74 0f                	je     c0013921 <Device::closeAll()+0x31>
c0013912:	83 ec 0c             	sub    esp,0xc
c0013915:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013918:	e8 d3 ff ff ff       	call   c00138f0 <Device::closeAll()>
c001391d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001391f:	eb e9                	jmp    c001390a <Device::closeAll()+0x1a>
c0013921:	83 c4 08             	add    esp,0x8
c0013924:	5b                   	pop    ebx
c0013925:	c3                   	ret    

c0013926 <Device::powerSavingAll(PowerSavingLevel)>:
c0013926:	56                   	push   esi
c0013927:	53                   	push   ebx
c0013928:	83 ec 0c             	sub    esp,0xc
c001392b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001392f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013933:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013935:	56                   	push   esi
c0013936:	53                   	push   ebx
c0013937:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001393a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013940:	83 c4 10             	add    esp,0x10
c0013943:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013946:	74 0f                	je     c0013957 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013948:	52                   	push   edx
c0013949:	52                   	push   edx
c001394a:	56                   	push   esi
c001394b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001394e:	e8 d3 ff ff ff       	call   c0013926 <Device::powerSavingAll(PowerSavingLevel)>
c0013953:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013955:	eb e9                	jmp    c0013940 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013957:	58                   	pop    eax
c0013958:	5b                   	pop    ebx
c0013959:	5e                   	pop    esi
c001395a:	c3                   	ret    
c001395b:	90                   	nop

c001395c <Device::setName(char const*)>:
c001395c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013964:	e9 5e ce fe ff       	jmp    c00007c7 <strcpy>
c0013969:	90                   	nop

c001396a <Device::Device(char const*)>:
c001396a:	83 ec 0c             	sub    esp,0xc
c001396d:	ba b8 99 03 c0       	mov    edx,0xc00399b8
c0013972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013976:	89 10                	mov    DWORD PTR [eax],edx
c0013978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013998:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00139a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00139b0:	83 ec 08             	sub    esp,0x8
c00139b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139bb:	e8 9c ff ff ff       	call   c001395c <Device::setName(char const*)>
c00139c0:	83 c4 10             	add    esp,0x10
c00139c3:	83 ec 0c             	sub    esp,0xc
c00139c6:	6a 08                	push   0x8
c00139c8:	e8 a3 ea ff ff       	call   c0012470 <operator new(unsigned long)>
c00139cd:	83 c4 10             	add    esp,0x10
c00139d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139e1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00139e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139eb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00139f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013a01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a17:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a22:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a30:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013a56:	90                   	nop
c0013a57:	83 c4 0c             	add    esp,0xc
c0013a5a:	c3                   	ret    
c0013a5b:	90                   	nop

c0013a5c <Device::getName()>:
c0013a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a60:	05 d0 00 00 00       	add    eax,0xd0
c0013a65:	c3                   	ret    

c0013a66 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013a66:	83 ec 0c             	sub    esp,0xc
c0013a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6d:	83 ec 08             	sub    esp,0x8
c0013a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a74:	50                   	push   eax
c0013a75:	e8 f0 fe ff ff       	call   c001396a <Device::Device(char const*)>
c0013a7a:	83 c4 10             	add    esp,0x10
c0013a7d:	ba e4 99 03 c0       	mov    edx,0xc00399e4
c0013a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a86:	89 10                	mov    DWORD PTR [eax],edx
c0013a88:	90                   	nop
c0013a89:	83 c4 0c             	add    esp,0xc
c0013a8c:	c3                   	ret    
c0013a8d:	90                   	nop

c0013a8e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013a8e:	57                   	push   edi
c0013a8f:	56                   	push   esi
c0013a90:	53                   	push   ebx
c0013a91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a95:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a9d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013aa3:	75 0c                	jne    c0013ab1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013aa5:	52                   	push   edx
c0013aa6:	52                   	push   edx
c0013aa7:	53                   	push   ebx
c0013aa8:	56                   	push   esi
c0013aa9:	e8 4e b4 00 00       	call   c001eefc <LinkedList<Device>::addElement(Device*)>
c0013aae:	83 c4 10             	add    esp,0x10
c0013ab1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ab7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013aba:	74 12                	je     c0013ace <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013abc:	50                   	push   eax
c0013abd:	57                   	push   edi
c0013abe:	56                   	push   esi
c0013abf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ac2:	e8 c7 ff ff ff       	call   c0013a8e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ac7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ac9:	83 c4 10             	add    esp,0x10
c0013acc:	eb e9                	jmp    c0013ab7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013ace:	5b                   	pop    ebx
c0013acf:	5e                   	pop    esi
c0013ad0:	5f                   	pop    edi
c0013ad1:	c3                   	ret    

c0013ad2 <getDevicesOfType(DeviceType)>:
c0013ad2:	53                   	push   ebx
c0013ad3:	83 ec 14             	sub    esp,0x14
c0013ad6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ada:	53                   	push   ebx
c0013adb:	e8 f8 b4 00 00       	call   c001efd8 <LinkedList<Device>::LinkedList()>
c0013ae0:	83 c4 0c             	add    esp,0xc
c0013ae3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ae7:	53                   	push   ebx
c0013ae8:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c0013aee:	e8 9b ff ff ff       	call   c0013a8e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013af3:	89 d8                	mov    eax,ebx
c0013af5:	83 c4 18             	add    esp,0x18
c0013af8:	5b                   	pop    ebx
c0013af9:	c2 04 00             	ret    0x4

c0013afc <HardDiskController::HardDiskController(char const*)>:
c0013afc:	83 ec 0c             	sub    esp,0xc
c0013aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b03:	83 ec 08             	sub    esp,0x8
c0013b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b0a:	50                   	push   eax
c0013b0b:	e8 5a fe ff ff       	call   c001396a <Device::Device(char const*)>
c0013b10:	83 c4 10             	add    esp,0x10
c0013b13:	ba 10 9a 03 c0       	mov    edx,0xc0039a10
c0013b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1c:	89 10                	mov    DWORD PTR [eax],edx
c0013b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b22:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013b2c:	90                   	nop
c0013b2d:	83 c4 0c             	add    esp,0xc
c0013b30:	c3                   	ret    
c0013b31:	90                   	nop

c0013b32 <HardDiskController::~HardDiskController()>:
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	ba 10 9a 03 c0       	mov    edx,0xc0039a10
c0013b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3e:	89 10                	mov    DWORD PTR [eax],edx
c0013b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b44:	83 ec 0c             	sub    esp,0xc
c0013b47:	50                   	push   eax
c0013b48:	e8 cf fa ff ff       	call   c001361c <Device::~Device()>
c0013b4d:	83 c4 10             	add    esp,0x10
c0013b50:	90                   	nop
c0013b51:	83 c4 0c             	add    esp,0xc
c0013b54:	c3                   	ret    
c0013b55:	90                   	nop

c0013b56 <HardDiskController::~HardDiskController()>:
c0013b56:	83 ec 0c             	sub    esp,0xc
c0013b59:	83 ec 0c             	sub    esp,0xc
c0013b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b60:	e8 cd ff ff ff       	call   c0013b32 <HardDiskController::~HardDiskController()>
c0013b65:	83 c4 10             	add    esp,0x10
c0013b68:	83 ec 08             	sub    esp,0x8
c0013b6b:	68 58 01 00 00       	push   0x158
c0013b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b74:	e8 06 e9 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0013b79:	83 c4 10             	add    esp,0x10
c0013b7c:	83 c4 0c             	add    esp,0xc
c0013b7f:	c3                   	ret    

c0013b80 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013b80:	83 ec 0c             	sub    esp,0xc
c0013b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b87:	83 ec 08             	sub    esp,0x8
c0013b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b8e:	50                   	push   eax
c0013b8f:	e8 d6 fd ff ff       	call   c001396a <Device::Device(char const*)>
c0013b94:	83 c4 10             	add    esp,0x10
c0013b97:	ba 3c 9a 03 c0       	mov    edx,0xc0039a3c
c0013b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba0:	89 10                	mov    DWORD PTR [eax],edx
c0013ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb1:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbc:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013be2:	90                   	nop
c0013be3:	83 c4 0c             	add    esp,0xc
c0013be6:	c3                   	ret    
c0013be7:	90                   	nop

c0013be8 <PhysicalDisk::startCache()>:
c0013be8:	56                   	push   esi
c0013be9:	53                   	push   ebx
c0013bea:	83 ec 10             	sub    esp,0x10
c0013bed:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bf1:	6a 30                	push   0x30
c0013bf3:	e8 78 e8 ff ff       	call   c0012470 <operator new(unsigned long)>
c0013bf8:	89 c6                	mov    esi,eax
c0013bfa:	58                   	pop    eax
c0013bfb:	5a                   	pop    edx
c0013bfc:	53                   	push   ebx
c0013bfd:	56                   	push   esi
c0013bfe:	e8 b7 1d 00 00       	call   c00159ba <VCache::VCache(PhysicalDisk*)>
c0013c03:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013c09:	83 c4 14             	add    esp,0x14
c0013c0c:	5b                   	pop    ebx
c0013c0d:	5e                   	pop    esi
c0013c0e:	c3                   	ret    
c0013c0f:	90                   	nop

c0013c10 <PhysicalDisk::~PhysicalDisk()>:
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	ba 3c 9a 03 c0       	mov    edx,0xc0039a3c
c0013c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1c:	89 10                	mov    DWORD PTR [eax],edx
c0013c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c22:	83 ec 0c             	sub    esp,0xc
c0013c25:	50                   	push   eax
c0013c26:	e8 f1 f9 ff ff       	call   c001361c <Device::~Device()>
c0013c2b:	83 c4 10             	add    esp,0x10
c0013c2e:	90                   	nop
c0013c2f:	83 c4 0c             	add    esp,0xc
c0013c32:	c3                   	ret    
c0013c33:	90                   	nop

c0013c34 <PhysicalDisk::~PhysicalDisk()>:
c0013c34:	83 ec 0c             	sub    esp,0xc
c0013c37:	83 ec 0c             	sub    esp,0xc
c0013c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c3e:	e8 cd ff ff ff       	call   c0013c10 <PhysicalDisk::~PhysicalDisk()>
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	83 ec 08             	sub    esp,0x8
c0013c49:	68 6c 01 00 00       	push   0x16c
c0013c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c52:	e8 28 e8 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0013c57:	83 c4 10             	add    esp,0x10
c0013c5a:	83 c4 0c             	add    esp,0xc
c0013c5d:	c3                   	ret    

c0013c5e <FPU::FPU(char const*)>:
c0013c5e:	83 ec 0c             	sub    esp,0xc
c0013c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c65:	83 ec 08             	sub    esp,0x8
c0013c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c6c:	50                   	push   eax
c0013c6d:	e8 f8 fc ff ff       	call   c001396a <Device::Device(char const*)>
c0013c72:	83 c4 10             	add    esp,0x10
c0013c75:	ba 78 9a 03 c0       	mov    edx,0xc0039a78
c0013c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7e:	89 10                	mov    DWORD PTR [eax],edx
c0013c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c84:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013c8e:	90                   	nop
c0013c8f:	83 c4 0c             	add    esp,0xc
c0013c92:	c3                   	ret    
c0013c93:	90                   	nop

c0013c94 <FPU::~FPU()>:
c0013c94:	83 ec 0c             	sub    esp,0xc
c0013c97:	ba 78 9a 03 c0       	mov    edx,0xc0039a78
c0013c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca0:	89 10                	mov    DWORD PTR [eax],edx
c0013ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca6:	83 ec 0c             	sub    esp,0xc
c0013ca9:	50                   	push   eax
c0013caa:	e8 6d f9 ff ff       	call   c001361c <Device::~Device()>
c0013caf:	83 c4 10             	add    esp,0x10
c0013cb2:	90                   	nop
c0013cb3:	83 c4 0c             	add    esp,0xc
c0013cb6:	c3                   	ret    
c0013cb7:	90                   	nop

c0013cb8 <FPU::~FPU()>:
c0013cb8:	83 ec 0c             	sub    esp,0xc
c0013cbb:	83 ec 0c             	sub    esp,0xc
c0013cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc2:	e8 cd ff ff ff       	call   c0013c94 <FPU::~FPU()>
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	83 ec 08             	sub    esp,0x8
c0013ccd:	68 58 01 00 00       	push   0x158
c0013cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cd6:	e8 a4 e7 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0013cdb:	83 c4 10             	add    esp,0x10
c0013cde:	83 c4 0c             	add    esp,0xc
c0013ce1:	c3                   	ret    

c0013ce2 <setupFPU()>:
c0013ce2:	53                   	push   ebx
c0013ce3:	83 ec 08             	sub    esp,0x8
c0013ce6:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0013ceb:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0013cf2:	74 19                	je     c0013d0d <setupFPU()+0x2b>
c0013cf4:	83 ec 0c             	sub    esp,0xc
c0013cf7:	68 58 01 00 00       	push   0x158
c0013cfc:	e8 6f e7 ff ff       	call   c0012470 <operator new(unsigned long)>
c0013d01:	89 c3                	mov    ebx,eax
c0013d03:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d06:	e8 d5 96 00 00       	call   c001d3e0 <AVX::AVX()>
c0013d0b:	eb 5b                	jmp    c0013d68 <setupFPU()+0x86>
c0013d0d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d13:	84 c0                	test   al,al
c0013d15:	79 19                	jns    c0013d30 <setupFPU()+0x4e>
c0013d17:	83 ec 0c             	sub    esp,0xc
c0013d1a:	68 58 01 00 00       	push   0x158
c0013d1f:	e8 4c e7 ff ff       	call   c0012470 <operator new(unsigned long)>
c0013d24:	89 c3                	mov    ebx,eax
c0013d26:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d29:	e8 d8 97 00 00       	call   c001d506 <SSE::SSE()>
c0013d2e:	eb 38                	jmp    c0013d68 <setupFPU()+0x86>
c0013d30:	a8 20                	test   al,0x20
c0013d32:	74 19                	je     c0013d4d <setupFPU()+0x6b>
c0013d34:	83 ec 0c             	sub    esp,0xc
c0013d37:	68 58 01 00 00       	push   0x158
c0013d3c:	e8 2f e7 ff ff       	call   c0012470 <operator new(unsigned long)>
c0013d41:	89 c3                	mov    ebx,eax
c0013d43:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d46:	e8 25 97 00 00       	call   c001d470 <MMX::MMX()>
c0013d4b:	eb 1b                	jmp    c0013d68 <setupFPU()+0x86>
c0013d4d:	a8 10                	test   al,0x10
c0013d4f:	74 1c                	je     c0013d6d <setupFPU()+0x8b>
c0013d51:	83 ec 0c             	sub    esp,0xc
c0013d54:	68 58 01 00 00       	push   0x158
c0013d59:	e8 12 e7 ff ff       	call   c0012470 <operator new(unsigned long)>
c0013d5e:	89 c3                	mov    ebx,eax
c0013d60:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d63:	e8 2c 98 00 00       	call   c001d594 <x87::x87()>
c0013d68:	83 c4 10             	add    esp,0x10
c0013d6b:	eb 12                	jmp    c0013d7f <setupFPU()+0x9d>
c0013d6d:	83 ec 0c             	sub    esp,0xc
c0013d70:	31 db                	xor    ebx,ebx
c0013d72:	68 68 9a 03 c0       	push   0xc0039a68
c0013d77:	e8 62 92 ff ff       	call   c000cfde <panic(char const*)>
c0013d7c:	83 c4 10             	add    esp,0x10
c0013d7f:	89 d8                	mov    eax,ebx
c0013d81:	83 c4 08             	add    esp,0x8
c0013d84:	5b                   	pop    ebx
c0013d85:	c3                   	ret    

c0013d86 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013d86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d8e:	c1 e0 04             	shl    eax,0x4
c0013d91:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013d95:	8d 50 10             	lea    edx,[eax+0x10]
c0013d98:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013d9e:	74 08                	je     c0013da8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013da0:	83 c0 04             	add    eax,0x4
c0013da3:	39 d0                	cmp    eax,edx
c0013da5:	75 f1                	jne    c0013d98 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013da7:	c3                   	ret    
c0013da8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013db2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013dbc:	eb e2                	jmp    c0013da0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013dbe <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013dbe:	57                   	push   edi
c0013dbf:	31 c0                	xor    eax,eax
c0013dc1:	56                   	push   esi
c0013dc2:	53                   	push   ebx
c0013dc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013dc7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013dcb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013dcf:	89 da                	mov    edx,ebx
c0013dd1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013dd5:	c1 e2 04             	shl    edx,0x4
c0013dd8:	01 ca                	add    edx,ecx
c0013dda:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013de2:	74 16                	je     c0013dfa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013de4:	40                   	inc    eax
c0013de5:	83 f8 04             	cmp    eax,0x4
c0013de8:	75 f0                	jne    c0013dda <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013dea:	c7 44 24 10 a8 9a 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039aa8
c0013df2:	5b                   	pop    ebx
c0013df3:	5e                   	pop    esi
c0013df4:	5f                   	pop    edi
c0013df5:	e9 e4 91 ff ff       	jmp    c000cfde <panic(char const*)>
c0013dfa:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013dfd:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013e00:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013e06:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013e0c:	5b                   	pop    ebx
c0013e0d:	5e                   	pop    esi
c0013e0e:	5f                   	pop    edi
c0013e0f:	c3                   	ret    

c0013e10 <doubleFault(regs*, void*)>:
c0013e10:	c7 44 24 04 d8 9b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039bd8
c0013e18:	e9 c1 91 ff ff       	jmp    c000cfde <panic(char const*)>
c0013e1d:	90                   	nop

c0013e1e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013e1e:	56                   	push   esi
c0013e1f:	53                   	push   ebx
c0013e20:	50                   	push   eax
c0013e21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e25:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013e29:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e2e:	75 35                	jne    c0013e65 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013e30:	8d 43 20             	lea    eax,[ebx+0x20]
c0013e33:	31 d2                	xor    edx,edx
c0013e35:	89 c1                	mov    ecx,eax
c0013e37:	c1 e1 04             	shl    ecx,0x4
c0013e3a:	01 f1                	add    ecx,esi
c0013e3c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013e44:	74 3e                	je     c0013e84 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013e46:	42                   	inc    edx
c0013e47:	83 fa 04             	cmp    edx,0x4
c0013e4a:	75 f0                	jne    c0013e3c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013e4c:	83 ec 0c             	sub    esp,0xc
c0013e4f:	68 1c 9b 03 c0       	push   0xc0039b1c
c0013e54:	e8 85 91 ff ff       	call   c000cfde <panic(char const*)>
c0013e59:	83 c4 10             	add    esp,0x10
c0013e5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013e61:	5a                   	pop    edx
c0013e62:	5b                   	pop    ebx
c0013e63:	5e                   	pop    esi
c0013e64:	c3                   	ret    
c0013e65:	83 ec 0c             	sub    esp,0xc
c0013e68:	56                   	push   esi
c0013e69:	e8 ee fb ff ff       	call   c0013a5c <Device::getName()>
c0013e6e:	83 c4 10             	add    esp,0x10
c0013e71:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e74:	75 ba                	jne    c0013e30 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e76:	83 fb 0f             	cmp    ebx,0xf
c0013e79:	7f 29                	jg     c0013ea4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013e7b:	0f b6 9b 40 b1 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4ec0]
c0013e82:	eb ac                	jmp    c0013e30 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e84:	8d 04 82             	lea    eax,[edx+eax*4]
c0013e87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e8b:	8d 04 86             	lea    eax,[esi+eax*4]
c0013e8e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013e94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e98:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013e9e:	89 d8                	mov    eax,ebx
c0013ea0:	5a                   	pop    edx
c0013ea1:	5b                   	pop    ebx
c0013ea2:	5e                   	pop    esi
c0013ea3:	c3                   	ret    
c0013ea4:	83 ec 0c             	sub    esp,0xc
c0013ea7:	68 e4 9a 03 c0       	push   0xc0039ae4
c0013eac:	e8 2d 91 ff ff       	call   c000cfde <panic(char const*)>
c0013eb1:	83 c4 10             	add    esp,0x10
c0013eb4:	e9 77 ff ff ff       	jmp    c0013e30 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013eb9:	90                   	nop

c0013eba <InterruptController::clearAllHandlers(int, bool)>:
c0013eba:	56                   	push   esi
c0013ebb:	53                   	push   ebx
c0013ebc:	52                   	push   edx
c0013ebd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ec1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ec5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013eca:	75 61                	jne    c0013f2d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013ecc:	8d 46 20             	lea    eax,[esi+0x20]
c0013ecf:	c1 e6 04             	shl    esi,0x4
c0013ed2:	c1 e0 04             	shl    eax,0x4
c0013ed5:	01 de                	add    esi,ebx
c0013ed7:	01 d8                	add    eax,ebx
c0013ed9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013ee3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013eed:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013ef7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013f01:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013f0b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013f15:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013f1f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013f29:	58                   	pop    eax
c0013f2a:	5b                   	pop    ebx
c0013f2b:	5e                   	pop    esi
c0013f2c:	c3                   	ret    
c0013f2d:	83 ec 0c             	sub    esp,0xc
c0013f30:	53                   	push   ebx
c0013f31:	e8 26 fb ff ff       	call   c0013a5c <Device::getName()>
c0013f36:	83 c4 10             	add    esp,0x10
c0013f39:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013f3c:	75 8e                	jne    c0013ecc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f3e:	83 fe 0f             	cmp    esi,0xf
c0013f41:	7f 09                	jg     c0013f4c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013f43:	0f b6 b6 40 b1 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffc4ec0]
c0013f4a:	eb 80                	jmp    c0013ecc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f4c:	83 ec 0c             	sub    esp,0xc
c0013f4f:	68 58 9b 03 c0       	push   0xc0039b58
c0013f54:	e8 85 90 ff ff       	call   c000cfde <panic(char const*)>
c0013f59:	83 c4 10             	add    esp,0x10
c0013f5c:	e9 6b ff ff ff       	jmp    c0013ecc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f61:	90                   	nop

c0013f62 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013f62:	56                   	push   esi
c0013f63:	53                   	push   ebx
c0013f64:	52                   	push   edx
c0013f65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f6d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013f72:	75 3a                	jne    c0013fae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013f74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f78:	8d 50 20             	lea    edx,[eax+0x20]
c0013f7b:	c1 e2 04             	shl    edx,0x4
c0013f7e:	8d 04 16             	lea    eax,[esi+edx*1]
c0013f81:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013f85:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013f8b:	74 0b                	je     c0013f98 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013f8d:	83 c0 04             	add    eax,0x4
c0013f90:	39 d0                	cmp    eax,edx
c0013f92:	75 f1                	jne    c0013f85 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013f94:	58                   	pop    eax
c0013f95:	5b                   	pop    ebx
c0013f96:	5e                   	pop    esi
c0013f97:	c3                   	ret    
c0013f98:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fa2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013fac:	eb df                	jmp    c0013f8d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013fae:	83 ec 0c             	sub    esp,0xc
c0013fb1:	56                   	push   esi
c0013fb2:	e8 a5 fa ff ff       	call   c0013a5c <Device::getName()>
c0013fb7:	83 c4 10             	add    esp,0x10
c0013fba:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013fbd:	75 b5                	jne    c0013f74 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013fbf:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013fc4:	7f 11                	jg     c0013fd7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013fc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fca:	0f b6 80 40 b1 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffc4ec0]
c0013fd1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fd5:	eb 9d                	jmp    c0013f74 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013fd7:	83 ec 0c             	sub    esp,0xc
c0013fda:	68 58 9b 03 c0       	push   0xc0039b58
c0013fdf:	e8 fa 8f ff ff       	call   c000cfde <panic(char const*)>
c0013fe4:	83 c4 10             	add    esp,0x10
c0013fe7:	eb 8b                	jmp    c0013f74 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013fe9 <nmiHandler(regs*, void*)>:
c0013fe9:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0013fee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ff2:	e9 5b 77 ff ff       	jmp    c000b752 <Computer::handleNMI()>

c0013ff7 <int_handler>:
c0013ff7:	55                   	push   ebp
c0013ff8:	57                   	push   edi
c0013ff9:	56                   	push   esi
c0013ffa:	53                   	push   ebx
c0013ffb:	83 ec 0c             	sub    esp,0xc
c0013ffe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014002:	80 3d 92 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb92,0x0
c0014009:	74 0b                	je     c0014016 <int_handler+0x1f>
c001400b:	fa                   	cli    
c001400c:	f4                   	hlt    
c001400d:	80 3d 92 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb92,0x0
c0014014:	75 f5                	jne    c001400b <int_handler+0x14>
c0014016:	e8 8b 31 00 00       	call   c00171a6 <thisCPU()>
c001401b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001401e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014024:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014027:	83 f8 17             	cmp    eax,0x17
c001402a:	77 13                	ja     c001403f <int_handler+0x48>
c001402c:	83 ec 08             	sub    esp,0x8
c001402f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014031:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014034:	0f b6 c0             	movzx  eax,al
c0014037:	50                   	push   eax
c0014038:	57                   	push   edi
c0014039:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001403c:	83 c4 10             	add    esp,0x10
c001403f:	83 c3 15             	add    ebx,0x15
c0014042:	c1 e3 04             	shl    ebx,0x4
c0014045:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014049:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014050:	31 db                	xor    ebx,ebx
c0014052:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014056:	85 c0                	test   eax,eax
c0014058:	74 13                	je     c001406d <int_handler+0x76>
c001405a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001405d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014061:	74 1c                	je     c001407f <int_handler+0x88>
c0014063:	83 ec 08             	sub    esp,0x8
c0014066:	52                   	push   edx
c0014067:	56                   	push   esi
c0014068:	ff d0                	call   eax
c001406a:	83 c4 10             	add    esp,0x10
c001406d:	43                   	inc    ebx
c001406e:	83 fb 04             	cmp    ebx,0x4
c0014071:	75 df                	jne    c0014052 <int_handler+0x5b>
c0014073:	83 c4 0c             	add    esp,0xc
c0014076:	31 c0                	xor    eax,eax
c0014078:	5b                   	pop    ebx
c0014079:	31 d2                	xor    edx,edx
c001407b:	5e                   	pop    esi
c001407c:	5f                   	pop    edi
c001407d:	5d                   	pop    ebp
c001407e:	c3                   	ret    
c001407f:	83 ec 08             	sub    esp,0x8
c0014082:	52                   	push   edx
c0014083:	56                   	push   esi
c0014084:	ff d0                	call   eax
c0014086:	83 c4 10             	add    esp,0x10
c0014089:	83 c4 0c             	add    esp,0xc
c001408c:	5b                   	pop    ebx
c001408d:	5e                   	pop    esi
c001408e:	5f                   	pop    edi
c001408f:	5d                   	pop    ebp
c0014090:	c3                   	ret    
c0014091:	90                   	nop

c0014092 <InterruptController::InterruptController(char const*)>:
c0014092:	83 ec 1c             	sub    esp,0x1c
c0014095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014099:	83 ec 08             	sub    esp,0x8
c001409c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00140a0:	50                   	push   eax
c00140a1:	e8 c4 f8 ff ff       	call   c001396a <Device::Device(char const*)>
c00140a6:	83 c4 10             	add    esp,0x10
c00140a9:	ba 50 9d 03 c0       	mov    edx,0xc0039d50
c00140ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140b2:	89 10                	mov    DWORD PTR [eax],edx
c00140b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140b8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00140c2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140ca:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00140d2:	7f 5e                	jg     c0014132 <InterruptController::InterruptController(char const*)+0xa0>
c00140d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140dc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00140e1:	7f 49                	jg     c001412c <InterruptController::InterruptController(char const*)+0x9a>
c00140e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140eb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00140f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140f6:	01 ca                	add    edx,ecx
c00140f8:	83 c2 54             	add    edx,0x54
c00140fb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014103:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014107:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001410b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014112:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014116:	01 ca                	add    edx,ecx
c0014118:	81 c2 54 04 00 00    	add    edx,0x454
c001411e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014126:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001412a:	eb b0                	jmp    c00140dc <InterruptController::InterruptController(char const*)+0x4a>
c001412c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014130:	eb 98                	jmp    c00140ca <InterruptController::InterruptController(char const*)+0x38>
c0014132:	90                   	nop
c0014133:	83 c4 1c             	add    esp,0x1c
c0014136:	c3                   	ret    
c0014137:	90                   	nop

c0014138 <InterruptController::~InterruptController()>:
c0014138:	83 ec 0c             	sub    esp,0xc
c001413b:	ba 50 9d 03 c0       	mov    edx,0xc0039d50
c0014140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014144:	89 10                	mov    DWORD PTR [eax],edx
c0014146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414a:	83 ec 0c             	sub    esp,0xc
c001414d:	50                   	push   eax
c001414e:	e8 c9 f4 ff ff       	call   c001361c <Device::~Device()>
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	90                   	nop
c0014157:	83 c4 0c             	add    esp,0xc
c001415a:	c3                   	ret    
c001415b:	90                   	nop

c001415c <InterruptController::~InterruptController()>:
c001415c:	83 ec 0c             	sub    esp,0xc
c001415f:	83 ec 0c             	sub    esp,0xc
c0014162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014166:	e8 cd ff ff ff       	call   c0014138 <InterruptController::~InterruptController()>
c001416b:	83 c4 10             	add    esp,0x10
c001416e:	83 ec 08             	sub    esp,0x8
c0014171:	68 58 21 00 00       	push   0x2158
c0014176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001417a:	e8 00 e3 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001417f:	83 c4 10             	add    esp,0x10
c0014182:	83 c4 0c             	add    esp,0xc
c0014185:	c3                   	ret    

c0014186 <displayDebugInfo(regs*)>:
c0014186:	55                   	push   ebp
c0014187:	57                   	push   edi
c0014188:	56                   	push   esi
c0014189:	53                   	push   ebx
c001418a:	83 ec 24             	sub    esp,0x24
c001418d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014191:	0f 20 c2             	mov    edx,cr0
c0014194:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014198:	0f 20 d7             	mov    edi,cr2
c001419b:	0f 20 de             	mov    esi,cr3
c001419e:	0f 20 e5             	mov    ebp,cr4
c00141a1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00141a4:	68 e5 9b 03 c0       	push   0xc0039be5
c00141a9:	e8 12 8d ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00141ae:	58                   	pop    eax
c00141af:	5a                   	pop    edx
c00141b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141b3:	68 f0 9b 03 c0       	push   0xc0039bf0
c00141b8:	e8 03 8d ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00141bd:	59                   	pop    ecx
c00141be:	58                   	pop    eax
c00141bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00141c2:	68 fb 9b 03 c0       	push   0xc0039bfb
c00141c7:	e8 f4 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00141cc:	58                   	pop    eax
c00141cd:	5a                   	pop    edx
c00141ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141d1:	68 06 9c 03 c0       	push   0xc0039c06
c00141d6:	e8 e5 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00141db:	59                   	pop    ecx
c00141dc:	58                   	pop    eax
c00141dd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00141e0:	68 11 9c 03 c0       	push   0xc0039c11
c00141e5:	e8 d6 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00141ea:	58                   	pop    eax
c00141eb:	5a                   	pop    edx
c00141ec:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00141ef:	68 1c 9c 03 c0       	push   0xc0039c1c
c00141f4:	e8 c7 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00141f9:	59                   	pop    ecx
c00141fa:	58                   	pop    eax
c00141fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00141fe:	68 36 9c 03 c0       	push   0xc0039c36
c0014203:	e8 b8 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0014208:	58                   	pop    eax
c0014209:	5a                   	pop    edx
c001420a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001420d:	68 27 9c 03 c0       	push   0xc0039c27
c0014212:	e8 a9 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0014217:	59                   	pop    ecx
c0014218:	58                   	pop    eax
c0014219:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001421c:	68 32 9c 03 c0       	push   0xc0039c32
c0014221:	e8 9a 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0014226:	58                   	pop    eax
c0014227:	5a                   	pop    edx
c0014228:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001422b:	68 41 9c 03 c0       	push   0xc0039c41
c0014230:	e8 8b 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0014235:	59                   	pop    ecx
c0014236:	58                   	pop    eax
c0014237:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001423a:	68 4c 9c 03 c0       	push   0xc0039c4c
c001423f:	e8 7c 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0014244:	58                   	pop    eax
c0014245:	5a                   	pop    edx
c0014246:	57                   	push   edi
c0014247:	68 57 9c 03 c0       	push   0xc0039c57
c001424c:	e8 6f 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0014251:	59                   	pop    ecx
c0014252:	58                   	pop    eax
c0014253:	56                   	push   esi
c0014254:	68 62 9c 03 c0       	push   0xc0039c62
c0014259:	e8 62 8c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001425e:	58                   	pop    eax
c001425f:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014264:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001426a:	e8 d8 c3 ff ff       	call   c0010647 <setActiveTerminal(VgaText*)>
c001426f:	58                   	pop    eax
c0014270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014273:	5a                   	pop    edx
c0014274:	c1 e0 05             	shl    eax,0x5
c0014277:	05 a0 ae 03 c0       	add    eax,0xc003aea0
c001427c:	50                   	push   eax
c001427d:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014282:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014288:	e8 d9 c7 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c001428d:	59                   	pop    ecx
c001428e:	58                   	pop    eax
c001428f:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014294:	68 6d 9c 03 c0       	push   0xc0039c6d
c0014299:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001429f:	e8 c2 c7 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c00142a4:	58                   	pop    eax
c00142a5:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00142aa:	5a                   	pop    edx
c00142ab:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00142ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142b4:	e8 d3 c7 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c00142b9:	59                   	pop    ecx
c00142ba:	58                   	pop    eax
c00142bb:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00142c0:	68 75 9c 03 c0       	push   0xc0039c75
c00142c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142cb:	e8 96 c7 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c00142d0:	58                   	pop    eax
c00142d1:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00142d6:	5a                   	pop    edx
c00142d7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00142da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e0:	e8 a7 c7 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c00142e5:	59                   	pop    ecx
c00142e6:	58                   	pop    eax
c00142e7:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00142ec:	68 7d 9c 03 c0       	push   0xc0039c7d
c00142f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142f7:	e8 6a c7 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c00142fc:	58                   	pop    eax
c00142fd:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014302:	5a                   	pop    edx
c0014303:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014306:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001430c:	e8 7b c7 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c0014311:	59                   	pop    ecx
c0014312:	58                   	pop    eax
c0014313:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014318:	68 85 9c 03 c0       	push   0xc0039c85
c001431d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014323:	e8 3e c7 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c0014328:	58                   	pop    eax
c0014329:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c001432e:	5a                   	pop    edx
c001432f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014332:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014338:	e8 4f c7 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c001433d:	59                   	pop    ecx
c001433e:	58                   	pop    eax
c001433f:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014344:	68 8d 9c 03 c0       	push   0xc0039c8d
c0014349:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001434f:	e8 12 c7 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c0014354:	58                   	pop    eax
c0014355:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c001435a:	5a                   	pop    edx
c001435b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001435e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014364:	e8 23 c7 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c0014369:	59                   	pop    ecx
c001436a:	58                   	pop    eax
c001436b:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014370:	68 95 9c 03 c0       	push   0xc0039c95
c0014375:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001437b:	e8 e6 c6 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c0014380:	58                   	pop    eax
c0014381:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014386:	5a                   	pop    edx
c0014387:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001438a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014390:	e8 f7 c6 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c0014395:	59                   	pop    ecx
c0014396:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c001439b:	5b                   	pop    ebx
c001439c:	68 9d 9c 03 c0       	push   0xc0039c9d
c00143a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143a7:	e8 ba c6 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c00143ac:	58                   	pop    eax
c00143ad:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00143b2:	5a                   	pop    edx
c00143b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00143b7:	52                   	push   edx
c00143b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143be:	e8 c9 c6 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c00143c3:	59                   	pop    ecx
c00143c4:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00143c9:	5b                   	pop    ebx
c00143ca:	68 a6 9c 03 c0       	push   0xc0039ca6
c00143cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143d5:	e8 8c c6 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c00143da:	58                   	pop    eax
c00143db:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00143e0:	5a                   	pop    edx
c00143e1:	57                   	push   edi
c00143e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143e8:	e8 9f c6 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c00143ed:	59                   	pop    ecx
c00143ee:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00143f3:	5b                   	pop    ebx
c00143f4:	68 ae 9c 03 c0       	push   0xc0039cae
c00143f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143ff:	e8 62 c6 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c0014404:	5f                   	pop    edi
c0014405:	58                   	pop    eax
c0014406:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c001440b:	56                   	push   esi
c001440c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014412:	e8 75 c6 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c0014417:	58                   	pop    eax
c0014418:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c001441d:	5a                   	pop    edx
c001441e:	68 b6 9c 03 c0       	push   0xc0039cb6
c0014423:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014429:	e8 38 c6 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c001442e:	59                   	pop    ecx
c001442f:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014434:	5b                   	pop    ebx
c0014435:	55                   	push   ebp
c0014436:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001443c:	e8 4b c6 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c0014441:	5e                   	pop    esi
c0014442:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014447:	5f                   	pop    edi
c0014448:	68 be 9c 03 c0       	push   0xc0039cbe
c001444d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014453:	e8 0e c6 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c0014458:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c001445d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014463:	e8 c8 ab 00 00       	call   c001f030 <CPU::readDR0()>
c0014468:	5d                   	pop    ebp
c0014469:	5a                   	pop    edx
c001446a:	50                   	push   eax
c001446b:	53                   	push   ebx
c001446c:	e8 1b c6 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c0014471:	59                   	pop    ecx
c0014472:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014477:	5b                   	pop    ebx
c0014478:	68 c7 9c 03 c0       	push   0xc0039cc7
c001447d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014483:	e8 de c5 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c0014488:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c001448d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014493:	e8 aa ab 00 00       	call   c001f042 <CPU::readDR1()>
c0014498:	5e                   	pop    esi
c0014499:	5f                   	pop    edi
c001449a:	50                   	push   eax
c001449b:	53                   	push   ebx
c001449c:	e8 eb c5 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c00144a1:	5d                   	pop    ebp
c00144a2:	58                   	pop    eax
c00144a3:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00144a8:	68 cf 9c 03 c0       	push   0xc0039ccf
c00144ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144b3:	e8 ae c5 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c00144b8:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00144bd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144c3:	e8 8c ab 00 00       	call   c001f054 <CPU::readDR2()>
c00144c8:	5a                   	pop    edx
c00144c9:	59                   	pop    ecx
c00144ca:	50                   	push   eax
c00144cb:	53                   	push   ebx
c00144cc:	e8 bb c5 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c00144d1:	5b                   	pop    ebx
c00144d2:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00144d7:	5e                   	pop    esi
c00144d8:	68 d7 9c 03 c0       	push   0xc0039cd7
c00144dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144e3:	e8 7e c5 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c00144e8:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c00144ed:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144f3:	e8 6e ab 00 00       	call   c001f066 <CPU::readDR3()>
c00144f8:	5f                   	pop    edi
c00144f9:	5d                   	pop    ebp
c00144fa:	50                   	push   eax
c00144fb:	53                   	push   ebx
c00144fc:	e8 8b c5 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c0014501:	58                   	pop    eax
c0014502:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014507:	5a                   	pop    edx
c0014508:	68 df 9c 03 c0       	push   0xc0039cdf
c001450d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014513:	e8 4e c5 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c0014518:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c001451d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014523:	e8 50 ab 00 00       	call   c001f078 <CPU::readDR6()>
c0014528:	59                   	pop    ecx
c0014529:	5e                   	pop    esi
c001452a:	50                   	push   eax
c001452b:	53                   	push   ebx
c001452c:	e8 5b c5 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c0014531:	5f                   	pop    edi
c0014532:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014537:	5d                   	pop    ebp
c0014538:	68 e7 9c 03 c0       	push   0xc0039ce7
c001453d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014543:	e8 1e c5 ff ff       	call   c0010a66 <VgaText::puts(char const*)>
c0014548:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c001454d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014553:	e8 32 ab 00 00       	call   c001f08a <CPU::readDR7()>
c0014558:	5a                   	pop    edx
c0014559:	59                   	pop    ecx
c001455a:	50                   	push   eax
c001455b:	53                   	push   ebx
c001455c:	e8 2b c5 ff ff       	call   c0010a8c <VgaText::putx(unsigned int)>
c0014561:	fa                   	cli    
c0014562:	f4                   	hlt    
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	eb fe                	jmp    c0014566 <displayDebugInfo(regs*)+0x3e0>

c0014568 <gpFault(regs*, void*)>:
c0014568:	53                   	push   ebx
c0014569:	83 ec 14             	sub    esp,0x14
c001456c:	c7 05 c8 be 03 c0 8b 87 01 c0 	mov    DWORD PTR ds:0xc003bec8,0xc001878b
c0014576:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001457a:	53                   	push   ebx
c001457b:	e8 0b 42 00 00       	call   c001878b <vm8086FaultHandler(regs*)>
c0014580:	83 c4 10             	add    esp,0x10
c0014583:	84 c0                	test   al,al
c0014585:	74 05                	je     c001458c <gpFault(regs*, void*)+0x24>
c0014587:	83 c4 08             	add    esp,0x8
c001458a:	5b                   	pop    ebx
c001458b:	c3                   	ret    
c001458c:	83 ec 0c             	sub    esp,0xc
c001458f:	68 ef 9c 03 c0       	push   0xc0039cef
c0014594:	e8 27 89 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0014599:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001459c:	e8 e5 fb ff ff       	call   c0014186 <displayDebugInfo(regs*)>

c00145a1 <pgFault(regs*, void*)>:
c00145a1:	83 ec 18             	sub    esp,0x18
c00145a4:	68 0a 9d 03 c0       	push   0xc0039d0a
c00145a9:	e8 12 89 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00145ae:	58                   	pop    eax
c00145af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145b3:	e8 ce fb ff ff       	call   c0014186 <displayDebugInfo(regs*)>

c00145b8 <otherISRHandler(regs*, void*)>:
c00145b8:	53                   	push   ebx
c00145b9:	83 ec 0c             	sub    esp,0xc
c00145bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00145c3:	50                   	push   eax
c00145c4:	50                   	push   eax
c00145c5:	68 17 9d 03 c0       	push   0xc0039d17
c00145ca:	e8 f1 88 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00145cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145d2:	e8 af fb ff ff       	call   c0014186 <displayDebugInfo(regs*)>

c00145d7 <opcodeFault(regs*, void*)>:
c00145d7:	53                   	push   ebx
c00145d8:	83 ec 08             	sub    esp,0x8
c00145db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145df:	e8 c2 2b 00 00       	call   c00171a6 <thisCPU()>
c00145e4:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c00145eb:	74 16                	je     c0014603 <opcodeFault(regs*, void*)+0x2c>
c00145ed:	83 ec 0c             	sub    esp,0xc
c00145f0:	68 94 9b 03 c0       	push   0xc0039b94
c00145f5:	e8 c6 88 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00145fa:	83 43 38 20          	add    DWORD PTR [ebx+0x38],0x20
c00145fe:	83 c4 18             	add    esp,0x18
c0014601:	5b                   	pop    ebx
c0014602:	c3                   	ret    
c0014603:	83 ec 0c             	sub    esp,0xc
c0014606:	68 34 9d 03 c0       	push   0xc0039d34
c001460b:	e8 b0 88 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0014610:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014613:	c1 e0 04             	shl    eax,0x4
c0014616:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0014619:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001461d:	89 14 24             	mov    DWORD PTR [esp],edx
c0014620:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0014624:	52                   	push   edx
c0014625:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0014629:	52                   	push   edx
c001462a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001462d:	50                   	push   eax
c001462e:	68 b8 9b 03 c0       	push   0xc0039bb8
c0014633:	e8 88 88 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0014638:	83 c4 14             	add    esp,0x14
c001463b:	53                   	push   ebx
c001463c:	e8 45 fb ff ff       	call   c0014186 <displayDebugInfo(regs*)>

c0014641 <displayProgramFault(char const*)>:
c0014641:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014646:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014649:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001464f:	85 c0                	test   eax,eax
c0014651:	74 15                	je     c0014668 <displayProgramFault(char const*)+0x27>
c0014653:	83 ec 0c             	sub    esp,0xc
c0014656:	6a 04                	push   0x4
c0014658:	6a 0f                	push   0xf
c001465a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001465e:	50                   	push   eax
c001465f:	e8 c4 c0 ff ff       	call   c0010728 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014664:	83 c4 1c             	add    esp,0x1c
c0014667:	c3                   	ret    
c0014668:	c3                   	ret    
c0014669:	90                   	nop

c001466a <InterruptController::convertLegacyIRQNumber(int)>:
c001466a:	53                   	push   ebx
c001466b:	83 ec 14             	sub    esp,0x14
c001466e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014676:	e8 e1 f3 ff ff       	call   c0013a5c <Device::getName()>
c001467b:	83 c4 10             	add    esp,0x10
c001467e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014681:	74 07                	je     c001468a <InterruptController::convertLegacyIRQNumber(int)+0x20>
c0014683:	89 d8                	mov    eax,ebx
c0014685:	83 c4 08             	add    esp,0x8
c0014688:	5b                   	pop    ebx
c0014689:	c3                   	ret    
c001468a:	83 fb 0f             	cmp    ebx,0xf
c001468d:	7f 0e                	jg     c001469d <InterruptController::convertLegacyIRQNumber(int)+0x33>
c001468f:	0f b6 9b 40 b1 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4ec0]
c0014696:	83 c4 08             	add    esp,0x8
c0014699:	89 d8                	mov    eax,ebx
c001469b:	5b                   	pop    ebx
c001469c:	c3                   	ret    
c001469d:	83 ec 0c             	sub    esp,0xc
c00146a0:	68 e4 9a 03 c0       	push   0xc0039ae4
c00146a5:	e8 34 89 ff ff       	call   c000cfde <panic(char const*)>
c00146aa:	89 d8                	mov    eax,ebx
c00146ac:	83 c4 10             	add    esp,0x10
c00146af:	83 c4 08             	add    esp,0x8
c00146b2:	5b                   	pop    ebx
c00146b3:	c3                   	ret    

c00146b4 <setupInterruptController()>:
c00146b4:	56                   	push   esi
c00146b5:	53                   	push   ebx
c00146b6:	51                   	push   ecx
c00146b7:	e8 e7 2a 00 00       	call   c00171a3 <getCPUNumber()>
c00146bc:	85 c0                	test   eax,eax
c00146be:	0f 85 10 02 00 00    	jne    c00148d4 <setupInterruptController()+0x220>
c00146c4:	83 ec 0c             	sub    esp,0xc
c00146c7:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c00146cc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00146d2:	68 58 21 00 00       	push   0x2158
c00146d7:	83 e0 01             	and    eax,0x1
c00146da:	89 c6                	mov    esi,eax
c00146dc:	e8 8f dd ff ff       	call   c0012470 <operator new(unsigned long)>
c00146e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00146e4:	89 c3                	mov    ebx,eax
c00146e6:	e8 15 95 00 00       	call   c001dc00 <PIC::PIC()>
c00146eb:	6a 00                	push   0x0
c00146ed:	6a 00                	push   0x0
c00146ef:	6a 00                	push   0x0
c00146f1:	53                   	push   ebx
c00146f2:	e8 4d 98 00 00       	call   c001df44 <PIC::open(int, int, void*)>
c00146f7:	83 c4 20             	add    esp,0x20
c00146fa:	89 f0                	mov    eax,esi
c00146fc:	84 c0                	test   al,al
c00146fe:	0f 85 92 01 00 00    	jne    c0014896 <setupInterruptController()+0x1e2>
c0014704:	83 ec 08             	sub    esp,0x8
c0014707:	53                   	push   ebx
c0014708:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001470e:	e8 67 f0 ff ff       	call   c001377a <Device::addChild(Device*)>
c0014713:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014715:	6a 00                	push   0x0
c0014717:	68 b8 45 01 c0       	push   0xc00145b8
c001471c:	6a 00                	push   0x0
c001471e:	53                   	push   ebx
c001471f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014722:	83 c4 20             	add    esp,0x20
c0014725:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014727:	6a 00                	push   0x0
c0014729:	68 b8 45 01 c0       	push   0xc00145b8
c001472e:	6a 01                	push   0x1
c0014730:	53                   	push   ebx
c0014731:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014734:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014736:	6a 00                	push   0x0
c0014738:	68 e9 3f 01 c0       	push   0xc0013fe9
c001473d:	6a 02                	push   0x2
c001473f:	53                   	push   ebx
c0014740:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014743:	83 c4 20             	add    esp,0x20
c0014746:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014748:	6a 00                	push   0x0
c001474a:	68 b8 45 01 c0       	push   0xc00145b8
c001474f:	6a 03                	push   0x3
c0014751:	53                   	push   ebx
c0014752:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014755:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014757:	6a 00                	push   0x0
c0014759:	68 b8 45 01 c0       	push   0xc00145b8
c001475e:	6a 04                	push   0x4
c0014760:	53                   	push   ebx
c0014761:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014764:	83 c4 20             	add    esp,0x20
c0014767:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014769:	6a 00                	push   0x0
c001476b:	68 b8 45 01 c0       	push   0xc00145b8
c0014770:	6a 05                	push   0x5
c0014772:	53                   	push   ebx
c0014773:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014776:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014778:	6a 00                	push   0x0
c001477a:	68 d7 45 01 c0       	push   0xc00145d7
c001477f:	6a 06                	push   0x6
c0014781:	53                   	push   ebx
c0014782:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014785:	83 c4 20             	add    esp,0x20
c0014788:	8b 03                	mov    eax,DWORD PTR [ebx]
c001478a:	6a 00                	push   0x0
c001478c:	68 b8 45 01 c0       	push   0xc00145b8
c0014791:	6a 07                	push   0x7
c0014793:	53                   	push   ebx
c0014794:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014797:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014799:	6a 00                	push   0x0
c001479b:	68 10 3e 01 c0       	push   0xc0013e10
c00147a0:	6a 08                	push   0x8
c00147a2:	53                   	push   ebx
c00147a3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147a6:	83 c4 20             	add    esp,0x20
c00147a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ab:	6a 00                	push   0x0
c00147ad:	68 b8 45 01 c0       	push   0xc00145b8
c00147b2:	6a 09                	push   0x9
c00147b4:	53                   	push   ebx
c00147b5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ba:	6a 00                	push   0x0
c00147bc:	68 b8 45 01 c0       	push   0xc00145b8
c00147c1:	6a 0a                	push   0xa
c00147c3:	53                   	push   ebx
c00147c4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147c7:	83 c4 20             	add    esp,0x20
c00147ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147cc:	6a 00                	push   0x0
c00147ce:	68 b8 45 01 c0       	push   0xc00145b8
c00147d3:	6a 0b                	push   0xb
c00147d5:	53                   	push   ebx
c00147d6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147db:	6a 00                	push   0x0
c00147dd:	68 b8 45 01 c0       	push   0xc00145b8
c00147e2:	6a 0c                	push   0xc
c00147e4:	53                   	push   ebx
c00147e5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147e8:	83 c4 20             	add    esp,0x20
c00147eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ed:	6a 00                	push   0x0
c00147ef:	68 68 45 01 c0       	push   0xc0014568
c00147f4:	6a 0d                	push   0xd
c00147f6:	53                   	push   ebx
c00147f7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147fc:	6a 00                	push   0x0
c00147fe:	68 a1 45 01 c0       	push   0xc00145a1
c0014803:	6a 0e                	push   0xe
c0014805:	53                   	push   ebx
c0014806:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014809:	83 c4 20             	add    esp,0x20
c001480c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001480e:	6a 00                	push   0x0
c0014810:	68 b8 45 01 c0       	push   0xc00145b8
c0014815:	6a 0f                	push   0xf
c0014817:	53                   	push   ebx
c0014818:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001481b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001481d:	6a 00                	push   0x0
c001481f:	68 b8 45 01 c0       	push   0xc00145b8
c0014824:	6a 10                	push   0x10
c0014826:	53                   	push   ebx
c0014827:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001482a:	83 c4 20             	add    esp,0x20
c001482d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001482f:	6a 00                	push   0x0
c0014831:	68 b8 45 01 c0       	push   0xc00145b8
c0014836:	6a 11                	push   0x11
c0014838:	53                   	push   ebx
c0014839:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001483c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001483e:	6a 00                	push   0x0
c0014840:	68 b8 45 01 c0       	push   0xc00145b8
c0014845:	6a 12                	push   0x12
c0014847:	53                   	push   ebx
c0014848:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001484b:	83 c4 20             	add    esp,0x20
c001484e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014850:	6a 00                	push   0x0
c0014852:	68 b8 45 01 c0       	push   0xc00145b8
c0014857:	6a 13                	push   0x13
c0014859:	53                   	push   ebx
c001485a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001485d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001485f:	6a 00                	push   0x0
c0014861:	68 b8 45 01 c0       	push   0xc00145b8
c0014866:	6a 14                	push   0x14
c0014868:	53                   	push   ebx
c0014869:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001486c:	83 c4 20             	add    esp,0x20
c001486f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014871:	6a 00                	push   0x0
c0014873:	68 b8 45 01 c0       	push   0xc00145b8
c0014878:	6a 1e                	push   0x1e
c001487a:	53                   	push   ebx
c001487b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001487e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014880:	6a 00                	push   0x0
c0014882:	68 1e fe 00 c0       	push   0xc000fe1e
c0014887:	6a 60                	push   0x60
c0014889:	53                   	push   ebx
c001488a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001488d:	83 c4 20             	add    esp,0x20
c0014890:	89 d8                	mov    eax,ebx
c0014892:	5a                   	pop    edx
c0014893:	5b                   	pop    ebx
c0014894:	5e                   	pop    esi
c0014895:	c3                   	ret    
c0014896:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014898:	6a 00                	push   0x0
c001489a:	6a 00                	push   0x0
c001489c:	6a 00                	push   0x0
c001489e:	53                   	push   ebx
c001489f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148a7:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00148aa:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00148b1:	e8 ba db ff ff       	call   c0012470 <operator new(unsigned long)>
c00148b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b9:	89 c3                	mov    ebx,eax
c00148bb:	e8 7e 8e 00 00       	call   c001d73e <APIC::APIC()>
c00148c0:	6a 00                	push   0x0
c00148c2:	6a 00                	push   0x0
c00148c4:	6a 00                	push   0x0
c00148c6:	53                   	push   ebx
c00148c7:	e8 90 8d 00 00       	call   c001d65c <APIC::open(int, int, void*)>
c00148cc:	83 c4 20             	add    esp,0x20
c00148cf:	e9 30 fe ff ff       	jmp    c0014704 <setupInterruptController()+0x50>
c00148d4:	83 ec 0c             	sub    esp,0xc
c00148d7:	68 58 21 00 00       	push   0x2158
c00148dc:	e8 8f db ff ff       	call   c0012470 <operator new(unsigned long)>
c00148e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00148e4:	89 c3                	mov    ebx,eax
c00148e6:	e8 53 8e 00 00       	call   c001d73e <APIC::APIC()>
c00148eb:	6a 00                	push   0x0
c00148ed:	6a 00                	push   0x0
c00148ef:	6a 00                	push   0x0
c00148f1:	53                   	push   ebx
c00148f2:	e8 65 8d 00 00       	call   c001d65c <APIC::open(int, int, void*)>
c00148f7:	83 c4 18             	add    esp,0x18
c00148fa:	53                   	push   ebx
c00148fb:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c0014901:	e8 74 ee ff ff       	call   c001377a <Device::addChild(Device*)>
c0014906:	83 c4 10             	add    esp,0x10
c0014909:	89 d8                	mov    eax,ebx
c001490b:	5a                   	pop    edx
c001490c:	5b                   	pop    ebx
c001490d:	5e                   	pop    esi
c001490e:	c3                   	ret    
c001490f:	90                   	nop

c0014910 <startGUI(void*)>:
c0014910:	55                   	push   ebp
c0014911:	89 e5                	mov    ebp,esp
c0014913:	53                   	push   ebx
c0014914:	83 ec 04             	sub    esp,0x4
c0014917:	e8 48 9a ff ff       	call   c000e364 <unlockScheduler()>
c001491c:	e8 2c 9a ff ff       	call   c000e34d <getIRQNestingLevel()>
c0014921:	83 ec 08             	sub    esp,0x8
c0014924:	50                   	push   eax
c0014925:	68 90 9d 03 c0       	push   0xc0039d90
c001492a:	e8 91 85 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001492f:	83 c4 10             	add    esp,0x10
c0014932:	8b 1d e8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9e8
c0014938:	83 ec 0c             	sub    esp,0xc
c001493b:	68 aa 9d 03 c0       	push   0xc0039daa
c0014940:	e8 5c 7d ff ff       	call   c000c6a1 <loadDLL(char const*)>
c0014945:	83 c4 10             	add    esp,0x10
c0014948:	83 ec 08             	sub    esp,0x8
c001494b:	53                   	push   ebx
c001494c:	50                   	push   eax
c001494d:	e8 18 7e ff ff       	call   c000c76a <executeDLL(unsigned long, void*)>
c0014952:	83 c4 10             	add    esp,0x10
c0014955:	8b 1d e8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9e8
c001495b:	83 ec 0c             	sub    esp,0xc
c001495e:	68 c4 9d 03 c0       	push   0xc0039dc4
c0014963:	e8 39 7d ff ff       	call   c000c6a1 <loadDLL(char const*)>
c0014968:	83 c4 10             	add    esp,0x10
c001496b:	83 ec 08             	sub    esp,0x8
c001496e:	53                   	push   ebx
c001496f:	50                   	push   eax
c0014970:	e8 f5 7d ff ff       	call   c000c76a <executeDLL(unsigned long, void*)>
c0014975:	83 c4 10             	add    esp,0x10
c0014978:	90                   	nop
c0014979:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001497c:	c9                   	leave  
c001497d:	c3                   	ret    

c001497e <sendKeyToTerminal(unsigned char)>:
c001497e:	55                   	push   ebp
c001497f:	89 e5                	mov    ebp,esp
c0014981:	83 ec 28             	sub    esp,0x28
c0014984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014987:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001498a:	a1 84 be 03 c0       	mov    eax,ds:0xc003be84
c001498f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014993:	83 ec 08             	sub    esp,0x8
c0014996:	52                   	push   edx
c0014997:	50                   	push   eax
c0014998:	e8 c7 c2 ff ff       	call   c0010c64 <VgaText::receiveKey(unsigned char)>
c001499d:	83 c4 10             	add    esp,0x10
c00149a0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00149a4:	75 41                	jne    c00149e7 <sendKeyToTerminal(unsigned char)+0x69>
c00149a6:	e8 de 99 ff ff       	call   c000e389 <lockStuff()>
c00149ab:	a1 e0 be 03 c0       	mov    eax,ds:0xc003bee0
c00149b0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149b3:	c7 05 e0 be 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bee0,0x0
c00149bd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00149c1:	74 1f                	je     c00149e2 <sendKeyToTerminal(unsigned char)+0x64>
c00149c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149c6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00149c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00149cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149cf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149d2:	83 ec 0c             	sub    esp,0xc
c00149d5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00149d8:	e8 a9 a1 ff ff       	call   c000eb86 <unblockTask(ThreadControlBlock*)>
c00149dd:	83 c4 10             	add    esp,0x10
c00149e0:	eb db                	jmp    c00149bd <sendKeyToTerminal(unsigned char)+0x3f>
c00149e2:	e8 34 9d ff ff       	call   c000e71b <unlockStuff()>
c00149e7:	90                   	nop
c00149e8:	c9                   	leave  
c00149e9:	c3                   	ret    

c00149ea <sendKeyboardToken(KeyboardToken)>:
c00149ea:	55                   	push   ebp
c00149eb:	89 e5                	mov    ebp,esp
c00149ed:	83 ec 18             	sub    esp,0x18
c00149f0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00149f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f6:	0f b7 c0             	movzx  eax,ax
c00149f9:	83 f2 01             	xor    edx,0x1
c00149fc:	88 90 00 bf 03 c0    	mov    BYTE PTR [eax-0x3ffc4100],dl
c0014a02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a05:	66 3d 03 02          	cmp    ax,0x203
c0014a09:	75 07                	jne    c0014a12 <sendKeyboardToken(KeyboardToken)+0x28>
c0014a0b:	a0 00 c0 03 c0       	mov    al,ds:0xc003c000
c0014a10:	84 c0                	test   al,al
c0014a12:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0014a16:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0014a19:	a0 08 c3 03 c0       	mov    al,ds:0xc003c308
c0014a1e:	38 c2                	cmp    dl,al
c0014a20:	74 1c                	je     c0014a3e <sendKeyboardToken(KeyboardToken)+0x54>
c0014a22:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0014a25:	a2 08 c3 03 c0       	mov    ds:0xc003c308,al
c0014a2a:	a0 08 c3 03 c0       	mov    al,ds:0xc003c308
c0014a2f:	0f b6 c0             	movzx  eax,al
c0014a32:	83 ec 0c             	sub    esp,0xc
c0014a35:	50                   	push   eax
c0014a36:	e8 97 b4 ff ff       	call   c000fed2 <setTerminalScrollLock(bool)>
c0014a3b:	83 c4 10             	add    esp,0x10
c0014a3e:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0014a41:	84 c0                	test   al,al
c0014a43:	0f 84 ae 00 00 00    	je     c0014af7 <sendKeyboardToken(KeyboardToken)+0x10d>
c0014a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4c:	66 3d 10 03          	cmp    ax,0x310
c0014a50:	75 06                	jne    c0014a58 <sendKeyboardToken(KeyboardToken)+0x6e>
c0014a52:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0014a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5b:	66 3d 11 03          	cmp    ax,0x311
c0014a5f:	75 06                	jne    c0014a67 <sendKeyboardToken(KeyboardToken)+0x7d>
c0014a61:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0014a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6a:	66 3d 12 03          	cmp    ax,0x312
c0014a6e:	75 06                	jne    c0014a76 <sendKeyboardToken(KeyboardToken)+0x8c>
c0014a70:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0014a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a79:	66 3d 13 03          	cmp    ax,0x313
c0014a7d:	75 06                	jne    c0014a85 <sendKeyboardToken(KeyboardToken)+0x9b>
c0014a7f:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0014a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a88:	66 3d 14 03          	cmp    ax,0x314
c0014a8c:	75 06                	jne    c0014a94 <sendKeyboardToken(KeyboardToken)+0xaa>
c0014a8e:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0014a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a97:	66 3d 15 03          	cmp    ax,0x315
c0014a9b:	75 06                	jne    c0014aa3 <sendKeyboardToken(KeyboardToken)+0xb9>
c0014a9d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa6:	66 3d 16 03          	cmp    ax,0x316
c0014aaa:	75 06                	jne    c0014ab2 <sendKeyboardToken(KeyboardToken)+0xc8>
c0014aac:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0014ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab5:	66 3d 17 03          	cmp    ax,0x317
c0014ab9:	75 06                	jne    c0014ac1 <sendKeyboardToken(KeyboardToken)+0xd7>
c0014abb:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0014ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac4:	66 3d 18 03          	cmp    ax,0x318
c0014ac8:	75 06                	jne    c0014ad0 <sendKeyboardToken(KeyboardToken)+0xe6>
c0014aca:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0014ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad3:	66 3d 19 03          	cmp    ax,0x319
c0014ad7:	75 06                	jne    c0014adf <sendKeyboardToken(KeyboardToken)+0xf5>
c0014ad9:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0014adf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae2:	66 3d 1a 03          	cmp    ax,0x31a
c0014ae6:	0f 85 c9 00 00 00    	jne    c0014bb5 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014aec:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0014af2:	e9 be 00 00 00       	jmp    c0014bb5 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afa:	66 3d 10 03          	cmp    ax,0x310
c0014afe:	75 0a                	jne    c0014b0a <sendKeyboardToken(KeyboardToken)+0x120>
c0014b00:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0014b06:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b0d:	66 3d 11 03          	cmp    ax,0x311
c0014b11:	75 0a                	jne    c0014b1d <sendKeyboardToken(KeyboardToken)+0x133>
c0014b13:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0014b19:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b20:	66 3d 12 03          	cmp    ax,0x312
c0014b24:	75 0a                	jne    c0014b30 <sendKeyboardToken(KeyboardToken)+0x146>
c0014b26:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0014b2c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b33:	66 3d 13 03          	cmp    ax,0x313
c0014b37:	75 0a                	jne    c0014b43 <sendKeyboardToken(KeyboardToken)+0x159>
c0014b39:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0014b3f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b46:	66 3d 14 03          	cmp    ax,0x314
c0014b4a:	75 0a                	jne    c0014b56 <sendKeyboardToken(KeyboardToken)+0x16c>
c0014b4c:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0014b52:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b59:	66 3d 15 03          	cmp    ax,0x315
c0014b5d:	75 0a                	jne    c0014b69 <sendKeyboardToken(KeyboardToken)+0x17f>
c0014b5f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014b65:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b6c:	66 3d 16 03          	cmp    ax,0x316
c0014b70:	75 0a                	jne    c0014b7c <sendKeyboardToken(KeyboardToken)+0x192>
c0014b72:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014b78:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b7f:	66 3d 17 03          	cmp    ax,0x317
c0014b83:	75 0a                	jne    c0014b8f <sendKeyboardToken(KeyboardToken)+0x1a5>
c0014b85:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0014b8b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b92:	66 3d 18 03          	cmp    ax,0x318
c0014b96:	75 0a                	jne    c0014ba2 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0014b98:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0014b9e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba5:	66 3d 19 03          	cmp    ax,0x319
c0014ba9:	75 0a                	jne    c0014bb5 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014bab:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0014bb1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb8:	66 3d 00 02          	cmp    ax,0x200
c0014bbc:	75 2a                	jne    c0014be8 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014bbe:	a0 00 c3 03 c0       	mov    al,ds:0xc003c300
c0014bc3:	83 f0 01             	xor    eax,0x1
c0014bc6:	84 c0                	test   al,al
c0014bc8:	74 1e                	je     c0014be8 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014bca:	a1 3c bc 03 c0       	mov    eax,ds:0xc003bc3c
c0014bcf:	6a 01                	push   0x1
c0014bd1:	6a 00                	push   0x0
c0014bd3:	68 10 49 01 c0       	push   0xc0014910
c0014bd8:	50                   	push   eax
c0014bd9:	e8 ae 98 ff ff       	call   c000e48c <Process::createThread(void (*)(void*), void*, int)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	c6 05 00 c3 03 c0 01 	mov    BYTE PTR ds:0xc003c300,0x1
c0014be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014beb:	66 3d 1d 03          	cmp    ax,0x31d
c0014bef:	75 06                	jne    c0014bf7 <sendKeyboardToken(KeyboardToken)+0x20d>
c0014bf1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0014bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfa:	66 3d 1c 03          	cmp    ax,0x31c
c0014bfe:	75 06                	jne    c0014c06 <sendKeyboardToken(KeyboardToken)+0x21c>
c0014c00:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0014c06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c09:	66 3d 1b 03          	cmp    ax,0x31b
c0014c0d:	75 06                	jne    c0014c15 <sendKeyboardToken(KeyboardToken)+0x22b>
c0014c0f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0014c15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c18:	66 3d 1e 03          	cmp    ax,0x31e
c0014c1c:	75 06                	jne    c0014c24 <sendKeyboardToken(KeyboardToken)+0x23a>
c0014c1e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0014c24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c27:	66 3d 1f 03          	cmp    ax,0x31f
c0014c2b:	75 06                	jne    c0014c33 <sendKeyboardToken(KeyboardToken)+0x249>
c0014c2d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0014c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c36:	66 3d 1a 03          	cmp    ax,0x31a
c0014c3a:	75 06                	jne    c0014c42 <sendKeyboardToken(KeyboardToken)+0x258>
c0014c3c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0014c42:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0014c46:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014c49:	83 f0 01             	xor    eax,0x1
c0014c4c:	84 c0                	test   al,al
c0014c4e:	74 77                	je     c0014cc7 <sendKeyboardToken(KeyboardToken)+0x2dd>
c0014c50:	a0 01 c0 03 c0       	mov    al,ds:0xc003c001
c0014c55:	84 c0                	test   al,al
c0014c57:	74 41                	je     c0014c9a <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014c59:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014c5d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0014c61:	74 2b                	je     c0014c8e <sendKeyboardToken(KeyboardToken)+0x2a4>
c0014c63:	8b 15 04 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c304
c0014c69:	89 d0                	mov    eax,edx
c0014c6b:	c1 e0 02             	shl    eax,0x2
c0014c6e:	01 d0                	add    eax,edx
c0014c70:	01 c0                	add    eax,eax
c0014c72:	a3 04 c3 03 c0       	mov    ds:0xc003c304,eax
c0014c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7a:	0f b7 c0             	movzx  eax,ax
c0014c7d:	8d 50 d0             	lea    edx,[eax-0x30]
c0014c80:	a1 04 c3 03 c0       	mov    eax,ds:0xc003c304
c0014c85:	01 d0                	add    eax,edx
c0014c87:	a3 04 c3 03 c0       	mov    ds:0xc003c304,eax
c0014c8c:	eb 6d                	jmp    c0014cfb <sendKeyboardToken(KeyboardToken)+0x311>
c0014c8e:	c7 05 04 c3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c304,0x0
c0014c98:	eb 61                	jmp    c0014cfb <sendKeyboardToken(KeyboardToken)+0x311>
c0014c9a:	a1 04 c3 03 c0       	mov    eax,ds:0xc003c304
c0014c9f:	85 c0                	test   eax,eax
c0014ca1:	74 18                	je     c0014cbb <sendKeyboardToken(KeyboardToken)+0x2d1>
c0014ca3:	a1 04 c3 03 c0       	mov    eax,ds:0xc003c304
c0014ca8:	0f b6 c0             	movzx  eax,al
c0014cab:	83 ec 0c             	sub    esp,0xc
c0014cae:	50                   	push   eax
c0014caf:	e8 ca fc ff ff       	call   c001497e <sendKeyToTerminal(unsigned char)>
c0014cb4:	83 c4 10             	add    esp,0x10
c0014cb7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014cbb:	c7 05 04 c3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c304,0x0
c0014cc5:	eb 34                	jmp    c0014cfb <sendKeyboardToken(KeyboardToken)+0x311>
c0014cc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cca:	66 3d 01 01          	cmp    ax,0x101
c0014cce:	75 2b                	jne    c0014cfb <sendKeyboardToken(KeyboardToken)+0x311>
c0014cd0:	a1 04 c3 03 c0       	mov    eax,ds:0xc003c304
c0014cd5:	85 c0                	test   eax,eax
c0014cd7:	74 18                	je     c0014cf1 <sendKeyboardToken(KeyboardToken)+0x307>
c0014cd9:	a1 04 c3 03 c0       	mov    eax,ds:0xc003c304
c0014cde:	0f b6 c0             	movzx  eax,al
c0014ce1:	83 ec 0c             	sub    esp,0xc
c0014ce4:	50                   	push   eax
c0014ce5:	e8 94 fc ff ff       	call   c001497e <sendKeyToTerminal(unsigned char)>
c0014cea:	83 c4 10             	add    esp,0x10
c0014ced:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014cf1:	c7 05 04 c3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c304,0x0
c0014cfb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014cfe:	83 f0 01             	xor    eax,0x1
c0014d01:	84 c0                	test   al,al
c0014d03:	74 4c                	je     c0014d51 <sendKeyboardToken(KeyboardToken)+0x367>
c0014d05:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014d08:	83 f0 01             	xor    eax,0x1
c0014d0b:	84 c0                	test   al,al
c0014d0d:	74 42                	je     c0014d51 <sendKeyboardToken(KeyboardToken)+0x367>
c0014d0f:	a0 00 c0 03 c0       	mov    al,ds:0xc003c000
c0014d14:	83 f0 01             	xor    eax,0x1
c0014d17:	84 c0                	test   al,al
c0014d19:	74 36                	je     c0014d51 <sendKeyboardToken(KeyboardToken)+0x367>
c0014d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1e:	66 83 f8 1f          	cmp    ax,0x1f
c0014d22:	76 09                	jbe    c0014d2d <sendKeyboardToken(KeyboardToken)+0x343>
c0014d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d27:	66 83 f8 7e          	cmp    ax,0x7e
c0014d2b:	76 12                	jbe    c0014d3f <sendKeyboardToken(KeyboardToken)+0x355>
c0014d2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d30:	66 83 f8 0a          	cmp    ax,0xa
c0014d34:	74 09                	je     c0014d3f <sendKeyboardToken(KeyboardToken)+0x355>
c0014d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d39:	66 83 f8 08          	cmp    ax,0x8
c0014d3d:	75 12                	jne    c0014d51 <sendKeyboardToken(KeyboardToken)+0x367>
c0014d3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d42:	0f b6 c0             	movzx  eax,al
c0014d45:	83 ec 0c             	sub    esp,0xc
c0014d48:	50                   	push   eax
c0014d49:	e8 30 fc ff ff       	call   c001497e <sendKeyToTerminal(unsigned char)>
c0014d4e:	83 c4 10             	add    esp,0x10
c0014d51:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014d54:	83 f0 01             	xor    eax,0x1
c0014d57:	84 c0                	test   al,al
c0014d59:	74 4f                	je     c0014daa <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d5b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014d5e:	83 f0 01             	xor    eax,0x1
c0014d61:	84 c0                	test   al,al
c0014d63:	74 45                	je     c0014daa <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d65:	a0 00 c0 03 c0       	mov    al,ds:0xc003c000
c0014d6a:	84 c0                	test   al,al
c0014d6c:	74 3c                	je     c0014daa <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d71:	66 83 f8 3f          	cmp    ax,0x3f
c0014d75:	76 33                	jbe    c0014daa <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7a:	66 83 f8 7f          	cmp    ax,0x7f
c0014d7e:	77 2a                	ja     c0014daa <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d83:	88 c2                	mov    dl,al
c0014d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d88:	66 83 f8 5f          	cmp    ax,0x5f
c0014d8c:	76 04                	jbe    c0014d92 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014d8e:	b0 20                	mov    al,0x20
c0014d90:	eb 02                	jmp    c0014d94 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0014d92:	b0 00                	mov    al,0x0
c0014d94:	29 c2                	sub    edx,eax
c0014d96:	88 d0                	mov    al,dl
c0014d98:	83 e8 40             	sub    eax,0x40
c0014d9b:	0f b6 c0             	movzx  eax,al
c0014d9e:	83 ec 0c             	sub    esp,0xc
c0014da1:	50                   	push   eax
c0014da2:	e8 d7 fb ff ff       	call   c001497e <sendKeyToTerminal(unsigned char)>
c0014da7:	83 c4 10             	add    esp,0x10
c0014daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dad:	66 3d 00 03          	cmp    ax,0x300
c0014db1:	75 0f                	jne    c0014dc2 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014db3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014db6:	83 f0 01             	xor    eax,0x1
c0014db9:	84 c0                	test   al,al
c0014dbb:	74 05                	je     c0014dc2 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014dbd:	e8 37 b9 ff ff       	call   c00106f9 <doTerminalCycle()>
c0014dc2:	90                   	nop
c0014dc3:	c9                   	leave  
c0014dc4:	c3                   	ret    

c0014dc5 <clearInternalKeybuffer(VgaText*)>:
c0014dc5:	55                   	push   ebp
c0014dc6:	89 e5                	mov    ebp,esp
c0014dc8:	83 ec 08             	sub    esp,0x8
c0014dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dce:	05 34 11 00 00       	add    eax,0x1134
c0014dd3:	83 ec 0c             	sub    esp,0xc
c0014dd6:	50                   	push   eax
c0014dd7:	e8 f8 b8 fe ff       	call   c00006d4 <strlen>
c0014ddc:	83 c4 10             	add    esp,0x10
c0014ddf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014de2:	81 c2 34 11 00 00    	add    edx,0x1134
c0014de8:	83 ec 04             	sub    esp,0x4
c0014deb:	50                   	push   eax
c0014dec:	6a 00                	push   0x0
c0014dee:	52                   	push   edx
c0014def:	e8 b7 b8 fe ff       	call   c00006ab <memset>
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	90                   	nop
c0014df8:	c9                   	leave  
c0014df9:	c3                   	ret    

c0014dfa <readKeyboard(VgaText*, char*, unsigned long)>:
c0014dfa:	55                   	push   ebp
c0014dfb:	89 e5                	mov    ebp,esp
c0014dfd:	83 ec 18             	sub    esp,0x18
c0014e00:	fb                   	sti    
c0014e01:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014e08:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014e0c:	74 77                	je     c0014e85 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e11:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014e17:	84 c0                	test   al,al
c0014e19:	75 02                	jne    c0014e1d <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014e1b:	eb f1                	jmp    c0014e0e <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014e1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014e20:	8d 50 01             	lea    edx,[eax+0x1]
c0014e23:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014e26:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e29:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014e2f:	88 10                	mov    BYTE PTR [eax],dl
c0014e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e34:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014e3a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e40:	05 34 11 00 00       	add    eax,0x1134
c0014e45:	83 ec 0c             	sub    esp,0xc
c0014e48:	50                   	push   eax
c0014e49:	e8 86 b8 fe ff       	call   c00006d4 <strlen>
c0014e4e:	83 c4 10             	add    esp,0x10
c0014e51:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e54:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e5a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014e5d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e60:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e66:	83 ec 04             	sub    esp,0x4
c0014e69:	50                   	push   eax
c0014e6a:	51                   	push   ecx
c0014e6b:	52                   	push   edx
c0014e6c:	e8 56 b7 fe ff       	call   c00005c7 <memmove>
c0014e71:	83 c4 10             	add    esp,0x10
c0014e74:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014e77:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e7a:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014e7e:	75 88                	jne    c0014e08 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014e80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e83:	eb 03                	jmp    c0014e88 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014e85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e88:	c9                   	leave  
c0014e89:	c3                   	ret    

c0014e8a <Keyboard::Keyboard(char const*)>:
c0014e8a:	83 ec 0c             	sub    esp,0xc
c0014e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e91:	83 ec 08             	sub    esp,0x8
c0014e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e98:	50                   	push   eax
c0014e99:	e8 cc ea ff ff       	call   c001396a <Device::Device(char const*)>
c0014e9e:	83 c4 10             	add    esp,0x10
c0014ea1:	ba e8 9d 03 c0       	mov    edx,0xc0039de8
c0014ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eaa:	89 10                	mov    DWORD PTR [eax],edx
c0014eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eb0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014eba:	c6 05 e4 be 03 c0 01 	mov    BYTE PTR ds:0xc003bee4,0x1
c0014ec1:	90                   	nop
c0014ec2:	83 c4 0c             	add    esp,0xc
c0014ec5:	c3                   	ret    

c0014ec6 <Keyboard::~Keyboard()>:
c0014ec6:	83 ec 0c             	sub    esp,0xc
c0014ec9:	ba e8 9d 03 c0       	mov    edx,0xc0039de8
c0014ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ed2:	89 10                	mov    DWORD PTR [eax],edx
c0014ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ed8:	83 ec 0c             	sub    esp,0xc
c0014edb:	50                   	push   eax
c0014edc:	e8 3b e7 ff ff       	call   c001361c <Device::~Device()>
c0014ee1:	83 c4 10             	add    esp,0x10
c0014ee4:	90                   	nop
c0014ee5:	83 c4 0c             	add    esp,0xc
c0014ee8:	c3                   	ret    
c0014ee9:	90                   	nop

c0014eea <Keyboard::~Keyboard()>:
c0014eea:	83 ec 0c             	sub    esp,0xc
c0014eed:	83 ec 0c             	sub    esp,0xc
c0014ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ef4:	e8 cd ff ff ff       	call   c0014ec6 <Keyboard::~Keyboard()>
c0014ef9:	83 c4 10             	add    esp,0x10
c0014efc:	83 ec 08             	sub    esp,0x8
c0014eff:	68 5c 01 00 00       	push   0x15c
c0014f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f08:	e8 72 d5 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0014f0d:	83 c4 10             	add    esp,0x10
c0014f10:	83 c4 0c             	add    esp,0xc
c0014f13:	c3                   	ret    

c0014f14 <LogicalDisk::close(int, int, void*)>:
c0014f14:	83 c8 ff             	or     eax,0xffffffff
c0014f17:	c3                   	ret    

c0014f18 <LogicalDisk::~LogicalDisk()>:
c0014f18:	83 ec 0c             	sub    esp,0xc
c0014f1b:	ba 98 9e 03 c0       	mov    edx,0xc0039e98
c0014f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f24:	89 10                	mov    DWORD PTR [eax],edx
c0014f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f2a:	83 ec 0c             	sub    esp,0xc
c0014f2d:	50                   	push   eax
c0014f2e:	e8 e9 e6 ff ff       	call   c001361c <Device::~Device()>
c0014f33:	83 c4 10             	add    esp,0x10
c0014f36:	90                   	nop
c0014f37:	83 c4 0c             	add    esp,0xc
c0014f3a:	c3                   	ret    
c0014f3b:	90                   	nop

c0014f3c <LogicalDisk::~LogicalDisk()>:
c0014f3c:	83 ec 0c             	sub    esp,0xc
c0014f3f:	83 ec 0c             	sub    esp,0xc
c0014f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f46:	e8 cd ff ff ff       	call   c0014f18 <LogicalDisk::~LogicalDisk()>
c0014f4b:	83 c4 10             	add    esp,0x10
c0014f4e:	83 ec 08             	sub    esp,0x8
c0014f51:	68 74 01 00 00       	push   0x174
c0014f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f5a:	e8 20 d5 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0014f5f:	83 c4 10             	add    esp,0x10
c0014f62:	83 c4 0c             	add    esp,0xc
c0014f65:	c3                   	ret    

c0014f66 <LogicalDisk::open(int, int, void*)>:
c0014f66:	83 ec 18             	sub    esp,0x18
c0014f69:	68 14 9e 03 c0       	push   0xc0039e14
c0014f6e:	e8 6b 80 ff ff       	call   c000cfde <panic(char const*)>
c0014f73:	83 c8 ff             	or     eax,0xffffffff
c0014f76:	83 c4 1c             	add    esp,0x1c
c0014f79:	c3                   	ret    

c0014f7a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014f7a:	53                   	push   ebx
c0014f7b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f87:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014f8d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014f93:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014f99:	77 10                	ja     c0014fab <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014f9b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014fa1:	89 d3                	mov    ebx,edx
c0014fa3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014fa9:	72 05                	jb     c0014fb0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014fab:	83 c8 ff             	or     eax,0xffffffff
c0014fae:	89 c2                	mov    edx,eax
c0014fb0:	5b                   	pop    ebx
c0014fb1:	c3                   	ret    

c0014fb2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014fb2:	56                   	push   esi
c0014fb3:	83 c8 ff             	or     eax,0xffffffff
c0014fb6:	53                   	push   ebx
c0014fb7:	89 c2                	mov    edx,eax
c0014fb9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014fbd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0014fc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014fc5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014fcb:	77 27                	ja     c0014ff4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014fcd:	89 d8                	mov    eax,ebx
c0014fcf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0014fd5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0014fdb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014fe0:	89 c2                	mov    edx,eax
c0014fe2:	73 10                	jae    c0014ff4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014fe4:	89 c8                	mov    eax,ecx
c0014fe6:	89 da                	mov    edx,ebx
c0014fe8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0014fee:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0014ff4:	5b                   	pop    ebx
c0014ff5:	5e                   	pop    esi
c0014ff6:	c3                   	ret    
c0014ff7:	90                   	nop

c0014ff8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0014ff8:	83 ec 1c             	sub    esp,0x1c
c0014ffb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015003:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001500b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001500f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015012:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015016:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001501a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001501e:	83 ec 08             	sub    esp,0x8
c0015021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015025:	50                   	push   eax
c0015026:	e8 3f e9 ff ff       	call   c001396a <Device::Device(char const*)>
c001502b:	83 c4 10             	add    esp,0x10
c001502e:	ba 98 9e 03 c0       	mov    edx,0xc0039e98
c0015033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015037:	89 10                	mov    DWORD PTR [eax],edx
c0015039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001503d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015048:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001504f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015053:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001505d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015065:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015069:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001506f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015075:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001507c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015080:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015086:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001508c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015090:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015094:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001509a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001509e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00150a8:	90                   	nop
c00150a9:	83 c4 1c             	add    esp,0x1c
c00150ac:	c3                   	ret    
c00150ad:	90                   	nop

c00150ae <LogicalDisk::assignDriveLetter()>:
c00150ae:	55                   	push   ebp
c00150af:	57                   	push   edi
c00150b0:	56                   	push   esi
c00150b1:	53                   	push   ebx
c00150b2:	83 ec 14             	sub    esp,0x14
c00150b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00150b9:	8b 3d 20 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c320
c00150bf:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00150c5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00150c9:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00150cf:	8b 3d 24 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c324
c00150d5:	3c 01                	cmp    al,0x1
c00150d7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00150db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00150df:	19 c0                	sbb    eax,eax
c00150e1:	83 e0 02             	and    eax,0x2
c00150e4:	83 c0 41             	add    eax,0x41
c00150e7:	0f be e8             	movsx  ebp,al
c00150ea:	3c 43                	cmp    al,0x43
c00150ec:	75 10                	jne    c00150fe <LogicalDisk::assignDriveLetter()+0x50>
c00150ee:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00150f5:	75 5d                	jne    c0015154 <LogicalDisk::assignDriveLetter()+0xa6>
c00150f7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00150fc:	75 56                	jne    c0015154 <LogicalDisk::assignDriveLetter()+0xa6>
c00150fe:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015101:	ba 01 00 00 00       	mov    edx,0x1
c0015106:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001510a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001510e:	d3 e2                	shl    edx,cl
c0015110:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015114:	89 d7                	mov    edi,edx
c0015116:	89 d6                	mov    esi,edx
c0015118:	c1 ff 1f             	sar    edi,0x1f
c001511b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001511f:	21 f9                	and    ecx,edi
c0015121:	09 d1                	or     ecx,edx
c0015123:	75 2f                	jne    c0015154 <LogicalDisk::assignDriveLetter()+0xa6>
c0015125:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015129:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001512d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015133:	09 f2                	or     edx,esi
c0015135:	89 15 20 c3 03 c0    	mov    DWORD PTR ds:0xc003c320,edx
c001513b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001513f:	09 fa                	or     edx,edi
c0015141:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015145:	89 15 24 c3 03 c0    	mov    DWORD PTR ds:0xc003c324,edx
c001514b:	89 1c bd 40 c3 03 c0 	mov    DWORD PTR [edi*4-0x3ffc3cc0],ebx
c0015152:	eb 08                	jmp    c001515c <LogicalDisk::assignDriveLetter()+0xae>
c0015154:	45                   	inc    ebp
c0015155:	40                   	inc    eax
c0015156:	3c 5b                	cmp    al,0x5b
c0015158:	75 90                	jne    c00150ea <LogicalDisk::assignDriveLetter()+0x3c>
c001515a:	31 c0                	xor    eax,eax
c001515c:	83 c4 14             	add    esp,0x14
c001515f:	5b                   	pop    ebx
c0015160:	5e                   	pop    esi
c0015161:	5f                   	pop    edi
c0015162:	5d                   	pop    ebp
c0015163:	c3                   	ret    

c0015164 <LogicalDisk::mount()>:
c0015164:	56                   	push   esi
c0015165:	53                   	push   ebx
c0015166:	51                   	push   ecx
c0015167:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001516b:	8b 1d a0 be 03 c0    	mov    ebx,DWORD PTR ds:0xc003bea0
c0015171:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001517b:	85 db                	test   ebx,ebx
c001517d:	74 50                	je     c00151cf <LogicalDisk::mount()+0x6b>
c001517f:	e8 c9 91 ff ff       	call   c000e34d <getIRQNestingLevel()>
c0015184:	52                   	push   edx
c0015185:	52                   	push   edx
c0015186:	50                   	push   eax
c0015187:	68 38 9e 03 c0       	push   0xc0039e38
c001518c:	e8 2f 7d ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0015191:	83 c4 0c             	add    esp,0xc
c0015194:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001519b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001519d:	83 e8 41             	sub    eax,0x41
c00151a0:	50                   	push   eax
c00151a1:	56                   	push   esi
c00151a2:	53                   	push   ebx
c00151a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00151a6:	83 c4 10             	add    esp,0x10
c00151a9:	84 c0                	test   al,al
c00151ab:	74 08                	je     c00151b5 <LogicalDisk::mount()+0x51>
c00151ad:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00151b3:	eb 1c                	jmp    c00151d1 <LogicalDisk::mount()+0x6d>
c00151b5:	e8 93 91 ff ff       	call   c000e34d <getIRQNestingLevel()>
c00151ba:	51                   	push   ecx
c00151bb:	51                   	push   ecx
c00151bc:	50                   	push   eax
c00151bd:	68 53 9e 03 c0       	push   0xc0039e53
c00151c2:	e8 f9 7c ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00151c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	eb ac                	jmp    c001517b <LogicalDisk::mount()+0x17>
c00151cf:	31 c0                	xor    eax,eax
c00151d1:	5a                   	pop    edx
c00151d2:	5b                   	pop    ebx
c00151d3:	5e                   	pop    esi
c00151d4:	c3                   	ret    
c00151d5:	90                   	nop

c00151d6 <LogicalDisk::unmount()>:
c00151d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151da:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00151e4:	c3                   	ret    
c00151e5:	90                   	nop

c00151e6 <LogicalDisk::unassignDriveLetter()>:
c00151e6:	57                   	push   edi
c00151e7:	56                   	push   esi
c00151e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151ec:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00151f3:	84 c9                	test   cl,cl
c00151f5:	75 0f                	jne    c0015206 <LogicalDisk::unassignDriveLetter()+0x20>
c00151f7:	c7 44 24 0c 6e 9e 03 c0 	mov    DWORD PTR [esp+0xc],0xc0039e6e
c00151ff:	5e                   	pop    esi
c0015200:	5f                   	pop    edi
c0015201:	e9 d8 7d ff ff       	jmp    c000cfde <panic(char const*)>
c0015206:	83 e9 41             	sub    ecx,0x41
c0015209:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015210:	b8 01 00 00 00       	mov    eax,0x1
c0015215:	c7 04 8d 40 c3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc3cc0],0x0
c0015220:	d3 e0                	shl    eax,cl
c0015222:	89 c7                	mov    edi,eax
c0015224:	f7 d0                	not    eax
c0015226:	c1 ff 1f             	sar    edi,0x1f
c0015229:	21 05 20 c3 03 c0    	and    DWORD PTR ds:0xc003c320,eax
c001522f:	89 fe                	mov    esi,edi
c0015231:	f7 d6                	not    esi
c0015233:	21 35 24 c3 03 c0    	and    DWORD PTR ds:0xc003c324,esi
c0015239:	5e                   	pop    esi
c001523a:	5f                   	pop    edi
c001523b:	c3                   	ret    

c001523c <LogicalDisk::read(unsigned long long, int, void*)>:
c001523c:	57                   	push   edi
c001523d:	56                   	push   esi
c001523e:	53                   	push   ebx
c001523f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015243:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015247:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001524b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001524f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015255:	77 41                	ja     c0015298 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015257:	99                   	cdq    
c0015258:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001525e:	01 c8                	add    eax,ecx
c0015260:	11 da                	adc    edx,ebx
c0015262:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015268:	19 d7                	sbb    edi,edx
c001526a:	72 33                	jb     c001529f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001526c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015272:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015278:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001527c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015280:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015286:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001528c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015290:	5b                   	pop    ebx
c0015291:	5e                   	pop    esi
c0015292:	5f                   	pop    edi
c0015293:	e9 9a 09 00 00       	jmp    c0015c32 <VCache::read(unsigned long long, int, void*)>
c0015298:	b8 05 00 00 00       	mov    eax,0x5
c001529d:	eb 05                	jmp    c00152a4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001529f:	b8 07 00 00 00       	mov    eax,0x7
c00152a4:	5b                   	pop    ebx
c00152a5:	5e                   	pop    esi
c00152a6:	5f                   	pop    edi
c00152a7:	c3                   	ret    

c00152a8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00152a8:	57                   	push   edi
c00152a9:	56                   	push   esi
c00152aa:	53                   	push   ebx
c00152ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00152af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00152b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152bb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00152c1:	77 41                	ja     c0015304 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00152c3:	99                   	cdq    
c00152c4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00152ca:	01 c8                	add    eax,ecx
c00152cc:	11 da                	adc    edx,ebx
c00152ce:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00152d4:	19 d7                	sbb    edi,edx
c00152d6:	72 33                	jb     c001530b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00152d8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00152de:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00152e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00152e8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00152ec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00152f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00152f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152fc:	5b                   	pop    ebx
c00152fd:	5e                   	pop    esi
c00152fe:	5f                   	pop    edi
c00152ff:	e9 4a 08 00 00       	jmp    c0015b4e <VCache::write(unsigned long long, int, void*)>
c0015304:	b8 05 00 00 00       	mov    eax,0x5
c0015309:	eb 05                	jmp    c0015310 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001530b:	b8 07 00 00 00       	mov    eax,0x7
c0015310:	5b                   	pop    ebx
c0015311:	5e                   	pop    esi
c0015312:	5f                   	pop    edi
c0015313:	c3                   	ret    

c0015314 <Mouse::Mouse(char const*)>:
c0015314:	83 ec 0c             	sub    esp,0xc
c0015317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001531b:	83 ec 08             	sub    esp,0x8
c001531e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015322:	50                   	push   eax
c0015323:	e8 42 e6 ff ff       	call   c001396a <Device::Device(char const*)>
c0015328:	83 c4 10             	add    esp,0x10
c001532b:	ba c4 9e 03 c0       	mov    edx,0xc0039ec4
c0015330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015334:	89 10                	mov    DWORD PTR [eax],edx
c0015336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001533a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015344:	90                   	nop
c0015345:	83 c4 0c             	add    esp,0xc
c0015348:	c3                   	ret    
c0015349:	90                   	nop

c001534a <Mouse::~Mouse()>:
c001534a:	83 ec 0c             	sub    esp,0xc
c001534d:	ba c4 9e 03 c0       	mov    edx,0xc0039ec4
c0015352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015356:	89 10                	mov    DWORD PTR [eax],edx
c0015358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001535c:	83 ec 0c             	sub    esp,0xc
c001535f:	50                   	push   eax
c0015360:	e8 b7 e2 ff ff       	call   c001361c <Device::~Device()>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	90                   	nop
c0015369:	83 c4 0c             	add    esp,0xc
c001536c:	c3                   	ret    
c001536d:	90                   	nop

c001536e <Mouse::~Mouse()>:
c001536e:	83 ec 0c             	sub    esp,0xc
c0015371:	83 ec 0c             	sub    esp,0xc
c0015374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015378:	e8 cd ff ff ff       	call   c001534a <Mouse::~Mouse()>
c001537d:	83 c4 10             	add    esp,0x10
c0015380:	83 ec 08             	sub    esp,0x8
c0015383:	68 58 01 00 00       	push   0x158
c0015388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001538c:	e8 ee d0 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0015391:	83 c4 10             	add    esp,0x10
c0015394:	83 c4 0c             	add    esp,0xc
c0015397:	c3                   	ret    

c0015398 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015398:	55                   	push   ebp
c0015399:	57                   	push   edi
c001539a:	56                   	push   esi
c001539b:	53                   	push   ebx
c001539c:	81 ec 28 01 00 00    	sub    esp,0x128
c00153a2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00153a9:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00153b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00153b7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00153be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00153c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00153c6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00153cd:	e8 8a e6 ff ff       	call   c0013a5c <Device::getName()>
c00153d2:	5a                   	pop    edx
c00153d3:	59                   	pop    ecx
c00153d4:	50                   	push   eax
c00153d5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00153d9:	55                   	push   ebp
c00153da:	e8 e8 b3 fe ff       	call   c00007c7 <strcpy>
c00153df:	5b                   	pop    ebx
c00153e0:	58                   	pop    eax
c00153e1:	68 e8 9e 03 c0       	push   0xc0039ee8
c00153e6:	55                   	push   ebp
c00153e7:	e8 28 b5 fe ff       	call   c0000914 <strcat>
c00153ec:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00153f3:	e8 78 d0 ff ff       	call   c0012470 <operator new(unsigned long)>
c00153f8:	83 c4 0c             	add    esp,0xc
c00153fb:	89 c3                	mov    ebx,eax
c00153fd:	57                   	push   edi
c00153fe:	56                   	push   esi
c00153ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015403:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015407:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001540e:	55                   	push   ebp
c001540f:	50                   	push   eax
c0015410:	e8 e3 fb ff ff       	call   c0014ff8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015415:	83 c4 14             	add    esp,0x14
c0015418:	53                   	push   ebx
c0015419:	e8 90 fc ff ff       	call   c00150ae <LogicalDisk::assignDriveLetter()>
c001541e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015421:	e8 3e fd ff ff       	call   c0015164 <LogicalDisk::mount()>
c0015426:	58                   	pop    eax
c0015427:	5a                   	pop    edx
c0015428:	53                   	push   ebx
c0015429:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015430:	e8 45 e3 ff ff       	call   c001377a <Device::addChild(Device*)>
c0015435:	81 c4 2c 01 00 00    	add    esp,0x12c
c001543b:	5b                   	pop    ebx
c001543c:	5e                   	pop    esi
c001543d:	5f                   	pop    edi
c001543e:	5d                   	pop    ebp
c001543f:	c3                   	ret    

c0015440 <createPartitionsForDisk(PhysicalDisk*)>:
c0015440:	55                   	push   ebp
c0015441:	57                   	push   edi
c0015442:	56                   	push   esi
c0015443:	53                   	push   ebx
c0015444:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001544a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015451:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015457:	3d 00 02 00 00       	cmp    eax,0x200
c001545c:	74 27                	je     c0015485 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001545e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015464:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001546a:	83 ec 10             	sub    esp,0x10
c001546d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015471:	99                   	cdq    
c0015472:	c1 e6 0a             	shl    esi,0xa
c0015475:	52                   	push   edx
c0015476:	89 fd                	mov    ebp,edi
c0015478:	50                   	push   eax
c0015479:	55                   	push   ebp
c001547a:	56                   	push   esi
c001547b:	e8 8c 92 00 00       	call   c001e70c <__udivdi3>
c0015480:	e9 b1 00 00 00       	jmp    c0015536 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015485:	83 ec 0c             	sub    esp,0xc
c0015488:	8b 03                	mov    eax,DWORD PTR [ebx]
c001548a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001548e:	56                   	push   esi
c001548f:	6a 01                	push   0x1
c0015491:	6a 00                	push   0x0
c0015493:	6a 00                	push   0x0
c0015495:	53                   	push   ebx
c0015496:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015499:	83 c4 20             	add    esp,0x20
c001549c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00154a4:	75 0a                	jne    c00154b0 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00154a6:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00154ae:	74 2c                	je     c00154dc <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00154b0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00154b6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00154bc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00154c2:	83 ec 10             	sub    esp,0x10
c00154c5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00154c9:	89 f7                	mov    edi,esi
c00154cb:	c1 e0 0a             	shl    eax,0xa
c00154ce:	c1 ff 1f             	sar    edi,0x1f
c00154d1:	57                   	push   edi
c00154d2:	56                   	push   esi
c00154d3:	52                   	push   edx
c00154d4:	50                   	push   eax
c00154d5:	e8 32 92 00 00       	call   c001e70c <__udivdi3>
c00154da:	eb 5a                	jmp    c0015536 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00154dc:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00154e3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00154ea:	83 e1 7f             	and    ecx,0x7f
c00154ed:	83 e0 7f             	and    eax,0x7f
c00154f0:	01 c1                	add    ecx,eax
c00154f2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00154f9:	83 e0 7f             	and    eax,0x7f
c00154fc:	01 c1                	add    ecx,eax
c00154fe:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015505:	83 e0 7f             	and    eax,0x7f
c0015508:	00 c1                	add    cl,al
c001550a:	74 41                	je     c001554d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001550c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015512:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015518:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001551e:	83 ec 10             	sub    esp,0x10
c0015521:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015525:	89 f7                	mov    edi,esi
c0015527:	c1 e0 0a             	shl    eax,0xa
c001552a:	c1 ff 1f             	sar    edi,0x1f
c001552d:	57                   	push   edi
c001552e:	56                   	push   esi
c001552f:	52                   	push   edx
c0015530:	50                   	push   eax
c0015531:	e8 d6 91 00 00       	call   c001e70c <__udivdi3>
c0015536:	83 c4 14             	add    esp,0x14
c0015539:	52                   	push   edx
c001553a:	50                   	push   eax
c001553b:	6a 00                	push   0x0
c001553d:	6a 00                	push   0x0
c001553f:	53                   	push   ebx
c0015540:	e8 53 fe ff ff       	call   c0015398 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015545:	83 c4 20             	add    esp,0x20
c0015548:	e9 79 01 00 00       	jmp    c00156c6 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001554d:	89 f0                	mov    eax,esi
c001554f:	31 f6                	xor    esi,esi
c0015551:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015558:	75 02                	jne    c001555c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001555a:	89 f1                	mov    ecx,esi
c001555c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015563:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001556a:	c1 e2 08             	shl    edx,0x8
c001556d:	c1 e7 10             	shl    edi,0x10
c0015570:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015578:	09 fa                	or     edx,edi
c001557a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015582:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015589:	83 c0 10             	add    eax,0x10
c001558c:	09 fa                	or     edx,edi
c001558e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015595:	c1 e7 18             	shl    edi,0x18
c0015598:	09 fa                	or     edx,edi
c001559a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00155a1:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00155a5:	c1 e7 10             	shl    edi,0x10
c00155a8:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00155af:	c1 e2 08             	shl    edx,0x8
c00155b2:	09 fa                	or     edx,edi
c00155b4:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00155bb:	09 fa                	or     edx,edi
c00155bd:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00155c4:	c1 e7 18             	shl    edi,0x18
c00155c7:	09 fa                	or     edx,edi
c00155c9:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00155cd:	46                   	inc    esi
c00155ce:	83 fe 04             	cmp    esi,0x4
c00155d1:	0f 85 7a ff ff ff    	jne    c0015551 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00155d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155db:	83 f0 01             	xor    eax,0x1
c00155de:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00155e2:	75 57                	jne    c001563b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00155e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00155e8:	83 f0 01             	xor    eax,0x1
c00155eb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00155ef:	75 4a                	jne    c001563b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00155f1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00155f5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00155fd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015605:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001560b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015611:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015617:	0f a4 c2 0a          	shld   edx,eax,0xa
c001561b:	89 f7                	mov    edi,esi
c001561d:	c1 e0 0a             	shl    eax,0xa
c0015620:	c1 ff 1f             	sar    edi,0x1f
c0015623:	57                   	push   edi
c0015624:	56                   	push   esi
c0015625:	52                   	push   edx
c0015626:	50                   	push   eax
c0015627:	e8 e0 90 00 00       	call   c001e70c <__udivdi3>
c001562c:	83 c4 10             	add    esp,0x10
c001562f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015633:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015637:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001563b:	84 c9                	test   cl,cl
c001563d:	74 53                	je     c0015692 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001563f:	0f b6 c9             	movzx  ecx,cl
c0015642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015646:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001564a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001564e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015656:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001565a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001565e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015662:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015666:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001566a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001566e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015672:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015676:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001567a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001567e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015682:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015686:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001568a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001568e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015692:	31 ed                	xor    ebp,ebp
c0015694:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015698:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001569c:	89 f8                	mov    eax,edi
c001569e:	09 f0                	or     eax,esi
c00156a0:	74 1e                	je     c00156c0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00156a2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00156a6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00156aa:	89 d1                	mov    ecx,edx
c00156ac:	09 c1                	or     ecx,eax
c00156ae:	74 10                	je     c00156c0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00156b0:	83 ec 0c             	sub    esp,0xc
c00156b3:	57                   	push   edi
c00156b4:	56                   	push   esi
c00156b5:	52                   	push   edx
c00156b6:	50                   	push   eax
c00156b7:	53                   	push   ebx
c00156b8:	e8 db fc ff ff       	call   c0015398 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00156bd:	83 c4 20             	add    esp,0x20
c00156c0:	45                   	inc    ebp
c00156c1:	83 fd 04             	cmp    ebp,0x4
c00156c4:	75 ce                	jne    c0015694 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00156c6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00156cc:	5b                   	pop    ebx
c00156cd:	5e                   	pop    esi
c00156ce:	5f                   	pop    edi
c00156cf:	5d                   	pop    ebp
c00156d0:	c3                   	ret    
c00156d1:	90                   	nop

c00156d2 <Timer::Timer(char const*)>:
c00156d2:	83 ec 0c             	sub    esp,0xc
c00156d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156d9:	83 ec 08             	sub    esp,0x8
c00156dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156e0:	50                   	push   eax
c00156e1:	e8 84 e2 ff ff       	call   c001396a <Device::Device(char const*)>
c00156e6:	83 c4 10             	add    esp,0x10
c00156e9:	ba fc 9e 03 c0       	mov    edx,0xc0039efc
c00156ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f2:	89 10                	mov    DWORD PTR [eax],edx
c00156f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f8:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015702:	90                   	nop
c0015703:	83 c4 0c             	add    esp,0xc
c0015706:	c3                   	ret    
c0015707:	90                   	nop

c0015708 <Timer::~Timer()>:
c0015708:	83 ec 0c             	sub    esp,0xc
c001570b:	ba fc 9e 03 c0       	mov    edx,0xc0039efc
c0015710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015714:	89 10                	mov    DWORD PTR [eax],edx
c0015716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571a:	83 ec 0c             	sub    esp,0xc
c001571d:	50                   	push   eax
c001571e:	e8 f9 de ff ff       	call   c001361c <Device::~Device()>
c0015723:	83 c4 10             	add    esp,0x10
c0015726:	90                   	nop
c0015727:	83 c4 0c             	add    esp,0xc
c001572a:	c3                   	ret    
c001572b:	90                   	nop

c001572c <Timer::~Timer()>:
c001572c:	83 ec 0c             	sub    esp,0xc
c001572f:	83 ec 0c             	sub    esp,0xc
c0015732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015736:	e8 cd ff ff ff       	call   c0015708 <Timer::~Timer()>
c001573b:	83 c4 10             	add    esp,0x10
c001573e:	83 ec 08             	sub    esp,0x8
c0015741:	68 5c 01 00 00       	push   0x15c
c0015746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001574a:	e8 30 cd ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001574f:	83 c4 10             	add    esp,0x10
c0015752:	83 c4 0c             	add    esp,0xc
c0015755:	c3                   	ret    

c0015756 <Timer::read()>:
c0015756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001575a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015760:	c3                   	ret    

c0015761 <timerHandler(unsigned long long)>:
c0015761:	55                   	push   ebp
c0015762:	57                   	push   edi
c0015763:	56                   	push   esi
c0015764:	53                   	push   ebx
c0015765:	83 ec 0c             	sub    esp,0xc
c0015768:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001576c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015770:	01 35 b0 c3 03 c0    	add    DWORD PTR ds:0xc003c3b0,esi
c0015776:	11 3d b4 c3 03 c0    	adc    DWORD PTR ds:0xc003c3b4,edi
c001577c:	80 3d ed b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9ed,0x0
c0015783:	0f 84 07 01 00 00    	je     c0015890 <timerHandler(unsigned long long)+0x12f>
c0015789:	e8 fb 8b ff ff       	call   c000e389 <lockStuff()>
c001578e:	83 ec 0c             	sub    esp,0xc
c0015791:	68 24 bc 03 c0       	push   0xc003bc24
c0015796:	e8 d1 94 00 00       	call   c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001579b:	c7 04 24 24 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc24
c00157a2:	89 c3                	mov    ebx,eax
c00157a4:	e8 f9 93 00 00       	call   c001eba2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00157a9:	83 c4 10             	add    esp,0x10
c00157ac:	84 c0                	test   al,al
c00157ae:	74 60                	je     c0015810 <timerHandler(unsigned long long)+0xaf>
c00157b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00157b6:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00157b9:	85 c0                	test   eax,eax
c00157bb:	0f 85 91 00 00 00    	jne    c0015852 <timerHandler(unsigned long long)+0xf1>
c00157c1:	e9 be 00 00 00       	jmp    c0015884 <timerHandler(unsigned long long)+0x123>
c00157c6:	83 ec 0c             	sub    esp,0xc
c00157c9:	55                   	push   ebp
c00157ca:	e8 b7 93 ff ff       	call   c000eb86 <unblockTask(ThreadControlBlock*)>
c00157cf:	83 c4 10             	add    esp,0x10
c00157d2:	39 eb                	cmp    ebx,ebp
c00157d4:	75 12                	jne    c00157e8 <timerHandler(unsigned long long)+0x87>
c00157d6:	83 ec 0c             	sub    esp,0xc
c00157d9:	68 24 bc 03 c0       	push   0xc003bc24
c00157de:	e8 89 94 00 00       	call   c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157e3:	89 c3                	mov    ebx,eax
c00157e5:	83 c4 10             	add    esp,0x10
c00157e8:	83 ec 0c             	sub    esp,0xc
c00157eb:	68 24 bc 03 c0       	push   0xc003bc24
c00157f0:	e8 ad 93 00 00       	call   c001eba2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00157f5:	83 c4 10             	add    esp,0x10
c00157f8:	84 c0                	test   al,al
c00157fa:	75 b4                	jne    c00157b0 <timerHandler(unsigned long long)+0x4f>
c00157fc:	83 ec 0c             	sub    esp,0xc
c00157ff:	68 24 bc 03 c0       	push   0xc003bc24
c0015804:	e8 63 94 00 00       	call   c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015809:	83 c4 10             	add    esp,0x10
c001580c:	39 d8                	cmp    eax,ebx
c001580e:	74 a0                	je     c00157b0 <timerHandler(unsigned long long)+0x4f>
c0015810:	83 ec 0c             	sub    esp,0xc
c0015813:	68 24 bc 03 c0       	push   0xc003bc24
c0015818:	e8 4f 94 00 00       	call   c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001581d:	c7 04 24 24 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc24
c0015824:	89 c5                	mov    ebp,eax
c0015826:	e8 93 93 00 00       	call   c001ebbe <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001582b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001582e:	83 c4 10             	add    esp,0x10
c0015831:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015834:	39 15 b0 c3 03 c0    	cmp    DWORD PTR ds:0xc003c3b0,edx
c001583a:	a1 b4 c3 03 c0       	mov    eax,ds:0xc003c3b4
c001583f:	19 c8                	sbb    eax,ecx
c0015841:	73 83                	jae    c00157c6 <timerHandler(unsigned long long)+0x65>
c0015843:	50                   	push   eax
c0015844:	50                   	push   eax
c0015845:	55                   	push   ebp
c0015846:	68 24 bc 03 c0       	push   0xc003bc24
c001584b:	e8 7e 92 00 00       	call   c001eace <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015850:	eb 93                	jmp    c00157e5 <timerHandler(unsigned long long)+0x84>
c0015852:	80 3d ec b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9ec,0x0
c0015859:	74 29                	je     c0015884 <timerHandler(unsigned long long)+0x123>
c001585b:	39 c6                	cmp    esi,eax
c001585d:	bb 00 00 00 00       	mov    ebx,0x0
c0015862:	19 df                	sbb    edi,ebx
c0015864:	72 19                	jb     c001587f <timerHandler(unsigned long long)+0x11e>
c0015866:	e8 f7 8a ff ff       	call   c000e362 <lockScheduler()>
c001586b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015870:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015873:	e8 1e 8e ff ff       	call   c000e696 <schedule()>
c0015878:	e8 e7 8a ff ff       	call   c000e364 <unlockScheduler()>
c001587d:	eb 05                	jmp    c0015884 <timerHandler(unsigned long long)+0x123>
c001587f:	29 f0                	sub    eax,esi
c0015881:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015884:	83 c4 0c             	add    esp,0xc
c0015887:	5b                   	pop    ebx
c0015888:	5e                   	pop    esi
c0015889:	5f                   	pop    edi
c001588a:	5d                   	pop    ebp
c001588b:	e9 8b 8e ff ff       	jmp    c000e71b <unlockStuff()>
c0015890:	83 c4 0c             	add    esp,0xc
c0015893:	5b                   	pop    ebx
c0015894:	5e                   	pop    esi
c0015895:	5f                   	pop    edi
c0015896:	5d                   	pop    ebp
c0015897:	c3                   	ret    

c0015898 <setupTimer(int)>:
c0015898:	57                   	push   edi
c0015899:	56                   	push   esi
c001589a:	53                   	push   ebx
c001589b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001589f:	e8 ff 18 00 00       	call   c00171a3 <getCPUNumber()>
c00158a4:	85 c0                	test   eax,eax
c00158a6:	74 32                	je     c00158da <setupTimer(int)+0x42>
c00158a8:	83 ec 0c             	sub    esp,0xc
c00158ab:	68 60 01 00 00       	push   0x160
c00158b0:	e8 bb cb ff ff       	call   c0012470 <operator new(unsigned long)>
c00158b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00158b8:	89 c3                	mov    ebx,eax
c00158ba:	e8 ef 88 00 00       	call   c001e1ae <APICTimer::APICTimer()>
c00158bf:	6a 00                	push   0x0
c00158c1:	6a 00                	push   0x0
c00158c3:	56                   	push   esi
c00158c4:	53                   	push   ebx
c00158c5:	e8 ec 87 00 00       	call   c001e0b6 <APICTimer::open(int, int, void*)>
c00158ca:	83 c4 20             	add    esp,0x20
c00158cd:	e8 d4 18 00 00       	call   c00171a6 <thisCPU()>
c00158d2:	56                   	push   esi
c00158d3:	56                   	push   esi
c00158d4:	53                   	push   ebx
c00158d5:	e9 96 00 00 00       	jmp    c0015970 <setupTimer(int)+0xd8>
c00158da:	e8 c7 18 00 00       	call   c00171a6 <thisCPU()>
c00158df:	83 ec 0c             	sub    esp,0xc
c00158e2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00158e8:	e8 6f e1 ff ff       	call   c0013a5c <Device::getName()>
c00158ed:	83 c4 10             	add    esp,0x10
c00158f0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00158f3:	0f 85 87 00 00 00    	jne    c0015980 <setupTimer(int)+0xe8>
c00158f9:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c00158fe:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015905:	74 79                	je     c0015980 <setupTimer(int)+0xe8>
c0015907:	83 ec 0c             	sub    esp,0xc
c001590a:	68 5c 01 00 00       	push   0x15c
c001590f:	e8 5c cb ff ff       	call   c0012470 <operator new(unsigned long)>
c0015914:	89 04 24             	mov    DWORD PTR [esp],eax
c0015917:	89 c3                	mov    ebx,eax
c0015919:	e8 e0 89 00 00       	call   c001e2fe <PIT::PIT()>
c001591e:	59                   	pop    ecx
c001591f:	5f                   	pop    edi
c0015920:	53                   	push   ebx
c0015921:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c0015927:	e8 4e de ff ff       	call   c001377a <Device::addChild(Device*)>
c001592c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001592e:	6a 00                	push   0x0
c0015930:	6a 00                	push   0x0
c0015932:	56                   	push   esi
c0015933:	53                   	push   ebx
c0015934:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015937:	83 c4 14             	add    esp,0x14
c001593a:	68 60 01 00 00       	push   0x160
c001593f:	e8 2c cb ff ff       	call   c0012470 <operator new(unsigned long)>
c0015944:	89 04 24             	mov    DWORD PTR [esp],eax
c0015947:	89 c7                	mov    edi,eax
c0015949:	e8 60 88 00 00       	call   c001e1ae <APICTimer::APICTimer()>
c001594e:	6a 00                	push   0x0
c0015950:	6a 00                	push   0x0
c0015952:	56                   	push   esi
c0015953:	57                   	push   edi
c0015954:	e8 5d 87 00 00       	call   c001e0b6 <APICTimer::open(int, int, void*)>
c0015959:	83 c4 20             	add    esp,0x20
c001595c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001595e:	6a 00                	push   0x0
c0015960:	6a 00                	push   0x0
c0015962:	6a 00                	push   0x0
c0015964:	53                   	push   ebx
c0015965:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015968:	e8 39 18 00 00       	call   c00171a6 <thisCPU()>
c001596d:	5a                   	pop    edx
c001596e:	59                   	pop    ecx
c001596f:	57                   	push   edi
c0015970:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015976:	e8 ff dd ff ff       	call   c001377a <Device::addChild(Device*)>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	eb 33                	jmp    c00159b3 <setupTimer(int)+0x11b>
c0015980:	83 ec 0c             	sub    esp,0xc
c0015983:	68 5c 01 00 00       	push   0x15c
c0015988:	e8 e3 ca ff ff       	call   c0012470 <operator new(unsigned long)>
c001598d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015990:	89 c3                	mov    ebx,eax
c0015992:	e8 67 89 00 00       	call   c001e2fe <PIT::PIT()>
c0015997:	58                   	pop    eax
c0015998:	5a                   	pop    edx
c0015999:	53                   	push   ebx
c001599a:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c00159a0:	e8 d5 dd ff ff       	call   c001377a <Device::addChild(Device*)>
c00159a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159a7:	6a 00                	push   0x0
c00159a9:	6a 00                	push   0x0
c00159ab:	56                   	push   esi
c00159ac:	53                   	push   ebx
c00159ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159b0:	83 c4 20             	add    esp,0x20
c00159b3:	89 d8                	mov    eax,ebx
c00159b5:	5b                   	pop    ebx
c00159b6:	5e                   	pop    esi
c00159b7:	5f                   	pop    edi
c00159b8:	c3                   	ret    
c00159b9:	90                   	nop

c00159ba <VCache::VCache(PhysicalDisk*)>:
c00159ba:	53                   	push   ebx
c00159bb:	83 ec 08             	sub    esp,0x8
c00159be:	ba 2c 9f 03 c0       	mov    edx,0xc0039f2c
c00159c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c7:	89 10                	mov    DWORD PTR [eax],edx
c00159c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159cd:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00159d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159d8:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00159df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159e3:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00159ea:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00159f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159f5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00159fc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a07:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0015a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a12:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015a16:	83 ec 0c             	sub    esp,0xc
c0015a19:	6a 10                	push   0x10
c0015a1b:	e8 50 ca ff ff       	call   c0012470 <operator new(unsigned long)>
c0015a20:	83 c4 10             	add    esp,0x10
c0015a23:	89 c3                	mov    ebx,eax
c0015a25:	83 ec 0c             	sub    esp,0xc
c0015a28:	53                   	push   ebx
c0015a29:	e8 4c 8a ff ff       	call   c000e47a <Mutex::Mutex()>
c0015a2e:	83 c4 10             	add    esp,0x10
c0015a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a35:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a40:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0015a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a47:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0015a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a52:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a5c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0015a5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a63:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015a69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015a6f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015a73:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0015a76:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0015a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a7d:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015a81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a85:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015a8b:	c1 e0 06             	shl    eax,0x6
c0015a8e:	83 ec 0c             	sub    esp,0xc
c0015a91:	50                   	push   eax
c0015a92:	e8 24 7a ff ff       	call   c000d4bb <malloc>
c0015a97:	83 c4 10             	add    esp,0x10
c0015a9a:	89 c2                	mov    edx,eax
c0015a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aa0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015aa3:	90                   	nop
c0015aa4:	83 c4 08             	add    esp,0x8
c0015aa7:	5b                   	pop    ebx
c0015aa8:	c3                   	ret    
c0015aa9:	90                   	nop

c0015aaa <VCache::writeWriteBuffer()>:
c0015aaa:	53                   	push   ebx
c0015aab:	83 ec 14             	sub    esp,0x14
c0015aae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015ab2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015ab5:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ab7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015aba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015abd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015ac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0015ac3:	50                   	push   eax
c0015ac4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015ac7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0015ace:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0015ad5:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0015ad9:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0015ae0:	83 c4 28             	add    esp,0x28
c0015ae3:	5b                   	pop    ebx
c0015ae4:	c3                   	ret    
c0015ae5:	90                   	nop

c0015ae6 <VCache::~VCache()>:
c0015ae6:	83 ec 0c             	sub    esp,0xc
c0015ae9:	ba 2c 9f 03 c0       	mov    edx,0xc0039f2c
c0015aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015af2:	89 10                	mov    DWORD PTR [eax],edx
c0015af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015af8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0015afb:	84 c0                	test   al,al
c0015afd:	74 0f                	je     c0015b0e <VCache::~VCache()+0x28>
c0015aff:	83 ec 0c             	sub    esp,0xc
c0015b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b06:	e8 9f ff ff ff       	call   c0015aaa <VCache::writeWriteBuffer()>
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b12:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015b15:	83 ec 0c             	sub    esp,0xc
c0015b18:	50                   	push   eax
c0015b19:	e8 ad 79 ff ff       	call   c000d4cb <free>
c0015b1e:	83 c4 10             	add    esp,0x10
c0015b21:	90                   	nop
c0015b22:	83 c4 0c             	add    esp,0xc
c0015b25:	c3                   	ret    

c0015b26 <VCache::~VCache()>:
c0015b26:	83 ec 0c             	sub    esp,0xc
c0015b29:	83 ec 0c             	sub    esp,0xc
c0015b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b30:	e8 b1 ff ff ff       	call   c0015ae6 <VCache::~VCache()>
c0015b35:	83 c4 10             	add    esp,0x10
c0015b38:	83 ec 08             	sub    esp,0x8
c0015b3b:	6a 30                	push   0x30
c0015b3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b41:	e8 39 c9 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0015b46:	83 c4 10             	add    esp,0x10
c0015b49:	83 c4 0c             	add    esp,0xc
c0015b4c:	c3                   	ret    
c0015b4d:	90                   	nop

c0015b4e <VCache::write(unsigned long long, int, void*)>:
c0015b4e:	55                   	push   ebp
c0015b4f:	57                   	push   edi
c0015b50:	56                   	push   esi
c0015b51:	53                   	push   ebx
c0015b52:	83 ec 28             	sub    esp,0x28
c0015b55:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015b59:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015b5d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015b61:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0015b65:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015b68:	e8 e1 8e ff ff       	call   c000ea4e <Semaphore::acquire()>
c0015b6d:	83 c4 10             	add    esp,0x10
c0015b70:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015b74:	74 66                	je     c0015bdc <VCache::write(unsigned long long, int, void*)+0x8e>
c0015b76:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015b79:	99                   	cdq    
c0015b7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b7e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0015b81:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0015b84:	89 c1                	mov    ecx,eax
c0015b86:	89 d0                	mov    eax,edx
c0015b88:	31 f1                	xor    ecx,esi
c0015b8a:	31 f8                	xor    eax,edi
c0015b8c:	89 ca                	mov    edx,ecx
c0015b8e:	09 c2                	or     edx,eax
c0015b90:	75 3e                	jne    c0015bd0 <VCache::write(unsigned long long, int, void*)+0x82>
c0015b92:	83 fd 01             	cmp    ebp,0x1
c0015b95:	75 39                	jne    c0015bd0 <VCache::write(unsigned long long, int, void*)+0x82>
c0015b97:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015b9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015ba0:	51                   	push   ecx
c0015ba1:	50                   	push   eax
c0015ba2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ba6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015baa:	0f af c8             	imul   ecx,eax
c0015bad:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0015bb0:	51                   	push   ecx
c0015bb1:	e8 7e aa fe ff       	call   c0000634 <memcpy>
c0015bb6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015bb9:	83 c4 10             	add    esp,0x10
c0015bbc:	40                   	inc    eax
c0015bbd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0015bc0:	83 f8 40             	cmp    eax,0x40
c0015bc3:	75 57                	jne    c0015c1c <VCache::write(unsigned long long, int, void*)+0xce>
c0015bc5:	83 ec 0c             	sub    esp,0xc
c0015bc8:	53                   	push   ebx
c0015bc9:	e8 dc fe ff ff       	call   c0015aaa <VCache::writeWriteBuffer()>
c0015bce:	eb 34                	jmp    c0015c04 <VCache::write(unsigned long long, int, void*)+0xb6>
c0015bd0:	83 ec 0c             	sub    esp,0xc
c0015bd3:	53                   	push   ebx
c0015bd4:	e8 d1 fe ff ff       	call   c0015aaa <VCache::writeWriteBuffer()>
c0015bd9:	83 c4 10             	add    esp,0x10
c0015bdc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015bdf:	83 fd 3f             	cmp    ebp,0x3f
c0015be2:	7f 25                	jg     c0015c09 <VCache::write(unsigned long long, int, void*)+0xbb>
c0015be4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0015be7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0015bea:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0015bed:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0015bf1:	52                   	push   edx
c0015bf2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015bf8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015bfc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015bff:	e8 30 aa fe ff       	call   c0000634 <memcpy>
c0015c04:	83 c4 10             	add    esp,0x10
c0015c07:	eb 13                	jmp    c0015c1c <VCache::write(unsigned long long, int, void*)+0xce>
c0015c09:	83 ec 0c             	sub    esp,0xc
c0015c0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c0e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015c12:	55                   	push   ebp
c0015c13:	57                   	push   edi
c0015c14:	56                   	push   esi
c0015c15:	50                   	push   eax
c0015c16:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015c19:	83 c4 20             	add    esp,0x20
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c22:	e8 c3 93 ff ff       	call   c000efea <Semaphore::release()>
c0015c27:	83 c4 2c             	add    esp,0x2c
c0015c2a:	31 c0                	xor    eax,eax
c0015c2c:	5b                   	pop    ebx
c0015c2d:	5e                   	pop    esi
c0015c2e:	5f                   	pop    edi
c0015c2f:	5d                   	pop    ebp
c0015c30:	c3                   	ret    
c0015c31:	90                   	nop

c0015c32 <VCache::read(unsigned long long, int, void*)>:
c0015c32:	57                   	push   edi
c0015c33:	56                   	push   esi
c0015c34:	53                   	push   ebx
c0015c35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015c3d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015c41:	83 ec 0c             	sub    esp,0xc
c0015c44:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c47:	e8 02 8e ff ff       	call   c000ea4e <Semaphore::acquire()>
c0015c4c:	83 c4 10             	add    esp,0x10
c0015c4f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015c53:	74 0c                	je     c0015c61 <VCache::read(unsigned long long, int, void*)+0x2f>
c0015c55:	83 ec 0c             	sub    esp,0xc
c0015c58:	53                   	push   ebx
c0015c59:	e8 4c fe ff ff       	call   c0015aaa <VCache::writeWriteBuffer()>
c0015c5e:	83 c4 10             	add    esp,0x10
c0015c61:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015c64:	83 ec 0c             	sub    esp,0xc
c0015c67:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c71:	57                   	push   edi
c0015c72:	56                   	push   esi
c0015c73:	50                   	push   eax
c0015c74:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c77:	83 c4 14             	add    esp,0x14
c0015c7a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c7d:	e8 68 93 ff ff       	call   c000efea <Semaphore::release()>
c0015c82:	83 c4 10             	add    esp,0x10
c0015c85:	31 c0                	xor    eax,eax
c0015c87:	5b                   	pop    ebx
c0015c88:	5e                   	pop    esi
c0015c89:	5f                   	pop    edi
c0015c8a:	c3                   	ret    
c0015c8b:	90                   	nop

c0015c8c <Video::putrect(int, int, int, int, unsigned int)>:
c0015c8c:	55                   	push   ebp
c0015c8d:	57                   	push   edi
c0015c8e:	56                   	push   esi
c0015c8f:	53                   	push   ebx
c0015c90:	83 ec 1c             	sub    esp,0x1c
c0015c93:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015c97:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0015c9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015c9f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0015ca3:	01 e8                	add    eax,ebp
c0015ca5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015ca9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cad:	01 df                	add    edi,ebx
c0015caf:	39 fb                	cmp    ebx,edi
c0015cb1:	7d 1b                	jge    c0015cce <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0015cb3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0015cb7:	7d 12                	jge    c0015ccb <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0015cb9:	8b 16                	mov    edx,DWORD PTR [esi]
c0015cbb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015cbf:	53                   	push   ebx
c0015cc0:	55                   	push   ebp
c0015cc1:	45                   	inc    ebp
c0015cc2:	56                   	push   esi
c0015cc3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015cc6:	83 c4 10             	add    esp,0x10
c0015cc9:	eb e8                	jmp    c0015cb3 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0015ccb:	43                   	inc    ebx
c0015ccc:	eb e1                	jmp    c0015caf <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0015cce:	83 c4 1c             	add    esp,0x1c
c0015cd1:	5b                   	pop    ebx
c0015cd2:	5e                   	pop    esi
c0015cd3:	5f                   	pop    edi
c0015cd4:	5d                   	pop    ebp
c0015cd5:	c3                   	ret    

c0015cd6 <Video::blit(unsigned int*, int, int, int, int)>:
c0015cd6:	55                   	push   ebp
c0015cd7:	57                   	push   edi
c0015cd8:	56                   	push   esi
c0015cd9:	53                   	push   ebx
c0015cda:	83 ec 1c             	sub    esp,0x1c
c0015cdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015ce1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015ce5:	85 c0                	test   eax,eax
c0015ce7:	79 02                	jns    c0015ceb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0015ce9:	31 c0                	xor    eax,eax
c0015ceb:	c1 e0 02             	shl    eax,0x2
c0015cee:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015cf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cf6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015cfa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0015cfe:	39 d8                	cmp    eax,ebx
c0015d00:	7e 49                	jle    c0015d4b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015d02:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015d08:	7c 41                	jl     c0015d4b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015d0a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0015d0e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015d12:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015d16:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0015d1a:	39 f9                	cmp    ecx,edi
c0015d1c:	7e 22                	jle    c0015d40 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0015d1e:	83 c5 04             	add    ebp,0x4
c0015d21:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015d27:	7c 14                	jl     c0015d3d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015d29:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015d2b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015d2e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d32:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d36:	56                   	push   esi
c0015d37:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015d3a:	83 c4 10             	add    esp,0x10
c0015d3d:	47                   	inc    edi
c0015d3e:	eb d2                	jmp    c0015d12 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015d40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d44:	43                   	inc    ebx
c0015d45:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015d49:	eb ab                	jmp    c0015cf6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015d4b:	83 c4 1c             	add    esp,0x1c
c0015d4e:	5b                   	pop    ebx
c0015d4f:	5e                   	pop    esi
c0015d50:	5f                   	pop    edi
c0015d51:	5d                   	pop    ebp
c0015d52:	c3                   	ret    
c0015d53:	90                   	nop

c0015d54 <Video::clearScreen(unsigned int)>:
c0015d54:	57                   	push   edi
c0015d55:	56                   	push   esi
c0015d56:	53                   	push   ebx
c0015d57:	31 db                	xor    ebx,ebx
c0015d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d5d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015d63:	7e 1f                	jle    c0015d84 <Video::clearScreen(unsigned int)+0x30>
c0015d65:	31 ff                	xor    edi,edi
c0015d67:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015d6d:	7e 12                	jle    c0015d81 <Video::clearScreen(unsigned int)+0x2d>
c0015d6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d75:	53                   	push   ebx
c0015d76:	57                   	push   edi
c0015d77:	47                   	inc    edi
c0015d78:	56                   	push   esi
c0015d79:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015d7c:	83 c4 10             	add    esp,0x10
c0015d7f:	eb e6                	jmp    c0015d67 <Video::clearScreen(unsigned int)+0x13>
c0015d81:	43                   	inc    ebx
c0015d82:	eb d9                	jmp    c0015d5d <Video::clearScreen(unsigned int)+0x9>
c0015d84:	5b                   	pop    ebx
c0015d85:	5e                   	pop    esi
c0015d86:	5f                   	pop    edi
c0015d87:	c3                   	ret    

c0015d88 <Video::putpixel(int, int, unsigned int)>:
c0015d88:	c7 44 24 04 34 9f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039f34
c0015d90:	e9 2b 71 ff ff       	jmp    c000cec0 <kprintf(char const*, ...)>
c0015d95:	90                   	nop

c0015d96 <Video::Video(char const*)>:
c0015d96:	83 ec 0c             	sub    esp,0xc
c0015d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d9d:	83 ec 08             	sub    esp,0x8
c0015da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015da4:	50                   	push   eax
c0015da5:	e8 c0 db ff ff       	call   c001396a <Device::Device(char const*)>
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	ba 4c 9f 03 c0       	mov    edx,0xc0039f4c
c0015db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015db6:	89 10                	mov    DWORD PTR [eax],edx
c0015db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dbc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0015dc6:	90                   	nop
c0015dc7:	83 c4 0c             	add    esp,0xc
c0015dca:	c3                   	ret    
c0015dcb:	90                   	nop

c0015dcc <Video::~Video()>:
c0015dcc:	83 ec 0c             	sub    esp,0xc
c0015dcf:	ba 4c 9f 03 c0       	mov    edx,0xc0039f4c
c0015dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dd8:	89 10                	mov    DWORD PTR [eax],edx
c0015dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dde:	83 ec 0c             	sub    esp,0xc
c0015de1:	50                   	push   eax
c0015de2:	e8 35 d8 ff ff       	call   c001361c <Device::~Device()>
c0015de7:	83 c4 10             	add    esp,0x10
c0015dea:	90                   	nop
c0015deb:	83 c4 0c             	add    esp,0xc
c0015dee:	c3                   	ret    
c0015def:	90                   	nop

c0015df0 <Video::~Video()>:
c0015df0:	83 ec 0c             	sub    esp,0xc
c0015df3:	83 ec 0c             	sub    esp,0xc
c0015df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dfa:	e8 cd ff ff ff       	call   c0015dcc <Video::~Video()>
c0015dff:	83 c4 10             	add    esp,0x10
c0015e02:	83 ec 08             	sub    esp,0x8
c0015e05:	68 64 01 00 00       	push   0x164
c0015e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e0e:	e8 6c c6 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0015e13:	83 c4 10             	add    esp,0x10
c0015e16:	83 c4 0c             	add    esp,0xc
c0015e19:	c3                   	ret    

c0015e1a <Video::isMonochrome()>:
c0015e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e1e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015e24:	c3                   	ret    
c0015e25:	90                   	nop

c0015e26 <Video::getWidth()>:
c0015e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e2a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e30:	c3                   	ret    
c0015e31:	90                   	nop

c0015e32 <Video::getHeight()>:
c0015e32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e36:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015e3c:	c3                   	ret    
c0015e3d:	90                   	nop

c0015e3e <Video::drawCursor(int, int, unsigned char*, int)>:
c0015e3e:	55                   	push   ebp
c0015e3f:	57                   	push   edi
c0015e40:	56                   	push   esi
c0015e41:	53                   	push   ebx
c0015e42:	83 ec 2c             	sub    esp,0x2c
c0015e45:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015e49:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015e4d:	83 f8 01             	cmp    eax,0x1
c0015e50:	19 c9                	sbb    ecx,ecx
c0015e52:	31 db                	xor    ebx,ebx
c0015e54:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015e58:	89 cd                	mov    ebp,ecx
c0015e5a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015e62:	f7 d5                	not    ebp
c0015e64:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015e6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015e6e:	01 d8                	add    eax,ebx
c0015e70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e74:	56                   	push   esi
c0015e75:	e8 b8 ff ff ff       	call   c0015e32 <Video::getHeight()>
c0015e7a:	59                   	pop    ecx
c0015e7b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015e7f:	7e 70                	jle    c0015ef1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015e81:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015e85:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015e89:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015e8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e90:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015e94:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015e9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e9f:	89 f8                	mov    eax,edi
c0015ea1:	83 c0 20             	add    eax,0x20
c0015ea4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ea8:	56                   	push   esi
c0015ea9:	e8 78 ff ff ff       	call   c0015e26 <Video::getWidth()>
c0015eae:	5a                   	pop    edx
c0015eaf:	39 c7                	cmp    edi,eax
c0015eb1:	7d 34                	jge    c0015ee7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015eb3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015eb8:	74 05                	je     c0015ebf <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015eba:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ebc:	55                   	push   ebp
c0015ebd:	eb 0d                	jmp    c0015ecc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015ebf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015ec4:	74 12                	je     c0015ed8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015ec6:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ec8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ecc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015ed0:	57                   	push   edi
c0015ed1:	56                   	push   esi
c0015ed2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015ed5:	83 c4 10             	add    esp,0x10
c0015ed8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015edc:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015ee0:	47                   	inc    edi
c0015ee1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015ee5:	75 c1                	jne    c0015ea8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015ee7:	43                   	inc    ebx
c0015ee8:	83 fb 20             	cmp    ebx,0x20
c0015eeb:	0f 85 79 ff ff ff    	jne    c0015e6a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015ef1:	83 c4 2c             	add    esp,0x2c
c0015ef4:	5b                   	pop    ebx
c0015ef5:	5e                   	pop    esi
c0015ef6:	5f                   	pop    edi
c0015ef7:	5d                   	pop    ebp
c0015ef8:	c3                   	ret    
c0015ef9:	90                   	nop

c0015efa <ACPI::close(int, int, void*)>:
c0015efa:	83 ec 1c             	sub    esp,0x1c
c0015efd:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015f05:	74 0a                	je     c0015f11 <ACPI::close(int, int, void*)+0x17>
c0015f07:	b8 00 00 00 00       	mov    eax,0x0
c0015f0c:	e9 9a 00 00 00       	jmp    c0015fab <ACPI::close(int, int, void*)+0xb1>
c0015f11:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015f16:	75 37                	jne    c0015f4f <ACPI::close(int, int, void*)+0x55>
c0015f18:	83 ec 0c             	sub    esp,0xc
c0015f1b:	68 84 9f 03 c0       	push   0xc0039f84
c0015f20:	e8 9b 6f ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0015f25:	83 c4 10             	add    esp,0x10
c0015f28:	a1 c8 c3 03 c0       	mov    eax,ds:0xc003c3c8
c0015f2d:	85 c0                	test   eax,eax
c0015f2f:	74 07                	je     c0015f38 <ACPI::close(int, int, void*)+0x3e>
c0015f31:	a1 c8 c3 03 c0       	mov    eax,ds:0xc003c3c8
c0015f36:	ff d0                	call   eax
c0015f38:	83 ec 0c             	sub    esp,0xc
c0015f3b:	68 38 a0 03 c0       	push   0xc003a038
c0015f40:	e8 99 70 ff ff       	call   c000cfde <panic(char const*)>
c0015f45:	83 c4 10             	add    esp,0x10
c0015f48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f4d:	eb 5c                	jmp    c0015fab <ACPI::close(int, int, void*)+0xb1>
c0015f4f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015f54:	75 50                	jne    c0015fa6 <ACPI::close(int, int, void*)+0xac>
c0015f56:	a1 c4 c3 03 c0       	mov    eax,ds:0xc003c3c4
c0015f5b:	85 c0                	test   eax,eax
c0015f5d:	74 07                	je     c0015f66 <ACPI::close(int, int, void*)+0x6c>
c0015f5f:	a1 c4 c3 03 c0       	mov    eax,ds:0xc003c3c4
c0015f64:	ff d0                	call   eax
c0015f66:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015f6b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015f70:	83 e0 02             	and    eax,0x2
c0015f73:	74 1c                	je     c0015f91 <ACPI::close(int, int, void*)+0x97>
c0015f75:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015f7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f80:	89 c2                	mov    edx,eax
c0015f82:	ec                   	in     al,dx
c0015f83:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015f87:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015f8b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015f8f:	eb da                	jmp    c0015f6b <ACPI::close(int, int, void*)+0x71>
c0015f91:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015f98:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015f9d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015fa1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015fa5:	ee                   	out    dx,al
c0015fa6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fab:	83 c4 1c             	add    esp,0x1c
c0015fae:	c3                   	ret    

c0015faf <findRSDP()>:
c0015faf:	83 ec 1c             	sub    esp,0x1c
c0015fb2:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0015fb7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015fbd:	83 e0 04             	and    eax,0x4
c0015fc0:	84 c0                	test   al,al
c0015fc2:	75 07                	jne    c0015fcb <findRSDP()+0x1c>
c0015fc4:	b8 00 00 00 00       	mov    eax,0x0
c0015fc9:	eb 6a                	jmp    c0016035 <findRSDP()+0x86>
c0015fcb:	a1 b0 bb 03 c0       	mov    eax,ds:0xc003bbb0
c0015fd0:	3d ff 07 00 00       	cmp    eax,0x7ff
c0015fd5:	7f 1b                	jg     c0015ff2 <findRSDP()+0x43>
c0015fd7:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0015fdc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015fe2:	83 e2 fb             	and    edx,0xfffffffb
c0015fe5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015feb:	b8 00 00 00 00       	mov    eax,0x0
c0015ff0:	eb 43                	jmp    c0016035 <findRSDP()+0x86>
c0015ff2:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0015ffa:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016002:	77 2c                	ja     c0016030 <findRSDP()+0x81>
c0016004:	83 ec 04             	sub    esp,0x4
c0016007:	6a 08                	push   0x8
c0016009:	68 91 9f 03 c0       	push   0xc0039f91
c001600e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016012:	e8 58 a5 fe ff       	call   c000056f <memcmp>
c0016017:	83 c4 10             	add    esp,0x10
c001601a:	85 c0                	test   eax,eax
c001601c:	0f 94 c0             	sete   al
c001601f:	84 c0                	test   al,al
c0016021:	74 06                	je     c0016029 <findRSDP()+0x7a>
c0016023:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016027:	eb 0c                	jmp    c0016035 <findRSDP()+0x86>
c0016029:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001602e:	eb ca                	jmp    c0015ffa <findRSDP()+0x4b>
c0016030:	b8 00 00 00 00       	mov    eax,0x0
c0016035:	83 c4 1c             	add    esp,0x1c
c0016038:	c3                   	ret    

c0016039 <loadACPITables(unsigned char*)>:
c0016039:	56                   	push   esi
c001603a:	53                   	push   ebx
c001603b:	83 ec 44             	sub    esp,0x44
c001603e:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0016043:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016049:	83 e0 04             	and    eax,0x4
c001604c:	84 c0                	test   al,al
c001604e:	0f 84 05 02 00 00    	je     c0016259 <loadACPITables(unsigned char*)+0x220>
c0016054:	a0 e0 c5 03 c0       	mov    al,ds:0xc003c5e0
c0016059:	84 c0                	test   al,al
c001605b:	74 75                	je     c00160d2 <loadACPITables(unsigned char*)+0x99>
c001605d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016061:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016065:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016069:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001606c:	83 e8 24             	sub    eax,0x24
c001606f:	c1 e8 03             	shr    eax,0x3
c0016072:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016076:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001607e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016082:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016086:	0f 8d b2 00 00 00    	jge    c001613e <loadACPITables(unsigned char*)+0x105>
c001608c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016090:	83 c0 24             	add    eax,0x24
c0016093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016097:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001609b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001609f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00160a3:	c1 e0 03             	shl    eax,0x3
c00160a6:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00160aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00160ae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00160b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00160b3:	89 c1                	mov    ecx,eax
c00160b5:	a1 cc c3 03 c0       	mov    eax,ds:0xc003c3cc
c00160ba:	8d 50 01             	lea    edx,[eax+0x1]
c00160bd:	89 15 cc c3 03 c0    	mov    DWORD PTR ds:0xc003c3cc,edx
c00160c3:	89 ca                	mov    edx,ecx
c00160c5:	89 14 c5 e4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c1c],edx
c00160cc:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00160d0:	eb ac                	jmp    c001607e <loadACPITables(unsigned char*)+0x45>
c00160d2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00160d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00160da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00160e1:	83 e8 24             	sub    eax,0x24
c00160e4:	c1 e8 02             	shr    eax,0x2
c00160e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160eb:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00160f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00160f7:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00160fb:	7d 41                	jge    c001613e <loadACPITables(unsigned char*)+0x105>
c00160fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016101:	83 c0 24             	add    eax,0x24
c0016104:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016108:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001610c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016110:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016114:	c1 e0 02             	shl    eax,0x2
c0016117:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001611b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001611f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016121:	a1 cc c3 03 c0       	mov    eax,ds:0xc003c3cc
c0016126:	8d 50 01             	lea    edx,[eax+0x1]
c0016129:	89 15 cc c3 03 c0    	mov    DWORD PTR ds:0xc003c3cc,edx
c001612f:	89 ca                	mov    edx,ecx
c0016131:	89 14 c5 e4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c1c],edx
c0016138:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001613c:	eb b5                	jmp    c00160f3 <loadACPITables(unsigned char*)+0xba>
c001613e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016146:	a1 cc c3 03 c0       	mov    eax,ds:0xc003c3cc
c001614b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001614f:	0f 8d 05 01 00 00    	jge    c001625a <loadACPITables(unsigned char*)+0x221>
c0016155:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016159:	8b 04 c5 e4 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3c1c]
c0016160:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016168:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001616c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016170:	25 ff 0f 00 00       	and    eax,0xfff
c0016175:	89 c6                	mov    esi,eax
c0016177:	e8 f3 b2 ff ff       	call   c001146f <Virt::getAKernelVAS()>
c001617c:	89 c3                	mov    ebx,eax
c001617e:	83 ec 0c             	sub    esp,0xc
c0016181:	6a 01                	push   0x1
c0016183:	e8 57 b1 ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c0016188:	83 c4 10             	add    esp,0x10
c001618b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001618f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016195:	83 ec 0c             	sub    esp,0xc
c0016198:	6a 01                	push   0x1
c001619a:	6a 01                	push   0x1
c001619c:	50                   	push   eax
c001619d:	52                   	push   edx
c001619e:	53                   	push   ebx
c001619f:	e8 5e ba ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00161a4:	83 c4 20             	add    esp,0x20
c00161a7:	09 f0                	or     eax,esi
c00161a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00161b1:	c1 e0 03             	shl    eax,0x3
c00161b4:	05 e0 c3 03 c0       	add    eax,0xc003c3e0
c00161b9:	83 ec 04             	sub    esp,0x4
c00161bc:	6a 04                	push   0x4
c00161be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161c2:	50                   	push   eax
c00161c3:	e8 6c a4 fe ff       	call   c0000634 <memcpy>
c00161c8:	83 c4 10             	add    esp,0x10
c00161cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00161d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00161d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161da:	05 00 10 00 00       	add    eax,0x1000
c00161df:	c1 e8 0c             	shr    eax,0xc
c00161e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00161e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00161ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f1:	25 ff 0f 00 00       	and    eax,0xfff
c00161f6:	89 c6                	mov    esi,eax
c00161f8:	e8 72 b2 ff ff       	call   c001146f <Virt::getAKernelVAS()>
c00161fd:	89 c3                	mov    ebx,eax
c00161ff:	83 ec 0c             	sub    esp,0xc
c0016202:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016206:	e8 d4 b0 ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c001620b:	83 c4 10             	add    esp,0x10
c001620e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016212:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016218:	83 ec 0c             	sub    esp,0xc
c001621b:	6a 01                	push   0x1
c001621d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016221:	50                   	push   eax
c0016222:	52                   	push   edx
c0016223:	53                   	push   ebx
c0016224:	e8 d9 b9 ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016229:	83 c4 20             	add    esp,0x20
c001622c:	09 f0                	or     eax,esi
c001622e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016232:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016235:	83 ec 0c             	sub    esp,0xc
c0016238:	50                   	push   eax
c0016239:	e8 d7 b3 ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c001623e:	83 c4 10             	add    esp,0x10
c0016241:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016245:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016249:	89 14 c5 e4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c1c],edx
c0016250:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016254:	e9 ed fe ff ff       	jmp    c0016146 <loadACPITables(unsigned char*)+0x10d>
c0016259:	90                   	nop
c001625a:	83 c4 44             	add    esp,0x44
c001625d:	5b                   	pop    ebx
c001625e:	5e                   	pop    esi
c001625f:	c3                   	ret    

c0016260 <findRSDT(unsigned char*)>:
c0016260:	56                   	push   esi
c0016261:	53                   	push   ebx
c0016262:	83 ec 44             	sub    esp,0x44
c0016265:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001626a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016270:	83 e0 04             	and    eax,0x4
c0016273:	84 c0                	test   al,al
c0016275:	75 0a                	jne    c0016281 <findRSDT(unsigned char*)+0x21>
c0016277:	b8 00 00 00 00       	mov    eax,0x0
c001627c:	e9 f7 00 00 00       	jmp    c0016378 <findRSDT(unsigned char*)+0x118>
c0016281:	83 ec 04             	sub    esp,0x4
c0016284:	6a 24                	push   0x24
c0016286:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001628a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001628e:	50                   	push   eax
c001628f:	e8 a0 a3 fe ff       	call   c0000634 <memcpy>
c0016294:	83 c4 10             	add    esp,0x10
c0016297:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001629b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001629f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00162a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00162ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00162af:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00162b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00162bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00162bf:	25 ff 0f 00 00       	and    eax,0xfff
c00162c4:	89 c6                	mov    esi,eax
c00162c6:	e8 a4 b1 ff ff       	call   c001146f <Virt::getAKernelVAS()>
c00162cb:	89 c3                	mov    ebx,eax
c00162cd:	83 ec 0c             	sub    esp,0xc
c00162d0:	6a 02                	push   0x2
c00162d2:	e8 08 b0 ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c00162d7:	83 c4 10             	add    esp,0x10
c00162da:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00162de:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	6a 01                	push   0x1
c00162e9:	6a 02                	push   0x2
c00162eb:	50                   	push   eax
c00162ec:	52                   	push   edx
c00162ed:	53                   	push   ebx
c00162ee:	e8 0f b9 ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00162f3:	83 c4 20             	add    esp,0x20
c00162f6:	09 f0                	or     eax,esi
c00162f8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00162fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016300:	25 ff 0f 00 00       	and    eax,0xfff
c0016305:	89 c6                	mov    esi,eax
c0016307:	e8 63 b1 ff ff       	call   c001146f <Virt::getAKernelVAS()>
c001630c:	89 c3                	mov    ebx,eax
c001630e:	83 ec 0c             	sub    esp,0xc
c0016311:	6a 02                	push   0x2
c0016313:	e8 c7 af ff ff       	call   c00112df <Virt::allocateKernelVirtualPages(int)>
c0016318:	83 c4 10             	add    esp,0x10
c001631b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001631f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016325:	83 ec 0c             	sub    esp,0xc
c0016328:	6a 01                	push   0x1
c001632a:	6a 02                	push   0x2
c001632c:	50                   	push   eax
c001632d:	52                   	push   edx
c001632e:	53                   	push   ebx
c001632f:	e8 ce b8 ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016334:	83 c4 20             	add    esp,0x20
c0016337:	09 f0                	or     eax,esi
c0016339:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001633d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016342:	75 11                	jne    c0016355 <findRSDT(unsigned char*)+0xf5>
c0016344:	c6 05 e0 c5 03 c0 00 	mov    BYTE PTR ds:0xc003c5e0,0x0
c001634b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001634f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016353:	eb 1f                	jmp    c0016374 <findRSDT(unsigned char*)+0x114>
c0016355:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001635a:	75 11                	jne    c001636d <findRSDT(unsigned char*)+0x10d>
c001635c:	c6 05 e0 c5 03 c0 01 	mov    BYTE PTR ds:0xc003c5e0,0x1
c0016363:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016367:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001636b:	eb 07                	jmp    c0016374 <findRSDT(unsigned char*)+0x114>
c001636d:	b8 00 00 00 00       	mov    eax,0x0
c0016372:	eb 04                	jmp    c0016378 <findRSDT(unsigned char*)+0x118>
c0016374:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016378:	83 c4 44             	add    esp,0x44
c001637b:	5b                   	pop    ebx
c001637c:	5e                   	pop    esi
c001637d:	c3                   	ret    

c001637e <findDataTable(unsigned char*, char*)>:
c001637e:	83 ec 1c             	sub    esp,0x1c
c0016381:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0016386:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001638c:	83 e0 04             	and    eax,0x4
c001638f:	84 c0                	test   al,al
c0016391:	75 07                	jne    c001639a <findDataTable(unsigned char*, char*)+0x1c>
c0016393:	b8 00 00 00 00       	mov    eax,0x0
c0016398:	eb 7c                	jmp    c0016416 <findDataTable(unsigned char*, char*)+0x98>
c001639a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00163a2:	a1 cc c3 03 c0       	mov    eax,ds:0xc003c3cc
c00163a7:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00163ab:	7d 3a                	jge    c00163e7 <findDataTable(unsigned char*, char*)+0x69>
c00163ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163b1:	c1 e0 03             	shl    eax,0x3
c00163b4:	05 e0 c3 03 c0       	add    eax,0xc003c3e0
c00163b9:	83 ec 04             	sub    esp,0x4
c00163bc:	6a 04                	push   0x4
c00163be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163c2:	50                   	push   eax
c00163c3:	e8 a7 a1 fe ff       	call   c000056f <memcmp>
c00163c8:	83 c4 10             	add    esp,0x10
c00163cb:	85 c0                	test   eax,eax
c00163cd:	0f 94 c0             	sete   al
c00163d0:	84 c0                	test   al,al
c00163d2:	74 0d                	je     c00163e1 <findDataTable(unsigned char*, char*)+0x63>
c00163d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163d8:	8b 04 c5 e4 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3c1c]
c00163df:	eb 35                	jmp    c0016416 <findDataTable(unsigned char*, char*)+0x98>
c00163e1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00163e5:	eb bb                	jmp    c00163a2 <findDataTable(unsigned char*, char*)+0x24>
c00163e7:	a0 e0 c5 03 c0       	mov    al,ds:0xc003c5e0
c00163ec:	84 c0                	test   al,al
c00163ee:	74 07                	je     c00163f7 <findDataTable(unsigned char*, char*)+0x79>
c00163f0:	b8 58 00 00 00       	mov    eax,0x58
c00163f5:	eb 05                	jmp    c00163fc <findDataTable(unsigned char*, char*)+0x7e>
c00163f7:	b8 52 00 00 00       	mov    eax,0x52
c00163fc:	83 ec 04             	sub    esp,0x4
c00163ff:	50                   	push   eax
c0016400:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016404:	68 5c a0 03 c0       	push   0xc003a05c
c0016409:	e8 b2 6a ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001640e:	83 c4 10             	add    esp,0x10
c0016411:	b8 00 00 00 00       	mov    eax,0x0
c0016416:	83 c4 1c             	add    esp,0x1c
c0016419:	c3                   	ret    

c001641a <scanMADT()>:
c001641a:	83 ec 2c             	sub    esp,0x2c
c001641d:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0016422:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016428:	83 e0 04             	and    eax,0x4
c001642b:	84 c0                	test   al,al
c001642d:	0f 84 73 03 00 00    	je     c00167a6 <scanMADT()+0x38c>
c0016433:	e8 77 fb ff ff       	call   c0015faf <findRSDP()>
c0016438:	a3 ec c5 03 c0       	mov    ds:0xc003c5ec,eax
c001643d:	a1 ec c5 03 c0       	mov    eax,ds:0xc003c5ec
c0016442:	85 c0                	test   eax,eax
c0016444:	75 19                	jne    c001645f <scanMADT()+0x45>
c0016446:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001644b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016451:	83 e2 fb             	and    edx,0xfffffffb
c0016454:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001645a:	e9 4b 03 00 00       	jmp    c00167aa <scanMADT()+0x390>
c001645f:	a1 ec c5 03 c0       	mov    eax,ds:0xc003c5ec
c0016464:	83 ec 0c             	sub    esp,0xc
c0016467:	50                   	push   eax
c0016468:	e8 f3 fd ff ff       	call   c0016260 <findRSDT(unsigned char*)>
c001646d:	83 c4 10             	add    esp,0x10
c0016470:	a3 e8 c5 03 c0       	mov    ds:0xc003c5e8,eax
c0016475:	a1 e8 c5 03 c0       	mov    eax,ds:0xc003c5e8
c001647a:	85 c0                	test   eax,eax
c001647c:	75 19                	jne    c0016497 <scanMADT()+0x7d>
c001647e:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0016483:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016489:	83 e2 fb             	and    edx,0xfffffffb
c001648c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016492:	e9 13 03 00 00       	jmp    c00167aa <scanMADT()+0x390>
c0016497:	a1 e8 c5 03 c0       	mov    eax,ds:0xc003c5e8
c001649c:	83 ec 0c             	sub    esp,0xc
c001649f:	50                   	push   eax
c00164a0:	e8 94 fb ff ff       	call   c0016039 <loadACPITables(unsigned char*)>
c00164a5:	83 c4 10             	add    esp,0x10
c00164a8:	a1 e8 c5 03 c0       	mov    eax,ds:0xc003c5e8
c00164ad:	83 ec 08             	sub    esp,0x8
c00164b0:	68 9a 9f 03 c0       	push   0xc0039f9a
c00164b5:	50                   	push   eax
c00164b6:	e8 c3 fe ff ff       	call   c001637e <findDataTable(unsigned char*, char*)>
c00164bb:	83 c4 10             	add    esp,0x10
c00164be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00164c2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00164c7:	75 19                	jne    c00164e2 <scanMADT()+0xc8>
c00164c9:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c00164ce:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00164d4:	83 e2 fe             	and    edx,0xfffffffe
c00164d7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00164dd:	e9 c8 02 00 00       	jmp    c00167aa <scanMADT()+0x390>
c00164e2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00164ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00164f1:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00164f5:	0f 87 af 02 00 00    	ja     c00167aa <scanMADT()+0x390>
c00164fb:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016503:	0f 87 a1 02 00 00    	ja     c00167aa <scanMADT()+0x390>
c0016509:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001650d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016511:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016515:	8d 50 01             	lea    edx,[eax+0x1]
c0016518:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001651c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016520:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016524:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016528:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001652c:	8d 50 01             	lea    edx,[eax+0x1]
c001652f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016533:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016537:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001653b:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c001653f:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016544:	0f 86 5f 02 00 00    	jbe    c00167a9 <scanMADT()+0x38f>
c001654a:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001654f:	75 57                	jne    c00165a8 <scanMADT()+0x18e>
c0016551:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016555:	8d 50 01             	lea    edx,[eax+0x1]
c0016558:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001655c:	8a 15 20 c7 03 c0    	mov    dl,BYTE PTR ds:0xc003c720
c0016562:	0f b6 d2             	movzx  edx,dl
c0016565:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016569:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001656d:	88 82 60 c7 03 c0    	mov    BYTE PTR [edx-0x3ffc38a0],al
c0016573:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016577:	8d 50 01             	lea    edx,[eax+0x1]
c001657a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001657e:	8a 15 20 c7 03 c0    	mov    dl,BYTE PTR ds:0xc003c720
c0016584:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016587:	88 0d 20 c7 03 c0    	mov    BYTE PTR ds:0xc003c720,cl
c001658d:	0f b6 d2             	movzx  edx,dl
c0016590:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016594:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016598:	88 82 40 c7 03 c0    	mov    BYTE PTR [edx-0x3ffc38c0],al
c001659e:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00165a3:	e9 ea 01 00 00       	jmp    c0016792 <scanMADT()+0x378>
c00165a8:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00165ad:	0f 85 14 01 00 00    	jne    c00166c7 <scanMADT()+0x2ad>
c00165b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165b7:	8d 50 01             	lea    edx,[eax+0x1]
c00165ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00165be:	8a 15 f0 c5 03 c0    	mov    dl,BYTE PTR ds:0xc003c5f0
c00165c4:	0f b6 d2             	movzx  edx,dl
c00165c7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00165cb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00165cf:	88 82 00 c6 03 c0    	mov    BYTE PTR [edx-0x3ffc3a00],al
c00165d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00165d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00165dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165e1:	01 d0                	add    eax,edx
c00165e3:	83 c0 2c             	add    eax,0x2c
c00165e6:	8a 00                	mov    al,BYTE PTR [eax]
c00165e8:	0f b6 d0             	movzx  edx,al
c00165eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00165f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165f6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00165fa:	0f b6 c0             	movzx  eax,al
c00165fd:	c1 e0 08             	shl    eax,0x8
c0016600:	89 d1                	mov    ecx,edx
c0016602:	09 c1                	or     ecx,eax
c0016604:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016608:	8d 50 02             	lea    edx,[eax+0x2]
c001660b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001660f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016613:	0f b6 c0             	movzx  eax,al
c0016616:	c1 e0 10             	shl    eax,0x10
c0016619:	09 c1                	or     ecx,eax
c001661b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001661f:	8d 50 03             	lea    edx,[eax+0x3]
c0016622:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016626:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001662a:	0f b6 c0             	movzx  eax,al
c001662d:	c1 e0 18             	shl    eax,0x18
c0016630:	09 c1                	or     ecx,eax
c0016632:	89 ca                	mov    edx,ecx
c0016634:	a0 f0 c5 03 c0       	mov    al,ds:0xc003c5f0
c0016639:	0f b6 c0             	movzx  eax,al
c001663c:	89 14 85 20 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc39e0],edx
c0016643:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016648:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001664c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016650:	01 d0                	add    eax,edx
c0016652:	83 c0 2c             	add    eax,0x2c
c0016655:	8a 00                	mov    al,BYTE PTR [eax]
c0016657:	0f b6 d0             	movzx  edx,al
c001665a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001665e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016661:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016665:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016669:	0f b6 c0             	movzx  eax,al
c001666c:	c1 e0 08             	shl    eax,0x8
c001666f:	89 d1                	mov    ecx,edx
c0016671:	09 c1                	or     ecx,eax
c0016673:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016677:	8d 50 02             	lea    edx,[eax+0x2]
c001667a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001667e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016682:	0f b6 c0             	movzx  eax,al
c0016685:	c1 e0 10             	shl    eax,0x10
c0016688:	09 c1                	or     ecx,eax
c001668a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001668e:	8d 50 03             	lea    edx,[eax+0x3]
c0016691:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016695:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016699:	0f b6 c0             	movzx  eax,al
c001669c:	c1 e0 18             	shl    eax,0x18
c001669f:	09 c1                	or     ecx,eax
c00166a1:	89 ca                	mov    edx,ecx
c00166a3:	a0 f0 c5 03 c0       	mov    al,ds:0xc003c5f0
c00166a8:	0f b6 c0             	movzx  eax,al
c00166ab:	89 14 85 a0 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3960],edx
c00166b2:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00166b7:	a0 f0 c5 03 c0       	mov    al,ds:0xc003c5f0
c00166bc:	40                   	inc    eax
c00166bd:	a2 f0 c5 03 c0       	mov    ds:0xc003c5f0,al
c00166c2:	e9 cb 00 00 00       	jmp    c0016792 <scanMADT()+0x378>
c00166c7:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00166cc:	0f 85 a6 00 00 00    	jne    c0016778 <scanMADT()+0x35e>
c00166d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166d6:	8d 50 01             	lea    edx,[eax+0x1]
c00166d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00166dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166e1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00166e5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00166e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166ed:	8d 50 01             	lea    edx,[eax+0x1]
c00166f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00166f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166f8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00166fc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016700:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016708:	01 d0                	add    eax,edx
c001670a:	83 c0 2c             	add    eax,0x2c
c001670d:	8a 00                	mov    al,BYTE PTR [eax]
c001670f:	0f b6 d0             	movzx  edx,al
c0016712:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016716:	8d 48 01             	lea    ecx,[eax+0x1]
c0016719:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001671d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016721:	0f b6 c0             	movzx  eax,al
c0016724:	c1 e0 08             	shl    eax,0x8
c0016727:	89 d1                	mov    ecx,edx
c0016729:	09 c1                	or     ecx,eax
c001672b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001672f:	8d 50 02             	lea    edx,[eax+0x2]
c0016732:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016736:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001673a:	0f b6 c0             	movzx  eax,al
c001673d:	c1 e0 10             	shl    eax,0x10
c0016740:	09 c1                	or     ecx,eax
c0016742:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016746:	8d 50 03             	lea    edx,[eax+0x3]
c0016749:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001674d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016751:	0f b6 c0             	movzx  eax,al
c0016754:	c1 e0 18             	shl    eax,0x18
c0016757:	09 c8                	or     eax,ecx
c0016759:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001675d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016762:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016767:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001676c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016770:	88 90 40 b1 03 c0    	mov    BYTE PTR [eax-0x3ffc4ec0],dl
c0016776:	eb 1a                	jmp    c0016792 <scanMADT()+0x378>
c0016778:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c001677d:	75 07                	jne    c0016786 <scanMADT()+0x36c>
c001677f:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016784:	eb 0c                	jmp    c0016792 <scanMADT()+0x378>
c0016786:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c001678b:	75 05                	jne    c0016792 <scanMADT()+0x378>
c001678d:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016792:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001679b:	01 d0                	add    eax,edx
c001679d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00167a1:	e9 44 fd ff ff       	jmp    c00164ea <scanMADT()+0xd0>
c00167a6:	90                   	nop
c00167a7:	eb 01                	jmp    c00167aa <scanMADT()+0x390>
c00167a9:	90                   	nop
c00167aa:	83 c4 2c             	add    esp,0x2c
c00167ad:	c3                   	ret    

c00167ae <ACPI::ACPI()>:
c00167ae:	83 ec 0c             	sub    esp,0xc
c00167b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b5:	83 ec 08             	sub    esp,0x8
c00167b8:	68 9f 9f 03 c0       	push   0xc0039f9f
c00167bd:	50                   	push   eax
c00167be:	e8 a7 d1 ff ff       	call   c001396a <Device::Device(char const*)>
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	ba 28 a1 03 c0       	mov    edx,0xc003a128
c00167cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167cf:	89 10                	mov    DWORD PTR [eax],edx
c00167d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00167dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e0:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00167ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ee:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00167f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167fc:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016803:	e8 12 fc ff ff       	call   c001641a <scanMADT()>
c0016808:	90                   	nop
c0016809:	83 c4 0c             	add    esp,0xc
c001680c:	c3                   	ret    
c001680d:	90                   	nop

c001680e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001680e:	83 ec 2c             	sub    esp,0x2c
c0016811:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016815:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016819:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001681d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016821:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016826:	88 d0                	mov    al,dl
c0016828:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001682c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016831:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016839:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001683d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016843:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016847:	0f 8d 97 00 00 00    	jge    c00168e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001684d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016851:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016855:	83 c2 2a             	add    edx,0x2a
c0016858:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001685c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016861:	75 78                	jne    c00168db <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016863:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016867:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001686b:	83 c2 2a             	add    edx,0x2a
c001686e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016872:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016876:	75 63                	jne    c00168db <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016878:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001687d:	74 3a                	je     c00168b9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001687f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016883:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016887:	83 c2 2a             	add    edx,0x2a
c001688a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001688e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016892:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016895:	39 c2                	cmp    edx,eax
c0016897:	74 10                	je     c00168a9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016899:	83 ec 0c             	sub    esp,0xc
c001689c:	68 8c a0 03 c0       	push   0xc003a08c
c00168a1:	e8 38 67 ff ff       	call   c000cfde <panic(char const*)>
c00168a6:	83 c4 10             	add    esp,0x10
c00168a9:	83 ec 0c             	sub    esp,0xc
c00168ac:	68 a4 9f 03 c0       	push   0xc0039fa4
c00168b1:	e8 28 67 ff ff       	call   c000cfde <panic(char const*)>
c00168b6:	83 c4 10             	add    esp,0x10
c00168b9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00168bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00168c5:	83 c2 2a             	add    edx,0x2a
c00168c8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00168cc:	8b 02                	mov    eax,DWORD PTR [edx]
c00168ce:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00168d1:	89 01                	mov    DWORD PTR [ecx],eax
c00168d3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00168d6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00168db:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00168df:	e9 55 ff ff ff       	jmp    c0016839 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00168e4:	90                   	nop
c00168e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168e9:	83 c4 2c             	add    esp,0x2c
c00168ec:	c2 04 00             	ret    0x4
c00168ef:	90                   	nop

c00168f0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00168f0:	56                   	push   esi
c00168f1:	53                   	push   ebx
c00168f2:	83 ec 14             	sub    esp,0x14
c00168f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00168f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00168fd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016901:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016906:	88 c8                	mov    al,cl
c0016908:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001690c:	88 d0                	mov    al,dl
c001690e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016916:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001691c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016920:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016926:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001692b:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016930:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016935:	83 ec 04             	sub    esp,0x4
c0016938:	56                   	push   esi
c0016939:	53                   	push   ebx
c001693a:	51                   	push   ecx
c001693b:	52                   	push   edx
c001693c:	50                   	push   eax
c001693d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016941:	68 bc a0 03 c0       	push   0xc003a0bc
c0016946:	e8 75 65 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001694b:	83 c4 20             	add    esp,0x20
c001694e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016952:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001695f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016963:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001696b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016971:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016975:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001697c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016985:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001698b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001698f:	8d 48 01             	lea    ecx,[eax+0x1]
c0016992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016996:	83 c2 2a             	add    edx,0x2a
c0016999:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001699d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a1:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00169a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ab:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00169ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00169b2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00169b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ba:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00169c0:	8d 50 01             	lea    edx,[eax+0x1]
c00169c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c7:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00169cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d1:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00169d7:	3d 00 08 00 00       	cmp    eax,0x800
c00169dc:	75 10                	jne    c00169ee <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00169de:	83 ec 0c             	sub    esp,0xc
c00169e1:	68 b3 9f 03 c0       	push   0xc0039fb3
c00169e6:	e8 f3 65 ff ff       	call   c000cfde <panic(char const*)>
c00169eb:	83 c4 10             	add    esp,0x10
c00169ee:	90                   	nop
c00169ef:	83 c4 14             	add    esp,0x14
c00169f2:	5b                   	pop    ebx
c00169f3:	5e                   	pop    esi
c00169f4:	c3                   	ret    
c00169f5:	90                   	nop

c00169f6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00169f6:	b8 00 00 00 00       	mov    eax,0x0
c00169fb:	c3                   	ret    

c00169fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00169fc:	83 ec 1c             	sub    esp,0x1c
c00169ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a03:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0016a06:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016a0a:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0016a0f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0016a14:	83 ec 08             	sub    esp,0x8
c0016a17:	52                   	push   edx
c0016a18:	50                   	push   eax
c0016a19:	e8 0e 4c ff ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c0016a1e:	83 c4 10             	add    esp,0x10
c0016a21:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0016a25:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0016a2a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0016a2f:	83 ec 04             	sub    esp,0x4
c0016a32:	6a 01                	push   0x1
c0016a34:	52                   	push   edx
c0016a35:	50                   	push   eax
c0016a36:	e8 f9 4c ff ff       	call   c000b734 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016a3b:	83 c4 10             	add    esp,0x10
c0016a3e:	90                   	nop
c0016a3f:	83 c4 1c             	add    esp,0x1c
c0016a42:	c3                   	ret    
c0016a43:	90                   	nop

c0016a44 <ACPI::open(int, int, void*)>:
c0016a44:	53                   	push   ebx
c0016a45:	83 ec 18             	sub    esp,0x18
c0016a48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a4c:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0016a53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a57:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0016a5d:	84 c0                	test   al,al
c0016a5f:	74 60                	je     c0016ac1 <ACPI::open(int, int, void*)+0x7d>
c0016a61:	83 ec 0c             	sub    esp,0xc
c0016a64:	68 58 01 00 00       	push   0x158
c0016a69:	e8 02 ba ff ff       	call   c0012470 <operator new(unsigned long)>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	89 c3                	mov    ebx,eax
c0016a73:	83 ec 0c             	sub    esp,0xc
c0016a76:	53                   	push   ebx
c0016a77:	e8 26 45 00 00       	call   c001afa2 <PCI::PCI()>
c0016a7c:	83 c4 10             	add    esp,0x10
c0016a7f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016a83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a87:	83 ec 08             	sub    esp,0x8
c0016a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a8e:	50                   	push   eax
c0016a8f:	e8 e6 cc ff ff       	call   c001377a <Device::addChild(Device*)>
c0016a94:	83 c4 10             	add    esp,0x10
c0016a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a9d:	83 c0 08             	add    eax,0x8
c0016aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0016aa2:	6a 00                	push   0x0
c0016aa4:	6a 00                	push   0x0
c0016aa6:	6a 00                	push   0x0
c0016aa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016aac:	ff d0                	call   eax
c0016aae:	83 c4 10             	add    esp,0x10
c0016ab1:	83 ec 0c             	sub    esp,0xc
c0016ab4:	68 d0 9f 03 c0       	push   0xc0039fd0
c0016ab9:	e8 02 64 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0016abe:	83 c4 10             	add    esp,0x10
c0016ac1:	83 ec 0c             	sub    esp,0xc
c0016ac4:	68 db 9f 03 c0       	push   0xc0039fdb
c0016ac9:	e8 0a 52 ff ff       	call   c000bcd8 <loadKernelSymbolTable(char const*)>
c0016ace:	83 c4 10             	add    esp,0x10
c0016ad1:	8b 1d e8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9e8
c0016ad7:	83 ec 0c             	sub    esp,0xc
c0016ada:	68 f9 9f 03 c0       	push   0xc0039ff9
c0016adf:	e8 bd 5b ff ff       	call   c000c6a1 <loadDLL(char const*)>
c0016ae4:	83 c4 10             	add    esp,0x10
c0016ae7:	83 ec 08             	sub    esp,0x8
c0016aea:	53                   	push   ebx
c0016aeb:	50                   	push   eax
c0016aec:	e8 79 5c ff ff       	call   c000c76a <executeDLL(unsigned long, void*)>
c0016af1:	83 c4 10             	add    esp,0x10
c0016af4:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0016af9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016aff:	83 e0 04             	and    eax,0x4
c0016b02:	84 c0                	test   al,al
c0016b04:	74 57                	je     c0016b5d <ACPI::open(int, int, void*)+0x119>
c0016b06:	8b 1d e8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9e8
c0016b0c:	83 ec 0c             	sub    esp,0xc
c0016b0f:	68 16 a0 03 c0       	push   0xc003a016
c0016b14:	e8 88 5b ff ff       	call   c000c6a1 <loadDLL(char const*)>
c0016b19:	83 c4 10             	add    esp,0x10
c0016b1c:	83 ec 08             	sub    esp,0x8
c0016b1f:	53                   	push   ebx
c0016b20:	50                   	push   eax
c0016b21:	e8 44 5c ff ff       	call   c000c76a <executeDLL(unsigned long, void*)>
c0016b26:	83 c4 10             	add    esp,0x10
c0016b29:	a1 e8 c5 03 c0       	mov    eax,ds:0xc003c5e8
c0016b2e:	83 ec 08             	sub    esp,0x8
c0016b31:	68 33 a0 03 c0       	push   0xc003a033
c0016b36:	50                   	push   eax
c0016b37:	e8 42 f8 ff ff       	call   c001637e <findDataTable(unsigned char*, char*)>
c0016b3c:	83 c4 10             	add    esp,0x10
c0016b3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b43:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016b48:	74 13                	je     c0016b5d <ACPI::open(int, int, void*)+0x119>
c0016b4a:	83 ec 08             	sub    esp,0x8
c0016b4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b55:	e8 a2 fe ff ff       	call   c00169fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0016b5a:	83 c4 10             	add    esp,0x10
c0016b5d:	b8 00 00 00 00       	mov    eax,0x0
c0016b62:	83 c4 18             	add    esp,0x18
c0016b65:	5b                   	pop    ebx
c0016b66:	c3                   	ret    
c0016b67:	90                   	nop

c0016b68 <ACPI::sleep()>:
c0016b68:	83 ec 0c             	sub    esp,0xc
c0016b6b:	a1 c0 c3 03 c0       	mov    eax,ds:0xc003c3c0
c0016b70:	85 c0                	test   eax,eax
c0016b72:	74 07                	je     c0016b7b <ACPI::sleep()+0x13>
c0016b74:	a1 c0 c3 03 c0       	mov    eax,ds:0xc003c3c0
c0016b79:	ff d0                	call   eax
c0016b7b:	90                   	nop
c0016b7c:	83 c4 0c             	add    esp,0xc
c0016b7f:	c3                   	ret    

c0016b80 <CPU::close(int, int, void*)>:
c0016b80:	31 c0                	xor    eax,eax
c0016b82:	c3                   	ret    

c0016b83 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0016b83:	55                   	push   ebp
c0016b84:	57                   	push   edi
c0016b85:	56                   	push   esi
c0016b86:	53                   	push   ebx
c0016b87:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016b8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b8f:	89 ce                	mov    esi,ecx
c0016b91:	89 d5                	mov    ebp,edx
c0016b93:	80 f9 04             	cmp    cl,0x4
c0016b96:	75 28                	jne    c0016bc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0016b98:	8d 42 f9             	lea    eax,[edx-0x7]
c0016b9b:	3c 03                	cmp    al,0x3
c0016b9d:	0f 86 63 01 00 00    	jbe    c0016d06 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016ba3:	80 fa 03             	cmp    dl,0x3
c0016ba6:	0f 84 5a 01 00 00    	je     c0016d06 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016bac:	8d 7a f2             	lea    edi,[edx-0xe]
c0016baf:	b8 10 b3 03 c0       	mov    eax,0xc003b310
c0016bb4:	89 fb                	mov    ebx,edi
c0016bb6:	80 fb 01             	cmp    bl,0x1
c0016bb9:	77 4e                	ja     c0016c09 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0016bbb:	e9 52 01 00 00       	jmp    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bc0:	80 f9 05             	cmp    cl,0x5
c0016bc3:	75 4d                	jne    c0016c12 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0016bc5:	b8 20 b3 03 c0       	mov    eax,0xc003b320
c0016bca:	80 fa 03             	cmp    dl,0x3
c0016bcd:	0f 86 3f 01 00 00    	jbe    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bd3:	8d 7a fa             	lea    edi,[edx-0x6]
c0016bd6:	b8 30 b3 03 c0       	mov    eax,0xc003b330
c0016bdb:	89 fb                	mov    ebx,edi
c0016bdd:	80 fb 01             	cmp    bl,0x1
c0016be0:	0f 86 2c 01 00 00    	jbe    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016be6:	b8 40 b3 03 c0       	mov    eax,0xc003b340
c0016beb:	80 fa 08             	cmp    dl,0x8
c0016bee:	0f 84 1e 01 00 00    	je     c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bf4:	89 d7                	mov    edi,edx
c0016bf6:	b8 50 b3 03 c0       	mov    eax,0xc003b350
c0016bfb:	83 e7 fb             	and    edi,0xfffffffb
c0016bfe:	89 fb                	mov    ebx,edi
c0016c00:	80 fb 09             	cmp    bl,0x9
c0016c03:	0f 84 09 01 00 00    	je     c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c09:	31 c0                	xor    eax,eax
c0016c0b:	89 eb                	mov    ebx,ebp
c0016c0d:	0f b6 fb             	movzx  edi,bl
c0016c10:	eb 30                	jmp    c0016c42 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0016c12:	31 c0                	xor    eax,eax
c0016c14:	80 f9 06             	cmp    cl,0x6
c0016c17:	75 f2                	jne    c0016c0b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016c19:	80 fa 0a             	cmp    dl,0xa
c0016c1c:	77 ed                	ja     c0016c0b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016c1e:	bf de 05 00 00       	mov    edi,0x5de
c0016c23:	0f a3 d7             	bt     edi,edx
c0016c26:	73 e3                	jae    c0016c0b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016c28:	b8 60 b3 03 c0       	mov    eax,0xc003b360
c0016c2d:	e9 e0 00 00 00       	jmp    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c32:	39 c7                	cmp    edi,eax
c0016c34:	0f 84 d3 00 00 00    	je     c0016d0d <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016c3a:	40                   	inc    eax
c0016c3b:	3d d0 00 00 00       	cmp    eax,0xd0
c0016c40:	74 09                	je     c0016c4b <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0016c42:	89 f3                	mov    ebx,esi
c0016c44:	80 fb 0f             	cmp    bl,0xf
c0016c47:	75 f1                	jne    c0016c3a <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016c49:	eb e7                	jmp    c0016c32 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0016c4b:	80 f9 10             	cmp    cl,0x10
c0016c4e:	75 14                	jne    c0016c64 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016c50:	8d 42 fc             	lea    eax,[edx-0x4]
c0016c53:	83 e0 fb             	and    eax,0xfffffffb
c0016c56:	3c 02                	cmp    al,0x2
c0016c58:	76 34                	jbe    c0016c8e <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0016c5a:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016c5f:	80 fa 02             	cmp    dl,0x2
c0016c62:	eb 24                	jmp    c0016c88 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0016c64:	80 f9 11             	cmp    cl,0x11
c0016c67:	75 13                	jne    c0016c7c <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016c69:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016c6e:	80 fa 03             	cmp    dl,0x3
c0016c71:	0f 85 9b 00 00 00    	jne    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c77:	e9 91 00 00 00       	jmp    c0016d0d <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016c7c:	80 f9 12             	cmp    cl,0x12
c0016c7f:	75 14                	jne    c0016c95 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016c81:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016c86:	fe ca                	dec    dl
c0016c88:	0f 85 84 00 00 00    	jne    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c8e:	b8 80 b3 03 c0       	mov    eax,0xc003b380
c0016c93:	eb 7d                	jmp    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c95:	80 f9 14             	cmp    cl,0x14
c0016c98:	75 12                	jne    c0016cac <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0016c9a:	4a                   	dec    edx
c0016c9b:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016ca0:	80 fa 01             	cmp    dl,0x1
c0016ca3:	77 6d                	ja     c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ca5:	b8 90 b3 03 c0       	mov    eax,0xc003b390
c0016caa:	eb 66                	jmp    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cac:	80 f9 15             	cmp    cl,0x15
c0016caf:	75 31                	jne    c0016ce2 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0016cb1:	b8 a0 b3 03 c0       	mov    eax,0xc003b3a0
c0016cb6:	80 fa 01             	cmp    dl,0x1
c0016cb9:	74 57                	je     c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cbb:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016cc0:	80 fa 13             	cmp    dl,0x13
c0016cc3:	76 0c                	jbe    c0016cd1 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0016cc5:	80 fa 30             	cmp    dl,0x30
c0016cc8:	75 48                	jne    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cca:	b8 c0 b3 03 c0       	mov    eax,0xc003b3c0
c0016ccf:	eb 41                	jmp    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cd1:	b9 04 00 09 00       	mov    ecx,0x90004
c0016cd6:	0f a3 d1             	bt     ecx,edx
c0016cd9:	73 37                	jae    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cdb:	b8 b0 b3 03 c0       	mov    eax,0xc003b3b0
c0016ce0:	eb 30                	jmp    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ce2:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016ce7:	80 f9 16             	cmp    cl,0x16
c0016cea:	75 26                	jne    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cec:	b8 d0 b3 03 c0       	mov    eax,0xc003b3d0
c0016cf1:	84 d2                	test   dl,dl
c0016cf3:	74 1d                	je     c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cf5:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016cfa:	80 fa 30             	cmp    dl,0x30
c0016cfd:	75 13                	jne    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cff:	b8 e0 b3 03 c0       	mov    eax,0xc003b3e0
c0016d04:	eb 0c                	jmp    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d06:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0016d0b:	eb 05                	jmp    c0016d12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d0d:	b8 70 b3 03 c0       	mov    eax,0xc003b370
c0016d12:	5b                   	pop    ebx
c0016d13:	5e                   	pop    esi
c0016d14:	5f                   	pop    edi
c0016d15:	5d                   	pop    ebp
c0016d16:	c3                   	ret    

c0016d17 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0016d17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016d1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d1f:	80 f9 04             	cmp    cl,0x4
c0016d22:	75 6b                	jne    c0016d8f <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0016d24:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016d29:	80 fa 01             	cmp    dl,0x1
c0016d2c:	0f 86 92 02 00 00    	jbe    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d32:	b8 70 b1 03 c0       	mov    eax,0xc003b170
c0016d37:	80 fa 02             	cmp    dl,0x2
c0016d3a:	0f 84 84 02 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d40:	b8 80 b1 03 c0       	mov    eax,0xc003b180
c0016d45:	80 fa 03             	cmp    dl,0x3
c0016d48:	0f 84 76 02 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d4e:	b8 90 b1 03 c0       	mov    eax,0xc003b190
c0016d53:	80 fa 04             	cmp    dl,0x4
c0016d56:	0f 84 68 02 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d5c:	b8 a0 b1 03 c0       	mov    eax,0xc003b1a0
c0016d61:	80 fa 05             	cmp    dl,0x5
c0016d64:	0f 84 5a 02 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d6a:	b8 80 b1 03 c0       	mov    eax,0xc003b180
c0016d6f:	80 fa 07             	cmp    dl,0x7
c0016d72:	0f 84 4c 02 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d78:	83 ea 08             	sub    edx,0x8
c0016d7b:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016d80:	80 fa 01             	cmp    dl,0x1
c0016d83:	0f 87 3b 02 00 00    	ja     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d89:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016d8e:	c3                   	ret    
c0016d8f:	80 f9 05             	cmp    cl,0x5
c0016d92:	75 45                	jne    c0016dd9 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0016d94:	8d 4a ff             	lea    ecx,[edx-0x1]
c0016d97:	b8 c0 b1 03 c0       	mov    eax,0xc003b1c0
c0016d9c:	80 f9 02             	cmp    cl,0x2
c0016d9f:	0f 86 1f 02 00 00    	jbe    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016da5:	80 fa 04             	cmp    dl,0x4
c0016da8:	0f 84 f3 01 00 00    	je     c0016fa1 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0016dae:	80 fa 07             	cmp    dl,0x7
c0016db1:	0f 84 0d 02 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016db7:	b8 d0 b1 03 c0       	mov    eax,0xc003b1d0
c0016dbc:	80 fa 08             	cmp    dl,0x8
c0016dbf:	0f 84 ff 01 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dc5:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016dca:	80 fa 09             	cmp    dl,0x9
c0016dcd:	0f 85 f1 01 00 00    	jne    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dd3:	b8 e0 b1 03 c0       	mov    eax,0xc003b1e0
c0016dd8:	c3                   	ret    
c0016dd9:	80 f9 06             	cmp    cl,0x6
c0016ddc:	0f 85 85 01 00 00    	jne    c0016f67 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0016de2:	b8 f0 b1 03 c0       	mov    eax,0xc003b1f0
c0016de7:	80 fa 01             	cmp    dl,0x1
c0016dea:	0f 84 d4 01 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016df0:	8d 42 fb             	lea    eax,[edx-0x5]
c0016df3:	3c 01                	cmp    al,0x1
c0016df5:	0f 86 ac 01 00 00    	jbe    c0016fa7 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016dfb:	80 fa 03             	cmp    dl,0x3
c0016dfe:	0f 84 a3 01 00 00    	je     c0016fa7 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016e04:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016e07:	b8 10 b2 03 c0       	mov    eax,0xc003b210
c0016e0c:	80 f9 01             	cmp    cl,0x1
c0016e0f:	0f 86 af 01 00 00    	jbe    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e15:	80 fa 09             	cmp    dl,0x9
c0016e18:	0f 84 8f 01 00 00    	je     c0016fad <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016e1e:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016e21:	80 f9 01             	cmp    cl,0x1
c0016e24:	0f 86 9a 01 00 00    	jbe    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e2a:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016e2f:	80 fa 0d             	cmp    dl,0xd
c0016e32:	0f 84 8c 01 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e38:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016e3d:	80 fa 0e             	cmp    dl,0xe
c0016e40:	0f 84 7e 01 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e46:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016e4b:	80 fa 0f             	cmp    dl,0xf
c0016e4e:	0f 84 70 01 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e54:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016e59:	80 fa 15             	cmp    dl,0x15
c0016e5c:	0f 84 62 01 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e62:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016e65:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016e6a:	80 f9 01             	cmp    cl,0x1
c0016e6d:	0f 86 51 01 00 00    	jbe    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e73:	80 fa 1a             	cmp    dl,0x1a
c0016e76:	0f 84 37 01 00 00    	je     c0016fb3 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016e7c:	80 fa 1c             	cmp    dl,0x1c
c0016e7f:	0f 84 34 01 00 00    	je     c0016fb9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016e85:	80 fa 1d             	cmp    dl,0x1d
c0016e88:	0f 84 36 01 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e8e:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016e93:	80 fa 25             	cmp    dl,0x25
c0016e96:	0f 84 28 01 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e9c:	8d 4a da             	lea    ecx,[edx-0x26]
c0016e9f:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016ea4:	80 f9 01             	cmp    cl,0x1
c0016ea7:	0f 86 17 01 00 00    	jbe    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ead:	b8 80 b2 03 c0       	mov    eax,0xc003b280
c0016eb2:	80 fa 2a             	cmp    dl,0x2a
c0016eb5:	0f 84 09 01 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ebb:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016ec0:	80 fa 2c             	cmp    dl,0x2c
c0016ec3:	0f 84 fb 00 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ec9:	b8 80 b2 03 c0       	mov    eax,0xc003b280
c0016ece:	80 fa 2d             	cmp    dl,0x2d
c0016ed1:	0f 84 ed 00 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ed7:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016edc:	80 fa 2e             	cmp    dl,0x2e
c0016edf:	0f 84 df 00 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ee5:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016eea:	80 fa 2f             	cmp    dl,0x2f
c0016eed:	0f 84 d1 00 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ef3:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016ef6:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016efb:	80 f9 01             	cmp    cl,0x1
c0016efe:	0f 86 c0 00 00 00    	jbe    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f04:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016f09:	80 fa 37             	cmp    dl,0x37
c0016f0c:	0f 84 b2 00 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f12:	b8 a0 b2 03 c0       	mov    eax,0xc003b2a0
c0016f17:	80 fa 3a             	cmp    dl,0x3a
c0016f1a:	0f 84 a4 00 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f20:	b8 b0 b2 03 c0       	mov    eax,0xc003b2b0
c0016f25:	80 fa 3c             	cmp    dl,0x3c
c0016f28:	0f 84 96 00 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f2e:	b8 c0 b2 03 c0       	mov    eax,0xc003b2c0
c0016f33:	80 fa 3d             	cmp    dl,0x3d
c0016f36:	0f 84 88 00 00 00    	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f3c:	b8 a0 b2 03 c0       	mov    eax,0xc003b2a0
c0016f41:	80 fa 3e             	cmp    dl,0x3e
c0016f44:	74 7e                	je     c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f46:	8d 42 bb             	lea    eax,[edx-0x45]
c0016f49:	3c 01                	cmp    al,0x1
c0016f4b:	76 72                	jbe    c0016fbf <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016f4d:	80 fa 3f             	cmp    dl,0x3f
c0016f50:	74 6d                	je     c0016fbf <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016f52:	80 fa 4a             	cmp    dl,0x4a
c0016f55:	74 0a                	je     c0016f61 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016f57:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016f5c:	80 fa 4d             	cmp    dl,0x4d
c0016f5f:	75 63                	jne    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f61:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016f66:	c3                   	ret    
c0016f67:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016f6c:	80 f9 0b             	cmp    cl,0xb
c0016f6f:	75 0a                	jne    c0016f7b <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016f71:	fe ca                	dec    dl
c0016f73:	75 4f                	jne    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f75:	b8 d0 b2 03 c0       	mov    eax,0xc003b2d0
c0016f7a:	c3                   	ret    
c0016f7b:	80 f9 0f             	cmp    cl,0xf
c0016f7e:	75 44                	jne    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f80:	b8 e0 b2 03 c0       	mov    eax,0xc003b2e0
c0016f85:	80 fa 02             	cmp    dl,0x2
c0016f88:	76 3a                	jbe    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f8a:	8d 42 fd             	lea    eax,[edx-0x3]
c0016f8d:	3c 01                	cmp    al,0x1
c0016f8f:	76 0a                	jbe    c0016f9b <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016f91:	b8 a1 a2 03 c0       	mov    eax,0xc003a2a1
c0016f96:	80 fa 06             	cmp    dl,0x6
c0016f99:	75 29                	jne    c0016fc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f9b:	b8 f0 b2 03 c0       	mov    eax,0xc003b2f0
c0016fa0:	c3                   	ret    
c0016fa1:	b8 d0 b1 03 c0       	mov    eax,0xc003b1d0
c0016fa6:	c3                   	ret    
c0016fa7:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016fac:	c3                   	ret    
c0016fad:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016fb2:	c3                   	ret    
c0016fb3:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016fb8:	c3                   	ret    
c0016fb9:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016fbe:	c3                   	ret    
c0016fbf:	b8 b0 b2 03 c0       	mov    eax,0xc003b2b0
c0016fc4:	c3                   	ret    

c0016fc5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016fc5:	60                   	pusha  
c0016fc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016fca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fd2:	9c                   	pushf  
c0016fd3:	fa                   	cli    
c0016fd4:	0f 09                	wbinvd 
c0016fd6:	0f 30                	wrmsr  
c0016fd8:	9d                   	popf   
c0016fd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016fdd:	89 02                	mov    DWORD PTR [edx],eax
c0016fdf:	61                   	popa   
c0016fe0:	c3                   	ret    

c0016fe1 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016fe1:	60                   	pusha  
c0016fe2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016fe6:	9c                   	pushf  
c0016fe7:	fa                   	cli    
c0016fe8:	0f 09                	wbinvd 
c0016fea:	31 c0                	xor    eax,eax
c0016fec:	31 d2                	xor    edx,edx
c0016fee:	0f 32                	rdmsr  
c0016ff0:	9d                   	popf   
c0016ff1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ff5:	89 02                	mov    DWORD PTR [edx],eax
c0016ff7:	61                   	popa   
c0016ff8:	c3                   	ret    

c0016ff9 <AMD_K6_writeback(int, int, int)>:
c0016ff9:	56                   	push   esi
c0016ffa:	53                   	push   ebx
c0016ffb:	83 ec 10             	sub    esp,0x10
c0016ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017002:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017007:	75 5d                	jne    c0017066 <AMD_K6_writeback(int, int, int)+0x6d>
c0017009:	83 f8 08             	cmp    eax,0x8
c001700c:	75 09                	jne    c0017017 <AMD_K6_writeback(int, int, int)+0x1e>
c001700e:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017013:	7e 13                	jle    c0017028 <AMD_K6_writeback(int, int, int)+0x2f>
c0017015:	eb 30                	jmp    c0017047 <AMD_K6_writeback(int, int, int)+0x4e>
c0017017:	83 f8 06             	cmp    eax,0x6
c001701a:	7c 4a                	jl     c0017066 <AMD_K6_writeback(int, int, int)+0x6d>
c001701c:	83 f8 07             	cmp    eax,0x7
c001701f:	7e 07                	jle    c0017028 <AMD_K6_writeback(int, int, int)+0x2f>
c0017021:	83 f8 09             	cmp    eax,0x9
c0017024:	74 21                	je     c0017047 <AMD_K6_writeback(int, int, int)+0x4e>
c0017026:	eb 3e                	jmp    c0017066 <AMD_K6_writeback(int, int, int)+0x6d>
c0017028:	89 e6                	mov    esi,esp
c001702a:	8b 1d a4 bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bba4
c0017030:	56                   	push   esi
c0017031:	c1 eb 15             	shr    ebx,0x15
c0017034:	68 82 00 00 c0       	push   0xc0000082
c0017039:	83 e3 7e             	and    ebx,0x7e
c001703c:	e8 a0 ff ff ff       	call   c0016fe1 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017041:	56                   	push   esi
c0017042:	6a 00                	push   0x0
c0017044:	53                   	push   ebx
c0017045:	eb 12                	jmp    c0017059 <AMD_K6_writeback(int, int, int)+0x60>
c0017047:	89 e3                	mov    ebx,esp
c0017049:	53                   	push   ebx
c001704a:	68 82 00 00 c0       	push   0xc0000082
c001704f:	e8 8d ff ff ff       	call   c0016fe1 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017054:	53                   	push   ebx
c0017055:	6a 00                	push   0x0
c0017057:	6a 00                	push   0x0
c0017059:	68 82 00 00 c0       	push   0xc0000082
c001705e:	e8 62 ff ff ff       	call   c0016fc5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017063:	83 c4 18             	add    esp,0x18
c0017066:	83 c4 10             	add    esp,0x10
c0017069:	5b                   	pop    ebx
c001706a:	5e                   	pop    esi
c001706b:	c3                   	ret    

c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001706c:	55                   	push   ebp
c001706d:	57                   	push   edi
c001706e:	56                   	push   esi
c001706f:	53                   	push   ebx
c0017070:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017074:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017078:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001707c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017080:	39 05 00 b4 03 c0    	cmp    DWORD PTR ds:0xc003b400,eax
c0017086:	75 23                	jne    c00170ab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017088:	a1 8c c7 03 c0       	mov    eax,ds:0xc003c78c
c001708d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017091:	89 06                	mov    DWORD PTR [esi],eax
c0017093:	a1 88 c7 03 c0       	mov    eax,ds:0xc003c788
c0017098:	89 07                	mov    DWORD PTR [edi],eax
c001709a:	a1 84 c7 03 c0       	mov    eax,ds:0xc003c784
c001709f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00170a2:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c00170a7:	89 02                	mov    DWORD PTR [edx],eax
c00170a9:	eb 3f                	jmp    c00170ea <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00170ab:	31 c9                	xor    ecx,ecx
c00170ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170b1:	0f a2                	cpuid  
c00170b3:	89 06                	mov    DWORD PTR [esi],eax
c00170b5:	89 1f                	mov    DWORD PTR [edi],ebx
c00170b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00170be:	89 10                	mov    DWORD PTR [eax],edx
c00170c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170c4:	a3 00 b4 03 c0       	mov    ds:0xc003b400,eax
c00170c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00170cb:	a3 8c c7 03 c0       	mov    ds:0xc003c78c,eax
c00170d0:	8b 07                	mov    eax,DWORD PTR [edi]
c00170d2:	a3 88 c7 03 c0       	mov    ds:0xc003c788,eax
c00170d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00170da:	a3 84 c7 03 c0       	mov    ds:0xc003c784,eax
c00170df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00170e5:	a3 80 c7 03 c0       	mov    ds:0xc003c780,eax
c00170ea:	5b                   	pop    ebx
c00170eb:	5e                   	pop    esi
c00170ec:	5f                   	pop    edi
c00170ed:	5d                   	pop    ebp
c00170ee:	c3                   	ret    

c00170ef <cpuidCheckEDX(unsigned int)>:
c00170ef:	83 ec 10             	sub    esp,0x10
c00170f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170f6:	50                   	push   eax
c00170f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170fb:	50                   	push   eax
c00170fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017100:	50                   	push   eax
c0017101:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017105:	50                   	push   eax
c0017106:	6a 01                	push   0x1
c0017108:	e8 5f ff ff ff       	call   c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001710d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017111:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017115:	0f 95 c0             	setne  al
c0017118:	83 c4 24             	add    esp,0x24
c001711b:	c3                   	ret    

c001711c <cpuidCheckECX(unsigned int)>:
c001711c:	83 ec 10             	sub    esp,0x10
c001711f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017123:	50                   	push   eax
c0017124:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017128:	50                   	push   eax
c0017129:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001712d:	50                   	push   eax
c001712e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017132:	50                   	push   eax
c0017133:	6a 01                	push   0x1
c0017135:	e8 32 ff ff ff       	call   c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001713a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001713e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017142:	0f 95 c0             	setne  al
c0017145:	83 c4 24             	add    esp,0x24
c0017148:	c3                   	ret    

c0017149 <cpuidCheckExtendedEBX(unsigned int)>:
c0017149:	83 ec 10             	sub    esp,0x10
c001714c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017150:	50                   	push   eax
c0017151:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017155:	50                   	push   eax
c0017156:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001715a:	50                   	push   eax
c001715b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001715f:	50                   	push   eax
c0017160:	6a 07                	push   0x7
c0017162:	e8 05 ff ff ff       	call   c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017167:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001716b:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001716f:	0f 95 c0             	setne  al
c0017172:	83 c4 24             	add    esp,0x24
c0017175:	c3                   	ret    

c0017176 <cpuidCheckExtendedECX(unsigned int)>:
c0017176:	83 ec 10             	sub    esp,0x10
c0017179:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001717d:	50                   	push   eax
c001717e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017182:	50                   	push   eax
c0017183:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017187:	50                   	push   eax
c0017188:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001718c:	50                   	push   eax
c001718d:	6a 07                	push   0x7
c001718f:	e8 d8 fe ff ff       	call   c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017194:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017198:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001719c:	0f 95 c0             	setne  al
c001719f:	83 c4 24             	add    esp,0x24
c00171a2:	c3                   	ret    

c00171a3 <getCPUNumber()>:
c00171a3:	31 c0                	xor    eax,eax
c00171a5:	c3                   	ret    

c00171a6 <thisCPU()>:
c00171a6:	e8 f8 ff ff ff       	call   c00171a3 <getCPUNumber()>
c00171ab:	8b 15 e8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9e8
c00171b1:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00171b8:	c3                   	ret    
c00171b9:	90                   	nop

c00171ba <CPU::CPU()>:
c00171ba:	83 ec 0c             	sub    esp,0xc
c00171bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c1:	83 ec 08             	sub    esp,0x8
c00171c4:	68 a1 a2 03 c0       	push   0xc003a2a1
c00171c9:	50                   	push   eax
c00171ca:	e8 9b c7 ff ff       	call   c001396a <Device::Device(char const*)>
c00171cf:	83 c4 10             	add    esp,0x10
c00171d2:	ba 78 a3 03 c0       	mov    edx,0xc003a378
c00171d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171db:	89 10                	mov    DWORD PTR [eax],edx
c00171dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00171eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ef:	05 78 01 00 00       	add    eax,0x178
c00171f4:	83 ec 0c             	sub    esp,0xc
c00171f7:	50                   	push   eax
c00171f8:	e8 b5 55 ff ff       	call   c000c7b2 <GDT::GDT()>
c00171fd:	83 c4 10             	add    esp,0x10
c0017200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017204:	05 7c 09 00 00       	add    eax,0x97c
c0017209:	83 ec 0c             	sub    esp,0xc
c001720c:	50                   	push   eax
c001720d:	e8 00 58 ff ff       	call   c000ca12 <IDT::IDT()>
c0017212:	83 c4 10             	add    esp,0x10
c0017215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017219:	05 7c 11 00 00       	add    eax,0x117c
c001721e:	83 ec 0c             	sub    esp,0xc
c0017221:	50                   	push   eax
c0017222:	e8 9f 9b ff ff       	call   c0010dc6 <TSS::TSS()>
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001722e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0017235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017239:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017243:	90                   	nop
c0017244:	83 c4 0c             	add    esp,0xc
c0017247:	c3                   	ret    

c0017248 <CPU::displayFeatures()>:
c0017248:	c3                   	ret    
c0017249:	90                   	nop

c001724a <CPU::detectFeatures()>:
c001724a:	55                   	push   ebp
c001724b:	57                   	push   edi
c001724c:	56                   	push   esi
c001724d:	53                   	push   ebx
c001724e:	83 ec 50             	sub    esp,0x50
c0017251:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017255:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001725f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017266:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001726c:	6a 0d                	push   0xd
c001726e:	6a 00                	push   0x0
c0017270:	57                   	push   edi
c0017271:	e8 35 94 fe ff       	call   c00006ab <memset>
c0017276:	83 c4 10             	add    esp,0x10
c0017279:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001727e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017285:	0f 84 20 09 00 00    	je     c0017bab <CPU::detectFeatures()+0x961>
c001728b:	83 ec 0c             	sub    esp,0xc
c001728e:	6a 10                	push   0x10
c0017290:	e8 5a fe ff ff       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c0017295:	83 e0 01             	and    eax,0x1
c0017298:	8d 14 00             	lea    edx,[eax+eax*1]
c001729b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172a1:	83 e0 fd             	and    eax,0xfffffffd
c00172a4:	09 d0                	or     eax,edx
c00172a6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172ac:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00172b3:	e8 37 fe ff ff       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c00172b8:	83 e0 01             	and    eax,0x1
c00172bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00172c2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172c8:	83 e0 fb             	and    eax,0xfffffffb
c00172cb:	09 d0                	or     eax,edx
c00172cd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172d3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00172da:	e8 10 fe ff ff       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c00172df:	83 e0 01             	and    eax,0x1
c00172e2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00172e9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172ef:	83 e0 f7             	and    eax,0xfffffff7
c00172f2:	09 d0                	or     eax,edx
c00172f4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172fa:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017301:	e8 e9 fd ff ff       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c0017306:	83 e0 01             	and    eax,0x1
c0017309:	c1 e0 04             	shl    eax,0x4
c001730c:	88 c2                	mov    dl,al
c001730e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017314:	83 e0 ef             	and    eax,0xffffffef
c0017317:	09 d0                	or     eax,edx
c0017319:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001731f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017326:	e8 c4 fd ff ff       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c001732b:	83 e0 01             	and    eax,0x1
c001732e:	c1 e0 05             	shl    eax,0x5
c0017331:	88 c2                	mov    dl,al
c0017333:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017339:	83 e0 df             	and    eax,0xffffffdf
c001733c:	09 d0                	or     eax,edx
c001733e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017344:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001734b:	e8 9f fd ff ff       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c0017350:	83 e0 01             	and    eax,0x1
c0017353:	8d 14 00             	lea    edx,[eax+eax*1]
c0017356:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001735c:	83 e0 fd             	and    eax,0xfffffffd
c001735f:	09 d0                	or     eax,edx
c0017361:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017367:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001736e:	e8 7c fd ff ff       	call   c00170ef <cpuidCheckEDX(unsigned int)>
c0017373:	83 e0 01             	and    eax,0x1
c0017376:	c1 e0 06             	shl    eax,0x6
c0017379:	88 c2                	mov    dl,al
c001737b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017381:	83 e0 bf             	and    eax,0xffffffbf
c0017384:	09 d0                	or     eax,edx
c0017386:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001738c:	58                   	pop    eax
c001738d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017391:	56                   	push   esi
c0017392:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017396:	55                   	push   ebp
c0017397:	8d 44 24 28          	lea    eax,[esp+0x28]
c001739b:	50                   	push   eax
c001739c:	8d 54 24 28          	lea    edx,[esp+0x28]
c00173a0:	52                   	push   edx
c00173a1:	6a 00                	push   0x0
c00173a3:	e8 c4 fc ff ff       	call   c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00173a8:	83 c4 1c             	add    esp,0x1c
c00173ab:	6a 04                	push   0x4
c00173ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00173b1:	50                   	push   eax
c00173b2:	57                   	push   edi
c00173b3:	e8 7c 92 fe ff       	call   c0000634 <memcpy>
c00173b8:	83 c4 0c             	add    esp,0xc
c00173bb:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00173c1:	6a 04                	push   0x4
c00173c3:	56                   	push   esi
c00173c4:	50                   	push   eax
c00173c5:	e8 6a 92 fe ff       	call   c0000634 <memcpy>
c00173ca:	83 c4 0c             	add    esp,0xc
c00173cd:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00173d3:	6a 04                	push   0x4
c00173d5:	55                   	push   ebp
c00173d6:	50                   	push   eax
c00173d7:	e8 58 92 fe ff       	call   c0000634 <memcpy>
c00173dc:	58                   	pop    eax
c00173dd:	5a                   	pop    edx
c00173de:	68 4c a1 03 c0       	push   0xc003a14c
c00173e3:	57                   	push   edi
c00173e4:	e8 64 94 fe ff       	call   c000084d <strcmp>
c00173e9:	83 c4 10             	add    esp,0x10
c00173ec:	85 c0                	test   eax,eax
c00173ee:	75 0f                	jne    c00173ff <CPU::detectFeatures()+0x1b5>
c00173f0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00173fa:	e9 22 02 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c00173ff:	50                   	push   eax
c0017400:	50                   	push   eax
c0017401:	68 59 a1 03 c0       	push   0xc003a159
c0017406:	57                   	push   edi
c0017407:	e8 41 94 fe ff       	call   c000084d <strcmp>
c001740c:	83 c4 10             	add    esp,0x10
c001740f:	85 c0                	test   eax,eax
c0017411:	74 dd                	je     c00173f0 <CPU::detectFeatures()+0x1a6>
c0017413:	51                   	push   ecx
c0017414:	51                   	push   ecx
c0017415:	68 66 a1 03 c0       	push   0xc003a166
c001741a:	57                   	push   edi
c001741b:	e8 2d 94 fe ff       	call   c000084d <strcmp>
c0017420:	83 c4 10             	add    esp,0x10
c0017423:	85 c0                	test   eax,eax
c0017425:	74 2a                	je     c0017451 <CPU::detectFeatures()+0x207>
c0017427:	52                   	push   edx
c0017428:	52                   	push   edx
c0017429:	68 73 a1 03 c0       	push   0xc003a173
c001742e:	57                   	push   edi
c001742f:	e8 19 94 fe ff       	call   c000084d <strcmp>
c0017434:	83 c4 10             	add    esp,0x10
c0017437:	85 c0                	test   eax,eax
c0017439:	74 16                	je     c0017451 <CPU::detectFeatures()+0x207>
c001743b:	50                   	push   eax
c001743c:	50                   	push   eax
c001743d:	68 80 a1 03 c0       	push   0xc003a180
c0017442:	57                   	push   edi
c0017443:	e8 05 94 fe ff       	call   c000084d <strcmp>
c0017448:	83 c4 10             	add    esp,0x10
c001744b:	85 c0                	test   eax,eax
c001744d:	74 48                	je     c0017497 <CPU::detectFeatures()+0x24d>
c001744f:	eb 0f                	jmp    c0017460 <CPU::detectFeatures()+0x216>
c0017451:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001745b:	e9 c1 01 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c0017460:	50                   	push   eax
c0017461:	50                   	push   eax
c0017462:	68 8d a1 03 c0       	push   0xc003a18d
c0017467:	57                   	push   edi
c0017468:	e8 e0 93 fe ff       	call   c000084d <strcmp>
c001746d:	83 c4 10             	add    esp,0x10
c0017470:	85 c0                	test   eax,eax
c0017472:	74 23                	je     c0017497 <CPU::detectFeatures()+0x24d>
c0017474:	50                   	push   eax
c0017475:	50                   	push   eax
c0017476:	68 9a a1 03 c0       	push   0xc003a19a
c001747b:	57                   	push   edi
c001747c:	e8 cc 93 fe ff       	call   c000084d <strcmp>
c0017481:	83 c4 10             	add    esp,0x10
c0017484:	85 c0                	test   eax,eax
c0017486:	75 1e                	jne    c00174a6 <CPU::detectFeatures()+0x25c>
c0017488:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017492:	e9 8a 01 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c0017497:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00174a1:	e9 7b 01 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c00174a6:	50                   	push   eax
c00174a7:	50                   	push   eax
c00174a8:	68 a7 a1 03 c0       	push   0xc003a1a7
c00174ad:	57                   	push   edi
c00174ae:	e8 9a 93 fe ff       	call   c000084d <strcmp>
c00174b3:	83 c4 10             	add    esp,0x10
c00174b6:	85 c0                	test   eax,eax
c00174b8:	75 0f                	jne    c00174c9 <CPU::detectFeatures()+0x27f>
c00174ba:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00174c4:	e9 58 01 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c00174c9:	50                   	push   eax
c00174ca:	50                   	push   eax
c00174cb:	68 66 a1 03 c0       	push   0xc003a166
c00174d0:	57                   	push   edi
c00174d1:	e8 77 93 fe ff       	call   c000084d <strcmp>
c00174d6:	83 c4 10             	add    esp,0x10
c00174d9:	85 c0                	test   eax,eax
c00174db:	75 0f                	jne    c00174ec <CPU::detectFeatures()+0x2a2>
c00174dd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00174e7:	e9 35 01 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c00174ec:	50                   	push   eax
c00174ed:	50                   	push   eax
c00174ee:	68 b4 a1 03 c0       	push   0xc003a1b4
c00174f3:	57                   	push   edi
c00174f4:	e8 54 93 fe ff       	call   c000084d <strcmp>
c00174f9:	83 c4 10             	add    esp,0x10
c00174fc:	85 c0                	test   eax,eax
c00174fe:	75 0f                	jne    c001750f <CPU::detectFeatures()+0x2c5>
c0017500:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001750a:	e9 12 01 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c001750f:	51                   	push   ecx
c0017510:	51                   	push   ecx
c0017511:	68 c1 a1 03 c0       	push   0xc003a1c1
c0017516:	57                   	push   edi
c0017517:	e8 31 93 fe ff       	call   c000084d <strcmp>
c001751c:	83 c4 10             	add    esp,0x10
c001751f:	85 c0                	test   eax,eax
c0017521:	75 0f                	jne    c0017532 <CPU::detectFeatures()+0x2e8>
c0017523:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001752d:	e9 ef 00 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c0017532:	52                   	push   edx
c0017533:	52                   	push   edx
c0017534:	68 ce a1 03 c0       	push   0xc003a1ce
c0017539:	57                   	push   edi
c001753a:	e8 0e 93 fe ff       	call   c000084d <strcmp>
c001753f:	83 c4 10             	add    esp,0x10
c0017542:	85 c0                	test   eax,eax
c0017544:	75 0f                	jne    c0017555 <CPU::detectFeatures()+0x30b>
c0017546:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017550:	e9 cc 00 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c0017555:	50                   	push   eax
c0017556:	50                   	push   eax
c0017557:	68 db a1 03 c0       	push   0xc003a1db
c001755c:	57                   	push   edi
c001755d:	e8 eb 92 fe ff       	call   c000084d <strcmp>
c0017562:	83 c4 10             	add    esp,0x10
c0017565:	85 c0                	test   eax,eax
c0017567:	75 0f                	jne    c0017578 <CPU::detectFeatures()+0x32e>
c0017569:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017573:	e9 a9 00 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c0017578:	50                   	push   eax
c0017579:	50                   	push   eax
c001757a:	68 e8 a1 03 c0       	push   0xc003a1e8
c001757f:	57                   	push   edi
c0017580:	e8 c8 92 fe ff       	call   c000084d <strcmp>
c0017585:	83 c4 10             	add    esp,0x10
c0017588:	85 c0                	test   eax,eax
c001758a:	75 0f                	jne    c001759b <CPU::detectFeatures()+0x351>
c001758c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017596:	e9 86 00 00 00       	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c001759b:	50                   	push   eax
c001759c:	50                   	push   eax
c001759d:	68 f5 a1 03 c0       	push   0xc003a1f5
c00175a2:	57                   	push   edi
c00175a3:	e8 a5 92 fe ff       	call   c000084d <strcmp>
c00175a8:	83 c4 10             	add    esp,0x10
c00175ab:	85 c0                	test   eax,eax
c00175ad:	75 0c                	jne    c00175bb <CPU::detectFeatures()+0x371>
c00175af:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00175b9:	eb 66                	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c00175bb:	50                   	push   eax
c00175bc:	50                   	push   eax
c00175bd:	68 02 a2 03 c0       	push   0xc003a202
c00175c2:	57                   	push   edi
c00175c3:	e8 85 92 fe ff       	call   c000084d <strcmp>
c00175c8:	83 c4 10             	add    esp,0x10
c00175cb:	85 c0                	test   eax,eax
c00175cd:	75 0c                	jne    c00175db <CPU::detectFeatures()+0x391>
c00175cf:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00175d9:	eb 46                	jmp    c0017621 <CPU::detectFeatures()+0x3d7>
c00175db:	50                   	push   eax
c00175dc:	50                   	push   eax
c00175dd:	68 0f a2 03 c0       	push   0xc003a20f
c00175e2:	57                   	push   edi
c00175e3:	e8 65 92 fe ff       	call   c000084d <strcmp>
c00175e8:	83 c4 10             	add    esp,0x10
c00175eb:	85 c0                	test   eax,eax
c00175ed:	74 e0                	je     c00175cf <CPU::detectFeatures()+0x385>
c00175ef:	50                   	push   eax
c00175f0:	50                   	push   eax
c00175f1:	68 1c a2 03 c0       	push   0xc003a21c
c00175f6:	57                   	push   edi
c00175f7:	e8 51 92 fe ff       	call   c000084d <strcmp>
c00175fc:	83 c4 10             	add    esp,0x10
c00175ff:	85 c0                	test   eax,eax
c0017601:	74 cc                	je     c00175cf <CPU::detectFeatures()+0x385>
c0017603:	51                   	push   ecx
c0017604:	51                   	push   ecx
c0017605:	68 29 a2 03 c0       	push   0xc003a229
c001760a:	57                   	push   edi
c001760b:	e8 3d 92 fe ff       	call   c000084d <strcmp>
c0017610:	83 c4 10             	add    esp,0x10
c0017613:	85 c0                	test   eax,eax
c0017615:	74 b8                	je     c00175cf <CPU::detectFeatures()+0x385>
c0017617:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017621:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017626:	0f 86 be 00 00 00    	jbe    c00176ea <CPU::detectFeatures()+0x4a0>
c001762c:	83 ec 0c             	sub    esp,0xc
c001762f:	68 80 00 00 00       	push   0x80
c0017634:	e8 10 fb ff ff       	call   c0017149 <cpuidCheckExtendedEBX(unsigned int)>
c0017639:	83 e0 01             	and    eax,0x1
c001763c:	c1 e0 06             	shl    eax,0x6
c001763f:	88 c2                	mov    dl,al
c0017641:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017647:	83 e0 bf             	and    eax,0xffffffbf
c001764a:	09 d0                	or     eax,edx
c001764c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017652:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017659:	e8 eb fa ff ff       	call   c0017149 <cpuidCheckExtendedEBX(unsigned int)>
c001765e:	83 e0 01             	and    eax,0x1
c0017661:	c1 e0 04             	shl    eax,0x4
c0017664:	88 c2                	mov    dl,al
c0017666:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001766c:	83 e0 ef             	and    eax,0xffffffef
c001766f:	09 d0                	or     eax,edx
c0017671:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017677:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001767e:	e8 c6 fa ff ff       	call   c0017149 <cpuidCheckExtendedEBX(unsigned int)>
c0017683:	c1 e0 07             	shl    eax,0x7
c0017686:	88 c2                	mov    dl,al
c0017688:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001768e:	83 e0 7f             	and    eax,0x7f
c0017691:	09 d0                	or     eax,edx
c0017693:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017699:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00176a0:	e8 d1 fa ff ff       	call   c0017176 <cpuidCheckExtendedECX(unsigned int)>
c00176a5:	83 e0 01             	and    eax,0x1
c00176a8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00176af:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00176b5:	83 e0 f7             	and    eax,0xfffffff7
c00176b8:	09 d0                	or     eax,edx
c00176ba:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00176c0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00176c7:	e8 aa fa ff ff       	call   c0017176 <cpuidCheckExtendedECX(unsigned int)>
c00176cc:	83 c4 10             	add    esp,0x10
c00176cf:	83 e0 01             	and    eax,0x1
c00176d2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00176d9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00176df:	83 e0 fb             	and    eax,0xfffffffb
c00176e2:	09 d0                	or     eax,edx
c00176e4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00176ea:	83 ec 0c             	sub    esp,0xc
c00176ed:	56                   	push   esi
c00176ee:	55                   	push   ebp
c00176ef:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00176f3:	57                   	push   edi
c00176f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00176f8:	50                   	push   eax
c00176f9:	6a 01                	push   0x1
c00176fb:	e8 6c f9 ff ff       	call   c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017700:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017704:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001770a:	88 ca                	mov    dl,cl
c001770c:	83 e0 f0             	and    eax,0xfffffff0
c001770f:	83 e2 0f             	and    edx,0xf
c0017712:	09 d0                	or     eax,edx
c0017714:	88 ca                	mov    dl,cl
c0017716:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001771c:	c0 ea 04             	shr    dl,0x4
c001771f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0017723:	0f b6 c2             	movzx  eax,dl
c0017726:	83 c4 20             	add    esp,0x20
c0017729:	c1 e0 06             	shl    eax,0x6
c001772c:	89 c5                	mov    ebp,eax
c001772e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017734:	66 25 3f c0          	and    ax,0xc03f
c0017738:	09 e8                	or     eax,ebp
c001773a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0017741:	89 c8                	mov    eax,ecx
c0017743:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0017749:	c1 e8 08             	shr    eax,0x8
c001774c:	83 e2 3f             	and    edx,0x3f
c001774f:	83 e0 0f             	and    eax,0xf
c0017752:	89 c5                	mov    ebp,eax
c0017754:	c1 e5 06             	shl    ebp,0x6
c0017757:	09 d5                	or     ebp,edx
c0017759:	89 ea                	mov    edx,ebp
c001775b:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0017761:	88 c2                	mov    dl,al
c0017763:	c0 ea 02             	shr    dl,0x2
c0017766:	89 d5                	mov    ebp,edx
c0017768:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001776e:	83 e2 c0             	and    edx,0xffffffc0
c0017771:	09 d5                	or     ebp,edx
c0017773:	89 ea                	mov    edx,ebp
c0017775:	89 cd                	mov    ebp,ecx
c0017777:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001777d:	c1 ed 0c             	shr    ebp,0xc
c0017780:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0017786:	83 e5 03             	and    ebp,0x3
c0017789:	83 e2 cf             	and    edx,0xffffffcf
c001778c:	c1 e5 04             	shl    ebp,0x4
c001778f:	09 d5                	or     ebp,edx
c0017791:	3c 06                	cmp    al,0x6
c0017793:	89 ea                	mov    edx,ebp
c0017795:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001779b:	74 04                	je     c00177a1 <CPU::detectFeatures()+0x557>
c001779d:	3c 0f                	cmp    al,0xf
c001779f:	75 5c                	jne    c00177fd <CPU::detectFeatures()+0x5b3>
c00177a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00177a5:	89 cd                	mov    ebp,ecx
c00177a7:	c1 ed 10             	shr    ebp,0x10
c00177aa:	c1 e5 04             	shl    ebp,0x4
c00177ad:	09 ea                	or     edx,ebp
c00177af:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00177b5:	0f b6 d2             	movzx  edx,dl
c00177b8:	66 81 e5 3f c0       	and    bp,0xc03f
c00177bd:	c1 e2 06             	shl    edx,0x6
c00177c0:	09 ea                	or     edx,ebp
c00177c2:	3c 0f                	cmp    al,0xf
c00177c4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00177cb:	75 30                	jne    c00177fd <CPU::detectFeatures()+0x5b3>
c00177cd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00177d3:	c1 e9 14             	shr    ecx,0x14
c00177d6:	83 e0 3f             	and    eax,0x3f
c00177d9:	83 c1 0f             	add    ecx,0xf
c00177dc:	88 ca                	mov    dl,cl
c00177de:	c0 e9 02             	shr    cl,0x2
c00177e1:	c1 e2 06             	shl    edx,0x6
c00177e4:	09 d0                	or     eax,edx
c00177e6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00177ec:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00177f2:	83 e0 c0             	and    eax,0xffffffc0
c00177f5:	09 c1                	or     ecx,eax
c00177f7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00177fd:	83 ec 0c             	sub    esp,0xc
c0017800:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017807:	56                   	push   esi
c0017808:	8d 44 24 28          	lea    eax,[esp+0x28]
c001780c:	50                   	push   eax
c001780d:	57                   	push   edi
c001780e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017812:	55                   	push   ebp
c0017813:	68 00 00 00 80       	push   0x80000000
c0017818:	e8 4f f8 ff ff       	call   c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001781d:	83 c4 20             	add    esp,0x20
c0017820:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0017828:	8d 44 24 18          	lea    eax,[esp+0x18]
c001782c:	76 1e                	jbe    c001784c <CPU::detectFeatures()+0x602>
c001782e:	83 ec 0c             	sub    esp,0xc
c0017831:	56                   	push   esi
c0017832:	50                   	push   eax
c0017833:	57                   	push   edi
c0017834:	55                   	push   ebp
c0017835:	68 01 00 00 80       	push   0x80000001
c001783a:	e8 2d f8 ff ff       	call   c001706c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001783f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0017849:	83 c4 20             	add    esp,0x20
c001784c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0017852:	83 f8 01             	cmp    eax,0x1
c0017855:	75 6f                	jne    c00178c6 <CPU::detectFeatures()+0x67c>
c0017857:	51                   	push   ecx
c0017858:	51                   	push   ecx
c0017859:	68 35 a2 03 c0       	push   0xc003a235
c001785e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0017862:	56                   	push   esi
c0017863:	e8 5f 8f fe ff       	call   c00007c7 <strcpy>
c0017868:	5f                   	pop    edi
c0017869:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001786f:	5d                   	pop    ebp
c0017870:	66 c1 e8 06          	shr    ax,0x6
c0017874:	0f b6 c0             	movzx  eax,al
c0017877:	50                   	push   eax
c0017878:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001787e:	c1 e8 0e             	shr    eax,0xe
c0017881:	0f b6 c0             	movzx  eax,al
c0017884:	50                   	push   eax
c0017885:	e8 8d f4 ff ff       	call   c0016d17 <lookupIntelCPUName(unsigned char, unsigned char)>
c001788a:	5a                   	pop    edx
c001788b:	59                   	pop    ecx
c001788c:	50                   	push   eax
c001788d:	56                   	push   esi
c001788e:	e8 81 90 fe ff       	call   c0000914 <strcat>
c0017893:	5f                   	pop    edi
c0017894:	5d                   	pop    ebp
c0017895:	56                   	push   esi
c0017896:	53                   	push   ebx
c0017897:	e8 c0 c0 ff ff       	call   c001395c <Device::setName(char const*)>
c001789c:	58                   	pop    eax
c001789d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00178a3:	5a                   	pop    edx
c00178a4:	68 3c a2 03 c0       	push   0xc003a23c
c00178a9:	50                   	push   eax
c00178aa:	e8 9e 8f fe ff       	call   c000084d <strcmp>
c00178af:	83 c4 10             	add    esp,0x10
c00178b2:	85 c0                	test   eax,eax
c00178b4:	0f 85 73 03 00 00    	jne    c0017c2d <CPU::detectFeatures()+0x9e3>
c00178ba:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00178c1:	e9 67 03 00 00       	jmp    c0017c2d <CPU::detectFeatures()+0x9e3>
c00178c6:	83 f8 02             	cmp    eax,0x2
c00178c9:	0f 85 b5 00 00 00    	jne    c0017984 <CPU::detectFeatures()+0x73a>
c00178cf:	57                   	push   edi
c00178d0:	57                   	push   edi
c00178d1:	68 4e a2 03 c0       	push   0xc003a24e
c00178d6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00178da:	56                   	push   esi
c00178db:	e8 e7 8e fe ff       	call   c00007c7 <strcpy>
c00178e0:	5d                   	pop    ebp
c00178e1:	58                   	pop    eax
c00178e2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00178e8:	66 c1 e8 06          	shr    ax,0x6
c00178ec:	0f b6 c0             	movzx  eax,al
c00178ef:	50                   	push   eax
c00178f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00178f6:	c1 e8 0e             	shr    eax,0xe
c00178f9:	0f b6 c0             	movzx  eax,al
c00178fc:	50                   	push   eax
c00178fd:	e8 81 f2 ff ff       	call   c0016b83 <lookupAMDCPUName(unsigned char, unsigned char)>
c0017902:	5a                   	pop    edx
c0017903:	59                   	pop    ecx
c0017904:	50                   	push   eax
c0017905:	56                   	push   esi
c0017906:	e8 09 90 fe ff       	call   c0000914 <strcat>
c001790b:	5f                   	pop    edi
c001790c:	5d                   	pop    ebp
c001790d:	56                   	push   esi
c001790e:	53                   	push   ebx
c001790f:	e8 48 c0 ff ff       	call   c001395c <Device::setName(char const*)>
c0017914:	58                   	pop    eax
c0017915:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001791b:	5a                   	pop    edx
c001791c:	68 53 a2 03 c0       	push   0xc003a253
c0017921:	50                   	push   eax
c0017922:	e8 26 8f fe ff       	call   c000084d <strcmp>
c0017927:	83 c4 10             	add    esp,0x10
c001792a:	85 c0                	test   eax,eax
c001792c:	75 20                	jne    c001794e <CPU::detectFeatures()+0x704>
c001792e:	8b 15 e8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9e8
c0017934:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001793a:	a8 01                	test   al,0x1
c001793c:	74 10                	je     c001794e <CPU::detectFeatures()+0x704>
c001793e:	83 e0 fe             	and    eax,0xfffffffe
c0017941:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0017947:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001794e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017954:	c1 e8 0e             	shr    eax,0xe
c0017957:	3c 05                	cmp    al,0x5
c0017959:	0f 85 ce 02 00 00    	jne    c0017c2d <CPU::detectFeatures()+0x9e3>
c001795f:	56                   	push   esi
c0017960:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017966:	83 e0 0f             	and    eax,0xf
c0017969:	50                   	push   eax
c001796a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017970:	66 c1 e8 06          	shr    ax,0x6
c0017974:	0f b6 c0             	movzx  eax,al
c0017977:	50                   	push   eax
c0017978:	6a 05                	push   0x5
c001797a:	e8 7a f6 ff ff       	call   c0016ff9 <AMD_K6_writeback(int, int, int)>
c001797f:	e9 1f 02 00 00       	jmp    c0017ba3 <CPU::detectFeatures()+0x959>
c0017984:	8d 50 fd             	lea    edx,[eax-0x3]
c0017987:	83 fa 01             	cmp    edx,0x1
c001798a:	76 09                	jbe    c0017995 <CPU::detectFeatures()+0x74b>
c001798c:	83 f8 06             	cmp    eax,0x6
c001798f:	0f 85 91 01 00 00    	jne    c0017b26 <CPU::detectFeatures()+0x8dc>
c0017995:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001799b:	c1 ea 0e             	shr    edx,0xe
c001799e:	80 fa 05             	cmp    dl,0x5
c00179a1:	75 7b                	jne    c0017a1e <CPU::detectFeatures()+0x7d4>
c00179a3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00179a9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00179ae:	66 81 fa 00 01       	cmp    dx,0x100
c00179b3:	75 0c                	jne    c00179c1 <CPU::detectFeatures()+0x777>
c00179b5:	51                   	push   ecx
c00179b6:	51                   	push   ecx
c00179b7:	68 5a a2 03 c0       	push   0xc003a25a
c00179bc:	e9 dc 01 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c00179c1:	66 81 fa 00 02       	cmp    dx,0x200
c00179c6:	75 0c                	jne    c00179d4 <CPU::detectFeatures()+0x78a>
c00179c8:	52                   	push   edx
c00179c9:	52                   	push   edx
c00179ca:	68 6d a2 03 c0       	push   0xc003a26d
c00179cf:	e9 c9 01 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c00179d4:	66 81 fa 40 02       	cmp    dx,0x240
c00179d9:	75 0c                	jne    c00179e7 <CPU::detectFeatures()+0x79d>
c00179db:	50                   	push   eax
c00179dc:	50                   	push   eax
c00179dd:	68 7f a2 03 c0       	push   0xc003a27f
c00179e2:	e9 b6 01 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c00179e7:	83 f8 06             	cmp    eax,0x6
c00179ea:	75 0c                	jne    c00179f8 <CPU::detectFeatures()+0x7ae>
c00179ec:	50                   	push   eax
c00179ed:	50                   	push   eax
c00179ee:	68 91 a2 03 c0       	push   0xc003a291
c00179f3:	e9 a5 01 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c00179f8:	83 f8 04             	cmp    eax,0x4
c00179fb:	75 0c                	jne    c0017a09 <CPU::detectFeatures()+0x7bf>
c00179fd:	50                   	push   eax
c00179fe:	50                   	push   eax
c00179ff:	68 9d a2 03 c0       	push   0xc003a29d
c0017a04:	e9 94 01 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017a09:	83 f8 03             	cmp    eax,0x3
c0017a0c:	0f 85 1b 02 00 00    	jne    c0017c2d <CPU::detectFeatures()+0x9e3>
c0017a12:	50                   	push   eax
c0017a13:	50                   	push   eax
c0017a14:	68 a5 a2 03 c0       	push   0xc003a2a5
c0017a19:	e9 7f 01 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017a1e:	80 fa 06             	cmp    dl,0x6
c0017a21:	0f 85 db 00 00 00    	jne    c0017b02 <CPU::detectFeatures()+0x8b8>
c0017a27:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0017a2d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0017a32:	66 81 fa 80 01       	cmp    dx,0x180
c0017a37:	75 0c                	jne    c0017a45 <CPU::detectFeatures()+0x7fb>
c0017a39:	50                   	push   eax
c0017a3a:	50                   	push   eax
c0017a3b:	68 b0 a2 03 c0       	push   0xc003a2b0
c0017a40:	e9 58 01 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017a45:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0017a4b:	66 f7 c1 80 ff       	test   cx,0xff80
c0017a50:	75 0c                	jne    c0017a5e <CPU::detectFeatures()+0x814>
c0017a52:	50                   	push   eax
c0017a53:	50                   	push   eax
c0017a54:	68 c0 a2 03 c0       	push   0xc003a2c0
c0017a59:	e9 3f 01 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017a5e:	66 81 fa 40 02       	cmp    dx,0x240
c0017a63:	75 0c                	jne    c0017a71 <CPU::detectFeatures()+0x827>
c0017a65:	55                   	push   ebp
c0017a66:	55                   	push   ebp
c0017a67:	68 c7 a2 03 c0       	push   0xc003a2c7
c0017a6c:	e9 2c 01 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017a71:	66 81 fa 80 02       	cmp    dx,0x280
c0017a76:	75 0c                	jne    c0017a84 <CPU::detectFeatures()+0x83a>
c0017a78:	57                   	push   edi
c0017a79:	57                   	push   edi
c0017a7a:	68 d0 a2 03 c0       	push   0xc003a2d0
c0017a7f:	e9 19 01 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017a84:	66 81 fa 40 03       	cmp    dx,0x340
c0017a89:	74 ed                	je     c0017a78 <CPU::detectFeatures()+0x82e>
c0017a8b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0017a90:	75 0c                	jne    c0017a9e <CPU::detectFeatures()+0x854>
c0017a92:	56                   	push   esi
c0017a93:	56                   	push   esi
c0017a94:	68 d7 a2 03 c0       	push   0xc003a2d7
c0017a99:	e9 ff 00 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017a9e:	83 f8 06             	cmp    eax,0x6
c0017aa1:	0f 84 45 ff ff ff    	je     c00179ec <CPU::detectFeatures()+0x7a2>
c0017aa7:	83 f8 04             	cmp    eax,0x4
c0017aaa:	0f 84 4d ff ff ff    	je     c00179fd <CPU::detectFeatures()+0x7b3>
c0017ab0:	83 f8 03             	cmp    eax,0x3
c0017ab3:	0f 85 74 01 00 00    	jne    c0017c2d <CPU::detectFeatures()+0x9e3>
c0017ab9:	51                   	push   ecx
c0017aba:	51                   	push   ecx
c0017abb:	68 e0 a2 03 c0       	push   0xc003a2e0
c0017ac0:	53                   	push   ebx
c0017ac1:	e8 96 be ff ff       	call   c001395c <Device::setName(char const*)>
c0017ac6:	b1 c1                	mov    cl,0xc1
c0017ac8:	88 c8                	mov    al,cl
c0017aca:	e6 22                	out    0x22,al
c0017acc:	e4 23                	in     al,0x23
c0017ace:	88 c2                	mov    dl,al
c0017ad0:	88 c8                	mov    al,cl
c0017ad2:	e6 22                	out    0x22,al
c0017ad4:	88 d0                	mov    al,dl
c0017ad6:	83 c8 10             	or     eax,0x10
c0017ad9:	e6 23                	out    0x23,al
c0017adb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0017ae2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0017ae5:	89 d0                	mov    eax,edx
c0017ae7:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0017aed:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0017af1:	40                   	inc    eax
c0017af2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0017af8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0017afd:	e9 a1 00 00 00       	jmp    c0017ba3 <CPU::detectFeatures()+0x959>
c0017b02:	83 f8 06             	cmp    eax,0x6
c0017b05:	0f 84 e1 fe ff ff    	je     c00179ec <CPU::detectFeatures()+0x7a2>
c0017b0b:	83 f8 04             	cmp    eax,0x4
c0017b0e:	0f 84 e9 fe ff ff    	je     c00179fd <CPU::detectFeatures()+0x7b3>
c0017b14:	83 f8 03             	cmp    eax,0x3
c0017b17:	0f 85 10 01 00 00    	jne    c0017c2d <CPU::detectFeatures()+0x9e3>
c0017b1d:	52                   	push   edx
c0017b1e:	52                   	push   edx
c0017b1f:	68 eb a2 03 c0       	push   0xc003a2eb
c0017b24:	eb 77                	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017b26:	83 f8 07             	cmp    eax,0x7
c0017b29:	75 09                	jne    c0017b34 <CPU::detectFeatures()+0x8ea>
c0017b2b:	50                   	push   eax
c0017b2c:	50                   	push   eax
c0017b2d:	68 f5 a2 03 c0       	push   0xc003a2f5
c0017b32:	eb 69                	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017b34:	83 f8 0a             	cmp    eax,0xa
c0017b37:	75 09                	jne    c0017b42 <CPU::detectFeatures()+0x8f8>
c0017b39:	50                   	push   eax
c0017b3a:	50                   	push   eax
c0017b3b:	68 00 a3 03 c0       	push   0xc003a300
c0017b40:	eb 5b                	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017b42:	83 f8 0b             	cmp    eax,0xb
c0017b45:	75 09                	jne    c0017b50 <CPU::detectFeatures()+0x906>
c0017b47:	50                   	push   eax
c0017b48:	50                   	push   eax
c0017b49:	68 08 a3 03 c0       	push   0xc003a308
c0017b4e:	eb 4d                	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017b50:	83 f8 08             	cmp    eax,0x8
c0017b53:	75 09                	jne    c0017b5e <CPU::detectFeatures()+0x914>
c0017b55:	50                   	push   eax
c0017b56:	50                   	push   eax
c0017b57:	68 11 a3 03 c0       	push   0xc003a311
c0017b5c:	eb 3f                	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017b5e:	83 f8 09             	cmp    eax,0x9
c0017b61:	75 09                	jne    c0017b6c <CPU::detectFeatures()+0x922>
c0017b63:	50                   	push   eax
c0017b64:	50                   	push   eax
c0017b65:	68 19 a3 03 c0       	push   0xc003a319
c0017b6a:	eb 31                	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017b6c:	83 f8 05             	cmp    eax,0x5
c0017b6f:	75 09                	jne    c0017b7a <CPU::detectFeatures()+0x930>
c0017b71:	50                   	push   eax
c0017b72:	50                   	push   eax
c0017b73:	68 21 a3 03 c0       	push   0xc003a321
c0017b78:	eb 23                	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017b7a:	83 f8 0c             	cmp    eax,0xc
c0017b7d:	75 09                	jne    c0017b88 <CPU::detectFeatures()+0x93e>
c0017b7f:	55                   	push   ebp
c0017b80:	55                   	push   ebp
c0017b81:	68 2f a3 03 c0       	push   0xc003a32f
c0017b86:	eb 15                	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017b88:	83 f8 0d             	cmp    eax,0xd
c0017b8b:	75 09                	jne    c0017b96 <CPU::detectFeatures()+0x94c>
c0017b8d:	57                   	push   edi
c0017b8e:	57                   	push   edi
c0017b8f:	68 3a a3 03 c0       	push   0xc003a33a
c0017b94:	eb 07                	jmp    c0017b9d <CPU::detectFeatures()+0x953>
c0017b96:	56                   	push   esi
c0017b97:	56                   	push   esi
c0017b98:	68 4e a3 03 c0       	push   0xc003a34e
c0017b9d:	53                   	push   ebx
c0017b9e:	e8 b9 bd ff ff       	call   c001395c <Device::setName(char const*)>
c0017ba3:	83 c4 10             	add    esp,0x10
c0017ba6:	e9 82 00 00 00       	jmp    c0017c2d <CPU::detectFeatures()+0x9e3>
c0017bab:	51                   	push   ecx
c0017bac:	51                   	push   ecx
c0017bad:	68 9a a1 03 c0       	push   0xc003a19a
c0017bb2:	57                   	push   edi
c0017bb3:	e8 0f 8c fe ff       	call   c00007c7 <strcpy>
c0017bb8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017bc2:	e8 b8 85 fe ff       	call   c000017f <is486>
c0017bc7:	83 c4 10             	add    esp,0x10
c0017bca:	85 c0                	test   eax,eax
c0017bcc:	74 2d                	je     c0017bfb <CPU::detectFeatures()+0x9b1>
c0017bce:	52                   	push   edx
c0017bcf:	52                   	push   edx
c0017bd0:	68 5a a3 03 c0       	push   0xc003a35a
c0017bd5:	53                   	push   ebx
c0017bd6:	e8 81 bd ff ff       	call   c001395c <Device::setName(char const*)>
c0017bdb:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017be2:	e8 fe 6d 00 00       	call   c001e9e5 <CPU::readCR0()>
c0017be7:	83 c4 10             	add    esp,0x10
c0017bea:	83 e0 14             	and    eax,0x14
c0017bed:	83 f8 04             	cmp    eax,0x4
c0017bf0:	75 1f                	jne    c0017c11 <CPU::detectFeatures()+0x9c7>
c0017bf2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0017bf9:	eb 32                	jmp    c0017c2d <CPU::detectFeatures()+0x9e3>
c0017bfb:	50                   	push   eax
c0017bfc:	50                   	push   eax
c0017bfd:	68 65 a3 03 c0       	push   0xc003a365
c0017c02:	53                   	push   ebx
c0017c03:	e8 54 bd ff ff       	call   c001395c <Device::setName(char const*)>
c0017c08:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0017c0f:	eb d1                	jmp    c0017be2 <CPU::detectFeatures()+0x998>
c0017c11:	e8 44 85 fe ff       	call   c000015a <hasLegacyFPU>
c0017c16:	83 e0 01             	and    eax,0x1
c0017c19:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c1c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017c22:	83 e0 fd             	and    eax,0xfffffffd
c0017c25:	09 d0                	or     eax,edx
c0017c27:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017c2d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0017c34:	83 c4 4c             	add    esp,0x4c
c0017c37:	5b                   	pop    ebx
c0017c38:	5e                   	pop    esi
c0017c39:	5f                   	pop    edi
c0017c3a:	5d                   	pop    ebp
c0017c3b:	c3                   	ret    

c0017c3c <CPU::setupSMEP()>:
c0017c3c:	83 ec 0c             	sub    esp,0xc
c0017c3f:	e8 d7 6d 00 00       	call   c001ea1b <CPU::readCR4()>
c0017c44:	0d 00 00 10 00       	or     eax,0x100000
c0017c49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c4d:	83 c4 0c             	add    esp,0xc
c0017c50:	e9 ec 74 00 00       	jmp    c001f141 <CPU::writeCR4(unsigned long)>
c0017c55:	90                   	nop

c0017c56 <CPU::setupUMIP()>:
c0017c56:	83 ec 0c             	sub    esp,0xc
c0017c59:	e8 bd 6d 00 00       	call   c001ea1b <CPU::readCR4()>
c0017c5e:	80 cc 08             	or     ah,0x8
c0017c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c65:	83 c4 0c             	add    esp,0xc
c0017c68:	e9 d4 74 00 00       	jmp    c001f141 <CPU::writeCR4(unsigned long)>
c0017c6d:	90                   	nop

c0017c6e <CPU::setupTSC()>:
c0017c6e:	83 ec 0c             	sub    esp,0xc
c0017c71:	e8 a5 6d 00 00       	call   c001ea1b <CPU::readCR4()>
c0017c76:	83 c8 04             	or     eax,0x4
c0017c79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c7d:	83 c4 0c             	add    esp,0xc
c0017c80:	e9 bc 74 00 00       	jmp    c001f141 <CPU::writeCR4(unsigned long)>
c0017c85:	90                   	nop

c0017c86 <CPU::setupLargePages()>:
c0017c86:	83 ec 0c             	sub    esp,0xc
c0017c89:	e8 8d 6d 00 00       	call   c001ea1b <CPU::readCR4()>
c0017c8e:	83 c8 10             	or     eax,0x10
c0017c91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c95:	83 c4 0c             	add    esp,0xc
c0017c98:	e9 a4 74 00 00       	jmp    c001f141 <CPU::writeCR4(unsigned long)>
c0017c9d:	90                   	nop

c0017c9e <CPU::setupPAT()>:
c0017c9e:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0017ca3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0017caa:	74 2c                	je     c0017cd8 <CPU::setupPAT()+0x3a>
c0017cac:	53                   	push   ebx
c0017cad:	83 ec 10             	sub    esp,0x10
c0017cb0:	68 77 02 00 00       	push   0x277
c0017cb5:	50                   	push   eax
c0017cb6:	e8 01 39 ff ff       	call   c000b5bc <Computer::rdmsr(unsigned int)>
c0017cbb:	83 e2 f8             	and    edx,0xfffffff8
c0017cbe:	83 ca 01             	or     edx,0x1
c0017cc1:	52                   	push   edx
c0017cc2:	50                   	push   eax
c0017cc3:	68 77 02 00 00       	push   0x277
c0017cc8:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c0017cce:	e8 15 39 ff ff       	call   c000b5e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017cd3:	83 c4 28             	add    esp,0x28
c0017cd6:	5b                   	pop    ebx
c0017cd7:	c3                   	ret    
c0017cd8:	c3                   	ret    
c0017cd9:	90                   	nop

c0017cda <CPU::setupMTRR()>:
c0017cda:	c3                   	ret    
c0017cdb:	90                   	nop

c0017cdc <CPU::setupGlobalPages()>:
c0017cdc:	83 ec 0c             	sub    esp,0xc
c0017cdf:	e8 37 6d 00 00       	call   c001ea1b <CPU::readCR4()>
c0017ce4:	0c 80                	or     al,0x80
c0017ce6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cea:	83 c4 0c             	add    esp,0xc
c0017ced:	e9 4f 74 00 00       	jmp    c001f141 <CPU::writeCR4(unsigned long)>

c0017cf2 <CPU::allowUsermodeDataAccess()>:
c0017cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cf6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017cfd:	74 03                	je     c0017d02 <CPU::allowUsermodeDataAccess()+0x10>
c0017cff:	0f 01 cb             	stac   
c0017d02:	c3                   	ret    
c0017d03:	90                   	nop

c0017d04 <CPU::prohibitUsermodeDataAccess()>:
c0017d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d08:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017d0f:	74 03                	je     c0017d14 <CPU::prohibitUsermodeDataAccess()+0x10>
c0017d11:	0f 01 ca             	clac   
c0017d14:	c3                   	ret    
c0017d15:	90                   	nop

c0017d16 <CPU::setupSMAP()>:
c0017d16:	53                   	push   ebx
c0017d17:	83 ec 08             	sub    esp,0x8
c0017d1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d1e:	e8 f8 6c 00 00       	call   c001ea1b <CPU::readCR4()>
c0017d23:	83 ec 0c             	sub    esp,0xc
c0017d26:	0d 00 00 20 00       	or     eax,0x200000
c0017d2b:	50                   	push   eax
c0017d2c:	e8 10 74 00 00       	call   c001f141 <CPU::writeCR4(unsigned long)>
c0017d31:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017d35:	83 c4 18             	add    esp,0x18
c0017d38:	5b                   	pop    ebx
c0017d39:	eb c9                	jmp    c0017d04 <CPU::prohibitUsermodeDataAccess()>
c0017d3b:	90                   	nop

c0017d3c <CPU::setupFeatures()>:
c0017d3c:	53                   	push   ebx
c0017d3d:	83 ec 08             	sub    esp,0x8
c0017d40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d44:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017d4b:	74 0c                	je     c0017d59 <CPU::setupFeatures()+0x1d>
c0017d4d:	83 ec 0c             	sub    esp,0xc
c0017d50:	53                   	push   ebx
c0017d51:	e8 e6 fe ff ff       	call   c0017c3c <CPU::setupSMEP()>
c0017d56:	83 c4 10             	add    esp,0x10
c0017d59:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017d60:	74 0c                	je     c0017d6e <CPU::setupFeatures()+0x32>
c0017d62:	83 ec 0c             	sub    esp,0xc
c0017d65:	53                   	push   ebx
c0017d66:	e8 ab ff ff ff       	call   c0017d16 <CPU::setupSMAP()>
c0017d6b:	83 c4 10             	add    esp,0x10
c0017d6e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017d75:	74 0c                	je     c0017d83 <CPU::setupFeatures()+0x47>
c0017d77:	83 ec 0c             	sub    esp,0xc
c0017d7a:	53                   	push   ebx
c0017d7b:	e8 d6 fe ff ff       	call   c0017c56 <CPU::setupUMIP()>
c0017d80:	83 c4 10             	add    esp,0x10
c0017d83:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017d8a:	74 0c                	je     c0017d98 <CPU::setupFeatures()+0x5c>
c0017d8c:	83 ec 0c             	sub    esp,0xc
c0017d8f:	53                   	push   ebx
c0017d90:	e8 d9 fe ff ff       	call   c0017c6e <CPU::setupTSC()>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017d9f:	74 0c                	je     c0017dad <CPU::setupFeatures()+0x71>
c0017da1:	83 ec 0c             	sub    esp,0xc
c0017da4:	53                   	push   ebx
c0017da5:	e8 dc fe ff ff       	call   c0017c86 <CPU::setupLargePages()>
c0017daa:	83 c4 10             	add    esp,0x10
c0017dad:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017db4:	74 0c                	je     c0017dc2 <CPU::setupFeatures()+0x86>
c0017db6:	83 ec 0c             	sub    esp,0xc
c0017db9:	53                   	push   ebx
c0017dba:	e8 1d ff ff ff       	call   c0017cdc <CPU::setupGlobalPages()>
c0017dbf:	83 c4 10             	add    esp,0x10
c0017dc2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017dc9:	74 0d                	je     c0017dd8 <CPU::setupFeatures()+0x9c>
c0017dcb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017dcf:	83 c4 08             	add    esp,0x8
c0017dd2:	5b                   	pop    ebx
c0017dd3:	e9 c6 fe ff ff       	jmp    c0017c9e <CPU::setupPAT()>
c0017dd8:	83 c4 08             	add    esp,0x8
c0017ddb:	5b                   	pop    ebx
c0017ddc:	c3                   	ret    
c0017ddd:	90                   	nop

c0017dde <CPU::open(int, int, void*)>:
c0017dde:	57                   	push   edi
c0017ddf:	56                   	push   esi
c0017de0:	53                   	push   ebx
c0017de1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017de5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017de9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0017def:	83 ec 0c             	sub    esp,0xc
c0017df2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017df8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017dfe:	50                   	push   eax
c0017dff:	e8 2a 4a ff ff       	call   c000c82e <GDT::setup()>
c0017e04:	83 c4 0c             	add    esp,0xc
c0017e07:	6a 00                	push   0x0
c0017e09:	68 ef be ad de       	push   0xdeadbeef
c0017e0e:	57                   	push   edi
c0017e0f:	e8 f2 8f ff ff       	call   c0010e06 <TSS::setup(unsigned long, unsigned long)>
c0017e14:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017e17:	e8 ca 8f ff ff       	call   c0010de6 <TSS::flush()>
c0017e1c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017e22:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e25:	e8 5e 4c ff ff       	call   c000ca88 <IDT::setup()>
c0017e2a:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017e31:	e8 02 73 00 00       	call   c001f138 <CPU::writeDR7(unsigned long)>
c0017e36:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017e40:	e8 20 5c ff ff       	call   c000da65 <Phys::allocatePage()>
c0017e45:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017e4b:	89 30                	mov    DWORD PTR [eax],esi
c0017e4d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017e53:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017e56:	58                   	pop    eax
c0017e57:	5a                   	pop    edx
c0017e58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017e5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017e62:	e8 7f 9d ff ff       	call   c0011be6 <VAS::setCPUSpecific(unsigned long)>
c0017e67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e6a:	e8 db f3 ff ff       	call   c001724a <CPU::detectFeatures()>
c0017e6f:	e8 40 c8 ff ff       	call   c00146b4 <setupInterruptController()>
c0017e74:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017e7a:	a1 94 bb 03 c0       	mov    eax,ds:0xc003bb94
c0017e7f:	83 e0 10             	and    eax,0x10
c0017e82:	83 f8 01             	cmp    eax,0x1
c0017e85:	19 c0                	sbb    eax,eax
c0017e87:	83 e0 46             	and    eax,0x46
c0017e8a:	83 c0 1e             	add    eax,0x1e
c0017e8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e90:	e8 03 da ff ff       	call   c0015898 <setupTimer(int)>
c0017e95:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017e9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e9e:	e8 99 fe ff ff       	call   c0017d3c <CPU::setupFeatures()>
c0017ea3:	83 c4 10             	add    esp,0x10
c0017ea6:	31 c0                	xor    eax,eax
c0017ea8:	5b                   	pop    ebx
c0017ea9:	5e                   	pop    esi
c0017eaa:	5f                   	pop    edi
c0017eab:	c3                   	ret    

c0017eac <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017eac:	55                   	push   ebp
c0017ead:	57                   	push   edi
c0017eae:	56                   	push   esi
c0017eaf:	53                   	push   ebx
c0017eb0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017eb6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017ebd:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017ebf:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017ec2:	80 fb 40             	cmp    bl,0x40
c0017ec5:	75 1b                	jne    c0017ee2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017ec7:	8a 16                	mov    dl,BYTE PTR [esi]
c0017ec9:	84 d2                	test   dl,dl
c0017ecb:	0f 84 f1 00 00 00    	je     c0017fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017ed1:	8d 46 01             	lea    eax,[esi+0x1]
c0017ed4:	80 fa 3a             	cmp    dl,0x3a
c0017ed7:	74 04                	je     c0017edd <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017ed9:	89 c6                	mov    esi,eax
c0017edb:	eb ea                	jmp    c0017ec7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017edd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017ee0:	89 c6                	mov    esi,eax
c0017ee2:	50                   	push   eax
c0017ee3:	6a 40                	push   0x40
c0017ee5:	6a 00                	push   0x0
c0017ee7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017eeb:	50                   	push   eax
c0017eec:	e8 ba 87 fe ff       	call   c00006ab <memset>
c0017ef1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017ef8:	31 c0                	xor    eax,eax
c0017efa:	83 c4 10             	add    esp,0x10
c0017efd:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017eff:	84 c9                	test   cl,cl
c0017f01:	0f 84 bb 00 00 00    	je     c0017fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f07:	3d c7 00 00 00       	cmp    eax,0xc7
c0017f0c:	0f 8f b0 00 00 00    	jg     c0017fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f12:	80 f9 0a             	cmp    cl,0xa
c0017f15:	0f 85 98 00 00 00    	jne    c0017fb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017f1b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017f20:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017f24:	a8 df                	test   al,0xdf
c0017f26:	0f 94 c1             	sete   cl
c0017f29:	3c 23                	cmp    al,0x23
c0017f2b:	0f 94 c2             	sete   dl
c0017f2e:	08 d1                	or     cl,dl
c0017f30:	75 4a                	jne    c0017f7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f32:	8d 50 f7             	lea    edx,[eax-0x9]
c0017f35:	80 fa 01             	cmp    dl,0x1
c0017f38:	76 42                	jbe    c0017f7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f3a:	3c 5b                	cmp    al,0x5b
c0017f3c:	75 42                	jne    c0017f80 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017f3e:	80 fb 40             	cmp    bl,0x40
c0017f41:	75 39                	jne    c0017f7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f43:	83 ec 0c             	sub    esp,0xc
c0017f46:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017f4a:	52                   	push   edx
c0017f4b:	e8 84 87 fe ff       	call   c00006d4 <strlen>
c0017f50:	83 c4 10             	add    esp,0x10
c0017f53:	83 f8 3f             	cmp    eax,0x3f
c0017f56:	77 6a                	ja     c0017fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f58:	50                   	push   eax
c0017f59:	50                   	push   eax
c0017f5a:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017f5e:	52                   	push   edx
c0017f5f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f63:	52                   	push   edx
c0017f64:	e8 5e 88 fe ff       	call   c00007c7 <strcpy>
c0017f69:	58                   	pop    eax
c0017f6a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f6e:	52                   	push   edx
c0017f6f:	e8 60 87 fe ff       	call   c00006d4 <strlen>
c0017f74:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017f79:	83 c4 10             	add    esp,0x10
c0017f7c:	31 d2                	xor    edx,edx
c0017f7e:	eb 3a                	jmp    c0017fba <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017f80:	80 fb 40             	cmp    bl,0x40
c0017f83:	74 06                	je     c0017f8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017f85:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017f89:	eb 20                	jmp    c0017fab <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017f8b:	50                   	push   eax
c0017f8c:	50                   	push   eax
c0017f8d:	55                   	push   ebp
c0017f8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017f92:	50                   	push   eax
c0017f93:	e8 b5 88 fe ff       	call   c000084d <strcmp>
c0017f98:	83 c4 10             	add    esp,0x10
c0017f9b:	85 c0                	test   eax,eax
c0017f9d:	75 dd                	jne    c0017f7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f9f:	eb e4                	jmp    c0017f85 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017fa1:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa4:	80 f9 3d             	cmp    cl,0x3d
c0017fa7:	74 1d                	je     c0017fc6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017fa9:	89 d0                	mov    eax,edx
c0017fab:	8a 08                	mov    cl,BYTE PTR [eax]
c0017fad:	84 c9                	test   cl,cl
c0017faf:	75 f0                	jne    c0017fa1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017fb1:	eb 0f                	jmp    c0017fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017fb3:	8d 50 01             	lea    edx,[eax+0x1]
c0017fb6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017fba:	47                   	inc    edi
c0017fbb:	89 d0                	mov    eax,edx
c0017fbd:	e9 3b ff ff ff       	jmp    c0017efd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017fc2:	31 c0                	xor    eax,eax
c0017fc4:	eb 33                	jmp    c0017ff9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017fc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017fca:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017fcd:	50                   	push   eax
c0017fce:	50                   	push   eax
c0017fcf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017fd3:	50                   	push   eax
c0017fd4:	56                   	push   esi
c0017fd5:	e8 73 88 fe ff       	call   c000084d <strcmp>
c0017fda:	83 c4 10             	add    esp,0x10
c0017fdd:	85 c0                	test   eax,eax
c0017fdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fe3:	75 97                	jne    c0017f7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017fe5:	51                   	push   ecx
c0017fe6:	51                   	push   ecx
c0017fe7:	52                   	push   edx
c0017fe8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0017fef:	e8 d3 87 fe ff       	call   c00007c7 <strcpy>
c0017ff4:	83 c4 10             	add    esp,0x10
c0017ff7:	b0 01                	mov    al,0x1
c0017ff9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017fff:	5b                   	pop    ebx
c0018000:	5e                   	pop    esi
c0018001:	5f                   	pop    edi
c0018002:	5d                   	pop    ebp
c0018003:	c3                   	ret    

c0018004 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018004:	57                   	push   edi
c0018005:	56                   	push   esi
c0018006:	53                   	push   ebx
c0018007:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001800d:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018014:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001801b:	53                   	push   ebx
c001801c:	e8 b3 86 fe ff       	call   c00006d4 <strlen>
c0018021:	89 34 24             	mov    DWORD PTR [esp],esi
c0018024:	89 c7                	mov    edi,eax
c0018026:	e8 a9 86 fe ff       	call   c00006d4 <strlen>
c001802b:	83 c4 10             	add    esp,0x10
c001802e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018032:	31 ff                	xor    edi,edi
c0018034:	3d ff 00 00 00       	cmp    eax,0xff
c0018039:	0f 87 18 01 00 00    	ja     c0018157 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001803f:	51                   	push   ecx
c0018040:	51                   	push   ecx
c0018041:	56                   	push   esi
c0018042:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018046:	56                   	push   esi
c0018047:	e8 7b 87 fe ff       	call   c00007c7 <strcpy>
c001804c:	58                   	pop    eax
c001804d:	5a                   	pop    edx
c001804e:	68 16 8f 03 c0       	push   0xc0038f16
c0018053:	56                   	push   esi
c0018054:	e8 bb 88 fe ff       	call   c0000914 <strcat>
c0018059:	59                   	pop    ecx
c001805a:	58                   	pop    eax
c001805b:	53                   	push   ebx
c001805c:	56                   	push   esi
c001805d:	e8 b2 88 fe ff       	call   c0000914 <strcat>
c0018062:	58                   	pop    eax
c0018063:	5a                   	pop    edx
c0018064:	68 9c a3 03 c0       	push   0xc003a39c
c0018069:	56                   	push   esi
c001806a:	e8 a5 88 fe ff       	call   c0000914 <strcat>
c001806f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018076:	e8 f5 a3 ff ff       	call   c0012470 <operator new(unsigned long)>
c001807b:	83 c4 0c             	add    esp,0xc
c001807e:	89 c3                	mov    ebx,eax
c0018080:	ff 35 3c bc 03 c0    	push   DWORD PTR ds:0xc003bc3c
c0018086:	56                   	push   esi
c0018087:	50                   	push   eax
c0018088:	e8 11 a8 ff ff       	call   c001289e <File::File(char const*, Process*)>
c001808d:	59                   	pop    ecx
c001808e:	5e                   	pop    esi
c001808f:	6a 01                	push   0x1
c0018091:	53                   	push   ebx
c0018092:	e8 6b a8 ff ff       	call   c0012902 <File::open(FileOpenMode)>
c0018097:	83 c4 10             	add    esp,0x10
c001809a:	85 c0                	test   eax,eax
c001809c:	74 08                	je     c00180a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c001809e:	83 ec 0c             	sub    esp,0xc
c00180a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180a3:	53                   	push   ebx
c00180a4:	eb 2e                	jmp    c00180d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c00180a6:	52                   	push   edx
c00180a7:	8d 44 24 07          	lea    eax,[esp+0x7]
c00180ab:	50                   	push   eax
c00180ac:	8d 44 24 10          	lea    eax,[esp+0x10]
c00180b0:	50                   	push   eax
c00180b1:	53                   	push   ebx
c00180b2:	e8 f7 aa ff ff       	call   c0012bae <File::stat(unsigned long long*, bool*)>
c00180b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180bb:	83 c4 10             	add    esp,0x10
c00180be:	89 c1                	mov    ecx,eax
c00180c0:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00180c4:	75 13                	jne    c00180d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c00180c6:	83 ec 0c             	sub    esp,0xc
c00180c9:	53                   	push   ebx
c00180ca:	e8 91 a8 ff ff       	call   c0012960 <File::close()>
c00180cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180d7:	eb 7b                	jmp    c0018154 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c00180d9:	83 ec 0c             	sub    esp,0xc
c00180dc:	50                   	push   eax
c00180dd:	e8 d9 53 ff ff       	call   c000d4bb <malloc>
c00180e2:	89 c6                	mov    esi,eax
c00180e4:	58                   	pop    eax
c00180e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180e7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00180eb:	52                   	push   edx
c00180ec:	56                   	push   esi
c00180ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180f5:	53                   	push   ebx
c00180f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00180f9:	83 c4 20             	add    esp,0x20
c00180fc:	85 c0                	test   eax,eax
c00180fe:	75 0a                	jne    c001810a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0018100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018104:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018108:	74 18                	je     c0018122 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c001810a:	83 ec 0c             	sub    esp,0xc
c001810d:	31 ff                	xor    edi,edi
c001810f:	53                   	push   ebx
c0018110:	e8 4b a8 ff ff       	call   c0012960 <File::close()>
c0018115:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018117:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001811a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001811d:	83 c4 10             	add    esp,0x10
c0018120:	eb 35                	jmp    c0018157 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018122:	83 ec 0c             	sub    esp,0xc
c0018125:	53                   	push   ebx
c0018126:	e8 35 a8 ff ff       	call   c0012960 <File::close()>
c001812b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001812d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018130:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018133:	83 c4 0c             	add    esp,0xc
c0018136:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001813d:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018144:	56                   	push   esi
c0018145:	e8 62 fd ff ff       	call   c0017eac <Reg::findLineFromLoadedData(char*, char*, char*)>
c001814a:	89 34 24             	mov    DWORD PTR [esp],esi
c001814d:	89 c7                	mov    edi,eax
c001814f:	e8 77 53 ff ff       	call   c000d4cb <free>
c0018154:	83 c4 10             	add    esp,0x10
c0018157:	81 c4 10 01 00 00    	add    esp,0x110
c001815d:	89 f8                	mov    eax,edi
c001815f:	5b                   	pop    ebx
c0018160:	5e                   	pop    esi
c0018161:	5f                   	pop    edi
c0018162:	c3                   	ret    

c0018163 <Reg::getLine(char*, char*, char*)>:
c0018163:	57                   	push   edi
c0018164:	56                   	push   esi
c0018165:	53                   	push   ebx
c0018166:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001816a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001816e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018172:	57                   	push   edi
c0018173:	56                   	push   esi
c0018174:	53                   	push   ebx
c0018175:	68 a1 a3 03 c0       	push   0xc003a3a1
c001817a:	e8 85 fe ff ff       	call   c0018004 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001817f:	83 c4 10             	add    esp,0x10
c0018182:	84 c0                	test   al,al
c0018184:	75 10                	jne    c0018196 <Reg::getLine(char*, char*, char*)+0x33>
c0018186:	57                   	push   edi
c0018187:	56                   	push   esi
c0018188:	53                   	push   ebx
c0018189:	68 c6 a3 03 c0       	push   0xc003a3c6
c001818e:	e8 71 fe ff ff       	call   c0018004 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018193:	83 c4 10             	add    esp,0x10
c0018196:	5b                   	pop    ebx
c0018197:	5e                   	pop    esi
c0018198:	5f                   	pop    edi
c0018199:	c3                   	ret    

c001819a <Reg::readInt(char*, char*, int*)>:
c001819a:	55                   	push   ebp
c001819b:	57                   	push   edi
c001819c:	56                   	push   esi
c001819d:	53                   	push   ebx
c001819e:	81 ec f0 00 00 00    	sub    esp,0xf0
c00181a4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00181a8:	57                   	push   edi
c00181a9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00181b0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00181b7:	e8 a7 ff ff ff       	call   c0018163 <Reg::getLine(char*, char*, char*)>
c00181bc:	83 c4 10             	add    esp,0x10
c00181bf:	84 c0                	test   al,al
c00181c1:	0f 84 b3 00 00 00    	je     c001827a <Reg::readInt(char*, char*, int*)+0xe0>
c00181c7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00181cb:	80 fa 2b             	cmp    dl,0x2b
c00181ce:	74 0c                	je     c00181dc <Reg::readInt(char*, char*, int*)+0x42>
c00181d0:	80 fa 2d             	cmp    dl,0x2d
c00181d3:	75 0e                	jne    c00181e3 <Reg::readInt(char*, char*, int*)+0x49>
c00181d5:	ba 01 00 00 00       	mov    edx,0x1
c00181da:	eb 0b                	jmp    c00181e7 <Reg::readInt(char*, char*, int*)+0x4d>
c00181dc:	ba 01 00 00 00       	mov    edx,0x1
c00181e1:	eb 02                	jmp    c00181e5 <Reg::readInt(char*, char*, int*)+0x4b>
c00181e3:	31 d2                	xor    edx,edx
c00181e5:	31 c0                	xor    eax,eax
c00181e7:	be 0a 00 00 00       	mov    esi,0xa
c00181ec:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00181f1:	75 20                	jne    c0018213 <Reg::readInt(char*, char*, int*)+0x79>
c00181f3:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00181f7:	80 f9 78             	cmp    cl,0x78
c00181fa:	75 0a                	jne    c0018206 <Reg::readInt(char*, char*, int*)+0x6c>
c00181fc:	83 c2 02             	add    edx,0x2
c00181ff:	be 10 00 00 00       	mov    esi,0x10
c0018204:	eb 0d                	jmp    c0018213 <Reg::readInt(char*, char*, int*)+0x79>
c0018206:	80 f9 62             	cmp    cl,0x62
c0018209:	75 08                	jne    c0018213 <Reg::readInt(char*, char*, int*)+0x79>
c001820b:	83 c2 02             	add    edx,0x2
c001820e:	be 02 00 00 00       	mov    esi,0x2
c0018213:	01 d7                	add    edi,edx
c0018215:	31 d2                	xor    edx,edx
c0018217:	8a 1f                	mov    bl,BYTE PTR [edi]
c0018219:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001821d:	80 fb 0d             	cmp    bl,0xd
c0018220:	0f 94 c3             	sete   bl
c0018223:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018228:	0f 94 c1             	sete   cl
c001822b:	08 cb                	or     bl,cl
c001822d:	75 3a                	jne    c0018269 <Reg::readInt(char*, char*, int*)+0xcf>
c001822f:	0f af d6             	imul   edx,esi
c0018232:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0018237:	83 fe 10             	cmp    esi,0x10
c001823a:	75 26                	jne    c0018262 <Reg::readInt(char*, char*, int*)+0xc8>
c001823c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0018240:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0018243:	89 e9                	mov    ecx,ebp
c0018245:	80 f9 05             	cmp    cl,0x5
c0018248:	77 06                	ja     c0018250 <Reg::readInt(char*, char*, int*)+0xb6>
c001824a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001824e:	eb 16                	jmp    c0018266 <Reg::readInt(char*, char*, int*)+0xcc>
c0018250:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0018254:	83 e9 61             	sub    ecx,0x61
c0018257:	80 f9 05             	cmp    cl,0x5
c001825a:	77 06                	ja     c0018262 <Reg::readInt(char*, char*, int*)+0xc8>
c001825c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0018260:	eb 04                	jmp    c0018266 <Reg::readInt(char*, char*, int*)+0xcc>
c0018262:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0018266:	47                   	inc    edi
c0018267:	eb ae                	jmp    c0018217 <Reg::readInt(char*, char*, int*)+0x7d>
c0018269:	84 c0                	test   al,al
c001826b:	74 02                	je     c001826f <Reg::readInt(char*, char*, int*)+0xd5>
c001826d:	f7 da                	neg    edx
c001826f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0018276:	89 10                	mov    DWORD PTR [eax],edx
c0018278:	88 d8                	mov    al,bl
c001827a:	81 c4 ec 00 00 00    	add    esp,0xec
c0018280:	5b                   	pop    ebx
c0018281:	5e                   	pop    esi
c0018282:	5f                   	pop    edi
c0018283:	5d                   	pop    ebp
c0018284:	c3                   	ret    

c0018285 <Reg::readString(char*, char*, char*, int)>:
c0018285:	57                   	push   edi
c0018286:	56                   	push   esi
c0018287:	53                   	push   ebx
c0018288:	81 ec d4 00 00 00    	sub    esp,0xd4
c001828e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0018295:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0018299:	57                   	push   edi
c001829a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00182a1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00182a8:	e8 b6 fe ff ff       	call   c0018163 <Reg::getLine(char*, char*, char*)>
c00182ad:	83 c4 10             	add    esp,0x10
c00182b0:	89 c6                	mov    esi,eax
c00182b2:	84 c0                	test   al,al
c00182b4:	74 44                	je     c00182fa <Reg::readString(char*, char*, char*, int)+0x75>
c00182b6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00182bd:	31 c0                	xor    eax,eax
c00182bf:	4a                   	dec    edx
c00182c0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00182c3:	84 c9                	test   cl,cl
c00182c5:	74 0f                	je     c00182d6 <Reg::readString(char*, char*, char*, int)+0x51>
c00182c7:	39 c2                	cmp    edx,eax
c00182c9:	7e 0b                	jle    c00182d6 <Reg::readString(char*, char*, char*, int)+0x51>
c00182cb:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00182ce:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00182d3:	40                   	inc    eax
c00182d4:	eb ea                	jmp    c00182c0 <Reg::readString(char*, char*, char*, int)+0x3b>
c00182d6:	83 ec 0c             	sub    esp,0xc
c00182d9:	53                   	push   ebx
c00182da:	e8 f5 83 fe ff       	call   c00006d4 <strlen>
c00182df:	83 c4 10             	add    esp,0x10
c00182e2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00182e7:	75 11                	jne    c00182fa <Reg::readString(char*, char*, char*, int)+0x75>
c00182e9:	83 ec 0c             	sub    esp,0xc
c00182ec:	53                   	push   ebx
c00182ed:	e8 e2 83 fe ff       	call   c00006d4 <strlen>
c00182f2:	83 c4 10             	add    esp,0x10
c00182f5:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00182fa:	81 c4 d0 00 00 00    	add    esp,0xd0
c0018300:	89 f0                	mov    eax,esi
c0018302:	5b                   	pop    ebx
c0018303:	5e                   	pop    esi
c0018304:	5f                   	pop    edi
c0018305:	c3                   	ret    

c0018306 <Reg::readBool(char*, char*, bool*)>:
c0018306:	83 ec 20             	sub    esp,0x20
c0018309:	8d 44 24 10          	lea    eax,[esp+0x10]
c001830d:	50                   	push   eax
c001830e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018316:	e8 7f fe ff ff       	call   c001819a <Reg::readInt(char*, char*, int*)>
c001831b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018320:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018324:	0f 95 02             	setne  BYTE PTR [edx]
c0018327:	83 c4 2c             	add    esp,0x2c
c001832a:	c3                   	ret    

c001832b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001832b:	53                   	push   ebx
c001832c:	83 ec 1c             	sub    esp,0x1c
c001832f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0018333:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018337:	50                   	push   eax
c0018338:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001833c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018340:	e8 c1 ff ff ff       	call   c0018306 <Reg::readBool(char*, char*, bool*)>
c0018345:	83 c4 10             	add    esp,0x10
c0018348:	84 c0                	test   al,al
c001834a:	74 04                	je     c0018350 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001834c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0018350:	88 d8                	mov    al,bl
c0018352:	83 c4 18             	add    esp,0x18
c0018355:	5b                   	pop    ebx
c0018356:	c3                   	ret    

c0018357 <Reg::readIntWithDefault(char*, char*, int)>:
c0018357:	53                   	push   ebx
c0018358:	83 ec 1c             	sub    esp,0x1c
c001835b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001835f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018363:	50                   	push   eax
c0018364:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018368:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001836c:	e8 29 fe ff ff       	call   c001819a <Reg::readInt(char*, char*, int*)>
c0018371:	83 c4 10             	add    esp,0x10
c0018374:	84 c0                	test   al,al
c0018376:	74 04                	je     c001837c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0018378:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001837c:	89 d8                	mov    eax,ebx
c001837e:	83 c4 18             	add    esp,0x18
c0018381:	5b                   	pop    ebx
c0018382:	c3                   	ret    

c0018383 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0018383:	56                   	push   esi
c0018384:	53                   	push   ebx
c0018385:	51                   	push   ecx
c0018386:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001838a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001838e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018392:	56                   	push   esi
c0018393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001839b:	e8 e5 fe ff ff       	call   c0018285 <Reg::readString(char*, char*, char*, int)>
c00183a0:	83 c4 10             	add    esp,0x10
c00183a3:	84 c0                	test   al,al
c00183a5:	74 02                	je     c00183a9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00183a7:	89 f3                	mov    ebx,esi
c00183a9:	89 d8                	mov    eax,ebx
c00183ab:	5a                   	pop    edx
c00183ac:	5b                   	pop    ebx
c00183ad:	5e                   	pop    esi
c00183ae:	c3                   	ret    

c00183af <Sys::exit(regs*)>:
c00183af:	83 ec 18             	sub    esp,0x18
c00183b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183b6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00183b9:	e8 a4 6b ff ff       	call   c000ef62 <terminateTask(int)>
c00183be:	83 c8 ff             	or     eax,0xffffffff
c00183c1:	83 c4 1c             	add    esp,0x1c
c00183c4:	89 c2                	mov    edx,eax
c00183c6:	c3                   	ret    

c00183c7 <Sys::read(regs*)>:
c00183c7:	57                   	push   edi
c00183c8:	56                   	push   esi
c00183c9:	53                   	push   ebx
c00183ca:	83 ec 10             	sub    esp,0x10
c00183cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00183d1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00183d4:	83 f8 02             	cmp    eax,0x2
c00183d7:	77 10                	ja     c00183e9 <Sys::read(regs*)+0x22>
c00183d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00183e1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00183e7:	eb 0e                	jmp    c00183f7 <Sys::read(regs*)+0x30>
c00183e9:	83 ec 0c             	sub    esp,0xc
c00183ec:	50                   	push   eax
c00183ed:	e8 07 8e ff ff       	call   c00111f9 <getFromFileDescriptor(int)>
c00183f2:	83 c4 10             	add    esp,0x10
c00183f5:	89 c1                	mov    ecx,eax
c00183f7:	83 c8 ff             	or     eax,0xffffffff
c00183fa:	85 c9                	test   ecx,ecx
c00183fc:	89 c2                	mov    edx,eax
c00183fe:	74 28                	je     c0018428 <Sys::read(regs*)+0x61>
c0018400:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018408:	31 ff                	xor    edi,edi
c001840a:	83 ec 0c             	sub    esp,0xc
c001840d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001840f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018413:	52                   	push   edx
c0018414:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018417:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001841a:	57                   	push   edi
c001841b:	56                   	push   esi
c001841c:	51                   	push   ecx
c001841d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018420:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018424:	83 c4 20             	add    esp,0x20
c0018427:	99                   	cdq    
c0018428:	83 c4 10             	add    esp,0x10
c001842b:	5b                   	pop    ebx
c001842c:	5e                   	pop    esi
c001842d:	5f                   	pop    edi
c001842e:	c3                   	ret    

c001842f <Sys::sbrk(regs*)>:
c001842f:	56                   	push   esi
c0018430:	53                   	push   ebx
c0018431:	50                   	push   eax
c0018432:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018437:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001843b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001843e:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0018441:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0018447:	85 db                	test   ebx,ebx
c0018449:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001844c:	74 02                	je     c0018450 <Sys::sbrk(regs*)+0x21>
c001844e:	79 06                	jns    c0018456 <Sys::sbrk(regs*)+0x27>
c0018450:	89 f0                	mov    eax,esi
c0018452:	31 d2                	xor    edx,edx
c0018454:	eb 2a                	jmp    c0018480 <Sys::sbrk(regs*)+0x51>
c0018456:	83 c8 ff             	or     eax,0xffffffff
c0018459:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001845f:	89 c2                	mov    edx,eax
c0018461:	77 1d                	ja     c0018480 <Sys::sbrk(regs*)+0x51>
c0018463:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0018469:	50                   	push   eax
c001846a:	c1 ea 0c             	shr    edx,0xc
c001846d:	68 07 04 00 00       	push   0x407
c0018472:	52                   	push   edx
c0018473:	51                   	push   ecx
c0018474:	e8 9d 95 ff ff       	call   c0011a16 <VAS::allocatePages(int, int)>
c0018479:	89 f0                	mov    eax,esi
c001847b:	31 d2                	xor    edx,edx
c001847d:	83 c4 10             	add    esp,0x10
c0018480:	59                   	pop    ecx
c0018481:	5b                   	pop    ebx
c0018482:	5e                   	pop    esi
c0018483:	c3                   	ret    

c0018484 <Sys::write(regs*)>:
c0018484:	57                   	push   edi
c0018485:	56                   	push   esi
c0018486:	53                   	push   ebx
c0018487:	83 ec 10             	sub    esp,0x10
c001848a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001848e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0018491:	83 f8 02             	cmp    eax,0x2
c0018494:	77 10                	ja     c00184a6 <Sys::write(regs*)+0x22>
c0018496:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001849b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001849e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00184a4:	eb 0e                	jmp    c00184b4 <Sys::write(regs*)+0x30>
c00184a6:	83 ec 0c             	sub    esp,0xc
c00184a9:	50                   	push   eax
c00184aa:	e8 4a 8d ff ff       	call   c00111f9 <getFromFileDescriptor(int)>
c00184af:	83 c4 10             	add    esp,0x10
c00184b2:	89 c1                	mov    ecx,eax
c00184b4:	83 c8 ff             	or     eax,0xffffffff
c00184b7:	85 c9                	test   ecx,ecx
c00184b9:	89 c2                	mov    edx,eax
c00184bb:	74 28                	je     c00184e5 <Sys::write(regs*)+0x61>
c00184bd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00184c5:	31 ff                	xor    edi,edi
c00184c7:	83 ec 0c             	sub    esp,0xc
c00184ca:	8b 01                	mov    eax,DWORD PTR [ecx]
c00184cc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00184d0:	52                   	push   edx
c00184d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00184d4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00184d7:	57                   	push   edi
c00184d8:	56                   	push   esi
c00184d9:	51                   	push   ecx
c00184da:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00184dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00184e1:	83 c4 20             	add    esp,0x20
c00184e4:	99                   	cdq    
c00184e5:	83 c4 10             	add    esp,0x10
c00184e8:	5b                   	pop    ebx
c00184e9:	5e                   	pop    esi
c00184ea:	5f                   	pop    edi
c00184eb:	c3                   	ret    

c00184ec <Sys::yield(regs*)>:
c00184ec:	83 ec 0c             	sub    esp,0xc
c00184ef:	e8 6e 5e ff ff       	call   c000e362 <lockScheduler()>
c00184f4:	e8 9d 61 ff ff       	call   c000e696 <schedule()>
c00184f9:	e8 66 5e ff ff       	call   c000e364 <unlockScheduler()>
c00184fe:	31 c0                	xor    eax,eax
c0018500:	31 d2                	xor    edx,edx
c0018502:	83 c4 0c             	add    esp,0xc
c0018505:	c3                   	ret    

c0018506 <vm8086EntryPoint(void*)>:
c0018506:	83 ec 0c             	sub    esp,0xc
c0018509:	e8 56 5e ff ff       	call   c000e364 <unlockScheduler()>
c001850e:	fb                   	sti    
c001850f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018514:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018518:	52                   	push   edx
c0018519:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001851d:	52                   	push   edx
c001851e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018522:	52                   	push   edx
c0018523:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018527:	50                   	push   eax
c0018528:	e8 88 7c fe ff       	call   c00001b5 <goToVM86>
c001852d:	83 c4 1c             	add    esp,0x1c
c0018530:	c3                   	ret    

c0018531 <inbv(unsigned short)>:
c0018531:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018535:	ec                   	in     al,dx
c0018536:	c3                   	ret    

c0018537 <outbv(unsigned short, unsigned char)>:
c0018537:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001853b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001853f:	ee                   	out    dx,al
c0018540:	c3                   	ret    

c0018541 <realToLinear(unsigned short, unsigned short)>:
c0018541:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018546:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001854b:	c1 e0 04             	shl    eax,0x4
c001854e:	01 d0                	add    eax,edx
c0018550:	c3                   	ret    

c0018551 <getSegment(unsigned int)>:
c0018551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018555:	c1 e8 10             	shr    eax,0x10
c0018558:	c3                   	ret    

c0018559 <getOffset(unsigned int)>:
c0018559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001855d:	c3                   	ret    

c001855e <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001855e:	55                   	push   ebp
c001855f:	57                   	push   edi
c0018560:	56                   	push   esi
c0018561:	53                   	push   ebx
c0018562:	83 ec 2c             	sub    esp,0x2c
c0018565:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018569:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001856d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018571:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018575:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018579:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001857d:	e8 e0 5d ff ff       	call   c000e362 <lockScheduler()>
c0018582:	68 80 00 00 00       	push   0x80
c0018587:	6a 00                	push   0x0
c0018589:	68 06 85 01 c0       	push   0xc0018506
c001858e:	55                   	push   ebp
c001858f:	e8 f8 5e ff ff       	call   c000e48c <Process::createThread(void (*)(void*), void*, int)>
c0018594:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018598:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001859c:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00185a0:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00185a4:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00185a8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00185ac:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00185b3:	e8 b8 9e ff ff       	call   c0012470 <operator new(unsigned long)>
c00185b8:	83 c4 0c             	add    esp,0xc
c00185bb:	89 c3                	mov    ebx,eax
c00185bd:	55                   	push   ebp
c00185be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00185c2:	50                   	push   eax
c00185c3:	e8 d6 a2 ff ff       	call   c001289e <File::File(char const*, Process*)>
c00185c8:	83 c4 0c             	add    esp,0xc
c00185cb:	8d 44 24 17          	lea    eax,[esp+0x17]
c00185cf:	50                   	push   eax
c00185d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00185d4:	50                   	push   eax
c00185d5:	53                   	push   ebx
c00185d6:	e8 d3 a5 ff ff       	call   c0012bae <File::stat(unsigned long long*, bool*)>
c00185db:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00185df:	83 c4 10             	add    esp,0x10
c00185e2:	84 d2                	test   dl,dl
c00185e4:	74 1c                	je     c0018602 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00185e6:	83 ec 0c             	sub    esp,0xc
c00185e9:	68 e1 a3 03 c0       	push   0xc003a3e1
c00185ee:	e8 eb 49 ff ff       	call   c000cfde <panic(char const*)>
c00185f3:	e8 6c 5d ff ff       	call   c000e364 <unlockScheduler()>
c00185f8:	83 c4 10             	add    esp,0x10
c00185fb:	31 d2                	xor    edx,edx
c00185fd:	e9 81 00 00 00       	jmp    c0018683 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018602:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018606:	51                   	push   ecx
c0018607:	51                   	push   ecx
c0018608:	6a 01                	push   0x1
c001860a:	53                   	push   ebx
c001860b:	e8 f2 a2 ff ff       	call   c0012902 <File::open(FileOpenMode)>
c0018610:	83 c4 10             	add    esp,0x10
c0018613:	85 c0                	test   eax,eax
c0018615:	74 1b                	je     c0018632 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018617:	83 ec 0c             	sub    esp,0xc
c001861a:	68 fa a3 03 c0       	push   0xc003a3fa
c001861f:	e8 ba 49 ff ff       	call   c000cfde <panic(char const*)>
c0018624:	e8 3b 5d ff ff       	call   c000e364 <unlockScheduler()>
c0018629:	83 c4 10             	add    esp,0x10
c001862c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018630:	eb 51                	jmp    c0018683 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018632:	83 ec 0c             	sub    esp,0xc
c0018635:	0f b7 ff             	movzx  edi,di
c0018638:	6a 07                	push   0x7
c001863a:	0f b7 f6             	movzx  esi,si
c001863d:	68 00 01 00 00       	push   0x100
c0018642:	6a 00                	push   0x0
c0018644:	6a 00                	push   0x0
c0018646:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001864c:	e8 b1 95 ff ff       	call   c0011c02 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018651:	83 c4 18             	add    esp,0x18
c0018654:	57                   	push   edi
c0018655:	56                   	push   esi
c0018656:	e8 e6 fe ff ff       	call   c0018541 <realToLinear(unsigned short, unsigned short)>
c001865b:	5a                   	pop    edx
c001865c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001865e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018662:	51                   	push   ecx
c0018663:	50                   	push   eax
c0018664:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018668:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001866c:	53                   	push   ebx
c001866d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018670:	83 c4 14             	add    esp,0x14
c0018673:	53                   	push   ebx
c0018674:	e8 e7 a2 ff ff       	call   c0012960 <File::close()>
c0018679:	e8 e6 5c ff ff       	call   c000e364 <unlockScheduler()>
c001867e:	83 c4 10             	add    esp,0x10
c0018681:	b2 01                	mov    dl,0x1
c0018683:	83 c4 2c             	add    esp,0x2c
c0018686:	88 d0                	mov    al,dl
c0018688:	5b                   	pop    ebx
c0018689:	5e                   	pop    esi
c001868a:	5f                   	pop    edi
c001868b:	5d                   	pop    ebp
c001868c:	c3                   	ret    

c001868d <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001868d:	57                   	push   edi
c001868e:	56                   	push   esi
c001868f:	53                   	push   ebx
c0018690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018694:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018698:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001869c:	83 e8 06             	sub    eax,0x6
c001869f:	0f b7 c0             	movzx  eax,ax
c00186a2:	50                   	push   eax
c00186a3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00186a8:	50                   	push   eax
c00186a9:	e8 93 fe ff ff       	call   c0018541 <realToLinear(unsigned short, unsigned short)>
c00186ae:	5a                   	pop    edx
c00186af:	5e                   	pop    esi
c00186b0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00186b3:	8d 56 fa             	lea    edx,[esi-0x6]
c00186b6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00186bc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00186bf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00186c2:	83 c2 02             	add    edx,0x2
c00186c5:	66 89 10             	mov    WORD PTR [eax],dx
c00186c8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00186cb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00186cf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00186d2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00186d6:	89 d6                	mov    esi,edx
c00186d8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00186de:	66 81 e6 ff fd       	and    si,0xfdff
c00186e3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00186e7:	74 07                	je     c00186f0 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00186e9:	89 d6                	mov    esi,edx
c00186eb:	66 81 ce 00 02       	or     si,0x200
c00186f0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00186f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186f9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00186fd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018705:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018708:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018710:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018713:	5b                   	pop    ebx
c0018714:	5e                   	pop    esi
c0018715:	5f                   	pop    edi
c0018716:	c3                   	ret    

c0018717 <readByteFromReal(unsigned short, unsigned short)>:
c0018717:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001871c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018721:	c1 e0 04             	shl    eax,0x4
c0018724:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018727:	c3                   	ret    

c0018728 <readWordFromReal(unsigned short, unsigned short)>:
c0018728:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001872d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018732:	c1 e0 04             	shl    eax,0x4
c0018735:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018739:	c3                   	ret    

c001873a <readDwordFromReal(unsigned short, unsigned short)>:
c001873a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001873f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018744:	c1 e0 04             	shl    eax,0x4
c0018747:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001874a:	c3                   	ret    

c001874b <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001874b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018750:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018755:	c1 e0 04             	shl    eax,0x4
c0018758:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001875c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001875f:	c3                   	ret    

c0018760 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018760:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018765:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001876a:	c1 e0 04             	shl    eax,0x4
c001876d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018771:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018775:	c3                   	ret    

c0018776 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018776:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001877b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018780:	c1 e0 04             	shl    eax,0x4
c0018783:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018787:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001878a:	c3                   	ret    

c001878b <vm8086FaultHandler(regs*)>:
c001878b:	55                   	push   ebp
c001878c:	57                   	push   edi
c001878d:	56                   	push   esi
c001878e:	53                   	push   ebx
c001878f:	83 ec 1c             	sub    esp,0x1c
c0018792:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018796:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018799:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001879d:	0f b7 f0             	movzx  esi,ax
c00187a0:	52                   	push   edx
c00187a1:	0f b7 c0             	movzx  eax,ax
c00187a4:	50                   	push   eax
c00187a5:	e8 97 fd ff ff       	call   c0018541 <realToLinear(unsigned short, unsigned short)>
c00187aa:	5a                   	pop    edx
c00187ab:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00187ae:	59                   	pop    ecx
c00187af:	89 c7                	mov    edi,eax
c00187b1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00187b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00187bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187c1:	0f b7 c5             	movzx  eax,bp
c00187c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187c8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00187cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187d0:	e8 6c fd ff ff       	call   c0018541 <realToLinear(unsigned short, unsigned short)>
c00187d5:	5a                   	pop    edx
c00187d6:	59                   	pop    ecx
c00187d7:	b1 06                	mov    cl,0x6
c00187d9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00187de:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00187e3:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00187e6:	80 fa 9d             	cmp    dl,0x9d
c00187e9:	0f 84 1d 02 00 00    	je     c0018a0c <vm8086FaultHandler(regs*)+0x281>
c00187ef:	0f 87 8e 00 00 00    	ja     c0018883 <vm8086FaultHandler(regs*)+0xf8>
c00187f5:	80 fa 66             	cmp    dl,0x66
c00187f8:	0f 84 89 01 00 00    	je     c0018987 <vm8086FaultHandler(regs*)+0x1fc>
c00187fe:	77 44                	ja     c0018844 <vm8086FaultHandler(regs*)+0xb9>
c0018800:	80 fa 36             	cmp    dl,0x36
c0018803:	0f 84 74 01 00 00    	je     c001897d <vm8086FaultHandler(regs*)+0x1f2>
c0018809:	77 1a                	ja     c0018825 <vm8086FaultHandler(regs*)+0x9a>
c001880b:	80 fa 26             	cmp    dl,0x26
c001880e:	0f 84 4b 01 00 00    	je     c001895f <vm8086FaultHandler(regs*)+0x1d4>
c0018814:	80 fa 2e             	cmp    dl,0x2e
c0018817:	0f 85 4a 05 00 00    	jne    c0018d67 <vm8086FaultHandler(regs*)+0x5dc>
c001881d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018820:	31 c9                	xor    ecx,ecx
c0018822:	47                   	inc    edi
c0018823:	eb be                	jmp    c00187e3 <vm8086FaultHandler(regs*)+0x58>
c0018825:	80 fa 64             	cmp    dl,0x64
c0018828:	0f 84 3b 01 00 00    	je     c0018969 <vm8086FaultHandler(regs*)+0x1de>
c001882e:	0f 87 3f 01 00 00    	ja     c0018973 <vm8086FaultHandler(regs*)+0x1e8>
c0018834:	80 fa 3e             	cmp    dl,0x3e
c0018837:	0f 85 2a 05 00 00    	jne    c0018d67 <vm8086FaultHandler(regs*)+0x5dc>
c001883d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018840:	b1 01                	mov    cl,0x1
c0018842:	eb de                	jmp    c0018822 <vm8086FaultHandler(regs*)+0x97>
c0018844:	80 fa 6d             	cmp    dl,0x6d
c0018847:	0f 84 bf 02 00 00    	je     c0018b0c <vm8086FaultHandler(regs*)+0x381>
c001884d:	77 17                	ja     c0018866 <vm8086FaultHandler(regs*)+0xdb>
c001884f:	80 fa 67             	cmp    dl,0x67
c0018852:	0f 84 3c 01 00 00    	je     c0018994 <vm8086FaultHandler(regs*)+0x209>
c0018858:	80 fa 6c             	cmp    dl,0x6c
c001885b:	0f 84 5d 02 00 00    	je     c0018abe <vm8086FaultHandler(regs*)+0x333>
c0018861:	e9 01 05 00 00       	jmp    c0018d67 <vm8086FaultHandler(regs*)+0x5dc>
c0018866:	80 fa 6f             	cmp    dl,0x6f
c0018869:	0f 84 8b 03 00 00    	je     c0018bfa <vm8086FaultHandler(regs*)+0x46f>
c001886f:	0f 82 0f 03 00 00    	jb     c0018b84 <vm8086FaultHandler(regs*)+0x3f9>
c0018875:	80 fa 9c             	cmp    dl,0x9c
c0018878:	0f 84 23 01 00 00    	je     c00189a1 <vm8086FaultHandler(regs*)+0x216>
c001887e:	e9 e4 04 00 00       	jmp    c0018d67 <vm8086FaultHandler(regs*)+0x5dc>
c0018883:	80 fa ec             	cmp    dl,0xec
c0018886:	0f 84 7f 04 00 00    	je     c0018d0b <vm8086FaultHandler(regs*)+0x580>
c001888c:	77 7b                	ja     c0018909 <vm8086FaultHandler(regs*)+0x17e>
c001888e:	80 fa e4             	cmp    dl,0xe4
c0018891:	0f 84 fe 03 00 00    	je     c0018c95 <vm8086FaultHandler(regs*)+0x50a>
c0018897:	77 53                	ja     c00188ec <vm8086FaultHandler(regs*)+0x161>
c0018899:	80 fa cd             	cmp    dl,0xcd
c001889c:	0f 84 cd 01 00 00    	je     c0018a6f <vm8086FaultHandler(regs*)+0x2e4>
c00188a2:	80 fa cf             	cmp    dl,0xcf
c00188a5:	0f 85 bc 04 00 00    	jne    c0018d67 <vm8086FaultHandler(regs*)+0x5dc>
c00188ab:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00188ae:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00188b1:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00188b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00188b8:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00188bc:	81 ca 00 02 02 00    	or     edx,0x20200
c00188c2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00188c5:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00188c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188cf:	66 c1 e8 09          	shr    ax,0x9
c00188d3:	83 e0 01             	and    eax,0x1
c00188d6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00188d9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188dc:	83 c0 06             	add    eax,0x6
c00188df:	25 ff ff 00 00       	and    eax,0xffff
c00188e4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00188e7:	e9 77 04 00 00       	jmp    c0018d63 <vm8086FaultHandler(regs*)+0x5d8>
c00188ec:	80 fa e6             	cmp    dl,0xe6
c00188ef:	0f 84 ea 03 00 00    	je     c0018cdf <vm8086FaultHandler(regs*)+0x554>
c00188f5:	0f 82 b6 03 00 00    	jb     c0018cb1 <vm8086FaultHandler(regs*)+0x526>
c00188fb:	80 fa e7             	cmp    dl,0xe7
c00188fe:	0f 84 f2 03 00 00    	je     c0018cf6 <vm8086FaultHandler(regs*)+0x56b>
c0018904:	e9 5e 04 00 00       	jmp    c0018d67 <vm8086FaultHandler(regs*)+0x5dc>
c0018909:	80 fa ef             	cmp    dl,0xef
c001890c:	0f 84 3c 04 00 00    	je     c0018d4e <vm8086FaultHandler(regs*)+0x5c3>
c0018912:	77 28                	ja     c001893c <vm8086FaultHandler(regs*)+0x1b1>
c0018914:	80 fa ed             	cmp    dl,0xed
c0018917:	0f 84 0a 04 00 00    	je     c0018d27 <vm8086FaultHandler(regs*)+0x59c>
c001891d:	80 fa ee             	cmp    dl,0xee
c0018920:	0f 85 41 04 00 00    	jne    c0018d67 <vm8086FaultHandler(regs*)+0x5dc>
c0018926:	50                   	push   eax
c0018927:	50                   	push   eax
c0018928:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001892c:	50                   	push   eax
c001892d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018931:	50                   	push   eax
c0018932:	e8 00 fc ff ff       	call   c0018537 <outbv(unsigned short, unsigned char)>
c0018937:	e9 0a 04 00 00       	jmp    c0018d46 <vm8086FaultHandler(regs*)+0x5bb>
c001893c:	80 fa fa             	cmp    dl,0xfa
c001893f:	0f 84 5d 01 00 00    	je     c0018aa2 <vm8086FaultHandler(regs*)+0x317>
c0018945:	80 fa fb             	cmp    dl,0xfb
c0018948:	0f 84 62 01 00 00    	je     c0018ab0 <vm8086FaultHandler(regs*)+0x325>
c001894e:	80 fa f3             	cmp    dl,0xf3
c0018951:	0f 85 10 04 00 00    	jne    c0018d67 <vm8086FaultHandler(regs*)+0x5dc>
c0018957:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001895a:	e9 c3 fe ff ff       	jmp    c0018822 <vm8086FaultHandler(regs*)+0x97>
c001895f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018962:	b1 02                	mov    cl,0x2
c0018964:	e9 b9 fe ff ff       	jmp    c0018822 <vm8086FaultHandler(regs*)+0x97>
c0018969:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001896c:	b1 03                	mov    cl,0x3
c001896e:	e9 af fe ff ff       	jmp    c0018822 <vm8086FaultHandler(regs*)+0x97>
c0018973:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018976:	b1 04                	mov    cl,0x4
c0018978:	e9 a5 fe ff ff       	jmp    c0018822 <vm8086FaultHandler(regs*)+0x97>
c001897d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018980:	b1 05                	mov    cl,0x5
c0018982:	e9 9b fe ff ff       	jmp    c0018822 <vm8086FaultHandler(regs*)+0x97>
c0018987:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001898a:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001898f:	e9 8e fe ff ff       	jmp    c0018822 <vm8086FaultHandler(regs*)+0x97>
c0018994:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018997:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001899c:	e9 81 fe ff ff       	jmp    c0018822 <vm8086FaultHandler(regs*)+0x97>
c00189a1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00189a4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189a8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189ad:	74 30                	je     c00189df <vm8086FaultHandler(regs*)+0x254>
c00189af:	83 e9 04             	sub    ecx,0x4
c00189b2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00189b8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00189be:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00189c1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00189c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00189ca:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00189ce:	0f 84 8c 03 00 00    	je     c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c00189d4:	80 ce 02             	or     dh,0x2
c00189d7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00189da:	e9 81 03 00 00       	jmp    c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c00189df:	83 e9 02             	sub    ecx,0x2
c00189e2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00189e8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00189eb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00189ef:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00189f5:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00189f9:	74 05                	je     c0018a00 <vm8086FaultHandler(regs*)+0x275>
c00189fb:	80 ce 02             	or     dh,0x2
c00189fe:	eb 03                	jmp    c0018a03 <vm8086FaultHandler(regs*)+0x278>
c0018a00:	80 e6 fd             	and    dh,0xfd
c0018a03:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018a07:	e9 54 03 00 00       	jmp    c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c0018a0c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a11:	74 2a                	je     c0018a3d <vm8086FaultHandler(regs*)+0x2b2>
c0018a13:	8b 10                	mov    edx,DWORD PTR [eax]
c0018a15:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018a1b:	81 ca 00 02 02 00    	or     edx,0x20200
c0018a21:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018a24:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a26:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018a2c:	c1 e8 09             	shr    eax,0x9
c0018a2f:	83 e0 01             	and    eax,0x1
c0018a32:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018a35:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018a38:	83 c0 04             	add    eax,0x4
c0018a3b:	eb 25                	jmp    c0018a62 <vm8086FaultHandler(regs*)+0x2d7>
c0018a3d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018a40:	81 ca 00 02 02 00    	or     edx,0x20200
c0018a46:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018a49:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018a4c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018a52:	66 c1 e8 09          	shr    ax,0x9
c0018a56:	83 e0 01             	and    eax,0x1
c0018a59:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018a5c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018a5f:	83 c0 02             	add    eax,0x2
c0018a62:	25 ff ff 00 00       	and    eax,0xffff
c0018a67:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018a6a:	e9 f1 02 00 00       	jmp    c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c0018a6f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018a73:	3c ff                	cmp    al,0xff
c0018a75:	75 10                	jne    c0018a87 <vm8086FaultHandler(regs*)+0x2fc>
c0018a77:	83 ec 0c             	sub    esp,0xc
c0018a7a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018a7d:	e8 e0 64 ff ff       	call   c000ef62 <terminateTask(int)>
c0018a82:	e9 c2 02 00 00       	jmp    c0018d49 <vm8086FaultHandler(regs*)+0x5be>
c0018a87:	83 ec 0c             	sub    esp,0xc
c0018a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a92:	57                   	push   edi
c0018a93:	50                   	push   eax
c0018a94:	53                   	push   ebx
c0018a95:	e8 f3 fb ff ff       	call   c001868d <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018a9a:	83 c4 20             	add    esp,0x20
c0018a9d:	e9 c1 02 00 00       	jmp    c0018d63 <vm8086FaultHandler(regs*)+0x5d8>
c0018aa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018aa7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018aab:	e9 b0 02 00 00       	jmp    c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c0018ab0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ab5:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018ab9:	e9 a2 02 00 00       	jmp    c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c0018abe:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018ac3:	74 0d                	je     c0018ad2 <vm8086FaultHandler(regs*)+0x347>
c0018ac5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018acc:	0f 87 e9 02 00 00    	ja     c0018dbb <vm8086FaultHandler(regs*)+0x630>
c0018ad2:	83 ec 0c             	sub    esp,0xc
c0018ad5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018ad8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018adc:	50                   	push   eax
c0018add:	e8 4f fa ff ff       	call   c0018531 <inbv(unsigned short)>
c0018ae2:	83 c4 0c             	add    esp,0xc
c0018ae5:	0f b6 c0             	movzx  eax,al
c0018ae8:	0f b7 c9             	movzx  ecx,cx
c0018aeb:	50                   	push   eax
c0018aec:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018af0:	50                   	push   eax
c0018af1:	51                   	push   ecx
c0018af2:	e8 54 fc ff ff       	call   c001874b <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018af7:	83 c4 10             	add    esp,0x10
c0018afa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018afd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b01:	74 03                	je     c0018b06 <vm8086FaultHandler(regs*)+0x37b>
c0018b03:	48                   	dec    eax
c0018b04:	eb 01                	jmp    c0018b07 <vm8086FaultHandler(regs*)+0x37c>
c0018b06:	40                   	inc    eax
c0018b07:	0f b7 c0             	movzx  eax,ax
c0018b0a:	eb 70                	jmp    c0018b7c <vm8086FaultHandler(regs*)+0x3f1>
c0018b0c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018b0f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018b12:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b17:	74 0c                	je     c0018b25 <vm8086FaultHandler(regs*)+0x39a>
c0018b19:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018b1f:	0f 87 96 02 00 00    	ja     c0018dbb <vm8086FaultHandler(regs*)+0x630>
c0018b25:	0f b7 c9             	movzx  ecx,cx
c0018b28:	0f b7 f6             	movzx  esi,si
c0018b2b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018b2e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b33:	74 20                	je     c0018b55 <vm8086FaultHandler(regs*)+0x3ca>
c0018b35:	ed                   	in     eax,dx
c0018b36:	55                   	push   ebp
c0018b37:	50                   	push   eax
c0018b38:	51                   	push   ecx
c0018b39:	56                   	push   esi
c0018b3a:	e8 37 fc ff ff       	call   c0018776 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018b3f:	83 c4 10             	add    esp,0x10
c0018b42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b45:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b49:	74 05                	je     c0018b50 <vm8086FaultHandler(regs*)+0x3c5>
c0018b4b:	83 e8 04             	sub    eax,0x4
c0018b4e:	eb 27                	jmp    c0018b77 <vm8086FaultHandler(regs*)+0x3ec>
c0018b50:	83 c0 04             	add    eax,0x4
c0018b53:	eb 22                	jmp    c0018b77 <vm8086FaultHandler(regs*)+0x3ec>
c0018b55:	66 ed                	in     ax,dx
c0018b57:	0f b7 c0             	movzx  eax,ax
c0018b5a:	57                   	push   edi
c0018b5b:	50                   	push   eax
c0018b5c:	51                   	push   ecx
c0018b5d:	56                   	push   esi
c0018b5e:	e8 fd fb ff ff       	call   c0018760 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018b63:	83 c4 10             	add    esp,0x10
c0018b66:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b69:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b6d:	74 05                	je     c0018b74 <vm8086FaultHandler(regs*)+0x3e9>
c0018b6f:	83 e8 02             	sub    eax,0x2
c0018b72:	eb 03                	jmp    c0018b77 <vm8086FaultHandler(regs*)+0x3ec>
c0018b74:	83 c0 02             	add    eax,0x2
c0018b77:	25 ff ff 00 00       	and    eax,0xffff
c0018b7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018b7f:	e9 dc 01 00 00       	jmp    c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c0018b84:	49                   	dec    ecx
c0018b85:	80 f9 05             	cmp    cl,0x5
c0018b88:	77 24                	ja     c0018bae <vm8086FaultHandler(regs*)+0x423>
c0018b8a:	0f b6 c9             	movzx  ecx,cl
c0018b8d:	ff 24 8d 40 a4 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5bc0]
c0018b94:	0f b7 f5             	movzx  esi,bp
c0018b97:	eb 15                	jmp    c0018bae <vm8086FaultHandler(regs*)+0x423>
c0018b99:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018b9d:	eb 0f                	jmp    c0018bae <vm8086FaultHandler(regs*)+0x423>
c0018b9f:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018ba3:	eb 09                	jmp    c0018bae <vm8086FaultHandler(regs*)+0x423>
c0018ba5:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018ba9:	eb 03                	jmp    c0018bae <vm8086FaultHandler(regs*)+0x423>
c0018bab:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018bae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018bb1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018bb6:	74 0b                	je     c0018bc3 <vm8086FaultHandler(regs*)+0x438>
c0018bb8:	3d ff ff 00 00       	cmp    eax,0xffff
c0018bbd:	0f 87 f8 01 00 00    	ja     c0018dbb <vm8086FaultHandler(regs*)+0x630>
c0018bc3:	0f b7 c0             	movzx  eax,ax
c0018bc6:	52                   	push   edx
c0018bc7:	52                   	push   edx
c0018bc8:	50                   	push   eax
c0018bc9:	56                   	push   esi
c0018bca:	e8 48 fb ff ff       	call   c0018717 <readByteFromReal(unsigned short, unsigned short)>
c0018bcf:	59                   	pop    ecx
c0018bd0:	0f b6 c0             	movzx  eax,al
c0018bd3:	5e                   	pop    esi
c0018bd4:	50                   	push   eax
c0018bd5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018bd9:	50                   	push   eax
c0018bda:	e8 58 f9 ff ff       	call   c0018537 <outbv(unsigned short, unsigned char)>
c0018bdf:	83 c4 10             	add    esp,0x10
c0018be2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018be5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018be9:	74 03                	je     c0018bee <vm8086FaultHandler(regs*)+0x463>
c0018beb:	48                   	dec    eax
c0018bec:	eb 01                	jmp    c0018bef <vm8086FaultHandler(regs*)+0x464>
c0018bee:	40                   	inc    eax
c0018bef:	0f b7 c0             	movzx  eax,ax
c0018bf2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018bf5:	e9 66 01 00 00       	jmp    c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c0018bfa:	49                   	dec    ecx
c0018bfb:	80 f9 05             	cmp    cl,0x5
c0018bfe:	77 1f                	ja     c0018c1f <vm8086FaultHandler(regs*)+0x494>
c0018c00:	0f b6 c9             	movzx  ecx,cl
c0018c03:	ff 24 8d 58 a4 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5ba8]
c0018c0a:	89 ee                	mov    esi,ebp
c0018c0c:	eb 11                	jmp    c0018c1f <vm8086FaultHandler(regs*)+0x494>
c0018c0e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018c11:	eb 0c                	jmp    c0018c1f <vm8086FaultHandler(regs*)+0x494>
c0018c13:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018c16:	eb 07                	jmp    c0018c1f <vm8086FaultHandler(regs*)+0x494>
c0018c18:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018c1b:	eb 02                	jmp    c0018c1f <vm8086FaultHandler(regs*)+0x494>
c0018c1d:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018c1f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018c22:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018c27:	74 0c                	je     c0018c35 <vm8086FaultHandler(regs*)+0x4aa>
c0018c29:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018c2f:	0f 87 86 01 00 00    	ja     c0018dbb <vm8086FaultHandler(regs*)+0x630>
c0018c35:	0f b7 d6             	movzx  edx,si
c0018c38:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018c3b:	0f b7 c1             	movzx  eax,cx
c0018c3e:	81 e7 00 04 00 00    	and    edi,0x400
c0018c44:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018c47:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c4c:	74 1d                	je     c0018c6b <vm8086FaultHandler(regs*)+0x4e0>
c0018c4e:	55                   	push   ebp
c0018c4f:	55                   	push   ebp
c0018c50:	50                   	push   eax
c0018c51:	52                   	push   edx
c0018c52:	e8 e3 fa ff ff       	call   c001873a <readDwordFromReal(unsigned short, unsigned short)>
c0018c57:	83 c4 10             	add    esp,0x10
c0018c5a:	89 f2                	mov    edx,esi
c0018c5c:	ef                   	out    dx,eax
c0018c5d:	85 ff                	test   edi,edi
c0018c5f:	74 05                	je     c0018c66 <vm8086FaultHandler(regs*)+0x4db>
c0018c61:	83 e9 04             	sub    ecx,0x4
c0018c64:	eb 21                	jmp    c0018c87 <vm8086FaultHandler(regs*)+0x4fc>
c0018c66:	83 c1 04             	add    ecx,0x4
c0018c69:	eb 1c                	jmp    c0018c87 <vm8086FaultHandler(regs*)+0x4fc>
c0018c6b:	55                   	push   ebp
c0018c6c:	55                   	push   ebp
c0018c6d:	50                   	push   eax
c0018c6e:	52                   	push   edx
c0018c6f:	e8 b4 fa ff ff       	call   c0018728 <readWordFromReal(unsigned short, unsigned short)>
c0018c74:	83 c4 10             	add    esp,0x10
c0018c77:	89 f2                	mov    edx,esi
c0018c79:	66 ef                	out    dx,ax
c0018c7b:	85 ff                	test   edi,edi
c0018c7d:	74 05                	je     c0018c84 <vm8086FaultHandler(regs*)+0x4f9>
c0018c7f:	83 e9 02             	sub    ecx,0x2
c0018c82:	eb 03                	jmp    c0018c87 <vm8086FaultHandler(regs*)+0x4fc>
c0018c84:	83 c1 02             	add    ecx,0x2
c0018c87:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018c8d:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018c90:	e9 cb 00 00 00       	jmp    c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c0018c95:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018c9c:	83 ec 0c             	sub    esp,0xc
c0018c9f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018ca3:	50                   	push   eax
c0018ca4:	e8 88 f8 ff ff       	call   c0018531 <inbv(unsigned short)>
c0018ca9:	0f b6 c0             	movzx  eax,al
c0018cac:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018caf:	eb 3f                	jmp    c0018cf0 <vm8086FaultHandler(regs*)+0x565>
c0018cb1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018cb6:	74 07                	je     c0018cbf <vm8086FaultHandler(regs*)+0x534>
c0018cb8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018cbc:	ed                   	in     eax,dx
c0018cbd:	eb 14                	jmp    c0018cd3 <vm8086FaultHandler(regs*)+0x548>
c0018cbf:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018cc2:	66 31 c9             	xor    cx,cx
c0018cc5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018cc8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018ccc:	66 ed                	in     ax,dx
c0018cce:	0f b7 c0             	movzx  eax,ax
c0018cd1:	09 c8                	or     eax,ecx
c0018cd3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018cd6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018cda:	e9 84 00 00 00       	jmp    c0018d63 <vm8086FaultHandler(regs*)+0x5d8>
c0018cdf:	52                   	push   edx
c0018ce0:	52                   	push   edx
c0018ce1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018ce5:	50                   	push   eax
c0018ce6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018cea:	50                   	push   eax
c0018ceb:	e8 47 f8 ff ff       	call   c0018537 <outbv(unsigned short, unsigned char)>
c0018cf0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018cf4:	eb 53                	jmp    c0018d49 <vm8086FaultHandler(regs*)+0x5be>
c0018cf6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018cf9:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018cfd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d02:	74 03                	je     c0018d07 <vm8086FaultHandler(regs*)+0x57c>
c0018d04:	ef                   	out    dx,eax
c0018d05:	eb cf                	jmp    c0018cd6 <vm8086FaultHandler(regs*)+0x54b>
c0018d07:	66 ef                	out    dx,ax
c0018d09:	eb cb                	jmp    c0018cd6 <vm8086FaultHandler(regs*)+0x54b>
c0018d0b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018d12:	83 ec 0c             	sub    esp,0xc
c0018d15:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018d19:	50                   	push   eax
c0018d1a:	e8 12 f8 ff ff       	call   c0018531 <inbv(unsigned short)>
c0018d1f:	0f b6 c0             	movzx  eax,al
c0018d22:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018d25:	eb 1f                	jmp    c0018d46 <vm8086FaultHandler(regs*)+0x5bb>
c0018d27:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018d2a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d2f:	74 03                	je     c0018d34 <vm8086FaultHandler(regs*)+0x5a9>
c0018d31:	ed                   	in     eax,dx
c0018d32:	eb 0d                	jmp    c0018d41 <vm8086FaultHandler(regs*)+0x5b6>
c0018d34:	66 ed                	in     ax,dx
c0018d36:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018d39:	0f b7 c0             	movzx  eax,ax
c0018d3c:	66 31 d2             	xor    dx,dx
c0018d3f:	09 d0                	or     eax,edx
c0018d41:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018d44:	eb 1a                	jmp    c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c0018d46:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d49:	83 c4 10             	add    esp,0x10
c0018d4c:	eb 15                	jmp    c0018d63 <vm8086FaultHandler(regs*)+0x5d8>
c0018d4e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018d51:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018d54:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d59:	74 03                	je     c0018d5e <vm8086FaultHandler(regs*)+0x5d3>
c0018d5b:	ef                   	out    dx,eax
c0018d5c:	eb 02                	jmp    c0018d60 <vm8086FaultHandler(regs*)+0x5d5>
c0018d5e:	66 ef                	out    dx,ax
c0018d60:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d63:	b0 01                	mov    al,0x1
c0018d65:	eb 56                	jmp    c0018dbd <vm8086FaultHandler(regs*)+0x632>
c0018d67:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018d6b:	50                   	push   eax
c0018d6c:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018d70:	50                   	push   eax
c0018d71:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018d75:	50                   	push   eax
c0018d76:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018d7a:	50                   	push   eax
c0018d7b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018d7f:	50                   	push   eax
c0018d80:	52                   	push   edx
c0018d81:	52                   	push   edx
c0018d82:	68 13 a4 03 c0       	push   0xc003a413
c0018d87:	e8 34 41 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0018d8c:	83 c4 20             	add    esp,0x20
c0018d8f:	83 ec 0c             	sub    esp,0xc
c0018d92:	6a 60                	push   0x60
c0018d94:	e8 98 f7 ff ff       	call   c0018531 <inbv(unsigned short)>
c0018d99:	83 c4 10             	add    esp,0x10
c0018d9c:	3c 1c                	cmp    al,0x1c
c0018d9e:	74 04                	je     c0018da4 <vm8086FaultHandler(regs*)+0x619>
c0018da0:	3c 5a                	cmp    al,0x5a
c0018da2:	75 eb                	jne    c0018d8f <vm8086FaultHandler(regs*)+0x604>
c0018da4:	3c 5a                	cmp    al,0x5a
c0018da6:	74 04                	je     c0018dac <vm8086FaultHandler(regs*)+0x621>
c0018da8:	3c 1c                	cmp    al,0x1c
c0018daa:	75 0f                	jne    c0018dbb <vm8086FaultHandler(regs*)+0x630>
c0018dac:	83 ec 0c             	sub    esp,0xc
c0018daf:	6a 60                	push   0x60
c0018db1:	e8 7b f7 ff ff       	call   c0018531 <inbv(unsigned short)>
c0018db6:	83 c4 10             	add    esp,0x10
c0018db9:	eb e9                	jmp    c0018da4 <vm8086FaultHandler(regs*)+0x619>
c0018dbb:	31 c0                	xor    eax,eax
c0018dbd:	83 c4 1c             	add    esp,0x1c
c0018dc0:	5b                   	pop    ebx
c0018dc1:	5e                   	pop    esi
c0018dc2:	5f                   	pop    edi
c0018dc3:	5d                   	pop    ebp
c0018dc4:	c3                   	ret    
c0018dc5:	90                   	nop

c0018dc6 <FAT::getName()>:
c0018dc6:	b8 70 a4 03 c0       	mov    eax,0xc003a470
c0018dcb:	c3                   	ret    

c0018dcc <FAT::tell(void*, unsigned long long*)>:
c0018dcc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018dd1:	75 06                	jne    c0018dd9 <FAT::tell(void*, unsigned long long*)+0xd>
c0018dd3:	b8 04 00 00 00       	mov    eax,0x4
c0018dd8:	c3                   	ret    
c0018dd9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018dde:	75 06                	jne    c0018de6 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018de0:	b8 04 00 00 00       	mov    eax,0x4
c0018de5:	c3                   	ret    
c0018de6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dea:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018ded:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018df0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018df4:	89 01                	mov    DWORD PTR [ecx],eax
c0018df6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018df9:	b8 00 00 00 00       	mov    eax,0x0
c0018dfe:	c3                   	ret    
c0018dff:	90                   	nop

c0018e00 <FAT::stat(void*, unsigned long long*)>:
c0018e00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e05:	75 06                	jne    c0018e0d <FAT::stat(void*, unsigned long long*)+0xd>
c0018e07:	b8 04 00 00 00       	mov    eax,0x4
c0018e0c:	c3                   	ret    
c0018e0d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e12:	75 06                	jne    c0018e1a <FAT::stat(void*, unsigned long long*)+0x1a>
c0018e14:	b8 04 00 00 00       	mov    eax,0x4
c0018e19:	c3                   	ret    
c0018e1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e1e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018e21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018e24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e28:	89 01                	mov    DWORD PTR [ecx],eax
c0018e2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e2d:	b8 00 00 00 00       	mov    eax,0x0
c0018e32:	c3                   	ret    
c0018e33:	90                   	nop

c0018e34 <FAT::exists(char const*)>:
c0018e34:	b0 00                	mov    al,0x0
c0018e36:	c3                   	ret    
c0018e37:	90                   	nop

c0018e38 <FAT::~FAT()>:
c0018e38:	83 ec 0c             	sub    esp,0xc
c0018e3b:	ba f4 a4 03 c0       	mov    edx,0xc003a4f4
c0018e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e44:	89 10                	mov    DWORD PTR [eax],edx
c0018e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e4a:	83 ec 0c             	sub    esp,0xc
c0018e4d:	50                   	push   eax
c0018e4e:	e8 45 98 ff ff       	call   c0012698 <Filesystem::~Filesystem()>
c0018e53:	83 c4 10             	add    esp,0x10
c0018e56:	90                   	nop
c0018e57:	83 c4 0c             	add    esp,0xc
c0018e5a:	c3                   	ret    
c0018e5b:	90                   	nop

c0018e5c <FAT::~FAT()>:
c0018e5c:	83 ec 0c             	sub    esp,0xc
c0018e5f:	83 ec 0c             	sub    esp,0xc
c0018e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e66:	e8 cd ff ff ff       	call   c0018e38 <FAT::~FAT()>
c0018e6b:	83 c4 10             	add    esp,0x10
c0018e6e:	83 ec 08             	sub    esp,0x8
c0018e71:	6a 08                	push   0x8
c0018e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e77:	e8 03 96 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	83 c4 0c             	add    esp,0xc
c0018e82:	c3                   	ret    
c0018e83:	90                   	nop

c0018e84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018e84:	83 ec 1c             	sub    esp,0x1c
c0018e87:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018e8e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018e93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e97:	8b 04 85 c0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3840]
c0018e9e:	83 f8 ff             	cmp    eax,0xffffffff
c0018ea1:	75 34                	jne    c0018ed7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018ea3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ea7:	88 c2                	mov    dl,al
c0018ea9:	a1 a0 c7 03 c0       	mov    eax,ds:0xc003c7a0
c0018eae:	01 d0                	add    eax,edx
c0018eb0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018eb4:	8b 15 a0 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c7a0
c0018eba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ebe:	89 14 85 c0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3840],edx
c0018ec5:	a1 a0 c7 03 c0       	mov    eax,ds:0xc003c7a0
c0018eca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ece:	89 14 85 40 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37c0],edx
c0018ed5:	eb 17                	jmp    c0018eee <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018ed7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018edb:	88 c2                	mov    dl,al
c0018edd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ee1:	8b 04 85 c0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3840]
c0018ee8:	01 d0                	add    eax,edx
c0018eea:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018eee:	83 ec 04             	sub    esp,0x4
c0018ef1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ef5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ef9:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018efd:	50                   	push   eax
c0018efe:	e8 52 de fe ff       	call   c0006d55 <f_getlabel>
c0018f03:	83 c4 10             	add    esp,0x10
c0018f06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f0a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f0f:	75 07                	jne    c0018f18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018f11:	b8 00 00 00 00       	mov    eax,0x0
c0018f16:	eb 05                	jmp    c0018f1d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018f18:	b8 01 00 00 00       	mov    eax,0x1
c0018f1d:	83 c4 1c             	add    esp,0x1c
c0018f20:	c3                   	ret    
c0018f21:	90                   	nop

c0018f22 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018f22:	57                   	push   edi
c0018f23:	83 ec 58             	sub    esp,0x58
c0018f26:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018f2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f32:	b9 0f 00 00 00       	mov    ecx,0xf
c0018f37:	b8 00 00 00 00       	mov    eax,0x0
c0018f3c:	fc                   	cld    
c0018f3d:	89 d7                	mov    edi,edx
c0018f3f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018f41:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f45:	8b 04 85 c0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3840]
c0018f4c:	83 f8 ff             	cmp    eax,0xffffffff
c0018f4f:	75 34                	jne    c0018f85 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018f51:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018f55:	88 c2                	mov    dl,al
c0018f57:	a1 a0 c7 03 c0       	mov    eax,ds:0xc003c7a0
c0018f5c:	01 d0                	add    eax,edx
c0018f5e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f62:	8b 15 a0 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c7a0
c0018f68:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f6c:	89 14 85 c0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3840],edx
c0018f73:	a1 a0 c7 03 c0       	mov    eax,ds:0xc003c7a0
c0018f78:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018f7c:	89 14 85 40 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37c0],edx
c0018f83:	eb 17                	jmp    c0018f9c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018f85:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018f89:	88 c2                	mov    dl,al
c0018f8b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f8f:	8b 04 85 c0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3840]
c0018f96:	01 d0                	add    eax,edx
c0018f98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f9c:	83 ec 08             	sub    esp,0x8
c0018f9f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018fa3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fa7:	50                   	push   eax
c0018fa8:	e8 67 79 fe ff       	call   c0000914 <strcat>
c0018fad:	83 c4 10             	add    esp,0x10
c0018fb0:	83 ec 0c             	sub    esp,0xc
c0018fb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fb7:	50                   	push   eax
c0018fb8:	e8 86 df fe ff       	call   c0006f43 <f_setlabel>
c0018fbd:	83 c4 10             	add    esp,0x10
c0018fc0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018fc4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018fc9:	75 07                	jne    c0018fd2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018fcb:	b8 00 00 00 00       	mov    eax,0x0
c0018fd0:	eb 05                	jmp    c0018fd7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018fd2:	b8 01 00 00 00       	mov    eax,0x1
c0018fd7:	83 c4 58             	add    esp,0x58
c0018fda:	5f                   	pop    edi
c0018fdb:	c3                   	ret    

c0018fdc <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018fdc:	83 ec 2c             	sub    esp,0x2c
c0018fdf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018fe7:	83 ec 08             	sub    esp,0x8
c0018fea:	68 94 a4 03 c0       	push   0xc003a494
c0018fef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ff3:	e8 55 78 fe ff       	call   c000084d <strcmp>
c0018ff8:	83 c4 10             	add    esp,0x10
c0018ffb:	85 c0                	test   eax,eax
c0018ffd:	0f 94 c0             	sete   al
c0019000:	84 c0                	test   al,al
c0019002:	74 0d                	je     c0019011 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019004:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001900c:	e9 a6 00 00 00       	jmp    c00190b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019011:	83 ec 08             	sub    esp,0x8
c0019014:	68 86 a4 03 c0       	push   0xc003a486
c0019019:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001901d:	e8 2b 78 fe ff       	call   c000084d <strcmp>
c0019022:	83 c4 10             	add    esp,0x10
c0019025:	85 c0                	test   eax,eax
c0019027:	0f 94 c0             	sete   al
c001902a:	84 c0                	test   al,al
c001902c:	74 0a                	je     c0019038 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001902e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019036:	eb 7f                	jmp    c00190b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019038:	83 ec 08             	sub    esp,0x8
c001903b:	68 8c a4 03 c0       	push   0xc003a48c
c0019040:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019044:	e8 04 78 fe ff       	call   c000084d <strcmp>
c0019049:	83 c4 10             	add    esp,0x10
c001904c:	85 c0                	test   eax,eax
c001904e:	0f 94 c0             	sete   al
c0019051:	84 c0                	test   al,al
c0019053:	74 0a                	je     c001905f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019055:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001905d:	eb 58                	jmp    c00190b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001905f:	83 ec 08             	sub    esp,0x8
c0019062:	68 ac f7 01 c0       	push   0xc001f7ac
c0019067:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001906b:	e8 dd 77 fe ff       	call   c000084d <strcmp>
c0019070:	83 c4 10             	add    esp,0x10
c0019073:	85 c0                	test   eax,eax
c0019075:	0f 94 c0             	sete   al
c0019078:	84 c0                	test   al,al
c001907a:	74 0a                	je     c0019086 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001907c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019084:	eb 31                	jmp    c00190b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019086:	83 ec 08             	sub    esp,0x8
c0019089:	68 92 a4 03 c0       	push   0xc003a492
c001908e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019092:	e8 b6 77 fe ff       	call   c000084d <strcmp>
c0019097:	83 c4 10             	add    esp,0x10
c001909a:	85 c0                	test   eax,eax
c001909c:	0f 94 c0             	sete   al
c001909f:	84 c0                	test   al,al
c00190a1:	74 0a                	je     c00190ad <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00190a3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00190ab:	eb 0a                	jmp    c00190b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00190ad:	b8 08 00 00 00       	mov    eax,0x8
c00190b2:	e9 04 01 00 00       	jmp    c00191bb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00190b7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00190be:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00190c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190c7:	8b 04 85 c0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3840]
c00190ce:	83 f8 ff             	cmp    eax,0xffffffff
c00190d1:	75 34                	jne    c0019107 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00190d3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00190d7:	88 c2                	mov    dl,al
c00190d9:	a1 a0 c7 03 c0       	mov    eax,ds:0xc003c7a0
c00190de:	01 d0                	add    eax,edx
c00190e0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00190e4:	8b 15 a0 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c7a0
c00190ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190ee:	89 14 85 c0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3840],edx
c00190f5:	a1 a0 c7 03 c0       	mov    eax,ds:0xc003c7a0
c00190fa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00190fe:	89 14 85 40 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37c0],edx
c0019105:	eb 17                	jmp    c001911e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019107:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001910b:	88 c2                	mov    dl,al
c001910d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019111:	8b 04 85 c0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3840]
c0019118:	01 d0                	add    eax,edx
c001911a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001911e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019122:	88 04 24             	mov    BYTE PTR [esp],al
c0019125:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001912d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019135:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001913a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019142:	83 ec 0c             	sub    esp,0xc
c0019145:	68 00 20 00 00       	push   0x2000
c001914a:	e8 6c 43 ff ff       	call   c000d4bb <malloc>
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019156:	68 00 20 00 00       	push   0x2000
c001915b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001915f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019163:	50                   	push   eax
c0019164:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019168:	50                   	push   eax
c0019169:	e8 20 e2 fe ff       	call   c000738e <f_mkfs>
c001916e:	83 c4 10             	add    esp,0x10
c0019171:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019175:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001917a:	75 07                	jne    c0019183 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001917c:	b8 00 00 00 00       	mov    eax,0x0
c0019181:	eb 38                	jmp    c00191bb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019183:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019188:	75 17                	jne    c00191a1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001918a:	83 ec 0c             	sub    esp,0xc
c001918d:	68 c4 a4 03 c0       	push   0xc003a4c4
c0019192:	e8 29 3d ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	b8 09 00 00 00       	mov    eax,0x9
c001919f:	eb 1a                	jmp    c00191bb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00191a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191a5:	83 ec 08             	sub    esp,0x8
c00191a8:	50                   	push   eax
c00191a9:	68 98 a4 03 c0       	push   0xc003a498
c00191ae:	e8 0d 3d ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c00191b3:	83 c4 10             	add    esp,0x10
c00191b6:	b8 01 00 00 00       	mov    eax,0x1
c00191bb:	83 c4 2c             	add    esp,0x2c
c00191be:	c3                   	ret    
c00191bf:	90                   	nop

c00191c0 <FAT::tryMount(LogicalDisk*, int)>:
c00191c0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00191c6:	a1 a0 c7 03 c0       	mov    eax,ds:0xc003c7a0
c00191cb:	83 f8 14             	cmp    eax,0x14
c00191ce:	75 17                	jne    c00191e7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00191d0:	83 ec 0c             	sub    esp,0xc
c00191d3:	68 aa a4 03 c0       	push   0xc003a4aa
c00191d8:	e8 01 3e ff ff       	call   c000cfde <panic(char const*)>
c00191dd:	83 c4 10             	add    esp,0x10
c00191e0:	b0 00                	mov    al,0x0
c00191e2:	e9 d7 01 00 00       	jmp    c00193be <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00191e7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00191ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00191f4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00191fa:	3d 00 02 00 00       	cmp    eax,0x200
c00191ff:	74 07                	je     c0019208 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019201:	b0 00                	mov    al,0x0
c0019203:	e9 b6 01 00 00       	jmp    c00193be <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019208:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019210:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019217:	8b 04 85 c0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3840]
c001921e:	83 f8 ff             	cmp    eax,0xffffffff
c0019221:	74 07                	je     c001922a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019223:	b0 01                	mov    al,0x1
c0019225:	e9 94 01 00 00       	jmp    c00193be <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001922a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019234:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001923c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019243:	88 c2                	mov    dl,al
c0019245:	a1 a0 c7 03 c0       	mov    eax,ds:0xc003c7a0
c001924a:	01 d0                	add    eax,edx
c001924c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019253:	8b 15 a0 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c7a0
c0019259:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019260:	89 14 85 c0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3840],edx
c0019267:	a1 a0 c7 03 c0       	mov    eax,ds:0xc003c7a0
c001926c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019273:	89 14 85 40 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37c0],edx
c001927a:	83 ec 0c             	sub    esp,0xc
c001927d:	68 54 02 00 00       	push   0x254
c0019282:	e8 34 42 ff ff       	call   c000d4bb <malloc>
c0019287:	83 c4 10             	add    esp,0x10
c001928a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019291:	83 ec 04             	sub    esp,0x4
c0019294:	6a 00                	push   0x0
c0019296:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001929d:	50                   	push   eax
c001929e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192a5:	e8 a2 bc fe ff       	call   c0004f4c <f_mount>
c00192aa:	83 c4 10             	add    esp,0x10
c00192ad:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00192b4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00192bc:	74 19                	je     c00192d7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00192be:	83 ec 0c             	sub    esp,0xc
c00192c1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192c8:	e8 0e 42 ff ff       	call   c000d4db <rfree>
c00192cd:	83 c4 10             	add    esp,0x10
c00192d0:	b0 00                	mov    al,0x0
c00192d2:	e9 e7 00 00 00       	jmp    c00193be <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00192d7:	83 ec 04             	sub    esp,0x4
c00192da:	68 00 01 00 00       	push   0x100
c00192df:	6a 00                	push   0x0
c00192e1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00192e8:	50                   	push   eax
c00192e9:	e8 bd 73 fe ff       	call   c00006ab <memset>
c00192ee:	83 c4 10             	add    esp,0x10
c00192f1:	83 ec 08             	sub    esp,0x8
c00192f4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00192fb:	50                   	push   eax
c00192fc:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019303:	50                   	push   eax
c0019304:	e8 0b 76 fe ff       	call   c0000914 <strcat>
c0019309:	83 c4 10             	add    esp,0x10
c001930c:	83 ec 08             	sub    esp,0x8
c001930f:	68 b8 a4 03 c0       	push   0xc003a4b8
c0019314:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001931b:	50                   	push   eax
c001931c:	e8 f3 75 fe ff       	call   c0000914 <strcat>
c0019321:	83 c4 10             	add    esp,0x10
c0019324:	83 ec 04             	sub    esp,0x4
c0019327:	6a 01                	push   0x1
c0019329:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019330:	50                   	push   eax
c0019331:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019335:	50                   	push   eax
c0019336:	e8 73 bc fe ff       	call   c0004fae <f_open>
c001933b:	83 c4 10             	add    esp,0x10
c001933e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019345:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001934c:	85 c0                	test   eax,eax
c001934e:	74 0a                	je     c001935a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019350:	78 2d                	js     c001937f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019352:	83 e8 04             	sub    eax,0x4
c0019355:	83 f8 01             	cmp    eax,0x1
c0019358:	77 25                	ja     c001937f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001935a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019362:	83 ec 0c             	sub    esp,0xc
c0019365:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019369:	50                   	push   eax
c001936a:	e8 91 c7 fe ff       	call   c0005b00 <f_close>
c001936f:	83 c4 10             	add    esp,0x10
c0019372:	90                   	nop
c0019373:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001937b:	74 3a                	je     c00193b7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001937d:	eb 2d                	jmp    c00193ac <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001937f:	83 ec 0c             	sub    esp,0xc
c0019382:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019389:	e8 4d 41 ff ff       	call   c000d4db <rfree>
c001938e:	83 c4 10             	add    esp,0x10
c0019391:	83 ec 04             	sub    esp,0x4
c0019394:	6a 00                	push   0x0
c0019396:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001939d:	50                   	push   eax
c001939e:	6a 00                	push   0x0
c00193a0:	e8 a7 bb fe ff       	call   c0004f4c <f_mount>
c00193a5:	83 c4 10             	add    esp,0x10
c00193a8:	b0 00                	mov    al,0x0
c00193aa:	eb 12                	jmp    c00193be <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00193ac:	a1 a0 c7 03 c0       	mov    eax,ds:0xc003c7a0
c00193b1:	40                   	inc    eax
c00193b2:	a3 a0 c7 03 c0       	mov    ds:0xc003c7a0,eax
c00193b7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00193be:	81 c4 6c 03 00 00    	add    esp,0x36c
c00193c4:	c3                   	ret    
c00193c5:	90                   	nop

c00193c6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00193c6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00193cc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00193d4:	74 0a                	je     c00193e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00193d6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00193de:	75 0a                	jne    c00193ea <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00193e0:	b8 04 00 00 00       	mov    eax,0x4
c00193e5:	e9 dc 00 00 00       	jmp    c00194c6 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00193ea:	83 ec 08             	sub    esp,0x8
c00193ed:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00193f4:	50                   	push   eax
c00193f5:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00193fc:	e8 09 cd fe ff       	call   c000610a <f_readdir>
c0019401:	83 c4 10             	add    esp,0x10
c0019404:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001940b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019412:	83 ec 0c             	sub    esp,0xc
c0019415:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001941c:	83 c0 1a             	add    eax,0x1a
c001941f:	50                   	push   eax
c0019420:	e8 af 72 fe ff       	call   c00006d4 <strlen>
c0019425:	83 c4 10             	add    esp,0x10
c0019428:	ba 00 00 00 00       	mov    edx,0x0
c001942d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019431:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019435:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001943c:	0f b6 c0             	movzx  eax,al
c001943f:	83 e0 10             	and    eax,0x10
c0019442:	74 07                	je     c001944b <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c0019444:	b8 02 00 00 00       	mov    eax,0x2
c0019449:	eb 05                	jmp    c0019450 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c001944b:	b8 01 00 00 00       	mov    eax,0x1
c0019450:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019454:	83 ec 08             	sub    esp,0x8
c0019457:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001945e:	83 c0 1a             	add    eax,0x1a
c0019461:	50                   	push   eax
c0019462:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019466:	83 c0 10             	add    eax,0x10
c0019469:	50                   	push   eax
c001946a:	e8 58 73 fe ff       	call   c00007c7 <strcpy>
c001946f:	83 c4 10             	add    esp,0x10
c0019472:	83 ec 04             	sub    esp,0x4
c0019475:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001947c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019480:	50                   	push   eax
c0019481:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019488:	e8 a7 71 fe ff       	call   c0000634 <memcpy>
c001948d:	83 c4 10             	add    esp,0x10
c0019490:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019497:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001949d:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00194a4:	84 c0                	test   al,al
c00194a6:	75 07                	jne    c00194af <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c00194a8:	b8 07 00 00 00       	mov    eax,0x7
c00194ad:	eb 17                	jmp    c00194c6 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00194af:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00194b6:	85 c0                	test   eax,eax
c00194b8:	75 07                	jne    c00194c1 <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c00194ba:	b8 00 00 00 00       	mov    eax,0x0
c00194bf:	eb 05                	jmp    c00194c6 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00194c1:	b8 01 00 00 00       	mov    eax,0x1
c00194c6:	81 c4 3c 02 00 00    	add    esp,0x23c
c00194cc:	c3                   	ret    
c00194cd:	90                   	nop

c00194ce <FAT::read(void*, unsigned long, void*, int*)>:
c00194ce:	83 ec 1c             	sub    esp,0x1c
c00194d1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194d6:	74 07                	je     c00194df <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00194d8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00194dd:	75 07                	jne    c00194e6 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00194df:	b8 04 00 00 00       	mov    eax,0x4
c00194e4:	eb 3d                	jmp    c0019523 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00194e6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194ea:	50                   	push   eax
c00194eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00194f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194f7:	e8 ee be fe ff       	call   c00053ea <f_read>
c00194fc:	83 c4 10             	add    esp,0x10
c00194ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019503:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019507:	89 c2                	mov    edx,eax
c0019509:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001950d:	89 10                	mov    DWORD PTR [eax],edx
c001950f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019513:	85 c0                	test   eax,eax
c0019515:	75 07                	jne    c001951e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019517:	b8 00 00 00 00       	mov    eax,0x0
c001951c:	eb 05                	jmp    c0019523 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001951e:	b8 01 00 00 00       	mov    eax,0x1
c0019523:	83 c4 1c             	add    esp,0x1c
c0019526:	c3                   	ret    
c0019527:	90                   	nop

c0019528 <FAT::write(void*, unsigned long, void*, int*)>:
c0019528:	83 ec 1c             	sub    esp,0x1c
c001952b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019530:	74 07                	je     c0019539 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0019532:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019537:	75 07                	jne    c0019540 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019539:	b8 04 00 00 00       	mov    eax,0x4
c001953e:	eb 3d                	jmp    c001957d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019540:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019544:	50                   	push   eax
c0019545:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019549:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001954d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019551:	e8 14 c1 fe ff       	call   c000566a <f_write>
c0019556:	83 c4 10             	add    esp,0x10
c0019559:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001955d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019561:	89 c2                	mov    edx,eax
c0019563:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019567:	89 10                	mov    DWORD PTR [eax],edx
c0019569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001956d:	85 c0                	test   eax,eax
c001956f:	75 07                	jne    c0019578 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019571:	b8 00 00 00 00       	mov    eax,0x0
c0019576:	eb 05                	jmp    c001957d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019578:	b8 01 00 00 00       	mov    eax,0x1
c001957d:	83 c4 1c             	add    esp,0x1c
c0019580:	c3                   	ret    
c0019581:	90                   	nop

c0019582 <FAT::close(void*)>:
c0019582:	83 ec 1c             	sub    esp,0x1c
c0019585:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001958a:	75 07                	jne    c0019593 <FAT::close(void*)+0x11>
c001958c:	b8 04 00 00 00       	mov    eax,0x4
c0019591:	eb 36                	jmp    c00195c9 <FAT::close(void*)+0x47>
c0019593:	83 ec 0c             	sub    esp,0xc
c0019596:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001959a:	e8 61 c5 fe ff       	call   c0005b00 <f_close>
c001959f:	83 c4 10             	add    esp,0x10
c00195a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195a6:	83 ec 0c             	sub    esp,0xc
c00195a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195ad:	e8 19 3f ff ff       	call   c000d4cb <free>
c00195b2:	83 c4 10             	add    esp,0x10
c00195b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195b9:	85 c0                	test   eax,eax
c00195bb:	75 07                	jne    c00195c4 <FAT::close(void*)+0x42>
c00195bd:	b8 00 00 00 00       	mov    eax,0x0
c00195c2:	eb 05                	jmp    c00195c9 <FAT::close(void*)+0x47>
c00195c4:	b8 01 00 00 00       	mov    eax,0x1
c00195c9:	83 c4 1c             	add    esp,0x1c
c00195cc:	c3                   	ret    
c00195cd:	90                   	nop

c00195ce <FAT::closeDir(void*)>:
c00195ce:	83 ec 1c             	sub    esp,0x1c
c00195d1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195d6:	75 07                	jne    c00195df <FAT::closeDir(void*)+0x11>
c00195d8:	b8 04 00 00 00       	mov    eax,0x4
c00195dd:	eb 36                	jmp    c0019615 <FAT::closeDir(void*)+0x47>
c00195df:	83 ec 0c             	sub    esp,0xc
c00195e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195e6:	e8 fd ca fe ff       	call   c00060e8 <f_closedir>
c00195eb:	83 c4 10             	add    esp,0x10
c00195ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195f2:	83 ec 0c             	sub    esp,0xc
c00195f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195f9:	e8 cd 3e ff ff       	call   c000d4cb <free>
c00195fe:	83 c4 10             	add    esp,0x10
c0019601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019605:	85 c0                	test   eax,eax
c0019607:	75 07                	jne    c0019610 <FAT::closeDir(void*)+0x42>
c0019609:	b8 00 00 00 00       	mov    eax,0x0
c001960e:	eb 05                	jmp    c0019615 <FAT::closeDir(void*)+0x47>
c0019610:	b8 01 00 00 00       	mov    eax,0x1
c0019615:	83 c4 1c             	add    esp,0x1c
c0019618:	c3                   	ret    
c0019619:	90                   	nop

c001961a <FAT::seek(void*, unsigned long long)>:
c001961a:	83 ec 2c             	sub    esp,0x2c
c001961d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019621:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019625:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019629:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001962d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019632:	75 07                	jne    c001963b <FAT::seek(void*, unsigned long long)+0x21>
c0019634:	b8 04 00 00 00       	mov    eax,0x4
c0019639:	eb 2f                	jmp    c001966a <FAT::seek(void*, unsigned long long)+0x50>
c001963b:	83 ec 04             	sub    esp,0x4
c001963e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019642:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019646:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001964a:	e8 e0 c4 fe ff       	call   c0005b2f <f_lseek>
c001964f:	83 c4 10             	add    esp,0x10
c0019652:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019656:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001965a:	85 c0                	test   eax,eax
c001965c:	75 07                	jne    c0019665 <FAT::seek(void*, unsigned long long)+0x4b>
c001965e:	b8 00 00 00 00       	mov    eax,0x0
c0019663:	eb 05                	jmp    c001966a <FAT::seek(void*, unsigned long long)+0x50>
c0019665:	b8 01 00 00 00       	mov    eax,0x1
c001966a:	83 c4 2c             	add    esp,0x2c
c001966d:	c3                   	ret    

c001966e <fatWrapperReadDisk>:
c001966e:	83 ec 1c             	sub    esp,0x1c
c0019671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019675:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019679:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001967d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019680:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019684:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019688:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001968d:	8b 04 85 40 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3cc0]
c0019694:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019698:	83 ec 0c             	sub    esp,0xc
c001969b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001969f:	52                   	push   edx
c00196a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196a8:	50                   	push   eax
c00196a9:	e8 8e bb ff ff       	call   c001523c <LogicalDisk::read(unsigned long long, int, void*)>
c00196ae:	83 c4 20             	add    esp,0x20
c00196b1:	83 c4 1c             	add    esp,0x1c
c00196b4:	c3                   	ret    

c00196b5 <fatWrapperWriteDisk>:
c00196b5:	83 ec 1c             	sub    esp,0x1c
c00196b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00196c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00196cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196cf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196d4:	8b 04 85 40 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3cc0]
c00196db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196df:	83 ec 0c             	sub    esp,0xc
c00196e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196e6:	52                   	push   edx
c00196e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196ef:	50                   	push   eax
c00196f0:	e8 b3 bb ff ff       	call   c00152a8 <LogicalDisk::write(unsigned long long, int, void*)>
c00196f5:	83 c4 20             	add    esp,0x20
c00196f8:	83 c4 1c             	add    esp,0x1c
c00196fb:	c3                   	ret    

c00196fc <fatWrapperIoctl>:
c00196fc:	53                   	push   ebx
c00196fd:	83 ec 28             	sub    esp,0x28
c0019700:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019704:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019708:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001970c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019710:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019715:	75 31                	jne    c0019748 <fatWrapperIoctl+0x4c>
c0019717:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001971b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001971f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019724:	8b 04 85 40 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3cc0]
c001972b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019731:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019737:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001973b:	66 89 02             	mov    WORD PTR [edx],ax
c001973e:	b8 00 00 00 00       	mov    eax,0x0
c0019743:	e9 b2 00 00 00       	jmp    c00197fa <fatWrapperIoctl+0xfe>
c0019748:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001974d:	75 6a                	jne    c00197b9 <fatWrapperIoctl+0xbd>
c001974f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019753:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019757:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001975c:	8b 04 85 40 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3cc0]
c0019763:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019769:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001976f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019775:	89 c8                	mov    eax,ecx
c0019777:	89 da                	mov    edx,ebx
c0019779:	0f a4 c2 0a          	shld   edx,eax,0xa
c001977d:	c1 e0 0a             	shl    eax,0xa
c0019780:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019785:	8b 0c 8d 40 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3cc0]
c001978c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019792:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019798:	89 cb                	mov    ebx,ecx
c001979a:	c1 fb 1f             	sar    ebx,0x1f
c001979d:	53                   	push   ebx
c001979e:	51                   	push   ecx
c001979f:	52                   	push   edx
c00197a0:	50                   	push   eax
c00197a1:	e8 66 4f 00 00       	call   c001e70c <__udivdi3>
c00197a6:	83 c4 10             	add    esp,0x10
c00197a9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00197ad:	89 01                	mov    DWORD PTR [ecx],eax
c00197af:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00197b2:	b8 00 00 00 00       	mov    eax,0x0
c00197b7:	eb 41                	jmp    c00197fa <fatWrapperIoctl+0xfe>
c00197b9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00197be:	75 07                	jne    c00197c7 <fatWrapperIoctl+0xcb>
c00197c0:	b8 00 00 00 00       	mov    eax,0x0
c00197c5:	eb 33                	jmp    c00197fa <fatWrapperIoctl+0xfe>
c00197c7:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00197cc:	75 19                	jne    c00197e7 <fatWrapperIoctl+0xeb>
c00197ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197da:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00197e0:	b8 00 00 00 00       	mov    eax,0x0
c00197e5:	eb 13                	jmp    c00197fa <fatWrapperIoctl+0xfe>
c00197e7:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00197ec:	75 07                	jne    c00197f5 <fatWrapperIoctl+0xf9>
c00197ee:	b8 00 00 00 00       	mov    eax,0x0
c00197f3:	eb 05                	jmp    c00197fa <fatWrapperIoctl+0xfe>
c00197f5:	b8 04 00 00 00       	mov    eax,0x4
c00197fa:	83 c4 28             	add    esp,0x28
c00197fd:	5b                   	pop    ebx
c00197fe:	c3                   	ret    
c00197ff:	90                   	nop

c0019800 <FAT::FAT()>:
c0019800:	83 ec 1c             	sub    esp,0x1c
c0019803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019807:	83 ec 0c             	sub    esp,0xc
c001980a:	50                   	push   eax
c001980b:	e8 64 8e ff ff       	call   c0012674 <Filesystem::Filesystem()>
c0019810:	83 c4 10             	add    esp,0x10
c0019813:	ba f4 a4 03 c0       	mov    edx,0xc003a4f4
c0019818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001981c:	89 10                	mov    DWORD PTR [eax],edx
c001981e:	c7 05 a0 c7 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c7a0,0x0
c0019828:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019830:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019835:	7f 15                	jg     c001984c <FAT::FAT()+0x4c>
c0019837:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001983b:	c7 04 85 c0 c7 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc3840],0xffffffff
c0019846:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001984a:	eb e4                	jmp    c0019830 <FAT::FAT()+0x30>
c001984c:	90                   	nop
c001984d:	83 c4 1c             	add    esp,0x1c
c0019850:	c3                   	ret    
c0019851:	90                   	nop

c0019852 <FAT::fixFilepath(char*)>:
c0019852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019856:	8a 00                	mov    al,BYTE PTR [eax]
c0019858:	3c 40                	cmp    al,0x40
c001985a:	7e 2c                	jle    c0019888 <FAT::fixFilepath(char*)+0x36>
c001985c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019860:	8a 00                	mov    al,BYTE PTR [eax]
c0019862:	83 e8 41             	sub    eax,0x41
c0019865:	88 c2                	mov    dl,al
c0019867:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001986b:	88 10                	mov    BYTE PTR [eax],dl
c001986d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019871:	8a 00                	mov    al,BYTE PTR [eax]
c0019873:	0f be c0             	movsx  eax,al
c0019876:	8b 04 85 c0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3840]
c001987d:	83 c0 30             	add    eax,0x30
c0019880:	88 c2                	mov    dl,al
c0019882:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019886:	88 10                	mov    BYTE PTR [eax],dl
c0019888:	90                   	nop
c0019889:	c3                   	ret    

c001988a <FAT::open(char const*, void**, FileOpenMode)>:
c001988a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019890:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019898:	74 0a                	je     c00198a4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001989a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198a2:	75 0a                	jne    c00198ae <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00198a4:	b8 04 00 00 00       	mov    eax,0x4
c00198a9:	e9 fd 00 00 00       	jmp    c00199ab <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00198ae:	83 ec 08             	sub    esp,0x8
c00198b1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198bc:	50                   	push   eax
c00198bd:	e8 05 6f fe ff       	call   c00007c7 <strcpy>
c00198c2:	83 c4 10             	add    esp,0x10
c00198c5:	83 ec 08             	sub    esp,0x8
c00198c8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00198cc:	50                   	push   eax
c00198cd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198d4:	e8 79 ff ff ff       	call   c0019852 <FAT::fixFilepath(char*)>
c00198d9:	83 c4 10             	add    esp,0x10
c00198dc:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00198e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198eb:	83 e0 01             	and    eax,0x1
c00198ee:	74 08                	je     c00198f8 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00198f0:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00198f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198ff:	83 e0 04             	and    eax,0x4
c0019902:	74 10                	je     c0019914 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019904:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001990c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019914:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001991b:	83 e0 02             	and    eax,0x2
c001991e:	74 08                	je     c0019928 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019920:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019928:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001992f:	83 e0 08             	and    eax,0x8
c0019932:	74 08                	je     c001993c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019934:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001993c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019943:	83 e0 10             	and    eax,0x10
c0019946:	74 08                	je     c0019950 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019948:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019950:	83 ec 0c             	sub    esp,0xc
c0019953:	68 50 02 00 00       	push   0x250
c0019958:	e8 5e 3b ff ff       	call   c000d4bb <malloc>
c001995d:	83 c4 10             	add    esp,0x10
c0019960:	89 c2                	mov    edx,eax
c0019962:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019969:	89 10                	mov    DWORD PTR [eax],edx
c001996b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019973:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001997a:	8b 00                	mov    eax,DWORD PTR [eax]
c001997c:	83 ec 04             	sub    esp,0x4
c001997f:	52                   	push   edx
c0019980:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019984:	52                   	push   edx
c0019985:	50                   	push   eax
c0019986:	e8 23 b6 fe ff       	call   c0004fae <f_open>
c001998b:	83 c4 10             	add    esp,0x10
c001998e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019995:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001999d:	74 07                	je     c00199a6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001999f:	b8 01 00 00 00       	mov    eax,0x1
c00199a4:	eb 05                	jmp    c00199ab <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00199a6:	b8 00 00 00 00       	mov    eax,0x0
c00199ab:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199b1:	c3                   	ret    

c00199b2 <FAT::openDir(char const*, void**)>:
c00199b2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199b8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199c0:	74 0a                	je     c00199cc <FAT::openDir(char const*, void**)+0x1a>
c00199c2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00199ca:	75 07                	jne    c00199d3 <FAT::openDir(char const*, void**)+0x21>
c00199cc:	b8 04 00 00 00       	mov    eax,0x4
c00199d1:	eb 7d                	jmp    c0019a50 <FAT::openDir(char const*, void**)+0x9e>
c00199d3:	83 ec 08             	sub    esp,0x8
c00199d6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199e1:	50                   	push   eax
c00199e2:	e8 e0 6d fe ff       	call   c00007c7 <strcpy>
c00199e7:	83 c4 10             	add    esp,0x10
c00199ea:	83 ec 08             	sub    esp,0x8
c00199ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199f1:	50                   	push   eax
c00199f2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199f9:	e8 54 fe ff ff       	call   c0019852 <FAT::fixFilepath(char*)>
c00199fe:	83 c4 10             	add    esp,0x10
c0019a01:	83 ec 0c             	sub    esp,0xc
c0019a04:	6a 4c                	push   0x4c
c0019a06:	e8 b0 3a ff ff       	call   c000d4bb <malloc>
c0019a0b:	83 c4 10             	add    esp,0x10
c0019a0e:	89 c2                	mov    edx,eax
c0019a10:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a17:	89 10                	mov    DWORD PTR [eax],edx
c0019a19:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a20:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a22:	83 ec 08             	sub    esp,0x8
c0019a25:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019a29:	52                   	push   edx
c0019a2a:	50                   	push   eax
c0019a2b:	e8 b6 c5 fe ff       	call   c0005fe6 <f_opendir>
c0019a30:	83 c4 10             	add    esp,0x10
c0019a33:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a3a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019a42:	74 07                	je     c0019a4b <FAT::openDir(char const*, void**)+0x99>
c0019a44:	b8 01 00 00 00       	mov    eax,0x1
c0019a49:	eb 05                	jmp    c0019a50 <FAT::openDir(char const*, void**)+0x9e>
c0019a4b:	b8 00 00 00 00       	mov    eax,0x0
c0019a50:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a56:	c3                   	ret    
c0019a57:	90                   	nop

c0019a58 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a58:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a5e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a66:	75 0a                	jne    c0019a72 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019a68:	b8 04 00 00 00       	mov    eax,0x4
c0019a6d:	e9 c9 00 00 00       	jmp    c0019b3b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a72:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019a7a:	75 0a                	jne    c0019a86 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019a7c:	b8 04 00 00 00       	mov    eax,0x4
c0019a81:	e9 b5 00 00 00       	jmp    c0019b3b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a86:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019a8e:	75 0a                	jne    c0019a9a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019a90:	b8 04 00 00 00       	mov    eax,0x4
c0019a95:	e9 a1 00 00 00       	jmp    c0019b3b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a9a:	83 ec 08             	sub    esp,0x8
c0019a9d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019aa4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019aab:	50                   	push   eax
c0019aac:	e8 16 6d fe ff       	call   c00007c7 <strcpy>
c0019ab1:	83 c4 10             	add    esp,0x10
c0019ab4:	83 ec 08             	sub    esp,0x8
c0019ab7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019abe:	50                   	push   eax
c0019abf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ac6:	e8 87 fd ff ff       	call   c0019852 <FAT::fixFilepath(char*)>
c0019acb:	83 c4 10             	add    esp,0x10
c0019ace:	83 ec 08             	sub    esp,0x8
c0019ad1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ad5:	50                   	push   eax
c0019ad6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019add:	50                   	push   eax
c0019ade:	e8 c2 c6 fe ff       	call   c00061a5 <f_stat>
c0019ae3:	83 c4 10             	add    esp,0x10
c0019ae6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019aed:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019af4:	85 c0                	test   eax,eax
c0019af6:	74 07                	je     c0019aff <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019af8:	83 f8 04             	cmp    eax,0x4
c0019afb:	74 32                	je     c0019b2f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019afd:	eb 37                	jmp    c0019b36 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019aff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019b03:	0f b6 c0             	movzx  eax,al
c0019b06:	83 e0 10             	and    eax,0x10
c0019b09:	0f 95 c2             	setne  dl
c0019b0c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019b13:	88 10                	mov    BYTE PTR [eax],dl
c0019b15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019b18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b1c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019b23:	89 01                	mov    DWORD PTR [ecx],eax
c0019b25:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b28:	b8 00 00 00 00       	mov    eax,0x0
c0019b2d:	eb 0c                	jmp    c0019b3b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b2f:	b8 02 00 00 00       	mov    eax,0x2
c0019b34:	eb 05                	jmp    c0019b3b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b36:	b8 01 00 00 00       	mov    eax,0x1
c0019b3b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b41:	c3                   	ret    

c0019b42 <FAT::unlink(char const*)>:
c0019b42:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b48:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b50:	75 07                	jne    c0019b59 <FAT::unlink(char const*)+0x17>
c0019b52:	b8 04 00 00 00       	mov    eax,0x4
c0019b57:	eb 5c                	jmp    c0019bb5 <FAT::unlink(char const*)+0x73>
c0019b59:	83 ec 08             	sub    esp,0x8
c0019b5c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b63:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b67:	50                   	push   eax
c0019b68:	e8 5a 6c fe ff       	call   c00007c7 <strcpy>
c0019b6d:	83 c4 10             	add    esp,0x10
c0019b70:	83 ec 08             	sub    esp,0x8
c0019b73:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b77:	50                   	push   eax
c0019b78:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b7f:	e8 ce fc ff ff       	call   c0019852 <FAT::fixFilepath(char*)>
c0019b84:	83 c4 10             	add    esp,0x10
c0019b87:	83 ec 0c             	sub    esp,0xc
c0019b8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b8e:	50                   	push   eax
c0019b8f:	e8 63 c9 fe ff       	call   c00064f7 <f_unlink>
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b9e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019ba5:	85 c0                	test   eax,eax
c0019ba7:	75 07                	jne    c0019bb0 <FAT::unlink(char const*)+0x6e>
c0019ba9:	b8 00 00 00 00       	mov    eax,0x0
c0019bae:	eb 05                	jmp    c0019bb5 <FAT::unlink(char const*)+0x73>
c0019bb0:	b8 01 00 00 00       	mov    eax,0x1
c0019bb5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019bbb:	c3                   	ret    

c0019bbc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019bbc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019bc2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019bc9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019bd0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019bd4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bd8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019be0:	75 0a                	jne    c0019bec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019be2:	b8 04 00 00 00       	mov    eax,0x4
c0019be7:	e9 1c 01 00 00       	jmp    c0019d08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019bec:	83 ec 08             	sub    esp,0x8
c0019bef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019bf6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bfa:	50                   	push   eax
c0019bfb:	e8 c7 6b fe ff       	call   c00007c7 <strcpy>
c0019c00:	83 c4 10             	add    esp,0x10
c0019c03:	83 ec 08             	sub    esp,0x8
c0019c06:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c0a:	50                   	push   eax
c0019c0b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c12:	e8 3b fc ff ff       	call   c0019852 <FAT::fixFilepath(char*)>
c0019c17:	83 c4 10             	add    esp,0x10
c0019c1a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019c22:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019c2a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c2f:	83 e0 01             	and    eax,0x1
c0019c32:	74 08                	je     c0019c3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019c34:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019c3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c41:	83 e0 02             	and    eax,0x2
c0019c44:	74 08                	je     c0019c4e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019c46:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019c4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c53:	83 e0 04             	and    eax,0x4
c0019c56:	74 08                	je     c0019c60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019c58:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019c60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c65:	83 e0 08             	and    eax,0x8
c0019c68:	74 08                	je     c0019c72 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019c6a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019c72:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c77:	83 e0 01             	and    eax,0x1
c0019c7a:	74 08                	je     c0019c84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019c7c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019c84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c89:	83 e0 02             	and    eax,0x2
c0019c8c:	74 08                	je     c0019c96 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019c8e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019c96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c9b:	83 e0 04             	and    eax,0x4
c0019c9e:	74 08                	je     c0019ca8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019ca0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019ca8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cad:	83 e0 08             	and    eax,0x8
c0019cb0:	74 08                	je     c0019cba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019cb2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019cba:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cc1:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019cc8:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019cd0:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019cd8:	83 ec 04             	sub    esp,0x4
c0019cdb:	52                   	push   edx
c0019cdc:	50                   	push   eax
c0019cdd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ce1:	50                   	push   eax
c0019ce2:	e8 b2 ce fe ff       	call   c0006b99 <f_chmod>
c0019ce7:	83 c4 10             	add    esp,0x10
c0019cea:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019cf1:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019cf8:	85 c0                	test   eax,eax
c0019cfa:	75 07                	jne    c0019d03 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019cfc:	b8 00 00 00 00       	mov    eax,0x0
c0019d01:	eb 05                	jmp    c0019d08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019d03:	b8 01 00 00 00       	mov    eax,0x1
c0019d08:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d0e:	c3                   	ret    
c0019d0f:	90                   	nop

c0019d10 <FAT::rename(char const*, char const*)>:
c0019d10:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019d16:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019d1e:	74 0a                	je     c0019d2a <FAT::rename(char const*, char const*)+0x1a>
c0019d20:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019d28:	75 0a                	jne    c0019d34 <FAT::rename(char const*, char const*)+0x24>
c0019d2a:	b8 04 00 00 00       	mov    eax,0x4
c0019d2f:	e9 98 00 00 00       	jmp    c0019dcc <FAT::rename(char const*, char const*)+0xbc>
c0019d34:	83 ec 08             	sub    esp,0x8
c0019d37:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d3e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d45:	50                   	push   eax
c0019d46:	e8 7c 6a fe ff       	call   c00007c7 <strcpy>
c0019d4b:	83 c4 10             	add    esp,0x10
c0019d4e:	83 ec 08             	sub    esp,0x8
c0019d51:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019d58:	50                   	push   eax
c0019d59:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d60:	e8 ed fa ff ff       	call   c0019852 <FAT::fixFilepath(char*)>
c0019d65:	83 c4 10             	add    esp,0x10
c0019d68:	83 ec 08             	sub    esp,0x8
c0019d6b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019d72:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d76:	50                   	push   eax
c0019d77:	e8 4b 6a fe ff       	call   c00007c7 <strcpy>
c0019d7c:	83 c4 10             	add    esp,0x10
c0019d7f:	83 ec 08             	sub    esp,0x8
c0019d82:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d86:	50                   	push   eax
c0019d87:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d8e:	e8 bf fa ff ff       	call   c0019852 <FAT::fixFilepath(char*)>
c0019d93:	83 c4 10             	add    esp,0x10
c0019d96:	83 ec 08             	sub    esp,0x8
c0019d99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d9d:	50                   	push   eax
c0019d9e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019da5:	50                   	push   eax
c0019da6:	e8 fb ca fe ff       	call   c00068a6 <f_rename>
c0019dab:	83 c4 10             	add    esp,0x10
c0019dae:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019db5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019dbc:	85 c0                	test   eax,eax
c0019dbe:	75 07                	jne    c0019dc7 <FAT::rename(char const*, char const*)+0xb7>
c0019dc0:	b8 00 00 00 00       	mov    eax,0x0
c0019dc5:	eb 05                	jmp    c0019dcc <FAT::rename(char const*, char const*)+0xbc>
c0019dc7:	b8 01 00 00 00       	mov    eax,0x1
c0019dcc:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019dd2:	c3                   	ret    
c0019dd3:	90                   	nop

c0019dd4 <FAT::mkdir(char const*)>:
c0019dd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019dda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019de2:	75 07                	jne    c0019deb <FAT::mkdir(char const*)+0x17>
c0019de4:	b8 04 00 00 00       	mov    eax,0x4
c0019de9:	eb 5c                	jmp    c0019e47 <FAT::mkdir(char const*)+0x73>
c0019deb:	83 ec 08             	sub    esp,0x8
c0019dee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019df5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019df9:	50                   	push   eax
c0019dfa:	e8 c8 69 fe ff       	call   c00007c7 <strcpy>
c0019dff:	83 c4 10             	add    esp,0x10
c0019e02:	83 ec 08             	sub    esp,0x8
c0019e05:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e09:	50                   	push   eax
c0019e0a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e11:	e8 3c fa ff ff       	call   c0019852 <FAT::fixFilepath(char*)>
c0019e16:	83 c4 10             	add    esp,0x10
c0019e19:	83 ec 0c             	sub    esp,0xc
c0019e1c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e20:	50                   	push   eax
c0019e21:	e8 54 c8 fe ff       	call   c000667a <f_mkdir>
c0019e26:	83 c4 10             	add    esp,0x10
c0019e29:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e30:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e37:	85 c0                	test   eax,eax
c0019e39:	75 07                	jne    c0019e42 <FAT::mkdir(char const*)+0x6e>
c0019e3b:	b8 00 00 00 00       	mov    eax,0x0
c0019e40:	eb 05                	jmp    c0019e47 <FAT::mkdir(char const*)+0x73>
c0019e42:	b8 01 00 00 00       	mov    eax,0x1
c0019e47:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e4d:	c3                   	ret    

c0019e4e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e4e:	b8 08 00 00 00       	mov    eax,0x8
c0019e53:	c3                   	ret    

c0019e54 <ISO9660::seek(void*, unsigned long long)>:
c0019e54:	53                   	push   ebx
c0019e55:	b8 04 00 00 00       	mov    eax,0x4
c0019e5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e66:	85 d2                	test   edx,edx
c0019e68:	74 17                	je     c0019e81 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e6a:	89 c8                	mov    eax,ecx
c0019e6c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019e6f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019e72:	b8 01 00 00 00       	mov    eax,0x1
c0019e77:	73 08                	jae    c0019e81 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e79:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019e7c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019e7f:	31 c0                	xor    eax,eax
c0019e81:	5b                   	pop    ebx
c0019e82:	c3                   	ret    
c0019e83:	90                   	nop

c0019e84 <ISO9660::tell(void*, unsigned long long*)>:
c0019e84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e8c:	85 d2                	test   edx,edx
c0019e8e:	74 12                	je     c0019ea2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019e90:	85 c0                	test   eax,eax
c0019e92:	74 0e                	je     c0019ea2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019e94:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e97:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019e9a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019e9d:	89 10                	mov    DWORD PTR [eax],edx
c0019e9f:	31 c0                	xor    eax,eax
c0019ea1:	c3                   	ret    
c0019ea2:	b8 04 00 00 00       	mov    eax,0x4
c0019ea7:	c3                   	ret    

c0019ea8 <ISO9660::getName()>:
c0019ea8:	b8 50 a5 03 c0       	mov    eax,0xc003a550
c0019ead:	c3                   	ret    

c0019eae <ISO9660::stat(void*, unsigned long long*)>:
c0019eae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019eb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019eb6:	85 d2                	test   edx,edx
c0019eb8:	74 12                	je     c0019ecc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019eba:	85 c0                	test   eax,eax
c0019ebc:	74 0e                	je     c0019ecc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019ebe:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019ec1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019ec4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019ec7:	89 10                	mov    DWORD PTR [eax],edx
c0019ec9:	31 c0                	xor    eax,eax
c0019ecb:	c3                   	ret    
c0019ecc:	b8 04 00 00 00       	mov    eax,0x4
c0019ed1:	c3                   	ret    

c0019ed2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ed2:	b8 01 00 00 00       	mov    eax,0x1
c0019ed7:	c3                   	ret    

c0019ed8 <ISO9660::unlink(char const*)>:
c0019ed8:	b8 01 00 00 00       	mov    eax,0x1
c0019edd:	c3                   	ret    

c0019ede <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019ede:	b8 01 00 00 00       	mov    eax,0x1
c0019ee3:	c3                   	ret    

c0019ee4 <ISO9660::rename(char const*, char const*)>:
c0019ee4:	b8 01 00 00 00       	mov    eax,0x1
c0019ee9:	c3                   	ret    

c0019eea <ISO9660::mkdir(char const*)>:
c0019eea:	b8 01 00 00 00       	mov    eax,0x1
c0019eef:	c3                   	ret    

c0019ef0 <ISO9660::close(void*)>:
c0019ef0:	83 ec 0c             	sub    esp,0xc
c0019ef3:	b8 04 00 00 00       	mov    eax,0x4
c0019ef8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019efc:	85 d2                	test   edx,edx
c0019efe:	74 0e                	je     c0019f0e <ISO9660::close(void*)+0x1e>
c0019f00:	83 ec 0c             	sub    esp,0xc
c0019f03:	52                   	push   edx
c0019f04:	e8 c2 35 ff ff       	call   c000d4cb <free>
c0019f09:	83 c4 10             	add    esp,0x10
c0019f0c:	31 c0                	xor    eax,eax
c0019f0e:	83 c4 0c             	add    esp,0xc
c0019f11:	c3                   	ret    

c0019f12 <ISO9660::closeDir(void*)>:
c0019f12:	83 ec 0c             	sub    esp,0xc
c0019f15:	b8 04 00 00 00       	mov    eax,0x4
c0019f1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f1e:	85 d2                	test   edx,edx
c0019f20:	74 0e                	je     c0019f30 <ISO9660::closeDir(void*)+0x1e>
c0019f22:	83 ec 0c             	sub    esp,0xc
c0019f25:	52                   	push   edx
c0019f26:	e8 a0 35 ff ff       	call   c000d4cb <free>
c0019f2b:	83 c4 10             	add    esp,0x10
c0019f2e:	31 c0                	xor    eax,eax
c0019f30:	83 c4 0c             	add    esp,0xc
c0019f33:	c3                   	ret    

c0019f34 <ISO9660::~ISO9660()>:
c0019f34:	83 ec 0c             	sub    esp,0xc
c0019f37:	ba a4 a5 03 c0       	mov    edx,0xc003a5a4
c0019f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f40:	89 10                	mov    DWORD PTR [eax],edx
c0019f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f46:	83 ec 0c             	sub    esp,0xc
c0019f49:	50                   	push   eax
c0019f4a:	e8 49 87 ff ff       	call   c0012698 <Filesystem::~Filesystem()>
c0019f4f:	83 c4 10             	add    esp,0x10
c0019f52:	90                   	nop
c0019f53:	83 c4 0c             	add    esp,0xc
c0019f56:	c3                   	ret    
c0019f57:	90                   	nop

c0019f58 <ISO9660::~ISO9660()>:
c0019f58:	83 ec 0c             	sub    esp,0xc
c0019f5b:	83 ec 0c             	sub    esp,0xc
c0019f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f62:	e8 cd ff ff ff       	call   c0019f34 <ISO9660::~ISO9660()>
c0019f67:	83 c4 10             	add    esp,0x10
c0019f6a:	83 ec 08             	sub    esp,0x8
c0019f6d:	6a 08                	push   0x8
c0019f6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f73:	e8 07 85 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c0019f78:	83 c4 10             	add    esp,0x10
c0019f7b:	83 c4 0c             	add    esp,0xc
c0019f7e:	c3                   	ret    

c0019f7f <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019f7f:	55                   	push   ebp
c0019f80:	31 c9                	xor    ecx,ecx
c0019f82:	57                   	push   edi
c0019f83:	56                   	push   esi
c0019f84:	53                   	push   ebx
c0019f85:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019f89:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f8d:	89 eb                	mov    ebx,ebp
c0019f8f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019f93:	39 ce                	cmp    esi,ecx
c0019f95:	7e 17                	jle    c0019fae <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019f97:	31 d2                	xor    edx,edx
c0019f99:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019f9d:	7d 13                	jge    c0019fb2 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019f9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fa3:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019fa6:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019fa9:	75 0d                	jne    c0019fb8 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019fab:	42                   	inc    edx
c0019fac:	eb eb                	jmp    c0019f99 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019fae:	31 c0                	xor    eax,eax
c0019fb0:	eb 0a                	jmp    c0019fbc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019fb2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019fb6:	eb 04                	jmp    c0019fbc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019fb8:	41                   	inc    ecx
c0019fb9:	43                   	inc    ebx
c0019fba:	eb d7                	jmp    c0019f93 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019fbc:	5b                   	pop    ebx
c0019fbd:	5e                   	pop    esi
c0019fbe:	5f                   	pop    edi
c0019fbf:	5d                   	pop    ebp
c0019fc0:	c3                   	ret    

c0019fc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019fc1:	56                   	push   esi
c0019fc2:	53                   	push   ebx
c0019fc3:	52                   	push   edx
c0019fc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019fc8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019fcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019fd0:	39 0d a0 c8 03 c0    	cmp    DWORD PTR ds:0xc003c8a0,ecx
c0019fd6:	75 08                	jne    c0019fe0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019fd8:	38 05 04 b4 03 c0    	cmp    BYTE PTR ds:0xc003b404,al
c0019fde:	74 2b                	je     c001a00b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019fe0:	83 ec 0c             	sub    esp,0xc
c0019fe3:	a2 04 b4 03 c0       	mov    ds:0xc003b404,al
c0019fe8:	68 c0 c8 03 c0       	push   0xc003c8c0
c0019fed:	0f be c0             	movsx  eax,al
c0019ff0:	6a 01                	push   0x1
c0019ff2:	89 0d a0 c8 03 c0    	mov    DWORD PTR ds:0xc003c8a0,ecx
c0019ff8:	31 db                	xor    ebx,ebx
c0019ffa:	53                   	push   ebx
c0019ffb:	51                   	push   ecx
c0019ffc:	ff 34 85 3c c2 03 c0 	push   DWORD PTR [eax*4-0x3ffc3dc4]
c001a003:	e8 34 b2 ff ff       	call   c001523c <LogicalDisk::read(unsigned long long, int, void*)>
c001a008:	83 c4 20             	add    esp,0x20
c001a00b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a013:	c7 44 24 14 c0 c8 03 c0 	mov    DWORD PTR [esp+0x14],0xc003c8c0
c001a01b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a01f:	58                   	pop    eax
c001a020:	5b                   	pop    ebx
c001a021:	5e                   	pop    esi
c001a022:	e9 0d 66 fe ff       	jmp    c0000634 <memcpy>
c001a027:	90                   	nop

c001a028 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a028:	81 ec 10 08 00 00    	sub    esp,0x810
c001a02e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a035:	83 c0 41             	add    eax,0x41
c001a038:	0f be c0             	movsx  eax,al
c001a03b:	50                   	push   eax
c001a03c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a040:	50                   	push   eax
c001a041:	6a 10                	push   0x10
c001a043:	e8 79 ff ff ff       	call   c0019fc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a048:	83 c4 10             	add    esp,0x10
c001a04b:	31 c0                	xor    eax,eax
c001a04d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a052:	75 1d                	jne    c001a071 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a054:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a059:	75 16                	jne    c001a071 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a05b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a060:	75 0f                	jne    c001a071 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a062:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a067:	75 08                	jne    c001a071 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a069:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a06e:	0f 94 c0             	sete   al
c001a071:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a077:	c3                   	ret    

c001a078 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a078:	55                   	push   ebp
c001a079:	57                   	push   edi
c001a07a:	56                   	push   esi
c001a07b:	53                   	push   ebx
c001a07c:	81 ec 34 08 00 00    	sub    esp,0x834
c001a082:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a089:	55                   	push   ebp
c001a08a:	68 6b a5 03 c0       	push   0xc003a56b
c001a08f:	e8 2c 2e ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001a094:	83 c4 10             	add    esp,0x10
c001a097:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a09f:	0f 84 06 02 00 00    	je     c001a2ab <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a0a5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a0ad:	0f 84 f8 01 00 00    	je     c001a2ab <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a0b3:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a0ba:	b8 01 00 00 00       	mov    eax,0x1
c001a0bf:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a0c3:	0f 85 e7 01 00 00    	jne    c001a2b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a0c9:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a0cc:	31 d2                	xor    edx,edx
c001a0ce:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a0d1:	89 e9                	mov    ecx,ebp
c001a0d3:	89 d3                	mov    ebx,edx
c001a0d5:	01 f1                	add    ecx,esi
c001a0d7:	11 fb                	adc    ebx,edi
c001a0d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a0dd:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a0e1:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a0e8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a0eb:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a0ee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a0f2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a0f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a0fa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a0fe:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a102:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a106:	72 19                	jb     c001a121 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a108:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a110:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a114:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a117:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a11b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a11f:	eb 13                	jmp    c001a134 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a121:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a125:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a129:	29 f0                	sub    eax,esi
c001a12b:	19 fa                	sbb    edx,edi
c001a12d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a130:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a134:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a13b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a13e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a140:	53                   	push   ebx
c001a141:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a145:	c1 e0 0b             	shl    eax,0xb
c001a148:	01 c6                	add    esi,eax
c001a14a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a151:	11 d7                	adc    edi,edx
c001a153:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a157:	89 fa                	mov    edx,edi
c001a159:	50                   	push   eax
c001a15a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a15e:	50                   	push   eax
c001a15f:	89 f0                	mov    eax,esi
c001a161:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a165:	50                   	push   eax
c001a166:	e8 56 fe ff ff       	call   c0019fc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a16b:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a172:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a176:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a179:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a17d:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a183:	83 c4 10             	add    esp,0x10
c001a186:	b8 00 08 00 00       	mov    eax,0x800
c001a18b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a18f:	29 d0                	sub    eax,edx
c001a191:	39 c1                	cmp    ecx,eax
c001a193:	83 db 00             	sbb    ebx,0x0
c001a196:	7d 19                	jge    c001a1b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a198:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a19d:	75 16                	jne    c001a1b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a19f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a1a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a1ac:	e9 f6 00 00 00       	jmp    c001a2a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a1b1:	89 c5                	mov    ebp,eax
c001a1b3:	eb 03                	jmp    c001a1b8 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a1b5:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a1b8:	51                   	push   ecx
c001a1b9:	55                   	push   ebp
c001a1ba:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a1be:	50                   	push   eax
c001a1bf:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a1c6:	e8 69 64 fe ff       	call   c0000634 <memcpy>
c001a1cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a1d3:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a1da:	01 e8                	add    eax,ebp
c001a1dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a1e0:	89 e8                	mov    eax,ebp
c001a1e2:	99                   	cdq    
c001a1e3:	01 ee                	add    esi,ebp
c001a1e5:	11 d7                	adc    edi,edx
c001a1e7:	29 e9                	sub    ecx,ebp
c001a1e9:	19 d3                	sbb    ebx,edx
c001a1eb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a1ef:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a1f3:	83 c4 10             	add    esp,0x10
c001a1f6:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a1fb:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a1fe:	b8 00 00 00 00       	mov    eax,0x0
c001a203:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a207:	7d 3f                	jge    c001a248 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a209:	52                   	push   edx
c001a20a:	89 fa                	mov    edx,edi
c001a20c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a213:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a217:	50                   	push   eax
c001a218:	89 f0                	mov    eax,esi
c001a21a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a21e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a222:	50                   	push   eax
c001a223:	e8 99 fd ff ff       	call   c0019fc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a228:	81 c6 00 08 00 00    	add    esi,0x800
c001a22e:	83 d7 00             	adc    edi,0x0
c001a231:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a239:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a241:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a246:	eb ab                	jmp    c001a1f3 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a24c:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a24f:	74 34                	je     c001a285 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a251:	89 fa                	mov    edx,edi
c001a253:	50                   	push   eax
c001a254:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a25b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a25f:	50                   	push   eax
c001a260:	89 f0                	mov    eax,esi
c001a262:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a266:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a26a:	55                   	push   ebp
c001a26b:	50                   	push   eax
c001a26c:	e8 50 fd ff ff       	call   c0019fc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a271:	83 c4 0c             	add    esp,0xc
c001a274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a278:	55                   	push   ebp
c001a279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a27d:	e8 b2 63 fe ff       	call   c0000634 <memcpy>
c001a282:	83 c4 10             	add    esp,0x10
c001a285:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a28c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a290:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a294:	89 38                	mov    DWORD PTR [eax],edi
c001a296:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a29d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2a1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a2a4:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a2a7:	31 c0                	xor    eax,eax
c001a2a9:	eb 05                	jmp    c001a2b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a2ab:	b8 04 00 00 00       	mov    eax,0x4
c001a2b0:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a2b6:	5b                   	pop    ebx
c001a2b7:	5e                   	pop    esi
c001a2b8:	5f                   	pop    edi
c001a2b9:	5d                   	pop    ebp
c001a2ba:	c3                   	ret    
c001a2bb:	90                   	nop

c001a2bc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a2bc:	55                   	push   ebp
c001a2bd:	57                   	push   edi
c001a2be:	56                   	push   esi
c001a2bf:	53                   	push   ebx
c001a2c0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a2c6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a2cd:	85 f6                	test   esi,esi
c001a2cf:	0f 84 65 02 00 00    	je     c001a53a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a2d5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a2dd:	0f 84 57 02 00 00    	je     c001a53a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a2e3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a2e6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a2e9:	75 0a                	jne    c001a2f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a2eb:	b8 07 00 00 00       	mov    eax,0x7
c001a2f0:	e9 4a 02 00 00       	jmp    c001a53f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a2f5:	50                   	push   eax
c001a2f6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a2fa:	50                   	push   eax
c001a2fb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a302:	53                   	push   ebx
c001a303:	8b 06                	mov    eax,DWORD PTR [esi]
c001a305:	c1 e0 0b             	shl    eax,0xb
c001a308:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a30b:	c1 e8 0b             	shr    eax,0xb
c001a30e:	50                   	push   eax
c001a30f:	e8 ad fc ff ff       	call   c0019fc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a314:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a317:	83 c4 10             	add    esp,0x10
c001a31a:	89 c1                	mov    ecx,eax
c001a31c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a31f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a325:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a328:	84 db                	test   bl,bl
c001a32a:	0f 85 90 00 00 00    	jne    c001a3c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a330:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a336:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a33c:	29 c7                	sub    edi,eax
c001a33e:	89 fb                	mov    ebx,edi
c001a340:	c1 fb 1f             	sar    ebx,0x1f
c001a343:	01 f8                	add    eax,edi
c001a345:	11 da                	adc    edx,ebx
c001a347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a34b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a34f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a352:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a355:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a358:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a35b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a35e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a362:	89 d8                	mov    eax,ebx
c001a364:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a367:	ba 00 00 00 00       	mov    edx,0x0
c001a36c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a370:	b8 00 00 00 00       	mov    eax,0x0
c001a375:	73 0b                	jae    c001a382 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a377:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a37a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a37e:	29 f8                	sub    eax,edi
c001a380:	19 da                	sbb    edx,ebx
c001a382:	89 d3                	mov    ebx,edx
c001a384:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a387:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a38a:	09 c3                	or     ebx,eax
c001a38c:	0f 84 59 ff ff ff    	je     c001a2eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a392:	55                   	push   ebp
c001a393:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a397:	50                   	push   eax
c001a398:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a39f:	53                   	push   ebx
c001a3a0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a3a2:	c1 e0 0b             	shl    eax,0xb
c001a3a5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a3a9:	c1 e8 0b             	shr    eax,0xb
c001a3ac:	50                   	push   eax
c001a3ad:	e8 0f fc ff ff       	call   c0019fc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a3b2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a3b5:	83 c4 10             	add    esp,0x10
c001a3b8:	25 ff 07 00 00       	and    eax,0x7ff
c001a3bd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a3c0:	57                   	push   edi
c001a3c1:	6a 28                	push   0x28
c001a3c3:	6a 00                	push   0x0
c001a3c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a3c9:	50                   	push   eax
c001a3ca:	e8 dc 62 fe ff       	call   c00006ab <memset>
c001a3cf:	31 d2                	xor    edx,edx
c001a3d1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a3d4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a3da:	89 f8                	mov    eax,edi
c001a3dc:	83 c0 21             	add    eax,0x21
c001a3df:	83 d2 00             	adc    edx,0x0
c001a3e2:	89 c7                	mov    edi,eax
c001a3e4:	89 d5                	mov    ebp,edx
c001a3e6:	83 c4 10             	add    esp,0x10
c001a3e9:	31 c9                	xor    ecx,ecx
c001a3eb:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a3f2:	83 f9 28             	cmp    ecx,0x28
c001a3f5:	88 04 24             	mov    BYTE PTR [esp],al
c001a3f8:	0f 94 c2             	sete   dl
c001a3fb:	88 d0                	mov    al,dl
c001a3fd:	ba ff 07 00 00       	mov    edx,0x7ff
c001a402:	39 fa                	cmp    edx,edi
c001a404:	ba 00 00 00 00       	mov    edx,0x0
c001a409:	19 ea                	sbb    edx,ebp
c001a40b:	0f 92 c2             	setb   dl
c001a40e:	09 c2                	or     edx,eax
c001a410:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a414:	0f 94 c0             	sete   al
c001a417:	08 d0                	or     al,dl
c001a419:	75 16                	jne    c001a431 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a41b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a41f:	74 10                	je     c001a431 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a421:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a424:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a428:	41                   	inc    ecx
c001a429:	83 c7 01             	add    edi,0x1
c001a42c:	83 d5 00             	adc    ebp,0x0
c001a42f:	eb ba                	jmp    c001a3eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a431:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a439:	83 ec 0c             	sub    esp,0xc
c001a43c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a440:	57                   	push   edi
c001a441:	e8 8e 62 fe ff       	call   c00006d4 <strlen>
c001a446:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a44e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a452:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a459:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a45c:	5a                   	pop    edx
c001a45d:	25 ff 07 00 00       	and    eax,0x7ff
c001a462:	01 c8                	add    eax,ecx
c001a464:	59                   	pop    ecx
c001a465:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a46b:	83 e0 02             	and    eax,0x2
c001a46e:	3c 01                	cmp    al,0x1
c001a470:	19 c0                	sbb    eax,eax
c001a472:	83 c0 02             	add    eax,0x2
c001a475:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a479:	57                   	push   edi
c001a47a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a47e:	50                   	push   eax
c001a47f:	e8 43 63 fe ff       	call   c00007c7 <strcpy>
c001a484:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a488:	83 c4 10             	add    esp,0x10
c001a48b:	84 c0                	test   al,al
c001a48d:	75 21                	jne    c001a4b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a48f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a497:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a49f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a4a7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a4ae:	eb 28                	jmp    c001a4d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a4b0:	fe c8                	dec    al
c001a4b2:	75 24                	jne    c001a4d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a4b4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a4bc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a4c4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a4cc:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a4d3:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a4d8:	0f b6 fb             	movzx  edi,bl
c001a4db:	31 db                	xor    ebx,ebx
c001a4dd:	50                   	push   eax
c001a4de:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a4e5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a4e9:	50                   	push   eax
c001a4ea:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a4f1:	e8 3e 61 fe ff       	call   c0000634 <memcpy>
c001a4f6:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a4fd:	89 f9                	mov    ecx,edi
c001a4ff:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a505:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a508:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a50b:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a50e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a511:	83 c4 10             	add    esp,0x10
c001a514:	39 c7                	cmp    edi,eax
c001a516:	89 df                	mov    edi,ebx
c001a518:	19 d7                	sbb    edi,edx
c001a51a:	72 10                	jb     c001a52c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a51c:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a523:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a52a:	eb 0a                	jmp    c001a536 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a52c:	29 c8                	sub    eax,ecx
c001a52e:	19 da                	sbb    edx,ebx
c001a530:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a533:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a536:	31 c0                	xor    eax,eax
c001a538:	eb 05                	jmp    c001a53f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a53a:	b8 04 00 00 00       	mov    eax,0x4
c001a53f:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a545:	5b                   	pop    ebx
c001a546:	5e                   	pop    esi
c001a547:	5f                   	pop    edi
c001a548:	5d                   	pop    ebp
c001a549:	c3                   	ret    

c001a54a <readRoot(unsigned int*, unsigned int*, char)>:
c001a54a:	81 ec 40 08 00 00    	sub    esp,0x840
c001a550:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a558:	50                   	push   eax
c001a559:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a55d:	50                   	push   eax
c001a55e:	6a 10                	push   0x10
c001a560:	e8 5c fa ff ff       	call   c0019fc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a565:	83 c4 0c             	add    esp,0xc
c001a568:	6a 22                	push   0x22
c001a56a:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a571:	50                   	push   eax
c001a572:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a576:	50                   	push   eax
c001a577:	e8 b8 60 fe ff       	call   c0000634 <memcpy>
c001a57c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a583:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a587:	89 10                	mov    DWORD PTR [eax],edx
c001a589:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a590:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a594:	89 10                	mov    DWORD PTR [eax],edx
c001a596:	b0 01                	mov    al,0x1
c001a598:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a59e:	c3                   	ret    

c001a59f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a59f:	55                   	push   ebp
c001a5a0:	57                   	push   edi
c001a5a1:	56                   	push   esi
c001a5a2:	53                   	push   ebx
c001a5a3:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a5a9:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a5b0:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a5b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5bb:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a5bf:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a5c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5c7:	75 03                	jne    c001a5cc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a5c9:	83 c3 02             	add    ebx,0x2
c001a5cc:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a5cf:	75 03                	jne    c001a5d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a5d1:	43                   	inc    ebx
c001a5d2:	eb f8                	jmp    c001a5cc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a5d4:	51                   	push   ecx
c001a5d5:	68 00 01 00 00       	push   0x100
c001a5da:	6a 00                	push   0x0
c001a5dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a5e0:	50                   	push   eax
c001a5e1:	e8 c5 60 fe ff       	call   c00006ab <memset>
c001a5e6:	83 c4 10             	add    esp,0x10
c001a5e9:	31 d2                	xor    edx,edx
c001a5eb:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a5ee:	84 c0                	test   al,al
c001a5f0:	74 21                	je     c001a613 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a5f2:	3c 2f                	cmp    al,0x2f
c001a5f4:	75 0b                	jne    c001a601 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a5f6:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a5fa:	bd 01 00 00 00       	mov    ebp,0x1
c001a5ff:	eb 14                	jmp    c001a615 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a601:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a604:	80 f9 19             	cmp    cl,0x19
c001a607:	77 03                	ja     c001a60c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a609:	83 e8 20             	sub    eax,0x20
c001a60c:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a610:	42                   	inc    edx
c001a611:	eb d8                	jmp    c001a5eb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a613:	31 ed                	xor    ebp,ebp
c001a615:	83 ec 0c             	sub    esp,0xc
c001a618:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a61f:	e8 97 2e ff ff       	call   c000d4bb <malloc>
c001a624:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a62b:	89 c6                	mov    esi,eax
c001a62d:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a633:	c1 ef 0b             	shr    edi,0xb
c001a636:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a63d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a641:	83 c4 10             	add    esp,0x10
c001a644:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a649:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a64d:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a654:	74 28                	je     c001a67e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a656:	52                   	push   edx
c001a657:	57                   	push   edi
c001a658:	50                   	push   eax
c001a659:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a65d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a664:	e8 58 f9 ff ff       	call   c0019fc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a669:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a66d:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a674:	05 00 08 00 00       	add    eax,0x800
c001a679:	83 c4 10             	add    esp,0x10
c001a67c:	eb cb                	jmp    c001a649 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a67e:	83 ec 0c             	sub    esp,0xc
c001a681:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a685:	57                   	push   edi
c001a686:	e8 49 60 fe ff       	call   c00006d4 <strlen>
c001a68b:	50                   	push   eax
c001a68c:	57                   	push   edi
c001a68d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a694:	56                   	push   esi
c001a695:	e8 e5 f8 ff ff       	call   c0019f7f <__memmem(unsigned char*, int, unsigned char*, int)>
c001a69a:	83 c4 20             	add    esp,0x20
c001a69d:	85 c0                	test   eax,eax
c001a69f:	75 13                	jne    c001a6b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a6a1:	83 ec 0c             	sub    esp,0xc
c001a6a4:	56                   	push   esi
c001a6a5:	e8 21 2e ff ff       	call   c000d4cb <free>
c001a6aa:	83 c4 10             	add    esp,0x10
c001a6ad:	31 c0                	xor    eax,eax
c001a6af:	e9 b3 00 00 00       	jmp    c001a767 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a6b4:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a6b8:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a6bc:	c1 e7 08             	shl    edi,0x8
c001a6bf:	c1 e2 10             	shl    edx,0x10
c001a6c2:	09 d7                	or     edi,edx
c001a6c4:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a6c8:	09 d7                	or     edi,edx
c001a6ca:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a6ce:	c1 e2 18             	shl    edx,0x18
c001a6d1:	09 d7                	or     edi,edx
c001a6d3:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a6d7:	89 d1                	mov    ecx,edx
c001a6d9:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a6dd:	c1 e1 08             	shl    ecx,0x8
c001a6e0:	c1 e2 10             	shl    edx,0x10
c001a6e3:	09 ca                	or     edx,ecx
c001a6e5:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a6e9:	09 ca                	or     edx,ecx
c001a6eb:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a6ef:	c1 e1 18             	shl    ecx,0x18
c001a6f2:	09 ca                	or     edx,ecx
c001a6f4:	89 e9                	mov    ecx,ebp
c001a6f6:	84 c9                	test   cl,cl
c001a6f8:	74 3c                	je     c001a736 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a6fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a6fe:	83 ec 0c             	sub    esp,0xc
c001a701:	56                   	push   esi
c001a702:	e8 c4 2d ff ff       	call   c000d4cb <free>
c001a707:	83 c4 0c             	add    esp,0xc
c001a70a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a711:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a716:	50                   	push   eax
c001a717:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a71e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a725:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a729:	52                   	push   edx
c001a72a:	57                   	push   edi
c001a72b:	53                   	push   ebx
c001a72c:	e8 6e fe ff ff       	call   c001a59f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a731:	83 c4 20             	add    esp,0x20
c001a734:	eb 31                	jmp    c001a767 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a736:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a739:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a740:	d0 e8                	shr    al,1
c001a742:	89 3b                	mov    DWORD PTR [ebx],edi
c001a744:	83 e0 01             	and    eax,0x1
c001a747:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a74e:	83 ec 0c             	sub    esp,0xc
c001a751:	89 13                	mov    DWORD PTR [ebx],edx
c001a753:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a75a:	89 03                	mov    DWORD PTR [ebx],eax
c001a75c:	56                   	push   esi
c001a75d:	e8 69 2d ff ff       	call   c000d4cb <free>
c001a762:	83 c4 10             	add    esp,0x10
c001a765:	b0 01                	mov    al,0x1
c001a767:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a76d:	5b                   	pop    ebx
c001a76e:	5e                   	pop    esi
c001a76f:	5f                   	pop    edi
c001a770:	5d                   	pop    ebp
c001a771:	c3                   	ret    

c001a772 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a772:	55                   	push   ebp
c001a773:	57                   	push   edi
c001a774:	56                   	push   esi
c001a775:	53                   	push   ebx
c001a776:	83 ec 20             	sub    esp,0x20
c001a779:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a77d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a781:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a785:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a78d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a795:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a79a:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a7a0:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a7a6:	57                   	push   edi
c001a7a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7ab:	50                   	push   eax
c001a7ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7b0:	50                   	push   eax
c001a7b1:	e8 94 fd ff ff       	call   c001a54a <readRoot(unsigned int*, unsigned int*, char)>
c001a7b6:	5a                   	pop    edx
c001a7b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a7bb:	e8 14 5f fe ff       	call   c00006d4 <strlen>
c001a7c0:	83 c4 10             	add    esp,0x10
c001a7c3:	83 f8 03             	cmp    eax,0x3
c001a7c6:	77 17                	ja     c001a7df <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a7c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7cc:	89 03                	mov    DWORD PTR [ebx],eax
c001a7ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7d2:	89 06                	mov    DWORD PTR [esi],eax
c001a7d4:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a7db:	b0 01                	mov    al,0x1
c001a7dd:	eb 19                	jmp    c001a7f8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a7df:	50                   	push   eax
c001a7e0:	55                   	push   ebp
c001a7e1:	57                   	push   edi
c001a7e2:	56                   	push   esi
c001a7e3:	53                   	push   ebx
c001a7e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a7f0:	e8 aa fd ff ff       	call   c001a59f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a7f5:	83 c4 20             	add    esp,0x20
c001a7f8:	83 c4 1c             	add    esp,0x1c
c001a7fb:	5b                   	pop    ebx
c001a7fc:	5e                   	pop    esi
c001a7fd:	5f                   	pop    edi
c001a7fe:	5d                   	pop    ebp
c001a7ff:	c3                   	ret    

c001a800 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a800:	57                   	push   edi
c001a801:	56                   	push   esi
c001a802:	53                   	push   ebx
c001a803:	83 ec 10             	sub    esp,0x10
c001a806:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a80a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a80e:	85 ff                	test   edi,edi
c001a810:	74 7b                	je     c001a88d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a812:	85 f6                	test   esi,esi
c001a814:	74 77                	je     c001a88d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a816:	83 ec 0c             	sub    esp,0xc
c001a819:	6a 1c                	push   0x1c
c001a81b:	e8 9b 2c ff ff       	call   c000d4bb <malloc>
c001a820:	89 07                	mov    DWORD PTR [edi],eax
c001a822:	89 c3                	mov    ebx,eax
c001a824:	58                   	pop    eax
c001a825:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a829:	50                   	push   eax
c001a82a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a82d:	50                   	push   eax
c001a82e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a832:	50                   	push   eax
c001a833:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a837:	50                   	push   eax
c001a838:	56                   	push   esi
c001a839:	e8 34 ff ff ff       	call   c001a772 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a83e:	83 c4 20             	add    esp,0x20
c001a841:	84 c0                	test   al,al
c001a843:	74 07                	je     c001a84c <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a845:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a84a:	74 0b                	je     c001a857 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a84c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a850:	b8 01 00 00 00       	mov    eax,0x1
c001a855:	eb 3b                	jmp    c001a892 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a857:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a85b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a85f:	89 03                	mov    DWORD PTR [ebx],eax
c001a861:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a86c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a873:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a87a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a87d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a884:	8a 06                	mov    al,BYTE PTR [esi]
c001a886:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a889:	31 c0                	xor    eax,eax
c001a88b:	eb 05                	jmp    c001a892 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a88d:	b8 04 00 00 00       	mov    eax,0x4
c001a892:	83 c4 10             	add    esp,0x10
c001a895:	5b                   	pop    ebx
c001a896:	5e                   	pop    esi
c001a897:	5f                   	pop    edi
c001a898:	c3                   	ret    
c001a899:	90                   	nop

c001a89a <ISO9660::exists(char const*)>:
c001a89a:	83 ec 28             	sub    esp,0x28
c001a89d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8a1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a8a5:	52                   	push   edx
c001a8a6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a8a9:	52                   	push   edx
c001a8aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a8ae:	52                   	push   edx
c001a8af:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a8b3:	52                   	push   edx
c001a8b4:	50                   	push   eax
c001a8b5:	e8 b8 fe ff ff       	call   c001a772 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a8ba:	83 c4 3c             	add    esp,0x3c
c001a8bd:	c3                   	ret    

c001a8be <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a8be:	56                   	push   esi
c001a8bf:	53                   	push   ebx
c001a8c0:	83 ec 14             	sub    esp,0x14
c001a8c3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a8c7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a8cb:	85 db                	test   ebx,ebx
c001a8cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a8d1:	0f 94 c2             	sete   dl
c001a8d4:	85 f6                	test   esi,esi
c001a8d6:	0f 94 c0             	sete   al
c001a8d9:	08 c2                	or     dl,al
c001a8db:	75 68                	jne    c001a945 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a8dd:	85 c9                	test   ecx,ecx
c001a8df:	74 64                	je     c001a945 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a8e1:	83 ec 0c             	sub    esp,0xc
c001a8e4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a8e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a8eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a8f1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8f8:	50                   	push   eax
c001a8f9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a8fc:	50                   	push   eax
c001a8fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a901:	50                   	push   eax
c001a902:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a906:	50                   	push   eax
c001a907:	51                   	push   ecx
c001a908:	e8 65 fe ff ff       	call   c001a772 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a90d:	83 c4 20             	add    esp,0x20
c001a910:	ba 01 00 00 00       	mov    edx,0x1
c001a915:	84 c0                	test   al,al
c001a917:	74 31                	je     c001a94a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a919:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a91d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a924:	89 03                	mov    DWORD PTR [ebx],eax
c001a926:	ba 00 00 00 00       	mov    edx,0x0
c001a92b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a92f:	85 c0                	test   eax,eax
c001a931:	0f 95 06             	setne  BYTE PTR [esi]
c001a934:	74 14                	je     c001a94a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a936:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a93c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a943:	eb 05                	jmp    c001a94a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a945:	ba 04 00 00 00       	mov    edx,0x4
c001a94a:	83 c4 14             	add    esp,0x14
c001a94d:	89 d0                	mov    eax,edx
c001a94f:	5b                   	pop    ebx
c001a950:	5e                   	pop    esi
c001a951:	c3                   	ret    

c001a952 <ISO9660::openDir(char const*, void**)>:
c001a952:	57                   	push   edi
c001a953:	56                   	push   esi
c001a954:	53                   	push   ebx
c001a955:	83 ec 10             	sub    esp,0x10
c001a958:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a95c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a960:	85 ff                	test   edi,edi
c001a962:	0f 84 95 00 00 00    	je     c001a9fd <ISO9660::openDir(char const*, void**)+0xab>
c001a968:	85 f6                	test   esi,esi
c001a96a:	0f 84 8d 00 00 00    	je     c001a9fd <ISO9660::openDir(char const*, void**)+0xab>
c001a970:	83 ec 0c             	sub    esp,0xc
c001a973:	6a 1c                	push   0x1c
c001a975:	e8 41 2b ff ff       	call   c000d4bb <malloc>
c001a97a:	89 07                	mov    DWORD PTR [edi],eax
c001a97c:	89 c3                	mov    ebx,eax
c001a97e:	59                   	pop    ecx
c001a97f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a983:	50                   	push   eax
c001a984:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a987:	50                   	push   eax
c001a988:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a98c:	50                   	push   eax
c001a98d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a991:	50                   	push   eax
c001a992:	56                   	push   esi
c001a993:	e8 da fd ff ff       	call   c001a772 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a998:	83 c4 20             	add    esp,0x20
c001a99b:	84 c0                	test   al,al
c001a99d:	74 07                	je     c001a9a6 <ISO9660::openDir(char const*, void**)+0x54>
c001a99f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a9a4:	75 21                	jne    c001a9c7 <ISO9660::openDir(char const*, void**)+0x75>
c001a9a6:	0f b6 c0             	movzx  eax,al
c001a9a9:	52                   	push   edx
c001a9aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a9ae:	50                   	push   eax
c001a9af:	68 7e a5 03 c0       	push   0xc003a57e
c001a9b4:	e8 07 25 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001a9b9:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a9bd:	83 c4 10             	add    esp,0x10
c001a9c0:	b8 01 00 00 00       	mov    eax,0x1
c001a9c5:	eb 3b                	jmp    c001aa02 <ISO9660::openDir(char const*, void**)+0xb0>
c001a9c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9cb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a9cf:	89 03                	mov    DWORD PTR [ebx],eax
c001a9d1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a9e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a9ea:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a9ed:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a9f4:	8a 06                	mov    al,BYTE PTR [esi]
c001a9f6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a9f9:	31 c0                	xor    eax,eax
c001a9fb:	eb 05                	jmp    c001aa02 <ISO9660::openDir(char const*, void**)+0xb0>
c001a9fd:	b8 04 00 00 00       	mov    eax,0x4
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	5b                   	pop    ebx
c001aa06:	5e                   	pop    esi
c001aa07:	5f                   	pop    edi
c001aa08:	c3                   	ret    
c001aa09:	90                   	nop

c001aa0a <ISO9660::ISO9660()>:
c001aa0a:	83 ec 0c             	sub    esp,0xc
c001aa0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa11:	83 ec 0c             	sub    esp,0xc
c001aa14:	50                   	push   eax
c001aa15:	e8 5a 7c ff ff       	call   c0012674 <Filesystem::Filesystem()>
c001aa1a:	83 c4 10             	add    esp,0x10
c001aa1d:	ba a4 a5 03 c0       	mov    edx,0xc003a5a4
c001aa22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa26:	89 10                	mov    DWORD PTR [eax],edx
c001aa28:	90                   	nop
c001aa29:	83 c4 0c             	add    esp,0xc
c001aa2c:	c3                   	ret    
c001aa2d:	90                   	nop

c001aa2e <SoundChannel::~SoundChannel()>:
c001aa2e:	83 ec 0c             	sub    esp,0xc
c001aa31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa35:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa38:	83 ec 0c             	sub    esp,0xc
c001aa3b:	50                   	push   eax
c001aa3c:	e8 8a 2a ff ff       	call   c000d4cb <free>
c001aa41:	83 c4 10             	add    esp,0x10
c001aa44:	90                   	nop
c001aa45:	83 c4 0c             	add    esp,0xc
c001aa48:	c3                   	ret    
c001aa49:	90                   	nop

c001aa4a <SoundChannel::setSpeed(float)>:
c001aa4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa4e:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001aa52:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001aa55:	c3                   	ret    

c001aa56 <SoundChannel::getSpeed()>:
c001aa56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa5a:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001aa5d:	c3                   	ret    

c001aa5e <SoundChannel::setVolume(int)>:
c001aa5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa62:	83 f8 64             	cmp    eax,0x64
c001aa65:	7e 05                	jle    c001aa6c <SoundChannel::setVolume(int)+0xe>
c001aa67:	b8 64 00 00 00       	mov    eax,0x64
c001aa6c:	85 c0                	test   eax,eax
c001aa6e:	79 02                	jns    c001aa72 <SoundChannel::setVolume(int)+0x14>
c001aa70:	31 c0                	xor    eax,eax
c001aa72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa76:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001aa79:	c3                   	ret    

c001aa7a <SoundChannel::getVolume()>:
c001aa7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa7e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001aa81:	c3                   	ret    

c001aa82 <SoundChannel::pause()>:
c001aa82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa86:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001aa8a:	c3                   	ret    
c001aa8b:	90                   	nop

c001aa8c <SoundChannel::SoundChannel(int, int, int, int)>:
c001aa8c:	83 ec 1c             	sub    esp,0x1c
c001aa8f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa93:	e8 ea ff ff ff       	call   c001aa82 <SoundChannel::pause()>
c001aa98:	83 c4 04             	add    esp,0x4
c001aa9b:	6a 50                	push   0x50
c001aa9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aaa1:	e8 b8 ff ff ff       	call   c001aa5e <SoundChannel::setVolume(int)>
c001aaa6:	83 c4 08             	add    esp,0x8
c001aaa9:	d9 e8                	fld1   
c001aaab:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001aaaf:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aab2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aab6:	e8 8f ff ff ff       	call   c001aa4a <SoundChannel::setSpeed(float)>
c001aabb:	83 c4 08             	add    esp,0x8
c001aabe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aac2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aac6:	89 10                	mov    DWORD PTR [eax],edx
c001aac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aacc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aad0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aad7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aadb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aade:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001aae3:	75 23                	jne    c001ab08 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001aae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aae9:	8b 10                	mov    edx,DWORD PTR [eax]
c001aaeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aaf2:	0f af c2             	imul   eax,edx
c001aaf5:	85 c0                	test   eax,eax
c001aaf7:	79 03                	jns    c001aafc <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001aaf9:	83 c0 03             	add    eax,0x3
c001aafc:	c1 f8 02             	sar    eax,0x2
c001aaff:	05 a0 0f 00 00       	add    eax,0xfa0
c001ab04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ab08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab0c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ab10:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ab13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab17:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ab1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab22:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ab29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab2d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab30:	c1 e0 02             	shl    eax,0x2
c001ab33:	83 ec 0c             	sub    esp,0xc
c001ab36:	50                   	push   eax
c001ab37:	e8 7f 29 ff ff       	call   c000d4bb <malloc>
c001ab3c:	83 c4 10             	add    esp,0x10
c001ab3f:	89 c2                	mov    edx,eax
c001ab41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab45:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ab48:	83 ec 04             	sub    esp,0x4
c001ab4b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab4f:	50                   	push   eax
c001ab50:	6a 01                	push   0x1
c001ab52:	6a 04                	push   0x4
c001ab54:	e8 e2 df fe ff       	call   c0008b3b <src_new>
c001ab59:	83 c4 10             	add    esp,0x10
c001ab5c:	89 c2                	mov    edx,eax
c001ab5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab62:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ab65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab69:	85 c0                	test   eax,eax
c001ab6b:	74 10                	je     c001ab7d <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001ab6d:	83 ec 0c             	sub    esp,0xc
c001ab70:	68 00 a6 03 c0       	push   0xc003a600
c001ab75:	e8 64 24 ff ff       	call   c000cfde <panic(char const*)>
c001ab7a:	83 c4 10             	add    esp,0x10
c001ab7d:	90                   	nop
c001ab7e:	83 c4 1c             	add    esp,0x1c
c001ab81:	c3                   	ret    

c001ab82 <SoundChannel::play()>:
c001ab82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab86:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001ab8a:	c3                   	ret    
c001ab8b:	90                   	nop

c001ab8c <SoundChannel::paused()>:
c001ab8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab90:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001ab93:	c3                   	ret    

c001ab94 <SoundChannel::getSampleRate()>:
c001ab94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab98:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab9a:	c3                   	ret    
c001ab9b:	90                   	nop

c001ab9c <SoundChannel::getBits()>:
c001ab9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aba0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aba3:	c3                   	ret    

c001aba4 <SoundChannel::getBufferUsed()>:
c001aba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aba8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001abab:	c3                   	ret    

c001abac <SoundChannel::getBufferSize()>:
c001abac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abb3:	c3                   	ret    

c001abb4 <SoundChannel::unbuffer(float*, int, int)>:
c001abb4:	53                   	push   ebx
c001abb5:	83 ec 40             	sub    esp,0x40
c001abb8:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001abbc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001abc4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001abc7:	db 03                	fild   DWORD PTR [ebx]
c001abc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abcd:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001abd1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001abd4:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001abd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abdb:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001abdf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001abe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001abe7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001abeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abef:	8d 44 24 14          	lea    eax,[esp+0x14]
c001abf3:	50                   	push   eax
c001abf4:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001abf7:	e8 f9 db fe ff       	call   c00087f5 <src_process>
c001abfc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ac00:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001ac03:	83 c4 0c             	add    esp,0xc
c001ac06:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac09:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001ac0c:	29 d0                	sub    eax,edx
c001ac0e:	c1 e0 02             	shl    eax,0x2
c001ac11:	50                   	push   eax
c001ac12:	8d 04 91             	lea    eax,[ecx+edx*4]
c001ac15:	50                   	push   eax
c001ac16:	51                   	push   ecx
c001ac17:	e8 ab 59 fe ff       	call   c00005c7 <memmove>
c001ac1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac20:	83 c4 48             	add    esp,0x48
c001ac23:	5b                   	pop    ebx
c001ac24:	c3                   	ret    
c001ac25:	90                   	nop

c001ac26 <SoundChannel::buffer8(unsigned char*, int)>:
c001ac26:	53                   	push   ebx
c001ac27:	31 c0                	xor    eax,eax
c001ac29:	83 ec 08             	sub    esp,0x8
c001ac2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac30:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001ac33:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001ac36:	74 35                	je     c001ac6d <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ac38:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ac3c:	7d 2f                	jge    c001ac6d <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ac3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ac42:	d9 05 1c a6 03 c0    	fld    DWORD PTR ds:0xc003a61c
c001ac48:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001ac4c:	40                   	inc    eax
c001ac4d:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001ac52:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001ac55:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001ac59:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ac5c:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001ac5f:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001ac62:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001ac65:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac68:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001ac6b:	eb c9                	jmp    c001ac36 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001ac6d:	83 c4 08             	add    esp,0x8
c001ac70:	5b                   	pop    ebx
c001ac71:	c3                   	ret    

c001ac72 <SoundDevice::SoundDevice(char const*)>:
c001ac72:	83 ec 1c             	sub    esp,0x1c
c001ac75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac79:	83 ec 08             	sub    esp,0x8
c001ac7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac80:	50                   	push   eax
c001ac81:	e8 e4 8c ff ff       	call   c001396a <Device::Device(char const*)>
c001ac86:	83 c4 10             	add    esp,0x10
c001ac89:	ba 28 a6 03 c0       	mov    edx,0xc003a628
c001ac8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac92:	89 10                	mov    DWORD PTR [eax],edx
c001ac94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac98:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001aca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001acb0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acb8:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001acbd:	7f 19                	jg     c001acd8 <SoundDevice::SoundDevice(char const*)+0x66>
c001acbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acc7:	83 c2 54             	add    edx,0x54
c001acca:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001acd2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001acd6:	eb e0                	jmp    c001acb8 <SoundDevice::SoundDevice(char const*)+0x46>
c001acd8:	90                   	nop
c001acd9:	83 c4 1c             	add    esp,0x1c
c001acdc:	c3                   	ret    
c001acdd:	90                   	nop

c001acde <SoundDevice::~SoundDevice()>:
c001acde:	53                   	push   ebx
c001acdf:	83 ec 18             	sub    esp,0x18
c001ace2:	ba 28 a6 03 c0       	mov    edx,0xc003a628
c001ace7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aceb:	89 10                	mov    DWORD PTR [eax],edx
c001aced:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acf5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001acfa:	7f 46                	jg     c001ad42 <SoundDevice::~SoundDevice()+0x64>
c001acfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad04:	83 c2 54             	add    edx,0x54
c001ad07:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ad0b:	85 c0                	test   eax,eax
c001ad0d:	74 2d                	je     c001ad3c <SoundDevice::~SoundDevice()+0x5e>
c001ad0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad17:	83 c2 54             	add    edx,0x54
c001ad1a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ad1e:	85 db                	test   ebx,ebx
c001ad20:	74 1a                	je     c001ad3c <SoundDevice::~SoundDevice()+0x5e>
c001ad22:	83 ec 0c             	sub    esp,0xc
c001ad25:	53                   	push   ebx
c001ad26:	e8 03 fd ff ff       	call   c001aa2e <SoundChannel::~SoundChannel()>
c001ad2b:	83 c4 10             	add    esp,0x10
c001ad2e:	83 ec 08             	sub    esp,0x8
c001ad31:	6a 2c                	push   0x2c
c001ad33:	53                   	push   ebx
c001ad34:	e8 46 77 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001ad39:	83 c4 10             	add    esp,0x10
c001ad3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad40:	eb b3                	jmp    c001acf5 <SoundDevice::~SoundDevice()+0x17>
c001ad42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad46:	83 ec 0c             	sub    esp,0xc
c001ad49:	50                   	push   eax
c001ad4a:	e8 cd 88 ff ff       	call   c001361c <Device::~Device()>
c001ad4f:	83 c4 10             	add    esp,0x10
c001ad52:	90                   	nop
c001ad53:	83 c4 18             	add    esp,0x18
c001ad56:	5b                   	pop    ebx
c001ad57:	c3                   	ret    

c001ad58 <SoundDevice::~SoundDevice()>:
c001ad58:	83 ec 0c             	sub    esp,0xc
c001ad5b:	83 ec 0c             	sub    esp,0xc
c001ad5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad62:	e8 77 ff ff ff       	call   c001acde <SoundDevice::~SoundDevice()>
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	83 ec 08             	sub    esp,0x8
c001ad6d:	68 e4 01 00 00       	push   0x1e4
c001ad72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad76:	e8 04 77 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001ad7b:	83 c4 10             	add    esp,0x10
c001ad7e:	83 c4 0c             	add    esp,0xc
c001ad81:	c3                   	ret    

c001ad82 <SoundDevice::getFreeChannelNum()>:
c001ad82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad86:	31 c0                	xor    eax,eax
c001ad88:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ad90:	74 09                	je     c001ad9b <SoundDevice::getFreeChannelNum()+0x19>
c001ad92:	40                   	inc    eax
c001ad93:	83 f8 20             	cmp    eax,0x20
c001ad96:	75 f0                	jne    c001ad88 <SoundDevice::getFreeChannelNum()+0x6>
c001ad98:	83 c8 ff             	or     eax,0xffffffff
c001ad9b:	c3                   	ret    

c001ad9c <SoundDevice::addChannel(SoundChannel*)>:
c001ad9c:	56                   	push   esi
c001ad9d:	53                   	push   ebx
c001ad9e:	51                   	push   ecx
c001ad9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ada3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ada7:	53                   	push   ebx
c001ada8:	e8 d5 ff ff ff       	call   c001ad82 <SoundDevice::getFreeChannelNum()>
c001adad:	5a                   	pop    edx
c001adae:	83 f8 ff             	cmp    eax,0xffffffff
c001adb1:	74 51                	je     c001ae04 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001adb3:	85 f6                	test   esi,esi
c001adb5:	74 4d                	je     c001ae04 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001adb7:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001adbe:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001adc5:	75 30                	jne    c001adf7 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001adc7:	83 ec 0c             	sub    esp,0xc
c001adca:	56                   	push   esi
c001adcb:	e8 c4 fd ff ff       	call   c001ab94 <SoundChannel::getSampleRate()>
c001add0:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001add6:	89 34 24             	mov    DWORD PTR [esp],esi
c001add9:	e8 be fd ff ff       	call   c001ab9c <SoundChannel::getBits()>
c001adde:	83 c4 0c             	add    esp,0xc
c001ade1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ade7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ade9:	50                   	push   eax
c001adea:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001adf0:	53                   	push   ebx
c001adf1:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001adf4:	83 c4 10             	add    esp,0x10
c001adf7:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001adfd:	b8 01 00 00 00       	mov    eax,0x1
c001ae02:	eb 03                	jmp    c001ae07 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ae04:	83 c8 ff             	or     eax,0xffffffff
c001ae07:	5a                   	pop    edx
c001ae08:	5b                   	pop    ebx
c001ae09:	5e                   	pop    esi
c001ae0a:	c3                   	ret    
c001ae0b:	90                   	nop

c001ae0c <SoundDevice::removeChannel(int)>:
c001ae0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae14:	83 fa 1f             	cmp    edx,0x1f
c001ae17:	77 23                	ja     c001ae3c <SoundDevice::removeChannel(int)+0x30>
c001ae19:	8d 14 90             	lea    edx,[eax+edx*4]
c001ae1c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ae23:	74 17                	je     c001ae3c <SoundDevice::removeChannel(int)+0x30>
c001ae25:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001ae2f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ae35:	75 05                	jne    c001ae3c <SoundDevice::removeChannel(int)+0x30>
c001ae37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae39:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001ae3c:	c3                   	ret    
c001ae3d:	90                   	nop

c001ae3e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001ae3e:	56                   	push   esi
c001ae3f:	53                   	push   ebx
c001ae40:	31 db                	xor    ebx,ebx
c001ae42:	83 ec 14             	sub    esp,0x14
c001ae45:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ae49:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001ae4d:	7d 55                	jge    c001aea4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001ae4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae53:	d9 e8                	fld1   
c001ae55:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001ae58:	d8 0d 58 a6 03 c0    	fmul   DWORD PTR ds:0xc003a658
c001ae5e:	d8 0d 5c a6 03 c0    	fmul   DWORD PTR ds:0xc003a65c
c001ae64:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ae68:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ae6c:	d8 15 60 a6 03 c0    	fcom   DWORD PTR ds:0xc003a660
c001ae72:	df e0                	fnstsw ax
c001ae74:	9e                   	sahf   
c001ae75:	72 08                	jb     c001ae7f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001ae77:	dd d8                	fstp   st(0)
c001ae79:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ae7d:	eb 22                	jmp    c001aea1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ae7f:	d9 ee                	fldz   
c001ae81:	d8 d9                	fcomp  st(1)
c001ae83:	df e0                	fnstsw ax
c001ae85:	9e                   	sahf   
c001ae86:	72 08                	jb     c001ae90 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001ae88:	dd d8                	fstp   st(0)
c001ae8a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ae8e:	eb 11                	jmp    c001aea1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ae90:	83 ec 10             	sub    esp,0x10
c001ae93:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ae96:	e8 c1 3a 00 00       	call   c001e95c <lrintf>
c001ae9b:	83 c4 10             	add    esp,0x10
c001ae9e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001aea1:	43                   	inc    ebx
c001aea2:	eb a5                	jmp    c001ae49 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001aea4:	83 c4 14             	add    esp,0x14
c001aea7:	5b                   	pop    ebx
c001aea8:	5e                   	pop    esi
c001aea9:	c3                   	ret    

c001aeaa <SoundDevice::getAudio(int, float*, float*)>:
c001aeaa:	55                   	push   ebp
c001aeab:	57                   	push   edi
c001aeac:	56                   	push   esi
c001aead:	53                   	push   ebx
c001aeae:	31 db                	xor    ebx,ebx
c001aeb0:	83 ec 20             	sub    esp,0x20
c001aeb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aeb7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aebb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001aebf:	c1 e0 02             	shl    eax,0x2
c001aec2:	50                   	push   eax
c001aec3:	6a 00                	push   0x0
c001aec5:	55                   	push   ebp
c001aec6:	e8 e0 57 fe ff       	call   c00006ab <memset>
c001aecb:	83 c4 10             	add    esp,0x10
c001aece:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001aed2:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001aed9:	85 c0                	test   eax,eax
c001aedb:	0f 84 94 00 00 00    	je     c001af75 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aee1:	83 ec 0c             	sub    esp,0xc
c001aee4:	50                   	push   eax
c001aee5:	e8 a2 fc ff ff       	call   c001ab8c <SoundChannel::paused()>
c001aeea:	83 c4 10             	add    esp,0x10
c001aeed:	84 c0                	test   al,al
c001aeef:	0f 85 80 00 00 00    	jne    c001af75 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aef5:	83 ec 0c             	sub    esp,0xc
c001aef8:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aeff:	e8 76 fb ff ff       	call   c001aa7a <SoundChannel::getVolume()>
c001af04:	83 c4 10             	add    esp,0x10
c001af07:	85 c0                	test   eax,eax
c001af09:	74 6a                	je     c001af75 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af0b:	83 ec 0c             	sub    esp,0xc
c001af0e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001af15:	e8 60 fb ff ff       	call   c001aa7a <SoundChannel::getVolume()>
c001af1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af1e:	d9 05 64 a6 03 c0    	fld    DWORD PTR ds:0xc003a664
c001af24:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001af28:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001af2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001af30:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001af36:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001af3a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001af41:	e8 6e fc ff ff       	call   c001abb4 <SoundChannel::unbuffer(float*, int, int)>
c001af46:	83 c4 20             	add    esp,0x20
c001af49:	31 d2                	xor    edx,edx
c001af4b:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001af4f:	39 c2                	cmp    edx,eax
c001af51:	7d 1a                	jge    c001af6d <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001af53:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001af57:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001af5a:	d8 c9                	fmul   st,st(1)
c001af5c:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001af62:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001af66:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001af6a:	42                   	inc    edx
c001af6b:	eb e2                	jmp    c001af4f <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001af6d:	dd d8                	fstp   st(0)
c001af6f:	39 c7                	cmp    edi,eax
c001af71:	7e 02                	jle    c001af75 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af73:	89 c7                	mov    edi,eax
c001af75:	43                   	inc    ebx
c001af76:	83 fb 20             	cmp    ebx,0x20
c001af79:	0f 85 53 ff ff ff    	jne    c001aed2 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001af7f:	83 c4 1c             	add    esp,0x1c
c001af82:	89 f8                	mov    eax,edi
c001af84:	5b                   	pop    ebx
c001af85:	5e                   	pop    esi
c001af86:	5f                   	pop    edi
c001af87:	5d                   	pop    ebp
c001af88:	c3                   	ret    
c001af89:	90                   	nop

c001af8a <PCI::open(int, int, void*)>:
c001af8a:	83 ec 18             	sub    esp,0x18
c001af8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af91:	8b 10                	mov    edx,DWORD PTR [eax]
c001af93:	50                   	push   eax
c001af94:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001af97:	31 c0                	xor    eax,eax
c001af99:	83 c4 1c             	add    esp,0x1c
c001af9c:	c3                   	ret    
c001af9d:	90                   	nop

c001af9e <PCI::close(int, int, void*)>:
c001af9e:	31 c0                	xor    eax,eax
c001afa0:	c3                   	ret    
c001afa1:	90                   	nop

c001afa2 <PCI::PCI()>:
c001afa2:	83 ec 0c             	sub    esp,0xc
c001afa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa9:	83 ec 08             	sub    esp,0x8
c001afac:	68 68 a6 03 c0       	push   0xc003a668
c001afb1:	50                   	push   eax
c001afb2:	e8 3f 80 ff ff       	call   c0012ff6 <Bus::Bus(char const*)>
c001afb7:	83 c4 10             	add    esp,0x10
c001afba:	ba 14 a7 03 c0       	mov    edx,0xc003a714
c001afbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afc3:	89 10                	mov    DWORD PTR [eax],edx
c001afc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afc9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001afcf:	0f b6 d0             	movzx  edx,al
c001afd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd6:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001afdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afe1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001afe7:	0f b6 d0             	movzx  edx,al
c001afea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afee:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001aff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001affd:	8d 50 01             	lea    edx,[eax+0x1]
c001b000:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b004:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b00a:	0f b6 d0             	movzx  edx,al
c001b00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b011:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b015:	83 c9 c0             	or     ecx,0xffffffc0
c001b018:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b01c:	90                   	nop
c001b01d:	83 c4 0c             	add    esp,0xc
c001b020:	c3                   	ret    
c001b021:	90                   	nop

c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b022:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b026:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b02b:	89 ca                	mov    edx,ecx
c001b02d:	c1 e0 10             	shl    eax,0x10
c001b030:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b036:	09 d0                	or     eax,edx
c001b038:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b03d:	c1 e2 08             	shl    edx,0x8
c001b040:	09 d0                	or     eax,edx
c001b042:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b047:	c1 e2 0b             	shl    edx,0xb
c001b04a:	09 d0                	or     eax,edx
c001b04c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b051:	0d 00 00 00 80       	or     eax,0x80000000
c001b056:	ef                   	out    dx,eax
c001b057:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b05c:	ed                   	in     eax,dx
c001b05d:	83 e1 02             	and    ecx,0x2
c001b060:	0f b6 c9             	movzx  ecx,cl
c001b063:	c1 e1 03             	shl    ecx,0x3
c001b066:	d3 e8                	shr    eax,cl
c001b068:	c3                   	ret    
c001b069:	90                   	nop

c001b06a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b06a:	6a 00                	push   0x0
c001b06c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b071:	50                   	push   eax
c001b072:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b077:	50                   	push   eax
c001b078:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b07d:	50                   	push   eax
c001b07e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b082:	e8 9b ff ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b087:	83 c4 14             	add    esp,0x14
c001b08a:	c3                   	ret    
c001b08b:	90                   	nop

c001b08c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b08c:	6a 0e                	push   0xe
c001b08e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b093:	50                   	push   eax
c001b094:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b099:	50                   	push   eax
c001b09a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b09f:	50                   	push   eax
c001b0a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0a4:	e8 79 ff ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0a9:	83 c4 14             	add    esp,0x14
c001b0ac:	0f b6 c0             	movzx  eax,al
c001b0af:	c3                   	ret    

c001b0b0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b0b0:	55                   	push   ebp
c001b0b1:	57                   	push   edi
c001b0b2:	56                   	push   esi
c001b0b3:	53                   	push   ebx
c001b0b4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b0b9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b0be:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b0c3:	6a 0a                	push   0xa
c001b0c5:	56                   	push   esi
c001b0c6:	55                   	push   ebp
c001b0c7:	57                   	push   edi
c001b0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b0cc:	e8 51 ff ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0d1:	6a 0a                	push   0xa
c001b0d3:	89 c3                	mov    ebx,eax
c001b0d5:	56                   	push   esi
c001b0d6:	0f b6 db             	movzx  ebx,bl
c001b0d9:	55                   	push   ebp
c001b0da:	57                   	push   edi
c001b0db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b0df:	e8 3e ff ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0e4:	83 c4 28             	add    esp,0x28
c001b0e7:	25 00 ff 00 00       	and    eax,0xff00
c001b0ec:	09 d8                	or     eax,ebx
c001b0ee:	5b                   	pop    ebx
c001b0ef:	5e                   	pop    esi
c001b0f0:	5f                   	pop    edi
c001b0f1:	5d                   	pop    ebp
c001b0f2:	c3                   	ret    
c001b0f3:	90                   	nop

c001b0f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b0f4:	6a 08                	push   0x8
c001b0f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0fb:	50                   	push   eax
c001b0fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b101:	50                   	push   eax
c001b102:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b107:	50                   	push   eax
c001b108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b10c:	e8 11 ff ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b111:	83 c4 14             	add    esp,0x14
c001b114:	0f b6 c4             	movzx  eax,ah
c001b117:	c3                   	ret    

c001b118 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b118:	6a 08                	push   0x8
c001b11a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b11f:	50                   	push   eax
c001b120:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b125:	50                   	push   eax
c001b126:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b12b:	50                   	push   eax
c001b12c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b130:	e8 ed fe ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b135:	83 c4 14             	add    esp,0x14
c001b138:	c3                   	ret    
c001b139:	90                   	nop

c001b13a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b13a:	6a 3c                	push   0x3c
c001b13c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b141:	50                   	push   eax
c001b142:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b147:	50                   	push   eax
c001b148:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b14d:	50                   	push   eax
c001b14e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b152:	e8 cb fe ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b157:	83 c4 14             	add    esp,0x14
c001b15a:	c3                   	ret    
c001b15b:	90                   	nop

c001b15c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b15c:	6a 18                	push   0x18
c001b15e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b163:	50                   	push   eax
c001b164:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b169:	50                   	push   eax
c001b16a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b16f:	50                   	push   eax
c001b170:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b174:	e8 a9 fe ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b179:	83 c4 14             	add    esp,0x14
c001b17c:	0f b6 c4             	movzx  eax,ah
c001b17f:	c3                   	ret    

c001b180 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b180:	55                   	push   ebp
c001b181:	57                   	push   edi
c001b182:	56                   	push   esi
c001b183:	53                   	push   ebx
c001b184:	50                   	push   eax
c001b185:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b189:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b18e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b193:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b198:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b19f:	8d 43 12             	lea    eax,[ebx+0x12]
c001b1a2:	83 c3 10             	add    ebx,0x10
c001b1a5:	0f b6 c0             	movzx  eax,al
c001b1a8:	0f b6 db             	movzx  ebx,bl
c001b1ab:	50                   	push   eax
c001b1ac:	51                   	push   ecx
c001b1ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b1b1:	57                   	push   edi
c001b1b2:	55                   	push   ebp
c001b1b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b1b7:	e8 66 fe ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1bc:	53                   	push   ebx
c001b1bd:	89 c6                	mov    esi,eax
c001b1bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b1c3:	c1 e6 10             	shl    esi,0x10
c001b1c6:	51                   	push   ecx
c001b1c7:	57                   	push   edi
c001b1c8:	55                   	push   ebp
c001b1c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b1cd:	e8 50 fe ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1d2:	83 c4 2c             	add    esp,0x2c
c001b1d5:	0f b7 c0             	movzx  eax,ax
c001b1d8:	5b                   	pop    ebx
c001b1d9:	09 f0                	or     eax,esi
c001b1db:	5e                   	pop    esi
c001b1dc:	5f                   	pop    edi
c001b1dd:	5d                   	pop    ebp
c001b1de:	c3                   	ret    
c001b1df:	90                   	nop

c001b1e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b1e0:	53                   	push   ebx
c001b1e1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1e6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b1eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1ef:	c1 e1 10             	shl    ecx,0x10
c001b1f2:	25 fc 00 00 00       	and    eax,0xfc
c001b1f7:	09 c1                	or     ecx,eax
c001b1f9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1fe:	c1 e0 08             	shl    eax,0x8
c001b201:	09 c1                	or     ecx,eax
c001b203:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b208:	c1 e0 0b             	shl    eax,0xb
c001b20b:	09 c1                	or     ecx,eax
c001b20d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b213:	89 c8                	mov    eax,ecx
c001b215:	ef                   	out    dx,eax
c001b216:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b21b:	ed                   	in     eax,dx
c001b21c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b221:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b226:	74 0a                	je     c001b232 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b228:	0f b7 d8             	movzx  ebx,ax
c001b22b:	89 d0                	mov    eax,edx
c001b22d:	c1 e0 10             	shl    eax,0x10
c001b230:	eb 05                	jmp    c001b237 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b232:	66 31 c0             	xor    ax,ax
c001b235:	89 d3                	mov    ebx,edx
c001b237:	09 c3                	or     ebx,eax
c001b239:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b23e:	89 c8                	mov    eax,ecx
c001b240:	ef                   	out    dx,eax
c001b241:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b246:	89 d8                	mov    eax,ebx
c001b248:	ef                   	out    dx,eax
c001b249:	5b                   	pop    ebx
c001b24a:	c3                   	ret    
c001b24b:	90                   	nop

c001b24c <PCI::checkBus(unsigned char)>:
c001b24c:	56                   	push   esi
c001b24d:	53                   	push   ebx
c001b24e:	31 db                	xor    ebx,ebx
c001b250:	51                   	push   ecx
c001b251:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b256:	52                   	push   edx
c001b257:	53                   	push   ebx
c001b258:	43                   	inc    ebx
c001b259:	56                   	push   esi
c001b25a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b25e:	e8 4d 03 00 00       	call   c001b5b0 <PCI::checkDevice(unsigned char, unsigned char)>
c001b263:	83 c4 10             	add    esp,0x10
c001b266:	83 fb 20             	cmp    ebx,0x20
c001b269:	75 eb                	jne    c001b256 <PCI::checkBus(unsigned char)+0xa>
c001b26b:	58                   	pop    eax
c001b26c:	5b                   	pop    ebx
c001b26d:	5e                   	pop    esi
c001b26e:	c3                   	ret    
c001b26f:	90                   	nop

c001b270 <PCI::foundDevice(PCIDeviceInfo)>:
c001b270:	55                   	push   ebp
c001b271:	57                   	push   edi
c001b272:	56                   	push   esi
c001b273:	53                   	push   ebx
c001b274:	83 ec 1c             	sub    esp,0x1c
c001b277:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b27b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b281:	0f 84 51 01 00 00    	je     c001b3d8 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b287:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b28b:	66 81 f9 06 04       	cmp    cx,0x406
c001b290:	75 2c                	jne    c001b2be <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b292:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b297:	50                   	push   eax
c001b298:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b29d:	50                   	push   eax
c001b29e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b2a3:	50                   	push   eax
c001b2a4:	56                   	push   esi
c001b2a5:	e8 b2 fe ff ff       	call   c001b15c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b2aa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b2ae:	0f b6 c0             	movzx  eax,al
c001b2b1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b2b5:	83 c4 2c             	add    esp,0x2c
c001b2b8:	5b                   	pop    ebx
c001b2b9:	5e                   	pop    esi
c001b2ba:	5f                   	pop    edi
c001b2bb:	5d                   	pop    ebp
c001b2bc:	eb 8e                	jmp    c001b24c <PCI::checkBus(unsigned char)>
c001b2be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b2c2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b2c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2cc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b2d0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b2d4:	88 d3                	mov    bl,dl
c001b2d6:	85 c0                	test   eax,eax
c001b2d8:	74 33                	je     c001b30d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b2da:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b2dd:	85 d2                	test   edx,edx
c001b2df:	74 28                	je     c001b309 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b2e1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b2e7:	31 ef                	xor    edi,ebp
c001b2e9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b2ef:	75 18                	jne    c001b309 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b2f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b2f5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b2fb:	75 0c                	jne    c001b309 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b2fd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b303:	0f 84 cf 00 00 00    	je     c001b3d8 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b309:	8b 00                	mov    eax,DWORD PTR [eax]
c001b30b:	eb c9                	jmp    c001b2d6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b30d:	66 81 f9 01 06       	cmp    cx,0x601
c001b312:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b316:	75 18                	jne    c001b330 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b318:	83 ec 0c             	sub    esp,0xc
c001b31b:	68 58 01 00 00       	push   0x158
c001b320:	e8 4b 71 ff ff       	call   c0012470 <operator new(unsigned long)>
c001b325:	59                   	pop    ecx
c001b326:	89 c5                	mov    ebp,eax
c001b328:	5f                   	pop    edi
c001b329:	68 70 a6 03 c0       	push   0xc003a670
c001b32e:	eb 7d                	jmp    c001b3ad <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b330:	66 81 f9 01 01       	cmp    cx,0x101
c001b335:	75 60                	jne    c001b397 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b337:	83 ec 0c             	sub    esp,0xc
c001b33a:	68 70 02 00 00       	push   0x270
c001b33f:	e8 2c 71 ff ff       	call   c0012470 <operator new(unsigned long)>
c001b344:	89 04 24             	mov    DWORD PTR [esp],eax
c001b347:	89 c5                	mov    ebp,eax
c001b349:	e8 e0 07 00 00       	call   c001bb2e <IDE::IDE()>
c001b34e:	58                   	pop    eax
c001b34f:	5a                   	pop    edx
c001b350:	55                   	push   ebp
c001b351:	56                   	push   esi
c001b352:	e8 23 84 ff ff       	call   c001377a <Device::addChild(Device*)>
c001b357:	83 ec 1c             	sub    esp,0x1c
c001b35a:	b9 09 00 00 00       	mov    ecx,0x9
c001b35f:	fc                   	cld    
c001b360:	89 e7                	mov    edi,esp
c001b362:	89 de                	mov    esi,ebx
c001b364:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b366:	55                   	push   ebp
c001b367:	e8 e8 82 ff ff       	call   c0013654 <Device::preOpenPCI(PCIDeviceInfo)>
c001b36c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b36f:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b373:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b37b:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b383:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b38b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b38e:	83 c4 4c             	add    esp,0x4c
c001b391:	5b                   	pop    ebx
c001b392:	5e                   	pop    esi
c001b393:	5f                   	pop    edi
c001b394:	5d                   	pop    ebp
c001b395:	ff e0                	jmp    eax
c001b397:	83 ec 0c             	sub    esp,0xc
c001b39a:	68 58 01 00 00       	push   0x158
c001b39f:	e8 cc 70 ff ff       	call   c0012470 <operator new(unsigned long)>
c001b3a4:	59                   	pop    ecx
c001b3a5:	89 c5                	mov    ebp,eax
c001b3a7:	5f                   	pop    edi
c001b3a8:	68 8f a6 03 c0       	push   0xc003a68f
c001b3ad:	55                   	push   ebp
c001b3ae:	e8 b3 86 ff ff       	call   c0013a66 <DriverlessDevice::DriverlessDevice(char const*)>
c001b3b3:	58                   	pop    eax
c001b3b4:	5a                   	pop    edx
c001b3b5:	55                   	push   ebp
c001b3b6:	56                   	push   esi
c001b3b7:	e8 be 83 ff ff       	call   c001377a <Device::addChild(Device*)>
c001b3bc:	b9 09 00 00 00       	mov    ecx,0x9
c001b3c1:	fc                   	cld    
c001b3c2:	89 df                	mov    edi,ebx
c001b3c4:	89 de                	mov    esi,ebx
c001b3c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b3c8:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b3cc:	83 c4 2c             	add    esp,0x2c
c001b3cf:	5b                   	pop    ebx
c001b3d0:	5e                   	pop    esi
c001b3d1:	5f                   	pop    edi
c001b3d2:	5d                   	pop    ebp
c001b3d3:	e9 7c 82 ff ff       	jmp    c0013654 <Device::preOpenPCI(PCIDeviceInfo)>
c001b3d8:	83 c4 1c             	add    esp,0x1c
c001b3db:	5b                   	pop    ebx
c001b3dc:	5e                   	pop    esi
c001b3dd:	5f                   	pop    edi
c001b3de:	5d                   	pop    ebp
c001b3df:	c3                   	ret    

c001b3e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b3e0:	55                   	push   ebp
c001b3e1:	57                   	push   edi
c001b3e2:	56                   	push   esi
c001b3e3:	53                   	push   ebx
c001b3e4:	83 ec 5c             	sub    esp,0x5c
c001b3e7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b3eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b3ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b3f3:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b3f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3fc:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b400:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b405:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b409:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b40e:	6a 0c                	push   0xc
c001b410:	55                   	push   ebp
c001b411:	53                   	push   ebx
c001b412:	57                   	push   edi
c001b413:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b41a:	e8 03 fc ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b41f:	83 c4 0c             	add    esp,0xc
c001b422:	6a 00                	push   0x0
c001b424:	68 a9 a6 03 c0       	push   0xc003a6a9
c001b429:	e8 92 1a ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001b42e:	55                   	push   ebp
c001b42f:	53                   	push   ebx
c001b430:	57                   	push   edi
c001b431:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b438:	e8 73 fc ff ff       	call   c001b0b0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b43d:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b442:	83 c4 20             	add    esp,0x20
c001b445:	55                   	push   ebp
c001b446:	53                   	push   ebx
c001b447:	57                   	push   edi
c001b448:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b44c:	e8 e9 fc ff ff       	call   c001b13a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b451:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b458:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b45c:	55                   	push   ebp
c001b45d:	53                   	push   ebx
c001b45e:	57                   	push   edi
c001b45f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b466:	e8 b7 fb ff ff       	call   c001b022 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b46b:	0f b6 c4             	movzx  eax,ah
c001b46e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b472:	83 c4 18             	add    esp,0x18
c001b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b479:	68 bd a6 03 c0       	push   0xc003a6bd
c001b47e:	e8 3d 1a ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001b483:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b487:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b48b:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001b490:	83 c4 10             	add    esp,0x10
c001b493:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b499:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b4a0:	74 6c                	je     c001b50e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b4a2:	31 f6                	xor    esi,esi
c001b4a4:	8b 15 e8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9e8
c001b4aa:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b4b0:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b4b6:	7e 56                	jle    c001b50e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b4b8:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b4bb:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b4c2:	39 cb                	cmp    ebx,ecx
c001b4c4:	75 45                	jne    c001b50b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b4c6:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b4cd:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b4d1:	75 38                	jne    c001b50b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b4d3:	83 ec 0c             	sub    esp,0xc
c001b4d6:	68 cc a6 03 c0       	push   0xc003a6cc
c001b4db:	e8 e0 19 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001b4e0:	8b 15 e8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9e8
c001b4e6:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b4ec:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b4f4:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b4f8:	52                   	push   edx
c001b4f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4fd:	53                   	push   ebx
c001b4fe:	68 f1 a6 03 c0       	push   0xc003a6f1
c001b503:	e8 b8 19 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001b508:	83 c4 20             	add    esp,0x20
c001b50b:	46                   	inc    esi
c001b50c:	eb 96                	jmp    c001b4a4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b50e:	31 d2                	xor    edx,edx
c001b510:	83 ec 0c             	sub    esp,0xc
c001b513:	55                   	push   ebp
c001b514:	53                   	push   ebx
c001b515:	57                   	push   edi
c001b516:	52                   	push   edx
c001b517:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b51b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b522:	e8 59 fc ff ff       	call   c001b180 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b527:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b52b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b52f:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b533:	42                   	inc    edx
c001b534:	83 c4 20             	add    esp,0x20
c001b537:	83 fa 06             	cmp    edx,0x6
c001b53a:	75 d4                	jne    c001b510 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b53c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b540:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b544:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b548:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b54c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b550:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b554:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b559:	86 e0                	xchg   al,ah
c001b55b:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b560:	55                   	push   ebp
c001b561:	53                   	push   ebx
c001b562:	57                   	push   edi
c001b563:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b567:	e8 88 fb ff ff       	call   c001b0f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b56c:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b570:	55                   	push   ebp
c001b571:	53                   	push   ebx
c001b572:	57                   	push   edi
c001b573:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b57a:	e8 eb fa ff ff       	call   c001b06a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b57f:	83 ec 0c             	sub    esp,0xc
c001b582:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b587:	b9 09 00 00 00       	mov    ecx,0x9
c001b58c:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b590:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b594:	fc                   	cld    
c001b595:	89 e7                	mov    edi,esp
c001b597:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b599:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b5a0:	e8 cb fc ff ff       	call   c001b270 <PCI::foundDevice(PCIDeviceInfo)>
c001b5a5:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b5ab:	5b                   	pop    ebx
c001b5ac:	5e                   	pop    esi
c001b5ad:	5f                   	pop    edi
c001b5ae:	5d                   	pop    ebp
c001b5af:	c3                   	ret    

c001b5b0 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b5b0:	55                   	push   ebp
c001b5b1:	57                   	push   edi
c001b5b2:	56                   	push   esi
c001b5b3:	53                   	push   ebx
c001b5b4:	83 ec 0c             	sub    esp,0xc
c001b5b7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b5bb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b5c0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b5c5:	6a 00                	push   0x0
c001b5c7:	56                   	push   esi
c001b5c8:	57                   	push   edi
c001b5c9:	55                   	push   ebp
c001b5ca:	e8 9b fa ff ff       	call   c001b06a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5cf:	6a 00                	push   0x0
c001b5d1:	56                   	push   esi
c001b5d2:	57                   	push   edi
c001b5d3:	55                   	push   ebp
c001b5d4:	e8 07 fe ff ff       	call   c001b3e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b5d9:	83 c4 20             	add    esp,0x20
c001b5dc:	6a 00                	push   0x0
c001b5de:	56                   	push   esi
c001b5df:	57                   	push   edi
c001b5e0:	55                   	push   ebp
c001b5e1:	e8 a6 fa ff ff       	call   c001b08c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b5e6:	83 c4 10             	add    esp,0x10
c001b5e9:	84 c0                	test   al,al
c001b5eb:	79 27                	jns    c001b614 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b5ed:	bb 01 00 00 00       	mov    ebx,0x1
c001b5f2:	53                   	push   ebx
c001b5f3:	56                   	push   esi
c001b5f4:	57                   	push   edi
c001b5f5:	55                   	push   ebp
c001b5f6:	e8 6f fa ff ff       	call   c001b06a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5fb:	83 c4 10             	add    esp,0x10
c001b5fe:	66 40                	inc    ax
c001b600:	74 0c                	je     c001b60e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b602:	53                   	push   ebx
c001b603:	56                   	push   esi
c001b604:	57                   	push   edi
c001b605:	55                   	push   ebp
c001b606:	e8 d5 fd ff ff       	call   c001b3e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b60b:	83 c4 10             	add    esp,0x10
c001b60e:	43                   	inc    ebx
c001b60f:	83 fb 08             	cmp    ebx,0x8
c001b612:	75 de                	jne    c001b5f2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b614:	83 c4 0c             	add    esp,0xc
c001b617:	5b                   	pop    ebx
c001b618:	5e                   	pop    esi
c001b619:	5f                   	pop    edi
c001b61a:	5d                   	pop    ebp
c001b61b:	c3                   	ret    

c001b61c <PCI::detect()>:
c001b61c:	56                   	push   esi
c001b61d:	53                   	push   ebx
c001b61e:	53                   	push   ebx
c001b61f:	31 db                	xor    ebx,ebx
c001b621:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b625:	6a 00                	push   0x0
c001b627:	6a 00                	push   0x0
c001b629:	6a 00                	push   0x0
c001b62b:	56                   	push   esi
c001b62c:	e8 5b fa ff ff       	call   c001b08c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b631:	83 c4 10             	add    esp,0x10
c001b634:	a8 80                	test   al,0x80
c001b636:	75 21                	jne    c001b659 <PCI::detect()+0x3d>
c001b638:	51                   	push   ecx
c001b639:	51                   	push   ecx
c001b63a:	6a 00                	push   0x0
c001b63c:	56                   	push   esi
c001b63d:	e8 0a fc ff ff       	call   c001b24c <PCI::checkBus(unsigned char)>
c001b642:	83 c4 10             	add    esp,0x10
c001b645:	eb 24                	jmp    c001b66b <PCI::detect()+0x4f>
c001b647:	52                   	push   edx
c001b648:	52                   	push   edx
c001b649:	53                   	push   ebx
c001b64a:	43                   	inc    ebx
c001b64b:	56                   	push   esi
c001b64c:	e8 fb fb ff ff       	call   c001b24c <PCI::checkBus(unsigned char)>
c001b651:	83 c4 10             	add    esp,0x10
c001b654:	83 fb 08             	cmp    ebx,0x8
c001b657:	74 12                	je     c001b66b <PCI::detect()+0x4f>
c001b659:	53                   	push   ebx
c001b65a:	6a 00                	push   0x0
c001b65c:	6a 00                	push   0x0
c001b65e:	56                   	push   esi
c001b65f:	e8 06 fa ff ff       	call   c001b06a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b664:	83 c4 10             	add    esp,0x10
c001b667:	66 40                	inc    ax
c001b669:	74 dc                	je     c001b647 <PCI::detect()+0x2b>
c001b66b:	58                   	pop    eax
c001b66c:	5b                   	pop    ebx
c001b66d:	5e                   	pop    esi
c001b66e:	c3                   	ret    
c001b66f:	90                   	nop

c001b670 <RTC::open(int, int, void*)>:
c001b670:	31 c0                	xor    eax,eax
c001b672:	c3                   	ret    
c001b673:	90                   	nop

c001b674 <RTC::close(int, int, void*)>:
c001b674:	31 c0                	xor    eax,eax
c001b676:	c3                   	ret    
c001b677:	90                   	nop

c001b678 <RTC::timeInSecondsUTC()>:
c001b678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b67c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b682:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b688:	c3                   	ret    
c001b689:	90                   	nop

c001b68a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b68a:	31 c0                	xor    eax,eax
c001b68c:	c3                   	ret    
c001b68d:	90                   	nop

c001b68e <RTC::timeInDatetimeUTC()>:
c001b68e:	53                   	push   ebx
c001b68f:	83 ec 14             	sub    esp,0x14
c001b692:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b69a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b69c:	50                   	push   eax
c001b69d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b6a0:	83 c4 0c             	add    esp,0xc
c001b6a3:	52                   	push   edx
c001b6a4:	50                   	push   eax
c001b6a5:	53                   	push   ebx
c001b6a6:	e8 e3 7d ff ff       	call   c001348e <secondsToDatetime(unsigned long long)>
c001b6ab:	89 d8                	mov    eax,ebx
c001b6ad:	83 c4 14             	add    esp,0x14
c001b6b0:	5b                   	pop    ebx
c001b6b1:	c2 04 00             	ret    0x4

c001b6b4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b6b4:	56                   	push   esi
c001b6b5:	53                   	push   ebx
c001b6b6:	83 ec 14             	sub    esp,0x14
c001b6b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6bf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b6c2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b6c6:	52                   	push   edx
c001b6c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6cf:	50                   	push   eax
c001b6d0:	e8 b9 7d ff ff       	call   c001348e <secondsToDatetime(unsigned long long)>
c001b6d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6e1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b6e5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b6e9:	89 f0                	mov    eax,esi
c001b6eb:	83 c4 20             	add    esp,0x20
c001b6ee:	5b                   	pop    ebx
c001b6ef:	5e                   	pop    esi
c001b6f0:	ff e0                	jmp    eax

c001b6f2 <RTC::~RTC()>:
c001b6f2:	83 ec 0c             	sub    esp,0xc
c001b6f5:	ba 6c a7 03 c0       	mov    edx,0xc003a76c
c001b6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6fe:	89 10                	mov    DWORD PTR [eax],edx
c001b700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b704:	83 ec 0c             	sub    esp,0xc
c001b707:	50                   	push   eax
c001b708:	e8 0b 7b ff ff       	call   c0013218 <Clock::~Clock()>
c001b70d:	83 c4 10             	add    esp,0x10
c001b710:	90                   	nop
c001b711:	83 c4 0c             	add    esp,0xc
c001b714:	c3                   	ret    
c001b715:	90                   	nop

c001b716 <RTC::~RTC()>:
c001b716:	83 ec 0c             	sub    esp,0xc
c001b719:	83 ec 0c             	sub    esp,0xc
c001b71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b720:	e8 cd ff ff ff       	call   c001b6f2 <RTC::~RTC()>
c001b725:	83 c4 10             	add    esp,0x10
c001b728:	83 ec 08             	sub    esp,0x8
c001b72b:	68 60 01 00 00       	push   0x160
c001b730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b734:	e8 46 6d ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001b739:	83 c4 10             	add    esp,0x10
c001b73c:	83 c4 0c             	add    esp,0xc
c001b73f:	c3                   	ret    

c001b740 <RTC::get_update_in_progress_flag()>:
c001b740:	83 ec 14             	sub    esp,0x14
c001b743:	6a 0a                	push   0xa
c001b745:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b74b:	e8 dc fe fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b750:	83 c4 1c             	add    esp,0x1c
c001b753:	c0 e8 07             	shr    al,0x7
c001b756:	c3                   	ret    
c001b757:	90                   	nop

c001b758 <RTC::completeRTCRefresh()>:
c001b758:	55                   	push   ebp
c001b759:	57                   	push   edi
c001b75a:	56                   	push   esi
c001b75b:	53                   	push   ebx
c001b75c:	83 ec 2c             	sub    esp,0x2c
c001b75f:	8b 35 b0 c3 03 c0    	mov    esi,DWORD PTR ds:0xc003c3b0
c001b765:	8b 3d b4 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c3b4
c001b76b:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b771:	83 d7 00             	adc    edi,0x0
c001b774:	83 ec 0c             	sub    esp,0xc
c001b777:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b77b:	e8 c0 ff ff ff       	call   c001b740 <RTC::get_update_in_progress_flag()>
c001b780:	83 c4 10             	add    esp,0x10
c001b783:	84 c0                	test   al,al
c001b785:	74 10                	je     c001b797 <RTC::completeRTCRefresh()+0x3f>
c001b787:	3b 35 b0 c3 03 c0    	cmp    esi,DWORD PTR ds:0xc003c3b0
c001b78d:	89 f8                	mov    eax,edi
c001b78f:	1b 05 b4 c3 03 c0    	sbb    eax,DWORD PTR ds:0xc003c3b4
c001b795:	73 dd                	jae    c001b774 <RTC::completeRTCRefresh()+0x1c>
c001b797:	55                   	push   ebp
c001b798:	55                   	push   ebp
c001b799:	6a 00                	push   0x0
c001b79b:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b7a1:	e8 86 fe fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b7a6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b7aa:	58                   	pop    eax
c001b7ab:	5a                   	pop    edx
c001b7ac:	6a 02                	push   0x2
c001b7ae:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b7b4:	e8 73 fe fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b7b9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b7bd:	59                   	pop    ecx
c001b7be:	5b                   	pop    ebx
c001b7bf:	6a 04                	push   0x4
c001b7c1:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b7c7:	e8 60 fe fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b7cc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b7d0:	5e                   	pop    esi
c001b7d1:	5f                   	pop    edi
c001b7d2:	6a 07                	push   0x7
c001b7d4:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b7da:	e8 4d fe fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b7df:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001b7e3:	5d                   	pop    ebp
c001b7e4:	58                   	pop    eax
c001b7e5:	6a 08                	push   0x8
c001b7e7:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b7ed:	e8 3a fe fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b7f2:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001b7f6:	58                   	pop    eax
c001b7f7:	5a                   	pop    edx
c001b7f8:	6a 09                	push   0x9
c001b7fa:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b800:	e8 27 fe fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b805:	83 c4 10             	add    esp,0x10
c001b808:	0f b6 e8             	movzx  ebp,al
c001b80b:	8b 35 b0 c3 03 c0    	mov    esi,DWORD PTR ds:0xc003c3b0
c001b811:	8b 3d b4 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c3b4
c001b817:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b81d:	83 d7 00             	adc    edi,0x0
c001b820:	83 ec 0c             	sub    esp,0xc
c001b823:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b827:	e8 14 ff ff ff       	call   c001b740 <RTC::get_update_in_progress_flag()>
c001b82c:	83 c4 10             	add    esp,0x10
c001b82f:	84 c0                	test   al,al
c001b831:	74 10                	je     c001b843 <RTC::completeRTCRefresh()+0xeb>
c001b833:	3b 35 b0 c3 03 c0    	cmp    esi,DWORD PTR ds:0xc003c3b0
c001b839:	89 f8                	mov    eax,edi
c001b83b:	1b 05 b4 c3 03 c0    	sbb    eax,DWORD PTR ds:0xc003c3b4
c001b841:	73 dd                	jae    c001b820 <RTC::completeRTCRefresh()+0xc8>
c001b843:	50                   	push   eax
c001b844:	50                   	push   eax
c001b845:	6a 00                	push   0x0
c001b847:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b84d:	e8 da fd fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b852:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b856:	58                   	pop    eax
c001b857:	5a                   	pop    edx
c001b858:	6a 02                	push   0x2
c001b85a:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b860:	e8 c7 fd fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b865:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b869:	59                   	pop    ecx
c001b86a:	5b                   	pop    ebx
c001b86b:	6a 04                	push   0x4
c001b86d:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b873:	e8 b4 fd fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b878:	5e                   	pop    esi
c001b879:	88 c3                	mov    bl,al
c001b87b:	5f                   	pop    edi
c001b87c:	6a 07                	push   0x7
c001b87e:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b884:	e8 a3 fd fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b889:	89 c6                	mov    esi,eax
c001b88b:	58                   	pop    eax
c001b88c:	5a                   	pop    edx
c001b88d:	6a 08                	push   0x8
c001b88f:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b895:	e8 92 fd fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b89a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b89e:	59                   	pop    ecx
c001b89f:	5f                   	pop    edi
c001b8a0:	6a 09                	push   0x9
c001b8a2:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b8a8:	e8 7f fd fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b8ad:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b8b1:	0f b6 f8             	movzx  edi,al
c001b8b4:	83 c4 10             	add    esp,0x10
c001b8b7:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001b8ba:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b8be:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001b8c2:	89 f1                	mov    ecx,esi
c001b8c4:	0f 94 c0             	sete   al
c001b8c7:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001b8cb:	0f 94 c2             	sete   dl
c001b8ce:	21 d0                	and    eax,edx
c001b8d0:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001b8d4:	0f 94 c2             	sete   dl
c001b8d7:	21 c2                	and    edx,eax
c001b8d9:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001b8dd:	0f 94 c0             	sete   al
c001b8e0:	21 d0                	and    eax,edx
c001b8e2:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b8e6:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001b8ea:	0f 94 c1             	sete   cl
c001b8ed:	84 c8                	test   al,cl
c001b8ef:	75 28                	jne    c001b919 <RTC::completeRTCRefresh()+0x1c1>
c001b8f1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b8f5:	89 fd                	mov    ebp,edi
c001b8f7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b8fb:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001b8ff:	89 f0                	mov    eax,esi
c001b901:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001b905:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b909:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b90d:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b910:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b914:	e9 f2 fe ff ff       	jmp    c001b80b <RTC::completeRTCRefresh()+0xb3>
c001b919:	39 fd                	cmp    ebp,edi
c001b91b:	75 d4                	jne    c001b8f1 <RTC::completeRTCRefresh()+0x199>
c001b91d:	55                   	push   ebp
c001b91e:	55                   	push   ebp
c001b91f:	6a 0b                	push   0xb
c001b921:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001b927:	e8 00 fd fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001b92c:	83 c4 10             	add    esp,0x10
c001b92f:	89 c5                	mov    ebp,eax
c001b931:	a8 04                	test   al,0x4
c001b933:	75 75                	jne    c001b9aa <RTC::completeRTCRefresh()+0x252>
c001b935:	b1 0a                	mov    cl,0xa
c001b937:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b93a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b93d:	83 e2 0f             	and    edx,0xf
c001b940:	c0 e8 04             	shr    al,0x4
c001b943:	c1 ef 04             	shr    edi,0x4
c001b946:	f6 e1                	mul    cl
c001b948:	6b ff 0a             	imul   edi,edi,0xa
c001b94b:	01 d0                	add    eax,edx
c001b94d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b951:	88 04 24             	mov    BYTE PTR [esp],al
c001b954:	83 e2 0f             	and    edx,0xf
c001b957:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b95b:	c0 e8 04             	shr    al,0x4
c001b95e:	f6 e1                	mul    cl
c001b960:	01 d0                	add    eax,edx
c001b962:	88 da                	mov    dl,bl
c001b964:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b968:	83 e2 0f             	and    edx,0xf
c001b96b:	88 d8                	mov    al,bl
c001b96d:	83 e3 80             	and    ebx,0xffffff80
c001b970:	c0 e8 04             	shr    al,0x4
c001b973:	83 e0 07             	and    eax,0x7
c001b976:	f6 e1                	mul    cl
c001b978:	01 d0                	add    eax,edx
c001b97a:	89 f2                	mov    edx,esi
c001b97c:	09 c3                	or     ebx,eax
c001b97e:	83 e2 0f             	and    edx,0xf
c001b981:	89 f0                	mov    eax,esi
c001b983:	c0 e8 04             	shr    al,0x4
c001b986:	f6 e1                	mul    cl
c001b988:	8d 34 02             	lea    esi,[edx+eax*1]
c001b98b:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b98f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b993:	83 e2 0f             	and    edx,0xf
c001b996:	c0 e8 04             	shr    al,0x4
c001b999:	f6 e1                	mul    cl
c001b99b:	01 d0                	add    eax,edx
c001b99d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b9a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9a5:	83 e0 0f             	and    eax,0xf
c001b9a8:	01 c7                	add    edi,eax
c001b9aa:	83 e5 02             	and    ebp,0x2
c001b9ad:	75 14                	jne    c001b9c3 <RTC::completeRTCRefresh()+0x26b>
c001b9af:	84 db                	test   bl,bl
c001b9b1:	79 10                	jns    c001b9c3 <RTC::completeRTCRefresh()+0x26b>
c001b9b3:	83 e3 7f             	and    ebx,0x7f
c001b9b6:	b9 18 00 00 00       	mov    ecx,0x18
c001b9bb:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b9be:	99                   	cdq    
c001b9bf:	f7 f9                	idiv   ecx
c001b9c1:	88 d3                	mov    bl,dl
c001b9c3:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b9c9:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001b9cf:	77 06                	ja     c001b9d7 <RTC::completeRTCRefresh()+0x27f>
c001b9d1:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001b9d7:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001b9db:	31 d2                	xor    edx,edx
c001b9dd:	c1 e1 10             	shl    ecx,0x10
c001b9e0:	89 d7                	mov    edi,edx
c001b9e2:	c1 e5 10             	shl    ebp,0x10
c001b9e5:	31 c0                	xor    eax,eax
c001b9e7:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b9ed:	09 cf                	or     edi,ecx
c001b9ef:	89 f1                	mov    ecx,esi
c001b9f1:	89 fa                	mov    edx,edi
c001b9f3:	88 c8                	mov    al,cl
c001b9f5:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001b9f9:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001b9fd:	88 da                	mov    dl,bl
c001b9ff:	0f b7 c8             	movzx  ecx,ax
c001ba02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba06:	09 e9                	or     ecx,ebp
c001ba08:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ba0b:	0f b6 db             	movzx  ebx,bl
c001ba0e:	50                   	push   eax
c001ba0f:	50                   	push   eax
c001ba10:	53                   	push   ebx
c001ba11:	68 38 a7 03 c0       	push   0xc003a738
c001ba16:	e8 a5 14 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001ba1b:	5a                   	pop    edx
c001ba1c:	59                   	pop    ecx
c001ba1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba25:	52                   	push   edx
c001ba26:	50                   	push   eax
c001ba27:	e8 db 78 ff ff       	call   c0013307 <datetimeToSeconds(datetime_t)>
c001ba2c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ba30:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001ba36:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001ba3c:	83 c4 3c             	add    esp,0x3c
c001ba3f:	5b                   	pop    ebx
c001ba40:	5e                   	pop    esi
c001ba41:	5f                   	pop    edi
c001ba42:	5d                   	pop    ebp
c001ba43:	c3                   	ret    

c001ba44 <rtcIRQHandler(regs*, void*)>:
c001ba44:	53                   	push   ebx
c001ba45:	83 ec 10             	sub    esp,0x10
c001ba48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba4c:	6a 0c                	push   0xc
c001ba4e:	ff 35 e8 b9 03 c0    	push   DWORD PTR ds:0xc003b9e8
c001ba54:	e8 d3 fb fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001ba59:	83 c4 10             	add    esp,0x10
c001ba5c:	84 c0                	test   al,al
c001ba5e:	79 24                	jns    c001ba84 <rtcIRQHandler(regs*, void*)+0x40>
c001ba60:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001ba67:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001ba6e:	66 ff 05 c0 d0 03 c0 	inc    WORD PTR ds:0xc003d0c0
c001ba75:	75 0d                	jne    c001ba84 <rtcIRQHandler(regs*, void*)+0x40>
c001ba77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ba7b:	83 c4 08             	add    esp,0x8
c001ba7e:	5b                   	pop    ebx
c001ba7f:	e9 d4 fc ff ff       	jmp    c001b758 <RTC::completeRTCRefresh()>
c001ba84:	83 c4 08             	add    esp,0x8
c001ba87:	5b                   	pop    ebx
c001ba88:	c3                   	ret    
c001ba89:	90                   	nop

c001ba8a <RTC::RTC()>:
c001ba8a:	83 ec 1c             	sub    esp,0x1c
c001ba8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba91:	83 ec 08             	sub    esp,0x8
c001ba94:	68 4e a7 03 c0       	push   0xc003a74e
c001ba99:	50                   	push   eax
c001ba9a:	e8 43 77 ff ff       	call   c00131e2 <Clock::Clock(char const*)>
c001ba9f:	83 c4 10             	add    esp,0x10
c001baa2:	ba 6c a7 03 c0       	mov    edx,0xc003a76c
c001baa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001baab:	89 10                	mov    DWORD PTR [eax],edx
c001baad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bab1:	83 ec 0c             	sub    esp,0xc
c001bab4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bab8:	6a 01                	push   0x1
c001baba:	68 44 ba 01 c0       	push   0xc001ba44
c001babf:	6a 08                	push   0x8
c001bac1:	50                   	push   eax
c001bac2:	e8 07 7c ff ff       	call   c00136ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bac7:	83 c4 20             	add    esp,0x20
c001baca:	89 c2                	mov    edx,eax
c001bacc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bad0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bad6:	e8 6a 28 ff ff       	call   c000e345 <disableIRQs()>
c001badb:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001bae0:	83 ec 08             	sub    esp,0x8
c001bae3:	6a 0b                	push   0xb
c001bae5:	50                   	push   eax
c001bae6:	e8 41 fb fe ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c001baeb:	83 c4 10             	add    esp,0x10
c001baee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001baf2:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001baf7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001bafb:	83 ca 10             	or     edx,0x10
c001bafe:	0f b6 d2             	movzx  edx,dl
c001bb01:	83 ec 04             	sub    esp,0x4
c001bb04:	52                   	push   edx
c001bb05:	6a 0b                	push   0xb
c001bb07:	50                   	push   eax
c001bb08:	e8 27 fc fe ff       	call   c000b734 <Computer::writeCMOS(unsigned char, unsigned char)>
c001bb0d:	83 c4 10             	add    esp,0x10
c001bb10:	83 ec 0c             	sub    esp,0xc
c001bb13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb17:	e8 3c fc ff ff       	call   c001b758 <RTC::completeRTCRefresh()>
c001bb1c:	83 c4 10             	add    esp,0x10
c001bb1f:	e8 2f 28 ff ff       	call   c000e353 <enableIRQs()>
c001bb24:	90                   	nop
c001bb25:	83 c4 1c             	add    esp,0x1c
c001bb28:	c3                   	ret    
c001bb29:	90                   	nop

c001bb2a <IDE::close(int, int, void*)>:
c001bb2a:	83 c8 ff             	or     eax,0xffffffff
c001bb2d:	c3                   	ret    

c001bb2e <IDE::IDE()>:
c001bb2e:	83 ec 0c             	sub    esp,0xc
c001bb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb35:	83 ec 08             	sub    esp,0x8
c001bb38:	68 a0 a7 03 c0       	push   0xc003a7a0
c001bb3d:	50                   	push   eax
c001bb3e:	e8 b9 7f ff ff       	call   c0013afc <HardDiskController::HardDiskController(char const*)>
c001bb43:	83 c4 10             	add    esp,0x10
c001bb46:	ba e0 a9 03 c0       	mov    edx,0xc003a9e0
c001bb4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4f:	89 10                	mov    DWORD PTR [eax],edx
c001bb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb55:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bb5c:	90                   	nop
c001bb5d:	83 c4 0c             	add    esp,0xc
c001bb60:	c3                   	ret    
c001bb61:	90                   	nop

c001bb62 <IDE::prepareInterrupt(unsigned char)>:
c001bb62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb6b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bb73:	c3                   	ret    

c001bb74 <selectDrive(unsigned char, unsigned char)>:
c001bb74:	c3                   	ret    
c001bb75:	90                   	nop

c001bb76 <IDE::getBase(unsigned char)>:
c001bb76:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bb7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb7f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bb87:	c3                   	ret    

c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bb88:	55                   	push   ebp
c001bb89:	57                   	push   edi
c001bb8a:	56                   	push   esi
c001bb8b:	53                   	push   ebx
c001bb8c:	83 ec 1c             	sub    esp,0x1c
c001bb8f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bb93:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb97:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bb9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bb9e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bba2:	80 f9 03             	cmp    cl,0x3
c001bba5:	77 51                	ja     c001bbf8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bba7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbab:	0f b6 f2             	movzx  esi,dl
c001bbae:	0f b6 db             	movzx  ebx,bl
c001bbb1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bbb4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bbb8:	83 ca 80             	or     edx,0xffffff80
c001bbbb:	0f b6 d2             	movzx  edx,dl
c001bbbe:	52                   	push   edx
c001bbbf:	6a 0c                	push   0xc
c001bbc1:	56                   	push   esi
c001bbc2:	57                   	push   edi
c001bbc3:	e8 c0 ff ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbc8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bbcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bbd1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bbd5:	ee                   	out    dx,al
c001bbd6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bbdb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bbdf:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bbe3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bbe7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bbef:	83 c4 2c             	add    esp,0x2c
c001bbf2:	5b                   	pop    ebx
c001bbf3:	5e                   	pop    esi
c001bbf4:	5f                   	pop    edi
c001bbf5:	5d                   	pop    ebp
c001bbf6:	eb 90                	jmp    c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbf8:	80 fb 07             	cmp    bl,0x7
c001bbfb:	77 12                	ja     c001bc0f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bbfd:	0f b6 d2             	movzx  edx,dl
c001bc00:	0f b6 db             	movzx  ebx,bl
c001bc03:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bc0b:	89 da                	mov    edx,ebx
c001bc0d:	eb 2f                	jmp    c001bc3e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc0f:	80 fb 0d             	cmp    bl,0xd
c001bc12:	77 13                	ja     c001bc27 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bc14:	0f b6 d2             	movzx  edx,dl
c001bc17:	0f b6 db             	movzx  ebx,bl
c001bc1a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bc21:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bc25:	eb 17                	jmp    c001bc3e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc27:	80 fb 15             	cmp    bl,0x15
c001bc2a:	77 13                	ja     c001bc3f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bc2c:	0f b6 d2             	movzx  edx,dl
c001bc2f:	0f b6 db             	movzx  ebx,bl
c001bc32:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bc3a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bc3e:	ee                   	out    dx,al
c001bc3f:	83 c4 1c             	add    esp,0x1c
c001bc42:	5b                   	pop    ebx
c001bc43:	5e                   	pop    esi
c001bc44:	5f                   	pop    edi
c001bc45:	5d                   	pop    ebp
c001bc46:	c3                   	ret    
c001bc47:	90                   	nop

c001bc48 <IDE::read(unsigned char, unsigned char)>:
c001bc48:	55                   	push   ebp
c001bc49:	57                   	push   edi
c001bc4a:	56                   	push   esi
c001bc4b:	53                   	push   ebx
c001bc4c:	83 ec 1c             	sub    esp,0x1c
c001bc4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc57:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bc5a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc5e:	3c 03                	cmp    al,0x3
c001bc60:	77 43                	ja     c001bca5 <IDE::read(unsigned char, unsigned char)+0x5d>
c001bc62:	0f b6 f2             	movzx  esi,dl
c001bc65:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bc68:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bc6c:	83 c8 80             	or     eax,0xffffff80
c001bc6f:	0f b6 c0             	movzx  eax,al
c001bc72:	50                   	push   eax
c001bc73:	6a 0c                	push   0xc
c001bc75:	56                   	push   esi
c001bc76:	57                   	push   edi
c001bc77:	e8 0c ff ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc7c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bc81:	0f b6 c3             	movzx  eax,bl
c001bc84:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bc88:	ec                   	in     al,dx
c001bc89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bc8d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bc92:	52                   	push   edx
c001bc93:	6a 0c                	push   0xc
c001bc95:	56                   	push   esi
c001bc96:	57                   	push   edi
c001bc97:	e8 ec fe ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc9c:	83 c4 20             	add    esp,0x20
c001bc9f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bca3:	eb 49                	jmp    c001bcee <IDE::read(unsigned char, unsigned char)+0xa6>
c001bca5:	80 fb 07             	cmp    bl,0x7
c001bca8:	77 12                	ja     c001bcbc <IDE::read(unsigned char, unsigned char)+0x74>
c001bcaa:	0f b6 d2             	movzx  edx,dl
c001bcad:	0f b6 c3             	movzx  eax,bl
c001bcb0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bcb8:	89 c2                	mov    edx,eax
c001bcba:	eb 31                	jmp    c001bced <IDE::read(unsigned char, unsigned char)+0xa5>
c001bcbc:	80 fb 0d             	cmp    bl,0xd
c001bcbf:	77 13                	ja     c001bcd4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bcc1:	0f b6 d2             	movzx  edx,dl
c001bcc4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bccb:	0f b6 d3             	movzx  edx,bl
c001bcce:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bcd2:	eb 19                	jmp    c001bced <IDE::read(unsigned char, unsigned char)+0xa5>
c001bcd4:	31 c0                	xor    eax,eax
c001bcd6:	80 fb 15             	cmp    bl,0x15
c001bcd9:	77 13                	ja     c001bcee <IDE::read(unsigned char, unsigned char)+0xa6>
c001bcdb:	0f b6 d2             	movzx  edx,dl
c001bcde:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bce6:	0f b6 d3             	movzx  edx,bl
c001bce9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bced:	ec                   	in     al,dx
c001bcee:	83 c4 1c             	add    esp,0x1c
c001bcf1:	5b                   	pop    ebx
c001bcf2:	5e                   	pop    esi
c001bcf3:	5f                   	pop    edi
c001bcf4:	5d                   	pop    ebp
c001bcf5:	c3                   	ret    

c001bcf6 <IDE::waitInterrupt(unsigned char)>:
c001bcf6:	55                   	push   ebp
c001bcf7:	57                   	push   edi
c001bcf8:	56                   	push   esi
c001bcf9:	53                   	push   ebx
c001bcfa:	31 db                	xor    ebx,ebx
c001bcfc:	83 ec 0c             	sub    esp,0xc
c001bcff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd03:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bd08:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bd10:	89 e8                	mov    eax,ebp
c001bd12:	84 c0                	test   al,al
c001bd14:	75 34                	jne    c001bd4a <IDE::waitInterrupt(unsigned char)+0x54>
c001bd16:	52                   	push   edx
c001bd17:	6a 0c                	push   0xc
c001bd19:	56                   	push   esi
c001bd1a:	57                   	push   edi
c001bd1b:	e8 28 ff ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001bd20:	83 c4 10             	add    esp,0x10
c001bd23:	a8 01                	test   al,0x1
c001bd25:	75 2b                	jne    c001bd52 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd27:	f6 c3 04             	test   bl,0x4
c001bd2a:	75 16                	jne    c001bd42 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd2c:	83 fb 32             	cmp    ebx,0x32
c001bd2f:	7e 11                	jle    c001bd42 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd31:	50                   	push   eax
c001bd32:	50                   	push   eax
c001bd33:	6a 00                	push   0x0
c001bd35:	68 80 96 98 00       	push   0x989680
c001bd3a:	e8 dc 2c ff ff       	call   c000ea1b <nanoSleep(unsigned long long)>
c001bd3f:	83 c4 10             	add    esp,0x10
c001bd42:	83 fb 3c             	cmp    ebx,0x3c
c001bd45:	74 0b                	je     c001bd52 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd47:	43                   	inc    ebx
c001bd48:	eb be                	jmp    c001bd08 <IDE::waitInterrupt(unsigned char)+0x12>
c001bd4a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bd52:	83 c4 0c             	add    esp,0xc
c001bd55:	89 e8                	mov    eax,ebp
c001bd57:	5b                   	pop    ebx
c001bd58:	5e                   	pop    esi
c001bd59:	5f                   	pop    edi
c001bd5a:	5d                   	pop    ebp
c001bd5b:	c3                   	ret    

c001bd5c <ideChannel0IRQHandler(regs*, void*)>:
c001bd5c:	83 ec 10             	sub    esp,0x10
c001bd5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd63:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bd6a:	6a 07                	push   0x7
c001bd6c:	6a 00                	push   0x0
c001bd6e:	50                   	push   eax
c001bd6f:	e8 d4 fe ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001bd74:	83 c4 1c             	add    esp,0x1c
c001bd77:	c3                   	ret    

c001bd78 <ideChannel1IRQHandler(regs*, void*)>:
c001bd78:	83 ec 10             	sub    esp,0x10
c001bd7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd7f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bd86:	6a 07                	push   0x7
c001bd88:	6a 01                	push   0x1
c001bd8a:	50                   	push   eax
c001bd8b:	e8 b8 fe ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001bd90:	83 c4 1c             	add    esp,0x1c
c001bd93:	c3                   	ret    

c001bd94 <IDE::enableIRQs(unsigned char, bool)>:
c001bd94:	57                   	push   edi
c001bd95:	56                   	push   esi
c001bd96:	be 04 00 00 00       	mov    esi,0x4
c001bd9b:	53                   	push   ebx
c001bd9c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bda1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bda5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bdaa:	0f 94 c0             	sete   al
c001bdad:	d1 e0                	shl    eax,1
c001bdaf:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bdb6:	0f b6 c0             	movzx  eax,al
c001bdb9:	50                   	push   eax
c001bdba:	6a 0c                	push   0xc
c001bdbc:	57                   	push   edi
c001bdbd:	53                   	push   ebx
c001bdbe:	e8 c5 fd ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc3:	83 c4 10             	add    esp,0x10
c001bdc6:	50                   	push   eax
c001bdc7:	6a 0c                	push   0xc
c001bdc9:	57                   	push   edi
c001bdca:	53                   	push   ebx
c001bdcb:	e8 78 fe ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001bdd0:	83 c4 10             	add    esp,0x10
c001bdd3:	4e                   	dec    esi
c001bdd4:	75 f0                	jne    c001bdc6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001bdd6:	5b                   	pop    ebx
c001bdd7:	5e                   	pop    esi
c001bdd8:	5f                   	pop    edi
c001bdd9:	c3                   	ret    

c001bdda <IDE::open(int, int, void*)>:
c001bdda:	55                   	push   ebp
c001bddb:	57                   	push   edi
c001bddc:	56                   	push   esi
c001bddd:	53                   	push   ebx
c001bdde:	83 ec 1c             	sub    esp,0x1c
c001bde1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bde5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bdee:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bdf7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bdfe:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001be05:	0f 85 b0 02 00 00    	jne    c001c0bb <IDE::open(int, int, void*)+0x2e1>
c001be0b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001be11:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001be15:	83 e0 7f             	and    eax,0x7f
c001be18:	3c 05                	cmp    al,0x5
c001be1a:	74 04                	je     c001be20 <IDE::open(int, int, void*)+0x46>
c001be1c:	3c 0f                	cmp    al,0xf
c001be1e:	75 32                	jne    c001be52 <IDE::open(int, int, void*)+0x78>
c001be20:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001be26:	83 e0 fc             	and    eax,0xfffffffc
c001be29:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be30:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001be36:	83 e0 fc             	and    eax,0xfffffffc
c001be39:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be40:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001be46:	83 e0 fc             	and    eax,0xfffffffc
c001be49:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be50:	eb 14                	jmp    c001be66 <IDE::open(int, int, void*)+0x8c>
c001be52:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001be5c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001be66:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001be6d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001be74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be78:	89 c6                	mov    esi,eax
c001be7a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001be7f:	c1 e6 10             	shl    esi,0x10
c001be82:	89 e8                	mov    eax,ebp
c001be84:	89 fa                	mov    edx,edi
c001be86:	c1 e0 0b             	shl    eax,0xb
c001be89:	09 f0                	or     eax,esi
c001be8b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001be92:	c1 e6 08             	shl    esi,0x8
c001be95:	09 c6                	or     esi,eax
c001be97:	89 f0                	mov    eax,esi
c001be99:	0d 08 00 00 80       	or     eax,0x80000008
c001be9e:	ef                   	out    dx,eax
c001be9f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bea4:	89 ca                	mov    edx,ecx
c001bea6:	ed                   	in     eax,dx
c001bea7:	c1 e8 10             	shr    eax,0x10
c001beaa:	3d ff ff 00 00       	cmp    eax,0xffff
c001beaf:	0f 84 f5 00 00 00    	je     c001bfaa <IDE::open(int, int, void*)+0x1d0>
c001beb5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bebb:	89 fa                	mov    edx,edi
c001bebd:	89 f0                	mov    eax,esi
c001bebf:	ef                   	out    dx,eax
c001bec0:	b0 fe                	mov    al,0xfe
c001bec2:	89 ca                	mov    edx,ecx
c001bec4:	ee                   	out    dx,al
c001bec5:	89 f0                	mov    eax,esi
c001bec7:	89 fa                	mov    edx,edi
c001bec9:	ef                   	out    dx,eax
c001beca:	89 ca                	mov    edx,ecx
c001becc:	ed                   	in     eax,dx
c001becd:	3c fe                	cmp    al,0xfe
c001becf:	0f 85 a9 00 00 00    	jne    c001bf7e <IDE::open(int, int, void*)+0x1a4>
c001bed5:	8b 15 e8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9e8
c001bedb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bee2:	74 33                	je     c001bf17 <IDE::open(int, int, void*)+0x13d>
c001bee4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001beea:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001beee:	40                   	inc    eax
c001beef:	83 ec 0c             	sub    esp,0xc
c001bef2:	0f b6 c0             	movzx  eax,al
c001bef5:	50                   	push   eax
c001bef6:	55                   	push   ebp
c001bef7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001befb:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bf01:	51                   	push   ecx
c001bf02:	e8 07 a9 ff ff       	call   c001680e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bf07:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bf0c:	83 c4 1c             	add    esp,0x1c
c001bf0f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf15:	eb 0a                	jmp    c001bf21 <IDE::open(int, int, void*)+0x147>
c001bf17:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bf21:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bf28:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bf2f:	c1 e1 10             	shl    ecx,0x10
c001bf32:	c1 e0 08             	shl    eax,0x8
c001bf35:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bf3a:	09 c1                	or     ecx,eax
c001bf3c:	89 fa                	mov    edx,edi
c001bf3e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bf45:	c1 e0 0b             	shl    eax,0xb
c001bf48:	09 c1                	or     ecx,eax
c001bf4a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bf50:	89 c8                	mov    eax,ecx
c001bf52:	ef                   	out    dx,eax
c001bf53:	be fc 0c 00 00       	mov    esi,0xcfc
c001bf58:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bf5e:	89 f2                	mov    edx,esi
c001bf60:	ee                   	out    dx,al
c001bf61:	89 c8                	mov    eax,ecx
c001bf63:	89 fa                	mov    edx,edi
c001bf65:	ef                   	out    dx,eax
c001bf66:	89 f2                	mov    edx,esi
c001bf68:	ed                   	in     eax,dx
c001bf69:	0f b6 c0             	movzx  eax,al
c001bf6c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bf72:	74 46                	je     c001bfba <IDE::open(int, int, void*)+0x1e0>
c001bf74:	83 ec 0c             	sub    esp,0xc
c001bf77:	68 b8 a7 03 c0       	push   0xc003a7b8
c001bf7c:	eb 34                	jmp    c001bfb2 <IDE::open(int, int, void*)+0x1d8>
c001bf7e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bf87:	75 17                	jne    c001bfa0 <IDE::open(int, int, void*)+0x1c6>
c001bf89:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bf8e:	74 07                	je     c001bf97 <IDE::open(int, int, void*)+0x1bd>
c001bf90:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bf95:	75 09                	jne    c001bfa0 <IDE::open(int, int, void*)+0x1c6>
c001bf97:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bf9e:	eb 1a                	jmp    c001bfba <IDE::open(int, int, void*)+0x1e0>
c001bfa0:	83 ec 0c             	sub    esp,0xc
c001bfa3:	68 c0 a7 03 c0       	push   0xc003a7c0
c001bfa8:	eb 08                	jmp    c001bfb2 <IDE::open(int, int, void*)+0x1d8>
c001bfaa:	83 ec 0c             	sub    esp,0xc
c001bfad:	68 f1 a7 03 c0       	push   0xc003a7f1
c001bfb2:	e8 27 10 ff ff       	call   c000cfde <panic(char const*)>
c001bfb7:	83 c4 10             	add    esp,0x10
c001bfba:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bfc1:	79 1a                	jns    c001bfdd <IDE::open(int, int, void*)+0x203>
c001bfc3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bfc9:	83 e0 fc             	and    eax,0xfffffffc
c001bfcc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bfd3:	83 c0 08             	add    eax,0x8
c001bfd6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bfdd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bfe3:	89 c2                	mov    edx,eax
c001bfe5:	83 e2 0f             	and    edx,0xf
c001bfe8:	66 83 fa 08          	cmp    dx,0x8
c001bfec:	75 0a                	jne    c001bff8 <IDE::open(int, int, void*)+0x21e>
c001bfee:	83 e8 02             	sub    eax,0x2
c001bff1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bff8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bffe:	89 c2                	mov    edx,eax
c001c000:	83 e2 0f             	and    edx,0xf
c001c003:	66 83 fa 08          	cmp    dx,0x8
c001c007:	75 0a                	jne    c001c013 <IDE::open(int, int, void*)+0x239>
c001c009:	83 e8 02             	sub    eax,0x2
c001c00c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c013:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c01a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c021:	89 d0                	mov    eax,edx
c001c023:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c026:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c02a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c02e:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c031:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c036:	0f b6 c9             	movzx  ecx,cl
c001c039:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c040:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c043:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c047:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c04b:	8d 50 02             	lea    edx,[eax+0x2]
c001c04e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c053:	0f b6 d2             	movzx  edx,dl
c001c056:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c05c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c05f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c063:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c067:	8d 48 03             	lea    ecx,[eax+0x3]
c001c06a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c06f:	0f b6 c9             	movzx  ecx,cl
c001c072:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c078:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c07b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c07f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c083:	8d 50 04             	lea    edx,[eax+0x4]
c001c086:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c08c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c091:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c098:	66 85 f6             	test   si,si
c001c09b:	74 3e                	je     c001c0db <IDE::open(int, int, void*)+0x301>
c001c09d:	0f b6 d2             	movzx  edx,dl
c001c0a0:	83 c0 05             	add    eax,0x5
c001c0a3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0a6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0aa:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c0ae:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c0b4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0b9:	eb 20                	jmp    c001c0db <IDE::open(int, int, void*)+0x301>
c001c0bb:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0c5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c0cf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c0d6:	e9 02 ff ff ff       	jmp    c001bfdd <IDE::open(int, int, void*)+0x203>
c001c0db:	52                   	push   edx
c001c0dc:	52                   	push   edx
c001c0dd:	6a 00                	push   0x0
c001c0df:	53                   	push   ebx
c001c0e0:	e8 7d fa ff ff       	call   c001bb62 <IDE::prepareInterrupt(unsigned char)>
c001c0e5:	59                   	pop    ecx
c001c0e6:	5e                   	pop    esi
c001c0e7:	6a 01                	push   0x1
c001c0e9:	53                   	push   ebx
c001c0ea:	e8 73 fa ff ff       	call   c001bb62 <IDE::prepareInterrupt(unsigned char)>
c001c0ef:	83 c4 0c             	add    esp,0xc
c001c0f2:	6a 00                	push   0x0
c001c0f4:	6a 00                	push   0x0
c001c0f6:	53                   	push   ebx
c001c0f7:	e8 98 fc ff ff       	call   c001bd94 <IDE::enableIRQs(unsigned char, bool)>
c001c0fc:	83 c4 0c             	add    esp,0xc
c001c0ff:	6a 00                	push   0x0
c001c101:	6a 01                	push   0x1
c001c103:	53                   	push   ebx
c001c104:	e8 8b fc ff ff       	call   c001bd94 <IDE::enableIRQs(unsigned char, bool)>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c113:	74 40                	je     c001c155 <IDE::open(int, int, void*)+0x37b>
c001c115:	83 ec 0c             	sub    esp,0xc
c001c118:	68 1b a8 03 c0       	push   0xc003a81b
c001c11d:	e8 9e 0d ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c122:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c125:	6a 01                	push   0x1
c001c127:	68 5c bd 01 c0       	push   0xc001bd5c
c001c12c:	6a 0e                	push   0xe
c001c12e:	53                   	push   ebx
c001c12f:	e8 9a 75 ff ff       	call   c00136ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c134:	83 c4 14             	add    esp,0x14
c001c137:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c13d:	53                   	push   ebx
c001c13e:	6a 01                	push   0x1
c001c140:	68 78 bd 01 c0       	push   0xc001bd78
c001c145:	6a 0f                	push   0xf
c001c147:	53                   	push   ebx
c001c148:	e8 81 75 ff ff       	call   c00136ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c14d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c153:	eb 4a                	jmp    c001c19f <IDE::open(int, int, void*)+0x3c5>
c001c155:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c15f:	50                   	push   eax
c001c160:	6a 0f                	push   0xf
c001c162:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c168:	68 37 a8 03 c0       	push   0xc003a837
c001c16d:	e8 4e 0d ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c172:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c175:	6a 00                	push   0x0
c001c177:	68 5c bd 01 c0       	push   0xc001bd5c
c001c17c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c182:	53                   	push   ebx
c001c183:	e8 46 75 ff ff       	call   c00136ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c188:	83 c4 14             	add    esp,0x14
c001c18b:	53                   	push   ebx
c001c18c:	6a 00                	push   0x0
c001c18e:	68 78 bd 01 c0       	push   0xc001bd78
c001c193:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c199:	53                   	push   ebx
c001c19a:	e8 2f 75 ff ff       	call   c00136ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c19f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1a1:	83 c4 20             	add    esp,0x20
c001c1a4:	83 ec 0c             	sub    esp,0xc
c001c1a7:	53                   	push   ebx
c001c1a8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c1ab:	83 c4 0c             	add    esp,0xc
c001c1ae:	6a 07                	push   0x7
c001c1b0:	6a 00                	push   0x0
c001c1b2:	53                   	push   ebx
c001c1b3:	e8 90 fa ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c1b8:	83 c4 0c             	add    esp,0xc
c001c1bb:	6a 07                	push   0x7
c001c1bd:	6a 01                	push   0x1
c001c1bf:	53                   	push   ebx
c001c1c0:	e8 83 fa ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c1c5:	83 c4 0c             	add    esp,0xc
c001c1c8:	6a 01                	push   0x1
c001c1ca:	6a 00                	push   0x0
c001c1cc:	53                   	push   ebx
c001c1cd:	e8 c2 fb ff ff       	call   c001bd94 <IDE::enableIRQs(unsigned char, bool)>
c001c1d2:	83 c4 0c             	add    esp,0xc
c001c1d5:	6a 01                	push   0x1
c001c1d7:	6a 01                	push   0x1
c001c1d9:	53                   	push   ebx
c001c1da:	e8 b5 fb ff ff       	call   c001bd94 <IDE::enableIRQs(unsigned char, bool)>
c001c1df:	83 c4 2c             	add    esp,0x2c
c001c1e2:	31 c0                	xor    eax,eax
c001c1e4:	5b                   	pop    ebx
c001c1e5:	5e                   	pop    esi
c001c1e6:	5f                   	pop    edi
c001c1e7:	5d                   	pop    ebp
c001c1e8:	c3                   	ret    
c001c1e9:	90                   	nop

c001c1ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c1ea:	55                   	push   ebp
c001c1eb:	57                   	push   edi
c001c1ec:	56                   	push   esi
c001c1ed:	53                   	push   ebx
c001c1ee:	83 ec 1c             	sub    esp,0x1c
c001c1f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c1f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c1f9:	8d 50 f8             	lea    edx,[eax-0x8]
c001c1fc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c200:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c204:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c208:	80 fa 03             	cmp    dl,0x3
c001c20b:	77 5d                	ja     c001c26a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c20d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c211:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c215:	0f b6 db             	movzx  ebx,bl
c001c218:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c21b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c21f:	83 ca 80             	or     edx,0xffffff80
c001c222:	0f b6 d2             	movzx  edx,dl
c001c225:	52                   	push   edx
c001c226:	6a 0c                	push   0xc
c001c228:	53                   	push   ebx
c001c229:	56                   	push   esi
c001c22a:	e8 59 f9 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c22f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c234:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c238:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c23c:	0f b6 c0             	movzx  eax,al
c001c23f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c243:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c245:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c24a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c24e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c252:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c256:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c25e:	83 c4 2c             	add    esp,0x2c
c001c261:	5b                   	pop    ebx
c001c262:	5e                   	pop    esi
c001c263:	5f                   	pop    edi
c001c264:	5d                   	pop    ebp
c001c265:	e9 1e f9 ff ff       	jmp    c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c26a:	3c 07                	cmp    al,0x7
c001c26c:	77 10                	ja     c001c27e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c26e:	0f b6 db             	movzx  ebx,bl
c001c271:	0f b6 d0             	movzx  edx,al
c001c274:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c27c:	eb 2d                	jmp    c001c2ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c27e:	3c 0d                	cmp    al,0xd
c001c280:	77 13                	ja     c001c295 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c282:	0f b6 db             	movzx  ebx,bl
c001c285:	0f b6 c0             	movzx  eax,al
c001c288:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c28f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c293:	eb 16                	jmp    c001c2ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c295:	3c 15                	cmp    al,0x15
c001c297:	77 14                	ja     c001c2ad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c299:	0f b6 db             	movzx  ebx,bl
c001c29c:	0f b6 c0             	movzx  eax,al
c001c29f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c2a7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c2ab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c2ad:	83 c4 1c             	add    esp,0x1c
c001c2b0:	5b                   	pop    ebx
c001c2b1:	5e                   	pop    esi
c001c2b2:	5f                   	pop    edi
c001c2b3:	5d                   	pop    ebp
c001c2b4:	c3                   	ret    
c001c2b5:	90                   	nop

c001c2b6 <IDE::detect()>:
c001c2b6:	55                   	push   ebp
c001c2b7:	57                   	push   edi
c001c2b8:	56                   	push   esi
c001c2b9:	53                   	push   ebx
c001c2ba:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c2c0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c2c7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c2ce:	0f 85 be 02 00 00    	jne    c001c592 <IDE::detect()+0x2dc>
c001c2d4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c2db:	31 f6                	xor    esi,esi
c001c2dd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c2e5:	31 ed                	xor    ebp,ebp
c001c2e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2eb:	c1 e0 06             	shl    eax,0x6
c001c2ee:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c2f6:	89 e8                	mov    eax,ebp
c001c2f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c2fc:	c1 e0 04             	shl    eax,0x4
c001c2ff:	83 c8 a0             	or     eax,0xffffffa0
c001c302:	0f b6 c0             	movzx  eax,al
c001c305:	50                   	push   eax
c001c306:	6a 06                	push   0x6
c001c308:	56                   	push   esi
c001c309:	53                   	push   ebx
c001c30a:	e8 79 f8 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c30f:	83 c4 0c             	add    esp,0xc
c001c312:	6a 0c                	push   0xc
c001c314:	56                   	push   esi
c001c315:	53                   	push   ebx
c001c316:	e8 2d f9 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c31b:	83 c4 0c             	add    esp,0xc
c001c31e:	6a 0c                	push   0xc
c001c320:	56                   	push   esi
c001c321:	53                   	push   ebx
c001c322:	e8 21 f9 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c327:	83 c4 0c             	add    esp,0xc
c001c32a:	6a 0c                	push   0xc
c001c32c:	56                   	push   esi
c001c32d:	53                   	push   ebx
c001c32e:	e8 15 f9 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c333:	83 c4 0c             	add    esp,0xc
c001c336:	6a 0c                	push   0xc
c001c338:	56                   	push   esi
c001c339:	53                   	push   ebx
c001c33a:	e8 09 f9 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c33f:	68 ec 00 00 00       	push   0xec
c001c344:	6a 07                	push   0x7
c001c346:	56                   	push   esi
c001c347:	53                   	push   ebx
c001c348:	e8 3b f8 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c34d:	83 c4 1c             	add    esp,0x1c
c001c350:	6a 0c                	push   0xc
c001c352:	56                   	push   esi
c001c353:	53                   	push   ebx
c001c354:	e8 ef f8 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c359:	83 c4 0c             	add    esp,0xc
c001c35c:	6a 0c                	push   0xc
c001c35e:	56                   	push   esi
c001c35f:	53                   	push   ebx
c001c360:	e8 e3 f8 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c365:	83 c4 0c             	add    esp,0xc
c001c368:	6a 0c                	push   0xc
c001c36a:	56                   	push   esi
c001c36b:	53                   	push   ebx
c001c36c:	e8 d7 f8 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c371:	83 c4 0c             	add    esp,0xc
c001c374:	6a 0c                	push   0xc
c001c376:	56                   	push   esi
c001c377:	53                   	push   ebx
c001c378:	e8 cb f8 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c37d:	83 c4 0c             	add    esp,0xc
c001c380:	6a 0c                	push   0xc
c001c382:	56                   	push   esi
c001c383:	53                   	push   ebx
c001c384:	e8 bf f8 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c389:	83 c4 10             	add    esp,0x10
c001c38c:	84 c0                	test   al,al
c001c38e:	0f 84 8b 01 00 00    	je     c001c51f <IDE::detect()+0x269>
c001c394:	31 ff                	xor    edi,edi
c001c396:	50                   	push   eax
c001c397:	6a 0c                	push   0xc
c001c399:	56                   	push   esi
c001c39a:	53                   	push   ebx
c001c39b:	e8 a8 f8 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c3a0:	83 c4 10             	add    esp,0x10
c001c3a3:	a8 01                	test   al,0x1
c001c3a5:	0f 85 8e 01 00 00    	jne    c001c539 <IDE::detect()+0x283>
c001c3ab:	84 c0                	test   al,al
c001c3ad:	78 04                	js     c001c3b3 <IDE::detect()+0xfd>
c001c3af:	a8 08                	test   al,0x8
c001c3b1:	75 27                	jne    c001c3da <IDE::detect()+0x124>
c001c3b3:	47                   	inc    edi
c001c3b4:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c3ba:	7e da                	jle    c001c396 <IDE::detect()+0xe0>
c001c3bc:	50                   	push   eax
c001c3bd:	50                   	push   eax
c001c3be:	6a 00                	push   0x0
c001c3c0:	68 40 4b 4c 00       	push   0x4c4b40
c001c3c5:	e8 51 26 ff ff       	call   c000ea1b <nanoSleep(unsigned long long)>
c001c3ca:	83 c4 10             	add    esp,0x10
c001c3cd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c3d3:	75 c1                	jne    c001c396 <IDE::detect()+0xe0>
c001c3d5:	e9 5f 01 00 00       	jmp    c001c539 <IDE::detect()+0x283>
c001c3da:	31 c9                	xor    ecx,ecx
c001c3dc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c3e0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c3e4:	83 ec 0c             	sub    esp,0xc
c001c3e7:	68 80 00 00 00       	push   0x80
c001c3ec:	57                   	push   edi
c001c3ed:	6a 00                	push   0x0
c001c3ef:	56                   	push   esi
c001c3f0:	53                   	push   ebx
c001c3f1:	e8 f4 fd ff ff       	call   c001c1ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c3f6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c3ff:	89 d1                	mov    ecx,edx
c001c401:	c1 e0 06             	shl    eax,0x6
c001c404:	01 d8                	add    eax,ebx
c001c406:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c40d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c414:	89 f2                	mov    edx,esi
c001c416:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c41c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c420:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c426:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c42a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c431:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c439:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c440:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c448:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c44e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c455:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c45b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c45f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c463:	83 c4 20             	add    esp,0x20
c001c466:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c469:	83 c0 02             	add    eax,0x2
c001c46c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c472:	83 c7 02             	add    edi,0x2
c001c475:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c478:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c47e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c482:	75 e2                	jne    c001c466 <IDE::detect()+0x1b0>
c001c484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c488:	c1 e0 06             	shl    eax,0x6
c001c48b:	01 d8                	add    eax,ebx
c001c48d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c493:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c49a:	66 c1 ea 09          	shr    dx,0x9
c001c49e:	83 e2 01             	and    edx,0x1
c001c4a1:	84 c9                	test   cl,cl
c001c4a3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c4a9:	75 2f                	jne    c001c4da <IDE::detect()+0x224>
c001c4ab:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c4b1:	85 c0                	test   eax,eax
c001c4b3:	74 66                	je     c001c51b <IDE::detect()+0x265>
c001c4b5:	50                   	push   eax
c001c4b6:	55                   	push   ebp
c001c4b7:	56                   	push   esi
c001c4b8:	68 53 a8 03 c0       	push   0xc003a853
c001c4bd:	e8 fe 09 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c4c2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c4c9:	e8 a2 5f ff ff       	call   c0012470 <operator new(unsigned long)>
c001c4ce:	89 c7                	mov    edi,eax
c001c4d0:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4d3:	e8 e8 02 00 00       	call   c001c7c0 <ATA::ATA()>
c001c4d8:	eb 28                	jmp    c001c502 <IDE::detect()+0x24c>
c001c4da:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c4e0:	55                   	push   ebp
c001c4e1:	56                   	push   esi
c001c4e2:	68 82 a8 03 c0       	push   0xc003a882
c001c4e7:	e8 d4 09 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c4ec:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c4f3:	e8 78 5f ff ff       	call   c0012470 <operator new(unsigned long)>
c001c4f8:	89 c7                	mov    edi,eax
c001c4fa:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4fd:	e8 ee 08 00 00       	call   c001cdf0 <ATAPI::ATAPI()>
c001c502:	5a                   	pop    edx
c001c503:	59                   	pop    ecx
c001c504:	57                   	push   edi
c001c505:	53                   	push   ebx
c001c506:	e8 6f 72 ff ff       	call   c001377a <Device::addChild(Device*)>
c001c50b:	8b 07                	mov    eax,DWORD PTR [edi]
c001c50d:	53                   	push   ebx
c001c50e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c512:	6a 00                	push   0x0
c001c514:	57                   	push   edi
c001c515:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c518:	83 c4 20             	add    esp,0x20
c001c51b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c51f:	4d                   	dec    ebp
c001c520:	74 0a                	je     c001c52c <IDE::detect()+0x276>
c001c522:	bd 01 00 00 00       	mov    ebp,0x1
c001c527:	e9 bb fd ff ff       	jmp    c001c2e7 <IDE::detect()+0x31>
c001c52c:	4e                   	dec    esi
c001c52d:	74 63                	je     c001c592 <IDE::detect()+0x2dc>
c001c52f:	be 01 00 00 00       	mov    esi,0x1
c001c534:	e9 ac fd ff ff       	jmp    c001c2e5 <IDE::detect()+0x2f>
c001c539:	50                   	push   eax
c001c53a:	6a 04                	push   0x4
c001c53c:	56                   	push   esi
c001c53d:	53                   	push   ebx
c001c53e:	e8 05 f7 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c543:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c547:	83 c4 0c             	add    esp,0xc
c001c54a:	6a 05                	push   0x5
c001c54c:	56                   	push   esi
c001c54d:	53                   	push   ebx
c001c54e:	e8 f5 f6 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c553:	83 c4 10             	add    esp,0x10
c001c556:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c55a:	80 fa 14             	cmp    dl,0x14
c001c55d:	75 04                	jne    c001c563 <IDE::detect()+0x2ad>
c001c55f:	3c eb                	cmp    al,0xeb
c001c561:	eb 07                	jmp    c001c56a <IDE::detect()+0x2b4>
c001c563:	3c 96                	cmp    al,0x96
c001c565:	75 b8                	jne    c001c51f <IDE::detect()+0x269>
c001c567:	80 fa 69             	cmp    dl,0x69
c001c56a:	75 b3                	jne    c001c51f <IDE::detect()+0x269>
c001c56c:	68 a1 00 00 00       	push   0xa1
c001c571:	6a 07                	push   0x7
c001c573:	56                   	push   esi
c001c574:	53                   	push   ebx
c001c575:	e8 0e f6 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c57a:	5f                   	pop    edi
c001c57b:	58                   	pop    eax
c001c57c:	6a 00                	push   0x0
c001c57e:	68 40 42 0f 00       	push   0xf4240
c001c583:	e8 93 24 ff ff       	call   c000ea1b <nanoSleep(unsigned long long)>
c001c588:	83 c4 10             	add    esp,0x10
c001c58b:	b1 01                	mov    cl,0x1
c001c58d:	e9 4a fe ff ff       	jmp    c001c3dc <IDE::detect()+0x126>
c001c592:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c598:	5b                   	pop    ebx
c001c599:	5e                   	pop    esi
c001c59a:	5f                   	pop    edi
c001c59b:	5d                   	pop    ebp
c001c59c:	c3                   	ret    
c001c59d:	90                   	nop

c001c59e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c59e:	55                   	push   ebp
c001c59f:	57                   	push   edi
c001c5a0:	56                   	push   esi
c001c5a1:	53                   	push   ebx
c001c5a2:	83 ec 1c             	sub    esp,0x1c
c001c5a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5a9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c5ad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c5b1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c5b5:	88 c3                	mov    bl,al
c001c5b7:	84 c0                	test   al,al
c001c5b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5bd:	0f 84 67 01 00 00    	je     c001c72a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c5c3:	83 ec 0c             	sub    esp,0xc
c001c5c6:	68 b3 a8 03 c0       	push   0xc003a8b3
c001c5cb:	e8 f0 08 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c5d0:	83 c4 10             	add    esp,0x10
c001c5d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5d7:	3c 01                	cmp    al,0x1
c001c5d9:	75 17                	jne    c001c5f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c5db:	83 ec 0c             	sub    esp,0xc
c001c5de:	b3 13                	mov    bl,0x13
c001c5e0:	68 bf a8 03 c0       	push   0xc003a8bf
c001c5e5:	e8 d6 08 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c5ea:	83 c4 10             	add    esp,0x10
c001c5ed:	e9 25 01 00 00       	jmp    c001c717 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c5f2:	3c 02                	cmp    al,0x2
c001c5f4:	0f 85 ef 00 00 00    	jne    c001c6e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c5fa:	d1 e6                	shl    esi,1
c001c5fc:	09 ee                	or     esi,ebp
c001c5fe:	52                   	push   edx
c001c5ff:	89 f0                	mov    eax,esi
c001c601:	6a 01                	push   0x1
c001c603:	0f b6 f0             	movzx  esi,al
c001c606:	c1 e6 06             	shl    esi,0x6
c001c609:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c611:	50                   	push   eax
c001c612:	57                   	push   edi
c001c613:	e8 30 f6 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c618:	83 c4 10             	add    esp,0x10
c001c61b:	89 c6                	mov    esi,eax
c001c61d:	a8 01                	test   al,0x1
c001c61f:	74 12                	je     c001c633 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c621:	83 ec 0c             	sub    esp,0xc
c001c624:	b3 07                	mov    bl,0x7
c001c626:	68 d4 a8 03 c0       	push   0xc003a8d4
c001c62b:	e8 90 08 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c630:	83 c4 10             	add    esp,0x10
c001c633:	f7 c6 02 00 00 00    	test   esi,0x2
c001c639:	74 12                	je     c001c64d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c63b:	83 ec 0c             	sub    esp,0xc
c001c63e:	b3 03                	mov    bl,0x3
c001c640:	68 f2 a8 03 c0       	push   0xc003a8f2
c001c645:	e8 76 08 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c64a:	83 c4 10             	add    esp,0x10
c001c64d:	f7 c6 04 00 00 00    	test   esi,0x4
c001c653:	74 12                	je     c001c667 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c655:	83 ec 0c             	sub    esp,0xc
c001c658:	b3 14                	mov    bl,0x14
c001c65a:	68 12 a9 03 c0       	push   0xc003a912
c001c65f:	e8 5c 08 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c664:	83 c4 10             	add    esp,0x10
c001c667:	f7 c6 08 00 00 00    	test   esi,0x8
c001c66d:	74 12                	je     c001c681 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c66f:	83 ec 0c             	sub    esp,0xc
c001c672:	b3 03                	mov    bl,0x3
c001c674:	68 f2 a8 03 c0       	push   0xc003a8f2
c001c679:	e8 42 08 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c67e:	83 c4 10             	add    esp,0x10
c001c681:	f7 c6 10 00 00 00    	test   esi,0x10
c001c687:	74 12                	je     c001c69b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c689:	83 ec 0c             	sub    esp,0xc
c001c68c:	b3 15                	mov    bl,0x15
c001c68e:	68 2a a9 03 c0       	push   0xc003a92a
c001c693:	e8 28 08 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c698:	83 c4 10             	add    esp,0x10
c001c69b:	f7 c6 20 00 00 00    	test   esi,0x20
c001c6a1:	74 12                	je     c001c6b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c6a3:	83 ec 0c             	sub    esp,0xc
c001c6a6:	b3 03                	mov    bl,0x3
c001c6a8:	68 f2 a8 03 c0       	push   0xc003a8f2
c001c6ad:	e8 0e 08 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c6b2:	83 c4 10             	add    esp,0x10
c001c6b5:	f7 c6 40 00 00 00    	test   esi,0x40
c001c6bb:	74 12                	je     c001c6cf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c6bd:	83 ec 0c             	sub    esp,0xc
c001c6c0:	b3 16                	mov    bl,0x16
c001c6c2:	68 44 a9 03 c0       	push   0xc003a944
c001c6c7:	e8 f4 07 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c6cc:	83 c4 10             	add    esp,0x10
c001c6cf:	89 f0                	mov    eax,esi
c001c6d1:	84 c0                	test   al,al
c001c6d3:	79 42                	jns    c001c717 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6d5:	83 ec 0c             	sub    esp,0xc
c001c6d8:	b3 0d                	mov    bl,0xd
c001c6da:	68 65 a9 03 c0       	push   0xc003a965
c001c6df:	e8 dc 07 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c6e4:	83 c4 10             	add    esp,0x10
c001c6e7:	eb 2e                	jmp    c001c717 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6e9:	3c 03                	cmp    al,0x3
c001c6eb:	75 14                	jne    c001c701 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c6ed:	83 ec 0c             	sub    esp,0xc
c001c6f0:	b3 17                	mov    bl,0x17
c001c6f2:	68 79 a9 03 c0       	push   0xc003a979
c001c6f7:	e8 c4 07 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c6fc:	83 c4 10             	add    esp,0x10
c001c6ff:	eb 16                	jmp    c001c717 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c701:	3c 04                	cmp    al,0x4
c001c703:	75 12                	jne    c001c717 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c705:	83 ec 0c             	sub    esp,0xc
c001c708:	b3 08                	mov    bl,0x8
c001c70a:	68 8f a9 03 c0       	push   0xc003a98f
c001c70f:	e8 ac 07 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c714:	83 c4 10             	add    esp,0x10
c001c717:	50                   	push   eax
c001c718:	50                   	push   eax
c001c719:	0f b6 c3             	movzx  eax,bl
c001c71c:	50                   	push   eax
c001c71d:	68 a7 a9 03 c0       	push   0xc003a9a7
c001c722:	e8 99 07 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c727:	83 c4 10             	add    esp,0x10
c001c72a:	83 c4 1c             	add    esp,0x1c
c001c72d:	88 d8                	mov    al,bl
c001c72f:	5b                   	pop    ebx
c001c730:	5e                   	pop    esi
c001c731:	5f                   	pop    edi
c001c732:	5d                   	pop    ebp
c001c733:	c3                   	ret    

c001c734 <IDE::polling(unsigned char, unsigned int)>:
c001c734:	57                   	push   edi
c001c735:	56                   	push   esi
c001c736:	53                   	push   ebx
c001c737:	bb 04 00 00 00       	mov    ebx,0x4
c001c73c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c740:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c745:	52                   	push   edx
c001c746:	6a 0c                	push   0xc
c001c748:	56                   	push   esi
c001c749:	57                   	push   edi
c001c74a:	e8 f9 f4 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c74f:	83 c4 10             	add    esp,0x10
c001c752:	4b                   	dec    ebx
c001c753:	75 f0                	jne    c001c745 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c755:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c75a:	50                   	push   eax
c001c75b:	6a 0c                	push   0xc
c001c75d:	56                   	push   esi
c001c75e:	57                   	push   edi
c001c75f:	e8 e4 f4 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c764:	83 c4 10             	add    esp,0x10
c001c767:	a8 01                	test   al,0x1
c001c769:	74 12                	je     c001c77d <IDE::polling(unsigned char, unsigned int)+0x49>
c001c76b:	83 ec 0c             	sub    esp,0xc
c001c76e:	68 c1 a9 03 c0       	push   0xc003a9c1
c001c773:	e8 48 07 ff ff       	call   c000cec0 <kprintf(char const*, ...)>
c001c778:	83 c4 10             	add    esp,0x10
c001c77b:	eb 17                	jmp    c001c794 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c77d:	a8 20                	test   al,0x20
c001c77f:	75 0f                	jne    c001c790 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c781:	4b                   	dec    ebx
c001c782:	74 10                	je     c001c794 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c784:	84 c0                	test   al,al
c001c786:	78 d2                	js     c001c75a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c788:	a8 08                	test   al,0x8
c001c78a:	74 ce                	je     c001c75a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c78c:	31 c0                	xor    eax,eax
c001c78e:	eb 06                	jmp    c001c796 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c790:	b0 01                	mov    al,0x1
c001c792:	eb 02                	jmp    c001c796 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c794:	b0 02                	mov    al,0x2
c001c796:	5b                   	pop    ebx
c001c797:	5e                   	pop    esi
c001c798:	5f                   	pop    edi
c001c799:	c3                   	ret    

c001c79a <ATA::close(int, int, void*)>:
c001c79a:	83 ec 0c             	sub    esp,0xc
c001c79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7a7:	85 c0                	test   eax,eax
c001c7a9:	74 0c                	je     c001c7b7 <ATA::close(int, int, void*)+0x1d>
c001c7ab:	83 ec 0c             	sub    esp,0xc
c001c7ae:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7b0:	50                   	push   eax
c001c7b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7b4:	83 c4 10             	add    esp,0x10
c001c7b7:	31 c0                	xor    eax,eax
c001c7b9:	83 c4 0c             	add    esp,0xc
c001c7bc:	c3                   	ret    
c001c7bd:	90                   	nop

c001c7be <ATA::powerSaving(PowerSavingLevel)>:
c001c7be:	c3                   	ret    
c001c7bf:	90                   	nop

c001c7c0 <ATA::ATA()>:
c001c7c0:	83 ec 0c             	sub    esp,0xc
c001c7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c7:	83 ec 04             	sub    esp,0x4
c001c7ca:	68 00 02 00 00       	push   0x200
c001c7cf:	68 04 aa 03 c0       	push   0xc003aa04
c001c7d4:	50                   	push   eax
c001c7d5:	e8 a6 73 ff ff       	call   c0013b80 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7da:	83 c4 10             	add    esp,0x10
c001c7dd:	ba 30 aa 03 c0       	mov    edx,0xc003aa30
c001c7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e6:	89 10                	mov    DWORD PTR [eax],edx
c001c7e8:	90                   	nop
c001c7e9:	83 c4 0c             	add    esp,0xc
c001c7ec:	c3                   	ret    
c001c7ed:	90                   	nop

c001c7ee <ATA::flush(bool)>:
c001c7ee:	53                   	push   ebx
c001c7ef:	83 ec 08             	sub    esp,0x8
c001c7f2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c7f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7fb:	19 c0                	sbb    eax,eax
c001c7fd:	83 e0 fd             	and    eax,0xfffffffd
c001c800:	05 ea 00 00 00       	add    eax,0xea
c001c805:	50                   	push   eax
c001c806:	6a 07                	push   0x7
c001c808:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c80f:	50                   	push   eax
c001c810:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c816:	e8 6d f3 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c81b:	83 c4 0c             	add    esp,0xc
c001c81e:	6a 00                	push   0x0
c001c820:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c827:	50                   	push   eax
c001c828:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c82e:	e8 01 ff ff ff       	call   c001c734 <IDE::polling(unsigned char, unsigned int)>
c001c833:	83 c4 18             	add    esp,0x18
c001c836:	5b                   	pop    ebx
c001c837:	c3                   	ret    

c001c838 <ATA::readyForCommand()>:
c001c838:	56                   	push   esi
c001c839:	53                   	push   ebx
c001c83a:	31 db                	xor    ebx,ebx
c001c83c:	50                   	push   eax
c001c83d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c841:	50                   	push   eax
c001c842:	6a 0c                	push   0xc
c001c844:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c84b:	50                   	push   eax
c001c84c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c852:	e8 f1 f3 ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	a8 88                	test   al,0x88
c001c85c:	74 23                	je     c001c881 <ATA::readyForCommand()+0x49>
c001c85e:	43                   	inc    ebx
c001c85f:	83 fb 63             	cmp    ebx,0x63
c001c862:	7e dd                	jle    c001c841 <ATA::readyForCommand()+0x9>
c001c864:	51                   	push   ecx
c001c865:	51                   	push   ecx
c001c866:	6a 00                	push   0x0
c001c868:	68 40 42 0f 00       	push   0xf4240
c001c86d:	e8 a9 21 ff ff       	call   c000ea1b <nanoSleep(unsigned long long)>
c001c872:	83 c4 10             	add    esp,0x10
c001c875:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c87b:	75 c4                	jne    c001c841 <ATA::readyForCommand()+0x9>
c001c87d:	31 c0                	xor    eax,eax
c001c87f:	eb 02                	jmp    c001c883 <ATA::readyForCommand()+0x4b>
c001c881:	b0 01                	mov    al,0x1
c001c883:	5a                   	pop    edx
c001c884:	5b                   	pop    ebx
c001c885:	5e                   	pop    esi
c001c886:	c3                   	ret    
c001c887:	90                   	nop

c001c888 <ATA::access(unsigned long long, int, void*, bool)>:
c001c888:	55                   	push   ebp
c001c889:	57                   	push   edi
c001c88a:	56                   	push   esi
c001c88b:	53                   	push   ebx
c001c88c:	83 ec 2c             	sub    esp,0x2c
c001c88f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c893:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c897:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c89b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c89f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c8a3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c8a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c8ab:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c8b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8b5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c8bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8bf:	c1 e0 06             	shl    eax,0x6
c001c8c2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c8ca:	74 5d                	je     c001c929 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c8cc:	89 fa                	mov    edx,edi
c001c8ce:	89 f0                	mov    eax,esi
c001c8d0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c8d4:	c1 ea 1c             	shr    edx,0x1c
c001c8d7:	89 d1                	mov    ecx,edx
c001c8d9:	09 c1                	or     ecx,eax
c001c8db:	74 25                	je     c001c902 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c8dd:	31 ed                	xor    ebp,ebp
c001c8df:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c8e6:	89 fa                	mov    edx,edi
c001c8e8:	89 f0                	mov    eax,esi
c001c8ea:	0f ad d0             	shrd   eax,edx,cl
c001c8ed:	d3 ea                	shr    edx,cl
c001c8ef:	f6 c1 20             	test   cl,0x20
c001c8f2:	74 02                	je     c001c8f6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c8f4:	89 d0                	mov    eax,edx
c001c8f6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c8fa:	45                   	inc    ebp
c001c8fb:	83 fd 06             	cmp    ebp,0x6
c001c8fe:	75 df                	jne    c001c8df <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c900:	eb 76                	jmp    c001c978 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c902:	89 f0                	mov    eax,esi
c001c904:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c909:	89 fa                	mov    edx,edi
c001c90b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c912:	0f ac d0 10          	shrd   eax,edx,0x10
c001c916:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c91b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c91f:	c1 ee 18             	shr    esi,0x18
c001c922:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c927:	eb 56                	jmp    c001c97f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c929:	6a 00                	push   0x0
c001c92b:	6a 3f                	push   0x3f
c001c92d:	57                   	push   edi
c001c92e:	56                   	push   esi
c001c92f:	e8 d8 1e 00 00       	call   c001e80c <__umoddi3>
c001c934:	83 c4 10             	add    esp,0x10
c001c937:	40                   	inc    eax
c001c938:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c93c:	6a 00                	push   0x0
c001c93e:	68 f0 03 00 00       	push   0x3f0
c001c943:	57                   	push   edi
c001c944:	56                   	push   esi
c001c945:	e8 c2 1d 00 00       	call   c001e70c <__udivdi3>
c001c94a:	83 c4 10             	add    esp,0x10
c001c94d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c952:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c959:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c95e:	6a 00                	push   0x0
c001c960:	6a 3f                	push   0x3f
c001c962:	57                   	push   edi
c001c963:	56                   	push   esi
c001c964:	e8 a3 1d 00 00       	call   c001e70c <__udivdi3>
c001c969:	83 c4 10             	add    esp,0x10
c001c96c:	89 c6                	mov    esi,eax
c001c96e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c973:	83 e6 0f             	and    esi,0xf
c001c976:	eb 07                	jmp    c001c97f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c978:	31 f6                	xor    esi,esi
c001c97a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c97f:	bf 01 00 00 00       	mov    edi,0x1
c001c984:	50                   	push   eax
c001c985:	6a 00                	push   0x0
c001c987:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c98e:	50                   	push   eax
c001c98f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c993:	e8 fc f3 ff ff       	call   c001bd94 <IDE::enableIRQs(unsigned char, bool)>
c001c998:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c99b:	e8 98 fe ff ff       	call   c001c838 <ATA::readyForCommand()>
c001c9a0:	83 c4 10             	add    esp,0x10
c001c9a3:	84 c0                	test   al,al
c001c9a5:	0f 84 50 02 00 00    	je     c001cbfb <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c9ab:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c9b1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c9b7:	c1 e0 04             	shl    eax,0x4
c001c9ba:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c9c1:	09 c6                	or     esi,eax
c001c9c3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c9c8:	75 05                	jne    c001c9cf <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c9ca:	83 ce a0             	or     esi,0xffffffa0
c001c9cd:	eb 03                	jmp    c001c9d2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c9cf:	83 ce e0             	or     esi,0xffffffe0
c001c9d2:	89 f0                	mov    eax,esi
c001c9d4:	0f b6 f0             	movzx  esi,al
c001c9d7:	56                   	push   esi
c001c9d8:	6a 06                	push   0x6
c001c9da:	51                   	push   ecx
c001c9db:	52                   	push   edx
c001c9dc:	e8 a7 f1 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9e1:	83 c4 10             	add    esp,0x10
c001c9e4:	6a 00                	push   0x0
c001c9e6:	6a 01                	push   0x1
c001c9e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ef:	50                   	push   eax
c001c9f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f6:	e8 8d f1 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9fb:	83 c4 10             	add    esp,0x10
c001c9fe:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca03:	75 6e                	jne    c001ca73 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ca05:	6a 00                	push   0x0
c001ca07:	6a 08                	push   0x8
c001ca09:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca10:	50                   	push   eax
c001ca11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca17:	e8 6c f1 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca1c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca21:	50                   	push   eax
c001ca22:	6a 09                	push   0x9
c001ca24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca2b:	50                   	push   eax
c001ca2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca32:	e8 51 f1 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca37:	83 c4 20             	add    esp,0x20
c001ca3a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca3f:	50                   	push   eax
c001ca40:	6a 0a                	push   0xa
c001ca42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca49:	50                   	push   eax
c001ca4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca50:	e8 33 f1 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca55:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ca5a:	50                   	push   eax
c001ca5b:	6a 0b                	push   0xb
c001ca5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca64:	50                   	push   eax
c001ca65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca6b:	e8 18 f1 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca70:	83 c4 20             	add    esp,0x20
c001ca73:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca78:	50                   	push   eax
c001ca79:	6a 02                	push   0x2
c001ca7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca82:	50                   	push   eax
c001ca83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca89:	e8 fa f0 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca8e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca93:	50                   	push   eax
c001ca94:	6a 03                	push   0x3
c001ca96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca9d:	50                   	push   eax
c001ca9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caa4:	e8 df f0 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa9:	83 c4 20             	add    esp,0x20
c001caac:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cab1:	50                   	push   eax
c001cab2:	6a 04                	push   0x4
c001cab4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cabb:	50                   	push   eax
c001cabc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cac2:	e8 c1 f0 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cacc:	50                   	push   eax
c001cacd:	6a 05                	push   0x5
c001cacf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cad6:	50                   	push   eax
c001cad7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cadd:	e8 a6 f0 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cae2:	83 c4 20             	add    esp,0x20
c001cae5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001caea:	0f 94 c0             	sete   al
c001caed:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001caf2:	74 09                	je     c001cafd <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001caf4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001cafb:	eb 07                	jmp    c001cb04 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001cafd:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cb04:	0f b6 c0             	movzx  eax,al
c001cb07:	50                   	push   eax
c001cb08:	6a 07                	push   0x7
c001cb0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb11:	50                   	push   eax
c001cb12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb18:	e8 6b f0 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb1d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb21:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	85 f6                	test   esi,esi
c001cb2a:	0f 84 ac 00 00 00    	je     c001cbdc <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cb30:	50                   	push   eax
c001cb31:	6a 01                	push   0x1
c001cb33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb3a:	50                   	push   eax
c001cb3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb41:	e8 ee fb ff ff       	call   c001c734 <IDE::polling(unsigned char, unsigned int)>
c001cb46:	83 c4 10             	add    esp,0x10
c001cb49:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb4f:	84 c0                	test   al,al
c001cb51:	74 20                	je     c001cb73 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cb53:	0f b6 f8             	movzx  edi,al
c001cb56:	0f b6 d2             	movzx  edx,dl
c001cb59:	57                   	push   edi
c001cb5a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb61:	50                   	push   eax
c001cb62:	52                   	push   edx
c001cb63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb69:	e8 30 fa ff ff       	call   c001c59e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb6e:	e9 85 00 00 00       	jmp    c001cbf8 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cb73:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cb78:	74 41                	je     c001cbbb <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cb7a:	31 c9                	xor    ecx,ecx
c001cb7c:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cb80:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cb84:	50                   	push   eax
c001cb85:	50                   	push   eax
c001cb86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb8d:	50                   	push   eax
c001cb8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb94:	e8 dd ef ff ff       	call   c001bb76 <IDE::getBase(unsigned char)>
c001cb99:	89 c2                	mov    edx,eax
c001cb9b:	89 e8                	mov    eax,ebp
c001cb9d:	66 ef                	out    dx,ax
c001cb9f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cba3:	83 c4 10             	add    esp,0x10
c001cba6:	41                   	inc    ecx
c001cba7:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cbad:	75 cd                	jne    c001cb7c <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cbaf:	4e                   	dec    esi
c001cbb0:	81 c7 00 02 00 00    	add    edi,0x200
c001cbb6:	e9 6d ff ff ff       	jmp    c001cb28 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cbbb:	0f b6 d2             	movzx  edx,dl
c001cbbe:	51                   	push   ecx
c001cbbf:	51                   	push   ecx
c001cbc0:	52                   	push   edx
c001cbc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbc7:	e8 aa ef ff ff       	call   c001bb76 <IDE::getBase(unsigned char)>
c001cbcc:	b9 00 01 00 00       	mov    ecx,0x100
c001cbd1:	89 c2                	mov    edx,eax
c001cbd3:	fc                   	cld    
c001cbd4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	eb d3                	jmp    c001cbaf <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cbdc:	31 ff                	xor    edi,edi
c001cbde:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cbe3:	74 16                	je     c001cbfb <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cbe5:	50                   	push   eax
c001cbe6:	50                   	push   eax
c001cbe7:	31 c0                	xor    eax,eax
c001cbe9:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cbee:	0f 94 c0             	sete   al
c001cbf1:	50                   	push   eax
c001cbf2:	53                   	push   ebx
c001cbf3:	e8 f6 fb ff ff       	call   c001c7ee <ATA::flush(bool)>
c001cbf8:	83 c4 10             	add    esp,0x10
c001cbfb:	83 c4 2c             	add    esp,0x2c
c001cbfe:	89 f8                	mov    eax,edi
c001cc00:	5b                   	pop    ebx
c001cc01:	5e                   	pop    esi
c001cc02:	5f                   	pop    edi
c001cc03:	5d                   	pop    ebp
c001cc04:	c3                   	ret    
c001cc05:	90                   	nop

c001cc06 <ATA::read(unsigned long long, int, void*)>:
c001cc06:	57                   	push   edi
c001cc07:	b8 04 00 00 00       	mov    eax,0x4
c001cc0c:	56                   	push   esi
c001cc0d:	53                   	push   ebx
c001cc0e:	83 ec 10             	sub    esp,0x10
c001cc11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc15:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc19:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc1c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc24:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc2a:	77 3b                	ja     c001cc67 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc2c:	b8 06 00 00 00       	mov    eax,0x6
c001cc31:	85 d2                	test   edx,edx
c001cc33:	74 32                	je     c001cc67 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc35:	50                   	push   eax
c001cc36:	50                   	push   eax
c001cc37:	6a 00                	push   0x0
c001cc39:	52                   	push   edx
c001cc3a:	53                   	push   ebx
c001cc3b:	57                   	push   edi
c001cc3c:	56                   	push   esi
c001cc3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc41:	e8 42 fc ff ff       	call   c001c888 <ATA::access(unsigned long long, int, void*, bool)>
c001cc46:	83 c4 20             	add    esp,0x20
c001cc49:	85 c0                	test   eax,eax
c001cc4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc4f:	75 11                	jne    c001cc62 <ATA::read(unsigned long long, int, void*)+0x5c>
c001cc51:	01 1d c8 d0 03 c0    	add    DWORD PTR ds:0xc003d0c8,ebx
c001cc57:	e8 92 36 ff ff       	call   c00102ee <VgaText::updateDiskUsage()>
c001cc5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc60:	eb 05                	jmp    c001cc67 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc62:	b8 01 00 00 00       	mov    eax,0x1
c001cc67:	83 c4 10             	add    esp,0x10
c001cc6a:	5b                   	pop    ebx
c001cc6b:	5e                   	pop    esi
c001cc6c:	5f                   	pop    edi
c001cc6d:	c3                   	ret    

c001cc6e <ATA::write(unsigned long long, int, void*)>:
c001cc6e:	57                   	push   edi
c001cc6f:	b8 04 00 00 00       	mov    eax,0x4
c001cc74:	56                   	push   esi
c001cc75:	53                   	push   ebx
c001cc76:	83 ec 10             	sub    esp,0x10
c001cc79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc81:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc84:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc8c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc92:	77 3b                	ja     c001cccf <ATA::write(unsigned long long, int, void*)+0x61>
c001cc94:	b8 06 00 00 00       	mov    eax,0x6
c001cc99:	85 d2                	test   edx,edx
c001cc9b:	74 32                	je     c001cccf <ATA::write(unsigned long long, int, void*)+0x61>
c001cc9d:	50                   	push   eax
c001cc9e:	50                   	push   eax
c001cc9f:	6a 01                	push   0x1
c001cca1:	52                   	push   edx
c001cca2:	53                   	push   ebx
c001cca3:	57                   	push   edi
c001cca4:	56                   	push   esi
c001cca5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cca9:	e8 da fb ff ff       	call   c001c888 <ATA::access(unsigned long long, int, void*, bool)>
c001ccae:	83 c4 20             	add    esp,0x20
c001ccb1:	85 c0                	test   eax,eax
c001ccb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccb7:	75 11                	jne    c001ccca <ATA::write(unsigned long long, int, void*)+0x5c>
c001ccb9:	01 1d c4 d0 03 c0    	add    DWORD PTR ds:0xc003d0c4,ebx
c001ccbf:	e8 2a 36 ff ff       	call   c00102ee <VgaText::updateDiskUsage()>
c001ccc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccc8:	eb 05                	jmp    c001cccf <ATA::write(unsigned long long, int, void*)+0x61>
c001ccca:	b8 01 00 00 00       	mov    eax,0x1
c001cccf:	83 c4 10             	add    esp,0x10
c001ccd2:	5b                   	pop    ebx
c001ccd3:	5e                   	pop    esi
c001ccd4:	5f                   	pop    edi
c001ccd5:	c3                   	ret    

c001ccd6 <ATA::detectCHS()>:
c001ccd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccda:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cce0:	c1 e0 06             	shl    eax,0x6
c001cce3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cce9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ccf3:	c7 44 24 04 13 aa 03 c0 	mov    DWORD PTR [esp+0x4],0xc003aa13
c001ccfb:	e9 de 02 ff ff       	jmp    c000cfde <panic(char const*)>

c001cd00 <ATA::open(int, int, void*)>:
c001cd00:	53                   	push   ebx
c001cd01:	83 ec 08             	sub    esp,0x8
c001cd04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd10:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cd16:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd1c:	c1 e0 06             	shl    eax,0x6
c001cd1f:	01 d0                	add    eax,edx
c001cd21:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cd28:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cd2e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cd35:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cd3f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cd45:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cd4c:	75 0c                	jne    c001cd5a <ATA::open(int, int, void*)+0x5a>
c001cd4e:	83 ec 0c             	sub    esp,0xc
c001cd51:	53                   	push   ebx
c001cd52:	e8 7f ff ff ff       	call   c001ccd6 <ATA::detectCHS()>
c001cd57:	83 c4 10             	add    esp,0x10
c001cd5a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd60:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd66:	c1 e0 06             	shl    eax,0x6
c001cd69:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cd70:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd7a:	d1 e8                	shr    eax,1
c001cd7c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cd82:	6a 04                	push   0x4
c001cd84:	6a 0c                	push   0xc
c001cd86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd8d:	50                   	push   eax
c001cd8e:	52                   	push   edx
c001cd8f:	e8 f4 ed ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd94:	90                   	nop
c001cd95:	90                   	nop
c001cd96:	6a 00                	push   0x0
c001cd98:	6a 0c                	push   0xc
c001cd9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cda1:	50                   	push   eax
c001cda2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cda8:	e8 db ed ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdad:	83 c4 14             	add    esp,0x14
c001cdb0:	53                   	push   ebx
c001cdb1:	e8 32 6e ff ff       	call   c0013be8 <PhysicalDisk::startCache()>
c001cdb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdb9:	e8 82 86 ff ff       	call   c0015440 <createPartitionsForDisk(PhysicalDisk*)>
c001cdbe:	31 c0                	xor    eax,eax
c001cdc0:	83 c4 18             	add    esp,0x18
c001cdc3:	5b                   	pop    ebx
c001cdc4:	c3                   	ret    
c001cdc5:	90                   	nop

c001cdc6 <ATAPI::write(unsigned long long, int, void*)>:
c001cdc6:	b8 03 00 00 00       	mov    eax,0x3
c001cdcb:	c3                   	ret    

c001cdcc <ATAPI::close(int, int, void*)>:
c001cdcc:	83 ec 0c             	sub    esp,0xc
c001cdcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cdd9:	85 c0                	test   eax,eax
c001cddb:	74 0c                	je     c001cde9 <ATAPI::close(int, int, void*)+0x1d>
c001cddd:	83 ec 0c             	sub    esp,0xc
c001cde0:	8b 10                	mov    edx,DWORD PTR [eax]
c001cde2:	50                   	push   eax
c001cde3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cde6:	83 c4 10             	add    esp,0x10
c001cde9:	31 c0                	xor    eax,eax
c001cdeb:	83 c4 0c             	add    esp,0xc
c001cdee:	c3                   	ret    
c001cdef:	90                   	nop

c001cdf0 <ATAPI::ATAPI()>:
c001cdf0:	83 ec 0c             	sub    esp,0xc
c001cdf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf7:	83 ec 04             	sub    esp,0x4
c001cdfa:	68 00 08 00 00       	push   0x800
c001cdff:	68 5c aa 03 c0       	push   0xc003aa5c
c001ce04:	50                   	push   eax
c001ce05:	e8 76 6d ff ff       	call   c0013b80 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ce0a:	83 c4 10             	add    esp,0x10
c001ce0d:	ba 9c aa 03 c0       	mov    edx,0xc003aa9c
c001ce12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce16:	89 10                	mov    DWORD PTR [eax],edx
c001ce18:	90                   	nop
c001ce19:	83 c4 0c             	add    esp,0xc
c001ce1c:	c3                   	ret    
c001ce1d:	90                   	nop

c001ce1e <ATAPI::readyForCommand()>:
c001ce1e:	56                   	push   esi
c001ce1f:	53                   	push   ebx
c001ce20:	31 db                	xor    ebx,ebx
c001ce22:	50                   	push   eax
c001ce23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce27:	50                   	push   eax
c001ce28:	6a 0c                	push   0xc
c001ce2a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ce31:	50                   	push   eax
c001ce32:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ce38:	e8 0b ee ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001ce3d:	83 c4 10             	add    esp,0x10
c001ce40:	a8 88                	test   al,0x88
c001ce42:	74 23                	je     c001ce67 <ATAPI::readyForCommand()+0x49>
c001ce44:	43                   	inc    ebx
c001ce45:	83 fb 63             	cmp    ebx,0x63
c001ce48:	7e dd                	jle    c001ce27 <ATAPI::readyForCommand()+0x9>
c001ce4a:	51                   	push   ecx
c001ce4b:	51                   	push   ecx
c001ce4c:	6a 00                	push   0x0
c001ce4e:	68 40 42 0f 00       	push   0xf4240
c001ce53:	e8 c3 1b ff ff       	call   c000ea1b <nanoSleep(unsigned long long)>
c001ce58:	83 c4 10             	add    esp,0x10
c001ce5b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ce61:	75 c4                	jne    c001ce27 <ATAPI::readyForCommand()+0x9>
c001ce63:	31 c0                	xor    eax,eax
c001ce65:	eb 02                	jmp    c001ce69 <ATAPI::readyForCommand()+0x4b>
c001ce67:	b0 01                	mov    al,0x1
c001ce69:	5a                   	pop    edx
c001ce6a:	5b                   	pop    ebx
c001ce6b:	5e                   	pop    esi
c001ce6c:	c3                   	ret    
c001ce6d:	90                   	nop

c001ce6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ce6e:	55                   	push   ebp
c001ce6f:	57                   	push   edi
c001ce70:	56                   	push   esi
c001ce71:	53                   	push   ebx
c001ce72:	83 ec 20             	sub    esp,0x20
c001ce75:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ce79:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ce7d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ce81:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce85:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ce89:	6a 01                	push   0x1
c001ce8b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce92:	50                   	push   eax
c001ce93:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce99:	e8 f6 ee ff ff       	call   c001bd94 <IDE::enableIRQs(unsigned char, bool)>
c001ce9e:	5e                   	pop    esi
c001ce9f:	58                   	pop    eax
c001cea0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cea7:	50                   	push   eax
c001cea8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ceae:	e8 af ec ff ff       	call   c001bb62 <IDE::prepareInterrupt(unsigned char)>
c001ceb3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ceb6:	e8 63 ff ff ff       	call   c001ce1e <ATAPI::readyForCommand()>
c001cebb:	83 c4 10             	add    esp,0x10
c001cebe:	84 c0                	test   al,al
c001cec0:	75 0a                	jne    c001cecc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cec2:	bb 01 00 00 00       	mov    ebx,0x1
c001cec7:	e9 57 02 00 00       	jmp    c001d123 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cecc:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ced2:	c1 e0 04             	shl    eax,0x4
c001ced5:	0f b6 c0             	movzx  eax,al
c001ced8:	50                   	push   eax
c001ced9:	6a 06                	push   0x6
c001cedb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cee2:	50                   	push   eax
c001cee3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cee9:	e8 9a ec ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceee:	6a 00                	push   0x0
c001cef0:	6a 01                	push   0x1
c001cef2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cef9:	50                   	push   eax
c001cefa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf00:	e8 83 ec ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf05:	83 c4 20             	add    esp,0x20
c001cf08:	0f b6 c3             	movzx  eax,bl
c001cf0b:	0f b6 df             	movzx  ebx,bh
c001cf0e:	50                   	push   eax
c001cf0f:	6a 04                	push   0x4
c001cf11:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf18:	50                   	push   eax
c001cf19:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf1f:	e8 64 ec ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf24:	53                   	push   ebx
c001cf25:	6a 05                	push   0x5
c001cf27:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf2e:	50                   	push   eax
c001cf2f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf35:	e8 4e ec ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf3a:	83 c4 20             	add    esp,0x20
c001cf3d:	68 a0 00 00 00       	push   0xa0
c001cf42:	6a 07                	push   0x7
c001cf44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf4b:	50                   	push   eax
c001cf4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf52:	e8 31 ec ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf57:	83 c4 0c             	add    esp,0xc
c001cf5a:	6a 01                	push   0x1
c001cf5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf63:	50                   	push   eax
c001cf64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf6a:	e8 c5 f7 ff ff       	call   c001c734 <IDE::polling(unsigned char, unsigned int)>
c001cf6f:	83 c4 10             	add    esp,0x10
c001cf72:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cf78:	84 c0                	test   al,al
c001cf7a:	74 23                	je     c001cf9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cf7c:	0f b6 d8             	movzx  ebx,al
c001cf7f:	0f b6 d2             	movzx  edx,dl
c001cf82:	53                   	push   ebx
c001cf83:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cf8a:	50                   	push   eax
c001cf8b:	52                   	push   edx
c001cf8c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf92:	e8 07 f6 ff ff       	call   c001c59e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf97:	83 c4 10             	add    esp,0x10
c001cf9a:	e9 84 01 00 00       	jmp    c001d123 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cf9f:	0f b6 d2             	movzx  edx,dl
c001cfa2:	53                   	push   ebx
c001cfa3:	53                   	push   ebx
c001cfa4:	52                   	push   edx
c001cfa5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfab:	e8 c6 eb ff ff       	call   c001bb76 <IDE::getBase(unsigned char)>
c001cfb0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cfb4:	b9 06 00 00 00       	mov    ecx,0x6
c001cfb9:	89 c2                	mov    edx,eax
c001cfbb:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cfbe:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cfc2:	83 c4 10             	add    esp,0x10
c001cfc5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cfcb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cfd2:	85 db                	test   ebx,ebx
c001cfd4:	0f 84 ec 00 00 00    	je     c001d0c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cfda:	51                   	push   ecx
c001cfdb:	51                   	push   ecx
c001cfdc:	52                   	push   edx
c001cfdd:	50                   	push   eax
c001cfde:	e8 13 ed ff ff       	call   c001bcf6 <IDE::waitInterrupt(unsigned char)>
c001cfe3:	83 c4 10             	add    esp,0x10
c001cfe6:	84 c0                	test   al,al
c001cfe8:	0f 84 d4 fe ff ff    	je     c001cec2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cfee:	56                   	push   esi
c001cfef:	56                   	push   esi
c001cff0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cff7:	50                   	push   eax
c001cff8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cffe:	e8 5f eb ff ff       	call   c001bb62 <IDE::prepareInterrupt(unsigned char)>
c001d003:	83 c4 0c             	add    esp,0xc
c001d006:	6a 04                	push   0x4
c001d008:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d00f:	50                   	push   eax
c001d010:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d016:	e8 2d ec ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001d01b:	83 c4 0c             	add    esp,0xc
c001d01e:	89 c6                	mov    esi,eax
c001d020:	6a 05                	push   0x5
c001d022:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d029:	50                   	push   eax
c001d02a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d030:	e8 13 ec ff ff       	call   c001bc48 <IDE::read(unsigned char, unsigned char)>
c001d035:	89 f1                	mov    ecx,esi
c001d037:	0f b6 c0             	movzx  eax,al
c001d03a:	0f b6 f1             	movzx  esi,cl
c001d03d:	c1 e0 08             	shl    eax,0x8
c001d040:	09 c6                	or     esi,eax
c001d042:	d1 fe                	sar    esi,1
c001d044:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d048:	83 c4 10             	add    esp,0x10
c001d04b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d050:	74 41                	je     c001d093 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d052:	31 c9                	xor    ecx,ecx
c001d054:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d05a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d061:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d065:	75 0a                	jne    c001d071 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d067:	01 c9                	add    ecx,ecx
c001d069:	01 cd                	add    ebp,ecx
c001d06b:	4b                   	dec    ebx
c001d06c:	e9 54 ff ff ff       	jmp    c001cfc5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d071:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d076:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d07a:	51                   	push   ecx
c001d07b:	51                   	push   ecx
c001d07c:	52                   	push   edx
c001d07d:	50                   	push   eax
c001d07e:	e8 f3 ea ff ff       	call   c001bb76 <IDE::getBase(unsigned char)>
c001d083:	89 c2                	mov    edx,eax
c001d085:	89 f0                	mov    eax,esi
c001d087:	66 ef                	out    dx,ax
c001d089:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	41                   	inc    ecx
c001d091:	eb c1                	jmp    c001d054 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d093:	31 f6                	xor    esi,esi
c001d095:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d09b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d0a2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d0a6:	75 06                	jne    c001d0ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d0a8:	01 f6                	add    esi,esi
c001d0aa:	01 f5                	add    ebp,esi
c001d0ac:	eb bd                	jmp    c001d06b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d0ae:	51                   	push   ecx
c001d0af:	51                   	push   ecx
c001d0b0:	52                   	push   edx
c001d0b1:	50                   	push   eax
c001d0b2:	e8 bf ea ff ff       	call   c001bb76 <IDE::getBase(unsigned char)>
c001d0b7:	89 c2                	mov    edx,eax
c001d0b9:	66 ed                	in     ax,dx
c001d0bb:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d0c0:	83 c4 10             	add    esp,0x10
c001d0c3:	46                   	inc    esi
c001d0c4:	eb cf                	jmp    c001d095 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d0c6:	51                   	push   ecx
c001d0c7:	51                   	push   ecx
c001d0c8:	52                   	push   edx
c001d0c9:	50                   	push   eax
c001d0ca:	e8 27 ec ff ff       	call   c001bcf6 <IDE::waitInterrupt(unsigned char)>
c001d0cf:	83 c4 10             	add    esp,0x10
c001d0d2:	84 c0                	test   al,al
c001d0d4:	0f 84 e8 fd ff ff    	je     c001cec2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d0da:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d0df:	52                   	push   edx
c001d0e0:	52                   	push   edx
c001d0e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0e8:	50                   	push   eax
c001d0e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0ef:	e8 6e ea ff ff       	call   c001bb62 <IDE::prepareInterrupt(unsigned char)>
c001d0f4:	83 c4 10             	add    esp,0x10
c001d0f7:	50                   	push   eax
c001d0f8:	50                   	push   eax
c001d0f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d100:	50                   	push   eax
c001d101:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d107:	e8 6a ea ff ff       	call   c001bb76 <IDE::getBase(unsigned char)>
c001d10c:	8d 50 07             	lea    edx,[eax+0x7]
c001d10f:	ec                   	in     al,dx
c001d110:	83 c4 10             	add    esp,0x10
c001d113:	a8 88                	test   al,0x88
c001d115:	74 0a                	je     c001d121 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d117:	4b                   	dec    ebx
c001d118:	75 dd                	jne    c001d0f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d11a:	bb 02 00 00 00       	mov    ebx,0x2
c001d11f:	eb 02                	jmp    c001d123 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d121:	31 db                	xor    ebx,ebx
c001d123:	83 c4 1c             	add    esp,0x1c
c001d126:	89 d8                	mov    eax,ebx
c001d128:	5b                   	pop    ebx
c001d129:	5e                   	pop    esi
c001d12a:	5f                   	pop    edi
c001d12b:	5d                   	pop    ebp
c001d12c:	c3                   	ret    
c001d12d:	90                   	nop

c001d12e <ATAPI::diskRemoved()>:
c001d12e:	83 ec 18             	sub    esp,0x18
c001d131:	68 67 aa 03 c0       	push   0xc003aa67
c001d136:	e8 85 fd fe ff       	call   c000cec0 <kprintf(char const*, ...)>
c001d13b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d13f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d146:	83 c4 1c             	add    esp,0x1c
c001d149:	c3                   	ret    

c001d14a <ATAPI::eject()>:
c001d14a:	57                   	push   edi
c001d14b:	b9 03 00 00 00       	mov    ecx,0x3
c001d150:	53                   	push   ebx
c001d151:	83 ec 14             	sub    esp,0x14
c001d154:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d158:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d15c:	fc                   	cld    
c001d15d:	31 c0                	xor    eax,eax
c001d15f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d161:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d166:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d16b:	50                   	push   eax
c001d16c:	50                   	push   eax
c001d16d:	6a 00                	push   0x0
c001d16f:	6a 00                	push   0x0
c001d171:	6a 00                	push   0x0
c001d173:	6a 02                	push   0x2
c001d175:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d179:	50                   	push   eax
c001d17a:	53                   	push   ebx
c001d17b:	e8 ee fc ff ff       	call   c001ce6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d180:	83 c4 14             	add    esp,0x14
c001d183:	53                   	push   ebx
c001d184:	e8 a5 ff ff ff       	call   c001d12e <ATAPI::diskRemoved()>
c001d189:	83 c4 24             	add    esp,0x24
c001d18c:	5b                   	pop    ebx
c001d18d:	5f                   	pop    edi
c001d18e:	c3                   	ret    
c001d18f:	90                   	nop

c001d190 <ATAPI::diskInserted()>:
c001d190:	53                   	push   ebx
c001d191:	83 ec 14             	sub    esp,0x14
c001d194:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d198:	68 7d aa 03 c0       	push   0xc003aa7d
c001d19d:	e8 1e fd fe ff       	call   c000cec0 <kprintf(char const*, ...)>
c001d1a2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d1a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1ac:	e8 37 6a ff ff       	call   c0013be8 <PhysicalDisk::startCache()>
c001d1b1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d1b5:	83 c4 18             	add    esp,0x18
c001d1b8:	5b                   	pop    ebx
c001d1b9:	e9 82 82 ff ff       	jmp    c0015440 <createPartitionsForDisk(PhysicalDisk*)>

c001d1be <ATAPI::detectMedia()>:
c001d1be:	56                   	push   esi
c001d1bf:	53                   	push   ebx
c001d1c0:	83 ec 28             	sub    esp,0x28
c001d1c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d1c7:	6a 0c                	push   0xc
c001d1c9:	6a 00                	push   0x0
c001d1cb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d1cf:	56                   	push   esi
c001d1d0:	e8 d6 34 fe ff       	call   c00006ab <memset>
c001d1d5:	58                   	pop    eax
c001d1d6:	5a                   	pop    edx
c001d1d7:	6a 00                	push   0x0
c001d1d9:	6a 00                	push   0x0
c001d1db:	6a 00                	push   0x0
c001d1dd:	6a 00                	push   0x0
c001d1df:	56                   	push   esi
c001d1e0:	53                   	push   ebx
c001d1e1:	e8 88 fc ff ff       	call   c001ce6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d1e6:	83 c4 1c             	add    esp,0x1c
c001d1e9:	6a 0c                	push   0xc
c001d1eb:	6a 00                	push   0x0
c001d1ed:	56                   	push   esi
c001d1ee:	e8 b8 34 fe ff       	call   c00006ab <memset>
c001d1f3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d1f8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d1fd:	59                   	pop    ecx
c001d1fe:	58                   	pop    eax
c001d1ff:	6a 01                	push   0x1
c001d201:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d205:	50                   	push   eax
c001d206:	6a 00                	push   0x0
c001d208:	6a 12                	push   0x12
c001d20a:	56                   	push   esi
c001d20b:	53                   	push   ebx
c001d20c:	e8 5d fc ff ff       	call   c001ce6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d211:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d215:	83 c4 20             	add    esp,0x20
c001d218:	83 e0 7f             	and    eax,0x7f
c001d21b:	3c 70                	cmp    al,0x70
c001d21d:	74 15                	je     c001d234 <ATAPI::detectMedia()+0x76>
c001d21f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d226:	75 0c                	jne    c001d234 <ATAPI::detectMedia()+0x76>
c001d228:	83 ec 0c             	sub    esp,0xc
c001d22b:	53                   	push   ebx
c001d22c:	e8 5f ff ff ff       	call   c001d190 <ATAPI::diskInserted()>
c001d231:	83 c4 10             	add    esp,0x10
c001d234:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d238:	83 e0 0f             	and    eax,0xf
c001d23b:	3c 02                	cmp    al,0x2
c001d23d:	75 1b                	jne    c001d25a <ATAPI::detectMedia()+0x9c>
c001d23f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d244:	75 2d                	jne    c001d273 <ATAPI::detectMedia()+0xb5>
c001d246:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d24d:	74 24                	je     c001d273 <ATAPI::detectMedia()+0xb5>
c001d24f:	83 ec 0c             	sub    esp,0xc
c001d252:	53                   	push   ebx
c001d253:	e8 d6 fe ff ff       	call   c001d12e <ATAPI::diskRemoved()>
c001d258:	eb 16                	jmp    c001d270 <ATAPI::detectMedia()+0xb2>
c001d25a:	84 c0                	test   al,al
c001d25c:	75 15                	jne    c001d273 <ATAPI::detectMedia()+0xb5>
c001d25e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d265:	75 0c                	jne    c001d273 <ATAPI::detectMedia()+0xb5>
c001d267:	83 ec 0c             	sub    esp,0xc
c001d26a:	53                   	push   ebx
c001d26b:	e8 20 ff ff ff       	call   c001d190 <ATAPI::diskInserted()>
c001d270:	83 c4 10             	add    esp,0x10
c001d273:	83 c4 24             	add    esp,0x24
c001d276:	5b                   	pop    ebx
c001d277:	5e                   	pop    esi
c001d278:	c3                   	ret    
c001d279:	90                   	nop

c001d27a <ATAPI::open(int, int, void*)>:
c001d27a:	53                   	push   ebx
c001d27b:	83 ec 08             	sub    esp,0x8
c001d27e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d282:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d286:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d28a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d290:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d296:	c1 e0 06             	shl    eax,0x6
c001d299:	01 d0                	add    eax,edx
c001d29b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d2a2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d2a8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d2af:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d2b9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d2bf:	6a 04                	push   0x4
c001d2c1:	6a 0c                	push   0xc
c001d2c3:	51                   	push   ecx
c001d2c4:	52                   	push   edx
c001d2c5:	e8 be e8 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2ca:	90                   	nop
c001d2cb:	90                   	nop
c001d2cc:	6a 00                	push   0x0
c001d2ce:	6a 0c                	push   0xc
c001d2d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2d7:	50                   	push   eax
c001d2d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2de:	e8 a5 e8 ff ff       	call   c001bb88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2e3:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d2ea:	83 c4 14             	add    esp,0x14
c001d2ed:	53                   	push   ebx
c001d2ee:	e8 cb fe ff ff       	call   c001d1be <ATAPI::detectMedia()>
c001d2f3:	31 c0                	xor    eax,eax
c001d2f5:	83 c4 18             	add    esp,0x18
c001d2f8:	5b                   	pop    ebx
c001d2f9:	c3                   	ret    

c001d2fa <ATAPI::read(unsigned long long, int, void*)>:
c001d2fa:	55                   	push   ebp
c001d2fb:	57                   	push   edi
c001d2fc:	56                   	push   esi
c001d2fd:	53                   	push   ebx
c001d2fe:	83 ec 1c             	sub    esp,0x1c
c001d301:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d305:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d309:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d30d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d314:	74 41                	je     c001d357 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d316:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d31a:	b9 03 00 00 00       	mov    ecx,0x3
c001d31f:	fc                   	cld    
c001d320:	31 c0                	xor    eax,eax
c001d322:	86 fb                	xchg   bl,bh
c001d324:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d326:	c1 c3 10             	rol    ebx,0x10
c001d329:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d32e:	89 e8                	mov    eax,ebp
c001d330:	86 fb                	xchg   bl,bh
c001d332:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d336:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d33a:	50                   	push   eax
c001d33b:	50                   	push   eax
c001d33c:	55                   	push   ebp
c001d33d:	c1 e5 0b             	shl    ebp,0xb
c001d340:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d344:	6a 00                	push   0x0
c001d346:	55                   	push   ebp
c001d347:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d34b:	50                   	push   eax
c001d34c:	56                   	push   esi
c001d34d:	e8 1c fb ff ff       	call   c001ce6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d352:	83 c4 20             	add    esp,0x20
c001d355:	eb 1a                	jmp    c001d371 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d357:	83 ec 0c             	sub    esp,0xc
c001d35a:	56                   	push   esi
c001d35b:	e8 5e fe ff ff       	call   c001d1be <ATAPI::detectMedia()>
c001d360:	83 c4 10             	add    esp,0x10
c001d363:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d36a:	75 aa                	jne    c001d316 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d36c:	b8 02 00 00 00       	mov    eax,0x2
c001d371:	83 c4 1c             	add    esp,0x1c
c001d374:	5b                   	pop    ebx
c001d375:	5e                   	pop    esi
c001d376:	5f                   	pop    edi
c001d377:	5d                   	pop    ebp
c001d378:	c3                   	ret    
c001d379:	90                   	nop

c001d37a <AVX::open(int, int, void*)>:
c001d37a:	83 ec 0c             	sub    esp,0xc
c001d37d:	e8 06 10 00 00       	call   c001e388 <avxInit>
c001d382:	b8 00 00 00 00       	mov    eax,0x0
c001d387:	83 c4 0c             	add    esp,0xc
c001d38a:	c3                   	ret    
c001d38b:	90                   	nop

c001d38c <AVX::close(int, int, void*)>:
c001d38c:	83 ec 0c             	sub    esp,0xc
c001d38f:	e8 f5 0f 00 00       	call   c001e389 <avxClose>
c001d394:	b8 00 00 00 00       	mov    eax,0x0
c001d399:	83 c4 0c             	add    esp,0xc
c001d39c:	c3                   	ret    
c001d39d:	90                   	nop

c001d39e <AVX::available()>:
c001d39e:	83 ec 0c             	sub    esp,0xc
c001d3a1:	e8 da 0f 00 00       	call   c001e380 <avxDetect>
c001d3a6:	85 c0                	test   eax,eax
c001d3a8:	0f 95 c0             	setne  al
c001d3ab:	83 c4 0c             	add    esp,0xc
c001d3ae:	c3                   	ret    
c001d3af:	90                   	nop

c001d3b0 <AVX::save(void*)>:
c001d3b0:	83 ec 0c             	sub    esp,0xc
c001d3b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3b7:	83 ec 0c             	sub    esp,0xc
c001d3ba:	50                   	push   eax
c001d3bb:	e8 c6 0f 00 00       	call   c001e386 <avxSave>
c001d3c0:	83 c4 10             	add    esp,0x10
c001d3c3:	90                   	nop
c001d3c4:	83 c4 0c             	add    esp,0xc
c001d3c7:	c3                   	ret    

c001d3c8 <AVX::load(void*)>:
c001d3c8:	83 ec 0c             	sub    esp,0xc
c001d3cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3cf:	83 ec 0c             	sub    esp,0xc
c001d3d2:	50                   	push   eax
c001d3d3:	e8 af 0f 00 00       	call   c001e387 <avxLoad>
c001d3d8:	83 c4 10             	add    esp,0x10
c001d3db:	90                   	nop
c001d3dc:	83 c4 0c             	add    esp,0xc
c001d3df:	c3                   	ret    

c001d3e0 <AVX::AVX()>:
c001d3e0:	83 ec 0c             	sub    esp,0xc
c001d3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e7:	83 ec 08             	sub    esp,0x8
c001d3ea:	68 c8 aa 03 c0       	push   0xc003aac8
c001d3ef:	50                   	push   eax
c001d3f0:	e8 69 68 ff ff       	call   c0013c5e <FPU::FPU(char const*)>
c001d3f5:	83 c4 10             	add    esp,0x10
c001d3f8:	ba d8 aa 03 c0       	mov    edx,0xc003aad8
c001d3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d401:	89 10                	mov    DWORD PTR [eax],edx
c001d403:	90                   	nop
c001d404:	83 c4 0c             	add    esp,0xc
c001d407:	c3                   	ret    

c001d408 <MMX::available()>:
c001d408:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001d40d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d413:	83 e0 20             	and    eax,0x20
c001d416:	84 c0                	test   al,al
c001d418:	0f 95 c0             	setne  al
c001d41b:	c3                   	ret    

c001d41c <MMX::open(int, int, void*)>:
c001d41c:	83 ec 0c             	sub    esp,0xc
c001d41f:	e8 d8 0f 00 00       	call   c001e3fc <x87Init>
c001d424:	b8 00 00 00 00       	mov    eax,0x0
c001d429:	83 c4 0c             	add    esp,0xc
c001d42c:	c3                   	ret    
c001d42d:	90                   	nop

c001d42e <MMX::close(int, int, void*)>:
c001d42e:	83 ec 0c             	sub    esp,0xc
c001d431:	e8 e0 0f 00 00       	call   c001e416 <x87Close>
c001d436:	b8 00 00 00 00       	mov    eax,0x0
c001d43b:	83 c4 0c             	add    esp,0xc
c001d43e:	c3                   	ret    
c001d43f:	90                   	nop

c001d440 <MMX::save(void*)>:
c001d440:	83 ec 0c             	sub    esp,0xc
c001d443:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d447:	83 ec 0c             	sub    esp,0xc
c001d44a:	50                   	push   eax
c001d44b:	e8 a1 0f 00 00       	call   c001e3f1 <x87Save>
c001d450:	83 c4 10             	add    esp,0x10
c001d453:	90                   	nop
c001d454:	83 c4 0c             	add    esp,0xc
c001d457:	c3                   	ret    

c001d458 <MMX::load(void*)>:
c001d458:	83 ec 0c             	sub    esp,0xc
c001d45b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d45f:	83 ec 0c             	sub    esp,0xc
c001d462:	50                   	push   eax
c001d463:	e8 8f 0f 00 00       	call   c001e3f7 <x87Load>
c001d468:	83 c4 10             	add    esp,0x10
c001d46b:	90                   	nop
c001d46c:	83 c4 0c             	add    esp,0xc
c001d46f:	c3                   	ret    

c001d470 <MMX::MMX()>:
c001d470:	83 ec 0c             	sub    esp,0xc
c001d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d477:	83 ec 08             	sub    esp,0x8
c001d47a:	68 08 ab 03 c0       	push   0xc003ab08
c001d47f:	50                   	push   eax
c001d480:	e8 d9 67 ff ff       	call   c0013c5e <FPU::FPU(char const*)>
c001d485:	83 c4 10             	add    esp,0x10
c001d488:	ba 18 ab 03 c0       	mov    edx,0xc003ab18
c001d48d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d491:	89 10                	mov    DWORD PTR [eax],edx
c001d493:	90                   	nop
c001d494:	83 c4 0c             	add    esp,0xc
c001d497:	c3                   	ret    

c001d498 <SSE::open(int, int, void*)>:
c001d498:	83 ec 0c             	sub    esp,0xc
c001d49b:	e8 17 0f 00 00       	call   c001e3b7 <sseInit>
c001d4a0:	b8 00 00 00 00       	mov    eax,0x0
c001d4a5:	83 c4 0c             	add    esp,0xc
c001d4a8:	c3                   	ret    
c001d4a9:	90                   	nop

c001d4aa <SSE::close(int, int, void*)>:
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	e8 15 0f 00 00       	call   c001e3c7 <sseClose>
c001d4b2:	b8 00 00 00 00       	mov    eax,0x0
c001d4b7:	83 c4 0c             	add    esp,0xc
c001d4ba:	c3                   	ret    
c001d4bb:	90                   	nop

c001d4bc <SSE::available()>:
c001d4bc:	83 ec 1c             	sub    esp,0x1c
c001d4bf:	e8 cc 0e 00 00       	call   c001e390 <sseDetect>
c001d4c4:	85 c0                	test   eax,eax
c001d4c6:	0f 95 c0             	setne  al
c001d4c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d4cd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d4d1:	83 c4 1c             	add    esp,0x1c
c001d4d4:	c3                   	ret    
c001d4d5:	90                   	nop

c001d4d6 <SSE::save(void*)>:
c001d4d6:	83 ec 0c             	sub    esp,0xc
c001d4d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4dd:	83 ec 0c             	sub    esp,0xc
c001d4e0:	50                   	push   eax
c001d4e1:	e8 c5 0e 00 00       	call   c001e3ab <sseSave>
c001d4e6:	83 c4 10             	add    esp,0x10
c001d4e9:	90                   	nop
c001d4ea:	83 c4 0c             	add    esp,0xc
c001d4ed:	c3                   	ret    

c001d4ee <SSE::load(void*)>:
c001d4ee:	83 ec 0c             	sub    esp,0xc
c001d4f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4f5:	83 ec 0c             	sub    esp,0xc
c001d4f8:	50                   	push   eax
c001d4f9:	e8 b3 0e 00 00       	call   c001e3b1 <sseLoad>
c001d4fe:	83 c4 10             	add    esp,0x10
c001d501:	90                   	nop
c001d502:	83 c4 0c             	add    esp,0xc
c001d505:	c3                   	ret    

c001d506 <SSE::SSE()>:
c001d506:	83 ec 0c             	sub    esp,0xc
c001d509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d50d:	83 ec 08             	sub    esp,0x8
c001d510:	68 48 ab 03 c0       	push   0xc003ab48
c001d515:	50                   	push   eax
c001d516:	e8 43 67 ff ff       	call   c0013c5e <FPU::FPU(char const*)>
c001d51b:	83 c4 10             	add    esp,0x10
c001d51e:	ba 58 ab 03 c0       	mov    edx,0xc003ab58
c001d523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d527:	89 10                	mov    DWORD PTR [eax],edx
c001d529:	90                   	nop
c001d52a:	83 c4 0c             	add    esp,0xc
c001d52d:	c3                   	ret    

c001d52e <x87::open(int, int, void*)>:
c001d52e:	83 ec 0c             	sub    esp,0xc
c001d531:	e8 c6 0e 00 00       	call   c001e3fc <x87Init>
c001d536:	b8 00 00 00 00       	mov    eax,0x0
c001d53b:	83 c4 0c             	add    esp,0xc
c001d53e:	c3                   	ret    
c001d53f:	90                   	nop

c001d540 <x87::close(int, int, void*)>:
c001d540:	83 ec 0c             	sub    esp,0xc
c001d543:	e8 ce 0e 00 00       	call   c001e416 <x87Close>
c001d548:	b8 00 00 00 00       	mov    eax,0x0
c001d54d:	83 c4 0c             	add    esp,0xc
c001d550:	c3                   	ret    
c001d551:	90                   	nop

c001d552 <x87::available()>:
c001d552:	83 ec 0c             	sub    esp,0xc
c001d555:	e8 7c 0e 00 00       	call   c001e3d6 <x87Detect>
c001d55a:	85 c0                	test   eax,eax
c001d55c:	0f 95 c0             	setne  al
c001d55f:	83 c4 0c             	add    esp,0xc
c001d562:	c3                   	ret    
c001d563:	90                   	nop

c001d564 <x87::save(void*)>:
c001d564:	83 ec 0c             	sub    esp,0xc
c001d567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d56b:	83 ec 0c             	sub    esp,0xc
c001d56e:	50                   	push   eax
c001d56f:	e8 7d 0e 00 00       	call   c001e3f1 <x87Save>
c001d574:	83 c4 10             	add    esp,0x10
c001d577:	90                   	nop
c001d578:	83 c4 0c             	add    esp,0xc
c001d57b:	c3                   	ret    

c001d57c <x87::load(void*)>:
c001d57c:	83 ec 0c             	sub    esp,0xc
c001d57f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d583:	83 ec 0c             	sub    esp,0xc
c001d586:	50                   	push   eax
c001d587:	e8 6b 0e 00 00       	call   c001e3f7 <x87Load>
c001d58c:	83 c4 10             	add    esp,0x10
c001d58f:	90                   	nop
c001d590:	83 c4 0c             	add    esp,0xc
c001d593:	c3                   	ret    

c001d594 <x87::x87()>:
c001d594:	83 ec 0c             	sub    esp,0xc
c001d597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d59b:	83 ec 08             	sub    esp,0x8
c001d59e:	68 88 ab 03 c0       	push   0xc003ab88
c001d5a3:	50                   	push   eax
c001d5a4:	e8 b5 66 ff ff       	call   c0013c5e <FPU::FPU(char const*)>
c001d5a9:	83 c4 10             	add    esp,0x10
c001d5ac:	ba 98 ab 03 c0       	mov    edx,0xc003ab98
c001d5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b5:	89 10                	mov    DWORD PTR [eax],edx
c001d5b7:	90                   	nop
c001d5b8:	83 c4 0c             	add    esp,0xc
c001d5bb:	c3                   	ret    

c001d5bc <APIC::disable()>:
c001d5bc:	90                   	nop
c001d5bd:	c3                   	ret    

c001d5be <APIC::close(int, int, void*)>:
c001d5be:	55                   	push   ebp
c001d5bf:	89 e5                	mov    ebp,esp
c001d5c1:	83 ec 08             	sub    esp,0x8
c001d5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5c9:	83 c0 3c             	add    eax,0x3c
c001d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5ce:	83 ec 0c             	sub    esp,0xc
c001d5d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5d4:	ff d0                	call   eax
c001d5d6:	83 c4 10             	add    esp,0x10
c001d5d9:	b8 00 00 00 00       	mov    eax,0x0
c001d5de:	c9                   	leave  
c001d5df:	c3                   	ret    

c001d5e0 <IOAPIC::close(int, int, void*)>:
c001d5e0:	b8 00 00 00 00       	mov    eax,0x0
c001d5e5:	c3                   	ret    

c001d5e6 <APIC::io_wait()>:
c001d5e6:	eb 00                	jmp    c001d5e8 <APIC::io_wait()+0x2>
c001d5e8:	eb 00                	jmp    c001d5ea <APIC::io_wait()+0x4>
c001d5ea:	90                   	nop
c001d5eb:	c3                   	ret    

c001d5ec <APIC::getBase()>:
c001d5ec:	55                   	push   ebp
c001d5ed:	89 e5                	mov    ebp,esp
c001d5ef:	83 ec 18             	sub    esp,0x18
c001d5f2:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001d5f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d5fd:	83 e0 08             	and    eax,0x8
c001d600:	84 c0                	test   al,al
c001d602:	75 07                	jne    c001d60b <APIC::getBase()+0x1f>
c001d604:	b8 00 00 00 00       	mov    eax,0x0
c001d609:	eb 21                	jmp    c001d62c <APIC::getBase()+0x40>
c001d60b:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001d610:	83 ec 08             	sub    esp,0x8
c001d613:	6a 1b                	push   0x1b
c001d615:	50                   	push   eax
c001d616:	e8 a1 df fe ff       	call   c000b5bc <Computer::rdmsr(unsigned int)>
c001d61b:	83 c4 10             	add    esp,0x10
c001d61e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d621:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d624:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d627:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d62c:	c9                   	leave  
c001d62d:	c3                   	ret    

c001d62e <APIC::eoi(unsigned char)>:
c001d62e:	55                   	push   ebp
c001d62f:	89 e5                	mov    ebp,esp
c001d631:	83 ec 28             	sub    esp,0x28
c001d634:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d637:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d63a:	83 ec 0c             	sub    esp,0xc
c001d63d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d640:	e8 a7 ff ff ff       	call   c001d5ec <APIC::getBase()>
c001d645:	83 c4 10             	add    esp,0x10
c001d648:	05 b0 00 00 00       	add    eax,0xb0
c001d64d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d650:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d653:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d659:	90                   	nop
c001d65a:	c9                   	leave  
c001d65b:	c3                   	ret    

c001d65c <APIC::open(int, int, void*)>:
c001d65c:	55                   	push   ebp
c001d65d:	89 e5                	mov    ebp,esp
c001d65f:	57                   	push   edi
c001d660:	56                   	push   esi
c001d661:	53                   	push   ebx
c001d662:	83 ec 1c             	sub    esp,0x1c
c001d665:	83 ec 0c             	sub    esp,0xc
c001d668:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d66b:	e8 7c ff ff ff       	call   c001d5ec <APIC::getBase()>
c001d670:	83 c4 10             	add    esp,0x10
c001d673:	05 f0 00 00 00       	add    eax,0xf0
c001d678:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d67b:	83 ec 0c             	sub    esp,0xc
c001d67e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d681:	e8 66 ff ff ff       	call   c001d5ec <APIC::getBase()>
c001d686:	83 c4 10             	add    esp,0x10
c001d689:	89 c2                	mov    edx,eax
c001d68b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d68e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d694:	0f b6 f8             	movzx  edi,al
c001d697:	89 d0                	mov    eax,edx
c001d699:	ba 00 00 00 00       	mov    edx,0x0
c001d69e:	89 c1                	mov    ecx,eax
c001d6a0:	80 e5 ff             	and    ch,0xff
c001d6a3:	89 cb                	mov    ebx,ecx
c001d6a5:	0f b6 f2             	movzx  esi,dl
c001d6a8:	89 d8                	mov    eax,ebx
c001d6aa:	89 f2                	mov    edx,esi
c001d6ac:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d6af:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d6b2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d6b6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d6ba:	83 e0 00             	and    eax,0x0
c001d6bd:	09 d0                	or     eax,edx
c001d6bf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6c6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d6cc:	8d 50 01             	lea    edx,[eax+0x1]
c001d6cf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d6d2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d6d8:	0f b6 d0             	movzx  edx,al
c001d6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6de:	83 c2 08             	add    edx,0x8
c001d6e1:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d6e5:	0f b6 c9             	movzx  ecx,cl
c001d6e8:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d6ee:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d6f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d6f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6f7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d6fa:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d701:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d704:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d707:	89 10                	mov    DWORD PTR [eax],edx
c001d709:	b8 00 00 00 00       	mov    eax,0x0
c001d70e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d711:	5b                   	pop    ebx
c001d712:	5e                   	pop    esi
c001d713:	5f                   	pop    edi
c001d714:	5d                   	pop    ebp
c001d715:	c3                   	ret    

c001d716 <IOAPIC::IOAPIC()>:
c001d716:	83 ec 0c             	sub    esp,0xc
c001d719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d71d:	83 ec 08             	sub    esp,0x8
c001d720:	68 c8 ab 03 c0       	push   0xc003abc8
c001d725:	50                   	push   eax
c001d726:	e8 3f 62 ff ff       	call   c001396a <Device::Device(char const*)>
c001d72b:	83 c4 10             	add    esp,0x10
c001d72e:	ba f0 ac 03 c0       	mov    edx,0xc003acf0
c001d733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d737:	89 10                	mov    DWORD PTR [eax],edx
c001d739:	90                   	nop
c001d73a:	83 c4 0c             	add    esp,0xc
c001d73d:	c3                   	ret    

c001d73e <APIC::APIC()>:
c001d73e:	53                   	push   ebx
c001d73f:	83 ec 18             	sub    esp,0x18
c001d742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d746:	83 ec 08             	sub    esp,0x8
c001d749:	68 d0 ab 03 c0       	push   0xc003abd0
c001d74e:	50                   	push   eax
c001d74f:	e8 3e 69 ff ff       	call   c0014092 <InterruptController::InterruptController(char const*)>
c001d754:	83 c4 10             	add    esp,0x10
c001d757:	ba a8 ac 03 c0       	mov    edx,0xc003aca8
c001d75c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d760:	89 10                	mov    DWORD PTR [eax],edx
c001d762:	a0 20 d1 03 c0       	mov    al,ds:0xc003d120
c001d767:	83 f0 01             	xor    eax,0x1
c001d76a:	84 c0                	test   al,al
c001d76c:	0f 84 96 00 00 00    	je     c001d808 <APIC::APIC()+0xca>
c001d772:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d777:	a0 f0 c5 03 c0       	mov    al,ds:0xc003c5f0
c001d77c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d780:	73 7f                	jae    c001d801 <APIC::APIC()+0xc3>
c001d782:	83 ec 0c             	sub    esp,0xc
c001d785:	68 68 01 00 00       	push   0x168
c001d78a:	e8 e1 4c ff ff       	call   c0012470 <operator new(unsigned long)>
c001d78f:	83 c4 10             	add    esp,0x10
c001d792:	89 c3                	mov    ebx,eax
c001d794:	83 ec 0c             	sub    esp,0xc
c001d797:	53                   	push   ebx
c001d798:	e8 79 ff ff ff       	call   c001d716 <IOAPIC::IOAPIC()>
c001d79d:	83 c4 10             	add    esp,0x10
c001d7a0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d7a4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d7a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7ad:	89 14 85 00 d1 03 c0 	mov    DWORD PTR [eax*4-0x3ffc2f00],edx
c001d7b4:	a1 e0 d0 03 c0       	mov    eax,ds:0xc003d0e0
c001d7b9:	40                   	inc    eax
c001d7ba:	a3 e0 d0 03 c0       	mov    ds:0xc003d0e0,eax
c001d7bf:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001d7c4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d7ca:	83 ec 08             	sub    esp,0x8
c001d7cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d7d1:	50                   	push   eax
c001d7d2:	e8 a3 5f ff ff       	call   c001377a <Device::addChild(Device*)>
c001d7d7:	83 c4 10             	add    esp,0x10
c001d7da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7de:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7e0:	83 c0 08             	add    eax,0x8
c001d7e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7e5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d7ea:	6a 00                	push   0x0
c001d7ec:	6a 00                	push   0x0
c001d7ee:	52                   	push   edx
c001d7ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d7f3:	ff d0                	call   eax
c001d7f5:	83 c4 10             	add    esp,0x10
c001d7f8:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d7fc:	e9 76 ff ff ff       	jmp    c001d777 <APIC::APIC()+0x39>
c001d801:	c6 05 20 d1 03 c0 01 	mov    BYTE PTR ds:0xc003d120,0x1
c001d808:	90                   	nop
c001d809:	83 c4 18             	add    esp,0x18
c001d80c:	5b                   	pop    ebx
c001d80d:	c3                   	ret    

c001d80e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d80e:	55                   	push   ebp
c001d80f:	89 e5                	mov    ebp,esp
c001d811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d814:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d81a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d81d:	72 1d                	jb     c001d83c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d81f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d822:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d82b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d831:	01 d0                	add    eax,edx
c001d833:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d836:	73 04                	jae    c001d83c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d838:	b0 01                	mov    al,0x1
c001d83a:	eb 02                	jmp    c001d83e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d83c:	b0 00                	mov    al,0x0
c001d83e:	5d                   	pop    ebp
c001d83f:	c3                   	ret    

c001d840 <IOAPIC::read(int)>:
c001d840:	55                   	push   ebp
c001d841:	89 e5                	mov    ebp,esp
c001d843:	83 ec 10             	sub    esp,0x10
c001d846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d849:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d84f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d852:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d855:	0f b6 d0             	movzx  edx,al
c001d858:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d85b:	89 10                	mov    DWORD PTR [eax],edx
c001d85d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d860:	83 c0 10             	add    eax,0x10
c001d863:	8b 00                	mov    eax,DWORD PTR [eax]
c001d865:	c9                   	leave  
c001d866:	c3                   	ret    
c001d867:	90                   	nop

c001d868 <IOAPIC::open(int, int, void*)>:
c001d868:	55                   	push   ebp
c001d869:	89 e5                	mov    ebp,esp
c001d86b:	57                   	push   edi
c001d86c:	56                   	push   esi
c001d86d:	53                   	push   ebx
c001d86e:	83 ec 0c             	sub    esp,0xc
c001d871:	83 ec 0c             	sub    esp,0xc
c001d874:	68 fb ab 03 c0       	push   0xc003abfb
c001d879:	e8 42 f6 fe ff       	call   c000cec0 <kprintf(char const*, ...)>
c001d87e:	83 c4 10             	add    esp,0x10
c001d881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d884:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d887:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d890:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d896:	8b 14 85 20 c6 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc39e0]
c001d89d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8a0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d8a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8a9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d8af:	8b 14 85 a0 c6 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3960]
c001d8b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8b9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d8bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8c2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d8c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8cb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d8d1:	0f b6 f8             	movzx  edi,al
c001d8d4:	89 d0                	mov    eax,edx
c001d8d6:	ba 00 00 00 00       	mov    edx,0x0
c001d8db:	89 c1                	mov    ecx,eax
c001d8dd:	80 e5 ff             	and    ch,0xff
c001d8e0:	89 cb                	mov    ebx,ecx
c001d8e2:	0f b6 f2             	movzx  esi,dl
c001d8e5:	89 d8                	mov    eax,ebx
c001d8e7:	89 f2                	mov    edx,esi
c001d8e9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d8ec:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d8ef:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d8f3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d8f7:	83 e0 00             	and    eax,0x0
c001d8fa:	09 d0                	or     eax,edx
c001d8fc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d903:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d909:	8d 50 01             	lea    edx,[eax+0x1]
c001d90c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d90f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d915:	0f b6 d0             	movzx  edx,al
c001d918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d91b:	83 c2 08             	add    edx,0x8
c001d91e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d922:	0f b6 c9             	movzx  ecx,cl
c001d925:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d92b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d92f:	83 ec 08             	sub    esp,0x8
c001d932:	6a 01                	push   0x1
c001d934:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d937:	e8 04 ff ff ff       	call   c001d840 <IOAPIC::read(int)>
c001d93c:	83 c4 10             	add    esp,0x10
c001d93f:	c1 f8 10             	sar    eax,0x10
c001d942:	0f b6 c0             	movzx  eax,al
c001d945:	8d 50 01             	lea    edx,[eax+0x1]
c001d948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d94b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d951:	b8 00 00 00 00       	mov    eax,0x0
c001d956:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d959:	5b                   	pop    ebx
c001d95a:	5e                   	pop    esi
c001d95b:	5f                   	pop    edi
c001d95c:	5d                   	pop    ebp
c001d95d:	c3                   	ret    

c001d95e <IOAPIC::write(int, int)>:
c001d95e:	55                   	push   ebp
c001d95f:	89 e5                	mov    ebp,esp
c001d961:	83 ec 10             	sub    esp,0x10
c001d964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d967:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d96d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d970:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d973:	0f b6 d0             	movzx  edx,al
c001d976:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d979:	89 10                	mov    DWORD PTR [eax],edx
c001d97b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d97e:	8d 50 10             	lea    edx,[eax+0x10]
c001d981:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d984:	89 02                	mov    DWORD PTR [edx],eax
c001d986:	90                   	nop
c001d987:	c9                   	leave  
c001d988:	c3                   	ret    
c001d989:	90                   	nop

c001d98a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d98a:	55                   	push   ebp
c001d98b:	89 e5                	mov    ebp,esp
c001d98d:	83 ec 20             	sub    esp,0x20
c001d990:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d993:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d996:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d999:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d99c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d99f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d9a2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d9a5:	88 d0                	mov    al,dl
c001d9a7:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d9aa:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d9ae:	83 c0 08             	add    eax,0x8
c001d9b1:	01 c0                	add    eax,eax
c001d9b3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9b6:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d9ba:	83 c0 08             	add    eax,0x8
c001d9bd:	01 c0                	add    eax,eax
c001d9bf:	40                   	inc    eax
c001d9c0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d9c3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d9c6:	50                   	push   eax
c001d9c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9ca:	e8 71 fe ff ff       	call   c001d840 <IOAPIC::read(int)>
c001d9cf:	83 c4 08             	add    esp,0x8
c001d9d2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d9d5:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d9dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d9df:	c1 e0 18             	shl    eax,0x18
c001d9e2:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d9e5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d9e8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d9eb:	52                   	push   edx
c001d9ec:	50                   	push   eax
c001d9ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9f0:	e8 69 ff ff ff       	call   c001d95e <IOAPIC::write(int, int)>
c001d9f5:	83 c4 0c             	add    esp,0xc
c001d9f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9fb:	50                   	push   eax
c001d9fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9ff:	e8 3c fe ff ff       	call   c001d840 <IOAPIC::read(int)>
c001da04:	83 c4 08             	add    esp,0x8
c001da07:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001da0a:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001da11:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001da18:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001da1f:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001da26:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001da2a:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001da2d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001da30:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da33:	52                   	push   edx
c001da34:	50                   	push   eax
c001da35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da38:	e8 21 ff ff ff       	call   c001d95e <IOAPIC::write(int, int)>
c001da3d:	83 c4 0c             	add    esp,0xc
c001da40:	90                   	nop
c001da41:	c9                   	leave  
c001da42:	c3                   	ret    
c001da43:	90                   	nop

c001da44 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001da44:	55                   	push   ebp
c001da45:	89 e5                	mov    ebp,esp
c001da47:	56                   	push   esi
c001da48:	53                   	push   ebx
c001da49:	83 ec 20             	sub    esp,0x20
c001da4c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001da4f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001da52:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001da56:	74 28                	je     c001da80 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da58:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001da5c:	7f 12                	jg     c001da70 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001da5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da61:	05 40 b1 03 c0       	add    eax,0xc003b140
c001da66:	8a 00                	mov    al,BYTE PTR [eax]
c001da68:	0f b6 c0             	movzx  eax,al
c001da6b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001da6e:	eb 10                	jmp    c001da80 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da70:	83 ec 0c             	sub    esp,0xc
c001da73:	68 0c ac 03 c0       	push   0xc003ac0c
c001da78:	e8 61 f5 fe ff       	call   c000cfde <panic(char const*)>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001da84:	a1 e0 d0 03 c0       	mov    eax,ds:0xc003d0e0
c001da89:	83 ec 08             	sub    esp,0x8
c001da8c:	50                   	push   eax
c001da8d:	68 44 ac 03 c0       	push   0xc003ac44
c001da92:	e8 29 f4 fe ff       	call   c000cec0 <kprintf(char const*, ...)>
c001da97:	83 c4 10             	add    esp,0x10
c001da9a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001daa1:	a1 e0 d0 03 c0       	mov    eax,ds:0xc003d0e0
c001daa6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001daa9:	7d 58                	jge    c001db03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001daab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001daae:	8b 04 85 00 d1 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc2f00]
c001dab5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dab8:	83 ec 08             	sub    esp,0x8
c001dabb:	52                   	push   edx
c001dabc:	50                   	push   eax
c001dabd:	e8 4c fd ff ff       	call   c001d80e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001dac2:	83 c4 10             	add    esp,0x10
c001dac5:	84 c0                	test   al,al
c001dac7:	74 35                	je     c001dafe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001dac9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dacc:	8b 1c 85 00 d1 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc2f00]
c001dad3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dad6:	83 c0 20             	add    eax,0x20
c001dad9:	0f b6 f0             	movzx  esi,al
c001dadc:	e8 c2 96 ff ff       	call   c00171a3 <getCPUNumber()>
c001dae1:	99                   	cdq    
c001dae2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001dae5:	0f b6 c9             	movzx  ecx,cl
c001dae8:	83 ec 0c             	sub    esp,0xc
c001daeb:	56                   	push   esi
c001daec:	52                   	push   edx
c001daed:	50                   	push   eax
c001daee:	51                   	push   ecx
c001daef:	53                   	push   ebx
c001daf0:	e8 95 fe ff ff       	call   c001d98a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001daf5:	83 c4 20             	add    esp,0x20
c001daf8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001dafc:	eb 05                	jmp    c001db03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001dafe:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001db01:	eb 9e                	jmp    c001daa1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001db03:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001db06:	83 f0 01             	xor    eax,0x1
c001db09:	84 c0                	test   al,al
c001db0b:	74 10                	je     c001db1d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001db0d:	83 ec 0c             	sub    esp,0xc
c001db10:	68 5b ac 03 c0       	push   0xc003ac5b
c001db15:	e8 c4 f4 fe ff       	call   c000cfde <panic(char const*)>
c001db1a:	83 c4 10             	add    esp,0x10
c001db1d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001db21:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001db28:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001db2c:	7f 65                	jg     c001db93 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001db2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db34:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db3b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db3e:	01 ca                	add    edx,ecx
c001db40:	83 c2 54             	add    edx,0x54
c001db43:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001db47:	85 c0                	test   eax,eax
c001db49:	75 43                	jne    c001db8e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001db4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db4e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db51:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db58:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db5b:	01 ca                	add    edx,ecx
c001db5d:	8d 4a 54             	lea    ecx,[edx+0x54]
c001db60:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001db63:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db6a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db6d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db74:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db77:	01 ca                	add    edx,ecx
c001db79:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001db7f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001db82:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db89:	83 e8 20             	sub    eax,0x20
c001db8c:	eb 1a                	jmp    c001dba8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001db8e:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001db91:	eb 95                	jmp    c001db28 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001db93:	83 ec 0c             	sub    esp,0xc
c001db96:	68 68 ac 03 c0       	push   0xc003ac68
c001db9b:	e8 3e f4 fe ff       	call   c000cfde <panic(char const*)>
c001dba0:	83 c4 10             	add    esp,0x10
c001dba3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dba8:	8d 65 f8             	lea    esp,[ebp-0x8]
c001dbab:	5b                   	pop    ebx
c001dbac:	5e                   	pop    esi
c001dbad:	5d                   	pop    ebp
c001dbae:	c3                   	ret    
c001dbaf:	90                   	nop

c001dbb0 <PIC::disable()>:
c001dbb0:	55                   	push   ebp
c001dbb1:	89 e5                	mov    ebp,esp
c001dbb3:	83 ec 10             	sub    esp,0x10
c001dbb6:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001dbbc:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001dbc0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dbc3:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dbc7:	ee                   	out    dx,al
c001dbc8:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001dbce:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dbd2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dbd5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001dbd9:	ee                   	out    dx,al
c001dbda:	90                   	nop
c001dbdb:	c9                   	leave  
c001dbdc:	c3                   	ret    
c001dbdd:	90                   	nop

c001dbde <PIC::close(int, int, void*)>:
c001dbde:	55                   	push   ebp
c001dbdf:	89 e5                	mov    ebp,esp
c001dbe1:	83 ec 08             	sub    esp,0x8
c001dbe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbe7:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbe9:	83 c0 3c             	add    eax,0x3c
c001dbec:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbee:	83 ec 0c             	sub    esp,0xc
c001dbf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbf4:	ff d0                	call   eax
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	b8 00 00 00 00       	mov    eax,0x0
c001dbfe:	c9                   	leave  
c001dbff:	c3                   	ret    

c001dc00 <PIC::PIC()>:
c001dc00:	83 ec 0c             	sub    esp,0xc
c001dc03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc07:	83 ec 08             	sub    esp,0x8
c001dc0a:	68 14 ad 03 c0       	push   0xc003ad14
c001dc0f:	50                   	push   eax
c001dc10:	e8 7d 64 ff ff       	call   c0014092 <InterruptController::InterruptController(char const*)>
c001dc15:	83 c4 10             	add    esp,0x10
c001dc18:	ba 40 ad 03 c0       	mov    edx,0xc003ad40
c001dc1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc21:	89 10                	mov    DWORD PTR [eax],edx
c001dc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc27:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc2d:	0f b6 d0             	movzx  edx,al
c001dc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc34:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dc3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc45:	0f b6 d0             	movzx  edx,al
c001dc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dc51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc55:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc5b:	8d 50 01             	lea    edx,[eax+0x1]
c001dc5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc62:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc68:	0f b6 d0             	movzx  edx,al
c001dc6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc73:	83 e1 3f             	and    ecx,0x3f
c001dc76:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc7e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc84:	0f b6 d0             	movzx  edx,al
c001dc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc8b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc96:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc9c:	0f b6 d0             	movzx  edx,al
c001dc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcb2:	8d 50 01             	lea    edx,[eax+0x1]
c001dcb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcb9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dcbf:	0f b6 d0             	movzx  edx,al
c001dcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dcca:	83 e1 3f             	and    ecx,0x3f
c001dccd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dcd1:	90                   	nop
c001dcd2:	83 c4 0c             	add    esp,0xc
c001dcd5:	c3                   	ret    

c001dcd6 <PIC::ioWait()>:
c001dcd6:	eb 00                	jmp    c001dcd8 <PIC::ioWait()+0x2>
c001dcd8:	eb 00                	jmp    c001dcda <PIC::ioWait()+0x4>
c001dcda:	90                   	nop
c001dcdb:	c3                   	ret    

c001dcdc <PIC::getIRQReg(int)>:
c001dcdc:	55                   	push   ebp
c001dcdd:	89 e5                	mov    ebp,esp
c001dcdf:	83 ec 10             	sub    esp,0x10
c001dce2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dce5:	0f b6 c0             	movzx  eax,al
c001dce8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dcee:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dcf1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dcf4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dcf8:	ee                   	out    dx,al
c001dcf9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dcfc:	0f b6 c0             	movzx  eax,al
c001dcff:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd05:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dd08:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd0b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd0f:	ee                   	out    dx,al
c001dd10:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dd16:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dd1a:	89 c2                	mov    edx,eax
c001dd1c:	ec                   	in     al,dx
c001dd1d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dd20:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd23:	0f b6 c0             	movzx  eax,al
c001dd26:	c1 e0 08             	shl    eax,0x8
c001dd29:	89 c1                	mov    ecx,eax
c001dd2b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dd31:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dd35:	89 c2                	mov    edx,eax
c001dd37:	ec                   	in     al,dx
c001dd38:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dd3b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dd3e:	0f b6 c0             	movzx  eax,al
c001dd41:	09 c8                	or     eax,ecx
c001dd43:	c9                   	leave  
c001dd44:	c3                   	ret    
c001dd45:	90                   	nop

c001dd46 <PIC::eoi(unsigned char)>:
c001dd46:	55                   	push   ebp
c001dd47:	89 e5                	mov    ebp,esp
c001dd49:	83 ec 14             	sub    esp,0x14
c001dd4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd4f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dd52:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd56:	75 1e                	jne    c001dd76 <PIC::eoi(unsigned char)+0x30>
c001dd58:	6a 0b                	push   0xb
c001dd5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd5d:	e8 7a ff ff ff       	call   c001dcdc <PIC::getIRQReg(int)>
c001dd62:	83 c4 08             	add    esp,0x8
c001dd65:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dd69:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dd6d:	25 80 00 00 00       	and    eax,0x80
c001dd72:	85 c0                	test   eax,eax
c001dd74:	74 5f                	je     c001ddd5 <PIC::eoi(unsigned char)+0x8f>
c001dd76:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001dd7a:	75 2d                	jne    c001dda9 <PIC::eoi(unsigned char)+0x63>
c001dd7c:	6a 0b                	push   0xb
c001dd7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd81:	e8 56 ff ff ff       	call   c001dcdc <PIC::getIRQReg(int)>
c001dd86:	83 c4 08             	add    esp,0x8
c001dd89:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001dd8d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dd90:	66 85 c0             	test   ax,ax
c001dd93:	78 14                	js     c001dda9 <PIC::eoi(unsigned char)+0x63>
c001dd95:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001dd9b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001dd9f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dda2:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dda6:	ee                   	out    dx,al
c001dda7:	eb 2d                	jmp    c001ddd6 <PIC::eoi(unsigned char)+0x90>
c001dda9:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ddad:	76 12                	jbe    c001ddc1 <PIC::eoi(unsigned char)+0x7b>
c001ddaf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ddb5:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001ddb9:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ddbc:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ddc0:	ee                   	out    dx,al
c001ddc1:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001ddc7:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001ddcb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ddce:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ddd2:	ee                   	out    dx,al
c001ddd3:	eb 01                	jmp    c001ddd6 <PIC::eoi(unsigned char)+0x90>
c001ddd5:	90                   	nop
c001ddd6:	c9                   	leave  
c001ddd7:	c3                   	ret    

c001ddd8 <PIC::remap()>:
c001ddd8:	55                   	push   ebp
c001ddd9:	89 e5                	mov    ebp,esp
c001dddb:	83 ec 48             	sub    esp,0x48
c001ddde:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001dde5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ddec:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ddf2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ddf5:	89 c2                	mov    edx,eax
c001ddf7:	ec                   	in     al,dx
c001ddf8:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ddfb:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ddfe:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001de01:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001de07:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001de0a:	89 c2                	mov    edx,eax
c001de0c:	ec                   	in     al,dx
c001de0d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001de10:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001de13:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001de16:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001de1c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001de20:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001de23:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001de26:	ee                   	out    dx,al
c001de27:	83 ec 0c             	sub    esp,0xc
c001de2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de2d:	e8 a4 fe ff ff       	call   c001dcd6 <PIC::ioWait()>
c001de32:	83 c4 10             	add    esp,0x10
c001de35:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001de3b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001de3f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001de42:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001de45:	ee                   	out    dx,al
c001de46:	83 ec 0c             	sub    esp,0xc
c001de49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de4c:	e8 85 fe ff ff       	call   c001dcd6 <PIC::ioWait()>
c001de51:	83 c4 10             	add    esp,0x10
c001de54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001de57:	0f b6 c0             	movzx  eax,al
c001de5a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001de60:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001de63:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001de66:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001de69:	ee                   	out    dx,al
c001de6a:	83 ec 0c             	sub    esp,0xc
c001de6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de70:	e8 61 fe ff ff       	call   c001dcd6 <PIC::ioWait()>
c001de75:	83 c4 10             	add    esp,0x10
c001de78:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001de7b:	0f b6 c0             	movzx  eax,al
c001de7e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001de84:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001de87:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001de8a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001de8d:	ee                   	out    dx,al
c001de8e:	83 ec 0c             	sub    esp,0xc
c001de91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de94:	e8 3d fe ff ff       	call   c001dcd6 <PIC::ioWait()>
c001de99:	83 c4 10             	add    esp,0x10
c001de9c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001dea2:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001dea6:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001dea9:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001deac:	ee                   	out    dx,al
c001dead:	83 ec 0c             	sub    esp,0xc
c001deb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001deb3:	e8 1e fe ff ff       	call   c001dcd6 <PIC::ioWait()>
c001deb8:	83 c4 10             	add    esp,0x10
c001debb:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001dec1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001dec5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001dec8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001decb:	ee                   	out    dx,al
c001decc:	83 ec 0c             	sub    esp,0xc
c001decf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ded2:	e8 ff fd ff ff       	call   c001dcd6 <PIC::ioWait()>
c001ded7:	83 c4 10             	add    esp,0x10
c001deda:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001dee0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001dee4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001dee7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001deea:	ee                   	out    dx,al
c001deeb:	83 ec 0c             	sub    esp,0xc
c001deee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001def1:	e8 e0 fd ff ff       	call   c001dcd6 <PIC::ioWait()>
c001def6:	83 c4 10             	add    esp,0x10
c001def9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001deff:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001df03:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001df06:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001df09:	ee                   	out    dx,al
c001df0a:	83 ec 0c             	sub    esp,0xc
c001df0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df10:	e8 c1 fd ff ff       	call   c001dcd6 <PIC::ioWait()>
c001df15:	83 c4 10             	add    esp,0x10
c001df18:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001df1c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001df22:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001df25:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001df28:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df2b:	ee                   	out    dx,al
c001df2c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001df30:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001df36:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001df39:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001df3c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001df3f:	ee                   	out    dx,al
c001df40:	90                   	nop
c001df41:	c9                   	leave  
c001df42:	c3                   	ret    
c001df43:	90                   	nop

c001df44 <PIC::open(int, int, void*)>:
c001df44:	55                   	push   ebp
c001df45:	89 e5                	mov    ebp,esp
c001df47:	83 ec 18             	sub    esp,0x18
c001df4a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001df50:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001df54:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001df57:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001df5b:	ee                   	out    dx,al
c001df5c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001df62:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001df66:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001df69:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001df6d:	ee                   	out    dx,al
c001df6e:	83 ec 0c             	sub    esp,0xc
c001df71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df74:	e8 5f fe ff ff       	call   c001ddd8 <PIC::remap()>
c001df79:	83 c4 10             	add    esp,0x10
c001df7c:	b8 00 00 00 00       	mov    eax,0x0
c001df81:	c9                   	leave  
c001df82:	c3                   	ret    
c001df83:	90                   	nop

c001df84 <APICTimer::close(int, int, void*)>:
c001df84:	b8 00 00 00 00       	mov    eax,0x0
c001df89:	c3                   	ret    

c001df8a <apicTimerHandler(regs*, void*)>:
c001df8a:	83 ec 0c             	sub    esp,0xc
c001df8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df91:	8b 00                	mov    eax,DWORD PTR [eax]
c001df93:	99                   	cdq    
c001df94:	52                   	push   edx
c001df95:	50                   	push   eax
c001df96:	6a 00                	push   0x0
c001df98:	68 00 ca 9a 3b       	push   0x3b9aca00
c001df9d:	e8 6a 07 00 00       	call   c001e70c <__udivdi3>
c001dfa2:	83 c4 10             	add    esp,0x10
c001dfa5:	83 ec 08             	sub    esp,0x8
c001dfa8:	52                   	push   edx
c001dfa9:	50                   	push   eax
c001dfaa:	e8 b2 77 ff ff       	call   c0015761 <timerHandler(unsigned long long)>
c001dfaf:	83 c4 10             	add    esp,0x10
c001dfb2:	90                   	nop
c001dfb3:	83 c4 0c             	add    esp,0xc
c001dfb6:	c3                   	ret    
c001dfb7:	90                   	nop

c001dfb8 <APICTimer::write(int)>:
c001dfb8:	53                   	push   ebx
c001dfb9:	83 ec 28             	sub    esp,0x28
c001dfbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfc0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dfc4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dfca:	e8 d7 91 ff ff       	call   c00171a6 <thisCPU()>
c001dfcf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dfd5:	83 ec 0c             	sub    esp,0xc
c001dfd8:	50                   	push   eax
c001dfd9:	e8 0e f6 ff ff       	call   c001d5ec <APIC::getBase()>
c001dfde:	83 c4 10             	add    esp,0x10
c001dfe1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dfe5:	a1 b0 c3 03 c0       	mov    eax,ds:0xc003c3b0
c001dfea:	8b 15 b4 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c3b4
c001dff0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dff4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001dff8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dffc:	05 e0 03 00 00       	add    eax,0x3e0
c001e001:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e007:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e00b:	05 80 03 00 00       	add    eax,0x380
c001e010:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e016:	fb                   	sti    
c001e017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e01b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e01f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e024:	83 d2 00             	adc    edx,0x0
c001e027:	89 c1                	mov    ecx,eax
c001e029:	89 d3                	mov    ebx,edx
c001e02b:	a1 b0 c3 03 c0       	mov    eax,ds:0xc003c3b0
c001e030:	8b 15 b4 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c3b4
c001e036:	39 c8                	cmp    eax,ecx
c001e038:	89 d0                	mov    eax,edx
c001e03a:	19 d8                	sbb    eax,ebx
c001e03c:	73 02                	jae    c001e040 <APICTimer::write(int)+0x88>
c001e03e:	eb d7                	jmp    c001e017 <APICTimer::write(int)+0x5f>
c001e040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e044:	05 20 03 00 00       	add    eax,0x320
c001e049:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e04f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e053:	05 90 03 00 00       	add    eax,0x390
c001e058:	8b 00                	mov    eax,DWORD PTR [eax]
c001e05a:	f7 d0                	not    eax
c001e05c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e060:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e064:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e068:	ba 00 00 00 00       	mov    edx,0x0
c001e06d:	f7 f3                	div    ebx
c001e06f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e073:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e077:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e07d:	0d 00 00 02 00       	or     eax,0x20000
c001e082:	89 c2                	mov    edx,eax
c001e084:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e088:	05 20 03 00 00       	add    eax,0x320
c001e08d:	89 10                	mov    DWORD PTR [eax],edx
c001e08f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e093:	05 e0 03 00 00       	add    eax,0x3e0
c001e098:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e09e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0a2:	05 80 03 00 00       	add    eax,0x380
c001e0a7:	89 c2                	mov    edx,eax
c001e0a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e0ad:	89 02                	mov    DWORD PTR [edx],eax
c001e0af:	90                   	nop
c001e0b0:	83 c4 28             	add    esp,0x28
c001e0b3:	5b                   	pop    ebx
c001e0b4:	c3                   	ret    
c001e0b5:	90                   	nop

c001e0b6 <APICTimer::open(int, int, void*)>:
c001e0b6:	57                   	push   edi
c001e0b7:	56                   	push   esi
c001e0b8:	53                   	push   ebx
c001e0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0bf:	83 c0 24             	add    eax,0x24
c001e0c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0c4:	83 ec 08             	sub    esp,0x8
c001e0c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0cf:	ff d0                	call   eax
c001e0d1:	83 c4 10             	add    esp,0x10
c001e0d4:	e8 cd 90 ff ff       	call   c00171a6 <thisCPU()>
c001e0d9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e0df:	83 ec 0c             	sub    esp,0xc
c001e0e2:	50                   	push   eax
c001e0e3:	e8 04 f5 ff ff       	call   c001d5ec <APIC::getBase()>
c001e0e8:	83 c4 10             	add    esp,0x10
c001e0eb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e0fb:	0f b6 f8             	movzx  edi,al
c001e0fe:	89 d0                	mov    eax,edx
c001e100:	ba 00 00 00 00       	mov    edx,0x0
c001e105:	89 c1                	mov    ecx,eax
c001e107:	80 e5 ff             	and    ch,0xff
c001e10a:	89 cb                	mov    ebx,ecx
c001e10c:	0f b6 f2             	movzx  esi,dl
c001e10f:	89 d8                	mov    eax,ebx
c001e111:	89 f2                	mov    edx,esi
c001e113:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e117:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e11a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e11e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e122:	83 e0 00             	and    eax,0x0
c001e125:	09 d0                	or     eax,edx
c001e127:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e12f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e135:	8d 50 01             	lea    edx,[eax+0x1]
c001e138:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e13c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e142:	0f b6 d0             	movzx  edx,al
c001e145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e149:	83 c2 08             	add    edx,0x8
c001e14c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e150:	0f b6 c9             	movzx  ecx,cl
c001e153:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e159:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e161:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e165:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e173:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e179:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e17d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e183:	83 ec 0c             	sub    esp,0xc
c001e186:	51                   	push   ecx
c001e187:	6a 01                	push   0x1
c001e189:	68 8a df 01 c0       	push   0xc001df8a
c001e18e:	52                   	push   edx
c001e18f:	50                   	push   eax
c001e190:	e8 39 55 ff ff       	call   c00136ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e195:	83 c4 20             	add    esp,0x20
c001e198:	89 c2                	mov    edx,eax
c001e19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e19e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e1a4:	b8 00 00 00 00       	mov    eax,0x0
c001e1a9:	5b                   	pop    ebx
c001e1aa:	5e                   	pop    esi
c001e1ab:	5f                   	pop    edi
c001e1ac:	c3                   	ret    
c001e1ad:	90                   	nop

c001e1ae <APICTimer::APICTimer()>:
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b5:	83 ec 08             	sub    esp,0x8
c001e1b8:	68 80 ad 03 c0       	push   0xc003ad80
c001e1bd:	50                   	push   eax
c001e1be:	e8 0f 75 ff ff       	call   c00156d2 <Timer::Timer(char const*)>
c001e1c3:	83 c4 10             	add    esp,0x10
c001e1c6:	ba 94 ad 03 c0       	mov    edx,0xc003ad94
c001e1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1cf:	89 10                	mov    DWORD PTR [eax],edx
c001e1d1:	90                   	nop
c001e1d2:	83 c4 0c             	add    esp,0xc
c001e1d5:	c3                   	ret    

c001e1d6 <PIT::write(int)>:
c001e1d6:	83 ec 10             	sub    esp,0x10
c001e1d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e1e1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e1e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1eb:	a3 24 d1 03 c0       	mov    ds:0xc003d124,eax
c001e1f0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e1f5:	99                   	cdq    
c001e1f6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e1fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1fe:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e205:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e20a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e20e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e213:	ee                   	out    dx,al
c001e214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e218:	0f b6 c0             	movzx  eax,al
c001e21b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e222:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e226:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e22a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e22f:	ee                   	out    dx,al
c001e230:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e234:	c1 f8 08             	sar    eax,0x8
c001e237:	0f b6 c0             	movzx  eax,al
c001e23a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e241:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e245:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e249:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e24e:	ee                   	out    dx,al
c001e24f:	90                   	nop
c001e250:	83 c4 10             	add    esp,0x10
c001e253:	c3                   	ret    

c001e254 <pitHandler(regs*, void*)>:
c001e254:	83 ec 0c             	sub    esp,0xc
c001e257:	a1 24 d1 03 c0       	mov    eax,ds:0xc003d124
c001e25c:	99                   	cdq    
c001e25d:	52                   	push   edx
c001e25e:	50                   	push   eax
c001e25f:	6a 00                	push   0x0
c001e261:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e266:	e8 a1 04 00 00       	call   c001e70c <__udivdi3>
c001e26b:	83 c4 10             	add    esp,0x10
c001e26e:	83 ec 08             	sub    esp,0x8
c001e271:	52                   	push   edx
c001e272:	50                   	push   eax
c001e273:	e8 e9 74 ff ff       	call   c0015761 <timerHandler(unsigned long long)>
c001e278:	83 c4 10             	add    esp,0x10
c001e27b:	90                   	nop
c001e27c:	83 c4 0c             	add    esp,0xc
c001e27f:	c3                   	ret    

c001e280 <PIT::open(int, int, void*)>:
c001e280:	83 ec 0c             	sub    esp,0xc
c001e283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e287:	8b 00                	mov    eax,DWORD PTR [eax]
c001e289:	83 c0 24             	add    eax,0x24
c001e28c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e28e:	83 ec 08             	sub    esp,0x8
c001e291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e299:	ff d0                	call   eax
c001e29b:	83 c4 10             	add    esp,0x10
c001e29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a2:	83 ec 0c             	sub    esp,0xc
c001e2a5:	6a 00                	push   0x0
c001e2a7:	6a 01                	push   0x1
c001e2a9:	68 54 e2 01 c0       	push   0xc001e254
c001e2ae:	6a 00                	push   0x0
c001e2b0:	50                   	push   eax
c001e2b1:	e8 18 54 ff ff       	call   c00136ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e2b6:	83 c4 20             	add    esp,0x20
c001e2b9:	89 c2                	mov    edx,eax
c001e2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2bf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e2c5:	b8 00 00 00 00       	mov    eax,0x0
c001e2ca:	83 c4 0c             	add    esp,0xc
c001e2cd:	c3                   	ret    

c001e2ce <PIT::close(int, int, void*)>:
c001e2ce:	83 ec 0c             	sub    esp,0xc
c001e2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e3:	6a 01                	push   0x1
c001e2e5:	68 54 e2 01 c0       	push   0xc001e254
c001e2ea:	6a 00                	push   0x0
c001e2ec:	50                   	push   eax
c001e2ed:	e8 3a 54 ff ff       	call   c001372c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e2f2:	83 c4 10             	add    esp,0x10
c001e2f5:	b8 00 00 00 00       	mov    eax,0x0
c001e2fa:	83 c4 0c             	add    esp,0xc
c001e2fd:	c3                   	ret    

c001e2fe <PIT::PIT()>:
c001e2fe:	83 ec 0c             	sub    esp,0xc
c001e301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e305:	83 ec 08             	sub    esp,0x8
c001e308:	68 bc ad 03 c0       	push   0xc003adbc
c001e30d:	50                   	push   eax
c001e30e:	e8 bf 73 ff ff       	call   c00156d2 <Timer::Timer(char const*)>
c001e313:	83 c4 10             	add    esp,0x10
c001e316:	ba e4 ad 03 c0       	mov    edx,0xc003ade4
c001e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31f:	89 10                	mov    DWORD PTR [eax],edx
c001e321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e325:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e32b:	0f b6 d0             	movzx  edx,al
c001e32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e332:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e343:	0f b6 d0             	movzx  edx,al
c001e346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e353:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e359:	8d 50 01             	lea    edx,[eax+0x1]
c001e35c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e360:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e366:	0f b6 d0             	movzx  edx,al
c001e369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e36d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e371:	83 e1 3f             	and    ecx,0x3f
c001e374:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e378:	90                   	nop
c001e379:	83 c4 0c             	add    esp,0xc
c001e37c:	c3                   	ret    
c001e37d:	66 90                	xchg   ax,ax
c001e37f:	90                   	nop

c001e380 <avxDetect>:
c001e380:	b8 00 00 00 00       	mov    eax,0x0
c001e385:	c3                   	ret    

c001e386 <avxSave>:
c001e386:	c3                   	ret    

c001e387 <avxLoad>:
c001e387:	c3                   	ret    

c001e388 <avxInit>:
c001e388:	c3                   	ret    

c001e389 <avxClose>:
c001e389:	c3                   	ret    
c001e38a:	66 90                	xchg   ax,ax
c001e38c:	66 90                	xchg   ax,ax
c001e38e:	66 90                	xchg   ax,ax

c001e390 <sseDetect>:
c001e390:	b8 01 00 00 00       	mov    eax,0x1
c001e395:	0f a2                	cpuid  
c001e397:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e39d:	74 06                	je     c001e3a5 <sseDetect.noSSE>
c001e39f:	b8 01 00 00 00       	mov    eax,0x1
c001e3a4:	c3                   	ret    

c001e3a5 <sseDetect.noSSE>:
c001e3a5:	b8 00 00 00 00       	mov    eax,0x0
c001e3aa:	c3                   	ret    

c001e3ab <sseSave>:
c001e3ab:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e3b0:	c3                   	ret    

c001e3b1 <sseLoad>:
c001e3b1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e3b6:	c3                   	ret    

c001e3b7 <sseInit>:
c001e3b7:	e8 40 00 00 00       	call   c001e3fc <x87Init>
c001e3bc:	0f 20 e0             	mov    eax,cr4
c001e3bf:	66 0d 00 06          	or     ax,0x600
c001e3c3:	0f 22 e0             	mov    cr4,eax
c001e3c6:	c3                   	ret    

c001e3c7 <sseClose>:
c001e3c7:	c3                   	ret    
c001e3c8:	66 90                	xchg   ax,ax
c001e3ca:	66 90                	xchg   ax,ax
c001e3cc:	66 90                	xchg   ax,ax
c001e3ce:	66 90                	xchg   ax,ax

c001e3d0 <value_37F>:
c001e3d0:	7f 03                	jg     c001e3d5 <value_37A+0x1>

c001e3d2 <value_37E>:
c001e3d2:	7e 03                	jle    c001e3d7 <x87Detect+0x1>

c001e3d4 <value_37A>:
c001e3d4:	7a 03                	jp     c001e3d9 <x87Detect+0x3>

c001e3d6 <x87Detect>:
c001e3d6:	b8 01 00 00 00       	mov    eax,0x1
c001e3db:	0f a2                	cpuid  
c001e3dd:	f7 c2 01 00 00 00    	test   edx,0x1
c001e3e3:	74 06                	je     c001e3eb <x87Detect.nox87>
c001e3e5:	b8 01 00 00 00       	mov    eax,0x1
c001e3ea:	c3                   	ret    

c001e3eb <x87Detect.nox87>:
c001e3eb:	b8 00 00 00 00       	mov    eax,0x0
c001e3f0:	c3                   	ret    

c001e3f1 <x87Save>:
c001e3f1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e3f6:	c3                   	ret    

c001e3f7 <x87Load>:
c001e3f7:	dd 64 24 08          	frstor [esp+0x8]
c001e3fb:	c3                   	ret    

c001e3fc <x87Init>:
c001e3fc:	9b db e3             	finit  
c001e3ff:	0f 20 c0             	mov    eax,cr0
c001e402:	66 25 fb ff          	and    ax,0xfffb
c001e406:	66 0d 22 00          	or     ax,0x22
c001e40a:	0f 22 c0             	mov    cr0,eax
c001e40d:	0f 06                	clts   
c001e40f:	d9 2d d4 e3 01 c0    	fldcw  WORD PTR ds:0xc001e3d4
c001e415:	c3                   	ret    

c001e416 <x87Close>:
c001e416:	c3                   	ret    
c001e417:	90                   	nop

c001e418 <__do_global_ctors_aux>:
c001e418:	a1 48 f5 01 c0       	mov    eax,ds:0xc001f548
c001e41d:	83 f8 ff             	cmp    eax,0xffffffff
c001e420:	74 1a                	je     c001e43c <__do_global_ctors_aux+0x24>
c001e422:	55                   	push   ebp
c001e423:	89 e5                	mov    ebp,esp
c001e425:	53                   	push   ebx
c001e426:	52                   	push   edx
c001e427:	bb 48 f5 01 c0       	mov    ebx,0xc001f548
c001e42c:	ff d0                	call   eax
c001e42e:	83 eb 04             	sub    ebx,0x4
c001e431:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e433:	83 f8 ff             	cmp    eax,0xffffffff
c001e436:	75 f4                	jne    c001e42c <__do_global_ctors_aux+0x14>
c001e438:	58                   	pop    eax
c001e439:	5b                   	pop    ebx
c001e43a:	5d                   	pop    ebp
c001e43b:	c3                   	ret    
c001e43c:	c3                   	ret    
c001e43d:	66 90                	xchg   ax,ax
c001e43f:	90                   	nop

c001e440 <__divdi3>:
c001e440:	55                   	push   ebp
c001e441:	57                   	push   edi
c001e442:	56                   	push   esi
c001e443:	53                   	push   ebx
c001e444:	83 ec 1c             	sub    esp,0x1c
c001e447:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e44b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e44f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e452:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e456:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e45a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e45e:	85 db                	test   ebx,ebx
c001e460:	0f 88 8e 00 00 00    	js     c001e4f4 <__divdi3+0xb4>
c001e466:	89 dd                	mov    ebp,ebx
c001e468:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e470:	89 d3                	mov    ebx,edx
c001e472:	85 d2                	test   edx,edx
c001e474:	79 0d                	jns    c001e483 <__divdi3+0x43>
c001e476:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e47a:	f7 d8                	neg    eax
c001e47c:	83 d2 00             	adc    edx,0x0
c001e47f:	f7 da                	neg    edx
c001e481:	89 d3                	mov    ebx,edx
c001e483:	89 c7                	mov    edi,eax
c001e485:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e488:	85 db                	test   ebx,ebx
c001e48a:	75 48                	jne    c001e4d4 <__divdi3+0x94>
c001e48c:	39 ef                	cmp    edi,ebp
c001e48e:	76 24                	jbe    c001e4b4 <__divdi3+0x74>
c001e490:	89 ea                	mov    edx,ebp
c001e492:	f7 f7                	div    edi
c001e494:	89 c1                	mov    ecx,eax
c001e496:	31 f6                	xor    esi,esi
c001e498:	89 c8                	mov    eax,ecx
c001e49a:	89 f2                	mov    edx,esi
c001e49c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4a0:	85 c9                	test   ecx,ecx
c001e4a2:	74 07                	je     c001e4ab <__divdi3+0x6b>
c001e4a4:	f7 d8                	neg    eax
c001e4a6:	83 d2 00             	adc    edx,0x0
c001e4a9:	f7 da                	neg    edx
c001e4ab:	83 c4 1c             	add    esp,0x1c
c001e4ae:	5b                   	pop    ebx
c001e4af:	5e                   	pop    esi
c001e4b0:	5f                   	pop    edi
c001e4b1:	5d                   	pop    ebp
c001e4b2:	c3                   	ret    
c001e4b3:	90                   	nop
c001e4b4:	85 ff                	test   edi,edi
c001e4b6:	75 0b                	jne    c001e4c3 <__divdi3+0x83>
c001e4b8:	b8 01 00 00 00       	mov    eax,0x1
c001e4bd:	31 d2                	xor    edx,edx
c001e4bf:	f7 f3                	div    ebx
c001e4c1:	89 c7                	mov    edi,eax
c001e4c3:	31 d2                	xor    edx,edx
c001e4c5:	89 e8                	mov    eax,ebp
c001e4c7:	f7 f7                	div    edi
c001e4c9:	89 c6                	mov    esi,eax
c001e4cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e4ce:	f7 f7                	div    edi
c001e4d0:	89 c1                	mov    ecx,eax
c001e4d2:	eb c4                	jmp    c001e498 <__divdi3+0x58>
c001e4d4:	39 eb                	cmp    ebx,ebp
c001e4d6:	77 3c                	ja     c001e514 <__divdi3+0xd4>
c001e4d8:	0f bd f3             	bsr    esi,ebx
c001e4db:	83 f6 1f             	xor    esi,0x1f
c001e4de:	75 40                	jne    c001e520 <__divdi3+0xe0>
c001e4e0:	39 eb                	cmp    ebx,ebp
c001e4e2:	72 09                	jb     c001e4ed <__divdi3+0xad>
c001e4e4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e4e7:	0f 87 97 00 00 00    	ja     c001e584 <__divdi3+0x144>
c001e4ed:	b9 01 00 00 00       	mov    ecx,0x1
c001e4f2:	eb a4                	jmp    c001e498 <__divdi3+0x58>
c001e4f4:	f7 d9                	neg    ecx
c001e4f6:	83 d3 00             	adc    ebx,0x0
c001e4f9:	f7 db                	neg    ebx
c001e4fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e4fe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e502:	89 dd                	mov    ebp,ebx
c001e504:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e50c:	e9 5f ff ff ff       	jmp    c001e470 <__divdi3+0x30>
c001e511:	8d 76 00             	lea    esi,[esi+0x0]
c001e514:	31 f6                	xor    esi,esi
c001e516:	31 c9                	xor    ecx,ecx
c001e518:	e9 7b ff ff ff       	jmp    c001e498 <__divdi3+0x58>
c001e51d:	8d 76 00             	lea    esi,[esi+0x0]
c001e520:	b8 20 00 00 00       	mov    eax,0x20
c001e525:	29 f0                	sub    eax,esi
c001e527:	89 f1                	mov    ecx,esi
c001e529:	d3 e3                	shl    ebx,cl
c001e52b:	89 fa                	mov    edx,edi
c001e52d:	88 c1                	mov    cl,al
c001e52f:	d3 ea                	shr    edx,cl
c001e531:	09 da                	or     edx,ebx
c001e533:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e537:	89 f1                	mov    ecx,esi
c001e539:	d3 e7                	shl    edi,cl
c001e53b:	89 eb                	mov    ebx,ebp
c001e53d:	88 c1                	mov    cl,al
c001e53f:	d3 eb                	shr    ebx,cl
c001e541:	89 f1                	mov    ecx,esi
c001e543:	d3 e5                	shl    ebp,cl
c001e545:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e548:	88 c1                	mov    cl,al
c001e54a:	d3 ea                	shr    edx,cl
c001e54c:	09 d5                	or     ebp,edx
c001e54e:	89 e8                	mov    eax,ebp
c001e550:	89 da                	mov    edx,ebx
c001e552:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e556:	89 d3                	mov    ebx,edx
c001e558:	89 c5                	mov    ebp,eax
c001e55a:	f7 e7                	mul    edi
c001e55c:	39 d3                	cmp    ebx,edx
c001e55e:	72 18                	jb     c001e578 <__divdi3+0x138>
c001e560:	74 0a                	je     c001e56c <__divdi3+0x12c>
c001e562:	89 e9                	mov    ecx,ebp
c001e564:	31 f6                	xor    esi,esi
c001e566:	e9 2d ff ff ff       	jmp    c001e498 <__divdi3+0x58>
c001e56b:	90                   	nop
c001e56c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e56f:	89 f1                	mov    ecx,esi
c001e571:	d3 e7                	shl    edi,cl
c001e573:	39 c7                	cmp    edi,eax
c001e575:	73 eb                	jae    c001e562 <__divdi3+0x122>
c001e577:	90                   	nop
c001e578:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e57b:	31 f6                	xor    esi,esi
c001e57d:	e9 16 ff ff ff       	jmp    c001e498 <__divdi3+0x58>
c001e582:	66 90                	xchg   ax,ax
c001e584:	31 c9                	xor    ecx,ecx
c001e586:	e9 0d ff ff ff       	jmp    c001e498 <__divdi3+0x58>
c001e58b:	90                   	nop

c001e58c <__moddi3>:
c001e58c:	55                   	push   ebp
c001e58d:	57                   	push   edi
c001e58e:	56                   	push   esi
c001e58f:	53                   	push   ebx
c001e590:	83 ec 2c             	sub    esp,0x2c
c001e593:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e597:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e59b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e59f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e5a3:	85 db                	test   ebx,ebx
c001e5a5:	0f 88 85 00 00 00    	js     c001e630 <__moddi3+0xa4>
c001e5ab:	89 de                	mov    esi,ebx
c001e5ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e5b5:	89 d7                	mov    edi,edx
c001e5b7:	85 d2                	test   edx,edx
c001e5b9:	79 09                	jns    c001e5c4 <__moddi3+0x38>
c001e5bb:	f7 d8                	neg    eax
c001e5bd:	83 d2 00             	adc    edx,0x0
c001e5c0:	f7 da                	neg    edx
c001e5c2:	89 d7                	mov    edi,edx
c001e5c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5c8:	89 cd                	mov    ebp,ecx
c001e5ca:	85 ff                	test   edi,edi
c001e5cc:	75 52                	jne    c001e620 <__moddi3+0x94>
c001e5ce:	89 c3                	mov    ebx,eax
c001e5d0:	39 f0                	cmp    eax,esi
c001e5d2:	76 24                	jbe    c001e5f8 <__moddi3+0x6c>
c001e5d4:	89 c8                	mov    eax,ecx
c001e5d6:	89 f2                	mov    edx,esi
c001e5d8:	f7 f3                	div    ebx
c001e5da:	89 d6                	mov    esi,edx
c001e5dc:	89 f0                	mov    eax,esi
c001e5de:	31 d2                	xor    edx,edx
c001e5e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5e4:	85 c9                	test   ecx,ecx
c001e5e6:	74 07                	je     c001e5ef <__moddi3+0x63>
c001e5e8:	f7 d8                	neg    eax
c001e5ea:	83 d2 00             	adc    edx,0x0
c001e5ed:	f7 da                	neg    edx
c001e5ef:	83 c4 2c             	add    esp,0x2c
c001e5f2:	5b                   	pop    ebx
c001e5f3:	5e                   	pop    esi
c001e5f4:	5f                   	pop    edi
c001e5f5:	5d                   	pop    ebp
c001e5f6:	c3                   	ret    
c001e5f7:	90                   	nop
c001e5f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e5fc:	85 db                	test   ebx,ebx
c001e5fe:	75 0d                	jne    c001e60d <__moddi3+0x81>
c001e600:	b8 01 00 00 00       	mov    eax,0x1
c001e605:	31 d2                	xor    edx,edx
c001e607:	f7 f7                	div    edi
c001e609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e60d:	89 f0                	mov    eax,esi
c001e60f:	31 d2                	xor    edx,edx
c001e611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e615:	f7 f7                	div    edi
c001e617:	89 e8                	mov    eax,ebp
c001e619:	f7 f7                	div    edi
c001e61b:	89 d6                	mov    esi,edx
c001e61d:	eb bd                	jmp    c001e5dc <__moddi3+0x50>
c001e61f:	90                   	nop
c001e620:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e624:	39 f7                	cmp    edi,esi
c001e626:	76 20                	jbe    c001e648 <__moddi3+0xbc>
c001e628:	89 c8                	mov    eax,ecx
c001e62a:	89 f2                	mov    edx,esi
c001e62c:	eb b2                	jmp    c001e5e0 <__moddi3+0x54>
c001e62e:	66 90                	xchg   ax,ax
c001e630:	f7 d9                	neg    ecx
c001e632:	83 d3 00             	adc    ebx,0x0
c001e635:	f7 db                	neg    ebx
c001e637:	89 de                	mov    esi,ebx
c001e639:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e641:	e9 6f ff ff ff       	jmp    c001e5b5 <__moddi3+0x29>
c001e646:	66 90                	xchg   ax,ax
c001e648:	0f bd c7             	bsr    eax,edi
c001e64b:	83 f0 1f             	xor    eax,0x1f
c001e64e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e652:	75 24                	jne    c001e678 <__moddi3+0xec>
c001e654:	39 f7                	cmp    edi,esi
c001e656:	72 06                	jb     c001e65e <__moddi3+0xd2>
c001e658:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e65c:	77 0c                	ja     c001e66a <__moddi3+0xde>
c001e65e:	89 e9                	mov    ecx,ebp
c001e660:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e664:	19 fe                	sbb    esi,edi
c001e666:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e66a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e66e:	89 f2                	mov    edx,esi
c001e670:	e9 6b ff ff ff       	jmp    c001e5e0 <__moddi3+0x54>
c001e675:	8d 76 00             	lea    esi,[esi+0x0]
c001e678:	b8 20 00 00 00       	mov    eax,0x20
c001e67d:	89 c2                	mov    edx,eax
c001e67f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e683:	29 da                	sub    edx,ebx
c001e685:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e689:	88 d9                	mov    cl,bl
c001e68b:	d3 e7                	shl    edi,cl
c001e68d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e691:	88 d1                	mov    cl,dl
c001e693:	d3 e8                	shr    eax,cl
c001e695:	09 c7                	or     edi,eax
c001e697:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e69b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e69f:	89 d8                	mov    eax,ebx
c001e6a1:	88 d9                	mov    cl,bl
c001e6a3:	d3 e7                	shl    edi,cl
c001e6a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6a9:	89 f3                	mov    ebx,esi
c001e6ab:	88 d1                	mov    cl,dl
c001e6ad:	d3 eb                	shr    ebx,cl
c001e6af:	89 c7                	mov    edi,eax
c001e6b1:	88 c1                	mov    cl,al
c001e6b3:	d3 e6                	shl    esi,cl
c001e6b5:	89 e8                	mov    eax,ebp
c001e6b7:	88 d1                	mov    cl,dl
c001e6b9:	d3 e8                	shr    eax,cl
c001e6bb:	09 f0                	or     eax,esi
c001e6bd:	89 f9                	mov    ecx,edi
c001e6bf:	d3 e5                	shl    ebp,cl
c001e6c1:	89 da                	mov    edx,ebx
c001e6c3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e6c7:	89 d3                	mov    ebx,edx
c001e6c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e6cd:	89 c6                	mov    esi,eax
c001e6cf:	89 d1                	mov    ecx,edx
c001e6d1:	39 d3                	cmp    ebx,edx
c001e6d3:	72 27                	jb     c001e6fc <__moddi3+0x170>
c001e6d5:	74 21                	je     c001e6f8 <__moddi3+0x16c>
c001e6d7:	29 f5                	sub    ebp,esi
c001e6d9:	19 cb                	sbb    ebx,ecx
c001e6db:	89 de                	mov    esi,ebx
c001e6dd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e6e1:	d3 e6                	shl    esi,cl
c001e6e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e6e7:	89 f9                	mov    ecx,edi
c001e6e9:	d3 ed                	shr    ebp,cl
c001e6eb:	09 ee                	or     esi,ebp
c001e6ed:	89 f0                	mov    eax,esi
c001e6ef:	d3 eb                	shr    ebx,cl
c001e6f1:	89 da                	mov    edx,ebx
c001e6f3:	e9 e8 fe ff ff       	jmp    c001e5e0 <__moddi3+0x54>
c001e6f8:	39 c5                	cmp    ebp,eax
c001e6fa:	73 db                	jae    c001e6d7 <__moddi3+0x14b>
c001e6fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e700:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e704:	89 d1                	mov    ecx,edx
c001e706:	89 c6                	mov    esi,eax
c001e708:	eb cd                	jmp    c001e6d7 <__moddi3+0x14b>
c001e70a:	66 90                	xchg   ax,ax

c001e70c <__udivdi3>:
c001e70c:	55                   	push   ebp
c001e70d:	57                   	push   edi
c001e70e:	56                   	push   esi
c001e70f:	53                   	push   ebx
c001e710:	83 ec 1c             	sub    esp,0x1c
c001e713:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e717:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e71b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e71f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e723:	85 d2                	test   edx,edx
c001e725:	75 41                	jne    c001e768 <__udivdi3+0x5c>
c001e727:	39 f7                	cmp    edi,esi
c001e729:	76 15                	jbe    c001e740 <__udivdi3+0x34>
c001e72b:	89 e8                	mov    eax,ebp
c001e72d:	89 f2                	mov    edx,esi
c001e72f:	f7 f7                	div    edi
c001e731:	31 db                	xor    ebx,ebx
c001e733:	89 da                	mov    edx,ebx
c001e735:	83 c4 1c             	add    esp,0x1c
c001e738:	5b                   	pop    ebx
c001e739:	5e                   	pop    esi
c001e73a:	5f                   	pop    edi
c001e73b:	5d                   	pop    ebp
c001e73c:	c3                   	ret    
c001e73d:	8d 76 00             	lea    esi,[esi+0x0]
c001e740:	89 f9                	mov    ecx,edi
c001e742:	85 ff                	test   edi,edi
c001e744:	75 0b                	jne    c001e751 <__udivdi3+0x45>
c001e746:	b8 01 00 00 00       	mov    eax,0x1
c001e74b:	31 d2                	xor    edx,edx
c001e74d:	f7 f7                	div    edi
c001e74f:	89 c1                	mov    ecx,eax
c001e751:	31 d2                	xor    edx,edx
c001e753:	89 f0                	mov    eax,esi
c001e755:	f7 f1                	div    ecx
c001e757:	89 c3                	mov    ebx,eax
c001e759:	89 e8                	mov    eax,ebp
c001e75b:	f7 f1                	div    ecx
c001e75d:	89 da                	mov    edx,ebx
c001e75f:	83 c4 1c             	add    esp,0x1c
c001e762:	5b                   	pop    ebx
c001e763:	5e                   	pop    esi
c001e764:	5f                   	pop    edi
c001e765:	5d                   	pop    ebp
c001e766:	c3                   	ret    
c001e767:	90                   	nop
c001e768:	39 f2                	cmp    edx,esi
c001e76a:	77 1c                	ja     c001e788 <__udivdi3+0x7c>
c001e76c:	0f bd da             	bsr    ebx,edx
c001e76f:	83 f3 1f             	xor    ebx,0x1f
c001e772:	75 24                	jne    c001e798 <__udivdi3+0x8c>
c001e774:	39 f2                	cmp    edx,esi
c001e776:	72 08                	jb     c001e780 <__udivdi3+0x74>
c001e778:	39 ef                	cmp    edi,ebp
c001e77a:	0f 87 84 00 00 00    	ja     c001e804 <__udivdi3+0xf8>
c001e780:	b8 01 00 00 00       	mov    eax,0x1
c001e785:	eb ac                	jmp    c001e733 <__udivdi3+0x27>
c001e787:	90                   	nop
c001e788:	31 db                	xor    ebx,ebx
c001e78a:	31 c0                	xor    eax,eax
c001e78c:	89 da                	mov    edx,ebx
c001e78e:	83 c4 1c             	add    esp,0x1c
c001e791:	5b                   	pop    ebx
c001e792:	5e                   	pop    esi
c001e793:	5f                   	pop    edi
c001e794:	5d                   	pop    ebp
c001e795:	c3                   	ret    
c001e796:	66 90                	xchg   ax,ax
c001e798:	b8 20 00 00 00       	mov    eax,0x20
c001e79d:	29 d8                	sub    eax,ebx
c001e79f:	88 d9                	mov    cl,bl
c001e7a1:	d3 e2                	shl    edx,cl
c001e7a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7a7:	89 fa                	mov    edx,edi
c001e7a9:	88 c1                	mov    cl,al
c001e7ab:	d3 ea                	shr    edx,cl
c001e7ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7b1:	09 d1                	or     ecx,edx
c001e7b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7b7:	88 d9                	mov    cl,bl
c001e7b9:	d3 e7                	shl    edi,cl
c001e7bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7bf:	89 f7                	mov    edi,esi
c001e7c1:	88 c1                	mov    cl,al
c001e7c3:	d3 ef                	shr    edi,cl
c001e7c5:	88 d9                	mov    cl,bl
c001e7c7:	d3 e6                	shl    esi,cl
c001e7c9:	89 ea                	mov    edx,ebp
c001e7cb:	88 c1                	mov    cl,al
c001e7cd:	d3 ea                	shr    edx,cl
c001e7cf:	09 d6                	or     esi,edx
c001e7d1:	89 f0                	mov    eax,esi
c001e7d3:	89 fa                	mov    edx,edi
c001e7d5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e7d9:	89 d7                	mov    edi,edx
c001e7db:	89 c6                	mov    esi,eax
c001e7dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e7e1:	39 d7                	cmp    edi,edx
c001e7e3:	72 13                	jb     c001e7f8 <__udivdi3+0xec>
c001e7e5:	74 09                	je     c001e7f0 <__udivdi3+0xe4>
c001e7e7:	89 f0                	mov    eax,esi
c001e7e9:	31 db                	xor    ebx,ebx
c001e7eb:	e9 43 ff ff ff       	jmp    c001e733 <__udivdi3+0x27>
c001e7f0:	88 d9                	mov    cl,bl
c001e7f2:	d3 e5                	shl    ebp,cl
c001e7f4:	39 c5                	cmp    ebp,eax
c001e7f6:	73 ef                	jae    c001e7e7 <__udivdi3+0xdb>
c001e7f8:	8d 46 ff             	lea    eax,[esi-0x1]
c001e7fb:	31 db                	xor    ebx,ebx
c001e7fd:	e9 31 ff ff ff       	jmp    c001e733 <__udivdi3+0x27>
c001e802:	66 90                	xchg   ax,ax
c001e804:	31 c0                	xor    eax,eax
c001e806:	e9 28 ff ff ff       	jmp    c001e733 <__udivdi3+0x27>
c001e80b:	90                   	nop

c001e80c <__umoddi3>:
c001e80c:	55                   	push   ebp
c001e80d:	57                   	push   edi
c001e80e:	56                   	push   esi
c001e80f:	53                   	push   ebx
c001e810:	83 ec 1c             	sub    esp,0x1c
c001e813:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e817:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e81b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e81f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e823:	89 da                	mov    edx,ebx
c001e825:	85 c0                	test   eax,eax
c001e827:	75 37                	jne    c001e860 <__umoddi3+0x54>
c001e829:	39 df                	cmp    edi,ebx
c001e82b:	76 13                	jbe    c001e840 <__umoddi3+0x34>
c001e82d:	89 f0                	mov    eax,esi
c001e82f:	f7 f7                	div    edi
c001e831:	89 d0                	mov    eax,edx
c001e833:	31 d2                	xor    edx,edx
c001e835:	83 c4 1c             	add    esp,0x1c
c001e838:	5b                   	pop    ebx
c001e839:	5e                   	pop    esi
c001e83a:	5f                   	pop    edi
c001e83b:	5d                   	pop    ebp
c001e83c:	c3                   	ret    
c001e83d:	8d 76 00             	lea    esi,[esi+0x0]
c001e840:	89 fd                	mov    ebp,edi
c001e842:	85 ff                	test   edi,edi
c001e844:	75 0b                	jne    c001e851 <__umoddi3+0x45>
c001e846:	b8 01 00 00 00       	mov    eax,0x1
c001e84b:	31 d2                	xor    edx,edx
c001e84d:	f7 f7                	div    edi
c001e84f:	89 c5                	mov    ebp,eax
c001e851:	89 d8                	mov    eax,ebx
c001e853:	31 d2                	xor    edx,edx
c001e855:	f7 f5                	div    ebp
c001e857:	89 f0                	mov    eax,esi
c001e859:	f7 f5                	div    ebp
c001e85b:	89 d0                	mov    eax,edx
c001e85d:	eb d4                	jmp    c001e833 <__umoddi3+0x27>
c001e85f:	90                   	nop
c001e860:	89 f1                	mov    ecx,esi
c001e862:	39 d8                	cmp    eax,ebx
c001e864:	76 0a                	jbe    c001e870 <__umoddi3+0x64>
c001e866:	89 f0                	mov    eax,esi
c001e868:	83 c4 1c             	add    esp,0x1c
c001e86b:	5b                   	pop    ebx
c001e86c:	5e                   	pop    esi
c001e86d:	5f                   	pop    edi
c001e86e:	5d                   	pop    ebp
c001e86f:	c3                   	ret    
c001e870:	0f bd e8             	bsr    ebp,eax
c001e873:	83 f5 1f             	xor    ebp,0x1f
c001e876:	75 1c                	jne    c001e894 <__umoddi3+0x88>
c001e878:	39 d8                	cmp    eax,ebx
c001e87a:	72 04                	jb     c001e880 <__umoddi3+0x74>
c001e87c:	39 f7                	cmp    edi,esi
c001e87e:	77 08                	ja     c001e888 <__umoddi3+0x7c>
c001e880:	89 da                	mov    edx,ebx
c001e882:	29 fe                	sub    esi,edi
c001e884:	19 c2                	sbb    edx,eax
c001e886:	89 f1                	mov    ecx,esi
c001e888:	89 c8                	mov    eax,ecx
c001e88a:	83 c4 1c             	add    esp,0x1c
c001e88d:	5b                   	pop    ebx
c001e88e:	5e                   	pop    esi
c001e88f:	5f                   	pop    edi
c001e890:	5d                   	pop    ebp
c001e891:	c3                   	ret    
c001e892:	66 90                	xchg   ax,ax
c001e894:	ba 20 00 00 00       	mov    edx,0x20
c001e899:	29 ea                	sub    edx,ebp
c001e89b:	89 e9                	mov    ecx,ebp
c001e89d:	d3 e0                	shl    eax,cl
c001e89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8a3:	89 f8                	mov    eax,edi
c001e8a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e8a9:	88 d1                	mov    cl,dl
c001e8ab:	d3 e8                	shr    eax,cl
c001e8ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e8b1:	09 c1                	or     ecx,eax
c001e8b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e8b7:	89 e9                	mov    ecx,ebp
c001e8b9:	d3 e7                	shl    edi,cl
c001e8bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e8bf:	89 d8                	mov    eax,ebx
c001e8c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e8c5:	88 d1                	mov    cl,dl
c001e8c7:	d3 e8                	shr    eax,cl
c001e8c9:	89 c7                	mov    edi,eax
c001e8cb:	89 e9                	mov    ecx,ebp
c001e8cd:	d3 e3                	shl    ebx,cl
c001e8cf:	89 f0                	mov    eax,esi
c001e8d1:	88 d1                	mov    cl,dl
c001e8d3:	d3 e8                	shr    eax,cl
c001e8d5:	09 d8                	or     eax,ebx
c001e8d7:	89 e9                	mov    ecx,ebp
c001e8d9:	d3 e6                	shl    esi,cl
c001e8db:	89 f3                	mov    ebx,esi
c001e8dd:	89 fa                	mov    edx,edi
c001e8df:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e8e3:	89 d1                	mov    ecx,edx
c001e8e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e8e9:	89 c6                	mov    esi,eax
c001e8eb:	89 d7                	mov    edi,edx
c001e8ed:	39 d1                	cmp    ecx,edx
c001e8ef:	72 27                	jb     c001e918 <__umoddi3+0x10c>
c001e8f1:	74 21                	je     c001e914 <__umoddi3+0x108>
c001e8f3:	89 ca                	mov    edx,ecx
c001e8f5:	29 f3                	sub    ebx,esi
c001e8f7:	19 fa                	sbb    edx,edi
c001e8f9:	89 d0                	mov    eax,edx
c001e8fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e8ff:	d3 e0                	shl    eax,cl
c001e901:	89 e9                	mov    ecx,ebp
c001e903:	d3 eb                	shr    ebx,cl
c001e905:	09 d8                	or     eax,ebx
c001e907:	d3 ea                	shr    edx,cl
c001e909:	83 c4 1c             	add    esp,0x1c
c001e90c:	5b                   	pop    ebx
c001e90d:	5e                   	pop    esi
c001e90e:	5f                   	pop    edi
c001e90f:	5d                   	pop    ebp
c001e910:	c3                   	ret    
c001e911:	8d 76 00             	lea    esi,[esi+0x0]
c001e914:	39 c3                	cmp    ebx,eax
c001e916:	73 db                	jae    c001e8f3 <__umoddi3+0xe7>
c001e918:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e91c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e920:	89 d7                	mov    edi,edx
c001e922:	89 c6                	mov    esi,eax
c001e924:	eb cd                	jmp    c001e8f3 <__umoddi3+0xe7>
c001e926:	66 90                	xchg   ax,ax
c001e928:	66 90                	xchg   ax,ax
c001e92a:	66 90                	xchg   ax,ax
c001e92c:	66 90                	xchg   ax,ax
c001e92e:	66 90                	xchg   ax,ax

c001e930 <fabs>:
c001e930:	83 ec 0c             	sub    esp,0xc
c001e933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e937:	89 04 24             	mov    DWORD PTR [esp],eax
c001e93a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e93e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e943:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e947:	dd 04 24             	fld    QWORD PTR [esp]
c001e94a:	83 c4 0c             	add    esp,0xc
c001e94d:	c3                   	ret    
c001e94e:	66 90                	xchg   ax,ax

c001e950 <lrint>:
c001e950:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e954:	83 ec 04             	sub    esp,0x4
c001e957:	db 1c 24             	fistp  DWORD PTR [esp]
c001e95a:	58                   	pop    eax
c001e95b:	c3                   	ret    

c001e95c <lrintf>:
c001e95c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e960:	83 ec 04             	sub    esp,0x4
c001e963:	db 1c 24             	fistp  DWORD PTR [esp]
c001e966:	58                   	pop    eax
c001e967:	c3                   	ret    

Disassembly of section .init:

c001e968 <_init>:
c001e968:	55                   	push   ebp
c001e969:	89 e5                	mov    ebp,esp
c001e96b:	e8 a8 17 fe ff       	call   c0000118 <frame_dummy>
c001e970:	e8 a3 fa ff ff       	call   c001e418 <__do_global_ctors_aux>
c001e975:	5d                   	pop    ebp
c001e976:	c3                   	ret    

Disassembly of section .fini:

c001e977 <_fini>:
c001e977:	55                   	push   ebp
c001e978:	89 e5                	mov    ebp,esp
c001e97a:	e8 29 17 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e97f:	5d                   	pop    ebp
c001e980:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e982 <Computer::~Computer()>:
c001e982:	83 ec 0c             	sub    esp,0xc
c001e985:	ba d8 88 03 c0       	mov    edx,0xc00388d8
c001e98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98e:	89 10                	mov    DWORD PTR [eax],edx
c001e990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e994:	83 ec 0c             	sub    esp,0xc
c001e997:	50                   	push   eax
c001e998:	e8 7f 4c ff ff       	call   c001361c <Device::~Device()>
c001e99d:	83 c4 10             	add    esp,0x10
c001e9a0:	90                   	nop
c001e9a1:	83 c4 0c             	add    esp,0xc
c001e9a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e9a6 <Computer::~Computer()>:
c001e9a6:	83 ec 0c             	sub    esp,0xc
c001e9a9:	83 ec 0c             	sub    esp,0xc
c001e9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9b0:	e8 cd ff ff ff       	call   c001e982 <Computer::~Computer()>
c001e9b5:	83 c4 10             	add    esp,0x10
c001e9b8:	83 ec 08             	sub    esp,0x8
c001e9bb:	68 ec 01 00 00       	push   0x1ec
c001e9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9c4:	e8 b6 3a ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001e9c9:	83 c4 10             	add    esp,0x10
c001e9cc:	83 c4 0c             	add    esp,0xc
c001e9cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e9d0 <idleCommon()>:
c001e9d0:	83 ec 0c             	sub    esp,0xc
c001e9d3:	e8 8a f9 fe ff       	call   c000e362 <lockScheduler()>
c001e9d8:	e8 b9 fc fe ff       	call   c000e696 <schedule()>
c001e9dd:	83 c4 0c             	add    esp,0xc
c001e9e0:	e9 7f f9 fe ff       	jmp    c000e364 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e9e5 <CPU::readCR0()>:
c001e9e5:	83 ec 10             	sub    esp,0x10
c001e9e8:	0f 20 c0             	mov    eax,cr0
c001e9eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9f3:	83 c4 10             	add    esp,0x10
c001e9f6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e9f7 <CPU::readCR2()>:
c001e9f7:	83 ec 10             	sub    esp,0x10
c001e9fa:	0f 20 d0             	mov    eax,cr2
c001e9fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea05:	83 c4 10             	add    esp,0x10
c001ea08:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001ea09 <CPU::readCR3()>:
c001ea09:	83 ec 10             	sub    esp,0x10
c001ea0c:	0f 20 d8             	mov    eax,cr3
c001ea0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea17:	83 c4 10             	add    esp,0x10
c001ea1a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001ea1b <CPU::readCR4()>:
c001ea1b:	83 ec 10             	sub    esp,0x10
c001ea1e:	0f 20 e0             	mov    eax,cr4
c001ea21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea29:	83 c4 10             	add    esp,0x10
c001ea2c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001ea2d <CPU::writeCR3(unsigned long)>:
c001ea2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea31:	0f 22 d8             	mov    cr3,eax
c001ea34:	90                   	nop
c001ea35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ea36 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ea36:	90                   	nop
c001ea37:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ea38 <ThreadControlBlock::ThreadControlBlock()>:
c001ea38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea3c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea47:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ea4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea52:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ea59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea5d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001ea64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea68:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea70:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001ea74:	90                   	nop
c001ea75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ea76 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ea76:	83 ec 0c             	sub    esp,0xc
c001ea79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea92:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eaa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eaae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eab9:	83 ec 0c             	sub    esp,0xc
c001eabc:	68 e8 91 03 c0       	push   0xc00391e8
c001eac1:	e8 fa e3 fe ff       	call   c000cec0 <kprintf(char const*, ...)>
c001eac6:	83 c4 10             	add    esp,0x10
c001eac9:	90                   	nop
c001eaca:	83 c4 0c             	add    esp,0xc
c001eacd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001eace <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ead6:	75 10                	jne    c001eae8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ead8:	83 ec 0c             	sub    esp,0xc
c001eadb:	68 04 92 03 c0       	push   0xc0039204
c001eae0:	e8 f9 e4 fe ff       	call   c000cfde <panic(char const*)>
c001eae5:	83 c4 10             	add    esp,0x10
c001eae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaec:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaee:	85 c0                	test   eax,eax
c001eaf0:	74 34                	je     c001eb26 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaf9:	85 c0                	test   eax,eax
c001eafb:	74 29                	je     c001eb26 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb08:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eb0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb13:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb1d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb24:	eb 65                	jmp    c001eb8b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb2c:	85 c0                	test   eax,eax
c001eb2e:	75 4b                	jne    c001eb7b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb37:	85 c0                	test   eax,eax
c001eb39:	75 40                	jne    c001eb7b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb43:	89 10                	mov    DWORD PTR [eax],edx
c001eb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb57:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb62:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb65:	85 c0                	test   eax,eax
c001eb67:	74 22                	je     c001eb8b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb69:	83 ec 0c             	sub    esp,0xc
c001eb6c:	68 26 92 03 c0       	push   0xc0039226
c001eb71:	e8 68 e4 fe ff       	call   c000cfde <panic(char const*)>
c001eb76:	83 c4 10             	add    esp,0x10
c001eb79:	eb 10                	jmp    c001eb8b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb7b:	83 ec 0c             	sub    esp,0xc
c001eb7e:	68 30 92 03 c0       	push   0xc0039230
c001eb83:	e8 56 e4 fe ff       	call   c000cfde <panic(char const*)>
c001eb88:	83 c4 10             	add    esp,0x10
c001eb8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb92:	8d 50 01             	lea    edx,[eax+0x1]
c001eb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb99:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb9c:	90                   	nop
c001eb9d:	83 c4 0c             	add    esp,0xc
c001eba0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eba2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eba6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba8:	85 c0                	test   eax,eax
c001ebaa:	75 0e                	jne    c001ebba <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebb3:	85 c0                	test   eax,eax
c001ebb5:	75 03                	jne    c001ebba <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebb7:	b0 01                	mov    al,0x1
c001ebb9:	c3                   	ret    
c001ebba:	b0 00                	mov    al,0x0
c001ebbc:	90                   	nop
c001ebbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ebbe <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ebbe:	83 ec 0c             	sub    esp,0xc
c001ebc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc7:	85 c0                	test   eax,eax
c001ebc9:	75 15                	jne    c001ebe0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001ebcb:	83 ec 0c             	sub    esp,0xc
c001ebce:	68 3c 92 03 c0       	push   0xc003923c
c001ebd3:	e8 06 e4 fe ff       	call   c000cfde <panic(char const*)>
c001ebd8:	83 c4 10             	add    esp,0x10
c001ebdb:	e9 88 00 00 00       	jmp    c001ec68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001ebe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebe7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebea:	85 c0                	test   eax,eax
c001ebec:	0f 95 c0             	setne  al
c001ebef:	84 c0                	test   al,al
c001ebf1:	74 10                	je     c001ec03 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001ebf3:	83 ec 0c             	sub    esp,0xc
c001ebf6:	68 87 92 03 c0       	push   0xc0039287
c001ebfb:	e8 de e3 fe ff       	call   c000cfde <panic(char const*)>
c001ec00:	83 c4 10             	add    esp,0x10
c001ec03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec09:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec0c:	85 c0                	test   eax,eax
c001ec0e:	0f 94 c0             	sete   al
c001ec11:	84 c0                	test   al,al
c001ec13:	74 33                	je     c001ec48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001ec15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec19:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec31:	83 f8 01             	cmp    eax,0x1
c001ec34:	74 21                	je     c001ec57 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ec36:	83 ec 0c             	sub    esp,0xc
c001ec39:	68 60 92 03 c0       	push   0xc0039260
c001ec3e:	e8 9b e3 fe ff       	call   c000cfde <panic(char const*)>
c001ec43:	83 c4 10             	add    esp,0x10
c001ec46:	eb 0f                	jmp    c001ec57 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ec48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec4e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec55:	89 10                	mov    DWORD PTR [eax],edx
c001ec57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec5e:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec65:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec68:	83 c4 0c             	add    esp,0xc
c001ec6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ec74 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ec74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec78:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ec7c <LinkedList<UnixFile>::~LinkedList()>:
c001ec7c:	90                   	nop
c001ec7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ec7e <LinkedList<UnixFile>::LinkedList()>:
c001ec7e:	83 ec 0c             	sub    esp,0xc
c001ec81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ecab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecaf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecba:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecc1:	83 ec 0c             	sub    esp,0xc
c001ecc4:	68 e8 91 03 c0       	push   0xc00391e8
c001ecc9:	e8 f2 e1 fe ff       	call   c000cec0 <kprintf(char const*, ...)>
c001ecce:	83 c4 10             	add    esp,0x10
c001ecd1:	90                   	nop
c001ecd2:	83 c4 0c             	add    esp,0xc
c001ecd5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ecd6 <LinkedList<UnixFile>::getFirstElement()>:
c001ecd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecda:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecdc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ecde <LinkedList<UnixFile>::removeFirst()>:
c001ecde:	83 ec 0c             	sub    esp,0xc
c001ece1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ece7:	85 c0                	test   eax,eax
c001ece9:	75 12                	jne    c001ecfd <LinkedList<UnixFile>::removeFirst()+0x1f>
c001eceb:	83 ec 0c             	sub    esp,0xc
c001ecee:	68 3c 92 03 c0       	push   0xc003923c
c001ecf3:	e8 e6 e2 fe ff       	call   c000cfde <panic(char const*)>
c001ecf8:	83 c4 10             	add    esp,0x10
c001ecfb:	eb 7e                	jmp    c001ed7b <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ecfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed07:	85 c0                	test   eax,eax
c001ed09:	74 10                	je     c001ed1b <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ed0b:	83 ec 0c             	sub    esp,0xc
c001ed0e:	68 87 92 03 c0       	push   0xc0039287
c001ed13:	e8 c6 e2 fe ff       	call   c000cfde <panic(char const*)>
c001ed18:	83 c4 10             	add    esp,0x10
c001ed1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed24:	85 c0                	test   eax,eax
c001ed26:	75 33                	jne    c001ed5b <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ed28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed44:	83 f8 01             	cmp    eax,0x1
c001ed47:	74 21                	je     c001ed6a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ed49:	83 ec 0c             	sub    esp,0xc
c001ed4c:	68 60 92 03 c0       	push   0xc0039260
c001ed51:	e8 88 e2 fe ff       	call   c000cfde <panic(char const*)>
c001ed56:	83 c4 10             	add    esp,0x10
c001ed59:	eb 0f                	jmp    c001ed6a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ed5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed61:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ed64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed68:	89 10                	mov    DWORD PTR [eax],edx
c001ed6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed71:	8d 50 ff             	lea    edx,[eax-0x1]
c001ed74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed78:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed7b:	83 c4 0c             	add    esp,0xc
c001ed7e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ed80 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ed80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ed88 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ed88:	83 ec 1c             	sub    esp,0x1c
c001ed8b:	83 ec 0c             	sub    esp,0xc
c001ed8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed92:	e8 3f ff ff ff       	call   c001ecd6 <LinkedList<UnixFile>::getFirstElement()>
c001ed97:	83 c4 10             	add    esp,0x10
c001ed9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed9e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001eda3:	74 43                	je     c001ede8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001eda5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eda9:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001edad:	75 20                	jne    c001edcf <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001edaf:	83 ec 0c             	sub    esp,0xc
c001edb2:	68 2c 94 03 c0       	push   0xc003942c
c001edb7:	e8 04 e1 fe ff       	call   c000cec0 <kprintf(char const*, ...)>
c001edbc:	83 c4 10             	add    esp,0x10
c001edbf:	83 ec 0c             	sub    esp,0xc
c001edc2:	68 43 94 03 c0       	push   0xc0039443
c001edc7:	e8 12 e2 fe ff       	call   c000cfde <panic(char const*)>
c001edcc:	83 c4 10             	add    esp,0x10
c001edcf:	83 ec 08             	sub    esp,0x8
c001edd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001edd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001edda:	e8 a1 ff ff ff       	call   c001ed80 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001eddf:	83 c4 10             	add    esp,0x10
c001ede2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ede6:	eb b6                	jmp    c001ed9e <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001ede8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eded:	75 10                	jne    c001edff <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001edef:	83 ec 0c             	sub    esp,0xc
c001edf2:	68 04 92 03 c0       	push   0xc0039204
c001edf7:	e8 e2 e1 fe ff       	call   c000cfde <panic(char const*)>
c001edfc:	83 c4 10             	add    esp,0x10
c001edff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee03:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee05:	85 c0                	test   eax,eax
c001ee07:	74 34                	je     c001ee3d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ee09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee10:	85 c0                	test   eax,eax
c001ee12:	74 29                	je     c001ee3d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ee14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee1b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee1f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee34:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee3b:	eb 65                	jmp    c001eea2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee41:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee43:	85 c0                	test   eax,eax
c001ee45:	75 4b                	jne    c001ee92 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ee47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee4e:	85 c0                	test   eax,eax
c001ee50:	75 40                	jne    c001ee92 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ee52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee5a:	89 10                	mov    DWORD PTR [eax],edx
c001ee5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee60:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee6e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee7c:	85 c0                	test   eax,eax
c001ee7e:	74 22                	je     c001eea2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee80:	83 ec 0c             	sub    esp,0xc
c001ee83:	68 26 92 03 c0       	push   0xc0039226
c001ee88:	e8 51 e1 fe ff       	call   c000cfde <panic(char const*)>
c001ee8d:	83 c4 10             	add    esp,0x10
c001ee90:	eb 10                	jmp    c001eea2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee92:	83 ec 0c             	sub    esp,0xc
c001ee95:	68 30 92 03 c0       	push   0xc0039230
c001ee9a:	e8 3f e1 fe ff       	call   c000cfde <panic(char const*)>
c001ee9f:	83 c4 10             	add    esp,0x10
c001eea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eea6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eea9:	8d 50 01             	lea    edx,[eax+0x1]
c001eeac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeb0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eeb3:	90                   	nop
c001eeb4:	83 c4 1c             	add    esp,0x1c
c001eeb7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001eeb8 <DriverlessDevice::~DriverlessDevice()>:
c001eeb8:	ba e4 99 03 c0       	mov    edx,0xc00399e4
c001eebd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eec1:	89 10                	mov    DWORD PTR [eax],edx
c001eec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eec7:	50                   	push   eax
c001eec8:	e8 4f 47 ff ff       	call   c001361c <Device::~Device()>
c001eecd:	83 c4 04             	add    esp,0x4
c001eed0:	90                   	nop
c001eed1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eed2 <DriverlessDevice::~DriverlessDevice()>:
c001eed2:	83 ec 0c             	sub    esp,0xc
c001eed5:	83 ec 0c             	sub    esp,0xc
c001eed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eedc:	e8 d7 ff ff ff       	call   c001eeb8 <DriverlessDevice::~DriverlessDevice()>
c001eee1:	83 c4 10             	add    esp,0x10
c001eee4:	83 ec 08             	sub    esp,0x8
c001eee7:	68 58 01 00 00       	push   0x158
c001eeec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eef0:	e8 8a 35 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001eef5:	83 c4 10             	add    esp,0x10
c001eef8:	83 c4 0c             	add    esp,0xc
c001eefb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eefc <LinkedList<Device>::addElement(Device*)>:
c001eefc:	83 ec 0c             	sub    esp,0xc
c001eeff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ef04:	75 10                	jne    c001ef16 <LinkedList<Device>::addElement(Device*)+0x1a>
c001ef06:	83 ec 0c             	sub    esp,0xc
c001ef09:	68 04 92 03 c0       	push   0xc0039204
c001ef0e:	e8 cb e0 fe ff       	call   c000cfde <panic(char const*)>
c001ef13:	83 c4 10             	add    esp,0x10
c001ef16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef1c:	85 c0                	test   eax,eax
c001ef1e:	74 3a                	je     c001ef5a <LinkedList<Device>::addElement(Device*)+0x5e>
c001ef20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef27:	85 c0                	test   eax,eax
c001ef29:	74 2f                	je     c001ef5a <LinkedList<Device>::addElement(Device*)+0x5e>
c001ef2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef36:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ef3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef4e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef58:	eb 68                	jmp    c001efc2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef60:	85 c0                	test   eax,eax
c001ef62:	75 4e                	jne    c001efb2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef6b:	85 c0                	test   eax,eax
c001ef6d:	75 43                	jne    c001efb2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef77:	89 10                	mov    DWORD PTR [eax],edx
c001ef79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef8b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef9c:	85 c0                	test   eax,eax
c001ef9e:	74 22                	je     c001efc2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001efa0:	83 ec 0c             	sub    esp,0xc
c001efa3:	68 26 92 03 c0       	push   0xc0039226
c001efa8:	e8 31 e0 fe ff       	call   c000cfde <panic(char const*)>
c001efad:	83 c4 10             	add    esp,0x10
c001efb0:	eb 10                	jmp    c001efc2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001efb2:	83 ec 0c             	sub    esp,0xc
c001efb5:	68 30 92 03 c0       	push   0xc0039230
c001efba:	e8 1f e0 fe ff       	call   c000cfde <panic(char const*)>
c001efbf:	83 c4 10             	add    esp,0x10
c001efc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efc9:	8d 50 01             	lea    edx,[eax+0x1]
c001efcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001efd3:	90                   	nop
c001efd4:	83 c4 0c             	add    esp,0xc
c001efd7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001efd8 <LinkedList<Device>::LinkedList()>:
c001efd8:	83 ec 0c             	sub    esp,0xc
c001efdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001effb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f009:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f014:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f01b:	83 ec 0c             	sub    esp,0xc
c001f01e:	68 e8 91 03 c0       	push   0xc00391e8
c001f023:	e8 98 de fe ff       	call   c000cec0 <kprintf(char const*, ...)>
c001f028:	83 c4 10             	add    esp,0x10
c001f02b:	90                   	nop
c001f02c:	83 c4 0c             	add    esp,0xc
c001f02f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f030 <CPU::readDR0()>:
c001f030:	83 ec 10             	sub    esp,0x10
c001f033:	0f 21 c0             	mov    eax,db0
c001f036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f03a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f03e:	83 c4 10             	add    esp,0x10
c001f041:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f042 <CPU::readDR1()>:
c001f042:	83 ec 10             	sub    esp,0x10
c001f045:	0f 21 c8             	mov    eax,db1
c001f048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f04c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f050:	83 c4 10             	add    esp,0x10
c001f053:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f054 <CPU::readDR2()>:
c001f054:	83 ec 10             	sub    esp,0x10
c001f057:	0f 21 d0             	mov    eax,db2
c001f05a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f05e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f062:	83 c4 10             	add    esp,0x10
c001f065:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f066 <CPU::readDR3()>:
c001f066:	83 ec 10             	sub    esp,0x10
c001f069:	0f 21 d8             	mov    eax,db3
c001f06c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f074:	83 c4 10             	add    esp,0x10
c001f077:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f078 <CPU::readDR6()>:
c001f078:	83 ec 10             	sub    esp,0x10
c001f07b:	0f 21 f0             	mov    eax,db6
c001f07e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f086:	83 c4 10             	add    esp,0x10
c001f089:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f08a <CPU::readDR7()>:
c001f08a:	83 ec 10             	sub    esp,0x10
c001f08d:	0f 21 f8             	mov    eax,db7
c001f090:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f098:	83 c4 10             	add    esp,0x10
c001f09b:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f09c <ACPI::~ACPI()>:
c001f09c:	83 ec 0c             	sub    esp,0xc
c001f09f:	ba 28 a1 03 c0       	mov    edx,0xc003a128
c001f0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a8:	89 10                	mov    DWORD PTR [eax],edx
c001f0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ae:	83 ec 0c             	sub    esp,0xc
c001f0b1:	50                   	push   eax
c001f0b2:	e8 65 45 ff ff       	call   c001361c <Device::~Device()>
c001f0b7:	83 c4 10             	add    esp,0x10
c001f0ba:	90                   	nop
c001f0bb:	83 c4 0c             	add    esp,0xc
c001f0be:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f0c0 <ACPI::~ACPI()>:
c001f0c0:	83 ec 0c             	sub    esp,0xc
c001f0c3:	83 ec 0c             	sub    esp,0xc
c001f0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0ca:	e8 cd ff ff ff       	call   c001f09c <ACPI::~ACPI()>
c001f0cf:	83 c4 10             	add    esp,0x10
c001f0d2:	83 ec 08             	sub    esp,0x8
c001f0d5:	68 68 22 00 00       	push   0x2268
c001f0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0de:	e8 9c 33 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f0e3:	83 c4 10             	add    esp,0x10
c001f0e6:	83 c4 0c             	add    esp,0xc
c001f0e9:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f0ea <CPU::~CPU()>:
c001f0ea:	83 ec 0c             	sub    esp,0xc
c001f0ed:	ba 78 a3 03 c0       	mov    edx,0xc003a378
c001f0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f6:	89 10                	mov    DWORD PTR [eax],edx
c001f0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	50                   	push   eax
c001f100:	e8 17 45 ff ff       	call   c001361c <Device::~Device()>
c001f105:	83 c4 10             	add    esp,0x10
c001f108:	90                   	nop
c001f109:	83 c4 0c             	add    esp,0xc
c001f10c:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f10e <CPU::~CPU()>:
c001f10e:	83 ec 0c             	sub    esp,0xc
c001f111:	83 ec 0c             	sub    esp,0xc
c001f114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f118:	e8 cd ff ff ff       	call   c001f0ea <CPU::~CPU()>
c001f11d:	83 c4 10             	add    esp,0x10
c001f120:	83 ec 08             	sub    esp,0x8
c001f123:	68 98 11 00 00       	push   0x1198
c001f128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12c:	e8 4e 33 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f131:	83 c4 10             	add    esp,0x10
c001f134:	83 c4 0c             	add    esp,0xc
c001f137:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f138 <CPU::writeDR7(unsigned long)>:
c001f138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f13c:	0f 23 f8             	mov    db7,eax
c001f13f:	90                   	nop
c001f140:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f141 <CPU::writeCR4(unsigned long)>:
c001f141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f145:	0f 22 e0             	mov    cr4,eax
c001f148:	90                   	nop
c001f149:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f14a <PCI::~PCI()>:
c001f14a:	83 ec 0c             	sub    esp,0xc
c001f14d:	ba 14 a7 03 c0       	mov    edx,0xc003a714
c001f152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f156:	89 10                	mov    DWORD PTR [eax],edx
c001f158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	50                   	push   eax
c001f160:	e8 c7 3e ff ff       	call   c001302c <Bus::~Bus()>
c001f165:	83 c4 10             	add    esp,0x10
c001f168:	90                   	nop
c001f169:	83 c4 0c             	add    esp,0xc
c001f16c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f16e <PCI::~PCI()>:
c001f16e:	83 ec 0c             	sub    esp,0xc
c001f171:	83 ec 0c             	sub    esp,0xc
c001f174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f178:	e8 cd ff ff ff       	call   c001f14a <PCI::~PCI()>
c001f17d:	83 c4 10             	add    esp,0x10
c001f180:	83 ec 08             	sub    esp,0x8
c001f183:	68 58 01 00 00       	push   0x158
c001f188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18c:	e8 ee 32 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f191:	83 c4 10             	add    esp,0x10
c001f194:	83 c4 0c             	add    esp,0xc
c001f197:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f198 <IDE::~IDE()>:
c001f198:	83 ec 0c             	sub    esp,0xc
c001f19b:	ba e0 a9 03 c0       	mov    edx,0xc003a9e0
c001f1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a4:	89 10                	mov    DWORD PTR [eax],edx
c001f1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	50                   	push   eax
c001f1ae:	e8 7f 49 ff ff       	call   c0013b32 <HardDiskController::~HardDiskController()>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	90                   	nop
c001f1b7:	83 c4 0c             	add    esp,0xc
c001f1ba:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f1bc <IDE::~IDE()>:
c001f1bc:	83 ec 0c             	sub    esp,0xc
c001f1bf:	83 ec 0c             	sub    esp,0xc
c001f1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c6:	e8 cd ff ff ff       	call   c001f198 <IDE::~IDE()>
c001f1cb:	83 c4 10             	add    esp,0x10
c001f1ce:	83 ec 08             	sub    esp,0x8
c001f1d1:	68 70 02 00 00       	push   0x270
c001f1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1da:	e8 a0 32 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f1df:	83 c4 10             	add    esp,0x10
c001f1e2:	83 c4 0c             	add    esp,0xc
c001f1e5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f1e6 <ATA::~ATA()>:
c001f1e6:	83 ec 0c             	sub    esp,0xc
c001f1e9:	ba 30 aa 03 c0       	mov    edx,0xc003aa30
c001f1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f2:	89 10                	mov    DWORD PTR [eax],edx
c001f1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f8:	83 ec 0c             	sub    esp,0xc
c001f1fb:	50                   	push   eax
c001f1fc:	e8 0f 4a ff ff       	call   c0013c10 <PhysicalDisk::~PhysicalDisk()>
c001f201:	83 c4 10             	add    esp,0x10
c001f204:	90                   	nop
c001f205:	83 c4 0c             	add    esp,0xc
c001f208:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f20a <ATA::~ATA()>:
c001f20a:	83 ec 0c             	sub    esp,0xc
c001f20d:	83 ec 0c             	sub    esp,0xc
c001f210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f214:	e8 cd ff ff ff       	call   c001f1e6 <ATA::~ATA()>
c001f219:	83 c4 10             	add    esp,0x10
c001f21c:	83 ec 08             	sub    esp,0x8
c001f21f:	68 7c 01 00 00       	push   0x17c
c001f224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f228:	e8 52 32 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f22d:	83 c4 10             	add    esp,0x10
c001f230:	83 c4 0c             	add    esp,0xc
c001f233:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f234 <ATAPI::~ATAPI()>:
c001f234:	83 ec 0c             	sub    esp,0xc
c001f237:	ba 9c aa 03 c0       	mov    edx,0xc003aa9c
c001f23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f240:	89 10                	mov    DWORD PTR [eax],edx
c001f242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f246:	83 ec 0c             	sub    esp,0xc
c001f249:	50                   	push   eax
c001f24a:	e8 c1 49 ff ff       	call   c0013c10 <PhysicalDisk::~PhysicalDisk()>
c001f24f:	83 c4 10             	add    esp,0x10
c001f252:	90                   	nop
c001f253:	83 c4 0c             	add    esp,0xc
c001f256:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f258 <ATAPI::~ATAPI()>:
c001f258:	83 ec 0c             	sub    esp,0xc
c001f25b:	83 ec 0c             	sub    esp,0xc
c001f25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f262:	e8 cd ff ff ff       	call   c001f234 <ATAPI::~ATAPI()>
c001f267:	83 c4 10             	add    esp,0x10
c001f26a:	83 ec 08             	sub    esp,0x8
c001f26d:	68 80 01 00 00       	push   0x180
c001f272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f276:	e8 04 32 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f27b:	83 c4 10             	add    esp,0x10
c001f27e:	83 c4 0c             	add    esp,0xc
c001f281:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f282 <AVX::~AVX()>:
c001f282:	83 ec 0c             	sub    esp,0xc
c001f285:	ba d8 aa 03 c0       	mov    edx,0xc003aad8
c001f28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f28e:	89 10                	mov    DWORD PTR [eax],edx
c001f290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f294:	83 ec 0c             	sub    esp,0xc
c001f297:	50                   	push   eax
c001f298:	e8 f7 49 ff ff       	call   c0013c94 <FPU::~FPU()>
c001f29d:	83 c4 10             	add    esp,0x10
c001f2a0:	90                   	nop
c001f2a1:	83 c4 0c             	add    esp,0xc
c001f2a4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f2a6 <AVX::~AVX()>:
c001f2a6:	83 ec 0c             	sub    esp,0xc
c001f2a9:	83 ec 0c             	sub    esp,0xc
c001f2ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b0:	e8 cd ff ff ff       	call   c001f282 <AVX::~AVX()>
c001f2b5:	83 c4 10             	add    esp,0x10
c001f2b8:	83 ec 08             	sub    esp,0x8
c001f2bb:	68 58 01 00 00       	push   0x158
c001f2c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2c4:	e8 b6 31 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f2c9:	83 c4 10             	add    esp,0x10
c001f2cc:	83 c4 0c             	add    esp,0xc
c001f2cf:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f2d0 <MMX::~MMX()>:
c001f2d0:	83 ec 0c             	sub    esp,0xc
c001f2d3:	ba 18 ab 03 c0       	mov    edx,0xc003ab18
c001f2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2dc:	89 10                	mov    DWORD PTR [eax],edx
c001f2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2e2:	83 ec 0c             	sub    esp,0xc
c001f2e5:	50                   	push   eax
c001f2e6:	e8 a9 49 ff ff       	call   c0013c94 <FPU::~FPU()>
c001f2eb:	83 c4 10             	add    esp,0x10
c001f2ee:	90                   	nop
c001f2ef:	83 c4 0c             	add    esp,0xc
c001f2f2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f2f4 <MMX::~MMX()>:
c001f2f4:	83 ec 0c             	sub    esp,0xc
c001f2f7:	83 ec 0c             	sub    esp,0xc
c001f2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2fe:	e8 cd ff ff ff       	call   c001f2d0 <MMX::~MMX()>
c001f303:	83 c4 10             	add    esp,0x10
c001f306:	83 ec 08             	sub    esp,0x8
c001f309:	68 58 01 00 00       	push   0x158
c001f30e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f312:	e8 68 31 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f317:	83 c4 10             	add    esp,0x10
c001f31a:	83 c4 0c             	add    esp,0xc
c001f31d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f31e <SSE::~SSE()>:
c001f31e:	83 ec 0c             	sub    esp,0xc
c001f321:	ba 58 ab 03 c0       	mov    edx,0xc003ab58
c001f326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32a:	89 10                	mov    DWORD PTR [eax],edx
c001f32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f330:	83 ec 0c             	sub    esp,0xc
c001f333:	50                   	push   eax
c001f334:	e8 5b 49 ff ff       	call   c0013c94 <FPU::~FPU()>
c001f339:	83 c4 10             	add    esp,0x10
c001f33c:	90                   	nop
c001f33d:	83 c4 0c             	add    esp,0xc
c001f340:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f342 <SSE::~SSE()>:
c001f342:	83 ec 0c             	sub    esp,0xc
c001f345:	83 ec 0c             	sub    esp,0xc
c001f348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f34c:	e8 cd ff ff ff       	call   c001f31e <SSE::~SSE()>
c001f351:	83 c4 10             	add    esp,0x10
c001f354:	83 ec 08             	sub    esp,0x8
c001f357:	68 58 01 00 00       	push   0x158
c001f35c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f360:	e8 1a 31 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f365:	83 c4 10             	add    esp,0x10
c001f368:	83 c4 0c             	add    esp,0xc
c001f36b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f36c <x87::~x87()>:
c001f36c:	83 ec 0c             	sub    esp,0xc
c001f36f:	ba 98 ab 03 c0       	mov    edx,0xc003ab98
c001f374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f378:	89 10                	mov    DWORD PTR [eax],edx
c001f37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f37e:	83 ec 0c             	sub    esp,0xc
c001f381:	50                   	push   eax
c001f382:	e8 0d 49 ff ff       	call   c0013c94 <FPU::~FPU()>
c001f387:	83 c4 10             	add    esp,0x10
c001f38a:	90                   	nop
c001f38b:	83 c4 0c             	add    esp,0xc
c001f38e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f390 <x87::~x87()>:
c001f390:	83 ec 0c             	sub    esp,0xc
c001f393:	83 ec 0c             	sub    esp,0xc
c001f396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f39a:	e8 cd ff ff ff       	call   c001f36c <x87::~x87()>
c001f39f:	83 c4 10             	add    esp,0x10
c001f3a2:	83 ec 08             	sub    esp,0x8
c001f3a5:	68 58 01 00 00       	push   0x158
c001f3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3ae:	e8 cc 30 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f3b3:	83 c4 10             	add    esp,0x10
c001f3b6:	83 c4 0c             	add    esp,0xc
c001f3b9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f3ba <IOAPIC::~IOAPIC()>:
c001f3ba:	83 ec 0c             	sub    esp,0xc
c001f3bd:	ba f0 ac 03 c0       	mov    edx,0xc003acf0
c001f3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c6:	89 10                	mov    DWORD PTR [eax],edx
c001f3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3cc:	83 ec 0c             	sub    esp,0xc
c001f3cf:	50                   	push   eax
c001f3d0:	e8 47 42 ff ff       	call   c001361c <Device::~Device()>
c001f3d5:	83 c4 10             	add    esp,0x10
c001f3d8:	90                   	nop
c001f3d9:	83 c4 0c             	add    esp,0xc
c001f3dc:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f3de <IOAPIC::~IOAPIC()>:
c001f3de:	83 ec 0c             	sub    esp,0xc
c001f3e1:	83 ec 0c             	sub    esp,0xc
c001f3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e8:	e8 cd ff ff ff       	call   c001f3ba <IOAPIC::~IOAPIC()>
c001f3ed:	83 c4 10             	add    esp,0x10
c001f3f0:	83 ec 08             	sub    esp,0x8
c001f3f3:	68 68 01 00 00       	push   0x168
c001f3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3fc:	e8 7e 30 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f401:	83 c4 10             	add    esp,0x10
c001f404:	83 c4 0c             	add    esp,0xc
c001f407:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f408 <APIC::~APIC()>:
c001f408:	83 ec 0c             	sub    esp,0xc
c001f40b:	ba a8 ac 03 c0       	mov    edx,0xc003aca8
c001f410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f414:	89 10                	mov    DWORD PTR [eax],edx
c001f416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f41a:	83 ec 0c             	sub    esp,0xc
c001f41d:	50                   	push   eax
c001f41e:	e8 15 4d ff ff       	call   c0014138 <InterruptController::~InterruptController()>
c001f423:	83 c4 10             	add    esp,0x10
c001f426:	90                   	nop
c001f427:	83 c4 0c             	add    esp,0xc
c001f42a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f42c <APIC::~APIC()>:
c001f42c:	83 ec 0c             	sub    esp,0xc
c001f42f:	83 ec 0c             	sub    esp,0xc
c001f432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f436:	e8 cd ff ff ff       	call   c001f408 <APIC::~APIC()>
c001f43b:	83 c4 10             	add    esp,0x10
c001f43e:	83 ec 08             	sub    esp,0x8
c001f441:	68 58 21 00 00       	push   0x2158
c001f446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f44a:	e8 30 30 ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f44f:	83 c4 10             	add    esp,0x10
c001f452:	83 c4 0c             	add    esp,0xc
c001f455:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f456 <PIC::~PIC()>:
c001f456:	83 ec 0c             	sub    esp,0xc
c001f459:	ba 40 ad 03 c0       	mov    edx,0xc003ad40
c001f45e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f462:	89 10                	mov    DWORD PTR [eax],edx
c001f464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	50                   	push   eax
c001f46c:	e8 c7 4c ff ff       	call   c0014138 <InterruptController::~InterruptController()>
c001f471:	83 c4 10             	add    esp,0x10
c001f474:	90                   	nop
c001f475:	83 c4 0c             	add    esp,0xc
c001f478:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f47a <PIC::~PIC()>:
c001f47a:	83 ec 0c             	sub    esp,0xc
c001f47d:	83 ec 0c             	sub    esp,0xc
c001f480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f484:	e8 cd ff ff ff       	call   c001f456 <PIC::~PIC()>
c001f489:	83 c4 10             	add    esp,0x10
c001f48c:	83 ec 08             	sub    esp,0x8
c001f48f:	68 58 21 00 00       	push   0x2158
c001f494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f498:	e8 e2 2f ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f49d:	83 c4 10             	add    esp,0x10
c001f4a0:	83 c4 0c             	add    esp,0xc
c001f4a3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f4a4 <APICTimer::~APICTimer()>:
c001f4a4:	83 ec 0c             	sub    esp,0xc
c001f4a7:	ba 94 ad 03 c0       	mov    edx,0xc003ad94
c001f4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b0:	89 10                	mov    DWORD PTR [eax],edx
c001f4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b6:	83 ec 0c             	sub    esp,0xc
c001f4b9:	50                   	push   eax
c001f4ba:	e8 49 62 ff ff       	call   c0015708 <Timer::~Timer()>
c001f4bf:	83 c4 10             	add    esp,0x10
c001f4c2:	90                   	nop
c001f4c3:	83 c4 0c             	add    esp,0xc
c001f4c6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f4c8 <APICTimer::~APICTimer()>:
c001f4c8:	83 ec 0c             	sub    esp,0xc
c001f4cb:	83 ec 0c             	sub    esp,0xc
c001f4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4d2:	e8 cd ff ff ff       	call   c001f4a4 <APICTimer::~APICTimer()>
c001f4d7:	83 c4 10             	add    esp,0x10
c001f4da:	83 ec 08             	sub    esp,0x8
c001f4dd:	68 60 01 00 00       	push   0x160
c001f4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4e6:	e8 94 2f ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f4eb:	83 c4 10             	add    esp,0x10
c001f4ee:	83 c4 0c             	add    esp,0xc
c001f4f1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f4f2 <PIT::~PIT()>:
c001f4f2:	83 ec 0c             	sub    esp,0xc
c001f4f5:	ba e4 ad 03 c0       	mov    edx,0xc003ade4
c001f4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fe:	89 10                	mov    DWORD PTR [eax],edx
c001f500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f504:	83 ec 0c             	sub    esp,0xc
c001f507:	50                   	push   eax
c001f508:	e8 fb 61 ff ff       	call   c0015708 <Timer::~Timer()>
c001f50d:	83 c4 10             	add    esp,0x10
c001f510:	90                   	nop
c001f511:	83 c4 0c             	add    esp,0xc
c001f514:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f516 <PIT::~PIT()>:
c001f516:	83 ec 0c             	sub    esp,0xc
c001f519:	83 ec 0c             	sub    esp,0xc
c001f51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f520:	e8 cd ff ff ff       	call   c001f4f2 <PIT::~PIT()>
c001f525:	83 c4 10             	add    esp,0x10
c001f528:	83 ec 08             	sub    esp,0x8
c001f52b:	68 5c 01 00 00       	push   0x15c
c001f530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f534:	e8 46 2f ff ff       	call   c001247f <operator delete(void*, unsigned long)>
c001f539:	83 c4 10             	add    esp,0x10
c001f53c:	83 c4 0c             	add    esp,0xc
c001f53f:	c3                   	ret    
