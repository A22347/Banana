
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d6 c2 00 00       	call   c000c2f6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 03 f6 01 00       	call   c001f628 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b2 01 02 c0       	mov    ebx,0xc00201b2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb bc 01 02 c0    	cmp    ebx,0xc00201bc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 3f 02 c0       	mov    eax,0xc0023fac
c0000049:	3d ac 3f 02 c0       	cmp    eax,0xc0023fac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 3f 02 c0       	push   0xc0023fac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 3f 02 c0       	mov    eax,0xc0023fac
c0000075:	2d ac 3f 02 c0       	sub    eax,0xc0023fac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 3f 02 c0       	push   0xc0023fac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 4c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002414c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c4 01 02 c0       	mov    ebx,0xc00201c4
c00000bb:	81 eb c0 01 02 c0    	sub    ebx,0xc00201c0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c0 01 02 c0       	mov    esi,0xc00201c0
c00000ca:	a1 50 41 02 c0       	mov    eax,ds:0xc0024150
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 50 41 02 c0       	mov    ds:0xc0024150,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 50 41 02 c0       	mov    eax,ds:0xc0024150
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 3f 02 c0       	push   0xc0023fac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 4c 41 02 c0 01 	mov    BYTE PTR ds:0xc002414c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 54 41 02 c0       	push   0xc0024154
c000012c:	68 ac 3f 02 c0       	push   0xc0023fac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 fe 01 00 c0    	mov    DWORD PTR ds:0xc00001fe,esi
c0000169:	89 25 fa 01 00 c0    	mov    DWORD PTR ds:0xc00001fa,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf e1 01 00 c0       	mov    edi,0xc00001e1
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	b1 90                	mov    cl,0x90
c0000197:	85 db                	test   ebx,ebx
c0000199:	74 06                	je     c00001a1 <voodooXADD.skipChange>
c000019b:	8a 8b d0 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe30]

c00001a1 <voodooXADD.skipChange>:
c00001a1:	88 8b d1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe2f],cl
c00001a7:	80 ab d2 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe2e],0x3a
c00001ae:	88 8b e1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe1f],cl
c00001b4:	80 ab e2 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe1e],0xbe
c00001bb:	89 c4                	mov    esp,eax
c00001bd:	81 c4 10 00 00 00    	add    esp,0x10
c00001c3:	5f                   	pop    edi
c00001c4:	5e                   	pop    esi
c00001c5:	5d                   	pop    ebp
c00001c6:	5b                   	pop    ebx
c00001c7:	5b                   	pop    ebx
c00001c8:	5a                   	pop    edx
c00001c9:	59                   	pop    ecx
c00001ca:	58                   	pop    eax
c00001cb:	8b 25 fe 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fe

c00001d1 <voodooXADD.helper>:
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	8b 25 fa 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fa
c00001f7:	61                   	popa   
c00001f8:	c9                   	leave  
c00001f9:	c3                   	ret    

c00001fa <voodooXADD.oldStack>:
c00001fa:	00 00                	add    BYTE PTR [eax],al
	...

c00001fe <voodooXADD.newStack>:
c00001fe:	00 00                	add    BYTE PTR [eax],al
	...

c0000202 <doTPAUSE>:
c0000202:	fb                   	sti    
c0000203:	31 c0                	xor    eax,eax
c0000205:	31 d2                	xor    edx,edx
c0000207:	66 0f ae f0          	tpause eax
c000020b:	c3                   	ret    

c000020c <hasLegacyFPU>:
c000020c:	0f 20 c2             	mov    edx,cr0
c000020f:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000215:	0f 22 c2             	mov    cr0,edx
c0000218:	db e3                	fninit 
c000021a:	dd 3d 2f 02 00 c0    	fnstsw WORD PTR ds:0xc000022f
c0000220:	31 c0                	xor    eax,eax
c0000222:	66 81 3d 2f 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000022f,0x0
c000022b:	75 01                	jne    c000022e <hasLegacyFPU.nofpu>

c000022d <hasLegacyFPU.hasfpu>:
c000022d:	40                   	inc    eax

c000022e <hasLegacyFPU.nofpu>:
c000022e:	c3                   	ret    

c000022f <testword>:
c000022f:	aa                   	stos   BYTE PTR es:[edi],al
c0000230:	55                   	push   ebp

c0000231 <is486>:
c0000231:	0f 09                	wbinvd 
c0000233:	31 c0                	xor    eax,eax
c0000235:	40                   	inc    eax
c0000236:	c3                   	ret    
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	31 c0                	xor    eax,eax
c0000266:	c3                   	ret    

c0000267 <goToVM86>:
c0000267:	fa                   	cli    
c0000268:	55                   	push   ebp
c0000269:	89 e5                	mov    ebp,esp
c000026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000026e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000271:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000274:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000277:	25 ff ff 00 00       	and    eax,0xffff
c000027c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000282:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000288:	81 e2 ff ff 00 00    	and    edx,0xffff
c000028e:	52                   	push   edx
c000028f:	51                   	push   ecx
c0000290:	68 02 02 02 00       	push   0x20202
c0000295:	53                   	push   ebx
c0000296:	50                   	push   eax
c0000297:	cf                   	iret   

c0000298 <goToUsermode>:
c0000298:	fa                   	cli    
c0000299:	55                   	push   ebp
c000029a:	89 e5                	mov    ebp,esp
c000029c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000029f:	66 b8 23 00          	mov    ax,0x23
c00002a3:	66 8e d8             	mov    ds,ax
c00002a6:	66 8e c0             	mov    es,ax
c00002a9:	66 8e e0             	mov    fs,ax
c00002ac:	66 8e e8             	mov    gs,ax
c00002af:	89 e0                	mov    eax,esp
c00002b1:	68 23 00 00 00       	push   0x23
c00002b6:	50                   	push   eax
c00002b7:	68 02 02 00 00       	push   0x202
c00002bc:	68 1b 00 00 00       	push   0x1b
c00002c1:	53                   	push   ebx
c00002c2:	cf                   	iret   

c00002c3 <switchToThreadASMFirstTime>:
c00002c3:	9c                   	pushf  
c00002c4:	fa                   	cli    
c00002c5:	50                   	push   eax
c00002c6:	53                   	push   ebx
c00002c7:	51                   	push   ecx
c00002c8:	52                   	push   edx
c00002c9:	56                   	push   esi
c00002ca:	57                   	push   edi
c00002cb:	55                   	push   ebp
c00002cc:	e9 11 00 00 00       	jmp    c00002e2 <commonThreadSwitch>

c00002d1 <switchToThreadASM>:
c00002d1:	9c                   	pushf  
c00002d2:	50                   	push   eax
c00002d3:	53                   	push   ebx
c00002d4:	51                   	push   ecx
c00002d5:	52                   	push   edx
c00002d6:	56                   	push   esi
c00002d7:	57                   	push   edi
c00002d8:	55                   	push   ebp
c00002d9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002df:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002e2 <commonThreadSwitch>:
c00002e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002e6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00002ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002f4:	0f 20 d9             	mov    ecx,cr3
c00002f7:	39 c8                	cmp    eax,ecx
c00002f9:	74 03                	je     c00002fe <commonThreadSwitch.doneVAS>
c00002fb:	0f 22 d8             	mov    cr3,eax

c00002fe <commonThreadSwitch.doneVAS>:
c00002fe:	85 d2                	test   edx,edx
c0000300:	74 4e                	je     c0000350 <commonThreadSwitch.notFirstTime>
c0000302:	fa                   	cli    
c0000303:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000306:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000030b:	60                   	pusha  
c000030c:	e8 d7 eb 00 00       	call   c000eee8 <mapVASFirstTime>
c0000311:	61                   	popa   
c0000312:	89 c4                	mov    esp,eax
c0000314:	56                   	push   esi
c0000315:	52                   	push   edx
c0000316:	e8 25 82 01 00       	call   c0018540 <changeTSS>
c000031b:	5a                   	pop    edx
c000031c:	5e                   	pop    esi
c000031d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000324:	81 fa 01 00 00 00    	cmp    edx,0x1
c000032a:	74 39                	je     c0000365 <commonThreadSwitch.cameOffAFork>
c000032c:	5d                   	pop    ebp
c000032d:	5f                   	pop    edi
c000032e:	5e                   	pop    esi
c000032f:	59                   	pop    ecx
c0000330:	59                   	pop    ecx
c0000331:	5b                   	pop    ebx
c0000332:	58                   	pop    eax
c0000333:	81 c4 04 00 00 00    	add    esp,0x4
c0000339:	6a 02                	push   0x2
c000033b:	9d                   	popf   
c000033c:	52                   	push   edx
c000033d:	e8 2b 86 01 00       	call   c001896d <taskStartupFunction>
c0000342:	5a                   	pop    edx
c0000343:	50                   	push   eax
c0000344:	ff d2                	call   edx
c0000346:	e8 e0 8b 01 00       	call   c0018f2b <taskReturned>
c000034b:	e9 fb ff ff ff       	jmp    c000034b <commonThreadSwitch.doneVAS+0x4d>

c0000350 <commonThreadSwitch.notFirstTime>:
c0000350:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000353:	56                   	push   esi
c0000354:	52                   	push   edx
c0000355:	e8 e6 81 01 00       	call   c0018540 <changeTSS>
c000035a:	5a                   	pop    edx
c000035b:	5e                   	pop    esi
c000035c:	5d                   	pop    ebp
c000035d:	5f                   	pop    edi
c000035e:	5e                   	pop    esi
c000035f:	5a                   	pop    edx
c0000360:	59                   	pop    ecx
c0000361:	5b                   	pop    ebx
c0000362:	58                   	pop    eax
c0000363:	9d                   	popf   
c0000364:	c3                   	ret    

c0000365 <commonThreadSwitch.cameOffAFork>:
c0000365:	31 c0                	xor    eax,eax
c0000367:	31 d2                	xor    edx,edx
c0000369:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000036c:	e9 a2 02 00 00       	jmp    c0000613 <offAForkJumpThingy>

c0000371 <detectCPUID>:
c0000371:	9c                   	pushf  
c0000372:	9c                   	pushf  
c0000373:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c000037a:	9d                   	popf   
c000037b:	9c                   	pushf  
c000037c:	58                   	pop    eax
c000037d:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000380:	9d                   	popf   
c0000381:	25 00 00 20 00       	and    eax,0x200000
c0000386:	c3                   	ret    

c0000387 <asmQuickAcquireLock>:
c0000387:	55                   	push   ebp
c0000388:	89 e5                	mov    ebp,esp
c000038a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000038d <asmQuickAcquireLock.retry>:
c000038d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000392:	72 02                	jb     c0000396 <asmQuickAcquireLock.spin_with_pause>
c0000394:	fa                   	cli    
c0000395:	c3                   	ret    

c0000396 <asmQuickAcquireLock.spin_with_pause>:
c0000396:	f3 90                	pause  
c0000398:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000039e:	75 f6                	jne    c0000396 <asmQuickAcquireLock.spin_with_pause>
c00003a0:	e9 e8 ff ff ff       	jmp    c000038d <asmQuickAcquireLock.retry>

c00003a5 <asmQuickReleaseLock>:
c00003a5:	55                   	push   ebp
c00003a6:	89 e5                	mov    ebp,esp
c00003a8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003af:	5d                   	pop    ebp
c00003b0:	c3                   	ret    

c00003b1 <asmAcquireLock>:
c00003b1:	55                   	push   ebp
c00003b2:	89 e5                	mov    ebp,esp
c00003b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b7 <asmAcquireLock.retry>:
c00003b7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003bc:	72 05                	jb     c00003c3 <asmAcquireLock.spin_with_pause>
c00003be:	9c                   	pushf  
c00003bf:	58                   	pop    eax
c00003c0:	fa                   	cli    
c00003c1:	5d                   	pop    ebp
c00003c2:	c3                   	ret    

c00003c3 <asmAcquireLock.spin_with_pause>:
c00003c3:	f3 90                	pause  
c00003c5:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003cb:	75 f6                	jne    c00003c3 <asmAcquireLock.spin_with_pause>
c00003cd:	e9 e5 ff ff ff       	jmp    c00003b7 <asmAcquireLock.retry>

c00003d2 <asmReleaseLock>:
c00003d2:	55                   	push   ebp
c00003d3:	89 e5                	mov    ebp,esp
c00003d5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003e1:	52                   	push   edx
c00003e2:	9d                   	popf   
c00003e3:	5d                   	pop    ebp
c00003e4:	c3                   	ret    

c00003e5 <loadGDT>:
c00003e5:	0f 01 15 90 45 02 c0 	lgdtd  ds:0xc0024590
c00003ec:	66 b8 10 00          	mov    ax,0x10
c00003f0:	66 8e d8             	mov    ds,ax
c00003f3:	66 8e c0             	mov    es,ax
c00003f6:	66 8e e0             	mov    fs,ax
c00003f9:	66 8e e8             	mov    gs,ax
c00003fc:	66 8e d0             	mov    ss,ax
c00003ff:	e9 00 00 00 00       	jmp    c0000404 <flush2>

c0000404 <flush2>:
c0000404:	c3                   	ret    

c0000405 <isr0>:
c0000405:	fa                   	cli    
c0000406:	68 00 00 00 00       	push   0x0
c000040b:	68 00 00 00 00       	push   0x0
c0000410:	e9 a2 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000415 <isr1>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 01                	push   0x1
c000041a:	e9 98 01 00 00       	jmp    c00005b7 <int_common_stub>

c000041f <isr2>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 02                	push   0x2
c0000424:	e9 8e 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000429 <isr3>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 03                	push   0x3
c000042e:	e9 84 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000433 <isr4>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 04                	push   0x4
c0000438:	e9 7a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000043d <isr5>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 05                	push   0x5
c0000442:	e9 70 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000447 <isr6>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 06                	push   0x6
c000044c:	e9 66 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000451 <isr7>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 07                	push   0x7
c0000456:	e9 5c 01 00 00       	jmp    c00005b7 <int_common_stub>

c000045b <isr8>:
c000045b:	fa                   	cli    
c000045c:	6a 08                	push   0x8
c000045e:	e9 54 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000463 <isr9>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 09                	push   0x9
c0000468:	e9 4a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000046d <isr10>:
c000046d:	fa                   	cli    
c000046e:	6a 0a                	push   0xa
c0000470:	e9 42 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000475 <isr11>:
c0000475:	fa                   	cli    
c0000476:	6a 0b                	push   0xb
c0000478:	e9 3a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000047d <isr12>:
c000047d:	fa                   	cli    
c000047e:	6a 0c                	push   0xc
c0000480:	e9 32 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000485 <isr13>:
c0000485:	fa                   	cli    
c0000486:	6a 0d                	push   0xd
c0000488:	e9 2a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000048d <isr14>:
c000048d:	fa                   	cli    
c000048e:	6a 0e                	push   0xe
c0000490:	e9 22 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000495 <isr15>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 0f                	push   0xf
c000049a:	e9 18 01 00 00       	jmp    c00005b7 <int_common_stub>

c000049f <isr16>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 10                	push   0x10
c00004a4:	e9 0e 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004a9 <isr17>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 11                	push   0x11
c00004ae:	e9 04 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004b3 <isr18>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 12                	push   0x12
c00004b8:	e9 fa 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004bd <isr96>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 60                	push   0x60
c00004c2:	e9 20 01 00 00       	jmp    c00005e7 <syscall_common_stub>

c00004c7 <irq0>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 20                	push   0x20
c00004cc:	e9 e6 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004d1 <irq1>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 21                	push   0x21
c00004d6:	e9 dc 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004db <irq2>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 22                	push   0x22
c00004e0:	e9 d2 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004e5 <irq3>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 23                	push   0x23
c00004ea:	e9 c8 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004ef <irq4>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 24                	push   0x24
c00004f4:	e9 be 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004f9 <irq5>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 25                	push   0x25
c00004fe:	e9 b4 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000503 <irq6>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 26                	push   0x26
c0000508:	e9 aa 00 00 00       	jmp    c00005b7 <int_common_stub>

c000050d <irq7>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 27                	push   0x27
c0000512:	e9 a0 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000517 <irq8>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 28                	push   0x28
c000051c:	e9 96 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000521 <irq9>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 29                	push   0x29
c0000526:	e9 8c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000052b <irq10>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 2a                	push   0x2a
c0000530:	e9 82 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000535 <irq11>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 2b                	push   0x2b
c000053a:	e9 78 00 00 00       	jmp    c00005b7 <int_common_stub>

c000053f <irq12>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 2c                	push   0x2c
c0000544:	e9 6e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000549 <irq13>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 2d                	push   0x2d
c000054e:	e9 64 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000553 <irq14>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 2e                	push   0x2e
c0000558:	e9 5a 00 00 00       	jmp    c00005b7 <int_common_stub>

c000055d <irq15>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2f                	push   0x2f
c0000562:	e9 50 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000567 <irq16>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 30                	push   0x30
c000056c:	e9 46 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000571 <irq17>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 31                	push   0x31
c0000576:	e9 3c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000057b <irq18>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 32                	push   0x32
c0000580:	e9 32 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000585 <irq19>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 33                	push   0x33
c000058a:	e9 28 00 00 00       	jmp    c00005b7 <int_common_stub>

c000058f <irq20>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 34                	push   0x34
c0000594:	e9 1e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000599 <irq21>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 35                	push   0x35
c000059e:	e9 14 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005a3 <irq22>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 36                	push   0x36
c00005a8:	e9 0a 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005ad <irq23>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 37                	push   0x37
c00005b2:	e9 00 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005b7 <int_common_stub>:
c00005b7:	60                   	pusha  
c00005b8:	1e                   	push   ds
c00005b9:	06                   	push   es
c00005ba:	0f a0                	push   fs
c00005bc:	0f a8                	push   gs
c00005be:	66 b8 10 00          	mov    ax,0x10
c00005c2:	66 8e d8             	mov    ds,ax
c00005c5:	66 8e c0             	mov    es,ax
c00005c8:	66 8e e0             	mov    fs,ax
c00005cb:	66 8e e8             	mov    gs,ax
c00005ce:	89 e1                	mov    ecx,esp
c00005d0:	51                   	push   ecx
c00005d1:	b9 11 0e 01 c0       	mov    ecx,0xc0010e11
c00005d6:	ff d1                	call   ecx
c00005d8:	59                   	pop    ecx
c00005d9:	0f a9                	pop    gs
c00005db:	0f a1                	pop    fs
c00005dd:	07                   	pop    es
c00005de:	1f                   	pop    ds
c00005df:	61                   	popa   
c00005e0:	81 c4 08 00 00 00    	add    esp,0x8
c00005e6:	cf                   	iret   

c00005e7 <syscall_common_stub>:
c00005e7:	60                   	pusha  
c00005e8:	1e                   	push   ds
c00005e9:	06                   	push   es
c00005ea:	0f a0                	push   fs
c00005ec:	0f a8                	push   gs
c00005ee:	66 b8 10 00          	mov    ax,0x10
c00005f2:	66 8e d8             	mov    ds,ax
c00005f5:	66 8e c0             	mov    es,ax
c00005f8:	66 8e e0             	mov    fs,ax
c00005fb:	66 8e e8             	mov    gs,ax
c00005fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000604:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000607:	89 e1                	mov    ecx,esp
c0000609:	51                   	push   ecx
c000060a:	fb                   	sti    
c000060b:	b9 11 0e 01 c0       	mov    ecx,0xc0010e11
c0000610:	ff d1                	call   ecx
c0000612:	59                   	pop    ecx

c0000613 <offAForkJumpThingy>:
c0000613:	0f a9                	pop    gs
c0000615:	0f a1                	pop    fs
c0000617:	07                   	pop    es
c0000618:	1f                   	pop    ds
c0000619:	61                   	popa   
c000061a:	81 c4 08 00 00 00    	add    esp,0x8
c0000620:	cf                   	iret   

c0000621 <memcmp>:
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000062f:	01 d6                	add    esi,edx
c0000631:	39 f2                	cmp    edx,esi
c0000633:	74 0e                	je     c0000643 <memcmp+0x22>
c0000635:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000638:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000063b:	38 c8                	cmp    al,cl
c000063d:	75 08                	jne    c0000647 <memcmp+0x26>
c000063f:	42                   	inc    edx
c0000640:	43                   	inc    ebx
c0000641:	eb ee                	jmp    c0000631 <memcmp+0x10>
c0000643:	31 c0                	xor    eax,eax
c0000645:	eb 02                	jmp    c0000649 <memcmp+0x28>
c0000647:	29 c8                	sub    eax,ecx
c0000649:	5b                   	pop    ebx
c000064a:	5e                   	pop    esi
c000064b:	c3                   	ret    

c000064c <memmove>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000065a:	39 c8                	cmp    eax,ecx
c000065c:	73 12                	jae    c0000670 <memmove+0x24>
c000065e:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000661:	89 c3                	mov    ebx,eax
c0000663:	39 f1                	cmp    ecx,esi
c0000665:	74 1a                	je     c0000681 <memmove+0x35>
c0000667:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000669:	43                   	inc    ebx
c000066a:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000066d:	41                   	inc    ecx
c000066e:	eb f3                	jmp    c0000663 <memmove+0x17>
c0000670:	76 0f                	jbe    c0000681 <memmove+0x35>
c0000672:	85 d2                	test   edx,edx
c0000674:	74 0b                	je     c0000681 <memmove+0x35>
c0000676:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000067a:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000067e:	4a                   	dec    edx
c000067f:	eb f1                	jmp    c0000672 <memmove+0x26>
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memcpy>:
c0000684:	57                   	push   edi
c0000685:	56                   	push   esi
c0000686:	53                   	push   ebx
c0000687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000068f:	89 da                	mov    edx,ebx
c0000691:	89 d9                	mov    ecx,ebx
c0000693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000697:	83 e2 fc             	and    edx,0xfffffffc
c000069a:	c1 e9 02             	shr    ecx,0x2
c000069d:	89 c7                	mov    edi,eax
c000069f:	fc                   	cld    
c00006a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006a2:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006a5:	01 c2                	add    edx,eax
c00006a7:	01 de                	add    esi,ebx
c00006a9:	39 f1                	cmp    ecx,esi
c00006ab:	74 09                	je     c00006b6 <memcpy+0x32>
c00006ad:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006af:	42                   	inc    edx
c00006b0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006b3:	41                   	inc    ecx
c00006b4:	eb f3                	jmp    c00006a9 <memcpy+0x25>
c00006b6:	5b                   	pop    ebx
c00006b7:	5e                   	pop    esi
c00006b8:	5f                   	pop    edi
c00006b9:	c3                   	ret    

c00006ba <memset>:
c00006ba:	53                   	push   ebx
c00006bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c3:	01 c1                	add    ecx,eax
c00006c5:	89 c2                	mov    edx,eax
c00006c7:	39 ca                	cmp    edx,ecx
c00006c9:	74 0a                	je     c00006d5 <memset+0x1b>
c00006cb:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006cf:	42                   	inc    edx
c00006d0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d3:	eb f2                	jmp    c00006c7 <memset+0xd>
c00006d5:	5b                   	pop    ebx
c00006d6:	c3                   	ret    

c00006d7 <strlen>:
c00006d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006db:	31 c0                	xor    eax,eax
c00006dd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e1:	74 03                	je     c00006e6 <strlen+0xf>
c00006e3:	40                   	inc    eax
c00006e4:	eb f7                	jmp    c00006dd <strlen+0x6>
c00006e6:	c3                   	ret    

c00006e7 <strpbrk>:
c00006e7:	53                   	push   ebx
c00006e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ec:	8a 08                	mov    cl,BYTE PTR [eax]
c00006ee:	84 c9                	test   cl,cl
c00006f0:	74 14                	je     c0000706 <strpbrk+0x1f>
c00006f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006f8:	84 db                	test   bl,bl
c00006fa:	74 07                	je     c0000703 <strpbrk+0x1c>
c00006fc:	38 cb                	cmp    bl,cl
c00006fe:	74 08                	je     c0000708 <strpbrk+0x21>
c0000700:	42                   	inc    edx
c0000701:	eb f3                	jmp    c00006f6 <strpbrk+0xf>
c0000703:	40                   	inc    eax
c0000704:	eb e6                	jmp    c00006ec <strpbrk+0x5>
c0000706:	31 c0                	xor    eax,eax
c0000708:	5b                   	pop    ebx
c0000709:	c3                   	ret    

c000070a <strtok>:
c000070a:	56                   	push   esi
c000070b:	53                   	push   ebx
c000070c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000710:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000714:	85 db                	test   ebx,ebx
c0000716:	75 0e                	jne    c0000726 <strtok+0x1c>
c0000718:	8b 1d 6c 41 02 c0    	mov    ebx,DWORD PTR ds:0xc002416c
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 04                	jne    c0000726 <strtok+0x1c>
c0000722:	31 db                	xor    ebx,ebx
c0000724:	eb 2e                	jmp    c0000754 <strtok+0x4a>
c0000726:	56                   	push   esi
c0000727:	53                   	push   ebx
c0000728:	e8 ba ff ff ff       	call   c00006e7 <strpbrk>
c000072d:	a3 6c 41 02 c0       	mov    ds:0xc002416c,eax
c0000732:	5a                   	pop    edx
c0000733:	a1 6c 41 02 c0       	mov    eax,ds:0xc002416c
c0000738:	59                   	pop    ecx
c0000739:	39 d8                	cmp    eax,ebx
c000073b:	75 07                	jne    c0000744 <strtok+0x3a>
c000073d:	43                   	inc    ebx
c000073e:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000742:	eb e2                	jmp    c0000726 <strtok+0x1c>
c0000744:	85 c0                	test   eax,eax
c0000746:	74 da                	je     c0000722 <strtok+0x18>
c0000748:	8d 50 01             	lea    edx,[eax+0x1]
c000074b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000074e:	89 15 6c 41 02 c0    	mov    DWORD PTR ds:0xc002416c,edx
c0000754:	89 d8                	mov    eax,ebx
c0000756:	5b                   	pop    ebx
c0000757:	5e                   	pop    esi
c0000758:	c3                   	ret    

c0000759 <strcpy>:
c0000759:	53                   	push   ebx
c000075a:	31 d2                	xor    edx,edx
c000075c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000764:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000767:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000076a:	84 c9                	test   cl,cl
c000076c:	74 06                	je     c0000774 <strcpy+0x1b>
c000076e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000771:	42                   	inc    edx
c0000772:	eb ec                	jmp    c0000760 <strcpy+0x7>
c0000774:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000777:	5b                   	pop    ebx
c0000778:	c3                   	ret    

c0000779 <strncpy>:
c0000779:	56                   	push   esi
c000077a:	53                   	push   ebx
c000077b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000783:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000787:	89 c3                	mov    ebx,eax
c0000789:	85 c9                	test   ecx,ecx
c000078b:	74 1a                	je     c00007a7 <strncpy+0x2e>
c000078d:	46                   	inc    esi
c000078e:	43                   	inc    ebx
c000078f:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000792:	49                   	dec    ecx
c0000793:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000796:	84 d2                	test   dl,dl
c0000798:	75 ef                	jne    c0000789 <strncpy+0x10>
c000079a:	31 d2                	xor    edx,edx
c000079c:	39 d1                	cmp    ecx,edx
c000079e:	74 07                	je     c00007a7 <strncpy+0x2e>
c00007a0:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a4:	42                   	inc    edx
c00007a5:	eb f5                	jmp    c000079c <strncpy+0x23>
c00007a7:	5b                   	pop    ebx
c00007a8:	5e                   	pop    esi
c00007a9:	c3                   	ret    

c00007aa <strcmp>:
c00007aa:	31 c9                	xor    ecx,ecx
c00007ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007b8:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007bc:	38 d0                	cmp    al,dl
c00007be:	75 08                	jne    c00007c8 <strcmp+0x1e>
c00007c0:	41                   	inc    ecx
c00007c1:	84 c0                	test   al,al
c00007c3:	75 e7                	jne    c00007ac <strcmp+0x2>
c00007c5:	31 c0                	xor    eax,eax
c00007c7:	c3                   	ret    
c00007c8:	29 d0                	sub    eax,edx
c00007ca:	c3                   	ret    

c00007cb <strchr>:
c00007cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007cf:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d1:	84 d2                	test   dl,dl
c00007d3:	74 09                	je     c00007de <strchr+0x13>
c00007d5:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007d9:	74 05                	je     c00007e0 <strchr+0x15>
c00007db:	40                   	inc    eax
c00007dc:	eb f1                	jmp    c00007cf <strchr+0x4>
c00007de:	31 c0                	xor    eax,eax
c00007e0:	c3                   	ret    

c00007e1 <strncmp>:
c00007e1:	56                   	push   esi
c00007e2:	53                   	push   ebx
c00007e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ef:	01 d6                	add    esi,edx
c00007f1:	39 f2                	cmp    edx,esi
c00007f3:	74 12                	je     c0000807 <strncmp+0x26>
c00007f5:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007f8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007fb:	38 c8                	cmp    al,cl
c00007fd:	75 0c                	jne    c000080b <strncmp+0x2a>
c00007ff:	42                   	inc    edx
c0000800:	84 c0                	test   al,al
c0000802:	74 03                	je     c0000807 <strncmp+0x26>
c0000804:	43                   	inc    ebx
c0000805:	eb ea                	jmp    c00007f1 <strncmp+0x10>
c0000807:	31 c0                	xor    eax,eax
c0000809:	eb 02                	jmp    c000080d <strncmp+0x2c>
c000080b:	29 c8                	sub    eax,ecx
c000080d:	5b                   	pop    ebx
c000080e:	5e                   	pop    esi
c000080f:	c3                   	ret    

c0000810 <strcat>:
c0000810:	53                   	push   ebx
c0000811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000815:	89 c1                	mov    ecx,eax
c0000817:	8d 51 01             	lea    edx,[ecx+0x1]
c000081a:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000081e:	74 04                	je     c0000824 <strcat+0x14>
c0000820:	89 d1                	mov    ecx,edx
c0000822:	eb f3                	jmp    c0000817 <strcat+0x7>
c0000824:	31 d2                	xor    edx,edx
c0000826:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000082a:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000082d:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000830:	42                   	inc    edx
c0000831:	84 db                	test   bl,bl
c0000833:	75 f1                	jne    c0000826 <strcat+0x16>
c0000835:	5b                   	pop    ebx
c0000836:	c3                   	ret    

c0000837 <strncat>:
c0000837:	56                   	push   esi
c0000838:	53                   	push   ebx
c0000839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000083d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000845:	89 c2                	mov    edx,eax
c0000847:	85 db                	test   ebx,ebx
c0000849:	74 23                	je     c000086e <strncat+0x37>
c000084b:	8d 72 01             	lea    esi,[edx+0x1]
c000084e:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000852:	74 04                	je     c0000858 <strncat+0x21>
c0000854:	89 f2                	mov    edx,esi
c0000856:	eb f3                	jmp    c000084b <strncat+0x14>
c0000858:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000085b:	41                   	inc    ecx
c000085c:	42                   	inc    edx
c000085d:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000860:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000863:	84 db                	test   bl,bl
c0000865:	74 07                	je     c000086e <strncat+0x37>
c0000867:	39 f1                	cmp    ecx,esi
c0000869:	75 f0                	jne    c000085b <strncat+0x24>
c000086b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000086e:	5b                   	pop    ebx
c000086f:	5e                   	pop    esi
c0000870:	c3                   	ret    

c0000871 <strstr>:
c0000871:	57                   	push   edi
c0000872:	56                   	push   esi
c0000873:	53                   	push   ebx
c0000874:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000087c:	57                   	push   edi
c000087d:	e8 55 fe ff ff       	call   c00006d7 <strlen>
c0000882:	59                   	pop    ecx
c0000883:	89 c6                	mov    esi,eax
c0000885:	85 c0                	test   eax,eax
c0000887:	74 1f                	je     c00008a8 <strstr+0x37>
c0000889:	53                   	push   ebx
c000088a:	e8 48 fe ff ff       	call   c00006d7 <strlen>
c000088f:	5a                   	pop    edx
c0000890:	39 f0                	cmp    eax,esi
c0000892:	72 12                	jb     c00008a6 <strstr+0x35>
c0000894:	56                   	push   esi
c0000895:	57                   	push   edi
c0000896:	53                   	push   ebx
c0000897:	e8 85 fd ff ff       	call   c0000621 <memcmp>
c000089c:	83 c4 0c             	add    esp,0xc
c000089f:	85 c0                	test   eax,eax
c00008a1:	74 05                	je     c00008a8 <strstr+0x37>
c00008a3:	43                   	inc    ebx
c00008a4:	eb e3                	jmp    c0000889 <strstr+0x18>
c00008a6:	31 db                	xor    ebx,ebx
c00008a8:	89 d8                	mov    eax,ebx
c00008aa:	5b                   	pop    ebx
c00008ab:	5e                   	pop    esi
c00008ac:	5f                   	pop    edi
c00008ad:	c3                   	ret    

c00008ae <toupper>:
c00008ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b2:	0f b6 d0             	movzx  edx,al
c00008b5:	f6 82 e0 01 02 c0 02 	test   BYTE PTR [edx-0x3ffdfe20],0x2
c00008bc:	74 03                	je     c00008c1 <toupper+0x13>
c00008be:	83 e8 20             	sub    eax,0x20
c00008c1:	c3                   	ret    

c00008c2 <tolower>:
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	0f b6 d0             	movzx  edx,al
c00008c9:	f6 82 e0 01 02 c0 01 	test   BYTE PTR [edx-0x3ffdfe20],0x1
c00008d0:	74 03                	je     c00008d5 <tolower+0x13>
c00008d2:	83 c0 20             	add    eax,0x20
c00008d5:	c3                   	ret    

c00008d6 <simple_strtoul>:
c00008d6:	55                   	push   ebp
c00008d7:	57                   	push   edi
c00008d8:	56                   	push   esi
c00008d9:	53                   	push   ebx
c00008da:	83 ec 08             	sub    esp,0x8
c00008dd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008e8:	f6 82 e0 01 02 c0 08 	test   BYTE PTR [edx-0x3ffdfe20],0x8
c00008ef:	74 03                	je     c00008f4 <simple_strtoul+0x1e>
c00008f1:	41                   	inc    ecx
c00008f2:	eb f1                	jmp    c00008e5 <simple_strtoul+0xf>
c00008f4:	80 fa 09             	cmp    dl,0x9
c00008f7:	74 f8                	je     c00008f1 <simple_strtoul+0x1b>
c00008f9:	80 fa 2d             	cmp    dl,0x2d
c00008fc:	75 0b                	jne    c0000909 <simple_strtoul+0x33>
c00008fe:	41                   	inc    ecx
c00008ff:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000907:	eb 0e                	jmp    c0000917 <simple_strtoul+0x41>
c0000909:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000911:	80 fa 2b             	cmp    dl,0x2b
c0000914:	75 01                	jne    c0000917 <simple_strtoul+0x41>
c0000916:	41                   	inc    ecx
c0000917:	85 f6                	test   esi,esi
c0000919:	75 22                	jne    c000093d <simple_strtoul+0x67>
c000091b:	be 0a 00 00 00       	mov    esi,0xa
c0000920:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000923:	75 5a                	jne    c000097f <simple_strtoul+0xa9>
c0000925:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000929:	50                   	push   eax
c000092a:	e8 93 ff ff ff       	call   c00008c2 <tolower>
c000092f:	5a                   	pop    edx
c0000930:	83 f8 78             	cmp    eax,0x78
c0000933:	74 03                	je     c0000938 <simple_strtoul+0x62>
c0000935:	41                   	inc    ecx
c0000936:	eb 16                	jmp    c000094e <simple_strtoul+0x78>
c0000938:	83 c1 02             	add    ecx,0x2
c000093b:	eb 22                	jmp    c000095f <simple_strtoul+0x89>
c000093d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000940:	83 f8 22             	cmp    eax,0x22
c0000943:	0f 87 ab 00 00 00    	ja     c00009f4 <simple_strtoul+0x11e>
c0000949:	83 fe 08             	cmp    esi,0x8
c000094c:	75 0c                	jne    c000095a <simple_strtoul+0x84>
c000094e:	be 08 00 00 00       	mov    esi,0x8
c0000953:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000956:	75 27                	jne    c000097f <simple_strtoul+0xa9>
c0000958:	eb 1f                	jmp    c0000979 <simple_strtoul+0xa3>
c000095a:	83 fe 10             	cmp    esi,0x10
c000095d:	75 20                	jne    c000097f <simple_strtoul+0xa9>
c000095f:	be 10 00 00 00       	mov    esi,0x10
c0000964:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000967:	75 16                	jne    c000097f <simple_strtoul+0xa9>
c0000969:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000096d:	50                   	push   eax
c000096e:	e8 4f ff ff ff       	call   c00008c2 <tolower>
c0000973:	5d                   	pop    ebp
c0000974:	83 f8 78             	cmp    eax,0x78
c0000977:	74 03                	je     c000097c <simple_strtoul+0xa6>
c0000979:	41                   	inc    ecx
c000097a:	eb 03                	jmp    c000097f <simple_strtoul+0xa9>
c000097c:	83 c1 02             	add    ecx,0x2
c000097f:	31 ed                	xor    ebp,ebp
c0000981:	31 db                	xor    ebx,ebx
c0000983:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000098a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000098c:	84 d2                	test   dl,dl
c000098e:	74 27                	je     c00009b7 <simple_strtoul+0xe1>
c0000990:	0f b6 fa             	movzx  edi,dl
c0000993:	f6 87 e0 01 02 c0 04 	test   BYTE PTR [edi-0x3ffdfe20],0x4
c000099a:	74 05                	je     c00009a1 <simple_strtoul+0xcb>
c000099c:	83 ef 30             	sub    edi,0x30
c000099f:	eb 22                	jmp    c00009c3 <simple_strtoul+0xed>
c00009a1:	0f be d2             	movsx  edx,dl
c00009a4:	52                   	push   edx
c00009a5:	e8 04 ff ff ff       	call   c00008ae <toupper>
c00009aa:	0f b6 d0             	movzx  edx,al
c00009ad:	5f                   	pop    edi
c00009ae:	f6 82 e0 01 02 c0 01 	test   BYTE PTR [edx-0x3ffdfe20],0x1
c00009b5:	75 09                	jne    c00009c0 <simple_strtoul+0xea>
c00009b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009bc:	75 2d                	jne    c00009eb <simple_strtoul+0x115>
c00009be:	eb 59                	jmp    c0000a19 <simple_strtoul+0x143>
c00009c0:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c3:	39 f7                	cmp    edi,esi
c00009c5:	73 f0                	jae    c00009b7 <simple_strtoul+0xe1>
c00009c7:	89 f8                	mov    eax,edi
c00009c9:	31 d2                	xor    edx,edx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 d8                	cmp    eax,ebx
c00009d1:	72 0e                	jb     c00009e1 <simple_strtoul+0x10b>
c00009d3:	0f af de             	imul   ebx,esi
c00009d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009dd:	01 fb                	add    ebx,edi
c00009df:	eb 07                	jmp    c00009e8 <simple_strtoul+0x112>
c00009e1:	bd 01 00 00 00       	mov    ebp,0x1
c00009e6:	31 db                	xor    ebx,ebx
c00009e8:	41                   	inc    ecx
c00009e9:	eb 9f                	jmp    c000098a <simple_strtoul+0xb4>
c00009eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009ee:	09 d8                	or     eax,ebx
c00009f0:	75 21                	jne    c0000a13 <simple_strtoul+0x13d>
c00009f2:	eb 11                	jmp    c0000a05 <simple_strtoul+0x12f>
c00009f4:	31 db                	xor    ebx,ebx
c00009f6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009fb:	74 22                	je     c0000a1f <simple_strtoul+0x149>
c00009fd:	31 ed                	xor    ebp,ebp
c00009ff:	31 db                	xor    ebx,ebx
c0000a01:	85 c9                	test   ecx,ecx
c0000a03:	74 0e                	je     c0000a13 <simple_strtoul+0x13d>
c0000a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a0d:	31 db                	xor    ebx,ebx
c0000a0f:	89 38                	mov    DWORD PTR [eax],edi
c0000a11:	eb 06                	jmp    c0000a19 <simple_strtoul+0x143>
c0000a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a17:	89 08                	mov    DWORD PTR [eax],ecx
c0000a19:	4d                   	dec    ebp
c0000a1a:	75 03                	jne    c0000a1f <simple_strtoul+0x149>
c0000a1c:	83 cb ff             	or     ebx,0xffffffff
c0000a1f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a24:	75 02                	jne    c0000a28 <simple_strtoul+0x152>
c0000a26:	f7 db                	neg    ebx
c0000a28:	83 c4 08             	add    esp,0x8
c0000a2b:	89 d8                	mov    eax,ebx
c0000a2d:	5b                   	pop    ebx
c0000a2e:	5e                   	pop    esi
c0000a2f:	5f                   	pop    edi
c0000a30:	5d                   	pop    ebp
c0000a31:	c3                   	ret    

c0000a32 <largebin_index>:
c0000a32:	89 c2                	mov    edx,eax
c0000a34:	c1 ea 08             	shr    edx,0x8
c0000a37:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a3d:	77 10                	ja     c0000a4f <largebin_index+0x1d>
c0000a3f:	0f bd d2             	bsr    edx,edx
c0000a42:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a45:	d3 e8                	shr    eax,cl
c0000a47:	83 e0 03             	and    eax,0x3
c0000a4a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a4e:	c3                   	ret    
c0000a4f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a54:	c3                   	ret    

c0000a55 <malloc_init_state>:
c0000a55:	8d 50 34             	lea    edx,[eax+0x34]
c0000a58:	53                   	push   ebx
c0000a59:	89 d1                	mov    ecx,edx
c0000a5b:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a61:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a64:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a67:	83 c2 08             	add    edx,0x8
c0000a6a:	39 da                	cmp    edx,ebx
c0000a6c:	75 f3                	jne    c0000a61 <malloc_init_state+0xc>
c0000a6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a70:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a7a:	83 e2 03             	and    edx,0x3
c0000a7d:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a87:	83 ca 48             	or     edx,0x48
c0000a8a:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a94:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa7:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aaa:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab4:	5b                   	pop    ebx
c0000ab5:	c3                   	ret    

c0000ab6 <malloc_consolidate>:
c0000ab6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab8:	85 d2                	test   edx,edx
c0000aba:	0f 84 d8 00 00 00    	je     c0000b98 <malloc_consolidate+0xe2>
c0000ac0:	55                   	push   ebp
c0000ac1:	83 e2 fd             	and    edx,0xfffffffd
c0000ac4:	57                   	push   edi
c0000ac5:	8d 78 34             	lea    edi,[eax+0x34]
c0000ac8:	56                   	push   esi
c0000ac9:	89 c5                	mov    ebp,eax
c0000acb:	53                   	push   ebx
c0000acc:	83 ec 10             	sub    esp,0x10
c0000acf:	89 10                	mov    DWORD PTR [eax],edx
c0000ad1:	c1 ea 03             	shr    edx,0x3
c0000ad4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad8:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000adc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae3:	85 d2                	test   edx,edx
c0000ae5:	0f 84 98 00 00 00    	je     c0000b83 <malloc_consolidate+0xcd>
c0000aeb:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af2:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af5:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000afc:	89 f9                	mov    ecx,edi
c0000afe:	83 e1 fe             	and    ecx,0xfffffffe
c0000b01:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b04:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b07:	83 e3 fc             	and    ebx,0xfffffffc
c0000b0a:	83 e7 01             	and    edi,0x1
c0000b0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b10:	75 14                	jne    c0000b26 <malloc_consolidate+0x70>
c0000b12:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b14:	29 fa                	sub    edx,edi
c0000b16:	01 f9                	add    ecx,edi
c0000b18:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b1b:	89 fb                	mov    ebx,edi
c0000b1d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b20:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b23:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b26:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b29:	74 40                	je     c0000b6b <malloc_consolidate+0xb5>
c0000b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b2e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b31:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b35:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b38:	83 e7 01             	and    edi,0x1
c0000b3b:	75 0e                	jne    c0000b4b <malloc_consolidate+0x95>
c0000b3d:	01 d9                	add    ecx,ebx
c0000b3f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b42:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b45:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b48:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b4b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b4e:	89 ce                	mov    esi,ecx
c0000b50:	83 ce 01             	or     esi,0x1
c0000b53:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b56:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b59:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b5c:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b60:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b63:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b66:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b69:	eb 0c                	jmp    c0000b77 <malloc_consolidate+0xc1>
c0000b6b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b6e:	83 c9 01             	or     ecx,0x1
c0000b71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b7b:	85 d2                	test   edx,edx
c0000b7d:	0f 85 6f ff ff ff    	jne    c0000af2 <malloc_consolidate+0x3c>
c0000b83:	83 c5 04             	add    ebp,0x4
c0000b86:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b8a:	0f 85 50 ff ff ff    	jne    c0000ae0 <malloc_consolidate+0x2a>
c0000b90:	83 c4 10             	add    esp,0x10
c0000b93:	5b                   	pop    ebx
c0000b94:	5e                   	pop    esi
c0000b95:	5f                   	pop    edi
c0000b96:	5d                   	pop    ebp
c0000b97:	c3                   	ret    
c0000b98:	e9 b8 fe ff ff       	jmp    c0000a55 <malloc_init_state>

c0000b9d <dlfree>:
c0000b9d:	57                   	push   edi
c0000b9e:	56                   	push   esi
c0000b9f:	53                   	push   ebx
c0000ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba4:	85 db                	test   ebx,ebx
c0000ba6:	0f 84 e2 00 00 00    	je     c0000c8e <dlfree+0xf1>
c0000bac:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000baf:	8b 0d 80 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024180
c0000bb5:	89 f0                	mov    eax,esi
c0000bb7:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bba:	83 e0 fc             	and    eax,0xfffffffc
c0000bbd:	39 c1                	cmp    ecx,eax
c0000bbf:	72 24                	jb     c0000be5 <dlfree+0x48>
c0000bc1:	c1 e8 03             	shr    eax,0x3
c0000bc4:	83 c9 03             	or     ecx,0x3
c0000bc7:	83 e8 02             	sub    eax,0x2
c0000bca:	89 0d 80 41 02 c0    	mov    DWORD PTR ds:0xc0024180,ecx
c0000bd0:	8b 0c 85 84 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbe7c]
c0000bd7:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd9:	89 14 85 84 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe7c],edx
c0000be0:	e9 a9 00 00 00       	jmp    c0000c8e <dlfree+0xf1>
c0000be5:	83 e6 02             	and    esi,0x2
c0000be8:	0f 85 a0 00 00 00    	jne    c0000c8e <dlfree+0xf1>
c0000bee:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf1:	83 c9 01             	or     ecx,0x1
c0000bf4:	89 0d 80 41 02 c0    	mov    DWORD PTR ds:0xc0024180,ecx
c0000bfa:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bfd:	83 e1 fc             	and    ecx,0xfffffffc
c0000c00:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c04:	75 13                	jne    c0000c19 <dlfree+0x7c>
c0000c06:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c09:	29 da                	sub    edx,ebx
c0000c0b:	01 d8                	add    eax,ebx
c0000c0d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c10:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c13:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c16:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c19:	39 35 ac 41 02 c0    	cmp    DWORD PTR ds:0xc00241ac,esi
c0000c1f:	74 40                	je     c0000c61 <dlfree+0xc4>
c0000c21:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c25:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c28:	80 e3 01             	and    bl,0x1
c0000c2b:	75 0e                	jne    c0000c3b <dlfree+0x9e>
c0000c2d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c30:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c33:	01 c8                	add    eax,ecx
c0000c35:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c38:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c3b:	8b 0d bc 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241bc
c0000c41:	c7 42 0c b4 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc00241b4
c0000c48:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c4b:	89 15 bc 41 02 c0    	mov    DWORD PTR ds:0xc00241bc,edx
c0000c51:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c54:	89 c1                	mov    ecx,eax
c0000c56:	83 c9 01             	or     ecx,0x1
c0000c59:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c5c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5f:	eb 10                	jmp    c0000c71 <dlfree+0xd4>
c0000c61:	01 c8                	add    eax,ecx
c0000c63:	89 c1                	mov    ecx,eax
c0000c65:	83 c9 01             	or     ecx,0x1
c0000c68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c6b:	89 15 ac 41 02 c0    	mov    DWORD PTR ds:0xc00241ac,edx
c0000c71:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c76:	76 16                	jbe    c0000c8e <dlfree+0xf1>
c0000c78:	f6 05 80 41 02 c0 02 	test   BYTE PTR ds:0xc0024180,0x2
c0000c7f:	74 0d                	je     c0000c8e <dlfree+0xf1>
c0000c81:	5b                   	pop    ebx
c0000c82:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0000c87:	5e                   	pop    esi
c0000c88:	5f                   	pop    edi
c0000c89:	e9 28 fe ff ff       	jmp    c0000ab6 <malloc_consolidate>
c0000c8e:	5b                   	pop    ebx
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	c3                   	ret    

c0000c92 <sYSMALLOc>:
c0000c92:	55                   	push   ebp
c0000c93:	57                   	push   edi
c0000c94:	56                   	push   esi
c0000c95:	53                   	push   ebx
c0000c96:	89 d3                	mov    ebx,edx
c0000c98:	83 ec 2c             	sub    esp,0x2c
c0000c9b:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ca1:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000ca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ca8:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000caf:	74 1f                	je     c0000cd0 <sYSMALLOc+0x3e>
c0000cb1:	89 d0                	mov    eax,edx
c0000cb3:	e8 fe fd ff ff       	call   c0000ab6 <malloc_consolidate>
c0000cb8:	83 ec 0c             	sub    esp,0xc
c0000cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cbf:	83 e8 07             	sub    eax,0x7
c0000cc2:	50                   	push   eax
c0000cc3:	e8 33 02 00 00       	call   c0000efb <dlmalloc>
c0000cc8:	83 c4 10             	add    esp,0x10
c0000ccb:	e9 23 02 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000cd0:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cd7:	83 c0 10             	add    eax,0x10
c0000cda:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ce0:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ce3:	01 c2                	add    edx,eax
c0000ce5:	83 e5 fc             	and    ebp,0xfffffffc
c0000ce8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf3:	74 02                	je     c0000cf7 <sYSMALLOc+0x65>
c0000cf5:	29 ea                	sub    edx,ebp
c0000cf7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000cfb:	f7 d9                	neg    ecx
c0000cfd:	21 ca                	and    edx,ecx
c0000cff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d07:	7f 07                	jg     c0000d10 <sYSMALLOc+0x7e>
c0000d09:	31 c0                	xor    eax,eax
c0000d0b:	e9 e3 01 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000d10:	83 ec 0c             	sub    esp,0xc
c0000d13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d17:	e8 1d b1 00 00       	call   c000be39 <sbrk>
c0000d1c:	83 c4 10             	add    esp,0x10
c0000d1f:	89 c6                	mov    esi,eax
c0000d21:	83 f8 ff             	cmp    eax,0xffffffff
c0000d24:	74 e3                	je     c0000d09 <sYSMALLOc+0x77>
c0000d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d2a:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d2d:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d33:	39 c2                	cmp    edx,eax
c0000d35:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d3b:	75 11                	jne    c0000d4e <sYSMALLOc+0xbc>
c0000d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d41:	01 e8                	add    eax,ebp
c0000d43:	83 c8 01             	or     eax,0x1
c0000d46:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d49:	e9 93 00 00 00       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000d4e:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d54:	a8 01                	test   al,0x1
c0000d56:	0f 84 73 01 00 00    	je     c0000ecf <sYSMALLOc+0x23d>
c0000d5c:	85 ed                	test   ebp,ebp
c0000d5e:	74 12                	je     c0000d72 <sYSMALLOc+0xe0>
c0000d60:	39 f2                	cmp    edx,esi
c0000d62:	76 0e                	jbe    c0000d72 <sYSMALLOc+0xe0>
c0000d64:	83 e0 fe             	and    eax,0xfffffffe
c0000d67:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d6d:	e9 5d 01 00 00       	jmp    c0000ecf <sYSMALLOc+0x23d>
c0000d72:	85 ed                	test   ebp,ebp
c0000d74:	74 0c                	je     c0000d82 <sYSMALLOc+0xf0>
c0000d76:	89 f0                	mov    eax,esi
c0000d78:	29 d0                	sub    eax,edx
c0000d7a:	01 c1                	add    ecx,eax
c0000d7c:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d82:	89 f2                	mov    edx,esi
c0000d84:	83 e2 07             	and    edx,0x7
c0000d87:	0f 84 b1 00 00 00    	je     c0000e3e <sYSMALLOc+0x1ac>
c0000d8d:	b8 08 00 00 00       	mov    eax,0x8
c0000d92:	29 d0                	sub    eax,edx
c0000d94:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000d97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d9f:	01 e8                	add    eax,ebp
c0000da1:	83 ec 0c             	sub    esp,0xc
c0000da4:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000da7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000dab:	01 f2                	add    edx,esi
c0000dad:	01 d1                	add    ecx,edx
c0000daf:	29 d0                	sub    eax,edx
c0000db1:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000db5:	01 c1                	add    ecx,eax
c0000db7:	51                   	push   ecx
c0000db8:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dbc:	e8 78 b0 00 00       	call   c000be39 <sbrk>
c0000dc1:	83 c4 10             	add    esp,0x10
c0000dc4:	83 f8 ff             	cmp    eax,0xffffffff
c0000dc7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dcb:	75 7c                	jne    c0000e49 <sYSMALLOc+0x1b7>
c0000dcd:	83 ec 0c             	sub    esp,0xc
c0000dd0:	6a 00                	push   0x0
c0000dd2:	e8 62 b0 00 00       	call   c000be39 <sbrk>
c0000dd7:	83 c4 10             	add    esp,0x10
c0000dda:	31 c9                	xor    ecx,ecx
c0000ddc:	83 f8 ff             	cmp    eax,0xffffffff
c0000ddf:	75 7e                	jne    c0000e5f <sYSMALLOc+0x1cd>
c0000de1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000de7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ded:	73 06                	jae    c0000df5 <sYSMALLOc+0x163>
c0000def:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfb:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e01:	73 06                	jae    c0000e09 <sYSMALLOc+0x177>
c0000e03:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e09:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e0f:	83 e2 fc             	and    edx,0xfffffffc
c0000e12:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e16:	0f 87 ed fe ff ff    	ja     c0000d09 <sYSMALLOc+0x77>
c0000e1c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e20:	29 fa                	sub    edx,edi
c0000e22:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e25:	83 ca 01             	or     edx,0x1
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	89 fb                	mov    ebx,edi
c0000e2d:	83 cb 01             	or     ebx,0x1
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e39:	e9 b5 00 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000e3e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e42:	31 c0                	xor    eax,eax
c0000e44:	e9 52 ff ff ff       	jmp    c0000d9b <sYSMALLOc+0x109>
c0000e49:	39 c6                	cmp    esi,eax
c0000e4b:	76 12                	jbe    c0000e5f <sYSMALLOc+0x1cd>
c0000e4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e51:	01 f0                	add    eax,esi
c0000e53:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e5a:	e9 7b ff ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000e5f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e63:	29 f0                	sub    eax,esi
c0000e65:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e68:	01 c8                	add    eax,ecx
c0000e6a:	83 c8 01             	or     eax,0x1
c0000e6d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e70:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e76:	85 ed                	test   ebp,ebp
c0000e78:	0f 84 63 ff ff ff    	je     c0000de1 <sYSMALLOc+0x14f>
c0000e7e:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e81:	83 e0 f8             	and    eax,0xfffffff8
c0000e84:	89 c2                	mov    edx,eax
c0000e86:	83 ca 01             	or     edx,0x1
c0000e89:	83 f8 0f             	cmp    eax,0xf
c0000e8c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e8f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e97:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e9f:	0f 86 3c ff ff ff    	jbe    c0000de1 <sYSMALLOc+0x14f>
c0000ea5:	83 ec 0c             	sub    esp,0xc
c0000ea8:	83 c7 08             	add    edi,0x8
c0000eab:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000eb1:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ebb:	57                   	push   edi
c0000ebc:	e8 dc fc ff ff       	call   c0000b9d <dlfree>
c0000ec1:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ec7:	83 c4 10             	add    esp,0x10
c0000eca:	e9 12 ff ff ff       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000ecf:	83 ec 0c             	sub    esp,0xc
c0000ed2:	6a 00                	push   0x0
c0000ed4:	e8 60 af 00 00       	call   c000be39 <sbrk>
c0000ed9:	89 c2                	mov    edx,eax
c0000edb:	29 f2                	sub    edx,esi
c0000edd:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000ee1:	83 c4 10             	add    esp,0x10
c0000ee4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000eea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000eee:	e9 e7 fe ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000ef3:	83 c4 2c             	add    esp,0x2c
c0000ef6:	5b                   	pop    ebx
c0000ef7:	5e                   	pop    esi
c0000ef8:	5f                   	pop    edi
c0000ef9:	5d                   	pop    ebp
c0000efa:	c3                   	ret    

c0000efb <dlmalloc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	83 ec 1c             	sub    esp,0x1c
c0000f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f06:	83 f8 df             	cmp    eax,0xffffffdf
c0000f09:	0f 87 70 03 00 00    	ja     c000127f <dlmalloc+0x384>
c0000f0f:	83 c0 0b             	add    eax,0xb
c0000f12:	be 10 00 00 00       	mov    esi,0x10
c0000f17:	83 f8 0f             	cmp    eax,0xf
c0000f1a:	76 05                	jbe    c0000f21 <dlmalloc+0x26>
c0000f1c:	83 e0 f8             	and    eax,0xfffffff8
c0000f1f:	89 c6                	mov    esi,eax
c0000f21:	8b 3d 80 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024180
c0000f27:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f2d:	75 17                	jne    c0000f46 <dlmalloc+0x4b>
c0000f2f:	85 ff                	test   edi,edi
c0000f31:	0f 85 05 03 00 00    	jne    c000123c <dlmalloc+0x341>
c0000f37:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0000f3c:	e8 75 fb ff ff       	call   c0000ab6 <malloc_consolidate>
c0000f41:	e9 f6 02 00 00       	jmp    c000123c <dlmalloc+0x341>
c0000f46:	39 f7                	cmp    edi,esi
c0000f48:	72 1f                	jb     c0000f69 <dlmalloc+0x6e>
c0000f4a:	89 f2                	mov    edx,esi
c0000f4c:	c1 ea 03             	shr    edx,0x3
c0000f4f:	83 ea 02             	sub    edx,0x2
c0000f52:	8b 04 95 84 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbe7c]
c0000f59:	85 c0                	test   eax,eax
c0000f5b:	74 0c                	je     c0000f69 <dlmalloc+0x6e>
c0000f5d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f60:	89 0c 95 84 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbe7c],ecx
c0000f67:	eb 30                	jmp    c0000f99 <dlmalloc+0x9e>
c0000f69:	89 f0                	mov    eax,esi
c0000f6b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f71:	77 2e                	ja     c0000fa1 <dlmalloc+0xa6>
c0000f73:	c1 e8 03             	shr    eax,0x3
c0000f76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7a:	8d 14 c5 b4 41 02 c0 	lea    edx,[eax*8-0x3ffdbe4c]
c0000f81:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f84:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f87:	39 c3                	cmp    ebx,eax
c0000f89:	74 2e                	je     c0000fb9 <dlmalloc+0xbe>
c0000f8b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f8e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f96:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f99:	83 c0 08             	add    eax,0x8
c0000f9c:	e9 e0 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0000fa1:	e8 8c fa ff ff       	call   c0000a32 <largebin_index>
c0000fa6:	83 e7 02             	and    edi,0x2
c0000fa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fad:	74 0a                	je     c0000fb9 <dlmalloc+0xbe>
c0000faf:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0000fb4:	e8 fd fa ff ff       	call   c0000ab6 <malloc_consolidate>
c0000fb9:	8d 46 10             	lea    eax,[esi+0x10]
c0000fbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc0:	8b 1d c0 41 02 c0    	mov    ebx,DWORD PTR ds:0xc00241c0
c0000fc6:	81 fb b4 41 02 c0    	cmp    ebx,0xc00241b4
c0000fcc:	0f 84 13 01 00 00    	je     c00010e5 <dlmalloc+0x1ea>
c0000fd2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd8:	83 e7 fc             	and    edi,0xfffffffc
c0000fdb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe1:	77 4c                	ja     c000102f <dlmalloc+0x134>
c0000fe3:	3d b4 41 02 c0       	cmp    eax,0xc00241b4
c0000fe8:	75 45                	jne    c000102f <dlmalloc+0x134>
c0000fea:	39 1d b0 41 02 c0    	cmp    DWORD PTR ds:0xc00241b0,ebx
c0000ff0:	75 3d                	jne    c000102f <dlmalloc+0x134>
c0000ff2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff6:	73 37                	jae    c000102f <dlmalloc+0x134>
c0000ff8:	89 fa                	mov    edx,edi
c0000ffa:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ffd:	29 f2                	sub    edx,esi
c0000fff:	83 ce 01             	or     esi,0x1
c0001002:	89 d1                	mov    ecx,edx
c0001004:	a3 bc 41 02 c0       	mov    ds:0xc00241bc,eax
c0001009:	83 c9 01             	or     ecx,0x1
c000100c:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c0001011:	a3 b0 41 02 c0       	mov    ds:0xc00241b0,eax
c0001016:	c7 40 08 b4 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc00241b4
c000101d:	c7 40 0c b4 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc00241b4
c0001024:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001027:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000102d:	eb 15                	jmp    c0001044 <dlmalloc+0x149>
c000102f:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c0001034:	39 fe                	cmp    esi,edi
c0001036:	c7 40 08 b4 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc00241b4
c000103d:	75 0d                	jne    c000104c <dlmalloc+0x151>
c000103f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001044:	8d 43 08             	lea    eax,[ebx+0x8]
c0001047:	e9 35 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000104c:	89 f8                	mov    eax,edi
c000104e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001054:	77 19                	ja     c000106f <dlmalloc+0x174>
c0001056:	c1 e8 03             	shr    eax,0x3
c0001059:	8d 14 00             	lea    edx,[eax+eax*1]
c000105c:	83 c2 0d             	add    edx,0xd
c000105f:	8d 2c 95 78 41 02 c0 	lea    ebp,[edx*4-0x3ffdbe88]
c0001066:	8b 14 95 80 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbe80]
c000106d:	eb 46                	jmp    c00010b5 <dlmalloc+0x1ba>
c000106f:	e8 be f9 ff ff       	call   c0000a32 <largebin_index>
c0001074:	8d 14 00             	lea    edx,[eax+eax*1]
c0001077:	83 c2 0d             	add    edx,0xd
c000107a:	8d 0c 95 80 41 02 c0 	lea    ecx,[edx*4-0x3ffdbe80]
c0001081:	8b 14 95 80 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbe80]
c0001088:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000108b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000108f:	89 d5                	mov    ebp,edx
c0001091:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001095:	74 1e                	je     c00010b5 <dlmalloc+0x1ba>
c0001097:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000109d:	77 12                	ja     c00010b1 <dlmalloc+0x1b6>
c000109f:	83 cf 01             	or     edi,0x1
c00010a2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a5:	76 05                	jbe    c00010ac <dlmalloc+0x1b1>
c00010a7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010aa:	eb f6                	jmp    c00010a2 <dlmalloc+0x1a7>
c00010ac:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010af:	eb 04                	jmp    c00010b5 <dlmalloc+0x1ba>
c00010b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b5:	89 c7                	mov    edi,eax
c00010b7:	88 c1                	mov    cl,al
c00010b9:	c1 ff 05             	sar    edi,0x5
c00010bc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c0:	bf 01 00 00 00       	mov    edi,0x1
c00010c5:	d3 e7                	shl    edi,cl
c00010c7:	89 f8                	mov    eax,edi
c00010c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cd:	09 04 bd b4 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbb4c],eax
c00010d4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010da:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010dd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e0:	e9 db fe ff ff       	jmp    c0000fc0 <dlmalloc+0xc5>
c00010e5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010eb:	76 78                	jbe    c0001165 <dlmalloc+0x26a>
c00010ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f1:	8d 04 c5 b4 41 02 c0 	lea    eax,[eax*8-0x3ffdbe4c]
c00010f8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010fe:	39 ca                	cmp    edx,ecx
c0001100:	74 63                	je     c0001165 <dlmalloc+0x26a>
c0001102:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001105:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001108:	83 e3 fc             	and    ebx,0xfffffffc
c000110b:	39 de                	cmp    esi,ebx
c000110d:	77 52                	ja     c0001161 <dlmalloc+0x266>
c000110f:	89 df                	mov    edi,ebx
c0001111:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001114:	29 f7                	sub    edi,esi
c0001116:	01 d3                	add    ebx,edx
c0001118:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111b:	83 ff 0f             	cmp    edi,0xf
c000111e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001121:	8d 42 08             	lea    eax,[edx+0x8]
c0001124:	77 09                	ja     c000112f <dlmalloc+0x234>
c0001126:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112a:	e9 52 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000112f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001132:	83 ce 01             	or     esi,0x1
c0001135:	89 0d bc 41 02 c0    	mov    DWORD PTR ds:0xc00241bc,ecx
c000113b:	89 0d c0 41 02 c0    	mov    DWORD PTR ds:0xc00241c0,ecx
c0001141:	c7 41 08 b4 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00241b4
c0001148:	c7 41 0c b4 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00241b4
c000114f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001152:	89 fa                	mov    edx,edi
c0001154:	83 ca 01             	or     edx,0x1
c0001157:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115a:	89 3b                	mov    DWORD PTR [ebx],edi
c000115c:	e9 20 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0001161:	89 c2                	mov    edx,eax
c0001163:	eb 99                	jmp    c00010fe <dlmalloc+0x203>
c0001165:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001169:	b8 01 00 00 00       	mov    eax,0x1
c000116e:	41                   	inc    ecx
c000116f:	89 cb                	mov    ebx,ecx
c0001171:	c1 eb 05             	shr    ebx,0x5
c0001174:	8d 14 cd ac 41 02 c0 	lea    edx,[ecx*8-0x3ffdbe54]
c000117b:	d3 e0                	shl    eax,cl
c000117d:	8b 3c 9d b4 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbb4c]
c0001184:	39 f8                	cmp    eax,edi
c0001186:	77 04                	ja     c000118c <dlmalloc+0x291>
c0001188:	85 c0                	test   eax,eax
c000118a:	75 26                	jne    c00011b2 <dlmalloc+0x2b7>
c000118c:	43                   	inc    ebx
c000118d:	83 fb 02             	cmp    ebx,0x2
c0001190:	0f 87 a6 00 00 00    	ja     c000123c <dlmalloc+0x341>
c0001196:	8b 3c 9d b4 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbb4c]
c000119d:	85 ff                	test   edi,edi
c000119f:	74 eb                	je     c000118c <dlmalloc+0x291>
c00011a1:	89 d8                	mov    eax,ebx
c00011a3:	c1 e0 06             	shl    eax,0x6
c00011a6:	8d 14 85 ac 41 02 c0 	lea    edx,[eax*4-0x3ffdbe54]
c00011ad:	b8 01 00 00 00       	mov    eax,0x1
c00011b2:	85 f8                	test   eax,edi
c00011b4:	75 07                	jne    c00011bd <dlmalloc+0x2c2>
c00011b6:	83 c2 08             	add    edx,0x8
c00011b9:	01 c0                	add    eax,eax
c00011bb:	eb f5                	jmp    c00011b2 <dlmalloc+0x2b7>
c00011bd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c0:	39 ca                	cmp    edx,ecx
c00011c2:	75 14                	jne    c00011d8 <dlmalloc+0x2dd>
c00011c4:	89 c1                	mov    ecx,eax
c00011c6:	83 c2 08             	add    edx,0x8
c00011c9:	f7 d1                	not    ecx
c00011cb:	21 cf                	and    edi,ecx
c00011cd:	01 c0                	add    eax,eax
c00011cf:	89 3c 9d b4 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbb4c],edi
c00011d6:	eb ac                	jmp    c0001184 <dlmalloc+0x289>
c00011d8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011db:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011de:	83 e0 fc             	and    eax,0xfffffffc
c00011e1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e4:	89 c3                	mov    ebx,eax
c00011e6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e9:	29 f3                	sub    ebx,esi
c00011eb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ee:	83 fb 0f             	cmp    ebx,0xf
c00011f1:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f4:	77 09                	ja     c00011ff <dlmalloc+0x304>
c00011f6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011fa:	e9 82 00 00 00       	jmp    c0001281 <dlmalloc+0x386>
c00011ff:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001202:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001208:	89 3d bc 41 02 c0    	mov    DWORD PTR ds:0xc00241bc,edi
c000120e:	89 3d c0 41 02 c0    	mov    DWORD PTR ds:0xc00241c0,edi
c0001214:	c7 47 08 b4 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc00241b4
c000121b:	c7 47 0c b4 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc00241b4
c0001222:	77 06                	ja     c000122a <dlmalloc+0x32f>
c0001224:	89 3d b0 41 02 c0    	mov    DWORD PTR ds:0xc00241b0,edi
c000122a:	83 ce 01             	or     esi,0x1
c000122d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001230:	89 d9                	mov    ecx,ebx
c0001232:	83 c9 01             	or     ecx,0x1
c0001235:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001238:	89 1a                	mov    DWORD PTR [edx],ebx
c000123a:	eb 45                	jmp    c0001281 <dlmalloc+0x386>
c000123c:	a1 ac 41 02 c0       	mov    eax,ds:0xc00241ac
c0001241:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001244:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001247:	83 e2 fc             	and    edx,0xfffffffc
c000124a:	39 d1                	cmp    ecx,edx
c000124c:	77 1e                	ja     c000126c <dlmalloc+0x371>
c000124e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001251:	89 f3                	mov    ebx,esi
c0001253:	29 f2                	sub    edx,esi
c0001255:	83 cb 01             	or     ebx,0x1
c0001258:	83 ca 01             	or     edx,0x1
c000125b:	89 0d ac 41 02 c0    	mov    DWORD PTR ds:0xc00241ac,ecx
c0001261:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001264:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001267:	e9 2d fd ff ff       	jmp    c0000f99 <dlmalloc+0x9e>
c000126c:	83 c4 1c             	add    esp,0x1c
c000126f:	89 f0                	mov    eax,esi
c0001271:	ba 80 41 02 c0       	mov    edx,0xc0024180
c0001276:	5b                   	pop    ebx
c0001277:	5e                   	pop    esi
c0001278:	5f                   	pop    edi
c0001279:	5d                   	pop    ebp
c000127a:	e9 13 fa ff ff       	jmp    c0000c92 <sYSMALLOc>
c000127f:	31 c0                	xor    eax,eax
c0001281:	83 c4 1c             	add    esp,0x1c
c0001284:	5b                   	pop    ebx
c0001285:	5e                   	pop    esi
c0001286:	5f                   	pop    edi
c0001287:	5d                   	pop    ebp
c0001288:	c3                   	ret    

c0001289 <iALLOc>:
c0001289:	55                   	push   ebp
c000128a:	89 c5                	mov    ebp,eax
c000128c:	57                   	push   edi
c000128d:	56                   	push   esi
c000128e:	53                   	push   ebx
c000128f:	83 ec 2c             	sub    esp,0x2c
c0001292:	83 3d 80 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024180,0x0
c0001299:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a5:	75 12                	jne    c00012b9 <iALLOc+0x30>
c00012a7:	b8 80 41 02 c0       	mov    eax,0xc0024180
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	e8 01 f8 ff ff       	call   c0000ab6 <malloc_consolidate>
c00012b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012be:	74 12                	je     c00012d2 <iALLOc+0x49>
c00012c0:	85 ed                	test   ebp,ebp
c00012c2:	0f 84 64 01 00 00    	je     c000142c <iALLOc+0x1a3>
c00012c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d0:	eb 33                	jmp    c0001305 <iALLOc+0x7c>
c00012d2:	85 ed                	test   ebp,ebp
c00012d4:	75 14                	jne    c00012ea <iALLOc+0x61>
c00012d6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012de:	83 c4 2c             	add    esp,0x2c
c00012e1:	5b                   	pop    ebx
c00012e2:	5e                   	pop    esi
c00012e3:	5f                   	pop    edi
c00012e4:	5d                   	pop    ebp
c00012e5:	e9 11 fc ff ff       	jmp    c0000efb <dlmalloc>
c00012ea:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f9:	83 f8 0f             	cmp    eax,0xf
c00012fc:	76 07                	jbe    c0001305 <iALLOc+0x7c>
c00012fe:	83 e0 f8             	and    eax,0xfffffff8
c0001301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001305:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130a:	75 09                	jne    c0001315 <iALLOc+0x8c>
c000130c:	89 d0                	mov    eax,edx
c000130e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001311:	31 f6                	xor    esi,esi
c0001313:	eb 3b                	jmp    c0001350 <iALLOc+0xc7>
c0001315:	8b 02                	mov    eax,DWORD PTR [edx]
c0001317:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000131f:	83 c0 0b             	add    eax,0xb
c0001322:	83 f8 0f             	cmp    eax,0xf
c0001325:	76 07                	jbe    c000132e <iALLOc+0xa5>
c0001327:	83 e0 f8             	and    eax,0xfffffff8
c000132a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000132e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001332:	0f af f5             	imul   esi,ebp
c0001335:	eb 25                	jmp    c000135c <iALLOc+0xd3>
c0001337:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001339:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000133c:	bb 10 00 00 00       	mov    ebx,0x10
c0001341:	83 f9 0f             	cmp    ecx,0xf
c0001344:	76 05                	jbe    c000134b <iALLOc+0xc2>
c0001346:	83 e1 f8             	and    ecx,0xfffffff8
c0001349:	89 cb                	mov    ebx,ecx
c000134b:	01 de                	add    esi,ebx
c000134d:	83 c0 04             	add    eax,0x4
c0001350:	39 c7                	cmp    edi,eax
c0001352:	75 e3                	jne    c0001337 <iALLOc+0xae>
c0001354:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000135c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001360:	83 ec 0c             	sub    esp,0xc
c0001363:	8b 1d d4 44 02 c0    	mov    ebx,DWORD PTR ds:0xc00244d4
c0001369:	c7 05 d4 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00244d4,0x0
c0001373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001377:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000137b:	50                   	push   eax
c000137c:	e8 7a fb ff ff       	call   c0000efb <dlmalloc>
c0001381:	83 c4 10             	add    esp,0x10
c0001384:	89 1d d4 44 02 c0    	mov    DWORD PTR ds:0xc00244d4,ebx
c000138a:	85 c0                	test   eax,eax
c000138c:	0f 84 92 00 00 00    	je     c0001424 <iALLOc+0x19b>
c0001392:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001395:	8d 78 f8             	lea    edi,[eax-0x8]
c0001398:	83 e3 fc             	and    ebx,0xfffffffc
c000139b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000139f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a4:	74 1e                	je     c00013c4 <iALLOc+0x13b>
c00013a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013aa:	89 d9                	mov    ecx,ebx
c00013ac:	52                   	push   edx
c00013ad:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b1:	83 e9 04             	sub    ecx,0x4
c00013b4:	51                   	push   ecx
c00013b5:	6a 00                	push   0x0
c00013b7:	50                   	push   eax
c00013b8:	e8 fd f2 ff ff       	call   c00006ba <memset>
c00013bd:	83 c4 10             	add    esp,0x10
c00013c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c9:	75 14                	jne    c00013df <iALLOc+0x156>
c00013cb:	8d 04 37             	lea    eax,[edi+esi*1]
c00013ce:	29 f3                	sub    ebx,esi
c00013d0:	83 cb 01             	or     ebx,0x1
c00013d3:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013dd:	89 f3                	mov    ebx,esi
c00013df:	31 c0                	xor    eax,eax
c00013e1:	4d                   	dec    ebp
c00013e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e9:	39 c5                	cmp    ebp,eax
c00013eb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ee:	74 2c                	je     c000141c <iALLOc+0x193>
c00013f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f4:	85 c9                	test   ecx,ecx
c00013f6:	75 15                	jne    c000140d <iALLOc+0x184>
c00013f8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013fb:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013fe:	b9 10 00 00 00       	mov    ecx,0x10
c0001403:	83 fe 0f             	cmp    esi,0xf
c0001406:	76 05                	jbe    c000140d <iALLOc+0x184>
c0001408:	83 e6 f8             	and    esi,0xfffffff8
c000140b:	89 f1                	mov    ecx,esi
c000140d:	89 ce                	mov    esi,ecx
c000140f:	29 cb                	sub    ebx,ecx
c0001411:	83 ce 01             	or     esi,0x1
c0001414:	40                   	inc    eax
c0001415:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001418:	01 cf                	add    edi,ecx
c000141a:	eb c6                	jmp    c00013e2 <iALLOc+0x159>
c000141c:	83 cb 01             	or     ebx,0x1
c000141f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001422:	eb 08                	jmp    c000142c <iALLOc+0x1a3>
c0001424:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000142c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001430:	83 c4 2c             	add    esp,0x2c
c0001433:	5b                   	pop    ebx
c0001434:	5e                   	pop    esi
c0001435:	5f                   	pop    edi
c0001436:	5d                   	pop    ebp
c0001437:	c3                   	ret    

c0001438 <dlrealloc>:
c0001438:	55                   	push   ebp
c0001439:	57                   	push   edi
c000143a:	56                   	push   esi
c000143b:	53                   	push   ebx
c000143c:	83 ec 1c             	sub    esp,0x1c
c000143f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001443:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001447:	85 db                	test   ebx,ebx
c0001449:	75 10                	jne    c000145b <dlrealloc+0x23>
c000144b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000144f:	83 c4 1c             	add    esp,0x1c
c0001452:	5b                   	pop    ebx
c0001453:	5e                   	pop    esi
c0001454:	5f                   	pop    edi
c0001455:	5d                   	pop    ebp
c0001456:	e9 a0 fa ff ff       	jmp    c0000efb <dlmalloc>
c000145b:	83 f8 df             	cmp    eax,0xffffffdf
c000145e:	76 07                	jbe    c0001467 <dlrealloc+0x2f>
c0001460:	31 db                	xor    ebx,ebx
c0001462:	e9 7c 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c0001467:	83 c0 0b             	add    eax,0xb
c000146a:	bf 10 00 00 00       	mov    edi,0x10
c000146f:	83 f8 0f             	cmp    eax,0xf
c0001472:	76 05                	jbe    c0001479 <dlrealloc+0x41>
c0001474:	83 e0 f8             	and    eax,0xfffffff8
c0001477:	89 c7                	mov    edi,eax
c0001479:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000147c:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000147f:	89 c6                	mov    esi,eax
c0001481:	83 e6 fc             	and    esi,0xfffffffc
c0001484:	a8 02                	test   al,0x2
c0001486:	75 d8                	jne    c0001460 <dlrealloc+0x28>
c0001488:	39 f7                	cmp    edi,esi
c000148a:	0f 86 15 01 00 00    	jbe    c00015a5 <dlrealloc+0x16d>
c0001490:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001494:	39 15 ac 41 02 c0    	cmp    DWORD PTR ds:0xc00241ac,edx
c000149a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149d:	75 33                	jne    c00014d2 <dlrealloc+0x9a>
c000149f:	83 e1 fc             	and    ecx,0xfffffffc
c00014a2:	01 f1                	add    ecx,esi
c00014a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a8:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014ab:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014af:	77 49                	ja     c00014fa <dlrealloc+0xc2>
c00014b1:	83 e0 01             	and    eax,0x1
c00014b4:	01 fd                	add    ebp,edi
c00014b6:	09 f8                	or     eax,edi
c00014b8:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014bf:	29 f8                	sub    eax,edi
c00014c1:	89 2d ac 41 02 c0    	mov    DWORD PTR ds:0xc00241ac,ebp
c00014c7:	83 c8 01             	or     eax,0x1
c00014ca:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014cd:	e9 11 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c00014d2:	89 c8                	mov    eax,ecx
c00014d4:	83 e0 fe             	and    eax,0xfffffffe
c00014d7:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014dc:	75 1c                	jne    c00014fa <dlrealloc+0xc2>
c00014de:	83 e1 fc             	and    ecx,0xfffffffc
c00014e1:	01 f1                	add    ecx,esi
c00014e3:	39 cf                	cmp    edi,ecx
c00014e5:	77 13                	ja     c00014fa <dlrealloc+0xc2>
c00014e7:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ea:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ed:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f0:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f3:	89 ce                	mov    esi,ecx
c00014f5:	e9 ab 00 00 00       	jmp    c00015a5 <dlrealloc+0x16d>
c00014fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014fe:	83 ec 0c             	sub    esp,0xc
c0001501:	8d 47 f9             	lea    eax,[edi-0x7]
c0001504:	50                   	push   eax
c0001505:	e8 f1 f9 ff ff       	call   c0000efb <dlmalloc>
c000150a:	83 c4 10             	add    esp,0x10
c000150d:	89 c1                	mov    ecx,eax
c000150f:	85 c0                	test   eax,eax
c0001511:	0f 84 49 ff ff ff    	je     c0001460 <dlrealloc+0x28>
c0001517:	8d 40 f8             	lea    eax,[eax-0x8]
c000151a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000151e:	39 c2                	cmp    edx,eax
c0001520:	75 0a                	jne    c000152c <dlrealloc+0xf4>
c0001522:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001525:	83 e0 fc             	and    eax,0xfffffffc
c0001528:	01 c6                	add    esi,eax
c000152a:	eb 79                	jmp    c00015a5 <dlrealloc+0x16d>
c000152c:	83 ee 04             	sub    esi,0x4
c000152f:	83 fe 27             	cmp    esi,0x27
c0001532:	76 16                	jbe    c000154a <dlrealloc+0x112>
c0001534:	50                   	push   eax
c0001535:	56                   	push   esi
c0001536:	53                   	push   ebx
c0001537:	51                   	push   ecx
c0001538:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000153c:	e8 43 f1 ff ff       	call   c0000684 <memcpy>
c0001541:	83 c4 10             	add    esp,0x10
c0001544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001548:	eb 43                	jmp    c000158d <dlrealloc+0x155>
c000154a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000154c:	83 fe 13             	cmp    esi,0x13
c000154f:	89 01                	mov    DWORD PTR [ecx],eax
c0001551:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001554:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001557:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000155d:	76 2e                	jbe    c000158d <dlrealloc+0x155>
c000155f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001562:	83 fe 1b             	cmp    esi,0x1b
c0001565:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000156b:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000156e:	76 1d                	jbe    c000158d <dlrealloc+0x155>
c0001570:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001573:	83 fe 23             	cmp    esi,0x23
c0001576:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001579:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000157c:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000157f:	76 0c                	jbe    c000158d <dlrealloc+0x155>
c0001581:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001584:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001587:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158a:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000158d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	53                   	push   ebx
c0001595:	e8 03 f6 ff ff       	call   c0000b9d <dlfree>
c000159a:	83 c4 10             	add    esp,0x10
c000159d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a1:	89 cb                	mov    ebx,ecx
c00015a3:	eb 3e                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015a5:	89 f2                	mov    edx,esi
c00015a7:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015aa:	29 fa                	sub    edx,edi
c00015ac:	83 e1 01             	and    ecx,0x1
c00015af:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b3:	83 fa 0f             	cmp    edx,0xf
c00015b6:	77 0b                	ja     c00015c3 <dlrealloc+0x18b>
c00015b8:	09 ce                	or     esi,ecx
c00015ba:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c1:	eb 20                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015c3:	01 fd                	add    ebp,edi
c00015c5:	83 ca 01             	or     edx,0x1
c00015c8:	09 cf                	or     edi,ecx
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d7:	83 c5 08             	add    ebp,0x8
c00015da:	55                   	push   ebp
c00015db:	e8 bd f5 ff ff       	call   c0000b9d <dlfree>
c00015e0:	83 c4 10             	add    esp,0x10
c00015e3:	83 c4 1c             	add    esp,0x1c
c00015e6:	89 d8                	mov    eax,ebx
c00015e8:	5b                   	pop    ebx
c00015e9:	5e                   	pop    esi
c00015ea:	5f                   	pop    edi
c00015eb:	5d                   	pop    ebp
c00015ec:	c3                   	ret    

c00015ed <dlmemalign>:
c00015ed:	55                   	push   ebp
c00015ee:	57                   	push   edi
c00015ef:	56                   	push   esi
c00015f0:	53                   	push   ebx
c00015f1:	83 ec 0c             	sub    esp,0xc
c00015f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015fc:	83 fa 08             	cmp    edx,0x8
c00015ff:	77 10                	ja     c0001611 <dlmemalign+0x24>
c0001601:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001605:	83 c4 0c             	add    esp,0xc
c0001608:	5b                   	pop    ebx
c0001609:	5e                   	pop    esi
c000160a:	5f                   	pop    edi
c000160b:	5d                   	pop    ebp
c000160c:	e9 ea f8 ff ff       	jmp    c0000efb <dlmalloc>
c0001611:	bf 10 00 00 00       	mov    edi,0x10
c0001616:	83 fa 0f             	cmp    edx,0xf
c0001619:	76 13                	jbe    c000162e <dlmemalign+0x41>
c000161b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000161e:	85 d1                	test   ecx,edx
c0001620:	75 04                	jne    c0001626 <dlmemalign+0x39>
c0001622:	89 d7                	mov    edi,edx
c0001624:	eb 08                	jmp    c000162e <dlmemalign+0x41>
c0001626:	39 d7                	cmp    edi,edx
c0001628:	73 04                	jae    c000162e <dlmemalign+0x41>
c000162a:	01 ff                	add    edi,edi
c000162c:	eb f8                	jmp    c0001626 <dlmemalign+0x39>
c000162e:	83 f8 df             	cmp    eax,0xffffffdf
c0001631:	76 07                	jbe    c000163a <dlmemalign+0x4d>
c0001633:	31 c0                	xor    eax,eax
c0001635:	e9 ce 00 00 00       	jmp    c0001708 <dlmemalign+0x11b>
c000163a:	83 c0 0b             	add    eax,0xb
c000163d:	bd 10 00 00 00       	mov    ebp,0x10
c0001642:	83 f8 0f             	cmp    eax,0xf
c0001645:	76 05                	jbe    c000164c <dlmemalign+0x5f>
c0001647:	83 e0 f8             	and    eax,0xfffffff8
c000164a:	89 c5                	mov    ebp,eax
c000164c:	83 ec 0c             	sub    esp,0xc
c000164f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001653:	50                   	push   eax
c0001654:	e8 a2 f8 ff ff       	call   c0000efb <dlmalloc>
c0001659:	83 c4 10             	add    esp,0x10
c000165c:	89 c1                	mov    ecx,eax
c000165e:	85 c0                	test   eax,eax
c0001660:	74 d1                	je     c0001633 <dlmemalign+0x46>
c0001662:	31 d2                	xor    edx,edx
c0001664:	8d 70 f8             	lea    esi,[eax-0x8]
c0001667:	f7 f7                	div    edi
c0001669:	85 d2                	test   edx,edx
c000166b:	74 62                	je     c00016cf <dlmemalign+0xe2>
c000166d:	89 f8                	mov    eax,edi
c000166f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001673:	f7 d8                	neg    eax
c0001675:	21 c3                	and    ebx,eax
c0001677:	83 eb 08             	sub    ebx,0x8
c000167a:	89 d8                	mov    eax,ebx
c000167c:	29 f0                	sub    eax,esi
c000167e:	83 f8 0f             	cmp    eax,0xf
c0001681:	77 02                	ja     c0001685 <dlmemalign+0x98>
c0001683:	01 fb                	add    ebx,edi
c0001685:	89 d8                	mov    eax,ebx
c0001687:	29 f0                	sub    eax,esi
c0001689:	89 c6                	mov    esi,eax
c000168b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000168e:	89 c2                	mov    edx,eax
c0001690:	83 e2 fc             	and    edx,0xfffffffc
c0001693:	29 f2                	sub    edx,esi
c0001695:	a8 02                	test   al,0x2
c0001697:	74 10                	je     c00016a9 <dlmemalign+0xbc>
c0001699:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000169c:	83 ca 02             	or     edx,0x2
c000169f:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a2:	89 33                	mov    DWORD PTR [ebx],esi
c00016a4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a7:	eb 5f                	jmp    c0001708 <dlmemalign+0x11b>
c00016a9:	89 d0                	mov    eax,edx
c00016ab:	83 ec 0c             	sub    esp,0xc
c00016ae:	83 c8 01             	or     eax,0x1
c00016b1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b4:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016bc:	83 e0 01             	and    eax,0x1
c00016bf:	09 f0                	or     eax,esi
c00016c1:	89 de                	mov    esi,ebx
c00016c3:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c6:	51                   	push   ecx
c00016c7:	e8 d1 f4 ff ff       	call   c0000b9d <dlfree>
c00016cc:	83 c4 10             	add    esp,0x10
c00016cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d2:	a8 02                	test   al,0x2
c00016d4:	75 2f                	jne    c0001705 <dlmemalign+0x118>
c00016d6:	83 e0 fc             	and    eax,0xfffffffc
c00016d9:	8d 55 10             	lea    edx,[ebp+0x10]
c00016dc:	39 c2                	cmp    edx,eax
c00016de:	73 25                	jae    c0001705 <dlmemalign+0x118>
c00016e0:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e3:	29 e8                	sub    eax,ebp
c00016e5:	83 c8 01             	or     eax,0x1
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016ee:	83 c2 08             	add    edx,0x8
c00016f1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f4:	83 e0 01             	and    eax,0x1
c00016f7:	09 c5                	or     ebp,eax
c00016f9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016fc:	52                   	push   edx
c00016fd:	e8 9b f4 ff ff       	call   c0000b9d <dlfree>
c0001702:	83 c4 10             	add    esp,0x10
c0001705:	8d 46 08             	lea    eax,[esi+0x8]
c0001708:	83 c4 0c             	add    esp,0xc
c000170b:	5b                   	pop    ebx
c000170c:	5e                   	pop    esi
c000170d:	5f                   	pop    edi
c000170e:	5d                   	pop    ebp
c000170f:	c3                   	ret    

c0001710 <dlcalloc>:
c0001710:	53                   	push   ebx
c0001711:	83 ec 14             	sub    esp,0x14
c0001714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001718:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000171d:	50                   	push   eax
c000171e:	e8 d8 f7 ff ff       	call   c0000efb <dlmalloc>
c0001723:	83 c4 10             	add    esp,0x10
c0001726:	89 c3                	mov    ebx,eax
c0001728:	85 c0                	test   eax,eax
c000172a:	74 77                	je     c00017a3 <dlcalloc+0x93>
c000172c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000172f:	89 d0                	mov    eax,edx
c0001731:	83 e0 fc             	and    eax,0xfffffffc
c0001734:	80 e2 02             	and    dl,0x2
c0001737:	75 5a                	jne    c0001793 <dlcalloc+0x83>
c0001739:	83 e8 04             	sub    eax,0x4
c000173c:	83 f8 27             	cmp    eax,0x27
c000173f:	76 03                	jbe    c0001744 <dlcalloc+0x34>
c0001741:	51                   	push   ecx
c0001742:	eb 53                	jmp    c0001797 <dlcalloc+0x87>
c0001744:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001751:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001758:	83 f8 13             	cmp    eax,0x13
c000175b:	76 46                	jbe    c00017a3 <dlcalloc+0x93>
c000175d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001764:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000176b:	83 f8 1b             	cmp    eax,0x1b
c000176e:	76 33                	jbe    c00017a3 <dlcalloc+0x93>
c0001770:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001777:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000177e:	83 f8 23             	cmp    eax,0x23
c0001781:	76 20                	jbe    c00017a3 <dlcalloc+0x93>
c0001783:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001791:	eb 10                	jmp    c00017a3 <dlcalloc+0x93>
c0001793:	83 e8 08             	sub    eax,0x8
c0001796:	52                   	push   edx
c0001797:	50                   	push   eax
c0001798:	6a 00                	push   0x0
c000179a:	53                   	push   ebx
c000179b:	e8 1a ef ff ff       	call   c00006ba <memset>
c00017a0:	83 c4 10             	add    esp,0x10
c00017a3:	83 c4 08             	add    esp,0x8
c00017a6:	89 d8                	mov    eax,ebx
c00017a8:	5b                   	pop    ebx
c00017a9:	c3                   	ret    

c00017aa <dlcfree>:
c00017aa:	e9 ee f3 ff ff       	jmp    c0000b9d <dlfree>

c00017af <dlindependent_calloc>:
c00017af:	83 ec 28             	sub    esp,0x28
c00017b2:	b9 03 00 00 00       	mov    ecx,0x3
c00017b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cb:	e8 b9 fa ff ff       	call   c0001289 <iALLOc>
c00017d0:	83 c4 2c             	add    esp,0x2c
c00017d3:	c3                   	ret    

c00017d4 <dlindependent_comalloc>:
c00017d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017dc:	31 c9                	xor    ecx,ecx
c00017de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e6:	e9 9e fa ff ff       	jmp    c0001289 <iALLOc>

c00017eb <dlvalloc>:
c00017eb:	83 ec 0c             	sub    esp,0xc
c00017ee:	83 3d 80 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024180,0x0
c00017f5:	75 0a                	jne    c0001801 <dlvalloc+0x16>
c00017f7:	b8 80 41 02 c0       	mov    eax,0xc0024180
c00017fc:	e8 b5 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001801:	50                   	push   eax
c0001802:	50                   	push   eax
c0001803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001807:	ff 35 dc 44 02 c0    	push   DWORD PTR ds:0xc00244dc
c000180d:	e8 db fd ff ff       	call   c00015ed <dlmemalign>
c0001812:	83 c4 1c             	add    esp,0x1c
c0001815:	c3                   	ret    

c0001816 <dlpvalloc>:
c0001816:	83 ec 0c             	sub    esp,0xc
c0001819:	83 3d 80 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024180,0x0
c0001820:	75 0a                	jne    c000182c <dlpvalloc+0x16>
c0001822:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0001827:	e8 8a f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c000182c:	52                   	push   edx
c000182d:	a1 dc 44 02 c0       	mov    eax,ds:0xc00244dc
c0001832:	52                   	push   edx
c0001833:	89 c1                	mov    ecx,eax
c0001835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001839:	f7 d9                	neg    ecx
c000183b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000183f:	21 ca                	and    edx,ecx
c0001841:	52                   	push   edx
c0001842:	50                   	push   eax
c0001843:	e8 a5 fd ff ff       	call   c00015ed <dlmemalign>
c0001848:	83 c4 1c             	add    esp,0x1c
c000184b:	c3                   	ret    

c000184c <dlmalloc_trim>:
c000184c:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0001851:	e8 60 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001856:	31 c0                	xor    eax,eax
c0001858:	c3                   	ret    

c0001859 <dlmalloc_usable_size>:
c0001859:	53                   	push   ebx
c000185a:	31 c0                	xor    eax,eax
c000185c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001860:	85 c9                	test   ecx,ecx
c0001862:	74 24                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001864:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001867:	f6 c2 02             	test   dl,0x2
c000186a:	74 08                	je     c0001874 <dlmalloc_usable_size+0x1b>
c000186c:	83 e2 fc             	and    edx,0xfffffffc
c000186f:	8d 42 f8             	lea    eax,[edx-0x8]
c0001872:	eb 14                	jmp    c0001888 <dlmalloc_usable_size+0x2f>
c0001874:	89 d3                	mov    ebx,edx
c0001876:	31 c0                	xor    eax,eax
c0001878:	83 e3 fe             	and    ebx,0xfffffffe
c000187b:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001880:	74 06                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001882:	83 e2 fc             	and    edx,0xfffffffc
c0001885:	8d 42 fc             	lea    eax,[edx-0x4]
c0001888:	5b                   	pop    ebx
c0001889:	c3                   	ret    

c000188a <dlmallinfo>:
c000188a:	55                   	push   ebp
c000188b:	57                   	push   edi
c000188c:	56                   	push   esi
c000188d:	53                   	push   ebx
c000188e:	83 ec 08             	sub    esp,0x8
c0001891:	83 3d ac 41 02 c0 00 	cmp    DWORD PTR ds:0xc00241ac,0x0
c0001898:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189c:	75 0a                	jne    c00018a8 <dlmallinfo+0x1e>
c000189e:	b8 80 41 02 c0       	mov    eax,0xc0024180
c00018a3:	e8 0e f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c00018a8:	a1 ac 41 02 c0       	mov    eax,ds:0xc00241ac
c00018ad:	31 ed                	xor    ebp,ebp
c00018af:	31 c9                	xor    ecx,ecx
c00018b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b4:	83 e0 fc             	and    eax,0xfffffffc
c00018b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018bb:	31 c0                	xor    eax,eax
c00018bd:	8b 14 85 84 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbe7c]
c00018c4:	85 d2                	test   edx,edx
c00018c6:	74 0e                	je     c00018d6 <dlmallinfo+0x4c>
c00018c8:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018cb:	45                   	inc    ebp
c00018cc:	83 e6 fc             	and    esi,0xfffffffc
c00018cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d2:	01 f1                	add    ecx,esi
c00018d4:	eb ee                	jmp    c00018c4 <dlmallinfo+0x3a>
c00018d6:	40                   	inc    eax
c00018d7:	83 f8 0a             	cmp    eax,0xa
c00018da:	75 e1                	jne    c00018bd <dlmallinfo+0x33>
c00018dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ea:	b8 b4 41 02 c0       	mov    eax,0xc00241b4
c00018ef:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f2:	39 f0                	cmp    eax,esi
c00018f4:	74 10                	je     c0001906 <dlmallinfo+0x7c>
c00018f6:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f9:	ff 04 24             	inc    DWORD PTR [esp]
c00018fc:	83 e7 fc             	and    edi,0xfffffffc
c00018ff:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001902:	01 fa                	add    edx,edi
c0001904:	eb ec                	jmp    c00018f2 <dlmallinfo+0x68>
c0001906:	83 c0 08             	add    eax,0x8
c0001909:	3d ac 44 02 c0       	cmp    eax,0xc00244ac
c000190e:	75 df                	jne    c00018ef <dlmallinfo+0x65>
c0001910:	a1 e8 44 02 c0       	mov    eax,ds:0xc00244e8
c0001915:	8b 35 d0 44 02 c0    	mov    esi,DWORD PTR ds:0xc00244d0
c000191b:	89 03                	mov    DWORD PTR [ebx],eax
c000191d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001920:	29 d0                	sub    eax,edx
c0001922:	8b 35 e4 44 02 c0    	mov    esi,DWORD PTR ds:0xc00244e4
c0001928:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000192b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000192e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001931:	8b 35 f4 44 02 c0    	mov    esi,DWORD PTR ds:0xc00244f4
c0001937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000193b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000193e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001941:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001944:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001947:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000194a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000194d:	83 c4 08             	add    esp,0x8
c0001950:	89 d8                	mov    eax,ebx
c0001952:	5b                   	pop    ebx
c0001953:	5e                   	pop    esi
c0001954:	5f                   	pop    edi
c0001955:	5d                   	pop    ebp
c0001956:	c2 04 00             	ret    0x4

c0001959 <dlmalloc_stats>:
c0001959:	83 ec 30             	sub    esp,0x30
c000195c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001960:	50                   	push   eax
c0001961:	e8 24 ff ff ff       	call   c000188a <dlmallinfo>
c0001966:	83 c4 30             	add    esp,0x30
c0001969:	c3                   	ret    

c000196a <dlmallopt>:
c000196a:	56                   	push   esi
c000196b:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0001970:	53                   	push   ebx
c0001971:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001979:	e8 38 f1 ff ff       	call   c0000ab6 <malloc_consolidate>
c000197e:	8d 46 04             	lea    eax,[esi+0x4]
c0001981:	83 f8 05             	cmp    eax,0x5
c0001984:	77 67                	ja     c00019ed <dlmallopt+0x83>
c0001986:	ff 24 85 e4 02 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfd1c]
c000198d:	83 fb 50             	cmp    ebx,0x50
c0001990:	77 5b                	ja     c00019ed <dlmallopt+0x83>
c0001992:	ba 08 00 00 00       	mov    edx,0x8
c0001997:	85 db                	test   ebx,ebx
c0001999:	74 12                	je     c00019ad <dlmallopt+0x43>
c000199b:	83 c3 0b             	add    ebx,0xb
c000199e:	ba 10 00 00 00       	mov    edx,0x10
c00019a3:	83 fb 0f             	cmp    ebx,0xf
c00019a6:	76 05                	jbe    c00019ad <dlmallopt+0x43>
c00019a8:	89 da                	mov    edx,ebx
c00019aa:	83 e2 f8             	and    edx,0xfffffff8
c00019ad:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c00019b2:	83 e0 03             	and    eax,0x3
c00019b5:	09 d0                	or     eax,edx
c00019b7:	a3 80 41 02 c0       	mov    ds:0xc0024180,eax
c00019bc:	eb 31                	jmp    c00019ef <dlmallopt+0x85>
c00019be:	89 1d c4 44 02 c0    	mov    DWORD PTR ds:0xc00244c4,ebx
c00019c4:	eb 06                	jmp    c00019cc <dlmallopt+0x62>
c00019c6:	89 1d c8 44 02 c0    	mov    DWORD PTR ds:0xc00244c8,ebx
c00019cc:	be 01 00 00 00       	mov    esi,0x1
c00019d1:	eb 1c                	jmp    c00019ef <dlmallopt+0x85>
c00019d3:	89 1d cc 44 02 c0    	mov    DWORD PTR ds:0xc00244cc,ebx
c00019d9:	eb f1                	jmp    c00019cc <dlmallopt+0x62>
c00019db:	31 f6                	xor    esi,esi
c00019dd:	85 db                	test   ebx,ebx
c00019df:	75 0e                	jne    c00019ef <dlmallopt+0x85>
c00019e1:	c7 05 d4 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00244d4,0x0
c00019eb:	eb df                	jmp    c00019cc <dlmallopt+0x62>
c00019ed:	31 f6                	xor    esi,esi
c00019ef:	5b                   	pop    ebx
c00019f0:	89 f0                	mov    eax,esi
c00019f2:	5e                   	pop    esi
c00019f3:	c3                   	ret    

c00019f4 <disk_status>:
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <disk_initialize>:
c00019f7:	31 c0                	xor    eax,eax
c00019f9:	c3                   	ret    

c00019fa <disk_read>:
c00019fa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019ff:	0f b6 04 85 a0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda560]
c0001a07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0b:	e9 96 8c 01 00       	jmp    c001a6a6 <fatWrapperReadDisk>

c0001a10 <disk_write>:
c0001a10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a15:	0f b6 04 85 a0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda560]
c0001a1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a21:	e9 cb 8c 01 00       	jmp    c001a6f1 <fatWrapperWriteDisk>

c0001a26 <disk_ioctl>:
c0001a26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a2f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a34:	0f b6 04 85 a0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda560]
c0001a3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a40:	e9 f7 8c 01 00       	jmp    c001a73c <fatWrapperIoctl>

c0001a45 <ld_word>:
c0001a45:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a49:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a4c:	c1 e2 08             	shl    edx,0x8
c0001a4f:	09 d0                	or     eax,edx
c0001a51:	c3                   	ret    

c0001a52 <ld_dword>:
c0001a52:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a56:	89 d1                	mov    ecx,edx
c0001a58:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a5c:	c1 e1 08             	shl    ecx,0x8
c0001a5f:	09 ca                	or     edx,ecx
c0001a61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a64:	c1 e2 08             	shl    edx,0x8
c0001a67:	09 d0                	or     eax,edx
c0001a69:	c3                   	ret    

c0001a6a <ld_qword>:
c0001a6a:	57                   	push   edi
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	31 db                	xor    ebx,ebx
c0001a6f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a72:	89 df                	mov    edi,ebx
c0001a74:	89 ce                	mov    esi,ecx
c0001a76:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a7e:	c1 e6 08             	shl    esi,0x8
c0001a81:	09 f2                	or     edx,esi
c0001a83:	89 d6                	mov    esi,edx
c0001a85:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a89:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a8d:	c1 e6 08             	shl    esi,0x8
c0001a90:	09 f2                	or     edx,esi
c0001a92:	89 d6                	mov    esi,edx
c0001a94:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a98:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a9c:	c1 e6 08             	shl    esi,0x8
c0001a9f:	89 fb                	mov    ebx,edi
c0001aa1:	09 f2                	or     edx,esi
c0001aa3:	89 d1                	mov    ecx,edx
c0001aa5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa9:	89 da                	mov    edx,ebx
c0001aab:	5b                   	pop    ebx
c0001aac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aaf:	c1 e1 08             	shl    ecx,0x8
c0001ab2:	5e                   	pop    esi
c0001ab3:	09 c8                	or     eax,ecx
c0001ab5:	5f                   	pop    edi
c0001ab6:	c3                   	ret    

c0001ab7 <st_word>:
c0001ab7:	66 89 10             	mov    WORD PTR [eax],dx
c0001aba:	c3                   	ret    

c0001abb <st_dword>:
c0001abb:	89 10                	mov    DWORD PTR [eax],edx
c0001abd:	c3                   	ret    

c0001abe <st_qword>:
c0001abe:	89 10                	mov    DWORD PTR [eax],edx
c0001ac0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac3:	c3                   	ret    

c0001ac4 <mem_cpy>:
c0001ac4:	85 c9                	test   ecx,ecx
c0001ac6:	74 10                	je     c0001ad8 <mem_cpy+0x14>
c0001ac8:	57                   	push   edi
c0001ac9:	01 c1                	add    ecx,eax
c0001acb:	56                   	push   esi
c0001acc:	89 c7                	mov    edi,eax
c0001ace:	89 d6                	mov    esi,edx
c0001ad0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad1:	39 f9                	cmp    ecx,edi
c0001ad3:	75 fb                	jne    c0001ad0 <mem_cpy+0xc>
c0001ad5:	5e                   	pop    esi
c0001ad6:	5f                   	pop    edi
c0001ad7:	c3                   	ret    
c0001ad8:	c3                   	ret    

c0001ad9 <mem_set>:
c0001ad9:	01 c1                	add    ecx,eax
c0001adb:	40                   	inc    eax
c0001adc:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001adf:	39 c8                	cmp    eax,ecx
c0001ae1:	75 f8                	jne    c0001adb <mem_set+0x2>
c0001ae3:	c3                   	ret    

c0001ae4 <mem_cmp>:
c0001ae4:	57                   	push   edi
c0001ae5:	56                   	push   esi
c0001ae6:	89 c6                	mov    esi,eax
c0001ae8:	53                   	push   ebx
c0001ae9:	46                   	inc    esi
c0001aea:	42                   	inc    edx
c0001aeb:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aef:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af3:	29 fb                	sub    ebx,edi
c0001af5:	89 cf                	mov    edi,ecx
c0001af7:	29 f7                	sub    edi,esi
c0001af9:	01 c7                	add    edi,eax
c0001afb:	74 04                	je     c0001b01 <mem_cmp+0x1d>
c0001afd:	85 db                	test   ebx,ebx
c0001aff:	74 e8                	je     c0001ae9 <mem_cmp+0x5>
c0001b01:	89 d8                	mov    eax,ebx
c0001b03:	5b                   	pop    ebx
c0001b04:	5e                   	pop    esi
c0001b05:	5f                   	pop    edi
c0001b06:	c3                   	ret    

c0001b07 <chk_chr>:
c0001b07:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b0d:	74 07                	je     c0001b16 <chk_chr+0xf>
c0001b0f:	39 d1                	cmp    ecx,edx
c0001b11:	74 03                	je     c0001b16 <chk_chr+0xf>
c0001b13:	40                   	inc    eax
c0001b14:	eb f1                	jmp    c0001b07 <chk_chr>
c0001b16:	89 c8                	mov    eax,ecx
c0001b18:	c3                   	ret    

c0001b19 <dbc_1st>:
c0001b19:	31 c0                	xor    eax,eax
c0001b1b:	c3                   	ret    

c0001b1c <dbc_2nd>:
c0001b1c:	31 c0                	xor    eax,eax
c0001b1e:	c3                   	ret    

c0001b1f <tchar2uni>:
c0001b1f:	57                   	push   edi
c0001b20:	89 c7                	mov    edi,eax
c0001b22:	56                   	push   esi
c0001b23:	53                   	push   ebx
c0001b24:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b26:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b28:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b2b:	84 c9                	test   cl,cl
c0001b2d:	78 0a                	js     c0001b39 <tchar2uni+0x1a>
c0001b2f:	0f b6 d1             	movzx  edx,cl
c0001b32:	89 f3                	mov    ebx,esi
c0001b34:	e9 9f 00 00 00       	jmp    c0001bd8 <tchar2uni+0xb9>
c0001b39:	88 ca                	mov    dl,cl
c0001b3b:	83 e2 e0             	and    edx,0xffffffe0
c0001b3e:	80 fa c0             	cmp    dl,0xc0
c0001b41:	75 0c                	jne    c0001b4f <tchar2uni+0x30>
c0001b43:	89 ca                	mov    edx,ecx
c0001b45:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4a:	83 e2 1f             	and    edx,0x1f
c0001b4d:	eb 2e                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b4f:	88 ca                	mov    dl,cl
c0001b51:	83 e2 f0             	and    edx,0xfffffff0
c0001b54:	80 fa e0             	cmp    dl,0xe0
c0001b57:	75 0c                	jne    c0001b65 <tchar2uni+0x46>
c0001b59:	89 ca                	mov    edx,ecx
c0001b5b:	b9 02 00 00 00       	mov    ecx,0x2
c0001b60:	83 e2 0f             	and    edx,0xf
c0001b63:	eb 18                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b65:	88 ca                	mov    dl,cl
c0001b67:	83 e2 f8             	and    edx,0xfffffff8
c0001b6a:	88 d0                	mov    al,dl
c0001b6c:	83 ca ff             	or     edx,0xffffffff
c0001b6f:	3c f0                	cmp    al,0xf0
c0001b71:	75 6c                	jne    c0001bdf <tchar2uni+0xc0>
c0001b73:	89 ca                	mov    edx,ecx
c0001b75:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7a:	83 e2 07             	and    edx,0x7
c0001b7d:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b81:	46                   	inc    esi
c0001b82:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b85:	88 c8                	mov    al,cl
c0001b87:	83 e0 c0             	and    eax,0xffffffc0
c0001b8a:	3c 80                	cmp    al,0x80
c0001b8c:	75 4e                	jne    c0001bdc <tchar2uni+0xbd>
c0001b8e:	c1 e2 06             	shl    edx,0x6
c0001b91:	83 e1 3f             	and    ecx,0x3f
c0001b94:	09 ca                	or     edx,ecx
c0001b96:	39 de                	cmp    esi,ebx
c0001b98:	75 e7                	jne    c0001b81 <tchar2uni+0x62>
c0001b9a:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ba6:	76 34                	jbe    c0001bdc <tchar2uni+0xbd>
c0001ba8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb1:	77 29                	ja     c0001bdc <tchar2uni+0xbd>
c0001bb3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb9:	76 1d                	jbe    c0001bd8 <tchar2uni+0xb9>
c0001bbb:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc1:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc7:	c1 e1 06             	shl    ecx,0x6
c0001bca:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd0:	09 ca                	or     edx,ecx
c0001bd2:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd8:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bda:	eb 03                	jmp    c0001bdf <tchar2uni+0xc0>
c0001bdc:	83 ca ff             	or     edx,0xffffffff
c0001bdf:	5b                   	pop    ebx
c0001be0:	89 d0                	mov    eax,edx
c0001be2:	5e                   	pop    esi
c0001be3:	5f                   	pop    edi
c0001be4:	c3                   	ret    

c0001be5 <put_utf>:
c0001be5:	53                   	push   ebx
c0001be6:	83 f8 7f             	cmp    eax,0x7f
c0001be9:	89 c3                	mov    ebx,eax
c0001beb:	b0 00                	mov    al,0x0
c0001bed:	77 11                	ja     c0001c00 <put_utf+0x1b>
c0001bef:	85 c9                	test   ecx,ecx
c0001bf1:	0f 84 e5 00 00 00    	je     c0001cdc <put_utf+0xf7>
c0001bf7:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf9:	b0 01                	mov    al,0x1
c0001bfb:	e9 dc 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c00:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c06:	77 23                	ja     c0001c2b <put_utf+0x46>
c0001c08:	83 f9 01             	cmp    ecx,0x1
c0001c0b:	0f 86 cb 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c11:	89 d8                	mov    eax,ebx
c0001c13:	83 e3 3f             	and    ebx,0x3f
c0001c16:	c1 e8 06             	shr    eax,0x6
c0001c19:	83 cb 80             	or     ebx,0xffffff80
c0001c1c:	83 c8 c0             	or     eax,0xffffffc0
c0001c1f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	b0 02                	mov    al,0x2
c0001c26:	e9 b1 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c2b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c31:	77 40                	ja     c0001c73 <put_utf+0x8e>
c0001c33:	83 f9 02             	cmp    ecx,0x2
c0001c36:	0f 86 a0 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c3c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c42:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c48:	0f 86 8e 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c4e:	89 d8                	mov    eax,ebx
c0001c50:	c1 e8 0c             	shr    eax,0xc
c0001c53:	83 c8 e0             	or     eax,0xffffffe0
c0001c56:	88 02                	mov    BYTE PTR [edx],al
c0001c58:	89 d8                	mov    eax,ebx
c0001c5a:	c1 e8 06             	shr    eax,0x6
c0001c5d:	83 e3 3f             	and    ebx,0x3f
c0001c60:	83 e0 3f             	and    eax,0x3f
c0001c63:	83 cb 80             	or     ebx,0xffffff80
c0001c66:	83 c8 80             	or     eax,0xffffff80
c0001c69:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c6f:	b0 03                	mov    al,0x3
c0001c71:	eb 69                	jmp    c0001cdc <put_utf+0xf7>
c0001c73:	83 f9 03             	cmp    ecx,0x3
c0001c76:	76 64                	jbe    c0001cdc <put_utf+0xf7>
c0001c78:	89 d9                	mov    ecx,ebx
c0001c7a:	66 31 c9             	xor    cx,cx
c0001c7d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c83:	0f b7 c3             	movzx  eax,bx
c0001c86:	c1 e9 06             	shr    ecx,0x6
c0001c89:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8f:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c95:	77 43                	ja     c0001cda <put_utf+0xf5>
c0001c97:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9d:	77 3b                	ja     c0001cda <put_utf+0xf5>
c0001c9f:	09 cb                	or     ebx,ecx
c0001ca1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca7:	89 d8                	mov    eax,ebx
c0001ca9:	c1 e8 12             	shr    eax,0x12
c0001cac:	83 c8 f0             	or     eax,0xfffffff0
c0001caf:	88 02                	mov    BYTE PTR [edx],al
c0001cb1:	89 d8                	mov    eax,ebx
c0001cb3:	c1 e8 0c             	shr    eax,0xc
c0001cb6:	83 e0 3f             	and    eax,0x3f
c0001cb9:	83 c8 80             	or     eax,0xffffff80
c0001cbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cbf:	89 d8                	mov    eax,ebx
c0001cc1:	c1 e8 06             	shr    eax,0x6
c0001cc4:	83 e3 3f             	and    ebx,0x3f
c0001cc7:	83 e0 3f             	and    eax,0x3f
c0001cca:	83 cb 80             	or     ebx,0xffffff80
c0001ccd:	83 c8 80             	or     eax,0xffffff80
c0001cd0:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd3:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd6:	b0 04                	mov    al,0x4
c0001cd8:	eb 02                	jmp    c0001cdc <put_utf+0xf7>
c0001cda:	31 c0                	xor    eax,eax
c0001cdc:	5b                   	pop    ebx
c0001cdd:	c3                   	ret    

c0001cde <clst2sect>:
c0001cde:	89 c1                	mov    ecx,eax
c0001ce0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce3:	83 ea 02             	sub    edx,0x2
c0001ce6:	83 e8 02             	sub    eax,0x2
c0001ce9:	39 d0                	cmp    eax,edx
c0001ceb:	76 0d                	jbe    c0001cfa <clst2sect+0x1c>
c0001ced:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf1:	f7 e2                	mul    edx
c0001cf3:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf6:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf9:	c3                   	ret    
c0001cfa:	31 c0                	xor    eax,eax
c0001cfc:	31 d2                	xor    edx,edx
c0001cfe:	c3                   	ret    

c0001cff <clmt_clust>:
c0001cff:	57                   	push   edi
c0001d00:	89 cf                	mov    edi,ecx
c0001d02:	56                   	push   esi
c0001d03:	89 d6                	mov    esi,edx
c0001d05:	53                   	push   ebx
c0001d06:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	c1 ef 09             	shr    edi,0x9
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d17:	89 f9                	mov    ecx,edi
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	31 ff                	xor    edi,edi
c0001d1f:	57                   	push   edi
c0001d20:	56                   	push   esi
c0001d21:	51                   	push   ecx
c0001d22:	52                   	push   edx
c0001d23:	e8 a4 d6 01 00       	call   c001f3cc <__udivdi3>
c0001d28:	83 c4 10             	add    esp,0x10
c0001d2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d2d:	85 d2                	test   edx,edx
c0001d2f:	74 10                	je     c0001d41 <clmt_clust+0x42>
c0001d31:	39 d0                	cmp    eax,edx
c0001d33:	72 07                	jb     c0001d3c <clmt_clust+0x3d>
c0001d35:	29 d0                	sub    eax,edx
c0001d37:	83 c3 08             	add    ebx,0x8
c0001d3a:	eb ef                	jmp    c0001d2b <clmt_clust+0x2c>
c0001d3c:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d3f:	89 c2                	mov    edx,eax
c0001d41:	5b                   	pop    ebx
c0001d42:	89 d0                	mov    eax,edx
c0001d44:	5e                   	pop    esi
c0001d45:	5f                   	pop    edi
c0001d46:	c3                   	ret    

c0001d47 <pick_lfn>:
c0001d47:	55                   	push   ebp
c0001d48:	57                   	push   edi
c0001d49:	56                   	push   esi
c0001d4a:	89 d6                	mov    esi,edx
c0001d4c:	53                   	push   ebx
c0001d4d:	89 c3                	mov    ebx,eax
c0001d4f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d52:	e8 ee fc ff ff       	call   c0001a45 <ld_word>
c0001d57:	66 85 c0             	test   ax,ax
c0001d5a:	74 04                	je     c0001d60 <pick_lfn+0x19>
c0001d5c:	31 c0                	xor    eax,eax
c0001d5e:	eb 5c                	jmp    c0001dbc <pick_lfn+0x75>
c0001d60:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d63:	83 e1 bf             	and    ecx,0xffffffbf
c0001d66:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6b:	49                   	dec    ecx
c0001d6c:	31 ff                	xor    edi,edi
c0001d6e:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d71:	0f b6 87 00 04 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfc00]
c0001d78:	01 f0                	add    eax,esi
c0001d7a:	e8 c6 fc ff ff       	call   c0001a45 <ld_word>
c0001d7f:	66 85 ed             	test   bp,bp
c0001d82:	74 11                	je     c0001d95 <pick_lfn+0x4e>
c0001d84:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8a:	77 d0                	ja     c0001d5c <pick_lfn+0x15>
c0001d8c:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d90:	89 c5                	mov    ebp,eax
c0001d92:	41                   	inc    ecx
c0001d93:	eb 04                	jmp    c0001d99 <pick_lfn+0x52>
c0001d95:	66 40                	inc    ax
c0001d97:	75 c3                	jne    c0001d5c <pick_lfn+0x15>
c0001d99:	47                   	inc    edi
c0001d9a:	83 ff 0d             	cmp    edi,0xd
c0001d9d:	75 d2                	jne    c0001d71 <pick_lfn+0x2a>
c0001d9f:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da2:	74 13                	je     c0001db7 <pick_lfn+0x70>
c0001da4:	66 85 ed             	test   bp,bp
c0001da7:	74 0e                	je     c0001db7 <pick_lfn+0x70>
c0001da9:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001daf:	77 ab                	ja     c0001d5c <pick_lfn+0x15>
c0001db1:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db7:	b8 01 00 00 00       	mov    eax,0x1
c0001dbc:	5b                   	pop    ebx
c0001dbd:	5e                   	pop    esi
c0001dbe:	5f                   	pop    edi
c0001dbf:	5d                   	pop    ebp
c0001dc0:	c3                   	ret    

c0001dc1 <put_lfn>:
c0001dc1:	55                   	push   ebp
c0001dc2:	31 ed                	xor    ebp,ebp
c0001dc4:	57                   	push   edi
c0001dc5:	89 d7                	mov    edi,edx
c0001dc7:	56                   	push   esi
c0001dc8:	31 f6                	xor    esi,esi
c0001dca:	53                   	push   ebx
c0001dcb:	83 ec 08             	sub    esp,0x8
c0001dce:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dd8:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dde:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de1:	31 d2                	xor    edx,edx
c0001de3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001de7:	e8 cb fc ff ff       	call   c0001ab7 <st_word>
c0001dec:	0f b6 d9             	movzx  ebx,cl
c0001def:	4b                   	dec    ebx
c0001df0:	6b db 0d             	imul   ebx,ebx,0xd
c0001df3:	66 83 fe ff          	cmp    si,0xffff
c0001df7:	74 08                	je     c0001e01 <put_lfn+0x40>
c0001df9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dfc:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e00:	43                   	inc    ebx
c0001e01:	0f b6 85 00 04 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfc00]
c0001e08:	0f b7 d6             	movzx  edx,si
c0001e0b:	01 f8                	add    eax,edi
c0001e0d:	e8 a5 fc ff ff       	call   c0001ab7 <st_word>
c0001e12:	66 85 f6             	test   si,si
c0001e15:	75 03                	jne    c0001e1a <put_lfn+0x59>
c0001e17:	83 ce ff             	or     esi,0xffffffff
c0001e1a:	45                   	inc    ebp
c0001e1b:	83 fd 0d             	cmp    ebp,0xd
c0001e1e:	75 d3                	jne    c0001df3 <put_lfn+0x32>
c0001e20:	66 46                	inc    si
c0001e22:	74 0a                	je     c0001e2e <put_lfn+0x6d>
c0001e24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e27:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e2c:	75 09                	jne    c0001e37 <put_lfn+0x76>
c0001e2e:	88 c8                	mov    al,cl
c0001e30:	83 c8 40             	or     eax,0x40
c0001e33:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e37:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e3b:	88 07                	mov    BYTE PTR [edi],al
c0001e3d:	83 c4 08             	add    esp,0x8
c0001e40:	5b                   	pop    ebx
c0001e41:	5e                   	pop    esi
c0001e42:	5f                   	pop    edi
c0001e43:	5d                   	pop    ebp
c0001e44:	c3                   	ret    

c0001e45 <gen_numname>:
c0001e45:	57                   	push   edi
c0001e46:	89 cf                	mov    edi,ecx
c0001e48:	56                   	push   esi
c0001e49:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e4e:	53                   	push   ebx
c0001e4f:	89 c6                	mov    esi,eax
c0001e51:	83 ec 10             	sub    esp,0x10
c0001e54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e58:	e8 67 fc ff ff       	call   c0001ac4 <mem_cpy>
c0001e5d:	83 fb 05             	cmp    ebx,0x5
c0001e60:	76 2d                	jbe    c0001e8f <gen_numname+0x4a>
c0001e62:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 25                	je     c0001e8f <gen_numname+0x4a>
c0001e6a:	83 c7 02             	add    edi,0x2
c0001e6d:	ba 10 00 00 00       	mov    edx,0x10
c0001e72:	89 c1                	mov    ecx,eax
c0001e74:	01 db                	add    ebx,ebx
c0001e76:	66 d1 e8             	shr    ax,1
c0001e79:	83 e1 01             	and    ecx,0x1
c0001e7c:	01 cb                	add    ebx,ecx
c0001e7e:	0f ba e3 10          	bt     ebx,0x10
c0001e82:	73 06                	jae    c0001e8a <gen_numname+0x45>
c0001e84:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8a:	4a                   	dec    edx
c0001e8b:	75 e5                	jne    c0001e72 <gen_numname+0x2d>
c0001e8d:	eb d3                	jmp    c0001e62 <gen_numname+0x1d>
c0001e8f:	b8 07 00 00 00       	mov    eax,0x7
c0001e94:	88 d9                	mov    cl,bl
c0001e96:	83 e1 0f             	and    ecx,0xf
c0001e99:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e9c:	80 fa 39             	cmp    dl,0x39
c0001e9f:	76 03                	jbe    c0001ea4 <gen_numname+0x5f>
c0001ea1:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea7:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eab:	89 da                	mov    edx,ebx
c0001ead:	c1 ea 04             	shr    edx,0x4
c0001eb0:	83 fb 0f             	cmp    ebx,0xf
c0001eb3:	76 06                	jbe    c0001ebb <gen_numname+0x76>
c0001eb5:	89 c8                	mov    eax,ecx
c0001eb7:	89 d3                	mov    ebx,edx
c0001eb9:	eb d9                	jmp    c0001e94 <gen_numname+0x4f>
c0001ebb:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec0:	31 d2                	xor    edx,edx
c0001ec2:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec5:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec8:	39 ca                	cmp    edx,ecx
c0001eca:	73 18                	jae    c0001ee4 <gen_numname+0x9f>
c0001ecc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ecf:	3c 20                	cmp    al,0x20
c0001ed1:	74 11                	je     c0001ee4 <gen_numname+0x9f>
c0001ed3:	e8 41 fc ff ff       	call   c0001b19 <dbc_1st>
c0001ed8:	85 c0                	test   eax,eax
c0001eda:	74 05                	je     c0001ee1 <gen_numname+0x9c>
c0001edc:	39 d3                	cmp    ebx,edx
c0001ede:	74 04                	je     c0001ee4 <gen_numname+0x9f>
c0001ee0:	42                   	inc    edx
c0001ee1:	42                   	inc    edx
c0001ee2:	eb e1                	jmp    c0001ec5 <gen_numname+0x80>
c0001ee4:	b0 20                	mov    al,0x20
c0001ee6:	83 f9 07             	cmp    ecx,0x7
c0001ee9:	77 05                	ja     c0001ef0 <gen_numname+0xab>
c0001eeb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eef:	41                   	inc    ecx
c0001ef0:	42                   	inc    edx
c0001ef1:	83 fa 07             	cmp    edx,0x7
c0001ef4:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef8:	76 ea                	jbe    c0001ee4 <gen_numname+0x9f>
c0001efa:	83 c4 10             	add    esp,0x10
c0001efd:	5b                   	pop    ebx
c0001efe:	5e                   	pop    esi
c0001eff:	5f                   	pop    edi
c0001f00:	c3                   	ret    

c0001f01 <sum_sfn>:
c0001f01:	31 c9                	xor    ecx,ecx
c0001f03:	31 d2                	xor    edx,edx
c0001f05:	d0 ca                	ror    dl,1
c0001f07:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0a:	41                   	inc    ecx
c0001f0b:	83 f9 0b             	cmp    ecx,0xb
c0001f0e:	75 f5                	jne    c0001f05 <sum_sfn+0x4>
c0001f10:	88 d0                	mov    al,dl
c0001f12:	c3                   	ret    

c0001f13 <xdir_sum>:
c0001f13:	56                   	push   esi
c0001f14:	31 c9                	xor    ecx,ecx
c0001f16:	53                   	push   ebx
c0001f17:	31 d2                	xor    edx,edx
c0001f19:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f1d:	43                   	inc    ebx
c0001f1e:	c1 e3 05             	shl    ebx,0x5
c0001f21:	83 fa 02             	cmp    edx,0x2
c0001f24:	74 0b                	je     c0001f31 <xdir_sum+0x1e>
c0001f26:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2a:	66 d1 c9             	ror    cx,1
c0001f2d:	01 f1                	add    ecx,esi
c0001f2f:	eb 05                	jmp    c0001f36 <xdir_sum+0x23>
c0001f31:	ba 03 00 00 00       	mov    edx,0x3
c0001f36:	42                   	inc    edx
c0001f37:	39 d3                	cmp    ebx,edx
c0001f39:	77 e6                	ja     c0001f21 <xdir_sum+0xe>
c0001f3b:	5b                   	pop    ebx
c0001f3c:	89 c8                	mov    eax,ecx
c0001f3e:	5e                   	pop    esi
c0001f3f:	c3                   	ret    

c0001f40 <xsum32>:
c0001f40:	d1 ca                	ror    edx,1
c0001f42:	0f b6 c0             	movzx  eax,al
c0001f45:	01 d0                	add    eax,edx
c0001f47:	c3                   	ret    

c0001f48 <get_xfileinfo>:
c0001f48:	55                   	push   ebp
c0001f49:	31 c9                	xor    ecx,ecx
c0001f4b:	57                   	push   edi
c0001f4c:	bd 40 00 00 00       	mov    ebp,0x40
c0001f51:	56                   	push   esi
c0001f52:	31 ff                	xor    edi,edi
c0001f54:	53                   	push   ebx
c0001f55:	89 c6                	mov    esi,eax
c0001f57:	83 ec 0c             	sub    esp,0xc
c0001f5a:	89 d3                	mov    ebx,edx
c0001f5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f63:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f67:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6a:	76 6d                	jbe    c0001fd9 <get_xfileinfo+0x91>
c0001f6c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f72:	76 0b                	jbe    c0001f7f <get_xfileinfo+0x37>
c0001f74:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f78:	bf 01 00 00 00       	mov    edi,0x1
c0001f7d:	eb 63                	jmp    c0001fe2 <get_xfileinfo+0x9a>
c0001f7f:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f85:	75 03                	jne    c0001f8a <get_xfileinfo+0x42>
c0001f87:	83 c5 02             	add    ebp,0x2
c0001f8a:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f8d:	83 c5 02             	add    ebp,0x2
c0001f90:	e8 b0 fa ff ff       	call   c0001a45 <ld_word>
c0001f95:	ff 04 24             	inc    DWORD PTR [esp]
c0001f98:	66 85 c9             	test   cx,cx
c0001f9b:	75 0d                	jne    c0001faa <get_xfileinfo+0x62>
c0001f9d:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa3:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa8:	76 2b                	jbe    c0001fd5 <get_xfileinfo+0x8d>
c0001faa:	c1 e1 10             	shl    ecx,0x10
c0001fad:	ba ff 00 00 00       	mov    edx,0xff
c0001fb2:	29 fa                	sub    edx,edi
c0001fb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fb8:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fbc:	0f b7 c0             	movzx  eax,ax
c0001fbf:	09 c8                	or     eax,ecx
c0001fc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc5:	e8 1b fc ff ff       	call   c0001be5 <put_utf>
c0001fca:	84 c0                	test   al,al
c0001fcc:	74 a6                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fce:	0f b6 c0             	movzx  eax,al
c0001fd1:	01 c7                	add    edi,eax
c0001fd3:	31 c0                	xor    eax,eax
c0001fd5:	89 c1                	mov    ecx,eax
c0001fd7:	eb 8a                	jmp    c0001f63 <get_xfileinfo+0x1b>
c0001fd9:	85 ff                	test   edi,edi
c0001fdb:	74 97                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fdd:	66 85 c9             	test   cx,cx
c0001fe0:	75 92                	jne    c0001f74 <get_xfileinfo+0x2c>
c0001fe2:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001feb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fee:	31 c0                	xor    eax,eax
c0001ff0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff3:	31 d2                	xor    edx,edx
c0001ff5:	80 e1 10             	and    cl,0x10
c0001ff8:	75 08                	jne    c0002002 <get_xfileinfo+0xba>
c0001ffa:	8d 46 38             	lea    eax,[esi+0x38]
c0001ffd:	e8 68 fa ff ff       	call   c0001a6a <ld_qword>
c0002002:	89 03                	mov    DWORD PTR [ebx],eax
c0002004:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002007:	8d 46 0c             	lea    eax,[esi+0xc]
c000200a:	e8 36 fa ff ff       	call   c0001a45 <ld_word>
c000200f:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002013:	8d 46 0e             	lea    eax,[esi+0xe]
c0002016:	e8 2a fa ff ff       	call   c0001a45 <ld_word>
c000201b:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000201f:	83 c4 0c             	add    esp,0xc
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <get_ldnumber>:
c0002027:	57                   	push   edi
c0002028:	56                   	push   esi
c0002029:	53                   	push   ebx
c000202a:	83 cb ff             	or     ebx,0xffffffff
c000202d:	8b 10                	mov    edx,DWORD PTR [eax]
c000202f:	85 d2                	test   edx,edx
c0002031:	74 34                	je     c0002067 <get_ldnumber+0x40>
c0002033:	89 c7                	mov    edi,eax
c0002035:	89 d1                	mov    ecx,edx
c0002037:	41                   	inc    ecx
c0002038:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c000203b:	3c 1f                	cmp    al,0x1f
c000203d:	76 04                	jbe    c0002043 <get_ldnumber+0x1c>
c000203f:	3c 3a                	cmp    al,0x3a
c0002041:	75 f4                	jne    c0002037 <get_ldnumber+0x10>
c0002043:	31 db                	xor    ebx,ebx
c0002045:	3c 3a                	cmp    al,0x3a
c0002047:	75 1e                	jne    c0002067 <get_ldnumber+0x40>
c0002049:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000204c:	83 cb ff             	or     ebx,0xffffffff
c000204f:	8d 46 d0             	lea    eax,[esi-0x30]
c0002052:	3c 09                	cmp    al,0x9
c0002054:	77 11                	ja     c0002067 <get_ldnumber+0x40>
c0002056:	83 c2 02             	add    edx,0x2
c0002059:	39 d1                	cmp    ecx,edx
c000205b:	75 0a                	jne    c0002067 <get_ldnumber+0x40>
c000205d:	89 f0                	mov    eax,esi
c000205f:	89 0f                	mov    DWORD PTR [edi],ecx
c0002061:	0f be d8             	movsx  ebx,al
c0002064:	83 eb 30             	sub    ebx,0x30
c0002067:	89 d8                	mov    eax,ebx
c0002069:	5b                   	pop    ebx
c000206a:	5e                   	pop    esi
c000206b:	5f                   	pop    edi
c000206c:	c3                   	ret    

c000206d <crc32>:
c000206d:	56                   	push   esi
c000206e:	89 d6                	mov    esi,edx
c0002070:	53                   	push   ebx
c0002071:	b2 01                	mov    dl,0x1
c0002073:	bb 08 00 00 00       	mov    ebx,0x8
c0002078:	89 f1                	mov    ecx,esi
c000207a:	84 d1                	test   cl,dl
c000207c:	0f 95 c1             	setne  cl
c000207f:	0f b6 c9             	movzx  ecx,cl
c0002082:	31 c1                	xor    ecx,eax
c0002084:	89 c8                	mov    eax,ecx
c0002086:	d1 e8                	shr    eax,1
c0002088:	80 e1 01             	and    cl,0x1
c000208b:	74 05                	je     c0002092 <crc32+0x25>
c000208d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002092:	01 d2                	add    edx,edx
c0002094:	4b                   	dec    ebx
c0002095:	75 e1                	jne    c0002078 <crc32+0xb>
c0002097:	5b                   	pop    ebx
c0002098:	5e                   	pop    esi
c0002099:	c3                   	ret    

c000209a <test_gpt_header>:
c000209a:	55                   	push   ebp
c000209b:	b9 10 00 00 00       	mov    ecx,0x10
c00020a0:	57                   	push   edi
c00020a1:	ba 00 03 02 c0       	mov    edx,0xc0020300
c00020a6:	56                   	push   esi
c00020a7:	31 ff                	xor    edi,edi
c00020a9:	53                   	push   ebx
c00020aa:	89 c3                	mov    ebx,eax
c00020ac:	e8 33 fa ff ff       	call   c0001ae4 <mem_cmp>
c00020b1:	85 c0                	test   eax,eax
c00020b3:	75 55                	jne    c000210a <test_gpt_header+0x70>
c00020b5:	89 c7                	mov    edi,eax
c00020b7:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020bc:	83 ce ff             	or     esi,0xffffffff
c00020bf:	31 d2                	xor    edx,edx
c00020c1:	83 fd 03             	cmp    ebp,0x3
c00020c4:	76 05                	jbe    c00020cb <test_gpt_header+0x31>
c00020c6:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020cb:	89 f0                	mov    eax,esi
c00020cd:	45                   	inc    ebp
c00020ce:	e8 9a ff ff ff       	call   c000206d <crc32>
c00020d3:	83 fd 4c             	cmp    ebp,0x4c
c00020d6:	89 c6                	mov    esi,eax
c00020d8:	75 e5                	jne    c00020bf <test_gpt_header+0x25>
c00020da:	8d 43 10             	lea    eax,[ebx+0x10]
c00020dd:	e8 70 f9 ff ff       	call   c0001a52 <ld_dword>
c00020e2:	f7 d6                	not    esi
c00020e4:	39 c6                	cmp    esi,eax
c00020e6:	75 22                	jne    c000210a <test_gpt_header+0x70>
c00020e8:	8d 43 54             	lea    eax,[ebx+0x54]
c00020eb:	e8 62 f9 ff ff       	call   c0001a52 <ld_dword>
c00020f0:	83 c0 80             	add    eax,0xffffff80
c00020f3:	75 15                	jne    c000210a <test_gpt_header+0x70>
c00020f5:	8d 43 50             	lea    eax,[ebx+0x50]
c00020f8:	e8 55 f9 ff ff       	call   c0001a52 <ld_dword>
c00020fd:	3d 80 00 00 00       	cmp    eax,0x80
c0002102:	0f 96 c0             	setbe  al
c0002105:	0f b6 c0             	movzx  eax,al
c0002108:	89 c7                	mov    edi,eax
c000210a:	5b                   	pop    ebx
c000210b:	89 f8                	mov    eax,edi
c000210d:	5e                   	pop    esi
c000210e:	5f                   	pop    edi
c000210f:	5d                   	pop    ebp
c0002110:	c3                   	ret    

c0002111 <make_rand>:
c0002111:	56                   	push   esi
c0002112:	85 c0                	test   eax,eax
c0002114:	53                   	push   ebx
c0002115:	75 05                	jne    c000211c <make_rand+0xb>
c0002117:	b8 01 00 00 00       	mov    eax,0x1
c000211c:	01 d1                	add    ecx,edx
c000211e:	bb 08 00 00 00       	mov    ebx,0x8
c0002123:	89 c6                	mov    esi,eax
c0002125:	d1 e8                	shr    eax,1
c0002127:	83 e6 01             	and    esi,0x1
c000212a:	85 f6                	test   esi,esi
c000212c:	74 05                	je     c0002133 <make_rand+0x22>
c000212e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002133:	4b                   	dec    ebx
c0002134:	75 ed                	jne    c0002123 <make_rand+0x12>
c0002136:	42                   	inc    edx
c0002137:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213a:	39 ca                	cmp    edx,ecx
c000213c:	75 e0                	jne    c000211e <make_rand+0xd>
c000213e:	5b                   	pop    ebx
c000213f:	5e                   	pop    esi
c0002140:	c3                   	ret    

c0002141 <validate>:
c0002141:	56                   	push   esi
c0002142:	89 d6                	mov    esi,edx
c0002144:	53                   	push   ebx
c0002145:	85 c0                	test   eax,eax
c0002147:	51                   	push   ecx
c0002148:	75 09                	jne    c0002153 <validate+0x12>
c000214a:	b8 09 00 00 00       	mov    eax,0x9
c000214f:	31 c9                	xor    ecx,ecx
c0002151:	eb 2f                	jmp    c0002182 <validate+0x41>
c0002153:	89 c3                	mov    ebx,eax
c0002155:	8b 00                	mov    eax,DWORD PTR [eax]
c0002157:	85 c0                	test   eax,eax
c0002159:	74 ef                	je     c000214a <validate+0x9>
c000215b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000215e:	74 ea                	je     c000214a <validate+0x9>
c0002160:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002164:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002168:	75 e0                	jne    c000214a <validate+0x9>
c000216a:	83 ec 0c             	sub    esp,0xc
c000216d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002171:	50                   	push   eax
c0002172:	e8 7d f8 ff ff       	call   c00019f4 <disk_status>
c0002177:	83 c4 10             	add    esp,0x10
c000217a:	a8 01                	test   al,0x1
c000217c:	75 cc                	jne    c000214a <validate+0x9>
c000217e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002180:	31 c0                	xor    eax,eax
c0002182:	89 0e                	mov    DWORD PTR [esi],ecx
c0002184:	5a                   	pop    edx
c0002185:	5b                   	pop    ebx
c0002186:	5e                   	pop    esi
c0002187:	c3                   	ret    

c0002188 <sync_window>:
c0002188:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000218c:	0f 84 85 00 00 00    	je     c0002217 <sync_window+0x8f>
c0002192:	55                   	push   ebp
c0002193:	8d 68 54             	lea    ebp,[eax+0x54]
c0002196:	57                   	push   edi
c0002197:	56                   	push   esi
c0002198:	53                   	push   ebx
c0002199:	89 c3                	mov    ebx,eax
c000219b:	83 ec 28             	sub    esp,0x28
c000219e:	6a 01                	push   0x1
c00021a0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021a6:	55                   	push   ebp
c00021a7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ab:	50                   	push   eax
c00021ac:	e8 5f f8 ff ff       	call   c0001a10 <disk_write>
c00021b1:	83 c4 20             	add    esp,0x20
c00021b4:	ba 01 00 00 00       	mov    edx,0x1
c00021b9:	85 c0                	test   eax,eax
c00021bb:	75 50                	jne    c000220d <sync_window+0x85>
c00021bd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c0:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021c3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021c7:	89 c6                	mov    esi,eax
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021ce:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d5:	89 d7                	mov    edi,edx
c00021d7:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021db:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021de:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e2:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021e6:	73 23                	jae    c000220b <sync_window+0x83>
c00021e8:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021ec:	75 1d                	jne    c000220b <sync_window+0x83>
c00021ee:	83 ec 0c             	sub    esp,0xc
c00021f1:	6a 01                	push   0x1
c00021f3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021f7:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021fb:	52                   	push   edx
c00021fc:	50                   	push   eax
c00021fd:	55                   	push   ebp
c00021fe:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002202:	50                   	push   eax
c0002203:	e8 08 f8 ff ff       	call   c0001a10 <disk_write>
c0002208:	83 c4 20             	add    esp,0x20
c000220b:	31 d2                	xor    edx,edx
c000220d:	83 c4 1c             	add    esp,0x1c
c0002210:	89 d0                	mov    eax,edx
c0002212:	5b                   	pop    ebx
c0002213:	5e                   	pop    esi
c0002214:	5f                   	pop    edi
c0002215:	5d                   	pop    ebp
c0002216:	c3                   	ret    
c0002217:	31 d2                	xor    edx,edx
c0002219:	89 d0                	mov    eax,edx
c000221b:	c3                   	ret    

c000221c <move_window>:
c000221c:	56                   	push   esi
c000221d:	53                   	push   ebx
c000221e:	89 c3                	mov    ebx,eax
c0002220:	83 ec 14             	sub    esp,0x14
c0002223:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002226:	75 07                	jne    c000222f <move_window+0x13>
c0002228:	31 f6                	xor    esi,esi
c000222a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000222d:	74 59                	je     c0002288 <move_window+0x6c>
c000222f:	89 d8                	mov    eax,ebx
c0002231:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002235:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002239:	e8 4a ff ff ff       	call   c0002188 <sync_window>
c000223e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002242:	89 c6                	mov    esi,eax
c0002244:	85 c0                	test   eax,eax
c0002246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224a:	75 3c                	jne    c0002288 <move_window+0x6c>
c000224c:	83 ec 0c             	sub    esp,0xc
c000224f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002252:	6a 01                	push   0x1
c0002254:	51                   	push   ecx
c0002255:	52                   	push   edx
c0002256:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000225e:	50                   	push   eax
c000225f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002263:	50                   	push   eax
c0002264:	e8 91 f7 ff ff       	call   c00019fa <disk_read>
c0002269:	83 c4 20             	add    esp,0x20
c000226c:	85 c0                	test   eax,eax
c000226e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002272:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002276:	74 0a                	je     c0002282 <move_window+0x66>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	be 01 00 00 00       	mov    esi,0x1
c0002280:	89 d1                	mov    ecx,edx
c0002282:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002285:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002288:	83 c4 14             	add    esp,0x14
c000228b:	89 f0                	mov    eax,esi
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <check_fs>:
c0002290:	53                   	push   ebx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	83 ec 08             	sub    esp,0x8
c0002296:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229a:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022a8:	e8 6f ff ff ff       	call   c000221c <move_window>
c00022ad:	ba 04 00 00 00       	mov    edx,0x4
c00022b2:	85 c0                	test   eax,eax
c00022b4:	0f 85 89 00 00 00    	jne    c0002343 <check_fs+0xb3>
c00022ba:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c0:	e8 80 f7 ff ff       	call   c0001a45 <ld_word>
c00022c5:	ba 03 00 00 00       	mov    edx,0x3
c00022ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ce:	75 73                	jne    c0002343 <check_fs+0xb3>
c00022d0:	ba 20 04 02 c0       	mov    edx,0xc0020420
c00022d5:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00022dd:	e8 02 f8 ff ff       	call   c0001ae4 <mem_cmp>
c00022e2:	ba 01 00 00 00       	mov    edx,0x1
c00022e7:	85 c0                	test   eax,eax
c00022e9:	74 58                	je     c0002343 <check_fs+0xb3>
c00022eb:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022ee:	8d 50 18             	lea    edx,[eax+0x18]
c00022f1:	80 fa 01             	cmp    dl,0x1
c00022f4:	76 09                	jbe    c00022ff <check_fs+0x6f>
c00022f6:	ba 02 00 00 00       	mov    edx,0x2
c00022fb:	3c eb                	cmp    al,0xeb
c00022fd:	75 44                	jne    c0002343 <check_fs+0xb3>
c00022ff:	ba ac 30 02 c0       	mov    edx,0xc00230ac
c0002304:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230a:	b9 03 00 00 00       	mov    ecx,0x3
c000230f:	e8 d0 f7 ff ff       	call   c0001ae4 <mem_cmp>
c0002314:	31 d2                	xor    edx,edx
c0002316:	85 c0                	test   eax,eax
c0002318:	74 29                	je     c0002343 <check_fs+0xb3>
c000231a:	ba 2c 04 02 c0       	mov    edx,0xc002042c
c000231f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002325:	b9 05 00 00 00       	mov    ecx,0x5
c000232a:	e8 b5 f7 ff ff       	call   c0001ae4 <mem_cmp>
c000232f:	31 d2                	xor    edx,edx
c0002331:	85 c0                	test   eax,eax
c0002333:	74 0e                	je     c0002343 <check_fs+0xb3>
c0002335:	31 d2                	xor    edx,edx
c0002337:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000233e:	0f 95 c2             	setne  dl
c0002341:	01 d2                	add    edx,edx
c0002343:	83 c4 08             	add    esp,0x8
c0002346:	89 d0                	mov    eax,edx
c0002348:	5b                   	pop    ebx
c0002349:	c3                   	ret    

c000234a <find_volume>:
c000234a:	55                   	push   ebp
c000234b:	31 c9                	xor    ecx,ecx
c000234d:	57                   	push   edi
c000234e:	56                   	push   esi
c000234f:	89 d6                	mov    esi,edx
c0002351:	53                   	push   ebx
c0002352:	31 d2                	xor    edx,edx
c0002354:	83 ec 3c             	sub    esp,0x3c
c0002357:	89 c3                	mov    ebx,eax
c0002359:	e8 32 ff ff ff       	call   c0002290 <check_fs>
c000235e:	83 f8 02             	cmp    eax,0x2
c0002361:	74 0e                	je     c0002371 <find_volume+0x27>
c0002363:	0f 87 56 01 00 00    	ja     c00024bf <find_volume+0x175>
c0002369:	85 f6                	test   esi,esi
c000236b:	0f 84 4e 01 00 00    	je     c00024bf <find_volume+0x175>
c0002371:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002378:	0f 85 df 00 00 00    	jne    c000245d <find_volume+0x113>
c000237e:	31 c9                	xor    ecx,ecx
c0002380:	ba 01 00 00 00       	mov    edx,0x1
c0002385:	89 d8                	mov    eax,ebx
c0002387:	e8 90 fe ff ff       	call   c000221c <move_window>
c000238c:	85 c0                	test   eax,eax
c000238e:	74 0a                	je     c000239a <find_volume+0x50>
c0002390:	b8 04 00 00 00       	mov    eax,0x4
c0002395:	e9 25 01 00 00       	jmp    c00024bf <find_volume+0x175>
c000239a:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000239d:	89 e8                	mov    eax,ebp
c000239f:	e8 f6 fc ff ff       	call   c000209a <test_gpt_header>
c00023a4:	85 c0                	test   eax,eax
c00023a6:	75 0a                	jne    c00023b2 <find_volume+0x68>
c00023a8:	b8 03 00 00 00       	mov    eax,0x3
c00023ad:	e9 0d 01 00 00       	jmp    c00024bf <find_volume+0x175>
c00023b2:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023b8:	e8 95 f6 ff ff       	call   c0001a52 <ld_dword>
c00023bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c1:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023c7:	e8 9e f6 ff ff       	call   c0001a6a <ld_qword>
c00023cc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023ec:	74 ba                	je     c00023a8 <find_volume+0x5e>
c00023ee:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f2:	31 c9                	xor    ecx,ecx
c00023f4:	c1 e7 07             	shl    edi,0x7
c00023f7:	89 d8                	mov    eax,ebx
c00023f9:	89 fa                	mov    edx,edi
c00023fb:	c1 ea 09             	shr    edx,0x9
c00023fe:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002402:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002406:	e8 11 fe ff ff       	call   c000221c <move_window>
c000240b:	85 c0                	test   eax,eax
c000240d:	75 81                	jne    c0002390 <find_volume+0x46>
c000240f:	81 e7 80 01 00 00    	and    edi,0x180
c0002415:	b9 10 00 00 00       	mov    ecx,0x10
c000241a:	ba 10 04 02 c0       	mov    edx,0xc0020410
c000241f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002423:	e8 bc f6 ff ff       	call   c0001ae4 <mem_cmp>
c0002428:	85 c0                	test   eax,eax
c000242a:	75 2b                	jne    c0002457 <find_volume+0x10d>
c000242c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002430:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002434:	e8 31 f6 ff ff       	call   c0001a6a <ld_qword>
c0002439:	89 d1                	mov    ecx,edx
c000243b:	89 c2                	mov    edx,eax
c000243d:	89 d8                	mov    eax,ebx
c000243f:	e8 4c fe ff ff       	call   c0002290 <check_fs>
c0002444:	85 f6                	test   esi,esi
c0002446:	75 05                	jne    c000244d <find_volume+0x103>
c0002448:	83 f8 01             	cmp    eax,0x1
c000244b:	76 72                	jbe    c00024bf <find_volume+0x175>
c000244d:	85 f6                	test   esi,esi
c000244f:	74 06                	je     c0002457 <find_volume+0x10d>
c0002451:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002455:	74 68                	je     c00024bf <find_volume+0x175>
c0002457:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000245b:	eb 87                	jmp    c00023e4 <find_volume+0x9a>
c000245d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002461:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002467:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000246d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002471:	89 cd                	mov    ebp,ecx
c0002473:	89 f8                	mov    eax,edi
c0002475:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002479:	e8 d4 f5 ff ff       	call   c0001a52 <ld_dword>
c000247e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002482:	83 c7 10             	add    edi,0x10
c0002485:	83 c1 04             	add    ecx,0x4
c0002488:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000248b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000248f:	75 e2                	jne    c0002473 <find_volume+0x129>
c0002491:	31 ff                	xor    edi,edi
c0002493:	85 f6                	test   esi,esi
c0002495:	74 03                	je     c000249a <find_volume+0x150>
c0002497:	8d 7e ff             	lea    edi,[esi-0x1]
c000249a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000249e:	b8 03 00 00 00       	mov    eax,0x3
c00024a3:	85 d2                	test   edx,edx
c00024a5:	74 09                	je     c00024b0 <find_volume+0x166>
c00024a7:	31 c9                	xor    ecx,ecx
c00024a9:	89 d8                	mov    eax,ebx
c00024ab:	e8 e0 fd ff ff       	call   c0002290 <check_fs>
c00024b0:	85 f6                	test   esi,esi
c00024b2:	75 0b                	jne    c00024bf <find_volume+0x175>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 06                	jbe    c00024bf <find_volume+0x175>
c00024b9:	47                   	inc    edi
c00024ba:	83 ff 03             	cmp    edi,0x3
c00024bd:	76 db                	jbe    c000249a <find_volume+0x150>
c00024bf:	83 c4 3c             	add    esp,0x3c
c00024c2:	5b                   	pop    ebx
c00024c3:	5e                   	pop    esi
c00024c4:	5f                   	pop    edi
c00024c5:	5d                   	pop    ebp
c00024c6:	c3                   	ret    

c00024c7 <mount_volume>:
c00024c7:	55                   	push   ebp
c00024c8:	57                   	push   edi
c00024c9:	89 cf                	mov    edi,ecx
c00024cb:	56                   	push   esi
c00024cc:	53                   	push   ebx
c00024cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00024d2:	83 ec 3c             	sub    esp,0x3c
c00024d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024df:	e8 43 fb ff ff       	call   c0002027 <get_ldnumber>
c00024e4:	85 c0                	test   eax,eax
c00024e6:	0f 88 3b 05 00 00    	js     c0002a27 <mount_volume+0x560>
c00024ec:	8b 2c 85 20 45 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbae0]
c00024f3:	89 c6                	mov    esi,eax
c00024f5:	bb 0c 00 00 00       	mov    ebx,0xc
c00024fa:	85 ed                	test   ebp,ebp
c00024fc:	0f 84 25 05 00 00    	je     c0002a27 <mount_volume+0x560>
c0002502:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002506:	83 e7 fe             	and    edi,0xfffffffe
c0002509:	89 2a                	mov    DWORD PTR [edx],ebp
c000250b:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000250f:	74 32                	je     c0002543 <mount_volume+0x7c>
c0002511:	83 ec 0c             	sub    esp,0xc
c0002514:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002518:	50                   	push   eax
c0002519:	e8 d6 f4 ff ff       	call   c00019f4 <disk_status>
c000251e:	83 c4 10             	add    esp,0x10
c0002521:	a8 01                	test   al,0x1
c0002523:	75 1e                	jne    c0002543 <mount_volume+0x7c>
c0002525:	89 f9                	mov    ecx,edi
c0002527:	31 db                	xor    ebx,ebx
c0002529:	84 c9                	test   cl,cl
c000252b:	0f 84 f6 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002531:	a8 04                	test   al,0x4
c0002533:	0f 84 ee 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002539:	bb 0a 00 00 00       	mov    ebx,0xa
c000253e:	e9 e4 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002543:	83 ec 0c             	sub    esp,0xc
c0002546:	89 f0                	mov    eax,esi
c0002548:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000254c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000254f:	0f b6 f0             	movzx  esi,al
c0002552:	56                   	push   esi
c0002553:	e8 9f f4 ff ff       	call   c00019f7 <disk_initialize>
c0002558:	bb 03 00 00 00       	mov    ebx,0x3
c000255d:	83 c4 10             	add    esp,0x10
c0002560:	a8 01                	test   al,0x1
c0002562:	0f 85 bf 04 00 00    	jne    c0002a27 <mount_volume+0x560>
c0002568:	89 f9                	mov    ecx,edi
c000256a:	84 c9                	test   cl,cl
c000256c:	74 04                	je     c0002572 <mount_volume+0xab>
c000256e:	a8 04                	test   al,0x4
c0002570:	75 c7                	jne    c0002539 <mount_volume+0x72>
c0002572:	31 d2                	xor    edx,edx
c0002574:	89 e8                	mov    eax,ebp
c0002576:	e8 cf fd ff ff       	call   c000234a <find_volume>
c000257b:	83 f8 04             	cmp    eax,0x4
c000257e:	75 0a                	jne    c000258a <mount_volume+0xc3>
c0002580:	bb 01 00 00 00       	mov    ebx,0x1
c0002585:	e9 9d 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000258a:	83 f8 01             	cmp    eax,0x1
c000258d:	76 0a                	jbe    c0002599 <mount_volume+0xd2>
c000258f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002594:	e9 8e 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002599:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000259c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000259f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025a7:	75 17                	jne    c00025c0 <mount_volume+0xf9>
c00025a9:	b8 0b 00 00 00       	mov    eax,0xb
c00025ae:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025b3:	75 da                	jne    c000258f <mount_volume+0xc8>
c00025b5:	40                   	inc    eax
c00025b6:	83 f8 40             	cmp    eax,0x40
c00025b9:	75 f3                	jne    c00025ae <mount_volume+0xe7>
c00025bb:	e9 5a 02 00 00       	jmp    c000281a <mount_volume+0x353>
c00025c0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025c3:	e8 7d f4 ff ff       	call   c0001a45 <ld_word>
c00025c8:	66 3d 00 02          	cmp    ax,0x200
c00025cc:	75 c1                	jne    c000258f <mount_volume+0xc8>
c00025ce:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025d1:	e8 6f f4 ff ff       	call   c0001a45 <ld_word>
c00025d6:	0f b7 c0             	movzx  eax,ax
c00025d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dd:	85 c0                	test   eax,eax
c00025df:	75 0c                	jne    c00025ed <mount_volume+0x126>
c00025e1:	8d 45 78             	lea    eax,[ebp+0x78]
c00025e4:	e8 69 f4 ff ff       	call   c0001a52 <ld_dword>
c00025e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025f4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025f7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025fb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025fe:	48                   	dec    eax
c00025ff:	3c 01                	cmp    al,0x1
c0002601:	77 8c                	ja     c000258f <mount_volume+0xc8>
c0002603:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002607:	89 c3                	mov    ebx,eax
c0002609:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000260d:	66 85 c0             	test   ax,ax
c0002610:	0f 84 79 ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002616:	8d 40 ff             	lea    eax,[eax-0x1]
c0002619:	85 d8                	test   eax,ebx
c000261b:	0f 85 6e ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002621:	8d 45 65             	lea    eax,[ebp+0x65]
c0002624:	e8 1c f4 ff ff       	call   c0001a45 <ld_word>
c0002629:	89 c7                	mov    edi,eax
c000262b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000262f:	a8 0f                	test   al,0xf
c0002631:	0f 85 58 ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002637:	8d 45 67             	lea    eax,[ebp+0x67]
c000263a:	e8 06 f4 ff ff       	call   c0001a45 <ld_word>
c000263f:	0f b7 f0             	movzx  esi,ax
c0002642:	85 f6                	test   esi,esi
c0002644:	75 0a                	jne    c0002650 <mount_volume+0x189>
c0002646:	8d 45 74             	lea    eax,[ebp+0x74]
c0002649:	e8 04 f4 ff ff       	call   c0001a52 <ld_dword>
c000264e:	89 c6                	mov    esi,eax
c0002650:	8d 45 62             	lea    eax,[ebp+0x62]
c0002653:	e8 ed f3 ff ff       	call   c0001a45 <ld_word>
c0002658:	66 85 c0             	test   ax,ax
c000265b:	0f 84 2e ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002661:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002666:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000266b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000266f:	89 fa                	mov    edx,edi
c0002671:	66 c1 ea 04          	shr    dx,0x4
c0002675:	0f b7 d2             	movzx  edx,dx
c0002678:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000267c:	0f b7 c8             	movzx  ecx,ax
c000267f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002682:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002686:	39 c6                	cmp    esi,eax
c0002688:	0f 82 01 ff ff ff    	jb     c000258f <mount_volume+0xc8>
c000268e:	29 c6                	sub    esi,eax
c0002690:	31 d2                	xor    edx,edx
c0002692:	89 f0                	mov    eax,esi
c0002694:	f7 f3                	div    ebx
c0002696:	39 de                	cmp    esi,ebx
c0002698:	0f 82 f1 fe ff ff    	jb     c000258f <mount_volume+0xc8>
c000269e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026a3:	0f 87 e6 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c00026a9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026ae:	0f 86 63 03 00 00    	jbe    c0002a17 <mount_volume+0x550>
c00026b4:	bb 03 00 00 00       	mov    ebx,0x3
c00026b9:	8d 70 02             	lea    esi,[eax+0x2]
c00026bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026c4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026c7:	89 c8                	mov    eax,ecx
c00026c9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026cc:	31 d2                	xor    edx,edx
c00026ce:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026d2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026da:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026e5:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026e8:	31 d2                	xor    edx,edx
c00026ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026ee:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026f5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026f8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026fb:	83 fb 03             	cmp    ebx,0x3
c00026fe:	75 2b                	jne    c000272b <mount_volume+0x264>
c0002700:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002703:	e8 3d f3 ff ff       	call   c0001a45 <ld_word>
c0002708:	66 09 c7             	or     di,ax
c000270b:	0f 85 7e fe ff ff    	jne    c000258f <mount_volume+0xc8>
c0002711:	c1 e6 02             	shl    esi,0x2
c0002714:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000271a:	e8 33 f3 ff ff       	call   c0001a52 <ld_dword>
c000271f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002726:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002729:	eb 30                	jmp    c000275b <mount_volume+0x294>
c000272b:	66 85 ff             	test   di,di
c000272e:	0f 84 5b fe ff ff    	je     c000258f <mount_volume+0xc8>
c0002734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002738:	31 d2                	xor    edx,edx
c000273a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000273e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002742:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002745:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002748:	83 fb 02             	cmp    ebx,0x2
c000274b:	75 04                	jne    c0002751 <mount_volume+0x28a>
c000274d:	01 f6                	add    esi,esi
c000274f:	eb 0a                	jmp    c000275b <mount_volume+0x294>
c0002751:	8d 04 76             	lea    eax,[esi+esi*2]
c0002754:	83 e6 01             	and    esi,0x1
c0002757:	d1 e8                	shr    eax,1
c0002759:	01 c6                	add    esi,eax
c000275b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002761:	c1 ee 09             	shr    esi,0x9
c0002764:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002768:	0f 87 21 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c000276e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002775:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000277c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002780:	83 fb 03             	cmp    ebx,0x3
c0002783:	75 7a                	jne    c00027ff <mount_volume+0x338>
c0002785:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000278b:	e8 b5 f2 ff ff       	call   c0001a45 <ld_word>
c0002790:	66 48                	dec    ax
c0002792:	75 6b                	jne    c00027ff <mount_volume+0x338>
c0002794:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002798:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279c:	83 c2 01             	add    edx,0x1
c000279f:	89 e8                	mov    eax,ebp
c00027a1:	83 d1 00             	adc    ecx,0x0
c00027a4:	e8 73 fa ff ff       	call   c000221c <move_window>
c00027a9:	85 c0                	test   eax,eax
c00027ab:	75 52                	jne    c00027ff <mount_volume+0x338>
c00027ad:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027b1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027b7:	e8 89 f2 ff ff       	call   c0001a45 <ld_word>
c00027bc:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c0:	75 3d                	jne    c00027ff <mount_volume+0x338>
c00027c2:	8d 45 54             	lea    eax,[ebp+0x54]
c00027c5:	e8 88 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ca:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027cf:	75 2e                	jne    c00027ff <mount_volume+0x338>
c00027d1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027d7:	e8 76 f2 ff ff       	call   c0001a52 <ld_dword>
c00027dc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e1:	75 1c                	jne    c00027ff <mount_volume+0x338>
c00027e3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027e9:	e8 64 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ee:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027f1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027f7:	e8 56 f2 ff ff       	call   c0001a52 <ld_dword>
c00027fc:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027ff:	66 a1 00 45 02 c0    	mov    ax,ds:0xc0024500
c0002805:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002808:	40                   	inc    eax
c0002809:	31 db                	xor    ebx,ebx
c000280b:	66 a3 00 45 02 c0    	mov    ds:0xc0024500,ax
c0002811:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002815:	e9 0d 02 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000281a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002820:	e8 20 f2 ff ff       	call   c0001a45 <ld_word>
c0002825:	66 3d 00 01          	cmp    ax,0x100
c0002829:	0f 85 60 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000282f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002836:	0f 85 53 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000283c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002842:	e8 23 f2 ff ff       	call   c0001a6a <ld_qword>
c0002847:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000284b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002851:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002855:	e8 f8 f1 ff ff       	call   c0001a52 <ld_dword>
c000285a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000285d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002863:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002866:	fe c8                	dec    al
c0002868:	0f 85 21 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000286e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002875:	bb 01 00 00 00       	mov    ebx,0x1
c000287a:	d3 e3                	shl    ebx,cl
c000287c:	66 85 db             	test   bx,bx
c000287f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002883:	0f 84 06 fd ff ff    	je     c000258f <mount_volume+0xc8>
c0002889:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000288f:	e8 be f1 ff ff       	call   c0001a52 <ld_dword>
c0002894:	89 c6                	mov    esi,eax
c0002896:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c000289b:	0f 87 ee fc ff ff    	ja     c000258f <mount_volume+0xc8>
c00028a1:	8d 40 02             	lea    eax,[eax+0x2]
c00028a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028a8:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028af:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028b2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028bb:	e8 92 f1 ff ff       	call   c0001a52 <ld_dword>
c00028c0:	31 d2                	xor    edx,edx
c00028c2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028ce:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028d1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028d4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028de:	e8 6f f1 ff ff       	call   c0001a52 <ld_dword>
c00028e3:	31 d2                	xor    edx,edx
c00028e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028ed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028f1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f4:	0f b7 c3             	movzx  eax,bx
c00028f7:	0f af f0             	imul   esi,eax
c00028fa:	89 f0                	mov    eax,esi
c00028fc:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028ff:	31 d2                	xor    edx,edx
c0002901:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002905:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002909:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000290d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002911:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002915:	39 c1                	cmp    ecx,eax
c0002917:	89 df                	mov    edi,ebx
c0002919:	19 d7                	sbb    edi,edx
c000291b:	0f 82 6e fc ff ff    	jb     c000258f <mount_volume+0xc8>
c0002921:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002927:	31 db                	xor    ebx,ebx
c0002929:	e8 24 f1 ff ff       	call   c0001a52 <ld_dword>
c000292e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002935:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002938:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002940:	85 db                	test   ebx,ebx
c0002942:	75 39                	jne    c000297d <mount_volume+0x4b6>
c0002944:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002948:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000294c:	0f 86 3d fc ff ff    	jbe    c000258f <mount_volume+0xc8>
c0002952:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002955:	89 e8                	mov    eax,ebp
c0002957:	e8 82 f3 ff ff       	call   c0001cde <clst2sect>
c000295c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002960:	31 ff                	xor    edi,edi
c0002962:	01 c6                	add    esi,eax
c0002964:	11 d7                	adc    edi,edx
c0002966:	89 e8                	mov    eax,ebp
c0002968:	89 f2                	mov    edx,esi
c000296a:	89 f9                	mov    ecx,edi
c000296c:	e8 ab f8 ff ff       	call   c000221c <move_window>
c0002971:	85 c0                	test   eax,eax
c0002973:	0f 85 07 fc ff ff    	jne    c0002580 <mount_volume+0xb9>
c0002979:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000297d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002982:	74 0b                	je     c000298f <mount_volume+0x4c8>
c0002984:	83 c3 20             	add    ebx,0x20
c0002987:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000298d:	eb b1                	jmp    c0002940 <mount_volume+0x479>
c000298f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002992:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002996:	e8 b7 f0 ff ff       	call   c0001a52 <ld_dword>
c000299b:	89 c3                	mov    ebx,eax
c000299d:	83 f8 01             	cmp    eax,0x1
c00029a0:	0f 86 e9 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029a6:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029a9:	0f 86 e0 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029af:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029b3:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029b6:	0f af c2             	imul   eax,edx
c00029b9:	31 d2                	xor    edx,edx
c00029bb:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029be:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029c1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029c4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029c7:	89 da                	mov    edx,ebx
c00029c9:	31 c9                	xor    ecx,ecx
c00029cb:	c1 ea 07             	shr    edx,0x7
c00029ce:	89 e8                	mov    eax,ebp
c00029d0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029d3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029d6:	e8 41 f8 ff ff       	call   c000221c <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	0f 85 9d fb ff ff    	jne    c0002580 <mount_volume+0xb9>
c00029e3:	89 d8                	mov    eax,ebx
c00029e5:	83 e0 7f             	and    eax,0x7f
c00029e8:	8d 04 86             	lea    eax,[esi+eax*4]
c00029eb:	e8 62 f0 ff ff       	call   c0001a52 <ld_dword>
c00029f0:	83 f8 ff             	cmp    eax,0xffffffff
c00029f3:	74 0a                	je     c00029ff <mount_volume+0x538>
c00029f5:	43                   	inc    ebx
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	74 cd                	je     c00029c7 <mount_volume+0x500>
c00029fa:	e9 90 fb ff ff       	jmp    c000258f <mount_volume+0xc8>
c00029ff:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a06:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a0d:	bb 04 00 00 00       	mov    ebx,0x4
c0002a12:	e9 e8 fd ff ff       	jmp    c00027ff <mount_volume+0x338>
c0002a17:	31 db                	xor    ebx,ebx
c0002a19:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a1e:	0f 97 c3             	seta   bl
c0002a21:	43                   	inc    ebx
c0002a22:	e9 92 fc ff ff       	jmp    c00026b9 <mount_volume+0x1f2>
c0002a27:	83 c4 3c             	add    esp,0x3c
c0002a2a:	89 d8                	mov    eax,ebx
c0002a2c:	5b                   	pop    ebx
c0002a2d:	5e                   	pop    esi
c0002a2e:	5f                   	pop    edi
c0002a2f:	5d                   	pop    ebp
c0002a30:	c3                   	ret    

c0002a31 <find_bitmap>:
c0002a31:	55                   	push   ebp
c0002a32:	57                   	push   edi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	56                   	push   esi
c0002a36:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a39:	53                   	push   ebx
c0002a3a:	83 ec 1c             	sub    esp,0x1c
c0002a3d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a40:	83 e8 02             	sub    eax,0x2
c0002a43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a47:	39 f0                	cmp    eax,esi
c0002a49:	77 02                	ja     c0002a4d <find_bitmap+0x1c>
c0002a4b:	31 f6                	xor    esi,esi
c0002a4d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a51:	89 f3                	mov    ebx,esi
c0002a53:	31 ed                	xor    ebp,ebp
c0002a55:	89 da                	mov    edx,ebx
c0002a57:	31 c9                	xor    ecx,ecx
c0002a59:	c1 ea 0c             	shr    edx,0xc
c0002a5c:	89 f8                	mov    eax,edi
c0002a5e:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a61:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a64:	e8 b3 f7 ff ff       	call   c000221c <move_window>
c0002a69:	85 c0                	test   eax,eax
c0002a6b:	75 68                	jne    c0002ad5 <find_bitmap+0xa4>
c0002a6d:	89 d9                	mov    ecx,ebx
c0002a6f:	b8 01 00 00 00       	mov    eax,0x1
c0002a74:	83 e1 07             	and    ecx,0x7
c0002a77:	89 da                	mov    edx,ebx
c0002a79:	d3 e0                	shl    eax,cl
c0002a7b:	c1 ea 03             	shr    edx,0x3
c0002a7e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a81:	83 e9 02             	sub    ecx,0x2
c0002a84:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a8a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a8e:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a92:	43                   	inc    ebx
c0002a93:	21 c1                	and    ecx,eax
c0002a95:	01 c0                	add    eax,eax
c0002a97:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a9b:	77 09                	ja     c0002aa6 <find_bitmap+0x75>
c0002a9d:	31 db                	xor    ebx,ebx
c0002a9f:	ba 00 02 00 00       	mov    edx,0x200
c0002aa4:	31 c0                	xor    eax,eax
c0002aa6:	84 c9                	test   cl,cl
c0002aa8:	75 10                	jne    c0002aba <find_bitmap+0x89>
c0002aaa:	45                   	inc    ebp
c0002aab:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002aaf:	75 0f                	jne    c0002ac0 <find_bitmap+0x8f>
c0002ab1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ab5:	83 c0 02             	add    eax,0x2
c0002ab8:	eb 22                	jmp    c0002adc <find_bitmap+0xab>
c0002aba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002abe:	31 ed                	xor    ebp,ebp
c0002ac0:	39 de                	cmp    esi,ebx
c0002ac2:	74 16                	je     c0002ada <find_bitmap+0xa9>
c0002ac4:	84 c0                	test   al,al
c0002ac6:	75 c6                	jne    c0002a8e <find_bitmap+0x5d>
c0002ac8:	42                   	inc    edx
c0002ac9:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002acf:	77 84                	ja     c0002a55 <find_bitmap+0x24>
c0002ad1:	b0 01                	mov    al,0x1
c0002ad3:	eb b9                	jmp    c0002a8e <find_bitmap+0x5d>
c0002ad5:	83 c8 ff             	or     eax,0xffffffff
c0002ad8:	eb 02                	jmp    c0002adc <find_bitmap+0xab>
c0002ada:	31 c0                	xor    eax,eax
c0002adc:	83 c4 1c             	add    esp,0x1c
c0002adf:	5b                   	pop    ebx
c0002ae0:	5e                   	pop    esi
c0002ae1:	5f                   	pop    edi
c0002ae2:	5d                   	pop    ebp
c0002ae3:	c3                   	ret    

c0002ae4 <change_bitmap>:
c0002ae4:	55                   	push   ebp
c0002ae5:	89 cd                	mov    ebp,ecx
c0002ae7:	57                   	push   edi
c0002ae8:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002aeb:	56                   	push   esi
c0002aec:	89 c7                	mov    edi,eax
c0002aee:	53                   	push   ebx
c0002aef:	89 c8                	mov    eax,ecx
c0002af1:	83 ec 1c             	sub    esp,0x1c
c0002af4:	31 d2                	xor    edx,edx
c0002af6:	c1 e8 0c             	shr    eax,0xc
c0002af9:	89 ce                	mov    esi,ecx
c0002afb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002afe:	bb 01 00 00 00       	mov    ebx,0x1
c0002b03:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b06:	83 e1 07             	and    ecx,0x7
c0002b09:	c1 ee 03             	shr    esi,0x3
c0002b0c:	d3 e3                	shl    ebx,cl
c0002b0e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b14:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b18:	89 c1                	mov    ecx,eax
c0002b1a:	89 d3                	mov    ebx,edx
c0002b1c:	83 c1 01             	add    ecx,0x1
c0002b1f:	83 d3 00             	adc    ebx,0x0
c0002b22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b26:	89 d1                	mov    ecx,edx
c0002b28:	89 c2                	mov    edx,eax
c0002b2a:	89 f8                	mov    eax,edi
c0002b2c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b30:	e8 e7 f6 ff ff       	call   c000221c <move_window>
c0002b35:	89 c1                	mov    ecx,eax
c0002b37:	85 c0                	test   eax,eax
c0002b39:	75 48                	jne    c0002b83 <change_bitmap+0x9f>
c0002b3b:	31 d2                	xor    edx,edx
c0002b3d:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b41:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b45:	0f 95 c2             	setne  dl
c0002b48:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b4c:	74 3c                	je     c0002b8a <change_bitmap+0xa6>
c0002b4e:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b52:	4d                   	dec    ebp
c0002b53:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b57:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b5b:	74 32                	je     c0002b8f <change_bitmap+0xab>
c0002b5d:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b61:	75 d8                	jne    c0002b3b <change_bitmap+0x57>
c0002b63:	8d 46 01             	lea    eax,[esi+0x1]
c0002b66:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b6b:	89 c3                	mov    ebx,eax
c0002b6d:	31 f6                	xor    esi,esi
c0002b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b77:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b7d:	74 99                	je     c0002b18 <change_bitmap+0x34>
c0002b7f:	89 de                	mov    esi,ebx
c0002b81:	eb b8                	jmp    c0002b3b <change_bitmap+0x57>
c0002b83:	b9 01 00 00 00       	mov    ecx,0x1
c0002b88:	eb 05                	jmp    c0002b8f <change_bitmap+0xab>
c0002b8a:	b9 02 00 00 00       	mov    ecx,0x2
c0002b8f:	83 c4 1c             	add    esp,0x1c
c0002b92:	89 c8                	mov    eax,ecx
c0002b94:	5b                   	pop    ebx
c0002b95:	5e                   	pop    esi
c0002b96:	5f                   	pop    edi
c0002b97:	5d                   	pop    ebp
c0002b98:	c3                   	ret    

c0002b99 <put_fat>:
c0002b99:	83 fa 01             	cmp    edx,0x1
c0002b9c:	0f 86 7b 01 00 00    	jbe    c0002d1d <put_fat+0x184>
c0002ba2:	55                   	push   ebp
c0002ba3:	57                   	push   edi
c0002ba4:	89 cf                	mov    edi,ecx
c0002ba6:	56                   	push   esi
c0002ba7:	b9 02 00 00 00       	mov    ecx,0x2
c0002bac:	53                   	push   ebx
c0002bad:	89 c6                	mov    esi,eax
c0002baf:	83 ec 1c             	sub    esp,0x1c
c0002bb2:	89 d3                	mov    ebx,edx
c0002bb4:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bb7:	0f 86 68 01 00 00    	jbe    c0002d25 <put_fat+0x18c>
c0002bbd:	8a 00                	mov    al,BYTE PTR [eax]
c0002bbf:	3c 02                	cmp    al,0x2
c0002bc1:	0f 84 c7 00 00 00    	je     c0002c8e <put_fat+0xf5>
c0002bc7:	77 09                	ja     c0002bd2 <put_fat+0x39>
c0002bc9:	fe c8                	dec    al
c0002bcb:	74 17                	je     c0002be4 <put_fat+0x4b>
c0002bcd:	e9 53 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002bd2:	b9 02 00 00 00       	mov    ecx,0x2
c0002bd7:	3c 04                	cmp    al,0x4
c0002bd9:	0f 86 e1 00 00 00    	jbe    c0002cc0 <put_fat+0x127>
c0002bdf:	e9 41 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002be4:	89 d5                	mov    ebp,edx
c0002be6:	31 c9                	xor    ecx,ecx
c0002be8:	d1 ed                	shr    ebp,1
c0002bea:	89 f0                	mov    eax,esi
c0002bec:	01 d5                	add    ebp,edx
c0002bee:	89 ea                	mov    edx,ebp
c0002bf0:	c1 ea 09             	shr    edx,0x9
c0002bf3:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bf6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf9:	e8 1e f6 ff ff       	call   c000221c <move_window>
c0002bfe:	89 c1                	mov    ecx,eax
c0002c00:	85 c0                	test   eax,eax
c0002c02:	0f 85 1d 01 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c08:	8d 46 54             	lea    eax,[esi+0x54]
c0002c0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c0f:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c12:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c20:	83 e3 01             	and    ebx,0x1
c0002c23:	89 f8                	mov    eax,edi
c0002c25:	74 0d                	je     c0002c34 <put_fat+0x9b>
c0002c27:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c2a:	89 fa                	mov    edx,edi
c0002c2c:	c1 e2 04             	shl    edx,0x4
c0002c2f:	83 e0 0f             	and    eax,0xf
c0002c32:	09 d0                	or     eax,edx
c0002c34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c38:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c3b:	c1 ea 09             	shr    edx,0x9
c0002c3e:	31 c9                	xor    ecx,ecx
c0002c40:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c43:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c47:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c4a:	89 f0                	mov    eax,esi
c0002c4c:	e8 cb f5 ff ff       	call   c000221c <move_window>
c0002c51:	89 c1                	mov    ecx,eax
c0002c53:	85 c0                	test   eax,eax
c0002c55:	0f 85 ca 00 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c5b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c5f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c65:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c69:	85 db                	test   ebx,ebx
c0002c6b:	74 07                	je     c0002c74 <put_fat+0xdb>
c0002c6d:	c1 ef 04             	shr    edi,0x4
c0002c70:	89 fa                	mov    edx,edi
c0002c72:	eb 0e                	jmp    c0002c82 <put_fat+0xe9>
c0002c74:	c1 ef 08             	shr    edi,0x8
c0002c77:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c7a:	83 e2 f0             	and    edx,0xfffffff0
c0002c7d:	83 e7 0f             	and    edi,0xf
c0002c80:	09 fa                	or     edx,edi
c0002c82:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c85:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c89:	e9 97 00 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002c8e:	c1 ea 08             	shr    edx,0x8
c0002c91:	31 c9                	xor    ecx,ecx
c0002c93:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c96:	89 f0                	mov    eax,esi
c0002c98:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c9b:	e8 7c f5 ff ff       	call   c000221c <move_window>
c0002ca0:	89 c1                	mov    ecx,eax
c0002ca2:	85 c0                	test   eax,eax
c0002ca4:	75 7f                	jne    c0002d25 <put_fat+0x18c>
c0002ca6:	01 db                	add    ebx,ebx
c0002ca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cac:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cb2:	0f b7 d7             	movzx  edx,di
c0002cb5:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cb9:	e8 f9 ed ff ff       	call   c0001ab7 <st_word>
c0002cbe:	eb 53                	jmp    c0002d13 <put_fat+0x17a>
c0002cc0:	c1 ea 07             	shr    edx,0x7
c0002cc3:	31 c9                	xor    ecx,ecx
c0002cc5:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ccd:	e8 4a f5 ff ff       	call   c000221c <move_window>
c0002cd2:	89 c1                	mov    ecx,eax
c0002cd4:	85 c0                	test   eax,eax
c0002cd6:	75 4d                	jne    c0002d25 <put_fat+0x18c>
c0002cd8:	c1 e3 02             	shl    ebx,0x2
c0002cdb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ce4:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ce8:	74 1c                	je     c0002d06 <put_fat+0x16d>
c0002cea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cee:	89 d8                	mov    eax,ebx
c0002cf0:	e8 5d ed ff ff       	call   c0001a52 <ld_dword>
c0002cf5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cfb:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d04:	09 c7                	or     edi,eax
c0002d06:	89 fa                	mov    edx,edi
c0002d08:	89 d8                	mov    eax,ebx
c0002d0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d0e:	e8 a8 ed ff ff       	call   c0001abb <st_dword>
c0002d13:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d1b:	eb 08                	jmp    c0002d25 <put_fat+0x18c>
c0002d1d:	b9 02 00 00 00       	mov    ecx,0x2
c0002d22:	89 c8                	mov    eax,ecx
c0002d24:	c3                   	ret    
c0002d25:	83 c4 1c             	add    esp,0x1c
c0002d28:	89 c8                	mov    eax,ecx
c0002d2a:	5b                   	pop    ebx
c0002d2b:	5e                   	pop    esi
c0002d2c:	5f                   	pop    edi
c0002d2d:	5d                   	pop    ebp
c0002d2e:	c3                   	ret    

c0002d2f <fill_last_frag>:
c0002d2f:	57                   	push   edi
c0002d30:	89 cf                	mov    edi,ecx
c0002d32:	56                   	push   esi
c0002d33:	89 d6                	mov    esi,edx
c0002d35:	53                   	push   ebx
c0002d36:	89 c3                	mov    ebx,eax
c0002d38:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d3b:	85 c0                	test   eax,eax
c0002d3d:	74 21                	je     c0002d60 <fill_last_frag+0x31>
c0002d3f:	89 f9                	mov    ecx,edi
c0002d41:	83 f8 01             	cmp    eax,0x1
c0002d44:	76 05                	jbe    c0002d4b <fill_last_frag+0x1c>
c0002d46:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d49:	29 c1                	sub    ecx,eax
c0002d4b:	8d 56 01             	lea    edx,[esi+0x1]
c0002d4e:	29 c2                	sub    edx,eax
c0002d50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d52:	e8 42 fe ff ff       	call   c0002b99 <put_fat>
c0002d57:	85 c0                	test   eax,eax
c0002d59:	75 05                	jne    c0002d60 <fill_last_frag+0x31>
c0002d5b:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d5e:	eb d8                	jmp    c0002d38 <fill_last_frag+0x9>
c0002d60:	5b                   	pop    ebx
c0002d61:	5e                   	pop    esi
c0002d62:	5f                   	pop    edi
c0002d63:	c3                   	ret    

c0002d64 <fill_first_frag>:
c0002d64:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d68:	75 2d                	jne    c0002d97 <fill_first_frag+0x33>
c0002d6a:	57                   	push   edi
c0002d6b:	56                   	push   esi
c0002d6c:	53                   	push   ebx
c0002d6d:	89 c3                	mov    ebx,eax
c0002d6f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d72:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d75:	01 d7                	add    edi,edx
c0002d77:	39 fa                	cmp    edx,edi
c0002d79:	74 14                	je     c0002d8f <fill_first_frag+0x2b>
c0002d7b:	8d 72 01             	lea    esi,[edx+0x1]
c0002d7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d80:	89 f1                	mov    ecx,esi
c0002d82:	e8 12 fe ff ff       	call   c0002b99 <put_fat>
c0002d87:	89 f2                	mov    edx,esi
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	74 ea                	je     c0002d77 <fill_first_frag+0x13>
c0002d8d:	eb 0b                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d8f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d93:	31 c0                	xor    eax,eax
c0002d95:	eb 03                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d97:	31 c0                	xor    eax,eax
c0002d99:	c3                   	ret    
c0002d9a:	5b                   	pop    ebx
c0002d9b:	5e                   	pop    esi
c0002d9c:	5f                   	pop    edi
c0002d9d:	c3                   	ret    

c0002d9e <get_fat>:
c0002d9e:	83 fa 01             	cmp    edx,0x1
c0002da1:	0f 86 db 01 00 00    	jbe    c0002f82 <get_fat+0x1e4>
c0002da7:	55                   	push   ebp
c0002da8:	b9 01 00 00 00       	mov    ecx,0x1
c0002dad:	57                   	push   edi
c0002dae:	56                   	push   esi
c0002daf:	53                   	push   ebx
c0002db0:	83 ec 1c             	sub    esp,0x1c
c0002db3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002db5:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002db8:	0f 86 cc 01 00 00    	jbe    c0002f8a <get_fat+0x1ec>
c0002dbe:	89 c3                	mov    ebx,eax
c0002dc0:	8a 07                	mov    al,BYTE PTR [edi]
c0002dc2:	89 d6                	mov    esi,edx
c0002dc4:	3c 02                	cmp    al,0x2
c0002dc6:	0f 84 99 00 00 00    	je     c0002e65 <get_fat+0xc7>
c0002dcc:	77 09                	ja     c0002dd7 <get_fat+0x39>
c0002dce:	fe c8                	dec    al
c0002dd0:	74 1a                	je     c0002dec <get_fat+0x4e>
c0002dd2:	e9 b3 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dd7:	3c 03                	cmp    al,0x3
c0002dd9:	0f 84 b5 00 00 00    	je     c0002e94 <get_fat+0xf6>
c0002ddf:	3c 04                	cmp    al,0x4
c0002de1:	0f 84 e3 00 00 00    	je     c0002eca <get_fat+0x12c>
c0002de7:	e9 9e 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dec:	89 d3                	mov    ebx,edx
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	d1 eb                	shr    ebx,1
c0002df2:	89 f8                	mov    eax,edi
c0002df4:	01 d3                	add    ebx,edx
c0002df6:	89 da                	mov    edx,ebx
c0002df8:	c1 ea 09             	shr    edx,0x9
c0002dfb:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dfe:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e01:	e8 16 f4 ff ff       	call   c000221c <move_window>
c0002e06:	85 c0                	test   eax,eax
c0002e08:	74 08                	je     c0002e12 <get_fat+0x74>
c0002e0a:	83 c9 ff             	or     ecx,0xffffffff
c0002e0d:	e9 78 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e12:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e15:	31 c9                	xor    ecx,ecx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e1f:	c1 ea 09             	shr    edx,0x9
c0002e22:	89 f8                	mov    eax,edi
c0002e24:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e27:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e2b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e2e:	e8 e9 f3 ff ff       	call   c000221c <move_window>
c0002e33:	85 c0                	test   eax,eax
c0002e35:	75 d3                	jne    c0002e0a <get_fat+0x6c>
c0002e37:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e3d:	0f b6 c3             	movzx  eax,bl
c0002e40:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e45:	c1 e3 08             	shl    ebx,0x8
c0002e48:	09 c3                	or     ebx,eax
c0002e4a:	89 d9                	mov    ecx,ebx
c0002e4c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e52:	83 e6 01             	and    esi,0x1
c0002e55:	0f 84 2f 01 00 00    	je     c0002f8a <get_fat+0x1ec>
c0002e5b:	89 d9                	mov    ecx,ebx
c0002e5d:	c1 e9 04             	shr    ecx,0x4
c0002e60:	e9 25 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e65:	c1 ea 08             	shr    edx,0x8
c0002e68:	31 c9                	xor    ecx,ecx
c0002e6a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e6d:	89 f8                	mov    eax,edi
c0002e6f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e72:	e8 a5 f3 ff ff       	call   c000221c <move_window>
c0002e77:	85 c0                	test   eax,eax
c0002e79:	75 8f                	jne    c0002e0a <get_fat+0x6c>
c0002e7b:	01 f6                	add    esi,esi
c0002e7d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e83:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e87:	e8 b9 eb ff ff       	call   c0001a45 <ld_word>
c0002e8c:	0f b7 c8             	movzx  ecx,ax
c0002e8f:	e9 f6 00 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e94:	c1 ea 07             	shr    edx,0x7
c0002e97:	31 c9                	xor    ecx,ecx
c0002e99:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9c:	89 f8                	mov    eax,edi
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 76 f3 ff ff       	call   c000221c <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 5c ff ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 92 eb ff ff       	call   c0001a52 <ld_dword>
c0002ec0:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ec5:	e9 b4 00 00 00       	jmp    c0002f7e <get_fat+0x1e0>
c0002eca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ecd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed0:	89 d1                	mov    ecx,edx
c0002ed2:	09 c1                	or     ecx,eax
c0002ed4:	74 06                	je     c0002edc <get_fat+0x13e>
c0002ed6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eda:	75 0f                	jne    c0002eeb <get_fat+0x14d>
c0002edc:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee1:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ee5:	0f 85 9f 00 00 00    	jne    c0002f8a <get_fat+0x1ec>
c0002eeb:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eef:	89 f5                	mov    ebp,esi
c0002ef1:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ef6:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ef9:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002efc:	80 f9 02             	cmp    cl,0x2
c0002eff:	75 35                	jne    c0002f36 <get_fat+0x198>
c0002f01:	83 c0 ff             	add    eax,0xffffffff
c0002f04:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f09:	83 d2 ff             	adc    edx,0xffffffff
c0002f0c:	31 db                	xor    ebx,ebx
c0002f0e:	53                   	push   ebx
c0002f0f:	51                   	push   ecx
c0002f10:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f14:	c1 ea 09             	shr    edx,0x9
c0002f17:	52                   	push   edx
c0002f18:	50                   	push   eax
c0002f19:	e8 ae c4 01 00       	call   c001f3cc <__udivdi3>
c0002f1e:	83 c4 10             	add    esp,0x10
c0002f21:	b9 01 00 00 00       	mov    ecx,0x1
c0002f26:	39 c5                	cmp    ebp,eax
c0002f28:	77 60                	ja     c0002f8a <get_fat+0x1ec>
c0002f2a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f2f:	74 59                	je     c0002f8a <get_fat+0x1ec>
c0002f31:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f34:	eb 54                	jmp    c0002f8a <get_fat+0x1ec>
c0002f36:	80 f9 03             	cmp    cl,0x3
c0002f39:	75 05                	jne    c0002f40 <get_fat+0x1a2>
c0002f3b:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f3e:	77 f1                	ja     c0002f31 <get_fat+0x193>
c0002f40:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f45:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f49:	75 3f                	jne    c0002f8a <get_fat+0x1ec>
c0002f4b:	89 f2                	mov    edx,esi
c0002f4d:	31 c9                	xor    ecx,ecx
c0002f4f:	c1 ea 07             	shr    edx,0x7
c0002f52:	89 f8                	mov    eax,edi
c0002f54:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f57:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f5a:	e8 bd f2 ff ff       	call   c000221c <move_window>
c0002f5f:	85 c0                	test   eax,eax
c0002f61:	0f 85 a3 fe ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002f67:	c1 e6 02             	shl    esi,0x2
c0002f6a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f70:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f74:	e8 d9 ea ff ff       	call   c0001a52 <ld_dword>
c0002f79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f7e:	89 c1                	mov    ecx,eax
c0002f80:	eb 08                	jmp    c0002f8a <get_fat+0x1ec>
c0002f82:	b9 01 00 00 00       	mov    ecx,0x1
c0002f87:	89 c8                	mov    eax,ecx
c0002f89:	c3                   	ret    
c0002f8a:	83 c4 1c             	add    esp,0x1c
c0002f8d:	89 c8                	mov    eax,ecx
c0002f8f:	5b                   	pop    ebx
c0002f90:	5e                   	pop    esi
c0002f91:	5f                   	pop    edi
c0002f92:	5d                   	pop    ebp
c0002f93:	c3                   	ret    

c0002f94 <dir_sdi>:
c0002f94:	55                   	push   ebp
c0002f95:	57                   	push   edi
c0002f96:	56                   	push   esi
c0002f97:	53                   	push   ebx
c0002f98:	89 c3                	mov    ebx,eax
c0002f9a:	83 ec 1c             	sub    esp,0x1c
c0002f9d:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f9f:	31 c0                	xor    eax,eax
c0002fa1:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fa4:	0f 94 c0             	sete   al
c0002fa7:	48                   	dec    eax
c0002fa8:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fad:	05 00 00 00 10       	add    eax,0x10000000
c0002fb2:	39 d0                	cmp    eax,edx
c0002fb4:	77 0a                	ja     c0002fc0 <dir_sdi+0x2c>
c0002fb6:	b8 02 00 00 00       	mov    eax,0x2
c0002fbb:	e9 c4 00 00 00       	jmp    c0003084 <dir_sdi+0xf0>
c0002fc0:	89 d6                	mov    esi,edx
c0002fc2:	f6 c2 1f             	test   dl,0x1f
c0002fc5:	75 ef                	jne    c0002fb6 <dir_sdi+0x22>
c0002fc7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fca:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fcd:	85 c9                	test   ecx,ecx
c0002fcf:	75 2d                	jne    c0002ffe <dir_sdi+0x6a>
c0002fd1:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fd4:	77 1b                	ja     c0002ff1 <dir_sdi+0x5d>
c0002fd6:	89 f2                	mov    edx,esi
c0002fd8:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fdc:	c1 ea 05             	shr    edx,0x5
c0002fdf:	39 c2                	cmp    edx,eax
c0002fe1:	73 d3                	jae    c0002fb6 <dir_sdi+0x22>
c0002fe3:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fe6:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fe9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fec:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fef:	eb 4b                	jmp    c000303c <dir_sdi+0xa8>
c0002ff1:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff4:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ff8:	85 c0                	test   eax,eax
c0002ffa:	74 da                	je     c0002fd6 <dir_sdi+0x42>
c0002ffc:	89 c1                	mov    ecx,eax
c0002ffe:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003002:	c1 e5 09             	shl    ebp,0x9
c0003005:	89 ca                	mov    edx,ecx
c0003007:	39 ee                	cmp    esi,ebp
c0003009:	72 1c                	jb     c0003027 <dir_sdi+0x93>
c000300b:	89 d8                	mov    eax,ebx
c000300d:	e8 8c fd ff ff       	call   c0002d9e <get_fat>
c0003012:	89 c1                	mov    ecx,eax
c0003014:	83 f8 ff             	cmp    eax,0xffffffff
c0003017:	74 66                	je     c000307f <dir_sdi+0xeb>
c0003019:	83 f8 01             	cmp    eax,0x1
c000301c:	76 98                	jbe    c0002fb6 <dir_sdi+0x22>
c000301e:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003021:	76 93                	jbe    c0002fb6 <dir_sdi+0x22>
c0003023:	29 ee                	sub    esi,ebp
c0003025:	eb de                	jmp    c0003005 <dir_sdi+0x71>
c0003027:	89 f8                	mov    eax,edi
c0003029:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302d:	e8 ac ec ff ff       	call   c0001cde <clst2sect>
c0003032:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003036:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000303f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003042:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003045:	89 d1                	mov    ecx,edx
c0003047:	09 c1                	or     ecx,eax
c0003049:	0f 84 67 ff ff ff    	je     c0002fb6 <dir_sdi+0x22>
c000304f:	89 f1                	mov    ecx,esi
c0003051:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003059:	c1 e9 09             	shr    ecx,0x9
c000305c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003060:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003064:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003068:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000306e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003071:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003075:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003078:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000307b:	31 c0                	xor    eax,eax
c000307d:	eb 05                	jmp    c0003084 <dir_sdi+0xf0>
c000307f:	b8 01 00 00 00       	mov    eax,0x1
c0003084:	83 c4 1c             	add    esp,0x1c
c0003087:	5b                   	pop    ebx
c0003088:	5e                   	pop    esi
c0003089:	5f                   	pop    edi
c000308a:	5d                   	pop    ebp
c000308b:	c3                   	ret    

c000308c <create_chain>:
c000308c:	55                   	push   ebp
c000308d:	89 c5                	mov    ebp,eax
c000308f:	57                   	push   edi
c0003090:	56                   	push   esi
c0003091:	53                   	push   ebx
c0003092:	83 ec 1c             	sub    esp,0x1c
c0003095:	85 d2                	test   edx,edx
c0003097:	8b 30                	mov    esi,DWORD PTR [eax]
c0003099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000309d:	75 0e                	jne    c00030ad <create_chain+0x21>
c000309f:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030a2:	85 ff                	test   edi,edi
c00030a4:	74 39                	je     c00030df <create_chain+0x53>
c00030a6:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030a9:	77 39                	ja     c00030e4 <create_chain+0x58>
c00030ab:	eb 32                	jmp    c00030df <create_chain+0x53>
c00030ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b1:	e8 e8 fc ff ff       	call   c0002d9e <get_fat>
c00030b6:	89 c3                	mov    ebx,eax
c00030b8:	83 f8 01             	cmp    eax,0x1
c00030bb:	77 0a                	ja     c00030c7 <create_chain+0x3b>
c00030bd:	bb 01 00 00 00       	mov    ebx,0x1
c00030c2:	e9 bc 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030c7:	83 f8 ff             	cmp    eax,0xffffffff
c00030ca:	0f 84 60 01 00 00    	je     c0003230 <create_chain+0x1a4>
c00030d0:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030d3:	0f 87 aa 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c00030d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030dd:	eb 05                	jmp    c00030e4 <create_chain+0x58>
c00030df:	bf 01 00 00 00       	mov    edi,0x1
c00030e4:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030e8:	75 07                	jne    c00030f1 <create_chain+0x65>
c00030ea:	31 db                	xor    ebx,ebx
c00030ec:	e9 92 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030f1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030f4:	75 74                	jne    c000316a <create_chain+0xde>
c00030f6:	b9 01 00 00 00       	mov    ecx,0x1
c00030fb:	89 fa                	mov    edx,edi
c00030fd:	89 f0                	mov    eax,esi
c00030ff:	e8 2d f9 ff ff       	call   c0002a31 <find_bitmap>
c0003104:	89 c3                	mov    ebx,eax
c0003106:	8d 40 ff             	lea    eax,[eax-0x1]
c0003109:	83 f8 fd             	cmp    eax,0xfffffffd
c000310c:	0f 87 71 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c0003112:	83 ec 0c             	sub    esp,0xc
c0003115:	b9 01 00 00 00       	mov    ecx,0x1
c000311a:	89 da                	mov    edx,ebx
c000311c:	89 f0                	mov    eax,esi
c000311e:	6a 01                	push   0x1
c0003120:	e8 bf f9 ff ff       	call   c0002ae4 <change_bitmap>
c0003125:	83 c4 10             	add    esp,0x10
c0003128:	83 f8 02             	cmp    eax,0x2
c000312b:	74 90                	je     c00030bd <create_chain+0x31>
c000312d:	83 f8 01             	cmp    eax,0x1
c0003130:	0f 84 fa 00 00 00    	je     c0003230 <create_chain+0x1a4>
c0003136:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000313b:	75 09                	jne    c0003146 <create_chain+0xba>
c000313d:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003141:	e9 0e 01 00 00       	jmp    c0003254 <create_chain+0x1c8>
c0003146:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000314a:	0f 85 e9 00 00 00    	jne    c0003239 <create_chain+0x1ad>
c0003150:	8d 57 01             	lea    edx,[edi+0x1]
c0003153:	39 da                	cmp    edx,ebx
c0003155:	0f 84 f9 00 00 00    	je     c0003254 <create_chain+0x1c8>
c000315b:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000315e:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003162:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003165:	e9 cf 00 00 00       	jmp    c0003239 <create_chain+0x1ad>
c000316a:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000316e:	75 41                	jne    c00031b1 <create_chain+0x125>
c0003170:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003173:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003176:	77 05                	ja     c000317d <create_chain+0xf1>
c0003178:	bb 02 00 00 00       	mov    ebx,0x2
c000317d:	89 da                	mov    edx,ebx
c000317f:	89 e8                	mov    eax,ebp
c0003181:	e8 18 fc ff ff       	call   c0002d9e <get_fat>
c0003186:	83 f8 01             	cmp    eax,0x1
c0003189:	0f 84 a6 00 00 00    	je     c0003235 <create_chain+0x1a9>
c000318f:	83 f8 ff             	cmp    eax,0xffffffff
c0003192:	0f 84 9d 00 00 00    	je     c0003235 <create_chain+0x1a9>
c0003198:	85 c0                	test   eax,eax
c000319a:	74 11                	je     c00031ad <create_chain+0x121>
c000319c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	76 0d                	jbe    c00031b1 <create_chain+0x125>
c00031a4:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031a7:	76 08                	jbe    c00031b1 <create_chain+0x125>
c00031a9:	89 c7                	mov    edi,eax
c00031ab:	eb 04                	jmp    c00031b1 <create_chain+0x125>
c00031ad:	85 db                	test   ebx,ebx
c00031af:	75 36                	jne    c00031e7 <create_chain+0x15b>
c00031b1:	89 fb                	mov    ebx,edi
c00031b3:	43                   	inc    ebx
c00031b4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031b7:	77 0e                	ja     c00031c7 <create_chain+0x13b>
c00031b9:	83 ff 01             	cmp    edi,0x1
c00031bc:	0f 86 28 ff ff ff    	jbe    c00030ea <create_chain+0x5e>
c00031c2:	bb 02 00 00 00       	mov    ebx,0x2
c00031c7:	89 da                	mov    edx,ebx
c00031c9:	89 e8                	mov    eax,ebp
c00031cb:	e8 ce fb ff ff       	call   c0002d9e <get_fat>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 13                	je     c00031e7 <create_chain+0x15b>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	74 5c                	je     c0003235 <create_chain+0x1a9>
c00031d9:	83 f8 ff             	cmp    eax,0xffffffff
c00031dc:	74 57                	je     c0003235 <create_chain+0x1a9>
c00031de:	39 fb                	cmp    ebx,edi
c00031e0:	75 d1                	jne    c00031b3 <create_chain+0x127>
c00031e2:	e9 03 ff ff ff       	jmp    c00030ea <create_chain+0x5e>
c00031e7:	83 c9 ff             	or     ecx,0xffffffff
c00031ea:	89 da                	mov    edx,ebx
c00031ec:	89 f0                	mov    eax,esi
c00031ee:	e8 a6 f9 ff ff       	call   c0002b99 <put_fat>
c00031f3:	85 c0                	test   eax,eax
c00031f5:	75 14                	jne    c000320b <create_chain+0x17f>
c00031f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031fc:	74 0d                	je     c000320b <create_chain+0x17f>
c00031fe:	89 d9                	mov    ecx,ebx
c0003200:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003204:	89 f0                	mov    eax,esi
c0003206:	e8 8e f9 ff ff       	call   c0002b99 <put_fat>
c000320b:	85 c0                	test   eax,eax
c000320d:	75 1a                	jne    c0003229 <create_chain+0x19d>
c000320f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003212:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003215:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003218:	8d 51 fe             	lea    edx,[ecx-0x2]
c000321b:	39 d0                	cmp    eax,edx
c000321d:	77 04                	ja     c0003223 <create_chain+0x197>
c000321f:	48                   	dec    eax
c0003220:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003223:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003227:	eb 5a                	jmp    c0003283 <create_chain+0x1f7>
c0003229:	48                   	dec    eax
c000322a:	0f 85 8d fe ff ff    	jne    c00030bd <create_chain+0x31>
c0003230:	83 cb ff             	or     ebx,0xffffffff
c0003233:	eb 4e                	jmp    c0003283 <create_chain+0x1f7>
c0003235:	89 c3                	mov    ebx,eax
c0003237:	eb 4a                	jmp    c0003283 <create_chain+0x1f7>
c0003239:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000323d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003240:	41                   	inc    ecx
c0003241:	39 d9                	cmp    ecx,ebx
c0003243:	75 19                	jne    c000325e <create_chain+0x1d2>
c0003245:	b9 02 00 00 00       	mov    ecx,0x2
c000324a:	85 d2                	test   edx,edx
c000324c:	74 03                	je     c0003251 <create_chain+0x1c5>
c000324e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003251:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003254:	85 c0                	test   eax,eax
c0003256:	0f 85 61 fe ff ff    	jne    c00030bd <create_chain+0x31>
c000325c:	eb b1                	jmp    c000320f <create_chain+0x183>
c000325e:	85 d2                	test   edx,edx
c0003260:	75 07                	jne    c0003269 <create_chain+0x1dd>
c0003262:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003269:	89 d9                	mov    ecx,ebx
c000326b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000326f:	89 e8                	mov    eax,ebp
c0003271:	e8 b9 fa ff ff       	call   c0002d2f <fill_last_frag>
c0003276:	85 c0                	test   eax,eax
c0003278:	75 af                	jne    c0003229 <create_chain+0x19d>
c000327a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003281:	eb 8c                	jmp    c000320f <create_chain+0x183>
c0003283:	83 c4 1c             	add    esp,0x1c
c0003286:	89 d8                	mov    eax,ebx
c0003288:	5b                   	pop    ebx
c0003289:	5e                   	pop    esi
c000328a:	5f                   	pop    edi
c000328b:	5d                   	pop    ebp
c000328c:	c3                   	ret    

c000328d <remove_chain>:
c000328d:	55                   	push   ebp
c000328e:	57                   	push   edi
c000328f:	56                   	push   esi
c0003290:	53                   	push   ebx
c0003291:	83 ec 1c             	sub    esp,0x1c
c0003294:	83 fa 01             	cmp    edx,0x1
c0003297:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003299:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329d:	77 0a                	ja     c00032a9 <remove_chain+0x1c>
c000329f:	b8 02 00 00 00       	mov    eax,0x2
c00032a4:	e9 24 01 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032a9:	89 d6                	mov    esi,edx
c00032ab:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032ae:	76 ef                	jbe    c000329f <remove_chain+0x12>
c00032b0:	89 c7                	mov    edi,eax
c00032b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032b7:	75 06                	jne    c00032bf <remove_chain+0x32>
c00032b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032bd:	eb 54                	jmp    c0003313 <remove_chain+0x86>
c00032bf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c2:	75 06                	jne    c00032ca <remove_chain+0x3d>
c00032c4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032c8:	74 ef                	je     c00032b9 <remove_chain+0x2c>
c00032ca:	83 c9 ff             	or     ecx,0xffffffff
c00032cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d1:	89 d8                	mov    eax,ebx
c00032d3:	e8 c1 f8 ff ff       	call   c0002b99 <put_fat>
c00032d8:	85 c0                	test   eax,eax
c00032da:	74 dd                	je     c00032b9 <remove_chain+0x2c>
c00032dc:	e9 ec 00 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	74 b9                	je     c000329f <remove_chain+0x12>
c00032e6:	83 f8 ff             	cmp    eax,0xffffffff
c00032e9:	74 6d                	je     c0003358 <remove_chain+0xcb>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	75 6f                	jne    c000335f <remove_chain+0xd2>
c00032f0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032f6:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032f9:	39 d0                	cmp    eax,edx
c00032fb:	73 08                	jae    c0003305 <remove_chain+0x78>
c00032fd:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003301:	40                   	inc    eax
c0003302:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003305:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003308:	39 e9                	cmp    ecx,ebp
c000330a:	75 64                	jne    c0003370 <remove_chain+0xe3>
c000330c:	89 ee                	mov    esi,ebp
c000330e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003311:	76 0f                	jbe    c0003322 <remove_chain+0x95>
c0003313:	89 f2                	mov    edx,esi
c0003315:	89 f8                	mov    eax,edi
c0003317:	e8 82 fa ff ff       	call   c0002d9e <get_fat>
c000331c:	89 c5                	mov    ebp,eax
c000331e:	85 c0                	test   eax,eax
c0003320:	75 bf                	jne    c00032e1 <remove_chain+0x54>
c0003322:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003325:	0f 85 a0 00 00 00    	jne    c00033cb <remove_chain+0x13e>
c000332b:	eb 6c                	jmp    c0003399 <remove_chain+0x10c>
c000332d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003330:	84 c0                	test   al,al
c0003332:	75 7d                	jne    c00033b1 <remove_chain+0x124>
c0003334:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003337:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000333b:	0f 84 86 00 00 00    	je     c00033c7 <remove_chain+0x13a>
c0003341:	89 da                	mov    edx,ebx
c0003343:	89 f8                	mov    eax,edi
c0003345:	e8 54 fa ff ff       	call   c0002d9e <get_fat>
c000334a:	83 f8 01             	cmp    eax,0x1
c000334d:	0f 86 4c ff ff ff    	jbe    c000329f <remove_chain+0x12>
c0003353:	83 f8 ff             	cmp    eax,0xffffffff
c0003356:	75 4e                	jne    c00033a6 <remove_chain+0x119>
c0003358:	b8 01 00 00 00       	mov    eax,0x1
c000335d:	eb 6e                	jmp    c00033cd <remove_chain+0x140>
c000335f:	31 c9                	xor    ecx,ecx
c0003361:	89 f2                	mov    edx,esi
c0003363:	89 d8                	mov    eax,ebx
c0003365:	e8 2f f8 ff ff       	call   c0002b99 <put_fat>
c000336a:	85 c0                	test   eax,eax
c000336c:	74 82                	je     c00032f0 <remove_chain+0x63>
c000336e:	eb 5d                	jmp    c00033cd <remove_chain+0x140>
c0003370:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003373:	75 1b                	jne    c0003390 <remove_chain+0x103>
c0003375:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003379:	83 ec 0c             	sub    esp,0xc
c000337c:	6a 00                	push   0x0
c000337e:	89 d8                	mov    eax,ebx
c0003380:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003384:	e8 5b f7 ff ff       	call   c0002ae4 <change_bitmap>
c0003389:	83 c4 10             	add    esp,0x10
c000338c:	85 c0                	test   eax,eax
c000338e:	75 3d                	jne    c00033cd <remove_chain+0x140>
c0003390:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003394:	e9 73 ff ff ff       	jmp    c000330c <remove_chain+0x7f>
c0003399:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000339e:	75 8d                	jne    c000332d <remove_chain+0xa0>
c00033a0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033a4:	eb 25                	jmp    c00033cb <remove_chain+0x13e>
c00033a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033a9:	89 c3                	mov    ebx,eax
c00033ab:	39 c2                	cmp    edx,eax
c00033ad:	74 88                	je     c0003337 <remove_chain+0xaa>
c00033af:	eb 1a                	jmp    c00033cb <remove_chain+0x13e>
c00033b1:	3c 03                	cmp    al,0x3
c00033b3:	75 16                	jne    c00033cb <remove_chain+0x13e>
c00033b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033b8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033bc:	77 0d                	ja     c00033cb <remove_chain+0x13e>
c00033be:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c5:	72 04                	jb     c00033cb <remove_chain+0x13e>
c00033c7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033cb:	31 c0                	xor    eax,eax
c00033cd:	83 c4 1c             	add    esp,0x1c
c00033d0:	5b                   	pop    ebx
c00033d1:	5e                   	pop    esi
c00033d2:	5f                   	pop    edi
c00033d3:	5d                   	pop    ebp
c00033d4:	c3                   	ret    

c00033d5 <dir_clear>:
c00033d5:	55                   	push   ebp
c00033d6:	57                   	push   edi
c00033d7:	56                   	push   esi
c00033d8:	89 c6                	mov    esi,eax
c00033da:	53                   	push   ebx
c00033db:	83 ec 1c             	sub    esp,0x1c
c00033de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e2:	e8 a1 ed ff ff       	call   c0002188 <sync_window>
c00033e7:	85 c0                	test   eax,eax
c00033e9:	0f 85 de 00 00 00    	jne    c00034cd <dir_clear+0xf8>
c00033ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f3:	89 f0                	mov    eax,esi
c00033f5:	e8 e4 e8 ff ff       	call   c0001cde <clst2sect>
c00033fa:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003401:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003405:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003408:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000340b:	b9 00 02 00 00       	mov    ecx,0x200
c0003410:	31 d2                	xor    edx,edx
c0003412:	89 e8                	mov    eax,ebp
c0003414:	e8 c0 e6 ff ff       	call   c0001ad9 <mem_set>
c0003419:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000341d:	c1 e3 09             	shl    ebx,0x9
c0003420:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003426:	76 1f                	jbe    c0003447 <dir_clear+0x72>
c0003428:	bb 00 80 00 00       	mov    ebx,0x8000
c000342d:	eb 18                	jmp    c0003447 <dir_clear+0x72>
c000342f:	83 ec 0c             	sub    esp,0xc
c0003432:	53                   	push   ebx
c0003433:	e8 f3 4d 00 00       	call   c000822b <ff_memalloc>
c0003438:	83 c4 10             	add    esp,0x10
c000343b:	89 c7                	mov    edi,eax
c000343d:	85 c0                	test   eax,eax
c000343f:	0f 85 8f 00 00 00    	jne    c00034d4 <dir_clear+0xff>
c0003445:	d1 eb                	shr    ebx,1
c0003447:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000344d:	77 e0                	ja     c000342f <dir_clear+0x5a>
c000344f:	31 db                	xor    ebx,ebx
c0003451:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003455:	39 d8                	cmp    eax,ebx
c0003457:	76 66                	jbe    c00034bf <dir_clear+0xea>
c0003459:	83 ec 0c             	sub    esp,0xc
c000345c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003460:	6a 01                	push   0x1
c0003462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346a:	55                   	push   ebp
c000346b:	50                   	push   eax
c000346c:	e8 9f e5 ff ff       	call   c0001a10 <disk_write>
c0003471:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003476:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000347b:	83 c4 20             	add    esp,0x20
c000347e:	85 c0                	test   eax,eax
c0003480:	75 3d                	jne    c00034bf <dir_clear+0xea>
c0003482:	43                   	inc    ebx
c0003483:	eb cc                	jmp    c0003451 <dir_clear+0x7c>
c0003485:	83 ec 0c             	sub    esp,0xc
c0003488:	89 d8                	mov    eax,ebx
c000348a:	31 d2                	xor    edx,edx
c000348c:	55                   	push   ebp
c000348d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003491:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003495:	52                   	push   edx
c0003496:	50                   	push   eax
c0003497:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000349b:	57                   	push   edi
c000349c:	50                   	push   eax
c000349d:	e8 6e e5 ff ff       	call   c0001a10 <disk_write>
c00034a2:	83 c4 20             	add    esp,0x20
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 0a                	jne    c00034b3 <dir_clear+0xde>
c00034a9:	01 eb                	add    ebx,ebp
c00034ab:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034af:	39 d8                	cmp    eax,ebx
c00034b1:	77 d2                	ja     c0003485 <dir_clear+0xb0>
c00034b3:	83 ec 0c             	sub    esp,0xc
c00034b6:	57                   	push   edi
c00034b7:	e8 85 4d 00 00       	call   c0008241 <ff_memfree>
c00034bc:	83 c4 10             	add    esp,0x10
c00034bf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c3:	39 d8                	cmp    eax,ebx
c00034c5:	0f 95 c0             	setne  al
c00034c8:	0f b6 c0             	movzx  eax,al
c00034cb:	eb 19                	jmp    c00034e6 <dir_clear+0x111>
c00034cd:	b8 01 00 00 00       	mov    eax,0x1
c00034d2:	eb 12                	jmp    c00034e6 <dir_clear+0x111>
c00034d4:	89 d9                	mov    ecx,ebx
c00034d6:	31 d2                	xor    edx,edx
c00034d8:	c1 eb 09             	shr    ebx,0x9
c00034db:	e8 f9 e5 ff ff       	call   c0001ad9 <mem_set>
c00034e0:	89 dd                	mov    ebp,ebx
c00034e2:	31 db                	xor    ebx,ebx
c00034e4:	eb c5                	jmp    c00034ab <dir_clear+0xd6>
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_next>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	53                   	push   ebx
c00034f2:	89 c3                	mov    ebx,eax
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034f9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003500:	8d 78 20             	lea    edi,[eax+0x20]
c0003503:	31 c0                	xor    eax,eax
c0003505:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003509:	0f 94 c0             	sete   al
c000350c:	48                   	dec    eax
c000350d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003512:	05 00 00 00 10       	add    eax,0x10000000
c0003517:	39 f8                	cmp    eax,edi
c0003519:	77 0e                	ja     c0003529 <dir_next+0x3b>
c000351b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003522:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003529:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000352c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000352f:	89 ce                	mov    esi,ecx
c0003531:	b8 04 00 00 00       	mov    eax,0x4
c0003536:	09 d6                	or     esi,edx
c0003538:	0f 84 da 00 00 00    	je     c0003618 <dir_next+0x12a>
c000353e:	89 f8                	mov    eax,edi
c0003540:	25 ff 01 00 00       	and    eax,0x1ff
c0003545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003549:	0f 85 b9 00 00 00    	jne    c0003608 <dir_next+0x11a>
c000354f:	83 c2 01             	add    edx,0x1
c0003552:	83 d1 00             	adc    ecx,0x0
c0003555:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003558:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000355b:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000355e:	85 d2                	test   edx,edx
c0003560:	75 29                	jne    c000358b <dir_next+0x9d>
c0003562:	89 fa                	mov    edx,edi
c0003564:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003568:	c1 ea 05             	shr    edx,0x5
c000356b:	39 c2                	cmp    edx,eax
c000356d:	0f 82 95 00 00 00    	jb     c0003608 <dir_next+0x11a>
c0003573:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000357a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003581:	b8 04 00 00 00       	mov    eax,0x4
c0003586:	e9 8d 00 00 00       	jmp    c0003618 <dir_next+0x12a>
c000358b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000358f:	89 f9                	mov    ecx,edi
c0003591:	48                   	dec    eax
c0003592:	c1 e9 09             	shr    ecx,0x9
c0003595:	85 c8                	test   eax,ecx
c0003597:	75 6f                	jne    c0003608 <dir_next+0x11a>
c0003599:	89 d8                	mov    eax,ebx
c000359b:	e8 fe f7 ff ff       	call   c0002d9e <get_fat>
c00035a0:	89 c6                	mov    esi,eax
c00035a2:	83 f8 01             	cmp    eax,0x1
c00035a5:	77 07                	ja     c00035ae <dir_next+0xc0>
c00035a7:	b8 02 00 00 00       	mov    eax,0x2
c00035ac:	eb 6a                	jmp    c0003618 <dir_next+0x12a>
c00035ae:	83 f8 ff             	cmp    eax,0xffffffff
c00035b1:	75 07                	jne    c00035ba <dir_next+0xcc>
c00035b3:	b8 01 00 00 00       	mov    eax,0x1
c00035b8:	eb 5e                	jmp    c0003618 <dir_next+0x12a>
c00035ba:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035bd:	77 37                	ja     c00035f6 <dir_next+0x108>
c00035bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035c4:	74 ad                	je     c0003573 <dir_next+0x85>
c00035c6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035c9:	89 d8                	mov    eax,ebx
c00035cb:	e8 bc fa ff ff       	call   c000308c <create_chain>
c00035d0:	89 c6                	mov    esi,eax
c00035d2:	b8 07 00 00 00       	mov    eax,0x7
c00035d7:	85 f6                	test   esi,esi
c00035d9:	74 3d                	je     c0003618 <dir_next+0x12a>
c00035db:	83 fe 01             	cmp    esi,0x1
c00035de:	74 c7                	je     c00035a7 <dir_next+0xb9>
c00035e0:	83 fe ff             	cmp    esi,0xffffffff
c00035e3:	74 ce                	je     c00035b3 <dir_next+0xc5>
c00035e5:	89 f2                	mov    edx,esi
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 e7 fd ff ff       	call   c00033d5 <dir_clear>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	75 c1                	jne    c00035b3 <dir_next+0xc5>
c00035f2:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035f9:	89 f2                	mov    edx,esi
c00035fb:	89 e8                	mov    eax,ebp
c00035fd:	e8 dc e6 ff ff       	call   c0001cde <clst2sect>
c0003602:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003605:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000360c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000360f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003613:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003616:	31 c0                	xor    eax,eax
c0003618:	83 c4 1c             	add    esp,0x1c
c000361b:	5b                   	pop    ebx
c000361c:	5e                   	pop    esi
c000361d:	5f                   	pop    edi
c000361e:	5d                   	pop    ebp
c000361f:	c3                   	ret    

c0003620 <load_xdir>:
c0003620:	55                   	push   ebp
c0003621:	57                   	push   edi
c0003622:	56                   	push   esi
c0003623:	89 c6                	mov    esi,eax
c0003625:	53                   	push   ebx
c0003626:	83 ec 1c             	sub    esp,0x1c
c0003629:	8b 00                	mov    eax,DWORD PTR [eax]
c000362b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000362e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003631:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003634:	e8 e3 eb ff ff       	call   c000221c <move_window>
c0003639:	89 c3                	mov    ebx,eax
c000363b:	85 c0                	test   eax,eax
c000363d:	0f 85 0c 01 00 00    	jne    c000374f <load_xdir+0x12f>
c0003643:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003646:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003649:	0f 85 fb 00 00 00    	jne    c000374a <load_xdir+0x12a>
c000364f:	89 f8                	mov    eax,edi
c0003651:	b9 20 00 00 00       	mov    ecx,0x20
c0003656:	e8 69 e4 ff ff       	call   c0001ac4 <mem_cpy>
c000365b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000365f:	40                   	inc    eax
c0003660:	c1 e0 05             	shl    eax,0x5
c0003663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003667:	83 e8 60             	sub    eax,0x60
c000366a:	3d 00 02 00 00       	cmp    eax,0x200
c000366f:	0f 87 d5 00 00 00    	ja     c000374a <load_xdir+0x12a>
c0003675:	31 d2                	xor    edx,edx
c0003677:	89 f0                	mov    eax,esi
c0003679:	e8 70 fe ff ff       	call   c00034ee <dir_next>
c000367e:	89 c3                	mov    ebx,eax
c0003680:	83 f8 04             	cmp    eax,0x4
c0003683:	0f 84 c1 00 00 00    	je     c000374a <load_xdir+0x12a>
c0003689:	85 c0                	test   eax,eax
c000368b:	0f 85 be 00 00 00    	jne    c000374f <load_xdir+0x12f>
c0003691:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003694:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003697:	8b 06                	mov    eax,DWORD PTR [esi]
c0003699:	e8 7e eb ff ff       	call   c000221c <move_window>
c000369e:	89 c3                	mov    ebx,eax
c00036a0:	85 c0                	test   eax,eax
c00036a2:	0f 85 a7 00 00 00    	jne    c000374f <load_xdir+0x12f>
c00036a8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036ab:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036ae:	0f 85 96 00 00 00    	jne    c000374a <load_xdir+0x12a>
c00036b4:	8d 47 20             	lea    eax,[edi+0x20]
c00036b7:	b9 20 00 00 00       	mov    ecx,0x20
c00036bc:	e8 03 e4 ff ff       	call   c0001ac4 <mem_cpy>
c00036c1:	31 d2                	xor    edx,edx
c00036c3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036c7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036cc:	83 c0 2c             	add    eax,0x2c
c00036cf:	f7 f1                	div    ecx
c00036d1:	c1 e0 05             	shl    eax,0x5
c00036d4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036d8:	77 70                	ja     c000374a <load_xdir+0x12a>
c00036da:	bd 40 00 00 00       	mov    ebp,0x40
c00036df:	31 d2                	xor    edx,edx
c00036e1:	89 f0                	mov    eax,esi
c00036e3:	e8 06 fe ff ff       	call   c00034ee <dir_next>
c00036e8:	89 c3                	mov    ebx,eax
c00036ea:	83 f8 04             	cmp    eax,0x4
c00036ed:	74 5b                	je     c000374a <load_xdir+0x12a>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 5c                	jne    c000374f <load_xdir+0x12f>
c00036f3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036f6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00036fb:	e8 1c eb ff ff       	call   c000221c <move_window>
c0003700:	89 c3                	mov    ebx,eax
c0003702:	85 c0                	test   eax,eax
c0003704:	75 49                	jne    c000374f <load_xdir+0x12f>
c0003706:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003709:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000370c:	75 3c                	jne    c000374a <load_xdir+0x12a>
c000370e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003714:	77 0d                	ja     c0003723 <load_xdir+0x103>
c0003716:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003719:	b9 20 00 00 00       	mov    ecx,0x20
c000371e:	e8 a1 e3 ff ff       	call   c0001ac4 <mem_cpy>
c0003723:	83 c5 20             	add    ebp,0x20
c0003726:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000372a:	77 b3                	ja     c00036df <load_xdir+0xbf>
c000372c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003732:	77 1b                	ja     c000374f <load_xdir+0x12f>
c0003734:	89 f8                	mov    eax,edi
c0003736:	e8 d8 e7 ff ff       	call   c0001f13 <xdir_sum>
c000373b:	89 c1                	mov    ecx,eax
c000373d:	8d 47 02             	lea    eax,[edi+0x2]
c0003740:	e8 00 e3 ff ff       	call   c0001a45 <ld_word>
c0003745:	66 39 c1             	cmp    cx,ax
c0003748:	74 05                	je     c000374f <load_xdir+0x12f>
c000374a:	bb 02 00 00 00       	mov    ebx,0x2
c000374f:	83 c4 1c             	add    esp,0x1c
c0003752:	89 d8                	mov    eax,ebx
c0003754:	5b                   	pop    ebx
c0003755:	5e                   	pop    esi
c0003756:	5f                   	pop    edi
c0003757:	5d                   	pop    ebp
c0003758:	c3                   	ret    

c0003759 <load_obj_xdir>:
c0003759:	53                   	push   ebx
c000375a:	89 c3                	mov    ebx,eax
c000375c:	83 ec 08             	sub    esp,0x8
c000375f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003761:	89 03                	mov    DWORD PTR [ebx],eax
c0003763:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003766:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003769:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000376c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000376f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003772:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003779:	30 c0                	xor    al,al
c000377b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000378a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000378d:	e8 02 f8 ff ff       	call   c0002f94 <dir_sdi>
c0003792:	85 c0                	test   eax,eax
c0003794:	75 0b                	jne    c00037a1 <load_obj_xdir+0x48>
c0003796:	83 c4 08             	add    esp,0x8
c0003799:	89 d8                	mov    eax,ebx
c000379b:	5b                   	pop    ebx
c000379c:	e9 7f fe ff ff       	jmp    c0003620 <load_xdir>
c00037a1:	83 c4 08             	add    esp,0x8
c00037a4:	5b                   	pop    ebx
c00037a5:	c3                   	ret    

c00037a6 <dir_read>:
c00037a6:	55                   	push   ebp
c00037a7:	bd 04 00 00 00       	mov    ebp,0x4
c00037ac:	57                   	push   edi
c00037ad:	56                   	push   esi
c00037ae:	be ff ff ff ff       	mov    esi,0xffffffff
c00037b3:	53                   	push   ebx
c00037b4:	89 c3                	mov    ebx,eax
c00037b6:	83 ec 1c             	sub    esp,0x1c
c00037b9:	8b 38                	mov    edi,DWORD PTR [eax]
c00037bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037bf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037c4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037c7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037ca:	89 c8                	mov    eax,ecx
c00037cc:	09 d0                	or     eax,edx
c00037ce:	0f 84 25 01 00 00    	je     c00038f9 <dir_read+0x153>
c00037d4:	89 f8                	mov    eax,edi
c00037d6:	e8 41 ea ff ff       	call   c000221c <move_window>
c00037db:	89 c5                	mov    ebp,eax
c00037dd:	85 c0                	test   eax,eax
c00037df:	0f 85 23 01 00 00    	jne    c0003908 <dir_read+0x162>
c00037e5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037e8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037ea:	84 c9                	test   cl,cl
c00037ec:	0f 84 11 01 00 00    	je     c0003903 <dir_read+0x15d>
c00037f2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037f5:	75 48                	jne    c000383f <dir_read+0x99>
c00037f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037fc:	74 10                	je     c000380e <dir_read+0x68>
c00037fe:	80 f9 83             	cmp    cl,0x83
c0003801:	0f 85 dd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003807:	31 ed                	xor    ebp,ebp
c0003809:	e9 08 01 00 00       	jmp    c0003916 <dir_read+0x170>
c000380e:	80 f9 85             	cmp    cl,0x85
c0003811:	0f 85 cd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003817:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000381a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000381d:	89 d8                	mov    eax,ebx
c000381f:	e8 fc fd ff ff       	call   c0003620 <load_xdir>
c0003824:	89 c5                	mov    ebp,eax
c0003826:	85 c0                	test   eax,eax
c0003828:	0f 85 da 00 00 00    	jne    c0003908 <dir_read+0x162>
c000382e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003831:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003834:	83 e0 3f             	and    eax,0x3f
c0003837:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000383a:	e9 d7 00 00 00       	jmp    c0003916 <dir_read+0x170>
c000383f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003842:	83 e0 3f             	and    eax,0x3f
c0003845:	80 f9 e5             	cmp    cl,0xe5
c0003848:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000384c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384f:	0f 84 8a 00 00 00    	je     c00038df <dir_read+0x139>
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	0f 84 81 00 00 00    	je     c00038df <dir_read+0x139>
c000385e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003862:	83 e0 1f             	and    eax,0x1f
c0003865:	83 f8 08             	cmp    eax,0x8
c0003868:	0f 94 c0             	sete   al
c000386b:	0f b6 c0             	movzx  eax,al
c000386e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003872:	75 6b                	jne    c00038df <dir_read+0x139>
c0003874:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003879:	75 44                	jne    c00038bf <dir_read+0x119>
c000387b:	f6 c1 40             	test   cl,0x40
c000387e:	74 12                	je     c0003892 <dir_read+0xec>
c0003880:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003883:	83 e1 bf             	and    ecx,0xffffffbf
c0003886:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000388a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000388d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003890:	eb 06                	jmp    c0003898 <dir_read+0xf2>
c0003892:	89 f0                	mov    eax,esi
c0003894:	38 c8                	cmp    al,cl
c0003896:	75 47                	jne    c00038df <dir_read+0x139>
c0003898:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000389c:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038a4:	75 3e                	jne    c00038e4 <dir_read+0x13e>
c00038a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038a9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ad:	e8 95 e4 ff ff       	call   c0001d47 <pick_lfn>
c00038b2:	85 c0                	test   eax,eax
c00038b4:	74 2e                	je     c00038e4 <dir_read+0x13e>
c00038b6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ba:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038bd:	eb 25                	jmp    c00038e4 <dir_read+0x13e>
c00038bf:	89 f0                	mov    eax,esi
c00038c1:	84 c0                	test   al,al
c00038c3:	75 11                	jne    c00038d6 <dir_read+0x130>
c00038c5:	89 d0                	mov    eax,edx
c00038c7:	e8 35 e6 ff ff       	call   c0001f01 <sum_sfn>
c00038cc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d0:	0f 84 31 ff ff ff    	je     c0003807 <dir_read+0x61>
c00038d6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038dd:	eb 37                	jmp    c0003916 <dir_read+0x170>
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	31 d2                	xor    edx,edx
c00038e6:	89 d8                	mov    eax,ebx
c00038e8:	e8 01 fc ff ff       	call   c00034ee <dir_next>
c00038ed:	89 c5                	mov    ebp,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	0f 84 cd fe ff ff    	je     c00037c4 <dir_read+0x1e>
c00038f7:	eb 0f                	jmp    c0003908 <dir_read+0x162>
c00038f9:	85 ed                	test   ebp,ebp
c00038fb:	0f 84 06 ff ff ff    	je     c0003807 <dir_read+0x61>
c0003901:	eb 05                	jmp    c0003908 <dir_read+0x162>
c0003903:	bd 04 00 00 00       	mov    ebp,0x4
c0003908:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000390f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003916:	83 c4 1c             	add    esp,0x1c
c0003919:	89 e8                	mov    eax,ebp
c000391b:	5b                   	pop    ebx
c000391c:	5e                   	pop    esi
c000391d:	5f                   	pop    edi
c000391e:	5d                   	pop    ebp
c000391f:	c3                   	ret    

c0003920 <dir_alloc>:
c0003920:	55                   	push   ebp
c0003921:	89 d5                	mov    ebp,edx
c0003923:	57                   	push   edi
c0003924:	31 d2                	xor    edx,edx
c0003926:	56                   	push   esi
c0003927:	53                   	push   ebx
c0003928:	89 c3                	mov    ebx,eax
c000392a:	83 ec 0c             	sub    esp,0xc
c000392d:	8b 38                	mov    edi,DWORD PTR [eax]
c000392f:	e8 60 f6 ff ff       	call   c0002f94 <dir_sdi>
c0003934:	85 c0                	test   eax,eax
c0003936:	75 4e                	jne    c0003986 <dir_alloc+0x66>
c0003938:	31 f6                	xor    esi,esi
c000393a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000393d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003940:	89 f8                	mov    eax,edi
c0003942:	e8 d5 e8 ff ff       	call   c000221c <move_window>
c0003947:	85 c0                	test   eax,eax
c0003949:	75 3b                	jne    c0003986 <dir_alloc+0x66>
c000394b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000394e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003951:	8a 12                	mov    dl,BYTE PTR [edx]
c0003953:	75 07                	jne    c000395c <dir_alloc+0x3c>
c0003955:	f7 d2                	not    edx
c0003957:	c0 ea 07             	shr    dl,0x7
c000395a:	eb 0d                	jmp    c0003969 <dir_alloc+0x49>
c000395c:	80 fa e5             	cmp    dl,0xe5
c000395f:	0f 94 c1             	sete   cl
c0003962:	84 d2                	test   dl,dl
c0003964:	0f 94 c2             	sete   dl
c0003967:	09 ca                	or     edx,ecx
c0003969:	84 d2                	test   dl,dl
c000396b:	74 07                	je     c0003974 <dir_alloc+0x54>
c000396d:	46                   	inc    esi
c000396e:	39 ee                	cmp    esi,ebp
c0003970:	75 04                	jne    c0003976 <dir_alloc+0x56>
c0003972:	eb 1c                	jmp    c0003990 <dir_alloc+0x70>
c0003974:	31 f6                	xor    esi,esi
c0003976:	ba 01 00 00 00       	mov    edx,0x1
c000397b:	89 d8                	mov    eax,ebx
c000397d:	e8 6c fb ff ff       	call   c00034ee <dir_next>
c0003982:	85 c0                	test   eax,eax
c0003984:	74 b4                	je     c000393a <dir_alloc+0x1a>
c0003986:	83 f8 04             	cmp    eax,0x4
c0003989:	75 05                	jne    c0003990 <dir_alloc+0x70>
c000398b:	b8 07 00 00 00       	mov    eax,0x7
c0003990:	83 c4 0c             	add    esp,0xc
c0003993:	5b                   	pop    ebx
c0003994:	5e                   	pop    esi
c0003995:	5f                   	pop    edi
c0003996:	5d                   	pop    ebp
c0003997:	c3                   	ret    

c0003998 <store_xdir>:
c0003998:	55                   	push   ebp
c0003999:	57                   	push   edi
c000399a:	89 c7                	mov    edi,eax
c000399c:	56                   	push   esi
c000399d:	53                   	push   ebx
c000399e:	83 ec 0c             	sub    esp,0xc
c00039a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039a6:	89 e8                	mov    eax,ebp
c00039a8:	e8 66 e5 ff ff       	call   c0001f13 <xdir_sum>
c00039ad:	0f b7 d0             	movzx  edx,ax
c00039b0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039b3:	e8 ff e0 ff ff       	call   c0001ab7 <st_word>
c00039b8:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039bb:	89 f8                	mov    eax,edi
c00039bd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c1:	e8 ce f5 ff ff       	call   c0002f94 <dir_sdi>
c00039c6:	89 c6                	mov    esi,eax
c00039c8:	85 f6                	test   esi,esi
c00039ca:	75 3d                	jne    c0003a09 <store_xdir+0x71>
c00039cc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039cf:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d4:	e8 43 e8 ff ff       	call   c000221c <move_window>
c00039d9:	89 c6                	mov    esi,eax
c00039db:	85 c0                	test   eax,eax
c00039dd:	75 2a                	jne    c0003a09 <store_xdir+0x71>
c00039df:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e2:	b9 20 00 00 00       	mov    ecx,0x20
c00039e7:	89 ea                	mov    edx,ebp
c00039e9:	e8 d6 e0 ff ff       	call   c0001ac4 <mem_cpy>
c00039ee:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f0:	85 db                	test   ebx,ebx
c00039f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039f6:	74 11                	je     c0003a09 <store_xdir+0x71>
c00039f8:	31 d2                	xor    edx,edx
c00039fa:	89 f8                	mov    eax,edi
c00039fc:	e8 ed fa ff ff       	call   c00034ee <dir_next>
c0003a01:	83 c5 20             	add    ebp,0x20
c0003a04:	89 c6                	mov    esi,eax
c0003a06:	4b                   	dec    ebx
c0003a07:	eb bf                	jmp    c00039c8 <store_xdir+0x30>
c0003a09:	89 f0                	mov    eax,esi
c0003a0b:	83 fe 02             	cmp    esi,0x2
c0003a0e:	76 05                	jbe    c0003a15 <store_xdir+0x7d>
c0003a10:	b8 02 00 00 00       	mov    eax,0x2
c0003a15:	83 c4 0c             	add    esp,0xc
c0003a18:	5b                   	pop    ebx
c0003a19:	5e                   	pop    esi
c0003a1a:	5f                   	pop    edi
c0003a1b:	5d                   	pop    ebp
c0003a1c:	c3                   	ret    

c0003a1d <dir_remove>:
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	53                   	push   ebx
c0003a20:	89 c3                	mov    ebx,eax
c0003a22:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a25:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a27:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a2a:	83 fa ff             	cmp    edx,0xffffffff
c0003a2d:	74 09                	je     c0003a38 <dir_remove+0x1b>
c0003a2f:	e8 60 f5 ff ff       	call   c0002f94 <dir_sdi>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	75 41                	jne    c0003a79 <dir_remove+0x5c>
c0003a38:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a3b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3e:	89 f0                	mov    eax,esi
c0003a40:	e8 d7 e7 ff ff       	call   c000221c <move_window>
c0003a45:	85 c0                	test   eax,eax
c0003a47:	75 26                	jne    c0003a6f <dir_remove+0x52>
c0003a49:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a4c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a4f:	75 05                	jne    c0003a56 <dir_remove+0x39>
c0003a51:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a54:	eb 03                	jmp    c0003a59 <dir_remove+0x3c>
c0003a56:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a59:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a60:	73 17                	jae    c0003a79 <dir_remove+0x5c>
c0003a62:	31 d2                	xor    edx,edx
c0003a64:	89 d8                	mov    eax,ebx
c0003a66:	e8 83 fa ff ff       	call   c00034ee <dir_next>
c0003a6b:	85 c0                	test   eax,eax
c0003a6d:	74 c9                	je     c0003a38 <dir_remove+0x1b>
c0003a6f:	83 f8 04             	cmp    eax,0x4
c0003a72:	75 05                	jne    c0003a79 <dir_remove+0x5c>
c0003a74:	b8 02 00 00 00       	mov    eax,0x2
c0003a79:	5b                   	pop    ebx
c0003a7a:	5e                   	pop    esi
c0003a7b:	5f                   	pop    edi
c0003a7c:	c3                   	ret    

c0003a7d <create_name>:
c0003a7d:	55                   	push   ebp
c0003a7e:	89 d5                	mov    ebp,edx
c0003a80:	57                   	push   edi
c0003a81:	89 c7                	mov    edi,eax
c0003a83:	56                   	push   esi
c0003a84:	31 f6                	xor    esi,esi
c0003a86:	53                   	push   ebx
c0003a87:	83 ec 3c             	sub    esp,0x3c
c0003a8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a8c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a90:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a9d:	e8 7d e0 ff ff       	call   c0001b1f <tchar2uni>
c0003aa2:	89 c3                	mov    ebx,eax
c0003aa4:	83 f8 ff             	cmp    eax,0xffffffff
c0003aa7:	75 0a                	jne    c0003ab3 <create_name+0x36>
c0003aa9:	b8 06 00 00 00       	mov    eax,0x6
c0003aae:	e9 83 02 00 00       	jmp    c0003d36 <create_name+0x2b9>
c0003ab3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ab8:	76 0c                	jbe    c0003ac6 <create_name+0x49>
c0003aba:	c1 e8 10             	shr    eax,0x10
c0003abd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ac1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ac5:	46                   	inc    esi
c0003ac6:	66 83 fb 1f          	cmp    bx,0x1f
c0003aca:	89 d8                	mov    eax,ebx
c0003acc:	76 36                	jbe    c0003b04 <create_name+0x87>
c0003ace:	66 83 fb 2f          	cmp    bx,0x2f
c0003ad2:	74 30                	je     c0003b04 <create_name+0x87>
c0003ad4:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad8:	74 39                	je     c0003b13 <create_name+0x96>
c0003ada:	66 83 fb 7f          	cmp    bx,0x7f
c0003ade:	77 11                	ja     c0003af1 <create_name+0x74>
c0003ae0:	0f b7 d3             	movzx  edx,bx
c0003ae3:	b8 32 04 02 c0       	mov    eax,0xc0020432
c0003ae8:	e8 1a e0 ff ff       	call   c0001b07 <chk_chr>
c0003aed:	85 c0                	test   eax,eax
c0003aef:	75 b8                	jne    c0003aa9 <create_name+0x2c>
c0003af1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003af7:	77 b0                	ja     c0003aa9 <create_name+0x2c>
c0003af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003afd:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b01:	46                   	inc    esi
c0003b02:	eb 95                	jmp    c0003a99 <create_name+0x1c>
c0003b04:	66 83 f8 1f          	cmp    ax,0x1f
c0003b08:	b3 04                	mov    bl,0x4
c0003b0a:	76 19                	jbe    c0003b25 <create_name+0xa8>
c0003b0c:	eb 05                	jmp    c0003b13 <create_name+0x96>
c0003b0e:	40                   	inc    eax
c0003b0f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b17:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b19:	80 fa 2f             	cmp    dl,0x2f
c0003b1c:	74 f0                	je     c0003b0e <create_name+0x91>
c0003b1e:	80 fa 5c             	cmp    dl,0x5c
c0003b21:	74 eb                	je     c0003b0e <create_name+0x91>
c0003b23:	31 db                	xor    ebx,ebx
c0003b25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b2c:	85 f6                	test   esi,esi
c0003b2e:	74 18                	je     c0003b48 <create_name+0xcb>
c0003b30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b34:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b39:	66 83 f8 20          	cmp    ax,0x20
c0003b3d:	74 06                	je     c0003b45 <create_name+0xc8>
c0003b3f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b43:	75 03                	jne    c0003b48 <create_name+0xcb>
c0003b45:	4e                   	dec    esi
c0003b46:	eb e4                	jmp    c0003b2c <create_name+0xaf>
c0003b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b4c:	31 ed                	xor    ebp,ebp
c0003b4e:	85 f6                	test   esi,esi
c0003b50:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b56:	0f 84 4d ff ff ff    	je     c0003aa9 <create_name+0x2c>
c0003b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b60:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b63:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b67:	66 83 f8 20          	cmp    ax,0x20
c0003b6b:	75 04                	jne    c0003b71 <create_name+0xf4>
c0003b6d:	89 d5                	mov    ebp,edx
c0003b6f:	eb eb                	jmp    c0003b5c <create_name+0xdf>
c0003b71:	85 ed                	test   ebp,ebp
c0003b73:	75 06                	jne    c0003b7b <create_name+0xfe>
c0003b75:	66 83 f8 2e          	cmp    ax,0x2e
c0003b79:	75 08                	jne    c0003b83 <create_name+0x106>
c0003b7b:	83 cb 03             	or     ebx,0x3
c0003b7e:	eb 03                	jmp    c0003b83 <create_name+0x106>
c0003b80:	4e                   	dec    esi
c0003b81:	74 0c                	je     c0003b8f <create_name+0x112>
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b8d:	75 f1                	jne    c0003b80 <create_name+0x103>
c0003b8f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b94:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b97:	ba 20 00 00 00       	mov    edx,0x20
c0003b9c:	e8 38 df ff ff       	call   c0001ad9 <mem_set>
c0003ba1:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003ba9:	31 c9                	xor    ecx,ecx
c0003bab:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bb0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bbb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bbf:	66 85 ed             	test   bp,bp
c0003bc2:	0f 84 1f 01 00 00    	je     c0003ce7 <create_name+0x26a>
c0003bc8:	66 83 fd 20          	cmp    bp,0x20
c0003bcc:	74 0c                	je     c0003bda <create_name+0x15d>
c0003bce:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd2:	75 0f                	jne    c0003be3 <create_name+0x166>
c0003bd4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bd8:	74 09                	je     c0003be3 <create_name+0x166>
c0003bda:	83 cb 03             	or     ebx,0x3
c0003bdd:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003be1:	eb cd                	jmp    c0003bb0 <create_name+0x133>
c0003be3:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003be7:	73 06                	jae    c0003bef <create_name+0x172>
c0003be9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bed:	75 3a                	jne    c0003c29 <create_name+0x1ac>
c0003bef:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bf4:	75 08                	jne    c0003bfe <create_name+0x181>
c0003bf6:	83 cb 03             	or     ebx,0x3
c0003bf9:	e9 e9 00 00 00       	jmp    c0003ce7 <create_name+0x26a>
c0003bfe:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c02:	74 0d                	je     c0003c11 <create_name+0x194>
c0003c04:	83 cb 03             	or     ebx,0x3
c0003c07:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c0b:	0f 87 d6 00 00 00    	ja     c0003ce7 <create_name+0x26a>
c0003c11:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c16:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c1a:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c22:	b9 08 00 00 00       	mov    ecx,0x8
c0003c27:	eb b4                	jmp    c0003bdd <create_name+0x160>
c0003c29:	66 83 fd 7f          	cmp    bp,0x7f
c0003c2d:	76 68                	jbe    c0003c97 <create_name+0x21a>
c0003c2f:	88 da                	mov    dl,bl
c0003c31:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c35:	83 ca 02             	or     edx,0x2
c0003c38:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c3c:	50                   	push   eax
c0003c3d:	50                   	push   eax
c0003c3e:	68 b5 01 00 00       	push   0x1b5
c0003c43:	55                   	push   ebp
c0003c44:	e8 0f 46 00 00       	call   c0008258 <ff_uni2oem>
c0003c49:	83 c4 10             	add    esp,0x10
c0003c4c:	89 c5                	mov    ebp,eax
c0003c4e:	a8 80                	test   al,0x80
c0003c50:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c58:	74 0c                	je     c0003c66 <create_name+0x1e9>
c0003c5a:	83 e5 7f             	and    ebp,0x7f
c0003c5d:	0f b6 ad 80 03 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfc80]
c0003c64:	eb 2a                	jmp    c0003c90 <create_name+0x213>
c0003c66:	66 3d ff 00          	cmp    ax,0xff
c0003c6a:	76 24                	jbe    c0003c90 <create_name+0x213>
c0003c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c70:	48                   	dec    eax
c0003c71:	39 c8                	cmp    eax,ecx
c0003c73:	77 0c                	ja     c0003c81 <create_name+0x204>
c0003c75:	83 cb 03             	or     ebx,0x3
c0003c78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c7c:	e9 5c ff ff ff       	jmp    c0003bdd <create_name+0x160>
c0003c81:	89 e8                	mov    eax,ebp
c0003c83:	88 d3                	mov    bl,dl
c0003c85:	66 c1 e8 08          	shr    ax,0x8
c0003c89:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c8d:	41                   	inc    ecx
c0003c8e:	eb 4b                	jmp    c0003cdb <create_name+0x25e>
c0003c90:	66 85 ed             	test   bp,bp
c0003c93:	88 d3                	mov    bl,dl
c0003c95:	74 19                	je     c0003cb0 <create_name+0x233>
c0003c97:	0f b7 d5             	movzx  edx,bp
c0003c9a:	b8 3b 04 02 c0       	mov    eax,0xc002043b
c0003c9f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ca3:	e8 5f de ff ff       	call   c0001b07 <chk_chr>
c0003ca8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cac:	85 c0                	test   eax,eax
c0003cae:	74 0a                	je     c0003cba <create_name+0x23d>
c0003cb0:	83 cb 03             	or     ebx,0x3
c0003cb3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cb8:	eb 21                	jmp    c0003cdb <create_name+0x25e>
c0003cba:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cbd:	66 83 f8 19          	cmp    ax,0x19
c0003cc1:	77 07                	ja     c0003cca <create_name+0x24d>
c0003cc3:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003cc8:	eb 11                	jmp    c0003cdb <create_name+0x25e>
c0003cca:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ccd:	66 83 f8 19          	cmp    ax,0x19
c0003cd1:	77 08                	ja     c0003cdb <create_name+0x25e>
c0003cd3:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cd8:	83 ed 20             	sub    ebp,0x20
c0003cdb:	89 e8                	mov    eax,ebp
c0003cdd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ce1:	41                   	inc    ecx
c0003ce2:	e9 f6 fe ff ff       	jmp    c0003bdd <create_name+0x160>
c0003ce7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ceb:	75 04                	jne    c0003cf1 <create_name+0x274>
c0003ced:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cf1:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003cf6:	75 05                	jne    c0003cfd <create_name+0x280>
c0003cf8:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003cfd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d01:	83 e0 0c             	and    eax,0xc
c0003d04:	3c 0c                	cmp    al,0xc
c0003d06:	74 0b                	je     c0003d13 <create_name+0x296>
c0003d08:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d0c:	83 e0 03             	and    eax,0x3
c0003d0f:	3c 03                	cmp    al,0x3
c0003d11:	75 05                	jne    c0003d18 <create_name+0x29b>
c0003d13:	83 cb 02             	or     ebx,0x2
c0003d16:	eb 19                	jmp    c0003d31 <create_name+0x2b4>
c0003d18:	f6 c3 02             	test   bl,0x2
c0003d1b:	75 14                	jne    c0003d31 <create_name+0x2b4>
c0003d1d:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d22:	74 03                	je     c0003d27 <create_name+0x2aa>
c0003d24:	83 cb 10             	or     ebx,0x10
c0003d27:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d2c:	74 03                	je     c0003d31 <create_name+0x2b4>
c0003d2e:	83 cb 08             	or     ebx,0x8
c0003d31:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d34:	31 c0                	xor    eax,eax
c0003d36:	83 c4 3c             	add    esp,0x3c
c0003d39:	5b                   	pop    ebx
c0003d3a:	5e                   	pop    esi
c0003d3b:	5f                   	pop    edi
c0003d3c:	5d                   	pop    ebp
c0003d3d:	c3                   	ret    

c0003d3e <xname_sum>:
c0003d3e:	56                   	push   esi
c0003d3f:	89 c6                	mov    esi,eax
c0003d41:	53                   	push   ebx
c0003d42:	31 db                	xor    ebx,ebx
c0003d44:	51                   	push   ecx
c0003d45:	83 c6 02             	add    esi,0x2
c0003d48:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d4c:	66 85 c0             	test   ax,ax
c0003d4f:	74 1f                	je     c0003d70 <xname_sum+0x32>
c0003d51:	66 d1 cb             	ror    bx,1
c0003d54:	83 ec 0c             	sub    esp,0xc
c0003d57:	50                   	push   eax
c0003d58:	e8 00 46 00 00       	call   c000835d <ff_wtoupper>
c0003d5d:	0f b6 d0             	movzx  edx,al
c0003d60:	01 d3                	add    ebx,edx
c0003d62:	83 c4 10             	add    esp,0x10
c0003d65:	66 c1 e8 08          	shr    ax,0x8
c0003d69:	66 d1 cb             	ror    bx,1
c0003d6c:	01 c3                	add    ebx,eax
c0003d6e:	eb d5                	jmp    c0003d45 <xname_sum+0x7>
c0003d70:	5a                   	pop    edx
c0003d71:	89 d8                	mov    eax,ebx
c0003d73:	5b                   	pop    ebx
c0003d74:	5e                   	pop    esi
c0003d75:	c3                   	ret    

c0003d76 <create_xdir>:
c0003d76:	55                   	push   ebp
c0003d77:	b9 40 00 00 00       	mov    ecx,0x40
c0003d7c:	57                   	push   edi
c0003d7d:	bd 01 00 00 00       	mov    ebp,0x1
c0003d82:	56                   	push   esi
c0003d83:	31 ff                	xor    edi,edi
c0003d85:	53                   	push   ebx
c0003d86:	89 c3                	mov    ebx,eax
c0003d88:	83 ec 1c             	sub    esp,0x1c
c0003d8b:	be 40 00 00 00       	mov    esi,0x40
c0003d90:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d94:	31 d2                	xor    edx,edx
c0003d96:	e8 3e dd ff ff       	call   c0001ad9 <mem_set>
c0003d9b:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d9e:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003da2:	31 c9                	xor    ecx,ecx
c0003da4:	8d 46 01             	lea    eax,[esi+0x1]
c0003da7:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dab:	83 c6 02             	add    esi,0x2
c0003dae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003db2:	66 85 ed             	test   bp,bp
c0003db5:	74 12                	je     c0003dc9 <create_xdir+0x53>
c0003db7:	0f b6 c1             	movzx  eax,cl
c0003dba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbe:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dc2:	66 83 fd 01          	cmp    bp,0x1
c0003dc6:	80 d9 ff             	sbb    cl,0xff
c0003dc9:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dcc:	83 c6 02             	add    esi,0x2
c0003dcf:	0f b7 d5             	movzx  edx,bp
c0003dd2:	e8 e0 dc ff ff       	call   c0001ab7 <st_word>
c0003dd7:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003ddd:	75 d3                	jne    c0003db2 <create_xdir+0x3c>
c0003ddf:	8d 47 01             	lea    eax,[edi+0x1]
c0003de2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dea:	0f b6 c1             	movzx  eax,cl
c0003ded:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003df2:	74 07                	je     c0003dfb <create_xdir+0x85>
c0003df4:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003df9:	eb a9                	jmp    c0003da4 <create_xdir+0x2e>
c0003dfb:	8d 47 02             	lea    eax,[edi+0x2]
c0003dfe:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e01:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e04:	89 d0                	mov    eax,edx
c0003e06:	e8 33 ff ff ff       	call   c0003d3e <xname_sum>
c0003e0b:	83 c4 1c             	add    esp,0x1c
c0003e0e:	0f b7 d0             	movzx  edx,ax
c0003e11:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e14:	5b                   	pop    ebx
c0003e15:	5e                   	pop    esi
c0003e16:	5f                   	pop    edi
c0003e17:	5d                   	pop    ebp
c0003e18:	e9 9a dc ff ff       	jmp    c0001ab7 <st_word>

c0003e1d <cmp_lfn>:
c0003e1d:	55                   	push   ebp
c0003e1e:	57                   	push   edi
c0003e1f:	89 d7                	mov    edi,edx
c0003e21:	56                   	push   esi
c0003e22:	53                   	push   ebx
c0003e23:	83 ec 1c             	sub    esp,0x1c
c0003e26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e2d:	e8 13 dc ff ff       	call   c0001a45 <ld_word>
c0003e32:	66 85 c0             	test   ax,ax
c0003e35:	74 07                	je     c0003e3e <cmp_lfn+0x21>
c0003e37:	31 c0                	xor    eax,eax
c0003e39:	e9 9a 00 00 00       	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003e3e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e40:	bd 01 00 00 00       	mov    ebp,0x1
c0003e45:	83 e3 3f             	and    ebx,0x3f
c0003e48:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e50:	4b                   	dec    ebx
c0003e51:	6b db 0d             	imul   ebx,ebx,0xd
c0003e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e58:	0f b6 80 00 04 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfc00]
c0003e5f:	01 f8                	add    eax,edi
c0003e61:	e8 df db ff ff       	call   c0001a45 <ld_word>
c0003e66:	66 85 ed             	test   bp,bp
c0003e69:	89 c6                	mov    esi,eax
c0003e6b:	74 3c                	je     c0003ea9 <cmp_lfn+0x8c>
c0003e6d:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e73:	77 c2                	ja     c0003e37 <cmp_lfn+0x1a>
c0003e75:	83 ec 0c             	sub    esp,0xc
c0003e78:	0f b7 c0             	movzx  eax,ax
c0003e7b:	50                   	push   eax
c0003e7c:	e8 dc 44 00 00       	call   c000835d <ff_wtoupper>
c0003e81:	89 c5                	mov    ebp,eax
c0003e83:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e8e:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e92:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e95:	e8 c3 44 00 00       	call   c000835d <ff_wtoupper>
c0003e9a:	83 c4 10             	add    esp,0x10
c0003e9d:	39 c5                	cmp    ebp,eax
c0003e9f:	75 96                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ea1:	89 f5                	mov    ebp,esi
c0003ea3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ea7:	eb 04                	jmp    c0003ead <cmp_lfn+0x90>
c0003ea9:	66 46                	inc    si
c0003eab:	75 8a                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ead:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eb1:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003eb6:	75 9c                	jne    c0003e54 <cmp_lfn+0x37>
c0003eb8:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ebb:	74 16                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ebd:	66 85 ed             	test   bp,bp
c0003ec0:	74 11                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ec6:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ecb:	0f 94 c0             	sete   al
c0003ece:	0f b6 c0             	movzx  eax,al
c0003ed1:	eb 05                	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003ed3:	b8 01 00 00 00       	mov    eax,0x1
c0003ed8:	83 c4 1c             	add    esp,0x1c
c0003edb:	5b                   	pop    ebx
c0003edc:	5e                   	pop    esi
c0003edd:	5f                   	pop    edi
c0003ede:	5d                   	pop    ebp
c0003edf:	c3                   	ret    

c0003ee0 <dir_find>:
c0003ee0:	55                   	push   ebp
c0003ee1:	31 d2                	xor    edx,edx
c0003ee3:	57                   	push   edi
c0003ee4:	56                   	push   esi
c0003ee5:	53                   	push   ebx
c0003ee6:	89 c3                	mov    ebx,eax
c0003ee8:	83 ec 1c             	sub    esp,0x1c
c0003eeb:	8b 30                	mov    esi,DWORD PTR [eax]
c0003eed:	e8 a2 f0 ff ff       	call   c0002f94 <dir_sdi>
c0003ef2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ef5:	85 c0                	test   eax,eax
c0003ef7:	0f 85 9f 01 00 00    	jne    c000409c <dir_find+0x1bc>
c0003efd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f00:	0f 85 8e 00 00 00    	jne    c0003f94 <dir_find+0xb4>
c0003f06:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f09:	e8 30 fe ff ff       	call   c0003d3e <xname_sum>
c0003f0e:	89 c5                	mov    ebp,eax
c0003f10:	31 d2                	xor    edx,edx
c0003f12:	89 d8                	mov    eax,ebx
c0003f14:	e8 8d f8 ff ff       	call   c00037a6 <dir_read>
c0003f19:	85 c0                	test   eax,eax
c0003f1b:	0f 85 5f 01 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003f21:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f24:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f27:	e8 19 db ff ff       	call   c0001a45 <ld_word>
c0003f2c:	66 39 e8             	cmp    ax,bp
c0003f2f:	75 df                	jne    c0003f10 <dir_find+0x30>
c0003f31:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f35:	31 ff                	xor    edi,edi
c0003f37:	ba 40 00 00 00       	mov    edx,0x40
c0003f3c:	39 f9                	cmp    ecx,edi
c0003f3e:	0f 84 4a 01 00 00    	je     c000408e <dir_find+0x1ae>
c0003f44:	f6 c2 1f             	test   dl,0x1f
c0003f47:	75 03                	jne    c0003f4c <dir_find+0x6c>
c0003f49:	83 c2 02             	add    edx,0x2
c0003f4c:	89 d0                	mov    eax,edx
c0003f4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f52:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f59:	e8 e7 da ff ff       	call   c0001a45 <ld_word>
c0003f5e:	83 ec 0c             	sub    esp,0xc
c0003f61:	0f b7 c0             	movzx  eax,ax
c0003f64:	50                   	push   eax
c0003f65:	e8 f3 43 00 00       	call   c000835d <ff_wtoupper>
c0003f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f6e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f71:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f78:	e8 e0 43 00 00       	call   c000835d <ff_wtoupper>
c0003f7d:	83 c4 10             	add    esp,0x10
c0003f80:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f84:	75 8a                	jne    c0003f10 <dir_find+0x30>
c0003f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f8a:	47                   	inc    edi
c0003f8b:	83 c2 02             	add    edx,0x2
c0003f8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f92:	eb a8                	jmp    c0003f3c <dir_find+0x5c>
c0003f94:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f9b:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fa0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fa5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fa8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fab:	89 f0                	mov    eax,esi
c0003fad:	e8 6a e2 ff ff       	call   c000221c <move_window>
c0003fb2:	85 c0                	test   eax,eax
c0003fb4:	0f 85 c6 00 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003fba:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fbd:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fc0:	84 c9                	test   cl,cl
c0003fc2:	0f 84 bd 00 00 00    	je     c0004085 <dir_find+0x1a5>
c0003fc8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fcb:	88 d0                	mov    al,dl
c0003fcd:	83 e0 3f             	and    eax,0x3f
c0003fd0:	80 f9 e5             	cmp    cl,0xe5
c0003fd3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fd6:	0f 84 87 00 00 00    	je     c0004063 <dir_find+0x183>
c0003fdc:	80 e2 08             	and    dl,0x8
c0003fdf:	74 06                	je     c0003fe7 <dir_find+0x107>
c0003fe1:	3c 0f                	cmp    al,0xf
c0003fe3:	75 7e                	jne    c0004063 <dir_find+0x183>
c0003fe5:	eb 04                	jmp    c0003feb <dir_find+0x10b>
c0003fe7:	3c 0f                	cmp    al,0xf
c0003fe9:	75 4c                	jne    c0004037 <dir_find+0x157>
c0003feb:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fef:	75 7e                	jne    c000406f <dir_find+0x18f>
c0003ff1:	f6 c1 40             	test   cl,0x40
c0003ff4:	74 12                	je     c0004008 <dir_find+0x128>
c0003ff6:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ff9:	83 e1 bf             	and    ecx,0xffffffbf
c0003ffc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004000:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004003:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004006:	eb 06                	jmp    c000400e <dir_find+0x12e>
c0004008:	89 f8                	mov    eax,edi
c000400a:	38 c8                	cmp    al,cl
c000400c:	75 5c                	jne    c000406a <dir_find+0x18a>
c000400e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004012:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004017:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000401a:	75 53                	jne    c000406f <dir_find+0x18f>
c000401c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000401f:	89 ea                	mov    edx,ebp
c0004021:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0004025:	e8 f3 fd ff ff       	call   c0003e1d <cmp_lfn>
c000402a:	85 c0                	test   eax,eax
c000402c:	74 41                	je     c000406f <dir_find+0x18f>
c000402e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0004032:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004035:	eb 38                	jmp    c000406f <dir_find+0x18f>
c0004037:	89 f8                	mov    eax,edi
c0004039:	84 c0                	test   al,al
c000403b:	75 0d                	jne    c000404a <dir_find+0x16a>
c000403d:	89 e8                	mov    eax,ebp
c000403f:	e8 bd de ff ff       	call   c0001f01 <sum_sfn>
c0004044:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004048:	74 52                	je     c000409c <dir_find+0x1bc>
c000404a:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000404e:	75 13                	jne    c0004063 <dir_find+0x183>
c0004050:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004053:	b9 0b 00 00 00       	mov    ecx,0xb
c0004058:	89 e8                	mov    eax,ebp
c000405a:	e8 85 da ff ff       	call   c0001ae4 <mem_cmp>
c000405f:	85 c0                	test   eax,eax
c0004061:	74 39                	je     c000409c <dir_find+0x1bc>
c0004063:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000406a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000406f:	31 d2                	xor    edx,edx
c0004071:	89 d8                	mov    eax,ebx
c0004073:	e8 76 f4 ff ff       	call   c00034ee <dir_next>
c0004078:	85 c0                	test   eax,eax
c000407a:	0f 84 25 ff ff ff    	je     c0003fa5 <dir_find+0xc5>
c0004080:	89 04 24             	mov    DWORD PTR [esp],eax
c0004083:	eb 17                	jmp    c000409c <dir_find+0x1bc>
c0004085:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000408c:	eb 0e                	jmp    c000409c <dir_find+0x1bc>
c000408e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004091:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0004096:	0f 85 74 fe ff ff    	jne    c0003f10 <dir_find+0x30>
c000409c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000409f:	83 c4 1c             	add    esp,0x1c
c00040a2:	5b                   	pop    ebx
c00040a3:	5e                   	pop    esi
c00040a4:	5f                   	pop    edi
c00040a5:	5d                   	pop    ebp
c00040a6:	c3                   	ret    

c00040a7 <dir_register>:
c00040a7:	55                   	push   ebp
c00040a8:	57                   	push   edi
c00040a9:	56                   	push   esi
c00040aa:	be 06 00 00 00       	mov    esi,0x6
c00040af:	53                   	push   ebx
c00040b0:	83 ec 6c             	sub    esp,0x6c
c00040b3:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040b7:	0f 85 63 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040bd:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040bf:	31 ff                	xor    edi,edi
c00040c1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040c4:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040c9:	74 03                	je     c00040ce <dir_register+0x27>
c00040cb:	47                   	inc    edi
c00040cc:	eb f6                	jmp    c00040c4 <dir_register+0x1d>
c00040ce:	89 c3                	mov    ebx,eax
c00040d0:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040d4:	0f 85 e1 00 00 00    	jne    c00041bb <dir_register+0x114>
c00040da:	83 c7 0e             	add    edi,0xe
c00040dd:	b9 0f 00 00 00       	mov    ecx,0xf
c00040e2:	89 f8                	mov    eax,edi
c00040e4:	31 d2                	xor    edx,edx
c00040e6:	f7 f1                	div    ecx
c00040e8:	89 c7                	mov    edi,eax
c00040ea:	8d 50 02             	lea    edx,[eax+0x2]
c00040ed:	89 d8                	mov    eax,ebx
c00040ef:	e8 2c f8 ff ff       	call   c0003920 <dir_alloc>
c00040f4:	89 c6                	mov    esi,eax
c00040f6:	85 c0                	test   eax,eax
c00040f8:	0f 85 22 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040fe:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004104:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004107:	c1 e7 05             	shl    edi,0x5
c000410a:	29 f8                	sub    eax,edi
c000410c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000410f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004112:	a8 04                	test   al,0x4
c0004114:	0f 84 91 00 00 00    	je     c00041ab <dir_register+0x104>
c000411a:	83 e0 fb             	and    eax,0xfffffffb
c000411d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004120:	89 d8                	mov    eax,ebx
c0004122:	e8 3d ec ff ff       	call   c0002d64 <fill_first_frag>
c0004127:	85 c0                	test   eax,eax
c0004129:	0f 85 ef 01 00 00    	jne    c000431e <dir_register+0x277>
c000412f:	83 c9 ff             	or     ecx,0xffffffff
c0004132:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 f3 eb ff ff       	call   c0002d2f <fill_last_frag>
c000413c:	85 c0                	test   eax,eax
c000413e:	0f 85 da 01 00 00    	jne    c000431e <dir_register+0x277>
c0004144:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004148:	74 61                	je     c00041ab <dir_register+0x104>
c000414a:	89 da                	mov    edx,ebx
c000414c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004150:	e8 04 f6 ff ff       	call   c0003759 <load_obj_xdir>
c0004155:	85 c0                	test   eax,eax
c0004157:	0f 85 c1 01 00 00    	jne    c000431e <dir_register+0x277>
c000415d:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004161:	c1 e2 09             	shl    edx,0x9
c0004164:	31 c9                	xor    ecx,ecx
c0004166:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004169:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000416c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000416f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004172:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004175:	83 c0 38             	add    eax,0x38
c0004178:	e8 41 d9 ff ff       	call   c0001abe <st_qword>
c000417d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004180:	83 c0 28             	add    eax,0x28
c0004183:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004186:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004189:	e8 30 d9 ff ff       	call   c0001abe <st_qword>
c000418e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004191:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004194:	83 c8 01             	or     eax,0x1
c0004197:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000419a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000419e:	e8 f5 f7 ff ff       	call   c0003998 <store_xdir>
c00041a3:	85 c0                	test   eax,eax
c00041a5:	0f 85 73 01 00 00    	jne    c000431e <dir_register+0x277>
c00041ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b1:	e8 c0 fb ff ff       	call   c0003d76 <create_xdir>
c00041b6:	e9 65 01 00 00       	jmp    c0004320 <dir_register+0x279>
c00041bb:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041be:	b9 0c 00 00 00       	mov    ecx,0xc
c00041c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041c7:	89 c2                	mov    edx,eax
c00041c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041cd:	e8 f2 d8 ff ff       	call   c0001ac4 <mem_cpy>
c00041d2:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041d7:	74 58                	je     c0004231 <dir_register+0x18a>
c00041d9:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041dd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041e5:	83 ec 0c             	sub    esp,0xc
c00041e8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041f3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041f7:	e8 49 dc ff ff       	call   c0001e45 <gen_numname>
c00041fc:	89 d8                	mov    eax,ebx
c00041fe:	e8 dd fc ff ff       	call   c0003ee0 <dir_find>
c0004203:	83 c4 10             	add    esp,0x10
c0004206:	89 c6                	mov    esi,eax
c0004208:	85 c0                	test   eax,eax
c000420a:	75 15                	jne    c0004221 <dir_register+0x17a>
c000420c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004210:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004215:	75 ce                	jne    c00041e5 <dir_register+0x13e>
c0004217:	be 07 00 00 00       	mov    esi,0x7
c000421c:	e9 ff 00 00 00       	jmp    c0004320 <dir_register+0x279>
c0004221:	83 f8 04             	cmp    eax,0x4
c0004224:	0f 85 f6 00 00 00    	jne    c0004320 <dir_register+0x279>
c000422a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000422e:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004231:	b9 01 00 00 00       	mov    ecx,0x1
c0004236:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000423b:	74 0f                	je     c000424c <dir_register+0x1a5>
c000423d:	b9 0d 00 00 00       	mov    ecx,0xd
c0004242:	8d 47 0c             	lea    eax,[edi+0xc]
c0004245:	31 d2                	xor    edx,edx
c0004247:	f7 f1                	div    ecx
c0004249:	8d 48 01             	lea    ecx,[eax+0x1]
c000424c:	89 ca                	mov    edx,ecx
c000424e:	89 d8                	mov    eax,ebx
c0004250:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004254:	e8 c7 f6 ff ff       	call   c0003920 <dir_alloc>
c0004259:	89 c6                	mov    esi,eax
c000425b:	85 c0                	test   eax,eax
c000425d:	0f 85 bd 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004263:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004267:	89 cf                	mov    edi,ecx
c0004269:	4f                   	dec    edi
c000426a:	74 6d                	je     c00042d9 <dir_register+0x232>
c000426c:	89 f8                	mov    eax,edi
c000426e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004271:	c1 e0 05             	shl    eax,0x5
c0004274:	29 c2                	sub    edx,eax
c0004276:	89 d8                	mov    eax,ebx
c0004278:	e8 17 ed ff ff       	call   c0002f94 <dir_sdi>
c000427d:	89 c6                	mov    esi,eax
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 85 99 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004287:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000428b:	e8 71 dc ff ff       	call   c0001f01 <sum_sfn>
c0004290:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004294:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004297:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000429a:	89 e8                	mov    eax,ebp
c000429c:	e8 7b df ff ff       	call   c000221c <move_window>
c00042a1:	89 c6                	mov    esi,eax
c00042a3:	85 c0                	test   eax,eax
c00042a5:	75 79                	jne    c0004320 <dir_register+0x279>
c00042a7:	83 ec 0c             	sub    esp,0xc
c00042aa:	89 f8                	mov    eax,edi
c00042ac:	0f b6 c8             	movzx  ecx,al
c00042af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042b7:	52                   	push   edx
c00042b8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042bb:	e8 01 db ff ff       	call   c0001dc1 <put_lfn>
c00042c0:	31 d2                	xor    edx,edx
c00042c2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042c6:	89 d8                	mov    eax,ebx
c00042c8:	e8 21 f2 ff ff       	call   c00034ee <dir_next>
c00042cd:	83 c4 10             	add    esp,0x10
c00042d0:	89 c6                	mov    esi,eax
c00042d2:	85 c0                	test   eax,eax
c00042d4:	75 4a                	jne    c0004320 <dir_register+0x279>
c00042d6:	4f                   	dec    edi
c00042d7:	75 bb                	jne    c0004294 <dir_register+0x1ed>
c00042d9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042dc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042df:	89 e8                	mov    eax,ebp
c00042e1:	e8 36 df ff ff       	call   c000221c <move_window>
c00042e6:	89 c6                	mov    esi,eax
c00042e8:	85 c0                	test   eax,eax
c00042ea:	75 34                	jne    c0004320 <dir_register+0x279>
c00042ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ef:	b9 20 00 00 00       	mov    ecx,0x20
c00042f4:	31 d2                	xor    edx,edx
c00042f6:	e8 de d7 ff ff       	call   c0001ad9 <mem_set>
c00042fb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004302:	b9 0b 00 00 00       	mov    ecx,0xb
c0004307:	e8 b8 d7 ff ff       	call   c0001ac4 <mem_cpy>
c000430c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000430f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004312:	83 e0 18             	and    eax,0x18
c0004315:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004318:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000431c:	eb 02                	jmp    c0004320 <dir_register+0x279>
c000431e:	89 c6                	mov    esi,eax
c0004320:	83 c4 6c             	add    esp,0x6c
c0004323:	89 f0                	mov    eax,esi
c0004325:	5b                   	pop    ebx
c0004326:	5e                   	pop    esi
c0004327:	5f                   	pop    edi
c0004328:	5d                   	pop    ebp
c0004329:	c3                   	ret    

c000432a <sync_fs>:
c000432a:	56                   	push   esi
c000432b:	53                   	push   ebx
c000432c:	53                   	push   ebx
c000432d:	89 c3                	mov    ebx,eax
c000432f:	e8 54 de ff ff       	call   c0002188 <sync_window>
c0004334:	85 c0                	test   eax,eax
c0004336:	0f 85 b1 00 00 00    	jne    c00043ed <sync_fs+0xc3>
c000433c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000433f:	0f 85 8e 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c0004345:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004349:	0f 85 84 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c000434f:	8d 73 54             	lea    esi,[ebx+0x54]
c0004352:	b9 00 02 00 00       	mov    ecx,0x200
c0004357:	31 d2                	xor    edx,edx
c0004359:	89 f0                	mov    eax,esi
c000435b:	e8 79 d7 ff ff       	call   c0001ad9 <mem_set>
c0004360:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004366:	ba 55 aa 00 00       	mov    edx,0xaa55
c000436b:	e8 47 d7 ff ff       	call   c0001ab7 <st_word>
c0004370:	ba 52 52 61 41       	mov    edx,0x41615252
c0004375:	89 f0                	mov    eax,esi
c0004377:	e8 3f d7 ff ff       	call   c0001abb <st_dword>
c000437c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004382:	ba 72 72 41 61       	mov    edx,0x61417272
c0004387:	e8 2f d7 ff ff       	call   c0001abb <st_dword>
c000438c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004395:	e8 21 d7 ff ff       	call   c0001abb <st_dword>
c000439a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000439d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043a3:	e8 13 d7 ff ff       	call   c0001abb <st_dword>
c00043a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043ab:	83 c0 01             	add    eax,0x1
c00043ae:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043b1:	83 d2 00             	adc    edx,0x0
c00043b4:	83 ec 0c             	sub    esp,0xc
c00043b7:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043ba:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043bd:	6a 01                	push   0x1
c00043bf:	52                   	push   edx
c00043c0:	50                   	push   eax
c00043c1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c5:	56                   	push   esi
c00043c6:	50                   	push   eax
c00043c7:	e8 44 d6 ff ff       	call   c0001a10 <disk_write>
c00043cc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043d0:	83 c4 20             	add    esp,0x20
c00043d3:	51                   	push   ecx
c00043d4:	6a 00                	push   0x0
c00043d6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043da:	6a 00                	push   0x0
c00043dc:	50                   	push   eax
c00043dd:	e8 44 d6 ff ff       	call   c0001a26 <disk_ioctl>
c00043e2:	83 c4 10             	add    esp,0x10
c00043e5:	85 c0                	test   eax,eax
c00043e7:	0f 95 c0             	setne  al
c00043ea:	0f b6 c0             	movzx  eax,al
c00043ed:	5a                   	pop    edx
c00043ee:	5b                   	pop    ebx
c00043ef:	5e                   	pop    esi
c00043f0:	c3                   	ret    

c00043f1 <create_partition>:
c00043f1:	55                   	push   ebp
c00043f2:	57                   	push   edi
c00043f3:	56                   	push   esi
c00043f4:	53                   	push   ebx
c00043f5:	83 ec 60             	sub    esp,0x60
c00043f8:	0f b6 c0             	movzx  eax,al
c00043fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ff:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004403:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004407:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000440b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000440f:	50                   	push   eax
c0004410:	6a 01                	push   0x1
c0004412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004416:	e8 0b d6 ff ff       	call   c0001a26 <disk_ioctl>
c000441b:	83 c4 10             	add    esp,0x10
c000441e:	85 c0                	test   eax,eax
c0004420:	74 0a                	je     c000442c <create_partition+0x3b>
c0004422:	b8 01 00 00 00       	mov    eax,0x1
c0004427:	e9 73 05 00 00       	jmp    c000499f <create_partition+0x5ae>
c000442c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004430:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004434:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004438:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000443c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004441:	0f 86 ed 03 00 00    	jbe    c0004834 <create_partition+0x443>
c0004447:	83 c0 df             	add    eax,0xffffffdf
c000444a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004452:	83 d2 ff             	adc    edx,0xffffffff
c0004455:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004459:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000445d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004461:	83 c0 bd             	add    eax,0xffffffbd
c0004464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004468:	83 d2 ff             	adc    edx,0xffffffff
c000446b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000446f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004473:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000447a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004482:	be 22 00 00 00       	mov    esi,0x22
c0004487:	31 ff                	xor    edi,edi
c0004489:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004491:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004499:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044a1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044a5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044ab:	75 0e                	jne    c00044bb <create_partition+0xca>
c00044ad:	b9 00 02 00 00       	mov    ecx,0x200
c00044b2:	31 d2                	xor    edx,edx
c00044b4:	89 d8                	mov    eax,ebx
c00044b6:	e8 1e d6 ff ff       	call   c0001ad9 <mem_set>
c00044bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044bf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044c7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ca:	0f 84 23 01 00 00    	je     c00045f3 <create_partition+0x202>
c00044d0:	89 f0                	mov    eax,esi
c00044d2:	89 fa                	mov    edx,edi
c00044d4:	05 ff 07 00 00       	add    eax,0x7ff
c00044d9:	83 d2 00             	adc    edx,0x0
c00044dc:	89 c1                	mov    ecx,eax
c00044de:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044e8:	89 ce                	mov    esi,ecx
c00044ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044ee:	89 d7                	mov    edi,edx
c00044f0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044f4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044f8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00044fe:	b8 64 00 00 00       	mov    eax,0x64
c0004503:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004506:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000450a:	b8 00 00 00 00       	mov    eax,0x0
c000450f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004513:	72 41                	jb     c0004556 <create_partition+0x165>
c0004515:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000451d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004522:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004526:	01 c1                	add    ecx,eax
c0004528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000452c:	f7 24 24             	mul    DWORD PTR [esp]
c000452f:	6a 00                	push   0x0
c0004531:	01 ca                	add    edx,ecx
c0004533:	6a 64                	push   0x64
c0004535:	52                   	push   edx
c0004536:	50                   	push   eax
c0004537:	e8 90 ae 01 00       	call   c001f3cc <__udivdi3>
c000453c:	83 c4 10             	add    esp,0x10
c000453f:	05 ff 07 00 00       	add    eax,0x7ff
c0004544:	83 d2 00             	adc    edx,0x0
c0004547:	89 c1                	mov    ecx,eax
c0004549:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000454f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004553:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004556:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004559:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000455d:	01 f0                	add    eax,esi
c000455f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004563:	11 fa                	adc    edx,edi
c0004565:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004569:	19 d1                	sbb    ecx,edx
c000456b:	73 2e                	jae    c000459b <create_partition+0x1aa>
c000456d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004571:	89 f8                	mov    eax,edi
c0004573:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004577:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000457e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004586:	73 6b                	jae    c00045f3 <create_partition+0x202>
c0004588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000458c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004590:	29 f0                	sub    eax,esi
c0004592:	19 fa                	sbb    edx,edi
c0004594:	89 04 24             	mov    DWORD PTR [esp],eax
c0004597:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000459b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000459f:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045a2:	74 4f                	je     c00045f3 <create_partition+0x202>
c00045a4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045a7:	b9 10 00 00 00       	mov    ecx,0x10
c00045ac:	ba 10 04 02 c0       	mov    edx,0xc0020410
c00045b1:	e8 0e d5 ff ff       	call   c0001ac4 <mem_cpy>
c00045b6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045ba:	b9 10 00 00 00       	mov    ecx,0x10
c00045bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045c3:	e8 49 db ff ff       	call   c0002111 <make_rand>
c00045c8:	89 f2                	mov    edx,esi
c00045ca:	89 f9                	mov    ecx,edi
c00045cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045d0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045d4:	e8 e5 d4 ff ff       	call   c0001abe <st_qword>
c00045d9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045dc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045e0:	89 f2                	mov    edx,esi
c00045e2:	89 f9                	mov    ecx,edi
c00045e4:	83 c2 ff             	add    edx,0xffffffff
c00045e7:	83 d1 ff             	adc    ecx,0xffffffff
c00045ea:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045ee:	e8 cb d4 ff ff       	call   c0001abe <st_qword>
c00045f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045f7:	83 e8 80             	sub    eax,0xffffff80
c00045fa:	89 c5                	mov    ebp,eax
c00045fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004600:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004606:	75 6b                	jne    c0004673 <create_partition+0x282>
c0004608:	45                   	inc    ebp
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004612:	e8 56 da ff ff       	call   c000206d <crc32>
c0004617:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000461d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004621:	75 e5                	jne    c0004608 <create_partition+0x217>
c0004623:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004627:	83 ec 0c             	sub    esp,0xc
c000462a:	c1 ed 09             	shr    ebp,0x9
c000462d:	31 d2                	xor    edx,edx
c000462f:	6a 01                	push   0x1
c0004631:	52                   	push   edx
c0004632:	8d 45 02             	lea    eax,[ebp+0x2]
c0004635:	50                   	push   eax
c0004636:	53                   	push   ebx
c0004637:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000463b:	e8 d0 d3 ff ff       	call   c0001a10 <disk_write>
c0004640:	83 c4 20             	add    esp,0x20
c0004643:	85 c0                	test   eax,eax
c0004645:	0f 85 d7 fd ff ff    	jne    c0004422 <create_partition+0x31>
c000464b:	83 ec 0c             	sub    esp,0xc
c000464e:	89 e8                	mov    eax,ebp
c0004650:	31 d2                	xor    edx,edx
c0004652:	6a 01                	push   0x1
c0004654:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004658:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000465c:	52                   	push   edx
c000465d:	50                   	push   eax
c000465e:	53                   	push   ebx
c000465f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004663:	e8 a8 d3 ff ff       	call   c0001a10 <disk_write>
c0004668:	83 c4 20             	add    esp,0x20
c000466b:	85 c0                	test   eax,eax
c000466d:	0f 85 af fd ff ff    	jne    c0004422 <create_partition+0x31>
c0004673:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004677:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000467b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004680:	74 0d                	je     c000468f <create_partition+0x29e>
c0004682:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004686:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000468a:	e9 12 fe ff ff       	jmp    c00044a1 <create_partition+0xb0>
c000468f:	31 d2                	xor    edx,edx
c0004691:	b9 00 02 00 00       	mov    ecx,0x200
c0004696:	89 d8                	mov    eax,ebx
c0004698:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000469b:	e8 39 d4 ff ff       	call   c0001ad9 <mem_set>
c00046a0:	b9 10 00 00 00       	mov    ecx,0x10
c00046a5:	ba 00 03 02 c0       	mov    edx,0xc0020300
c00046aa:	89 d8                	mov    eax,ebx
c00046ac:	e8 13 d4 ff ff       	call   c0001ac4 <mem_cpy>
c00046b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046b5:	f7 d2                	not    edx
c00046b7:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ba:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046bd:	e8 f9 d3 ff ff       	call   c0001abb <st_dword>
c00046c2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	ba 01 00 00 00       	mov    edx,0x1
c00046cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00046cf:	e8 ea d3 ff ff       	call   c0001abe <st_qword>
c00046d4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046d8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046dc:	83 c2 ff             	add    edx,0xffffffff
c00046df:	89 e8                	mov    eax,ebp
c00046e1:	83 d1 ff             	adc    ecx,0xffffffff
c00046e4:	e8 d5 d3 ff ff       	call   c0001abe <st_qword>
c00046e9:	31 c9                	xor    ecx,ecx
c00046eb:	8d 43 28             	lea    eax,[ebx+0x28]
c00046ee:	ba 22 00 00 00       	mov    edx,0x22
c00046f3:	e8 c6 d3 ff ff       	call   c0001abe <st_qword>
c00046f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046fc:	83 c2 de             	add    edx,0xffffffde
c00046ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004703:	83 d1 ff             	adc    ecx,0xffffffff
c0004706:	8d 43 30             	lea    eax,[ebx+0x30]
c0004709:	e8 b0 d3 ff ff       	call   c0001abe <st_qword>
c000470e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004711:	ba 80 00 00 00       	mov    edx,0x80
c0004716:	31 f6                	xor    esi,esi
c0004718:	e8 9e d3 ff ff       	call   c0001abb <st_dword>
c000471d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004720:	ba 80 00 00 00       	mov    edx,0x80
c0004725:	e8 91 d3 ff ff       	call   c0001abb <st_dword>
c000472a:	ba 02 00 00 00       	mov    edx,0x2
c000472f:	89 f8                	mov    eax,edi
c0004731:	e8 85 d3 ff ff       	call   c0001abb <st_dword>
c0004736:	8d 53 38             	lea    edx,[ebx+0x38]
c0004739:	b9 10 00 00 00       	mov    ecx,0x10
c000473e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004742:	e8 ca d9 ff ff       	call   c0002111 <make_rand>
c0004747:	83 c8 ff             	or     eax,0xffffffff
c000474a:	46                   	inc    esi
c000474b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004750:	e8 18 d9 ff ff       	call   c000206d <crc32>
c0004755:	83 fe 5c             	cmp    esi,0x5c
c0004758:	75 f0                	jne    c000474a <create_partition+0x359>
c000475a:	f7 d0                	not    eax
c000475c:	8d 73 10             	lea    esi,[ebx+0x10]
c000475f:	89 c2                	mov    edx,eax
c0004761:	89 f0                	mov    eax,esi
c0004763:	e8 53 d3 ff ff       	call   c0001abb <st_dword>
c0004768:	83 ec 0c             	sub    esp,0xc
c000476b:	6a 01                	push   0x1
c000476d:	6a 00                	push   0x0
c000476f:	6a 01                	push   0x1
c0004771:	53                   	push   ebx
c0004772:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004776:	e8 95 d2 ff ff       	call   c0001a10 <disk_write>
c000477b:	83 c4 20             	add    esp,0x20
c000477e:	85 c0                	test   eax,eax
c0004780:	0f 85 9c fc ff ff    	jne    c0004422 <create_partition+0x31>
c0004786:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000478a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000478e:	83 c2 ff             	add    edx,0xffffffff
c0004791:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004794:	83 d1 ff             	adc    ecx,0xffffffff
c0004797:	e8 22 d3 ff ff       	call   c0001abe <st_qword>
c000479c:	ba 01 00 00 00       	mov    edx,0x1
c00047a1:	31 c9                	xor    ecx,ecx
c00047a3:	89 e8                	mov    eax,ebp
c00047a5:	e8 14 d3 ff ff       	call   c0001abe <st_qword>
c00047aa:	89 f8                	mov    eax,edi
c00047ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047b4:	e8 05 d3 ff ff       	call   c0001abe <st_qword>
c00047b9:	89 f0                	mov    eax,esi
c00047bb:	31 d2                	xor    edx,edx
c00047bd:	31 ff                	xor    edi,edi
c00047bf:	e8 f7 d2 ff ff       	call   c0001abb <st_dword>
c00047c4:	83 c8 ff             	or     eax,0xffffffff
c00047c7:	47                   	inc    edi
c00047c8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047cd:	e8 9b d8 ff ff       	call   c000206d <crc32>
c00047d2:	83 ff 5c             	cmp    edi,0x5c
c00047d5:	75 f0                	jne    c00047c7 <create_partition+0x3d6>
c00047d7:	f7 d0                	not    eax
c00047d9:	89 c2                	mov    edx,eax
c00047db:	89 f0                	mov    eax,esi
c00047dd:	e8 d9 d2 ff ff       	call   c0001abb <st_dword>
c00047e2:	83 ec 0c             	sub    esp,0xc
c00047e5:	6a 01                	push   0x1
c00047e7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047eb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047ef:	83 c0 ff             	add    eax,0xffffffff
c00047f2:	83 d2 ff             	adc    edx,0xffffffff
c00047f5:	52                   	push   edx
c00047f6:	50                   	push   eax
c00047f7:	53                   	push   ebx
c00047f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047fc:	e8 0f d2 ff ff       	call   c0001a10 <disk_write>
c0004801:	83 c4 20             	add    esp,0x20
c0004804:	85 c0                	test   eax,eax
c0004806:	0f 85 16 fc ff ff    	jne    c0004422 <create_partition+0x31>
c000480c:	31 d2                	xor    edx,edx
c000480e:	89 d8                	mov    eax,ebx
c0004810:	b9 00 02 00 00       	mov    ecx,0x200
c0004815:	e8 bf d2 ff ff       	call   c0001ad9 <mem_set>
c000481a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004820:	b9 10 00 00 00       	mov    ecx,0x10
c0004825:	ba 10 03 02 c0       	mov    edx,0xc0020310
c000482a:	e8 95 d2 ff ff       	call   c0001ac4 <mem_cpy>
c000482f:	e9 3d 01 00 00       	jmp    c0004971 <create_partition+0x580>
c0004834:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004838:	b9 05 00 00 00       	mov    ecx,0x5
c000483d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004840:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004845:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c000484a:	31 d2                	xor    edx,edx
c000484c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000484f:	f7 f6                	div    esi
c0004851:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004856:	76 0c                	jbe    c0004864 <create_partition+0x473>
c0004858:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c000485c:	49                   	dec    ecx
c000485d:	75 e6                	jne    c0004845 <create_partition+0x454>
c000485f:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c0004864:	b9 00 02 00 00       	mov    ecx,0x200
c0004869:	31 d2                	xor    edx,edx
c000486b:	89 d8                	mov    eax,ebx
c000486d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004872:	e8 62 d2 ff ff       	call   c0001ad9 <mem_set>
c0004877:	b9 64 00 00 00       	mov    ecx,0x64
c000487c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000487f:	31 d2                	xor    edx,edx
c0004881:	f7 f1                	div    ecx
c0004883:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004887:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c000488d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0004895:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c000489a:	0f 96 c2             	setbe  dl
c000489d:	85 ed                	test   ebp,ebp
c000489f:	0f 95 c0             	setne  al
c00048a2:	84 c2                	test   dl,al
c00048a4:	0f 84 c7 00 00 00    	je     c0004971 <create_partition+0x580>
c00048aa:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048ad:	0f 83 be 00 00 00    	jae    c0004971 <create_partition+0x580>
c00048b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048bb:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048be:	83 fe 64             	cmp    esi,0x64
c00048c1:	77 0c                	ja     c00048cf <create_partition+0x4de>
c00048c3:	74 07                	je     c00048cc <create_partition+0x4db>
c00048c5:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048ca:	eb 03                	jmp    c00048cf <create_partition+0x4de>
c00048cc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048cf:	89 e8                	mov    eax,ebp
c00048d1:	01 f0                	add    eax,esi
c00048d3:	72 05                	jb     c00048da <create_partition+0x4e9>
c00048d5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048d8:	76 07                	jbe    c00048e1 <create_partition+0x4f0>
c00048da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048dd:	29 ee                	sub    esi,ebp
c00048df:	eb 08                	jmp    c00048e9 <create_partition+0x4f8>
c00048e1:	85 f6                	test   esi,esi
c00048e3:	0f 84 88 00 00 00    	je     c0004971 <create_partition+0x580>
c00048e9:	89 c8                	mov    eax,ecx
c00048eb:	89 ea                	mov    edx,ebp
c00048ed:	e8 c9 d1 ff ff       	call   c0001abb <st_dword>
c00048f2:	89 f2                	mov    edx,esi
c00048f4:	bf 3f 00 00 00       	mov    edi,0x3f
c00048f9:	8d 41 04             	lea    eax,[ecx+0x4]
c00048fc:	e8 ba d1 ff ff       	call   c0001abb <st_dword>
c0004901:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004905:	31 d2                	xor    edx,edx
c0004907:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000490b:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c000490e:	83 c1 10             	add    ecx,0x10
c0004911:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004916:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000491a:	89 e8                	mov    eax,ebp
c000491c:	f7 f7                	div    edi
c000491e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004922:	31 d2                	xor    edx,edx
c0004924:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004928:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c000492b:	89 c2                	mov    edx,eax
c000492d:	c1 ea 02             	shr    edx,0x2
c0004930:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004934:	47                   	inc    edi
c0004935:	01 f5                	add    ebp,esi
c0004937:	83 e2 c0             	and    edx,0xffffffc0
c000493a:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c000493d:	09 fa                	or     edx,edi
c000493f:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004942:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004945:	bf 3f 00 00 00       	mov    edi,0x3f
c000494a:	31 d2                	xor    edx,edx
c000494c:	f7 f7                	div    edi
c000494e:	89 d6                	mov    esi,edx
c0004950:	31 d2                	xor    edx,edx
c0004952:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004956:	89 c7                	mov    edi,eax
c0004958:	46                   	inc    esi
c0004959:	c1 ef 02             	shr    edi,0x2
c000495c:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c000495f:	83 e7 c0             	and    edi,0xffffffc0
c0004962:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c0004965:	09 fe                	or     esi,edi
c0004967:	89 f2                	mov    edx,esi
c0004969:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c000496c:	e9 24 ff ff ff       	jmp    c0004895 <create_partition+0x4a4>
c0004971:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004977:	ba 55 aa 00 00       	mov    edx,0xaa55
c000497c:	e8 36 d1 ff ff       	call   c0001ab7 <st_word>
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	6a 01                	push   0x1
c0004986:	6a 00                	push   0x0
c0004988:	6a 00                	push   0x0
c000498a:	53                   	push   ebx
c000498b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000498f:	e8 7c d0 ff ff       	call   c0001a10 <disk_write>
c0004994:	83 c4 20             	add    esp,0x20
c0004997:	85 c0                	test   eax,eax
c0004999:	0f 95 c0             	setne  al
c000499c:	0f b6 c0             	movzx  eax,al
c000499f:	83 c4 5c             	add    esp,0x5c
c00049a2:	5b                   	pop    ebx
c00049a3:	5e                   	pop    esi
c00049a4:	5f                   	pop    edi
c00049a5:	5d                   	pop    ebp
c00049a6:	c3                   	ret    

c00049a7 <get_fileinfo>:
c00049a7:	55                   	push   ebp
c00049a8:	57                   	push   edi
c00049a9:	56                   	push   esi
c00049aa:	53                   	push   ebx
c00049ab:	83 ec 1c             	sub    esp,0x1c
c00049ae:	8b 30                	mov    esi,DWORD PTR [eax]
c00049b0:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049b4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049b7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049bb:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049be:	0f 84 dc 01 00 00    	je     c0004ba0 <get_fileinfo+0x1f9>
c00049c4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049c7:	75 0f                	jne    c00049d8 <get_fileinfo+0x31>
c00049c9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049cc:	83 c4 1c             	add    esp,0x1c
c00049cf:	5b                   	pop    ebx
c00049d0:	5e                   	pop    esi
c00049d1:	5f                   	pop    edi
c00049d2:	5d                   	pop    ebp
c00049d3:	e9 70 d5 ff ff       	jmp    c0001f48 <get_xfileinfo>
c00049d8:	89 d3                	mov    ebx,edx
c00049da:	89 c6                	mov    esi,eax
c00049dc:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049e0:	74 6a                	je     c0004a4c <get_fileinfo+0xa5>
c00049e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ea:	31 ed                	xor    ebp,ebp
c00049ec:	31 ff                	xor    edi,edi
c00049ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049f9:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049fd:	66 85 d2             	test   dx,dx
c0004a00:	74 3e                	je     c0004a40 <get_fileinfo+0x99>
c0004a02:	66 85 ed             	test   bp,bp
c0004a05:	75 0c                	jne    c0004a13 <get_fileinfo+0x6c>
c0004a07:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a0d:	66 3d ff 07          	cmp    ax,0x7ff
c0004a11:	76 22                	jbe    c0004a35 <get_fileinfo+0x8e>
c0004a13:	89 e8                	mov    eax,ebp
c0004a15:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a1a:	c1 e0 10             	shl    eax,0x10
c0004a1d:	29 f9                	sub    ecx,edi
c0004a1f:	09 d0                	or     eax,edx
c0004a21:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a25:	e8 bb d1 ff ff       	call   c0001be5 <put_utf>
c0004a2a:	84 c0                	test   al,al
c0004a2c:	74 10                	je     c0004a3e <get_fileinfo+0x97>
c0004a2e:	0f b6 c0             	movzx  eax,al
c0004a31:	01 c7                	add    edi,eax
c0004a33:	31 d2                	xor    edx,edx
c0004a35:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a3a:	89 d5                	mov    ebp,edx
c0004a3c:	eb b0                	jmp    c00049ee <get_fileinfo+0x47>
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	66 85 ed             	test   bp,bp
c0004a43:	74 02                	je     c0004a47 <get_fileinfo+0xa0>
c0004a45:	31 ff                	xor    edi,edi
c0004a47:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a4c:	31 ff                	xor    edi,edi
c0004a4e:	31 c9                	xor    ecx,ecx
c0004a50:	83 f9 0a             	cmp    ecx,0xa
c0004a53:	0f 87 ad 00 00 00    	ja     c0004b06 <get_fileinfo+0x15f>
c0004a59:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a5c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a5f:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a63:	66 83 fa 20          	cmp    dx,0x20
c0004a67:	0f 84 92 00 00 00    	je     c0004aff <get_fileinfo+0x158>
c0004a6d:	66 83 fa 05          	cmp    dx,0x5
c0004a71:	75 05                	jne    c0004a78 <get_fileinfo+0xd1>
c0004a73:	ba e5 00 00 00       	mov    edx,0xe5
c0004a78:	83 fd 09             	cmp    ebp,0x9
c0004a7b:	75 0b                	jne    c0004a88 <get_fileinfo+0xe1>
c0004a7d:	83 ff 0b             	cmp    edi,0xb
c0004a80:	77 06                	ja     c0004a88 <get_fileinfo+0xe1>
c0004a82:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a87:	47                   	inc    edi
c0004a88:	0f b7 c2             	movzx  eax,dx
c0004a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a8f:	e8 85 d0 ff ff       	call   c0001b19 <dbc_1st>
c0004a94:	85 c0                	test   eax,eax
c0004a96:	74 2f                	je     c0004ac7 <get_fileinfo+0x120>
c0004a98:	83 fd 08             	cmp    ebp,0x8
c0004a9b:	74 2a                	je     c0004ac7 <get_fileinfo+0x120>
c0004a9d:	83 fd 0b             	cmp    ebp,0xb
c0004aa0:	74 25                	je     c0004ac7 <get_fileinfo+0x120>
c0004aa2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa5:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aa9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aad:	e8 6a d0 ff ff       	call   c0001b1c <dbc_2nd>
c0004ab2:	85 c0                	test   eax,eax
c0004ab4:	74 11                	je     c0004ac7 <get_fileinfo+0x120>
c0004ab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aba:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004abd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ac2:	c1 e2 08             	shl    edx,0x8
c0004ac5:	09 c2                	or     edx,eax
c0004ac7:	50                   	push   eax
c0004ac8:	50                   	push   eax
c0004ac9:	68 b5 01 00 00       	push   0x1b5
c0004ace:	0f b7 d2             	movzx  edx,dx
c0004ad1:	52                   	push   edx
c0004ad2:	e8 17 38 00 00       	call   c00082ee <ff_oem2uni>
c0004ad7:	83 c4 10             	add    esp,0x10
c0004ada:	66 85 c0             	test   ax,ax
c0004add:	75 04                	jne    c0004ae3 <get_fileinfo+0x13c>
c0004adf:	31 ff                	xor    edi,edi
c0004ae1:	eb 23                	jmp    c0004b06 <get_fileinfo+0x15f>
c0004ae3:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ae8:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004aec:	29 f9                	sub    ecx,edi
c0004aee:	0f b7 c0             	movzx  eax,ax
c0004af1:	e8 ef d0 ff ff       	call   c0001be5 <put_utf>
c0004af6:	84 c0                	test   al,al
c0004af8:	74 e5                	je     c0004adf <get_fileinfo+0x138>
c0004afa:	0f b6 c0             	movzx  eax,al
c0004afd:	01 c7                	add    edi,eax
c0004aff:	89 e9                	mov    ecx,ebp
c0004b01:	e9 4a ff ff ff       	jmp    c0004a50 <get_fileinfo+0xa9>
c0004b06:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b0b:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b0f:	75 54                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b11:	85 ff                	test   edi,edi
c0004b13:	75 0b                	jne    c0004b20 <get_fileinfo+0x179>
c0004b15:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b19:	ba 01 00 00 00       	mov    edx,0x1
c0004b1e:	eb 33                	jmp    c0004b53 <get_fileinfo+0x1ac>
c0004b20:	b1 08                	mov    cl,0x8
c0004b22:	31 d2                	xor    edx,edx
c0004b24:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b2a:	84 c0                	test   al,al
c0004b2c:	74 25                	je     c0004b53 <get_fileinfo+0x1ac>
c0004b2e:	66 83 f8 2e          	cmp    ax,0x2e
c0004b32:	74 16                	je     c0004b4a <get_fileinfo+0x1a3>
c0004b34:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b37:	66 83 ff 19          	cmp    di,0x19
c0004b3b:	77 0f                	ja     c0004b4c <get_fileinfo+0x1a5>
c0004b3d:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b40:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b43:	74 07                	je     c0004b4c <get_fileinfo+0x1a5>
c0004b45:	83 c0 20             	add    eax,0x20
c0004b48:	eb 02                	jmp    c0004b4c <get_fileinfo+0x1a5>
c0004b4a:	b1 10                	mov    cl,0x10
c0004b4c:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b50:	42                   	inc    edx
c0004b51:	eb d1                	jmp    c0004b24 <get_fileinfo+0x17d>
c0004b53:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b5f:	75 04                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b61:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b65:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b68:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b6b:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b71:	83 c0 1c             	add    eax,0x1c
c0004b74:	e8 d9 ce ff ff       	call   c0001a52 <ld_dword>
c0004b79:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b80:	89 03                	mov    DWORD PTR [ebx],eax
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	83 c0 16             	add    eax,0x16
c0004b88:	e8 b8 ce ff ff       	call   c0001a45 <ld_word>
c0004b8d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b91:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b94:	83 c0 18             	add    eax,0x18
c0004b97:	e8 a9 ce ff ff       	call   c0001a45 <ld_word>
c0004b9c:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ba0:	83 c4 1c             	add    esp,0x1c
c0004ba3:	5b                   	pop    ebx
c0004ba4:	5e                   	pop    esi
c0004ba5:	5f                   	pop    edi
c0004ba6:	5d                   	pop    ebp
c0004ba7:	c3                   	ret    

c0004ba8 <ld_clust.isra.0>:
c0004ba8:	56                   	push   esi
c0004ba9:	89 c6                	mov    esi,eax
c0004bab:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bae:	53                   	push   ebx
c0004baf:	89 d3                	mov    ebx,edx
c0004bb1:	e8 8f ce ff ff       	call   c0001a45 <ld_word>
c0004bb6:	0f b7 c8             	movzx  ecx,ax
c0004bb9:	89 f0                	mov    eax,esi
c0004bbb:	3c 03                	cmp    al,0x3
c0004bbd:	75 0d                	jne    c0004bcc <ld_clust.isra.0+0x24>
c0004bbf:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc2:	e8 7e ce ff ff       	call   c0001a45 <ld_word>
c0004bc7:	c1 e0 10             	shl    eax,0x10
c0004bca:	09 c1                	or     ecx,eax
c0004bcc:	5b                   	pop    ebx
c0004bcd:	89 c8                	mov    eax,ecx
c0004bcf:	5e                   	pop    esi
c0004bd0:	c3                   	ret    

c0004bd1 <st_clust.isra.1>:
c0004bd1:	56                   	push   esi
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	53                   	push   ebx
c0004bd5:	89 d3                	mov    ebx,edx
c0004bd7:	0f b7 d1             	movzx  edx,cx
c0004bda:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bdd:	e8 d5 ce ff ff       	call   c0001ab7 <st_word>
c0004be2:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004be5:	75 0f                	jne    c0004bf6 <st_clust.isra.1+0x25>
c0004be7:	c1 e9 10             	shr    ecx,0x10
c0004bea:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bed:	89 ca                	mov    edx,ecx
c0004bef:	5b                   	pop    ebx
c0004bf0:	5e                   	pop    esi
c0004bf1:	e9 c1 ce ff ff       	jmp    c0001ab7 <st_word>
c0004bf6:	5b                   	pop    ebx
c0004bf7:	5e                   	pop    esi
c0004bf8:	c3                   	ret    

c0004bf9 <init_alloc_info.isra.2>:
c0004bf9:	56                   	push   esi
c0004bfa:	89 c6                	mov    esi,eax
c0004bfc:	53                   	push   ebx
c0004bfd:	89 d3                	mov    ebx,edx
c0004bff:	51                   	push   ecx
c0004c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c02:	83 c0 34             	add    eax,0x34
c0004c05:	e8 48 ce ff ff       	call   c0001a52 <ld_dword>
c0004c0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c0d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c0f:	83 c0 38             	add    eax,0x38
c0004c12:	e8 53 ce ff ff       	call   c0001a6a <ld_qword>
c0004c17:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c1a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c1f:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c22:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c29:	83 e0 02             	and    eax,0x2
c0004c2c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c2f:	5b                   	pop    ebx
c0004c30:	5b                   	pop    ebx
c0004c31:	5e                   	pop    esi
c0004c32:	c3                   	ret    

c0004c33 <follow_path>:
c0004c33:	56                   	push   esi
c0004c34:	53                   	push   ebx
c0004c35:	89 c3                	mov    ebx,eax
c0004c37:	83 ec 14             	sub    esp,0x14
c0004c3a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c44:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c46:	80 fa 2f             	cmp    dl,0x2f
c0004c49:	75 07                	jne    c0004c52 <follow_path+0x1f>
c0004c4b:	40                   	inc    eax
c0004c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c50:	eb ee                	jmp    c0004c40 <follow_path+0xd>
c0004c52:	80 fa 5c             	cmp    dl,0x5c
c0004c55:	74 f4                	je     c0004c4b <follow_path+0x18>
c0004c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c65:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c68:	77 52                	ja     c0004cbc <follow_path+0x89>
c0004c6a:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c6e:	31 d2                	xor    edx,edx
c0004c70:	89 d8                	mov    eax,ebx
c0004c72:	e8 1d e3 ff ff       	call   c0002f94 <dir_sdi>
c0004c77:	eb 7c                	jmp    c0004cf5 <follow_path+0xc2>
c0004c79:	89 d8                	mov    eax,ebx
c0004c7b:	e8 60 f2 ff ff       	call   c0003ee0 <dir_find>
c0004c80:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	75 46                	jne    c0004ccd <follow_path+0x9a>
c0004c87:	80 e2 04             	and    dl,0x4
c0004c8a:	75 69                	jne    c0004cf5 <follow_path+0xc2>
c0004c8c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c90:	74 5e                	je     c0004cf0 <follow_path+0xbd>
c0004c92:	8a 06                	mov    al,BYTE PTR [esi]
c0004c94:	3c 04                	cmp    al,0x4
c0004c96:	75 41                	jne    c0004cd9 <follow_path+0xa6>
c0004c98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c9b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c9f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ca2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ca5:	30 c0                	xor    al,al
c0004ca7:	09 d0                	or     eax,edx
c0004ca9:	89 da                	mov    edx,ebx
c0004cab:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cae:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cb1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cb4:	8d 46 10             	lea    eax,[esi+0x10]
c0004cb7:	e8 3d ff ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004cbc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cc0:	89 d8                	mov    eax,ebx
c0004cc2:	e8 b6 ed ff ff       	call   c0003a7d <create_name>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	74 ae                	je     c0004c79 <follow_path+0x46>
c0004ccb:	eb 28                	jmp    c0004cf5 <follow_path+0xc2>
c0004ccd:	83 f8 04             	cmp    eax,0x4
c0004cd0:	75 23                	jne    c0004cf5 <follow_path+0xc2>
c0004cd2:	80 e2 04             	and    dl,0x4
c0004cd5:	74 19                	je     c0004cf0 <follow_path+0xbd>
c0004cd7:	eb 1c                	jmp    c0004cf5 <follow_path+0xc2>
c0004cd9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cdc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ce2:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ce6:	e8 bd fe ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004ceb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cee:	eb cc                	jmp    c0004cbc <follow_path+0x89>
c0004cf0:	b8 05 00 00 00       	mov    eax,0x5
c0004cf5:	83 c4 14             	add    esp,0x14
c0004cf8:	5b                   	pop    ebx
c0004cf9:	5e                   	pop    esi
c0004cfa:	c3                   	ret    

c0004cfb <f_mount>:
c0004cfb:	53                   	push   ebx
c0004cfc:	83 ec 18             	sub    esp,0x18
c0004cff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d03:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d0f:	e8 13 d3 ff ff       	call   c0002027 <get_ldnumber>
c0004d14:	89 c2                	mov    edx,eax
c0004d16:	b8 0b 00 00 00       	mov    eax,0xb
c0004d1b:	85 d2                	test   edx,edx
c0004d1d:	78 39                	js     c0004d58 <f_mount+0x5d>
c0004d1f:	8b 04 95 20 45 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbae0]
c0004d26:	85 c0                	test   eax,eax
c0004d28:	74 03                	je     c0004d2d <f_mount+0x32>
c0004d2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d31:	85 c0                	test   eax,eax
c0004d33:	74 03                	je     c0004d38 <f_mount+0x3d>
c0004d35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d3c:	89 04 95 20 45 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbae0],eax
c0004d43:	31 c0                	xor    eax,eax
c0004d45:	84 db                	test   bl,bl
c0004d47:	74 0f                	je     c0004d58 <f_mount+0x5d>
c0004d49:	31 c9                	xor    ecx,ecx
c0004d4b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d53:	e8 6f d7 ff ff       	call   c00024c7 <mount_volume>
c0004d58:	83 c4 18             	add    esp,0x18
c0004d5b:	5b                   	pop    ebx
c0004d5c:	c3                   	ret    

c0004d5d <f_open>:
c0004d5d:	55                   	push   ebp
c0004d5e:	bd 09 00 00 00       	mov    ebp,0x9
c0004d63:	57                   	push   edi
c0004d64:	56                   	push   esi
c0004d65:	53                   	push   ebx
c0004d66:	83 ec 7c             	sub    esp,0x7c
c0004d69:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d70:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d77:	85 db                	test   ebx,ebx
c0004d79:	0f 84 10 04 00 00    	je     c000518f <f_open+0x432>
c0004d7f:	89 fe                	mov    esi,edi
c0004d81:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d85:	83 e6 3f             	and    esi,0x3f
c0004d88:	89 f0                	mov    eax,esi
c0004d8a:	0f b6 c8             	movzx  ecx,al
c0004d8d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d94:	e8 2e d7 ff ff       	call   c00024c7 <mount_volume>
c0004d99:	89 c5                	mov    ebp,eax
c0004d9b:	85 c0                	test   eax,eax
c0004d9d:	0f 85 e6 03 00 00    	jne    c0005189 <f_open+0x42c>
c0004da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da7:	83 ec 0c             	sub    esp,0xc
c0004daa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004dae:	bd 11 00 00 00       	mov    ebp,0x11
c0004db3:	68 60 04 00 00       	push   0x460
c0004db8:	e8 6e 34 00 00       	call   c000822b <ff_memalloc>
c0004dbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc1:	83 c4 10             	add    esp,0x10
c0004dc4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dc9:	0f 84 c0 03 00 00    	je     c000518f <f_open+0x432>
c0004dcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd7:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ddd:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004de0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004de3:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dee:	e8 40 fe ff ff       	call   c0004c33 <follow_path>
c0004df3:	89 c5                	mov    ebp,eax
c0004df5:	85 c0                	test   eax,eax
c0004df7:	75 0c                	jne    c0004e05 <f_open+0xa8>
c0004df9:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dfe:	79 05                	jns    c0004e05 <f_open+0xa8>
c0004e00:	bd 06 00 00 00       	mov    ebp,0x6
c0004e05:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e0b:	0f 84 84 01 00 00    	je     c0004f95 <f_open+0x238>
c0004e11:	85 ed                	test   ebp,ebp
c0004e13:	74 20                	je     c0004e35 <f_open+0xd8>
c0004e15:	83 fd 04             	cmp    ebp,0x4
c0004e18:	0f 85 58 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e22:	83 ce 08             	or     esi,0x8
c0004e25:	e8 7d f2 ff ff       	call   c00040a7 <dir_register>
c0004e2a:	89 c5                	mov    ebp,eax
c0004e2c:	85 c0                	test   eax,eax
c0004e2e:	74 2f                	je     c0004e5f <f_open+0x102>
c0004e30:	e9 41 03 00 00       	jmp    c0005176 <f_open+0x419>
c0004e35:	bd 07 00 00 00       	mov    ebp,0x7
c0004e3a:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e3f:	0f 85 31 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e45:	bd 08 00 00 00       	mov    ebp,0x8
c0004e4a:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e50:	0f 85 20 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e56:	83 e7 08             	and    edi,0x8
c0004e59:	0f 84 65 01 00 00    	je     c0004fc4 <f_open+0x267>
c0004e5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e63:	8a 02                	mov    al,BYTE PTR [edx]
c0004e65:	3c 04                	cmp    al,0x4
c0004e67:	0f 85 97 00 00 00    	jne    c0004f04 <f_open+0x1a7>
c0004e6d:	8d 42 10             	lea    eax,[edx+0x10]
c0004e70:	89 13                	mov    DWORD PTR [ebx],edx
c0004e72:	89 da                	mov    edx,ebx
c0004e74:	e8 80 fd ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e80:	31 d2                	xor    edx,edx
c0004e82:	83 c0 02             	add    eax,0x2
c0004e85:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e8a:	e8 4a cc ff ff       	call   c0001ad9 <mem_set>
c0004e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e96:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e9b:	83 c0 26             	add    eax,0x26
c0004e9e:	31 d2                	xor    edx,edx
c0004ea0:	e8 34 cc ff ff       	call   c0001ad9 <mem_set>
c0004ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eac:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eb0:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb8:	83 c0 08             	add    eax,0x8
c0004ebb:	e8 fb cb ff ff       	call   c0001abb <st_dword>
c0004ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec7:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ecb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ecf:	e8 c4 ea ff ff       	call   c0003998 <store_xdir>
c0004ed4:	89 c5                	mov    ebp,eax
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	0f 85 98 02 00 00    	jne    c0005176 <f_open+0x419>
c0004ede:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ee1:	85 d2                	test   edx,edx
c0004ee3:	0f 84 db 00 00 00    	je     c0004fc4 <f_open+0x267>
c0004ee9:	31 c9                	xor    ecx,ecx
c0004eeb:	89 d8                	mov    eax,ebx
c0004eed:	e8 9b e3 ff ff       	call   c000328d <remove_chain>
c0004ef2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ef6:	89 c5                	mov    ebp,eax
c0004ef8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004efb:	48                   	dec    eax
c0004efc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004eff:	e9 b8 00 00 00       	jmp    c0004fbc <f_open+0x25f>
c0004f04:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f08:	89 ea                	mov    edx,ebp
c0004f0a:	e8 99 fc ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004f0f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f14:	89 c7                	mov    edi,eax
c0004f16:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f19:	e8 9d cb ff ff       	call   c0001abb <st_dword>
c0004f1e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f26:	31 c9                	xor    ecx,ecx
c0004f28:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f30:	e8 9c fc ff ff       	call   c0004bd1 <st_clust.isra.1>
c0004f35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f39:	83 c0 1c             	add    eax,0x1c
c0004f3c:	31 d2                	xor    edx,edx
c0004f3e:	e8 78 cb ff ff       	call   c0001abb <st_dword>
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	85 ff                	test   edi,edi
c0004f49:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f4d:	74 75                	je     c0004fc4 <f_open+0x267>
c0004f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f53:	31 c9                	xor    ecx,ecx
c0004f55:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f58:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f67:	89 fa                	mov    edx,edi
c0004f69:	e8 1f e3 ff ff       	call   c000328d <remove_chain>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	85 c0                	test   eax,eax
c0004f72:	0f 85 fe 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f84:	4f                   	dec    edi
c0004f85:	e8 92 d2 ff ff       	call   c000221c <move_window>
c0004f8a:	89 c5                	mov    ebp,eax
c0004f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f90:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f93:	eb 27                	jmp    c0004fbc <f_open+0x25f>
c0004f95:	85 ed                	test   ebp,ebp
c0004f97:	0f 85 d9 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f9d:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fa1:	bd 04 00 00 00       	mov    ebp,0x4
c0004fa6:	a8 10                	test   al,0x10
c0004fa8:	0f 85 c8 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fae:	83 e7 02             	and    edi,0x2
c0004fb1:	74 11                	je     c0004fc4 <f_open+0x267>
c0004fb3:	bd 07 00 00 00       	mov    ebp,0x7
c0004fb8:	a8 01                	test   al,0x1
c0004fba:	eb 02                	jmp    c0004fbe <f_open+0x261>
c0004fbc:	85 ed                	test   ebp,ebp
c0004fbe:	0f 85 b2 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fc4:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fca:	74 03                	je     c0004fcf <f_open+0x272>
c0004fcc:	83 ce 40             	or     esi,0x40
c0004fcf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fd3:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fd6:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fd9:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fdc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fe0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fe3:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fe6:	8a 02                	mov    al,BYTE PTR [edx]
c0004fe8:	3c 04                	cmp    al,0x4
c0004fea:	75 2a                	jne    c0005016 <f_open+0x2b9>
c0004fec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004ff0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004ff7:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004ffc:	30 c0                	xor    al,al
c0004ffe:	09 c8                	or     eax,ecx
c0005000:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005003:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005007:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000500a:	8d 42 10             	lea    eax,[edx+0x10]
c000500d:	89 da                	mov    edx,ebx
c000500f:	e8 e5 fb ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005014:	eb 1c                	jmp    c0005032 <f_open+0x2d5>
c0005016:	89 fa                	mov    edx,edi
c0005018:	e8 8b fb ff ff       	call   c0004ba8 <ld_clust.isra.0>
c000501d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005020:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005023:	e8 2a ca ff ff       	call   c0001a52 <ld_dword>
c0005028:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000502f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005036:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000503d:	89 03                	mov    DWORD PTR [ebx],eax
c000503f:	31 d2                	xor    edx,edx
c0005041:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005045:	b9 00 02 00 00       	mov    ecx,0x200
c000504a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000504e:	89 f0                	mov    eax,esi
c0005050:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005053:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005057:	8d 43 50             	lea    eax,[ebx+0x50]
c000505a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005061:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005068:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000506f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000507a:	e8 5a ca ff ff       	call   c0001ad9 <mem_set>
c000507f:	83 e6 20             	and    esi,0x20
c0005082:	75 07                	jne    c000508b <f_open+0x32e>
c0005084:	31 ed                	xor    ebp,ebp
c0005086:	e9 eb 00 00 00       	jmp    c0005176 <f_open+0x419>
c000508b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000508e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005095:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000509d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050a1:	74 e1                	je     c0005084 <f_open+0x327>
c00050a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050ab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050b5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050b8:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050bc:	c1 e5 09             	shl    ebp,0x9
c00050bf:	31 ff                	xor    edi,edi
c00050c1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050c5:	89 f8                	mov    eax,edi
c00050c7:	89 ee                	mov    esi,ebp
c00050c9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050cd:	73 22                	jae    c00050f1 <f_open+0x394>
c00050cf:	89 d8                	mov    eax,ebx
c00050d1:	e8 c8 dc ff ff       	call   c0002d9e <get_fat>
c00050d6:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050da:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050de:	89 c2                	mov    edx,eax
c00050e0:	83 f8 01             	cmp    eax,0x1
c00050e3:	76 10                	jbe    c00050f5 <f_open+0x398>
c00050e5:	83 f8 ff             	cmp    eax,0xffffffff
c00050e8:	75 d5                	jne    c00050bf <f_open+0x362>
c00050ea:	bd 01 00 00 00       	mov    ebp,0x1
c00050ef:	eb 09                	jmp    c00050fa <f_open+0x39d>
c00050f1:	31 ed                	xor    ebp,ebp
c00050f3:	eb 05                	jmp    c00050fa <f_open+0x39d>
c00050f5:	bd 02 00 00 00       	mov    ebp,0x2
c00050fa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050fd:	85 ed                	test   ebp,ebp
c00050ff:	75 75                	jne    c0005176 <f_open+0x419>
c0005101:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005105:	25 ff 01 00 00       	and    eax,0x1ff
c000510a:	0f 84 74 ff ff ff    	je     c0005084 <f_open+0x327>
c0005110:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005114:	bd 02 00 00 00       	mov    ebp,0x2
c0005119:	89 c8                	mov    eax,ecx
c000511b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000511f:	e8 ba cb ff ff       	call   c0001cde <clst2sect>
c0005124:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005128:	89 d7                	mov    edi,edx
c000512a:	09 c7                	or     edi,eax
c000512c:	74 48                	je     c0005176 <f_open+0x419>
c000512e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005132:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005136:	0f ac fe 09          	shrd   esi,edi,0x9
c000513a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000513e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005146:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000514a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000514e:	83 ec 0c             	sub    esp,0xc
c0005151:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005154:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005157:	6a 01                	push   0x1
c0005159:	52                   	push   edx
c000515a:	50                   	push   eax
c000515b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000515f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005163:	50                   	push   eax
c0005164:	e8 91 c8 ff ff       	call   c00019fa <disk_read>
c0005169:	83 c4 20             	add    esp,0x20
c000516c:	85 c0                	test   eax,eax
c000516e:	0f 95 c0             	setne  al
c0005171:	0f b6 c0             	movzx  eax,al
c0005174:	89 c5                	mov    ebp,eax
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000517d:	e8 bf 30 00 00       	call   c0008241 <ff_memfree>
c0005182:	83 c4 10             	add    esp,0x10
c0005185:	85 ed                	test   ebp,ebp
c0005187:	74 06                	je     c000518f <f_open+0x432>
c0005189:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000518f:	83 c4 7c             	add    esp,0x7c
c0005192:	89 e8                	mov    eax,ebp
c0005194:	5b                   	pop    ebx
c0005195:	5e                   	pop    esi
c0005196:	5f                   	pop    edi
c0005197:	5d                   	pop    ebp
c0005198:	c3                   	ret    

c0005199 <f_read>:
c0005199:	55                   	push   ebp
c000519a:	57                   	push   edi
c000519b:	56                   	push   esi
c000519c:	53                   	push   ebx
c000519d:	83 ec 2c             	sub    esp,0x2c
c00051a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051b2:	89 d8                	mov    eax,ebx
c00051b4:	e8 88 cf ff ff       	call   c0002141 <validate>
c00051b9:	89 c5                	mov    ebp,eax
c00051bb:	85 c0                	test   eax,eax
c00051bd:	0f 85 4c 02 00 00    	jne    c000540f <f_read+0x276>
c00051c3:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051c7:	85 ed                	test   ebp,ebp
c00051c9:	0f 85 40 02 00 00    	jne    c000540f <f_read+0x276>
c00051cf:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051d3:	0f 84 31 02 00 00    	je     c000540a <f_read+0x271>
c00051d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051dc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051df:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051e2:	bf 00 00 00 00       	mov    edi,0x0
c00051e7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ea:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051ee:	89 d1                	mov    ecx,edx
c00051f0:	19 f9                	sbb    ecx,edi
c00051f2:	0f 83 cf 00 00 00    	jae    c00052c7 <f_read+0x12e>
c00051f8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051fc:	e9 c6 00 00 00       	jmp    c00052c7 <f_read+0x12e>
c0005201:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005204:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005207:	89 d0                	mov    eax,edx
c0005209:	25 ff 01 00 00       	and    eax,0x1ff
c000520e:	0f 85 c9 01 00 00    	jne    c00053dd <f_read+0x244>
c0005214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005218:	89 d6                	mov    esi,edx
c000521a:	89 cf                	mov    edi,ecx
c000521c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005220:	0f ac fe 09          	shrd   esi,edi,0x9
c0005224:	48                   	dec    eax
c0005225:	21 f0                	and    eax,esi
c0005227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000522b:	0f 84 a6 00 00 00    	je     c00052d7 <f_read+0x13e>
c0005231:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005235:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005238:	89 c8                	mov    eax,ecx
c000523a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000523d:	e8 9c ca ff ff       	call   c0001cde <clst2sect>
c0005242:	89 d7                	mov    edi,edx
c0005244:	09 c7                	or     edi,eax
c0005246:	0f 84 b4 00 00 00    	je     c0005300 <f_read+0x167>
c000524c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005250:	31 ff                	xor    edi,edi
c0005252:	01 c6                	add    esi,eax
c0005254:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005257:	11 d7                	adc    edi,edx
c0005259:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005261:	0f 86 fd 00 00 00    	jbe    c0005364 <f_read+0x1cb>
c0005267:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000526b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000526f:	c1 e8 09             	shr    eax,0x9
c0005272:	89 04 24             	mov    DWORD PTR [esp],eax
c0005275:	03 14 24             	add    edx,DWORD PTR [esp]
c0005278:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000527c:	39 c2                	cmp    edx,eax
c000527e:	76 07                	jbe    c0005287 <f_read+0xee>
c0005280:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005284:	89 04 24             	mov    DWORD PTR [esp],eax
c0005287:	83 ec 0c             	sub    esp,0xc
c000528a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000528e:	57                   	push   edi
c000528f:	56                   	push   esi
c0005290:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005294:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005298:	50                   	push   eax
c0005299:	e8 5c c7 ff ff       	call   c00019fa <disk_read>
c000529e:	83 c4 20             	add    esp,0x20
c00052a1:	85 c0                	test   eax,eax
c00052a3:	75 6e                	jne    c0005313 <f_read+0x17a>
c00052a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052a9:	78 7e                	js     c0005329 <f_read+0x190>
c00052ab:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052ae:	c1 e6 09             	shl    esi,0x9
c00052b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052b5:	31 ff                	xor    edi,edi
c00052b7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052bb:	01 30                	add    DWORD PTR [eax],esi
c00052bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052c1:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052c4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052cc:	0f 85 2f ff ff ff    	jne    c0005201 <f_read+0x68>
c00052d2:	e9 38 01 00 00       	jmp    c000540f <f_read+0x276>
c00052d7:	89 c8                	mov    eax,ecx
c00052d9:	09 d0                	or     eax,edx
c00052db:	75 05                	jne    c00052e2 <f_read+0x149>
c00052dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052e0:	eb 19                	jmp    c00052fb <f_read+0x162>
c00052e2:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052e6:	74 09                	je     c00052f1 <f_read+0x158>
c00052e8:	89 d8                	mov    eax,ebx
c00052ea:	e8 10 ca ff ff       	call   c0001cff <clmt_clust>
c00052ef:	eb 0a                	jmp    c00052fb <f_read+0x162>
c00052f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052f4:	89 d8                	mov    eax,ebx
c00052f6:	e8 a3 da ff ff       	call   c0002d9e <get_fat>
c00052fb:	83 f8 01             	cmp    eax,0x1
c00052fe:	77 0e                	ja     c000530e <f_read+0x175>
c0005300:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005304:	bd 02 00 00 00       	mov    ebp,0x2
c0005309:	e9 01 01 00 00       	jmp    c000540f <f_read+0x276>
c000530e:	83 f8 ff             	cmp    eax,0xffffffff
c0005311:	75 0e                	jne    c0005321 <f_read+0x188>
c0005313:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005317:	bd 01 00 00 00       	mov    ebp,0x1
c000531c:	e9 ee 00 00 00       	jmp    c000540f <f_read+0x276>
c0005321:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005324:	e9 08 ff ff ff       	jmp    c0005231 <f_read+0x98>
c0005329:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000532c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000532f:	29 f0                	sub    eax,esi
c0005331:	19 fa                	sbb    edx,edi
c0005333:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005336:	89 d7                	mov    edi,edx
c0005338:	ba 00 00 00 00       	mov    edx,0x0
c000533d:	89 f9                	mov    ecx,edi
c000533f:	19 d1                	sbb    ecx,edx
c0005341:	0f 83 64 ff ff ff    	jae    c00052ab <f_read+0x112>
c0005347:	89 c7                	mov    edi,eax
c0005349:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000534d:	c1 e7 09             	shl    edi,0x9
c0005350:	8d 53 50             	lea    edx,[ebx+0x50]
c0005353:	01 f8                	add    eax,edi
c0005355:	b9 00 02 00 00       	mov    ecx,0x200
c000535a:	e8 65 c7 ff ff       	call   c0001ac4 <mem_cpy>
c000535f:	e9 47 ff ff ff       	jmp    c00052ab <f_read+0x112>
c0005364:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005367:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000536a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000536e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005371:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005375:	75 05                	jne    c000537c <f_read+0x1e3>
c0005377:	39 34 24             	cmp    DWORD PTR [esp],esi
c000537a:	74 5b                	je     c00053d7 <f_read+0x23e>
c000537c:	8d 43 50             	lea    eax,[ebx+0x50]
c000537f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005383:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005387:	79 2a                	jns    c00053b3 <f_read+0x21a>
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005392:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000539a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539e:	50                   	push   eax
c000539f:	e8 6c c6 ff ff       	call   c0001a10 <disk_write>
c00053a4:	83 c4 20             	add    esp,0x20
c00053a7:	85 c0                	test   eax,eax
c00053a9:	0f 85 64 ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053af:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053b3:	83 ec 0c             	sub    esp,0xc
c00053b6:	6a 01                	push   0x1
c00053b8:	57                   	push   edi
c00053b9:	56                   	push   esi
c00053ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 2e c6 ff ff       	call   c00019fa <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	0f 85 3c ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053d7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053da:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053e0:	ba 00 02 00 00       	mov    edx,0x200
c00053e5:	25 ff 01 00 00       	and    eax,0x1ff
c00053ea:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053ee:	29 c2                	sub    edx,eax
c00053f0:	39 d6                	cmp    esi,edx
c00053f2:	76 02                	jbe    c00053f6 <f_read+0x25d>
c00053f4:	89 d6                	mov    esi,edx
c00053f6:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053fa:	89 f1                	mov    ecx,esi
c00053fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005400:	e8 bf c6 ff ff       	call   c0001ac4 <mem_cpy>
c0005405:	e9 a7 fe ff ff       	jmp    c00052b1 <f_read+0x118>
c000540a:	bd 07 00 00 00       	mov    ebp,0x7
c000540f:	83 c4 2c             	add    esp,0x2c
c0005412:	89 e8                	mov    eax,ebp
c0005414:	5b                   	pop    ebx
c0005415:	5e                   	pop    esi
c0005416:	5f                   	pop    edi
c0005417:	5d                   	pop    ebp
c0005418:	c3                   	ret    

c0005419 <f_write>:
c0005419:	55                   	push   ebp
c000541a:	57                   	push   edi
c000541b:	56                   	push   esi
c000541c:	53                   	push   ebx
c000541d:	83 ec 2c             	sub    esp,0x2c
c0005420:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005424:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005428:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000542c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 08 cd ff ff       	call   c0002141 <validate>
c0005439:	89 c5                	mov    ebp,eax
c000543b:	85 c0                	test   eax,eax
c000543d:	0f 85 86 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c0005443:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005447:	85 ed                	test   ebp,ebp
c0005449:	0f 85 7a 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c000544f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005453:	0f 84 6b 02 00 00    	je     c00056c4 <f_write+0x2ab>
c0005459:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000545d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005460:	0f 84 43 01 00 00    	je     c00055a9 <f_write+0x190>
c0005466:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005469:	89 c1                	mov    ecx,eax
c000546b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000546f:	0f 83 34 01 00 00    	jae    c00055a9 <f_write+0x190>
c0005475:	f7 d0                	not    eax
c0005477:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547b:	e9 29 01 00 00       	jmp    c00055a9 <f_write+0x190>
c0005480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005486:	89 d0                	mov    eax,edx
c0005488:	25 ff 01 00 00       	and    eax,0x1ff
c000548d:	0f 85 00 02 00 00    	jne    c0005693 <f_write+0x27a>
c0005493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005497:	89 d6                	mov    esi,edx
c0005499:	89 cf                	mov    edi,ecx
c000549b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	48                   	dec    eax
c00054a4:	21 f0                	and    eax,esi
c00054a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054aa:	0f 84 06 01 00 00    	je     c00055b6 <f_write+0x19d>
c00054b0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b4:	0f 88 6e 01 00 00    	js     c0005628 <f_write+0x20f>
c00054ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054be:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054c1:	89 c8                	mov    eax,ecx
c00054c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054c7:	e8 12 c8 ff ff       	call   c0001cde <clst2sect>
c00054cc:	89 d1                	mov    ecx,edx
c00054ce:	09 c1                	or     ecx,eax
c00054d0:	0f 84 1c 01 00 00    	je     c00055f2 <f_write+0x1d9>
c00054d6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 c6                	add    esi,eax
c00054de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054e2:	11 d7                	adc    edi,edx
c00054e4:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054ec:	0f 86 63 01 00 00    	jbe    c0005655 <f_write+0x23c>
c00054f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054fa:	c1 e8 09             	shr    eax,0x9
c00054fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005501:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005505:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005509:	39 c2                	cmp    edx,eax
c000550b:	76 08                	jbe    c0005515 <f_write+0xfc>
c000550d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005511:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005515:	83 ec 0c             	sub    esp,0xc
c0005518:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000551c:	57                   	push   edi
c000551d:	56                   	push   esi
c000551e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005522:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005526:	50                   	push   eax
c0005527:	e8 e4 c4 ff ff       	call   c0001a10 <disk_write>
c000552c:	83 c4 20             	add    esp,0x20
c000552f:	85 c0                	test   eax,eax
c0005531:	0f 85 ce 00 00 00    	jne    c0005605 <f_write+0x1ec>
c0005537:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000553a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000553d:	29 f0                	sub    eax,esi
c000553f:	19 fa                	sbb    edx,edi
c0005541:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005545:	89 d7                	mov    edi,edx
c0005547:	ba 00 00 00 00       	mov    edx,0x0
c000554c:	89 f9                	mov    ecx,edi
c000554e:	19 d1                	sbb    ecx,edx
c0005550:	73 1c                	jae    c000556e <f_write+0x155>
c0005552:	89 c7                	mov    edi,eax
c0005554:	b9 00 02 00 00       	mov    ecx,0x200
c0005559:	c1 e7 09             	shl    edi,0x9
c000555c:	8d 43 50             	lea    eax,[ebx+0x50]
c000555f:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005563:	89 fa                	mov    edx,edi
c0005565:	e8 5a c5 ff ff       	call   c0001ac4 <mem_cpy>
c000556a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000556e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005572:	c1 e6 09             	shl    esi,0x9
c0005575:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005579:	31 ff                	xor    edi,edi
c000557b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000557f:	01 30                	add    DWORD PTR [eax],esi
c0005581:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005585:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005588:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000558b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000558e:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005591:	89 c1                	mov    ecx,eax
c0005593:	39 f2                	cmp    edx,esi
c0005595:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005598:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000559b:	19 f9                	sbb    ecx,edi
c000559d:	73 04                	jae    c00055a3 <f_write+0x18a>
c000559f:	89 f2                	mov    edx,esi
c00055a1:	89 f8                	mov    eax,edi
c00055a3:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055a9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055ae:	0f 85 cc fe ff ff    	jne    c0005480 <f_write+0x67>
c00055b4:	eb 2e                	jmp    c00055e4 <f_write+0x1cb>
c00055b6:	89 c8                	mov    eax,ecx
c00055b8:	09 d0                	or     eax,edx
c00055ba:	75 0b                	jne    c00055c7 <f_write+0x1ae>
c00055bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	85 c0                	test   eax,eax
c00055c3:	75 28                	jne    c00055ed <f_write+0x1d4>
c00055c5:	eb 12                	jmp    c00055d9 <f_write+0x1c0>
c00055c7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055cb:	74 09                	je     c00055d6 <f_write+0x1bd>
c00055cd:	89 d8                	mov    eax,ebx
c00055cf:	e8 2b c7 ff ff       	call   c0001cff <clmt_clust>
c00055d4:	eb 0a                	jmp    c00055e0 <f_write+0x1c7>
c00055d6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055d9:	89 d8                	mov    eax,ebx
c00055db:	e8 ac da ff ff       	call   c000308c <create_chain>
c00055e0:	85 c0                	test   eax,eax
c00055e2:	75 09                	jne    c00055ed <f_write+0x1d4>
c00055e4:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055e8:	e9 dc 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c00055ed:	83 f8 01             	cmp    eax,0x1
c00055f0:	75 0e                	jne    c0005600 <f_write+0x1e7>
c00055f2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055f6:	bd 02 00 00 00       	mov    ebp,0x2
c00055fb:	e9 c9 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005600:	83 f8 ff             	cmp    eax,0xffffffff
c0005603:	75 0e                	jne    c0005613 <f_write+0x1fa>
c0005605:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005609:	bd 01 00 00 00       	mov    ebp,0x1
c000560e:	e9 b6 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005613:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005616:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000561a:	0f 85 90 fe ff ff    	jne    c00054b0 <f_write+0x97>
c0005620:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005623:	e9 88 fe ff ff       	jmp    c00054b0 <f_write+0x97>
c0005628:	83 ec 0c             	sub    esp,0xc
c000562b:	8d 43 50             	lea    eax,[ebx+0x50]
c000562e:	6a 01                	push   0x1
c0005630:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005633:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005636:	50                   	push   eax
c0005637:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000563b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000563f:	50                   	push   eax
c0005640:	e8 cb c3 ff ff       	call   c0001a10 <disk_write>
c0005645:	83 c4 20             	add    esp,0x20
c0005648:	85 c0                	test   eax,eax
c000564a:	75 b9                	jne    c0005605 <f_write+0x1ec>
c000564c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005650:	e9 65 fe ff ff       	jmp    c00054ba <f_write+0xa1>
c0005655:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005658:	75 05                	jne    c000565f <f_write+0x246>
c000565a:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000565d:	74 2e                	je     c000568d <f_write+0x274>
c000565f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005662:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005665:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005668:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000566b:	73 20                	jae    c000568d <f_write+0x274>
c000566d:	83 ec 0c             	sub    esp,0xc
c0005670:	8d 43 50             	lea    eax,[ebx+0x50]
c0005673:	6a 01                	push   0x1
c0005675:	57                   	push   edi
c0005676:	56                   	push   esi
c0005677:	50                   	push   eax
c0005678:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000567c:	50                   	push   eax
c000567d:	e8 78 c3 ff ff       	call   c00019fa <disk_read>
c0005682:	83 c4 20             	add    esp,0x20
c0005685:	85 c0                	test   eax,eax
c0005687:	0f 85 78 ff ff ff    	jne    c0005605 <f_write+0x1ec>
c000568d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005690:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005693:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005696:	ba 00 02 00 00       	mov    edx,0x200
c000569b:	25 ff 01 00 00       	and    eax,0x1ff
c00056a0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056a4:	29 c2                	sub    edx,eax
c00056a6:	39 d6                	cmp    esi,edx
c00056a8:	76 02                	jbe    c00056ac <f_write+0x293>
c00056aa:	89 d6                	mov    esi,edx
c00056ac:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056b0:	89 f1                	mov    ecx,esi
c00056b2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056b6:	e8 09 c4 ff ff       	call   c0001ac4 <mem_cpy>
c00056bb:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056bf:	e9 b1 fe ff ff       	jmp    c0005575 <f_write+0x15c>
c00056c4:	bd 07 00 00 00       	mov    ebp,0x7
c00056c9:	83 c4 2c             	add    esp,0x2c
c00056cc:	89 e8                	mov    eax,ebp
c00056ce:	5b                   	pop    ebx
c00056cf:	5e                   	pop    esi
c00056d0:	5f                   	pop    edi
c00056d1:	5d                   	pop    ebp
c00056d2:	c3                   	ret    

c00056d3 <f_sync>:
c00056d3:	56                   	push   esi
c00056d4:	53                   	push   ebx
c00056d5:	83 ec 64             	sub    esp,0x64
c00056d8:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056e0:	89 d8                	mov    eax,ebx
c00056e2:	e8 5a ca ff ff       	call   c0002141 <validate>
c00056e7:	85 c0                	test   eax,eax
c00056e9:	0f 85 ba 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c00056ef:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056f2:	f6 c2 40             	test   dl,0x40
c00056f5:	0f 84 ae 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c00056fb:	84 d2                	test   dl,dl
c00056fd:	79 33                	jns    c0005732 <f_sync+0x5f>
c00056ff:	83 ec 0c             	sub    esp,0xc
c0005702:	8d 43 50             	lea    eax,[ebx+0x50]
c0005705:	6a 01                	push   0x1
c0005707:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000570a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000570d:	50                   	push   eax
c000570e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005712:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005716:	50                   	push   eax
c0005717:	e8 f4 c2 ff ff       	call   c0001a10 <disk_write>
c000571c:	89 c2                	mov    edx,eax
c000571e:	83 c4 20             	add    esp,0x20
c0005721:	b8 01 00 00 00       	mov    eax,0x1
c0005726:	85 d2                	test   edx,edx
c0005728:	0f 85 7b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000572e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005736:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005739:	0f 85 11 01 00 00    	jne    c0005850 <f_sync+0x17d>
c000573f:	89 d8                	mov    eax,ebx
c0005741:	e8 1e d6 ff ff       	call   c0002d64 <fill_first_frag>
c0005746:	85 c0                	test   eax,eax
c0005748:	0f 85 5b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000574e:	83 c9 ff             	or     ecx,0xffffffff
c0005751:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005754:	89 d8                	mov    eax,ebx
c0005756:	e8 d4 d5 ff ff       	call   c0002d2f <fill_last_frag>
c000575b:	85 c0                	test   eax,eax
c000575d:	0f 85 46 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c0005763:	83 ec 0c             	sub    esp,0xc
c0005766:	68 60 04 00 00       	push   0x460
c000576b:	e8 bb 2a 00 00       	call   c000822b <ff_memalloc>
c0005770:	89 c6                	mov    esi,eax
c0005772:	83 c4 10             	add    esp,0x10
c0005775:	b8 11 00 00 00       	mov    eax,0x11
c000577a:	85 f6                	test   esi,esi
c000577c:	0f 84 27 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c0005782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005786:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000578c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000578f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005792:	89 da                	mov    edx,ebx
c0005794:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005798:	e8 bc df ff ff       	call   c0003759 <load_obj_xdir>
c000579d:	85 c0                	test   eax,eax
c000579f:	0f 85 95 00 00 00    	jne    c000583a <f_sync+0x167>
c00057a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057ac:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057b0:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057b3:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057b6:	83 ca 01             	or     edx,0x1
c00057b9:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057bf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057c2:	83 c0 34             	add    eax,0x34
c00057c5:	e8 f1 c2 ff ff       	call   c0001abb <st_dword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d4:	83 c0 38             	add    eax,0x38
c00057d7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057da:	e8 df c2 ff ff       	call   c0001abe <st_qword>
c00057df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e9:	83 c0 28             	add    eax,0x28
c00057ec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ef:	e8 ca c2 ff ff       	call   c0001abe <st_qword>
c00057f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0005800:	83 c0 0c             	add    eax,0xc
c0005803:	e8 b3 c2 ff ff       	call   c0001abb <st_dword>
c0005808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000580f:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005813:	31 d2                	xor    edx,edx
c0005815:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005818:	83 c0 10             	add    eax,0x10
c000581b:	e8 9b c2 ff ff       	call   c0001abb <st_dword>
c0005820:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005824:	e8 6f e1 ff ff       	call   c0003998 <store_xdir>
c0005829:	85 c0                	test   eax,eax
c000582b:	75 0d                	jne    c000583a <f_sync+0x167>
c000582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005831:	e8 f4 ea ff ff       	call   c000432a <sync_fs>
c0005836:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000583a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000583e:	83 ec 0c             	sub    esp,0xc
c0005841:	56                   	push   esi
c0005842:	e8 fa 29 00 00       	call   c0008241 <ff_memfree>
c0005847:	83 c4 10             	add    esp,0x10
c000584a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000584e:	eb 59                	jmp    c00058a9 <f_sync+0x1d6>
c0005850:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005853:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005856:	e8 c1 c9 ff ff       	call   c000221c <move_window>
c000585b:	85 c0                	test   eax,eax
c000585d:	75 4a                	jne    c00058a9 <f_sync+0x1d6>
c000585f:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005862:	89 f2                	mov    edx,esi
c0005864:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005868:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000586b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000586d:	e8 5f f3 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0005872:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005875:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005878:	e8 3e c2 ff ff       	call   c0001abb <st_dword>
c000587d:	8d 46 16             	lea    eax,[esi+0x16]
c0005880:	ba 00 00 21 50       	mov    edx,0x50210000
c0005885:	e8 31 c2 ff ff       	call   c0001abb <st_dword>
c000588a:	8d 46 12             	lea    eax,[esi+0x12]
c000588d:	31 d2                	xor    edx,edx
c000588f:	e8 23 c2 ff ff       	call   c0001ab7 <st_word>
c0005894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005898:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000589c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a0:	e8 85 ea ff ff       	call   c000432a <sync_fs>
c00058a5:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058a9:	83 c4 64             	add    esp,0x64
c00058ac:	5b                   	pop    ebx
c00058ad:	5e                   	pop    esi
c00058ae:	c3                   	ret    

c00058af <f_close>:
c00058af:	53                   	push   ebx
c00058b0:	83 ec 24             	sub    esp,0x24
c00058b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058b7:	53                   	push   ebx
c00058b8:	e8 16 fe ff ff       	call   c00056d3 <f_sync>
c00058bd:	83 c4 10             	add    esp,0x10
c00058c0:	85 c0                	test   eax,eax
c00058c2:	75 15                	jne    c00058d9 <f_close+0x2a>
c00058c4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058c8:	89 d8                	mov    eax,ebx
c00058ca:	e8 72 c8 ff ff       	call   c0002141 <validate>
c00058cf:	85 c0                	test   eax,eax
c00058d1:	75 06                	jne    c00058d9 <f_close+0x2a>
c00058d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058d9:	83 c4 18             	add    esp,0x18
c00058dc:	5b                   	pop    ebx
c00058dd:	c3                   	ret    

c00058de <f_lseek>:
c00058de:	55                   	push   ebp
c00058df:	57                   	push   edi
c00058e0:	56                   	push   esi
c00058e1:	53                   	push   ebx
c00058e2:	83 ec 3c             	sub    esp,0x3c
c00058e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058e9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058ed:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00058f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058f8:	89 d8                	mov    eax,ebx
c00058fa:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058fe:	e8 3e c8 ff ff       	call   c0002141 <validate>
c0005903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005907:	85 c0                	test   eax,eax
c0005909:	0f 85 28 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000590f:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005917:	85 c0                	test   eax,eax
c0005919:	0f 85 18 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000591f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005923:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005926:	74 0c                	je     c0005934 <f_lseek+0x56>
c0005928:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000592b:	85 c0                	test   eax,eax
c000592d:	75 1f                	jne    c000594e <f_lseek+0x70>
c000592f:	e9 8b 01 00 00       	jmp    c0005abf <f_lseek+0x1e1>
c0005934:	83 c9 ff             	or     ecx,0xffffffff
c0005937:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000593a:	89 d8                	mov    eax,ebx
c000593c:	e8 ee d3 ff ff       	call   c0002d2f <fill_last_frag>
c0005941:	85 c0                	test   eax,eax
c0005943:	74 e3                	je     c0005928 <f_lseek+0x4a>
c0005945:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005949:	e9 e9 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c000594e:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005953:	0f 85 ac 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005959:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000595d:	0f 85 a2 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005963:	8d 78 04             	lea    edi,[eax+0x4]
c0005966:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005969:	8b 00                	mov    eax,DWORD PTR [eax]
c000596b:	be 02 00 00 00       	mov    esi,0x2
c0005970:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005974:	85 ed                	test   ebp,ebp
c0005976:	74 73                	je     c00059eb <f_lseek+0x10d>
c0005978:	89 e9                	mov    ecx,ebp
c000597a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005981:	89 ca                	mov    edx,ecx
c0005983:	89 d8                	mov    eax,ebx
c0005985:	ff 04 24             	inc    DWORD PTR [esp]
c0005988:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000598c:	e8 0d d4 ff ff       	call   c0002d9e <get_fat>
c0005991:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005995:	83 f8 01             	cmp    eax,0x1
c0005998:	77 11                	ja     c00059ab <f_lseek+0xcd>
c000599a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000599e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059a6:	e9 8c 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059ab:	83 f8 ff             	cmp    eax,0xffffffff
c00059ae:	75 11                	jne    c00059c1 <f_lseek+0xe3>
c00059b0:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059b4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059bc:	e9 76 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059c1:	8d 51 01             	lea    edx,[ecx+0x1]
c00059c4:	89 c1                	mov    ecx,eax
c00059c6:	39 c2                	cmp    edx,eax
c00059c8:	74 b7                	je     c0005981 <f_lseek+0xa3>
c00059ca:	83 c6 02             	add    esi,0x2
c00059cd:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059d1:	72 0b                	jb     c00059de <f_lseek+0x100>
c00059d3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059d6:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059d9:	89 0f                	mov    DWORD PTR [edi],ecx
c00059db:	83 c7 08             	add    edi,0x8
c00059de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059e2:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059e5:	76 04                	jbe    c00059eb <f_lseek+0x10d>
c00059e7:	89 c5                	mov    ebp,eax
c00059e9:	eb 8d                	jmp    c0005978 <f_lseek+0x9a>
c00059eb:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059ee:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059f2:	89 30                	mov    DWORD PTR [eax],esi
c00059f4:	0f 87 35 03 00 00    	ja     c0005d2f <f_lseek+0x451>
c00059fa:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a00:	e9 32 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c0005a05:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a08:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a0b:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a12:	19 f8                	sbb    eax,edi
c0005a14:	73 07                	jae    c0005a1d <f_lseek+0x13f>
c0005a16:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a19:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a1d:	89 f8                	mov    eax,edi
c0005a1f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a22:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a25:	09 f0                	or     eax,esi
c0005a27:	0f 84 0a 03 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a2d:	89 f0                	mov    eax,esi
c0005a2f:	89 fa                	mov    edx,edi
c0005a31:	83 c0 ff             	add    eax,0xffffffff
c0005a34:	83 d2 ff             	adc    edx,0xffffffff
c0005a37:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a3a:	89 d1                	mov    ecx,edx
c0005a3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a40:	89 c2                	mov    edx,eax
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 b6 c2 ff ff       	call   c0001cff <clmt_clust>
c0005a49:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a50:	89 c2                	mov    edx,eax
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a58:	e8 81 c2 ff ff       	call   c0001cde <clst2sect>
c0005a5d:	89 d1                	mov    ecx,edx
c0005a5f:	09 c1                	or     ecx,eax
c0005a61:	0f 84 33 ff ff ff    	je     c000599a <f_lseek+0xbc>
c0005a67:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a6d:	0f 84 c4 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a73:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1c3>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 96 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 58 02 00 00    	jns    c0005d06 <f_lseek+0x428>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 32 02 00 00       	jmp    c0005cf1 <f_lseek+0x413>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x200>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x200>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x21e>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x21e>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b00:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b03:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x244>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 87 01 00 00       	jmp    c0005ca9 <f_lseek+0x3cb>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	c1 e1 09             	shl    ecx,0x9
c0005b29:	89 d7                	mov    edi,edx
c0005b2b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b2f:	09 c7                	or     edi,eax
c0005b31:	74 6b                	je     c0005b9e <f_lseek+0x2c0>
c0005b33:	83 c0 ff             	add    eax,0xffffffff
c0005b36:	89 cf                	mov    edi,ecx
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b46:	83 c0 ff             	add    eax,0xffffffff
c0005b49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b4d:	83 d2 ff             	adc    edx,0xffffffff
c0005b50:	31 ed                	xor    ebp,ebp
c0005b52:	55                   	push   ebp
c0005b53:	51                   	push   ecx
c0005b54:	52                   	push   edx
c0005b55:	50                   	push   eax
c0005b56:	e8 71 98 01 00       	call   c001f3cc <__udivdi3>
c0005b5b:	83 c4 10             	add    esp,0x10
c0005b5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b62:	89 d6                	mov    esi,edx
c0005b64:	55                   	push   ebp
c0005b65:	57                   	push   edi
c0005b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6e:	e8 59 98 01 00       	call   c001f3cc <__udivdi3>
c0005b73:	83 c4 10             	add    esp,0x10
c0005b76:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b7a:	19 d6                	sbb    esi,edx
c0005b7c:	72 20                	jb     c0005b9e <f_lseek+0x2c0>
c0005b7e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b86:	f7 d9                	neg    ecx
c0005b88:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b8c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b8f:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b95:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x2e8>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x2e5>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 de d4 ff ff       	call   c000308c <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 e3 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 f0 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005bce:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bd2:	31 ff                	xor    edi,edi
c0005bd4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bd7:	89 fd                	mov    ebp,edi
c0005bd9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bdd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be3:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005be7:	73 7d                	jae    c0005c66 <f_lseek+0x388>
c0005be9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bec:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bf0:	01 d6                	add    esi,edx
c0005bf2:	11 cf                	adc    edi,ecx
c0005bf4:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005bf7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005bfa:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005bfd:	f6 c2 02             	test   dl,0x2
c0005c00:	74 25                	je     c0005c27 <f_lseek+0x349>
c0005c02:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c05:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c08:	19 f9                	sbb    ecx,edi
c0005c0a:	73 0c                	jae    c0005c18 <f_lseek+0x33a>
c0005c0c:	83 ca 40             	or     edx,0x40
c0005c0f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c12:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c15:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c18:	89 c2                	mov    edx,eax
c0005c1a:	89 d8                	mov    eax,ebx
c0005c1c:	e8 6b d4 ff ff       	call   c000308c <create_chain>
c0005c21:	85 c0                	test   eax,eax
c0005c23:	75 0b                	jne    c0005c30 <f_lseek+0x352>
c0005c25:	eb 30                	jmp    c0005c57 <f_lseek+0x379>
c0005c27:	89 c2                	mov    edx,eax
c0005c29:	89 d8                	mov    eax,ebx
c0005c2b:	e8 6e d1 ff ff       	call   c0002d9e <get_fat>
c0005c30:	83 f8 ff             	cmp    eax,0xffffffff
c0005c33:	0f 84 77 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005c39:	83 f8 01             	cmp    eax,0x1
c0005c3c:	0f 86 58 fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c46:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c49:	0f 86 4b fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c4f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c52:	e9 77 ff ff ff       	jmp    c0005bce <f_lseek+0x2f0>
c0005c57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c69:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c6d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c70:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c73:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c76:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c7c:	0f 84 97 fe ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005c82:	89 c2                	mov    edx,eax
c0005c84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c88:	e8 51 c0 ff ff       	call   c0001cde <clst2sect>
c0005c8d:	89 d7                	mov    edi,edx
c0005c8f:	09 c7                	or     edi,eax
c0005c91:	0f 84 03 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c9e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ca2:	c1 ef 09             	shr    edi,0x9
c0005ca5:	01 c6                	add    esi,eax
c0005ca7:	11 d7                	adc    edi,edx
c0005ca9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005caf:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cb2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cb5:	19 d1                	sbb    ecx,edx
c0005cb7:	73 0a                	jae    c0005cc3 <f_lseek+0x3e5>
c0005cb9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cbd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cc0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cc8:	74 6d                	je     c0005d37 <f_lseek+0x459>
c0005cca:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ccd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd0:	39 fa                	cmp    edx,edi
c0005cd2:	75 04                	jne    c0005cd8 <f_lseek+0x3fa>
c0005cd4:	39 f0                	cmp    eax,esi
c0005cd6:	74 5f                	je     c0005d37 <f_lseek+0x459>
c0005cd8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cdb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cdf:	79 25                	jns    c0005d06 <f_lseek+0x428>
c0005ce1:	83 ec 0c             	sub    esp,0xc
c0005ce4:	6a 01                	push   0x1
c0005ce6:	52                   	push   edx
c0005ce7:	50                   	push   eax
c0005ce8:	55                   	push   ebp
c0005ce9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ced:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cf1:	50                   	push   eax
c0005cf2:	e8 19 bd ff ff       	call   c0001a10 <disk_write>
c0005cf7:	83 c4 20             	add    esp,0x20
c0005cfa:	85 c0                	test   eax,eax
c0005cfc:	0f 85 ae fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d02:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d06:	83 ec 0c             	sub    esp,0xc
c0005d09:	6a 01                	push   0x1
c0005d0b:	57                   	push   edi
c0005d0c:	56                   	push   esi
c0005d0d:	55                   	push   ebp
c0005d0e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d12:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d16:	50                   	push   eax
c0005d17:	e8 de bc ff ff       	call   c00019fa <disk_read>
c0005d1c:	83 c4 20             	add    esp,0x20
c0005d1f:	85 c0                	test   eax,eax
c0005d21:	0f 85 89 fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d27:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d2a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d2d:	eb 08                	jmp    c0005d37 <f_lseek+0x459>
c0005d2f:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d3b:	83 c4 3c             	add    esp,0x3c
c0005d3e:	5b                   	pop    ebx
c0005d3f:	5e                   	pop    esi
c0005d40:	5f                   	pop    edi
c0005d41:	5d                   	pop    ebp
c0005d42:	c3                   	ret    

c0005d43 <f_opendir>:
c0005d43:	56                   	push   esi
c0005d44:	b8 09 00 00 00       	mov    eax,0x9
c0005d49:	53                   	push   ebx
c0005d4a:	83 ec 24             	sub    esp,0x24
c0005d4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d51:	85 db                	test   ebx,ebx
c0005d53:	0f 84 e6 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d59:	31 c9                	xor    ecx,ecx
c0005d5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d5f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d63:	e8 5f c7 ff ff       	call   c00024c7 <mount_volume>
c0005d68:	85 c0                	test   eax,eax
c0005d6a:	0f 85 c9 00 00 00    	jne    c0005e39 <f_opendir+0xf6>
c0005d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	89 03                	mov    DWORD PTR [ebx],eax
c0005d79:	68 60 04 00 00       	push   0x460
c0005d7e:	e8 a8 24 00 00       	call   c000822b <ff_memalloc>
c0005d83:	89 c6                	mov    esi,eax
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	b8 11 00 00 00       	mov    eax,0x11
c0005d8d:	85 f6                	test   esi,esi
c0005d8f:	0f 84 aa 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d99:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d9f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005da2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005da5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 83 ee ff ff       	call   c0004c33 <follow_path>
c0005db0:	85 c0                	test   eax,eax
c0005db2:	75 61                	jne    c0005e15 <f_opendir+0xd2>
c0005db4:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005db8:	78 46                	js     c0005e00 <f_opendir+0xbd>
c0005dba:	b8 05 00 00 00       	mov    eax,0x5
c0005dbf:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dc3:	74 50                	je     c0005e15 <f_opendir+0xd2>
c0005dc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dc9:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dcb:	3c 04                	cmp    al,0x4
c0005dcd:	75 26                	jne    c0005df5 <f_opendir+0xb2>
c0005dcf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dd2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dd5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005dd8:	30 d2                	xor    dl,dl
c0005dda:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005dde:	09 c2                	or     edx,eax
c0005de0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005de3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005de6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005de9:	89 da                	mov    edx,ebx
c0005deb:	8d 41 10             	lea    eax,[ecx+0x10]
c0005dee:	e8 06 ee ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005df3:	eb 0b                	jmp    c0005e00 <f_opendir+0xbd>
c0005df5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005df8:	e8 ab ed ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0005dfd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e04:	31 d2                	xor    edx,edx
c0005e06:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e0a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 7f d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e19:	83 ec 0c             	sub    esp,0xc
c0005e1c:	56                   	push   esi
c0005e1d:	e8 1f 24 00 00       	call   c0008241 <ff_memfree>
c0005e22:	83 c4 10             	add    esp,0x10
c0005e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e29:	83 f8 04             	cmp    eax,0x4
c0005e2c:	74 06                	je     c0005e34 <f_opendir+0xf1>
c0005e2e:	85 c0                	test   eax,eax
c0005e30:	74 0d                	je     c0005e3f <f_opendir+0xfc>
c0005e32:	eb 05                	jmp    c0005e39 <f_opendir+0xf6>
c0005e34:	b8 05 00 00 00       	mov    eax,0x5
c0005e39:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e3f:	83 c4 24             	add    esp,0x24
c0005e42:	5b                   	pop    ebx
c0005e43:	5e                   	pop    esi
c0005e44:	c3                   	ret    

c0005e45 <f_closedir>:
c0005e45:	53                   	push   ebx
c0005e46:	83 ec 18             	sub    esp,0x18
c0005e49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e4d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e51:	89 d8                	mov    eax,ebx
c0005e53:	e8 e9 c2 ff ff       	call   c0002141 <validate>
c0005e58:	85 c0                	test   eax,eax
c0005e5a:	75 06                	jne    c0005e62 <f_closedir+0x1d>
c0005e5c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e62:	83 c4 18             	add    esp,0x18
c0005e65:	5b                   	pop    ebx
c0005e66:	c3                   	ret    

c0005e67 <f_readdir>:
c0005e67:	57                   	push   edi
c0005e68:	56                   	push   esi
c0005e69:	53                   	push   ebx
c0005e6a:	83 ec 20             	sub    esp,0x20
c0005e6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e71:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e7b:	e8 c1 c2 ff ff       	call   c0002141 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 77                	jne    c0005efb <f_readdir+0x94>
c0005e84:	85 ff                	test   edi,edi
c0005e86:	75 0b                	jne    c0005e93 <f_readdir+0x2c>
c0005e88:	31 d2                	xor    edx,edx
c0005e8a:	89 d8                	mov    eax,ebx
c0005e8c:	e8 03 d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e91:	eb 68                	jmp    c0005efb <f_readdir+0x94>
c0005e93:	83 ec 0c             	sub    esp,0xc
c0005e96:	68 60 04 00 00       	push   0x460
c0005e9b:	e8 8b 23 00 00       	call   c000822b <ff_memalloc>
c0005ea0:	89 c6                	mov    esi,eax
c0005ea2:	83 c4 10             	add    esp,0x10
c0005ea5:	b8 11 00 00 00       	mov    eax,0x11
c0005eaa:	85 f6                	test   esi,esi
c0005eac:	74 4d                	je     c0005efb <f_readdir+0x94>
c0005eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eb2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ebb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 df d8 ff ff       	call   c00037a6 <dir_read>
c0005ec7:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ecc:	75 19                	jne    c0005ee7 <f_readdir+0x80>
c0005ece:	89 fa                	mov    edx,edi
c0005ed0:	89 d8                	mov    eax,ebx
c0005ed2:	e8 d0 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005ed7:	31 d2                	xor    edx,edx
c0005ed9:	89 d8                	mov    eax,ebx
c0005edb:	e8 0e d6 ff ff       	call   c00034ee <dir_next>
c0005ee0:	83 f8 04             	cmp    eax,0x4
c0005ee3:	75 02                	jne    c0005ee7 <f_readdir+0x80>
c0005ee5:	31 c0                	xor    eax,eax
c0005ee7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eeb:	83 ec 0c             	sub    esp,0xc
c0005eee:	56                   	push   esi
c0005eef:	e8 4d 23 00 00       	call   c0008241 <ff_memfree>
c0005ef4:	83 c4 10             	add    esp,0x10
c0005ef7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005efb:	83 c4 20             	add    esp,0x20
c0005efe:	5b                   	pop    ebx
c0005eff:	5e                   	pop    esi
c0005f00:	5f                   	pop    edi
c0005f01:	c3                   	ret    

c0005f02 <f_stat>:
c0005f02:	57                   	push   edi
c0005f03:	31 c9                	xor    ecx,ecx
c0005f05:	56                   	push   esi
c0005f06:	53                   	push   ebx
c0005f07:	83 ec 50             	sub    esp,0x50
c0005f0a:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f0e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f12:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f16:	e8 ac c5 ff ff       	call   c00024c7 <mount_volume>
c0005f1b:	89 c3                	mov    ebx,eax
c0005f1d:	85 c0                	test   eax,eax
c0005f1f:	75 67                	jne    c0005f88 <f_stat+0x86>
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	bb 11 00 00 00       	mov    ebx,0x11
c0005f29:	68 60 04 00 00       	push   0x460
c0005f2e:	e8 f8 22 00 00       	call   c000822b <ff_memalloc>
c0005f33:	83 c4 10             	add    esp,0x10
c0005f36:	89 c6                	mov    esi,eax
c0005f38:	85 c0                	test   eax,eax
c0005f3a:	74 4c                	je     c0005f88 <f_stat+0x86>
c0005f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f40:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f49:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f4c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f50:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f54:	e8 da ec ff ff       	call   c0004c33 <follow_path>
c0005f59:	89 c3                	mov    ebx,eax
c0005f5b:	85 c0                	test   eax,eax
c0005f5d:	75 1d                	jne    c0005f7c <f_stat+0x7a>
c0005f5f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f64:	78 11                	js     c0005f77 <f_stat+0x75>
c0005f66:	85 ff                	test   edi,edi
c0005f68:	74 12                	je     c0005f7c <f_stat+0x7a>
c0005f6a:	89 fa                	mov    edx,edi
c0005f6c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f70:	e8 32 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005f75:	eb 05                	jmp    c0005f7c <f_stat+0x7a>
c0005f77:	bb 06 00 00 00       	mov    ebx,0x6
c0005f7c:	83 ec 0c             	sub    esp,0xc
c0005f7f:	56                   	push   esi
c0005f80:	e8 bc 22 00 00       	call   c0008241 <ff_memfree>
c0005f85:	83 c4 10             	add    esp,0x10
c0005f88:	83 c4 50             	add    esp,0x50
c0005f8b:	89 d8                	mov    eax,ebx
c0005f8d:	5b                   	pop    ebx
c0005f8e:	5e                   	pop    esi
c0005f8f:	5f                   	pop    edi
c0005f90:	c3                   	ret    

c0005f91 <f_getfree>:
c0005f91:	55                   	push   ebp
c0005f92:	31 c9                	xor    ecx,ecx
c0005f94:	57                   	push   edi
c0005f95:	56                   	push   esi
c0005f96:	53                   	push   ebx
c0005f97:	83 ec 5c             	sub    esp,0x5c
c0005f9a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f9e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fa2:	e8 20 c5 ff ff       	call   c00024c7 <mount_volume>
c0005fa7:	89 c5                	mov    ebp,eax
c0005fa9:	85 c0                	test   eax,eax
c0005fab:	0f 85 be 01 00 00    	jne    c000616f <f_getfree+0x1de>
c0005fb1:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb9:	89 02                	mov    DWORD PTR [edx],eax
c0005fbb:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fc5:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fc8:	39 f2                	cmp    edx,esi
c0005fca:	77 0b                	ja     c0005fd7 <f_getfree+0x46>
c0005fcc:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fd0:	89 10                	mov    DWORD PTR [eax],edx
c0005fd2:	e9 98 01 00 00       	jmp    c000616f <f_getfree+0x1de>
c0005fd7:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fd9:	80 fa 01             	cmp    dl,0x1
c0005fdc:	75 3a                	jne    c0006018 <f_getfree+0x87>
c0005fde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fe2:	be 02 00 00 00       	mov    esi,0x2
c0005fe7:	31 db                	xor    ebx,ebx
c0005fe9:	89 f2                	mov    edx,esi
c0005feb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fef:	e8 aa cd ff ff       	call   c0002d9e <get_fat>
c0005ff4:	83 f8 ff             	cmp    eax,0xffffffff
c0005ff7:	0f 84 51 01 00 00    	je     c000614e <f_getfree+0x1bd>
c0005ffd:	83 f8 01             	cmp    eax,0x1
c0006000:	0f 84 4f 01 00 00    	je     c0006155 <f_getfree+0x1c4>
c0006006:	83 d3 00             	adc    ebx,0x0
c0006009:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600d:	46                   	inc    esi
c000600e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006011:	77 d6                	ja     c0005fe9 <f_getfree+0x58>
c0006013:	e9 46 01 00 00       	jmp    c000615e <f_getfree+0x1cd>
c0006018:	80 fa 04             	cmp    dl,0x4
c000601b:	0f 85 94 00 00 00    	jne    c00060b5 <f_getfree+0x124>
c0006021:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006024:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000602b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000602f:	31 ff                	xor    edi,edi
c0006031:	31 db                	xor    ebx,ebx
c0006033:	85 ff                	test   edi,edi
c0006035:	75 3f                	jne    c0006076 <f_getfree+0xe5>
c0006037:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000603b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000603f:	83 c0 01             	add    eax,0x1
c0006042:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006046:	83 d2 00             	adc    edx,0x0
c0006049:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000604d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006051:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006055:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006059:	e8 be c1 ff ff       	call   c000221c <move_window>
c000605e:	85 c0                	test   eax,eax
c0006060:	0f 85 f6 00 00 00    	jne    c000615c <f_getfree+0x1cb>
c0006066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000606a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000606e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006072:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006076:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607a:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c000607e:	88 c2                	mov    dl,al
c0006080:	b8 08 00 00 00       	mov    eax,0x8
c0006085:	29 f0                	sub    eax,esi
c0006087:	89 c1                	mov    ecx,eax
c0006089:	01 f1                	add    ecx,esi
c000608b:	74 18                	je     c00060a5 <f_getfree+0x114>
c000608d:	85 f6                	test   esi,esi
c000608f:	74 14                	je     c00060a5 <f_getfree+0x114>
c0006091:	88 d1                	mov    cl,dl
c0006093:	83 e1 01             	and    ecx,0x1
c0006096:	80 f9 01             	cmp    cl,0x1
c0006099:	88 d1                	mov    cl,dl
c000609b:	83 d3 00             	adc    ebx,0x0
c000609e:	4e                   	dec    esi
c000609f:	d0 e9                	shr    cl,1
c00060a1:	88 ca                	mov    dl,cl
c00060a3:	eb e2                	jmp    c0006087 <f_getfree+0xf6>
c00060a5:	47                   	inc    edi
c00060a6:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060ac:	85 f6                	test   esi,esi
c00060ae:	75 83                	jne    c0006033 <f_getfree+0xa2>
c00060b0:	e9 a9 00 00 00       	jmp    c000615e <f_getfree+0x1cd>
c00060b5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060b8:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060ca:	75 1b                	jne    c00060e7 <f_getfree+0x156>
c00060cc:	89 d6                	mov    esi,edx
c00060ce:	89 cf                	mov    edi,ecx
c00060d0:	83 c6 01             	add    esi,0x1
c00060d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060d7:	83 d7 00             	adc    edi,0x0
c00060da:	e8 3d c1 ff ff       	call   c000221c <move_window>
c00060df:	85 c0                	test   eax,eax
c00060e1:	75 79                	jne    c000615c <f_getfree+0x1cb>
c00060e3:	89 f2                	mov    edx,esi
c00060e5:	89 f9                	mov    ecx,edi
c00060e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060f3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060f7:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c00060fb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00060ff:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006102:	75 15                	jne    c0006119 <f_getfree+0x188>
c0006104:	e8 3c b9 ff ff       	call   c0001a45 <ld_word>
c0006109:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000610d:	66 83 f8 01          	cmp    ax,0x1
c0006111:	83 d3 00             	adc    ebx,0x0
c0006114:	83 c6 02             	add    esi,0x2
c0006117:	eb 17                	jmp    c0006130 <f_getfree+0x19f>
c0006119:	e8 34 b9 ff ff       	call   c0001a52 <ld_dword>
c000611e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006122:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006127:	83 f8 01             	cmp    eax,0x1
c000612a:	83 d3 00             	adc    ebx,0x0
c000612d:	83 c6 04             	add    esi,0x4
c0006130:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006136:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000613a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000613e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006142:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006146:	0f 85 79 ff ff ff    	jne    c00060c5 <f_getfree+0x134>
c000614c:	eb 10                	jmp    c000615e <f_getfree+0x1cd>
c000614e:	bd 01 00 00 00       	mov    ebp,0x1
c0006153:	eb 09                	jmp    c000615e <f_getfree+0x1cd>
c0006155:	bd 02 00 00 00       	mov    ebp,0x2
c000615a:	eb 02                	jmp    c000615e <f_getfree+0x1cd>
c000615c:	89 c5                	mov    ebp,eax
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 18                	mov    DWORD PTR [eax],ebx
c0006164:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006168:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000616c:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000616f:	83 c4 5c             	add    esp,0x5c
c0006172:	89 e8                	mov    eax,ebp
c0006174:	5b                   	pop    ebx
c0006175:	5e                   	pop    esi
c0006176:	5f                   	pop    edi
c0006177:	5d                   	pop    ebp
c0006178:	c3                   	ret    

c0006179 <f_truncate>:
c0006179:	56                   	push   esi
c000617a:	53                   	push   ebx
c000617b:	83 ec 14             	sub    esp,0x14
c000617e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006182:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006186:	89 d8                	mov    eax,ebx
c0006188:	e8 b4 bf ff ff       	call   c0002141 <validate>
c000618d:	89 c6                	mov    esi,eax
c000618f:	85 c0                	test   eax,eax
c0006191:	0f 85 d2 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c0006197:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000619b:	85 f6                	test   esi,esi
c000619d:	0f 85 c6 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c00061a3:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061a7:	0f 84 b7 00 00 00    	je     c0006264 <f_truncate+0xeb>
c00061ad:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061b3:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061b6:	89 d1                	mov    ecx,edx
c00061b8:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061bb:	0f 83 a8 00 00 00    	jae    c0006269 <f_truncate+0xf0>
c00061c1:	09 c2                	or     edx,eax
c00061c3:	75 15                	jne    c00061da <f_truncate+0x61>
c00061c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061c8:	31 c9                	xor    ecx,ecx
c00061ca:	89 d8                	mov    eax,ebx
c00061cc:	e8 bc d0 ff ff       	call   c000328d <remove_chain>
c00061d1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061d8:	eb 35                	jmp    c000620f <f_truncate+0x96>
c00061da:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061dd:	89 d8                	mov    eax,ebx
c00061df:	e8 ba cb ff ff       	call   c0002d9e <get_fat>
c00061e4:	89 c2                	mov    edx,eax
c00061e6:	b8 01 00 00 00       	mov    eax,0x1
c00061eb:	83 fa ff             	cmp    edx,0xffffffff
c00061ee:	74 1f                	je     c000620f <f_truncate+0x96>
c00061f0:	b8 02 00 00 00       	mov    eax,0x2
c00061f5:	83 fa 01             	cmp    edx,0x1
c00061f8:	74 15                	je     c000620f <f_truncate+0x96>
c00061fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061fe:	31 c0                	xor    eax,eax
c0006200:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006203:	76 0a                	jbe    c000620f <f_truncate+0x96>
c0006205:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006208:	89 d8                	mov    eax,ebx
c000620a:	e8 7e d0 ff ff       	call   c000328d <remove_chain>
c000620f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006212:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006215:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006218:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000621b:	83 ca 40             	or     edx,0x40
c000621e:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006221:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006224:	85 c0                	test   eax,eax
c0006226:	75 35                	jne    c000625d <f_truncate+0xe4>
c0006228:	84 d2                	test   dl,dl
c000622a:	79 3d                	jns    c0006269 <f_truncate+0xf0>
c000622c:	83 ec 0c             	sub    esp,0xc
c000622f:	8d 43 50             	lea    eax,[ebx+0x50]
c0006232:	6a 01                	push   0x1
c0006234:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006237:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000623a:	50                   	push   eax
c000623b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000623f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006243:	50                   	push   eax
c0006244:	e8 c7 b7 ff ff       	call   c0001a10 <disk_write>
c0006249:	83 c4 20             	add    esp,0x20
c000624c:	85 c0                	test   eax,eax
c000624e:	75 08                	jne    c0006258 <f_truncate+0xdf>
c0006250:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006254:	31 f6                	xor    esi,esi
c0006256:	eb 11                	jmp    c0006269 <f_truncate+0xf0>
c0006258:	b8 01 00 00 00       	mov    eax,0x1
c000625d:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006260:	89 c6                	mov    esi,eax
c0006262:	eb 05                	jmp    c0006269 <f_truncate+0xf0>
c0006264:	be 07 00 00 00       	mov    esi,0x7
c0006269:	83 c4 14             	add    esp,0x14
c000626c:	89 f0                	mov    eax,esi
c000626e:	5b                   	pop    ebx
c000626f:	5e                   	pop    esi
c0006270:	c3                   	ret    

c0006271 <f_unlink>:
c0006271:	56                   	push   esi
c0006272:	b9 02 00 00 00       	mov    ecx,0x2
c0006277:	53                   	push   ebx
c0006278:	81 ec e4 00 00 00    	sub    esp,0xe4
c000627e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006282:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006289:	e8 39 c2 ff ff       	call   c00024c7 <mount_volume>
c000628e:	85 c0                	test   eax,eax
c0006290:	0f 85 53 01 00 00    	jne    c00063e9 <f_unlink+0x178>
c0006296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000629a:	83 ec 0c             	sub    esp,0xc
c000629d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062a1:	68 60 04 00 00       	push   0x460
c00062a6:	e8 80 1f 00 00       	call   c000822b <ff_memalloc>
c00062ab:	89 c3                	mov    ebx,eax
c00062ad:	83 c4 10             	add    esp,0x10
c00062b0:	b8 11 00 00 00       	mov    eax,0x11
c00062b5:	85 db                	test   ebx,ebx
c00062b7:	0f 84 2c 01 00 00    	je     c00063e9 <f_unlink+0x178>
c00062bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062c7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062ca:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062cd:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 56 e9 ff ff       	call   c0004c33 <follow_path>
c00062dd:	85 c0                	test   eax,eax
c00062df:	0f 85 f0 00 00 00    	jne    c00063d5 <f_unlink+0x164>
c00062e5:	b8 06 00 00 00       	mov    eax,0x6
c00062ea:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062f2:	0f 88 dd 00 00 00    	js     c00063d5 <f_unlink+0x164>
c00062f8:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00062fd:	74 0a                	je     c0006309 <f_unlink+0x98>
c00062ff:	b8 07 00 00 00       	mov    eax,0x7
c0006304:	e9 cc 00 00 00       	jmp    c00063d5 <f_unlink+0x164>
c0006309:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000630d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006311:	8a 02                	mov    al,BYTE PTR [edx]
c0006313:	3c 04                	cmp    al,0x4
c0006315:	75 12                	jne    c0006329 <f_unlink+0xb8>
c0006317:	8d 42 10             	lea    eax,[edx+0x10]
c000631a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000631e:	e8 d6 e8 ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0006323:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006327:	eb 0e                	jmp    c0006337 <f_unlink+0xc6>
c0006329:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006330:	e8 73 e8 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006335:	89 c6                	mov    esi,eax
c0006337:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000633c:	75 20                	jne    c000635e <f_unlink+0xed>
c000633e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006342:	e8 d6 d6 ff ff       	call   c0003a1d <dir_remove>
c0006347:	85 c0                	test   eax,eax
c0006349:	75 7d                	jne    c00063c8 <f_unlink+0x157>
c000634b:	85 f6                	test   esi,esi
c000634d:	74 79                	je     c00063c8 <f_unlink+0x157>
c000634f:	31 c9                	xor    ecx,ecx
c0006351:	89 f2                	mov    edx,esi
c0006353:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006357:	e8 31 cf ff ff       	call   c000328d <remove_chain>
c000635c:	eb 6a                	jmp    c00063c8 <f_unlink+0x157>
c000635e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006362:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006369:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006370:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006373:	75 21                	jne    c0006396 <f_unlink+0x125>
c0006375:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006379:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637d:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006384:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006388:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000638f:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006396:	31 d2                	xor    edx,edx
c0006398:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639f:	e8 f0 cb ff ff       	call   c0002f94 <dir_sdi>
c00063a4:	85 c0                	test   eax,eax
c00063a6:	75 2d                	jne    c00063d5 <f_unlink+0x164>
c00063a8:	31 d2                	xor    edx,edx
c00063aa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063b1:	e8 f0 d3 ff ff       	call   c00037a6 <dir_read>
c00063b6:	85 c0                	test   eax,eax
c00063b8:	0f 84 41 ff ff ff    	je     c00062ff <f_unlink+0x8e>
c00063be:	83 f8 04             	cmp    eax,0x4
c00063c1:	75 12                	jne    c00063d5 <f_unlink+0x164>
c00063c3:	e9 76 ff ff ff       	jmp    c000633e <f_unlink+0xcd>
c00063c8:	85 c0                	test   eax,eax
c00063ca:	75 09                	jne    c00063d5 <f_unlink+0x164>
c00063cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d0:	e8 55 df ff ff       	call   c000432a <sync_fs>
c00063d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063d9:	83 ec 0c             	sub    esp,0xc
c00063dc:	53                   	push   ebx
c00063dd:	e8 5f 1e 00 00       	call   c0008241 <ff_memfree>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e9:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063ef:	5b                   	pop    ebx
c00063f0:	5e                   	pop    esi
c00063f1:	c3                   	ret    

c00063f2 <f_mkdir>:
c00063f2:	57                   	push   edi
c00063f3:	b9 02 00 00 00       	mov    ecx,0x2
c00063f8:	56                   	push   esi
c00063f9:	53                   	push   ebx
c00063fa:	83 c4 80             	add    esp,0xffffff80
c00063fd:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006401:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006408:	e8 ba c0 ff ff       	call   c00024c7 <mount_volume>
c000640d:	89 c3                	mov    ebx,eax
c000640f:	85 c0                	test   eax,eax
c0006411:	0f 85 fe 01 00 00    	jne    c0006615 <f_mkdir+0x223>
c0006417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000641b:	83 ec 0c             	sub    esp,0xc
c000641e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006422:	bb 11 00 00 00       	mov    ebx,0x11
c0006427:	68 60 04 00 00       	push   0x460
c000642c:	e8 fa 1d 00 00       	call   c000822b <ff_memalloc>
c0006431:	83 c4 10             	add    esp,0x10
c0006434:	89 c7                	mov    edi,eax
c0006436:	85 c0                	test   eax,eax
c0006438:	0f 84 d7 01 00 00    	je     c0006615 <f_mkdir+0x223>
c000643e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006442:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006448:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000644b:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000644e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006455:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006459:	e8 d5 e7 ff ff       	call   c0004c33 <follow_path>
c000645e:	89 c3                	mov    ebx,eax
c0006460:	85 c0                	test   eax,eax
c0006462:	74 3e                	je     c00064a2 <f_mkdir+0xb0>
c0006464:	83 f8 04             	cmp    eax,0x4
c0006467:	75 3e                	jne    c00064a7 <f_mkdir+0xb5>
c0006469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646d:	31 d2                	xor    edx,edx
c000646f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006473:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006477:	e8 10 cc ff ff       	call   c000308c <create_chain>
c000647c:	89 c6                	mov    esi,eax
c000647e:	85 c0                	test   eax,eax
c0006480:	74 0c                	je     c000648e <f_mkdir+0x9c>
c0006482:	bb 02 00 00 00       	mov    ebx,0x2
c0006487:	83 f8 01             	cmp    eax,0x1
c000648a:	74 07                	je     c0006493 <f_mkdir+0xa1>
c000648c:	eb 2a                	jmp    c00064b8 <f_mkdir+0xc6>
c000648e:	bb 07 00 00 00       	mov    ebx,0x7
c0006493:	31 c9                	xor    ecx,ecx
c0006495:	89 f2                	mov    edx,esi
c0006497:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000649b:	e8 ed cd ff ff       	call   c000328d <remove_chain>
c00064a0:	eb 05                	jmp    c00064a7 <f_mkdir+0xb5>
c00064a2:	bb 08 00 00 00       	mov    ebx,0x8
c00064a7:	83 ec 0c             	sub    esp,0xc
c00064aa:	57                   	push   edi
c00064ab:	e8 91 1d 00 00       	call   c0008241 <ff_memfree>
c00064b0:	83 c4 10             	add    esp,0x10
c00064b3:	e9 5d 01 00 00       	jmp    c0006615 <f_mkdir+0x223>
c00064b8:	bb 01 00 00 00       	mov    ebx,0x1
c00064bd:	83 f8 ff             	cmp    eax,0xffffffff
c00064c0:	74 d1                	je     c0006493 <f_mkdir+0xa1>
c00064c2:	89 f2                	mov    edx,esi
c00064c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c8:	e8 08 cf ff ff       	call   c00033d5 <dir_clear>
c00064cd:	89 c3                	mov    ebx,eax
c00064cf:	85 c0                	test   eax,eax
c00064d1:	75 c0                	jne    c0006493 <f_mkdir+0xa1>
c00064d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064da:	74 69                	je     c0006545 <f_mkdir+0x153>
c00064dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00064e1:	83 c0 54             	add    eax,0x54
c00064e4:	ba 20 00 00 00       	mov    edx,0x20
c00064e9:	e8 eb b5 ff ff       	call   c0001ad9 <mem_set>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	83 c0 6a             	add    eax,0x6a
c00064f5:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c00064f9:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c00064fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0006502:	e8 b4 b5 ff ff       	call   c0001abb <st_dword>
c0006507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650b:	89 f1                	mov    ecx,esi
c000650d:	8d 50 54             	lea    edx,[eax+0x54]
c0006510:	e8 bc e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0006515:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006519:	b9 20 00 00 00       	mov    ecx,0x20
c000651e:	8d 50 54             	lea    edx,[eax+0x54]
c0006521:	83 c0 74             	add    eax,0x74
c0006524:	e8 9b b5 ff ff       	call   c0001ac4 <mem_cpy>
c0006529:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006531:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006535:	8d 50 74             	lea    edx,[eax+0x74]
c0006538:	e8 94 e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c000653d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006541:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006545:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006549:	e8 59 db ff ff       	call   c00040a7 <dir_register>
c000654e:	89 c3                	mov    ebx,eax
c0006550:	85 c0                	test   eax,eax
c0006552:	0f 85 3b ff ff ff    	jne    c0006493 <f_mkdir+0xa1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000655f:	75 74                	jne    c00065d5 <f_mkdir+0x1e3>
c0006561:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006564:	ba 00 00 21 50       	mov    edx,0x50210000
c0006569:	83 c0 0c             	add    eax,0xc
c000656c:	e8 4a b5 ff ff       	call   c0001abb <st_dword>
c0006571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006575:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006578:	89 f2                	mov    edx,esi
c000657a:	83 c0 34             	add    eax,0x34
c000657d:	e8 39 b5 ff ff       	call   c0001abb <st_dword>
c0006582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006586:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000658a:	c1 e2 09             	shl    edx,0x9
c000658d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006590:	83 c0 38             	add    eax,0x38
c0006593:	e8 23 b5 ff ff       	call   c0001abb <st_dword>
c0006598:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659c:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a0:	c1 e2 09             	shl    edx,0x9
c00065a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a6:	83 c0 28             	add    eax,0x28
c00065a9:	e8 0d b5 ff ff       	call   c0001abb <st_dword>
c00065ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065b5:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065bc:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065c4:	e8 cf d3 ff ff       	call   c0003998 <store_xdir>
c00065c9:	89 c3                	mov    ebx,eax
c00065cb:	85 c0                	test   eax,eax
c00065cd:	0f 85 d4 fe ff ff    	jne    c00064a7 <f_mkdir+0xb5>
c00065d3:	eb 30                	jmp    c0006605 <f_mkdir+0x213>
c00065d5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00065de:	83 c0 16             	add    eax,0x16
c00065e1:	e8 d5 b4 ff ff       	call   c0001abb <st_dword>
c00065e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ea:	89 f1                	mov    ecx,esi
c00065ec:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065f0:	e8 dc e5 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00065f5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f9:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00065fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006601:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006605:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006609:	e8 1c dd ff ff       	call   c000432a <sync_fs>
c000660e:	89 c3                	mov    ebx,eax
c0006610:	e9 92 fe ff ff       	jmp    c00064a7 <f_mkdir+0xb5>
c0006615:	83 ec 80             	sub    esp,0xffffff80
c0006618:	89 d8                	mov    eax,ebx
c000661a:	5b                   	pop    ebx
c000661b:	5e                   	pop    esi
c000661c:	5f                   	pop    edi
c000661d:	c3                   	ret    

c000661e <f_rename>:
c000661e:	55                   	push   ebp
c000661f:	57                   	push   edi
c0006620:	56                   	push   esi
c0006621:	53                   	push   ebx
c0006622:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006628:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000662f:	e8 f3 b9 ff ff       	call   c0002027 <get_ldnumber>
c0006634:	b9 02 00 00 00       	mov    ecx,0x2
c0006639:	8d 54 24 14          	lea    edx,[esp+0x14]
c000663d:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006644:	e8 7e be ff ff       	call   c00024c7 <mount_volume>
c0006649:	85 c0                	test   eax,eax
c000664b:	0f 85 b5 02 00 00    	jne    c0006906 <f_rename+0x2e8>
c0006651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000665c:	68 60 04 00 00       	push   0x460
c0006661:	e8 c5 1b 00 00       	call   c000822b <ff_memalloc>
c0006666:	89 c3                	mov    ebx,eax
c0006668:	83 c4 10             	add    esp,0x10
c000666b:	b8 11 00 00 00       	mov    eax,0x11
c0006670:	85 db                	test   ebx,ebx
c0006672:	0f 84 8e 02 00 00    	je     c0006906 <f_rename+0x2e8>
c0006678:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000667c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006685:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006688:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000668f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006693:	e8 9b e5 ff ff       	call   c0004c33 <follow_path>
c0006698:	85 c0                	test   eax,eax
c000669a:	0f 85 52 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066a0:	b8 06 00 00 00       	mov    eax,0x6
c00066a5:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ad:	0f 85 3f 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066ba:	0f 85 05 01 00 00    	jne    c00067c5 <f_rename+0x1a7>
c00066c0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066c3:	b9 40 00 00 00       	mov    ecx,0x40
c00066c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066cc:	e8 f3 b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066d1:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066d6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066da:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066e1:	e8 de b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066e6:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066ed:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066f4:	e8 3a e5 ff ff       	call   c0004c33 <follow_path>
c00066f9:	85 c0                	test   eax,eax
c00066fb:	75 29                	jne    c0006726 <f_rename+0x108>
c00066fd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006701:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006708:	74 0a                	je     c0006714 <f_rename+0xf6>
c000670a:	b8 08 00 00 00       	mov    eax,0x8
c000670f:	e9 de 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c0006714:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000671b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006722:	75 e6                	jne    c000670a <f_rename+0xec>
c0006724:	eb 09                	jmp    c000672f <f_rename+0x111>
c0006726:	83 f8 04             	cmp    eax,0x4
c0006729:	0f 85 c3 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000672f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006736:	e8 6c d9 ff ff       	call   c00040a7 <dir_register>
c000673b:	85 c0                	test   eax,eax
c000673d:	0f 85 af 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006747:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000674a:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000674d:	89 c5                	mov    ebp,eax
c000674f:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006752:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006756:	8d 46 24             	lea    eax,[esi+0x24]
c0006759:	e8 e7 b2 ff ff       	call   c0001a45 <ld_word>
c000675e:	b9 40 00 00 00       	mov    ecx,0x40
c0006763:	89 c7                	mov    edi,eax
c0006765:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006769:	89 f0                	mov    eax,esi
c000676b:	e8 54 b3 ff ff       	call   c0001ac4 <mem_cpy>
c0006770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006774:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006777:	89 e9                	mov    ecx,ebp
c0006779:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c000677c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006780:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006784:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006787:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000678a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000678d:	83 c0 24             	add    eax,0x24
c0006790:	0f b7 d7             	movzx  edx,di
c0006793:	e8 1f b3 ff ff       	call   c0001ab7 <st_word>
c0006798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000679f:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067a2:	a8 10                	test   al,0x10
c00067a4:	75 06                	jne    c00067ac <f_rename+0x18e>
c00067a6:	83 c8 20             	or     eax,0x20
c00067a9:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067ac:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067b3:	e8 e0 d1 ff ff       	call   c0003998 <store_xdir>
c00067b8:	85 c0                	test   eax,eax
c00067ba:	0f 84 1c 01 00 00    	je     c00068dc <f_rename+0x2be>
c00067c0:	e9 2d 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c00067c5:	b9 20 00 00 00       	mov    ecx,0x20
c00067ca:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067d5:	e8 ea b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067da:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067df:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067e3:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ea:	e8 d5 b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067ef:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00067f6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067fd:	e8 31 e4 ff ff       	call   c0004c33 <follow_path>
c0006802:	85 c0                	test   eax,eax
c0006804:	75 27                	jne    c000682d <f_rename+0x20f>
c0006806:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000680a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006811:	0f 85 f3 fe ff ff    	jne    c000670a <f_rename+0xec>
c0006817:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000681e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006825:	0f 85 df fe ff ff    	jne    c000670a <f_rename+0xec>
c000682b:	eb 09                	jmp    c0006836 <f_rename+0x218>
c000682d:	83 f8 04             	cmp    eax,0x4
c0006830:	0f 85 bc 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006836:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683d:	e8 65 d8 ff ff       	call   c00040a7 <dir_register>
c0006842:	85 c0                	test   eax,eax
c0006844:	0f 85 a8 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000684a:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006851:	b9 13 00 00 00       	mov    ecx,0x13
c0006856:	8d 54 24 25          	lea    edx,[esp+0x25]
c000685a:	8d 46 0d             	lea    eax,[esi+0xd]
c000685d:	e8 62 b2 ff ff       	call   c0001ac4 <mem_cpy>
c0006862:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006866:	a8 10                	test   al,0x10
c0006868:	75 03                	jne    c000686d <f_rename+0x24f>
c000686a:	83 c8 20             	or     eax,0x20
c000686d:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c000687c:	74 5e                	je     c00068dc <f_rename+0x2be>
c000687e:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006885:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006889:	74 51                	je     c00068dc <f_rename+0x2be>
c000688b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000688f:	89 f2                	mov    edx,esi
c0006891:	8a 07                	mov    al,BYTE PTR [edi]
c0006893:	e8 10 e3 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006898:	89 c2                	mov    edx,eax
c000689a:	89 f8                	mov    eax,edi
c000689c:	e8 3d b4 ff ff       	call   c0001cde <clst2sect>
c00068a1:	89 c6                	mov    esi,eax
c00068a3:	89 d1                	mov    ecx,edx
c00068a5:	b8 02 00 00 00       	mov    eax,0x2
c00068aa:	09 f2                	or     edx,esi
c00068ac:	74 44                	je     c00068f2 <f_rename+0x2d4>
c00068ae:	89 f2                	mov    edx,esi
c00068b0:	89 f8                	mov    eax,edi
c00068b2:	e8 65 b9 ff ff       	call   c000221c <move_window>
c00068b7:	85 c0                	test   eax,eax
c00068b9:	75 37                	jne    c00068f2 <f_rename+0x2d4>
c00068bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bf:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068c3:	75 17                	jne    c00068dc <f_rename+0x2be>
c00068c5:	8d 50 74             	lea    edx,[eax+0x74]
c00068c8:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068cf:	e8 fd e2 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00068d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068dc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e0:	e8 38 d1 ff ff       	call   c0003a1d <dir_remove>
c00068e5:	85 c0                	test   eax,eax
c00068e7:	75 09                	jne    c00068f2 <f_rename+0x2d4>
c00068e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ed:	e8 38 da ff ff       	call   c000432a <sync_fs>
c00068f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00068f6:	83 ec 0c             	sub    esp,0xc
c00068f9:	53                   	push   ebx
c00068fa:	e8 42 19 00 00       	call   c0008241 <ff_memfree>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006906:	81 c4 fc 00 00 00    	add    esp,0xfc
c000690c:	5b                   	pop    ebx
c000690d:	5e                   	pop    esi
c000690e:	5f                   	pop    edi
c000690f:	5d                   	pop    ebp
c0006910:	c3                   	ret    

c0006911 <f_chmod>:
c0006911:	57                   	push   edi
c0006912:	b9 02 00 00 00       	mov    ecx,0x2
c0006917:	56                   	push   esi
c0006918:	53                   	push   ebx
c0006919:	83 ec 60             	sub    esp,0x60
c000691c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006920:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006924:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006928:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000692c:	e8 96 bb ff ff       	call   c00024c7 <mount_volume>
c0006931:	85 c0                	test   eax,eax
c0006933:	0f 85 af 00 00 00    	jne    c00069e8 <f_chmod+0xd7>
c0006939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000693d:	83 ec 0c             	sub    esp,0xc
c0006940:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006944:	68 60 04 00 00       	push   0x460
c0006949:	e8 dd 18 00 00       	call   c000822b <ff_memalloc>
c000694e:	89 c6                	mov    esi,eax
c0006950:	83 c4 10             	add    esp,0x10
c0006953:	b8 11 00 00 00       	mov    eax,0x11
c0006958:	85 f6                	test   esi,esi
c000695a:	0f 84 88 00 00 00    	je     c00069e8 <f_chmod+0xd7>
c0006960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006964:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000696a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000696d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006970:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006974:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006978:	e8 b6 e2 ff ff       	call   c0004c33 <follow_path>
c000697d:	85 c0                	test   eax,eax
c000697f:	75 53                	jne    c00069d4 <f_chmod+0xc3>
c0006981:	b8 06 00 00 00       	mov    eax,0x6
c0006986:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c000698b:	75 47                	jne    c00069d4 <f_chmod+0xc3>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	89 f9                	mov    ecx,edi
c0006993:	83 e1 27             	and    ecx,0x27
c0006996:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006999:	75 1d                	jne    c00069b8 <f_chmod+0xa7>
c000699b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000699e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a1:	21 cb                	and    ebx,ecx
c00069a3:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a6:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ad:	e8 e6 cf ff ff       	call   c0003998 <store_xdir>
c00069b2:	85 c0                	test   eax,eax
c00069b4:	75 1e                	jne    c00069d4 <f_chmod+0xc3>
c00069b6:	eb 13                	jmp    c00069cb <f_chmod+0xba>
c00069b8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069bc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069bf:	21 cb                	and    ebx,ecx
c00069c1:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c4:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069cf:	e8 56 d9 ff ff       	call   c000432a <sync_fs>
c00069d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069d8:	83 ec 0c             	sub    esp,0xc
c00069db:	56                   	push   esi
c00069dc:	e8 60 18 00 00       	call   c0008241 <ff_memfree>
c00069e1:	83 c4 10             	add    esp,0x10
c00069e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069e8:	83 c4 60             	add    esp,0x60
c00069eb:	5b                   	pop    ebx
c00069ec:	5e                   	pop    esi
c00069ed:	5f                   	pop    edi
c00069ee:	c3                   	ret    

c00069ef <f_utime>:
c00069ef:	56                   	push   esi
c00069f0:	b9 02 00 00 00       	mov    ecx,0x2
c00069f5:	53                   	push   ebx
c00069f6:	83 ec 64             	sub    esp,0x64
c00069f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069fd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a01:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a05:	e8 bd ba ff ff       	call   c00024c7 <mount_volume>
c0006a0a:	85 c0                	test   eax,eax
c0006a0c:	0f 85 b5 00 00 00    	jne    c0006ac7 <f_utime+0xd8>
c0006a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a16:	83 ec 0c             	sub    esp,0xc
c0006a19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a1d:	68 60 04 00 00       	push   0x460
c0006a22:	e8 04 18 00 00       	call   c000822b <ff_memalloc>
c0006a27:	89 c3                	mov    ebx,eax
c0006a29:	83 c4 10             	add    esp,0x10
c0006a2c:	b8 11 00 00 00       	mov    eax,0x11
c0006a31:	85 db                	test   ebx,ebx
c0006a33:	0f 84 8e 00 00 00    	je     c0006ac7 <f_utime+0xd8>
c0006a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3d:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a43:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a46:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a49:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a4d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a51:	e8 dd e1 ff ff       	call   c0004c33 <follow_path>
c0006a56:	85 c0                	test   eax,eax
c0006a58:	75 59                	jne    c0006ab3 <f_utime+0xc4>
c0006a5a:	b8 06 00 00 00       	mov    eax,0x6
c0006a5f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a64:	75 4d                	jne    c0006ab3 <f_utime+0xc4>
c0006a66:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6e:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a72:	c1 e2 10             	shl    edx,0x10
c0006a75:	09 ca                	or     edx,ecx
c0006a77:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a7a:	75 1a                	jne    c0006a96 <f_utime+0xa7>
c0006a7c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a7f:	83 c0 0c             	add    eax,0xc
c0006a82:	e8 34 b0 ff ff       	call   c0001abb <st_dword>
c0006a87:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a8b:	e8 08 cf ff ff       	call   c0003998 <store_xdir>
c0006a90:	85 c0                	test   eax,eax
c0006a92:	75 1f                	jne    c0006ab3 <f_utime+0xc4>
c0006a94:	eb 14                	jmp    c0006aaa <f_utime+0xbb>
c0006a96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a9a:	83 c0 16             	add    eax,0x16
c0006a9d:	e8 19 b0 ff ff       	call   c0001abb <st_dword>
c0006aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aae:	e8 77 d8 ff ff       	call   c000432a <sync_fs>
c0006ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ab7:	83 ec 0c             	sub    esp,0xc
c0006aba:	53                   	push   ebx
c0006abb:	e8 81 17 00 00       	call   c0008241 <ff_memfree>
c0006ac0:	83 c4 10             	add    esp,0x10
c0006ac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ac7:	83 c4 64             	add    esp,0x64
c0006aca:	5b                   	pop    ebx
c0006acb:	5e                   	pop    esi
c0006acc:	c3                   	ret    

c0006acd <f_getlabel>:
c0006acd:	55                   	push   ebp
c0006ace:	31 c9                	xor    ecx,ecx
c0006ad0:	57                   	push   edi
c0006ad1:	56                   	push   esi
c0006ad2:	53                   	push   ebx
c0006ad3:	83 ec 6c             	sub    esp,0x6c
c0006ad6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ada:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ae1:	e8 e1 b9 ff ff       	call   c00024c7 <mount_volume>
c0006ae6:	89 c3                	mov    ebx,eax
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	0f 85 73 01 00 00    	jne    c0006c63 <f_getlabel+0x196>
c0006af0:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006af8:	0f 84 65 01 00 00    	je     c0006c63 <f_getlabel+0x196>
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	31 d2                	xor    edx,edx
c0006b04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b14:	e8 7b c4 ff ff       	call   c0002f94 <dir_sdi>
c0006b19:	89 c3                	mov    ebx,eax
c0006b1b:	85 c0                	test   eax,eax
c0006b1d:	0f 85 2f 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b23:	ba 01 00 00 00       	mov    edx,0x1
c0006b28:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2c:	e8 75 cc ff ff       	call   c00037a6 <dir_read>
c0006b31:	89 c3                	mov    ebx,eax
c0006b33:	85 c0                	test   eax,eax
c0006b35:	0f 85 17 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b3f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b42:	74 09                	je     c0006b4d <f_getlabel+0x80>
c0006b44:	31 f6                	xor    esi,esi
c0006b46:	31 c9                	xor    ecx,ecx
c0006b48:	e9 c8 00 00 00       	jmp    c0006c15 <f_getlabel+0x148>
c0006b4d:	31 ed                	xor    ebp,ebp
c0006b4f:	31 f6                	xor    esi,esi
c0006b51:	31 ff                	xor    edi,edi
c0006b53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b57:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b5b:	39 fa                	cmp    edx,edi
c0006b5d:	76 4b                	jbe    c0006baa <f_getlabel+0xdd>
c0006b5f:	47                   	inc    edi
c0006b60:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b63:	01 d0                	add    eax,edx
c0006b65:	e8 db ae ff ff       	call   c0001a45 <ld_word>
c0006b6a:	66 85 ed             	test   bp,bp
c0006b6d:	75 0d                	jne    c0006b7c <f_getlabel+0xaf>
c0006b6f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b75:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b7a:	76 28                	jbe    c0006ba4 <f_getlabel+0xd7>
c0006b7c:	89 e9                	mov    ecx,ebp
c0006b7e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b85:	c1 e1 10             	shl    ecx,0x10
c0006b88:	01 f2                	add    edx,esi
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	09 c8                	or     eax,ecx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 4c b0 ff ff       	call   c0001be5 <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 0b                	je     c0006ba8 <f_getlabel+0xdb>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c6                	add    esi,eax
c0006ba2:	31 c0                	xor    eax,eax
c0006ba4:	89 c5                	mov    ebp,eax
c0006ba6:	eb ab                	jmp    c0006b53 <f_getlabel+0x86>
c0006ba8:	31 f6                	xor    esi,esi
c0006baa:	66 85 ed             	test   bp,bp
c0006bad:	74 02                	je     c0006bb1 <f_getlabel+0xe4>
c0006baf:	31 f6                	xor    esi,esi
c0006bb1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bb8:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bbc:	e9 a2 00 00 00       	jmp    c0006c63 <f_getlabel+0x196>
c0006bc1:	83 ff 0b             	cmp    edi,0xb
c0006bc4:	74 11                	je     c0006bd7 <f_getlabel+0x10a>
c0006bc6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bcf:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bd2:	c1 e0 08             	shl    eax,0x8
c0006bd5:	09 c2                	or     edx,eax
c0006bd7:	50                   	push   eax
c0006bd8:	50                   	push   eax
c0006bd9:	68 b5 01 00 00       	push   0x1b5
c0006bde:	0f b7 d2             	movzx  edx,dx
c0006be1:	52                   	push   edx
c0006be2:	e8 07 17 00 00       	call   c00082ee <ff_oem2uni>
c0006be7:	83 c4 10             	add    esp,0x10
c0006bea:	66 85 c0             	test   ax,ax
c0006bed:	74 46                	je     c0006c35 <f_getlabel+0x168>
c0006bef:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bf6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bfb:	01 f2                	add    edx,esi
c0006bfd:	0f b7 c0             	movzx  eax,ax
c0006c00:	e8 e0 af ff ff       	call   c0001be5 <put_utf>
c0006c05:	84 c0                	test   al,al
c0006c07:	74 2c                	je     c0006c35 <f_getlabel+0x168>
c0006c09:	0f b6 c0             	movzx  eax,al
c0006c0c:	01 c6                	add    esi,eax
c0006c0e:	83 ff 0b             	cmp    edi,0xb
c0006c11:	74 24                	je     c0006c37 <f_getlabel+0x16a>
c0006c13:	89 f9                	mov    ecx,edi
c0006c15:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c19:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c1c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c21:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2a:	e8 ea ae ff ff       	call   c0001b19 <dbc_1st>
c0006c2f:	85 c0                	test   eax,eax
c0006c31:	74 a4                	je     c0006bd7 <f_getlabel+0x10a>
c0006c33:	eb 8c                	jmp    c0006bc1 <f_getlabel+0xf4>
c0006c35:	31 f6                	xor    esi,esi
c0006c37:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c41:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c48:	74 19                	je     c0006c63 <f_getlabel+0x196>
c0006c4a:	4e                   	dec    esi
c0006c4b:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c4e:	74 ee                	je     c0006c3e <f_getlabel+0x171>
c0006c50:	eb 11                	jmp    c0006c63 <f_getlabel+0x196>
c0006c52:	83 fb 04             	cmp    ebx,0x4
c0006c55:	75 0c                	jne    c0006c63 <f_getlabel+0x196>
c0006c57:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c5e:	31 db                	xor    ebx,ebx
c0006c60:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c63:	85 db                	test   ebx,ebx
c0006c65:	75 50                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c67:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c6f:	74 46                	je     c0006cb7 <f_getlabel+0x1ea>
c0006c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c75:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c78:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7b:	e8 9c b5 ff ff       	call   c000221c <move_window>
c0006c80:	89 c3                	mov    ebx,eax
c0006c82:	85 c0                	test   eax,eax
c0006c84:	75 31                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8a:	b8 43 00 00 00       	mov    eax,0x43
c0006c8f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c91:	80 f9 03             	cmp    cl,0x3
c0006c94:	74 0f                	je     c0006ca5 <f_getlabel+0x1d8>
c0006c96:	31 c0                	xor    eax,eax
c0006c98:	80 f9 04             	cmp    cl,0x4
c0006c9b:	0f 94 c0             	sete   al
c0006c9e:	48                   	dec    eax
c0006c9f:	83 e0 c3             	and    eax,0xffffffc3
c0006ca2:	83 c0 64             	add    eax,0x64
c0006ca5:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ca9:	e8 a4 ad ff ff       	call   c0001a52 <ld_dword>
c0006cae:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb5:	89 07                	mov    DWORD PTR [edi],eax
c0006cb7:	83 c4 6c             	add    esp,0x6c
c0006cba:	89 d8                	mov    eax,ebx
c0006cbc:	5b                   	pop    ebx
c0006cbd:	5e                   	pop    esi
c0006cbe:	5f                   	pop    edi
c0006cbf:	5d                   	pop    ebp
c0006cc0:	c3                   	ret    

c0006cc1 <f_setlabel>:
c0006cc1:	56                   	push   esi
c0006cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0006cc7:	53                   	push   ebx
c0006cc8:	83 ec 74             	sub    esp,0x74
c0006ccb:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ccf:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cd6:	e8 ec b7 ff ff       	call   c00024c7 <mount_volume>
c0006cdb:	89 c6                	mov    esi,eax
c0006cdd:	85 c0                	test   eax,eax
c0006cdf:	0f 85 41 02 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006ce5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ce9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cec:	0f 85 8e 00 00 00    	jne    c0006d80 <f_setlabel+0xbf>
c0006cf2:	b9 16 00 00 00       	mov    ecx,0x16
c0006cf7:	31 d2                	xor    edx,edx
c0006cf9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006cfd:	31 db                	xor    ebx,ebx
c0006cff:	e8 d5 ad ff ff       	call   c0001ad9 <mem_set>
c0006d04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d0e:	0f 86 0a 01 00 00    	jbe    c0006e1e <f_setlabel+0x15d>
c0006d14:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d1b:	e8 ff ad ff ff       	call   c0001b1f <tchar2uni>
c0006d20:	89 c6                	mov    esi,eax
c0006d22:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d27:	76 2a                	jbe    c0006d53 <f_setlabel+0x92>
c0006d29:	83 f8 ff             	cmp    eax,0xffffffff
c0006d2c:	74 05                	je     c0006d33 <f_setlabel+0x72>
c0006d2e:	83 fb 09             	cmp    ebx,0x9
c0006d31:	76 0a                	jbe    c0006d3d <f_setlabel+0x7c>
c0006d33:	be 06 00 00 00       	mov    esi,0x6
c0006d38:	e9 e9 01 00 00       	jmp    c0006f26 <f_setlabel+0x265>
c0006d3d:	89 c2                	mov    edx,eax
c0006d3f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d43:	c1 ea 10             	shr    edx,0x10
c0006d46:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d49:	01 c8                	add    eax,ecx
c0006d4b:	43                   	inc    ebx
c0006d4c:	e8 66 ad ff ff       	call   c0001ab7 <st_word>
c0006d51:	eb 04                	jmp    c0006d57 <f_setlabel+0x96>
c0006d53:	85 c0                	test   eax,eax
c0006d55:	74 dc                	je     c0006d33 <f_setlabel+0x72>
c0006d57:	89 f2                	mov    edx,esi
c0006d59:	b8 57 03 02 c0       	mov    eax,0xc0020357
c0006d5e:	e8 a4 ad ff ff       	call   c0001b07 <chk_chr>
c0006d63:	85 c0                	test   eax,eax
c0006d65:	75 cc                	jne    c0006d33 <f_setlabel+0x72>
c0006d67:	83 fb 0a             	cmp    ebx,0xa
c0006d6a:	77 c7                	ja     c0006d33 <f_setlabel+0x72>
c0006d6c:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d6f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d73:	0f b7 d6             	movzx  edx,si
c0006d76:	01 c8                	add    eax,ecx
c0006d78:	43                   	inc    ebx
c0006d79:	e8 39 ad ff ff       	call   c0001ab7 <st_word>
c0006d7e:	eb 84                	jmp    c0006d04 <f_setlabel+0x43>
c0006d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d85:	ba 20 00 00 00       	mov    edx,0x20
c0006d8a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	e8 44 ad ff ff       	call   c0001ad9 <mem_set>
c0006d95:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d9c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d9f:	76 60                	jbe    c0006e01 <f_setlabel+0x140>
c0006da1:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006da8:	e8 72 ad ff ff       	call   c0001b1f <tchar2uni>
c0006dad:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db2:	0f 87 7b ff ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006db8:	83 ec 0c             	sub    esp,0xc
c0006dbb:	50                   	push   eax
c0006dbc:	e8 9c 15 00 00       	call   c000835d <ff_wtoupper>
c0006dc1:	5a                   	pop    edx
c0006dc2:	59                   	pop    ecx
c0006dc3:	68 b5 01 00 00       	push   0x1b5
c0006dc8:	50                   	push   eax
c0006dc9:	e8 8a 14 00 00       	call   c0008258 <ff_uni2oem>
c0006dce:	83 c4 10             	add    esp,0x10
c0006dd1:	89 c6                	mov    esi,eax
c0006dd3:	66 85 c0             	test   ax,ax
c0006dd6:	0f 84 57 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006ddc:	0f b7 d0             	movzx  edx,ax
c0006ddf:	b8 50 03 02 c0       	mov    eax,0xc0020350
c0006de4:	e8 1e ad ff ff       	call   c0001b07 <chk_chr>
c0006de9:	85 c0                	test   eax,eax
c0006deb:	0f 85 42 ff ff ff    	jne    c0006d33 <f_setlabel+0x72>
c0006df1:	66 81 fe ff 00       	cmp    si,0xff
c0006df6:	0f 87 14 01 00 00    	ja     c0006f10 <f_setlabel+0x24f>
c0006dfc:	e9 fa 00 00 00       	jmp    c0006efb <f_setlabel+0x23a>
c0006e01:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e06:	0f 84 27 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006e0c:	85 db                	test   ebx,ebx
c0006e0e:	74 0e                	je     c0006e1e <f_setlabel+0x15d>
c0006e10:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e13:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e18:	75 04                	jne    c0006e1e <f_setlabel+0x15d>
c0006e1a:	89 c3                	mov    ebx,eax
c0006e1c:	eb ee                	jmp    c0006e0c <f_setlabel+0x14b>
c0006e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e22:	31 d2                	xor    edx,edx
c0006e24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e2c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e34:	e8 5b c1 ff ff       	call   c0002f94 <dir_sdi>
c0006e39:	89 c6                	mov    esi,eax
c0006e3b:	85 c0                	test   eax,eax
c0006e3d:	0f 85 e3 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e43:	ba 01 00 00 00       	mov    edx,0x1
c0006e48:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e4c:	e8 55 c9 ff ff       	call   c00037a6 <dir_read>
c0006e51:	85 c0                	test   eax,eax
c0006e53:	75 21                	jne    c0006e76 <f_setlabel+0x1b5>
c0006e55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e60:	74 5d                	je     c0006ebf <f_setlabel+0x1fe>
c0006e62:	85 db                	test   ebx,ebx
c0006e64:	74 0b                	je     c0006e71 <f_setlabel+0x1b0>
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	eb 70                	jmp    c0006ee1 <f_setlabel+0x220>
c0006e71:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e74:	eb 70                	jmp    c0006ee6 <f_setlabel+0x225>
c0006e76:	83 f8 04             	cmp    eax,0x4
c0006e79:	75 7c                	jne    c0006ef7 <f_setlabel+0x236>
c0006e7b:	85 db                	test   ebx,ebx
c0006e7d:	0f 84 a3 00 00 00    	je     c0006f26 <f_setlabel+0x265>
c0006e83:	ba 01 00 00 00       	mov    edx,0x1
c0006e88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e8c:	e8 8f ca ff ff       	call   c0003920 <dir_alloc>
c0006e91:	89 c6                	mov    esi,eax
c0006e93:	85 c0                	test   eax,eax
c0006e95:	0f 85 8b 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e9b:	31 d2                	xor    edx,edx
c0006e9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea1:	b9 20 00 00 00       	mov    ecx,0x20
c0006ea6:	e8 2e ac ff ff       	call   c0001ad9 <mem_set>
c0006eab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eaf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	75 18                	jne    c0006ed0 <f_setlabel+0x20f>
c0006eb8:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ebb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebf:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec2:	b9 16 00 00 00       	mov    ecx,0x16
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	83 c0 02             	add    eax,0x2
c0006ece:	eb 9b                	jmp    c0006e6b <f_setlabel+0x1aa>
c0006ed0:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ed4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ed9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006edd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee1:	e8 de ab ff ff       	call   c0001ac4 <mem_cpy>
c0006ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef2:	e8 33 d4 ff ff       	call   c000432a <sync_fs>
c0006ef7:	89 c6                	mov    esi,eax
c0006ef9:	eb 2b                	jmp    c0006f26 <f_setlabel+0x265>
c0006efb:	83 fb 0a             	cmp    ebx,0xa
c0006efe:	0f 87 2f fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f04:	89 f0                	mov    eax,esi
c0006f06:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f0a:	43                   	inc    ebx
c0006f0b:	e9 85 fe ff ff       	jmp    c0006d95 <f_setlabel+0xd4>
c0006f10:	83 fb 09             	cmp    ebx,0x9
c0006f13:	0f 87 1a fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	66 c1 e8 08          	shr    ax,0x8
c0006f1f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f23:	43                   	inc    ebx
c0006f24:	eb de                	jmp    c0006f04 <f_setlabel+0x243>
c0006f26:	83 c4 74             	add    esp,0x74
c0006f29:	89 f0                	mov    eax,esi
c0006f2b:	5b                   	pop    ebx
c0006f2c:	5e                   	pop    esi
c0006f2d:	c3                   	ret    

c0006f2e <f_forward>:
c0006f2e:	55                   	push   ebp
c0006f2f:	57                   	push   edi
c0006f30:	56                   	push   esi
c0006f31:	53                   	push   ebx
c0006f32:	83 ec 2c             	sub    esp,0x2c
c0006f35:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f47:	89 d8                	mov    eax,ebx
c0006f49:	e8 f3 b1 ff ff       	call   c0002141 <validate>
c0006f4e:	89 c5                	mov    ebp,eax
c0006f50:	85 c0                	test   eax,eax
c0006f52:	0f 85 aa 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f58:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f5c:	85 ed                	test   ebp,ebp
c0006f5e:	0f 85 9e 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f64:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f68:	0f 84 8f 01 00 00    	je     c00070fd <f_forward+0x1cf>
c0006f6e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f71:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f74:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f77:	bf 00 00 00 00       	mov    edi,0x0
c0006f7c:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f7f:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f83:	89 d1                	mov    ecx,edx
c0006f85:	19 f9                	sbb    ecx,edi
c0006f87:	0f 83 cf 00 00 00    	jae    c000705c <f_forward+0x12e>
c0006f8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f91:	e9 c6 00 00 00       	jmp    c000705c <f_forward+0x12e>
c0006f96:	50                   	push   eax
c0006f97:	50                   	push   eax
c0006f98:	6a 00                	push   0x0
c0006f9a:	6a 00                	push   0x0
c0006f9c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa0:	83 c4 10             	add    esp,0x10
c0006fa3:	85 c0                	test   eax,eax
c0006fa5:	0f 84 57 01 00 00    	je     c0007102 <f_forward+0x1d4>
c0006fab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006faf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fb5:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fb9:	89 d7                	mov    edi,edx
c0006fbb:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fbe:	89 c6                	mov    esi,eax
c0006fc0:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fc4:	21 ce                	and    esi,ecx
c0006fc6:	89 c1                	mov    ecx,eax
c0006fc8:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fce:	0f 84 98 00 00 00    	je     c000706c <f_forward+0x13e>
c0006fd4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fd8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fdb:	89 c8                	mov    eax,ecx
c0006fdd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe1:	e8 f8 ac ff ff       	call   c0001cde <clst2sect>
c0006fe6:	89 d7                	mov    edi,edx
c0006fe8:	09 c7                	or     edi,eax
c0006fea:	0f 84 9e 00 00 00    	je     c000708e <f_forward+0x160>
c0006ff0:	31 ff                	xor    edi,edi
c0006ff2:	01 c6                	add    esi,eax
c0006ff4:	11 d7                	adc    edi,edx
c0006ff6:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ff9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006ffc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007000:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007003:	39 fa                	cmp    edx,edi
c0007005:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007009:	0f 85 a2 00 00 00    	jne    c00070b1 <f_forward+0x183>
c000700f:	39 f0                	cmp    eax,esi
c0007011:	0f 85 9a 00 00 00    	jne    c00070b1 <f_forward+0x183>
c0007017:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701a:	ba 00 02 00 00       	mov    edx,0x200
c000701f:	25 ff 01 00 00       	and    eax,0x1ff
c0007024:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007028:	29 c2                	sub    edx,eax
c000702a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000702d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007030:	39 d1                	cmp    ecx,edx
c0007032:	76 02                	jbe    c0007036 <f_forward+0x108>
c0007034:	89 d1                	mov    ecx,edx
c0007036:	52                   	push   edx
c0007037:	8d 73 50             	lea    esi,[ebx+0x50]
c000703a:	52                   	push   edx
c000703b:	01 c6                	add    esi,eax
c000703d:	51                   	push   ecx
c000703e:	56                   	push   esi
c000703f:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 44                	je     c000708e <f_forward+0x160>
c000704a:	31 ff                	xor    edi,edi
c000704c:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000704f:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007052:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007056:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000705a:	01 07                	add    DWORD PTR [edi],eax
c000705c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007061:	0f 85 2f ff ff ff    	jne    c0006f96 <f_forward+0x68>
c0007067:	e9 96 00 00 00       	jmp    c0007102 <f_forward+0x1d4>
c000706c:	85 f6                	test   esi,esi
c000706e:	0f 85 60 ff ff ff    	jne    c0006fd4 <f_forward+0xa6>
c0007074:	89 d7                	mov    edi,edx
c0007076:	09 c7                	or     edi,eax
c0007078:	75 05                	jne    c000707f <f_forward+0x151>
c000707a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000707d:	eb 0a                	jmp    c0007089 <f_forward+0x15b>
c000707f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007082:	89 d8                	mov    eax,ebx
c0007084:	e8 15 bd ff ff       	call   c0002d9e <get_fat>
c0007089:	83 f8 01             	cmp    eax,0x1
c000708c:	77 0b                	ja     c0007099 <f_forward+0x16b>
c000708e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007092:	bd 02 00 00 00       	mov    ebp,0x2
c0007097:	eb 69                	jmp    c0007102 <f_forward+0x1d4>
c0007099:	83 f8 ff             	cmp    eax,0xffffffff
c000709c:	75 0b                	jne    c00070a9 <f_forward+0x17b>
c000709e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a2:	bd 01 00 00 00       	mov    ebp,0x1
c00070a7:	eb 59                	jmp    c0007102 <f_forward+0x1d4>
c00070a9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070ac:	e9 23 ff ff ff       	jmp    c0006fd4 <f_forward+0xa6>
c00070b1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070b5:	79 20                	jns    c00070d7 <f_forward+0x1a9>
c00070b7:	83 ec 0c             	sub    esp,0xc
c00070ba:	6a 01                	push   0x1
c00070bc:	52                   	push   edx
c00070bd:	50                   	push   eax
c00070be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070c6:	50                   	push   eax
c00070c7:	e8 44 a9 ff ff       	call   c0001a10 <disk_write>
c00070cc:	83 c4 20             	add    esp,0x20
c00070cf:	85 c0                	test   eax,eax
c00070d1:	75 cb                	jne    c000709e <f_forward+0x170>
c00070d3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070d7:	83 ec 0c             	sub    esp,0xc
c00070da:	6a 01                	push   0x1
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ea:	50                   	push   eax
c00070eb:	e8 0a a9 ff ff       	call   c00019fa <disk_read>
c00070f0:	83 c4 20             	add    esp,0x20
c00070f3:	85 c0                	test   eax,eax
c00070f5:	0f 84 1c ff ff ff    	je     c0007017 <f_forward+0xe9>
c00070fb:	eb a1                	jmp    c000709e <f_forward+0x170>
c00070fd:	bd 07 00 00 00       	mov    ebp,0x7
c0007102:	83 c4 2c             	add    esp,0x2c
c0007105:	89 e8                	mov    eax,ebp
c0007107:	5b                   	pop    ebx
c0007108:	5e                   	pop    esi
c0007109:	5f                   	pop    edi
c000710a:	5d                   	pop    ebp
c000710b:	c3                   	ret    

c000710c <f_mkfs>:
c000710c:	55                   	push   ebp
c000710d:	57                   	push   edi
c000710e:	56                   	push   esi
c000710f:	53                   	push   ebx
c0007110:	bb 0b 00 00 00       	mov    ebx,0xb
c0007115:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000711b:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	e8 f9 ae ff ff       	call   c0002027 <get_ldnumber>
c000712e:	85 c0                	test   eax,eax
c0007130:	0f 88 e8 10 00 00    	js     c000821e <f_mkfs+0x1112>
c0007136:	8b 14 85 20 45 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbae0]
c000713d:	85 d2                	test   edx,edx
c000713f:	74 03                	je     c0007144 <f_mkfs+0x38>
c0007141:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007144:	85 f6                	test   esi,esi
c0007146:	75 05                	jne    c000714d <f_mkfs+0x41>
c0007148:	be 40 03 02 c0       	mov    esi,0xc0020340
c000714d:	0f b6 c0             	movzx  eax,al
c0007150:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	bb 03 00 00 00       	mov    ebx,0x3
c000715c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007160:	e8 92 a8 ff ff       	call   c00019f7 <disk_initialize>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	a8 01                	test   al,0x1
c000716a:	0f 85 ae 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c0007170:	bb 0a 00 00 00       	mov    ebx,0xa
c0007175:	a8 04                	test   al,0x4
c0007177:	0f 85 a1 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c000717d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007180:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007184:	85 c0                	test   eax,eax
c0007186:	75 20                	jne    c00071a8 <f_mkfs+0x9c>
c0007188:	51                   	push   ecx
c0007189:	8d 44 24 78          	lea    eax,[esp+0x78]
c000718d:	50                   	push   eax
c000718e:	6a 03                	push   0x3
c0007190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007194:	e8 8d a8 ff ff       	call   c0001a26 <disk_ioctl>
c0007199:	83 c4 10             	add    esp,0x10
c000719c:	85 c0                	test   eax,eax
c000719e:	74 08                	je     c00071a8 <f_mkfs+0x9c>
c00071a0:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071a8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071ac:	8d 42 ff             	lea    eax,[edx-0x1]
c00071af:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071b4:	77 04                	ja     c00071ba <f_mkfs+0xae>
c00071b6:	85 c2                	test   edx,eax
c00071b8:	74 08                	je     c00071c2 <f_mkfs+0xb6>
c00071ba:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071c5:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071c9:	48                   	dec    eax
c00071ca:	3c 01                	cmp    al,0x1
c00071cc:	76 05                	jbe    c00071d3 <f_mkfs+0xc7>
c00071ce:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071da:	48                   	dec    eax
c00071db:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e0:	77 07                	ja     c00071e9 <f_mkfs+0xdd>
c00071e2:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071e7:	74 08                	je     c00071f1 <f_mkfs+0xe5>
c00071e9:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071f4:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00071fa:	77 07                	ja     c0007203 <f_mkfs+0xf7>
c00071fc:	8d 43 ff             	lea    eax,[ebx-0x1]
c00071ff:	85 d8                	test   eax,ebx
c0007201:	74 02                	je     c0007205 <f_mkfs+0xf9>
c0007203:	31 db                	xor    ebx,ebx
c0007205:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007210:	77 0a                	ja     c000721c <f_mkfs+0x110>
c0007212:	bb 11 00 00 00       	mov    ebx,0x11
c0007217:	e9 02 10 00 00       	jmp    c000821e <f_mkfs+0x1112>
c000721c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007223:	8b 36                	mov    esi,DWORD PTR [esi]
c0007225:	85 ed                	test   ebp,ebp
c0007227:	75 1e                	jne    c0007247 <f_mkfs+0x13b>
c0007229:	83 ec 0c             	sub    esp,0xc
c000722c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007233:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007238:	50                   	push   eax
c0007239:	e8 ed 0f 00 00       	call   c000822b <ff_memalloc>
c000723e:	83 c4 10             	add    esp,0x10
c0007241:	89 c5                	mov    ebp,eax
c0007243:	85 c0                	test   eax,eax
c0007245:	74 cb                	je     c0007212 <f_mkfs+0x106>
c0007247:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000724f:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007257:	52                   	push   edx
c0007258:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000725c:	50                   	push   eax
c000725d:	6a 01                	push   0x1
c000725f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007263:	e8 be a7 ff ff       	call   c0001a26 <disk_ioctl>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	85 c0                	test   eax,eax
c000726d:	0f 85 46 0f 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007273:	89 f1                	mov    ecx,esi
c0007275:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000727d:	83 e1 0f             	and    ecx,0xf
c0007280:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007288:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000728c:	83 e6 08             	and    esi,0x8
c000728f:	75 56                	jne    c00072e7 <f_mkfs+0x1db>
c0007291:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007295:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007299:	83 ff 00             	cmp    edi,0x0
c000729c:	76 20                	jbe    c00072be <f_mkfs+0x1b2>
c000729e:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072a3:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072a9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b1:	83 d7 ff             	adc    edi,0xffffffff
c00072b4:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072b8:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072bc:	eb 21                	jmp    c00072df <f_mkfs+0x1d3>
c00072be:	ba 3f 00 00 00       	mov    edx,0x3f
c00072c3:	39 f2                	cmp    edx,esi
c00072c5:	19 f8                	sbb    eax,edi
c00072c7:	73 1e                	jae    c00072e7 <f_mkfs+0x1db>
c00072c9:	83 c6 c1             	add    esi,0xffffffc1
c00072cc:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072d4:	83 d7 ff             	adc    edi,0xffffffff
c00072d7:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072db:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072f6:	ba 7f 00 00 00       	mov    edx,0x7f
c00072fb:	31 c0                	xor    eax,eax
c00072fd:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007300:	89 c7                	mov    edi,eax
c0007302:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007306:	0f 83 c1 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c000730c:	89 df                	mov    edi,ebx
c000730e:	c1 ef 09             	shr    edi,0x9
c0007311:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007315:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000731c:	c1 ef 09             	shr    edi,0x9
c000731f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007324:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007328:	74 29                	je     c0007353 <f_mkfs+0x247>
c000732a:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000732f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007335:	0f 97 c2             	seta   dl
c0007338:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000733b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000733f:	0f 92 c0             	setb   al
c0007342:	08 c2                	or     dl,al
c0007344:	75 5b                	jne    c00073a1 <f_mkfs+0x295>
c0007346:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000734a:	83 e0 07             	and    eax,0x7
c000734d:	3c 04                	cmp    al,0x4
c000734f:	74 50                	je     c00073a1 <f_mkfs+0x295>
c0007351:	eb 1b                	jmp    c000736e <f_mkfs+0x262>
c0007353:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007358:	0f 87 6f 0a 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c000735e:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007364:	76 08                	jbe    c000736e <f_mkfs+0x262>
c0007366:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000736e:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007372:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007376:	83 e0 01             	and    eax,0x1
c0007379:	80 e1 02             	and    cl,0x2
c000737c:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007380:	74 0d                	je     c000738f <f_mkfs+0x283>
c0007382:	84 c0                	test   al,al
c0007384:	0f 84 4f 09 00 00    	je     c0007cd9 <f_mkfs+0xbcd>
c000738a:	e9 0e 08 00 00       	jmp    c0007b9d <f_mkfs+0xa91>
c000738f:	bb 13 00 00 00       	mov    ebx,0x13
c0007394:	84 c0                	test   al,al
c0007396:	0f 85 01 08 00 00    	jne    c0007b9d <f_mkfs+0xa91>
c000739c:	e9 35 0e 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c00073a1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073a6:	31 c0                	xor    eax,eax
c00073a8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073ab:	89 c7                	mov    edi,eax
c00073ad:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b1:	0f 83 16 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c00073b7:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073bd:	77 39                	ja     c00073f8 <f_mkfs+0x2ec>
c00073bf:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073c4:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073cc:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073cf:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073d3:	73 08                	jae    c00073dd <f_mkfs+0x2d1>
c00073d5:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073dd:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073e5:	b8 00 00 00 00       	mov    eax,0x0
c00073ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073ee:	73 08                	jae    c00073f8 <f_mkfs+0x2ec>
c00073f0:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007400:	83 c0 20             	add    eax,0x20
c0007403:	83 d2 00             	adc    edx,0x0
c0007406:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000740a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000740e:	31 d2                	xor    edx,edx
c0007410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007414:	52                   	push   edx
c0007415:	50                   	push   eax
c0007416:	31 ff                	xor    edi,edi
c0007418:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000741c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007420:	e8 a7 7f 01 00       	call   c001f3cc <__udivdi3>
c0007425:	83 c4 10             	add    esp,0x10
c0007428:	c1 e0 02             	shl    eax,0x2
c000742b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000742f:	05 07 02 00 00       	add    eax,0x207
c0007434:	89 f1                	mov    ecx,esi
c0007436:	c1 e8 09             	shr    eax,0x9
c0007439:	89 fb                	mov    ebx,edi
c000743b:	83 c1 ff             	add    ecx,0xffffffff
c000743e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007442:	83 d3 ff             	adc    ebx,0xffffffff
c0007445:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007449:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c000744d:	31 d2                	xor    edx,edx
c000744f:	01 c8                	add    eax,ecx
c0007451:	11 da                	adc    edx,ebx
c0007453:	89 c1                	mov    ecx,eax
c0007455:	f7 de                	neg    esi
c0007457:	83 d7 00             	adc    edi,0x0
c000745a:	21 f1                	and    ecx,esi
c000745c:	f7 df                	neg    edi
c000745e:	89 d0                	mov    eax,edx
c0007460:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007464:	21 f8                	and    eax,edi
c0007466:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000746a:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000746e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007472:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007476:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000747a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000747e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007481:	0f ac d0 01          	shrd   eax,edx,0x1
c0007485:	d1 ea                	shr    edx,1
c0007487:	89 df                	mov    edi,ebx
c0007489:	39 c1                	cmp    ecx,eax
c000748b:	19 d7                	sbb    edi,edx
c000748d:	0f 83 3a 09 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c0007493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007497:	31 d2                	xor    edx,edx
c0007499:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000749d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a1:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074a8:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074ac:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b0:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074b4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074b8:	83 f8 0f             	cmp    eax,0xf
c00074bb:	0f 86 0c 09 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c00074c1:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074c9:	0f 87 fe 08 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c00074cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074d3:	31 d2                	xor    edx,edx
c00074d5:	83 c0 07             	add    eax,0x7
c00074d8:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e0:	c1 e8 03             	shr    eax,0x3
c00074e3:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074eb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074f3:	c1 e0 09             	shl    eax,0x9
c00074f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007501:	48                   	dec    eax
c0007502:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007506:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c000750a:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000750e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007512:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000751d:	31 d2                	xor    edx,edx
c000751f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007524:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007528:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000752c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007530:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007534:	31 ff                	xor    edi,edi
c0007536:	31 f6                	xor    esi,esi
c0007538:	31 db                	xor    ebx,ebx
c000753a:	85 ff                	test   edi,edi
c000753c:	74 05                	je     c0007543 <f_mkfs+0x437>
c000753e:	4f                   	dec    edi
c000753f:	74 44                	je     c0007585 <f_mkfs+0x479>
c0007541:	eb 4f                	jmp    c0007592 <f_mkfs+0x486>
c0007543:	83 ec 0c             	sub    esp,0xc
c0007546:	0f b7 c3             	movzx  eax,bx
c0007549:	50                   	push   eax
c000754a:	e8 0e 0e 00 00       	call   c000835d <ff_wtoupper>
c000754f:	83 c4 10             	add    esp,0x10
c0007552:	89 c1                	mov    ecx,eax
c0007554:	66 39 c3             	cmp    bx,ax
c0007557:	8d 53 01             	lea    edx,[ebx+0x1]
c000755a:	75 3e                	jne    c000759a <f_mkfs+0x48e>
c000755c:	be 01 00 00 00       	mov    esi,0x1
c0007561:	89 df                	mov    edi,ebx
c0007563:	66 01 f7             	add    di,si
c0007566:	75 07                	jne    c000756f <f_mkfs+0x463>
c0007568:	83 fe 7f             	cmp    esi,0x7f
c000756b:	77 31                	ja     c000759e <f_mkfs+0x492>
c000756d:	eb 16                	jmp    c0007585 <f_mkfs+0x479>
c000756f:	83 ec 0c             	sub    esp,0xc
c0007572:	0f b7 ff             	movzx  edi,di
c0007575:	57                   	push   edi
c0007576:	e8 e2 0d 00 00       	call   c000835d <ff_wtoupper>
c000757b:	83 c4 10             	add    esp,0x10
c000757e:	39 c7                	cmp    edi,eax
c0007580:	75 e6                	jne    c0007568 <f_mkfs+0x45c>
c0007582:	46                   	inc    esi
c0007583:	eb dc                	jmp    c0007561 <f_mkfs+0x455>
c0007585:	31 c0                	xor    eax,eax
c0007587:	4e                   	dec    esi
c0007588:	0f 95 c0             	setne  al
c000758b:	89 d9                	mov    ecx,ebx
c000758d:	89 c7                	mov    edi,eax
c000758f:	43                   	inc    ebx
c0007590:	eb 14                	jmp    c00075a6 <f_mkfs+0x49a>
c0007592:	89 f1                	mov    ecx,esi
c0007594:	01 f3                	add    ebx,esi
c0007596:	31 ff                	xor    edi,edi
c0007598:	eb 0c                	jmp    c00075a6 <f_mkfs+0x49a>
c000759a:	89 d3                	mov    ebx,edx
c000759c:	eb 08                	jmp    c00075a6 <f_mkfs+0x49a>
c000759e:	bf 02 00 00 00       	mov    edi,0x2
c00075a3:	83 c9 ff             	or     ecx,0xffffffff
c00075a6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075a9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075ad:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075b1:	0f b6 c1             	movzx  eax,cl
c00075b4:	e8 87 a9 ff ff       	call   c0001f40 <xsum32>
c00075b9:	66 c1 e9 08          	shr    cx,0x8
c00075bd:	89 c2                	mov    edx,eax
c00075bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c2:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075c6:	0f b7 c1             	movzx  eax,cx
c00075c9:	e8 72 a9 ff ff       	call   c0001f40 <xsum32>
c00075ce:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075d3:	66 85 db             	test   bx,bx
c00075d6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075da:	74 1f                	je     c00075fb <f_mkfs+0x4ef>
c00075dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075df:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075e6:	83 c0 02             	add    eax,0x2
c00075e9:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075ef:	39 c2                	cmp    edx,eax
c00075f1:	74 08                	je     c00075fb <f_mkfs+0x4ef>
c00075f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00075f6:	e9 3f ff ff ff       	jmp    c000753a <f_mkfs+0x42e>
c00075fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075fe:	83 ec 0c             	sub    esp,0xc
c0007601:	05 01 02 00 00       	add    eax,0x201
c0007606:	c1 e8 09             	shr    eax,0x9
c0007609:	50                   	push   eax
c000760a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000760e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007612:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007616:	55                   	push   ebp
c0007617:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000761b:	e8 f0 a3 ff ff       	call   c0001a10 <disk_write>
c0007620:	83 c4 20             	add    esp,0x20
c0007623:	85 c0                	test   eax,eax
c0007625:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007628:	0f 85 8b 0b 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000762e:	89 d0                	mov    eax,edx
c0007630:	31 d2                	xor    edx,edx
c0007632:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007636:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000763a:	66 85 db             	test   bx,bx
c000763d:	74 04                	je     c0007643 <f_mkfs+0x537>
c000763f:	31 c0                	xor    eax,eax
c0007641:	eb b0                	jmp    c00075f3 <f_mkfs+0x4e7>
c0007643:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007647:	31 d2                	xor    edx,edx
c0007649:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000764d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007651:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007655:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000765c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007660:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007666:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766a:	8d 70 01             	lea    esi,[eax+0x1]
c000766d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007671:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007675:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007680:	c1 eb 09             	shr    ebx,0x9
c0007683:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007687:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000768b:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007692:	31 d2                	xor    edx,edx
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	89 04 24             	mov    DWORD PTR [esp],eax
c000769c:	89 c1                	mov    ecx,eax
c000769e:	89 e8                	mov    eax,ebp
c00076a0:	e8 34 a4 ff ff       	call   c0001ad9 <mem_set>
c00076a5:	31 c0                	xor    eax,eax
c00076a7:	83 fe 07             	cmp    esi,0x7
c00076aa:	76 10                	jbe    c00076bc <f_mkfs+0x5b0>
c00076ac:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076af:	76 0b                	jbe    c00076bc <f_mkfs+0x5b0>
c00076b1:	40                   	inc    eax
c00076b2:	83 ee 08             	sub    esi,0x8
c00076b5:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076ba:	eb eb                	jmp    c00076a7 <f_mkfs+0x59b>
c00076bc:	b2 01                	mov    dl,0x1
c00076be:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076c2:	85 f6                	test   esi,esi
c00076c4:	74 0c                	je     c00076d2 <f_mkfs+0x5c6>
c00076c6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c9:	76 07                	jbe    c00076d2 <f_mkfs+0x5c6>
c00076cb:	08 11                	or     BYTE PTR [ecx],dl
c00076cd:	4e                   	dec    esi
c00076ce:	01 d2                	add    edx,edx
c00076d0:	eb f0                	jmp    c00076c2 <f_mkfs+0x5b6>
c00076d2:	89 df                	mov    edi,ebx
c00076d4:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076d8:	76 04                	jbe    c00076de <f_mkfs+0x5d2>
c00076da:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076de:	83 ec 0c             	sub    esp,0xc
c00076e1:	57                   	push   edi
c00076e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ea:	55                   	push   ebp
c00076eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076ef:	e8 1c a3 ff ff       	call   c0001a10 <disk_write>
c00076f4:	83 c4 20             	add    esp,0x20
c00076f7:	85 c0                	test   eax,eax
c00076f9:	0f 85 ba 0a 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00076ff:	31 d2                	xor    edx,edx
c0007701:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007705:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007709:	29 fb                	sub    ebx,edi
c000770b:	0f 85 7a ff ff ff    	jne    c000768b <f_mkfs+0x57f>
c0007711:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007715:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000771d:	31 f6                	xor    esi,esi
c000771f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007723:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007726:	31 d2                	xor    edx,edx
c0007728:	89 e8                	mov    eax,ebp
c000772a:	e8 aa a3 ff ff       	call   c0001ad9 <mem_set>
c000772f:	31 c9                	xor    ecx,ecx
c0007731:	85 db                	test   ebx,ebx
c0007733:	75 40                	jne    c0007775 <f_mkfs+0x669>
c0007735:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000773a:	89 e8                	mov    eax,ebp
c000773c:	e8 7a a3 ff ff       	call   c0001abb <st_dword>
c0007741:	8d 45 04             	lea    eax,[ebp+0x4]
c0007744:	83 ca ff             	or     edx,0xffffffff
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 6a a3 ff ff       	call   c0001abb <st_dword>
c0007751:	b9 08 00 00 00       	mov    ecx,0x8
c0007756:	eb 1d                	jmp    c0007775 <f_mkfs+0x669>
c0007758:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000775b:	76 3b                	jbe    c0007798 <f_mkfs+0x68c>
c000775d:	43                   	inc    ebx
c000775e:	83 fe 01             	cmp    esi,0x1
c0007761:	89 da                	mov    edx,ebx
c0007763:	77 03                	ja     c0007768 <f_mkfs+0x65c>
c0007765:	83 ca ff             	or     edx,0xffffffff
c0007768:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000776c:	4e                   	dec    esi
c000776d:	e8 49 a3 ff ff       	call   c0001abb <st_dword>
c0007772:	83 c1 04             	add    ecx,0x4
c0007775:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007779:	85 f6                	test   esi,esi
c000777b:	75 db                	jne    c0007758 <f_mkfs+0x64c>
c000777d:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007782:	77 14                	ja     c0007798 <f_mkfs+0x68c>
c0007784:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000778b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000778f:	85 f6                	test   esi,esi
c0007791:	74 05                	je     c0007798 <f_mkfs+0x68c>
c0007793:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007796:	77 dd                	ja     c0007775 <f_mkfs+0x669>
c0007798:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000779c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a0:	39 cf                	cmp    edi,ecx
c00077a2:	76 02                	jbe    c00077a6 <f_mkfs+0x69a>
c00077a4:	89 cf                	mov    edi,ecx
c00077a6:	83 ec 0c             	sub    esp,0xc
c00077a9:	57                   	push   edi
c00077aa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077ae:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b2:	55                   	push   ebp
c00077b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077b7:	e8 54 a2 ff ff       	call   c0001a10 <disk_write>
c00077bc:	83 c4 20             	add    esp,0x20
c00077bf:	85 c0                	test   eax,eax
c00077c1:	0f 85 f2 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00077c7:	31 d2                	xor    edx,edx
c00077c9:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077cd:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077d1:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077d5:	0f 85 48 ff ff ff    	jne    c0007723 <f_mkfs+0x617>
c00077db:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077de:	31 d2                	xor    edx,edx
c00077e0:	89 e8                	mov    eax,ebp
c00077e2:	31 ff                	xor    edi,edi
c00077e4:	e8 f0 a2 ff ff       	call   c0001ad9 <mem_set>
c00077e9:	8d 45 34             	lea    eax,[ebp+0x34]
c00077ec:	ba 02 00 00 00       	mov    edx,0x2
c00077f1:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077f5:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00077f9:	e8 bd a2 ff ff       	call   c0001abb <st_dword>
c00077fe:	8d 45 38             	lea    eax,[ebp+0x38]
c0007801:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007805:	e8 b1 a2 ff ff       	call   c0001abb <st_dword>
c000780a:	8d 45 44             	lea    eax,[ebp+0x44]
c000780d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007811:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007815:	e8 a1 a2 ff ff       	call   c0001abb <st_dword>
c000781a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000781e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007821:	83 c2 02             	add    edx,0x2
c0007824:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007828:	e8 8e a2 ff ff       	call   c0001abb <st_dword>
c000782d:	8d 45 58             	lea    eax,[ebp+0x58]
c0007830:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007834:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007838:	e8 7e a2 ff ff       	call   c0001abb <st_dword>
c000783d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007841:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007846:	89 c6                	mov    esi,eax
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007850:	89 04 24             	mov    DWORD PTR [esp],eax
c0007853:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007857:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000785a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000785e:	39 cb                	cmp    ebx,ecx
c0007860:	76 02                	jbe    c0007864 <f_mkfs+0x758>
c0007862:	89 cb                	mov    ebx,ecx
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	57                   	push   edi
c0007869:	56                   	push   esi
c000786a:	55                   	push   ebp
c000786b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000786f:	e8 9c a1 ff ff       	call   c0001a10 <disk_write>
c0007874:	83 c4 20             	add    esp,0x20
c0007877:	85 c0                	test   eax,eax
c0007879:	0f 85 3a 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000787f:	31 d2                	xor    edx,edx
c0007881:	b9 00 02 00 00       	mov    ecx,0x200
c0007886:	89 e8                	mov    eax,ebp
c0007888:	e8 4c a2 ff ff       	call   c0001ad9 <mem_set>
c000788d:	31 d2                	xor    edx,edx
c000788f:	01 de                	add    esi,ebx
c0007891:	11 d7                	adc    edi,edx
c0007893:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007896:	75 bf                	jne    c0007857 <f_mkfs+0x74b>
c0007898:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000789c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a0:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078a8:	b9 00 02 00 00       	mov    ecx,0x200
c00078ad:	31 d2                	xor    edx,edx
c00078af:	89 e8                	mov    eax,ebp
c00078b1:	e8 23 a2 ff ff       	call   c0001ad9 <mem_set>
c00078b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00078bb:	ba 20 04 02 c0       	mov    edx,0xc0020420
c00078c0:	89 e8                	mov    eax,ebp
c00078c2:	e8 fd a1 ff ff       	call   c0001ac4 <mem_cpy>
c00078c7:	8d 45 40             	lea    eax,[ebp+0x40]
c00078ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078d2:	e8 e7 a1 ff ff       	call   c0001abe <st_qword>
c00078d7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078db:	8d 45 48             	lea    eax,[ebp+0x48]
c00078de:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078e2:	e8 d7 a1 ff ff       	call   c0001abe <st_qword>
c00078e7:	8d 45 50             	lea    eax,[ebp+0x50]
c00078ea:	ba 20 00 00 00       	mov    edx,0x20
c00078ef:	e8 c7 a1 ff ff       	call   c0001abb <st_dword>
c00078f4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00078f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fc:	e8 ba a1 ff ff       	call   c0001abb <st_dword>
c0007901:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007905:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007909:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000790d:	e8 a9 a1 ff ff       	call   c0001abb <st_dword>
c0007912:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007915:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007919:	e8 9d a1 ff ff       	call   c0001abb <st_dword>
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	8d 50 02             	lea    edx,[eax+0x2]
c0007925:	8d 45 60             	lea    eax,[ebp+0x60]
c0007928:	e8 8e a1 ff ff       	call   c0001abb <st_dword>
c000792d:	8d 45 64             	lea    eax,[ebp+0x64]
c0007930:	ba 00 00 21 50       	mov    edx,0x50210000
c0007935:	e8 81 a1 ff ff       	call   c0001abb <st_dword>
c000793a:	8d 45 68             	lea    eax,[ebp+0x68]
c000793d:	ba 00 01 00 00       	mov    edx,0x100
c0007942:	e8 70 a1 ff ff       	call   c0001ab7 <st_word>
c0007947:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000794b:	b8 0a 00 00 00       	mov    eax,0xa
c0007950:	48                   	dec    eax
c0007951:	74 05                	je     c0007958 <f_mkfs+0x84c>
c0007953:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007956:	eb f8                	jmp    c0007950 <f_mkfs+0x844>
c0007958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795c:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007960:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007964:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007968:	74 05                	je     c000796f <f_mkfs+0x863>
c000796a:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c000796d:	eb f5                	jmp    c0007964 <f_mkfs+0x858>
c000796f:	8d 45 78             	lea    eax,[ebp+0x78]
c0007972:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007977:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c000797d:	31 db                	xor    ebx,ebx
c000797f:	e8 33 a1 ff ff       	call   c0001ab7 <st_word>
c0007984:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000798a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000798f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007992:	e8 20 a1 ff ff       	call   c0001ab7 <st_word>
c0007997:	31 c9                	xor    ecx,ecx
c0007999:	8d 41 96             	lea    eax,[ecx-0x6a]
c000799c:	83 f8 01             	cmp    eax,0x1
c000799f:	76 13                	jbe    c00079b4 <f_mkfs+0x8a8>
c00079a1:	83 f9 70             	cmp    ecx,0x70
c00079a4:	74 0e                	je     c00079b4 <f_mkfs+0x8a8>
c00079a6:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ab:	89 da                	mov    edx,ebx
c00079ad:	e8 8e a5 ff ff       	call   c0001f40 <xsum32>
c00079b2:	89 c3                	mov    ebx,eax
c00079b4:	41                   	inc    ecx
c00079b5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079bb:	75 dc                	jne    c0007999 <f_mkfs+0x88d>
c00079bd:	89 f0                	mov    eax,esi
c00079bf:	89 fa                	mov    edx,edi
c00079c1:	83 c0 01             	add    eax,0x1
c00079c4:	83 d2 00             	adc    edx,0x0
c00079c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079cf:	83 ec 0c             	sub    esp,0xc
c00079d2:	6a 01                	push   0x1
c00079d4:	57                   	push   edi
c00079d5:	56                   	push   esi
c00079d6:	55                   	push   ebp
c00079d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079db:	e8 30 a0 ff ff       	call   c0001a10 <disk_write>
c00079e0:	83 c4 20             	add    esp,0x20
c00079e3:	85 c0                	test   eax,eax
c00079e5:	0f 85 ce 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00079eb:	31 d2                	xor    edx,edx
c00079ed:	b9 00 02 00 00       	mov    ecx,0x200
c00079f2:	89 e8                	mov    eax,ebp
c00079f4:	e8 e0 a0 ff ff       	call   c0001ad9 <mem_set>
c00079f9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a01:	e8 b1 a0 ff ff       	call   c0001ab7 <st_word>
c0007a06:	89 f0                	mov    eax,esi
c0007a08:	83 c0 09             	add    eax,0x9
c0007a0b:	89 fa                	mov    edx,edi
c0007a0d:	83 d2 00             	adc    edx,0x0
c0007a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a17:	31 c9                	xor    ecx,ecx
c0007a19:	41                   	inc    ecx
c0007a1a:	89 da                	mov    edx,ebx
c0007a1c:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a21:	e8 1a a5 ff ff       	call   c0001f40 <xsum32>
c0007a26:	89 c3                	mov    ebx,eax
c0007a28:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a2e:	75 e9                	jne    c0007a19 <f_mkfs+0x90d>
c0007a30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a38:	83 c0 01             	add    eax,0x1
c0007a3b:	83 d2 00             	adc    edx,0x0
c0007a3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a42:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a46:	83 ec 0c             	sub    esp,0xc
c0007a49:	6a 01                	push   0x1
c0007a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a53:	55                   	push   ebp
c0007a54:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a58:	e8 b3 9f ff ff       	call   c0001a10 <disk_write>
c0007a5d:	83 c4 20             	add    esp,0x20
c0007a60:	85 c0                	test   eax,eax
c0007a62:	0f 85 51 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a6c:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a70:	75 09                	jne    c0007a7b <f_mkfs+0x96f>
c0007a72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a75:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a79:	74 12                	je     c0007a8d <f_mkfs+0x981>
c0007a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a8b:	eb 8a                	jmp    c0007a17 <f_mkfs+0x90b>
c0007a8d:	31 d2                	xor    edx,edx
c0007a8f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a94:	89 e8                	mov    eax,ebp
c0007a96:	e8 3e a0 ff ff       	call   c0001ad9 <mem_set>
c0007a9b:	83 c6 0b             	add    esi,0xb
c0007a9e:	83 d7 00             	adc    edi,0x0
c0007aa1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aa5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007aa9:	31 c9                	xor    ecx,ecx
c0007aab:	41                   	inc    ecx
c0007aac:	89 da                	mov    edx,ebx
c0007aae:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ab3:	e8 88 a4 ff ff       	call   c0001f40 <xsum32>
c0007ab8:	89 c3                	mov    ebx,eax
c0007aba:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac0:	75 e9                	jne    c0007aab <f_mkfs+0x99f>
c0007ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ac5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ac9:	83 c6 01             	add    esi,0x1
c0007acc:	83 d7 00             	adc    edi,0x0
c0007acf:	83 ec 0c             	sub    esp,0xc
c0007ad2:	6a 01                	push   0x1
c0007ad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ad8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007adc:	55                   	push   ebp
c0007add:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae1:	e8 2a 9f ff ff       	call   c0001a10 <disk_write>
c0007ae6:	83 c4 20             	add    esp,0x20
c0007ae9:	85 c0                	test   eax,eax
c0007aeb:	0f 85 c8 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007af1:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007af5:	75 06                	jne    c0007afd <f_mkfs+0x9f1>
c0007af7:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007afb:	74 09                	je     c0007b06 <f_mkfs+0x9fa>
c0007afd:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b00:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b04:	eb a3                	jmp    c0007aa9 <f_mkfs+0x99d>
c0007b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	01 e8                	add    eax,ebp
c0007b0e:	e8 a8 9f ff ff       	call   c0001abb <st_dword>
c0007b13:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b18:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b20:	75 e4                	jne    c0007b06 <f_mkfs+0x9fa>
c0007b22:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b29:	83 c6 02             	add    esi,0x2
c0007b2c:	83 d7 00             	adc    edi,0x0
c0007b2f:	83 ec 0c             	sub    esp,0xc
c0007b32:	6a 01                	push   0x1
c0007b34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b3c:	55                   	push   ebp
c0007b3d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b41:	e8 ca 9e ff ff       	call   c0001a10 <disk_write>
c0007b46:	83 c4 20             	add    esp,0x20
c0007b49:	85 c0                	test   eax,eax
c0007b4b:	0f 85 68 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007b51:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b56:	74 0d                	je     c0007b65 <f_mkfs+0xa59>
c0007b58:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b60:	e9 43 fd ff ff       	jmp    c00078a8 <f_mkfs+0x79c>
c0007b65:	b1 07                	mov    cl,0x7
c0007b67:	e9 e3 05 00 00       	jmp    c000814f <f_mkfs+0x1043>
c0007b6c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b71:	0f 85 4f 02 00 00    	jne    c0007dc6 <f_mkfs+0xcba>
c0007b77:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b7c:	0f 86 22 02 00 00    	jbe    c0007da4 <f_mkfs+0xc98>
c0007b82:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b87:	0f 85 81 06 00 00    	jne    c000820e <f_mkfs+0x1102>
c0007b8d:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b94:	83 f8 40             	cmp    eax,0x40
c0007b97:	0f 87 51 06 00 00    	ja     c00081ee <f_mkfs+0x10e2>
c0007b9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ba1:	85 ff                	test   edi,edi
c0007ba3:	75 1c                	jne    c0007bc1 <f_mkfs+0xab5>
c0007ba5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ba8:	ba 20 03 02 c0       	mov    edx,0xc0020320
c0007bad:	c1 e9 0c             	shr    ecx,0xc
c0007bb0:	bf 01 00 00 00       	mov    edi,0x1
c0007bb5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bb8:	66 85 c0             	test   ax,ax
c0007bbb:	0f 85 95 01 00 00    	jne    c0007d56 <f_mkfs+0xc4a>
c0007bc1:	31 d2                	xor    edx,edx
c0007bc3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bc6:	f7 f7                	div    edi
c0007bc8:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bcd:	0f 86 95 01 00 00    	jbe    c0007d68 <f_mkfs+0xc5c>
c0007bd3:	83 c0 02             	add    eax,0x2
c0007bd6:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bdb:	01 c0                	add    eax,eax
c0007bdd:	05 ff 01 00 00       	add    eax,0x1ff
c0007be2:	be 01 00 00 00       	mov    esi,0x1
c0007be7:	c1 e8 09             	shr    eax,0x9
c0007bea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf2:	c1 e0 05             	shl    eax,0x5
c0007bf5:	c1 e8 09             	shr    eax,0x9
c0007bf8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bfc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c01:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c05:	89 f0                	mov    eax,esi
c0007c07:	31 d2                	xor    edx,edx
c0007c09:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c15:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c19:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c1d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c2c:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	01 c8                	add    eax,ecx
c0007c34:	11 da                	adc    edx,ebx
c0007c36:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c3a:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c3e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c42:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c46:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c4a:	f7 da                	neg    edx
c0007c4c:	21 d1                	and    ecx,edx
c0007c4e:	29 d9                	sub    ecx,ebx
c0007c50:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c55:	0f 85 20 01 00 00    	jne    c0007d7b <f_mkfs+0xc6f>
c0007c5b:	31 db                	xor    ebx,ebx
c0007c5d:	01 ce                	add    esi,ecx
c0007c5f:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c63:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c67:	89 f8                	mov    eax,edi
c0007c69:	31 d2                	xor    edx,edx
c0007c6b:	c1 e0 04             	shl    eax,0x4
c0007c6e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c72:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c76:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c7a:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c7e:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c82:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c85:	19 d3                	sbb    ebx,edx
c0007c87:	0f 82 40 01 00 00    	jb     c0007dcd <f_mkfs+0xcc1>
c0007c8d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c91:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c94:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007c99:	89 c8                	mov    eax,ecx
c0007c9b:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007c9f:	29 f0                	sub    eax,esi
c0007ca1:	29 d0                	sub    eax,edx
c0007ca3:	31 d2                	xor    edx,edx
c0007ca5:	f7 f7                	div    edi
c0007ca7:	89 c3                	mov    ebx,eax
c0007ca9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cae:	0f 85 b8 fe ff ff    	jne    c0007b6c <f_mkfs+0xa60>
c0007cb4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cb9:	0f 87 1d 01 00 00    	ja     c0007ddc <f_mkfs+0xcd0>
c0007cbf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cc4:	0f 85 03 01 00 00    	jne    c0007dcd <f_mkfs+0xcc1>
c0007cca:	83 ff 01             	cmp    edi,0x1
c0007ccd:	0f 86 fa 00 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c0007cd3:	d1 ef                	shr    edi,1
c0007cd5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cd9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cdd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce0:	85 db                	test   ebx,ebx
c0007ce2:	75 2d                	jne    c0007d11 <f_mkfs+0xc05>
c0007ce4:	89 cb                	mov    ebx,ecx
c0007ce6:	ba 30 03 02 c0       	mov    edx,0xc0020330
c0007ceb:	c1 eb 11             	shr    ebx,0x11
c0007cee:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cf6:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007cf9:	66 85 c0             	test   ax,ax
c0007cfc:	74 11                	je     c0007d0f <f_mkfs+0xc03>
c0007cfe:	83 c2 02             	add    edx,0x2
c0007d01:	39 d8                	cmp    eax,ebx
c0007d03:	77 0a                	ja     c0007d0f <f_mkfs+0xc03>
c0007d05:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d09:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d0d:	eb e7                	jmp    c0007cf6 <f_mkfs+0xbea>
c0007d0f:	31 db                	xor    ebx,ebx
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d19:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d20:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d25:	c1 ea 09             	shr    edx,0x9
c0007d28:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d31:	0f 87 96 00 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c0007d37:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d3b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d47:	be 20 00 00 00       	mov    esi,0x20
c0007d4c:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d51:	e9 a6 fe ff ff       	jmp    c0007bfc <f_mkfs+0xaf0>
c0007d56:	83 c2 02             	add    edx,0x2
c0007d59:	39 c8                	cmp    eax,ecx
c0007d5b:	0f 87 60 fe ff ff    	ja     c0007bc1 <f_mkfs+0xab5>
c0007d61:	01 ff                	add    edi,edi
c0007d63:	e9 4d fe ff ff       	jmp    c0007bb5 <f_mkfs+0xaa9>
c0007d68:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d6b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d70:	40                   	inc    eax
c0007d71:	d1 e8                	shr    eax,1
c0007d73:	83 c0 03             	add    eax,0x3
c0007d76:	e9 62 fe ff ff       	jmp    c0007bdd <f_mkfs+0xad1>
c0007d7b:	31 d2                	xor    edx,edx
c0007d7d:	89 c8                	mov    eax,ecx
c0007d7f:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d83:	85 d2                	test   edx,edx
c0007d85:	74 0c                	je     c0007d93 <f_mkfs+0xc87>
c0007d87:	49                   	dec    ecx
c0007d88:	46                   	inc    esi
c0007d89:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d8e:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d93:	89 c8                	mov    eax,ecx
c0007d95:	31 d2                	xor    edx,edx
c0007d97:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d9b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d9f:	e9 c3 fe ff ff       	jmp    c0007c67 <f_mkfs+0xb5b>
c0007da4:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007da9:	77 31                	ja     c0007ddc <f_mkfs+0xcd0>
c0007dab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db0:	75 1b                	jne    c0007dcd <f_mkfs+0xcc1>
c0007db2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007db5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007db9:	3d 80 00 00 00       	cmp    eax,0x80
c0007dbe:	0f 86 d9 fd ff ff    	jbe    c0007b9d <f_mkfs+0xa91>
c0007dc4:	eb 07                	jmp    c0007dcd <f_mkfs+0xcc1>
c0007dc6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dcb:	76 0a                	jbe    c0007dd7 <f_mkfs+0xccb>
c0007dcd:	bb 0e 00 00 00       	mov    ebx,0xe
c0007dd2:	e9 ff 03 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c0007dd7:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007ddc:	31 d2                	xor    edx,edx
c0007dde:	b9 00 02 00 00       	mov    ecx,0x200
c0007de3:	89 e8                	mov    eax,ebp
c0007de5:	e8 ef 9c ff ff       	call   c0001ad9 <mem_set>
c0007dea:	b9 0b 00 00 00       	mov    ecx,0xb
c0007def:	ba 42 04 02 c0       	mov    edx,0xc0020442
c0007df4:	89 e8                	mov    eax,ebp
c0007df6:	e8 c9 9c ff ff       	call   c0001ac4 <mem_cpy>
c0007dfb:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007dfe:	ba 00 02 00 00       	mov    edx,0x200
c0007e03:	e8 af 9c ff ff       	call   c0001ab7 <st_word>
c0007e08:	89 f8                	mov    eax,edi
c0007e0a:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e0d:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e10:	0f b7 d6             	movzx  edx,si
c0007e13:	e8 9f 9c ff ff       	call   c0001ab7 <st_word>
c0007e18:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e1c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e1f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e24:	75 08                	jne    c0007e2e <f_mkfs+0xd22>
c0007e26:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e2e:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e35:	e8 7d 9c ff ff       	call   c0001ab7 <st_word>
c0007e3a:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e3f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e43:	39 d0                	cmp    eax,edx
c0007e45:	b8 00 00 00 00       	mov    eax,0x0
c0007e4a:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e4e:	72 0a                	jb     c0007e5a <f_mkfs+0xd4e>
c0007e50:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e53:	e8 5f 9c ff ff       	call   c0001ab7 <st_word>
c0007e58:	eb 08                	jmp    c0007e62 <f_mkfs+0xd56>
c0007e5a:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e5d:	e8 59 9c ff ff       	call   c0001abb <st_dword>
c0007e62:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e65:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e6a:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e6e:	e8 44 9c ff ff       	call   c0001ab7 <st_word>
c0007e73:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e76:	ba ff 00 00 00       	mov    edx,0xff
c0007e7b:	e8 37 9c ff ff       	call   c0001ab7 <st_word>
c0007e80:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e87:	e8 2f 9c ff ff       	call   c0001abb <st_dword>
c0007e8c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e91:	75 57                	jne    c0007eea <f_mkfs+0xdde>
c0007e93:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e96:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e9b:	e8 1b 9c ff ff       	call   c0001abb <st_dword>
c0007ea0:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ea3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ea7:	e8 0f 9c ff ff       	call   c0001abb <st_dword>
c0007eac:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eaf:	ba 02 00 00 00       	mov    edx,0x2
c0007eb4:	e8 02 9c ff ff       	call   c0001abb <st_dword>
c0007eb9:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ebc:	ba 01 00 00 00       	mov    edx,0x1
c0007ec1:	e8 f1 9b ff ff       	call   c0001ab7 <st_word>
c0007ec6:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ec9:	ba 06 00 00 00       	mov    edx,0x6
c0007ece:	e8 e4 9b ff ff       	call   c0001ab7 <st_word>
c0007ed3:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ed7:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007edb:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ede:	b9 13 00 00 00       	mov    ecx,0x13
c0007ee3:	ba 4e 04 02 c0       	mov    edx,0xc002044e
c0007ee8:	eb 2f                	jmp    c0007f19 <f_mkfs+0xe0d>
c0007eea:	8d 45 27             	lea    eax,[ebp+0x27]
c0007eed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ef2:	e8 c4 9b ff ff       	call   c0001abb <st_dword>
c0007ef7:	8d 45 16             	lea    eax,[ebp+0x16]
c0007efa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007eff:	e8 b3 9b ff ff       	call   c0001ab7 <st_word>
c0007f04:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f08:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f0c:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f0f:	b9 13 00 00 00       	mov    ecx,0x13
c0007f14:	ba 62 04 02 c0       	mov    edx,0xc0020462
c0007f19:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f1f:	e8 a0 9b ff ff       	call   c0001ac4 <mem_cpy>
c0007f24:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f29:	89 f0                	mov    eax,esi
c0007f2b:	e8 87 9b ff ff       	call   c0001ab7 <st_word>
c0007f30:	83 ec 0c             	sub    esp,0xc
c0007f33:	6a 01                	push   0x1
c0007f35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f3d:	55                   	push   ebp
c0007f3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f42:	e8 c9 9a ff ff       	call   c0001a10 <disk_write>
c0007f47:	83 c4 20             	add    esp,0x20
c0007f4a:	85 c0                	test   eax,eax
c0007f4c:	0f 85 67 02 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007f52:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f57:	0f 85 b7 00 00 00    	jne    c0008014 <f_mkfs+0xf08>
c0007f5d:	83 ec 0c             	sub    esp,0xc
c0007f60:	6a 01                	push   0x1
c0007f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f6a:	83 c0 06             	add    eax,0x6
c0007f6d:	83 d2 00             	adc    edx,0x0
c0007f70:	52                   	push   edx
c0007f71:	50                   	push   eax
c0007f72:	55                   	push   ebp
c0007f73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f77:	e8 94 9a ff ff       	call   c0001a10 <disk_write>
c0007f7c:	83 c4 20             	add    esp,0x20
c0007f7f:	b9 00 02 00 00       	mov    ecx,0x200
c0007f84:	31 d2                	xor    edx,edx
c0007f86:	89 e8                	mov    eax,ebp
c0007f88:	e8 4c 9b ff ff       	call   c0001ad9 <mem_set>
c0007f8d:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f92:	89 e8                	mov    eax,ebp
c0007f94:	e8 22 9b ff ff       	call   c0001abb <st_dword>
c0007f99:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f9f:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fa4:	e8 12 9b ff ff       	call   c0001abb <st_dword>
c0007fa9:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fac:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fb2:	e8 04 9b ff ff       	call   c0001abb <st_dword>
c0007fb7:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fbd:	ba 02 00 00 00       	mov    edx,0x2
c0007fc2:	e8 f4 9a ff ff       	call   c0001abb <st_dword>
c0007fc7:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fcc:	89 f0                	mov    eax,esi
c0007fce:	e8 e4 9a ff ff       	call   c0001ab7 <st_word>
c0007fd3:	83 ec 0c             	sub    esp,0xc
c0007fd6:	6a 01                	push   0x1
c0007fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fdc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe0:	83 c0 07             	add    eax,0x7
c0007fe3:	83 d2 00             	adc    edx,0x0
c0007fe6:	52                   	push   edx
c0007fe7:	50                   	push   eax
c0007fe8:	55                   	push   ebp
c0007fe9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fed:	e8 1e 9a ff ff       	call   c0001a10 <disk_write>
c0007ff2:	83 c4 14             	add    esp,0x14
c0007ff5:	6a 01                	push   0x1
c0007ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ffb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fff:	83 c0 01             	add    eax,0x1
c0008002:	83 d2 00             	adc    edx,0x0
c0008005:	52                   	push   edx
c0008006:	50                   	push   eax
c0008007:	55                   	push   ebp
c0008008:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000800c:	e8 ff 99 ff ff       	call   c0001a10 <disk_write>
c0008011:	83 c4 20             	add    esp,0x20
c0008014:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000801b:	31 d2                	xor    edx,edx
c000801d:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008023:	31 db                	xor    ebx,ebx
c0008025:	89 e8                	mov    eax,ebp
c0008027:	e8 ad 9a ff ff       	call   c0001ad9 <mem_set>
c000802c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008033:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008038:	0f 94 c3             	sete   bl
c000803b:	4b                   	dec    ebx
c000803c:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008042:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008048:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804d:	75 21                	jne    c0008070 <f_mkfs+0xf64>
c000804f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 60 9a ff ff       	call   c0001abb <st_dword>
c000805b:	8d 45 04             	lea    eax,[ebp+0x4]
c000805e:	83 ca ff             	or     edx,0xffffffff
c0008061:	e8 55 9a ff ff       	call   c0001abb <st_dword>
c0008066:	8d 45 08             	lea    eax,[ebp+0x8]
c0008069:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000806e:	eb 04                	jmp    c0008074 <f_mkfs+0xf68>
c0008070:	89 da                	mov    edx,ebx
c0008072:	89 e8                	mov    eax,ebp
c0008074:	e8 42 9a ff ff       	call   c0001abb <st_dword>
c0008079:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000807d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008081:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008085:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008089:	39 ce                	cmp    esi,ecx
c000808b:	76 02                	jbe    c000808f <f_mkfs+0xf83>
c000808d:	89 ce                	mov    esi,ecx
c000808f:	83 ec 0c             	sub    esp,0xc
c0008092:	56                   	push   esi
c0008093:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008097:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809b:	55                   	push   ebp
c000809c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a0:	e8 6b 99 ff ff       	call   c0001a10 <disk_write>
c00080a5:	83 c4 20             	add    esp,0x20
c00080a8:	85 c0                	test   eax,eax
c00080aa:	0f 85 09 01 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00080b0:	31 d2                	xor    edx,edx
c00080b2:	b9 00 02 00 00       	mov    ecx,0x200
c00080b7:	89 e8                	mov    eax,ebp
c00080b9:	e8 1b 9a ff ff       	call   c0001ad9 <mem_set>
c00080be:	31 d2                	xor    edx,edx
c00080c0:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080c4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080c8:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080cc:	75 b3                	jne    c0008081 <f_mkfs+0xf75>
c00080ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080d1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080d8:	40                   	inc    eax
c00080d9:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080dd:	0f 87 65 ff ff ff    	ja     c0008048 <f_mkfs+0xf3c>
c00080e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080e8:	74 04                	je     c00080ee <f_mkfs+0xfe2>
c00080ea:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080ee:	89 fb                	mov    ebx,edi
c00080f0:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080f4:	76 04                	jbe    c00080fa <f_mkfs+0xfee>
c00080f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00080fa:	83 ec 0c             	sub    esp,0xc
c00080fd:	53                   	push   ebx
c00080fe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008102:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008106:	55                   	push   ebp
c0008107:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000810b:	e8 00 99 ff ff       	call   c0001a10 <disk_write>
c0008110:	83 c4 20             	add    esp,0x20
c0008113:	85 c0                	test   eax,eax
c0008115:	0f 85 9e 00 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000811b:	31 d2                	xor    edx,edx
c000811d:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008121:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008125:	29 df                	sub    edi,ebx
c0008127:	75 c5                	jne    c00080ee <f_mkfs+0xfe2>
c0008129:	b1 0c                	mov    cl,0xc
c000812b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008130:	74 1d                	je     c000814f <f_mkfs+0x1043>
c0008132:	b8 ff ff 00 00       	mov    eax,0xffff
c0008137:	b1 06                	mov    cl,0x6
c0008139:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000813d:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008141:	72 0c                	jb     c000814f <f_mkfs+0x1043>
c0008143:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008148:	0f 94 c1             	sete   cl
c000814b:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000814f:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008154:	75 4c                	jne    c00081a2 <f_mkfs+0x1096>
c0008156:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000815a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000815e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008165:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000816c:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008177:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008182:	83 ec 0c             	sub    esp,0xc
c0008185:	0f b6 c9             	movzx  ecx,cl
c0008188:	55                   	push   ebp
c0008189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000818d:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008194:	e8 58 c2 ff ff       	call   c00043f1 <create_partition>
c0008199:	83 c4 10             	add    esp,0x10
c000819c:	89 c3                	mov    ebx,eax
c000819e:	85 c0                	test   eax,eax
c00081a0:	75 34                	jne    c00081d6 <f_mkfs+0x10ca>
c00081a2:	50                   	push   eax
c00081a3:	31 db                	xor    ebx,ebx
c00081a5:	6a 00                	push   0x0
c00081a7:	6a 00                	push   0x0
c00081a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ad:	e8 74 98 ff ff       	call   c0001a26 <disk_ioctl>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	85 c0                	test   eax,eax
c00081b7:	74 1d                	je     c00081d6 <f_mkfs+0x10ca>
c00081b9:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081c1:	75 0c                	jne    c00081cf <f_mkfs+0x10c3>
c00081c3:	83 ec 0c             	sub    esp,0xc
c00081c6:	55                   	push   ebp
c00081c7:	e8 75 00 00 00       	call   c0008241 <ff_memfree>
c00081cc:	83 c4 10             	add    esp,0x10
c00081cf:	bb 01 00 00 00       	mov    ebx,0x1
c00081d4:	eb 48                	jmp    c000821e <f_mkfs+0x1112>
c00081d6:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081de:	75 3e                	jne    c000821e <f_mkfs+0x1112>
c00081e0:	83 ec 0c             	sub    esp,0xc
c00081e3:	55                   	push   ebp
c00081e4:	e8 58 00 00 00       	call   c0008241 <ff_memfree>
c00081e9:	83 c4 10             	add    esp,0x10
c00081ec:	eb 30                	jmp    c000821e <f_mkfs+0x1112>
c00081ee:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081f3:	0f 85 eb fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd8>
c00081f9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081fd:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008203:	0f 86 b8 f9 ff ff    	jbe    c0007bc1 <f_mkfs+0xab5>
c0008209:	e9 bf fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000820e:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008213:	0f 85 c0 fa ff ff    	jne    c0007cd9 <f_mkfs+0xbcd>
c0008219:	e9 af fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000821e:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008224:	89 d8                	mov    eax,ebx
c0008226:	5b                   	pop    ebx
c0008227:	5e                   	pop    esi
c0008228:	5f                   	pop    edi
c0008229:	5d                   	pop    ebp
c000822a:	c3                   	ret    

c000822b <ff_memalloc>:
c000822b:	83 ec 0c             	sub    esp,0xc
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008235:	e8 b1 3d 00 00       	call   c000bfeb <malloc>
c000823a:	83 c4 10             	add    esp,0x10
c000823d:	83 c4 0c             	add    esp,0xc
c0008240:	c3                   	ret    

c0008241 <ff_memfree>:
c0008241:	83 ec 0c             	sub    esp,0xc
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824b:	e8 ab 3d 00 00       	call   c000bffb <free>
c0008250:	83 c4 10             	add    esp,0x10
c0008253:	90                   	nop
c0008254:	83 c4 0c             	add    esp,0xc
c0008257:	c3                   	ret    

c0008258 <ff_uni2oem>:
c0008258:	83 ec 14             	sub    esp,0x14
c000825b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000825f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008263:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000826a:	c7 44 24 0c 80 07 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020780
c0008272:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008277:	77 0b                	ja     c0008284 <ff_uni2oem+0x2c>
c0008279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000827d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008282:	eb 61                	jmp    c00082e5 <ff_uni2oem+0x8d>
c0008284:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000828c:	77 57                	ja     c00082e5 <ff_uni2oem+0x8d>
c000828e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008294:	75 4f                	jne    c00082e5 <ff_uni2oem+0x8d>
c0008296:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000829d:	eb 0b                	jmp    c00082aa <ff_uni2oem+0x52>
c000829f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082a4:	40                   	inc    eax
c00082a5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082aa:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b0:	77 21                	ja     c00082d3 <ff_uni2oem+0x7b>
c00082b2:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082b7:	25 ff ff 00 00       	and    eax,0xffff
c00082bc:	8d 14 00             	lea    edx,[eax+eax*1]
c00082bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082c8:	25 ff ff 00 00       	and    eax,0xffff
c00082cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d1:	75 cc                	jne    c000829f <ff_uni2oem+0x47>
c00082d3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082d8:	83 e8 80             	sub    eax,0xffffff80
c00082db:	25 ff 00 00 00       	and    eax,0xff
c00082e0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ea:	83 c4 14             	add    esp,0x14
c00082ed:	c3                   	ret    

c00082ee <ff_oem2uni>:
c00082ee:	83 ec 18             	sub    esp,0x18
c00082f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f9:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00082fe:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008302:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008309:	c7 44 24 10 80 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020780
c0008311:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008317:	77 0b                	ja     c0008324 <ff_oem2uni+0x36>
c0008319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000831d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008322:	eb 30                	jmp    c0008354 <ff_oem2uni+0x66>
c0008324:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832a:	75 28                	jne    c0008354 <ff_oem2uni+0x66>
c000832c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008333:	77 1f                	ja     c0008354 <ff_oem2uni+0x66>
c0008335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008339:	25 ff ff 00 00       	and    eax,0xffff
c000833e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008343:	8d 14 00             	lea    edx,[eax+eax*1]
c0008346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834a:	01 d0                	add    eax,edx
c000834c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000834f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008359:	83 c4 18             	add    esp,0x18
c000835c:	c3                   	ret    

c000835d <ff_wtoupper>:
c000835d:	83 ec 10             	sub    esp,0x10
c0008360:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008368:	0f 87 62 01 00 00    	ja     c00084d0 <ff_wtoupper+0x173>
c000836e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008372:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008377:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000837e:	77 07                	ja     c0008387 <ff_wtoupper+0x2a>
c0008380:	b8 80 05 02 c0       	mov    eax,0xc0020580
c0008385:	eb 05                	jmp    c000838c <ff_wtoupper+0x2f>
c0008387:	b8 c0 04 02 c0       	mov    eax,0xc00204c0
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008394:	8d 50 02             	lea    edx,[eax+0x2]
c0008397:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083a9:	0f 84 13 01 00 00    	je     c00084c2 <ff_wtoupper+0x165>
c00083af:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083b9:	0f 82 03 01 00 00    	jb     c00084c2 <ff_wtoupper+0x165>
c00083bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c3:	8d 50 02             	lea    edx,[eax+0x2]
c00083c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d7:	66 c1 e8 08          	shr    ax,0x8
c00083db:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083ec:	31 d2                	xor    edx,edx
c00083ee:	66 89 c2             	mov    dx,ax
c00083f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083f5:	31 c9                	xor    ecx,ecx
c00083f7:	66 89 c1             	mov    cx,ax
c00083fa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ff:	25 ff ff 00 00       	and    eax,0xffff
c0008404:	01 c8                	add    eax,ecx
c0008406:	39 c2                	cmp    edx,eax
c0008408:	0f 8d 92 00 00 00    	jge    c00084a0 <ff_wtoupper+0x143>
c000840e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008412:	25 ff ff 00 00       	and    eax,0xffff
c0008417:	83 f8 08             	cmp    eax,0x8
c000841a:	0f 87 a1 00 00 00    	ja     c00084c1 <ff_wtoupper+0x164>
c0008420:	8b 04 85 80 04 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfb80]
c0008427:	ff e0                	jmp    eax
c0008429:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000842e:	31 d2                	xor    edx,edx
c0008430:	66 89 c2             	mov    dx,ax
c0008433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008437:	25 ff ff 00 00       	and    eax,0xffff
c000843c:	29 c2                	sub    edx,eax
c000843e:	89 d0                	mov    eax,edx
c0008440:	8d 14 00             	lea    edx,[eax+eax*1]
c0008443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008447:	01 d0                	add    eax,edx
c0008449:	66 8b 00             	mov    ax,WORD PTR [eax]
c000844c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008451:	eb 4b                	jmp    c000849e <ff_wtoupper+0x141>
c0008453:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008458:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000845c:	83 e0 01             	and    eax,0x1
c000845f:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008464:	eb 38                	jmp    c000849e <ff_wtoupper+0x141>
c0008466:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000846c:	eb 30                	jmp    c000849e <ff_wtoupper+0x141>
c000846e:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008474:	eb 28                	jmp    c000849e <ff_wtoupper+0x141>
c0008476:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000847c:	eb 20                	jmp    c000849e <ff_wtoupper+0x141>
c000847e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008484:	eb 18                	jmp    c000849e <ff_wtoupper+0x141>
c0008486:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000848c:	eb 10                	jmp    c000849e <ff_wtoupper+0x141>
c000848e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008494:	eb 08                	jmp    c000849e <ff_wtoupper+0x141>
c0008496:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000849d:	90                   	nop
c000849e:	eb 21                	jmp    c00084c1 <ff_wtoupper+0x164>
c00084a0:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084a6:	0f 85 e4 fe ff ff    	jne    c0008390 <ff_wtoupper+0x33>
c00084ac:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084b1:	25 ff ff 00 00       	and    eax,0xffff
c00084b6:	01 c0                	add    eax,eax
c00084b8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084bc:	e9 cf fe ff ff       	jmp    c0008390 <ff_wtoupper+0x33>
c00084c1:	90                   	nop
c00084c2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084c7:	25 ff ff 00 00       	and    eax,0xffff
c00084cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	c3                   	ret    

c00084d8 <is_bad_src_ratio>:
c00084d8:	83 ec 0c             	sub    esp,0xc
c00084db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084df:	89 04 24             	mov    DWORD PTR [esp],eax
c00084e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084ea:	dd 04 24             	fld    QWORD PTR [esp]
c00084ed:	dd 05 40 0d 02 c0    	fld    QWORD PTR ds:0xc0020d40
c00084f3:	de d9                	fcompp 
c00084f5:	df e0                	fnstsw ax
c00084f7:	f6 c4 45             	test   ah,0x45
c00084fa:	74 10                	je     c000850c <is_bad_src_ratio+0x34>
c00084fc:	dd 04 24             	fld    QWORD PTR [esp]
c00084ff:	dc 1d 48 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d48
c0008505:	df e0                	fnstsw ax
c0008507:	f6 c4 45             	test   ah,0x45
c000850a:	75 07                	jne    c0008513 <is_bad_src_ratio+0x3b>
c000850c:	b8 01 00 00 00       	mov    eax,0x1
c0008511:	eb 05                	jmp    c0008518 <is_bad_src_ratio+0x40>
c0008513:	b8 00 00 00 00       	mov    eax,0x0
c0008518:	83 c4 0c             	add    esp,0xc
c000851b:	c3                   	ret    

c000851c <psrc_set_converter>:
c000851c:	56                   	push   esi
c000851d:	89 d6                	mov    esi,edx
c000851f:	53                   	push   ebx
c0008520:	89 c3                	mov    ebx,eax
c0008522:	83 ec 0c             	sub    esp,0xc
c0008525:	52                   	push   edx
c0008526:	50                   	push   eax
c0008527:	e8 21 24 00 00       	call   c000a94d <sinc_set_converter>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	85 c0                	test   eax,eax
c0008531:	74 25                	je     c0008558 <psrc_set_converter+0x3c>
c0008533:	50                   	push   eax
c0008534:	50                   	push   eax
c0008535:	56                   	push   esi
c0008536:	53                   	push   ebx
c0008537:	e8 1c 28 00 00       	call   c000ad58 <zoh_set_converter>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	85 c0                	test   eax,eax
c0008541:	74 15                	je     c0008558 <psrc_set_converter+0x3c>
c0008543:	51                   	push   ecx
c0008544:	51                   	push   ecx
c0008545:	56                   	push   esi
c0008546:	53                   	push   ebx
c0008547:	e8 0c 0a 00 00       	call   c0008f58 <linear_set_converter>
c000854c:	83 c4 10             	add    esp,0x10
c000854f:	ba 0a 00 00 00       	mov    edx,0xa
c0008554:	85 c0                	test   eax,eax
c0008556:	75 02                	jne    c000855a <psrc_set_converter+0x3e>
c0008558:	31 d2                	xor    edx,edx
c000855a:	89 d0                	mov    eax,edx
c000855c:	5a                   	pop    edx
c000855d:	5b                   	pop    ebx
c000855e:	5e                   	pop    esi
c000855f:	c3                   	ret    

c0008560 <src_delete>:
c0008560:	53                   	push   ebx
c0008561:	83 ec 08             	sub    esp,0x8
c0008564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008568:	85 db                	test   ebx,ebx
c000856a:	74 29                	je     c0008595 <src_delete+0x35>
c000856c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000856f:	85 c0                	test   eax,eax
c0008571:	74 0c                	je     c000857f <src_delete+0x1f>
c0008573:	83 ec 0c             	sub    esp,0xc
c0008576:	50                   	push   eax
c0008577:	e8 7f 3a 00 00       	call   c000bffb <free>
c000857c:	83 c4 10             	add    esp,0x10
c000857f:	50                   	push   eax
c0008580:	6a 3c                	push   0x3c
c0008582:	6a 00                	push   0x0
c0008584:	53                   	push   ebx
c0008585:	e8 30 81 ff ff       	call   c00006ba <memset>
c000858a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000858d:	e8 69 3a 00 00       	call   c000bffb <free>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	83 c4 08             	add    esp,0x8
c0008598:	31 c0                	xor    eax,eax
c000859a:	5b                   	pop    ebx
c000859b:	c3                   	ret    

c000859c <src_process>:
c000859c:	56                   	push   esi
c000859d:	53                   	push   ebx
c000859e:	53                   	push   ebx
c000859f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085a7:	85 f6                	test   esi,esi
c00085a9:	0f 84 e2 00 00 00    	je     c0008691 <src_process+0xf5>
c00085af:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085b3:	0f 84 df 00 00 00    	je     c0008698 <src_process+0xfc>
c00085b9:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085bd:	0f 84 d5 00 00 00    	je     c0008698 <src_process+0xfc>
c00085c3:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085ca:	0f 85 cf 00 00 00    	jne    c000869f <src_process+0x103>
c00085d0:	85 db                	test   ebx,ebx
c00085d2:	0f 84 ce 00 00 00    	je     c00086a6 <src_process+0x10a>
c00085d8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085db:	0f 84 cc 00 00 00    	je     c00086ad <src_process+0x111>
c00085e1:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085e5:	0f 84 c2 00 00 00    	je     c00086ad <src_process+0x111>
c00085eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f1:	e8 e2 fe ff ff       	call   c00084d8 <is_bad_src_ratio>
c00085f6:	5a                   	pop    edx
c00085f7:	85 c0                	test   eax,eax
c00085f9:	59                   	pop    ecx
c00085fa:	0f 85 b4 00 00 00    	jne    c00086b4 <src_process+0x118>
c0008600:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008604:	79 07                	jns    c000860d <src_process+0x71>
c0008606:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000860d:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008611:	79 07                	jns    c000861a <src_process+0x7e>
c0008613:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000861a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000861c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000861f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008622:	39 ca                	cmp    edx,ecx
c0008624:	73 0b                	jae    c0008631 <src_process+0x95>
c0008626:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000862a:	8d 04 82             	lea    eax,[edx+eax*4]
c000862d:	39 c1                	cmp    ecx,eax
c000862f:	eb 09                	jmp    c000863a <src_process+0x9e>
c0008631:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008635:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008638:	39 c2                	cmp    edx,eax
c000863a:	72 7f                	jb     c00086bb <src_process+0x11f>
c000863c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008643:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864a:	d9 05 60 0d 02 c0    	fld    DWORD PTR ds:0xc0020d60
c0008650:	dc 1e                	fcomp  QWORD PTR [esi]
c0008652:	df e0                	fnstsw ax
c0008654:	9e                   	sahf   
c0008655:	76 05                	jbe    c000865c <src_process+0xc0>
c0008657:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c000865a:	dd 1e                	fstp   QWORD PTR [esi]
c000865c:	dd 06                	fld    QWORD PTR [esi]
c000865e:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008661:	83 ec 10             	sub    esp,0x10
c0008664:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008667:	e8 84 6f 01 00       	call   c001f5f0 <fabs>
c000866c:	83 c4 10             	add    esp,0x10
c000866f:	dd 05 50 0d 02 c0    	fld    QWORD PTR ds:0xc0020d50
c0008675:	de d9                	fcompp 
c0008677:	df e0                	fnstsw ax
c0008679:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000867d:	9e                   	sahf   
c000867e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008682:	76 05                	jbe    c0008689 <src_process+0xed>
c0008684:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008687:	eb 03                	jmp    c000868c <src_process+0xf0>
c0008689:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000868c:	59                   	pop    ecx
c000868d:	5b                   	pop    ebx
c000868e:	5e                   	pop    esi
c000868f:	ff e0                	jmp    eax
c0008691:	b8 02 00 00 00       	mov    eax,0x2
c0008696:	eb 28                	jmp    c00086c0 <src_process+0x124>
c0008698:	b8 07 00 00 00       	mov    eax,0x7
c000869d:	eb 21                	jmp    c00086c0 <src_process+0x124>
c000869f:	b8 12 00 00 00       	mov    eax,0x12
c00086a4:	eb 1a                	jmp    c00086c0 <src_process+0x124>
c00086a6:	b8 03 00 00 00       	mov    eax,0x3
c00086ab:	eb 13                	jmp    c00086c0 <src_process+0x124>
c00086ad:	b8 04 00 00 00       	mov    eax,0x4
c00086b2:	eb 0c                	jmp    c00086c0 <src_process+0x124>
c00086b4:	b8 06 00 00 00       	mov    eax,0x6
c00086b9:	eb 05                	jmp    c00086c0 <src_process+0x124>
c00086bb:	b8 10 00 00 00       	mov    eax,0x10
c00086c0:	5a                   	pop    edx
c00086c1:	5b                   	pop    ebx
c00086c2:	5e                   	pop    esi
c00086c3:	c3                   	ret    

c00086c4 <src_callback_read>:
c00086c4:	55                   	push   ebp
c00086c5:	57                   	push   edi
c00086c6:	56                   	push   esi
c00086c7:	53                   	push   ebx
c00086c8:	83 ec 4c             	sub    esp,0x4c
c00086cb:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086cf:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086d3:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086d7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086db:	85 ff                	test   edi,edi
c00086dd:	0f 8e 36 01 00 00    	jle    c0008819 <src_callback_read+0x155>
c00086e3:	85 db                	test   ebx,ebx
c00086e5:	0f 84 2e 01 00 00    	je     c0008819 <src_callback_read+0x155>
c00086eb:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086f2:	74 0c                	je     c0008700 <src_callback_read+0x3c>
c00086f4:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00086fb:	e9 19 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008700:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008704:	75 0c                	jne    c0008712 <src_callback_read+0x4e>
c0008706:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000870d:	e9 07 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008712:	51                   	push   ecx
c0008713:	6a 24                	push   0x24
c0008715:	6a 00                	push   0x0
c0008717:	8d 44 24 28          	lea    eax,[esp+0x28]
c000871b:	50                   	push   eax
c000871c:	e8 99 7f ff ff       	call   c00006ba <memset>
c0008721:	5e                   	pop    esi
c0008722:	5d                   	pop    ebp
c0008723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000872b:	e8 a8 fd ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008730:	83 c4 10             	add    esp,0x10
c0008733:	85 c0                	test   eax,eax
c0008735:	74 0c                	je     c0008743 <src_callback_read+0x7f>
c0008737:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c000873e:	e9 d6 00 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008743:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008747:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000874b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000874f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008753:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000875a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000875d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008761:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008765:	31 f6                	xor    esi,esi
c0008767:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000876c:	75 30                	jne    c000879e <src_callback_read+0xda>
c000876e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008776:	52                   	push   edx
c0008777:	52                   	push   edx
c0008778:	8d 44 24 20          	lea    eax,[esp+0x20]
c000877c:	50                   	push   eax
c000877d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008780:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008783:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008787:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000878b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000878f:	83 c4 10             	add    esp,0x10
c0008792:	85 c0                	test   eax,eax
c0008794:	75 08                	jne    c000879e <src_callback_read+0xda>
c0008796:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000879e:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087a5:	50                   	push   eax
c00087a6:	50                   	push   eax
c00087a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087ab:	50                   	push   eax
c00087ac:	53                   	push   ebx
c00087ad:	e8 ea fd ff ff       	call   c000859c <src_process>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087bc:	85 c0                	test   eax,eax
c00087be:	75 42                	jne    c0008802 <src_callback_read+0x13e>
c00087c0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087c7:	89 e9                	mov    ecx,ebp
c00087c9:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087cd:	0f af ca             	imul   ecx,edx
c00087d0:	c1 e1 02             	shl    ecx,0x2
c00087d3:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087db:	0f af d1             	imul   edx,ecx
c00087de:	c1 e2 02             	shl    edx,0x2
c00087e1:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087e5:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087e9:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087ec:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087f1:	75 04                	jne    c00087f7 <src_callback_read+0x133>
c00087f3:	85 c9                	test   ecx,ecx
c00087f5:	74 0b                	je     c0008802 <src_callback_read+0x13e>
c00087f7:	39 d7                	cmp    edi,edx
c00087f9:	7e 09                	jle    c0008804 <src_callback_read+0x140>
c00087fb:	89 d6                	mov    esi,edx
c00087fd:	e9 65 ff ff ff       	jmp    c0008767 <src_callback_read+0xa3>
c0008802:	89 f2                	mov    edx,esi
c0008804:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008808:	85 c0                	test   eax,eax
c000880a:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000880d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008811:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008814:	74 05                	je     c000881b <src_callback_read+0x157>
c0008816:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008819:	31 d2                	xor    edx,edx
c000881b:	83 c4 4c             	add    esp,0x4c
c000881e:	89 d0                	mov    eax,edx
c0008820:	5b                   	pop    ebx
c0008821:	5e                   	pop    esi
c0008822:	5f                   	pop    edi
c0008823:	5d                   	pop    ebp
c0008824:	c3                   	ret    

c0008825 <src_set_ratio>:
c0008825:	53                   	push   ebx
c0008826:	b8 02 00 00 00       	mov    eax,0x2
c000882b:	83 ec 08             	sub    esp,0x8
c000882e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008832:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008836:	85 db                	test   ebx,ebx
c0008838:	74 33                	je     c000886d <src_set_ratio+0x48>
c000883a:	b8 07 00 00 00       	mov    eax,0x7
c000883f:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008843:	74 2c                	je     c0008871 <src_set_ratio+0x4c>
c0008845:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008849:	74 2a                	je     c0008875 <src_set_ratio+0x50>
c000884b:	50                   	push   eax
c000884c:	50                   	push   eax
c000884d:	dd 14 24             	fst    QWORD PTR [esp]
c0008850:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008854:	e8 7f fc ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008859:	5a                   	pop    edx
c000885a:	59                   	pop    ecx
c000885b:	85 c0                	test   eax,eax
c000885d:	75 07                	jne    c0008866 <src_set_ratio+0x41>
c000885f:	dd 04 24             	fld    QWORD PTR [esp]
c0008862:	dd 1b                	fstp   QWORD PTR [ebx]
c0008864:	eb 11                	jmp    c0008877 <src_set_ratio+0x52>
c0008866:	b8 06 00 00 00       	mov    eax,0x6
c000886b:	eb 0a                	jmp    c0008877 <src_set_ratio+0x52>
c000886d:	dd d8                	fstp   st(0)
c000886f:	eb 06                	jmp    c0008877 <src_set_ratio+0x52>
c0008871:	dd d8                	fstp   st(0)
c0008873:	eb 02                	jmp    c0008877 <src_set_ratio+0x52>
c0008875:	dd d8                	fstp   st(0)
c0008877:	83 c4 08             	add    esp,0x8
c000887a:	5b                   	pop    ebx
c000887b:	c3                   	ret    

c000887c <src_get_channels>:
c000887c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008880:	b8 02 00 00 00       	mov    eax,0x2
c0008885:	85 d2                	test   edx,edx
c0008887:	74 14                	je     c000889d <src_get_channels+0x21>
c0008889:	b8 07 00 00 00       	mov    eax,0x7
c000888e:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008892:	74 09                	je     c000889d <src_get_channels+0x21>
c0008894:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008898:	74 03                	je     c000889d <src_get_channels+0x21>
c000889a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000889d:	c3                   	ret    

c000889e <src_reset>:
c000889e:	53                   	push   ebx
c000889f:	b8 02 00 00 00       	mov    eax,0x2
c00088a4:	83 ec 08             	sub    esp,0x8
c00088a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ab:	85 db                	test   ebx,ebx
c00088ad:	74 2e                	je     c00088dd <src_reset+0x3f>
c00088af:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088b2:	85 c0                	test   eax,eax
c00088b4:	74 09                	je     c00088bf <src_reset+0x21>
c00088b6:	83 ec 0c             	sub    esp,0xc
c00088b9:	53                   	push   ebx
c00088ba:	ff d0                	call   eax
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	d9 ee                	fldz   
c00088c1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088c8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088cf:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088d2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088d9:	31 c0                	xor    eax,eax
c00088db:	dd 1b                	fstp   QWORD PTR [ebx]
c00088dd:	83 c4 08             	add    esp,0x8
c00088e0:	5b                   	pop    ebx
c00088e1:	c3                   	ret    

c00088e2 <src_new>:
c00088e2:	57                   	push   edi
c00088e3:	56                   	push   esi
c00088e4:	53                   	push   ebx
c00088e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088e9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088ed:	85 f6                	test   esi,esi
c00088ef:	74 73                	je     c0008964 <src_new+0x82>
c00088f1:	85 ff                	test   edi,edi
c00088f3:	7f 08                	jg     c00088fd <src_new+0x1b>
c00088f5:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00088fb:	eb 1e                	jmp    c000891b <src_new+0x39>
c00088fd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008903:	50                   	push   eax
c0008904:	50                   	push   eax
c0008905:	6a 3c                	push   0x3c
c0008907:	6a 01                	push   0x1
c0008909:	e8 0d 37 00 00       	call   c000c01b <calloc>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	89 c3                	mov    ebx,eax
c0008913:	85 c0                	test   eax,eax
c0008915:	75 10                	jne    c0008927 <src_new+0x45>
c0008917:	85 f6                	test   esi,esi
c0008919:	75 04                	jne    c000891f <src_new+0x3d>
c000891b:	31 db                	xor    ebx,ebx
c000891d:	eb 4b                	jmp    c000896a <src_new+0x88>
c000891f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008925:	eb 43                	jmp    c000896a <src_new+0x88>
c0008927:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000892a:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008931:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008935:	e8 e2 fb ff ff       	call   c000851c <psrc_set_converter>
c000893a:	85 c0                	test   eax,eax
c000893c:	74 18                	je     c0008956 <src_new+0x74>
c000893e:	85 f6                	test   esi,esi
c0008940:	74 06                	je     c0008948 <src_new+0x66>
c0008942:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	53                   	push   ebx
c000894c:	31 db                	xor    ebx,ebx
c000894e:	e8 a8 36 00 00       	call   c000bffb <free>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	53                   	push   ebx
c000895a:	e8 3f ff ff ff       	call   c000889e <src_reset>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	eb 06                	jmp    c000896a <src_new+0x88>
c0008964:	85 ff                	test   edi,edi
c0008966:	7f 9b                	jg     c0008903 <src_new+0x21>
c0008968:	eb b1                	jmp    c000891b <src_new+0x39>
c000896a:	89 d8                	mov    eax,ebx
c000896c:	5b                   	pop    ebx
c000896d:	5e                   	pop    esi
c000896e:	5f                   	pop    edi
c000896f:	c3                   	ret    

c0008970 <src_callback_new>:
c0008970:	56                   	push   esi
c0008971:	53                   	push   ebx
c0008972:	53                   	push   ebx
c0008973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008977:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897b:	85 f6                	test   esi,esi
c000897d:	75 0e                	jne    c000898d <src_callback_new+0x1d>
c000897f:	31 db                	xor    ebx,ebx
c0008981:	85 c0                	test   eax,eax
c0008983:	74 47                	je     c00089cc <src_callback_new+0x5c>
c0008985:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c000898b:	eb 3f                	jmp    c00089cc <src_callback_new+0x5c>
c000898d:	85 c0                	test   eax,eax
c000898f:	74 06                	je     c0008997 <src_callback_new+0x27>
c0008991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008997:	51                   	push   ecx
c0008998:	50                   	push   eax
c0008999:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000899d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a1:	e8 3c ff ff ff       	call   c00088e2 <src_new>
c00089a6:	83 c4 10             	add    esp,0x10
c00089a9:	89 c3                	mov    ebx,eax
c00089ab:	85 c0                	test   eax,eax
c00089ad:	74 1d                	je     c00089cc <src_callback_new+0x5c>
c00089af:	83 ec 0c             	sub    esp,0xc
c00089b2:	50                   	push   eax
c00089b3:	e8 e6 fe ff ff       	call   c000889e <src_reset>
c00089b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089bc:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089c6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089c9:	83 c4 10             	add    esp,0x10
c00089cc:	5a                   	pop    edx
c00089cd:	89 d8                	mov    eax,ebx
c00089cf:	5b                   	pop    ebx
c00089d0:	5e                   	pop    esi
c00089d1:	c3                   	ret    

c00089d2 <src_get_name>:
c00089d2:	53                   	push   ebx
c00089d3:	83 ec 14             	sub    esp,0x14
c00089d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089da:	53                   	push   ebx
c00089db:	e8 47 1f 00 00       	call   c000a927 <sinc_get_name>
c00089e0:	83 c4 10             	add    esp,0x10
c00089e3:	85 c0                	test   eax,eax
c00089e5:	75 1d                	jne    c0008a04 <src_get_name+0x32>
c00089e7:	83 ec 0c             	sub    esp,0xc
c00089ea:	53                   	push   ebx
c00089eb:	e8 4a 23 00 00       	call   c000ad3a <zoh_get_name>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 0d                	jne    c0008a04 <src_get_name+0x32>
c00089f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089fb:	83 c4 08             	add    esp,0x8
c00089fe:	5b                   	pop    ebx
c00089ff:	e9 36 05 00 00       	jmp    c0008f3a <linear_get_name>
c0008a04:	83 c4 08             	add    esp,0x8
c0008a07:	5b                   	pop    ebx
c0008a08:	c3                   	ret    

c0008a09 <src_get_description>:
c0008a09:	53                   	push   ebx
c0008a0a:	83 ec 14             	sub    esp,0x14
c0008a0d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a11:	53                   	push   ebx
c0008a12:	e8 23 1f 00 00       	call   c000a93a <sinc_get_description>
c0008a17:	83 c4 10             	add    esp,0x10
c0008a1a:	85 c0                	test   eax,eax
c0008a1c:	75 1d                	jne    c0008a3b <src_get_description+0x32>
c0008a1e:	83 ec 0c             	sub    esp,0xc
c0008a21:	53                   	push   ebx
c0008a22:	e8 22 23 00 00       	call   c000ad49 <zoh_get_description>
c0008a27:	83 c4 10             	add    esp,0x10
c0008a2a:	85 c0                	test   eax,eax
c0008a2c:	75 0d                	jne    c0008a3b <src_get_description+0x32>
c0008a2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a32:	83 c4 08             	add    esp,0x8
c0008a35:	5b                   	pop    ebx
c0008a36:	e9 0e 05 00 00       	jmp    c0008f49 <linear_get_description>
c0008a3b:	83 c4 08             	add    esp,0x8
c0008a3e:	5b                   	pop    ebx
c0008a3f:	c3                   	ret    

c0008a40 <src_get_version>:
c0008a40:	b8 80 08 02 c0       	mov    eax,0xc0020880
c0008a45:	c3                   	ret    

c0008a46 <src_is_valid_ratio>:
c0008a46:	50                   	push   eax
c0008a47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4f:	e8 84 fa ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008a54:	85 c0                	test   eax,eax
c0008a56:	0f 94 c0             	sete   al
c0008a59:	0f b6 c0             	movzx  eax,al
c0008a5c:	83 c4 0c             	add    esp,0xc
c0008a5f:	c3                   	ret    

c0008a60 <src_error>:
c0008a60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a64:	31 c0                	xor    eax,eax
c0008a66:	85 d2                	test   edx,edx
c0008a68:	74 03                	je     c0008a6d <src_error+0xd>
c0008a6a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a6d:	c3                   	ret    

c0008a6e <src_strerror>:
c0008a6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a72:	31 c0                	xor    eax,eax
c0008a74:	83 fa 17             	cmp    edx,0x17
c0008a77:	77 07                	ja     c0008a80 <src_strerror+0x12>
c0008a79:	8b 04 95 e0 0c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf320]
c0008a80:	c3                   	ret    

c0008a81 <src_simple>:
c0008a81:	56                   	push   esi
c0008a82:	53                   	push   ebx
c0008a83:	83 ec 18             	sub    esp,0x18
c0008a86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a8a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a8e:	50                   	push   eax
c0008a8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a97:	e8 46 fe ff ff       	call   c00088e2 <src_new>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 06                	jne    c0008aa9 <src_simple+0x28>
c0008aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aa7:	eb 25                	jmp    c0008ace <src_simple+0x4d>
c0008aa9:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ab0:	89 c3                	mov    ebx,eax
c0008ab2:	50                   	push   eax
c0008ab3:	50                   	push   eax
c0008ab4:	56                   	push   esi
c0008ab5:	53                   	push   ebx
c0008ab6:	e8 e1 fa ff ff       	call   c000859c <src_process>
c0008abb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008abe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac2:	e8 99 fa ff ff       	call   c0008560 <src_delete>
c0008ac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008acb:	83 c4 10             	add    esp,0x10
c0008ace:	83 c4 14             	add    esp,0x14
c0008ad1:	5b                   	pop    ebx
c0008ad2:	5e                   	pop    esi
c0008ad3:	c3                   	ret    

c0008ad4 <src_short_to_float_array>:
c0008ad4:	83 ec 0c             	sub    esp,0xc
c0008ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008adb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008adf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ae3:	85 c0                	test   eax,eax
c0008ae5:	74 0f                	je     c0008af6 <src_short_to_float_array+0x22>
c0008ae7:	48                   	dec    eax
c0008ae8:	d9 05 64 0d 02 c0    	fld    DWORD PTR ds:0xc0020d64
c0008aee:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008af1:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008af4:	eb ed                	jmp    c0008ae3 <src_short_to_float_array+0xf>
c0008af6:	83 c4 0c             	add    esp,0xc
c0008af9:	c3                   	ret    

c0008afa <src_float_to_short_array>:
c0008afa:	56                   	push   esi
c0008afb:	53                   	push   ebx
c0008afc:	52                   	push   edx
c0008afd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b05:	85 db                	test   ebx,ebx
c0008b07:	74 51                	je     c0008b5a <src_float_to_short_array+0x60>
c0008b09:	4b                   	dec    ebx
c0008b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0e:	d9 05 68 0d 02 c0    	fld    DWORD PTR ds:0xc0020d68
c0008b14:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b17:	dc 15 58 0d 02 c0    	fcom   QWORD PTR ds:0xc0020d58
c0008b1d:	df e0                	fnstsw ax
c0008b1f:	9e                   	sahf   
c0008b20:	72 0a                	jb     c0008b2c <src_float_to_short_array+0x32>
c0008b22:	dd d8                	fstp   st(0)
c0008b24:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b2a:	eb d9                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b2c:	d9 05 6c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d6c
c0008b32:	d8 d9                	fcomp  st(1)
c0008b34:	df e0                	fnstsw ax
c0008b36:	9e                   	sahf   
c0008b37:	72 0a                	jb     c0008b43 <src_float_to_short_array+0x49>
c0008b39:	dd d8                	fstp   st(0)
c0008b3b:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b41:	eb c2                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b43:	83 ec 10             	sub    esp,0x10
c0008b46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b49:	e8 c2 6a 01 00       	call   c001f610 <lrint>
c0008b4e:	83 c4 10             	add    esp,0x10
c0008b51:	c1 f8 10             	sar    eax,0x10
c0008b54:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b58:	eb ab                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b5a:	58                   	pop    eax
c0008b5b:	5b                   	pop    ebx
c0008b5c:	5e                   	pop    esi
c0008b5d:	c3                   	ret    

c0008b5e <src_int_to_float_array>:
c0008b5e:	83 ec 0c             	sub    esp,0xc
c0008b61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b65:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b6d:	85 c0                	test   eax,eax
c0008b6f:	74 0f                	je     c0008b80 <src_int_to_float_array+0x22>
c0008b71:	48                   	dec    eax
c0008b72:	d9 05 70 0d 02 c0    	fld    DWORD PTR ds:0xc0020d70
c0008b78:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b7b:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b7e:	eb ed                	jmp    c0008b6d <src_int_to_float_array+0xf>
c0008b80:	83 c4 0c             	add    esp,0xc
c0008b83:	c3                   	ret    

c0008b84 <src_float_to_int_array>:
c0008b84:	56                   	push   esi
c0008b85:	53                   	push   ebx
c0008b86:	52                   	push   edx
c0008b87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b8f:	85 db                	test   ebx,ebx
c0008b91:	74 4f                	je     c0008be2 <src_float_to_int_array+0x5e>
c0008b93:	4b                   	dec    ebx
c0008b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b98:	d9 05 68 0d 02 c0    	fld    DWORD PTR ds:0xc0020d68
c0008b9e:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008ba1:	dc 15 58 0d 02 c0    	fcom   QWORD PTR ds:0xc0020d58
c0008ba7:	df e0                	fnstsw ax
c0008ba9:	9e                   	sahf   
c0008baa:	72 0b                	jb     c0008bb7 <src_float_to_int_array+0x33>
c0008bac:	dd d8                	fstp   st(0)
c0008bae:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bb5:	eb d8                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bb7:	d9 05 6c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d6c
c0008bbd:	d8 d9                	fcomp  st(1)
c0008bbf:	df e0                	fnstsw ax
c0008bc1:	9e                   	sahf   
c0008bc2:	72 0b                	jb     c0008bcf <src_float_to_int_array+0x4b>
c0008bc4:	dd d8                	fstp   st(0)
c0008bc6:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bcd:	eb c0                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bcf:	83 ec 10             	sub    esp,0x10
c0008bd2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bd5:	e8 36 6a 01 00       	call   c001f610 <lrint>
c0008bda:	83 c4 10             	add    esp,0x10
c0008bdd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008be0:	eb ad                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008be2:	58                   	pop    eax
c0008be3:	5b                   	pop    ebx
c0008be4:	5e                   	pop    esi
c0008be5:	c3                   	ret    

c0008be6 <is_bad_src_ratio>:
c0008be6:	83 ec 0c             	sub    esp,0xc
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bf8:	dd 04 24             	fld    QWORD PTR [esp]
c0008bfb:	dd 05 40 0d 02 c0    	fld    QWORD PTR ds:0xc0020d40
c0008c01:	de d9                	fcompp 
c0008c03:	df e0                	fnstsw ax
c0008c05:	f6 c4 45             	test   ah,0x45
c0008c08:	74 10                	je     c0008c1a <is_bad_src_ratio+0x34>
c0008c0a:	dd 04 24             	fld    QWORD PTR [esp]
c0008c0d:	dc 1d 48 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d48
c0008c13:	df e0                	fnstsw ax
c0008c15:	f6 c4 45             	test   ah,0x45
c0008c18:	75 07                	jne    c0008c21 <is_bad_src_ratio+0x3b>
c0008c1a:	b8 01 00 00 00       	mov    eax,0x1
c0008c1f:	eb 05                	jmp    c0008c26 <is_bad_src_ratio+0x40>
c0008c21:	b8 00 00 00 00       	mov    eax,0x0
c0008c26:	83 c4 0c             	add    esp,0xc
c0008c29:	c3                   	ret    

c0008c2a <fmod_one>:
c0008c2a:	83 ec 2c             	sub    esp,0x2c
c0008c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c3d:	83 ec 08             	sub    esp,0x8
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c48:	e8 c3 69 01 00       	call   c001f610 <lrint>
c0008c4d:	83 c4 10             	add    esp,0x10
c0008c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c54:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c58:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c5c:	de e1                	fsubrp st(1),st
c0008c5e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c62:	d9 ee                	fldz   
c0008c64:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c68:	df e0                	fnstsw ax
c0008c6a:	f6 c4 45             	test   ah,0x45
c0008c6d:	75 0a                	jne    c0008c79 <fmod_one+0x4f>
c0008c6f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c73:	d9 e8                	fld1   
c0008c75:	de c1                	faddp  st(1),st
c0008c77:	eb 04                	jmp    c0008c7d <fmod_one+0x53>
c0008c79:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c7d:	83 c4 2c             	add    esp,0x2c
c0008c80:	c3                   	ret    

c0008c81 <linear_vari_process>:
c0008c81:	55                   	push   ebp
c0008c82:	57                   	push   edi
c0008c83:	56                   	push   esi
c0008c84:	53                   	push   ebx
c0008c85:	83 ec 2c             	sub    esp,0x2c
c0008c88:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c8c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c90:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c98:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c9c:	0f 8e 5a 02 00 00    	jle    c0008efc <linear_vari_process+0x27b>
c0008ca2:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008ca5:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cad:	85 db                	test   ebx,ebx
c0008caf:	0f 84 47 02 00 00    	je     c0008efc <linear_vari_process+0x27b>
c0008cb5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cb8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cbc:	74 19                	je     c0008cd7 <linear_vari_process+0x56>
c0008cbe:	31 d2                	xor    edx,edx
c0008cc0:	39 c2                	cmp    edx,eax
c0008cc2:	7d 0c                	jge    c0008cd0 <linear_vari_process+0x4f>
c0008cc4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cc6:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cc9:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ccd:	42                   	inc    edx
c0008cce:	eb f0                	jmp    c0008cc0 <linear_vari_process+0x3f>
c0008cd0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cd7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cda:	0f af d0             	imul   edx,eax
c0008cdd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ce0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008ce4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008ceb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008cee:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cf5:	dd 07                	fld    QWORD PTR [edi]
c0008cf7:	dd 14 24             	fst    QWORD PTR [esp]
c0008cfa:	50                   	push   eax
c0008cfb:	50                   	push   eax
c0008cfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cff:	e8 e2 fe ff ff       	call   c0008be6 <is_bad_src_ratio>
c0008d04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d08:	5a                   	pop    edx
c0008d09:	59                   	pop    ecx
c0008d0a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d0f:	0f 85 df 01 00 00    	jne    c0008ef4 <linear_vari_process+0x273>
c0008d15:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d18:	d9 e8                	fld1   
c0008d1a:	d8 d1                	fcom   st(1)
c0008d1c:	df e0                	fnstsw ax
c0008d1e:	9e                   	sahf   
c0008d1f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d23:	0f 86 97 00 00 00    	jbe    c0008dc0 <linear_vari_process+0x13f>
c0008d29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d2c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d2f:	0f 8d 8b 00 00 00    	jge    c0008dc0 <linear_vari_process+0x13f>
c0008d35:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d39:	d8 c1                	fadd   st,st(1)
c0008d3b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d3e:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d41:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d44:	df e0                	fnstsw ax
c0008d46:	9e                   	sahf   
c0008d47:	73 77                	jae    c0008dc0 <linear_vari_process+0x13f>
c0008d49:	85 d2                	test   edx,edx
c0008d4b:	7e 36                	jle    c0008d83 <linear_vari_process+0x102>
c0008d4d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d51:	dd 07                	fld    QWORD PTR [edi]
c0008d53:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d56:	83 ec 10             	sub    esp,0x10
c0008d59:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d5c:	e8 8f 68 01 00       	call   c001f5f0 <fabs>
c0008d61:	83 c4 10             	add    esp,0x10
c0008d64:	dc 1d b8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020db8
c0008d6a:	df e0                	fnstsw ax
c0008d6c:	9e                   	sahf   
c0008d6d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d71:	76 10                	jbe    c0008d83 <linear_vari_process+0x102>
c0008d73:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d76:	dc 27                	fsub   QWORD PTR [edi]
c0008d78:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d7b:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d7e:	dc 07                	fadd   QWORD PTR [edi]
c0008d80:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d83:	31 c0                	xor    eax,eax
c0008d85:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d88:	7e 1f                	jle    c0008da9 <linear_vari_process+0x128>
c0008d8a:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d8c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d8f:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d93:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d97:	d8 e1                	fsub   st,st(1)
c0008d99:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d9c:	40                   	inc    eax
c0008d9d:	d8 ca                	fmul   st,st(2)
c0008d9f:	de c1                	faddp  st(1),st
c0008da1:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008da4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008da7:	eb dc                	jmp    c0008d85 <linear_vari_process+0x104>
c0008da9:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dad:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008db0:	de c1                	faddp  st(1),st
c0008db2:	e9 61 ff ff ff       	jmp    c0008d18 <linear_vari_process+0x97>
c0008db7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dbb:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dbe:	de c1                	faddp  st(1),st
c0008dc0:	83 ec 10             	sub    esp,0x10
c0008dc3:	dd 14 24             	fst    QWORD PTR [esp]
c0008dc6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dca:	e8 5b fe ff ff       	call   c0008c2a <fmod_one>
c0008dcf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008dd2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008dd6:	d8 e1                	fsub   st,st(1)
c0008dd8:	d9 c9                	fxch   st(1)
c0008dda:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dde:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008de1:	e8 2a 68 01 00       	call   c001f610 <lrint>
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	0f af e8             	imul   ebp,eax
c0008dec:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008def:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008df2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008df6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008df9:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008dfc:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008dff:	0f 8d 95 00 00 00    	jge    c0008e9a <linear_vari_process+0x219>
c0008e05:	d9 c0                	fld    st(0)
c0008e07:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e0e:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e12:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e16:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e1a:	de d9                	fcompp 
c0008e1c:	df e0                	fnstsw ax
c0008e1e:	9e                   	sahf   
c0008e1f:	76 79                	jbe    c0008e9a <linear_vari_process+0x219>
c0008e21:	85 ed                	test   ebp,ebp
c0008e23:	7e 36                	jle    c0008e5b <linear_vari_process+0x1da>
c0008e25:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e29:	dd 07                	fld    QWORD PTR [edi]
c0008e2b:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e2e:	83 ec 10             	sub    esp,0x10
c0008e31:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e34:	e8 b7 67 01 00       	call   c001f5f0 <fabs>
c0008e39:	83 c4 10             	add    esp,0x10
c0008e3c:	dc 1d b8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020db8
c0008e42:	df e0                	fnstsw ax
c0008e44:	9e                   	sahf   
c0008e45:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e49:	76 10                	jbe    c0008e5b <linear_vari_process+0x1da>
c0008e4b:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e4e:	dc 27                	fsub   QWORD PTR [edi]
c0008e50:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e53:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e56:	dc 07                	fadd   QWORD PTR [edi]
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	31 c0                	xor    eax,eax
c0008e5d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e60:	39 c2                	cmp    edx,eax
c0008e62:	0f 8e 4f ff ff ff    	jle    c0008db7 <linear_vari_process+0x136>
c0008e68:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e6a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e6d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e71:	89 e9                	mov    ecx,ebp
c0008e73:	29 d1                	sub    ecx,edx
c0008e75:	01 c5                	add    ebp,eax
c0008e77:	89 ca                	mov    edx,ecx
c0008e79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e7d:	01 c2                	add    edx,eax
c0008e7f:	40                   	inc    eax
c0008e80:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e83:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e86:	d8 e1                	fsub   st,st(1)
c0008e88:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e8b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e8e:	d8 ca                	fmul   st,st(2)
c0008e90:	de c1                	faddp  st(1),st
c0008e92:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e95:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e98:	eb c3                	jmp    c0008e5d <linear_vari_process+0x1dc>
c0008e9a:	39 d1                	cmp    ecx,edx
c0008e9c:	7d 13                	jge    c0008eb1 <linear_vari_process+0x230>
c0008e9e:	89 d0                	mov    eax,edx
c0008ea0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ea3:	29 c8                	sub    eax,ecx
c0008ea5:	99                   	cdq    
c0008ea6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ead:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008eb1:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008eb4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008eb7:	85 c0                	test   eax,eax
c0008eb9:	7f 1b                	jg     c0008ed6 <linear_vari_process+0x255>
c0008ebb:	dd 04 24             	fld    QWORD PTR [esp]
c0008ebe:	dd 1f                	fstp   QWORD PTR [edi]
c0008ec0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ec3:	99                   	cdq    
c0008ec4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008eca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ecd:	99                   	cdq    
c0008ece:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ed1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ed4:	eb 26                	jmp    c0008efc <linear_vari_process+0x27b>
c0008ed6:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ed9:	31 d2                	xor    edx,edx
c0008edb:	29 c8                	sub    eax,ecx
c0008edd:	c1 e0 02             	shl    eax,0x2
c0008ee0:	39 d1                	cmp    ecx,edx
c0008ee2:	7e d7                	jle    c0008ebb <linear_vari_process+0x23a>
c0008ee4:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008ee6:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008eea:	83 c0 04             	add    eax,0x4
c0008eed:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ef1:	42                   	inc    edx
c0008ef2:	eb ec                	jmp    c0008ee0 <linear_vari_process+0x25f>
c0008ef4:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008efc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f00:	83 c4 2c             	add    esp,0x2c
c0008f03:	5b                   	pop    ebx
c0008f04:	5e                   	pop    esi
c0008f05:	5f                   	pop    edi
c0008f06:	5d                   	pop    ebp
c0008f07:	c3                   	ret    

c0008f08 <linear_reset>:
c0008f08:	83 ec 0c             	sub    esp,0xc
c0008f0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f12:	85 c0                	test   eax,eax
c0008f14:	74 20                	je     c0008f36 <linear_reset+0x2e>
c0008f16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f23:	51                   	push   ecx
c0008f24:	c1 e2 02             	shl    edx,0x2
c0008f27:	83 c0 1c             	add    eax,0x1c
c0008f2a:	52                   	push   edx
c0008f2b:	6a 00                	push   0x0
c0008f2d:	50                   	push   eax
c0008f2e:	e8 87 77 ff ff       	call   c00006ba <memset>
c0008f33:	83 c4 10             	add    esp,0x10
c0008f36:	83 c4 0c             	add    esp,0xc
c0008f39:	c3                   	ret    

c0008f3a <linear_get_name>:
c0008f3a:	31 c0                	xor    eax,eax
c0008f3c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f41:	75 05                	jne    c0008f48 <linear_get_name+0xe>
c0008f43:	b8 74 0d 02 c0       	mov    eax,0xc0020d74
c0008f48:	c3                   	ret    

c0008f49 <linear_get_description>:
c0008f49:	31 c0                	xor    eax,eax
c0008f4b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f50:	75 05                	jne    c0008f57 <linear_get_description+0xe>
c0008f52:	b8 88 0d 02 c0       	mov    eax,0xc0020d88
c0008f57:	c3                   	ret    

c0008f58 <linear_set_converter>:
c0008f58:	53                   	push   ebx
c0008f59:	b8 0a 00 00 00       	mov    eax,0xa
c0008f5e:	83 ec 08             	sub    esp,0x8
c0008f61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f65:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f6a:	75 6e                	jne    c0008fda <linear_set_converter+0x82>
c0008f6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f6f:	85 c0                	test   eax,eax
c0008f71:	74 13                	je     c0008f86 <linear_set_converter+0x2e>
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	50                   	push   eax
c0008f77:	e8 7f 30 00 00       	call   c000bffb <free>
c0008f7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	50                   	push   eax
c0008f87:	50                   	push   eax
c0008f88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f92:	50                   	push   eax
c0008f93:	6a 01                	push   0x1
c0008f95:	e8 81 30 00 00       	call   c000c01b <calloc>
c0008f9a:	89 c2                	mov    edx,eax
c0008f9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f9f:	83 c4 10             	add    esp,0x10
c0008fa2:	b8 01 00 00 00       	mov    eax,0x1
c0008fa7:	85 d2                	test   edx,edx
c0008fa9:	74 2f                	je     c0008fda <linear_set_converter+0x82>
c0008fab:	83 ec 0c             	sub    esp,0xc
c0008fae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fb4:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fba:	c7 43 24 81 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c81
c0008fc1:	c7 43 20 81 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c81
c0008fc8:	c7 43 28 08 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f08
c0008fcf:	53                   	push   ebx
c0008fd0:	e8 33 ff ff ff       	call   c0008f08 <linear_reset>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	31 c0                	xor    eax,eax
c0008fda:	83 c4 08             	add    esp,0x8
c0008fdd:	5b                   	pop    ebx
c0008fde:	c3                   	ret    

c0008fdf <is_bad_src_ratio>:
c0008fdf:	83 ec 0c             	sub    esp,0xc
c0008fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe6:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008fed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ff1:	dd 04 24             	fld    QWORD PTR [esp]
c0008ff4:	dd 05 40 0d 02 c0    	fld    QWORD PTR ds:0xc0020d40
c0008ffa:	de d9                	fcompp 
c0008ffc:	df e0                	fnstsw ax
c0008ffe:	f6 c4 45             	test   ah,0x45
c0009001:	74 10                	je     c0009013 <is_bad_src_ratio+0x34>
c0009003:	dd 04 24             	fld    QWORD PTR [esp]
c0009006:	dc 1d 48 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d48
c000900c:	df e0                	fnstsw ax
c000900e:	f6 c4 45             	test   ah,0x45
c0009011:	75 07                	jne    c000901a <is_bad_src_ratio+0x3b>
c0009013:	b8 01 00 00 00       	mov    eax,0x1
c0009018:	eb 05                	jmp    c000901f <is_bad_src_ratio+0x40>
c000901a:	b8 00 00 00 00       	mov    eax,0x0
c000901f:	83 c4 0c             	add    esp,0xc
c0009022:	c3                   	ret    

c0009023 <int_to_fp>:
c0009023:	c1 e0 0c             	shl    eax,0xc
c0009026:	c3                   	ret    

c0009027 <fp_to_int>:
c0009027:	c1 f8 0c             	sar    eax,0xc
c000902a:	c3                   	ret    

c000902b <fp_fraction_part>:
c000902b:	25 ff 0f 00 00       	and    eax,0xfff
c0009030:	c3                   	ret    

c0009031 <fp_to_double>:
c0009031:	83 ec 0c             	sub    esp,0xc
c0009034:	e8 f2 ff ff ff       	call   c000902b <fp_fraction_part>
c0009039:	d9 05 48 0f 02 c0    	fld    DWORD PTR ds:0xc0020f48
c000903f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009043:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009047:	83 c4 0c             	add    esp,0xc
c000904a:	c3                   	ret    

c000904b <calc_output_single>:
c000904b:	55                   	push   ebp
c000904c:	57                   	push   edi
c000904d:	89 c7                	mov    edi,eax
c000904f:	56                   	push   esi
c0009050:	53                   	push   ebx
c0009051:	89 d3                	mov    ebx,edx
c0009053:	83 ec 24             	sub    esp,0x24
c0009056:	89 de                	mov    esi,ebx
c0009058:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000905b:	e8 c3 ff ff ff       	call   c0009023 <int_to_fp>
c0009060:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009063:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009067:	29 c8                	sub    eax,ecx
c0009069:	99                   	cdq    
c000906a:	f7 fb                	idiv   ebx
c000906c:	0f af f0             	imul   esi,eax
c000906f:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009072:	01 ce                	add    esi,ecx
c0009074:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009078:	29 c2                	sub    edx,eax
c000907a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009081:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009089:	8d 14 97             	lea    edx,[edi+edx*4]
c000908c:	89 f0                	mov    eax,esi
c000908e:	e8 9e ff ff ff       	call   c0009031 <fp_to_double>
c0009093:	89 f0                	mov    eax,esi
c0009095:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009099:	e8 89 ff ff ff       	call   c0009027 <fp_to_int>
c000909e:	83 c2 04             	add    edx,0x4
c00090a1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090a5:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090a9:	d8 e1                	fsub   st,st(1)
c00090ab:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090af:	de c9                	fmulp  st(1),st
c00090b1:	de c1                	faddp  st(1),st
c00090b3:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090b9:	29 de                	sub    esi,ebx
c00090bb:	dc 04 24             	fadd   QWORD PTR [esp]
c00090be:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090c1:	79 c9                	jns    c000908c <calc_output_single+0x41>
c00090c3:	89 d8                	mov    eax,ebx
c00090c5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090c9:	29 c8                	sub    eax,ecx
c00090cb:	89 c1                	mov    ecx,eax
c00090cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d1:	29 c8                	sub    eax,ecx
c00090d3:	99                   	cdq    
c00090d4:	f7 fb                	idiv   ebx
c00090d6:	89 da                	mov    edx,ebx
c00090d8:	0f af d0             	imul   edx,eax
c00090db:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090df:	01 d1                	add    ecx,edx
c00090e1:	d9 ee                	fldz   
c00090e3:	8d 14 87             	lea    edx,[edi+eax*4]
c00090e6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090ea:	89 c8                	mov    eax,ecx
c00090ec:	e8 40 ff ff ff       	call   c0009031 <fp_to_double>
c00090f1:	89 c8                	mov    eax,ecx
c00090f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00090f7:	e8 2b ff ff ff       	call   c0009027 <fp_to_int>
c00090fc:	29 d9                	sub    ecx,ebx
c00090fe:	83 ea 04             	sub    edx,0x4
c0009101:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009105:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009109:	d8 e1                	fsub   st,st(1)
c000910b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000910f:	de c9                	fmulp  st(1),st
c0009111:	de c1                	faddp  st(1),st
c0009113:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009119:	85 c9                	test   ecx,ecx
c000911b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000911f:	de c1                	faddp  st(1),st
c0009121:	7f c3                	jg     c00090e6 <calc_output_single+0x9b>
c0009123:	dd 04 24             	fld    QWORD PTR [esp]
c0009126:	de c1                	faddp  st(1),st
c0009128:	83 c4 24             	add    esp,0x24
c000912b:	5b                   	pop    ebx
c000912c:	5e                   	pop    esi
c000912d:	5f                   	pop    edi
c000912e:	5d                   	pop    ebp
c000912f:	c3                   	ret    

c0009130 <calc_output_stereo>:
c0009130:	55                   	push   ebp
c0009131:	57                   	push   edi
c0009132:	89 c7                	mov    edi,eax
c0009134:	56                   	push   esi
c0009135:	53                   	push   ebx
c0009136:	89 d3                	mov    ebx,edx
c0009138:	83 ec 44             	sub    esp,0x44
c000913b:	89 de                	mov    esi,ebx
c000913d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009140:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009144:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009148:	e8 d6 fe ff ff       	call   c0009023 <int_to_fp>
c000914d:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009150:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009154:	29 c8                	sub    eax,ecx
c0009156:	99                   	cdq    
c0009157:	f7 fb                	idiv   ebx
c0009159:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000915c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009164:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009168:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000916b:	0f af f0             	imul   esi,eax
c000916e:	0f af c2             	imul   eax,edx
c0009171:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009175:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009179:	d9 ee                	fldz   
c000917b:	29 c2                	sub    edx,eax
c000917d:	01 ce                	add    esi,ecx
c000917f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009182:	8d 14 97             	lea    edx,[edi+edx*4]
c0009185:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000918d:	89 f0                	mov    eax,esi
c000918f:	e8 9d fe ff ff       	call   c0009031 <fp_to_double>
c0009194:	89 f0                	mov    eax,esi
c0009196:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000919a:	e8 88 fe ff ff       	call   c0009027 <fp_to_int>
c000919f:	83 c2 08             	add    edx,0x8
c00091a2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091a6:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091aa:	d8 e1                	fsub   st,st(1)
c00091ac:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091b0:	de c9                	fmulp  st(1),st
c00091b2:	de c1                	faddp  st(1),st
c00091b4:	d9 c0                	fld    st(0)
c00091b6:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091bc:	dc 04 24             	fadd   QWORD PTR [esp]
c00091bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091c2:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091c8:	29 de                	sub    esi,ebx
c00091ca:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091ce:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091d2:	79 b9                	jns    c000918d <calc_output_stereo+0x5d>
c00091d4:	89 d8                	mov    eax,ebx
c00091d6:	29 c8                	sub    eax,ecx
c00091d8:	89 c1                	mov    ecx,eax
c00091da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091de:	29 c8                	sub    eax,ecx
c00091e0:	99                   	cdq    
c00091e1:	f7 fb                	idiv   ebx
c00091e3:	89 da                	mov    edx,ebx
c00091e5:	0f af d0             	imul   edx,eax
c00091e8:	40                   	inc    eax
c00091e9:	01 d1                	add    ecx,edx
c00091eb:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091f4:	d9 ee                	fldz   
c00091f6:	d9 ee                	fldz   
c00091f8:	8d 14 87             	lea    edx,[edi+eax*4]
c00091fb:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00091ff:	89 c8                	mov    eax,ecx
c0009201:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009205:	e8 27 fe ff ff       	call   c0009031 <fp_to_double>
c000920a:	89 c8                	mov    eax,ecx
c000920c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009210:	e8 12 fe ff ff       	call   c0009027 <fp_to_int>
c0009215:	29 d9                	sub    ecx,ebx
c0009217:	83 ea 08             	sub    edx,0x8
c000921a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000921e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009222:	d8 e1                	fsub   st,st(1)
c0009224:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009228:	de c9                	fmulp  st(1),st
c000922a:	de c1                	faddp  st(1),st
c000922c:	d9 c0                	fld    st(0)
c000922e:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009234:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009238:	de c1                	faddp  st(1),st
c000923a:	d9 c9                	fxch   st(1)
c000923c:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009242:	85 c9                	test   ecx,ecx
c0009244:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009248:	de c1                	faddp  st(1),st
c000924a:	7f af                	jg     c00091fb <calc_output_stereo+0xcb>
c000924c:	dd 04 24             	fld    QWORD PTR [esp]
c000924f:	de c2                	faddp  st(2),st
c0009251:	d9 c9                	fxch   st(1)
c0009253:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009257:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000925b:	d9 18                	fstp   DWORD PTR [eax]
c000925d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009261:	de c1                	faddp  st(1),st
c0009263:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009267:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c000926a:	83 c4 44             	add    esp,0x44
c000926d:	5b                   	pop    ebx
c000926e:	5e                   	pop    esi
c000926f:	5f                   	pop    edi
c0009270:	5d                   	pop    ebp
c0009271:	c3                   	ret    

c0009272 <calc_output_quad>:
c0009272:	55                   	push   ebp
c0009273:	57                   	push   edi
c0009274:	56                   	push   esi
c0009275:	89 c6                	mov    esi,eax
c0009277:	53                   	push   ebx
c0009278:	89 d3                	mov    ebx,edx
c000927a:	83 ec 5c             	sub    esp,0x5c
c000927d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009280:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009284:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009288:	dd 1c 24             	fstp   QWORD PTR [esp]
c000928b:	e8 93 fd ff ff       	call   c0009023 <int_to_fp>
c0009290:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009293:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009297:	29 c8                	sub    eax,ecx
c0009299:	99                   	cdq    
c000929a:	f7 fb                	idiv   ebx
c000929c:	89 da                	mov    edx,ebx
c000929e:	0f af d0             	imul   edx,eax
c00092a1:	01 ca                	add    edx,ecx
c00092a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092a7:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092aa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092ae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092b1:	0f af c2             	imul   eax,edx
c00092b4:	d9 ee                	fldz   
c00092b6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092be:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092c2:	29 c2                	sub    edx,eax
c00092c4:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092c8:	8d 14 96             	lea    edx,[esi+edx*4]
c00092cb:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092cf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d7:	e8 55 fd ff ff       	call   c0009031 <fp_to_double>
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092e4:	e8 3e fd ff ff       	call   c0009027 <fp_to_int>
c00092e9:	83 c2 10             	add    edx,0x10
c00092ec:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092f0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092f4:	d8 e1                	fsub   st,st(1)
c00092f6:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00092fa:	de c9                	fmulp  st(1),st
c00092fc:	de c1                	faddp  st(1),st
c00092fe:	d9 c0                	fld    st(0)
c0009300:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009306:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000930a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000930e:	d9 c0                	fld    st(0)
c0009310:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009316:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000931a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000931e:	d9 c0                	fld    st(0)
c0009320:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009326:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000932a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000932e:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009334:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009338:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933c:	de c1                	faddp  st(1),st
c000933e:	79 8f                	jns    c00092cf <calc_output_quad+0x5d>
c0009340:	89 d8                	mov    eax,ebx
c0009342:	29 c8                	sub    eax,ecx
c0009344:	89 c1                	mov    ecx,eax
c0009346:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000934a:	29 c8                	sub    eax,ecx
c000934c:	99                   	cdq    
c000934d:	f7 fb                	idiv   ebx
c000934f:	89 da                	mov    edx,ebx
c0009351:	0f af d0             	imul   edx,eax
c0009354:	40                   	inc    eax
c0009355:	01 d1                	add    ecx,edx
c0009357:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000935c:	d9 ee                	fldz   
c000935e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009362:	d9 ee                	fldz   
c0009364:	d9 ee                	fldz   
c0009366:	d9 ee                	fldz   
c0009368:	8d 14 86             	lea    edx,[esi+eax*4]
c000936b:	eb 0a                	jmp    c0009377 <calc_output_quad+0x105>
c000936d:	d9 cc                	fxch   st(4)
c000936f:	d9 ca                	fxch   st(2)
c0009371:	d9 c9                	fxch   st(1)
c0009373:	d9 cb                	fxch   st(3)
c0009375:	d9 c9                	fxch   st(1)
c0009377:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000937b:	d9 c9                	fxch   st(1)
c000937d:	89 c8                	mov    eax,ecx
c000937f:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009383:	d9 c9                	fxch   st(1)
c0009385:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009389:	d9 c9                	fxch   st(1)
c000938b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000938f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009393:	e8 99 fc ff ff       	call   c0009031 <fp_to_double>
c0009398:	89 c8                	mov    eax,ecx
c000939a:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000939e:	e8 84 fc ff ff       	call   c0009027 <fp_to_int>
c00093a3:	29 d9                	sub    ecx,ebx
c00093a5:	83 ea 10             	sub    edx,0x10
c00093a8:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093ac:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093b0:	d8 e1                	fsub   st,st(1)
c00093b2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093b6:	de c9                	fmulp  st(1),st
c00093b8:	de c1                	faddp  st(1),st
c00093ba:	d9 c0                	fld    st(0)
c00093bc:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093c2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093c6:	de c1                	faddp  st(1),st
c00093c8:	d9 c1                	fld    st(1)
c00093ca:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093d0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093d4:	de c1                	faddp  st(1),st
c00093d6:	d9 c2                	fld    st(2)
c00093d8:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093de:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093e2:	de c1                	faddp  st(1),st
c00093e4:	d9 cb                	fxch   st(3)
c00093e6:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093ec:	85 c9                	test   ecx,ecx
c00093ee:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093f2:	de c1                	faddp  st(1),st
c00093f4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00093f8:	0f 8f 6f ff ff ff    	jg     c000936d <calc_output_quad+0xfb>
c00093fe:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009402:	de c4                	faddp  st(4),st
c0009404:	d9 cb                	fxch   st(3)
c0009406:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009409:	d9 1f                	fstp   DWORD PTR [edi]
c000940b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000940f:	de c2                	faddp  st(2),st
c0009411:	d9 c9                	fxch   st(1)
c0009413:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009416:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009419:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000941d:	de c3                	faddp  st(3),st
c000941f:	d9 ca                	fxch   st(2)
c0009421:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009424:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009427:	de c1                	faddp  st(1),st
c0009429:	dc 0c 24             	fmul   QWORD PTR [esp]
c000942c:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000942f:	83 c4 5c             	add    esp,0x5c
c0009432:	5b                   	pop    ebx
c0009433:	5e                   	pop    esi
c0009434:	5f                   	pop    edi
c0009435:	5d                   	pop    ebp
c0009436:	c3                   	ret    

c0009437 <calc_output_hex>:
c0009437:	55                   	push   ebp
c0009438:	57                   	push   edi
c0009439:	89 c7                	mov    edi,eax
c000943b:	56                   	push   esi
c000943c:	53                   	push   ebx
c000943d:	89 d3                	mov    ebx,edx
c000943f:	83 ec 7c             	sub    esp,0x7c
c0009442:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009445:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000944c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009453:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009456:	e8 c8 fb ff ff       	call   c0009023 <int_to_fp>
c000945b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000945e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009462:	29 c8                	sub    eax,ecx
c0009464:	99                   	cdq    
c0009465:	f7 fb                	idiv   ebx
c0009467:	89 da                	mov    edx,ebx
c0009469:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0009471:	0f af d0             	imul   edx,eax
c0009474:	01 ca                	add    edx,ecx
c0009476:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000947e:	d9 ee                	fldz   
c0009480:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009484:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009487:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000948b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000948e:	0f af c2             	imul   eax,edx
c0009491:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009495:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009499:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000949d:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094a1:	29 c2                	sub    edx,eax
c00094a3:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094a7:	8d 14 97             	lea    edx,[edi+edx*4]
c00094aa:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094ae:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094b6:	e8 76 fb ff ff       	call   c0009031 <fp_to_double>
c00094bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094bf:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094c3:	e8 5f fb ff ff       	call   c0009027 <fp_to_int>
c00094c8:	83 c2 18             	add    edx,0x18
c00094cb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094cf:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094d3:	d8 e1                	fsub   st,st(1)
c00094d5:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094d9:	de c9                	fmulp  st(1),st
c00094db:	de c1                	faddp  st(1),st
c00094dd:	d9 c0                	fld    st(0)
c00094df:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094e5:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094e9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094ed:	d9 c0                	fld    st(0)
c00094ef:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094f5:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00094f9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00094fd:	d9 c0                	fld    st(0)
c00094ff:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009505:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009509:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000950d:	d9 c0                	fld    st(0)
c000950f:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009515:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009519:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000951d:	d9 c0                	fld    st(0)
c000951f:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009525:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009529:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000952d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009533:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009537:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000953b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000953f:	0f 89 6d ff ff ff    	jns    c00094b2 <calc_output_hex+0x7b>
c0009545:	89 d8                	mov    eax,ebx
c0009547:	29 c8                	sub    eax,ecx
c0009549:	89 c1                	mov    ecx,eax
c000954b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000954f:	29 c8                	sub    eax,ecx
c0009551:	99                   	cdq    
c0009552:	f7 fb                	idiv   ebx
c0009554:	89 da                	mov    edx,ebx
c0009556:	0f af d0             	imul   edx,eax
c0009559:	40                   	inc    eax
c000955a:	01 d1                	add    ecx,edx
c000955c:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0009561:	d9 ee                	fldz   
c0009563:	d9 ee                	fldz   
c0009565:	d9 ee                	fldz   
c0009567:	d9 ca                	fxch   st(2)
c0009569:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c000956d:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009571:	d9 ee                	fldz   
c0009573:	8d 14 87             	lea    edx,[edi+eax*4]
c0009576:	d9 ee                	fldz   
c0009578:	d9 ca                	fxch   st(2)
c000957a:	eb 0a                	jmp    c0009586 <calc_output_hex+0x14f>
c000957c:	d9 c9                	fxch   st(1)
c000957e:	d9 cc                	fxch   st(4)
c0009580:	d9 cb                	fxch   st(3)
c0009582:	d9 ca                	fxch   st(2)
c0009584:	d9 c9                	fxch   st(1)
c0009586:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c000958a:	89 c8                	mov    eax,ecx
c000958c:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009590:	d9 ca                	fxch   st(2)
c0009592:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009596:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000959a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000959e:	e8 8e fa ff ff       	call   c0009031 <fp_to_double>
c00095a3:	89 c8                	mov    eax,ecx
c00095a5:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095a9:	e8 79 fa ff ff       	call   c0009027 <fp_to_int>
c00095ae:	29 d9                	sub    ecx,ebx
c00095b0:	83 ea 18             	sub    edx,0x18
c00095b3:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095b7:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095bb:	d8 e1                	fsub   st,st(1)
c00095bd:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095c1:	de c9                	fmulp  st(1),st
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	d9 c0                	fld    st(0)
c00095c7:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095cd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095d1:	de c1                	faddp  st(1),st
c00095d3:	d9 c1                	fld    st(1)
c00095d5:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095db:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095df:	de c1                	faddp  st(1),st
c00095e1:	d9 c2                	fld    st(2)
c00095e3:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095e9:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095ed:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095f1:	d9 c2                	fld    st(2)
c00095f3:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c00095f9:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00095fd:	de c1                	faddp  st(1),st
c00095ff:	d9 c3                	fld    st(3)
c0009601:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009607:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c000960b:	de c1                	faddp  st(1),st
c000960d:	d9 cc                	fxch   st(4)
c000960f:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009615:	85 c9                	test   ecx,ecx
c0009617:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c000961b:	de c1                	faddp  st(1),st
c000961d:	0f 8f 59 ff ff ff    	jg     c000957c <calc_output_hex+0x145>
c0009623:	d9 cb                	fxch   st(3)
c0009625:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009629:	dc 0c 24             	fmul   QWORD PTR [esp]
c000962c:	d9 1e                	fstp   DWORD PTR [esi]
c000962e:	d9 c9                	fxch   st(1)
c0009630:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009634:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009637:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009642:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009645:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009648:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000964c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964f:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009652:	d9 c9                	fxch   st(1)
c0009654:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009658:	dc 0c 24             	fmul   QWORD PTR [esp]
c000965b:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c000965e:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009662:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009665:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009668:	83 c4 7c             	add    esp,0x7c
c000966b:	5b                   	pop    ebx
c000966c:	5e                   	pop    esi
c000966d:	5f                   	pop    edi
c000966e:	5d                   	pop    ebp
c000966f:	c3                   	ret    

c0009670 <sinc_reset>:
c0009670:	56                   	push   esi
c0009671:	53                   	push   ebx
c0009672:	51                   	push   ecx
c0009673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009677:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000967a:	85 db                	test   ebx,ebx
c000967c:	74 51                	je     c00096cf <sinc_reset+0x5f>
c000967e:	d9 ee                	fldz   
c0009680:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009687:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000968e:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009691:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009698:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000969e:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096a1:	52                   	push   edx
c00096a2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096a5:	c1 e0 02             	shl    eax,0x2
c00096a8:	50                   	push   eax
c00096a9:	6a 00                	push   0x0
c00096ab:	56                   	push   esi
c00096ac:	e8 09 70 ff ff       	call   c00006ba <memset>
c00096b1:	83 c4 0c             	add    esp,0xc
c00096b4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096b7:	c1 e0 02             	shl    eax,0x2
c00096ba:	50                   	push   eax
c00096bb:	68 aa 00 00 00       	push   0xaa
c00096c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096c3:	8d 04 86             	lea    eax,[esi+eax*4]
c00096c6:	50                   	push   eax
c00096c7:	e8 ee 6f ff ff       	call   c00006ba <memset>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	58                   	pop    eax
c00096d0:	5b                   	pop    ebx
c00096d1:	5e                   	pop    esi
c00096d2:	c3                   	ret    

c00096d3 <calc_output_multi>:
c00096d3:	55                   	push   ebp
c00096d4:	57                   	push   edi
c00096d5:	8d 78 44             	lea    edi,[eax+0x44]
c00096d8:	56                   	push   esi
c00096d9:	89 c6                	mov    esi,eax
c00096db:	53                   	push   ebx
c00096dc:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096e2:	83 ec 4c             	sub    esp,0x4c
c00096e5:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096ed:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096f4:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00096f8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00096fc:	e8 22 f9 ff ff       	call   c0009023 <int_to_fp>
c0009701:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009705:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009709:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000970d:	99                   	cdq    
c000970e:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009716:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009719:	0f af d0             	imul   edx,eax
c000971c:	0f af c3             	imul   eax,ebx
c000971f:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009723:	29 c5                	sub    ebp,eax
c0009725:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000972c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009730:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009734:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009738:	52                   	push   edx
c0009739:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000973d:	6a 00                	push   0x0
c000973f:	57                   	push   edi
c0009740:	e8 75 6f ff ff       	call   c00006ba <memset>
c0009745:	83 c4 10             	add    esp,0x10
c0009748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000974c:	e8 e0 f8 ff ff       	call   c0009031 <fp_to_double>
c0009751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009755:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009759:	e8 c9 f8 ff ff       	call   c0009027 <fp_to_int>
c000975e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009761:	89 d9                	mov    ecx,ebx
c0009763:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009766:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000976a:	d8 e1                	fsub   st,st(1)
c000976c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009770:	de c9                	fmulp  st(1),st
c0009772:	de c1                	faddp  st(1),st
c0009774:	89 c8                	mov    eax,ecx
c0009776:	bd 08 00 00 00       	mov    ebp,0x8
c000977b:	99                   	cdq    
c000977c:	f7 fd                	idiv   ebp
c000977e:	4a                   	dec    edx
c000977f:	83 fa 06             	cmp    edx,0x6
c0009782:	77 07                	ja     c000978b <calc_output_multi+0xb8>
c0009784:	ff 24 95 c0 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf240]
c000978b:	49                   	dec    ecx
c000978c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009790:	d9 c0                	fld    st(0)
c0009792:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009799:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000979c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a0:	dc 00                	fadd   QWORD PTR [eax]
c00097a2:	dd 18                	fstp   QWORD PTR [eax]
c00097a4:	49                   	dec    ecx
c00097a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097a9:	d9 c0                	fld    st(0)
c00097ab:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b9:	dc 00                	fadd   QWORD PTR [eax]
c00097bb:	dd 18                	fstp   QWORD PTR [eax]
c00097bd:	49                   	dec    ecx
c00097be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097c2:	d9 c0                	fld    st(0)
c00097c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097cb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ce:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097d2:	dc 00                	fadd   QWORD PTR [eax]
c00097d4:	dd 18                	fstp   QWORD PTR [eax]
c00097d6:	49                   	dec    ecx
c00097d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097db:	d9 c0                	fld    st(0)
c00097dd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097e4:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097eb:	dc 00                	fadd   QWORD PTR [eax]
c00097ed:	dd 18                	fstp   QWORD PTR [eax]
c00097ef:	49                   	dec    ecx
c00097f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097f4:	d9 c0                	fld    st(0)
c00097f6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097fd:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009800:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009804:	dc 00                	fadd   QWORD PTR [eax]
c0009806:	dd 18                	fstp   QWORD PTR [eax]
c0009808:	49                   	dec    ecx
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	d9 c0                	fld    st(0)
c000980f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009816:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009819:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000981d:	dc 00                	fadd   QWORD PTR [eax]
c000981f:	dd 18                	fstp   QWORD PTR [eax]
c0009821:	49                   	dec    ecx
c0009822:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009826:	d9 c0                	fld    st(0)
c0009828:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000982f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009832:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009836:	dc 00                	fadd   QWORD PTR [eax]
c0009838:	dd 18                	fstp   QWORD PTR [eax]
c000983a:	49                   	dec    ecx
c000983b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000983f:	d9 c0                	fld    st(0)
c0009841:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009848:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000984b:	85 c9                	test   ecx,ecx
c000984d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009851:	dc 00                	fadd   QWORD PTR [eax]
c0009853:	dd 18                	fstp   QWORD PTR [eax]
c0009855:	0f 8f 19 ff ff ff    	jg     c0009774 <calc_output_multi+0xa1>
c000985b:	dd d8                	fstp   st(0)
c000985d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009861:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0009865:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009869:	0f 89 d9 fe ff ff    	jns    c0009748 <calc_output_multi+0x75>
c000986f:	89 d1                	mov    ecx,edx
c0009871:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009875:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009879:	29 c8                	sub    eax,ecx
c000987b:	99                   	cdq    
c000987c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009880:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009884:	0f af d0             	imul   edx,eax
c0009887:	40                   	inc    eax
c0009888:	01 d1                	add    ecx,edx
c000988a:	0f af c3             	imul   eax,ebx
c000988d:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009890:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009898:	50                   	push   eax
c0009899:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000989d:	6a 00                	push   0x0
c000989f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098a3:	e8 12 6e ff ff       	call   c00006ba <memset>
c00098a8:	83 c4 10             	add    esp,0x10
c00098ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098af:	e8 7d f7 ff ff       	call   c0009031 <fp_to_double>
c00098b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098bc:	e8 66 f7 ff ff       	call   c0009027 <fp_to_int>
c00098c1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098c4:	89 d9                	mov    ecx,ebx
c00098c6:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098c9:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098cd:	d8 e1                	fsub   st,st(1)
c00098cf:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098d3:	de c9                	fmulp  st(1),st
c00098d5:	de c1                	faddp  st(1),st
c00098d7:	89 c8                	mov    eax,ecx
c00098d9:	bd 08 00 00 00       	mov    ebp,0x8
c00098de:	99                   	cdq    
c00098df:	f7 fd                	idiv   ebp
c00098e1:	4a                   	dec    edx
c00098e2:	83 fa 06             	cmp    edx,0x6
c00098e5:	77 07                	ja     c00098ee <calc_output_multi+0x21b>
c00098e7:	ff 24 95 dc 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf224]
c00098ee:	49                   	dec    ecx
c00098ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098fe:	d9 c0                	fld    st(0)
c0009900:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009904:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009907:	dc 00                	fadd   QWORD PTR [eax]
c0009909:	dd 18                	fstp   QWORD PTR [eax]
c000990b:	49                   	dec    ecx
c000990c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009914:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000991b:	d9 c0                	fld    st(0)
c000991d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009921:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009924:	dc 00                	fadd   QWORD PTR [eax]
c0009926:	dd 18                	fstp   QWORD PTR [eax]
c0009928:	49                   	dec    ecx
c0009929:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000992d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009931:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009938:	d9 c0                	fld    st(0)
c000993a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000993e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009941:	dc 00                	fadd   QWORD PTR [eax]
c0009943:	dd 18                	fstp   QWORD PTR [eax]
c0009945:	49                   	dec    ecx
c0009946:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000994a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009955:	d9 c0                	fld    st(0)
c0009957:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000995b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000995e:	dc 00                	fadd   QWORD PTR [eax]
c0009960:	dd 18                	fstp   QWORD PTR [eax]
c0009962:	49                   	dec    ecx
c0009963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009967:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009972:	d9 c0                	fld    st(0)
c0009974:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009978:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000997b:	dc 00                	fadd   QWORD PTR [eax]
c000997d:	dd 18                	fstp   QWORD PTR [eax]
c000997f:	49                   	dec    ecx
c0009980:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009988:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000998f:	d9 c0                	fld    st(0)
c0009991:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009995:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009998:	dc 00                	fadd   QWORD PTR [eax]
c000999a:	dd 18                	fstp   QWORD PTR [eax]
c000999c:	49                   	dec    ecx
c000999d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099ac:	d9 c0                	fld    st(0)
c00099ae:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099b2:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099b5:	dc 00                	fadd   QWORD PTR [eax]
c00099b7:	dd 18                	fstp   QWORD PTR [eax]
c00099b9:	49                   	dec    ecx
c00099ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c2:	85 c9                	test   ecx,ecx
c00099c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099cb:	d9 c0                	fld    st(0)
c00099cd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099d1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d4:	dc 00                	fadd   QWORD PTR [eax]
c00099d6:	dd 18                	fstp   QWORD PTR [eax]
c00099d8:	0f 8f f9 fe ff ff    	jg     c00098d7 <calc_output_multi+0x204>
c00099de:	dd d8                	fstp   st(0)
c00099e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099e4:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099e8:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099ec:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099f1:	0f 8f b4 fe ff ff    	jg     c00098ab <calc_output_multi+0x1d8>
c00099f7:	b9 08 00 00 00       	mov    ecx,0x8
c00099fc:	89 d8                	mov    eax,ebx
c00099fe:	99                   	cdq    
c00099ff:	f7 f9                	idiv   ecx
c0009a01:	4a                   	dec    edx
c0009a02:	83 fa 06             	cmp    edx,0x6
c0009a05:	77 07                	ja     c0009a0e <calc_output_multi+0x33b>
c0009a07:	ff 24 95 f8 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf208]
c0009a0e:	4b                   	dec    ebx
c0009a0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a13:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a16:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a19:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a1d:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a21:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a24:	4b                   	dec    ebx
c0009a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a29:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a2c:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a2f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a33:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a37:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a3a:	4b                   	dec    ebx
c0009a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a3f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a42:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a45:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a49:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a4d:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a50:	4b                   	dec    ebx
c0009a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a55:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a58:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a5b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a5f:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a63:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a66:	4b                   	dec    ebx
c0009a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a6b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a6e:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a71:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a75:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a79:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a7c:	4b                   	dec    ebx
c0009a7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a81:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a84:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a87:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a8f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a92:	4b                   	dec    ebx
c0009a93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a97:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a9a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa1:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aa5:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa8:	4b                   	dec    ebx
c0009aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aad:	85 db                	test   ebx,ebx
c0009aaf:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009abd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac0:	0f 8f 36 ff ff ff    	jg     c00099fc <calc_output_multi+0x329>
c0009ac6:	83 c4 4c             	add    esp,0x4c
c0009ac9:	5b                   	pop    ebx
c0009aca:	5e                   	pop    esi
c0009acb:	5f                   	pop    edi
c0009acc:	5d                   	pop    ebp
c0009acd:	c3                   	ret    

c0009ace <double_to_fp>:
c0009ace:	d9 05 4c 0f 02 c0    	fld    DWORD PTR ds:0xc0020f4c
c0009ad4:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009ad8:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009adc:	e9 2f 5b 01 00       	jmp    c001f610 <lrint>

c0009ae1 <fmod_one>:
c0009ae1:	83 ec 2c             	sub    esp,0x2c
c0009ae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009aec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009af0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009af4:	83 ec 08             	sub    esp,0x8
c0009af7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009afb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009aff:	e8 0c 5b 01 00       	call   c001f610 <lrint>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b0b:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b0f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b13:	de e1                	fsubrp st(1),st
c0009b15:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b19:	d9 ee                	fldz   
c0009b1b:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b1f:	df e0                	fnstsw ax
c0009b21:	f6 c4 45             	test   ah,0x45
c0009b24:	75 0a                	jne    c0009b30 <fmod_one+0x4f>
c0009b26:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b2a:	d9 e8                	fld1   
c0009b2c:	de c1                	faddp  st(1),st
c0009b2e:	eb 04                	jmp    c0009b34 <fmod_one+0x53>
c0009b30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b34:	83 c4 2c             	add    esp,0x2c
c0009b37:	c3                   	ret    

c0009b38 <prepare_data>:
c0009b38:	55                   	push   ebp
c0009b39:	57                   	push   edi
c0009b3a:	56                   	push   esi
c0009b3b:	53                   	push   ebx
c0009b3c:	83 ec 1c             	sub    esp,0x1c
c0009b3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b47:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b4b:	0f 89 57 01 00 00    	jns    c0009ca8 <prepare_data+0x170>
c0009b51:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b54:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b57:	85 d2                	test   edx,edx
c0009b59:	75 0d                	jne    c0009b68 <prepare_data+0x30>
c0009b5b:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b5e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b61:	29 d0                	sub    eax,edx
c0009b63:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b66:	eb 44                	jmp    c0009bac <prepare_data+0x74>
c0009b68:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b6b:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b6e:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b71:	39 c1                	cmp    ecx,eax
c0009b73:	7d 04                	jge    c0009b79 <prepare_data+0x41>
c0009b75:	29 d0                	sub    eax,edx
c0009b77:	eb 2d                	jmp    c0009ba6 <prepare_data+0x6e>
c0009b79:	29 d7                	sub    edi,edx
c0009b7b:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b81:	01 f7                	add    edi,esi
c0009b83:	29 f2                	sub    edx,esi
c0009b85:	51                   	push   ecx
c0009b86:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b8d:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b90:	51                   	push   ecx
c0009b91:	52                   	push   edx
c0009b92:	50                   	push   eax
c0009b93:	e8 b4 6a ff ff       	call   c000064c <memmove>
c0009b98:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b9b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b9e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009ba1:	29 f0                	sub    eax,esi
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	29 f0                	sub    eax,esi
c0009ba8:	79 02                	jns    c0009bac <prepare_data+0x74>
c0009baa:	31 c0                	xor    eax,eax
c0009bac:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009baf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bb2:	29 ef                	sub    edi,ebp
c0009bb4:	39 c7                	cmp    edi,eax
c0009bb6:	7e 02                	jle    c0009bba <prepare_data+0x82>
c0009bb8:	89 c7                	mov    edi,eax
c0009bba:	89 f8                	mov    eax,edi
c0009bbc:	99                   	cdq    
c0009bbd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bc0:	29 d7                	sub    edi,edx
c0009bc2:	b8 15 00 00 00       	mov    eax,0x15
c0009bc7:	0f 88 dd 00 00 00    	js     c0009caa <prepare_data+0x172>
c0009bcd:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bd0:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bd3:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bd6:	0f 8f ce 00 00 00    	jg     c0009caa <prepare_data+0x172>
c0009bdc:	50                   	push   eax
c0009bdd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009be4:	50                   	push   eax
c0009be5:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009beb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf1:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bf4:	50                   	push   eax
c0009bf5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bf8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009bfc:	50                   	push   eax
c0009bfd:	e8 82 6a ff ff       	call   c0000684 <memcpy>
c0009c02:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c05:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c08:	83 c4 10             	add    esp,0x10
c0009c0b:	01 fd                	add    ebp,edi
c0009c0d:	01 f9                	add    ecx,edi
c0009c0f:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c12:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c15:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c1c:	0f 85 86 00 00 00    	jne    c0009ca8 <prepare_data+0x170>
c0009c22:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c25:	89 e8                	mov    eax,ebp
c0009c27:	29 c8                	sub    eax,ecx
c0009c29:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c2c:	39 f8                	cmp    eax,edi
c0009c2e:	7d 78                	jge    c0009ca8 <prepare_data+0x170>
c0009c30:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c34:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c38:	74 6e                	je     c0009ca8 <prepare_data+0x170>
c0009c3a:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c41:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c44:	29 ef                	sub    edi,ebp
c0009c46:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c4a:	7c 29                	jl     c0009c75 <prepare_data+0x13d>
c0009c4c:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c4f:	29 f1                	sub    ecx,esi
c0009c51:	55                   	push   ebp
c0009c52:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c59:	50                   	push   eax
c0009c5a:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c5d:	50                   	push   eax
c0009c5e:	52                   	push   edx
c0009c5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c63:	e8 e4 69 ff ff       	call   c000064c <memmove>
c0009c68:	83 c4 10             	add    esp,0x10
c0009c6b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c6e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c75:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c78:	83 c6 05             	add    esi,0x5
c0009c7b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c7e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c81:	78 07                	js     c0009c8a <prepare_data+0x152>
c0009c83:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c86:	39 cf                	cmp    edi,ecx
c0009c88:	7e 04                	jle    c0009c8e <prepare_data+0x156>
c0009c8a:	89 ce                	mov    esi,ecx
c0009c8c:	29 c6                	sub    esi,eax
c0009c8e:	51                   	push   ecx
c0009c8f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c96:	51                   	push   ecx
c0009c97:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c9a:	6a 00                	push   0x0
c0009c9c:	50                   	push   eax
c0009c9d:	e8 18 6a ff ff       	call   c00006ba <memset>
c0009ca2:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	31 c0                	xor    eax,eax
c0009caa:	83 c4 1c             	add    esp,0x1c
c0009cad:	5b                   	pop    ebx
c0009cae:	5e                   	pop    esi
c0009caf:	5f                   	pop    edi
c0009cb0:	5d                   	pop    ebp
c0009cb1:	c3                   	ret    

c0009cb2 <sinc_multichan_vari_process>:
c0009cb2:	55                   	push   ebp
c0009cb3:	b8 05 00 00 00       	mov    eax,0x5
c0009cb8:	57                   	push   edi
c0009cb9:	56                   	push   esi
c0009cba:	53                   	push   ebx
c0009cbb:	83 ec 3c             	sub    esp,0x3c
c0009cbe:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cc2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cc6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	0f 84 5b 02 00 00    	je     c0009f2c <sinc_multichan_vari_process+0x27a>
c0009cd1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cd4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cd7:	0f af d0             	imul   edx,eax
c0009cda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009cdd:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ce1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009ce8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ceb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009cf2:	dd 06                	fld    QWORD PTR [esi]
c0009cf4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009cf8:	55                   	push   ebp
c0009cf9:	55                   	push   ebp
c0009cfa:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfd:	e8 dd f2 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009d02:	89 c2                	mov    edx,eax
c0009d04:	58                   	pop    eax
c0009d05:	59                   	pop    ecx
c0009d06:	b8 16 00 00 00       	mov    eax,0x16
c0009d0b:	85 d2                	test   edx,edx
c0009d0d:	0f 85 19 02 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009d13:	d9 05 50 0f 02 c0    	fld    DWORD PTR ds:0xc0020f50
c0009d19:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d1c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d1f:	dd 06                	fld    QWORD PTR [esi]
c0009d21:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d24:	d8 d1                	fcom   st(1)
c0009d26:	df e0                	fnstsw ax
c0009d28:	9e                   	sahf   
c0009d29:	76 0f                	jbe    c0009d3a <sinc_multichan_vari_process+0x88>
c0009d2b:	dd d8                	fstp   st(0)
c0009d2d:	d9 e8                	fld1   
c0009d2f:	d8 d9                	fcomp  st(1)
c0009d31:	df e0                	fnstsw ax
c0009d33:	9e                   	sahf   
c0009d34:	77 0f                	ja     c0009d45 <sinc_multichan_vari_process+0x93>
c0009d36:	dd d8                	fstp   st(0)
c0009d38:	eb 11                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d3a:	dd d9                	fstp   st(1)
c0009d3c:	d9 e8                	fld1   
c0009d3e:	d8 d9                	fcomp  st(1)
c0009d40:	df e0                	fnstsw ax
c0009d42:	9e                   	sahf   
c0009d43:	76 04                	jbe    c0009d49 <sinc_multichan_vari_process+0x97>
c0009d45:	de f9                	fdivp  st(1),st
c0009d47:	eb 02                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d49:	dd d8                	fstp   st(0)
c0009d4b:	83 ec 10             	sub    esp,0x10
c0009d4e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d51:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d54:	e8 b7 58 01 00       	call   c001f610 <lrint>
c0009d59:	40                   	inc    eax
c0009d5a:	0f af c5             	imul   eax,ebp
c0009d5d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d64:	dd 14 24             	fst    QWORD PTR [esp]
c0009d67:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d6b:	e8 71 fd ff ff       	call   c0009ae1 <fmod_one>
c0009d70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d7a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d7e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d82:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d86:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d89:	e8 82 58 01 00       	call   c001f610 <lrint>
c0009d8e:	d9 e8                	fld1   
c0009d90:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d94:	0f af e8             	imul   ebp,eax
c0009d97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d9b:	01 e8                	add    eax,ebp
c0009d9d:	99                   	cdq    
c0009d9e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009da1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009da4:	dc 05 b8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020db8
c0009daa:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009db1:	83 c4 10             	add    esp,0x10
c0009db4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009db7:	7d 4b                	jge    c0009e04 <sinc_multichan_vari_process+0x152>
c0009db9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dbc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dbf:	01 c8                	add    eax,ecx
c0009dc1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dc4:	99                   	cdq    
c0009dc5:	f7 f9                	idiv   ecx
c0009dc7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dcb:	7d 09                	jge    c0009dd6 <sinc_multichan_vari_process+0x124>
c0009dcd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dd0:	85 c0                	test   eax,eax
c0009dd2:	79 57                	jns    c0009e2b <sinc_multichan_vari_process+0x179>
c0009dd4:	eb 70                	jmp    c0009e46 <sinc_multichan_vari_process+0x194>
c0009dd6:	51                   	push   ecx
c0009dd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009ddb:	57                   	push   edi
c0009ddc:	53                   	push   ebx
c0009ddd:	e8 56 fd ff ff       	call   c0009b38 <prepare_data>
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009de8:	85 c0                	test   eax,eax
c0009dea:	0f 85 3c 01 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009df0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009df3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009df6:	01 c8                	add    eax,ecx
c0009df8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dfb:	99                   	cdq    
c0009dfc:	f7 f9                	idiv   ecx
c0009dfe:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e02:	7c c9                	jl     c0009dcd <sinc_multichan_vari_process+0x11b>
c0009e04:	dd 04 24             	fld    QWORD PTR [esp]
c0009e07:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e0a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e0e:	dd 1e                	fstp   QWORD PTR [esi]
c0009e10:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e13:	99                   	cdq    
c0009e14:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e17:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e1a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e1d:	99                   	cdq    
c0009e1e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e21:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e24:	31 c0                	xor    eax,eax
c0009e26:	e9 01 01 00 00       	jmp    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009e2b:	dd 04 24             	fld    QWORD PTR [esp]
c0009e2e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e35:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e39:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e3d:	d9 c9                	fxch   st(1)
c0009e3f:	de d9                	fcompp 
c0009e41:	df e0                	fnstsw ax
c0009e43:	9e                   	sahf   
c0009e44:	73 be                	jae    c0009e04 <sinc_multichan_vari_process+0x152>
c0009e46:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e4a:	7e 2f                	jle    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e4c:	dd 06                	fld    QWORD PTR [esi]
c0009e4e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e51:	83 ec 10             	sub    esp,0x10
c0009e54:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e57:	e8 94 57 01 00       	call   c001f5f0 <fabs>
c0009e5c:	83 c4 10             	add    esp,0x10
c0009e5f:	dc 1d 40 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f40
c0009e65:	df e0                	fnstsw ax
c0009e67:	9e                   	sahf   
c0009e68:	76 11                	jbe    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e6a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e6d:	dc 26                	fsub   QWORD PTR [esi]
c0009e6f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e72:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e75:	dc 06                	fadd   QWORD PTR [esi]
c0009e77:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e7b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e7e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e82:	d9 e8                	fld1   
c0009e84:	d8 d9                	fcomp  st(1)
c0009e86:	df e0                	fnstsw ax
c0009e88:	9e                   	sahf   
c0009e89:	77 04                	ja     c0009e8f <sinc_multichan_vari_process+0x1dd>
c0009e8b:	dd d8                	fstp   st(0)
c0009e8d:	d9 e8                	fld1   
c0009e8f:	de c9                	fmulp  st(1),st
c0009e91:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e95:	50                   	push   eax
c0009e96:	50                   	push   eax
c0009e97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9f:	e8 2a fc ff ff       	call   c0009ace <double_to_fp>
c0009ea4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ea8:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eac:	89 c5                	mov    ebp,eax
c0009eae:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eb1:	e8 18 fc ff ff       	call   c0009ace <double_to_fp>
c0009eb6:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009eb9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ebc:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ebf:	89 c1                	mov    ecx,eax
c0009ec1:	52                   	push   edx
c0009ec2:	89 d8                	mov    eax,ebx
c0009ec4:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ec8:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ecb:	52                   	push   edx
c0009ecc:	52                   	push   edx
c0009ecd:	89 ea                	mov    edx,ebp
c0009ecf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ed2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ed5:	e8 f9 f7 ff ff       	call   c00096d3 <calc_output_multi>
c0009eda:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009edd:	d9 e8                	fld1   
c0009edf:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009ee3:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009ee6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009eea:	83 c4 10             	add    esp,0x10
c0009eed:	dd 14 24             	fst    QWORD PTR [esp]
c0009ef0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009ef4:	e8 e8 fb ff ff       	call   c0009ae1 <fmod_one>
c0009ef9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009efc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009eff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f03:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f07:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f0b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f0f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f12:	e8 f9 56 01 00       	call   c001f610 <lrint>
c0009f17:	0f af e8             	imul   ebp,eax
c0009f1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f1e:	01 e8                	add    eax,ebp
c0009f20:	99                   	cdq    
c0009f21:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f24:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f27:	e9 82 fe ff ff       	jmp    c0009dae <sinc_multichan_vari_process+0xfc>
c0009f2c:	83 c4 3c             	add    esp,0x3c
c0009f2f:	5b                   	pop    ebx
c0009f30:	5e                   	pop    esi
c0009f31:	5f                   	pop    edi
c0009f32:	5d                   	pop    ebp
c0009f33:	c3                   	ret    

c0009f34 <sinc_hex_vari_process>:
c0009f34:	55                   	push   ebp
c0009f35:	b8 05 00 00 00       	mov    eax,0x5
c0009f3a:	57                   	push   edi
c0009f3b:	56                   	push   esi
c0009f3c:	53                   	push   ebx
c0009f3d:	83 ec 3c             	sub    esp,0x3c
c0009f40:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f44:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f48:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f4b:	85 db                	test   ebx,ebx
c0009f4d:	0f 84 56 02 00 00    	je     c000a1a9 <sinc_hex_vari_process+0x275>
c0009f53:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f59:	0f af d0             	imul   edx,eax
c0009f5c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f5f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f6a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f6d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f74:	dd 06                	fld    QWORD PTR [esi]
c0009f76:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f7a:	55                   	push   ebp
c0009f7b:	55                   	push   ebp
c0009f7c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7f:	e8 5b f0 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009f84:	89 c2                	mov    edx,eax
c0009f86:	58                   	pop    eax
c0009f87:	59                   	pop    ecx
c0009f88:	b8 16 00 00 00       	mov    eax,0x16
c0009f8d:	85 d2                	test   edx,edx
c0009f8f:	0f 85 14 02 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c0009f95:	d9 05 50 0f 02 c0    	fld    DWORD PTR ds:0xc0020f50
c0009f9b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f9e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fa1:	dd 06                	fld    QWORD PTR [esi]
c0009fa3:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fa6:	d8 d1                	fcom   st(1)
c0009fa8:	df e0                	fnstsw ax
c0009faa:	9e                   	sahf   
c0009fab:	76 0f                	jbe    c0009fbc <sinc_hex_vari_process+0x88>
c0009fad:	dd d8                	fstp   st(0)
c0009faf:	d9 e8                	fld1   
c0009fb1:	d8 d9                	fcomp  st(1)
c0009fb3:	df e0                	fnstsw ax
c0009fb5:	9e                   	sahf   
c0009fb6:	77 0f                	ja     c0009fc7 <sinc_hex_vari_process+0x93>
c0009fb8:	dd d8                	fstp   st(0)
c0009fba:	eb 11                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fbc:	dd d9                	fstp   st(1)
c0009fbe:	d9 e8                	fld1   
c0009fc0:	d8 d9                	fcomp  st(1)
c0009fc2:	df e0                	fnstsw ax
c0009fc4:	9e                   	sahf   
c0009fc5:	76 04                	jbe    c0009fcb <sinc_hex_vari_process+0x97>
c0009fc7:	de f9                	fdivp  st(1),st
c0009fc9:	eb 02                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fcb:	dd d8                	fstp   st(0)
c0009fcd:	83 ec 10             	sub    esp,0x10
c0009fd0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fd3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fd6:	e8 35 56 01 00       	call   c001f610 <lrint>
c0009fdb:	40                   	inc    eax
c0009fdc:	0f af c5             	imul   eax,ebp
c0009fdf:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fe2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009fe6:	dd 14 24             	fst    QWORD PTR [esp]
c0009fe9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009fed:	e8 ef fa ff ff       	call   c0009ae1 <fmod_one>
c0009ff2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ff5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ff8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ffc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a000:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a004:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a00b:	e8 00 56 01 00       	call   c001f610 <lrint>
c000a010:	d9 e8                	fld1   
c000a012:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a016:	0f af e8             	imul   ebp,eax
c000a019:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a01d:	01 e8                	add    eax,ebp
c000a01f:	99                   	cdq    
c000a020:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a023:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a026:	dc 05 b8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020db8
c000a02c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a030:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a033:	83 c4 10             	add    esp,0x10
c000a036:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a039:	7d 4b                	jge    c000a086 <sinc_hex_vari_process+0x152>
c000a03b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a03e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a041:	01 c8                	add    eax,ecx
c000a043:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a046:	99                   	cdq    
c000a047:	f7 f9                	idiv   ecx
c000a049:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a04d:	7d 09                	jge    c000a058 <sinc_hex_vari_process+0x124>
c000a04f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a052:	85 c0                	test   eax,eax
c000a054:	79 57                	jns    c000a0ad <sinc_hex_vari_process+0x179>
c000a056:	eb 70                	jmp    c000a0c8 <sinc_hex_vari_process+0x194>
c000a058:	51                   	push   ecx
c000a059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a05d:	57                   	push   edi
c000a05e:	53                   	push   ebx
c000a05f:	e8 d4 fa ff ff       	call   c0009b38 <prepare_data>
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a06a:	85 c0                	test   eax,eax
c000a06c:	0f 85 37 01 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c000a072:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a075:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a078:	01 c8                	add    eax,ecx
c000a07a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a07d:	99                   	cdq    
c000a07e:	f7 f9                	idiv   ecx
c000a080:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a084:	7c c9                	jl     c000a04f <sinc_hex_vari_process+0x11b>
c000a086:	dd 04 24             	fld    QWORD PTR [esp]
c000a089:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a08c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a090:	dd 1e                	fstp   QWORD PTR [esi]
c000a092:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a095:	99                   	cdq    
c000a096:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a099:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a09c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a09f:	99                   	cdq    
c000a0a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0a6:	31 c0                	xor    eax,eax
c000a0a8:	e9 fc 00 00 00       	jmp    c000a1a9 <sinc_hex_vari_process+0x275>
c000a0ad:	dd 04 24             	fld    QWORD PTR [esp]
c000a0b0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0b7:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0bb:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0bf:	d9 c9                	fxch   st(1)
c000a0c1:	de d9                	fcompp 
c000a0c3:	df e0                	fnstsw ax
c000a0c5:	9e                   	sahf   
c000a0c6:	73 be                	jae    c000a086 <sinc_hex_vari_process+0x152>
c000a0c8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0cc:	7e 2f                	jle    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ce:	dd 06                	fld    QWORD PTR [esi]
c000a0d0:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0d3:	83 ec 10             	sub    esp,0x10
c000a0d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0d9:	e8 12 55 01 00       	call   c001f5f0 <fabs>
c000a0de:	83 c4 10             	add    esp,0x10
c000a0e1:	dc 1d 40 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f40
c000a0e7:	df e0                	fnstsw ax
c000a0e9:	9e                   	sahf   
c000a0ea:	76 11                	jbe    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ec:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0ef:	dc 26                	fsub   QWORD PTR [esi]
c000a0f1:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0f4:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a0f7:	dc 06                	fadd   QWORD PTR [esi]
c000a0f9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a0fd:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a100:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a104:	d9 e8                	fld1   
c000a106:	d8 d9                	fcomp  st(1)
c000a108:	df e0                	fnstsw ax
c000a10a:	9e                   	sahf   
c000a10b:	77 04                	ja     c000a111 <sinc_hex_vari_process+0x1dd>
c000a10d:	dd d8                	fstp   st(0)
c000a10f:	d9 e8                	fld1   
c000a111:	de c9                	fmulp  st(1),st
c000a113:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a117:	50                   	push   eax
c000a118:	50                   	push   eax
c000a119:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a11d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a121:	e8 a8 f9 ff ff       	call   c0009ace <double_to_fp>
c000a126:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a12a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a12e:	89 c5                	mov    ebp,eax
c000a130:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a133:	e8 96 f9 ff ff       	call   c0009ace <double_to_fp>
c000a138:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a13b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a13e:	83 c4 0c             	add    esp,0xc
c000a141:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a144:	89 c1                	mov    ecx,eax
c000a146:	52                   	push   edx
c000a147:	89 d8                	mov    eax,ebx
c000a149:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a14d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a150:	52                   	push   edx
c000a151:	52                   	push   edx
c000a152:	89 ea                	mov    edx,ebp
c000a154:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a157:	e8 db f2 ff ff       	call   c0009437 <calc_output_hex>
c000a15c:	d9 e8                	fld1   
c000a15e:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a162:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a166:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a16a:	dd 14 24             	fst    QWORD PTR [esp]
c000a16d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a171:	e8 6b f9 ff ff       	call   c0009ae1 <fmod_one>
c000a176:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a179:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a17c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a180:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a184:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a188:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a18c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a18f:	e8 7c 54 01 00       	call   c001f610 <lrint>
c000a194:	0f af e8             	imul   ebp,eax
c000a197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a19b:	01 e8                	add    eax,ebp
c000a19d:	99                   	cdq    
c000a19e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1a1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1a4:	e9 87 fe ff ff       	jmp    c000a030 <sinc_hex_vari_process+0xfc>
c000a1a9:	83 c4 3c             	add    esp,0x3c
c000a1ac:	5b                   	pop    ebx
c000a1ad:	5e                   	pop    esi
c000a1ae:	5f                   	pop    edi
c000a1af:	5d                   	pop    ebp
c000a1b0:	c3                   	ret    

c000a1b1 <sinc_quad_vari_process>:
c000a1b1:	55                   	push   ebp
c000a1b2:	b8 05 00 00 00       	mov    eax,0x5
c000a1b7:	57                   	push   edi
c000a1b8:	56                   	push   esi
c000a1b9:	53                   	push   ebx
c000a1ba:	83 ec 3c             	sub    esp,0x3c
c000a1bd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1c1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1c5:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1c8:	85 db                	test   ebx,ebx
c000a1ca:	0f 84 56 02 00 00    	je     c000a426 <sinc_quad_vari_process+0x275>
c000a1d0:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1d3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1d6:	0f af d0             	imul   edx,eax
c000a1d9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1dc:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1e7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1ea:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1f1:	dd 06                	fld    QWORD PTR [esi]
c000a1f3:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a1f7:	55                   	push   ebp
c000a1f8:	55                   	push   ebp
c000a1f9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fc:	e8 de ed ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a201:	89 c2                	mov    edx,eax
c000a203:	58                   	pop    eax
c000a204:	59                   	pop    ecx
c000a205:	b8 16 00 00 00       	mov    eax,0x16
c000a20a:	85 d2                	test   edx,edx
c000a20c:	0f 85 14 02 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a212:	d9 05 50 0f 02 c0    	fld    DWORD PTR ds:0xc0020f50
c000a218:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a21b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a21e:	dd 06                	fld    QWORD PTR [esi]
c000a220:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a223:	d8 d1                	fcom   st(1)
c000a225:	df e0                	fnstsw ax
c000a227:	9e                   	sahf   
c000a228:	76 0f                	jbe    c000a239 <sinc_quad_vari_process+0x88>
c000a22a:	dd d8                	fstp   st(0)
c000a22c:	d9 e8                	fld1   
c000a22e:	d8 d9                	fcomp  st(1)
c000a230:	df e0                	fnstsw ax
c000a232:	9e                   	sahf   
c000a233:	77 0f                	ja     c000a244 <sinc_quad_vari_process+0x93>
c000a235:	dd d8                	fstp   st(0)
c000a237:	eb 11                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a239:	dd d9                	fstp   st(1)
c000a23b:	d9 e8                	fld1   
c000a23d:	d8 d9                	fcomp  st(1)
c000a23f:	df e0                	fnstsw ax
c000a241:	9e                   	sahf   
c000a242:	76 04                	jbe    c000a248 <sinc_quad_vari_process+0x97>
c000a244:	de f9                	fdivp  st(1),st
c000a246:	eb 02                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	83 ec 10             	sub    esp,0x10
c000a24d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a250:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a253:	e8 b8 53 01 00       	call   c001f610 <lrint>
c000a258:	40                   	inc    eax
c000a259:	0f af c5             	imul   eax,ebp
c000a25c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a25f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a263:	dd 14 24             	fst    QWORD PTR [esp]
c000a266:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a26a:	e8 72 f8 ff ff       	call   c0009ae1 <fmod_one>
c000a26f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a272:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a275:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a279:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a27d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a281:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a285:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a288:	e8 83 53 01 00       	call   c001f610 <lrint>
c000a28d:	d9 e8                	fld1   
c000a28f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a293:	0f af e8             	imul   ebp,eax
c000a296:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a29a:	01 e8                	add    eax,ebp
c000a29c:	99                   	cdq    
c000a29d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2a3:	dc 05 b8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020db8
c000a2a9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2b0:	83 c4 10             	add    esp,0x10
c000a2b3:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2b6:	7d 4b                	jge    c000a303 <sinc_quad_vari_process+0x152>
c000a2b8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2bb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2be:	01 c8                	add    eax,ecx
c000a2c0:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2c3:	99                   	cdq    
c000a2c4:	f7 f9                	idiv   ecx
c000a2c6:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2ca:	7d 09                	jge    c000a2d5 <sinc_quad_vari_process+0x124>
c000a2cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2cf:	85 c0                	test   eax,eax
c000a2d1:	79 57                	jns    c000a32a <sinc_quad_vari_process+0x179>
c000a2d3:	eb 70                	jmp    c000a345 <sinc_quad_vari_process+0x194>
c000a2d5:	51                   	push   ecx
c000a2d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2da:	57                   	push   edi
c000a2db:	53                   	push   ebx
c000a2dc:	e8 57 f8 ff ff       	call   c0009b38 <prepare_data>
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2e7:	85 c0                	test   eax,eax
c000a2e9:	0f 85 37 01 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a2ef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2f5:	01 c8                	add    eax,ecx
c000a2f7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2fa:	99                   	cdq    
c000a2fb:	f7 f9                	idiv   ecx
c000a2fd:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a301:	7c c9                	jl     c000a2cc <sinc_quad_vari_process+0x11b>
c000a303:	dd 04 24             	fld    QWORD PTR [esp]
c000a306:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a309:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a30d:	dd 1e                	fstp   QWORD PTR [esi]
c000a30f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a312:	99                   	cdq    
c000a313:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a316:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a319:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a31c:	99                   	cdq    
c000a31d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a320:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a323:	31 c0                	xor    eax,eax
c000a325:	e9 fc 00 00 00       	jmp    c000a426 <sinc_quad_vari_process+0x275>
c000a32a:	dd 04 24             	fld    QWORD PTR [esp]
c000a32d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a330:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a334:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a338:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a33c:	d9 c9                	fxch   st(1)
c000a33e:	de d9                	fcompp 
c000a340:	df e0                	fnstsw ax
c000a342:	9e                   	sahf   
c000a343:	73 be                	jae    c000a303 <sinc_quad_vari_process+0x152>
c000a345:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a349:	7e 2f                	jle    c000a37a <sinc_quad_vari_process+0x1c9>
c000a34b:	dd 06                	fld    QWORD PTR [esi]
c000a34d:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a350:	83 ec 10             	sub    esp,0x10
c000a353:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a356:	e8 95 52 01 00       	call   c001f5f0 <fabs>
c000a35b:	83 c4 10             	add    esp,0x10
c000a35e:	dc 1d 40 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f40
c000a364:	df e0                	fnstsw ax
c000a366:	9e                   	sahf   
c000a367:	76 11                	jbe    c000a37a <sinc_quad_vari_process+0x1c9>
c000a369:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a36c:	dc 26                	fsub   QWORD PTR [esi]
c000a36e:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a371:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a374:	dc 06                	fadd   QWORD PTR [esi]
c000a376:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a37a:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a37d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a381:	d9 e8                	fld1   
c000a383:	d8 d9                	fcomp  st(1)
c000a385:	df e0                	fnstsw ax
c000a387:	9e                   	sahf   
c000a388:	77 04                	ja     c000a38e <sinc_quad_vari_process+0x1dd>
c000a38a:	dd d8                	fstp   st(0)
c000a38c:	d9 e8                	fld1   
c000a38e:	de c9                	fmulp  st(1),st
c000a390:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a394:	50                   	push   eax
c000a395:	50                   	push   eax
c000a396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39e:	e8 2b f7 ff ff       	call   c0009ace <double_to_fp>
c000a3a3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3a7:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3ab:	89 c5                	mov    ebp,eax
c000a3ad:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3b0:	e8 19 f7 ff ff       	call   c0009ace <double_to_fp>
c000a3b5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3b8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3bb:	83 c4 0c             	add    esp,0xc
c000a3be:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3c1:	89 c1                	mov    ecx,eax
c000a3c3:	52                   	push   edx
c000a3c4:	89 d8                	mov    eax,ebx
c000a3c6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3ca:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3cd:	52                   	push   edx
c000a3ce:	52                   	push   edx
c000a3cf:	89 ea                	mov    edx,ebp
c000a3d1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3d4:	e8 99 ee ff ff       	call   c0009272 <calc_output_quad>
c000a3d9:	d9 e8                	fld1   
c000a3db:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3df:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3e3:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3e7:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ea:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3ee:	e8 ee f6 ff ff       	call   c0009ae1 <fmod_one>
c000a3f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3f6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a3f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3fd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a401:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a405:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a409:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a40c:	e8 ff 51 01 00       	call   c001f610 <lrint>
c000a411:	0f af e8             	imul   ebp,eax
c000a414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a418:	01 e8                	add    eax,ebp
c000a41a:	99                   	cdq    
c000a41b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a41e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a421:	e9 87 fe ff ff       	jmp    c000a2ad <sinc_quad_vari_process+0xfc>
c000a426:	83 c4 3c             	add    esp,0x3c
c000a429:	5b                   	pop    ebx
c000a42a:	5e                   	pop    esi
c000a42b:	5f                   	pop    edi
c000a42c:	5d                   	pop    ebp
c000a42d:	c3                   	ret    

c000a42e <sinc_stereo_vari_process>:
c000a42e:	55                   	push   ebp
c000a42f:	b8 05 00 00 00       	mov    eax,0x5
c000a434:	57                   	push   edi
c000a435:	56                   	push   esi
c000a436:	53                   	push   ebx
c000a437:	83 ec 3c             	sub    esp,0x3c
c000a43a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a43e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a442:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a445:	85 db                	test   ebx,ebx
c000a447:	0f 84 56 02 00 00    	je     c000a6a3 <sinc_stereo_vari_process+0x275>
c000a44d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a450:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a453:	0f af d0             	imul   edx,eax
c000a456:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a459:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a45d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a464:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a467:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a46e:	dd 06                	fld    QWORD PTR [esi]
c000a470:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a474:	55                   	push   ebp
c000a475:	55                   	push   ebp
c000a476:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a479:	e8 61 eb ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a47e:	89 c2                	mov    edx,eax
c000a480:	58                   	pop    eax
c000a481:	59                   	pop    ecx
c000a482:	b8 16 00 00 00       	mov    eax,0x16
c000a487:	85 d2                	test   edx,edx
c000a489:	0f 85 14 02 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a48f:	d9 05 50 0f 02 c0    	fld    DWORD PTR ds:0xc0020f50
c000a495:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a498:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a49b:	dd 06                	fld    QWORD PTR [esi]
c000a49d:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4a0:	d8 d1                	fcom   st(1)
c000a4a2:	df e0                	fnstsw ax
c000a4a4:	9e                   	sahf   
c000a4a5:	76 0f                	jbe    c000a4b6 <sinc_stereo_vari_process+0x88>
c000a4a7:	dd d8                	fstp   st(0)
c000a4a9:	d9 e8                	fld1   
c000a4ab:	d8 d9                	fcomp  st(1)
c000a4ad:	df e0                	fnstsw ax
c000a4af:	9e                   	sahf   
c000a4b0:	77 0f                	ja     c000a4c1 <sinc_stereo_vari_process+0x93>
c000a4b2:	dd d8                	fstp   st(0)
c000a4b4:	eb 11                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4b6:	dd d9                	fstp   st(1)
c000a4b8:	d9 e8                	fld1   
c000a4ba:	d8 d9                	fcomp  st(1)
c000a4bc:	df e0                	fnstsw ax
c000a4be:	9e                   	sahf   
c000a4bf:	76 04                	jbe    c000a4c5 <sinc_stereo_vari_process+0x97>
c000a4c1:	de f9                	fdivp  st(1),st
c000a4c3:	eb 02                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4c5:	dd d8                	fstp   st(0)
c000a4c7:	83 ec 10             	sub    esp,0x10
c000a4ca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4d0:	e8 3b 51 01 00       	call   c001f610 <lrint>
c000a4d5:	40                   	inc    eax
c000a4d6:	0f af c5             	imul   eax,ebp
c000a4d9:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4e0:	dd 14 24             	fst    QWORD PTR [esp]
c000a4e3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4e7:	e8 f5 f5 ff ff       	call   c0009ae1 <fmod_one>
c000a4ec:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4ef:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4f6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a4fa:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a4fe:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a502:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a505:	e8 06 51 01 00       	call   c001f610 <lrint>
c000a50a:	d9 e8                	fld1   
c000a50c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a510:	0f af e8             	imul   ebp,eax
c000a513:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a517:	01 e8                	add    eax,ebp
c000a519:	99                   	cdq    
c000a51a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a51d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a520:	dc 05 b8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020db8
c000a526:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a52a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a52d:	83 c4 10             	add    esp,0x10
c000a530:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a533:	7d 4b                	jge    c000a580 <sinc_stereo_vari_process+0x152>
c000a535:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a538:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a53b:	01 c8                	add    eax,ecx
c000a53d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a540:	99                   	cdq    
c000a541:	f7 f9                	idiv   ecx
c000a543:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a547:	7d 09                	jge    c000a552 <sinc_stereo_vari_process+0x124>
c000a549:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a54c:	85 c0                	test   eax,eax
c000a54e:	79 57                	jns    c000a5a7 <sinc_stereo_vari_process+0x179>
c000a550:	eb 70                	jmp    c000a5c2 <sinc_stereo_vari_process+0x194>
c000a552:	51                   	push   ecx
c000a553:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a557:	57                   	push   edi
c000a558:	53                   	push   ebx
c000a559:	e8 da f5 ff ff       	call   c0009b38 <prepare_data>
c000a55e:	83 c4 10             	add    esp,0x10
c000a561:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a564:	85 c0                	test   eax,eax
c000a566:	0f 85 37 01 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a56c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a56f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a572:	01 c8                	add    eax,ecx
c000a574:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a577:	99                   	cdq    
c000a578:	f7 f9                	idiv   ecx
c000a57a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a57e:	7c c9                	jl     c000a549 <sinc_stereo_vari_process+0x11b>
c000a580:	dd 04 24             	fld    QWORD PTR [esp]
c000a583:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a586:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a58a:	dd 1e                	fstp   QWORD PTR [esi]
c000a58c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a58f:	99                   	cdq    
c000a590:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a593:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a596:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a599:	99                   	cdq    
c000a59a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a59d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5a0:	31 c0                	xor    eax,eax
c000a5a2:	e9 fc 00 00 00       	jmp    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a5a7:	dd 04 24             	fld    QWORD PTR [esp]
c000a5aa:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b1:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5b5:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5b9:	d9 c9                	fxch   st(1)
c000a5bb:	de d9                	fcompp 
c000a5bd:	df e0                	fnstsw ax
c000a5bf:	9e                   	sahf   
c000a5c0:	73 be                	jae    c000a580 <sinc_stereo_vari_process+0x152>
c000a5c2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5c6:	7e 2f                	jle    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5c8:	dd 06                	fld    QWORD PTR [esi]
c000a5ca:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5cd:	83 ec 10             	sub    esp,0x10
c000a5d0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d3:	e8 18 50 01 00       	call   c001f5f0 <fabs>
c000a5d8:	83 c4 10             	add    esp,0x10
c000a5db:	dc 1d 40 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f40
c000a5e1:	df e0                	fnstsw ax
c000a5e3:	9e                   	sahf   
c000a5e4:	76 11                	jbe    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5e6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5e9:	dc 26                	fsub   QWORD PTR [esi]
c000a5eb:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5ee:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5f1:	dc 06                	fadd   QWORD PTR [esi]
c000a5f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a5f7:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a5fa:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5fe:	d9 e8                	fld1   
c000a600:	d8 d9                	fcomp  st(1)
c000a602:	df e0                	fnstsw ax
c000a604:	9e                   	sahf   
c000a605:	77 04                	ja     c000a60b <sinc_stereo_vari_process+0x1dd>
c000a607:	dd d8                	fstp   st(0)
c000a609:	d9 e8                	fld1   
c000a60b:	de c9                	fmulp  st(1),st
c000a60d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a611:	50                   	push   eax
c000a612:	50                   	push   eax
c000a613:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a617:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a61b:	e8 ae f4 ff ff       	call   c0009ace <double_to_fp>
c000a620:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a624:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a628:	89 c5                	mov    ebp,eax
c000a62a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a62d:	e8 9c f4 ff ff       	call   c0009ace <double_to_fp>
c000a632:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a635:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a638:	83 c4 0c             	add    esp,0xc
c000a63b:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a63e:	89 c1                	mov    ecx,eax
c000a640:	52                   	push   edx
c000a641:	89 d8                	mov    eax,ebx
c000a643:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a647:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a64a:	52                   	push   edx
c000a64b:	52                   	push   edx
c000a64c:	89 ea                	mov    edx,ebp
c000a64e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a651:	e8 da ea ff ff       	call   c0009130 <calc_output_stereo>
c000a656:	d9 e8                	fld1   
c000a658:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a65c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a660:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a664:	dd 14 24             	fst    QWORD PTR [esp]
c000a667:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a66b:	e8 71 f4 ff ff       	call   c0009ae1 <fmod_one>
c000a670:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a673:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a676:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a67a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a67e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a682:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a686:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a689:	e8 82 4f 01 00       	call   c001f610 <lrint>
c000a68e:	0f af e8             	imul   ebp,eax
c000a691:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a695:	01 e8                	add    eax,ebp
c000a697:	99                   	cdq    
c000a698:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a69b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a69e:	e9 87 fe ff ff       	jmp    c000a52a <sinc_stereo_vari_process+0xfc>
c000a6a3:	83 c4 3c             	add    esp,0x3c
c000a6a6:	5b                   	pop    ebx
c000a6a7:	5e                   	pop    esi
c000a6a8:	5f                   	pop    edi
c000a6a9:	5d                   	pop    ebp
c000a6aa:	c3                   	ret    

c000a6ab <sinc_mono_vari_process>:
c000a6ab:	55                   	push   ebp
c000a6ac:	b8 05 00 00 00       	mov    eax,0x5
c000a6b1:	57                   	push   edi
c000a6b2:	56                   	push   esi
c000a6b3:	53                   	push   ebx
c000a6b4:	83 ec 3c             	sub    esp,0x3c
c000a6b7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6bb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6bf:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6c2:	85 db                	test   ebx,ebx
c000a6c4:	0f 84 55 02 00 00    	je     c000a91f <sinc_mono_vari_process+0x274>
c000a6ca:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6cd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6d0:	0f af d0             	imul   edx,eax
c000a6d3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6d6:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6e1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6e4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6eb:	dd 06                	fld    QWORD PTR [esi]
c000a6ed:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6f1:	51                   	push   ecx
c000a6f2:	51                   	push   ecx
c000a6f3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6f6:	e8 e4 e8 ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a6fb:	5d                   	pop    ebp
c000a6fc:	89 c2                	mov    edx,eax
c000a6fe:	58                   	pop    eax
c000a6ff:	85 d2                	test   edx,edx
c000a701:	b8 16 00 00 00       	mov    eax,0x16
c000a706:	0f 85 13 02 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a70c:	d9 05 50 0f 02 c0    	fld    DWORD PTR ds:0xc0020f50
c000a712:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a715:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a718:	dd 06                	fld    QWORD PTR [esi]
c000a71a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a71d:	d8 d1                	fcom   st(1)
c000a71f:	df e0                	fnstsw ax
c000a721:	9e                   	sahf   
c000a722:	76 0f                	jbe    c000a733 <sinc_mono_vari_process+0x88>
c000a724:	dd d8                	fstp   st(0)
c000a726:	d9 e8                	fld1   
c000a728:	d8 d9                	fcomp  st(1)
c000a72a:	df e0                	fnstsw ax
c000a72c:	9e                   	sahf   
c000a72d:	77 0f                	ja     c000a73e <sinc_mono_vari_process+0x93>
c000a72f:	dd d8                	fstp   st(0)
c000a731:	eb 11                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a733:	dd d9                	fstp   st(1)
c000a735:	d9 e8                	fld1   
c000a737:	d8 d9                	fcomp  st(1)
c000a739:	df e0                	fnstsw ax
c000a73b:	9e                   	sahf   
c000a73c:	76 04                	jbe    c000a742 <sinc_mono_vari_process+0x97>
c000a73e:	de f9                	fdivp  st(1),st
c000a740:	eb 02                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a742:	dd d8                	fstp   st(0)
c000a744:	83 ec 10             	sub    esp,0x10
c000a747:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a74a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a74d:	e8 be 4e 01 00       	call   c001f610 <lrint>
c000a752:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a755:	40                   	inc    eax
c000a756:	dd 14 24             	fst    QWORD PTR [esp]
c000a759:	0f af e8             	imul   ebp,eax
c000a75c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a760:	e8 7c f3 ff ff       	call   c0009ae1 <fmod_one>
c000a765:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a768:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a76c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a76f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a773:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a777:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a77b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a77f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a782:	e8 89 4e 01 00       	call   c001f610 <lrint>
c000a787:	d9 e8                	fld1   
c000a789:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a78d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a792:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a796:	99                   	cdq    
c000a797:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a79a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a79d:	dc 05 b8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020db8
c000a7a3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7aa:	83 c4 10             	add    esp,0x10
c000a7ad:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7b0:	7d 44                	jge    c000a7f6 <sinc_mono_vari_process+0x14b>
c000a7b2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7b8:	01 c8                	add    eax,ecx
c000a7ba:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7bd:	99                   	cdq    
c000a7be:	f7 f9                	idiv   ecx
c000a7c0:	39 d5                	cmp    ebp,edx
c000a7c2:	7d 09                	jge    c000a7cd <sinc_mono_vari_process+0x122>
c000a7c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7c7:	85 c0                	test   eax,eax
c000a7c9:	79 52                	jns    c000a81d <sinc_mono_vari_process+0x172>
c000a7cb:	eb 6b                	jmp    c000a838 <sinc_mono_vari_process+0x18d>
c000a7cd:	52                   	push   edx
c000a7ce:	55                   	push   ebp
c000a7cf:	57                   	push   edi
c000a7d0:	53                   	push   ebx
c000a7d1:	e8 62 f3 ff ff       	call   c0009b38 <prepare_data>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7dc:	85 c0                	test   eax,eax
c000a7de:	0f 85 3b 01 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a7e4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7e7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7ea:	01 c8                	add    eax,ecx
c000a7ec:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7ef:	99                   	cdq    
c000a7f0:	f7 f9                	idiv   ecx
c000a7f2:	39 d5                	cmp    ebp,edx
c000a7f4:	7c ce                	jl     c000a7c4 <sinc_mono_vari_process+0x119>
c000a7f6:	dd 04 24             	fld    QWORD PTR [esp]
c000a7f9:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a7fc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a800:	dd 1e                	fstp   QWORD PTR [esi]
c000a802:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a805:	99                   	cdq    
c000a806:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a809:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a80c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a80f:	99                   	cdq    
c000a810:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a813:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a816:	31 c0                	xor    eax,eax
c000a818:	e9 02 01 00 00       	jmp    c000a91f <sinc_mono_vari_process+0x274>
c000a81d:	dd 04 24             	fld    QWORD PTR [esp]
c000a820:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a823:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a827:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a82b:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a82f:	d9 c9                	fxch   st(1)
c000a831:	de d9                	fcompp 
c000a833:	df e0                	fnstsw ax
c000a835:	9e                   	sahf   
c000a836:	77 be                	ja     c000a7f6 <sinc_mono_vari_process+0x14b>
c000a838:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a83c:	7e 2f                	jle    c000a86d <sinc_mono_vari_process+0x1c2>
c000a83e:	dd 06                	fld    QWORD PTR [esi]
c000a840:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a843:	83 ec 10             	sub    esp,0x10
c000a846:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a849:	e8 a2 4d 01 00       	call   c001f5f0 <fabs>
c000a84e:	83 c4 10             	add    esp,0x10
c000a851:	dc 1d 40 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f40
c000a857:	df e0                	fnstsw ax
c000a859:	9e                   	sahf   
c000a85a:	76 11                	jbe    c000a86d <sinc_mono_vari_process+0x1c2>
c000a85c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a85f:	dc 26                	fsub   QWORD PTR [esi]
c000a861:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a864:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a867:	dc 06                	fadd   QWORD PTR [esi]
c000a869:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a86d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a870:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a874:	d9 e8                	fld1   
c000a876:	d8 d9                	fcomp  st(1)
c000a878:	df e0                	fnstsw ax
c000a87a:	9e                   	sahf   
c000a87b:	77 04                	ja     c000a881 <sinc_mono_vari_process+0x1d6>
c000a87d:	dd d8                	fstp   st(0)
c000a87f:	d9 e8                	fld1   
c000a881:	de c9                	fmulp  st(1),st
c000a883:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a887:	50                   	push   eax
c000a888:	50                   	push   eax
c000a889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a891:	e8 38 f2 ff ff       	call   c0009ace <double_to_fp>
c000a896:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a89a:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a89e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8a2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8a5:	e8 24 f2 ff ff       	call   c0009ace <double_to_fp>
c000a8aa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8ae:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8b2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8b5:	89 c1                	mov    ecx,eax
c000a8b7:	89 d8                	mov    eax,ebx
c000a8b9:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8bd:	e8 89 e7 ff ff       	call   c000904b <calc_output_single>
c000a8c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8c5:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8c9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8cc:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8cf:	d9 e8                	fld1   
c000a8d1:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8d5:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8d8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8dc:	dd 14 24             	fst    QWORD PTR [esp]
c000a8df:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8e3:	e8 f9 f1 ff ff       	call   c0009ae1 <fmod_one>
c000a8e8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8ef:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8f2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8f6:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a8fa:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a8fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a902:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a905:	e8 06 4d 01 00       	call   c001f610 <lrint>
c000a90a:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a90f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a913:	99                   	cdq    
c000a914:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a917:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a91a:	e9 88 fe ff ff       	jmp    c000a7a7 <sinc_mono_vari_process+0xfc>
c000a91f:	83 c4 3c             	add    esp,0x3c
c000a922:	5b                   	pop    ebx
c000a923:	5e                   	pop    esi
c000a924:	5f                   	pop    edi
c000a925:	5d                   	pop    ebp
c000a926:	c3                   	ret    

c000a927 <sinc_get_name>:
c000a927:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a92b:	31 c0                	xor    eax,eax
c000a92d:	83 fa 02             	cmp    edx,0x2
c000a930:	77 07                	ja     c000a939 <sinc_get_name+0x12>
c000a932:	8b 04 95 20 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1e0]
c000a939:	c3                   	ret    

c000a93a <sinc_get_description>:
c000a93a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a93e:	31 c0                	xor    eax,eax
c000a940:	83 fa 02             	cmp    edx,0x2
c000a943:	77 07                	ja     c000a94c <sinc_get_description+0x12>
c000a945:	8b 04 95 14 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1ec]
c000a94c:	c3                   	ret    

c000a94d <sinc_set_converter>:
c000a94d:	53                   	push   ebx
c000a94e:	81 ec 58 08 00 00    	sub    esp,0x858
c000a954:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a95b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a95e:	85 c0                	test   eax,eax
c000a960:	74 13                	je     c000a975 <sinc_set_converter+0x28>
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	50                   	push   eax
c000a966:	e8 90 16 00 00       	call   c000bffb <free>
c000a96b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a972:	83 c4 10             	add    esp,0x10
c000a975:	50                   	push   eax
c000a976:	68 44 08 00 00       	push   0x844
c000a97b:	6a 00                	push   0x0
c000a97d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a981:	50                   	push   eax
c000a982:	e8 33 5d ff ff       	call   c00006ba <memset>
c000a987:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a98a:	83 c4 10             	add    esp,0x10
c000a98d:	b8 0b 00 00 00       	mov    eax,0xb
c000a992:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a998:	7f 6e                	jg     c000aa08 <sinc_set_converter+0xbb>
c000a99a:	83 fa 01             	cmp    edx,0x1
c000a99d:	75 10                	jne    c000a9af <sinc_set_converter+0x62>
c000a99f:	c7 43 24 ab a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6ab
c000a9a6:	c7 43 20 ab a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6ab
c000a9ad:	eb 4d                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9af:	83 fa 02             	cmp    edx,0x2
c000a9b2:	75 10                	jne    c000a9c4 <sinc_set_converter+0x77>
c000a9b4:	c7 43 24 2e a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a42e
c000a9bb:	c7 43 20 2e a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a42e
c000a9c2:	eb 38                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9c4:	83 fa 04             	cmp    edx,0x4
c000a9c7:	75 10                	jne    c000a9d9 <sinc_set_converter+0x8c>
c000a9c9:	c7 43 24 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1b1
c000a9d0:	c7 43 20 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1b1
c000a9d7:	eb 23                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9d9:	83 fa 06             	cmp    edx,0x6
c000a9dc:	75 10                	jne    c000a9ee <sinc_set_converter+0xa1>
c000a9de:	c7 43 24 34 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f34
c000a9e5:	c7 43 20 34 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f34
c000a9ec:	eb 0e                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9ee:	c7 43 24 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cb2
c000a9f5:	c7 43 20 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cb2
c000a9fc:	c7 43 28 70 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009670
c000aa03:	b8 0a 00 00 00       	mov    eax,0xa
c000aa08:	81 c4 58 08 00 00    	add    esp,0x858
c000aa0e:	5b                   	pop    ebx
c000aa0f:	c3                   	ret    

c000aa10 <is_bad_src_ratio>:
c000aa10:	83 ec 0c             	sub    esp,0xc
c000aa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa17:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa22:	dd 04 24             	fld    QWORD PTR [esp]
c000aa25:	dd 05 40 0d 02 c0    	fld    QWORD PTR ds:0xc0020d40
c000aa2b:	de d9                	fcompp 
c000aa2d:	df e0                	fnstsw ax
c000aa2f:	f6 c4 45             	test   ah,0x45
c000aa32:	74 10                	je     c000aa44 <is_bad_src_ratio+0x34>
c000aa34:	dd 04 24             	fld    QWORD PTR [esp]
c000aa37:	dc 1d 48 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d48
c000aa3d:	df e0                	fnstsw ax
c000aa3f:	f6 c4 45             	test   ah,0x45
c000aa42:	75 07                	jne    c000aa4b <is_bad_src_ratio+0x3b>
c000aa44:	b8 01 00 00 00       	mov    eax,0x1
c000aa49:	eb 05                	jmp    c000aa50 <is_bad_src_ratio+0x40>
c000aa4b:	b8 00 00 00 00       	mov    eax,0x0
c000aa50:	83 c4 0c             	add    esp,0xc
c000aa53:	c3                   	ret    

c000aa54 <fmod_one>:
c000aa54:	83 ec 2c             	sub    esp,0x2c
c000aa57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa67:	83 ec 08             	sub    esp,0x8
c000aa6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa72:	e8 99 4b 01 00       	call   c001f610 <lrint>
c000aa77:	83 c4 10             	add    esp,0x10
c000aa7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa7e:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa82:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa86:	de e1                	fsubrp st(1),st
c000aa88:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa8c:	d9 ee                	fldz   
c000aa8e:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa92:	df e0                	fnstsw ax
c000aa94:	f6 c4 45             	test   ah,0x45
c000aa97:	75 0a                	jne    c000aaa3 <fmod_one+0x4f>
c000aa99:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa9d:	d9 e8                	fld1   
c000aa9f:	de c1                	faddp  st(1),st
c000aaa1:	eb 04                	jmp    c000aaa7 <fmod_one+0x53>
c000aaa3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa7:	83 c4 2c             	add    esp,0x2c
c000aaaa:	c3                   	ret    

c000aaab <zoh_vari_process>:
c000aaab:	55                   	push   ebp
c000aaac:	57                   	push   edi
c000aaad:	56                   	push   esi
c000aaae:	53                   	push   ebx
c000aaaf:	83 ec 2c             	sub    esp,0x2c
c000aab2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aab6:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aaba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aac2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aac6:	0f 8e 30 02 00 00    	jle    c000acfc <zoh_vari_process+0x251>
c000aacc:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aacf:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aad7:	85 db                	test   ebx,ebx
c000aad9:	0f 84 1d 02 00 00    	je     c000acfc <zoh_vari_process+0x251>
c000aadf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aae2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aae6:	74 19                	je     c000ab01 <zoh_vari_process+0x56>
c000aae8:	31 d2                	xor    edx,edx
c000aaea:	39 c2                	cmp    edx,eax
c000aaec:	7d 0c                	jge    c000aafa <zoh_vari_process+0x4f>
c000aaee:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aaf0:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aaf3:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aaf7:	42                   	inc    edx
c000aaf8:	eb f0                	jmp    c000aaea <zoh_vari_process+0x3f>
c000aafa:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab01:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab04:	0f af d0             	imul   edx,eax
c000ab07:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab0a:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab0e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab15:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab18:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab1f:	dd 07                	fld    QWORD PTR [edi]
c000ab21:	dd 14 24             	fst    QWORD PTR [esp]
c000ab24:	50                   	push   eax
c000ab25:	50                   	push   eax
c000ab26:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab29:	e8 e2 fe ff ff       	call   c000aa10 <is_bad_src_ratio>
c000ab2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab32:	5a                   	pop    edx
c000ab33:	59                   	pop    ecx
c000ab34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab39:	0f 85 b5 01 00 00    	jne    c000acf4 <zoh_vari_process+0x249>
c000ab3f:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab42:	d9 e8                	fld1   
c000ab44:	d8 d1                	fcom   st(1)
c000ab46:	df e0                	fnstsw ax
c000ab48:	9e                   	sahf   
c000ab49:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab4d:	0f 86 83 00 00 00    	jbe    c000abd6 <zoh_vari_process+0x12b>
c000ab53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab56:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab59:	7d 7b                	jge    c000abd6 <zoh_vari_process+0x12b>
c000ab5b:	d9 c0                	fld    st(0)
c000ab5d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab60:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab63:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab66:	df e0                	fnstsw ax
c000ab68:	9e                   	sahf   
c000ab69:	73 6b                	jae    c000abd6 <zoh_vari_process+0x12b>
c000ab6b:	85 d2                	test   edx,edx
c000ab6d:	7e 36                	jle    c000aba5 <zoh_vari_process+0xfa>
c000ab6f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab73:	dd 07                	fld    QWORD PTR [edi]
c000ab75:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab78:	83 ec 10             	sub    esp,0x10
c000ab7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab7e:	e8 6d 4a 01 00       	call   c001f5f0 <fabs>
c000ab83:	83 c4 10             	add    esp,0x10
c000ab86:	dc 1d b8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020db8
c000ab8c:	df e0                	fnstsw ax
c000ab8e:	9e                   	sahf   
c000ab8f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab93:	76 10                	jbe    c000aba5 <zoh_vari_process+0xfa>
c000ab95:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab98:	dc 27                	fsub   QWORD PTR [edi]
c000ab9a:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab9d:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aba0:	dc 07                	fadd   QWORD PTR [edi]
c000aba2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aba5:	31 c0                	xor    eax,eax
c000aba7:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abaa:	7e 13                	jle    c000abbf <zoh_vari_process+0x114>
c000abac:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abb0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abb3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abb6:	40                   	inc    eax
c000abb7:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abba:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abbd:	eb e8                	jmp    c000aba7 <zoh_vari_process+0xfc>
c000abbf:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abc3:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abc6:	de c1                	faddp  st(1),st
c000abc8:	e9 75 ff ff ff       	jmp    c000ab42 <zoh_vari_process+0x97>
c000abcd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abd1:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abd4:	de c1                	faddp  st(1),st
c000abd6:	83 ec 10             	sub    esp,0x10
c000abd9:	dd 14 24             	fst    QWORD PTR [esp]
c000abdc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abe0:	e8 6f fe ff ff       	call   c000aa54 <fmod_one>
c000abe5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abe8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abec:	d8 e1                	fsub   st,st(1)
c000abee:	d9 c9                	fxch   st(1)
c000abf0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abf4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf7:	e8 14 4a 01 00       	call   c001f610 <lrint>
c000abfc:	83 c4 10             	add    esp,0x10
c000abff:	0f af e8             	imul   ebp,eax
c000ac02:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac05:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac08:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac0c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac0f:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac12:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac15:	0f 8d 80 00 00 00    	jge    c000ac9b <zoh_vari_process+0x1f0>
c000ac1b:	d9 c0                	fld    st(0)
c000ac1d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac20:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac24:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac28:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac2c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac30:	de d9                	fcompp 
c000ac32:	df e0                	fnstsw ax
c000ac34:	9e                   	sahf   
c000ac35:	72 64                	jb     c000ac9b <zoh_vari_process+0x1f0>
c000ac37:	85 d2                	test   edx,edx
c000ac39:	7e 36                	jle    c000ac71 <zoh_vari_process+0x1c6>
c000ac3b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac3f:	dd 07                	fld    QWORD PTR [edi]
c000ac41:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac44:	83 ec 10             	sub    esp,0x10
c000ac47:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac4a:	e8 a1 49 01 00       	call   c001f5f0 <fabs>
c000ac4f:	83 c4 10             	add    esp,0x10
c000ac52:	dc 1d b8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020db8
c000ac58:	df e0                	fnstsw ax
c000ac5a:	9e                   	sahf   
c000ac5b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac5f:	76 10                	jbe    c000ac71 <zoh_vari_process+0x1c6>
c000ac61:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac64:	dc 27                	fsub   QWORD PTR [edi]
c000ac66:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac69:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac6c:	dc 07                	fadd   QWORD PTR [edi]
c000ac6e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac71:	31 d2                	xor    edx,edx
c000ac73:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac76:	39 d0                	cmp    eax,edx
c000ac78:	0f 8e 4f ff ff ff    	jle    c000abcd <zoh_vari_process+0x122>
c000ac7e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac81:	29 c1                	sub    ecx,eax
c000ac83:	89 c8                	mov    eax,ecx
c000ac85:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac87:	01 d0                	add    eax,edx
c000ac89:	42                   	inc    edx
c000ac8a:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac8d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac93:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac96:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac99:	eb d8                	jmp    c000ac73 <zoh_vari_process+0x1c8>
c000ac9b:	39 e9                	cmp    ecx,ebp
c000ac9d:	7d 13                	jge    c000acb2 <zoh_vari_process+0x207>
c000ac9f:	89 e8                	mov    eax,ebp
c000aca1:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000aca4:	29 c8                	sub    eax,ecx
c000aca6:	99                   	cdq    
c000aca7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acae:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acb2:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acb5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acb8:	85 c0                	test   eax,eax
c000acba:	7f 1b                	jg     c000acd7 <zoh_vari_process+0x22c>
c000acbc:	dd 04 24             	fld    QWORD PTR [esp]
c000acbf:	dd 1f                	fstp   QWORD PTR [edi]
c000acc1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acc4:	99                   	cdq    
c000acc5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acc8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000accb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acce:	99                   	cdq    
c000accf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acd2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acd5:	eb 25                	jmp    c000acfc <zoh_vari_process+0x251>
c000acd7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000acda:	31 d2                	xor    edx,edx
c000acdc:	29 e8                	sub    eax,ebp
c000acde:	c1 e0 02             	shl    eax,0x2
c000ace1:	39 d5                	cmp    ebp,edx
c000ace3:	7e d7                	jle    c000acbc <zoh_vari_process+0x211>
c000ace5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ace7:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acea:	83 c0 04             	add    eax,0x4
c000aced:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acf1:	42                   	inc    edx
c000acf2:	eb ed                	jmp    c000ace1 <zoh_vari_process+0x236>
c000acf4:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000acfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad00:	83 c4 2c             	add    esp,0x2c
c000ad03:	5b                   	pop    ebx
c000ad04:	5e                   	pop    esi
c000ad05:	5f                   	pop    edi
c000ad06:	5d                   	pop    ebp
c000ad07:	c3                   	ret    

c000ad08 <zoh_reset>:
c000ad08:	83 ec 0c             	sub    esp,0xc
c000ad0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad12:	85 c0                	test   eax,eax
c000ad14:	74 20                	je     c000ad36 <zoh_reset+0x2e>
c000ad16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad23:	51                   	push   ecx
c000ad24:	c1 e2 02             	shl    edx,0x2
c000ad27:	83 c0 1c             	add    eax,0x1c
c000ad2a:	52                   	push   edx
c000ad2b:	6a 00                	push   0x0
c000ad2d:	50                   	push   eax
c000ad2e:	e8 87 59 ff ff       	call   c00006ba <memset>
c000ad33:	83 c4 10             	add    esp,0x10
c000ad36:	83 c4 0c             	add    esp,0xc
c000ad39:	c3                   	ret    

c000ad3a <zoh_get_name>:
c000ad3a:	31 c0                	xor    eax,eax
c000ad3c:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad41:	75 05                	jne    c000ad48 <zoh_get_name+0xe>
c000ad43:	b8 54 0f 02 c0       	mov    eax,0xc0020f54
c000ad48:	c3                   	ret    

c000ad49 <zoh_get_description>:
c000ad49:	31 c0                	xor    eax,eax
c000ad4b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad50:	75 05                	jne    c000ad57 <zoh_get_description+0xe>
c000ad52:	b8 65 0f 02 c0       	mov    eax,0xc0020f65
c000ad57:	c3                   	ret    

c000ad58 <zoh_set_converter>:
c000ad58:	53                   	push   ebx
c000ad59:	b8 0a 00 00 00       	mov    eax,0xa
c000ad5e:	83 ec 08             	sub    esp,0x8
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad6a:	75 6e                	jne    c000adda <zoh_set_converter+0x82>
c000ad6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad6f:	85 c0                	test   eax,eax
c000ad71:	74 13                	je     c000ad86 <zoh_set_converter+0x2e>
c000ad73:	83 ec 0c             	sub    esp,0xc
c000ad76:	50                   	push   eax
c000ad77:	e8 7f 12 00 00       	call   c000bffb <free>
c000ad7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad83:	83 c4 10             	add    esp,0x10
c000ad86:	50                   	push   eax
c000ad87:	50                   	push   eax
c000ad88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad92:	50                   	push   eax
c000ad93:	6a 01                	push   0x1
c000ad95:	e8 81 12 00 00       	call   c000c01b <calloc>
c000ad9a:	89 c2                	mov    edx,eax
c000ad9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad9f:	83 c4 10             	add    esp,0x10
c000ada2:	b8 01 00 00 00       	mov    eax,0x1
c000ada7:	85 d2                	test   edx,edx
c000ada9:	74 2f                	je     c000adda <zoh_set_converter+0x82>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adb4:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adba:	c7 43 24 ab aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aaab
c000adc1:	c7 43 20 ab aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aaab
c000adc8:	c7 43 28 08 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad08
c000adcf:	53                   	push   ebx
c000add0:	e8 33 ff ff ff       	call   c000ad08 <zoh_reset>
c000add5:	83 c4 10             	add    esp,0x10
c000add8:	31 c0                	xor    eax,eax
c000adda:	83 c4 08             	add    esp,0x8
c000addd:	5b                   	pop    ebx
c000adde:	c3                   	ret    
c000addf:	90                   	nop

c000ade0 <Computer::close(int, int, void*)>:
c000ade0:	57                   	push   edi
c000ade1:	56                   	push   esi
c000ade2:	53                   	push   ebx
c000ade3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ade7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adeb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000adef:	83 ec 0c             	sub    esp,0xc
c000adf2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000adf8:	e8 e7 58 00 00       	call   c00106e4 <Device::closeAll()>
c000adfd:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae08:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae0c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae14:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae1c:	5b                   	pop    ebx
c000ae1d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae20:	5e                   	pop    esi
c000ae21:	5f                   	pop    edi
c000ae22:	ff e0                	jmp    eax

c000ae24 <Computer::Computer()>:
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae2b:	83 ec 08             	sub    esp,0x8
c000ae2e:	68 9c 0f 02 c0       	push   0xc0020f9c
c000ae33:	50                   	push   eax
c000ae34:	e8 25 59 00 00       	call   c001075e <Device::Device(char const*)>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	ba 64 11 02 c0       	mov    edx,0xc0021164
c000ae41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae45:	89 10                	mov    DWORD PTR [eax],edx
c000ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae59:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae6d:	83 ca 04             	or     edx,0x4
c000ae70:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae80:	0f b6 d0             	movzx  edx,al
c000ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae87:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae98:	0f b6 d0             	movzx  edx,al
c000ae9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeae:	8d 50 01             	lea    edx,[eax+0x1]
c000aeb1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeb5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aebb:	0f b6 d0             	movzx  edx,al
c000aebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aec6:	83 e1 3f             	and    ecx,0x3f
c000aec9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aed7:	0f b6 d0             	movzx  edx,al
c000aeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aede:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeef:	0f b6 d0             	movzx  edx,al
c000aef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af05:	8d 50 01             	lea    edx,[eax+0x1]
c000af08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af0c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af12:	0f b6 d0             	movzx  edx,al
c000af15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af19:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af1d:	83 e1 3f             	and    ecx,0x3f
c000af20:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af2e:	0f b6 d0             	movzx  edx,al
c000af31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af35:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af46:	0f b6 d0             	movzx  edx,al
c000af49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af5c:	8d 50 01             	lea    edx,[eax+0x1]
c000af5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af63:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af69:	0f b6 d0             	movzx  edx,al
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af74:	83 e1 3f             	and    ecx,0x3f
c000af77:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af7b:	90                   	nop
c000af7c:	83 c4 0c             	add    esp,0xc
c000af7f:	c3                   	ret    

c000af80 <Computer::setBootMessage(char const*)>:
c000af80:	c3                   	ret    
c000af81:	90                   	nop

c000af82 <Computer::start()>:
c000af82:	56                   	push   esi
c000af83:	53                   	push   ebx
c000af84:	50                   	push   eax
c000af85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af89:	e8 a7 d9 00 00       	call   c0018935 <lockScheduler()>
c000af8e:	e8 eb dc 00 00       	call   c0018c7e <schedule()>
c000af93:	e8 9f d9 00 00       	call   c0018937 <unlockScheduler()>
c000af98:	fb                   	sti    
c000af99:	83 ec 0c             	sub    esp,0xc
c000af9c:	68 3b 07 00 00       	push   0x73b
c000afa1:	e8 7e 40 00 00       	call   c000f024 <operator new(unsigned long)>
c000afa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afad:	89 c6                	mov    esi,eax
c000afaf:	ff 35 d4 59 02 c0    	push   DWORD PTR ds:0xc00259d4
c000afb5:	68 a5 0f 02 c0       	push   0xc0020fa5
c000afba:	6a 01                	push   0x1
c000afbc:	50                   	push   eax
c000afbd:	e8 ca d7 00 00       	call   c001878c <Process::Process(bool, char const*, Process*, char**)>
c000afc2:	83 c4 20             	add    esp,0x20
c000afc5:	68 ff 00 00 00       	push   0xff
c000afca:	6a 00                	push   0x0
c000afcc:	68 79 b9 00 c0       	push   0xc000b979
c000afd1:	56                   	push   esi
c000afd2:	e8 93 da 00 00       	call   c0018a6a <Process::createThread(void (*)(void*), void*, int)>
c000afd7:	6a 7a                	push   0x7a
c000afd9:	6a 00                	push   0x0
c000afdb:	68 af 92 01 c0       	push   0xc00192af
c000afe0:	ff 35 d4 59 02 c0    	push   DWORD PTR ds:0xc00259d4
c000afe6:	e8 7f da 00 00       	call   c0018a6a <Process::createThread(void (*)(void*), void*, int)>
c000afeb:	83 c4 20             	add    esp,0x20
c000afee:	a3 88 59 02 c0       	mov    ds:0xc0025988,eax
c000aff3:	c6 05 8d 45 02 c0 01 	mov    BYTE PTR ds:0xc002458d,0x1
c000affa:	e8 bd 44 00 00       	call   c000f4bc <initVFS()>
c000afff:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b005:	8b 10                	mov    edx,DWORD PTR [eax]
c000b007:	6a 00                	push   0x0
c000b009:	6a 00                	push   0x0
c000b00b:	6a 00                	push   0x0
c000b00d:	50                   	push   eax
c000b00e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b011:	e8 6e c1 00 00       	call   c0017184 <setupSystemCalls()>
c000b016:	e8 9f 4f 00 00       	call   c000ffba <loadClockSettings()>
c000b01b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b01e:	e8 95 56 00 00       	call   c00106b8 <Device::loadDriversForAll()>
c000b023:	5a                   	pop    edx
c000b024:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c000b02a:	59                   	pop    ecx
c000b02b:	6a 01                	push   0x1
c000b02d:	68 b2 0f 02 c0       	push   0xc0020fb2
c000b032:	e8 19 d3 00 00       	call   c0018350 <Thr::loadDLL(char const*, bool)>
c000b037:	5e                   	pop    esi
c000b038:	5a                   	pop    edx
c000b039:	53                   	push   ebx
c000b03a:	50                   	push   eax
c000b03b:	e8 d6 d4 00 00       	call   c0018516 <Thr::executeDLL(unsigned long, void*)>
c000b040:	c7 04 24 28 21 02 c0 	mov    DWORD PTR [esp],0xc0022128
c000b047:	e8 0d 41 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b04c:	83 c4 10             	add    esp,0x10
c000b04f:	83 ec 0c             	sub    esp,0xc
c000b052:	6a 02                	push   0x2
c000b054:	e8 7e dd 00 00       	call   c0018dd7 <blockTask(TaskState)>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	eb f1                	jmp    c000b04f <Computer::start()+0xcd>

c000b05e <firstTask()>:
c000b05e:	83 ec 18             	sub    esp,0x18
c000b061:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c000b067:	e8 16 ff ff ff       	call   c000af82 <Computer::start()>

c000b06c <Computer::detectFeatures()>:
c000b06c:	55                   	push   ebp
c000b06d:	57                   	push   edi
c000b06e:	56                   	push   esi
c000b06f:	53                   	push   ebx
c000b070:	83 ec 1c             	sub    esp,0x1c
c000b073:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b077:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b081:	e8 eb 52 ff ff       	call   c0000371 <detectCPUID>
c000b086:	85 c0                	test   eax,eax
c000b088:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b08e:	0f 95 c2             	setne  dl
c000b091:	83 e0 fd             	and    eax,0xfffffffd
c000b094:	d1 e2                	shl    edx,1
c000b096:	09 d0                	or     eax,edx
c000b098:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b09e:	a8 02                	test   al,0x2
c000b0a0:	75 46                	jne    c000b0e8 <Computer::detectFeatures()+0x7c>
c000b0a2:	f6 05 a1 45 02 c0 04 	test   BYTE PTR ds:0xc00245a1,0x4
c000b0a9:	74 07                	je     c000b0b2 <Computer::detectFeatures()+0x46>
c000b0ab:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b0b2:	e8 df 3f 01 00       	call   c001f096 <x87Detect>
c000b0b7:	83 e0 01             	and    eax,0x1
c000b0ba:	c1 e0 04             	shl    eax,0x4
c000b0bd:	88 c2                	mov    dl,al
c000b0bf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0c5:	83 e0 ef             	and    eax,0xffffffef
c000b0c8:	09 d0                	or     eax,edx
c000b0ca:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0d0:	a8 10                	test   al,0x10
c000b0d2:	0f 85 10 01 00 00    	jne    c000b1e8 <Computer::detectFeatures()+0x17c>
c000b0d8:	84 c0                	test   al,al
c000b0da:	0f 88 2b 01 00 00    	js     c000b20b <Computer::detectFeatures()+0x19f>
c000b0e0:	83 c4 1c             	add    esp,0x1c
c000b0e3:	5b                   	pop    ebx
c000b0e4:	5e                   	pop    esi
c000b0e5:	5f                   	pop    edi
c000b0e6:	5d                   	pop    ebp
c000b0e7:	c3                   	ret    
c000b0e8:	83 ec 0c             	sub    esp,0xc
c000b0eb:	6a 20                	push   0x20
c000b0ed:	e8 33 96 00 00       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c000b0f2:	83 e0 01             	and    eax,0x1
c000b0f5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b0fc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b102:	83 e0 f7             	and    eax,0xfffffff7
c000b105:	09 d0                	or     eax,edx
c000b107:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b10d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b114:	e8 0c 96 00 00       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c000b119:	83 e0 01             	and    eax,0x1
c000b11c:	88 c2                	mov    dl,al
c000b11e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b124:	83 e0 fe             	and    eax,0xfffffffe
c000b127:	09 d0                	or     eax,edx
c000b129:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b12f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b136:	e8 ea 95 00 00       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c000b13b:	c1 e0 07             	shl    eax,0x7
c000b13e:	88 c2                	mov    dl,al
c000b140:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b146:	83 e0 7f             	and    eax,0x7f
c000b149:	09 d0                	or     eax,edx
c000b14b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b151:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b158:	e8 c8 95 00 00       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	83 e0 01             	and    eax,0x1
c000b163:	c1 e0 05             	shl    eax,0x5
c000b166:	88 c2                	mov    dl,al
c000b168:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b16e:	83 e0 df             	and    eax,0xffffffdf
c000b171:	09 d0                	or     eax,edx
c000b173:	f7 05 a0 45 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00245a0,0x401
c000b17d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b183:	0f 84 a8 00 00 00    	je     c000b231 <Computer::detectFeatures()+0x1c5>
c000b189:	83 ec 0c             	sub    esp,0xc
c000b18c:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b193:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b197:	50                   	push   eax
c000b198:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b19c:	55                   	push   ebp
c000b19d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1a1:	57                   	push   edi
c000b1a2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1a6:	56                   	push   esi
c000b1a7:	68 00 00 00 80       	push   0x80000000
c000b1ac:	e8 f1 94 00 00       	call   c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1b1:	83 c4 20             	add    esp,0x20
c000b1b4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b1bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b1bf:	0f 86 dd fe ff ff    	jbe    c000b0a2 <Computer::detectFeatures()+0x36>
c000b1c5:	83 ec 0c             	sub    esp,0xc
c000b1c8:	50                   	push   eax
c000b1c9:	55                   	push   ebp
c000b1ca:	57                   	push   edi
c000b1cb:	56                   	push   esi
c000b1cc:	68 01 00 00 80       	push   0x80000001
c000b1d1:	e8 cc 94 00 00       	call   c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1d6:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b1e0:	83 c4 20             	add    esp,0x20
c000b1e3:	e9 ba fe ff ff       	jmp    c000b0a2 <Computer::detectFeatures()+0x36>
c000b1e8:	e8 63 3e 01 00       	call   c001f050 <sseDetect>
c000b1ed:	88 c2                	mov    dl,al
c000b1ef:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1f5:	c1 e2 07             	shl    edx,0x7
c000b1f8:	83 e0 7f             	and    eax,0x7f
c000b1fb:	09 d0                	or     eax,edx
c000b1fd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b203:	84 c0                	test   al,al
c000b205:	0f 89 d5 fe ff ff    	jns    c000b0e0 <Computer::detectFeatures()+0x74>
c000b20b:	e8 30 3e 01 00       	call   c001f040 <avxDetect>
c000b210:	83 e0 01             	and    eax,0x1
c000b213:	c1 e0 05             	shl    eax,0x5
c000b216:	88 c2                	mov    dl,al
c000b218:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b21e:	83 e0 df             	and    eax,0xffffffdf
c000b221:	09 d0                	or     eax,edx
c000b223:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b229:	83 c4 1c             	add    esp,0x1c
c000b22c:	5b                   	pop    ebx
c000b22d:	5e                   	pop    esi
c000b22e:	5f                   	pop    edi
c000b22f:	5d                   	pop    ebp
c000b230:	c3                   	ret    
c000b231:	83 ec 0c             	sub    esp,0xc
c000b234:	68 00 02 00 00       	push   0x200
c000b239:	e8 e7 94 00 00       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c000b23e:	83 c4 10             	add    esp,0x10
c000b241:	e9 43 ff ff ff       	jmp    c000b189 <Computer::detectFeatures()+0x11d>

c000b246 <Computer::displayFeatures()>:
c000b246:	53                   	push   ebx
c000b247:	83 ec 14             	sub    esp,0x14
c000b24a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b24e:	68 d5 0f 02 c0       	push   0xc0020fd5
c000b253:	e8 01 3f 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b258:	83 c4 10             	add    esp,0x10
c000b25b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b262:	0f 85 73 02 00 00    	jne    c000b4db <Computer::displayFeatures()+0x295>
c000b268:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b26d:	83 ec 08             	sub    esp,0x8
c000b270:	50                   	push   eax
c000b271:	68 e8 0f 02 c0       	push   0xc0020fe8
c000b276:	e8 de 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b27b:	83 c4 10             	add    esp,0x10
c000b27e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b285:	0f 85 8c 02 00 00    	jne    c000b517 <Computer::displayFeatures()+0x2d1>
c000b28b:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b290:	83 ec 08             	sub    esp,0x8
c000b293:	50                   	push   eax
c000b294:	68 f9 0f 02 c0       	push   0xc0020ff9
c000b299:	e8 bb 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b29e:	83 c4 10             	add    esp,0x10
c000b2a1:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b2a8:	0f 85 5f 02 00 00    	jne    c000b50d <Computer::displayFeatures()+0x2c7>
c000b2ae:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b2b3:	83 ec 08             	sub    esp,0x8
c000b2b6:	50                   	push   eax
c000b2b7:	68 0a 10 02 c0       	push   0xc002100a
c000b2bc:	e8 98 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b2cb:	0f 85 32 02 00 00    	jne    c000b503 <Computer::displayFeatures()+0x2bd>
c000b2d1:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b2d6:	83 ec 08             	sub    esp,0x8
c000b2d9:	50                   	push   eax
c000b2da:	68 1b 10 02 c0       	push   0xc002101b
c000b2df:	e8 75 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b2e4:	83 c4 10             	add    esp,0x10
c000b2e7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b2ee:	0f 85 05 02 00 00    	jne    c000b4f9 <Computer::displayFeatures()+0x2b3>
c000b2f4:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b2f9:	83 ec 08             	sub    esp,0x8
c000b2fc:	50                   	push   eax
c000b2fd:	68 2c 10 02 c0       	push   0xc002102c
c000b302:	e8 52 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b311:	0f 85 d8 01 00 00    	jne    c000b4ef <Computer::displayFeatures()+0x2a9>
c000b317:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b31c:	83 ec 08             	sub    esp,0x8
c000b31f:	50                   	push   eax
c000b320:	68 3d 10 02 c0       	push   0xc002103d
c000b325:	e8 2f 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b334:	0f 85 ab 01 00 00    	jne    c000b4e5 <Computer::displayFeatures()+0x29f>
c000b33a:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b33f:	83 ec 08             	sub    esp,0x8
c000b342:	50                   	push   eax
c000b343:	68 4e 10 02 c0       	push   0xc002104e
c000b348:	e8 0c 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b34d:	83 c4 10             	add    esp,0x10
c000b350:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b357:	0f 88 1b 02 00 00    	js     c000b578 <Computer::displayFeatures()+0x332>
c000b35d:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b362:	83 ec 08             	sub    esp,0x8
c000b365:	50                   	push   eax
c000b366:	68 5f 10 02 c0       	push   0xc002105f
c000b36b:	e8 e9 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b37a:	0f 85 a1 01 00 00    	jne    c000b521 <Computer::displayFeatures()+0x2db>
c000b380:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b385:	83 ec 08             	sub    esp,0x8
c000b388:	50                   	push   eax
c000b389:	68 70 10 02 c0       	push   0xc0021070
c000b38e:	e8 c6 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b39d:	0f 85 cb 01 00 00    	jne    c000b56e <Computer::displayFeatures()+0x328>
c000b3a3:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b3a8:	83 ec 08             	sub    esp,0x8
c000b3ab:	50                   	push   eax
c000b3ac:	68 81 10 02 c0       	push   0xc0021081
c000b3b1:	e8 a3 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b3b6:	83 c4 10             	add    esp,0x10
c000b3b9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b3c0:	0f 85 9e 01 00 00    	jne    c000b564 <Computer::displayFeatures()+0x31e>
c000b3c6:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b3cb:	83 ec 08             	sub    esp,0x8
c000b3ce:	50                   	push   eax
c000b3cf:	68 92 10 02 c0       	push   0xc0021092
c000b3d4:	e8 80 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b3d9:	83 c4 10             	add    esp,0x10
c000b3dc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b3e3:	0f 85 71 01 00 00    	jne    c000b55a <Computer::displayFeatures()+0x314>
c000b3e9:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b3ee:	83 ec 08             	sub    esp,0x8
c000b3f1:	50                   	push   eax
c000b3f2:	68 a3 10 02 c0       	push   0xc00210a3
c000b3f7:	e8 5d 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b3fc:	83 c4 10             	add    esp,0x10
c000b3ff:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b406:	0f 85 44 01 00 00    	jne    c000b550 <Computer::displayFeatures()+0x30a>
c000b40c:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b411:	83 ec 08             	sub    esp,0x8
c000b414:	50                   	push   eax
c000b415:	68 b4 10 02 c0       	push   0xc00210b4
c000b41a:	e8 3a 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b41f:	83 c4 10             	add    esp,0x10
c000b422:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b429:	0f 85 17 01 00 00    	jne    c000b546 <Computer::displayFeatures()+0x300>
c000b42f:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b434:	83 ec 08             	sub    esp,0x8
c000b437:	50                   	push   eax
c000b438:	68 c5 10 02 c0       	push   0xc00210c5
c000b43d:	e8 17 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b44c:	0f 85 ea 00 00 00    	jne    c000b53c <Computer::displayFeatures()+0x2f6>
c000b452:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b457:	83 ec 08             	sub    esp,0x8
c000b45a:	50                   	push   eax
c000b45b:	68 d6 10 02 c0       	push   0xc00210d6
c000b460:	e8 f4 3c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b465:	83 c4 10             	add    esp,0x10
c000b468:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b46f:	0f 88 0d 01 00 00    	js     c000b582 <Computer::displayFeatures()+0x33c>
c000b475:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b47a:	83 ec 08             	sub    esp,0x8
c000b47d:	50                   	push   eax
c000b47e:	68 e7 10 02 c0       	push   0xc00210e7
c000b483:	e8 d1 3c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b492:	0f 85 9a 00 00 00    	jne    c000b532 <Computer::displayFeatures()+0x2ec>
c000b498:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b49d:	83 ec 08             	sub    esp,0x8
c000b4a0:	50                   	push   eax
c000b4a1:	68 f8 10 02 c0       	push   0xc00210f8
c000b4a6:	e8 ae 3c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b4ab:	83 c4 10             	add    esp,0x10
c000b4ae:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b4b5:	75 74                	jne    c000b52b <Computer::displayFeatures()+0x2e5>
c000b4b7:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c000b4bc:	83 ec 08             	sub    esp,0x8
c000b4bf:	50                   	push   eax
c000b4c0:	68 09 11 02 c0       	push   0xc0021109
c000b4c5:	e8 8f 3c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b4ca:	c7 44 24 20 06 27 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022706
c000b4d2:	83 c4 18             	add    esp,0x18
c000b4d5:	5b                   	pop    ebx
c000b4d6:	e9 7e 3c 00 00       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>
c000b4db:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b4e0:	e9 88 fd ff ff       	jmp    c000b26d <Computer::displayFeatures()+0x27>
c000b4e5:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b4ea:	e9 50 fe ff ff       	jmp    c000b33f <Computer::displayFeatures()+0xf9>
c000b4ef:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b4f4:	e9 23 fe ff ff       	jmp    c000b31c <Computer::displayFeatures()+0xd6>
c000b4f9:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b4fe:	e9 f6 fd ff ff       	jmp    c000b2f9 <Computer::displayFeatures()+0xb3>
c000b503:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b508:	e9 c9 fd ff ff       	jmp    c000b2d6 <Computer::displayFeatures()+0x90>
c000b50d:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b512:	e9 9c fd ff ff       	jmp    c000b2b3 <Computer::displayFeatures()+0x6d>
c000b517:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b51c:	e9 6f fd ff ff       	jmp    c000b290 <Computer::displayFeatures()+0x4a>
c000b521:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b526:	e9 5a fe ff ff       	jmp    c000b385 <Computer::displayFeatures()+0x13f>
c000b52b:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b530:	eb 8a                	jmp    c000b4bc <Computer::displayFeatures()+0x276>
c000b532:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b537:	e9 61 ff ff ff       	jmp    c000b49d <Computer::displayFeatures()+0x257>
c000b53c:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b541:	e9 11 ff ff ff       	jmp    c000b457 <Computer::displayFeatures()+0x211>
c000b546:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b54b:	e9 e4 fe ff ff       	jmp    c000b434 <Computer::displayFeatures()+0x1ee>
c000b550:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b555:	e9 b7 fe ff ff       	jmp    c000b411 <Computer::displayFeatures()+0x1cb>
c000b55a:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b55f:	e9 8a fe ff ff       	jmp    c000b3ee <Computer::displayFeatures()+0x1a8>
c000b564:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b569:	e9 5d fe ff ff       	jmp    c000b3cb <Computer::displayFeatures()+0x185>
c000b56e:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b573:	e9 30 fe ff ff       	jmp    c000b3a8 <Computer::displayFeatures()+0x162>
c000b578:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b57d:	e9 e0 fd ff ff       	jmp    c000b362 <Computer::displayFeatures()+0x11c>
c000b582:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c000b587:	e9 ee fe ff ff       	jmp    c000b47a <Computer::displayFeatures()+0x234>

c000b58c <Computer::rdmsr(unsigned int)>:
c000b58c:	83 ec 0c             	sub    esp,0xc
c000b58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b593:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b59a:	74 0a                	je     c000b5a6 <Computer::rdmsr(unsigned int)+0x1a>
c000b59c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5a0:	0f 32                	rdmsr  
c000b5a2:	83 c4 0c             	add    esp,0xc
c000b5a5:	c3                   	ret    
c000b5a6:	83 ec 0c             	sub    esp,0xc
c000b5a9:	68 1a 11 02 c0       	push   0xc002111a
c000b5ae:	e8 95 a3 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000b5b3:	83 c4 10             	add    esp,0x10
c000b5b6:	eb e4                	jmp    c000b59c <Computer::rdmsr(unsigned int)+0x10>

c000b5b8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5b8:	57                   	push   edi
c000b5b9:	56                   	push   esi
c000b5ba:	52                   	push   edx
c000b5bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5c3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ce:	74 0e                	je     c000b5de <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5d4:	89 f0                	mov    eax,esi
c000b5d6:	89 fa                	mov    edx,edi
c000b5d8:	0f 30                	wrmsr  
c000b5da:	58                   	pop    eax
c000b5db:	5e                   	pop    esi
c000b5dc:	5f                   	pop    edi
c000b5dd:	c3                   	ret    
c000b5de:	83 ec 0c             	sub    esp,0xc
c000b5e1:	68 20 11 02 c0       	push   0xc0021120
c000b5e6:	e8 5d a3 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000b5eb:	83 c4 10             	add    esp,0x10
c000b5ee:	eb e0                	jmp    c000b5d0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5f0 <Computer::nmiEnabled()>:
c000b5f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5fa:	c3                   	ret    
c000b5fb:	90                   	nop

c000b5fc <Computer::readCMOS(unsigned char)>:
c000b5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b600:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b607:	19 c0                	sbb    eax,eax
c000b609:	83 e0 80             	and    eax,0xffffff80
c000b60c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b610:	e6 70                	out    0x70,al
c000b612:	e4 71                	in     al,0x71
c000b614:	c3                   	ret    
c000b615:	90                   	nop

c000b616 <Computer::enableNMI(bool)>:
c000b616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b61a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b61e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b624:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b62c:	eb ce                	jmp    c000b5fc <Computer::readCMOS(unsigned char)>

c000b62e <Computer::open(int, int, void*)>:
c000b62e:	56                   	push   esi
c000b62f:	53                   	push   ebx
c000b630:	83 ec 10             	sub    esp,0x10
c000b633:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b637:	f6 05 a0 45 02 c0 04 	test   BYTE PTR ds:0xc00245a0,0x4
c000b63e:	68 68 22 00 00       	push   0x2268
c000b643:	0f 94 05 c0 39 02 c0 	sete   BYTE PTR ds:0xc00239c0
c000b64a:	e8 d5 39 00 00       	call   c000f024 <operator new(unsigned long)>
c000b64f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b652:	89 c6                	mov    esi,eax
c000b654:	e8 cd 86 00 00       	call   c0013d26 <ACPI::ACPI()>
c000b659:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b65f:	58                   	pop    eax
c000b660:	5a                   	pop    edx
c000b661:	56                   	push   esi
c000b662:	53                   	push   ebx
c000b663:	e8 06 4f 00 00       	call   c001056e <Device::addChild(Device*)>
c000b668:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b66b:	e8 fc f9 ff ff       	call   c000b06c <Computer::detectFeatures()>
c000b670:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b673:	e8 ce fb ff ff       	call   c000b246 <Computer::displayFeatures()>
c000b678:	59                   	pop    ecx
c000b679:	5e                   	pop    esi
c000b67a:	6a 01                	push   0x1
c000b67c:	53                   	push   ebx
c000b67d:	e8 94 ff ff ff       	call   c000b616 <Computer::enableNMI(bool)>
c000b682:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b689:	e8 96 39 00 00       	call   c000f024 <operator new(unsigned long)>
c000b68e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b691:	89 c6                	mov    esi,eax
c000b693:	e8 58 91 00 00       	call   c00147f0 <CPU::CPU()>
c000b698:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b69e:	58                   	pop    eax
c000b69f:	5a                   	pop    edx
c000b6a0:	56                   	push   esi
c000b6a1:	53                   	push   ebx
c000b6a2:	e8 c7 4e 00 00       	call   c001056e <Device::addChild(Device*)>
c000b6a7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6ad:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6b3:	6a 00                	push   0x0
c000b6b5:	6a 00                	push   0x0
c000b6b7:	50                   	push   eax
c000b6b8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6bb:	83 c4 20             	add    esp,0x20
c000b6be:	e8 13 54 00 00       	call   c0010ad6 <setupFPU()>
c000b6c3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6c9:	85 c0                	test   eax,eax
c000b6cb:	74 1f                	je     c000b6ec <Computer::open(int, int, void*)+0xbe>
c000b6cd:	83 ec 08             	sub    esp,0x8
c000b6d0:	50                   	push   eax
c000b6d1:	53                   	push   ebx
c000b6d2:	e8 97 4e 00 00       	call   c001056e <Device::addChild(Device*)>
c000b6d7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6df:	6a 00                	push   0x0
c000b6e1:	6a 00                	push   0x0
c000b6e3:	6a 00                	push   0x0
c000b6e5:	50                   	push   eax
c000b6e6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6e9:	83 c4 20             	add    esp,0x20
c000b6ec:	83 ec 0c             	sub    esp,0xc
c000b6ef:	68 5e b0 00 c0       	push   0xc000b05e
c000b6f4:	e8 70 d4 00 00       	call   c0018b69 <setupMultitasking(void (*)())>
c000b6f9:	83 c4 14             	add    esp,0x14
c000b6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b701:	5b                   	pop    ebx
c000b702:	5e                   	pop    esi
c000b703:	c3                   	ret    

c000b704 <Computer::disableNMI()>:
c000b704:	6a 00                	push   0x0
c000b706:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b70a:	e8 07 ff ff ff       	call   c000b616 <Computer::enableNMI(bool)>
c000b70f:	58                   	pop    eax
c000b710:	5a                   	pop    edx
c000b711:	c3                   	ret    

c000b712 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b716:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b71d:	19 c0                	sbb    eax,eax
c000b71f:	83 e0 80             	and    eax,0xffffff80
c000b722:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b726:	e6 70                	out    0x70,al
c000b728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b72c:	e6 71                	out    0x71,al
c000b72e:	c3                   	ret    
c000b72f:	90                   	nop

c000b730 <Computer::handleNMI()>:
c000b730:	56                   	push   esi
c000b731:	53                   	push   ebx
c000b732:	83 ec 10             	sub    esp,0x10
c000b735:	e4 92                	in     al,0x92
c000b737:	89 c6                	mov    esi,eax
c000b739:	e4 61                	in     al,0x61
c000b73b:	68 26 11 02 c0       	push   0xc0021126
c000b740:	88 c3                	mov    bl,al
c000b742:	e8 12 3a 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b747:	83 c4 10             	add    esp,0x10
c000b74a:	83 e6 10             	and    esi,0x10
c000b74d:	75 0d                	jne    c000b75c <Computer::handleNMI()+0x2c>
c000b74f:	f6 c3 40             	test   bl,0x40
c000b752:	75 1d                	jne    c000b771 <Computer::handleNMI()+0x41>
c000b754:	84 db                	test   bl,bl
c000b756:	78 2d                	js     c000b785 <Computer::handleNMI()+0x55>
c000b758:	58                   	pop    eax
c000b759:	5b                   	pop    ebx
c000b75a:	5e                   	pop    esi
c000b75b:	c3                   	ret    
c000b75c:	83 ec 0c             	sub    esp,0xc
c000b75f:	68 37 11 02 c0       	push   0xc0021137
c000b764:	e8 df a1 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	f6 c3 40             	test   bl,0x40
c000b76f:	74 e3                	je     c000b754 <Computer::handleNMI()+0x24>
c000b771:	83 ec 0c             	sub    esp,0xc
c000b774:	68 44 11 02 c0       	push   0xc0021144
c000b779:	e8 ca a1 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000b77e:	83 c4 10             	add    esp,0x10
c000b781:	84 db                	test   bl,bl
c000b783:	79 d3                	jns    c000b758 <Computer::handleNMI()+0x28>
c000b785:	c7 44 24 10 4e 11 02 c0 	mov    DWORD PTR [esp+0x10],0xc002114e
c000b78d:	5a                   	pop    edx
c000b78e:	5b                   	pop    ebx
c000b78f:	5e                   	pop    esi
c000b790:	e9 b3 a1 00 00       	jmp    c0015948 <Krnl::panic(char const*)>
c000b795:	90                   	nop

c000b796 <Computer::setDiskActivityLight(int, bool)>:
c000b796:	56                   	push   esi
c000b797:	53                   	push   ebx
c000b798:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b79c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7a1:	77 1b                	ja     c000b7be <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7a3:	e4 92                	in     al,0x92
c000b7a5:	bb 40 00 00 00       	mov    ebx,0x40
c000b7aa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7ae:	89 da                	mov    edx,ebx
c000b7b0:	d3 e2                	shl    edx,cl
c000b7b2:	89 f1                	mov    ecx,esi
c000b7b4:	f7 d2                	not    edx
c000b7b6:	d3 e3                	shl    ebx,cl
c000b7b8:	21 d0                	and    eax,edx
c000b7ba:	09 d8                	or     eax,ebx
c000b7bc:	e6 92                	out    0x92,al
c000b7be:	5b                   	pop    ebx
c000b7bf:	5e                   	pop    esi
c000b7c0:	c3                   	ret    
c000b7c1:	90                   	nop

c000b7c2 <GDTEntry::setBase(unsigned int)>:
c000b7c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7ca:	89 c1                	mov    ecx,eax
c000b7cc:	c1 e9 10             	shr    ecx,0x10
c000b7cf:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7d3:	c1 e8 18             	shr    eax,0x18
c000b7d6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7d9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7dc:	c3                   	ret    
c000b7dd:	90                   	nop

c000b7de <GDTEntry::setLimit(unsigned int)>:
c000b7de:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7e9:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7ec:	c1 e8 10             	shr    eax,0x10
c000b7ef:	83 e2 f0             	and    edx,0xfffffff0
c000b7f2:	83 e0 0f             	and    eax,0xf
c000b7f5:	09 d0                	or     eax,edx
c000b7f7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7fa:	c3                   	ret    
c000b7fb:	90                   	nop

c000b7fc <GDT::GDT()>:
c000b7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b800:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b80a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b810:	90                   	nop
c000b811:	c3                   	ret    

c000b812 <GDT::addEntry(GDTEntry)>:
c000b812:	53                   	push   ebx
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b81a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b81c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b823:	52                   	push   edx
c000b824:	50                   	push   eax
c000b825:	68 88 11 02 c0       	push   0xc0021188
c000b82a:	e8 2a 39 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b82f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b831:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b835:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b839:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b83d:	8d 50 01             	lea    edx,[eax+0x1]
c000b840:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b844:	89 13                	mov    DWORD PTR [ebx],edx
c000b846:	c1 e0 03             	shl    eax,0x3
c000b849:	83 c4 18             	add    esp,0x18
c000b84c:	5b                   	pop    ebx
c000b84d:	c3                   	ret    

c000b84e <GDT::getNumberOfEntries()>:
c000b84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b852:	8b 00                	mov    eax,DWORD PTR [eax]
c000b854:	c3                   	ret    
c000b855:	90                   	nop

c000b856 <GDT::flush()>:
c000b856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b85a:	83 c0 04             	add    eax,0x4
c000b85d:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b860:	a3 92 45 02 c0       	mov    ds:0xc0024592,eax
c000b865:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b86c:	66 89 15 90 45 02 c0 	mov    WORD PTR ds:0xc0024590,dx
c000b873:	e9 6d 4b ff ff       	jmp    c00003e5 <loadGDT>

c000b878 <GDT::setup()>:
c000b878:	55                   	push   ebp
c000b879:	57                   	push   edi
c000b87a:	56                   	push   esi
c000b87b:	53                   	push   ebx
c000b87c:	83 ec 3c             	sub    esp,0x3c
c000b87f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b883:	6a 00                	push   0x0
c000b885:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b889:	53                   	push   ebx
c000b88a:	e8 33 ff ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000b88f:	6a 00                	push   0x0
c000b891:	53                   	push   ebx
c000b892:	e8 47 ff ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000b897:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b89f:	6a 00                	push   0x0
c000b8a1:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b8a5:	53                   	push   ebx
c000b8a6:	e8 17 ff ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000b8ab:	68 ff ff ff 00       	push   0xffffff
c000b8b0:	53                   	push   ebx
c000b8b1:	e8 28 ff ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000b8b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8ba:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8bf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8c8:	83 c4 20             	add    esp,0x20
c000b8cb:	6a 00                	push   0x0
c000b8cd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8d1:	53                   	push   ebx
c000b8d2:	e8 eb fe ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000b8d7:	68 ff ff ff 00       	push   0xffffff
c000b8dc:	53                   	push   ebx
c000b8dd:	e8 fc fe ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000b8e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8e6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8ea:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8ef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8f3:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8fc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b900:	89 d8                	mov    eax,ebx
c000b902:	80 cc 60             	or     ah,0x60
c000b905:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b909:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b90d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b911:	83 c4 0c             	add    esp,0xc
c000b914:	89 f8                	mov    eax,edi
c000b916:	80 cc 60             	or     ah,0x60
c000b919:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b91d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b921:	89 c7                	mov    edi,eax
c000b923:	55                   	push   ebp
c000b924:	e8 e9 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b929:	83 c4 0c             	add    esp,0xc
c000b92c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b930:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b934:	55                   	push   ebp
c000b935:	e8 d8 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b93a:	83 c4 0c             	add    esp,0xc
c000b93d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b941:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b945:	55                   	push   ebp
c000b946:	e8 c7 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b94b:	83 c4 0c             	add    esp,0xc
c000b94e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b952:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b956:	53                   	push   ebx
c000b957:	51                   	push   ecx
c000b958:	55                   	push   ebp
c000b959:	e8 b4 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b95e:	83 c4 0c             	add    esp,0xc
c000b961:	57                   	push   edi
c000b962:	56                   	push   esi
c000b963:	55                   	push   ebp
c000b964:	e8 a9 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b969:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b96c:	e8 e5 fe ff ff       	call   c000b856 <GDT::flush()>
c000b971:	83 c4 4c             	add    esp,0x4c
c000b974:	5b                   	pop    ebx
c000b975:	5e                   	pop    esi
c000b976:	5f                   	pop    edi
c000b977:	5d                   	pop    ebp
c000b978:	c3                   	ret    

c000b979 <idleFunction(void*)>:
c000b979:	53                   	push   ebx
c000b97a:	83 ec 08             	sub    esp,0x8
c000b97d:	e8 b5 cf 00 00       	call   c0018937 <unlockScheduler()>
c000b982:	e8 55 8e 00 00       	call   c00147dc <thisCPU()>
c000b987:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b98e:	74 41                	je     c000b9d1 <idleFunction(void*)+0x58>
c000b990:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c000b995:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b99c:	74 33                	je     c000b9d1 <idleFunction(void*)+0x58>
c000b99e:	52                   	push   edx
c000b99f:	31 db                	xor    ebx,ebx
c000b9a1:	52                   	push   edx
c000b9a2:	68 e1 00 00 00       	push   0xe1
c000b9a7:	50                   	push   eax
c000b9a8:	e8 df fb ff ff       	call   c000b58c <Computer::rdmsr(unsigned int)>
c000b9ad:	53                   	push   ebx
c000b9ae:	83 e0 02             	and    eax,0x2
c000b9b1:	50                   	push   eax
c000b9b2:	68 e1 00 00 00       	push   0xe1
c000b9b7:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c000b9bd:	e8 f6 fb ff ff       	call   c000b5b8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9c2:	83 c4 20             	add    esp,0x20
c000b9c5:	e8 38 48 ff ff       	call   c0000202 <doTPAUSE>
c000b9ca:	e8 c1 3c 01 00       	call   c001f690 <idleCommon()>
c000b9cf:	eb f4                	jmp    c000b9c5 <idleFunction(void*)+0x4c>
c000b9d1:	fb                   	sti    
c000b9d2:	f4                   	hlt    
c000b9d3:	e8 b8 3c 01 00       	call   c001f690 <idleCommon()>
c000b9d8:	eb f7                	jmp    c000b9d1 <idleFunction(void*)+0x58>

c000b9da <IDTEntry::IDTEntry(bool)>:
c000b9da:	83 ec 04             	sub    esp,0x4
c000b9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9e1:	88 04 24             	mov    BYTE PTR [esp],al
c000b9e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9fa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9fd:	83 e2 f0             	and    edx,0xfffffff0
c000ba00:	83 ca 0e             	or     edx,0xe
c000ba03:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba0a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba0d:	83 e2 ef             	and    edx,0xffffffef
c000ba10:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba13:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba17:	74 04                	je     c000ba1d <IDTEntry::IDTEntry(bool)+0x43>
c000ba19:	b2 03                	mov    dl,0x3
c000ba1b:	eb 02                	jmp    c000ba1f <IDTEntry::IDTEntry(bool)+0x45>
c000ba1d:	b2 00                	mov    dl,0x0
c000ba1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba23:	83 e2 03             	and    edx,0x3
c000ba26:	88 d1                	mov    cl,dl
c000ba28:	c1 e1 05             	shl    ecx,0x5
c000ba2b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba2e:	83 e2 9f             	and    edx,0xffffff9f
c000ba31:	09 ca                	or     edx,ecx
c000ba33:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba3a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba3d:	83 ca 80             	or     edx,0xffffff80
c000ba40:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba43:	90                   	nop
c000ba44:	83 c4 04             	add    esp,0x4
c000ba47:	c3                   	ret    

c000ba48 <IDTEntry::setOffset(unsigned int)>:
c000ba48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba50:	66 89 02             	mov    WORD PTR [edx],ax
c000ba53:	c1 e8 10             	shr    eax,0x10
c000ba56:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba5a:	c3                   	ret    
c000ba5b:	90                   	nop

c000ba5c <IDT::IDT()>:
c000ba5c:	90                   	nop
c000ba5d:	c3                   	ret    

c000ba5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	83 c0 30             	add    eax,0x30
c000ba65:	c3                   	ret    

c000ba66 <IDT::addEntry(IDTEntry, int)>:
c000ba66:	53                   	push   ebx
c000ba67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba77:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba7a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba7e:	5b                   	pop    ebx
c000ba7f:	c3                   	ret    

c000ba80 <IDT::addEntry(int, void (*)(), bool)>:
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 10             	sub    esp,0x10
c000ba84:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba89:	50                   	push   eax
c000ba8a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba8e:	53                   	push   ebx
c000ba8f:	e8 46 ff ff ff       	call   c000b9da <IDTEntry::IDTEntry(bool)>
c000ba94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba98:	53                   	push   ebx
c000ba99:	e8 aa ff ff ff       	call   c000ba48 <IDTEntry::setOffset(unsigned int)>
c000ba9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baa2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baae:	e8 b3 ff ff ff       	call   c000ba66 <IDT::addEntry(IDTEntry, int)>
c000bab3:	83 c4 30             	add    esp,0x30
c000bab6:	5b                   	pop    ebx
c000bab7:	c3                   	ret    

c000bab8 <IDT::flush()>:
c000bab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000babc:	66 c7 05 98 45 02 c0 ff 07 	mov    WORD PTR ds:0xc0024598,0x7ff
c000bac5:	a3 9a 45 02 c0       	mov    ds:0xc002459a,eax
c000baca:	0f 01 1d 98 45 02 c0 	lidtd  ds:0xc0024598
c000bad1:	c3                   	ret    

c000bad2 <IDT::setup()>:
c000bad2:	57                   	push   edi
c000bad3:	56                   	push   esi
c000bad4:	53                   	push   ebx
c000bad5:	83 ec 10             	sub    esp,0x10
c000bad8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000badc:	6a 00                	push   0x0
c000bade:	68 05 04 00 c0       	push   0xc0000405
c000bae3:	6a 00                	push   0x0
c000bae5:	53                   	push   ebx
c000bae6:	e8 95 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000baeb:	6a 00                	push   0x0
c000baed:	68 15 04 00 c0       	push   0xc0000415
c000baf2:	6a 01                	push   0x1
c000baf4:	53                   	push   ebx
c000baf5:	e8 86 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bafa:	83 c4 20             	add    esp,0x20
c000bafd:	6a 00                	push   0x0
c000baff:	68 1f 04 00 c0       	push   0xc000041f
c000bb04:	6a 02                	push   0x2
c000bb06:	53                   	push   ebx
c000bb07:	e8 74 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb0c:	6a 00                	push   0x0
c000bb0e:	68 29 04 00 c0       	push   0xc0000429
c000bb13:	6a 03                	push   0x3
c000bb15:	53                   	push   ebx
c000bb16:	e8 65 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb1b:	83 c4 20             	add    esp,0x20
c000bb1e:	6a 00                	push   0x0
c000bb20:	68 33 04 00 c0       	push   0xc0000433
c000bb25:	6a 04                	push   0x4
c000bb27:	53                   	push   ebx
c000bb28:	e8 53 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb2d:	6a 00                	push   0x0
c000bb2f:	68 3d 04 00 c0       	push   0xc000043d
c000bb34:	6a 05                	push   0x5
c000bb36:	53                   	push   ebx
c000bb37:	e8 44 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb3c:	83 c4 20             	add    esp,0x20
c000bb3f:	6a 00                	push   0x0
c000bb41:	68 47 04 00 c0       	push   0xc0000447
c000bb46:	6a 06                	push   0x6
c000bb48:	53                   	push   ebx
c000bb49:	e8 32 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb4e:	6a 00                	push   0x0
c000bb50:	68 51 04 00 c0       	push   0xc0000451
c000bb55:	6a 07                	push   0x7
c000bb57:	53                   	push   ebx
c000bb58:	e8 23 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb5d:	83 c4 20             	add    esp,0x20
c000bb60:	6a 00                	push   0x0
c000bb62:	68 5b 04 00 c0       	push   0xc000045b
c000bb67:	6a 08                	push   0x8
c000bb69:	53                   	push   ebx
c000bb6a:	e8 11 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb6f:	6a 00                	push   0x0
c000bb71:	68 63 04 00 c0       	push   0xc0000463
c000bb76:	6a 09                	push   0x9
c000bb78:	53                   	push   ebx
c000bb79:	e8 02 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb7e:	83 c4 20             	add    esp,0x20
c000bb81:	6a 00                	push   0x0
c000bb83:	68 6d 04 00 c0       	push   0xc000046d
c000bb88:	6a 0a                	push   0xa
c000bb8a:	53                   	push   ebx
c000bb8b:	e8 f0 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb90:	6a 00                	push   0x0
c000bb92:	68 75 04 00 c0       	push   0xc0000475
c000bb97:	6a 0b                	push   0xb
c000bb99:	53                   	push   ebx
c000bb9a:	e8 e1 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb9f:	83 c4 20             	add    esp,0x20
c000bba2:	6a 00                	push   0x0
c000bba4:	68 7d 04 00 c0       	push   0xc000047d
c000bba9:	6a 0c                	push   0xc
c000bbab:	53                   	push   ebx
c000bbac:	e8 cf fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbb1:	6a 00                	push   0x0
c000bbb3:	68 85 04 00 c0       	push   0xc0000485
c000bbb8:	6a 0d                	push   0xd
c000bbba:	53                   	push   ebx
c000bbbb:	e8 c0 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbc0:	83 c4 20             	add    esp,0x20
c000bbc3:	6a 00                	push   0x0
c000bbc5:	68 8d 04 00 c0       	push   0xc000048d
c000bbca:	6a 0e                	push   0xe
c000bbcc:	53                   	push   ebx
c000bbcd:	e8 ae fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbd2:	6a 00                	push   0x0
c000bbd4:	68 95 04 00 c0       	push   0xc0000495
c000bbd9:	6a 0f                	push   0xf
c000bbdb:	53                   	push   ebx
c000bbdc:	e8 9f fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbe1:	83 c4 20             	add    esp,0x20
c000bbe4:	6a 00                	push   0x0
c000bbe6:	68 9f 04 00 c0       	push   0xc000049f
c000bbeb:	6a 10                	push   0x10
c000bbed:	53                   	push   ebx
c000bbee:	e8 8d fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbf3:	6a 00                	push   0x0
c000bbf5:	68 a9 04 00 c0       	push   0xc00004a9
c000bbfa:	6a 11                	push   0x11
c000bbfc:	53                   	push   ebx
c000bbfd:	e8 7e fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc02:	83 c4 20             	add    esp,0x20
c000bc05:	6a 00                	push   0x0
c000bc07:	68 b3 04 00 c0       	push   0xc00004b3
c000bc0c:	6a 12                	push   0x12
c000bc0e:	53                   	push   ebx
c000bc0f:	e8 6c fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc14:	6a 01                	push   0x1
c000bc16:	68 bd 04 00 c0       	push   0xc00004bd
c000bc1b:	6a 60                	push   0x60
c000bc1d:	53                   	push   ebx
c000bc1e:	e8 5d fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc23:	83 c4 20             	add    esp,0x20
c000bc26:	6a 00                	push   0x0
c000bc28:	68 c7 04 00 c0       	push   0xc00004c7
c000bc2d:	6a 20                	push   0x20
c000bc2f:	53                   	push   ebx
c000bc30:	e8 4b fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc35:	6a 00                	push   0x0
c000bc37:	68 d1 04 00 c0       	push   0xc00004d1
c000bc3c:	6a 21                	push   0x21
c000bc3e:	53                   	push   ebx
c000bc3f:	e8 3c fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc44:	83 c4 20             	add    esp,0x20
c000bc47:	6a 00                	push   0x0
c000bc49:	68 db 04 00 c0       	push   0xc00004db
c000bc4e:	6a 22                	push   0x22
c000bc50:	53                   	push   ebx
c000bc51:	e8 2a fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc56:	6a 00                	push   0x0
c000bc58:	68 e5 04 00 c0       	push   0xc00004e5
c000bc5d:	6a 23                	push   0x23
c000bc5f:	53                   	push   ebx
c000bc60:	e8 1b fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc65:	83 c4 20             	add    esp,0x20
c000bc68:	6a 00                	push   0x0
c000bc6a:	68 ef 04 00 c0       	push   0xc00004ef
c000bc6f:	6a 24                	push   0x24
c000bc71:	53                   	push   ebx
c000bc72:	e8 09 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc77:	6a 00                	push   0x0
c000bc79:	68 f9 04 00 c0       	push   0xc00004f9
c000bc7e:	6a 25                	push   0x25
c000bc80:	53                   	push   ebx
c000bc81:	e8 fa fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc86:	83 c4 20             	add    esp,0x20
c000bc89:	6a 00                	push   0x0
c000bc8b:	68 03 05 00 c0       	push   0xc0000503
c000bc90:	6a 26                	push   0x26
c000bc92:	53                   	push   ebx
c000bc93:	e8 e8 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc98:	6a 00                	push   0x0
c000bc9a:	68 0d 05 00 c0       	push   0xc000050d
c000bc9f:	6a 27                	push   0x27
c000bca1:	53                   	push   ebx
c000bca2:	e8 d9 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bca7:	83 c4 20             	add    esp,0x20
c000bcaa:	6a 00                	push   0x0
c000bcac:	68 17 05 00 c0       	push   0xc0000517
c000bcb1:	6a 28                	push   0x28
c000bcb3:	53                   	push   ebx
c000bcb4:	e8 c7 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcb9:	6a 00                	push   0x0
c000bcbb:	68 21 05 00 c0       	push   0xc0000521
c000bcc0:	6a 29                	push   0x29
c000bcc2:	53                   	push   ebx
c000bcc3:	e8 b8 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcc8:	83 c4 20             	add    esp,0x20
c000bccb:	6a 00                	push   0x0
c000bccd:	68 2b 05 00 c0       	push   0xc000052b
c000bcd2:	6a 2a                	push   0x2a
c000bcd4:	53                   	push   ebx
c000bcd5:	e8 a6 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcda:	6a 00                	push   0x0
c000bcdc:	68 35 05 00 c0       	push   0xc0000535
c000bce1:	6a 2b                	push   0x2b
c000bce3:	53                   	push   ebx
c000bce4:	e8 97 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bce9:	83 c4 20             	add    esp,0x20
c000bcec:	6a 00                	push   0x0
c000bcee:	68 3f 05 00 c0       	push   0xc000053f
c000bcf3:	6a 2c                	push   0x2c
c000bcf5:	53                   	push   ebx
c000bcf6:	e8 85 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcfb:	6a 00                	push   0x0
c000bcfd:	68 49 05 00 c0       	push   0xc0000549
c000bd02:	6a 2d                	push   0x2d
c000bd04:	53                   	push   ebx
c000bd05:	e8 76 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd0a:	83 c4 20             	add    esp,0x20
c000bd0d:	6a 00                	push   0x0
c000bd0f:	68 53 05 00 c0       	push   0xc0000553
c000bd14:	6a 2e                	push   0x2e
c000bd16:	53                   	push   ebx
c000bd17:	e8 64 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd1c:	6a 00                	push   0x0
c000bd1e:	68 5d 05 00 c0       	push   0xc000055d
c000bd23:	6a 2f                	push   0x2f
c000bd25:	53                   	push   ebx
c000bd26:	e8 55 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd2b:	83 c4 20             	add    esp,0x20
c000bd2e:	6a 00                	push   0x0
c000bd30:	68 67 05 00 c0       	push   0xc0000567
c000bd35:	6a 30                	push   0x30
c000bd37:	53                   	push   ebx
c000bd38:	e8 43 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd3d:	6a 00                	push   0x0
c000bd3f:	68 71 05 00 c0       	push   0xc0000571
c000bd44:	6a 31                	push   0x31
c000bd46:	53                   	push   ebx
c000bd47:	e8 34 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd4c:	83 c4 20             	add    esp,0x20
c000bd4f:	6a 00                	push   0x0
c000bd51:	68 7b 05 00 c0       	push   0xc000057b
c000bd56:	6a 32                	push   0x32
c000bd58:	53                   	push   ebx
c000bd59:	e8 22 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd5e:	6a 00                	push   0x0
c000bd60:	68 85 05 00 c0       	push   0xc0000585
c000bd65:	6a 33                	push   0x33
c000bd67:	53                   	push   ebx
c000bd68:	e8 13 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd6d:	83 c4 20             	add    esp,0x20
c000bd70:	6a 00                	push   0x0
c000bd72:	68 8f 05 00 c0       	push   0xc000058f
c000bd77:	6a 34                	push   0x34
c000bd79:	53                   	push   ebx
c000bd7a:	e8 01 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd7f:	6a 00                	push   0x0
c000bd81:	68 99 05 00 c0       	push   0xc0000599
c000bd86:	6a 35                	push   0x35
c000bd88:	53                   	push   ebx
c000bd89:	e8 f2 fc ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd8e:	83 c4 20             	add    esp,0x20
c000bd91:	6a 00                	push   0x0
c000bd93:	68 a3 05 00 c0       	push   0xc00005a3
c000bd98:	6a 36                	push   0x36
c000bd9a:	53                   	push   ebx
c000bd9b:	e8 e0 fc ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bda0:	6a 00                	push   0x0
c000bda2:	68 ad 05 00 c0       	push   0xc00005ad
c000bda7:	6a 37                	push   0x37
c000bda9:	53                   	push   ebx
c000bdaa:	e8 d1 fc ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bdaf:	83 c4 20             	add    esp,0x20
c000bdb2:	e8 14 25 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bdb7:	52                   	push   edx
c000bdb8:	6a 03                	push   0x3
c000bdba:	6a 02                	push   0x2
c000bdbc:	50                   	push   eax
c000bdbd:	e8 4a 2b 00 00       	call   c000e90c <VAS::allocatePages(int, int)>
c000bdc2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdc9:	89 c6                	mov    esi,eax
c000bdcb:	e8 54 32 00 00       	call   c000f024 <operator new(unsigned long)>
c000bdd0:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdd6:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdd9:	89 c7                	mov    edi,eax
c000bddb:	e8 ee 1c 00 00       	call   c000dace <TSS::TSS()>
c000bde0:	83 c4 0c             	add    esp,0xc
c000bde3:	68 5b 04 00 c0       	push   0xc000045b
c000bde8:	56                   	push   esi
c000bde9:	57                   	push   edi
c000bdea:	e8 1f 1d 00 00       	call   c000db0e <TSS::setup(unsigned long, unsigned long)>
c000bdef:	59                   	pop    ecx
c000bdf0:	89 c6                	mov    esi,eax
c000bdf2:	5f                   	pop    edi
c000bdf3:	6a 00                	push   0x0
c000bdf5:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bdf9:	50                   	push   eax
c000bdfa:	e8 db fb ff ff       	call   c000b9da <IDTEntry::IDTEntry(bool)>
c000bdff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be03:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be08:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be0e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be15:	80 ce 05             	or     dh,0x5
c000be18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be1c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be20:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be27:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be2d:	e8 86 fc ff ff       	call   c000bab8 <IDT::flush()>
c000be32:	83 c4 20             	add    esp,0x20
c000be35:	5b                   	pop    ebx
c000be36:	5e                   	pop    esi
c000be37:	5f                   	pop    edi
c000be38:	c3                   	ret    

c000be39 <sbrk>:
c000be39:	55                   	push   ebp
c000be3a:	57                   	push   edi
c000be3b:	56                   	push   esi
c000be3c:	53                   	push   ebx
c000be3d:	83 ec 1c             	sub    esp,0x1c
c000be40:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be44:	85 db                	test   ebx,ebx
c000be46:	a1 a0 39 02 c0       	mov    eax,ds:0xc00239a0
c000be4b:	0f 84 e4 00 00 00    	je     c000bf35 <sbrk+0xfc>
c000be51:	78 3d                	js     c000be90 <sbrk+0x57>
c000be53:	e8 84 89 00 00       	call   c00147dc <thisCPU()>
c000be58:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be5e:	83 e0 01             	and    eax,0x1
c000be61:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be65:	a1 a0 39 02 c0       	mov    eax,ds:0xc00239a0
c000be6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be6e:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be74:	89 d8                	mov    eax,ebx
c000be76:	c1 f8 1f             	sar    eax,0x1f
c000be79:	25 ff 0f 00 00       	and    eax,0xfff
c000be7e:	01 c3                	add    ebx,eax
c000be80:	c1 fb 0c             	sar    ebx,0xc
c000be83:	89 df                	mov    edi,ebx
c000be85:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be89:	be 00 00 00 00       	mov    esi,0x0
c000be8e:	eb 2a                	jmp    c000beba <sbrk+0x81>
c000be90:	83 ec 08             	sub    esp,0x8
c000be93:	53                   	push   ebx
c000be94:	68 a4 11 02 c0       	push   0xc00211a4
c000be99:	e8 bb 32 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bea6:	e9 8a 00 00 00       	jmp    c000bf35 <sbrk+0xfc>
c000beab:	81 05 a0 39 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00239a0,0x1000
c000beb5:	46                   	inc    esi
c000beb6:	39 f7                	cmp    edi,esi
c000beb8:	74 34                	je     c000beee <sbrk+0xb5>
c000beba:	e8 0c 24 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bebf:	89 c3                	mov    ebx,eax
c000bec1:	8b 2d a0 39 02 c0    	mov    ebp,DWORD PTR ds:0xc00239a0
c000bec7:	e8 f5 06 00 00       	call   c000c5c1 <Phys::allocatePage()>
c000becc:	68 01 04 00 00       	push   0x401
c000bed1:	55                   	push   ebp
c000bed2:	50                   	push   eax
c000bed3:	53                   	push   ebx
c000bed4:	e8 31 29 00 00       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000bed9:	83 c4 10             	add    esp,0x10
c000bedc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bee1:	74 c8                	je     c000beab <sbrk+0x72>
c000bee3:	8b 1d a0 39 02 c0    	mov    ebx,DWORD PTR ds:0xc00239a0
c000bee9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000beec:	eb bd                	jmp    c000beab <sbrk+0x72>
c000beee:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bef3:	74 48                	je     c000bf3d <sbrk+0x104>
c000bef5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bef9:	89 d3                	mov    ebx,edx
c000befb:	c1 eb 0a             	shr    ebx,0xa
c000befe:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf04:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf0e:	c1 e0 0c             	shl    eax,0xc
c000bf11:	01 d0                	add    eax,edx
c000bf13:	c1 e8 0a             	shr    eax,0xa
c000bf16:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf1b:	2d 00 00 40 00       	sub    eax,0x400000
c000bf20:	39 c3                	cmp    ebx,eax
c000bf22:	77 0d                	ja     c000bf31 <sbrk+0xf8>
c000bf24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf27:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf2d:	39 d8                	cmp    eax,ebx
c000bf2f:	73 f3                	jae    c000bf24 <sbrk+0xeb>
c000bf31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf35:	83 c4 1c             	add    esp,0x1c
c000bf38:	5b                   	pop    ebx
c000bf39:	5e                   	pop    esi
c000bf3a:	5f                   	pop    edi
c000bf3b:	5d                   	pop    ebp
c000bf3c:	c3                   	ret    
c000bf3d:	e8 63 37 01 00       	call   c001f6a5 <CPU::readCR3()>
c000bf42:	83 ec 0c             	sub    esp,0xc
c000bf45:	50                   	push   eax
c000bf46:	e8 6c 37 01 00       	call   c001f6b7 <CPU::writeCR3(unsigned long)>
c000bf4b:	83 c4 10             	add    esp,0x10
c000bf4e:	eb e1                	jmp    c000bf31 <sbrk+0xf8>

c000bf50 <mmap>:
c000bf50:	83 ec 18             	sub    esp,0x18
c000bf53:	68 d4 11 02 c0       	push   0xc00211d4
c000bf58:	e8 eb 99 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000bf5d:	b8 00 00 00 00       	mov    eax,0x0
c000bf62:	83 c4 1c             	add    esp,0x1c
c000bf65:	c3                   	ret    

c000bf66 <munmap>:
c000bf66:	83 ec 18             	sub    esp,0x18
c000bf69:	68 d9 11 02 c0       	push   0xc00211d9
c000bf6e:	e8 d5 99 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000bf73:	b8 00 00 00 00       	mov    eax,0x0
c000bf78:	83 c4 1c             	add    esp,0x1c
c000bf7b:	c3                   	ret    

c000bf7c <liballoc_lock()>:
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	e8 b1 c9 00 00       	call   c0018935 <lockScheduler()>
c000bf84:	b8 00 00 00 00       	mov    eax,0x0
c000bf89:	83 c4 0c             	add    esp,0xc
c000bf8c:	c3                   	ret    

c000bf8d <liballoc_unlock()>:
c000bf8d:	83 ec 0c             	sub    esp,0xc
c000bf90:	e8 a2 c9 00 00       	call   c0018937 <unlockScheduler()>
c000bf95:	b8 00 00 00 00       	mov    eax,0x0
c000bf9a:	83 c4 0c             	add    esp,0xc
c000bf9d:	c3                   	ret    

c000bf9e <liballoc_alloc(int)>:
c000bf9e:	83 ec 0c             	sub    esp,0xc
c000bfa1:	e8 25 23 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bfa6:	83 ec 04             	sub    esp,0x4
c000bfa9:	6a 01                	push   0x1
c000bfab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfaf:	50                   	push   eax
c000bfb0:	e8 57 29 00 00       	call   c000e90c <VAS::allocatePages(int, int)>
c000bfb5:	83 c4 1c             	add    esp,0x1c
c000bfb8:	c3                   	ret    

c000bfb9 <liballoc_free(void*, int)>:
c000bfb9:	83 ec 0c             	sub    esp,0xc
c000bfbc:	e8 0a 23 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bfc1:	83 ec 08             	sub    esp,0x8
c000bfc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfc8:	50                   	push   eax
c000bfc9:	e8 de 25 00 00       	call   c000e5ac <VAS::freeAllocatedPages(unsigned long)>
c000bfce:	b8 00 00 00 00       	mov    eax,0x0
c000bfd3:	83 c4 1c             	add    esp,0x1c
c000bfd6:	c3                   	ret    

c000bfd7 <realloc>:
c000bfd7:	83 ec 14             	sub    esp,0x14
c000bfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe2:	e8 51 54 ff ff       	call   c0001438 <dlrealloc>
c000bfe7:	83 c4 1c             	add    esp,0x1c
c000bfea:	c3                   	ret    

c000bfeb <malloc>:
c000bfeb:	83 ec 18             	sub    esp,0x18
c000bfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff2:	e8 04 4f ff ff       	call   c0000efb <dlmalloc>
c000bff7:	83 c4 1c             	add    esp,0x1c
c000bffa:	c3                   	ret    

c000bffb <free>:
c000bffb:	83 ec 18             	sub    esp,0x18
c000bffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c002:	e8 96 4b ff ff       	call   c0000b9d <dlfree>
c000c007:	83 c4 1c             	add    esp,0x1c
c000c00a:	c3                   	ret    

c000c00b <rfree>:
c000c00b:	83 ec 18             	sub    esp,0x18
c000c00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c012:	e8 e4 ff ff ff       	call   c000bffb <free>
c000c017:	83 c4 1c             	add    esp,0x1c
c000c01a:	c3                   	ret    

c000c01b <calloc>:
c000c01b:	56                   	push   esi
c000c01c:	53                   	push   ebx
c000c01d:	83 ec 10             	sub    esp,0x10
c000c020:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c024:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c029:	53                   	push   ebx
c000c02a:	e8 bc ff ff ff       	call   c000bfeb <malloc>
c000c02f:	89 c6                	mov    esi,eax
c000c031:	83 c4 0c             	add    esp,0xc
c000c034:	53                   	push   ebx
c000c035:	6a 00                	push   0x0
c000c037:	50                   	push   eax
c000c038:	e8 7d 46 ff ff       	call   c00006ba <memset>
c000c03d:	89 f0                	mov    eax,esi
c000c03f:	83 c4 14             	add    esp,0x14
c000c042:	5b                   	pop    ebx
c000c043:	5e                   	pop    esi
c000c044:	c3                   	ret    

c000c045 <hwTextMode_loadInData(VgaText*)>:
c000c045:	57                   	push   edi
c000c046:	56                   	push   esi
c000c047:	53                   	push   ebx
c000c048:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c04c:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c052:	85 c0                	test   eax,eax
c000c054:	7e 30                	jle    c000c086 <hwTextMode_loadInData(VgaText*)+0x41>
c000c056:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c059:	31 f6                	xor    esi,esi
c000c05b:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c05e:	31 c0                	xor    eax,eax
c000c060:	c1 e1 05             	shl    ecx,0x5
c000c063:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c069:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c06d:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c071:	40                   	inc    eax
c000c072:	83 f8 50             	cmp    eax,0x50
c000c075:	75 f2                	jne    c000c069 <hwTextMode_loadInData(VgaText*)+0x24>
c000c077:	46                   	inc    esi
c000c078:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c07e:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c084:	7f d5                	jg     c000c05b <hwTextMode_loadInData(VgaText*)+0x16>
c000c086:	5b                   	pop    ebx
c000c087:	5e                   	pop    esi
c000c088:	5f                   	pop    edi
c000c089:	c3                   	ret    

c000c08a <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c08a:	56                   	push   esi
c000c08b:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c090:	53                   	push   ebx
c000c091:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c095:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c099:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c09f:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c0a5:	c1 e0 04             	shl    eax,0x4
c000c0a8:	83 e6 0f             	and    esi,0xf
c000c0ab:	25 ff 00 00 00       	and    eax,0xff
c000c0b0:	83 c2 02             	add    edx,0x2
c000c0b3:	09 f0                	or     eax,esi
c000c0b5:	41                   	inc    ecx
c000c0b6:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0ba:	c1 e0 08             	shl    eax,0x8
c000c0bd:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0c3:	09 f0                	or     eax,esi
c000c0c5:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0c9:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0cf:	75 c8                	jne    c000c099 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0d1:	5b                   	pop    ebx
c000c0d2:	5e                   	pop    esi
c000c0d3:	c3                   	ret    

c000c0d4 <hwTextMode_showCursor(VgaText*, bool)>:
c000c0d4:	56                   	push   esi
c000c0d5:	53                   	push   ebx
c000c0d6:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0db:	74 38                	je     c000c115 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0dd:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0e2:	b0 0a                	mov    al,0xa
c000c0e4:	89 da                	mov    edx,ebx
c000c0e6:	ee                   	out    dx,al
c000c0e7:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0ec:	89 ca                	mov    edx,ecx
c000c0ee:	ec                   	in     al,dx
c000c0ef:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0f3:	b2 0f                	mov    dl,0xf
c000c0f5:	83 e0 c0             	and    eax,0xffffffc0
c000c0f8:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0fe:	09 d0                	or     eax,edx
c000c100:	89 ca                	mov    edx,ecx
c000c102:	ee                   	out    dx,al
c000c103:	b0 0b                	mov    al,0xb
c000c105:	89 da                	mov    edx,ebx
c000c107:	ee                   	out    dx,al
c000c108:	89 ca                	mov    edx,ecx
c000c10a:	ec                   	in     al,dx
c000c10b:	83 e0 e0             	and    eax,0xffffffe0
c000c10e:	83 c8 0f             	or     eax,0xf
c000c111:	ee                   	out    dx,al
c000c112:	5b                   	pop    ebx
c000c113:	5e                   	pop    esi
c000c114:	c3                   	ret    
c000c115:	b0 0a                	mov    al,0xa
c000c117:	ba d4 03 00 00       	mov    edx,0x3d4
c000c11c:	ee                   	out    dx,al
c000c11d:	b0 20                	mov    al,0x20
c000c11f:	ba d5 03 00 00       	mov    edx,0x3d5
c000c124:	ee                   	out    dx,al
c000c125:	5b                   	pop    ebx
c000c126:	5e                   	pop    esi
c000c127:	c3                   	ret    

c000c128 <hwTextMode_update(VgaText*)>:
c000c128:	c3                   	ret    

c000c129 <hwTextMode_updateCursor(VgaText*)>:
c000c129:	56                   	push   esi
c000c12a:	b9 19 00 00 00       	mov    ecx,0x19
c000c12f:	53                   	push   ebx
c000c130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c134:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c13a:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c140:	29 d1                	sub    ecx,edx
c000c142:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c148:	01 d9                	add    ecx,ebx
c000c14a:	b0 0f                	mov    al,0xf
c000c14c:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c14f:	c1 e1 04             	shl    ecx,0x4
c000c152:	01 f1                	add    ecx,esi
c000c154:	be d4 03 00 00       	mov    esi,0x3d4
c000c159:	89 f2                	mov    edx,esi
c000c15b:	ee                   	out    dx,al
c000c15c:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c161:	88 c8                	mov    al,cl
c000c163:	89 da                	mov    edx,ebx
c000c165:	ee                   	out    dx,al
c000c166:	b0 0e                	mov    al,0xe
c000c168:	89 f2                	mov    edx,esi
c000c16a:	ee                   	out    dx,al
c000c16b:	89 c8                	mov    eax,ecx
c000c16d:	89 da                	mov    edx,ebx
c000c16f:	66 c1 e8 08          	shr    ax,0x8
c000c173:	ee                   	out    dx,al
c000c174:	5b                   	pop    ebx
c000c175:	5e                   	pop    esi
c000c176:	c3                   	ret    

c000c177 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c177:	ba da 03 00 00       	mov    edx,0x3da
c000c17c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c181:	75 18                	jne    c000c19b <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c183:	ec                   	in     al,dx
c000c184:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c189:	b0 30                	mov    al,0x30
c000c18b:	89 ca                	mov    edx,ecx
c000c18d:	ee                   	out    dx,al
c000c18e:	ba c1 03 00 00       	mov    edx,0x3c1
c000c193:	ec                   	in     al,dx
c000c194:	83 c8 08             	or     eax,0x8
c000c197:	89 ca                	mov    edx,ecx
c000c199:	ee                   	out    dx,al
c000c19a:	c3                   	ret    
c000c19b:	ec                   	in     al,dx
c000c19c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1a1:	b0 30                	mov    al,0x30
c000c1a3:	89 ca                	mov    edx,ecx
c000c1a5:	ee                   	out    dx,al
c000c1a6:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1ab:	ec                   	in     al,dx
c000c1ac:	83 e0 f7             	and    eax,0xfffffff7
c000c1af:	89 ca                	mov    edx,ecx
c000c1b1:	ee                   	out    dx,al
c000c1b2:	c3                   	ret    

c000c1b3 <hwTextMode_scrollScreen(VgaText*)>:
c000c1b3:	55                   	push   ebp
c000c1b4:	bd 02 00 00 00       	mov    ebp,0x2
c000c1b9:	57                   	push   edi
c000c1ba:	56                   	push   esi
c000c1bb:	53                   	push   ebx
c000c1bc:	83 ec 1c             	sub    esp,0x1c
c000c1bf:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1cb:	31 c0                	xor    eax,eax
c000c1cd:	eb 0b                	jmp    c000c1da <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1cf:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1d5:	74 58                	je     c000c22f <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1d7:	43                   	inc    ebx
c000c1d8:	89 f0                	mov    eax,esi
c000c1da:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1e0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1e6:	88 13                	mov    BYTE PTR [ebx],dl
c000c1e8:	8d 70 01             	lea    esi,[eax+0x1]
c000c1eb:	83 fd 18             	cmp    ebp,0x18
c000c1ee:	75 df                	jne    c000c1cf <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1f0:	a8 01                	test   al,0x1
c000c1f2:	75 13                	jne    c000c207 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1f4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1f7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1fd:	75 d8                	jne    c000c1d7 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1ff:	83 c4 1c             	add    esp,0x1c
c000c202:	5b                   	pop    ebx
c000c203:	5e                   	pop    esi
c000c204:	5f                   	pop    edi
c000c205:	5d                   	pop    ebp
c000c206:	c3                   	ret    
c000c207:	52                   	push   edx
c000c208:	31 c0                	xor    eax,eax
c000c20a:	52                   	push   edx
c000c20b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c20f:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c215:	50                   	push   eax
c000c216:	31 c0                	xor    eax,eax
c000c218:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c21c:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c222:	50                   	push   eax
c000c223:	e8 84 0b 00 00       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000c228:	83 c4 10             	add    esp,0x10
c000c22b:	88 07                	mov    BYTE PTR [edi],al
c000c22d:	eb c8                	jmp    c000c1f7 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c22f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c233:	45                   	inc    ebp
c000c234:	05 a0 00 00 00       	add    eax,0xa0
c000c239:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c23d:	eb 88                	jmp    c000c1c7 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c23f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c23f:	56                   	push   esi
c000c240:	31 c0                	xor    eax,eax
c000c242:	53                   	push   ebx
c000c243:	83 ec 0c             	sub    esp,0xc
c000c246:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c24a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c24e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c252:	50                   	push   eax
c000c253:	31 c0                	xor    eax,eax
c000c255:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c259:	50                   	push   eax
c000c25a:	e8 4d 0b 00 00       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000c25f:	5a                   	pop    edx
c000c260:	25 ff 00 00 00       	and    eax,0xff
c000c265:	59                   	pop    ecx
c000c266:	50                   	push   eax
c000c267:	89 f0                	mov    eax,esi
c000c269:	0f be f0             	movsx  esi,al
c000c26c:	56                   	push   esi
c000c26d:	e8 e0 0b 00 00       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000c272:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c276:	ba 19 00 00 00       	mov    edx,0x19
c000c27b:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c281:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c284:	29 f2                	sub    edx,esi
c000c286:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c28a:	c1 e1 04             	shl    ecx,0x4
c000c28d:	8d 14 92             	lea    edx,[edx+edx*4]
c000c290:	01 d9                	add    ecx,ebx
c000c292:	c1 e2 04             	shl    edx,0x4
c000c295:	01 ca                	add    edx,ecx
c000c297:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c29f:	83 c4 14             	add    esp,0x14
c000c2a2:	5b                   	pop    ebx
c000c2a3:	5e                   	pop    esi
c000c2a4:	c3                   	ret    

c000c2a5 <setupTextMode()>:
c000c2a5:	c7 05 38 46 02 c0 77 c1 00 c0 	mov    DWORD PTR ds:0xc0024638,0xc000c177
c000c2af:	c7 05 24 46 02 c0 45 c0 00 c0 	mov    DWORD PTR ds:0xc0024624,0xc000c045
c000c2b9:	c7 05 20 46 02 c0 8a c0 00 c0 	mov    DWORD PTR ds:0xc0024620,0xc000c08a
c000c2c3:	c7 05 2c 46 02 c0 b3 c1 00 c0 	mov    DWORD PTR ds:0xc002462c,0xc000c1b3
c000c2cd:	c7 05 34 46 02 c0 d4 c0 00 c0 	mov    DWORD PTR ds:0xc0024634,0xc000c0d4
c000c2d7:	c7 05 28 46 02 c0 28 c1 00 c0 	mov    DWORD PTR ds:0xc0024628,0xc000c128
c000c2e1:	c7 05 30 46 02 c0 29 c1 00 c0 	mov    DWORD PTR ds:0xc0024630,0xc000c129
c000c2eb:	c7 05 3c 46 02 c0 3f c2 00 c0 	mov    DWORD PTR ds:0xc002463c,0xc000c23f
c000c2f5:	c3                   	ret    

c000c2f6 <kernel_main>:
c000c2f6:	57                   	push   edi
c000c2f7:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2fc:	56                   	push   esi
c000c2fd:	31 f6                	xor    esi,esi
c000c2ff:	53                   	push   ebx
c000c300:	83 ec 10             	sub    esp,0x10
c000c303:	e8 fe 08 00 00       	call   c000cc06 <installVgaTextImplementation()>
c000c308:	e8 98 ff ff ff       	call   c000c2a5 <setupTextMode()>
c000c30d:	89 f0                	mov    eax,esi
c000c30f:	89 fa                	mov    edx,edi
c000c311:	ee                   	out    dx,al
c000c312:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c317:	b0 80                	mov    al,0x80
c000c319:	89 da                	mov    edx,ebx
c000c31b:	ee                   	out    dx,al
c000c31c:	b1 03                	mov    cl,0x3
c000c31e:	ba f8 03 00 00       	mov    edx,0x3f8
c000c323:	88 c8                	mov    al,cl
c000c325:	ee                   	out    dx,al
c000c326:	89 f0                	mov    eax,esi
c000c328:	89 fa                	mov    edx,edi
c000c32a:	ee                   	out    dx,al
c000c32b:	88 c8                	mov    al,cl
c000c32d:	89 da                	mov    edx,ebx
c000c32f:	ee                   	out    dx,al
c000c330:	b0 c7                	mov    al,0xc7
c000c332:	ba fa 03 00 00       	mov    edx,0x3fa
c000c337:	ee                   	out    dx,al
c000c338:	b0 0b                	mov    al,0xb
c000c33a:	ba fc 03 00 00       	mov    edx,0x3fc
c000c33f:	ee                   	out    dx,al
c000c340:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c345:	83 ec 0c             	sub    esp,0xc
c000c348:	05 ff 0f 00 00       	add    eax,0xfff
c000c34d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c352:	50                   	push   eax
c000c353:	e8 6d 03 00 00       	call   c000c6c5 <Phys::physicalMemorySetup(unsigned int)>
c000c358:	e8 f2 1e 00 00       	call   c000e24f <Virt::virtualMemorySetup()>
c000c35d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c363:	83 c4 10             	add    esp,0x10
c000c366:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c36c:	75 0e                	jne    c000c37c <kernel_main+0x86>
c000c36e:	89 d8                	mov    eax,ebx
c000c370:	25 48 03 00 00       	and    eax,0x348
c000c375:	3d 00 03 00 00       	cmp    eax,0x300
c000c37a:	74 10                	je     c000c38c <kernel_main+0x96>
c000c37c:	83 ec 0c             	sub    esp,0xc
c000c37f:	68 07 27 02 c0       	push   0xc0022707
c000c384:	e8 bf 95 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000c389:	83 c4 10             	add    esp,0x10
c000c38c:	83 ec 0c             	sub    esp,0xc
c000c38f:	89 1d a0 45 02 c0    	mov    DWORD PTR ds:0xc00245a0,ebx
c000c395:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c399:	53                   	push   ebx
c000c39a:	e8 4d 20 00 00       	call   c000e3ec <VAS::VAS()>
c000c39f:	89 1d e4 46 02 c0    	mov    DWORD PTR ds:0xc00246e4,ebx
c000c3a5:	e8 76 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3aa:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3b1:	e8 6e 2c 00 00       	call   c000f024 <operator new(unsigned long)>
c000c3b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3b9:	89 c6                	mov    esi,eax
c000c3bb:	e8 64 ea ff ff       	call   c000ae24 <Computer::Computer()>
c000c3c0:	6a 00                	push   0x0
c000c3c2:	6a 00                	push   0x0
c000c3c4:	89 35 88 45 02 c0    	mov    DWORD PTR ds:0xc0024588,esi
c000c3ca:	6a 00                	push   0x0
c000c3cc:	56                   	push   esi
c000c3cd:	e8 5c f2 ff ff       	call   c000b62e <Computer::open(int, int, void*)>
c000c3d2:	83 c4 14             	add    esp,0x14
c000c3d5:	53                   	push   ebx
c000c3d6:	e8 c3 22 00 00       	call   c000e69e <VAS::~VAS()>
c000c3db:	c7 04 24 e0 11 02 c0 	mov    DWORD PTR [esp],0xc00211e0
c000c3e2:	e8 61 95 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000c3e7:	83 c4 20             	add    esp,0x20
c000c3ea:	5b                   	pop    ebx
c000c3eb:	5e                   	pop    esi
c000c3ec:	5f                   	pop    edi
c000c3ed:	c3                   	ret    

c000c3ee <Phys::allocateDMA(unsigned long)>:
c000c3ee:	57                   	push   edi
c000c3ef:	31 d2                	xor    edx,edx
c000c3f1:	56                   	push   esi
c000c3f2:	31 ff                	xor    edi,edi
c000c3f4:	53                   	push   ebx
c000c3f5:	31 c9                	xor    ecx,ecx
c000c3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3fb:	31 f6                	xor    esi,esi
c000c3fd:	05 ff 0f 00 00       	add    eax,0xfff
c000c402:	c1 e8 0c             	shr    eax,0xc
c000c405:	eb 17                	jmp    c000c41e <Phys::allocateDMA(unsigned long)+0x30>
c000c407:	85 c9                	test   ecx,ecx
c000c409:	75 04                	jne    c000c40f <Phys::allocateDMA(unsigned long)+0x21>
c000c40b:	89 d7                	mov    edi,edx
c000c40d:	89 d6                	mov    esi,edx
c000c40f:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c412:	39 d8                	cmp    eax,ebx
c000c414:	74 1f                	je     c000c435 <Phys::allocateDMA(unsigned long)+0x47>
c000c416:	42                   	inc    edx
c000c417:	89 d9                	mov    ecx,ebx
c000c419:	83 fa 2f             	cmp    edx,0x2f
c000c41c:	7f 11                	jg     c000c42f <Phys::allocateDMA(unsigned long)+0x41>
c000c41e:	80 ba e0 45 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdba20],0x0
c000c425:	74 e0                	je     c000c407 <Phys::allocateDMA(unsigned long)+0x19>
c000c427:	31 c9                	xor    ecx,ecx
c000c429:	42                   	inc    edx
c000c42a:	83 fa 2f             	cmp    edx,0x2f
c000c42d:	7e ef                	jle    c000c41e <Phys::allocateDMA(unsigned long)+0x30>
c000c42f:	5b                   	pop    ebx
c000c430:	31 c0                	xor    eax,eax
c000c432:	5e                   	pop    esi
c000c433:	5f                   	pop    edi
c000c434:	c3                   	ret    
c000c435:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c439:	89 d3                	mov    ebx,edx
c000c43b:	c1 fb 1f             	sar    ebx,0x1f
c000c43e:	83 e3 0f             	and    ebx,0xf
c000c441:	01 d3                	add    ebx,edx
c000c443:	89 f2                	mov    edx,esi
c000c445:	c1 fb 04             	sar    ebx,0x4
c000c448:	c1 fa 04             	sar    edx,0x4
c000c44b:	39 da                	cmp    edx,ebx
c000c44d:	75 30                	jne    c000c47f <Phys::allocateDMA(unsigned long)+0x91>
c000c44f:	85 c0                	test   eax,eax
c000c451:	74 1b                	je     c000c46e <Phys::allocateDMA(unsigned long)+0x80>
c000c453:	bf e0 45 02 c0       	mov    edi,0xc00245e0
c000c458:	8d 96 e0 45 02 c0    	lea    edx,[esi-0x3ffdba20]
c000c45e:	83 f7 ff             	xor    edi,0xffffffff
c000c461:	29 f7                	sub    edi,esi
c000c463:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c466:	42                   	inc    edx
c000c467:	8d 04 17             	lea    eax,[edi+edx*1]
c000c46a:	39 c1                	cmp    ecx,eax
c000c46c:	7f f5                	jg     c000c463 <Phys::allocateDMA(unsigned long)+0x75>
c000c46e:	85 db                	test   ebx,ebx
c000c470:	74 13                	je     c000c485 <Phys::allocateDMA(unsigned long)+0x97>
c000c472:	5b                   	pop    ebx
c000c473:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c479:	c1 e0 0c             	shl    eax,0xc
c000c47c:	5e                   	pop    esi
c000c47d:	5f                   	pop    edi
c000c47e:	c3                   	ret    
c000c47f:	89 fa                	mov    edx,edi
c000c481:	31 c9                	xor    ecx,ecx
c000c483:	eb a4                	jmp    c000c429 <Phys::allocateDMA(unsigned long)+0x3b>
c000c485:	c1 e6 0c             	shl    esi,0xc
c000c488:	5b                   	pop    ebx
c000c489:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c48f:	5e                   	pop    esi
c000c490:	5f                   	pop    edi
c000c491:	c3                   	ret    

c000c492 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c492:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c49a:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c4a0:	c1 e9 0c             	shr    ecx,0xc
c000c4a3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4a8:	76 25                	jbe    c000c4cf <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4aa:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4af:	c1 e8 0c             	shr    eax,0xc
c000c4b2:	8d 50 10             	lea    edx,[eax+0x10]
c000c4b5:	85 c9                	test   ecx,ecx
c000c4b7:	74 15                	je     c000c4ce <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4b9:	8d 82 e0 45 02 c0    	lea    eax,[edx-0x3ffdba20]
c000c4bf:	8d 94 11 e0 45 02 c0 	lea    edx,[ecx+edx*1-0x3ffdba20]
c000c4c6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4c9:	40                   	inc    eax
c000c4ca:	39 d0                	cmp    eax,edx
c000c4cc:	75 f8                	jne    c000c4c6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4ce:	c3                   	ret    
c000c4cf:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4d5:	c1 ea 0c             	shr    edx,0xc
c000c4d8:	eb db                	jmp    c000c4b5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4da <Phys::setPageState(unsigned long, bool)>:
c000c4da:	56                   	push   esi
c000c4db:	ba 01 00 00 00       	mov    edx,0x1
c000c4e0:	53                   	push   ebx
c000c4e1:	8b 35 a4 39 02 c0    	mov    esi,DWORD PTR ds:0xc00239a4
c000c4e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4ef:	89 c8                	mov    eax,ecx
c000c4f1:	83 e1 07             	and    ecx,0x7
c000c4f4:	c1 e8 03             	shr    eax,0x3
c000c4f7:	01 c6                	add    esi,eax
c000c4f9:	d3 e2                	shl    edx,cl
c000c4fb:	83 f2 ff             	xor    edx,0xffffffff
c000c4fe:	20 16                	and    BYTE PTR [esi],dl
c000c500:	8b 15 a4 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239a4
c000c506:	01 d0                	add    eax,edx
c000c508:	d3 e3                	shl    ebx,cl
c000c50a:	8a 08                	mov    cl,BYTE PTR [eax]
c000c50c:	09 d9                	or     ecx,ebx
c000c50e:	88 08                	mov    BYTE PTR [eax],cl
c000c510:	5b                   	pop    ebx
c000c511:	5e                   	pop    esi
c000c512:	c3                   	ret    

c000c513 <Phys::getPageState(unsigned long)>:
c000c513:	53                   	push   ebx
c000c514:	8b 15 a4 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239a4
c000c51a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c51e:	31 db                	xor    ebx,ebx
c000c520:	89 c8                	mov    eax,ecx
c000c522:	83 e1 07             	and    ecx,0x7
c000c525:	c1 e8 03             	shr    eax,0x3
c000c528:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c52b:	89 d8                	mov    eax,ebx
c000c52d:	5b                   	pop    ebx
c000c52e:	d3 f8                	sar    eax,cl
c000c530:	83 e0 01             	and    eax,0x1
c000c533:	c3                   	ret    

c000c534 <Phys::freePage(unsigned long)>:
c000c534:	53                   	push   ebx
c000c535:	83 ec 08             	sub    esp,0x8
c000c538:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c53c:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c542:	76 5a                	jbe    c000c59e <Phys::freePage(unsigned long)+0x6a>
c000c544:	c1 eb 0c             	shr    ebx,0xc
c000c547:	53                   	push   ebx
c000c548:	e8 c6 ff ff ff       	call   c000c513 <Phys::getPageState(unsigned long)>
c000c54d:	5a                   	pop    edx
c000c54e:	84 c0                	test   al,al
c000c550:	74 5e                	je     c000c5b0 <Phys::freePage(unsigned long)+0x7c>
c000c552:	a1 cc 45 02 c0       	mov    eax,ds:0xc00245cc
c000c557:	48                   	dec    eax
c000c558:	a3 cc 45 02 c0       	mov    ds:0xc00245cc,eax
c000c55d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c560:	8d 04 80             	lea    eax,[eax+eax*4]
c000c563:	c1 e0 02             	shl    eax,0x2
c000c566:	89 c2                	mov    edx,eax
c000c568:	c1 fa 1f             	sar    edx,0x1f
c000c56b:	f7 3d d0 45 02 c0    	idiv   DWORD PTR ds:0xc00245d0
c000c571:	39 05 c8 45 02 c0    	cmp    DWORD PTR ds:0xc00245c8,eax
c000c577:	75 12                	jne    c000c58b <Phys::freePage(unsigned long)+0x57>
c000c579:	51                   	push   ecx
c000c57a:	51                   	push   ecx
c000c57b:	6a 00                	push   0x0
c000c57d:	53                   	push   ebx
c000c57e:	e8 57 ff ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c583:	83 c4 10             	add    esp,0x10
c000c586:	83 c4 08             	add    esp,0x8
c000c589:	5b                   	pop    ebx
c000c58a:	c3                   	ret    
c000c58b:	83 ec 0c             	sub    esp,0xc
c000c58e:	a3 c8 45 02 c0       	mov    ds:0xc00245c8,eax
c000c593:	50                   	push   eax
c000c594:	e8 01 0a 00 00       	call   c000cf9a <VgaText::updateRAMUsageDisplay(int)>
c000c599:	83 c4 10             	add    esp,0x10
c000c59c:	eb db                	jmp    c000c579 <Phys::freePage(unsigned long)+0x45>
c000c59e:	68 00 10 00 00       	push   0x1000
c000c5a3:	53                   	push   ebx
c000c5a4:	e8 e9 fe ff ff       	call   c000c492 <Phys::freeDMA(unsigned long, unsigned long)>
c000c5a9:	59                   	pop    ecx
c000c5aa:	5b                   	pop    ebx
c000c5ab:	83 c4 08             	add    esp,0x8
c000c5ae:	5b                   	pop    ebx
c000c5af:	c3                   	ret    
c000c5b0:	c7 44 24 10 fb 11 02 c0 	mov    DWORD PTR [esp+0x10],0xc00211fb
c000c5b8:	83 c4 08             	add    esp,0x8
c000c5bb:	5b                   	pop    ebx
c000c5bc:	e9 87 93 00 00       	jmp    c0015948 <Krnl::panic(char const*)>

c000c5c1 <Phys::allocatePage()>:
c000c5c1:	56                   	push   esi
c000c5c2:	53                   	push   ebx
c000c5c3:	51                   	push   ecx
c000c5c4:	8b 35 c0 45 02 c0    	mov    esi,DWORD PTR ds:0xc00245c0
c000c5ca:	89 f3                	mov    ebx,esi
c000c5cc:	eb 0a                	jmp    c000c5d8 <Phys::allocatePage()+0x17>
c000c5ce:	89 1d c0 45 02 c0    	mov    DWORD PTR ds:0xc00245c0,ebx
c000c5d4:	39 de                	cmp    esi,ebx
c000c5d6:	74 24                	je     c000c5fc <Phys::allocatePage()+0x3b>
c000c5d8:	53                   	push   ebx
c000c5d9:	e8 35 ff ff ff       	call   c000c513 <Phys::getPageState(unsigned long)>
c000c5de:	5a                   	pop    edx
c000c5df:	84 c0                	test   al,al
c000c5e1:	74 5a                	je     c000c63d <Phys::allocatePage()+0x7c>
c000c5e3:	43                   	inc    ebx
c000c5e4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5ea:	75 e2                	jne    c000c5ce <Phys::allocatePage()+0xd>
c000c5ec:	31 db                	xor    ebx,ebx
c000c5ee:	c7 05 c0 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00245c0,0x0
c000c5f8:	39 de                	cmp    esi,ebx
c000c5fa:	75 dc                	jne    c000c5d8 <Phys::allocatePage()+0x17>
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	68 11 12 02 c0       	push   0xc0021211
c000c604:	e8 50 2b 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c609:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c610:	e8 d9 fd ff ff       	call   c000c3ee <Phys::allocateDMA(unsigned long)>
c000c615:	83 c4 10             	add    esp,0x10
c000c618:	85 c0                	test   eax,eax
c000c61a:	75 5a                	jne    c000c676 <Phys::allocatePage()+0xb5>
c000c61c:	83 ec 0c             	sub    esp,0xc
c000c61f:	68 22 12 02 c0       	push   0xc0021222
c000c624:	e8 1f 93 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000c629:	83 c4 10             	add    esp,0x10
c000c62c:	8b 1d c0 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c0
c000c632:	53                   	push   ebx
c000c633:	e8 db fe ff ff       	call   c000c513 <Phys::getPageState(unsigned long)>
c000c638:	5a                   	pop    edx
c000c639:	84 c0                	test   al,al
c000c63b:	75 a6                	jne    c000c5e3 <Phys::allocatePage()+0x22>
c000c63d:	6a 01                	push   0x1
c000c63f:	53                   	push   ebx
c000c640:	e8 95 fe ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c645:	a1 cc 45 02 c0       	mov    eax,ds:0xc00245cc
c000c64a:	59                   	pop    ecx
c000c64b:	40                   	inc    eax
c000c64c:	5b                   	pop    ebx
c000c64d:	a3 cc 45 02 c0       	mov    ds:0xc00245cc,eax
c000c652:	8d 04 80             	lea    eax,[eax+eax*4]
c000c655:	8d 04 80             	lea    eax,[eax+eax*4]
c000c658:	c1 e0 02             	shl    eax,0x2
c000c65b:	89 c2                	mov    edx,eax
c000c65d:	c1 fa 1f             	sar    edx,0x1f
c000c660:	f7 3d d0 45 02 c0    	idiv   DWORD PTR ds:0xc00245d0
c000c666:	39 05 c8 45 02 c0    	cmp    DWORD PTR ds:0xc00245c8,eax
c000c66c:	75 0c                	jne    c000c67a <Phys::allocatePage()+0xb9>
c000c66e:	a1 c0 45 02 c0       	mov    eax,ds:0xc00245c0
c000c673:	c1 e0 0c             	shl    eax,0xc
c000c676:	5a                   	pop    edx
c000c677:	5b                   	pop    ebx
c000c678:	5e                   	pop    esi
c000c679:	c3                   	ret    
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	a3 c8 45 02 c0       	mov    ds:0xc00245c8,eax
c000c682:	50                   	push   eax
c000c683:	e8 12 09 00 00       	call   c000cf9a <VgaText::updateRAMUsageDisplay(int)>
c000c688:	83 c4 10             	add    esp,0x10
c000c68b:	eb e1                	jmp    c000c66e <Phys::allocatePage()+0xad>

c000c68d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c68d:	56                   	push   esi
c000c68e:	53                   	push   ebx
c000c68f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c693:	39 1d c4 45 02 c0    	cmp    DWORD PTR ds:0xc00245c4,ebx
c000c699:	73 06                	jae    c000c6a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c69b:	89 1d c4 45 02 c0    	mov    DWORD PTR ds:0xc00245c4,ebx
c000c6a1:	c1 eb 0c             	shr    ebx,0xc
c000c6a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6a8:	c1 e8 0c             	shr    eax,0xc
c000c6ab:	39 d8                	cmp    eax,ebx
c000c6ad:	73 13                	jae    c000c6c2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6af:	6a 00                	push   0x0
c000c6b1:	8d 70 01             	lea    esi,[eax+0x1]
c000c6b4:	50                   	push   eax
c000c6b5:	e8 20 fe ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c6ba:	5a                   	pop    edx
c000c6bb:	89 f0                	mov    eax,esi
c000c6bd:	59                   	pop    ecx
c000c6be:	39 f3                	cmp    ebx,esi
c000c6c0:	75 ed                	jne    c000c6af <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6c2:	5b                   	pop    ebx
c000c6c3:	5e                   	pop    esi
c000c6c4:	c3                   	ret    

c000c6c5 <Phys::physicalMemorySetup(unsigned int)>:
c000c6c5:	55                   	push   ebp
c000c6c6:	57                   	push   edi
c000c6c7:	56                   	push   esi
c000c6c8:	53                   	push   ebx
c000c6c9:	31 db                	xor    ebx,ebx
c000c6cb:	83 ec 40             	sub    esp,0x40
c000c6ce:	6a 30                	push   0x30
c000c6d0:	6a 00                	push   0x0
c000c6d2:	68 e0 45 02 c0       	push   0xc00245e0
c000c6d7:	e8 de 3f ff ff       	call   c00006ba <memset>
c000c6dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6e5:	05 00 10 00 00       	add    eax,0x1000
c000c6ea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6ee:	83 c4 10             	add    esp,0x10
c000c6f1:	56                   	push   esi
c000c6f2:	56                   	push   esi
c000c6f3:	6a 01                	push   0x1
c000c6f5:	53                   	push   ebx
c000c6f6:	43                   	inc    ebx
c000c6f7:	e8 de fd ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c6fc:	83 c4 10             	add    esp,0x10
c000c6ff:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c705:	75 ea                	jne    c000c6f1 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c707:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c70d:	66 85 c0             	test   ax,ax
c000c710:	0f 84 3b 01 00 00    	je     c000c851 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c716:	89 c7                	mov    edi,eax
c000c718:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c720:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c726:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c72b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c72f:	eb 6d                	jmp    c000c79e <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c731:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c735:	89 c1                	mov    ecx,eax
c000c737:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c73b:	0f 83 bc 00 00 00    	jae    c000c7fd <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c741:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c745:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c74a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c74e:	39 f2                	cmp    edx,esi
c000c750:	19 f8                	sbb    eax,edi
c000c752:	73 07                	jae    c000c75b <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c754:	be 00 00 0a 00       	mov    esi,0xa0000
c000c759:	31 ff                	xor    edi,edi
c000c75b:	89 f2                	mov    edx,esi
c000c75d:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c762:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c768:	89 f9                	mov    ecx,edi
c000c76a:	83 d1 ff             	adc    ecx,0xffffffff
c000c76d:	39 d0                	cmp    eax,edx
c000c76f:	b8 00 00 00 00       	mov    eax,0x0
c000c774:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c778:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c77c:	19 c8                	sbb    eax,ecx
c000c77e:	0f 82 0d 01 00 00    	jb     c000c891 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c784:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c788:	83 c3 18             	add    ebx,0x18
c000c78b:	41                   	inc    ecx
c000c78c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c790:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c794:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c798:	0f 84 c3 00 00 00    	je     c000c861 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c79e:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c7a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c7a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c7a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7aa:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c7ad:	01 f0                	add    eax,esi
c000c7af:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7ba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7be:	11 fa                	adc    edx,edi
c000c7c0:	55                   	push   ebp
c000c7c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7c5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7cd:	51                   	push   ecx
c000c7ce:	56                   	push   esi
c000c7cf:	68 5c 12 02 c0       	push   0xc002125c
c000c7d4:	e8 80 29 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c7d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7dd:	83 c4 10             	add    esp,0x10
c000c7e0:	09 f8                	or     eax,edi
c000c7e2:	75 7d                	jne    c000c861 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7e4:	83 fd 01             	cmp    ebp,0x1
c000c7e7:	75 11                	jne    c000c7fa <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7e9:	ba 00 00 08 00       	mov    edx,0x80000
c000c7ee:	89 c1                	mov    ecx,eax
c000c7f0:	39 f2                	cmp    edx,esi
c000c7f2:	19 f9                	sbb    ecx,edi
c000c7f4:	0f 83 37 ff ff ff    	jae    c000c731 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7fa:	4d                   	dec    ebp
c000c7fb:	75 87                	jne    c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7fd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c801:	31 d2                	xor    edx,edx
c000c803:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c807:	89 c8                	mov    eax,ecx
c000c809:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c80d:	19 d1                	sbb    ecx,edx
c000c80f:	0f 82 6f ff ff ff    	jb     c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c815:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c81a:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c81e:	b9 00 00 00 00       	mov    ecx,0x0
c000c823:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c827:	0f 83 57 ff ff ff    	jae    c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c82d:	39 c6                	cmp    esi,eax
c000c82f:	19 d7                	sbb    edi,edx
c000c831:	73 6a                	jae    c000c89d <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c833:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c837:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c83b:	29 c7                	sub    edi,eax
c000c83d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c841:	19 d5                	sbb    ebp,edx
c000c843:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c847:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c84b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c84f:	eb 4c                	jmp    c000c89d <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c851:	83 ec 0c             	sub    esp,0xc
c000c854:	68 30 12 02 c0       	push   0xc0021230
c000c859:	e8 ea 90 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000c85e:	83 c4 10             	add    esp,0x10
c000c861:	bb 40 01 00 00       	mov    ebx,0x140
c000c866:	50                   	push   eax
c000c867:	50                   	push   eax
c000c868:	6a 00                	push   0x0
c000c86a:	53                   	push   ebx
c000c86b:	e8 6a fc ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c870:	8b 15 d0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245d0
c000c876:	43                   	inc    ebx
c000c877:	42                   	inc    edx
c000c878:	83 c4 10             	add    esp,0x10
c000c87b:	89 15 d0 45 02 c0    	mov    DWORD PTR ds:0xc00245d0,edx
c000c881:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c887:	75 dd                	jne    c000c866 <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c889:	83 c4 3c             	add    esp,0x3c
c000c88c:	5b                   	pop    ebx
c000c88d:	5e                   	pop    esi
c000c88e:	5f                   	pop    edi
c000c88f:	5d                   	pop    ebp
c000c890:	c3                   	ret    
c000c891:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c895:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c89d:	56                   	push   esi
c000c89e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c8a2:	56                   	push   esi
c000c8a3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c8a7:	57                   	push   edi
c000c8a8:	68 80 12 02 c0       	push   0xc0021280
c000c8ad:	e8 a7 28 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c8b2:	5d                   	pop    ebp
c000c8b3:	58                   	pop    eax
c000c8b4:	56                   	push   esi
c000c8b5:	57                   	push   edi
c000c8b6:	e8 d2 fd ff ff       	call   c000c68d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8c3:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8c7:	8b 15 d0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245d0
c000c8cd:	83 c4 0c             	add    esp,0xc
c000c8d0:	01 d0                	add    eax,edx
c000c8d2:	a3 d0 45 02 c0       	mov    ds:0xc00245d0,eax
c000c8d7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8de:	52                   	push   edx
c000c8df:	50                   	push   eax
c000c8e0:	68 3e 12 02 c0       	push   0xc002123e
c000c8e5:	e8 6f 28 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c8ea:	83 c4 10             	add    esp,0x10
c000c8ed:	e9 92 fe ff ff       	jmp    c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8f2 <Pipe::isAtty()>:
c000c8f2:	31 c0                	xor    eax,eax
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <Pipe::~Pipe()>:
c000c8f6:	83 ec 0c             	sub    esp,0xc
c000c8f9:	ba ec 12 02 c0       	mov    edx,0xc00212ec
c000c8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c902:	89 10                	mov    DWORD PTR [eax],edx
c000c904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c908:	83 ec 0c             	sub    esp,0xc
c000c90b:	50                   	push   eax
c000c90c:	e8 c7 15 00 00       	call   c000ded8 <UnixFile::~UnixFile()>
c000c911:	83 c4 10             	add    esp,0x10
c000c914:	90                   	nop
c000c915:	83 c4 0c             	add    esp,0xc
c000c918:	c3                   	ret    
c000c919:	90                   	nop

c000c91a <Pipe::~Pipe()>:
c000c91a:	83 ec 0c             	sub    esp,0xc
c000c91d:	83 ec 0c             	sub    esp,0xc
c000c920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c924:	e8 cd ff ff ff       	call   c000c8f6 <Pipe::~Pipe()>
c000c929:	83 c4 10             	add    esp,0x10
c000c92c:	83 ec 08             	sub    esp,0x8
c000c92f:	6a 20                	push   0x20
c000c931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c935:	e8 f9 26 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000c93a:	83 c4 10             	add    esp,0x10
c000c93d:	83 c4 0c             	add    esp,0xc
c000c940:	c3                   	ret    
c000c941:	90                   	nop

c000c942 <Pipe::read(unsigned long long, void*, int*)>:
c000c942:	55                   	push   ebp
c000c943:	57                   	push   edi
c000c944:	56                   	push   esi
c000c945:	53                   	push   ebx
c000c946:	83 ec 1c             	sub    esp,0x1c
c000c949:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c94d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c951:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c955:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c958:	89 c8                	mov    eax,ecx
c000c95a:	99                   	cdq    
c000c95b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c95f:	74 19                	je     c000c97a <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c961:	39 f9                	cmp    ecx,edi
c000c963:	89 d1                	mov    ecx,edx
c000c965:	19 f1                	sbb    ecx,esi
c000c967:	73 11                	jae    c000c97a <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c969:	e8 c7 bf 00 00       	call   c0018935 <lockScheduler()>
c000c96e:	e8 0b c3 00 00       	call   c0018c7e <schedule()>
c000c973:	e8 bf bf 00 00       	call   c0018937 <unlockScheduler()>
c000c978:	eb db                	jmp    c000c955 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c97a:	39 f8                	cmp    eax,edi
c000c97c:	89 d1                	mov    ecx,edx
c000c97e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c982:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c986:	19 f1                	sbb    ecx,esi
c000c988:	73 08                	jae    c000c992 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c98a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c98e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c992:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c995:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c998:	29 c6                	sub    esi,eax
c000c99a:	89 f1                	mov    ecx,esi
c000c99c:	c1 f9 1f             	sar    ecx,0x1f
c000c99f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c9a3:	89 ca                	mov    edx,ecx
c000c9a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9a9:	19 d1                	sbb    ecx,edx
c000c9ab:	73 04                	jae    c000c9b1 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9ad:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9b1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9b5:	89 fd                	mov    ebp,edi
c000c9b7:	29 f5                	sub    ebp,esi
c000c9b9:	85 f6                	test   esi,esi
c000c9bb:	74 12                	je     c000c9cf <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9bd:	52                   	push   edx
c000c9be:	56                   	push   esi
c000c9bf:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9c2:	50                   	push   eax
c000c9c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9c7:	e8 b8 3c ff ff       	call   c0000684 <memcpy>
c000c9cc:	83 c4 10             	add    esp,0x10
c000c9cf:	85 ed                	test   ebp,ebp
c000c9d1:	74 12                	je     c000c9e5 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9d3:	50                   	push   eax
c000c9d4:	55                   	push   ebp
c000c9d5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9d8:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9dc:	56                   	push   esi
c000c9dd:	e8 a2 3c ff ff       	call   c0000684 <memcpy>
c000c9e2:	83 c4 10             	add    esp,0x10
c000c9e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9e8:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9eb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9ee:	99                   	cdq    
c000c9ef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9f3:	89 f7                	mov    edi,esi
c000c9f5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9f9:	c1 ff 1f             	sar    edi,0x1f
c000c9fc:	57                   	push   edi
c000c9fd:	56                   	push   esi
c000c9fe:	52                   	push   edx
c000c9ff:	50                   	push   eax
c000ca00:	e8 c7 2a 01 00       	call   c001f4cc <__umoddi3>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca0b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca10:	75 10                	jne    c000ca22 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca12:	83 ec 0c             	sub    esp,0xc
c000ca15:	68 a9 12 02 c0       	push   0xc00212a9
c000ca1a:	e8 29 8f 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000ca1f:	83 c4 10             	add    esp,0x10
c000ca22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca2a:	89 10                	mov    DWORD PTR [eax],edx
c000ca2c:	83 c4 1c             	add    esp,0x1c
c000ca2f:	31 c0                	xor    eax,eax
c000ca31:	5b                   	pop    ebx
c000ca32:	5e                   	pop    esi
c000ca33:	5f                   	pop    edi
c000ca34:	5d                   	pop    ebp
c000ca35:	c3                   	ret    

c000ca36 <Pipe::write(unsigned long long, void*, int*)>:
c000ca36:	55                   	push   ebp
c000ca37:	57                   	push   edi
c000ca38:	56                   	push   esi
c000ca39:	53                   	push   ebx
c000ca3a:	83 ec 1c             	sub    esp,0x1c
c000ca3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca45:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca49:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca4c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca4f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca52:	89 de                	mov    esi,ebx
c000ca54:	89 df                	mov    edi,ebx
c000ca56:	c1 ff 1f             	sar    edi,0x1f
c000ca59:	01 c6                	add    esi,eax
c000ca5b:	89 c8                	mov    eax,ecx
c000ca5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca61:	11 d7                	adc    edi,edx
c000ca63:	99                   	cdq    
c000ca64:	89 d0                	mov    eax,edx
c000ca66:	39 f1                	cmp    ecx,esi
c000ca68:	19 f8                	sbb    eax,edi
c000ca6a:	b8 01 00 00 00       	mov    eax,0x1
c000ca6f:	0f 82 80 00 00 00    	jb     c000caf5 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca75:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca78:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca7b:	01 d8                	add    eax,ebx
c000ca7d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca81:	99                   	cdq    
c000ca82:	f7 f9                	idiv   ecx
c000ca84:	29 d1                	sub    ecx,edx
c000ca86:	89 d7                	mov    edi,edx
c000ca88:	89 c8                	mov    eax,ecx
c000ca8a:	99                   	cdq    
c000ca8b:	39 ce                	cmp    esi,ecx
c000ca8d:	19 d3                	sbb    ebx,edx
c000ca8f:	bb 00 00 00 00       	mov    ebx,0x0
c000ca94:	72 04                	jb     c000ca9a <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca96:	89 f3                	mov    ebx,esi
c000ca98:	29 cb                	sub    ebx,ecx
c000ca9a:	89 f1                	mov    ecx,esi
c000ca9c:	29 d9                	sub    ecx,ebx
c000ca9e:	74 1a                	je     c000caba <Pipe::write(unsigned long long, void*, int*)+0x84>
c000caa0:	52                   	push   edx
c000caa1:	51                   	push   ecx
c000caa2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000caa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000caaa:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000caad:	57                   	push   edi
c000caae:	e8 d1 3b ff ff       	call   c0000684 <memcpy>
c000cab3:	83 c4 10             	add    esp,0x10
c000cab6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caba:	85 db                	test   ebx,ebx
c000cabc:	74 12                	je     c000cad0 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cabe:	50                   	push   eax
c000cabf:	53                   	push   ebx
c000cac0:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cac4:	51                   	push   ecx
c000cac5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cac8:	e8 b7 3b ff ff       	call   c0000684 <memcpy>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cad3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cad8:	75 10                	jne    c000caea <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cada:	83 ec 0c             	sub    esp,0xc
c000cadd:	68 c5 12 02 c0       	push   0xc00212c5
c000cae2:	e8 61 8e 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000cae7:	83 c4 10             	add    esp,0x10
c000caea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000caee:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000caf1:	89 38                	mov    DWORD PTR [eax],edi
c000caf3:	31 c0                	xor    eax,eax
c000caf5:	83 c4 1c             	add    esp,0x1c
c000caf8:	5b                   	pop    ebx
c000caf9:	5e                   	pop    esi
c000cafa:	5f                   	pop    edi
c000cafb:	5d                   	pop    ebp
c000cafc:	c3                   	ret    
c000cafd:	90                   	nop

c000cafe <Pipe::Pipe(int)>:
c000cafe:	83 ec 0c             	sub    esp,0xc
c000cb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb05:	83 ec 08             	sub    esp,0x8
c000cb08:	6a 00                	push   0x0
c000cb0a:	50                   	push   eax
c000cb0b:	e8 26 12 00 00       	call   c000dd36 <UnixFile::UnixFile(int)>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	ba ec 12 02 c0       	mov    edx,0xc00212ec
c000cb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1c:	89 10                	mov    DWORD PTR [eax],edx
c000cb1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb26:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb38:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb43:	83 ec 0c             	sub    esp,0xc
c000cb46:	50                   	push   eax
c000cb47:	e8 9f f4 ff ff       	call   c000bfeb <malloc>
c000cb4c:	83 c4 10             	add    esp,0x10
c000cb4f:	89 c2                	mov    edx,eax
c000cb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb55:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb60:	90                   	nop
c000cb61:	83 c4 0c             	add    esp,0xc
c000cb64:	c3                   	ret    
c000cb65:	90                   	nop

c000cb66 <VgaText::isAtty()>:
c000cb66:	b0 01                	mov    al,0x1
c000cb68:	c3                   	ret    
c000cb69:	90                   	nop

c000cb6a <VgaText::~VgaText()>:
c000cb6a:	83 ec 0c             	sub    esp,0xc
c000cb6d:	ba a8 13 02 c0       	mov    edx,0xc00213a8
c000cb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb76:	89 10                	mov    DWORD PTR [eax],edx
c000cb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	50                   	push   eax
c000cb80:	e8 53 13 00 00       	call   c000ded8 <UnixFile::~UnixFile()>
c000cb85:	83 c4 10             	add    esp,0x10
c000cb88:	90                   	nop
c000cb89:	83 c4 0c             	add    esp,0xc
c000cb8c:	c3                   	ret    
c000cb8d:	90                   	nop

c000cb8e <VgaText::~VgaText()>:
c000cb8e:	83 ec 0c             	sub    esp,0xc
c000cb91:	83 ec 0c             	sub    esp,0xc
c000cb94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb98:	e8 cd ff ff ff       	call   c000cb6a <VgaText::~VgaText()>
c000cb9d:	83 c4 10             	add    esp,0x10
c000cba0:	83 ec 08             	sub    esp,0x8
c000cba3:	68 60 12 00 00       	push   0x1260
c000cba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbac:	e8 82 24 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000cbb1:	83 c4 10             	add    esp,0x10
c000cbb4:	83 c4 0c             	add    esp,0xc
c000cbb7:	c3                   	ret    

c000cbb8 <VgaText::read(unsigned long long, void*, int*)>:
c000cbb8:	83 ec 10             	sub    esp,0x10
c000cbbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbbf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc7:	e8 a5 57 00 00       	call   c0012371 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbcc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbd0:	89 02                	mov    DWORD PTR [edx],eax
c000cbd2:	31 c0                	xor    eax,eax
c000cbd4:	83 c4 1c             	add    esp,0x1c
c000cbd7:	c3                   	ret    

c000cbd8 <setTerminalScrollLock(bool)>:
c000cbd8:	c3                   	ret    

c000cbd9 <addToTerminalCycle(VgaText*)>:
c000cbd9:	8b 15 40 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024640
c000cbdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbe3:	85 d2                	test   edx,edx
c000cbe5:	75 0c                	jne    c000cbf3 <addToTerminalCycle(VgaText*)+0x1a>
c000cbe7:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbed:	a3 40 46 02 c0       	mov    ds:0xc0024640,eax
c000cbf2:	c3                   	ret    
c000cbf3:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbf9:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbff:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cc05:	c3                   	ret    

c000cc06 <installVgaTextImplementation()>:
c000cc06:	83 ec 10             	sub    esp,0x10
c000cc09:	6a 20                	push   0x20
c000cc0b:	6a 00                	push   0x0
c000cc0d:	68 20 46 02 c0       	push   0xc0024620
c000cc12:	e8 a3 3a ff ff       	call   c00006ba <memset>
c000cc17:	83 c4 1c             	add    esp,0x1c
c000cc1a:	c3                   	ret    

c000cc1b <scrollTerminalScrollLock(int)>:
c000cc1b:	c3                   	ret    

c000cc1c <VgaText::load()>:
c000cc1c:	53                   	push   ebx
c000cc1d:	31 c0                	xor    eax,eax
c000cc1f:	83 ec 58             	sub    esp,0x58
c000cc22:	89 e2                	mov    edx,esp
c000cc24:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc28:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc2c:	40                   	inc    eax
c000cc2d:	83 f8 50             	cmp    eax,0x50
c000cc30:	75 f6                	jne    c000cc28 <VgaText::load()+0xc>
c000cc32:	31 c0                	xor    eax,eax
c000cc34:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc3b:	84 c9                	test   cl,cl
c000cc3d:	74 06                	je     c000cc45 <VgaText::load()+0x29>
c000cc3f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc42:	40                   	inc    eax
c000cc43:	eb ef                	jmp    c000cc34 <VgaText::load()+0x18>
c000cc45:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc4b:	85 c0                	test   eax,eax
c000cc4d:	74 09                	je     c000cc58 <VgaText::load()+0x3c>
c000cc4f:	51                   	push   ecx
c000cc50:	51                   	push   ecx
c000cc51:	52                   	push   edx
c000cc52:	53                   	push   ebx
c000cc53:	ff d0                	call   eax
c000cc55:	83 c4 10             	add    esp,0x10
c000cc58:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc5e:	85 c0                	test   eax,eax
c000cc60:	74 09                	je     c000cc6b <VgaText::load()+0x4f>
c000cc62:	83 ec 0c             	sub    esp,0xc
c000cc65:	53                   	push   ebx
c000cc66:	ff d0                	call   eax
c000cc68:	83 c4 10             	add    esp,0x10
c000cc6b:	83 c4 58             	add    esp,0x58
c000cc6e:	5b                   	pop    ebx
c000cc6f:	c3                   	ret    

c000cc70 <VgaText::updateCursor()>:
c000cc70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc74:	39 05 44 46 02 c0    	cmp    DWORD PTR ds:0xc0024644,eax
c000cc7a:	75 0c                	jne    c000cc88 <VgaText::updateCursor()+0x18>
c000cc7c:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc82:	85 c0                	test   eax,eax
c000cc84:	74 02                	je     c000cc88 <VgaText::updateCursor()+0x18>
c000cc86:	ff e0                	jmp    eax
c000cc88:	c3                   	ret    
c000cc89:	90                   	nop

c000cc8a <VgaText::showCursor(bool)>:
c000cc8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc92:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc98:	c3                   	ret    
c000cc99:	90                   	nop

c000cc9a <VgaText::disableBlink(bool)>:
c000cc9a:	56                   	push   esi
c000cc9b:	53                   	push   ebx
c000cc9c:	51                   	push   ecx
c000cc9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cca1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cca5:	39 1d 44 46 02 c0    	cmp    DWORD PTR ds:0xc0024644,ebx
c000ccab:	75 18                	jne    c000ccc5 <VgaText::disableBlink(bool)+0x2b>
c000ccad:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ccb3:	85 c0                	test   eax,eax
c000ccb5:	74 0e                	je     c000ccc5 <VgaText::disableBlink(bool)+0x2b>
c000ccb7:	89 f1                	mov    ecx,esi
c000ccb9:	52                   	push   edx
c000ccba:	52                   	push   edx
c000ccbb:	0f b6 d1             	movzx  edx,cl
c000ccbe:	52                   	push   edx
c000ccbf:	53                   	push   ebx
c000ccc0:	ff d0                	call   eax
c000ccc2:	83 c4 10             	add    esp,0x10
c000ccc5:	89 f0                	mov    eax,esi
c000ccc7:	83 f0 01             	xor    eax,0x1
c000ccca:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccd0:	58                   	pop    eax
c000ccd1:	5b                   	pop    ebx
c000ccd2:	5e                   	pop    esi
c000ccd3:	c3                   	ret    

c000ccd4 <VgaText::doANSI_SGR(int)>:
c000ccd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccdc:	85 d2                	test   edx,edx
c000ccde:	75 14                	jne    c000ccf4 <VgaText::doANSI_SGR(int)+0x20>
c000cce0:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cce6:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccec:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ccf2:	eb 65                	jmp    c000cd59 <VgaText::doANSI_SGR(int)+0x85>
c000ccf4:	83 fa 07             	cmp    edx,0x7
c000ccf7:	75 14                	jne    c000cd0d <VgaText::doANSI_SGR(int)+0x39>
c000ccf9:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ccff:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cd05:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd0b:	eb 4c                	jmp    c000cd59 <VgaText::doANSI_SGR(int)+0x85>
c000cd0d:	83 fa 1b             	cmp    edx,0x1b
c000cd10:	74 ce                	je     c000cce0 <VgaText::doANSI_SGR(int)+0xc>
c000cd12:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd15:	83 f9 07             	cmp    ecx,0x7
c000cd18:	77 09                	ja     c000cd23 <VgaText::doANSI_SGR(int)+0x4f>
c000cd1a:	8b 14 8d e0 39 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc620]
c000cd21:	eb 20                	jmp    c000cd43 <VgaText::doANSI_SGR(int)+0x6f>
c000cd23:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd26:	83 f9 07             	cmp    ecx,0x7
c000cd29:	77 09                	ja     c000cd34 <VgaText::doANSI_SGR(int)+0x60>
c000cd2b:	8b 14 8d e0 39 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc620]
c000cd32:	eb 25                	jmp    c000cd59 <VgaText::doANSI_SGR(int)+0x85>
c000cd34:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd37:	83 f9 07             	cmp    ecx,0x7
c000cd3a:	77 0e                	ja     c000cd4a <VgaText::doANSI_SGR(int)+0x76>
c000cd3c:	8b 14 95 98 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc768]
c000cd43:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd49:	c3                   	ret    
c000cd4a:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd4d:	83 f9 07             	cmp    ecx,0x7
c000cd50:	77 0d                	ja     c000cd5f <VgaText::doANSI_SGR(int)+0x8b>
c000cd52:	8b 14 95 70 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc790]
c000cd59:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd5f:	c3                   	ret    

c000cd60 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd68:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd6e:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd74:	c3                   	ret    
c000cd75:	90                   	nop

c000cd76 <VgaText::setDefaultFgColour(VgaColour)>:
c000cd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd7e:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd84:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd8a:	c3                   	ret    
c000cd8b:	90                   	nop

c000cd8c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd8c:	53                   	push   ebx
c000cd8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd99:	51                   	push   ecx
c000cd9a:	e8 c1 ff ff ff       	call   c000cd60 <VgaText::setDefaultBgColour(VgaColour)>
c000cd9f:	58                   	pop    eax
c000cda0:	5a                   	pop    edx
c000cda1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cda5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cda9:	5b                   	pop    ebx
c000cdaa:	eb ca                	jmp    c000cd76 <VgaText::setDefaultFgColour(VgaColour)>

c000cdac <VgaText::combineColours(unsigned char, unsigned char)>:
c000cdac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cdb1:	c1 e2 04             	shl    edx,0x4
c000cdb4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdb8:	83 e0 0f             	and    eax,0xf
c000cdbb:	09 d0                	or     eax,edx
c000cdbd:	c3                   	ret    

c000cdbe <VgaText::scrollScreen()>:
c000cdbe:	57                   	push   edi
c000cdbf:	56                   	push   esi
c000cdc0:	be 01 00 00 00       	mov    esi,0x1
c000cdc5:	53                   	push   ebx
c000cdc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdca:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdd0:	31 ff                	xor    edi,edi
c000cdd2:	01 d9                	add    ecx,ebx
c000cdd4:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdd7:	83 fe 17             	cmp    esi,0x17
c000cdda:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cde0:	75 28                	jne    c000ce0a <VgaText::scrollScreen()+0x4c>
c000cde2:	f7 c7 01 00 00 00    	test   edi,0x1
c000cde8:	74 1c                	je     c000ce06 <VgaText::scrollScreen()+0x48>
c000cdea:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cdf1:	50                   	push   eax
c000cdf2:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cdf9:	50                   	push   eax
c000cdfa:	e8 ad ff ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000cdff:	5a                   	pop    edx
c000ce00:	5a                   	pop    edx
c000ce01:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ce04:	eb 04                	jmp    c000ce0a <VgaText::scrollScreen()+0x4c>
c000ce06:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce0a:	47                   	inc    edi
c000ce0b:	41                   	inc    ecx
c000ce0c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce12:	75 c0                	jne    c000cdd4 <VgaText::scrollScreen()+0x16>
c000ce14:	46                   	inc    esi
c000ce15:	83 fe 18             	cmp    esi,0x18
c000ce18:	75 b0                	jne    c000cdca <VgaText::scrollScreen()+0xc>
c000ce1a:	39 1d 44 46 02 c0    	cmp    DWORD PTR ds:0xc0024644,ebx
c000ce20:	75 24                	jne    c000ce46 <VgaText::scrollScreen()+0x88>
c000ce22:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce29:	74 08                	je     c000ce33 <VgaText::scrollScreen()+0x75>
c000ce2b:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce31:	eb 13                	jmp    c000ce46 <VgaText::scrollScreen()+0x88>
c000ce33:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce39:	85 c0                	test   eax,eax
c000ce3b:	74 09                	je     c000ce46 <VgaText::scrollScreen()+0x88>
c000ce3d:	83 ec 0c             	sub    esp,0xc
c000ce40:	53                   	push   ebx
c000ce41:	ff d0                	call   eax
c000ce43:	83 c4 10             	add    esp,0x10
c000ce46:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce4a:	5b                   	pop    ebx
c000ce4b:	5e                   	pop    esi
c000ce4c:	5f                   	pop    edi
c000ce4d:	e9 1e fe ff ff       	jmp    c000cc70 <VgaText::updateCursor()>

c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce57:	c1 e0 08             	shl    eax,0x8
c000ce5a:	89 c2                	mov    edx,eax
c000ce5c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce61:	09 d0                	or     eax,edx
c000ce63:	c3                   	ret    

c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce64:	53                   	push   ebx
c000ce65:	83 ec 08             	sub    esp,0x8
c000ce68:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce71:	50                   	push   eax
c000ce72:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce77:	50                   	push   eax
c000ce78:	e8 2f ff ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000ce7d:	5a                   	pop    edx
c000ce7e:	5b                   	pop    ebx
c000ce7f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce84:	0f b6 c0             	movzx  eax,al
c000ce87:	50                   	push   eax
c000ce88:	53                   	push   ebx
c000ce89:	e8 c4 ff ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000ce8e:	5a                   	pop    edx
c000ce8f:	5a                   	pop    edx
c000ce90:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce96:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce9a:	0f b7 d2             	movzx  edx,dx
c000ce9d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cea2:	39 0d 44 46 02 c0    	cmp    DWORD PTR ds:0xc0024644,ecx
c000cea8:	75 14                	jne    c000cebe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceaa:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ceb0:	85 c0                	test   eax,eax
c000ceb2:	74 0a                	je     c000cebe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceb4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ceb8:	83 c4 08             	add    esp,0x8
c000cebb:	5b                   	pop    ebx
c000cebc:	ff e0                	jmp    eax
c000cebe:	83 c4 08             	add    esp,0x8
c000cec1:	5b                   	pop    ebx
c000cec2:	c3                   	ret    
c000cec3:	90                   	nop

c000cec4 <VgaText::getCursorX()>:
c000cec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec8:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cece:	c3                   	ret    
c000cecf:	90                   	nop

c000ced0 <VgaText::getCursorY()>:
c000ced0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced4:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ceda:	c3                   	ret    
c000cedb:	90                   	nop

c000cedc <VgaText::setCursor(int, int)>:
c000cedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cee0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cee4:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ceea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ceee:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cef4:	e9 77 fd ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000cef9:	90                   	nop

c000cefa <VgaText::setCursorX(int)>:
c000cefa:	83 ec 10             	sub    esp,0x10
c000cefd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf01:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cf07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf0b:	50                   	push   eax
c000cf0c:	e8 cb ff ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000cf11:	83 c4 1c             	add    esp,0x1c
c000cf14:	c3                   	ret    
c000cf15:	90                   	nop

c000cf16 <VgaText::setCursorY(int)>:
c000cf16:	83 ec 10             	sub    esp,0x10
c000cf19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf21:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf27:	50                   	push   eax
c000cf28:	e8 af ff ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000cf2d:	83 c4 1c             	add    esp,0x1c
c000cf30:	c3                   	ret    
c000cf31:	90                   	nop

c000cf32 <VgaText::incrementCursor(bool)>:
c000cf32:	56                   	push   esi
c000cf33:	53                   	push   ebx
c000cf34:	51                   	push   ecx
c000cf35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf3d:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf43:	40                   	inc    eax
c000cf44:	83 f8 50             	cmp    eax,0x50
c000cf47:	74 08                	je     c000cf51 <VgaText::incrementCursor(bool)+0x1f>
c000cf49:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf4f:	eb 33                	jmp    c000cf84 <VgaText::incrementCursor(bool)+0x52>
c000cf51:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf57:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf61:	8d 50 01             	lea    edx,[eax+0x1]
c000cf64:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf6a:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf70:	75 12                	jne    c000cf84 <VgaText::incrementCursor(bool)+0x52>
c000cf72:	83 ec 0c             	sub    esp,0xc
c000cf75:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf7b:	53                   	push   ebx
c000cf7c:	e8 3d fe ff ff       	call   c000cdbe <VgaText::scrollScreen()>
c000cf81:	83 c4 10             	add    esp,0x10
c000cf84:	89 f0                	mov    eax,esi
c000cf86:	84 c0                	test   al,al
c000cf88:	74 0c                	je     c000cf96 <VgaText::incrementCursor(bool)+0x64>
c000cf8a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf8e:	5a                   	pop    edx
c000cf8f:	5b                   	pop    ebx
c000cf90:	5e                   	pop    esi
c000cf91:	e9 da fc ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000cf96:	58                   	pop    eax
c000cf97:	5b                   	pop    ebx
c000cf98:	5e                   	pop    esi
c000cf99:	c3                   	ret    

c000cf9a <VgaText::updateRAMUsageDisplay(int)>:
c000cf9a:	53                   	push   ebx
c000cf9b:	bb 0a 00 00 00       	mov    ebx,0xa
c000cfa0:	6a 0f                	push   0xf
c000cfa2:	6a 00                	push   0x0
c000cfa4:	e8 03 fe ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000cfa9:	5a                   	pop    edx
c000cfaa:	59                   	pop    ecx
c000cfab:	0f b6 c8             	movzx  ecx,al
c000cfae:	51                   	push   ecx
c000cfaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfb3:	99                   	cdq    
c000cfb4:	f7 fb                	idiv   ebx
c000cfb6:	83 c0 30             	add    eax,0x30
c000cfb9:	89 d3                	mov    ebx,edx
c000cfbb:	0f be c0             	movsx  eax,al
c000cfbe:	50                   	push   eax
c000cfbf:	e8 8e fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfc4:	5a                   	pop    edx
c000cfc5:	83 c3 30             	add    ebx,0x30
c000cfc8:	5a                   	pop    edx
c000cfc9:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfcf:	0f b6 db             	movzx  ebx,bl
c000cfd2:	51                   	push   ecx
c000cfd3:	53                   	push   ebx
c000cfd4:	e8 79 fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfd9:	5b                   	pop    ebx
c000cfda:	5a                   	pop    edx
c000cfdb:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfe1:	51                   	push   ecx
c000cfe2:	6a 25                	push   0x25
c000cfe4:	e8 69 fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfe9:	59                   	pop    ecx
c000cfea:	5b                   	pop    ebx
c000cfeb:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cff1:	5b                   	pop    ebx
c000cff2:	c3                   	ret    
c000cff3:	90                   	nop

c000cff4 <VgaText::updateDiskUsage()>:
c000cff4:	55                   	push   ebp
c000cff5:	bd 10 27 00 00       	mov    ebp,0x2710
c000cffa:	57                   	push   edi
c000cffb:	56                   	push   esi
c000cffc:	53                   	push   ebx
c000cffd:	6a 0f                	push   0xf
c000cfff:	6a 00                	push   0x0
c000d001:	e8 a6 fd ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000d006:	0f b6 d8             	movzx  ebx,al
c000d009:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000d00e:	5a                   	pop    edx
c000d00f:	99                   	cdq    
c000d010:	f7 fd                	idiv   ebp
c000d012:	59                   	pop    ecx
c000d013:	b9 0a 00 00 00       	mov    ecx,0xa
c000d018:	99                   	cdq    
c000d019:	f7 f9                	idiv   ecx
c000d01b:	53                   	push   ebx
c000d01c:	8d 42 30             	lea    eax,[edx+0x30]
c000d01f:	0f b6 c0             	movzx  eax,al
c000d022:	50                   	push   eax
c000d023:	e8 2a fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d028:	5e                   	pop    esi
c000d029:	5f                   	pop    edi
c000d02a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d030:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000d035:	bf e8 03 00 00       	mov    edi,0x3e8
c000d03a:	99                   	cdq    
c000d03b:	f7 ff                	idiv   edi
c000d03d:	99                   	cdq    
c000d03e:	f7 f9                	idiv   ecx
c000d040:	53                   	push   ebx
c000d041:	8d 42 30             	lea    eax,[edx+0x30]
c000d044:	0f b6 c0             	movzx  eax,al
c000d047:	50                   	push   eax
c000d048:	e8 05 fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d04d:	5a                   	pop    edx
c000d04e:	5e                   	pop    esi
c000d04f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d055:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000d05a:	be 64 00 00 00       	mov    esi,0x64
c000d05f:	99                   	cdq    
c000d060:	f7 fe                	idiv   esi
c000d062:	99                   	cdq    
c000d063:	f7 f9                	idiv   ecx
c000d065:	53                   	push   ebx
c000d066:	8d 42 30             	lea    eax,[edx+0x30]
c000d069:	0f b6 c0             	movzx  eax,al
c000d06c:	50                   	push   eax
c000d06d:	e8 e0 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d072:	5a                   	pop    edx
c000d073:	5a                   	pop    edx
c000d074:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d07a:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000d07f:	53                   	push   ebx
c000d080:	99                   	cdq    
c000d081:	f7 f9                	idiv   ecx
c000d083:	99                   	cdq    
c000d084:	f7 f9                	idiv   ecx
c000d086:	8d 42 30             	lea    eax,[edx+0x30]
c000d089:	0f b6 c0             	movzx  eax,al
c000d08c:	50                   	push   eax
c000d08d:	e8 c0 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d092:	5a                   	pop    edx
c000d093:	5a                   	pop    edx
c000d094:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d09a:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000d09f:	53                   	push   ebx
c000d0a0:	99                   	cdq    
c000d0a1:	f7 f9                	idiv   ecx
c000d0a3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0a6:	0f b6 c0             	movzx  eax,al
c000d0a9:	50                   	push   eax
c000d0aa:	e8 a3 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0af:	5a                   	pop    edx
c000d0b0:	5a                   	pop    edx
c000d0b1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0b7:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000d0bc:	53                   	push   ebx
c000d0bd:	99                   	cdq    
c000d0be:	f7 fd                	idiv   ebp
c000d0c0:	99                   	cdq    
c000d0c1:	f7 f9                	idiv   ecx
c000d0c3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0c6:	0f b6 c0             	movzx  eax,al
c000d0c9:	50                   	push   eax
c000d0ca:	e8 83 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0cf:	5d                   	pop    ebp
c000d0d0:	5a                   	pop    edx
c000d0d1:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0d7:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000d0dc:	53                   	push   ebx
c000d0dd:	99                   	cdq    
c000d0de:	f7 ff                	idiv   edi
c000d0e0:	99                   	cdq    
c000d0e1:	f7 f9                	idiv   ecx
c000d0e3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0e6:	0f b6 c0             	movzx  eax,al
c000d0e9:	50                   	push   eax
c000d0ea:	e8 63 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0ef:	5f                   	pop    edi
c000d0f0:	5d                   	pop    ebp
c000d0f1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0f7:	53                   	push   ebx
c000d0f8:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000d0fd:	99                   	cdq    
c000d0fe:	f7 fe                	idiv   esi
c000d100:	99                   	cdq    
c000d101:	f7 f9                	idiv   ecx
c000d103:	8d 42 30             	lea    eax,[edx+0x30]
c000d106:	0f b6 c0             	movzx  eax,al
c000d109:	50                   	push   eax
c000d10a:	e8 43 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d10f:	5a                   	pop    edx
c000d110:	5e                   	pop    esi
c000d111:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d117:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000d11c:	53                   	push   ebx
c000d11d:	99                   	cdq    
c000d11e:	f7 f9                	idiv   ecx
c000d120:	99                   	cdq    
c000d121:	f7 f9                	idiv   ecx
c000d123:	8d 42 30             	lea    eax,[edx+0x30]
c000d126:	0f b6 c0             	movzx  eax,al
c000d129:	50                   	push   eax
c000d12a:	e8 23 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d12f:	5f                   	pop    edi
c000d130:	5d                   	pop    ebp
c000d131:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d137:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000d13c:	53                   	push   ebx
c000d13d:	99                   	cdq    
c000d13e:	f7 f9                	idiv   ecx
c000d140:	83 c2 30             	add    edx,0x30
c000d143:	0f b6 d2             	movzx  edx,dl
c000d146:	52                   	push   edx
c000d147:	e8 06 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d14c:	5a                   	pop    edx
c000d14d:	59                   	pop    ecx
c000d14e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d154:	5b                   	pop    ebx
c000d155:	5e                   	pop    esi
c000d156:	5f                   	pop    edi
c000d157:	5d                   	pop    ebp
c000d158:	c3                   	ret    
c000d159:	90                   	nop

c000d15a <VgaText::updateTitle()>:
c000d15a:	53                   	push   ebx
c000d15b:	31 c0                	xor    eax,eax
c000d15d:	83 ec 58             	sub    esp,0x58
c000d160:	89 e1                	mov    ecx,esp
c000d162:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d166:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d16a:	40                   	inc    eax
c000d16b:	83 f8 50             	cmp    eax,0x50
c000d16e:	75 f6                	jne    c000d166 <VgaText::updateTitle()+0xc>
c000d170:	31 c0                	xor    eax,eax
c000d172:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d179:	84 db                	test   bl,bl
c000d17b:	74 06                	je     c000d183 <VgaText::updateTitle()+0x29>
c000d17d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d180:	40                   	inc    eax
c000d181:	eb ef                	jmp    c000d172 <VgaText::updateTitle()+0x18>
c000d183:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d189:	85 c0                	test   eax,eax
c000d18b:	74 09                	je     c000d196 <VgaText::updateTitle()+0x3c>
c000d18d:	53                   	push   ebx
c000d18e:	53                   	push   ebx
c000d18f:	51                   	push   ecx
c000d190:	52                   	push   edx
c000d191:	ff d0                	call   eax
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	e8 59 fe ff ff       	call   c000cff4 <VgaText::updateDiskUsage()>
c000d19b:	83 c4 58             	add    esp,0x58
c000d19e:	5b                   	pop    ebx
c000d19f:	c3                   	ret    

c000d1a0 <VgaText::setTitleTextColour(VgaColour)>:
c000d1a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a8:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1ae:	eb aa                	jmp    c000d15a <VgaText::updateTitle()>

c000d1b0 <VgaText::setTitleColour(VgaColour)>:
c000d1b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1b8:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1be:	eb 9a                	jmp    c000d15a <VgaText::updateTitle()>

c000d1c0 <VgaText::setTitle(char*)>:
c000d1c0:	53                   	push   ebx
c000d1c1:	83 ec 10             	sub    esp,0x10
c000d1c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1cc:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1d2:	50                   	push   eax
c000d1d3:	e8 81 35 ff ff       	call   c0000759 <strcpy>
c000d1d8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1dc:	83 c4 18             	add    esp,0x18
c000d1df:	5b                   	pop    ebx
c000d1e0:	e9 75 ff ff ff       	jmp    c000d15a <VgaText::updateTitle()>
c000d1e5:	90                   	nop

c000d1e6 <VgaText::decrementCursor(bool)>:
c000d1e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1ee:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1f4:	85 c0                	test   eax,eax
c000d1f6:	74 07                	je     c000d1ff <VgaText::decrementCursor(bool)+0x19>
c000d1f8:	48                   	dec    eax
c000d1f9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1ff:	84 c9                	test   cl,cl
c000d201:	74 09                	je     c000d20c <VgaText::decrementCursor(bool)+0x26>
c000d203:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d207:	e9 64 fa ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000d20c:	c3                   	ret    
c000d20d:	90                   	nop

c000d20e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d20e:	53                   	push   ebx
c000d20f:	83 ec 08             	sub    esp,0x8
c000d212:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d216:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d21a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d21e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d222:	3c 07                	cmp    al,0x7
c000d224:	75 2a                	jne    c000d250 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d226:	a1 ec 46 02 c0       	mov    eax,ds:0xc00246ec
c000d22b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d233:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d23b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d243:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d247:	83 c4 08             	add    esp,0x8
c000d24a:	5b                   	pop    ebx
c000d24b:	e9 fc 2c 00 00       	jmp    c000ff4c <Buzzer::beep(int, int, bool)>
c000d250:	3c 0d                	cmp    al,0xd
c000d252:	75 0c                	jne    c000d260 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d254:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d25e:	eb 3b                	jmp    c000d29b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d260:	3c 0a                	cmp    al,0xa
c000d262:	75 40                	jne    c000d2a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d264:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d26a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d274:	8d 50 01             	lea    edx,[eax+0x1]
c000d277:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d27d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d283:	75 12                	jne    c000d297 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d285:	83 ec 0c             	sub    esp,0xc
c000d288:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d28e:	53                   	push   ebx
c000d28f:	e8 2a fb ff ff       	call   c000cdbe <VgaText::scrollScreen()>
c000d294:	83 c4 10             	add    esp,0x10
c000d297:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d29b:	83 c4 08             	add    esp,0x8
c000d29e:	5b                   	pop    ebx
c000d29f:	e9 cc f9 ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000d2a4:	3c 08                	cmp    al,0x8
c000d2a6:	75 31                	jne    c000d2d9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d2a8:	50                   	push   eax
c000d2a9:	50                   	push   eax
c000d2aa:	6a 01                	push   0x1
c000d2ac:	53                   	push   ebx
c000d2ad:	e8 34 ff ff ff       	call   c000d1e6 <VgaText::decrementCursor(bool)>
c000d2b2:	5a                   	pop    edx
c000d2b3:	59                   	pop    ecx
c000d2b4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2ba:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2c0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2c6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2cc:	6a 20                	push   0x20
c000d2ce:	53                   	push   ebx
c000d2cf:	e8 90 fb ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2d4:	83 c4 28             	add    esp,0x28
c000d2d7:	5b                   	pop    ebx
c000d2d8:	c3                   	ret    
c000d2d9:	83 ec 08             	sub    esp,0x8
c000d2dc:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2e2:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2e8:	0f be c0             	movsx  eax,al
c000d2eb:	51                   	push   ecx
c000d2ec:	52                   	push   edx
c000d2ed:	50                   	push   eax
c000d2ee:	53                   	push   ebx
c000d2ef:	e8 70 fb ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2f4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2f8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d300:	83 c4 28             	add    esp,0x28
c000d303:	5b                   	pop    ebx
c000d304:	e9 29 fc ff ff       	jmp    c000cf32 <VgaText::incrementCursor(bool)>
c000d309:	90                   	nop

c000d30a <VgaText::isShowingCursor()>:
c000d30a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d30e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d314:	c3                   	ret    
c000d315:	90                   	nop

c000d316 <VgaText::isBlinkDisabled()>:
c000d316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d31a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d320:	83 f0 01             	xor    eax,0x1
c000d323:	c3                   	ret    

c000d324 <VgaText::setCursorHeight(int)>:
c000d324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d328:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d32c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d332:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d339:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d33d:	e9 48 f9 ff ff       	jmp    c000cc8a <VgaText::showCursor(bool)>

c000d342 <VgaText::getCursorHeight()>:
c000d342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d346:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d34c:	c3                   	ret    

c000d34d <setActiveTerminal(VgaText*)>:
c000d34d:	53                   	push   ebx
c000d34e:	83 ec 08             	sub    esp,0x8
c000d351:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d355:	85 db                	test   ebx,ebx
c000d357:	75 11                	jne    c000d36a <setActiveTerminal(VgaText*)+0x1d>
c000d359:	c7 44 24 10 00 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021300
c000d361:	83 c4 08             	add    esp,0x8
c000d364:	5b                   	pop    ebx
c000d365:	e9 de 85 00 00       	jmp    c0015948 <Krnl::panic(char const*)>
c000d36a:	50                   	push   eax
c000d36b:	50                   	push   eax
c000d36c:	53                   	push   ebx
c000d36d:	68 0e 13 02 c0       	push   0xc002130e
c000d372:	e8 e2 1d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000d377:	a1 44 46 02 c0       	mov    eax,ds:0xc0024644
c000d37c:	83 c4 10             	add    esp,0x10
c000d37f:	85 c0                	test   eax,eax
c000d381:	74 0c                	je     c000d38f <setActiveTerminal(VgaText*)+0x42>
c000d383:	83 ec 0c             	sub    esp,0xc
c000d386:	50                   	push   eax
c000d387:	e8 e4 f8 ff ff       	call   c000cc70 <VgaText::updateCursor()>
c000d38c:	83 c4 10             	add    esp,0x10
c000d38f:	51                   	push   ecx
c000d390:	89 1d 44 46 02 c0    	mov    DWORD PTR ds:0xc0024644,ebx
c000d396:	51                   	push   ecx
c000d397:	53                   	push   ebx
c000d398:	68 26 13 02 c0       	push   0xc0021326
c000d39d:	e8 b7 1d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000d3a2:	83 c4 0c             	add    esp,0xc
c000d3a5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3ab:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3b1:	53                   	push   ebx
c000d3b2:	e8 25 fb ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d3b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ba:	e8 57 ff ff ff       	call   c000d316 <VgaText::isBlinkDisabled()>
c000d3bf:	5a                   	pop    edx
c000d3c0:	59                   	pop    ecx
c000d3c1:	0f b6 c0             	movzx  eax,al
c000d3c4:	50                   	push   eax
c000d3c5:	53                   	push   ebx
c000d3c6:	e8 cf f8 ff ff       	call   c000cc9a <VgaText::disableBlink(bool)>
c000d3cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ce:	e8 6f ff ff ff       	call   c000d342 <VgaText::getCursorHeight()>
c000d3d3:	5a                   	pop    edx
c000d3d4:	59                   	pop    ecx
c000d3d5:	50                   	push   eax
c000d3d6:	53                   	push   ebx
c000d3d7:	e8 48 ff ff ff       	call   c000d324 <VgaText::setCursorHeight(int)>
c000d3dc:	83 c4 10             	add    esp,0x10
c000d3df:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3e6:	75 0a                	jne    c000d3f2 <setActiveTerminal(VgaText*)+0xa5>
c000d3e8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3f2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3f6:	83 c4 08             	add    esp,0x8
c000d3f9:	5b                   	pop    ebx
c000d3fa:	e9 1d f8 ff ff       	jmp    c000cc1c <VgaText::load()>

c000d3ff <doTerminalCycle()>:
c000d3ff:	83 ec 18             	sub    esp,0x18
c000d402:	a1 40 46 02 c0       	mov    eax,ds:0xc0024640
c000d407:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d40d:	50                   	push   eax
c000d40e:	a3 40 46 02 c0       	mov    ds:0xc0024640,eax
c000d413:	e8 35 ff ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c000d418:	83 c4 1c             	add    esp,0x1c
c000d41b:	c3                   	ret    

c000d41c <VgaText::doUpdate()>:
c000d41c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d420:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d426:	85 c0                	test   eax,eax
c000d428:	74 02                	je     c000d42c <VgaText::doUpdate()+0x10>
c000d42a:	ff e0                	jmp    eax
c000d42c:	c3                   	ret    
c000d42d:	90                   	nop

c000d42e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d42e:	55                   	push   ebp
c000d42f:	57                   	push   edi
c000d430:	56                   	push   esi
c000d431:	53                   	push   ebx
c000d432:	83 ec 1c             	sub    esp,0x1c
c000d435:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d439:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d43e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d445:	50                   	push   eax
c000d446:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d44b:	50                   	push   eax
c000d44c:	e8 5b f9 ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000d451:	59                   	pop    ecx
c000d452:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d455:	5b                   	pop    ebx
c000d456:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d45e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d464:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d468:	0f b7 db             	movzx  ebx,bx
c000d46b:	01 db                	add    ebx,ebx
c000d46d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d471:	01 fb                	add    ebx,edi
c000d473:	31 c0                	xor    eax,eax
c000d475:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d478:	84 c9                	test   cl,cl
c000d47a:	0f 84 3d 01 00 00    	je     c000d5bd <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d480:	80 f9 0d             	cmp    cl,0xd
c000d483:	75 0f                	jne    c000d494 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d485:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d48f:	e9 23 01 00 00       	jmp    c000d5b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d494:	80 f9 0a             	cmp    cl,0xa
c000d497:	75 5b                	jne    c000d4f4 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d499:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d49f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4a9:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4ac:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4b2:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4b8:	75 12                	jne    c000d4cc <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4ba:	83 ec 0c             	sub    esp,0xc
c000d4bd:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4c3:	55                   	push   ebp
c000d4c4:	e8 f5 f8 ff ff       	call   c000cdbe <VgaText::scrollScreen()>
c000d4c9:	83 c4 10             	add    esp,0x10
c000d4cc:	83 ec 0c             	sub    esp,0xc
c000d4cf:	55                   	push   ebp
c000d4d0:	e8 9b f7 ff ff       	call   c000cc70 <VgaText::updateCursor()>
c000d4d5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4dd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4e3:	83 c4 10             	add    esp,0x10
c000d4e6:	0f b7 db             	movzx  ebx,bx
c000d4e9:	01 db                	add    ebx,ebx
c000d4eb:	31 c0                	xor    eax,eax
c000d4ed:	01 fb                	add    ebx,edi
c000d4ef:	e9 c3 00 00 00       	jmp    c000d5b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4f4:	80 f9 08             	cmp    cl,0x8
c000d4f7:	75 4e                	jne    c000d547 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4fd:	50                   	push   eax
c000d4fe:	50                   	push   eax
c000d4ff:	6a 01                	push   0x1
c000d501:	55                   	push   ebp
c000d502:	e8 df fc ff ff       	call   c000d1e6 <VgaText::decrementCursor(bool)>
c000d507:	58                   	pop    eax
c000d508:	5a                   	pop    edx
c000d509:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d50f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d515:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d51b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d521:	6a 20                	push   0x20
c000d523:	55                   	push   ebp
c000d524:	e8 3b f9 ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d529:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d531:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d537:	83 c4 20             	add    esp,0x20
c000d53a:	0f b7 db             	movzx  ebx,bx
c000d53d:	01 db                	add    ebx,ebx
c000d53f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d543:	01 fb                	add    ebx,edi
c000d545:	eb 70                	jmp    c000d5b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d547:	50                   	push   eax
c000d548:	50                   	push   eax
c000d549:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d54e:	50                   	push   eax
c000d54f:	51                   	push   ecx
c000d550:	e8 fd f8 ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d555:	66 89 03             	mov    WORD PTR [ebx],ax
c000d558:	83 c4 10             	add    esp,0x10
c000d55b:	39 2d 44 46 02 c0    	cmp    DWORD PTR ds:0xc0024644,ebp
c000d561:	75 2a                	jne    c000d58d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d563:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d569:	85 c0                	test   eax,eax
c000d56b:	74 20                	je     c000d58d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d56d:	52                   	push   edx
c000d56e:	52                   	push   edx
c000d56f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d575:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d57b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d57f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d583:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d586:	51                   	push   ecx
c000d587:	55                   	push   ebp
c000d588:	ff d0                	call   eax
c000d58a:	83 c4 20             	add    esp,0x20
c000d58d:	50                   	push   eax
c000d58e:	83 c3 02             	add    ebx,0x2
c000d591:	50                   	push   eax
c000d592:	6a 00                	push   0x0
c000d594:	55                   	push   ebp
c000d595:	e8 98 f9 ff ff       	call   c000cf32 <VgaText::incrementCursor(bool)>
c000d59a:	83 c4 10             	add    esp,0x10
c000d59d:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d5a4:	75 0f                	jne    c000d5b5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d5a6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5ae:	0f b7 db             	movzx  ebx,bx
c000d5b1:	01 db                	add    ebx,ebx
c000d5b3:	01 fb                	add    ebx,edi
c000d5b5:	b0 01                	mov    al,0x1
c000d5b7:	46                   	inc    esi
c000d5b8:	e9 b8 fe ff ff       	jmp    c000d475 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5bd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5c1:	83 ec 0c             	sub    esp,0xc
c000d5c4:	55                   	push   ebp
c000d5c5:	e8 a6 f6 ff ff       	call   c000cc70 <VgaText::updateCursor()>
c000d5ca:	83 c4 10             	add    esp,0x10
c000d5cd:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5d1:	84 c0                	test   al,al
c000d5d3:	74 0c                	je     c000d5e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5d5:	83 ec 0c             	sub    esp,0xc
c000d5d8:	55                   	push   ebp
c000d5d9:	e8 3e fe ff ff       	call   c000d41c <VgaText::doUpdate()>
c000d5de:	83 c4 10             	add    esp,0x10
c000d5e1:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5e8:	83 c4 1c             	add    esp,0x1c
c000d5eb:	5b                   	pop    ebx
c000d5ec:	5e                   	pop    esi
c000d5ed:	5f                   	pop    edi
c000d5ee:	5d                   	pop    ebp
c000d5ef:	c3                   	ret    

c000d5f0 <VgaText::clearScreen()>:
c000d5f0:	57                   	push   edi
c000d5f1:	56                   	push   esi
c000d5f2:	31 f6                	xor    esi,esi
c000d5f4:	53                   	push   ebx
c000d5f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5f9:	52                   	push   edx
c000d5fa:	6a 00                	push   0x0
c000d5fc:	6a 00                	push   0x0
c000d5fe:	53                   	push   ebx
c000d5ff:	e8 d8 f8 ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d604:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d614:	7e 26                	jle    c000d63c <VgaText::clearScreen()+0x4c>
c000d616:	31 ff                	xor    edi,edi
c000d618:	50                   	push   eax
c000d619:	50                   	push   eax
c000d61a:	56                   	push   esi
c000d61b:	57                   	push   edi
c000d61c:	47                   	inc    edi
c000d61d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d623:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d629:	6a 20                	push   0x20
c000d62b:	53                   	push   ebx
c000d62c:	e8 33 f8 ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d631:	83 c4 20             	add    esp,0x20
c000d634:	83 ff 50             	cmp    edi,0x50
c000d637:	75 df                	jne    c000d618 <VgaText::clearScreen()+0x28>
c000d639:	46                   	inc    esi
c000d63a:	eb d2                	jmp    c000d60e <VgaText::clearScreen()+0x1e>
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	53                   	push   ebx
c000d640:	e8 d7 fd ff ff       	call   c000d41c <VgaText::doUpdate()>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d64f:	5b                   	pop    ebx
c000d650:	5e                   	pop    esi
c000d651:	5f                   	pop    edi
c000d652:	c3                   	ret    
c000d653:	90                   	nop

c000d654 <VgaText::putchar(char)>:
c000d654:	56                   	push   esi
c000d655:	53                   	push   ebx
c000d656:	83 ec 14             	sub    esp,0x14
c000d659:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d65d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d661:	3c 5b                	cmp    al,0x5b
c000d663:	75 21                	jne    c000d686 <VgaText::putchar(char)+0x32>
c000d665:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d66c:	74 28                	je     c000d696 <VgaText::putchar(char)+0x42>
c000d66e:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d677:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d681:	e9 e2 00 00 00       	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d686:	3c 1b                	cmp    al,0x1b
c000d688:	75 0c                	jne    c000d696 <VgaText::putchar(char)+0x42>
c000d68a:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d691:	e9 d2 00 00 00       	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d696:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d69c:	84 c9                	test   cl,cl
c000d69e:	0f 84 ab 00 00 00    	je     c000d74f <VgaText::putchar(char)+0xfb>
c000d6a4:	8d 50 c0             	lea    edx,[eax-0x40]
c000d6a7:	80 fa 3e             	cmp    dl,0x3e
c000d6aa:	0f 87 82 00 00 00    	ja     c000d732 <VgaText::putchar(char)+0xde>
c000d6b0:	3c 6d                	cmp    al,0x6d
c000d6b2:	75 4d                	jne    c000d701 <VgaText::putchar(char)+0xad>
c000d6b4:	31 f6                	xor    esi,esi
c000d6b6:	31 d2                	xor    edx,edx
c000d6b8:	31 c0                	xor    eax,eax
c000d6ba:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6c0:	7e 30                	jle    c000d6f2 <VgaText::putchar(char)+0x9e>
c000d6c2:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6ca:	80 fa 3b             	cmp    dl,0x3b
c000d6cd:	75 17                	jne    c000d6e6 <VgaText::putchar(char)+0x92>
c000d6cf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6d3:	50                   	push   eax
c000d6d4:	53                   	push   ebx
c000d6d5:	e8 fa f5 ff ff       	call   c000ccd4 <VgaText::doANSI_SGR(int)>
c000d6da:	59                   	pop    ecx
c000d6db:	31 d2                	xor    edx,edx
c000d6dd:	58                   	pop    eax
c000d6de:	31 c0                	xor    eax,eax
c000d6e0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6e4:	eb 09                	jmp    c000d6ef <VgaText::putchar(char)+0x9b>
c000d6e6:	6b c0 0a             	imul   eax,eax,0xa
c000d6e9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6ed:	88 ca                	mov    dl,cl
c000d6ef:	46                   	inc    esi
c000d6f0:	eb c8                	jmp    c000d6ba <VgaText::putchar(char)+0x66>
c000d6f2:	84 d2                	test   dl,dl
c000d6f4:	74 31                	je     c000d727 <VgaText::putchar(char)+0xd3>
c000d6f6:	50                   	push   eax
c000d6f7:	53                   	push   ebx
c000d6f8:	e8 d7 f5 ff ff       	call   c000ccd4 <VgaText::doANSI_SGR(int)>
c000d6fd:	58                   	pop    eax
c000d6fe:	5a                   	pop    edx
c000d6ff:	eb 26                	jmp    c000d727 <VgaText::putchar(char)+0xd3>
c000d701:	3c 4a                	cmp    al,0x4a
c000d703:	75 22                	jne    c000d727 <VgaText::putchar(char)+0xd3>
c000d705:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d70c:	75 19                	jne    c000d727 <VgaText::putchar(char)+0xd3>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	53                   	push   ebx
c000d712:	e8 d9 fe ff ff       	call   c000d5f0 <VgaText::clearScreen()>
c000d717:	83 c4 0c             	add    esp,0xc
c000d71a:	6a 00                	push   0x0
c000d71c:	6a 00                	push   0x0
c000d71e:	53                   	push   ebx
c000d71f:	e8 b8 f7 ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d724:	83 c4 10             	add    esp,0x10
c000d727:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d730:	eb 36                	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d732:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d738:	83 fa 0e             	cmp    edx,0xe
c000d73b:	7f 2b                	jg     c000d768 <VgaText::putchar(char)+0x114>
c000d73d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d740:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d746:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d74d:	eb 19                	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d74f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d755:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d75b:	0f be c0             	movsx  eax,al
c000d75e:	50                   	push   eax
c000d75f:	53                   	push   ebx
c000d760:	e8 a9 fa ff ff       	call   c000d20e <VgaText::putchar(char, VgaColour, VgaColour)>
c000d765:	83 c4 10             	add    esp,0x10
c000d768:	83 c4 14             	add    esp,0x14
c000d76b:	5b                   	pop    ebx
c000d76c:	5e                   	pop    esi
c000d76d:	c3                   	ret    

c000d76e <VgaText::puts(char const*)>:
c000d76e:	53                   	push   ebx
c000d76f:	83 ec 08             	sub    esp,0x8
c000d772:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d776:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d779:	84 c0                	test   al,al
c000d77b:	74 12                	je     c000d78f <VgaText::puts(char const*)+0x21>
c000d77d:	51                   	push   ecx
c000d77e:	43                   	inc    ebx
c000d77f:	51                   	push   ecx
c000d780:	50                   	push   eax
c000d781:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d785:	e8 ca fe ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	eb e7                	jmp    c000d776 <VgaText::puts(char const*)+0x8>
c000d78f:	83 c4 08             	add    esp,0x8
c000d792:	5b                   	pop    ebx
c000d793:	c3                   	ret    

c000d794 <VgaText::putx(unsigned int)>:
c000d794:	57                   	push   edi
c000d795:	b9 11 00 00 00       	mov    ecx,0x11
c000d79a:	56                   	push   esi
c000d79b:	be 42 13 02 c0       	mov    esi,0xc0021342
c000d7a0:	53                   	push   ebx
c000d7a1:	83 ec 20             	sub    esp,0x20
c000d7a4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7a8:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7ac:	fc                   	cld    
c000d7ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7af:	be 08 00 00 00       	mov    esi,0x8
c000d7b4:	50                   	push   eax
c000d7b5:	50                   	push   eax
c000d7b6:	89 d8                	mov    eax,ebx
c000d7b8:	c1 e8 1c             	shr    eax,0x1c
c000d7bb:	c1 e3 04             	shl    ebx,0x4
c000d7be:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7c3:	50                   	push   eax
c000d7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7c8:	e8 87 fe ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d7cd:	83 c4 10             	add    esp,0x10
c000d7d0:	4e                   	dec    esi
c000d7d1:	75 e1                	jne    c000d7b4 <VgaText::putx(unsigned int)+0x20>
c000d7d3:	83 c4 20             	add    esp,0x20
c000d7d6:	5b                   	pop    ebx
c000d7d7:	5e                   	pop    esi
c000d7d8:	5f                   	pop    edi
c000d7d9:	c3                   	ret    

c000d7da <VgaText::VgaText(char const*)>:
c000d7da:	57                   	push   edi
c000d7db:	56                   	push   esi
c000d7dc:	53                   	push   ebx
c000d7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e1:	83 ec 08             	sub    esp,0x8
c000d7e4:	6a 00                	push   0x0
c000d7e6:	50                   	push   eax
c000d7e7:	e8 4a 05 00 00       	call   c000dd36 <UnixFile::UnixFile(int)>
c000d7ec:	83 c4 10             	add    esp,0x10
c000d7ef:	ba a8 13 02 c0       	mov    edx,0xc00213a8
c000d7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f8:	89 10                	mov    DWORD PTR [eax],edx
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80c:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81a:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d825:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d830:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83e:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84c:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d857:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d862:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d868:	bb 20 46 02 c0       	mov    ebx,0xc0024620
c000d86d:	b8 08 00 00 00       	mov    eax,0x8
c000d872:	fc                   	cld    
c000d873:	89 d7                	mov    edi,edx
c000d875:	89 de                	mov    esi,ebx
c000d877:	89 c1                	mov    ecx,eax
c000d879:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d87f:	05 1e 10 00 00       	add    eax,0x101e
c000d884:	83 ec 08             	sub    esp,0x8
c000d887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d88b:	50                   	push   eax
c000d88c:	e8 c8 2e ff ff       	call   c0000759 <strcpy>
c000d891:	83 c4 10             	add    esp,0x10
c000d894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d898:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a6:	83 c0 0c             	add    eax,0xc
c000d8a9:	83 ec 04             	sub    esp,0x4
c000d8ac:	68 00 0f 00 00       	push   0xf00
c000d8b1:	6a 00                	push   0x0
c000d8b3:	50                   	push   eax
c000d8b4:	e8 01 2e ff ff       	call   c00006ba <memset>
c000d8b9:	83 c4 10             	add    esp,0x10
c000d8bc:	83 ec 04             	sub    esp,0x4
c000d8bf:	6a 00                	push   0x0
c000d8c1:	6a 07                	push   0x7
c000d8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8c7:	e8 c0 f4 ff ff       	call   c000cd8c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8cc:	83 c4 10             	add    esp,0x10
c000d8cf:	83 ec 08             	sub    esp,0x8
c000d8d2:	6a 02                	push   0x2
c000d8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d8:	e8 47 fa ff ff       	call   c000d324 <VgaText::setCursorHeight(int)>
c000d8dd:	83 c4 10             	add    esp,0x10
c000d8e0:	83 ec 04             	sub    esp,0x4
c000d8e3:	6a 00                	push   0x0
c000d8e5:	6a 00                	push   0x0
c000d8e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8eb:	e8 ec f5 ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d8f0:	83 c4 10             	add    esp,0x10
c000d8f3:	83 ec 08             	sub    esp,0x8
c000d8f6:	6a 01                	push   0x1
c000d8f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fc:	e8 89 f3 ff ff       	call   c000cc8a <VgaText::showCursor(bool)>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	83 ec 08             	sub    esp,0x8
c000d907:	6a 01                	push   0x1
c000d909:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d90d:	e8 88 f3 ff ff       	call   c000cc9a <VgaText::disableBlink(bool)>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	83 ec 0c             	sub    esp,0xc
c000d918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d91c:	e8 cf fc ff ff       	call   c000d5f0 <VgaText::clearScreen()>
c000d921:	83 c4 10             	add    esp,0x10
c000d924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d928:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d933:	05 9e 10 00 00       	add    eax,0x109e
c000d938:	83 ec 04             	sub    esp,0x4
c000d93b:	68 96 00 00 00       	push   0x96
c000d940:	6a 00                	push   0x0
c000d942:	50                   	push   eax
c000d943:	e8 72 2d ff ff       	call   c00006ba <memset>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d94f:	05 34 11 00 00       	add    eax,0x1134
c000d954:	83 ec 04             	sub    esp,0x4
c000d957:	68 2c 01 00 00       	push   0x12c
c000d95c:	6a 00                	push   0x0
c000d95e:	50                   	push   eax
c000d95f:	e8 56 2d ff ff       	call   c00006ba <memset>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	90                   	nop
c000d968:	5b                   	pop    ebx
c000d969:	5e                   	pop    esi
c000d96a:	5f                   	pop    edi
c000d96b:	c3                   	ret    

c000d96c <VgaText::receiveKey(unsigned char)>:
c000d96c:	55                   	push   ebp
c000d96d:	57                   	push   edi
c000d96e:	56                   	push   esi
c000d96f:	53                   	push   ebx
c000d970:	83 ec 1c             	sub    esp,0x1c
c000d973:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d977:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d97b:	84 db                	test   bl,bl
c000d97d:	0f 84 c9 00 00 00    	je     c000da4c <VgaText::receiveKey(unsigned char)+0xe0>
c000d983:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d989:	80 fb 08             	cmp    bl,0x8
c000d98c:	75 2c                	jne    c000d9ba <VgaText::receiveKey(unsigned char)+0x4e>
c000d98e:	83 ec 0c             	sub    esp,0xc
c000d991:	57                   	push   edi
c000d992:	e8 40 2d ff ff       	call   c00006d7 <strlen>
c000d997:	83 c4 10             	add    esp,0x10
c000d99a:	85 c0                	test   eax,eax
c000d99c:	74 41                	je     c000d9df <VgaText::receiveKey(unsigned char)+0x73>
c000d99e:	50                   	push   eax
c000d99f:	50                   	push   eax
c000d9a0:	6a 08                	push   0x8
c000d9a2:	56                   	push   esi
c000d9a3:	e8 ac fc ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d9a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9ab:	e8 27 2d ff ff       	call   c00006d7 <strlen>
c000d9b0:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9b8:	eb 22                	jmp    c000d9dc <VgaText::receiveKey(unsigned char)+0x70>
c000d9ba:	52                   	push   edx
c000d9bb:	52                   	push   edx
c000d9bc:	0f be c3             	movsx  eax,bl
c000d9bf:	50                   	push   eax
c000d9c0:	56                   	push   esi
c000d9c1:	e8 8e fc ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d9c6:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9ca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9cf:	59                   	pop    ecx
c000d9d0:	5d                   	pop    ebp
c000d9d1:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9d5:	50                   	push   eax
c000d9d6:	57                   	push   edi
c000d9d7:	e8 34 2e ff ff       	call   c0000810 <strcat>
c000d9dc:	83 c4 10             	add    esp,0x10
c000d9df:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9e6:	75 05                	jne    c000d9ed <VgaText::receiveKey(unsigned char)+0x81>
c000d9e8:	80 fb 0a             	cmp    bl,0xa
c000d9eb:	75 53                	jne    c000da40 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9ed:	83 ec 0c             	sub    esp,0xc
c000d9f0:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9f6:	53                   	push   ebx
c000d9f7:	e8 db 2c ff ff       	call   c00006d7 <strlen>
c000d9fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9ff:	89 c5                	mov    ebp,eax
c000da01:	e8 d1 2c ff ff       	call   c00006d7 <strlen>
c000da06:	83 c4 10             	add    esp,0x10
c000da09:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da0d:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da12:	76 10                	jbe    c000da24 <VgaText::receiveKey(unsigned char)+0xb8>
c000da14:	83 ec 0c             	sub    esp,0xc
c000da17:	68 53 13 02 c0       	push   0xc0021353
c000da1c:	e8 27 7f 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000da21:	83 c4 10             	add    esp,0x10
c000da24:	50                   	push   eax
c000da25:	50                   	push   eax
c000da26:	57                   	push   edi
c000da27:	53                   	push   ebx
c000da28:	e8 e3 2d ff ff       	call   c0000810 <strcat>
c000da2d:	83 c4 0c             	add    esp,0xc
c000da30:	68 96 00 00 00       	push   0x96
c000da35:	6a 00                	push   0x0
c000da37:	57                   	push   edi
c000da38:	e8 7d 2c ff ff       	call   c00006ba <memset>
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	56                   	push   esi
c000da44:	e8 d3 f9 ff ff       	call   c000d41c <VgaText::doUpdate()>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	83 c4 1c             	add    esp,0x1c
c000da4f:	5b                   	pop    ebx
c000da50:	5e                   	pop    esi
c000da51:	5f                   	pop    edi
c000da52:	5d                   	pop    ebp
c000da53:	c3                   	ret    

c000da54 <VgaText::write(unsigned long long, void*, int*)>:
c000da54:	55                   	push   ebp
c000da55:	57                   	push   edi
c000da56:	56                   	push   esi
c000da57:	53                   	push   ebx
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da5f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da67:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da6e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da71:	39 eb                	cmp    ebx,ebp
c000da73:	74 13                	je     c000da88 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da75:	50                   	push   eax
c000da76:	43                   	inc    ebx
c000da77:	50                   	push   eax
c000da78:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da7c:	50                   	push   eax
c000da7d:	56                   	push   esi
c000da7e:	e8 d1 fb ff ff       	call   c000d654 <VgaText::putchar(char)>
c000da83:	83 c4 10             	add    esp,0x10
c000da86:	eb e9                	jmp    c000da71 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da88:	83 ec 0c             	sub    esp,0xc
c000da8b:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da92:	56                   	push   esi
c000da93:	e8 84 f9 ff ff       	call   c000d41c <VgaText::doUpdate()>
c000da98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da9c:	89 38                	mov    DWORD PTR [eax],edi
c000da9e:	83 c4 1c             	add    esp,0x1c
c000daa1:	31 c0                	xor    eax,eax
c000daa3:	5b                   	pop    ebx
c000daa4:	5e                   	pop    esi
c000daa5:	5f                   	pop    edi
c000daa6:	5d                   	pop    ebp
c000daa7:	c3                   	ret    

c000daa8 <newTerminal(char*)>:
c000daa8:	83 ec 28             	sub    esp,0x28
c000daab:	68 60 12 00 00       	push   0x1260
c000dab0:	e8 6f 15 00 00       	call   c000f024 <operator new(unsigned long)>
c000dab5:	5a                   	pop    edx
c000dab6:	59                   	pop    ecx
c000dab7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dabb:	50                   	push   eax
c000dabc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dac0:	e8 15 fd ff ff       	call   c000d7da <VgaText::VgaText(char const*)>
c000dac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dac9:	83 c4 2c             	add    esp,0x2c
c000dacc:	c3                   	ret    
c000dacd:	90                   	nop

c000dace <TSS::TSS()>:
c000dace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dad9:	90                   	nop
c000dada:	c3                   	ret    
c000dadb:	90                   	nop

c000dadc <TSS::setESP(unsigned long)>:
c000dadc:	55                   	push   ebp
c000dadd:	89 e5                	mov    ebp,esp
c000dadf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dae5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dae8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000daeb:	90                   	nop
c000daec:	5d                   	pop    ebp
c000daed:	c3                   	ret    

c000daee <TSS::flush()>:
c000daee:	55                   	push   ebp
c000daef:	89 e5                	mov    ebp,esp
c000daf1:	83 ec 10             	sub    esp,0x10
c000daf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daf7:	8b 00                	mov    eax,DWORD PTR [eax]
c000daf9:	83 c8 03             	or     eax,0x3
c000dafc:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000db00:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000db04:	66 89 d0             	mov    ax,dx
c000db07:	0f 00 d8             	ltr    ax
c000db0a:	90                   	nop
c000db0b:	c9                   	leave  
c000db0c:	c3                   	ret    
c000db0d:	90                   	nop

c000db0e <TSS::setup(unsigned long, unsigned long)>:
c000db0e:	55                   	push   ebp
c000db0f:	89 e5                	mov    ebp,esp
c000db11:	53                   	push   ebx
c000db12:	83 ec 14             	sub    esp,0x14
c000db15:	83 ec 0c             	sub    esp,0xc
c000db18:	6a 68                	push   0x68
c000db1a:	e8 cc e4 ff ff       	call   c000bfeb <malloc>
c000db1f:	83 c4 10             	add    esp,0x10
c000db22:	89 c2                	mov    edx,eax
c000db24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db30:	83 ec 04             	sub    esp,0x4
c000db33:	6a 68                	push   0x68
c000db35:	6a 00                	push   0x0
c000db37:	50                   	push   eax
c000db38:	e8 7d 2b ff ff       	call   c00006ba <memset>
c000db3d:	83 c4 10             	add    esp,0x10
c000db40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db46:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db52:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db5e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db76:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db82:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db9d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dba9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dbac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb2:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbbc:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbbf:	e8 e1 1a 01 00       	call   c001f6a5 <CPU::readCR3()>
c000dbc4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbcd:	83 ec 08             	sub    esp,0x8
c000dbd0:	50                   	push   eax
c000dbd1:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbd4:	50                   	push   eax
c000dbd5:	e8 e8 db ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000dbda:	83 c4 10             	add    esp,0x10
c000dbdd:	83 ec 08             	sub    esp,0x8
c000dbe0:	6a 68                	push   0x68
c000dbe2:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbe5:	50                   	push   eax
c000dbe6:	e8 f3 db ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000dbeb:	83 c4 10             	add    esp,0x10
c000dbee:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbf2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbf5:	83 e0 0f             	and    eax,0xf
c000dbf8:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbfb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbfe:	83 c8 40             	or     eax,0x40
c000dc01:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc04:	e8 d3 6b 00 00       	call   c00147dc <thisCPU()>
c000dc09:	05 78 01 00 00       	add    eax,0x178
c000dc0e:	83 ec 04             	sub    esp,0x4
c000dc11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc14:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc17:	50                   	push   eax
c000dc18:	e8 f5 db ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	89 c2                	mov    edx,eax
c000dc22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc25:	89 10                	mov    DWORD PTR [eax],edx
c000dc27:	e8 b0 6b 00 00       	call   c00147dc <thisCPU()>
c000dc2c:	05 78 01 00 00       	add    eax,0x178
c000dc31:	83 ec 0c             	sub    esp,0xc
c000dc34:	50                   	push   eax
c000dc35:	e8 1c dc ff ff       	call   c000b856 <GDT::flush()>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc40:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc42:	83 ec 08             	sub    esp,0x8
c000dc45:	50                   	push   eax
c000dc46:	68 bc 13 02 c0       	push   0xc00213bc
c000dc4b:	e8 09 15 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000dc50:	83 c4 10             	add    esp,0x10
c000dc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc56:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc58:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc5b:	c9                   	leave  
c000dc5c:	c3                   	ret    
c000dc5d:	90                   	nop

c000dc5e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc69:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc6e:	75 08                	jne    c000dc78 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000dc70:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dc76:	eb 38                	jmp    c000dcb0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000dc78:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc7d:	75 17                	jne    c000dc96 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000dc7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc87:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dc8d:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc93:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000dc96:	89 c1                	mov    ecx,eax
c000dc98:	83 e1 fd             	and    ecx,0xfffffffd
c000dc9b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000dca1:	74 cd                	je     c000dc70 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dca3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dca8:	83 e0 ef             	and    eax,0xffffffef
c000dcab:	83 f8 08             	cmp    eax,0x8
c000dcae:	76 c0                	jbe    c000dc70 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dcb0:	31 c0                	xor    eax,eax
c000dcb2:	c3                   	ret    
c000dcb3:	90                   	nop

c000dcb4 <ReservedFilename::isAtty()>:
c000dcb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcb8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dcbb:	31 c0                	xor    eax,eax
c000dcbd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000dcc3:	74 09                	je     c000dcce <ReservedFilename::isAtty()+0x1a>
c000dcc5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000dccb:	0f 94 c0             	sete   al
c000dcce:	c3                   	ret    
c000dccf:	90                   	nop

c000dcd0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dcd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcdb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dcdf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dce4:	75 08                	jne    c000dcee <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000dce6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dcec:	eb 3d                	jmp    c000dd2b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dcee:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dcf3:	75 17                	jne    c000dd0c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000dcf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dcfa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dcfd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd03:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd09:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000dd0c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd11:	75 04                	jne    c000dd17 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000dd13:	89 0a                	mov    DWORD PTR [edx],ecx
c000dd15:	eb 14                	jmp    c000dd2b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd17:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd1c:	74 c8                	je     c000dce6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd1e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd23:	83 e0 ef             	and    eax,0xffffffef
c000dd26:	83 f8 08             	cmp    eax,0x8
c000dd29:	76 bb                	jbe    c000dce6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd2b:	31 c0                	xor    eax,eax
c000dd2d:	c3                   	ret    

c000dd2e <UnixFile::getFileDescriptor()>:
c000dd2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd35:	c3                   	ret    

c000dd36 <UnixFile::UnixFile(int)>:
c000dd36:	53                   	push   ebx
c000dd37:	83 ec 18             	sub    esp,0x18
c000dd3a:	ba a8 14 02 c0       	mov    edx,0xc00214a8
c000dd3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd43:	89 10                	mov    DWORD PTR [eax],edx
c000dd45:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd4d:	0f 8f 4d 01 00 00    	jg     c000dea0 <UnixFile::UnixFile(int)+0x16a>
c000dd53:	a1 20 3a 02 c0       	mov    eax,ds:0xc0023a20
c000dd58:	8d 50 01             	lea    edx,[eax+0x1]
c000dd5b:	89 15 20 3a 02 c0    	mov    DWORD PTR ds:0xc0023a20,edx
c000dd61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd65:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd68:	83 ec 08             	sub    esp,0x8
c000dd6b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd6f:	68 d8 46 02 c0       	push   0xc00246d8
c000dd74:	e8 a1 19 01 00       	call   c001f71a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd79:	83 c4 10             	add    esp,0x10
c000dd7c:	a0 d4 46 02 c0       	mov    al,ds:0xc00246d4
c000dd81:	83 f0 01             	xor    eax,0x1
c000dd84:	84 c0                	test   al,al
c000dd86:	0f 84 15 01 00 00    	je     c000dea1 <UnixFile::UnixFile(int)+0x16b>
c000dd8c:	c6 05 d4 46 02 c0 01 	mov    BYTE PTR ds:0xc00246d4,0x1
c000dd93:	83 ec 0c             	sub    esp,0xc
c000dd96:	6a 0c                	push   0xc
c000dd98:	e8 87 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000dd9d:	83 c4 10             	add    esp,0x10
c000dda0:	89 c3                	mov    ebx,eax
c000dda2:	83 ec 08             	sub    esp,0x8
c000dda5:	68 03 ff ff 0f       	push   0xfffff03
c000ddaa:	53                   	push   ebx
c000ddab:	e8 f6 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000ddb0:	83 c4 10             	add    esp,0x10
c000ddb3:	89 1d cc 46 02 c0    	mov    DWORD PTR ds:0xc00246cc,ebx
c000ddb9:	83 ec 0c             	sub    esp,0xc
c000ddbc:	6a 0c                	push   0xc
c000ddbe:	e8 61 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000ddc3:	83 c4 10             	add    esp,0x10
c000ddc6:	89 c3                	mov    ebx,eax
c000ddc8:	83 ec 08             	sub    esp,0x8
c000ddcb:	68 01 ff ff 0f       	push   0xfffff01
c000ddd0:	53                   	push   ebx
c000ddd1:	e8 d0 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000ddd6:	83 c4 10             	add    esp,0x10
c000ddd9:	89 1d d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,ebx
c000dddf:	83 ec 0c             	sub    esp,0xc
c000dde2:	6a 0c                	push   0xc
c000dde4:	e8 3b 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000dde9:	83 c4 10             	add    esp,0x10
c000ddec:	89 c3                	mov    ebx,eax
c000ddee:	83 ec 08             	sub    esp,0x8
c000ddf1:	68 00 ff ff 0f       	push   0xfffff00
c000ddf6:	53                   	push   ebx
c000ddf7:	e8 aa 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000ddfc:	83 c4 10             	add    esp,0x10
c000ddff:	89 1d c4 46 02 c0    	mov    DWORD PTR ds:0xc00246c4,ebx
c000de05:	83 ec 0c             	sub    esp,0xc
c000de08:	6a 0c                	push   0xc
c000de0a:	e8 15 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 c3                	mov    ebx,eax
c000de14:	83 ec 08             	sub    esp,0x8
c000de17:	68 02 ff ff 0f       	push   0xfffff02
c000de1c:	53                   	push   ebx
c000de1d:	e8 84 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000de22:	83 c4 10             	add    esp,0x10
c000de25:	89 1d c8 46 02 c0    	mov    DWORD PTR ds:0xc00246c8,ebx
c000de2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de33:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de38:	7f 67                	jg     c000dea1 <UnixFile::UnixFile(int)+0x16b>
c000de3a:	83 ec 0c             	sub    esp,0xc
c000de3d:	6a 0c                	push   0xc
c000de3f:	e8 e0 11 00 00       	call   c000f024 <operator new(unsigned long)>
c000de44:	83 c4 10             	add    esp,0x10
c000de47:	89 c3                	mov    ebx,eax
c000de49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de4d:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de52:	83 ec 08             	sub    esp,0x8
c000de55:	50                   	push   eax
c000de56:	53                   	push   ebx
c000de57:	e8 4a 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000de5c:	83 c4 10             	add    esp,0x10
c000de5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de63:	89 1c 85 a0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb960],ebx
c000de6a:	83 ec 0c             	sub    esp,0xc
c000de6d:	6a 0c                	push   0xc
c000de6f:	e8 b0 11 00 00       	call   c000f024 <operator new(unsigned long)>
c000de74:	83 c4 10             	add    esp,0x10
c000de77:	89 c3                	mov    ebx,eax
c000de79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de7d:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de82:	83 ec 08             	sub    esp,0x8
c000de85:	50                   	push   eax
c000de86:	53                   	push   ebx
c000de87:	e8 1a 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000de8c:	83 c4 10             	add    esp,0x10
c000de8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de93:	89 1c 85 60 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9a0],ebx
c000de9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000de9e:	eb 93                	jmp    c000de33 <UnixFile::UnixFile(int)+0xfd>
c000dea0:	90                   	nop
c000dea1:	83 c4 18             	add    esp,0x18
c000dea4:	5b                   	pop    ebx
c000dea5:	c3                   	ret    

c000dea6 <ReservedFilename::ReservedFilename(int)>:
c000dea6:	83 ec 0c             	sub    esp,0xc
c000dea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dead:	83 ec 08             	sub    esp,0x8
c000deb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb4:	50                   	push   eax
c000deb5:	e8 7c fe ff ff       	call   c000dd36 <UnixFile::UnixFile(int)>
c000deba:	83 c4 10             	add    esp,0x10
c000debd:	ba c4 14 02 c0       	mov    edx,0xc00214c4
c000dec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec6:	89 10                	mov    DWORD PTR [eax],edx
c000dec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000decc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ded0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ded3:	90                   	nop
c000ded4:	83 c4 0c             	add    esp,0xc
c000ded7:	c3                   	ret    

c000ded8 <UnixFile::~UnixFile()>:
c000ded8:	83 ec 1c             	sub    esp,0x1c
c000dedb:	ba a8 14 02 c0       	mov    edx,0xc00214a8
c000dee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee4:	89 10                	mov    DWORD PTR [eax],edx
c000dee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000deed:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000def2:	7f 73                	jg     c000df67 <UnixFile::~UnixFile()+0x8f>
c000def4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000defc:	83 ec 0c             	sub    esp,0xc
c000deff:	68 d8 46 02 c0       	push   0xc00246d8
c000df04:	e8 e5 18 01 00       	call   c001f7ee <LinkedList<UnixFile>::getFirstElement()>
c000df09:	83 c4 10             	add    esp,0x10
c000df0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	68 d8 46 02 c0       	push   0xc00246d8
c000df18:	e8 d9 18 01 00       	call   c001f7f6 <LinkedList<UnixFile>::removeFirst()>
c000df1d:	83 c4 10             	add    esp,0x10
c000df20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df24:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000df28:	74 40                	je     c000df6a <UnixFile::~UnixFile()+0x92>
c000df2a:	83 ec 08             	sub    esp,0x8
c000df2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df31:	68 d8 46 02 c0       	push   0xc00246d8
c000df36:	e8 df 17 01 00       	call   c001f71a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df3b:	83 c4 10             	add    esp,0x10
c000df3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df42:	8d 50 01             	lea    edx,[eax+0x1]
c000df45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df49:	3d 88 13 00 00       	cmp    eax,0x1388
c000df4e:	0f 94 c0             	sete   al
c000df51:	84 c0                	test   al,al
c000df53:	74 a7                	je     c000defc <UnixFile::~UnixFile()+0x24>
c000df55:	83 ec 0c             	sub    esp,0xc
c000df58:	68 80 14 02 c0       	push   0xc0021480
c000df5d:	e8 e6 79 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000df62:	83 c4 10             	add    esp,0x10
c000df65:	eb 95                	jmp    c000defc <UnixFile::~UnixFile()+0x24>
c000df67:	90                   	nop
c000df68:	eb 01                	jmp    c000df6b <UnixFile::~UnixFile()+0x93>
c000df6a:	90                   	nop
c000df6b:	90                   	nop
c000df6c:	83 c4 1c             	add    esp,0x1c
c000df6f:	c3                   	ret    

c000df70 <UnixFile::~UnixFile()>:
c000df70:	83 ec 0c             	sub    esp,0xc
c000df73:	83 ec 0c             	sub    esp,0xc
c000df76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7a:	e8 59 ff ff ff       	call   c000ded8 <UnixFile::~UnixFile()>
c000df7f:	83 c4 10             	add    esp,0x10
c000df82:	83 ec 08             	sub    esp,0x8
c000df85:	6a 0c                	push   0xc
c000df87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8b:	e8 a3 10 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000df90:	83 c4 10             	add    esp,0x10
c000df93:	83 c4 0c             	add    esp,0xc
c000df96:	c3                   	ret    
c000df97:	90                   	nop

c000df98 <ReservedFilename::~ReservedFilename()>:
c000df98:	83 ec 0c             	sub    esp,0xc
c000df9b:	ba c4 14 02 c0       	mov    edx,0xc00214c4
c000dfa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa4:	89 10                	mov    DWORD PTR [eax],edx
c000dfa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfaa:	83 ec 0c             	sub    esp,0xc
c000dfad:	50                   	push   eax
c000dfae:	e8 25 ff ff ff       	call   c000ded8 <UnixFile::~UnixFile()>
c000dfb3:	83 c4 10             	add    esp,0x10
c000dfb6:	90                   	nop
c000dfb7:	83 c4 0c             	add    esp,0xc
c000dfba:	c3                   	ret    
c000dfbb:	90                   	nop

c000dfbc <ReservedFilename::~ReservedFilename()>:
c000dfbc:	83 ec 0c             	sub    esp,0xc
c000dfbf:	83 ec 0c             	sub    esp,0xc
c000dfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc6:	e8 cd ff ff ff       	call   c000df98 <ReservedFilename::~ReservedFilename()>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	83 ec 08             	sub    esp,0x8
c000dfd1:	6a 0c                	push   0xc
c000dfd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd7:	e8 57 10 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	83 c4 0c             	add    esp,0xc
c000dfe2:	c3                   	ret    

c000dfe3 <getFromFileDescriptor(int)>:
c000dfe3:	53                   	push   ebx
c000dfe4:	83 ec 08             	sub    esp,0x8
c000dfe7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfeb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dff1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dff7:	7f 2c                	jg     c000e025 <getFromFileDescriptor(int)+0x42>
c000dff9:	83 ec 0c             	sub    esp,0xc
c000dffc:	68 d8 46 02 c0       	push   0xc00246d8
c000e001:	e8 e8 17 01 00       	call   c001f7ee <LinkedList<UnixFile>::getFirstElement()>
c000e006:	83 c4 10             	add    esp,0x10
c000e009:	85 c0                	test   eax,eax
c000e00b:	75 04                	jne    c000e011 <getFromFileDescriptor(int)+0x2e>
c000e00d:	31 c0                	xor    eax,eax
c000e00f:	eb 6e                	jmp    c000e07f <getFromFileDescriptor(int)+0x9c>
c000e011:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e014:	74 69                	je     c000e07f <getFromFileDescriptor(int)+0x9c>
c000e016:	52                   	push   edx
c000e017:	52                   	push   edx
c000e018:	50                   	push   eax
c000e019:	68 d8 46 02 c0       	push   0xc00246d8
c000e01e:	e8 75 18 01 00       	call   c001f898 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e023:	eb e1                	jmp    c000e006 <getFromFileDescriptor(int)+0x23>
c000e025:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e02a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e030:	74 4d                	je     c000e07f <getFromFileDescriptor(int)+0x9c>
c000e032:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e037:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e03d:	74 40                	je     c000e07f <getFromFileDescriptor(int)+0x9c>
c000e03f:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e044:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e04a:	74 33                	je     c000e07f <getFromFileDescriptor(int)+0x9c>
c000e04c:	a1 c4 46 02 c0       	mov    eax,ds:0xc00246c4
c000e051:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e057:	74 26                	je     c000e07f <getFromFileDescriptor(int)+0x9c>
c000e059:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e05f:	83 f8 08             	cmp    eax,0x8
c000e062:	77 09                	ja     c000e06d <getFromFileDescriptor(int)+0x8a>
c000e064:	8b 04 85 a0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb960]
c000e06b:	eb 12                	jmp    c000e07f <getFromFileDescriptor(int)+0x9c>
c000e06d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e073:	83 fb 08             	cmp    ebx,0x8
c000e076:	77 95                	ja     c000e00d <getFromFileDescriptor(int)+0x2a>
c000e078:	8b 04 9d 60 46 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb9a0]
c000e07f:	83 c4 08             	add    esp,0x8
c000e082:	5b                   	pop    ebx
c000e083:	c3                   	ret    

c000e084 <__static_initialization_and_destruction_0(int, int)>:
c000e084:	83 ec 0c             	sub    esp,0xc
c000e087:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e08c:	75 34                	jne    c000e0c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e08e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e096:	75 2a                	jne    c000e0c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e098:	83 ec 0c             	sub    esp,0xc
c000e09b:	68 d8 46 02 c0       	push   0xc00246d8
c000e0a0:	e8 1d 16 01 00       	call   c001f6c2 <LinkedList<UnixFile>::LinkedList()>
c000e0a5:	83 c4 10             	add    esp,0x10
c000e0a8:	83 ec 04             	sub    esp,0x4
c000e0ab:	68 9c 39 02 c0       	push   0xc002399c
c000e0b0:	68 d8 46 02 c0       	push   0xc00246d8
c000e0b5:	68 c0 f6 01 c0       	push   0xc001f6c0
c000e0ba:	e8 f0 0e 00 00       	call   c000efaf <__cxa_atexit>
c000e0bf:	83 c4 10             	add    esp,0x10
c000e0c2:	90                   	nop
c000e0c3:	83 c4 0c             	add    esp,0xc
c000e0c6:	c3                   	ret    

c000e0c7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0c7:	83 ec 0c             	sub    esp,0xc
c000e0ca:	83 ec 08             	sub    esp,0x8
c000e0cd:	68 ff ff 00 00       	push   0xffff
c000e0d2:	6a 01                	push   0x1
c000e0d4:	e8 ab ff ff ff       	call   c000e084 <__static_initialization_and_destruction_0(int, int)>
c000e0d9:	83 c4 10             	add    esp,0x10
c000e0dc:	83 c4 0c             	add    esp,0xc
c000e0df:	c3                   	ret    

c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0e0:	53                   	push   ebx
c000e0e1:	8b 15 28 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a28
c000e0e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e0ef:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e0f5:	89 c8                	mov    eax,ecx
c000e0f7:	d1 e8                	shr    eax,1
c000e0f9:	01 d0                	add    eax,edx
c000e0fb:	83 e1 01             	and    ecx,0x1
c000e0fe:	8a 10                	mov    dl,BYTE PTR [eax]
c000e100:	75 09                	jne    c000e10b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e102:	83 e2 f0             	and    edx,0xfffffff0
c000e105:	09 da                	or     edx,ebx
c000e107:	88 10                	mov    BYTE PTR [eax],dl
c000e109:	5b                   	pop    ebx
c000e10a:	c3                   	ret    
c000e10b:	c1 e3 04             	shl    ebx,0x4
c000e10e:	83 e2 0f             	and    edx,0xf
c000e111:	09 da                	or     edx,ebx
c000e113:	88 10                	mov    BYTE PTR [eax],dl
c000e115:	5b                   	pop    ebx
c000e116:	c3                   	ret    

c000e117 <Virt::getPageState(unsigned long)>:
c000e117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e11b:	8b 0d 28 3a 02 c0    	mov    ecx,DWORD PTR ds:0xc0023a28
c000e121:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e127:	89 d0                	mov    eax,edx
c000e129:	d1 e8                	shr    eax,1
c000e12b:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e12e:	88 c8                	mov    al,cl
c000e130:	c0 e8 04             	shr    al,0x4
c000e133:	83 e2 01             	and    edx,0x1
c000e136:	75 05                	jne    c000e13d <Virt::getPageState(unsigned long)+0x26>
c000e138:	88 c8                	mov    al,cl
c000e13a:	83 e0 0f             	and    eax,0xf
c000e13d:	c3                   	ret    

c000e13e <Virt::allocateKernelVirtualPages(int)>:
c000e13e:	55                   	push   ebp
c000e13f:	31 ed                	xor    ebp,ebp
c000e141:	57                   	push   edi
c000e142:	56                   	push   esi
c000e143:	53                   	push   ebx
c000e144:	31 db                	xor    ebx,ebx
c000e146:	83 ec 1c             	sub    esp,0x1c
c000e149:	8b 3d 24 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a24
c000e14f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e153:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e158:	57                   	push   edi
c000e159:	e8 b9 ff ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e15e:	5a                   	pop    edx
c000e15f:	84 c0                	test   al,al
c000e161:	75 3a                	jne    c000e19d <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e163:	85 db                	test   ebx,ebx
c000e165:	75 02                	jne    c000e169 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e167:	89 fd                	mov    ebp,edi
c000e169:	43                   	inc    ebx
c000e16a:	39 f3                	cmp    ebx,esi
c000e16c:	74 5a                	je     c000e1c8 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e16e:	47                   	inc    edi
c000e16f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e175:	76 31                	jbe    c000e1a8 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e177:	c7 05 24 3a 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023a24,0xc8000
c000e181:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e186:	75 28                	jne    c000e1b0 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e188:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e18d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e192:	57                   	push   edi
c000e193:	e8 7f ff ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e198:	5a                   	pop    edx
c000e199:	84 c0                	test   al,al
c000e19b:	74 c6                	je     c000e163 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e19d:	47                   	inc    edi
c000e19e:	31 db                	xor    ebx,ebx
c000e1a0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e1a6:	77 cf                	ja     c000e177 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e1a8:	89 3d 24 3a 02 c0    	mov    DWORD PTR ds:0xc0023a24,edi
c000e1ae:	eb a8                	jmp    c000e158 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1b0:	83 ec 0c             	sub    esp,0xc
c000e1b3:	68 d8 14 02 c0       	push   0xc00214d8
c000e1b8:	e8 8b 77 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000e1bd:	8b 3d 24 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a24
c000e1c3:	83 c4 10             	add    esp,0x10
c000e1c6:	eb 90                	jmp    c000e158 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1c8:	89 2d 24 3a 02 c0    	mov    DWORD PTR ds:0xc0023a24,ebp
c000e1ce:	4b                   	dec    ebx
c000e1cf:	74 5f                	je     c000e230 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1d1:	85 f6                	test   esi,esi
c000e1d3:	74 3d                	je     c000e212 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1d5:	89 e8                	mov    eax,ebp
c000e1d7:	31 db                	xor    ebx,ebx
c000e1d9:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1dc:	eb 14                	jmp    c000e1f2 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1de:	6a 01                	push   0x1
c000e1e0:	43                   	inc    ebx
c000e1e1:	50                   	push   eax
c000e1e2:	e8 f9 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1e7:	58                   	pop    eax
c000e1e8:	39 f3                	cmp    ebx,esi
c000e1ea:	5a                   	pop    edx
c000e1eb:	74 25                	je     c000e212 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1ed:	a1 24 3a 02 c0       	mov    eax,ds:0xc0023a24
c000e1f2:	8d 50 01             	lea    edx,[eax+0x1]
c000e1f5:	85 db                	test   ebx,ebx
c000e1f7:	89 15 24 3a 02 c0    	mov    DWORD PTR ds:0xc0023a24,edx
c000e1fd:	74 20                	je     c000e21f <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e1ff:	39 df                	cmp    edi,ebx
c000e201:	75 db                	jne    c000e1de <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e203:	6a 03                	push   0x3
c000e205:	43                   	inc    ebx
c000e206:	50                   	push   eax
c000e207:	e8 d4 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e20c:	59                   	pop    ecx
c000e20d:	39 f3                	cmp    ebx,esi
c000e20f:	58                   	pop    eax
c000e210:	75 db                	jne    c000e1ed <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e212:	83 c4 1c             	add    esp,0x1c
c000e215:	89 e8                	mov    eax,ebp
c000e217:	c1 e0 0c             	shl    eax,0xc
c000e21a:	5b                   	pop    ebx
c000e21b:	5e                   	pop    esi
c000e21c:	5f                   	pop    edi
c000e21d:	5d                   	pop    ebp
c000e21e:	c3                   	ret    
c000e21f:	6a 02                	push   0x2
c000e221:	bb 01 00 00 00       	mov    ebx,0x1
c000e226:	50                   	push   eax
c000e227:	e8 b4 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e22c:	58                   	pop    eax
c000e22d:	5a                   	pop    edx
c000e22e:	eb bd                	jmp    c000e1ed <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e230:	6a 04                	push   0x4
c000e232:	8d 45 01             	lea    eax,[ebp+0x1]
c000e235:	55                   	push   ebp
c000e236:	a3 24 3a 02 c0       	mov    ds:0xc0023a24,eax
c000e23b:	e8 a0 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e240:	59                   	pop    ecx
c000e241:	5b                   	pop    ebx
c000e242:	89 e8                	mov    eax,ebp
c000e244:	c1 e0 0c             	shl    eax,0xc
c000e247:	83 c4 1c             	add    esp,0x1c
c000e24a:	5b                   	pop    ebx
c000e24b:	5e                   	pop    esi
c000e24c:	5f                   	pop    edi
c000e24d:	5d                   	pop    ebp
c000e24e:	c3                   	ret    

c000e24f <Virt::virtualMemorySetup()>:
c000e24f:	53                   	push   ebx
c000e250:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e255:	83 ec 08             	sub    esp,0x8
c000e258:	6a 0f                	push   0xf
c000e25a:	53                   	push   ebx
c000e25b:	43                   	inc    ebx
c000e25c:	e8 7f fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e261:	59                   	pop    ecx
c000e262:	58                   	pop    eax
c000e263:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e269:	75 ed                	jne    c000e258 <Virt::virtualMemorySetup()+0x9>
c000e26b:	50                   	push   eax
c000e26c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e271:	50                   	push   eax
c000e272:	68 00 00 00 c8       	push   0xc8000000
c000e277:	68 5f 16 02 c0       	push   0xc002165f
c000e27c:	e8 d8 0e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e281:	58                   	pop    eax
c000e282:	5a                   	pop    edx
c000e283:	68 00 f0 ff ef       	push   0xeffff000
c000e288:	68 73 16 02 c0       	push   0xc0021673
c000e28d:	e8 c7 0e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e292:	83 c4 10             	add    esp,0x10
c000e295:	50                   	push   eax
c000e296:	50                   	push   eax
c000e297:	6a 00                	push   0x0
c000e299:	53                   	push   ebx
c000e29a:	43                   	inc    ebx
c000e29b:	e8 40 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2a0:	83 c4 10             	add    esp,0x10
c000e2a3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e2a9:	75 ea                	jne    c000e295 <Virt::virtualMemorySetup()+0x46>
c000e2ab:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e2b0:	51                   	push   ecx
c000e2b1:	51                   	push   ecx
c000e2b2:	6a 0f                	push   0xf
c000e2b4:	53                   	push   ebx
c000e2b5:	43                   	inc    ebx
c000e2b6:	e8 25 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2c4:	75 ea                	jne    c000e2b0 <Virt::virtualMemorySetup()+0x61>
c000e2c6:	83 c4 08             	add    esp,0x8
c000e2c9:	5b                   	pop    ebx
c000e2ca:	c3                   	ret    

c000e2cb <Virt::getAKernelVAS()>:
c000e2cb:	a1 e4 46 02 c0       	mov    eax,ds:0xc00246e4
c000e2d0:	c3                   	ret    

c000e2d1 <Virt::setupPageSwapping(int)>:
c000e2d1:	57                   	push   edi
c000e2d2:	56                   	push   esi
c000e2d3:	53                   	push   ebx
c000e2d4:	83 ec 1c             	sub    esp,0x1c
c000e2d7:	68 14 01 00 00       	push   0x114
c000e2dc:	e8 43 0d 00 00       	call   c000f024 <operator new(unsigned long)>
c000e2e1:	83 c4 0c             	add    esp,0xc
c000e2e4:	8b 3d d4 59 02 c0    	mov    edi,DWORD PTR ds:0xc00259d4
c000e2ea:	89 c6                	mov    esi,eax
c000e2ec:	57                   	push   edi
c000e2ed:	68 87 16 02 c0       	push   0xc0021687
c000e2f2:	50                   	push   eax
c000e2f3:	e8 98 13 00 00       	call   c000f690 <File::File(char const*, Process*)>
c000e2f8:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2fb:	e8 6c 15 00 00       	call   c000f86c <File::unlink()>
c000e300:	58                   	pop    eax
c000e301:	5a                   	pop    edx
c000e302:	6a 12                	push   0x12
c000e304:	56                   	push   esi
c000e305:	e8 ea 13 00 00       	call   c000f6f4 <File::open(FileOpenMode)>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	85 c0                	test   eax,eax
c000e30f:	0f 85 b6 00 00 00    	jne    c000e3cb <Virt::setupPageSwapping(int)+0xfa>
c000e315:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e319:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e321:	c1 e3 08             	shl    ebx,0x8
c000e324:	83 ec 0c             	sub    esp,0xc
c000e327:	c1 fb 04             	sar    ebx,0x4
c000e32a:	68 00 00 01 00       	push   0x10000
c000e32f:	e8 b7 dc ff ff       	call   c000bfeb <malloc>
c000e334:	83 c4 0c             	add    esp,0xc
c000e337:	89 c7                	mov    edi,eax
c000e339:	68 00 00 01 00       	push   0x10000
c000e33e:	6a 00                	push   0x0
c000e340:	50                   	push   eax
c000e341:	e8 74 23 ff ff       	call   c00006ba <memset>
c000e346:	83 c4 10             	add    esp,0x10
c000e349:	4b                   	dec    ebx
c000e34a:	83 fb ff             	cmp    ebx,0xffffffff
c000e34d:	74 4a                	je     c000e399 <Virt::setupPageSwapping(int)+0xc8>
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	8b 06                	mov    eax,DWORD PTR [esi]
c000e354:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e358:	52                   	push   edx
c000e359:	57                   	push   edi
c000e35a:	6a 00                	push   0x0
c000e35c:	68 00 00 01 00       	push   0x10000
c000e361:	56                   	push   esi
c000e362:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e365:	83 c4 20             	add    esp,0x20
c000e368:	85 c0                	test   eax,eax
c000e36a:	75 4d                	jne    c000e3b9 <Virt::setupPageSwapping(int)+0xe8>
c000e36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e370:	3d 00 00 01 00       	cmp    eax,0x10000
c000e375:	74 d2                	je     c000e349 <Virt::setupPageSwapping(int)+0x78>
c000e377:	52                   	push   edx
c000e378:	4b                   	dec    ebx
c000e379:	52                   	push   edx
c000e37a:	50                   	push   eax
c000e37b:	68 da 16 02 c0       	push   0xc00216da
c000e380:	e8 d4 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e385:	c7 04 24 e3 16 02 c0 	mov    DWORD PTR [esp],0xc00216e3
c000e38c:	e8 b7 75 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000e391:	83 c4 10             	add    esp,0x10
c000e394:	83 fb ff             	cmp    ebx,0xffffffff
c000e397:	75 b6                	jne    c000e34f <Virt::setupPageSwapping(int)+0x7e>
c000e399:	83 ec 0c             	sub    esp,0xc
c000e39c:	56                   	push   esi
c000e39d:	e8 b0 13 00 00       	call   c000f752 <File::close()>
c000e3a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e3a5:	e8 61 dc ff ff       	call   c000c00b <rfree>
c000e3aa:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3ac:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3b2:	83 c4 20             	add    esp,0x20
c000e3b5:	5b                   	pop    ebx
c000e3b6:	5e                   	pop    esi
c000e3b7:	5f                   	pop    edi
c000e3b8:	c3                   	ret    
c000e3b9:	51                   	push   ecx
c000e3ba:	51                   	push   ecx
c000e3bb:	50                   	push   eax
c000e3bc:	68 c2 16 02 c0       	push   0xc00216c2
c000e3c1:	e8 93 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e3c6:	83 c4 10             	add    esp,0x10
c000e3c9:	eb a1                	jmp    c000e36c <Virt::setupPageSwapping(int)+0x9b>
c000e3cb:	53                   	push   ebx
c000e3cc:	53                   	push   ebx
c000e3cd:	50                   	push   eax
c000e3ce:	68 9e 16 02 c0       	push   0xc002169e
c000e3d3:	e8 81 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e3d8:	c7 04 24 a7 16 02 c0 	mov    DWORD PTR [esp],0xc00216a7
c000e3df:	e8 64 75 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000e3e4:	83 c4 10             	add    esp,0x10
c000e3e7:	e9 29 ff ff ff       	jmp    c000e315 <Virt::setupPageSwapping(int)+0x44>

c000e3ec <VAS::VAS()>:
c000e3ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fb:	a3 e4 46 02 c0       	mov    ds:0xc00246e4,eax
c000e400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e404:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e40c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e40f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e413:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e41a:	90                   	nop
c000e41b:	c3                   	ret    

c000e41c <VAS::VAS(VAS*)>:
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e423:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e42a:	83 ec 0c             	sub    esp,0xc
c000e42d:	68 f8 14 02 c0       	push   0xc00214f8
c000e432:	e8 11 75 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000e437:	83 c4 10             	add    esp,0x10
c000e43a:	90                   	nop
c000e43b:	83 c4 0c             	add    esp,0xc
c000e43e:	c3                   	ret    
c000e43f:	90                   	nop

c000e440 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e444:	89 c2                	mov    edx,eax
c000e446:	c1 ea 16             	shr    edx,0x16
c000e449:	c1 e8 0a             	shr    eax,0xa
c000e44c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e451:	19 c9                	sbb    ecx,ecx
c000e453:	25 fc 0f 00 00       	and    eax,0xffc
c000e458:	c1 e2 0c             	shl    edx,0xc
c000e45b:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e461:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e468:	01 d0                	add    eax,edx
c000e46a:	c3                   	ret    
c000e46b:	90                   	nop

c000e46c <VAS::getPageTableEntry(unsigned long)>:
c000e46c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e470:	89 ca                	mov    edx,ecx
c000e472:	c1 ea 16             	shr    edx,0x16
c000e475:	c1 e9 0a             	shr    ecx,0xa
c000e478:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e47e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e484:	c1 e0 0c             	shl    eax,0xc
c000e487:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e48a:	c3                   	ret    

c000e48b <Virt::freeKernelVirtualPages(unsigned long)>:
c000e48b:	57                   	push   edi
c000e48c:	56                   	push   esi
c000e48d:	be 01 00 00 00       	mov    esi,0x1
c000e492:	53                   	push   ebx
c000e493:	83 ec 10             	sub    esp,0x10
c000e496:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e49a:	c1 eb 0c             	shr    ebx,0xc
c000e49d:	eb 3e                	jmp    c000e4dd <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e49f:	e8 27 fe ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e4a4:	51                   	push   ecx
c000e4a5:	51                   	push   ecx
c000e4a6:	57                   	push   edi
c000e4a7:	50                   	push   eax
c000e4a8:	e8 bf ff ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e4ad:	83 c4 10             	add    esp,0x10
c000e4b0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4b6:	f6 c4 04             	test   ah,0x4
c000e4b9:	75 5f                	jne    c000e51a <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e4bb:	80 fa 04             	cmp    dl,0x4
c000e4be:	74 78                	je     c000e538 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e4c0:	80 fa 02             	cmp    dl,0x2
c000e4c3:	0f 84 88 00 00 00    	je     c000e551 <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e4c9:	80 fa 03             	cmp    dl,0x3
c000e4cc:	0f 84 ac 00 00 00    	je     c000e57e <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e4d2:	fe ca                	dec    dl
c000e4d4:	0f 84 92 00 00 00    	je     c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e4da:	43                   	inc    ebx
c000e4db:	31 f6                	xor    esi,esi
c000e4dd:	53                   	push   ebx
c000e4de:	e8 34 fc ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e4e3:	5f                   	pop    edi
c000e4e4:	89 df                	mov    edi,ebx
c000e4e6:	c1 e7 0c             	shl    edi,0xc
c000e4e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e4ed:	84 c0                	test   al,al
c000e4ef:	75 ae                	jne    c000e49f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e4f1:	83 ec 0c             	sub    esp,0xc
c000e4f4:	68 e9 16 02 c0       	push   0xc00216e9
c000e4f9:	e8 4a 74 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000e4fe:	e8 c8 fd ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e503:	5a                   	pop    edx
c000e504:	59                   	pop    ecx
c000e505:	57                   	push   edi
c000e506:	50                   	push   eax
c000e507:	e8 60 ff ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e513:	8b 00                	mov    eax,DWORD PTR [eax]
c000e515:	f6 c4 04             	test   ah,0x4
c000e518:	74 c0                	je     c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e51a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e51e:	83 ec 0c             	sub    esp,0xc
c000e521:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e526:	50                   	push   eax
c000e527:	e8 08 e0 ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e533:	80 fa 04             	cmp    dl,0x4
c000e536:	75 88                	jne    c000e4c0 <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e538:	89 f0                	mov    eax,esi
c000e53a:	84 c0                	test   al,al
c000e53c:	75 46                	jne    c000e584 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e53e:	c7 44 24 20 1c 15 02 c0 	mov    DWORD PTR [esp+0x20],0xc002151c
c000e546:	83 c4 10             	add    esp,0x10
c000e549:	5b                   	pop    ebx
c000e54a:	5e                   	pop    esi
c000e54b:	5f                   	pop    edi
c000e54c:	e9 f7 73 00 00       	jmp    c0015948 <Krnl::panic(char const*)>
c000e551:	89 f0                	mov    eax,esi
c000e553:	84 c0                	test   al,al
c000e555:	75 15                	jne    c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e557:	83 ec 0c             	sub    esp,0xc
c000e55a:	68 05 17 02 c0       	push   0xc0021705
c000e55f:	e8 e4 73 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000e564:	83 c4 10             	add    esp,0x10
c000e567:	e9 6e ff ff ff       	jmp    c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e56c:	50                   	push   eax
c000e56d:	50                   	push   eax
c000e56e:	6a 00                	push   0x0
c000e570:	53                   	push   ebx
c000e571:	e8 6a fb ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e576:	83 c4 10             	add    esp,0x10
c000e579:	e9 5c ff ff ff       	jmp    c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e57e:	89 f0                	mov    eax,esi
c000e580:	84 c0                	test   al,al
c000e582:	75 14                	jne    c000e598 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e584:	52                   	push   edx
c000e585:	52                   	push   edx
c000e586:	6a 00                	push   0x0
c000e588:	53                   	push   ebx
c000e589:	e8 52 fb ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e58e:	83 c4 10             	add    esp,0x10
c000e591:	83 c4 10             	add    esp,0x10
c000e594:	5b                   	pop    ebx
c000e595:	5e                   	pop    esi
c000e596:	5f                   	pop    edi
c000e597:	c3                   	ret    
c000e598:	c7 44 24 20 21 17 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021721
c000e5a0:	83 c4 10             	add    esp,0x10
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	e9 9d 73 00 00       	jmp    c0015948 <Krnl::panic(char const*)>
c000e5ab:	90                   	nop

c000e5ac <VAS::freeAllocatedPages(unsigned long)>:
c000e5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5b4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5b8:	74 09                	je     c000e5c3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5be:	e9 c8 fe ff ff       	jmp    c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e5c3:	c7 44 24 04 40 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021540
c000e5cb:	e9 89 0b 00 00       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>

c000e5d0 <VAS::virtualToPhysical(unsigned long)>:
c000e5d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5d4:	50                   	push   eax
c000e5d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5d9:	52                   	push   edx
c000e5da:	e8 8d fe ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e5df:	59                   	pop    ecx
c000e5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5e2:	5a                   	pop    edx
c000e5e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5e8:	c3                   	ret    
c000e5e9:	90                   	nop

c000e5ea <VAS::reflagRange(unsigned long, int, int, int)>:
c000e5ea:	55                   	push   ebp
c000e5eb:	57                   	push   edi
c000e5ec:	56                   	push   esi
c000e5ed:	53                   	push   ebx
c000e5ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5f2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5f6:	89 c3                	mov    ebx,eax
c000e5f8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e5fc:	c1 e3 0c             	shl    ebx,0xc
c000e5ff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e603:	01 f3                	add    ebx,esi
c000e605:	85 c0                	test   eax,eax
c000e607:	7e 1f                	jle    c000e628 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e609:	56                   	push   esi
c000e60a:	81 c6 00 10 00 00    	add    esi,0x1000
c000e610:	55                   	push   ebp
c000e611:	e8 56 fe ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e616:	5a                   	pop    edx
c000e617:	59                   	pop    ecx
c000e618:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e61a:	21 f9                	and    ecx,edi
c000e61c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e620:	09 d1                	or     ecx,edx
c000e622:	39 f3                	cmp    ebx,esi
c000e624:	89 08                	mov    DWORD PTR [eax],ecx
c000e626:	75 e1                	jne    c000e609 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e628:	5b                   	pop    ebx
c000e629:	5e                   	pop    esi
c000e62a:	5f                   	pop    edi
c000e62b:	5d                   	pop    ebp
c000e62c:	c3                   	ret    
c000e62d:	90                   	nop

c000e62e <VAS::setToWriteCombining(unsigned long, int)>:
c000e62e:	83 ec 0c             	sub    esp,0xc
c000e631:	e8 a6 61 00 00       	call   c00147dc <thisCPU()>
c000e636:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e63d:	75 04                	jne    c000e643 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e63f:	83 c4 0c             	add    esp,0xc
c000e642:	c3                   	ret    
c000e643:	83 ec 0c             	sub    esp,0xc
c000e646:	68 80 00 00 00       	push   0x80
c000e64b:	6a ff                	push   0xffffffff
c000e64d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e651:	50                   	push   eax
c000e652:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e656:	52                   	push   edx
c000e657:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e65b:	51                   	push   ecx
c000e65c:	e8 89 ff ff ff       	call   c000e5ea <VAS::reflagRange(unsigned long, int, int, int)>
c000e661:	83 c4 20             	add    esp,0x20
c000e664:	83 c4 0c             	add    esp,0xc
c000e667:	c3                   	ret    

c000e668 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e668:	83 ec 0c             	sub    esp,0xc
c000e66b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e66f:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e674:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e67e:	19 c0                	sbb    eax,eax
c000e680:	83 ca 03             	or     edx,0x3
c000e683:	83 e0 fc             	and    eax,0xfffffffc
c000e686:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e68d:	e8 13 10 01 00       	call   c001f6a5 <CPU::readCR3()>
c000e692:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e696:	83 c4 0c             	add    esp,0xc
c000e699:	e9 19 10 01 00       	jmp    c001f6b7 <CPU::writeCR3(unsigned long)>

c000e69e <VAS::~VAS()>:
c000e69e:	83 ec 2c             	sub    esp,0x2c
c000e6a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e6a9:	e8 87 a2 00 00       	call   c0018935 <lockScheduler()>
c000e6ae:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6b8:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6be:	83 ec 04             	sub    esp,0x4
c000e6c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6c5:	6a 01                	push   0x1
c000e6c7:	50                   	push   eax
c000e6c8:	e8 9b ff ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6cd:	83 c4 10             	add    esp,0x10
c000e6d0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6d8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6e0:	0f 8f d7 00 00 00    	jg     c000e7bd <VAS::~VAS()+0x11f>
c000e6e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f1:	c1 e2 02             	shl    edx,0x2
c000e6f4:	01 d0                	add    eax,edx
c000e6f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e700:	83 e0 01             	and    eax,0x1
c000e703:	0f 84 ab 00 00 00    	je     c000e7b4 <VAS::~VAS()+0x116>
c000e709:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e711:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e719:	7f 75                	jg     c000e790 <VAS::~VAS()+0xf2>
c000e71b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e71f:	c1 e0 0a             	shl    eax,0xa
c000e722:	89 c2                	mov    edx,eax
c000e724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e728:	01 d0                	add    eax,edx
c000e72a:	c1 e0 0c             	shl    eax,0xc
c000e72d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e731:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e736:	8b 00                	mov    eax,DWORD PTR [eax]
c000e738:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e73b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e741:	83 ec 04             	sub    esp,0x4
c000e744:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e748:	6a 01                	push   0x1
c000e74a:	50                   	push   eax
c000e74b:	e8 f0 fc ff ff       	call   c000e440 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e750:	83 c4 10             	add    esp,0x10
c000e753:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e75b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e75d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e765:	25 01 04 00 00       	and    eax,0x401
c000e76a:	3d 01 04 00 00       	cmp    eax,0x401
c000e76f:	75 19                	jne    c000e78a <VAS::~VAS()+0xec>
c000e771:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e775:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e77a:	83 ec 0c             	sub    esp,0xc
c000e77d:	50                   	push   eax
c000e77e:	e8 b1 dd ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e783:	83 c4 10             	add    esp,0x10
c000e786:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e78a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e78e:	eb 81                	jmp    c000e711 <VAS::~VAS()+0x73>
c000e790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e794:	25 00 04 00 00       	and    eax,0x400
c000e799:	74 19                	je     c000e7b4 <VAS::~VAS()+0x116>
c000e79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7a4:	83 ec 0c             	sub    esp,0xc
c000e7a7:	50                   	push   eax
c000e7a8:	e8 87 dd ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e7ad:	83 c4 10             	add    esp,0x10
c000e7b0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7b4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7b8:	e9 1b ff ff ff       	jmp    c000e6d8 <VAS::~VAS()+0x3a>
c000e7bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7c4:	83 ec 0c             	sub    esp,0xc
c000e7c7:	50                   	push   eax
c000e7c8:	e8 be fc ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e7cd:	83 c4 10             	add    esp,0x10
c000e7d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7d7:	83 ec 0c             	sub    esp,0xc
c000e7da:	50                   	push   eax
c000e7db:	e8 54 dd ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e7e0:	83 c4 10             	add    esp,0x10
c000e7e3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7eb:	c1 e0 02             	shl    eax,0x2
c000e7ee:	83 ec 08             	sub    esp,0x8
c000e7f1:	50                   	push   eax
c000e7f2:	68 64 15 02 c0       	push   0xc0021564
c000e7f7:	e8 5d 09 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e7fc:	83 c4 10             	add    esp,0x10
c000e7ff:	e8 33 a1 00 00       	call   c0018937 <unlockScheduler()>
c000e804:	90                   	nop
c000e805:	83 c4 2c             	add    esp,0x2c
c000e808:	c3                   	ret    
c000e809:	90                   	nop

c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e80a:	55                   	push   ebp
c000e80b:	57                   	push   edi
c000e80c:	56                   	push   esi
c000e80d:	53                   	push   ebx
c000e80e:	83 ec 1c             	sub    esp,0x1c
c000e811:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e815:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e819:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e81f:	77 08                	ja     c000e829 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e821:	0f 20 d8             	mov    eax,cr3
c000e824:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e827:	75 49                	jne    c000e872 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e829:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e82d:	09 d8                	or     eax,ebx
c000e82f:	a9 ff 0f 00 00       	test   eax,0xfff
c000e834:	75 59                	jne    c000e88f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e836:	89 de                	mov    esi,ebx
c000e838:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e83b:	c1 ee 16             	shr    esi,0x16
c000e83e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e845:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e849:	74 56                	je     c000e8a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e84b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e851:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e855:	c1 eb 0a             	shr    ebx,0xa
c000e858:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e85c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e862:	09 d0                	or     eax,edx
c000e864:	c1 e6 0c             	shl    esi,0xc
c000e867:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e86a:	83 c4 1c             	add    esp,0x1c
c000e86d:	5b                   	pop    ebx
c000e86e:	5e                   	pop    esi
c000e86f:	5f                   	pop    edi
c000e870:	5d                   	pop    ebp
c000e871:	c3                   	ret    
c000e872:	83 ec 0c             	sub    esp,0xc
c000e875:	68 84 15 02 c0       	push   0xc0021584
c000e87a:	e8 da 08 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e886:	09 d8                	or     eax,ebx
c000e888:	a9 ff 0f 00 00       	test   eax,0xfff
c000e88d:	74 a7                	je     c000e836 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e88f:	83 ec 0c             	sub    esp,0xc
c000e892:	68 ec 15 02 c0       	push   0xc00215ec
c000e897:	e8 ac 70 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000e89c:	83 c4 10             	add    esp,0x10
c000e89f:	eb 95                	jmp    c000e836 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8a5:	e8 17 dd ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000e8aa:	89 c5                	mov    ebp,eax
c000e8ac:	e8 1a fa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e8b1:	83 ec 0c             	sub    esp,0xc
c000e8b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8b8:	6a 01                	push   0x1
c000e8ba:	e8 7f f8 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000e8bf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8c6:	6a 01                	push   0x1
c000e8c8:	50                   	push   eax
c000e8c9:	55                   	push   ebp
c000e8ca:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8d4:	51                   	push   ecx
c000e8d5:	e8 22 02 00 00       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8da:	83 c4 1c             	add    esp,0x1c
c000e8dd:	68 00 10 00 00       	push   0x1000
c000e8e2:	6a 00                	push   0x0
c000e8e4:	50                   	push   eax
c000e8e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8e9:	e8 cc 1d ff ff       	call   c00006ba <memset>
c000e8ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8f5:	e8 91 fb ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e8fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8fe:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e907:	e9 3f ff ff ff       	jmp    c000e84b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e90c <VAS::allocatePages(int, int)>:
c000e90c:	55                   	push   ebp
c000e90d:	57                   	push   edi
c000e90e:	56                   	push   esi
c000e90f:	53                   	push   ebx
c000e910:	83 ec 1c             	sub    esp,0x1c
c000e913:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e917:	e8 c0 5e 00 00       	call   c00147dc <thisCPU()>
c000e91c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e922:	83 e0 01             	and    eax,0x1
c000e925:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e929:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e92d:	0f 85 d5 00 00 00    	jne    c000ea08 <VAS::allocatePages(int, int)+0xfc>
c000e933:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e93a:	85 c0                	test   eax,eax
c000e93c:	0f 84 aa 00 00 00    	je     c000e9ec <VAS::allocatePages(int, int)+0xe0>
c000e942:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e946:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e94a:	c1 e6 0c             	shl    esi,0xc
c000e94d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e951:	01 de                	add    esi,ebx
c000e953:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e957:	81 cd 00 04 00 00    	or     ebp,0x400
c000e95d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e960:	85 c0                	test   eax,eax
c000e962:	7e 25                	jle    c000e989 <VAS::allocatePages(int, int)+0x7d>
c000e964:	e8 58 dc ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000e969:	55                   	push   ebp
c000e96a:	53                   	push   ebx
c000e96b:	50                   	push   eax
c000e96c:	57                   	push   edi
c000e96d:	e8 98 fe ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e972:	83 c4 10             	add    esp,0x10
c000e975:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e97a:	74 03                	je     c000e97f <VAS::allocatePages(int, int)+0x73>
c000e97c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e97f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e985:	39 de                	cmp    esi,ebx
c000e987:	75 db                	jne    c000e964 <VAS::allocatePages(int, int)+0x58>
c000e989:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e98e:	74 3f                	je     c000e9cf <VAS::allocatePages(int, int)+0xc3>
c000e990:	c1 ee 0a             	shr    esi,0xa
c000e993:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e997:	c1 eb 0a             	shr    ebx,0xa
c000e99a:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e9a0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e9a6:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e9ac:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e9b2:	39 f3                	cmp    ebx,esi
c000e9b4:	77 0d                	ja     c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000e9b6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9bf:	39 de                	cmp    esi,ebx
c000e9c1:	73 f3                	jae    c000e9b6 <VAS::allocatePages(int, int)+0xaa>
c000e9c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9c7:	83 c4 1c             	add    esp,0x1c
c000e9ca:	5b                   	pop    ebx
c000e9cb:	5e                   	pop    esi
c000e9cc:	5f                   	pop    edi
c000e9cd:	5d                   	pop    ebp
c000e9ce:	c3                   	ret    
c000e9cf:	e8 d1 0c 01 00       	call   c001f6a5 <CPU::readCR3()>
c000e9d4:	83 ec 0c             	sub    esp,0xc
c000e9d7:	50                   	push   eax
c000e9d8:	e8 da 0c 01 00       	call   c001f6b7 <CPU::writeCR3(unsigned long)>
c000e9dd:	83 c4 10             	add    esp,0x10
c000e9e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e4:	83 c4 1c             	add    esp,0x1c
c000e9e7:	5b                   	pop    ebx
c000e9e8:	5e                   	pop    esi
c000e9e9:	5f                   	pop    edi
c000e9ea:	5d                   	pop    ebp
c000e9eb:	c3                   	ret    
c000e9ec:	83 ec 0c             	sub    esp,0xc
c000e9ef:	68 10 16 02 c0       	push   0xc0021610
c000e9f4:	e8 4f 6f 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000e9f9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea00:	83 c4 10             	add    esp,0x10
c000ea03:	e9 3a ff ff ff       	jmp    c000e942 <VAS::allocatePages(int, int)+0x36>
c000ea08:	83 ec 0c             	sub    esp,0xc
c000ea0b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea0f:	53                   	push   ebx
c000ea10:	e8 29 f7 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ea15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea21:	0f 87 94 00 00 00    	ja     c000eabb <VAS::allocatePages(int, int)+0x1af>
c000ea27:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea2b:	85 d2                	test   edx,edx
c000ea2d:	7e 3c                	jle    c000ea6b <VAS::allocatePages(int, int)+0x15f>
c000ea2f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea33:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea37:	c1 e5 0c             	shl    ebp,0xc
c000ea3a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea3e:	81 ce 00 04 00 00    	or     esi,0x400
c000ea44:	01 dd                	add    ebp,ebx
c000ea46:	e8 76 db ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ea4b:	56                   	push   esi
c000ea4c:	53                   	push   ebx
c000ea4d:	50                   	push   eax
c000ea4e:	57                   	push   edi
c000ea4f:	e8 b6 fd ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea54:	83 c4 10             	add    esp,0x10
c000ea57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea5c:	74 03                	je     c000ea61 <VAS::allocatePages(int, int)+0x155>
c000ea5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea61:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea67:	39 dd                	cmp    ebp,ebx
c000ea69:	75 db                	jne    c000ea46 <VAS::allocatePages(int, int)+0x13a>
c000ea6b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea70:	0f 84 59 ff ff ff    	je     c000e9cf <VAS::allocatePages(int, int)+0xc3>
c000ea76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea7e:	c1 e0 0c             	shl    eax,0xc
c000ea81:	89 d3                	mov    ebx,edx
c000ea83:	c1 eb 0a             	shr    ebx,0xa
c000ea86:	01 d0                	add    eax,edx
c000ea88:	c1 e8 0a             	shr    eax,0xa
c000ea8b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea91:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea9c:	2d 00 00 40 00       	sub    eax,0x400000
c000eaa1:	39 c3                	cmp    ebx,eax
c000eaa3:	0f 87 1a ff ff ff    	ja     c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000eaa9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eaac:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eab2:	39 d8                	cmp    eax,ebx
c000eab4:	73 f3                	jae    c000eaa9 <VAS::allocatePages(int, int)+0x19d>
c000eab6:	e9 08 ff ff ff       	jmp    c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000eabb:	e8 1c 5d 00 00       	call   c00147dc <thisCPU()>
c000eac0:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eac7:	0f 84 5a ff ff ff    	je     c000ea27 <VAS::allocatePages(int, int)+0x11b>
c000eacd:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ead1:	80 cd 01             	or     ch,0x1
c000ead4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000ead8:	e9 4a ff ff ff       	jmp    c000ea27 <VAS::allocatePages(int, int)+0x11b>
c000eadd:	90                   	nop

c000eade <VAS::setCPUSpecific(unsigned long)>:
c000eade:	83 ec 0c             	sub    esp,0xc
c000eae1:	6a 05                	push   0x5
c000eae3:	68 00 00 40 c2       	push   0xc2400000
c000eae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eaec:	50                   	push   eax
c000eaed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eaf1:	52                   	push   edx
c000eaf2:	e8 13 fd ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eaf7:	83 c4 1c             	add    esp,0x1c
c000eafa:	c3                   	ret    
c000eafb:	90                   	nop

c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eafc:	55                   	push   ebp
c000eafd:	57                   	push   edi
c000eafe:	56                   	push   esi
c000eaff:	53                   	push   ebx
c000eb00:	83 ec 1c             	sub    esp,0x1c
c000eb03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eb07:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb0b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eb0f:	e8 c8 5c 00 00       	call   c00147dc <thisCPU()>
c000eb14:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb1a:	83 e0 01             	and    eax,0x1
c000eb1d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb25:	85 c0                	test   eax,eax
c000eb27:	7e 39                	jle    c000eb62 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb2d:	89 f3                	mov    ebx,esi
c000eb2f:	c1 e0 0c             	shl    eax,0xc
c000eb32:	01 f0                	add    eax,esi
c000eb34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb38:	55                   	push   ebp
c000eb39:	53                   	push   ebx
c000eb3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb3e:	29 f0                	sub    eax,esi
c000eb40:	01 d8                	add    eax,ebx
c000eb42:	50                   	push   eax
c000eb43:	57                   	push   edi
c000eb44:	e8 c1 fc ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb49:	83 c4 10             	add    esp,0x10
c000eb4c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb51:	74 03                	je     c000eb56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb53:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb56:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb5c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb60:	75 d6                	jne    c000eb38 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb62:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb67:	74 42                	je     c000ebab <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb6d:	89 f3                	mov    ebx,esi
c000eb6f:	c1 e0 0c             	shl    eax,0xc
c000eb72:	c1 eb 0a             	shr    ebx,0xa
c000eb75:	01 f0                	add    eax,esi
c000eb77:	c1 e8 0a             	shr    eax,0xa
c000eb7a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb80:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb85:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb8b:	2d 00 00 40 00       	sub    eax,0x400000
c000eb90:	39 c3                	cmp    ebx,eax
c000eb92:	77 0d                	ja     c000eba1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000eb94:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb97:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb9d:	39 d8                	cmp    eax,ebx
c000eb9f:	73 f3                	jae    c000eb94 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000eba1:	83 c4 1c             	add    esp,0x1c
c000eba4:	89 f0                	mov    eax,esi
c000eba6:	5b                   	pop    ebx
c000eba7:	5e                   	pop    esi
c000eba8:	5f                   	pop    edi
c000eba9:	5d                   	pop    ebp
c000ebaa:	c3                   	ret    
c000ebab:	e8 f5 0a 01 00       	call   c001f6a5 <CPU::readCR3()>
c000ebb0:	83 ec 0c             	sub    esp,0xc
c000ebb3:	50                   	push   eax
c000ebb4:	e8 fe 0a 01 00       	call   c001f6b7 <CPU::writeCR3(unsigned long)>
c000ebb9:	83 c4 10             	add    esp,0x10
c000ebbc:	89 f0                	mov    eax,esi
c000ebbe:	83 c4 1c             	add    esp,0x1c
c000ebc1:	5b                   	pop    ebx
c000ebc2:	5e                   	pop    esi
c000ebc3:	5f                   	pop    edi
c000ebc4:	5d                   	pop    ebp
c000ebc5:	c3                   	ret    

c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebc6:	55                   	push   ebp
c000ebc7:	57                   	push   edi
c000ebc8:	56                   	push   esi
c000ebc9:	53                   	push   ebx
c000ebca:	83 ec 1c             	sub    esp,0x1c
c000ebcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebd1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebd5:	09 f0                	or     eax,esi
c000ebd7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebdb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebdf:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebe4:	75 4c                	jne    c000ec32 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ebe6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ebea:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebed:	c1 eb 16             	shr    ebx,0x16
c000ebf0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ebf7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ebfb:	74 4f                	je     c000ec4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ebfd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec01:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ec05:	c1 e8 0a             	shr    eax,0xa
c000ec08:	80 fa 01             	cmp    dl,0x1
c000ec0b:	19 d2                	sbb    edx,edx
c000ec0d:	25 fc 0f 00 00       	and    eax,0xffc
c000ec12:	c1 e3 0c             	shl    ebx,0xc
c000ec15:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec1b:	01 d8                	add    eax,ebx
c000ec1d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ec21:	09 d9                	or     ecx,ebx
c000ec23:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec2a:	83 c4 1c             	add    esp,0x1c
c000ec2d:	5b                   	pop    ebx
c000ec2e:	5e                   	pop    esi
c000ec2f:	5f                   	pop    edi
c000ec30:	5d                   	pop    ebp
c000ec31:	c3                   	ret    
c000ec32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec36:	83 ec 0c             	sub    esp,0xc
c000ec39:	68 3c 16 02 c0       	push   0xc002163c
c000ec3e:	e8 05 6d 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000ec43:	83 c4 10             	add    esp,0x10
c000ec46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec4a:	eb 9a                	jmp    c000ebe6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ec4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec50:	e8 6c d9 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ec55:	89 c5                	mov    ebp,eax
c000ec57:	e8 6f f6 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec63:	6a 01                	push   0x1
c000ec65:	e8 d4 f4 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ec6a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec71:	6a 01                	push   0x1
c000ec73:	50                   	push   eax
c000ec74:	55                   	push   ebp
c000ec75:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec7b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec7f:	51                   	push   ecx
c000ec80:	e8 77 fe ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec85:	83 c4 1c             	add    esp,0x1c
c000ec88:	68 00 10 00 00       	push   0x1000
c000ec8d:	6a 00                	push   0x0
c000ec8f:	50                   	push   eax
c000ec90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec94:	e8 21 1a ff ff       	call   c00006ba <memset>
c000ec99:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ec9d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000eca0:	e8 e6 f7 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000eca5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eca8:	83 c4 10             	add    esp,0x10
c000ecab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecaf:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ecb2:	e9 46 ff ff ff       	jmp    c000ebfd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ecb7:	90                   	nop

c000ecb8 <VAS::VAS(bool)>:
c000ecb8:	53                   	push   ebx
c000ecb9:	83 ec 28             	sub    esp,0x28
c000ecbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ecc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecd3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecd7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecda:	e8 e2 d8 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ecdf:	89 c2                	mov    edx,eax
c000ece1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ece5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ece8:	e8 de f5 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000eced:	89 c3                	mov    ebx,eax
c000ecef:	83 ec 0c             	sub    esp,0xc
c000ecf2:	6a 01                	push   0x1
c000ecf4:	e8 45 f4 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ecf9:	83 c4 10             	add    esp,0x10
c000ecfc:	89 c2                	mov    edx,eax
c000ecfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ed05:	83 ec 0c             	sub    esp,0xc
c000ed08:	6a 03                	push   0x3
c000ed0a:	6a 01                	push   0x1
c000ed0c:	52                   	push   edx
c000ed0d:	50                   	push   eax
c000ed0e:	53                   	push   ebx
c000ed0f:	e8 e8 fd ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed14:	83 c4 20             	add    esp,0x20
c000ed17:	89 c2                	mov    edx,eax
c000ed19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed1d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed20:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed28:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed30:	7f 1c                	jg     c000ed4e <VAS::VAS(bool)+0x96>
c000ed32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed3d:	c1 e2 02             	shl    edx,0x2
c000ed40:	01 d0                	add    eax,edx
c000ed42:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed48:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed4c:	eb da                	jmp    c000ed28 <VAS::VAS(bool)+0x70>
c000ed4e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed56:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed5e:	7f 71                	jg     c000edd1 <VAS::VAS(bool)+0x119>
c000ed60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed64:	2d 00 02 00 00       	sub    eax,0x200
c000ed69:	c1 e0 0c             	shl    eax,0xc
c000ed6c:	83 c8 03             	or     eax,0x3
c000ed6f:	89 c3                	mov    ebx,eax
c000ed71:	e8 66 5a 00 00       	call   c00147dc <thisCPU()>
c000ed76:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed7c:	83 e0 10             	and    eax,0x10
c000ed7f:	84 c0                	test   al,al
c000ed81:	74 07                	je     c000ed8a <VAS::VAS(bool)+0xd2>
c000ed83:	b8 00 01 00 00       	mov    eax,0x100
c000ed88:	eb 05                	jmp    c000ed8f <VAS::VAS(bool)+0xd7>
c000ed8a:	b8 00 00 00 00       	mov    eax,0x0
c000ed8f:	09 d8                	or     eax,ebx
c000ed91:	89 c1                	mov    ecx,eax
c000ed93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed9e:	c1 e2 02             	shl    edx,0x2
c000eda1:	01 d0                	add    eax,edx
c000eda3:	89 ca                	mov    edx,ecx
c000eda5:	89 10                	mov    DWORD PTR [eax],edx
c000eda7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edab:	2d 40 03 00 00       	sub    eax,0x340
c000edb0:	83 f8 7f             	cmp    eax,0x7f
c000edb3:	77 16                	ja     c000edcb <VAS::VAS(bool)+0x113>
c000edb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc0:	c1 e2 02             	shl    edx,0x2
c000edc3:	01 d0                	add    eax,edx
c000edc5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edcb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000edcf:	eb 85                	jmp    c000ed56 <VAS::VAS(bool)+0x9e>
c000edd1:	e8 06 5a 00 00       	call   c00147dc <thisCPU()>
c000edd6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eddc:	83 e0 10             	and    eax,0x10
c000eddf:	84 c0                	test   al,al
c000ede1:	74 07                	je     c000edea <VAS::VAS(bool)+0x132>
c000ede3:	b8 03 41 00 00       	mov    eax,0x4103
c000ede8:	eb 05                	jmp    c000edef <VAS::VAS(bool)+0x137>
c000edea:	b8 03 40 00 00       	mov    eax,0x4003
c000edef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000edf3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000edf6:	81 c2 20 0c 00 00    	add    edx,0xc20
c000edfc:	89 02                	mov    DWORD PTR [edx],eax
c000edfe:	e8 d9 59 00 00       	call   c00147dc <thisCPU()>
c000ee03:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee09:	83 ec 08             	sub    esp,0x8
c000ee0c:	50                   	push   eax
c000ee0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee11:	e8 c8 fc ff ff       	call   c000eade <VAS::setCPUSpecific(unsigned long)>
c000ee16:	83 c4 10             	add    esp,0x10
c000ee19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee1d:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee20:	e8 b7 59 00 00       	call   c00147dc <thisCPU()>
c000ee25:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee2b:	83 e0 10             	and    eax,0x10
c000ee2e:	84 c0                	test   al,al
c000ee30:	74 07                	je     c000ee39 <VAS::VAS(bool)+0x181>
c000ee32:	b8 00 01 00 00       	mov    eax,0x100
c000ee37:	eb 05                	jmp    c000ee3e <VAS::VAS(bool)+0x186>
c000ee39:	b8 00 00 00 00       	mov    eax,0x0
c000ee3e:	09 d8                	or     eax,ebx
c000ee40:	89 c2                	mov    edx,eax
c000ee42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee49:	05 fc 0f 00 00       	add    eax,0xffc
c000ee4e:	83 ca 03             	or     edx,0x3
c000ee51:	89 10                	mov    DWORD PTR [eax],edx
c000ee53:	e8 84 59 00 00       	call   c00147dc <thisCPU()>
c000ee58:	83 ec 0c             	sub    esp,0xc
c000ee5b:	50                   	push   eax
c000ee5c:	e8 ef 19 00 00       	call   c0010850 <Device::getName()>
c000ee61:	83 c4 10             	add    esp,0x10
c000ee64:	83 ec 08             	sub    esp,0x8
c000ee67:	68 3b 17 02 c0       	push   0xc002173b
c000ee6c:	50                   	push   eax
c000ee6d:	e8 38 19 ff ff       	call   c00007aa <strcmp>
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	85 c0                	test   eax,eax
c000ee77:	0f 94 c0             	sete   al
c000ee7a:	84 c0                	test   al,al
c000ee7c:	74 64                	je     c000eee2 <VAS::VAS(bool)+0x22a>
c000ee7e:	e8 90 9a 00 00       	call   c0018913 <disableIRQs()>
c000ee83:	e8 54 59 00 00       	call   c00147dc <thisCPU()>
c000ee88:	05 7c 09 00 00       	add    eax,0x97c
c000ee8d:	83 ec 0c             	sub    esp,0xc
c000ee90:	50                   	push   eax
c000ee91:	e8 c8 cb ff ff       	call   c000ba5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee96:	83 c4 10             	add    esp,0x10
c000ee99:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ee9e:	89 c3                	mov    ebx,eax
c000eea0:	e8 37 59 00 00       	call   c00147dc <thisCPU()>
c000eea5:	05 7c 09 00 00       	add    eax,0x97c
c000eeaa:	83 ec 0c             	sub    esp,0xc
c000eead:	50                   	push   eax
c000eeae:	e8 ab cb ff ff       	call   c000ba5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eeb3:	83 c4 10             	add    esp,0x10
c000eeb6:	83 ec 08             	sub    esp,0x8
c000eeb9:	50                   	push   eax
c000eeba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eebe:	e8 a9 f5 ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000eec3:	83 c4 10             	add    esp,0x10
c000eec6:	8b 00                	mov    eax,DWORD PTR [eax]
c000eec8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eecd:	6a 11                	push   0x11
c000eecf:	53                   	push   ebx
c000eed0:	50                   	push   eax
c000eed1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eed5:	e8 30 f9 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eeda:	83 c4 10             	add    esp,0x10
c000eedd:	e8 44 9a 00 00       	call   c0018926 <enableIRQs()>
c000eee2:	90                   	nop
c000eee3:	83 c4 28             	add    esp,0x28
c000eee6:	5b                   	pop    ebx
c000eee7:	c3                   	ret    

c000eee8 <mapVASFirstTime>:
c000eee8:	55                   	push   ebp
c000eee9:	57                   	push   edi
c000eeea:	56                   	push   esi
c000eeeb:	53                   	push   ebx
c000eeec:	83 ec 0c             	sub    esp,0xc
c000eeef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eef4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eef7:	4a                   	dec    edx
c000eef8:	0f 84 99 00 00 00    	je     c000ef97 <mapVASFirstTime+0xaf>
c000eefe:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ef01:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ef04:	c1 e5 15             	shl    ebp,0x15
c000ef07:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ef0c:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ef11:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ef17:	29 eb                	sub    ebx,ebp
c000ef19:	29 ee                	sub    esi,ebp
c000ef1b:	e8 a1 d6 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ef20:	83 ec 0c             	sub    esp,0xc
c000ef23:	68 03 04 00 00       	push   0x403
c000ef28:	6a 01                	push   0x1
c000ef2a:	53                   	push   ebx
c000ef2b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef31:	50                   	push   eax
c000ef32:	57                   	push   edi
c000ef33:	e8 c4 fb ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef38:	83 c4 20             	add    esp,0x20
c000ef3b:	39 f3                	cmp    ebx,esi
c000ef3d:	75 dc                	jne    c000ef1b <mapVASFirstTime+0x33>
c000ef3f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef44:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef49:	29 e8                	sub    eax,ebp
c000ef4b:	29 ee                	sub    esi,ebp
c000ef4d:	89 c5                	mov    ebp,eax
c000ef4f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef53:	19 db                	sbb    ebx,ebx
c000ef55:	e8 67 d6 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ef5a:	83 e3 04             	and    ebx,0x4
c000ef5d:	83 ec 0c             	sub    esp,0xc
c000ef60:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef66:	53                   	push   ebx
c000ef67:	6a 01                	push   0x1
c000ef69:	56                   	push   esi
c000ef6a:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef70:	50                   	push   eax
c000ef71:	57                   	push   edi
c000ef72:	e8 85 fb ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef77:	83 c4 20             	add    esp,0x20
c000ef7a:	39 f5                	cmp    ebp,esi
c000ef7c:	75 d1                	jne    c000ef4f <mapVASFirstTime+0x67>
c000ef7e:	e8 22 07 01 00       	call   c001f6a5 <CPU::readCR3()>
c000ef83:	83 ec 0c             	sub    esp,0xc
c000ef86:	50                   	push   eax
c000ef87:	e8 2b 07 01 00       	call   c001f6b7 <CPU::writeCR3(unsigned long)>
c000ef8c:	83 c4 10             	add    esp,0x10
c000ef8f:	83 c4 0c             	add    esp,0xc
c000ef92:	5b                   	pop    ebx
c000ef93:	5e                   	pop    esi
c000ef94:	5f                   	pop    edi
c000ef95:	5d                   	pop    ebp
c000ef96:	c3                   	ret    
c000ef97:	83 ec 0c             	sub    esp,0xc
c000ef9a:	68 49 17 02 c0       	push   0xc0021749
c000ef9f:	e8 b5 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efa4:	83 c4 10             	add    esp,0x10
c000efa7:	83 c4 0c             	add    esp,0xc
c000efaa:	5b                   	pop    ebx
c000efab:	5e                   	pop    esi
c000efac:	5f                   	pop    edi
c000efad:	5d                   	pop    ebp
c000efae:	c3                   	ret    

c000efaf <__cxa_atexit>:
c000efaf:	31 c0                	xor    eax,eax
c000efb1:	c3                   	ret    

c000efb2 <__cxa_finalize>:
c000efb2:	c3                   	ret    

c000efb3 <__stack_chk_fail>:
c000efb3:	55                   	push   ebp
c000efb4:	89 e5                	mov    ebp,esp
c000efb6:	83 ec 10             	sub    esp,0x10
c000efb9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efbc:	68 62 17 02 c0       	push   0xc0021762
c000efc1:	e8 93 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efc6:	58                   	pop    eax
c000efc7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efca:	5a                   	pop    edx
c000efcb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efce:	68 62 17 02 c0       	push   0xc0021762
c000efd3:	e8 81 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efd8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efdb:	59                   	pop    ecx
c000efdc:	5a                   	pop    edx
c000efdd:	8b 00                	mov    eax,DWORD PTR [eax]
c000efdf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efe2:	68 62 17 02 c0       	push   0xc0021762
c000efe7:	e8 6d 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efef:	59                   	pop    ecx
c000eff0:	5a                   	pop    edx
c000eff1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eff3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eff5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eff8:	68 62 17 02 c0       	push   0xc0021762
c000effd:	e8 57 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000f002:	c7 04 24 6a 17 02 c0 	mov    DWORD PTR [esp],0xc002176a
c000f009:	e8 3a 69 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000f00e:	83 c4 10             	add    esp,0x10
c000f011:	c9                   	leave  
c000f012:	c3                   	ret    

c000f013 <__cxa_pure_virtual>:
c000f013:	83 ec 18             	sub    esp,0x18
c000f016:	68 82 17 02 c0       	push   0xc0021782
c000f01b:	e8 28 69 00 00       	call   c0015948 <Krnl::panic(char const*)>
c000f020:	83 c4 1c             	add    esp,0x1c
c000f023:	c3                   	ret    

c000f024 <operator new(unsigned long)>:
c000f024:	e9 c2 cf ff ff       	jmp    c000bfeb <malloc>

c000f029 <operator new[](unsigned long)>:
c000f029:	e9 bd cf ff ff       	jmp    c000bfeb <malloc>

c000f02e <operator delete(void*)>:
c000f02e:	e9 d8 cf ff ff       	jmp    c000c00b <rfree>

c000f033 <operator delete(void*, unsigned long)>:
c000f033:	e9 d3 cf ff ff       	jmp    c000c00b <rfree>

c000f038 <operator delete[](void*)>:
c000f038:	e9 ce cf ff ff       	jmp    c000c00b <rfree>

c000f03d <operator delete[](void*, unsigned long)>:
c000f03d:	e9 c9 cf ff ff       	jmp    c000c00b <rfree>

c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f042:	57                   	push   edi
c000f043:	56                   	push   esi
c000f044:	be 99 17 02 c0       	mov    esi,0xc0021799
c000f049:	53                   	push   ebx
c000f04a:	83 ec 40             	sub    esp,0x40
c000f04d:	a0 98 17 02 c0       	mov    al,ds:0xc0021798
c000f052:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f056:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f05a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f05e:	b8 3e 00 00 00       	mov    eax,0x3e
c000f063:	f7 c7 02 00 00 00    	test   edi,0x2
c000f069:	75 69                	jne    c000f0d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f06b:	89 c1                	mov    ecx,eax
c000f06d:	c1 e9 02             	shr    ecx,0x2
c000f070:	fc                   	cld    
c000f071:	31 d2                	xor    edx,edx
c000f073:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f075:	a8 02                	test   al,0x2
c000f077:	74 0b                	je     c000f084 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f079:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f07c:	66 89 17             	mov    WORD PTR [edi],dx
c000f07f:	ba 02 00 00 00       	mov    edx,0x2
c000f084:	a8 01                	test   al,0x1
c000f086:	74 06                	je     c000f08e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f088:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f08b:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f08e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f092:	83 f9 3e             	cmp    ecx,0x3e
c000f095:	7e 05                	jle    c000f09c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f097:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f09c:	89 df                	mov    edi,ebx
c000f09e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f0a2:	eb 02                	jmp    c000f0a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f0a4:	89 c7                	mov    edi,eax
c000f0a6:	31 d2                	xor    edx,edx
c000f0a8:	89 f8                	mov    eax,edi
c000f0aa:	46                   	inc    esi
c000f0ab:	f7 f1                	div    ecx
c000f0ad:	39 cf                	cmp    edi,ecx
c000f0af:	73 f3                	jae    c000f0a4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f0b1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f0b4:	eb 02                	jmp    c000f0b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f0b6:	89 c3                	mov    ebx,eax
c000f0b8:	31 d2                	xor    edx,edx
c000f0ba:	89 d8                	mov    eax,ebx
c000f0bc:	f7 f1                	div    ecx
c000f0be:	4e                   	dec    esi
c000f0bf:	39 cb                	cmp    ebx,ecx
c000f0c1:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f0c5:	88 16                	mov    BYTE PTR [esi],dl
c000f0c7:	73 ed                	jae    c000f0b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f0c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0cd:	83 c4 40             	add    esp,0x40
c000f0d0:	5b                   	pop    ebx
c000f0d1:	5e                   	pop    esi
c000f0d2:	5f                   	pop    edi
c000f0d3:	c3                   	ret    
c000f0d4:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f0d7:	83 c7 02             	add    edi,0x2
c000f0da:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f0de:	83 c6 02             	add    esi,0x2
c000f0e1:	83 e8 02             	sub    eax,0x2
c000f0e4:	eb 85                	jmp    c000f06b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f0e6 <Dbg::logc(char)>:
c000f0e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0ea:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0ef:	ec                   	in     al,dx
c000f0f0:	a8 20                	test   al,0x20
c000f0f2:	74 fb                	je     c000f0ef <Dbg::logc(char)+0x9>
c000f0f4:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0f9:	88 c8                	mov    al,cl
c000f0fb:	ee                   	out    dx,al
c000f0fc:	c3                   	ret    

c000f0fd <Dbg::logs(char*)>:
c000f0fd:	53                   	push   ebx
c000f0fe:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f102:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f105:	84 c0                	test   al,al
c000f107:	74 0f                	je     c000f118 <Dbg::logs(char*)+0x1b>
c000f109:	43                   	inc    ebx
c000f10a:	50                   	push   eax
c000f10b:	e8 d6 ff ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f110:	5a                   	pop    edx
c000f111:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f114:	84 c0                	test   al,al
c000f116:	75 f1                	jne    c000f109 <Dbg::logs(char*)+0xc>
c000f118:	5b                   	pop    ebx
c000f119:	c3                   	ret    

c000f11a <Dbg::logWriteInt(unsigned int)>:
c000f11a:	83 ec 10             	sub    esp,0x10
c000f11d:	6a 0a                	push   0xa
c000f11f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f123:	50                   	push   eax
c000f124:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f128:	50                   	push   eax
c000f129:	e8 14 ff ff ff       	call   c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f12e:	50                   	push   eax
c000f12f:	e8 c9 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f134:	83 c4 20             	add    esp,0x20
c000f137:	c3                   	ret    

c000f138 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f138:	83 ec 10             	sub    esp,0x10
c000f13b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f13f:	50                   	push   eax
c000f140:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f144:	50                   	push   eax
c000f145:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f149:	52                   	push   edx
c000f14a:	e8 f3 fe ff ff       	call   c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f14f:	50                   	push   eax
c000f150:	e8 a8 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f155:	83 c4 20             	add    esp,0x20
c000f158:	c3                   	ret    

c000f159 <Dbg::kprintf(char const*, ...)>:
c000f159:	55                   	push   ebp
c000f15a:	57                   	push   edi
c000f15b:	56                   	push   esi
c000f15c:	53                   	push   ebx
c000f15d:	83 ec 0c             	sub    esp,0xc
c000f160:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f164:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f16c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f16f:	84 c0                	test   al,al
c000f171:	74 4d                	je     c000f1c0 <Dbg::kprintf(char const*, ...)+0x67>
c000f173:	31 ff                	xor    edi,edi
c000f175:	8d 77 01             	lea    esi,[edi+0x1]
c000f178:	3c 25                	cmp    al,0x25
c000f17a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f17d:	0f 85 ec 00 00 00    	jne    c000f26f <Dbg::kprintf(char const*, ...)+0x116>
c000f183:	83 c7 02             	add    edi,0x2
c000f186:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f189:	83 e8 25             	sub    eax,0x25
c000f18c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f18f:	3c 53                	cmp    al,0x53
c000f191:	0f 87 c0 00 00 00    	ja     c000f257 <Dbg::kprintf(char const*, ...)+0xfe>
c000f197:	25 ff 00 00 00       	and    eax,0xff
c000f19c:	ff 24 85 d8 17 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde828]
c000f1a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1a7:	89 c8                	mov    eax,ecx
c000f1a9:	83 c1 04             	add    ecx,0x4
c000f1ac:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b2:	50                   	push   eax
c000f1b3:	e8 45 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f1b8:	58                   	pop    eax
c000f1b9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f1bc:	84 c0                	test   al,al
c000f1be:	75 b5                	jne    c000f175 <Dbg::kprintf(char const*, ...)+0x1c>
c000f1c0:	83 c4 0c             	add    esp,0xc
c000f1c3:	5b                   	pop    ebx
c000f1c4:	5e                   	pop    esi
c000f1c5:	5f                   	pop    edi
c000f1c6:	5d                   	pop    ebp
c000f1c7:	c3                   	ret    
c000f1c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1cc:	89 d0                	mov    eax,edx
c000f1ce:	83 c2 04             	add    edx,0x4
c000f1d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d7:	50                   	push   eax
c000f1d8:	e8 3d ff ff ff       	call   c000f11a <Dbg::logWriteInt(unsigned int)>
c000f1dd:	58                   	pop    eax
c000f1de:	eb d9                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f1e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1e4:	89 d0                	mov    eax,edx
c000f1e6:	83 c2 04             	add    edx,0x4
c000f1e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1ed:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f1f0:	50                   	push   eax
c000f1f1:	e8 f0 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f1f6:	58                   	pop    eax
c000f1f7:	eb c0                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f1f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1fd:	89 c8                	mov    eax,ecx
c000f1ff:	83 c1 04             	add    ecx,0x4
c000f202:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f206:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f208:	55                   	push   ebp
c000f209:	e8 0c ff ff ff       	call   c000f11a <Dbg::logWriteInt(unsigned int)>
c000f20e:	58                   	pop    eax
c000f20f:	eb a8                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f211:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f215:	89 c8                	mov    eax,ecx
c000f217:	83 c1 04             	add    ecx,0x4
c000f21a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f21e:	6a 10                	push   0x10
c000f220:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f222:	51                   	push   ecx
c000f223:	e8 10 ff ff ff       	call   c000f138 <Dbg::logWriteIntBase(unsigned int, int)>
c000f228:	5d                   	pop    ebp
c000f229:	58                   	pop    eax
c000f22a:	eb 8d                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f22c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f230:	89 d0                	mov    eax,edx
c000f232:	83 c2 08             	add    edx,0x8
c000f235:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f239:	6a 10                	push   0x10
c000f23b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f23d:	50                   	push   eax
c000f23e:	e8 f5 fe ff ff       	call   c000f138 <Dbg::logWriteIntBase(unsigned int, int)>
c000f243:	58                   	pop    eax
c000f244:	5a                   	pop    edx
c000f245:	e9 6f ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f24a:	6a 25                	push   0x25
c000f24c:	e8 95 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f251:	5a                   	pop    edx
c000f252:	e9 62 ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f257:	6a 25                	push   0x25
c000f259:	e8 88 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f25e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f262:	50                   	push   eax
c000f263:	e8 7e fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f268:	5a                   	pop    edx
c000f269:	59                   	pop    ecx
c000f26a:	e9 4a ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f26f:	50                   	push   eax
c000f270:	89 f7                	mov    edi,esi
c000f272:	e8 6f fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f277:	89 ee                	mov    esi,ebp
c000f279:	58                   	pop    eax
c000f27a:	e9 3a ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f27f:	90                   	nop

c000f280 <File::read(unsigned long long, void*, int*)>:
c000f280:	53                   	push   ebx
c000f281:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f285:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f289:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f290:	3c 19                	cmp    al,0x19
c000f292:	77 35                	ja     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f294:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c000f29b:	85 c0                	test   eax,eax
c000f29d:	74 2a                	je     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f29f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2a5:	85 c0                	test   eax,eax
c000f2a7:	74 20                	je     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f2a9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2ad:	74 21                	je     c000f2d0 <File::read(unsigned long long, void*, int*)+0x50>
c000f2af:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2b5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2c3:	5b                   	pop    ebx
c000f2c4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f2c7:	ff e0                	jmp    eax
c000f2c9:	b8 0b 00 00 00       	mov    eax,0xb
c000f2ce:	eb 05                	jmp    c000f2d5 <File::read(unsigned long long, void*, int*)+0x55>
c000f2d0:	b8 05 00 00 00       	mov    eax,0x5
c000f2d5:	5b                   	pop    ebx
c000f2d6:	c3                   	ret    
c000f2d7:	90                   	nop

c000f2d8 <File::write(unsigned long long, void*, int*)>:
c000f2d8:	53                   	push   ebx
c000f2d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2e1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2e8:	3c 19                	cmp    al,0x19
c000f2ea:	77 35                	ja     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f2ec:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c000f2f3:	85 c0                	test   eax,eax
c000f2f5:	74 2a                	je     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f2f7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2fd:	85 c0                	test   eax,eax
c000f2ff:	74 20                	je     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f301:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f305:	74 21                	je     c000f328 <File::write(unsigned long long, void*, int*)+0x50>
c000f307:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f309:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f30d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f313:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f317:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f31b:	5b                   	pop    ebx
c000f31c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f31f:	ff e0                	jmp    eax
c000f321:	b8 0b 00 00 00       	mov    eax,0xb
c000f326:	eb 05                	jmp    c000f32d <File::write(unsigned long long, void*, int*)+0x55>
c000f328:	b8 05 00 00 00       	mov    eax,0x5
c000f32d:	5b                   	pop    ebx
c000f32e:	c3                   	ret    
c000f32f:	90                   	nop

c000f330 <Directory::read(unsigned long long, void*, int*)>:
c000f330:	53                   	push   ebx
c000f331:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f335:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f339:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f340:	3c 19                	cmp    al,0x19
c000f342:	77 35                	ja     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f344:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c000f34b:	85 c0                	test   eax,eax
c000f34d:	74 2a                	je     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f34f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f355:	85 c0                	test   eax,eax
c000f357:	74 20                	je     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f359:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f35d:	74 21                	je     c000f380 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f35f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f361:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f365:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f36b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f36f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f373:	5b                   	pop    ebx
c000f374:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f377:	ff e0                	jmp    eax
c000f379:	b8 0b 00 00 00       	mov    eax,0xb
c000f37e:	eb 05                	jmp    c000f385 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f380:	b8 05 00 00 00       	mov    eax,0x5
c000f385:	5b                   	pop    ebx
c000f386:	c3                   	ret    
c000f387:	90                   	nop

c000f388 <Directory::write(unsigned long long, void*, int*)>:
c000f388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f38c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f393:	b8 0b 00 00 00       	mov    eax,0xb
c000f398:	80 fa 19             	cmp    dl,0x19
c000f39b:	77 18                	ja     c000f3b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f39d:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000f3a4:	85 d2                	test   edx,edx
c000f3a6:	74 0d                	je     c000f3b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f3a8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f3af:	19 c0                	sbb    eax,eax
c000f3b1:	83 e0 0a             	and    eax,0xa
c000f3b4:	40                   	inc    eax
c000f3b5:	c3                   	ret    

c000f3b6 <File::isAtty()>:
c000f3b6:	31 c0                	xor    eax,eax
c000f3b8:	c3                   	ret    
c000f3b9:	90                   	nop

c000f3ba <Directory::isAtty()>:
c000f3ba:	31 c0                	xor    eax,eax
c000f3bc:	c3                   	ret    
c000f3bd:	90                   	nop

c000f3be <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f3be:	b8 0a 00 00 00       	mov    eax,0xa
c000f3c3:	c3                   	ret    

c000f3c4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f3c4:	b8 0a 00 00 00       	mov    eax,0xa
c000f3c9:	c3                   	ret    

c000f3ca <File::~File()>:
c000f3ca:	83 ec 0c             	sub    esp,0xc
c000f3cd:	ba 94 19 02 c0       	mov    edx,0xc0021994
c000f3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d6:	89 10                	mov    DWORD PTR [eax],edx
c000f3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3dc:	83 ec 0c             	sub    esp,0xc
c000f3df:	50                   	push   eax
c000f3e0:	e8 f3 ea ff ff       	call   c000ded8 <UnixFile::~UnixFile()>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	90                   	nop
c000f3e9:	83 c4 0c             	add    esp,0xc
c000f3ec:	c3                   	ret    
c000f3ed:	90                   	nop

c000f3ee <File::~File()>:
c000f3ee:	83 ec 0c             	sub    esp,0xc
c000f3f1:	83 ec 0c             	sub    esp,0xc
c000f3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3f8:	e8 cd ff ff ff       	call   c000f3ca <File::~File()>
c000f3fd:	83 c4 10             	add    esp,0x10
c000f400:	83 ec 08             	sub    esp,0x8
c000f403:	68 14 01 00 00       	push   0x114
c000f408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f40c:	e8 22 fc ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f411:	83 c4 10             	add    esp,0x10
c000f414:	83 c4 0c             	add    esp,0xc
c000f417:	c3                   	ret    

c000f418 <Directory::~Directory()>:
c000f418:	83 ec 0c             	sub    esp,0xc
c000f41b:	ba b0 19 02 c0       	mov    edx,0xc00219b0
c000f420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f424:	89 10                	mov    DWORD PTR [eax],edx
c000f426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f42a:	83 ec 0c             	sub    esp,0xc
c000f42d:	50                   	push   eax
c000f42e:	e8 a5 ea ff ff       	call   c000ded8 <UnixFile::~UnixFile()>
c000f433:	83 c4 10             	add    esp,0x10
c000f436:	90                   	nop
c000f437:	83 c4 0c             	add    esp,0xc
c000f43a:	c3                   	ret    
c000f43b:	90                   	nop

c000f43c <Directory::~Directory()>:
c000f43c:	83 ec 0c             	sub    esp,0xc
c000f43f:	83 ec 0c             	sub    esp,0xc
c000f442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f446:	e8 cd ff ff ff       	call   c000f418 <Directory::~Directory()>
c000f44b:	83 c4 10             	add    esp,0x10
c000f44e:	83 ec 08             	sub    esp,0x8
c000f451:	68 14 01 00 00       	push   0x114
c000f456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f45a:	e8 d4 fb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f45f:	83 c4 10             	add    esp,0x10
c000f462:	83 c4 0c             	add    esp,0xc
c000f465:	c3                   	ret    

c000f466 <Filesystem::Filesystem()>:
c000f466:	ba 30 19 02 c0       	mov    edx,0xc0021930
c000f46b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f46f:	89 10                	mov    DWORD PTR [eax],edx
c000f471:	8b 15 e8 46 02 c0    	mov    edx,DWORD PTR ds:0xc00246e8
c000f477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f47b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f482:	a3 e8 46 02 c0       	mov    ds:0xc00246e8,eax
c000f487:	90                   	nop
c000f488:	c3                   	ret    
c000f489:	90                   	nop

c000f48a <Filesystem::~Filesystem()>:
c000f48a:	ba 30 19 02 c0       	mov    edx,0xc0021930
c000f48f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f493:	89 10                	mov    DWORD PTR [eax],edx
c000f495:	90                   	nop
c000f496:	c3                   	ret    
c000f497:	90                   	nop

c000f498 <Filesystem::~Filesystem()>:
c000f498:	83 ec 0c             	sub    esp,0xc
c000f49b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f49f:	e8 e6 ff ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c000f4a4:	83 c4 04             	add    esp,0x4
c000f4a7:	83 ec 08             	sub    esp,0x8
c000f4aa:	6a 08                	push   0x8
c000f4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b0:	e8 7e fb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f4b5:	83 c4 10             	add    esp,0x10
c000f4b8:	83 c4 0c             	add    esp,0xc
c000f4bb:	c3                   	ret    

c000f4bc <initVFS()>:
c000f4bc:	83 ec 18             	sub    esp,0x18
c000f4bf:	6a 08                	push   0x8
c000f4c1:	e8 5e fb ff ff       	call   c000f024 <operator new(unsigned long)>
c000f4c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4c9:	e8 7e b3 00 00       	call   c001a84c <FAT::FAT()>
c000f4ce:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f4d5:	e8 4a fb ff ff       	call   c000f024 <operator new(unsigned long)>
c000f4da:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4dd:	e8 0a c6 00 00       	call   c001baec <ISO9660::ISO9660()>
c000f4e2:	83 c4 1c             	add    esp,0x1c
c000f4e5:	c3                   	ret    

c000f4e6 <standardiseFiles(char*, char const*, char const*)>:
c000f4e6:	55                   	push   ebp
c000f4e7:	57                   	push   edi
c000f4e8:	56                   	push   esi
c000f4e9:	53                   	push   ebx
c000f4ea:	81 ec 10 04 00 00    	sub    esp,0x410
c000f4f0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4f7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4fe:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f505:	68 00 04 00 00       	push   0x400
c000f50a:	6a 00                	push   0x0
c000f50c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f510:	56                   	push   esi
c000f511:	e8 a4 11 ff ff       	call   c00006ba <memset>
c000f516:	83 c4 10             	add    esp,0x10
c000f519:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f51d:	75 0b                	jne    c000f52a <standardiseFiles(char*, char const*, char const*)+0x44>
c000f51f:	50                   	push   eax
c000f520:	50                   	push   eax
c000f521:	57                   	push   edi
c000f522:	56                   	push   esi
c000f523:	e8 31 12 ff ff       	call   c0000759 <strcpy>
c000f528:	eb 41                	jmp    c000f56b <standardiseFiles(char*, char const*, char const*)+0x85>
c000f52a:	8a 07                	mov    al,BYTE PTR [edi]
c000f52c:	3c 5c                	cmp    al,0x5c
c000f52e:	74 04                	je     c000f534 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f530:	3c 2f                	cmp    al,0x2f
c000f532:	75 18                	jne    c000f54c <standardiseFiles(char*, char const*, char const*)+0x66>
c000f534:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f537:	3c 60                	cmp    al,0x60
c000f539:	7e 03                	jle    c000f53e <standardiseFiles(char*, char const*, char const*)+0x58>
c000f53b:	83 e8 20             	sub    eax,0x20
c000f53e:	88 04 24             	mov    BYTE PTR [esp],al
c000f541:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f548:	50                   	push   eax
c000f549:	50                   	push   eax
c000f54a:	eb 18                	jmp    c000f564 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f54c:	50                   	push   eax
c000f54d:	50                   	push   eax
c000f54e:	55                   	push   ebp
c000f54f:	56                   	push   esi
c000f550:	e8 04 12 ff ff       	call   c0000759 <strcpy>
c000f555:	5a                   	pop    edx
c000f556:	59                   	pop    ecx
c000f557:	68 54 2c 02 c0       	push   0xc0022c54
c000f55c:	56                   	push   esi
c000f55d:	e8 ae 12 ff ff       	call   c0000810 <strcat>
c000f562:	5d                   	pop    ebp
c000f563:	58                   	pop    eax
c000f564:	57                   	push   edi
c000f565:	56                   	push   esi
c000f566:	e8 a5 12 ff ff       	call   c0000810 <strcat>
c000f56b:	83 c4 10             	add    esp,0x10
c000f56e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f571:	3c 60                	cmp    al,0x60
c000f573:	7e 03                	jle    c000f578 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f575:	83 e8 20             	sub    eax,0x20
c000f578:	88 04 24             	mov    BYTE PTR [esp],al
c000f57b:	88 03                	mov    BYTE PTR [ebx],al
c000f57d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f584:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f58a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f58e:	bf 03 00 00 00       	mov    edi,0x3
c000f593:	b8 03 00 00 00       	mov    eax,0x3
c000f598:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f59b:	84 d2                	test   dl,dl
c000f59d:	0f 84 91 00 00 00    	je     c000f634 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f5a3:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f5a6:	80 fa 2f             	cmp    dl,0x2f
c000f5a9:	74 05                	je     c000f5b0 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f5ab:	80 fa 5c             	cmp    dl,0x5c
c000f5ae:	75 12                	jne    c000f5c2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5b0:	89 c5                	mov    ebp,eax
c000f5b2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f5b7:	74 09                	je     c000f5c2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5b9:	40                   	inc    eax
c000f5ba:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f5be:	89 cf                	mov    edi,ecx
c000f5c0:	eb d6                	jmp    c000f598 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f5c2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f5c7:	75 5b                	jne    c000f624 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5c9:	80 fa 2e             	cmp    dl,0x2e
c000f5cc:	75 56                	jne    c000f624 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5ce:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f5d2:	74 19                	je     c000f5ed <standardiseFiles(char*, char const*, char const*)+0x107>
c000f5d4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5d9:	74 53                	je     c000f62e <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5db:	89 f9                	mov    ecx,edi
c000f5dd:	41                   	inc    ecx
c000f5de:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5e1:	80 fa 5c             	cmp    dl,0x5c
c000f5e4:	74 f7                	je     c000f5dd <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5e6:	80 fa 2f             	cmp    dl,0x2f
c000f5e9:	74 f2                	je     c000f5dd <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5eb:	eb d1                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5ed:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5f2:	74 3a                	je     c000f62e <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5f4:	83 f8 03             	cmp    eax,0x3
c000f5f7:	74 c5                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5f9:	41                   	inc    ecx
c000f5fa:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5fd:	80 fa 2f             	cmp    dl,0x2f
c000f600:	74 f7                	je     c000f5f9 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f602:	80 fa 5c             	cmp    dl,0x5c
c000f605:	74 f2                	je     c000f5f9 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f607:	48                   	dec    eax
c000f608:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f60c:	75 06                	jne    c000f614 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f60e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f612:	eb f3                	jmp    c000f607 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f614:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f618:	74 07                	je     c000f621 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f61a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f61e:	48                   	dec    eax
c000f61f:	eb f3                	jmp    c000f614 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f621:	40                   	inc    eax
c000f622:	eb 9a                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f624:	80 fa 2f             	cmp    dl,0x2f
c000f627:	74 95                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f629:	80 fa 5c             	cmp    dl,0x5c
c000f62c:	74 90                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f62e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f631:	40                   	inc    eax
c000f632:	eb 8a                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f634:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	53                   	push   ebx
c000f63c:	e8 96 10 ff ff       	call   c00006d7 <strlen>
c000f641:	83 c4 10             	add    esp,0x10
c000f644:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f649:	75 26                	jne    c000f671 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f64b:	83 ec 0c             	sub    esp,0xc
c000f64e:	53                   	push   ebx
c000f64f:	e8 83 10 ff ff       	call   c00006d7 <strlen>
c000f654:	83 c4 10             	add    esp,0x10
c000f657:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f65c:	74 26                	je     c000f684 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f65e:	83 ec 0c             	sub    esp,0xc
c000f661:	53                   	push   ebx
c000f662:	e8 70 10 ff ff       	call   c00006d7 <strlen>
c000f667:	83 c4 10             	add    esp,0x10
c000f66a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f66f:	eb c7                	jmp    c000f638 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f671:	83 ec 0c             	sub    esp,0xc
c000f674:	53                   	push   ebx
c000f675:	e8 5d 10 ff ff       	call   c00006d7 <strlen>
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f682:	74 c7                	je     c000f64b <standardiseFiles(char*, char const*, char const*)+0x165>
c000f684:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f68a:	5b                   	pop    ebx
c000f68b:	5e                   	pop    esi
c000f68c:	5f                   	pop    edi
c000f68d:	5d                   	pop    ebp
c000f68e:	c3                   	ret    
c000f68f:	90                   	nop

c000f690 <File::File(char const*, Process*)>:
c000f690:	83 ec 0c             	sub    esp,0xc
c000f693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f697:	83 ec 08             	sub    esp,0x8
c000f69a:	6a 00                	push   0x0
c000f69c:	50                   	push   eax
c000f69d:	e8 94 e6 ff ff       	call   c000dd36 <UnixFile::UnixFile(int)>
c000f6a2:	83 c4 10             	add    esp,0x10
c000f6a5:	ba 94 19 02 c0       	mov    edx,0xc0021994
c000f6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ae:	89 10                	mov    DWORD PTR [eax],edx
c000f6b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6be:	83 c0 0d             	add    eax,0xd
c000f6c1:	83 ec 04             	sub    esp,0x4
c000f6c4:	52                   	push   edx
c000f6c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6c9:	50                   	push   eax
c000f6ca:	e8 17 fe ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000f6cf:	83 c4 10             	add    esp,0x10
c000f6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f6d9:	8d 50 bf             	lea    edx,[eax-0x41]
c000f6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f6ee:	90                   	nop
c000f6ef:	83 c4 0c             	add    esp,0xc
c000f6f2:	c3                   	ret    
c000f6f3:	90                   	nop

c000f6f4 <File::open(FileOpenMode)>:
c000f6f4:	53                   	push   ebx
c000f6f5:	b8 0b 00 00 00       	mov    eax,0xb
c000f6fa:	83 ec 08             	sub    esp,0x8
c000f6fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f701:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f708:	80 fa 19             	cmp    dl,0x19
c000f70b:	77 40                	ja     c000f74d <File::open(FileOpenMode)+0x59>
c000f70d:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000f714:	85 d2                	test   edx,edx
c000f716:	74 35                	je     c000f74d <File::open(FileOpenMode)+0x59>
c000f718:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f71e:	85 d2                	test   edx,edx
c000f720:	74 2b                	je     c000f74d <File::open(FileOpenMode)+0x59>
c000f722:	b8 06 00 00 00       	mov    eax,0x6
c000f727:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f72b:	75 20                	jne    c000f74d <File::open(FileOpenMode)+0x59>
c000f72d:	8b 02                	mov    eax,DWORD PTR [edx]
c000f72f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f739:	51                   	push   ecx
c000f73a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f73d:	51                   	push   ecx
c000f73e:	52                   	push   edx
c000f73f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f742:	83 c4 10             	add    esp,0x10
c000f745:	85 c0                	test   eax,eax
c000f747:	75 04                	jne    c000f74d <File::open(FileOpenMode)+0x59>
c000f749:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f74d:	83 c4 08             	add    esp,0x8
c000f750:	5b                   	pop    ebx
c000f751:	c3                   	ret    

c000f752 <File::close()>:
c000f752:	53                   	push   ebx
c000f753:	b8 0b 00 00 00       	mov    eax,0xb
c000f758:	83 ec 08             	sub    esp,0x8
c000f75b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f75f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f766:	80 fa 19             	cmp    dl,0x19
c000f769:	77 41                	ja     c000f7ac <File::close()+0x5a>
c000f76b:	8b 1c 95 80 4b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb480]
c000f772:	85 db                	test   ebx,ebx
c000f774:	74 36                	je     c000f7ac <File::close()+0x5a>
c000f776:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f77d:	74 2d                	je     c000f7ac <File::close()+0x5a>
c000f77f:	b8 05 00 00 00       	mov    eax,0x5
c000f784:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f788:	74 22                	je     c000f7ac <File::close()+0x5a>
c000f78a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f78e:	8b 04 95 80 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb480]
c000f795:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f79b:	53                   	push   ebx
c000f79c:	53                   	push   ebx
c000f79d:	8b 10                	mov    edx,DWORD PTR [eax]
c000f79f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f7a5:	50                   	push   eax
c000f7a6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f7a9:	83 c4 10             	add    esp,0x10
c000f7ac:	83 c4 08             	add    esp,0x8
c000f7af:	5b                   	pop    ebx
c000f7b0:	c3                   	ret    
c000f7b1:	90                   	nop

c000f7b2 <File::seek(unsigned long long)>:
c000f7b2:	56                   	push   esi
c000f7b3:	b8 0b 00 00 00       	mov    eax,0xb
c000f7b8:	53                   	push   ebx
c000f7b9:	51                   	push   ecx
c000f7ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f7c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7c6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f7cd:	80 fa 19             	cmp    dl,0x19
c000f7d0:	77 31                	ja     c000f803 <File::seek(unsigned long long)+0x51>
c000f7d2:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000f7d9:	85 d2                	test   edx,edx
c000f7db:	74 26                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7dd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7e3:	85 d2                	test   edx,edx
c000f7e5:	74 1c                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7e7:	b8 05 00 00 00       	mov    eax,0x5
c000f7ec:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f7f0:	74 11                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7f2:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7f4:	53                   	push   ebx
c000f7f5:	51                   	push   ecx
c000f7f6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7fc:	52                   	push   edx
c000f7fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f800:	83 c4 10             	add    esp,0x10
c000f803:	5a                   	pop    edx
c000f804:	5b                   	pop    ebx
c000f805:	5e                   	pop    esi
c000f806:	c3                   	ret    
c000f807:	90                   	nop

c000f808 <File::tell(unsigned long long*)>:
c000f808:	83 ec 0c             	sub    esp,0xc
c000f80b:	b8 0b 00 00 00       	mov    eax,0xb
c000f810:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f814:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f81b:	80 fa 19             	cmp    dl,0x19
c000f81e:	77 34                	ja     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f820:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000f827:	85 d2                	test   edx,edx
c000f829:	74 29                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f82b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f831:	85 d2                	test   edx,edx
c000f833:	74 1f                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f835:	b8 05 00 00 00       	mov    eax,0x5
c000f83a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f83e:	74 14                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f840:	50                   	push   eax
c000f841:	8b 02                	mov    eax,DWORD PTR [edx]
c000f843:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f847:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f84d:	52                   	push   edx
c000f84e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f851:	83 c4 10             	add    esp,0x10
c000f854:	83 c4 0c             	add    esp,0xc
c000f857:	c3                   	ret    

c000f858 <File::rewind()>:
c000f858:	83 ec 10             	sub    esp,0x10
c000f85b:	6a 00                	push   0x0
c000f85d:	6a 00                	push   0x0
c000f85f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f863:	e8 4a ff ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c000f868:	83 c4 1c             	add    esp,0x1c
c000f86b:	c3                   	ret    

c000f86c <File::unlink()>:
c000f86c:	83 ec 0c             	sub    esp,0xc
c000f86f:	b8 0b 00 00 00       	mov    eax,0xb
c000f874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f878:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f87f:	80 f9 19             	cmp    cl,0x19
c000f882:	77 2f                	ja     c000f8b3 <File::unlink()+0x47>
c000f884:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000f88b:	85 c9                	test   ecx,ecx
c000f88d:	74 24                	je     c000f8b3 <File::unlink()+0x47>
c000f88f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f895:	85 c9                	test   ecx,ecx
c000f897:	74 1a                	je     c000f8b3 <File::unlink()+0x47>
c000f899:	b8 06 00 00 00       	mov    eax,0x6
c000f89e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8a2:	75 0f                	jne    c000f8b3 <File::unlink()+0x47>
c000f8a4:	50                   	push   eax
c000f8a5:	83 c2 0d             	add    edx,0xd
c000f8a8:	50                   	push   eax
c000f8a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8ab:	52                   	push   edx
c000f8ac:	51                   	push   ecx
c000f8ad:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f8b0:	83 c4 10             	add    esp,0x10
c000f8b3:	83 c4 0c             	add    esp,0xc
c000f8b6:	c3                   	ret    
c000f8b7:	90                   	nop

c000f8b8 <File::rename(char const*)>:
c000f8b8:	83 ec 0c             	sub    esp,0xc
c000f8bb:	b8 0b 00 00 00       	mov    eax,0xb
c000f8c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8cb:	80 f9 19             	cmp    cl,0x19
c000f8ce:	77 32                	ja     c000f902 <File::rename(char const*)+0x4a>
c000f8d0:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000f8d7:	85 c9                	test   ecx,ecx
c000f8d9:	74 27                	je     c000f902 <File::rename(char const*)+0x4a>
c000f8db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8e1:	85 c9                	test   ecx,ecx
c000f8e3:	74 1d                	je     c000f902 <File::rename(char const*)+0x4a>
c000f8e5:	b8 06 00 00 00       	mov    eax,0x6
c000f8ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8ee:	75 12                	jne    c000f902 <File::rename(char const*)+0x4a>
c000f8f0:	50                   	push   eax
c000f8f1:	83 c2 0d             	add    edx,0xd
c000f8f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8fa:	52                   	push   edx
c000f8fb:	51                   	push   ecx
c000f8fc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	83 c4 0c             	add    esp,0xc
c000f905:	c3                   	ret    

c000f906 <File::chfatattr(unsigned char, unsigned char)>:
c000f906:	57                   	push   edi
c000f907:	b8 0b 00 00 00       	mov    eax,0xb
c000f90c:	56                   	push   esi
c000f90d:	53                   	push   ebx
c000f90e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f912:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f916:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f91a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f921:	80 f9 19             	cmp    cl,0x19
c000f924:	77 37                	ja     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f926:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000f92d:	85 c9                	test   ecx,ecx
c000f92f:	74 2c                	je     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f931:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f937:	85 c9                	test   ecx,ecx
c000f939:	74 22                	je     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f93b:	b8 06 00 00 00       	mov    eax,0x6
c000f940:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f944:	75 17                	jne    c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f946:	89 f0                	mov    eax,esi
c000f948:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f94a:	0f b6 f0             	movzx  esi,al
c000f94d:	56                   	push   esi
c000f94e:	83 c2 0d             	add    edx,0xd
c000f951:	0f b6 db             	movzx  ebx,bl
c000f954:	53                   	push   ebx
c000f955:	52                   	push   edx
c000f956:	51                   	push   ecx
c000f957:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f95a:	83 c4 10             	add    esp,0x10
c000f95d:	5b                   	pop    ebx
c000f95e:	5e                   	pop    esi
c000f95f:	5f                   	pop    edi
c000f960:	c3                   	ret    
c000f961:	90                   	nop

c000f962 <File::exists()>:
c000f962:	83 ec 0c             	sub    esp,0xc
c000f965:	31 c0                	xor    eax,eax
c000f967:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f96b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f972:	80 f9 19             	cmp    cl,0x19
c000f975:	77 24                	ja     c000f99b <File::exists()+0x39>
c000f977:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000f97e:	85 c9                	test   ecx,ecx
c000f980:	74 19                	je     c000f99b <File::exists()+0x39>
c000f982:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f988:	85 c9                	test   ecx,ecx
c000f98a:	74 0f                	je     c000f99b <File::exists()+0x39>
c000f98c:	50                   	push   eax
c000f98d:	83 c2 0d             	add    edx,0xd
c000f990:	50                   	push   eax
c000f991:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f993:	52                   	push   edx
c000f994:	51                   	push   ecx
c000f995:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f998:	83 c4 10             	add    esp,0x10
c000f99b:	83 c4 0c             	add    esp,0xc
c000f99e:	c3                   	ret    
c000f99f:	90                   	nop

c000f9a0 <File::stat(unsigned long long*, bool*)>:
c000f9a0:	56                   	push   esi
c000f9a1:	53                   	push   ebx
c000f9a2:	50                   	push   eax
c000f9a3:	b8 0b 00 00 00       	mov    eax,0xb
c000f9a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f9b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9bb:	80 f9 19             	cmp    cl,0x19
c000f9be:	77 3d                	ja     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9c0:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000f9c7:	85 c9                	test   ecx,ecx
c000f9c9:	74 32                	je     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9d1:	85 c9                	test   ecx,ecx
c000f9d3:	74 28                	je     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9db:	74 13                	je     c000f9f0 <File::stat(unsigned long long*, bool*)+0x50>
c000f9dd:	83 ec 04             	sub    esp,0x4
c000f9e0:	56                   	push   esi
c000f9e1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f9e7:	51                   	push   ecx
c000f9e8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f9eb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f9ee:	eb 0a                	jmp    c000f9fa <File::stat(unsigned long long*, bool*)+0x5a>
c000f9f0:	53                   	push   ebx
c000f9f1:	83 c2 0d             	add    edx,0xd
c000f9f4:	56                   	push   esi
c000f9f5:	52                   	push   edx
c000f9f6:	51                   	push   ecx
c000f9f7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9fa:	83 c4 10             	add    esp,0x10
c000f9fd:	5a                   	pop    edx
c000f9fe:	5b                   	pop    ebx
c000f9ff:	5e                   	pop    esi
c000fa00:	c3                   	ret    

c000fa01 <getcwd(Process*, char*, int)>:
c000fa01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fa05:	31 c0                	xor    eax,eax
c000fa07:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fa0a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fa0e:	7d 15                	jge    c000fa25 <getcwd(Process*, char*, int)+0x24>
c000fa10:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fa14:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fa1b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fa1e:	84 c9                	test   cl,cl
c000fa20:	74 06                	je     c000fa28 <getcwd(Process*, char*, int)+0x27>
c000fa22:	40                   	inc    eax
c000fa23:	eb e2                	jmp    c000fa07 <getcwd(Process*, char*, int)+0x6>
c000fa25:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fa28:	31 c0                	xor    eax,eax
c000fa2a:	c3                   	ret    

c000fa2b <setcwd(Process*, char*)>:
c000fa2b:	55                   	push   ebp
c000fa2c:	57                   	push   edi
c000fa2d:	56                   	push   esi
c000fa2e:	53                   	push   ebx
c000fa2f:	81 ec 20 02 00 00    	sub    esp,0x220
c000fa35:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fa3c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa42:	57                   	push   edi
c000fa43:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa4a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa4e:	56                   	push   esi
c000fa4f:	e8 92 fa ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000fa54:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa57:	e8 7b 0c ff ff       	call   c00006d7 <strlen>
c000fa5c:	83 c4 10             	add    esp,0x10
c000fa5f:	83 f8 02             	cmp    eax,0x2
c000fa62:	77 17                	ja     c000fa7b <setcwd(Process*, char*)+0x50>
c000fa64:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa69:	83 e8 41             	sub    eax,0x41
c000fa6c:	83 f8 19             	cmp    eax,0x19
c000fa6f:	76 24                	jbe    c000fa95 <setcwd(Process*, char*)+0x6a>
c000fa71:	b8 03 00 00 00       	mov    eax,0x3
c000fa76:	e9 cb 00 00 00       	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fa7b:	83 ec 0c             	sub    esp,0xc
c000fa7e:	56                   	push   esi
c000fa7f:	e8 53 0c ff ff       	call   c00006d7 <strlen>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	83 f8 03             	cmp    eax,0x3
c000fa8a:	75 33                	jne    c000fabf <setcwd(Process*, char*)+0x94>
c000fa8c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa91:	75 2c                	jne    c000fabf <setcwd(Process*, char*)+0x94>
c000fa93:	eb cf                	jmp    c000fa64 <setcwd(Process*, char*)+0x39>
c000fa95:	8b 14 85 80 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb480]
c000fa9c:	b8 05 00 00 00       	mov    eax,0x5
c000faa1:	85 d2                	test   edx,edx
c000faa3:	0f 84 9d 00 00 00    	je     c000fb46 <setcwd(Process*, char*)+0x11b>
c000faa9:	b8 06 00 00 00       	mov    eax,0x6
c000faae:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fab5:	0f 84 8b 00 00 00    	je     c000fb46 <setcwd(Process*, char*)+0x11b>
c000fabb:	51                   	push   ecx
c000fabc:	51                   	push   ecx
c000fabd:	eb 7b                	jmp    c000fb3a <setcwd(Process*, char*)+0x10f>
c000fabf:	83 ec 0c             	sub    esp,0xc
c000fac2:	68 14 01 00 00       	push   0x114
c000fac7:	e8 58 f5 ff ff       	call   c000f024 <operator new(unsigned long)>
c000facc:	83 c4 0c             	add    esp,0xc
c000facf:	89 c3                	mov    ebx,eax
c000fad1:	55                   	push   ebp
c000fad2:	56                   	push   esi
c000fad3:	50                   	push   eax
c000fad4:	e8 b7 fb ff ff       	call   c000f690 <File::File(char const*, Process*)>
c000fad9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fade:	83 c4 0c             	add    esp,0xc
c000fae1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fae5:	50                   	push   eax
c000fae6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000faea:	50                   	push   eax
c000faeb:	53                   	push   ebx
c000faec:	e8 af fe ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c000faf1:	83 c4 10             	add    esp,0x10
c000faf4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000faf6:	83 f8 02             	cmp    eax,0x2
c000faf9:	75 09                	jne    c000fb04 <setcwd(Process*, char*)+0xd9>
c000fafb:	83 ec 0c             	sub    esp,0xc
c000fafe:	53                   	push   ebx
c000faff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fb02:	eb 0d                	jmp    c000fb11 <setcwd(Process*, char*)+0xe6>
c000fb04:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fb07:	85 c0                	test   eax,eax
c000fb09:	74 10                	je     c000fb1b <setcwd(Process*, char*)+0xf0>
c000fb0b:	83 ec 0c             	sub    esp,0xc
c000fb0e:	53                   	push   ebx
c000fb0f:	ff d2                	call   edx
c000fb11:	83 c4 10             	add    esp,0x10
c000fb14:	b8 01 00 00 00       	mov    eax,0x1
c000fb19:	eb 2b                	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fb1b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fb20:	75 10                	jne    c000fb32 <setcwd(Process*, char*)+0x107>
c000fb22:	83 ec 0c             	sub    esp,0xc
c000fb25:	53                   	push   ebx
c000fb26:	ff d2                	call   edx
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	b8 02 00 00 00       	mov    eax,0x2
c000fb30:	eb 14                	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fb32:	83 ec 0c             	sub    esp,0xc
c000fb35:	53                   	push   ebx
c000fb36:	ff d2                	call   edx
c000fb38:	58                   	pop    eax
c000fb39:	5a                   	pop    edx
c000fb3a:	56                   	push   esi
c000fb3b:	57                   	push   edi
c000fb3c:	e8 18 0c ff ff       	call   c0000759 <strcpy>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	31 c0                	xor    eax,eax
c000fb46:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb4c:	5b                   	pop    ebx
c000fb4d:	5e                   	pop    esi
c000fb4e:	5f                   	pop    edi
c000fb4f:	5d                   	pop    ebp
c000fb50:	c3                   	ret    
c000fb51:	90                   	nop

c000fb52 <Directory::Directory(char const*, Process*)>:
c000fb52:	83 ec 0c             	sub    esp,0xc
c000fb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb59:	83 ec 08             	sub    esp,0x8
c000fb5c:	6a 00                	push   0x0
c000fb5e:	50                   	push   eax
c000fb5f:	e8 d2 e1 ff ff       	call   c000dd36 <UnixFile::UnixFile(int)>
c000fb64:	83 c4 10             	add    esp,0x10
c000fb67:	ba b0 19 02 c0       	mov    edx,0xc00219b0
c000fb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb70:	89 10                	mov    DWORD PTR [eax],edx
c000fb72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb80:	83 c0 0d             	add    eax,0xd
c000fb83:	83 ec 04             	sub    esp,0x4
c000fb86:	52                   	push   edx
c000fb87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb8b:	50                   	push   eax
c000fb8c:	e8 55 f9 ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000fb91:	83 c4 10             	add    esp,0x10
c000fb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb98:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb9b:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fba2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbac:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fbb0:	90                   	nop
c000fbb1:	83 c4 0c             	add    esp,0xc
c000fbb4:	c3                   	ret    
c000fbb5:	90                   	nop

c000fbb6 <Directory::open()>:
c000fbb6:	53                   	push   ebx
c000fbb7:	b8 0b 00 00 00       	mov    eax,0xb
c000fbbc:	83 ec 08             	sub    esp,0x8
c000fbbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbc3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fbca:	80 fa 19             	cmp    dl,0x19
c000fbcd:	77 3d                	ja     c000fc0c <Directory::open()+0x56>
c000fbcf:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000fbd6:	85 d2                	test   edx,edx
c000fbd8:	74 32                	je     c000fc0c <Directory::open()+0x56>
c000fbda:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fbe0:	85 d2                	test   edx,edx
c000fbe2:	74 28                	je     c000fc0c <Directory::open()+0x56>
c000fbe4:	b8 06 00 00 00       	mov    eax,0x6
c000fbe9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fbed:	75 1d                	jne    c000fc0c <Directory::open()+0x56>
c000fbef:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fbf5:	50                   	push   eax
c000fbf6:	8b 02                	mov    eax,DWORD PTR [edx]
c000fbf8:	51                   	push   ecx
c000fbf9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fbfc:	51                   	push   ecx
c000fbfd:	52                   	push   edx
c000fbfe:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	85 c0                	test   eax,eax
c000fc06:	75 04                	jne    c000fc0c <Directory::open()+0x56>
c000fc08:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fc0c:	83 c4 08             	add    esp,0x8
c000fc0f:	5b                   	pop    ebx
c000fc10:	c3                   	ret    
c000fc11:	90                   	nop

c000fc12 <Directory::close()>:
c000fc12:	53                   	push   ebx
c000fc13:	b8 0b 00 00 00       	mov    eax,0xb
c000fc18:	83 ec 08             	sub    esp,0x8
c000fc1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc1f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fc26:	80 fa 19             	cmp    dl,0x19
c000fc29:	77 41                	ja     c000fc6c <Directory::close()+0x5a>
c000fc2b:	8b 1c 95 80 4b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb480]
c000fc32:	85 db                	test   ebx,ebx
c000fc34:	74 36                	je     c000fc6c <Directory::close()+0x5a>
c000fc36:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fc3d:	74 2d                	je     c000fc6c <Directory::close()+0x5a>
c000fc3f:	b8 05 00 00 00       	mov    eax,0x5
c000fc44:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc48:	74 22                	je     c000fc6c <Directory::close()+0x5a>
c000fc4a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc4e:	8b 04 95 80 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb480]
c000fc55:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc5b:	53                   	push   ebx
c000fc5c:	53                   	push   ebx
c000fc5d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc5f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc65:	50                   	push   eax
c000fc66:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc69:	83 c4 10             	add    esp,0x10
c000fc6c:	83 c4 08             	add    esp,0x8
c000fc6f:	5b                   	pop    ebx
c000fc70:	c3                   	ret    
c000fc71:	90                   	nop

c000fc72 <Directory::unlink()>:
c000fc72:	83 ec 0c             	sub    esp,0xc
c000fc75:	b8 0b 00 00 00       	mov    eax,0xb
c000fc7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc85:	80 f9 19             	cmp    cl,0x19
c000fc88:	77 2f                	ja     c000fcb9 <Directory::unlink()+0x47>
c000fc8a:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000fc91:	85 c9                	test   ecx,ecx
c000fc93:	74 24                	je     c000fcb9 <Directory::unlink()+0x47>
c000fc95:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc9b:	85 c9                	test   ecx,ecx
c000fc9d:	74 1a                	je     c000fcb9 <Directory::unlink()+0x47>
c000fc9f:	b8 06 00 00 00       	mov    eax,0x6
c000fca4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fca8:	75 0f                	jne    c000fcb9 <Directory::unlink()+0x47>
c000fcaa:	50                   	push   eax
c000fcab:	83 c2 0d             	add    edx,0xd
c000fcae:	50                   	push   eax
c000fcaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcb1:	52                   	push   edx
c000fcb2:	51                   	push   ecx
c000fcb3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fcb6:	83 c4 10             	add    esp,0x10
c000fcb9:	83 c4 0c             	add    esp,0xc
c000fcbc:	c3                   	ret    
c000fcbd:	90                   	nop

c000fcbe <Directory::rename(char const*)>:
c000fcbe:	83 ec 0c             	sub    esp,0xc
c000fcc1:	b8 0b 00 00 00       	mov    eax,0xb
c000fcc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcd1:	80 f9 19             	cmp    cl,0x19
c000fcd4:	77 32                	ja     c000fd08 <Directory::rename(char const*)+0x4a>
c000fcd6:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000fcdd:	85 c9                	test   ecx,ecx
c000fcdf:	74 27                	je     c000fd08 <Directory::rename(char const*)+0x4a>
c000fce1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fce7:	85 c9                	test   ecx,ecx
c000fce9:	74 1d                	je     c000fd08 <Directory::rename(char const*)+0x4a>
c000fceb:	b8 06 00 00 00       	mov    eax,0x6
c000fcf0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fcf4:	75 12                	jne    c000fd08 <Directory::rename(char const*)+0x4a>
c000fcf6:	50                   	push   eax
c000fcf7:	83 c2 0d             	add    edx,0xd
c000fcfa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd00:	52                   	push   edx
c000fd01:	51                   	push   ecx
c000fd02:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fd05:	83 c4 10             	add    esp,0x10
c000fd08:	83 c4 0c             	add    esp,0xc
c000fd0b:	c3                   	ret    

c000fd0c <Directory::exists()>:
c000fd0c:	83 ec 0c             	sub    esp,0xc
c000fd0f:	31 c0                	xor    eax,eax
c000fd11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd15:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd1c:	80 f9 19             	cmp    cl,0x19
c000fd1f:	77 24                	ja     c000fd45 <Directory::exists()+0x39>
c000fd21:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000fd28:	85 c9                	test   ecx,ecx
c000fd2a:	74 19                	je     c000fd45 <Directory::exists()+0x39>
c000fd2c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd32:	85 c9                	test   ecx,ecx
c000fd34:	74 0f                	je     c000fd45 <Directory::exists()+0x39>
c000fd36:	50                   	push   eax
c000fd37:	83 c2 0d             	add    edx,0xd
c000fd3a:	50                   	push   eax
c000fd3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd3d:	52                   	push   edx
c000fd3e:	51                   	push   ecx
c000fd3f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd42:	83 c4 10             	add    esp,0x10
c000fd45:	83 c4 0c             	add    esp,0xc
c000fd48:	c3                   	ret    
c000fd49:	90                   	nop

c000fd4a <Directory::read(dirent*)>:
c000fd4a:	83 ec 1c             	sub    esp,0x1c
c000fd4d:	b8 0b 00 00 00       	mov    eax,0xb
c000fd52:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd56:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd5d:	80 fa 19             	cmp    dl,0x19
c000fd60:	77 30                	ja     c000fd92 <Directory::read(dirent*)+0x48>
c000fd62:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000fd69:	85 d2                	test   edx,edx
c000fd6b:	74 25                	je     c000fd92 <Directory::read(dirent*)+0x48>
c000fd6d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd74:	74 1c                	je     c000fd92 <Directory::read(dirent*)+0x48>
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd7b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd7f:	52                   	push   edx
c000fd80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd84:	6a 00                	push   0x0
c000fd86:	68 10 01 00 00       	push   0x110
c000fd8b:	51                   	push   ecx
c000fd8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd8f:	83 c4 20             	add    esp,0x20
c000fd92:	83 c4 1c             	add    esp,0x1c
c000fd95:	c3                   	ret    

c000fd96 <Directory::create()>:
c000fd96:	83 ec 0c             	sub    esp,0xc
c000fd99:	b8 0b 00 00 00       	mov    eax,0xb
c000fd9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fda2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fda9:	80 f9 19             	cmp    cl,0x19
c000fdac:	77 2f                	ja     c000fddd <Directory::create()+0x47>
c000fdae:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000fdb5:	85 c9                	test   ecx,ecx
c000fdb7:	74 24                	je     c000fddd <Directory::create()+0x47>
c000fdb9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdbf:	85 c9                	test   ecx,ecx
c000fdc1:	74 1a                	je     c000fddd <Directory::create()+0x47>
c000fdc3:	b8 06 00 00 00       	mov    eax,0x6
c000fdc8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdcc:	75 0f                	jne    c000fddd <Directory::create()+0x47>
c000fdce:	50                   	push   eax
c000fdcf:	83 c2 0d             	add    edx,0xd
c000fdd2:	50                   	push   eax
c000fdd3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdd5:	52                   	push   edx
c000fdd6:	51                   	push   ecx
c000fdd7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fdda:	83 c4 10             	add    esp,0x10
c000fddd:	83 c4 0c             	add    esp,0xc
c000fde0:	c3                   	ret    
c000fde1:	90                   	nop

c000fde2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fde2:	b8 0a 00 00 00       	mov    eax,0xa
c000fde7:	c3                   	ret    

c000fde8 <Bus::Bus(char const*)>:
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdef:	83 ec 08             	sub    esp,0x8
c000fdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdf6:	50                   	push   eax
c000fdf7:	e8 62 09 00 00       	call   c001075e <Device::Device(char const*)>
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	ba cc 19 02 c0       	mov    edx,0xc00219cc
c000fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe08:	89 10                	mov    DWORD PTR [eax],edx
c000fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fe18:	90                   	nop
c000fe19:	83 c4 0c             	add    esp,0xc
c000fe1c:	c3                   	ret    
c000fe1d:	90                   	nop

c000fe1e <Bus::~Bus()>:
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	ba cc 19 02 c0       	mov    edx,0xc00219cc
c000fe26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe2a:	89 10                	mov    DWORD PTR [eax],edx
c000fe2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	50                   	push   eax
c000fe34:	e8 db 05 00 00       	call   c0010414 <Device::~Device()>
c000fe39:	83 c4 10             	add    esp,0x10
c000fe3c:	90                   	nop
c000fe3d:	83 c4 0c             	add    esp,0xc
c000fe40:	c3                   	ret    
c000fe41:	90                   	nop

c000fe42 <Bus::~Bus()>:
c000fe42:	83 ec 0c             	sub    esp,0xc
c000fe45:	83 ec 0c             	sub    esp,0xc
c000fe48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4c:	e8 cd ff ff ff       	call   c000fe1e <Bus::~Bus()>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	68 58 01 00 00       	push   0x158
c000fe5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe60:	e8 ce f1 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000fe65:	83 c4 10             	add    esp,0x10
c000fe68:	83 c4 0c             	add    esp,0xc
c000fe6b:	c3                   	ret    

c000fe6c <Buzzer::Buzzer(char const*)>:
c000fe6c:	83 ec 0c             	sub    esp,0xc
c000fe6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe73:	83 ec 08             	sub    esp,0x8
c000fe76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe7a:	50                   	push   eax
c000fe7b:	e8 de 08 00 00       	call   c001075e <Device::Device(char const*)>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	ba f8 19 02 c0       	mov    edx,0xc00219f8
c000fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8c:	89 10                	mov    DWORD PTR [eax],edx
c000fe8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000feaa:	90                   	nop
c000feab:	83 c4 0c             	add    esp,0xc
c000feae:	c3                   	ret    
c000feaf:	90                   	nop

c000feb0 <Buzzer::~Buzzer()>:
c000feb0:	83 ec 0c             	sub    esp,0xc
c000feb3:	ba f8 19 02 c0       	mov    edx,0xc00219f8
c000feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000febc:	89 10                	mov    DWORD PTR [eax],edx
c000febe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec2:	83 ec 0c             	sub    esp,0xc
c000fec5:	50                   	push   eax
c000fec6:	e8 49 05 00 00       	call   c0010414 <Device::~Device()>
c000fecb:	83 c4 10             	add    esp,0x10
c000fece:	90                   	nop
c000fecf:	83 c4 0c             	add    esp,0xc
c000fed2:	c3                   	ret    
c000fed3:	90                   	nop

c000fed4 <Buzzer::~Buzzer()>:
c000fed4:	83 ec 0c             	sub    esp,0xc
c000fed7:	83 ec 0c             	sub    esp,0xc
c000feda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fede:	e8 cd ff ff ff       	call   c000feb0 <Buzzer::~Buzzer()>
c000fee3:	83 c4 10             	add    esp,0x10
c000fee6:	83 ec 08             	sub    esp,0x8
c000fee9:	68 5c 01 00 00       	push   0x15c
c000feee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fef2:	e8 3c f1 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	83 c4 0c             	add    esp,0xc
c000fefd:	c3                   	ret    

c000fefe <Buzzer::stop()>:
c000fefe:	83 ec 14             	sub    esp,0x14
c000ff01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff05:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff07:	6a 00                	push   0x0
c000ff09:	50                   	push   eax
c000ff0a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ff0d:	83 c4 1c             	add    esp,0x1c
c000ff10:	c3                   	ret    

c000ff11 <beepThread(void*)>:
c000ff11:	53                   	push   ebx
c000ff12:	83 ec 08             	sub    esp,0x8
c000ff15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff19:	e8 19 8a 00 00       	call   c0018937 <unlockScheduler()>
c000ff1e:	52                   	push   edx
c000ff1f:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ff24:	52                   	push   edx
c000ff25:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ff2b:	52                   	push   edx
c000ff2c:	50                   	push   eax
c000ff2d:	e8 61 8f 00 00       	call   c0018e93 <nanoSleep(unsigned long long)>
c000ff32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff35:	e8 c4 ff ff ff       	call   c000fefe <Buzzer::stop()>
c000ff3a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff42:	83 c4 18             	add    esp,0x18
c000ff45:	5b                   	pop    ebx
c000ff46:	e9 8c 8e 00 00       	jmp    c0018dd7 <blockTask(TaskState)>
c000ff4b:	90                   	nop

c000ff4c <Buzzer::beep(int, int, bool)>:
c000ff4c:	57                   	push   edi
c000ff4d:	56                   	push   esi
c000ff4e:	53                   	push   ebx
c000ff4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff53:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff5b:	52                   	push   edx
c000ff5c:	52                   	push   edx
c000ff5d:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff63:	56                   	push   esi
c000ff64:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff67:	89 f8                	mov    eax,edi
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	84 c0                	test   al,al
c000ff6e:	74 1f                	je     c000ff8f <Buzzer::beep(int, int, bool)+0x43>
c000ff70:	50                   	push   eax
c000ff71:	50                   	push   eax
c000ff72:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff78:	99                   	cdq    
c000ff79:	52                   	push   edx
c000ff7a:	50                   	push   eax
c000ff7b:	e8 13 8f 00 00       	call   c0018e93 <nanoSleep(unsigned long long)>
c000ff80:	83 c4 10             	add    esp,0x10
c000ff83:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff87:	5b                   	pop    ebx
c000ff88:	5e                   	pop    esi
c000ff89:	5f                   	pop    edi
c000ff8a:	e9 6f ff ff ff       	jmp    c000fefe <Buzzer::stop()>
c000ff8f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff95:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c000ff9a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ffa2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ffa6:	c7 44 24 14 11 ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ff11
c000ffae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ffb2:	5b                   	pop    ebx
c000ffb3:	5e                   	pop    esi
c000ffb4:	5f                   	pop    edi
c000ffb5:	e9 b0 8a 00 00       	jmp    c0018a6a <Process::createThread(void (*)(void*), void*, int)>

c000ffba <loadClockSettings()>:
c000ffba:	c7 05 f4 46 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0xa
c000ffc4:	c6 05 f1 46 02 c0 00 	mov    BYTE PTR ds:0xc00246f1,0x0
c000ffcb:	c6 05 f0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246f0,0x1
c000ffd2:	c3                   	ret    
c000ffd3:	90                   	nop

c000ffd4 <Clock::Clock(char const*)>:
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffdb:	83 ec 08             	sub    esp,0x8
c000ffde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe2:	50                   	push   eax
c000ffe3:	e8 76 07 00 00       	call   c001075e <Device::Device(char const*)>
c000ffe8:	83 c4 10             	add    esp,0x10
c000ffeb:	ba 28 1a 02 c0       	mov    edx,0xc0021a28
c000fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff4:	89 10                	mov    DWORD PTR [eax],edx
c000fff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffa:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0010004:	90                   	nop
c0010005:	83 c4 0c             	add    esp,0xc
c0010008:	c3                   	ret    
c0010009:	90                   	nop

c001000a <Clock::~Clock()>:
c001000a:	83 ec 0c             	sub    esp,0xc
c001000d:	ba 28 1a 02 c0       	mov    edx,0xc0021a28
c0010012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010016:	89 10                	mov    DWORD PTR [eax],edx
c0010018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001c:	83 ec 0c             	sub    esp,0xc
c001001f:	50                   	push   eax
c0010020:	e8 ef 03 00 00       	call   c0010414 <Device::~Device()>
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	90                   	nop
c0010029:	83 c4 0c             	add    esp,0xc
c001002c:	c3                   	ret    
c001002d:	90                   	nop

c001002e <Clock::~Clock()>:
c001002e:	83 ec 0c             	sub    esp,0xc
c0010031:	83 ec 0c             	sub    esp,0xc
c0010034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010038:	e8 cd ff ff ff       	call   c001000a <Clock::~Clock()>
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	83 ec 08             	sub    esp,0x8
c0010043:	68 58 01 00 00       	push   0x158
c0010048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001004c:	e8 e2 ef ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	83 c4 0c             	add    esp,0xc
c0010057:	c3                   	ret    

c0010058 <Clock::timeInSecondsLocal()>:
c0010058:	53                   	push   ebx
c0010059:	83 ec 14             	sub    esp,0x14
c001005c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010060:	8b 10                	mov    edx,DWORD PTR [eax]
c0010062:	50                   	push   eax
c0010063:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010066:	0f b6 0d f0 46 02 c0 	movzx  ecx,BYTE PTR ds:0xc00246f0
c001006d:	03 0d f4 46 02 c0    	add    ecx,DWORD PTR ds:0xc00246f4
c0010073:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010079:	89 cb                	mov    ebx,ecx
c001007b:	c1 fb 1f             	sar    ebx,0x1f
c001007e:	01 c8                	add    eax,ecx
c0010080:	11 da                	adc    edx,ebx
c0010082:	83 c4 10             	add    esp,0x10
c0010085:	31 c9                	xor    ecx,ecx
c0010087:	80 3d f1 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246f1,0x0
c001008e:	74 05                	je     c0010095 <Clock::timeInSecondsLocal()+0x3d>
c0010090:	b9 08 07 00 00       	mov    ecx,0x708
c0010095:	31 db                	xor    ebx,ebx
c0010097:	01 c8                	add    eax,ecx
c0010099:	11 da                	adc    edx,ebx
c001009b:	83 c4 08             	add    esp,0x8
c001009e:	5b                   	pop    ebx
c001009f:	c3                   	ret    

c00100a0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00100a0:	57                   	push   edi
c00100a1:	56                   	push   esi
c00100a2:	53                   	push   ebx
c00100a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00100a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00100af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100b1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00100b4:	0f b6 05 f0 46 02 c0 	movzx  eax,BYTE PTR ds:0xc00246f0
c00100bb:	03 05 f4 46 02 c0    	add    eax,DWORD PTR ds:0xc00246f4
c00100c1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00100c7:	99                   	cdq    
c00100c8:	29 c6                	sub    esi,eax
c00100ca:	19 d7                	sbb    edi,edx
c00100cc:	89 f0                	mov    eax,esi
c00100ce:	89 fa                	mov    edx,edi
c00100d0:	31 f6                	xor    esi,esi
c00100d2:	80 3d f1 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246f1,0x0
c00100d9:	74 05                	je     c00100e0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00100db:	be 08 07 00 00       	mov    esi,0x708
c00100e0:	31 ff                	xor    edi,edi
c00100e2:	29 f0                	sub    eax,esi
c00100e4:	19 fa                	sbb    edx,edi
c00100e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100ee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00100f2:	89 d8                	mov    eax,ebx
c00100f4:	5b                   	pop    ebx
c00100f5:	5e                   	pop    esi
c00100f6:	5f                   	pop    edi
c00100f7:	ff e0                	jmp    eax

c00100f9 <datetimeToSeconds(datetime_t)>:
c00100f9:	55                   	push   ebp
c00100fa:	57                   	push   edi
c00100fb:	56                   	push   esi
c00100fc:	53                   	push   ebx
c00100fd:	83 ec 14             	sub    esp,0x14
c0010100:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010104:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010108:	0f b6 f5             	movzx  esi,ch
c001010b:	6b f6 3c             	imul   esi,esi,0x3c
c001010e:	89 cf                	mov    edi,ecx
c0010110:	89 d3                	mov    ebx,edx
c0010112:	0f b6 c9             	movzx  ecx,cl
c0010115:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001011b:	0f b6 c6             	movzx  eax,dh
c001011e:	c1 ef 10             	shr    edi,0x10
c0010121:	48                   	dec    eax
c0010122:	c1 eb 10             	shr    ebx,0x10
c0010125:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010129:	89 f8                	mov    eax,edi
c001012b:	0f b6 f8             	movzx  edi,al
c001012e:	01 fe                	add    esi,edi
c0010130:	01 f1                	add    ecx,esi
c0010132:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010136:	c1 f9 1f             	sar    ecx,0x1f
c0010139:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001013d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010142:	0f b6 d2             	movzx  edx,dl
c0010145:	66 81 eb 6c 07       	sub    bx,0x76c
c001014a:	8b 0c 8d 60 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde5a0]
c0010151:	0f b7 f3             	movzx  esi,bx
c0010154:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010158:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001015d:	76 29                	jbe    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c001015f:	f6 c3 03             	test   bl,0x3
c0010162:	75 24                	jne    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c0010164:	31 d2                	xor    edx,edx
c0010166:	bf 64 00 00 00       	mov    edi,0x64
c001016b:	89 d8                	mov    eax,ebx
c001016d:	66 f7 f7             	div    di
c0010170:	66 85 d2             	test   dx,dx
c0010173:	75 12                	jne    c0010187 <datetimeToSeconds(datetime_t)+0x8e>
c0010175:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001017b:	bf 90 01 00 00       	mov    edi,0x190
c0010180:	99                   	cdq    
c0010181:	f7 ff                	idiv   edi
c0010183:	85 d2                	test   edx,edx
c0010185:	75 01                	jne    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c0010187:	41                   	inc    ecx
c0010188:	66 83 fb 46          	cmp    bx,0x46
c001018c:	76 45                	jbe    c00101d3 <datetimeToSeconds(datetime_t)+0xda>
c001018e:	bb 46 00 00 00       	mov    ebx,0x46
c0010193:	bf 64 00 00 00       	mov    edi,0x64
c0010198:	bd 90 01 00 00       	mov    ebp,0x190
c001019d:	b8 6d 01 00 00       	mov    eax,0x16d
c00101a2:	f6 c3 03             	test   bl,0x3
c00101a5:	75 23                	jne    c00101ca <datetimeToSeconds(datetime_t)+0xd1>
c00101a7:	89 d8                	mov    eax,ebx
c00101a9:	99                   	cdq    
c00101aa:	f7 ff                	idiv   edi
c00101ac:	85 d2                	test   edx,edx
c00101ae:	b8 6e 01 00 00       	mov    eax,0x16e
c00101b3:	75 15                	jne    c00101ca <datetimeToSeconds(datetime_t)+0xd1>
c00101b5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00101bb:	99                   	cdq    
c00101bc:	f7 fd                	idiv   ebp
c00101be:	31 c0                	xor    eax,eax
c00101c0:	85 d2                	test   edx,edx
c00101c2:	0f 94 c0             	sete   al
c00101c5:	05 6d 01 00 00       	add    eax,0x16d
c00101ca:	43                   	inc    ebx
c00101cb:	01 c1                	add    ecx,eax
c00101cd:	39 f3                	cmp    ebx,esi
c00101cf:	7c cc                	jl     c001019d <datetimeToSeconds(datetime_t)+0xa4>
c00101d1:	eb 3b                	jmp    c001020e <datetimeToSeconds(datetime_t)+0x115>
c00101d3:	74 39                	je     c001020e <datetimeToSeconds(datetime_t)+0x115>
c00101d5:	b8 45 00 00 00       	mov    eax,0x45
c00101da:	89 c2                	mov    edx,eax
c00101dc:	83 e2 03             	and    edx,0x3
c00101df:	39 f0                	cmp    eax,esi
c00101e1:	7e 13                	jle    c00101f6 <datetimeToSeconds(datetime_t)+0xfd>
c00101e3:	85 d2                	test   edx,edx
c00101e5:	0f 94 c2             	sete   dl
c00101e8:	0f b6 d2             	movzx  edx,dl
c00101eb:	81 c2 6d 01 00 00    	add    edx,0x16d
c00101f1:	48                   	dec    eax
c00101f2:	29 d1                	sub    ecx,edx
c00101f4:	eb e4                	jmp    c00101da <datetimeToSeconds(datetime_t)+0xe1>
c00101f6:	b8 6d 01 00 00       	mov    eax,0x16d
c00101fb:	85 d2                	test   edx,edx
c00101fd:	75 0d                	jne    c001020c <datetimeToSeconds(datetime_t)+0x113>
c00101ff:	31 c0                	xor    eax,eax
c0010201:	66 85 db             	test   bx,bx
c0010204:	0f 95 c0             	setne  al
c0010207:	05 6d 01 00 00       	add    eax,0x16d
c001020c:	29 c1                	sub    ecx,eax
c001020e:	b8 80 51 01 00       	mov    eax,0x15180
c0010213:	f7 e9                	imul   ecx
c0010215:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010219:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001021d:	83 c4 14             	add    esp,0x14
c0010220:	5b                   	pop    ebx
c0010221:	5e                   	pop    esi
c0010222:	5f                   	pop    edi
c0010223:	5d                   	pop    ebp
c0010224:	c3                   	ret    
c0010225:	90                   	nop

c0010226 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0010226:	57                   	push   edi
c0010227:	56                   	push   esi
c0010228:	53                   	push   ebx
c0010229:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001022d:	8b 06                	mov    eax,DWORD PTR [esi]
c001022f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0010232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010236:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001023a:	e8 ba fe ff ff       	call   c00100f9 <datetimeToSeconds(datetime_t)>
c001023f:	59                   	pop    ecx
c0010240:	0f b6 0d f0 46 02 c0 	movzx  ecx,BYTE PTR ds:0xc00246f0
c0010247:	03 0d f4 46 02 c0    	add    ecx,DWORD PTR ds:0xc00246f4
c001024d:	5b                   	pop    ebx
c001024e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010254:	89 cb                	mov    ebx,ecx
c0010256:	c1 fb 1f             	sar    ebx,0x1f
c0010259:	29 c8                	sub    eax,ecx
c001025b:	19 da                	sbb    edx,ebx
c001025d:	31 c9                	xor    ecx,ecx
c001025f:	80 3d f1 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246f1,0x0
c0010266:	74 05                	je     c001026d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010268:	b9 08 07 00 00       	mov    ecx,0x708
c001026d:	31 db                	xor    ebx,ebx
c001026f:	29 c8                	sub    eax,ecx
c0010271:	19 da                	sbb    edx,ebx
c0010273:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010277:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001027b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001027f:	5b                   	pop    ebx
c0010280:	89 f8                	mov    eax,edi
c0010282:	5e                   	pop    esi
c0010283:	5f                   	pop    edi
c0010284:	ff e0                	jmp    eax

c0010286 <secondsToDatetime(unsigned long long)>:
c0010286:	55                   	push   ebp
c0010287:	57                   	push   edi
c0010288:	56                   	push   esi
c0010289:	53                   	push   ebx
c001028a:	83 ec 1c             	sub    esp,0x1c
c001028d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010291:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010295:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010299:	6a 00                	push   0x0
c001029b:	68 80 51 01 00       	push   0x15180
c00102a0:	55                   	push   ebp
c00102a1:	57                   	push   edi
c00102a2:	e8 25 f1 00 00       	call   c001f3cc <__udivdi3>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102ae:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00102b4:	6a 00                	push   0x0
c00102b6:	68 80 51 01 00       	push   0x15180
c00102bb:	55                   	push   ebp
c00102bc:	57                   	push   edi
c00102bd:	e8 0a f2 00 00       	call   c001f4cc <__umoddi3>
c00102c2:	bf 10 0e 00 00       	mov    edi,0xe10
c00102c7:	83 c4 10             	add    esp,0x10
c00102ca:	99                   	cdq    
c00102cb:	f7 ff                	idiv   edi
c00102cd:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00102d0:	89 d0                	mov    eax,edx
c00102d2:	99                   	cdq    
c00102d3:	bf 3c 00 00 00       	mov    edi,0x3c
c00102d8:	f7 ff                	idiv   edi
c00102da:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00102dd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00102e0:	85 db                	test   ebx,ebx
c00102e2:	79 11                	jns    c00102f5 <secondsToDatetime(unsigned long long)+0x6f>
c00102e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102e8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00102ee:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102f3:	eb 07                	jmp    c00102fc <secondsToDatetime(unsigned long long)+0x76>
c00102f5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102fa:	89 d8                	mov    eax,ebx
c00102fc:	99                   	cdq    
c00102fd:	f7 f9                	idiv   ecx
c00102ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010303:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0010308:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0010310:	01 c3                	add    ebx,eax
c0010312:	31 d2                	xor    edx,edx
c0010314:	89 d8                	mov    eax,ebx
c0010316:	bf b4 05 00 00       	mov    edi,0x5b4
c001031b:	f7 f1                	div    ecx
c001031d:	31 d2                	xor    edx,edx
c001031f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0010324:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0010327:	89 d8                	mov    eax,ebx
c0010329:	f7 f7                	div    edi
c001032b:	29 c1                	sub    ecx,eax
c001032d:	31 d2                	xor    edx,edx
c001032f:	89 d8                	mov    eax,ebx
c0010331:	f7 f5                	div    ebp
c0010333:	29 c1                	sub    ecx,eax
c0010335:	bd 6d 01 00 00       	mov    ebp,0x16d
c001033a:	89 c8                	mov    eax,ecx
c001033c:	31 d2                	xor    edx,edx
c001033e:	f7 f5                	div    ebp
c0010340:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010344:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010349:	89 c8                	mov    eax,ecx
c001034b:	31 d2                	xor    edx,edx
c001034d:	f7 f5                	div    ebp
c001034f:	01 c3                	add    ebx,eax
c0010351:	31 d2                	xor    edx,edx
c0010353:	89 c8                	mov    eax,ecx
c0010355:	f7 f7                	div    edi
c0010357:	29 c3                	sub    ebx,eax
c0010359:	bf 99 00 00 00       	mov    edi,0x99
c001035e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010366:	29 c3                	sub    ebx,eax
c0010368:	31 d2                	xor    edx,edx
c001036a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001036d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010370:	83 c1 02             	add    ecx,0x2
c0010373:	bb 05 00 00 00       	mov    ebx,0x5
c0010378:	89 c8                	mov    eax,ecx
c001037a:	f7 f7                	div    edi
c001037c:	89 c7                	mov    edi,eax
c001037e:	31 d2                	xor    edx,edx
c0010380:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010386:	83 c0 02             	add    eax,0x2
c0010389:	f7 f3                	div    ebx
c001038b:	89 eb                	mov    ebx,ebp
c001038d:	29 c3                	sub    ebx,eax
c001038f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010395:	19 c0                	sbb    eax,eax
c0010397:	31 d2                	xor    edx,edx
c0010399:	83 e0 0c             	and    eax,0xc
c001039c:	88 1e                	mov    BYTE PTR [esi],bl
c001039e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00103a2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00103aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00103ae:	83 f9 01             	cmp    ecx,0x1
c00103b1:	0f 96 c2             	setbe  dl
c00103b4:	01 d0                	add    eax,edx
c00103b6:	41                   	inc    ecx
c00103b7:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00103bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00103be:	83 c4 1c             	add    esp,0x1c
c00103c1:	89 f0                	mov    eax,esi
c00103c3:	5b                   	pop    ebx
c00103c4:	5e                   	pop    esi
c00103c5:	5f                   	pop    edi
c00103c6:	5d                   	pop    ebp
c00103c7:	c2 04 00             	ret    0x4

c00103ca <Clock::timeInDatetimeLocal()>:
c00103ca:	53                   	push   ebx
c00103cb:	83 ec 14             	sub    esp,0x14
c00103ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00103d6:	e8 7d fc ff ff       	call   c0010058 <Clock::timeInSecondsLocal()>
c00103db:	83 c4 0c             	add    esp,0xc
c00103de:	52                   	push   edx
c00103df:	50                   	push   eax
c00103e0:	53                   	push   ebx
c00103e1:	e8 a0 fe ff ff       	call   c0010286 <secondsToDatetime(unsigned long long)>
c00103e6:	83 c4 14             	add    esp,0x14
c00103e9:	89 d8                	mov    eax,ebx
c00103eb:	5b                   	pop    ebx
c00103ec:	c2 04 00             	ret    0x4
c00103ef:	90                   	nop

c00103f0 <Device::hibernate()>:
c00103f0:	c3                   	ret    
c00103f1:	90                   	nop

c00103f2 <Device::wake()>:
c00103f2:	c3                   	ret    
c00103f3:	90                   	nop

c00103f4 <Device::detect()>:
c00103f4:	c3                   	ret    
c00103f5:	90                   	nop

c00103f6 <Device::disableLegacy()>:
c00103f6:	c3                   	ret    
c00103f7:	90                   	nop

c00103f8 <Device::powerSaving(PowerSavingLevel)>:
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <DriverlessDevice::close(int, int, void*)>:
c00103fa:	31 c0                	xor    eax,eax
c00103fc:	c3                   	ret    
c00103fd:	90                   	nop

c00103fe <DriverlessDevice::detect()>:
c00103fe:	c3                   	ret    
c00103ff:	90                   	nop

c0010400 <DriverlessDevice::open(int, int, void*)>:
c0010400:	83 ec 18             	sub    esp,0x18
c0010403:	68 90 1a 02 c0       	push   0xc0021a90
c0010408:	e8 3b 55 00 00       	call   c0015948 <Krnl::panic(char const*)>
c001040d:	83 c8 ff             	or     eax,0xffffffff
c0010410:	83 c4 1c             	add    esp,0x1c
c0010413:	c3                   	ret    

c0010414 <Device::~Device()>:
c0010414:	ba b8 1a 02 c0       	mov    edx,0xc0021ab8
c0010419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041d:	89 10                	mov    DWORD PTR [eax],edx
c001041f:	90                   	nop
c0010420:	c3                   	ret    
c0010421:	90                   	nop

c0010422 <Device::~Device()>:
c0010422:	83 ec 0c             	sub    esp,0xc
c0010425:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010429:	e8 e6 ff ff ff       	call   c0010414 <Device::~Device()>
c001042e:	83 c4 04             	add    esp,0x4
c0010431:	83 ec 08             	sub    esp,0x8
c0010434:	68 58 01 00 00       	push   0x158
c0010439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001043d:	e8 f1 eb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010442:	83 c4 10             	add    esp,0x10
c0010445:	83 c4 0c             	add    esp,0xc
c0010448:	c3                   	ret    
c0010449:	90                   	nop

c001044a <Device::findAndLoadDriver()>:
c001044a:	c3                   	ret    
c001044b:	90                   	nop

c001044c <Device::preOpenPCI(PCIDeviceInfo)>:
c001044c:	57                   	push   edi
c001044d:	b9 09 00 00 00       	mov    ecx,0x9
c0010452:	56                   	push   esi
c0010453:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010457:	81 c7 18 01 00 00    	add    edi,0x118
c001045d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010461:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010468:	fc                   	cld    
c0010469:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001046b:	5e                   	pop    esi
c001046c:	5f                   	pop    edi
c001046d:	c3                   	ret    

c001046e <Device::preOpenACPI(void*, char*, char*)>:
c001046e:	56                   	push   esi
c001046f:	53                   	push   ebx
c0010470:	83 ec 08             	sub    esp,0x8
c0010473:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010477:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001047b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001047f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010485:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001048f:	6a 1e                	push   0x1e
c0010491:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010497:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001049b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00104a1:	50                   	push   eax
c00104a2:	e8 dd 01 ff ff       	call   c0000684 <memcpy>
c00104a7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104ab:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104af:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00104b7:	83 c4 14             	add    esp,0x14
c00104ba:	5b                   	pop    ebx
c00104bb:	5e                   	pop    esi
c00104bc:	e9 c3 01 ff ff       	jmp    c0000684 <memcpy>
c00104c1:	90                   	nop

c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00104c2:	55                   	push   ebp
c00104c3:	57                   	push   edi
c00104c4:	56                   	push   esi
c00104c5:	53                   	push   ebx
c00104c6:	83 ec 0c             	sub    esp,0xc
c00104c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104cd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00104d1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00104d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104d9:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00104de:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104e5:	75 0b                	jne    c00104f2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00104e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00104e9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104ed:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00104f0:	eb 24                	jmp    c0010516 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00104f2:	e8 e5 42 00 00       	call   c00147dc <thisCPU()>
c00104f7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00104ff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0010503:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010507:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001050b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001050f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010513:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010516:	83 c4 0c             	add    esp,0xc
c0010519:	5b                   	pop    ebx
c001051a:	5e                   	pop    esi
c001051b:	5f                   	pop    edi
c001051c:	5d                   	pop    ebp
c001051d:	ff e0                	jmp    eax
c001051f:	90                   	nop

c0010520 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010520:	57                   	push   edi
c0010521:	56                   	push   esi
c0010522:	53                   	push   ebx
c0010523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010527:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001052b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001052f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010534:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001053b:	75 0b                	jne    c0010548 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001053d:	8b 00                	mov    eax,DWORD PTR [eax]
c001053f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010543:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010546:	eb 20                	jmp    c0010568 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010548:	e8 8f 42 00 00       	call   c00147dc <thisCPU()>
c001054d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010553:	8b 10                	mov    edx,DWORD PTR [eax]
c0010555:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010559:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001055d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010561:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010565:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010568:	5b                   	pop    ebx
c0010569:	5e                   	pop    esi
c001056a:	5f                   	pop    edi
c001056b:	ff e0                	jmp    eax
c001056d:	90                   	nop

c001056e <Device::addChild(Device*)>:
c001056e:	53                   	push   ebx
c001056f:	83 ec 08             	sub    esp,0x8
c0010572:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010576:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001057a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010580:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010586:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010588:	85 d2                	test   edx,edx
c001058a:	74 04                	je     c0010590 <Device::addChild(Device*)+0x22>
c001058c:	89 d3                	mov    ebx,edx
c001058e:	eb f6                	jmp    c0010586 <Device::addChild(Device*)+0x18>
c0010590:	83 ec 0c             	sub    esp,0xc
c0010593:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010596:	6a 08                	push   0x8
c0010598:	e8 87 ea ff ff       	call   c000f024 <operator new(unsigned long)>
c001059d:	89 03                	mov    DWORD PTR [ebx],eax
c001059f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105ac:	83 c4 18             	add    esp,0x18
c00105af:	5b                   	pop    ebx
c00105b0:	c3                   	ret    
c00105b1:	90                   	nop

c00105b2 <Device::removeAllChildren()>:
c00105b2:	56                   	push   esi
c00105b3:	53                   	push   ebx
c00105b4:	52                   	push   edx
c00105b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105b9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00105bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105c2:	74 17                	je     c00105db <Device::removeAllChildren()+0x29>
c00105c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00105c7:	85 c0                	test   eax,eax
c00105c9:	74 0c                	je     c00105d7 <Device::removeAllChildren()+0x25>
c00105cb:	83 ec 0c             	sub    esp,0xc
c00105ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00105d0:	50                   	push   eax
c00105d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00105d4:	83 c4 10             	add    esp,0x10
c00105d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105d9:	eb e4                	jmp    c00105bf <Device::removeAllChildren()+0xd>
c00105db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105e7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105f4:	58                   	pop    eax
c00105f5:	5b                   	pop    ebx
c00105f6:	5e                   	pop    esi
c00105f7:	c3                   	ret    

c00105f8 <Device::hibernateAll()>:
c00105f8:	53                   	push   ebx
c00105f9:	83 ec 14             	sub    esp,0x14
c00105fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010600:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010602:	53                   	push   ebx
c0010603:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010606:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001060c:	83 c4 10             	add    esp,0x10
c001060f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010612:	74 0f                	je     c0010623 <Device::hibernateAll()+0x2b>
c0010614:	83 ec 0c             	sub    esp,0xc
c0010617:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001061a:	e8 d9 ff ff ff       	call   c00105f8 <Device::hibernateAll()>
c001061f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010621:	eb e9                	jmp    c001060c <Device::hibernateAll()+0x14>
c0010623:	83 c4 08             	add    esp,0x8
c0010626:	5b                   	pop    ebx
c0010627:	c3                   	ret    

c0010628 <Device::wakeAll()>:
c0010628:	53                   	push   ebx
c0010629:	83 ec 14             	sub    esp,0x14
c001062c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010632:	53                   	push   ebx
c0010633:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010636:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010642:	74 0f                	je     c0010653 <Device::wakeAll()+0x2b>
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001064a:	e8 d9 ff ff ff       	call   c0010628 <Device::wakeAll()>
c001064f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010651:	eb e9                	jmp    c001063c <Device::wakeAll()+0x14>
c0010653:	83 c4 08             	add    esp,0x8
c0010656:	5b                   	pop    ebx
c0010657:	c3                   	ret    

c0010658 <Device::detectAll()>:
c0010658:	53                   	push   ebx
c0010659:	83 ec 14             	sub    esp,0x14
c001065c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010660:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010662:	53                   	push   ebx
c0010663:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010666:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001066c:	83 c4 10             	add    esp,0x10
c001066f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010672:	74 0f                	je     c0010683 <Device::detectAll()+0x2b>
c0010674:	83 ec 0c             	sub    esp,0xc
c0010677:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001067a:	e8 d9 ff ff ff       	call   c0010658 <Device::detectAll()>
c001067f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010681:	eb e9                	jmp    c001066c <Device::detectAll()+0x14>
c0010683:	83 c4 08             	add    esp,0x8
c0010686:	5b                   	pop    ebx
c0010687:	c3                   	ret    

c0010688 <Device::disableLegacyAll()>:
c0010688:	53                   	push   ebx
c0010689:	83 ec 14             	sub    esp,0x14
c001068c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010690:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010692:	53                   	push   ebx
c0010693:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010696:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001069c:	83 c4 10             	add    esp,0x10
c001069f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106a2:	74 0f                	je     c00106b3 <Device::disableLegacyAll()+0x2b>
c00106a4:	83 ec 0c             	sub    esp,0xc
c00106a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106aa:	e8 d9 ff ff ff       	call   c0010688 <Device::disableLegacyAll()>
c00106af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106b1:	eb e9                	jmp    c001069c <Device::disableLegacyAll()+0x14>
c00106b3:	83 c4 08             	add    esp,0x8
c00106b6:	5b                   	pop    ebx
c00106b7:	c3                   	ret    

c00106b8 <Device::loadDriversForAll()>:
c00106b8:	53                   	push   ebx
c00106b9:	83 ec 08             	sub    esp,0x8
c00106bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c0:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106c6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00106c8:	85 db                	test   ebx,ebx
c00106ca:	74 12                	je     c00106de <Device::loadDriversForAll()+0x26>
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00106d2:	e8 e1 ff ff ff       	call   c00106b8 <Device::loadDriversForAll()>
c00106d7:	83 c4 10             	add    esp,0x10
c00106da:	89 d8                	mov    eax,ebx
c00106dc:	eb e8                	jmp    c00106c6 <Device::loadDriversForAll()+0xe>
c00106de:	83 c4 08             	add    esp,0x8
c00106e1:	5b                   	pop    ebx
c00106e2:	c3                   	ret    
c00106e3:	90                   	nop

c00106e4 <Device::closeAll()>:
c00106e4:	53                   	push   ebx
c00106e5:	83 ec 08             	sub    esp,0x8
c00106e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ee:	6a 00                	push   0x0
c00106f0:	6a 00                	push   0x0
c00106f2:	6a 00                	push   0x0
c00106f4:	53                   	push   ebx
c00106f5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106fe:	83 c4 10             	add    esp,0x10
c0010701:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010704:	74 0f                	je     c0010715 <Device::closeAll()+0x31>
c0010706:	83 ec 0c             	sub    esp,0xc
c0010709:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001070c:	e8 d3 ff ff ff       	call   c00106e4 <Device::closeAll()>
c0010711:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010713:	eb e9                	jmp    c00106fe <Device::closeAll()+0x1a>
c0010715:	83 c4 08             	add    esp,0x8
c0010718:	5b                   	pop    ebx
c0010719:	c3                   	ret    

c001071a <Device::powerSavingAll(PowerSavingLevel)>:
c001071a:	56                   	push   esi
c001071b:	53                   	push   ebx
c001071c:	83 ec 0c             	sub    esp,0xc
c001071f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010723:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010729:	56                   	push   esi
c001072a:	53                   	push   ebx
c001072b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001072e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010734:	83 c4 10             	add    esp,0x10
c0010737:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001073a:	74 0f                	je     c001074b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001073c:	52                   	push   edx
c001073d:	52                   	push   edx
c001073e:	56                   	push   esi
c001073f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010742:	e8 d3 ff ff ff       	call   c001071a <Device::powerSavingAll(PowerSavingLevel)>
c0010747:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010749:	eb e9                	jmp    c0010734 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001074b:	58                   	pop    eax
c001074c:	5b                   	pop    ebx
c001074d:	5e                   	pop    esi
c001074e:	c3                   	ret    
c001074f:	90                   	nop

c0010750 <Device::setName(char const*)>:
c0010750:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010758:	e9 fc ff fe ff       	jmp    c0000759 <strcpy>
c001075d:	90                   	nop

c001075e <Device::Device(char const*)>:
c001075e:	83 ec 0c             	sub    esp,0xc
c0010761:	ba b8 1a 02 c0       	mov    edx,0xc0021ab8
c0010766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076a:	89 10                	mov    DWORD PTR [eax],edx
c001076c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010770:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001077a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001078c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001079a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00107a4:	83 ec 08             	sub    esp,0x8
c00107a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107af:	e8 9c ff ff ff       	call   c0010750 <Device::setName(char const*)>
c00107b4:	83 c4 10             	add    esp,0x10
c00107b7:	83 ec 0c             	sub    esp,0xc
c00107ba:	6a 08                	push   0x8
c00107bc:	e8 63 e8 ff ff       	call   c000f024 <operator new(unsigned long)>
c00107c1:	83 c4 10             	add    esp,0x10
c00107c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00107db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107df:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ef:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010800:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010824:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001082e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010832:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001083c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010840:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001084a:	90                   	nop
c001084b:	83 c4 0c             	add    esp,0xc
c001084e:	c3                   	ret    
c001084f:	90                   	nop

c0010850 <Device::getName()>:
c0010850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010854:	05 d0 00 00 00       	add    eax,0xd0
c0010859:	c3                   	ret    

c001085a <DriverlessDevice::DriverlessDevice(char const*)>:
c001085a:	83 ec 0c             	sub    esp,0xc
c001085d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010868:	50                   	push   eax
c0010869:	e8 f0 fe ff ff       	call   c001075e <Device::Device(char const*)>
c001086e:	83 c4 10             	add    esp,0x10
c0010871:	ba e4 1a 02 c0       	mov    edx,0xc0021ae4
c0010876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087a:	89 10                	mov    DWORD PTR [eax],edx
c001087c:	90                   	nop
c001087d:	83 c4 0c             	add    esp,0xc
c0010880:	c3                   	ret    
c0010881:	90                   	nop

c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010882:	57                   	push   edi
c0010883:	56                   	push   esi
c0010884:	53                   	push   ebx
c0010885:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010889:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001088d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010891:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010897:	75 0c                	jne    c00108a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010899:	52                   	push   edx
c001089a:	52                   	push   edx
c001089b:	53                   	push   ebx
c001089c:	56                   	push   esi
c001089d:	e8 42 f0 00 00       	call   c001f8e4 <LinkedList<Device>::addElement(Device*)>
c00108a2:	83 c4 10             	add    esp,0x10
c00108a5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00108ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00108ae:	74 12                	je     c00108c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00108b0:	50                   	push   eax
c00108b1:	57                   	push   edi
c00108b2:	56                   	push   esi
c00108b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00108b6:	e8 c7 ff ff ff       	call   c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00108bd:	83 c4 10             	add    esp,0x10
c00108c0:	eb e9                	jmp    c00108ab <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00108c2:	5b                   	pop    ebx
c00108c3:	5e                   	pop    esi
c00108c4:	5f                   	pop    edi
c00108c5:	c3                   	ret    

c00108c6 <getDevicesOfType(DeviceType)>:
c00108c6:	53                   	push   ebx
c00108c7:	83 ec 14             	sub    esp,0x14
c00108ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108ce:	53                   	push   ebx
c00108cf:	e8 ec f0 00 00       	call   c001f9c0 <LinkedList<Device>::LinkedList()>
c00108d4:	83 c4 0c             	add    esp,0xc
c00108d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108db:	53                   	push   ebx
c00108dc:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c00108e2:	e8 9b ff ff ff       	call   c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108e7:	83 c4 18             	add    esp,0x18
c00108ea:	89 d8                	mov    eax,ebx
c00108ec:	5b                   	pop    ebx
c00108ed:	c2 04 00             	ret    0x4

c00108f0 <HardDiskController::HardDiskController(char const*)>:
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f7:	83 ec 08             	sub    esp,0x8
c00108fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fe:	50                   	push   eax
c00108ff:	e8 5a fe ff ff       	call   c001075e <Device::Device(char const*)>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	ba 10 1b 02 c0       	mov    edx,0xc0021b10
c001090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010910:	89 10                	mov    DWORD PTR [eax],edx
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0010920:	90                   	nop
c0010921:	83 c4 0c             	add    esp,0xc
c0010924:	c3                   	ret    
c0010925:	90                   	nop

c0010926 <HardDiskController::~HardDiskController()>:
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	ba 10 1b 02 c0       	mov    edx,0xc0021b10
c001092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010932:	89 10                	mov    DWORD PTR [eax],edx
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	50                   	push   eax
c001093c:	e8 d3 fa ff ff       	call   c0010414 <Device::~Device()>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	90                   	nop
c0010945:	83 c4 0c             	add    esp,0xc
c0010948:	c3                   	ret    
c0010949:	90                   	nop

c001094a <HardDiskController::~HardDiskController()>:
c001094a:	83 ec 0c             	sub    esp,0xc
c001094d:	83 ec 0c             	sub    esp,0xc
c0010950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010954:	e8 cd ff ff ff       	call   c0010926 <HardDiskController::~HardDiskController()>
c0010959:	83 c4 10             	add    esp,0x10
c001095c:	83 ec 08             	sub    esp,0x8
c001095f:	68 58 01 00 00       	push   0x158
c0010964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010968:	e8 c6 e6 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	83 c4 0c             	add    esp,0xc
c0010973:	c3                   	ret    

c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010974:	83 ec 0c             	sub    esp,0xc
c0010977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097b:	83 ec 08             	sub    esp,0x8
c001097e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010982:	50                   	push   eax
c0010983:	e8 d6 fd ff ff       	call   c001075e <Device::Device(char const*)>
c0010988:	83 c4 10             	add    esp,0x10
c001098b:	ba 3c 1b 02 c0       	mov    edx,0xc0021b3c
c0010990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010994:	89 10                	mov    DWORD PTR [eax],edx
c0010996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00109a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00109ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00109ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00109c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00109c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00109d6:	90                   	nop
c00109d7:	83 c4 0c             	add    esp,0xc
c00109da:	c3                   	ret    
c00109db:	90                   	nop

c00109dc <PhysicalDisk::startCache()>:
c00109dc:	56                   	push   esi
c00109dd:	53                   	push   ebx
c00109de:	83 ec 10             	sub    esp,0x10
c00109e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00109e5:	6a 30                	push   0x30
c00109e7:	e8 38 e6 ff ff       	call   c000f024 <operator new(unsigned long)>
c00109ec:	89 c6                	mov    esi,eax
c00109ee:	58                   	pop    eax
c00109ef:	5a                   	pop    edx
c00109f0:	53                   	push   ebx
c00109f1:	56                   	push   esi
c00109f2:	e8 3b 25 00 00       	call   c0012f32 <VCache::VCache(PhysicalDisk*)>
c00109f7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109fd:	83 c4 14             	add    esp,0x14
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	c3                   	ret    
c0010a03:	90                   	nop

c0010a04 <PhysicalDisk::~PhysicalDisk()>:
c0010a04:	83 ec 0c             	sub    esp,0xc
c0010a07:	ba 3c 1b 02 c0       	mov    edx,0xc0021b3c
c0010a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a10:	89 10                	mov    DWORD PTR [eax],edx
c0010a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a16:	83 ec 0c             	sub    esp,0xc
c0010a19:	50                   	push   eax
c0010a1a:	e8 f5 f9 ff ff       	call   c0010414 <Device::~Device()>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	90                   	nop
c0010a23:	83 c4 0c             	add    esp,0xc
c0010a26:	c3                   	ret    
c0010a27:	90                   	nop

c0010a28 <PhysicalDisk::~PhysicalDisk()>:
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	83 ec 0c             	sub    esp,0xc
c0010a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a32:	e8 cd ff ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	83 ec 08             	sub    esp,0x8
c0010a3d:	68 6c 01 00 00       	push   0x16c
c0010a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a46:	e8 e8 e5 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010a4b:	83 c4 10             	add    esp,0x10
c0010a4e:	83 c4 0c             	add    esp,0xc
c0010a51:	c3                   	ret    

c0010a52 <FPU::FPU(char const*)>:
c0010a52:	83 ec 0c             	sub    esp,0xc
c0010a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a59:	83 ec 08             	sub    esp,0x8
c0010a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a60:	50                   	push   eax
c0010a61:	e8 f8 fc ff ff       	call   c001075e <Device::Device(char const*)>
c0010a66:	83 c4 10             	add    esp,0x10
c0010a69:	ba 7c 1b 02 c0       	mov    edx,0xc0021b7c
c0010a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a72:	89 10                	mov    DWORD PTR [eax],edx
c0010a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a78:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a82:	90                   	nop
c0010a83:	83 c4 0c             	add    esp,0xc
c0010a86:	c3                   	ret    
c0010a87:	90                   	nop

c0010a88 <FPU::~FPU()>:
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	ba 7c 1b 02 c0       	mov    edx,0xc0021b7c
c0010a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a94:	89 10                	mov    DWORD PTR [eax],edx
c0010a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9a:	83 ec 0c             	sub    esp,0xc
c0010a9d:	50                   	push   eax
c0010a9e:	e8 71 f9 ff ff       	call   c0010414 <Device::~Device()>
c0010aa3:	83 c4 10             	add    esp,0x10
c0010aa6:	90                   	nop
c0010aa7:	83 c4 0c             	add    esp,0xc
c0010aaa:	c3                   	ret    
c0010aab:	90                   	nop

c0010aac <FPU::~FPU()>:
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	83 ec 0c             	sub    esp,0xc
c0010ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab6:	e8 cd ff ff ff       	call   c0010a88 <FPU::~FPU()>
c0010abb:	83 c4 10             	add    esp,0x10
c0010abe:	83 ec 08             	sub    esp,0x8
c0010ac1:	68 58 01 00 00       	push   0x158
c0010ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aca:	e8 64 e5 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010acf:	83 c4 10             	add    esp,0x10
c0010ad2:	83 c4 0c             	add    esp,0xc
c0010ad5:	c3                   	ret    

c0010ad6 <setupFPU()>:
c0010ad6:	53                   	push   ebx
c0010ad7:	83 ec 08             	sub    esp,0x8
c0010ada:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0010adf:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010ae6:	74 19                	je     c0010b01 <setupFPU()+0x2b>
c0010ae8:	83 ec 0c             	sub    esp,0xc
c0010aeb:	68 58 01 00 00       	push   0x158
c0010af0:	e8 2f e5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010af5:	89 c3                	mov    ebx,eax
c0010af7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010afa:	e8 13 d5 00 00       	call   c001e012 <AVX::AVX()>
c0010aff:	eb 5b                	jmp    c0010b5c <setupFPU()+0x86>
c0010b01:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010b07:	84 c0                	test   al,al
c0010b09:	79 19                	jns    c0010b24 <setupFPU()+0x4e>
c0010b0b:	83 ec 0c             	sub    esp,0xc
c0010b0e:	68 58 01 00 00       	push   0x158
c0010b13:	e8 0c e5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b18:	89 c3                	mov    ebx,eax
c0010b1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b1d:	e8 16 d6 00 00       	call   c001e138 <SSE::SSE()>
c0010b22:	eb 38                	jmp    c0010b5c <setupFPU()+0x86>
c0010b24:	a8 20                	test   al,0x20
c0010b26:	74 19                	je     c0010b41 <setupFPU()+0x6b>
c0010b28:	83 ec 0c             	sub    esp,0xc
c0010b2b:	68 58 01 00 00       	push   0x158
c0010b30:	e8 ef e4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b35:	89 c3                	mov    ebx,eax
c0010b37:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b3a:	e8 63 d5 00 00       	call   c001e0a2 <MMX::MMX()>
c0010b3f:	eb 1b                	jmp    c0010b5c <setupFPU()+0x86>
c0010b41:	a8 10                	test   al,0x10
c0010b43:	74 1c                	je     c0010b61 <setupFPU()+0x8b>
c0010b45:	83 ec 0c             	sub    esp,0xc
c0010b48:	68 58 01 00 00       	push   0x158
c0010b4d:	e8 d2 e4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b52:	89 c3                	mov    ebx,eax
c0010b54:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b57:	e8 6a d6 00 00       	call   c001e1c6 <x87::x87()>
c0010b5c:	83 c4 10             	add    esp,0x10
c0010b5f:	eb 2c                	jmp    c0010b8d <setupFPU()+0xb7>
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	31 db                	xor    ebx,ebx
c0010b66:	68 68 1b 02 c0       	push   0xc0021b68
c0010b6b:	e8 e9 e5 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010b70:	e8 67 3c 00 00       	call   c00147dc <thisCPU()>
c0010b75:	e8 62 3c 00 00       	call   c00147dc <thisCPU()>
c0010b7a:	e8 99 ee 00 00       	call   c001fa18 <CPU::readCR0()>
c0010b7f:	83 c8 04             	or     eax,0x4
c0010b82:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b85:	e8 a0 ee 00 00       	call   c001fa2a <CPU::writeCR0(unsigned long)>
c0010b8a:	83 c4 10             	add    esp,0x10
c0010b8d:	83 c4 08             	add    esp,0x8
c0010b90:	89 d8                	mov    eax,ebx
c0010b92:	5b                   	pop    ebx
c0010b93:	c3                   	ret    

c0010b94 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b9c:	c1 e0 04             	shl    eax,0x4
c0010b9f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010ba3:	8d 50 10             	lea    edx,[eax+0x10]
c0010ba6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010bac:	74 08                	je     c0010bb6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010bae:	83 c0 04             	add    eax,0x4
c0010bb1:	39 d0                	cmp    eax,edx
c0010bb3:	75 f1                	jne    c0010ba6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010bb5:	c3                   	ret    
c0010bb6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010bc0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010bca:	eb e2                	jmp    c0010bae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010bcc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010bcc:	57                   	push   edi
c0010bcd:	31 c0                	xor    eax,eax
c0010bcf:	56                   	push   esi
c0010bd0:	53                   	push   ebx
c0010bd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010bd5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bd9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010bdd:	89 da                	mov    edx,ebx
c0010bdf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010be3:	c1 e2 04             	shl    edx,0x4
c0010be6:	01 ca                	add    edx,ecx
c0010be8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010bf0:	74 16                	je     c0010c08 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010bf2:	40                   	inc    eax
c0010bf3:	83 f8 04             	cmp    eax,0x4
c0010bf6:	75 f0                	jne    c0010be8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010bf8:	c7 44 24 10 ac 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021bac
c0010c00:	5b                   	pop    ebx
c0010c01:	5e                   	pop    esi
c0010c02:	5f                   	pop    edi
c0010c03:	e9 40 4d 00 00       	jmp    c0015948 <Krnl::panic(char const*)>
c0010c08:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010c0b:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010c0e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010c14:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010c1a:	5b                   	pop    ebx
c0010c1b:	5e                   	pop    esi
c0010c1c:	5f                   	pop    edi
c0010c1d:	c3                   	ret    

c0010c1e <doubleFault(regs*, void*)>:
c0010c1e:	55                   	push   ebp
c0010c1f:	89 e5                	mov    ebp,esp
c0010c21:	83 ec 08             	sub    esp,0x8
c0010c24:	83 ec 0c             	sub    esp,0xc
c0010c27:	68 e7 1b 02 c0       	push   0xc0021be7
c0010c2c:	e8 17 4d 00 00       	call   c0015948 <Krnl::panic(char const*)>
c0010c31:	83 c4 10             	add    esp,0x10
c0010c34:	90                   	nop
c0010c35:	c9                   	leave  
c0010c36:	c3                   	ret    
c0010c37:	90                   	nop

c0010c38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010c38:	56                   	push   esi
c0010c39:	53                   	push   ebx
c0010c3a:	50                   	push   eax
c0010c3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c43:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c48:	75 35                	jne    c0010c7f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010c4a:	8d 43 20             	lea    eax,[ebx+0x20]
c0010c4d:	31 d2                	xor    edx,edx
c0010c4f:	89 c1                	mov    ecx,eax
c0010c51:	c1 e1 04             	shl    ecx,0x4
c0010c54:	01 f1                	add    ecx,esi
c0010c56:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c5e:	74 3e                	je     c0010c9e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010c60:	42                   	inc    edx
c0010c61:	83 fa 04             	cmp    edx,0x4
c0010c64:	75 f0                	jne    c0010c56 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c66:	83 ec 0c             	sub    esp,0xc
c0010c69:	68 2c 1c 02 c0       	push   0xc0021c2c
c0010c6e:	e8 d5 4c 00 00       	call   c0015948 <Krnl::panic(char const*)>
c0010c73:	83 c4 10             	add    esp,0x10
c0010c76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c7b:	5a                   	pop    edx
c0010c7c:	5b                   	pop    ebx
c0010c7d:	5e                   	pop    esi
c0010c7e:	c3                   	ret    
c0010c7f:	83 ec 0c             	sub    esp,0xc
c0010c82:	56                   	push   esi
c0010c83:	e8 c8 fb ff ff       	call   c0010850 <Device::getName()>
c0010c88:	83 c4 10             	add    esp,0x10
c0010c8b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c8e:	75 ba                	jne    c0010c4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c90:	83 fb 0f             	cmp    ebx,0xf
c0010c93:	7f 29                	jg     c0010cbe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010c95:	0f b6 9b e0 3c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc320]
c0010c9c:	eb ac                	jmp    c0010c4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c9e:	8d 04 82             	lea    eax,[edx+eax*4]
c0010ca1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ca5:	8d 04 86             	lea    eax,[esi+eax*4]
c0010ca8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010cae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010cb2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010cb8:	89 d8                	mov    eax,ebx
c0010cba:	5a                   	pop    edx
c0010cbb:	5b                   	pop    ebx
c0010cbc:	5e                   	pop    esi
c0010cbd:	c3                   	ret    
c0010cbe:	83 ec 0c             	sub    esp,0xc
c0010cc1:	68 f4 1b 02 c0       	push   0xc0021bf4
c0010cc6:	e8 7d 4c 00 00       	call   c0015948 <Krnl::panic(char const*)>
c0010ccb:	83 c4 10             	add    esp,0x10
c0010cce:	e9 77 ff ff ff       	jmp    c0010c4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010cd3:	90                   	nop

c0010cd4 <InterruptController::clearAllHandlers(int, bool)>:
c0010cd4:	56                   	push   esi
c0010cd5:	53                   	push   ebx
c0010cd6:	52                   	push   edx
c0010cd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cdb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010cdf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010ce4:	75 61                	jne    c0010d47 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010ce6:	8d 46 20             	lea    eax,[esi+0x20]
c0010ce9:	c1 e6 04             	shl    esi,0x4
c0010cec:	c1 e0 04             	shl    eax,0x4
c0010cef:	01 de                	add    esi,ebx
c0010cf1:	01 d8                	add    eax,ebx
c0010cf3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010cfd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010d07:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010d11:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010d1b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010d25:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010d2f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010d39:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010d43:	58                   	pop    eax
c0010d44:	5b                   	pop    ebx
c0010d45:	5e                   	pop    esi
c0010d46:	c3                   	ret    
c0010d47:	83 ec 0c             	sub    esp,0xc
c0010d4a:	53                   	push   ebx
c0010d4b:	e8 00 fb ff ff       	call   c0010850 <Device::getName()>
c0010d50:	83 c4 10             	add    esp,0x10
c0010d53:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d56:	75 8e                	jne    c0010ce6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d58:	83 fe 0f             	cmp    esi,0xf
c0010d5b:	7f 09                	jg     c0010d66 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010d5d:	0f b6 b6 e0 3c 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc320]
c0010d64:	eb 80                	jmp    c0010ce6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d66:	83 ec 0c             	sub    esp,0xc
c0010d69:	68 68 1c 02 c0       	push   0xc0021c68
c0010d6e:	e8 d5 4b 00 00       	call   c0015948 <Krnl::panic(char const*)>
c0010d73:	83 c4 10             	add    esp,0x10
c0010d76:	e9 6b ff ff ff       	jmp    c0010ce6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d7b:	90                   	nop

c0010d7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d7c:	56                   	push   esi
c0010d7d:	53                   	push   ebx
c0010d7e:	52                   	push   edx
c0010d7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d87:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d8c:	75 3a                	jne    c0010dc8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d92:	8d 50 20             	lea    edx,[eax+0x20]
c0010d95:	c1 e2 04             	shl    edx,0x4
c0010d98:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d9b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d9f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010da5:	74 0b                	je     c0010db2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010da7:	83 c0 04             	add    eax,0x4
c0010daa:	39 d0                	cmp    eax,edx
c0010dac:	75 f1                	jne    c0010d9f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010dae:	58                   	pop    eax
c0010daf:	5b                   	pop    ebx
c0010db0:	5e                   	pop    esi
c0010db1:	c3                   	ret    
c0010db2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010dbc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010dc6:	eb df                	jmp    c0010da7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010dc8:	83 ec 0c             	sub    esp,0xc
c0010dcb:	56                   	push   esi
c0010dcc:	e8 7f fa ff ff       	call   c0010850 <Device::getName()>
c0010dd1:	83 c4 10             	add    esp,0x10
c0010dd4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010dd7:	75 b5                	jne    c0010d8e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010dd9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010dde:	7f 11                	jg     c0010df1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010de0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010de4:	0f b6 80 e0 3c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc320]
c0010deb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010def:	eb 9d                	jmp    c0010d8e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010df1:	83 ec 0c             	sub    esp,0xc
c0010df4:	68 68 1c 02 c0       	push   0xc0021c68
c0010df9:	e8 4a 4b 00 00       	call   c0015948 <Krnl::panic(char const*)>
c0010dfe:	83 c4 10             	add    esp,0x10
c0010e01:	eb 8b                	jmp    c0010d8e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010e03 <nmiHandler(regs*, void*)>:
c0010e03:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0010e08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e0c:	e9 1f a9 ff ff       	jmp    c000b730 <Computer::handleNMI()>

c0010e11 <int_handler>:
c0010e11:	55                   	push   ebp
c0010e12:	57                   	push   edi
c0010e13:	56                   	push   esi
c0010e14:	53                   	push   ebx
c0010e15:	83 ec 0c             	sub    esp,0xc
c0010e18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010e1c:	80 3d d4 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fd4,0x0
c0010e23:	74 0b                	je     c0010e30 <int_handler+0x1f>
c0010e25:	fa                   	cli    
c0010e26:	f4                   	hlt    
c0010e27:	80 3d d4 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fd4,0x0
c0010e2e:	75 f5                	jne    c0010e25 <int_handler+0x14>
c0010e30:	e8 a7 39 00 00       	call   c00147dc <thisCPU()>
c0010e35:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010e38:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010e3e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e41:	83 f8 17             	cmp    eax,0x17
c0010e44:	77 13                	ja     c0010e59 <int_handler+0x48>
c0010e46:	83 ec 08             	sub    esp,0x8
c0010e49:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e4b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e4e:	0f b6 c0             	movzx  eax,al
c0010e51:	50                   	push   eax
c0010e52:	57                   	push   edi
c0010e53:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	83 c3 15             	add    ebx,0x15
c0010e5c:	c1 e3 04             	shl    ebx,0x4
c0010e5f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e63:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e6a:	31 db                	xor    ebx,ebx
c0010e6c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e70:	85 c0                	test   eax,eax
c0010e72:	74 13                	je     c0010e87 <int_handler+0x76>
c0010e74:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e77:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e7b:	74 1c                	je     c0010e99 <int_handler+0x88>
c0010e7d:	83 ec 08             	sub    esp,0x8
c0010e80:	52                   	push   edx
c0010e81:	56                   	push   esi
c0010e82:	ff d0                	call   eax
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	43                   	inc    ebx
c0010e88:	83 fb 04             	cmp    ebx,0x4
c0010e8b:	75 df                	jne    c0010e6c <int_handler+0x5b>
c0010e8d:	83 c4 0c             	add    esp,0xc
c0010e90:	31 c0                	xor    eax,eax
c0010e92:	5b                   	pop    ebx
c0010e93:	31 d2                	xor    edx,edx
c0010e95:	5e                   	pop    esi
c0010e96:	5f                   	pop    edi
c0010e97:	5d                   	pop    ebp
c0010e98:	c3                   	ret    
c0010e99:	83 ec 08             	sub    esp,0x8
c0010e9c:	52                   	push   edx
c0010e9d:	56                   	push   esi
c0010e9e:	ff d0                	call   eax
c0010ea0:	83 c4 10             	add    esp,0x10
c0010ea3:	83 c4 0c             	add    esp,0xc
c0010ea6:	5b                   	pop    ebx
c0010ea7:	5e                   	pop    esi
c0010ea8:	5f                   	pop    edi
c0010ea9:	5d                   	pop    ebp
c0010eaa:	c3                   	ret    
c0010eab:	90                   	nop

c0010eac <InterruptController::InterruptController(char const*)>:
c0010eac:	83 ec 1c             	sub    esp,0x1c
c0010eaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb3:	83 ec 08             	sub    esp,0x8
c0010eb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010eba:	50                   	push   eax
c0010ebb:	e8 9e f8 ff ff       	call   c001075e <Device::Device(char const*)>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	ba a4 1e 02 c0       	mov    edx,0xc0021ea4
c0010ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ecc:	89 10                	mov    DWORD PTR [eax],edx
c0010ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010edc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ee4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010eec:	7f 5e                	jg     c0010f4c <InterruptController::InterruptController(char const*)+0xa0>
c0010eee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ef6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010efb:	7f 49                	jg     c0010f46 <InterruptController::InterruptController(char const*)+0x9a>
c0010efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f05:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f10:	01 ca                	add    edx,ecx
c0010f12:	83 c2 54             	add    edx,0x54
c0010f15:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f25:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f30:	01 ca                	add    edx,ecx
c0010f32:	81 c2 54 04 00 00    	add    edx,0x454
c0010f38:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f40:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f44:	eb b0                	jmp    c0010ef6 <InterruptController::InterruptController(char const*)+0x4a>
c0010f46:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010f4a:	eb 98                	jmp    c0010ee4 <InterruptController::InterruptController(char const*)+0x38>
c0010f4c:	90                   	nop
c0010f4d:	83 c4 1c             	add    esp,0x1c
c0010f50:	c3                   	ret    
c0010f51:	90                   	nop

c0010f52 <InterruptController::~InterruptController()>:
c0010f52:	83 ec 0c             	sub    esp,0xc
c0010f55:	ba a4 1e 02 c0       	mov    edx,0xc0021ea4
c0010f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5e:	89 10                	mov    DWORD PTR [eax],edx
c0010f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f64:	83 ec 0c             	sub    esp,0xc
c0010f67:	50                   	push   eax
c0010f68:	e8 a7 f4 ff ff       	call   c0010414 <Device::~Device()>
c0010f6d:	83 c4 10             	add    esp,0x10
c0010f70:	90                   	nop
c0010f71:	83 c4 0c             	add    esp,0xc
c0010f74:	c3                   	ret    
c0010f75:	90                   	nop

c0010f76 <InterruptController::~InterruptController()>:
c0010f76:	83 ec 0c             	sub    esp,0xc
c0010f79:	83 ec 0c             	sub    esp,0xc
c0010f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f80:	e8 cd ff ff ff       	call   c0010f52 <InterruptController::~InterruptController()>
c0010f85:	83 c4 10             	add    esp,0x10
c0010f88:	83 ec 08             	sub    esp,0x8
c0010f8b:	68 58 21 00 00       	push   0x2158
c0010f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f94:	e8 9a e0 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010f99:	83 c4 10             	add    esp,0x10
c0010f9c:	83 c4 0c             	add    esp,0xc
c0010f9f:	c3                   	ret    

c0010fa0 <displayDebugInfo(regs*)>:
c0010fa0:	55                   	push   ebp
c0010fa1:	57                   	push   edi
c0010fa2:	56                   	push   esi
c0010fa3:	53                   	push   ebx
c0010fa4:	83 ec 24             	sub    esp,0x24
c0010fa7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010fab:	0f 20 c2             	mov    edx,cr0
c0010fae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010fb2:	0f 20 d7             	mov    edi,cr2
c0010fb5:	0f 20 de             	mov    esi,cr3
c0010fb8:	0f 20 e5             	mov    ebp,cr4
c0010fbb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010fbe:	68 a2 1c 02 c0       	push   0xc0021ca2
c0010fc3:	e8 91 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fc8:	58                   	pop    eax
c0010fc9:	5a                   	pop    edx
c0010fca:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010fcd:	68 ad 1c 02 c0       	push   0xc0021cad
c0010fd2:	e8 82 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fd7:	59                   	pop    ecx
c0010fd8:	58                   	pop    eax
c0010fd9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010fdc:	68 b8 1c 02 c0       	push   0xc0021cb8
c0010fe1:	e8 73 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fe6:	58                   	pop    eax
c0010fe7:	5a                   	pop    edx
c0010fe8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010feb:	68 c3 1c 02 c0       	push   0xc0021cc3
c0010ff0:	e8 64 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010ff5:	59                   	pop    ecx
c0010ff6:	58                   	pop    eax
c0010ff7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ffa:	68 ce 1c 02 c0       	push   0xc0021cce
c0010fff:	e8 55 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011004:	58                   	pop    eax
c0011005:	5a                   	pop    edx
c0011006:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0011009:	68 d9 1c 02 c0       	push   0xc0021cd9
c001100e:	e8 46 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011013:	59                   	pop    ecx
c0011014:	58                   	pop    eax
c0011015:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011018:	68 e4 1c 02 c0       	push   0xc0021ce4
c001101d:	e8 37 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011022:	58                   	pop    eax
c0011023:	5a                   	pop    edx
c0011024:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011027:	68 ef 1c 02 c0       	push   0xc0021cef
c001102c:	e8 28 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011031:	59                   	pop    ecx
c0011032:	58                   	pop    eax
c0011033:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011036:	68 fa 1c 02 c0       	push   0xc0021cfa
c001103b:	e8 19 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011040:	58                   	pop    eax
c0011041:	5a                   	pop    edx
c0011042:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011045:	68 09 1d 02 c0       	push   0xc0021d09
c001104a:	e8 0a e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001104f:	59                   	pop    ecx
c0011050:	58                   	pop    eax
c0011051:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011054:	68 14 1d 02 c0       	push   0xc0021d14
c0011059:	e8 fb e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001105e:	58                   	pop    eax
c001105f:	5a                   	pop    edx
c0011060:	57                   	push   edi
c0011061:	68 1f 1d 02 c0       	push   0xc0021d1f
c0011066:	e8 ee e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001106b:	59                   	pop    ecx
c001106c:	58                   	pop    eax
c001106d:	56                   	push   esi
c001106e:	68 2a 1d 02 c0       	push   0xc0021d2a
c0011073:	e8 e1 e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011078:	58                   	pop    eax
c0011079:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001107e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011084:	e8 c4 c2 ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c0011089:	58                   	pop    eax
c001108a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001108d:	5a                   	pop    edx
c001108e:	c1 e0 05             	shl    eax,0x5
c0011091:	05 40 3a 02 c0       	add    eax,0xc0023a40
c0011096:	50                   	push   eax
c0011097:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001109c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110a2:	e8 c7 c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00110a7:	59                   	pop    ecx
c00110a8:	58                   	pop    eax
c00110a9:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00110ae:	68 35 1d 02 c0       	push   0xc0021d35
c00110b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110b9:	e8 b0 c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00110be:	58                   	pop    eax
c00110bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110c4:	5a                   	pop    edx
c00110c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110c8:	83 c0 0c             	add    eax,0xc
c00110cb:	50                   	push   eax
c00110cc:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00110d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d7:	e8 92 c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00110dc:	59                   	pop    ecx
c00110dd:	58                   	pop    eax
c00110de:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00110e3:	68 3e 1d 02 c0       	push   0xc0021d3e
c00110e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ee:	e8 7b c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00110f3:	58                   	pop    eax
c00110f4:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00110f9:	5a                   	pop    edx
c00110fa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011103:	e8 8c c6 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011108:	59                   	pop    ecx
c0011109:	58                   	pop    eax
c001110a:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001110f:	68 46 1d 02 c0       	push   0xc0021d46
c0011114:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001111a:	e8 4f c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001111f:	58                   	pop    eax
c0011120:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011125:	5a                   	pop    edx
c0011126:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011129:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001112f:	e8 60 c6 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011134:	59                   	pop    ecx
c0011135:	58                   	pop    eax
c0011136:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001113b:	68 4e 1d 02 c0       	push   0xc0021d4e
c0011140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011146:	e8 23 c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001114b:	58                   	pop    eax
c001114c:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011151:	5a                   	pop    edx
c0011152:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011155:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115b:	e8 34 c6 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011160:	59                   	pop    ecx
c0011161:	58                   	pop    eax
c0011162:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011167:	68 56 1d 02 c0       	push   0xc0021d56
c001116c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011172:	e8 f7 c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011177:	58                   	pop    eax
c0011178:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001117d:	5a                   	pop    edx
c001117e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011181:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011187:	e8 08 c6 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c001118c:	59                   	pop    ecx
c001118d:	58                   	pop    eax
c001118e:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011193:	68 5e 1d 02 c0       	push   0xc0021d5e
c0011198:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001119e:	e8 cb c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00111a3:	58                   	pop    eax
c00111a4:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00111a9:	5a                   	pop    edx
c00111aa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00111ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b3:	e8 dc c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00111b8:	59                   	pop    ecx
c00111b9:	58                   	pop    eax
c00111ba:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00111bf:	68 66 1d 02 c0       	push   0xc0021d66
c00111c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111ca:	e8 9f c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00111cf:	58                   	pop    eax
c00111d0:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00111d5:	5a                   	pop    edx
c00111d6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00111d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111df:	e8 b0 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00111e4:	59                   	pop    ecx
c00111e5:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00111ea:	5b                   	pop    ebx
c00111eb:	68 6e 1d 02 c0       	push   0xc0021d6e
c00111f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111f6:	e8 73 c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00111fb:	58                   	pop    eax
c00111fc:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011201:	5a                   	pop    edx
c0011202:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011206:	52                   	push   edx
c0011207:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001120d:	e8 82 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011212:	59                   	pop    ecx
c0011213:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011218:	5b                   	pop    ebx
c0011219:	68 77 1d 02 c0       	push   0xc0021d77
c001121e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011224:	e8 45 c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011229:	58                   	pop    eax
c001122a:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001122f:	5a                   	pop    edx
c0011230:	57                   	push   edi
c0011231:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011237:	e8 58 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c001123c:	59                   	pop    ecx
c001123d:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011242:	5b                   	pop    ebx
c0011243:	68 7f 1d 02 c0       	push   0xc0021d7f
c0011248:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001124e:	e8 1b c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011253:	5f                   	pop    edi
c0011254:	58                   	pop    eax
c0011255:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001125a:	56                   	push   esi
c001125b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011261:	e8 2e c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011266:	58                   	pop    eax
c0011267:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001126c:	5a                   	pop    edx
c001126d:	68 87 1d 02 c0       	push   0xc0021d87
c0011272:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011278:	e8 f1 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001127d:	59                   	pop    ecx
c001127e:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011283:	5b                   	pop    ebx
c0011284:	55                   	push   ebp
c0011285:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001128b:	e8 04 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011290:	5e                   	pop    esi
c0011291:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011296:	5f                   	pop    edi
c0011297:	68 8f 1d 02 c0       	push   0xc0021d8f
c001129c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112a2:	e8 c7 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00112a7:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00112ac:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112b2:	e8 7c e7 00 00       	call   c001fa33 <CPU::readDR0()>
c00112b7:	5d                   	pop    ebp
c00112b8:	5a                   	pop    edx
c00112b9:	50                   	push   eax
c00112ba:	53                   	push   ebx
c00112bb:	e8 d4 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00112c0:	59                   	pop    ecx
c00112c1:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00112c6:	5b                   	pop    ebx
c00112c7:	68 98 1d 02 c0       	push   0xc0021d98
c00112cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112d2:	e8 97 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00112d7:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00112dc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112e2:	e8 5e e7 00 00       	call   c001fa45 <CPU::readDR1()>
c00112e7:	5e                   	pop    esi
c00112e8:	5f                   	pop    edi
c00112e9:	50                   	push   eax
c00112ea:	53                   	push   ebx
c00112eb:	e8 a4 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00112f0:	5d                   	pop    ebp
c00112f1:	58                   	pop    eax
c00112f2:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00112f7:	68 a0 1d 02 c0       	push   0xc0021da0
c00112fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011302:	e8 67 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011307:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001130c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011312:	e8 40 e7 00 00       	call   c001fa57 <CPU::readDR2()>
c0011317:	5a                   	pop    edx
c0011318:	59                   	pop    ecx
c0011319:	50                   	push   eax
c001131a:	53                   	push   ebx
c001131b:	e8 74 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011320:	5b                   	pop    ebx
c0011321:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011326:	5e                   	pop    esi
c0011327:	68 a8 1d 02 c0       	push   0xc0021da8
c001132c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011332:	e8 37 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011337:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001133c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011342:	e8 22 e7 00 00       	call   c001fa69 <CPU::readDR3()>
c0011347:	5f                   	pop    edi
c0011348:	5d                   	pop    ebp
c0011349:	50                   	push   eax
c001134a:	53                   	push   ebx
c001134b:	e8 44 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011350:	58                   	pop    eax
c0011351:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011356:	5a                   	pop    edx
c0011357:	68 b0 1d 02 c0       	push   0xc0021db0
c001135c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011362:	e8 07 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011367:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001136c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011372:	e8 04 e7 00 00       	call   c001fa7b <CPU::readDR6()>
c0011377:	59                   	pop    ecx
c0011378:	5e                   	pop    esi
c0011379:	50                   	push   eax
c001137a:	53                   	push   ebx
c001137b:	e8 14 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011380:	5f                   	pop    edi
c0011381:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011386:	5d                   	pop    ebp
c0011387:	68 b8 1d 02 c0       	push   0xc0021db8
c001138c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011392:	e8 d7 c3 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011397:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001139c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113a2:	e8 e6 e6 00 00       	call   c001fa8d <CPU::readDR7()>
c00113a7:	5a                   	pop    edx
c00113a8:	59                   	pop    ecx
c00113a9:	50                   	push   eax
c00113aa:	53                   	push   ebx
c00113ab:	e8 e4 c3 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00113b0:	fa                   	cli    
c00113b1:	f4                   	hlt    
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	eb fe                	jmp    c00113b5 <displayDebugInfo(regs*)+0x415>

c00113b7 <x87EmulHandler(regs*, void*)>:
c00113b7:	53                   	push   ebx
c00113b8:	83 ec 08             	sub    esp,0x8
c00113bb:	a1 14 47 02 c0       	mov    eax,ds:0xc0024714
c00113c0:	85 c0                	test   eax,eax
c00113c2:	74 15                	je     c00113d9 <x87EmulHandler(regs*, void*)+0x22>
c00113c4:	83 ec 0c             	sub    esp,0xc
c00113c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113cb:	ff d0                	call   eax
c00113cd:	83 c4 10             	add    esp,0x10
c00113d0:	84 c0                	test   al,al
c00113d2:	74 2f                	je     c0011403 <x87EmulHandler(regs*, void*)+0x4c>
c00113d4:	83 c4 08             	add    esp,0x8
c00113d7:	5b                   	pop    ebx
c00113d8:	c3                   	ret    
c00113d9:	83 ec 08             	sub    esp,0x8
c00113dc:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c00113e2:	6a 01                	push   0x1
c00113e4:	68 c0 1d 02 c0       	push   0xc0021dc0
c00113e9:	e8 62 6f 00 00       	call   c0018350 <Thr::loadDLL(char const*, bool)>
c00113ee:	5a                   	pop    edx
c00113ef:	59                   	pop    ecx
c00113f0:	53                   	push   ebx
c00113f1:	50                   	push   eax
c00113f2:	e8 1f 71 00 00       	call   c0018516 <Thr::executeDLL(unsigned long, void*)>
c00113f7:	a1 14 47 02 c0       	mov    eax,ds:0xc0024714
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	85 c0                	test   eax,eax
c0011401:	75 c1                	jne    c00113c4 <x87EmulHandler(regs*, void*)+0xd>
c0011403:	83 ec 0c             	sub    esp,0xc
c0011406:	68 dd 1d 02 c0       	push   0xc0021ddd
c001140b:	e8 49 dd ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011410:	58                   	pop    eax
c0011411:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011415:	e8 86 fb ff ff       	call   c0010fa0 <displayDebugInfo(regs*)>

c001141a <gpFault(regs*, void*)>:
c001141a:	53                   	push   ebx
c001141b:	83 ec 14             	sub    esp,0x14
c001141e:	c7 05 10 47 02 c0 c7 97 01 c0 	mov    DWORD PTR ds:0xc0024710,0xc00197c7
c0011428:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001142c:	53                   	push   ebx
c001142d:	e8 95 83 00 00       	call   c00197c7 <Vm::faultHandler(regs*)>
c0011432:	83 c4 10             	add    esp,0x10
c0011435:	84 c0                	test   al,al
c0011437:	74 05                	je     c001143e <gpFault(regs*, void*)+0x24>
c0011439:	83 c4 08             	add    esp,0x8
c001143c:	5b                   	pop    ebx
c001143d:	c3                   	ret    
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	68 dd 1d 02 c0       	push   0xc0021ddd
c0011446:	e8 0e dd ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001144b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001144e:	e8 4d fb ff ff       	call   c0010fa0 <displayDebugInfo(regs*)>

c0011453 <pgFault(regs*, void*)>:
c0011453:	83 ec 18             	sub    esp,0x18
c0011456:	68 f8 1d 02 c0       	push   0xc0021df8
c001145b:	e8 f9 dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011460:	58                   	pop    eax
c0011461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011465:	e8 36 fb ff ff       	call   c0010fa0 <displayDebugInfo(regs*)>

c001146a <otherISRHandler(regs*, void*)>:
c001146a:	53                   	push   ebx
c001146b:	83 ec 0c             	sub    esp,0xc
c001146e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011472:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011475:	50                   	push   eax
c0011476:	50                   	push   eax
c0011477:	68 05 1e 02 c0       	push   0xc0021e05
c001147c:	e8 d8 dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011481:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011484:	e8 17 fb ff ff       	call   c0010fa0 <displayDebugInfo(regs*)>

c0011489 <opcodeFault(regs*, void*)>:
c0011489:	55                   	push   ebp
c001148a:	89 e5                	mov    ebp,esp
c001148c:	56                   	push   esi
c001148d:	53                   	push   ebx
c001148e:	83 ec 40             	sub    esp,0x40
c0011491:	e8 46 33 00 00       	call   c00147dc <thisCPU()>
c0011496:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001149c:	84 c0                	test   al,al
c001149e:	74 24                	je     c00114c4 <opcodeFault(regs*, void*)+0x3b>
c00114a0:	83 ec 0c             	sub    esp,0xc
c00114a3:	68 24 1e 02 c0       	push   0xc0021e24
c00114a8:	e8 ac dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114b6:	8d 50 19             	lea    edx,[eax+0x19]
c00114b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114bf:	e9 77 05 00 00       	jmp    c0011a3b <opcodeFault(regs*, void*)+0x5b2>
c00114c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114ca:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00114cd:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00114d1:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00114d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114db:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00114de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114e1:	8a 00                	mov    al,BYTE PTR [eax]
c00114e3:	3c f0                	cmp    al,0xf0
c00114e5:	75 17                	jne    c00114fe <opcodeFault(regs*, void*)+0x75>
c00114e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114f0:	8d 50 01             	lea    edx,[eax+0x1]
c00114f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114f9:	e9 da 00 00 00       	jmp    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c00114fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011501:	8a 00                	mov    al,BYTE PTR [eax]
c0011503:	3c f2                	cmp    al,0xf2
c0011505:	74 09                	je     c0011510 <opcodeFault(regs*, void*)+0x87>
c0011507:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001150a:	8a 00                	mov    al,BYTE PTR [eax]
c001150c:	3c f3                	cmp    al,0xf3
c001150e:	75 1b                	jne    c001152b <opcodeFault(regs*, void*)+0xa2>
c0011510:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011514:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001151d:	8d 50 01             	lea    edx,[eax+0x1]
c0011520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011523:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011526:	e9 ad 00 00 00       	jmp    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c001152b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001152e:	8a 00                	mov    al,BYTE PTR [eax]
c0011530:	3c 66                	cmp    al,0x66
c0011532:	75 1f                	jne    c0011553 <opcodeFault(regs*, void*)+0xca>
c0011534:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011538:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001153c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001153f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011542:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011545:	8d 50 01             	lea    edx,[eax+0x1]
c0011548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001154e:	e9 85 00 00 00       	jmp    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c0011553:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011556:	8a 00                	mov    al,BYTE PTR [eax]
c0011558:	3c 67                	cmp    al,0x67
c001155a:	75 18                	jne    c0011574 <opcodeFault(regs*, void*)+0xeb>
c001155c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011560:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011566:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011569:	8d 50 01             	lea    edx,[eax+0x1]
c001156c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011572:	eb 64                	jmp    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c0011574:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011577:	8a 00                	mov    al,BYTE PTR [eax]
c0011579:	3c 2e                	cmp    al,0x2e
c001157b:	74 09                	je     c0011586 <opcodeFault(regs*, void*)+0xfd>
c001157d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011580:	8a 00                	mov    al,BYTE PTR [eax]
c0011582:	3c 3e                	cmp    al,0x3e
c0011584:	75 18                	jne    c001159e <opcodeFault(regs*, void*)+0x115>
c0011586:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001158a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011593:	8d 50 01             	lea    edx,[eax+0x1]
c0011596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011599:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001159c:	eb 3a                	jmp    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c001159e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115a1:	8a 00                	mov    al,BYTE PTR [eax]
c00115a3:	3c 36                	cmp    al,0x36
c00115a5:	74 1b                	je     c00115c2 <opcodeFault(regs*, void*)+0x139>
c00115a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115aa:	8a 00                	mov    al,BYTE PTR [eax]
c00115ac:	3c 26                	cmp    al,0x26
c00115ae:	74 12                	je     c00115c2 <opcodeFault(regs*, void*)+0x139>
c00115b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115b3:	8a 00                	mov    al,BYTE PTR [eax]
c00115b5:	3c 64                	cmp    al,0x64
c00115b7:	74 09                	je     c00115c2 <opcodeFault(regs*, void*)+0x139>
c00115b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115bc:	8a 00                	mov    al,BYTE PTR [eax]
c00115be:	3c 65                	cmp    al,0x65
c00115c0:	75 16                	jne    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c00115c2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115c6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115cf:	8d 50 01             	lea    edx,[eax+0x1]
c00115d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115db:	8a 00                	mov    al,BYTE PTR [eax]
c00115dd:	3c 0f                	cmp    al,0xf
c00115df:	0f 85 ad 00 00 00    	jne    c0011692 <opcodeFault(regs*, void*)+0x209>
c00115e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115e8:	40                   	inc    eax
c00115e9:	8a 00                	mov    al,BYTE PTR [eax]
c00115eb:	3c c2                	cmp    al,0xc2
c00115ed:	74 0e                	je     c00115fd <opcodeFault(regs*, void*)+0x174>
c00115ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115f2:	40                   	inc    eax
c00115f3:	8a 00                	mov    al,BYTE PTR [eax]
c00115f5:	3c c3                	cmp    al,0xc3
c00115f7:	0f 85 95 00 00 00    	jne    c0011692 <opcodeFault(regs*, void*)+0x209>
c00115fd:	83 ec 0c             	sub    esp,0xc
c0011600:	68 47 1e 02 c0       	push   0xc0021e47
c0011605:	e8 4f db ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001160a:	83 c4 10             	add    esp,0x10
c001160d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011610:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011613:	8d 50 01             	lea    edx,[eax+0x1]
c0011616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011619:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001161c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001161f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011622:	8a 00                	mov    al,BYTE PTR [eax]
c0011624:	8d 50 fe             	lea    edx,[eax-0x2]
c0011627:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001162a:	88 10                	mov    BYTE PTR [eax],dl
c001162c:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001162f:	50                   	push   eax
c0011630:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0011633:	50                   	push   eax
c0011634:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0011637:	50                   	push   eax
c0011638:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001163b:	e8 08 41 00 00       	call   c0015748 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011646:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011649:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001164c:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001164f:	01 d0                	add    eax,edx
c0011651:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0011654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011657:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001165a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001165d:	48                   	dec    eax
c001165e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011664:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0011667:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001166a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166d:	83 ec 04             	sub    esp,0x4
c0011670:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011673:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011676:	50                   	push   eax
c0011677:	e8 d4 ea fe ff       	call   c0000150 <voodooXADD>
c001167c:	83 c4 10             	add    esp,0x10
c001167f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0011682:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0011685:	01 c2                	add    edx,eax
c0011687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001168d:	e9 a9 03 00 00       	jmp    c0011a3b <opcodeFault(regs*, void*)+0x5b2>
c0011692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011695:	8a 00                	mov    al,BYTE PTR [eax]
c0011697:	3c 0f                	cmp    al,0xf
c0011699:	0f 85 8b 01 00 00    	jne    c001182a <opcodeFault(regs*, void*)+0x3a1>
c001169f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116a2:	40                   	inc    eax
c00116a3:	8a 00                	mov    al,BYTE PTR [eax]
c00116a5:	3c c7                	cmp    al,0xc7
c00116a7:	0f 86 7d 01 00 00    	jbe    c001182a <opcodeFault(regs*, void*)+0x3a1>
c00116ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116b0:	40                   	inc    eax
c00116b1:	8a 00                	mov    al,BYTE PTR [eax]
c00116b3:	3c cf                	cmp    al,0xcf
c00116b5:	0f 87 6f 01 00 00    	ja     c001182a <opcodeFault(regs*, void*)+0x3a1>
c00116bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116be:	40                   	inc    eax
c00116bf:	8a 00                	mov    al,BYTE PTR [eax]
c00116c1:	83 c0 38             	add    eax,0x38
c00116c4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00116c7:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00116cb:	75 0b                	jne    c00116d8 <opcodeFault(regs*, void*)+0x24f>
c00116cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00116d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116d6:	eb 75                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c00116d8:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00116dc:	75 0b                	jne    c00116e9 <opcodeFault(regs*, void*)+0x260>
c00116de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00116e4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116e7:	eb 64                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c00116e9:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00116ed:	75 0b                	jne    c00116fa <opcodeFault(regs*, void*)+0x271>
c00116ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116f2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00116f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116f8:	eb 53                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c00116fa:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00116fe:	75 0b                	jne    c001170b <opcodeFault(regs*, void*)+0x282>
c0011700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011703:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011706:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011709:	eb 42                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c001170b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001170f:	75 0b                	jne    c001171c <opcodeFault(regs*, void*)+0x293>
c0011711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011714:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0011717:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001171a:	eb 31                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c001171c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0011720:	75 0b                	jne    c001172d <opcodeFault(regs*, void*)+0x2a4>
c0011722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011725:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011728:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001172b:	eb 20                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c001172d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0011731:	75 0b                	jne    c001173e <opcodeFault(regs*, void*)+0x2b5>
c0011733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011739:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001173c:	eb 0f                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c001173e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0011742:	75 09                	jne    c001174d <opcodeFault(regs*, void*)+0x2c4>
c0011744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011747:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001174a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001174d:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0011751:	74 10                	je     c0011763 <opcodeFault(regs*, void*)+0x2da>
c0011753:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001175a:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0011761:	eb 2d                	jmp    c0011790 <opcodeFault(regs*, void*)+0x307>
c0011763:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011766:	c1 e0 18             	shl    eax,0x18
c0011769:	89 c2                	mov    edx,eax
c001176b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001176e:	c1 e0 08             	shl    eax,0x8
c0011771:	25 00 00 ff 00       	and    eax,0xff0000
c0011776:	09 c2                	or     edx,eax
c0011778:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001177b:	c1 e8 08             	shr    eax,0x8
c001177e:	25 00 ff 00 00       	and    eax,0xff00
c0011783:	09 c2                	or     edx,eax
c0011785:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011788:	c1 e8 18             	shr    eax,0x18
c001178b:	09 d0                	or     eax,edx
c001178d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011790:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011794:	75 0b                	jne    c00117a1 <opcodeFault(regs*, void*)+0x318>
c0011796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011799:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001179c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001179f:	eb 75                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117a1:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00117a5:	75 0b                	jne    c00117b2 <opcodeFault(regs*, void*)+0x329>
c00117a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117aa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117ad:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00117b0:	eb 64                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117b2:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00117b6:	75 0b                	jne    c00117c3 <opcodeFault(regs*, void*)+0x33a>
c00117b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117bb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117be:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00117c1:	eb 53                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117c3:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117c7:	75 0b                	jne    c00117d4 <opcodeFault(regs*, void*)+0x34b>
c00117c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117cf:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00117d2:	eb 42                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117d4:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117d8:	75 0b                	jne    c00117e5 <opcodeFault(regs*, void*)+0x35c>
c00117da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117dd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117e0:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00117e3:	eb 31                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117e5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117e9:	75 0b                	jne    c00117f6 <opcodeFault(regs*, void*)+0x36d>
c00117eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ee:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117f4:	eb 20                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117f6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117fa:	75 0b                	jne    c0011807 <opcodeFault(regs*, void*)+0x37e>
c00117fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ff:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011802:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011805:	eb 0f                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c0011807:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001180b:	75 09                	jne    c0011816 <opcodeFault(regs*, void*)+0x38d>
c001180d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011810:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011813:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011819:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001181c:	8d 50 02             	lea    edx,[eax+0x2]
c001181f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011822:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011825:	e9 11 02 00 00       	jmp    c0011a3b <opcodeFault(regs*, void*)+0x5b2>
c001182a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001182d:	8a 00                	mov    al,BYTE PTR [eax]
c001182f:	3c 0f                	cmp    al,0xf
c0011831:	0f 85 76 01 00 00    	jne    c00119ad <opcodeFault(regs*, void*)+0x524>
c0011837:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001183a:	40                   	inc    eax
c001183b:	8a 00                	mov    al,BYTE PTR [eax]
c001183d:	3c c7                	cmp    al,0xc7
c001183f:	0f 85 68 01 00 00    	jne    c00119ad <opcodeFault(regs*, void*)+0x524>
c0011845:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001184e:	8d 50 01             	lea    edx,[eax+0x1]
c0011851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011854:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011857:	8d 45 ba             	lea    eax,[ebp-0x46]
c001185a:	50                   	push   eax
c001185b:	8d 45 bb             	lea    eax,[ebp-0x45]
c001185e:	50                   	push   eax
c001185f:	8d 45 bc             	lea    eax,[ebp-0x44]
c0011862:	50                   	push   eax
c0011863:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011866:	e8 dd 3e 00 00       	call   c0015748 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011871:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011874:	83 f0 01             	xor    eax,0x1
c0011877:	84 c0                	test   al,al
c0011879:	0f 84 2e 01 00 00    	je     c00119ad <opcodeFault(regs*, void*)+0x524>
c001187f:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0011882:	3c 01                	cmp    al,0x1
c0011884:	0f 85 23 01 00 00    	jne    c00119ad <opcodeFault(regs*, void*)+0x524>
c001188a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001188d:	83 f0 01             	xor    eax,0x1
c0011890:	84 c0                	test   al,al
c0011892:	0f 84 15 01 00 00    	je     c00119ad <opcodeFault(regs*, void*)+0x524>
c0011898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001189e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00118a1:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00118a8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00118ab:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00118ae:	89 c2                	mov    edx,eax
c00118b0:	b8 00 00 00 00       	mov    eax,0x0
c00118b5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00118b8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00118bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118be:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00118c1:	ba 00 00 00 00       	mov    edx,0x0
c00118c6:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00118c9:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00118cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00118d2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118d5:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00118dc:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118df:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00118e2:	89 c2                	mov    edx,eax
c00118e4:	b8 00 00 00 00       	mov    eax,0x0
c00118e9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118ec:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00118ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118f5:	ba 00 00 00 00       	mov    edx,0x0
c00118fa:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00118fd:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0011900:	e8 30 70 00 00       	call   c0018935 <lockScheduler()>
c0011905:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011908:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001190b:	8b 00                	mov    eax,DWORD PTR [eax]
c001190d:	89 c1                	mov    ecx,eax
c001190f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0011912:	89 cb                	mov    ebx,ecx
c0011914:	89 d0                	mov    eax,edx
c0011916:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0011919:	89 c6                	mov    esi,eax
c001191b:	89 f0                	mov    eax,esi
c001191d:	09 d8                	or     eax,ebx
c001191f:	85 c0                	test   eax,eax
c0011921:	75 21                	jne    c0011944 <opcodeFault(regs*, void*)+0x4bb>
c0011923:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0011926:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0011929:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001192c:	89 01                	mov    DWORD PTR [ecx],eax
c001192e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011934:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011937:	83 c8 40             	or     eax,0x40
c001193a:	89 c2                	mov    edx,eax
c001193c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001193f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011942:	eb 3e                	jmp    c0011982 <opcodeFault(regs*, void*)+0x4f9>
c0011944:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011947:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001194a:	8b 00                	mov    eax,DWORD PTR [eax]
c001194c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001194f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011952:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011958:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001195b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001195e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011961:	89 d0                	mov    eax,edx
c0011963:	31 d2                	xor    edx,edx
c0011965:	89 c3                	mov    ebx,eax
c0011967:	89 d6                	mov    esi,edx
c0011969:	89 da                	mov    edx,ebx
c001196b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011974:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011977:	83 e0 bf             	and    eax,0xffffffbf
c001197a:	89 c2                	mov    edx,eax
c001197c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001197f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011982:	e8 b0 6f 00 00       	call   c0018937 <unlockScheduler()>
c0011987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001198d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011990:	01 c2                	add    edx,eax
c0011992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011995:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011998:	83 ec 0c             	sub    esp,0xc
c001199b:	68 56 1e 02 c0       	push   0xc0021e56
c00119a0:	e8 b4 d7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	e9 8e 00 00 00       	jmp    c0011a3b <opcodeFault(regs*, void*)+0x5b2>
c00119ad:	83 ec 0c             	sub    esp,0xc
c00119b0:	68 69 1e 02 c0       	push   0xc0021e69
c00119b5:	e8 9f d7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00119ba:	83 c4 10             	add    esp,0x10
c00119bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119c9:	c1 e0 04             	shl    eax,0x4
c00119cc:	01 d0                	add    eax,edx
c00119ce:	83 c0 03             	add    eax,0x3
c00119d1:	8a 00                	mov    al,BYTE PTR [eax]
c00119d3:	0f b6 d8             	movzx  ebx,al
c00119d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119e2:	c1 e0 04             	shl    eax,0x4
c00119e5:	01 d0                	add    eax,edx
c00119e7:	83 c0 02             	add    eax,0x2
c00119ea:	8a 00                	mov    al,BYTE PTR [eax]
c00119ec:	0f b6 c8             	movzx  ecx,al
c00119ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119fb:	c1 e0 04             	shl    eax,0x4
c00119fe:	01 d0                	add    eax,edx
c0011a00:	40                   	inc    eax
c0011a01:	8a 00                	mov    al,BYTE PTR [eax]
c0011a03:	0f b6 d0             	movzx  edx,al
c0011a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a09:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011a0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a12:	c1 e0 04             	shl    eax,0x4
c0011a15:	01 f0                	add    eax,esi
c0011a17:	8a 00                	mov    al,BYTE PTR [eax]
c0011a19:	0f b6 c0             	movzx  eax,al
c0011a1c:	83 ec 0c             	sub    esp,0xc
c0011a1f:	53                   	push   ebx
c0011a20:	51                   	push   ecx
c0011a21:	52                   	push   edx
c0011a22:	50                   	push   eax
c0011a23:	68 7c 1e 02 c0       	push   0xc0021e7c
c0011a28:	e8 2c d7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011a2d:	83 c4 20             	add    esp,0x20
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011a36:	e8 65 f5 ff ff       	call   c0010fa0 <displayDebugInfo(regs*)>
c0011a3b:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011a3e:	5b                   	pop    ebx
c0011a3f:	5e                   	pop    esi
c0011a40:	5d                   	pop    ebp
c0011a41:	c3                   	ret    

c0011a42 <displayProgramFault(char const*)>:
c0011a42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a47:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a4a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011a50:	85 c0                	test   eax,eax
c0011a52:	74 15                	je     c0011a69 <displayProgramFault(char const*)+0x27>
c0011a54:	83 ec 0c             	sub    esp,0xc
c0011a57:	6a 04                	push   0x4
c0011a59:	6a 0f                	push   0xf
c0011a5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a5f:	50                   	push   eax
c0011a60:	e8 c9 b9 ff ff       	call   c000d42e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011a65:	83 c4 1c             	add    esp,0x1c
c0011a68:	c3                   	ret    
c0011a69:	c3                   	ret    

c0011a6a <setupInterruptController()>:
c0011a6a:	55                   	push   ebp
c0011a6b:	89 e5                	mov    ebp,esp
c0011a6d:	53                   	push   ebx
c0011a6e:	83 ec 14             	sub    esp,0x14
c0011a71:	e8 63 2d 00 00       	call   c00147d9 <getCPUNumber()>
c0011a76:	85 c0                	test   eax,eax
c0011a78:	0f 95 c0             	setne  al
c0011a7b:	84 c0                	test   al,al
c0011a7d:	74 56                	je     c0011ad5 <setupInterruptController()+0x6b>
c0011a7f:	83 ec 0c             	sub    esp,0xc
c0011a82:	68 58 21 00 00       	push   0x2158
c0011a87:	e8 98 d5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0011a8c:	83 c4 10             	add    esp,0x10
c0011a8f:	89 c3                	mov    ebx,eax
c0011a91:	83 ec 0c             	sub    esp,0xc
c0011a94:	53                   	push   ebx
c0011a95:	e8 e6 c8 00 00       	call   c001e380 <APIC::APIC()>
c0011a9a:	83 c4 10             	add    esp,0x10
c0011a9d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011aa0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011aa3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aa8:	83 c0 08             	add    eax,0x8
c0011aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aad:	6a 00                	push   0x0
c0011aaf:	6a 00                	push   0x0
c0011ab1:	6a 00                	push   0x0
c0011ab3:	52                   	push   edx
c0011ab4:	ff d0                	call   eax
c0011ab6:	83 c4 10             	add    esp,0x10
c0011ab9:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0011abe:	83 ec 08             	sub    esp,0x8
c0011ac1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ac4:	50                   	push   eax
c0011ac5:	e8 a4 ea ff ff       	call   c001056e <Device::addChild(Device*)>
c0011aca:	83 c4 10             	add    esp,0x10
c0011acd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011ad0:	e9 48 03 00 00       	jmp    c0011e1d <setupInterruptController()+0x3b3>
c0011ad5:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0011ada:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ae0:	83 e0 01             	and    eax,0x1
c0011ae3:	84 c0                	test   al,al
c0011ae5:	0f 95 c0             	setne  al
c0011ae8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011aeb:	83 ec 0c             	sub    esp,0xc
c0011aee:	68 58 21 00 00       	push   0x2158
c0011af3:	e8 2c d5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0011af8:	83 c4 10             	add    esp,0x10
c0011afb:	89 c3                	mov    ebx,eax
c0011afd:	83 ec 0c             	sub    esp,0xc
c0011b00:	53                   	push   ebx
c0011b01:	e8 74 cd 00 00       	call   c001e87a <PIC::PIC()>
c0011b06:	83 c4 10             	add    esp,0x10
c0011b09:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b0c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b14:	83 c0 08             	add    eax,0x8
c0011b17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b19:	6a 00                	push   0x0
c0011b1b:	6a 00                	push   0x0
c0011b1d:	6a 00                	push   0x0
c0011b1f:	52                   	push   edx
c0011b20:	ff d0                	call   eax
c0011b22:	83 c4 10             	add    esp,0x10
c0011b25:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011b29:	74 6e                	je     c0011b99 <setupInterruptController()+0x12f>
c0011b2b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b31:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b33:	83 c0 0c             	add    eax,0xc
c0011b36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b38:	6a 00                	push   0x0
c0011b3a:	6a 00                	push   0x0
c0011b3c:	6a 00                	push   0x0
c0011b3e:	52                   	push   edx
c0011b3f:	ff d0                	call   eax
c0011b41:	83 c4 10             	add    esp,0x10
c0011b44:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011b48:	74 15                	je     c0011b5f <setupInterruptController()+0xf5>
c0011b4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b4f:	83 c0 04             	add    eax,0x4
c0011b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b54:	83 ec 0c             	sub    esp,0xc
c0011b57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b5a:	ff d0                	call   eax
c0011b5c:	83 c4 10             	add    esp,0x10
c0011b5f:	83 ec 0c             	sub    esp,0xc
c0011b62:	68 58 21 00 00       	push   0x2158
c0011b67:	e8 b8 d4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0011b6c:	83 c4 10             	add    esp,0x10
c0011b6f:	89 c3                	mov    ebx,eax
c0011b71:	83 ec 0c             	sub    esp,0xc
c0011b74:	53                   	push   ebx
c0011b75:	e8 06 c8 00 00       	call   c001e380 <APIC::APIC()>
c0011b7a:	83 c4 10             	add    esp,0x10
c0011b7d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b80:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b88:	83 c0 08             	add    eax,0x8
c0011b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b8d:	6a 00                	push   0x0
c0011b8f:	6a 00                	push   0x0
c0011b91:	6a 00                	push   0x0
c0011b93:	52                   	push   edx
c0011b94:	ff d0                	call   eax
c0011b96:	83 c4 10             	add    esp,0x10
c0011b99:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0011b9e:	83 ec 08             	sub    esp,0x8
c0011ba1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ba4:	50                   	push   eax
c0011ba5:	e8 c4 e9 ff ff       	call   c001056e <Device::addChild(Device*)>
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb2:	83 c0 24             	add    eax,0x24
c0011bb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb7:	6a 00                	push   0x0
c0011bb9:	68 6a 14 01 c0       	push   0xc001146a
c0011bbe:	6a 00                	push   0x0
c0011bc0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bc3:	ff d0                	call   eax
c0011bc5:	83 c4 10             	add    esp,0x10
c0011bc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bcd:	83 c0 24             	add    eax,0x24
c0011bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd2:	6a 00                	push   0x0
c0011bd4:	68 6a 14 01 c0       	push   0xc001146a
c0011bd9:	6a 01                	push   0x1
c0011bdb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bde:	ff d0                	call   eax
c0011be0:	83 c4 10             	add    esp,0x10
c0011be3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011be6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be8:	83 c0 24             	add    eax,0x24
c0011beb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bed:	6a 00                	push   0x0
c0011bef:	68 03 0e 01 c0       	push   0xc0010e03
c0011bf4:	6a 02                	push   0x2
c0011bf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bf9:	ff d0                	call   eax
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c03:	83 c0 24             	add    eax,0x24
c0011c06:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c08:	6a 00                	push   0x0
c0011c0a:	68 6a 14 01 c0       	push   0xc001146a
c0011c0f:	6a 03                	push   0x3
c0011c11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c14:	ff d0                	call   eax
c0011c16:	83 c4 10             	add    esp,0x10
c0011c19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1e:	83 c0 24             	add    eax,0x24
c0011c21:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c23:	6a 00                	push   0x0
c0011c25:	68 6a 14 01 c0       	push   0xc001146a
c0011c2a:	6a 04                	push   0x4
c0011c2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c2f:	ff d0                	call   eax
c0011c31:	83 c4 10             	add    esp,0x10
c0011c34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c39:	83 c0 24             	add    eax,0x24
c0011c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3e:	6a 00                	push   0x0
c0011c40:	68 6a 14 01 c0       	push   0xc001146a
c0011c45:	6a 05                	push   0x5
c0011c47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c4a:	ff d0                	call   eax
c0011c4c:	83 c4 10             	add    esp,0x10
c0011c4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c54:	83 c0 24             	add    eax,0x24
c0011c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c59:	6a 00                	push   0x0
c0011c5b:	68 89 14 01 c0       	push   0xc0011489
c0011c60:	6a 06                	push   0x6
c0011c62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c65:	ff d0                	call   eax
c0011c67:	83 c4 10             	add    esp,0x10
c0011c6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6f:	83 c0 24             	add    eax,0x24
c0011c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c74:	6a 00                	push   0x0
c0011c76:	68 b7 13 01 c0       	push   0xc00113b7
c0011c7b:	6a 07                	push   0x7
c0011c7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c80:	ff d0                	call   eax
c0011c82:	83 c4 10             	add    esp,0x10
c0011c85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8a:	83 c0 24             	add    eax,0x24
c0011c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8f:	6a 00                	push   0x0
c0011c91:	68 1e 0c 01 c0       	push   0xc0010c1e
c0011c96:	6a 08                	push   0x8
c0011c98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c9b:	ff d0                	call   eax
c0011c9d:	83 c4 10             	add    esp,0x10
c0011ca0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca5:	83 c0 24             	add    eax,0x24
c0011ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011caa:	6a 00                	push   0x0
c0011cac:	68 6a 14 01 c0       	push   0xc001146a
c0011cb1:	6a 09                	push   0x9
c0011cb3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cb6:	ff d0                	call   eax
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc0:	83 c0 24             	add    eax,0x24
c0011cc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc5:	6a 00                	push   0x0
c0011cc7:	68 6a 14 01 c0       	push   0xc001146a
c0011ccc:	6a 0a                	push   0xa
c0011cce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cd1:	ff d0                	call   eax
c0011cd3:	83 c4 10             	add    esp,0x10
c0011cd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cdb:	83 c0 24             	add    eax,0x24
c0011cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce0:	6a 00                	push   0x0
c0011ce2:	68 6a 14 01 c0       	push   0xc001146a
c0011ce7:	6a 0b                	push   0xb
c0011ce9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cec:	ff d0                	call   eax
c0011cee:	83 c4 10             	add    esp,0x10
c0011cf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf6:	83 c0 24             	add    eax,0x24
c0011cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cfb:	6a 00                	push   0x0
c0011cfd:	68 6a 14 01 c0       	push   0xc001146a
c0011d02:	6a 0c                	push   0xc
c0011d04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d07:	ff d0                	call   eax
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d11:	83 c0 24             	add    eax,0x24
c0011d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d16:	6a 00                	push   0x0
c0011d18:	68 1a 14 01 c0       	push   0xc001141a
c0011d1d:	6a 0d                	push   0xd
c0011d1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d22:	ff d0                	call   eax
c0011d24:	83 c4 10             	add    esp,0x10
c0011d27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2c:	83 c0 24             	add    eax,0x24
c0011d2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d31:	6a 00                	push   0x0
c0011d33:	68 53 14 01 c0       	push   0xc0011453
c0011d38:	6a 0e                	push   0xe
c0011d3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d3d:	ff d0                	call   eax
c0011d3f:	83 c4 10             	add    esp,0x10
c0011d42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d47:	83 c0 24             	add    eax,0x24
c0011d4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4c:	6a 00                	push   0x0
c0011d4e:	68 6a 14 01 c0       	push   0xc001146a
c0011d53:	6a 0f                	push   0xf
c0011d55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d58:	ff d0                	call   eax
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d62:	83 c0 24             	add    eax,0x24
c0011d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d67:	6a 00                	push   0x0
c0011d69:	68 6a 14 01 c0       	push   0xc001146a
c0011d6e:	6a 10                	push   0x10
c0011d70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d73:	ff d0                	call   eax
c0011d75:	83 c4 10             	add    esp,0x10
c0011d78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7d:	83 c0 24             	add    eax,0x24
c0011d80:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d82:	6a 00                	push   0x0
c0011d84:	68 6a 14 01 c0       	push   0xc001146a
c0011d89:	6a 11                	push   0x11
c0011d8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d8e:	ff d0                	call   eax
c0011d90:	83 c4 10             	add    esp,0x10
c0011d93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d96:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d98:	83 c0 24             	add    eax,0x24
c0011d9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9d:	6a 00                	push   0x0
c0011d9f:	68 6a 14 01 c0       	push   0xc001146a
c0011da4:	6a 12                	push   0x12
c0011da6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011da9:	ff d0                	call   eax
c0011dab:	83 c4 10             	add    esp,0x10
c0011dae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db3:	83 c0 24             	add    eax,0x24
c0011db6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db8:	6a 00                	push   0x0
c0011dba:	68 6a 14 01 c0       	push   0xc001146a
c0011dbf:	6a 13                	push   0x13
c0011dc1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dc4:	ff d0                	call   eax
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dce:	83 c0 24             	add    eax,0x24
c0011dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd3:	6a 00                	push   0x0
c0011dd5:	68 6a 14 01 c0       	push   0xc001146a
c0011dda:	6a 14                	push   0x14
c0011ddc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ddf:	ff d0                	call   eax
c0011de1:	83 c4 10             	add    esp,0x10
c0011de4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011de7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de9:	83 c0 24             	add    eax,0x24
c0011dec:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dee:	6a 00                	push   0x0
c0011df0:	68 6a 14 01 c0       	push   0xc001146a
c0011df5:	6a 1e                	push   0x1e
c0011df7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dfa:	ff d0                	call   eax
c0011dfc:	83 c4 10             	add    esp,0x10
c0011dff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e04:	83 c0 24             	add    eax,0x24
c0011e07:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e09:	6a 00                	push   0x0
c0011e0b:	68 3d 73 01 c0       	push   0xc001733d
c0011e10:	6a 60                	push   0x60
c0011e12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e15:	ff d0                	call   eax
c0011e17:	83 c4 10             	add    esp,0x10
c0011e1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e1d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011e20:	c9                   	leave  
c0011e21:	c3                   	ret    

c0011e22 <InterruptController::convertLegacyIRQNumber(int)>:
c0011e22:	55                   	push   ebp
c0011e23:	89 e5                	mov    ebp,esp
c0011e25:	83 ec 08             	sub    esp,0x8
c0011e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e2b:	83 ec 0c             	sub    esp,0xc
c0011e2e:	50                   	push   eax
c0011e2f:	e8 1c ea ff ff       	call   c0010850 <Device::getName()>
c0011e34:	83 c4 10             	add    esp,0x10
c0011e37:	8a 00                	mov    al,BYTE PTR [eax]
c0011e39:	3c 41                	cmp    al,0x41
c0011e3b:	0f 94 c0             	sete   al
c0011e3e:	84 c0                	test   al,al
c0011e40:	74 28                	je     c0011e6a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e42:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011e46:	7f 12                	jg     c0011e5a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011e48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e4b:	05 e0 3c 02 c0       	add    eax,0xc0023ce0
c0011e50:	8a 00                	mov    al,BYTE PTR [eax]
c0011e52:	0f b6 c0             	movzx  eax,al
c0011e55:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011e58:	eb 10                	jmp    c0011e6a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e5a:	83 ec 0c             	sub    esp,0xc
c0011e5d:	68 f4 1b 02 c0       	push   0xc0021bf4
c0011e62:	e8 e1 3a 00 00       	call   c0015948 <Krnl::panic(char const*)>
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e6d:	c9                   	leave  
c0011e6e:	c3                   	ret    
c0011e6f:	90                   	nop

c0011e70 <startGUI(void*)>:
c0011e70:	55                   	push   ebp
c0011e71:	89 e5                	mov    ebp,esp
c0011e73:	53                   	push   ebx
c0011e74:	83 ec 04             	sub    esp,0x4
c0011e77:	e8 bb 6a 00 00       	call   c0018937 <unlockScheduler()>
c0011e7c:	e8 9f 6a 00 00       	call   c0018920 <getIRQNestingLevel()>
c0011e81:	83 ec 08             	sub    esp,0x8
c0011e84:	50                   	push   eax
c0011e85:	68 e4 1e 02 c0       	push   0xc0021ee4
c0011e8a:	e8 ca d2 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c0011e98:	83 ec 08             	sub    esp,0x8
c0011e9b:	6a 01                	push   0x1
c0011e9d:	68 fe 1e 02 c0       	push   0xc0021efe
c0011ea2:	e8 a9 64 00 00       	call   c0018350 <Thr::loadDLL(char const*, bool)>
c0011ea7:	83 c4 10             	add    esp,0x10
c0011eaa:	83 ec 08             	sub    esp,0x8
c0011ead:	53                   	push   ebx
c0011eae:	50                   	push   eax
c0011eaf:	e8 62 66 00 00       	call   c0018516 <Thr::executeDLL(unsigned long, void*)>
c0011eb4:	83 c4 10             	add    esp,0x10
c0011eb7:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c0011ebd:	83 ec 08             	sub    esp,0x8
c0011ec0:	6a 01                	push   0x1
c0011ec2:	68 18 1f 02 c0       	push   0xc0021f18
c0011ec7:	e8 84 64 00 00       	call   c0018350 <Thr::loadDLL(char const*, bool)>
c0011ecc:	83 c4 10             	add    esp,0x10
c0011ecf:	83 ec 08             	sub    esp,0x8
c0011ed2:	53                   	push   ebx
c0011ed3:	50                   	push   eax
c0011ed4:	e8 3d 66 00 00       	call   c0018516 <Thr::executeDLL(unsigned long, void*)>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	90                   	nop
c0011edd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ee0:	c9                   	leave  
c0011ee1:	c3                   	ret    

c0011ee2 <sendKeyToTerminal(unsigned char)>:
c0011ee2:	55                   	push   ebp
c0011ee3:	89 e5                	mov    ebp,esp
c0011ee5:	83 ec 28             	sub    esp,0x28
c0011ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011eeb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011eee:	8b 15 44 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024644
c0011ef4:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011ef7:	25 ff 00 00 00       	and    eax,0xff
c0011efc:	83 ec 08             	sub    esp,0x8
c0011eff:	50                   	push   eax
c0011f00:	52                   	push   edx
c0011f01:	e8 66 ba ff ff       	call   c000d96c <VgaText::receiveKey(unsigned char)>
c0011f06:	83 c4 10             	add    esp,0x10
c0011f09:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011f0d:	75 41                	jne    c0011f50 <sendKeyToTerminal(unsigned char)+0x6e>
c0011f0f:	e8 48 6a 00 00       	call   c001895c <lockStuff()>
c0011f14:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c0011f19:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f1c:	c7 05 20 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024720,0x0
c0011f26:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011f2a:	74 1f                	je     c0011f4b <sendKeyToTerminal(unsigned char)+0x69>
c0011f2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011f2f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011f32:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011f35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f38:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f3b:	83 ec 0c             	sub    esp,0xc
c0011f3e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011f41:	e8 13 70 00 00       	call   c0018f59 <unblockTask(ThreadControlBlock*)>
c0011f46:	83 c4 10             	add    esp,0x10
c0011f49:	eb db                	jmp    c0011f26 <sendKeyToTerminal(unsigned char)+0x44>
c0011f4b:	e8 b3 6d 00 00       	call   c0018d03 <unlockStuff()>
c0011f50:	90                   	nop
c0011f51:	c9                   	leave  
c0011f52:	c3                   	ret    

c0011f53 <sendKeyboardToken(KeyboardToken)>:
c0011f53:	55                   	push   ebp
c0011f54:	89 e5                	mov    ebp,esp
c0011f56:	83 ec 18             	sub    esp,0x18
c0011f59:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f5f:	25 ff ff 00 00       	and    eax,0xffff
c0011f64:	83 f2 01             	xor    edx,0x1
c0011f67:	88 90 40 47 02 c0    	mov    BYTE PTR [eax-0x3ffdb8c0],dl
c0011f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f70:	66 3d 03 02          	cmp    ax,0x203
c0011f74:	75 07                	jne    c0011f7d <sendKeyboardToken(KeyboardToken)+0x2a>
c0011f76:	a0 40 48 02 c0       	mov    al,ds:0xc0024840
c0011f7b:	84 c0                	test   al,al
c0011f7d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011f81:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011f84:	a0 48 4b 02 c0       	mov    al,ds:0xc0024b48
c0011f89:	38 c2                	cmp    dl,al
c0011f8b:	74 1e                	je     c0011fab <sendKeyboardToken(KeyboardToken)+0x58>
c0011f8d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011f90:	a2 48 4b 02 c0       	mov    ds:0xc0024b48,al
c0011f95:	a0 48 4b 02 c0       	mov    al,ds:0xc0024b48
c0011f9a:	25 ff 00 00 00       	and    eax,0xff
c0011f9f:	83 ec 0c             	sub    esp,0xc
c0011fa2:	50                   	push   eax
c0011fa3:	e8 30 ac ff ff       	call   c000cbd8 <setTerminalScrollLock(bool)>
c0011fa8:	83 c4 10             	add    esp,0x10
c0011fab:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011fae:	84 c0                	test   al,al
c0011fb0:	0f 84 ae 00 00 00    	je     c0012064 <sendKeyboardToken(KeyboardToken)+0x111>
c0011fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fb9:	66 3d 10 03          	cmp    ax,0x310
c0011fbd:	75 06                	jne    c0011fc5 <sendKeyboardToken(KeyboardToken)+0x72>
c0011fbf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fc8:	66 3d 11 03          	cmp    ax,0x311
c0011fcc:	75 06                	jne    c0011fd4 <sendKeyboardToken(KeyboardToken)+0x81>
c0011fce:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fd7:	66 3d 12 03          	cmp    ax,0x312
c0011fdb:	75 06                	jne    c0011fe3 <sendKeyboardToken(KeyboardToken)+0x90>
c0011fdd:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fe6:	66 3d 13 03          	cmp    ax,0x313
c0011fea:	75 06                	jne    c0011ff2 <sendKeyboardToken(KeyboardToken)+0x9f>
c0011fec:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ff5:	66 3d 14 03          	cmp    ax,0x314
c0011ff9:	75 06                	jne    c0012001 <sendKeyboardToken(KeyboardToken)+0xae>
c0011ffb:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0012001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012004:	66 3d 15 03          	cmp    ax,0x315
c0012008:	75 06                	jne    c0012010 <sendKeyboardToken(KeyboardToken)+0xbd>
c001200a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0012010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012013:	66 3d 16 03          	cmp    ax,0x316
c0012017:	75 06                	jne    c001201f <sendKeyboardToken(KeyboardToken)+0xcc>
c0012019:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001201f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012022:	66 3d 17 03          	cmp    ax,0x317
c0012026:	75 06                	jne    c001202e <sendKeyboardToken(KeyboardToken)+0xdb>
c0012028:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001202e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012031:	66 3d 18 03          	cmp    ax,0x318
c0012035:	75 06                	jne    c001203d <sendKeyboardToken(KeyboardToken)+0xea>
c0012037:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001203d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012040:	66 3d 19 03          	cmp    ax,0x319
c0012044:	75 06                	jne    c001204c <sendKeyboardToken(KeyboardToken)+0xf9>
c0012046:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001204c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001204f:	66 3d 1a 03          	cmp    ax,0x31a
c0012053:	0f 85 c9 00 00 00    	jne    c0012122 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012059:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001205f:	e9 be 00 00 00       	jmp    c0012122 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012067:	66 3d 10 03          	cmp    ax,0x310
c001206b:	75 0a                	jne    c0012077 <sendKeyboardToken(KeyboardToken)+0x124>
c001206d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0012073:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001207a:	66 3d 11 03          	cmp    ax,0x311
c001207e:	75 0a                	jne    c001208a <sendKeyboardToken(KeyboardToken)+0x137>
c0012080:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012086:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001208a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001208d:	66 3d 12 03          	cmp    ax,0x312
c0012091:	75 0a                	jne    c001209d <sendKeyboardToken(KeyboardToken)+0x14a>
c0012093:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012099:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001209d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a0:	66 3d 13 03          	cmp    ax,0x313
c00120a4:	75 0a                	jne    c00120b0 <sendKeyboardToken(KeyboardToken)+0x15d>
c00120a6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00120ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b3:	66 3d 14 03          	cmp    ax,0x314
c00120b7:	75 0a                	jne    c00120c3 <sendKeyboardToken(KeyboardToken)+0x170>
c00120b9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00120bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120c6:	66 3d 15 03          	cmp    ax,0x315
c00120ca:	75 0a                	jne    c00120d6 <sendKeyboardToken(KeyboardToken)+0x183>
c00120cc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120d9:	66 3d 16 03          	cmp    ax,0x316
c00120dd:	75 0a                	jne    c00120e9 <sendKeyboardToken(KeyboardToken)+0x196>
c00120df:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00120e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ec:	66 3d 17 03          	cmp    ax,0x317
c00120f0:	75 0a                	jne    c00120fc <sendKeyboardToken(KeyboardToken)+0x1a9>
c00120f2:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00120f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ff:	66 3d 18 03          	cmp    ax,0x318
c0012103:	75 0a                	jne    c001210f <sendKeyboardToken(KeyboardToken)+0x1bc>
c0012105:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001210b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001210f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012112:	66 3d 19 03          	cmp    ax,0x319
c0012116:	75 0a                	jne    c0012122 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012118:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001211e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012125:	66 3d 00 02          	cmp    ax,0x200
c0012129:	75 2a                	jne    c0012155 <sendKeyboardToken(KeyboardToken)+0x202>
c001212b:	a0 40 4b 02 c0       	mov    al,ds:0xc0024b40
c0012130:	83 f0 01             	xor    eax,0x1
c0012133:	84 c0                	test   al,al
c0012135:	74 1e                	je     c0012155 <sendKeyboardToken(KeyboardToken)+0x202>
c0012137:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001213c:	6a 01                	push   0x1
c001213e:	6a 00                	push   0x0
c0012140:	68 70 1e 01 c0       	push   0xc0011e70
c0012145:	50                   	push   eax
c0012146:	e8 1f 69 00 00       	call   c0018a6a <Process::createThread(void (*)(void*), void*, int)>
c001214b:	83 c4 10             	add    esp,0x10
c001214e:	c6 05 40 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b40,0x1
c0012155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012158:	66 3d 1d 03          	cmp    ax,0x31d
c001215c:	75 06                	jne    c0012164 <sendKeyboardToken(KeyboardToken)+0x211>
c001215e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012167:	66 3d 1c 03          	cmp    ax,0x31c
c001216b:	75 06                	jne    c0012173 <sendKeyboardToken(KeyboardToken)+0x220>
c001216d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0012173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012176:	66 3d 1b 03          	cmp    ax,0x31b
c001217a:	75 06                	jne    c0012182 <sendKeyboardToken(KeyboardToken)+0x22f>
c001217c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0012182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012185:	66 3d 1e 03          	cmp    ax,0x31e
c0012189:	75 06                	jne    c0012191 <sendKeyboardToken(KeyboardToken)+0x23e>
c001218b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0012191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012194:	66 3d 1f 03          	cmp    ax,0x31f
c0012198:	75 06                	jne    c00121a0 <sendKeyboardToken(KeyboardToken)+0x24d>
c001219a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00121a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121a3:	66 3d 1a 03          	cmp    ax,0x31a
c00121a7:	75 06                	jne    c00121af <sendKeyboardToken(KeyboardToken)+0x25c>
c00121a9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00121af:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00121b3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00121b6:	83 f0 01             	xor    eax,0x1
c00121b9:	84 c0                	test   al,al
c00121bb:	74 7b                	je     c0012238 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00121bd:	a0 41 48 02 c0       	mov    al,ds:0xc0024841
c00121c2:	84 c0                	test   al,al
c00121c4:	74 43                	je     c0012209 <sendKeyboardToken(KeyboardToken)+0x2b6>
c00121c6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121ca:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00121ce:	74 2d                	je     c00121fd <sendKeyboardToken(KeyboardToken)+0x2aa>
c00121d0:	8b 15 44 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b44
c00121d6:	89 d0                	mov    eax,edx
c00121d8:	c1 e0 02             	shl    eax,0x2
c00121db:	01 d0                	add    eax,edx
c00121dd:	01 c0                	add    eax,eax
c00121df:	a3 44 4b 02 c0       	mov    ds:0xc0024b44,eax
c00121e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121e7:	25 ff ff 00 00       	and    eax,0xffff
c00121ec:	8d 50 d0             	lea    edx,[eax-0x30]
c00121ef:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c00121f4:	01 d0                	add    eax,edx
c00121f6:	a3 44 4b 02 c0       	mov    ds:0xc0024b44,eax
c00121fb:	eb 71                	jmp    c001226e <sendKeyboardToken(KeyboardToken)+0x31b>
c00121fd:	c7 05 44 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b44,0x0
c0012207:	eb 65                	jmp    c001226e <sendKeyboardToken(KeyboardToken)+0x31b>
c0012209:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c001220e:	85 c0                	test   eax,eax
c0012210:	74 1a                	je     c001222c <sendKeyboardToken(KeyboardToken)+0x2d9>
c0012212:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c0012217:	25 ff 00 00 00       	and    eax,0xff
c001221c:	83 ec 0c             	sub    esp,0xc
c001221f:	50                   	push   eax
c0012220:	e8 bd fc ff ff       	call   c0011ee2 <sendKeyToTerminal(unsigned char)>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001222c:	c7 05 44 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b44,0x0
c0012236:	eb 36                	jmp    c001226e <sendKeyboardToken(KeyboardToken)+0x31b>
c0012238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001223b:	66 3d 01 01          	cmp    ax,0x101
c001223f:	75 2d                	jne    c001226e <sendKeyboardToken(KeyboardToken)+0x31b>
c0012241:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c0012246:	85 c0                	test   eax,eax
c0012248:	74 1a                	je     c0012264 <sendKeyboardToken(KeyboardToken)+0x311>
c001224a:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c001224f:	25 ff 00 00 00       	and    eax,0xff
c0012254:	83 ec 0c             	sub    esp,0xc
c0012257:	50                   	push   eax
c0012258:	e8 85 fc ff ff       	call   c0011ee2 <sendKeyToTerminal(unsigned char)>
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012264:	c7 05 44 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b44,0x0
c001226e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012271:	83 f0 01             	xor    eax,0x1
c0012274:	84 c0                	test   al,al
c0012276:	74 4e                	je     c00122c6 <sendKeyboardToken(KeyboardToken)+0x373>
c0012278:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001227b:	83 f0 01             	xor    eax,0x1
c001227e:	84 c0                	test   al,al
c0012280:	74 44                	je     c00122c6 <sendKeyboardToken(KeyboardToken)+0x373>
c0012282:	a0 40 48 02 c0       	mov    al,ds:0xc0024840
c0012287:	83 f0 01             	xor    eax,0x1
c001228a:	84 c0                	test   al,al
c001228c:	74 38                	je     c00122c6 <sendKeyboardToken(KeyboardToken)+0x373>
c001228e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012291:	66 83 f8 1f          	cmp    ax,0x1f
c0012295:	76 09                	jbe    c00122a0 <sendKeyboardToken(KeyboardToken)+0x34d>
c0012297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001229a:	66 83 f8 7e          	cmp    ax,0x7e
c001229e:	76 12                	jbe    c00122b2 <sendKeyboardToken(KeyboardToken)+0x35f>
c00122a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122a3:	66 83 f8 0a          	cmp    ax,0xa
c00122a7:	74 09                	je     c00122b2 <sendKeyboardToken(KeyboardToken)+0x35f>
c00122a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ac:	66 83 f8 08          	cmp    ax,0x8
c00122b0:	75 14                	jne    c00122c6 <sendKeyboardToken(KeyboardToken)+0x373>
c00122b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122b5:	25 ff 00 00 00       	and    eax,0xff
c00122ba:	83 ec 0c             	sub    esp,0xc
c00122bd:	50                   	push   eax
c00122be:	e8 1f fc ff ff       	call   c0011ee2 <sendKeyToTerminal(unsigned char)>
c00122c3:	83 c4 10             	add    esp,0x10
c00122c6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00122c9:	83 f0 01             	xor    eax,0x1
c00122cc:	84 c0                	test   al,al
c00122ce:	74 51                	je     c0012321 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122d0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00122d3:	83 f0 01             	xor    eax,0x1
c00122d6:	84 c0                	test   al,al
c00122d8:	74 47                	je     c0012321 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122da:	a0 40 48 02 c0       	mov    al,ds:0xc0024840
c00122df:	84 c0                	test   al,al
c00122e1:	74 3e                	je     c0012321 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122e6:	66 83 f8 3f          	cmp    ax,0x3f
c00122ea:	76 35                	jbe    c0012321 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ef:	66 83 f8 7f          	cmp    ax,0x7f
c00122f3:	77 2c                	ja     c0012321 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122f8:	88 c2                	mov    dl,al
c00122fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122fd:	66 83 f8 5f          	cmp    ax,0x5f
c0012301:	76 04                	jbe    c0012307 <sendKeyboardToken(KeyboardToken)+0x3b4>
c0012303:	b0 20                	mov    al,0x20
c0012305:	eb 02                	jmp    c0012309 <sendKeyboardToken(KeyboardToken)+0x3b6>
c0012307:	b0 00                	mov    al,0x0
c0012309:	29 c2                	sub    edx,eax
c001230b:	88 d0                	mov    al,dl
c001230d:	83 e8 40             	sub    eax,0x40
c0012310:	25 ff 00 00 00       	and    eax,0xff
c0012315:	83 ec 0c             	sub    esp,0xc
c0012318:	50                   	push   eax
c0012319:	e8 c4 fb ff ff       	call   c0011ee2 <sendKeyToTerminal(unsigned char)>
c001231e:	83 c4 10             	add    esp,0x10
c0012321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012324:	66 3d 00 03          	cmp    ax,0x300
c0012328:	75 0f                	jne    c0012339 <sendKeyboardToken(KeyboardToken)+0x3e6>
c001232a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001232d:	83 f0 01             	xor    eax,0x1
c0012330:	84 c0                	test   al,al
c0012332:	74 05                	je     c0012339 <sendKeyboardToken(KeyboardToken)+0x3e6>
c0012334:	e8 c6 b0 ff ff       	call   c000d3ff <doTerminalCycle()>
c0012339:	90                   	nop
c001233a:	c9                   	leave  
c001233b:	c3                   	ret    

c001233c <clearInternalKeybuffer(VgaText*)>:
c001233c:	55                   	push   ebp
c001233d:	89 e5                	mov    ebp,esp
c001233f:	83 ec 08             	sub    esp,0x8
c0012342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012345:	05 34 11 00 00       	add    eax,0x1134
c001234a:	83 ec 0c             	sub    esp,0xc
c001234d:	50                   	push   eax
c001234e:	e8 84 e3 fe ff       	call   c00006d7 <strlen>
c0012353:	83 c4 10             	add    esp,0x10
c0012356:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012359:	81 c2 34 11 00 00    	add    edx,0x1134
c001235f:	83 ec 04             	sub    esp,0x4
c0012362:	50                   	push   eax
c0012363:	6a 00                	push   0x0
c0012365:	52                   	push   edx
c0012366:	e8 4f e3 fe ff       	call   c00006ba <memset>
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	90                   	nop
c001236f:	c9                   	leave  
c0012370:	c3                   	ret    

c0012371 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012371:	55                   	push   ebp
c0012372:	89 e5                	mov    ebp,esp
c0012374:	83 ec 18             	sub    esp,0x18
c0012377:	fb                   	sti    
c0012378:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001237f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0012383:	74 77                	je     c00123fc <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0012385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012388:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001238e:	84 c0                	test   al,al
c0012390:	75 02                	jne    c0012394 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0012392:	eb f1                	jmp    c0012385 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0012394:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012397:	8d 50 01             	lea    edx,[eax+0x1]
c001239a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001239d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123a0:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00123a6:	88 10                	mov    BYTE PTR [eax],dl
c00123a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123ab:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00123b1:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00123b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b7:	05 34 11 00 00       	add    eax,0x1134
c00123bc:	83 ec 0c             	sub    esp,0xc
c00123bf:	50                   	push   eax
c00123c0:	e8 12 e3 fe ff       	call   c00006d7 <strlen>
c00123c5:	83 c4 10             	add    esp,0x10
c00123c8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123cb:	81 c2 34 11 00 00    	add    edx,0x1134
c00123d1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00123d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123d7:	81 c2 34 11 00 00    	add    edx,0x1134
c00123dd:	83 ec 04             	sub    esp,0x4
c00123e0:	50                   	push   eax
c00123e1:	51                   	push   ecx
c00123e2:	52                   	push   edx
c00123e3:	e8 64 e2 fe ff       	call   c000064c <memmove>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00123ee:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00123f1:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00123f5:	75 88                	jne    c001237f <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00123f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123fa:	eb 03                	jmp    c00123ff <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00123fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123ff:	c9                   	leave  
c0012400:	c3                   	ret    
c0012401:	90                   	nop

c0012402 <Keyboard::Keyboard(char const*)>:
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012409:	83 ec 08             	sub    esp,0x8
c001240c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012410:	50                   	push   eax
c0012411:	e8 48 e3 ff ff       	call   c001075e <Device::Device(char const*)>
c0012416:	83 c4 10             	add    esp,0x10
c0012419:	ba 3c 1f 02 c0       	mov    edx,0xc0021f3c
c001241e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012422:	89 10                	mov    DWORD PTR [eax],edx
c0012424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012428:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0012432:	c6 05 24 47 02 c0 01 	mov    BYTE PTR ds:0xc0024724,0x1
c0012439:	90                   	nop
c001243a:	83 c4 0c             	add    esp,0xc
c001243d:	c3                   	ret    

c001243e <Keyboard::~Keyboard()>:
c001243e:	83 ec 0c             	sub    esp,0xc
c0012441:	ba 3c 1f 02 c0       	mov    edx,0xc0021f3c
c0012446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001244a:	89 10                	mov    DWORD PTR [eax],edx
c001244c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012450:	83 ec 0c             	sub    esp,0xc
c0012453:	50                   	push   eax
c0012454:	e8 bb df ff ff       	call   c0010414 <Device::~Device()>
c0012459:	83 c4 10             	add    esp,0x10
c001245c:	90                   	nop
c001245d:	83 c4 0c             	add    esp,0xc
c0012460:	c3                   	ret    
c0012461:	90                   	nop

c0012462 <Keyboard::~Keyboard()>:
c0012462:	83 ec 0c             	sub    esp,0xc
c0012465:	83 ec 0c             	sub    esp,0xc
c0012468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001246c:	e8 cd ff ff ff       	call   c001243e <Keyboard::~Keyboard()>
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	83 ec 08             	sub    esp,0x8
c0012477:	68 5c 01 00 00       	push   0x15c
c001247c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012480:	e8 ae cb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0012485:	83 c4 10             	add    esp,0x10
c0012488:	83 c4 0c             	add    esp,0xc
c001248b:	c3                   	ret    

c001248c <LogicalDisk::close(int, int, void*)>:
c001248c:	83 c8 ff             	or     eax,0xffffffff
c001248f:	c3                   	ret    

c0012490 <LogicalDisk::~LogicalDisk()>:
c0012490:	83 ec 0c             	sub    esp,0xc
c0012493:	ba ec 1f 02 c0       	mov    edx,0xc0021fec
c0012498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001249c:	89 10                	mov    DWORD PTR [eax],edx
c001249e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a2:	83 ec 0c             	sub    esp,0xc
c00124a5:	50                   	push   eax
c00124a6:	e8 69 df ff ff       	call   c0010414 <Device::~Device()>
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	90                   	nop
c00124af:	83 c4 0c             	add    esp,0xc
c00124b2:	c3                   	ret    
c00124b3:	90                   	nop

c00124b4 <LogicalDisk::~LogicalDisk()>:
c00124b4:	83 ec 0c             	sub    esp,0xc
c00124b7:	83 ec 0c             	sub    esp,0xc
c00124ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124be:	e8 cd ff ff ff       	call   c0012490 <LogicalDisk::~LogicalDisk()>
c00124c3:	83 c4 10             	add    esp,0x10
c00124c6:	83 ec 08             	sub    esp,0x8
c00124c9:	68 74 01 00 00       	push   0x174
c00124ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d2:	e8 5c cb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00124d7:	83 c4 10             	add    esp,0x10
c00124da:	83 c4 0c             	add    esp,0xc
c00124dd:	c3                   	ret    

c00124de <LogicalDisk::open(int, int, void*)>:
c00124de:	83 ec 18             	sub    esp,0x18
c00124e1:	68 68 1f 02 c0       	push   0xc0021f68
c00124e6:	e8 5d 34 00 00       	call   c0015948 <Krnl::panic(char const*)>
c00124eb:	83 c8 ff             	or     eax,0xffffffff
c00124ee:	83 c4 1c             	add    esp,0x1c
c00124f1:	c3                   	ret    

c00124f2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00124f2:	53                   	push   ebx
c00124f3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00124ff:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0012505:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001250b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0012511:	77 10                	ja     c0012523 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0012513:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0012519:	89 d3                	mov    ebx,edx
c001251b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0012521:	72 05                	jb     c0012528 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0012523:	83 c8 ff             	or     eax,0xffffffff
c0012526:	89 c2                	mov    edx,eax
c0012528:	5b                   	pop    ebx
c0012529:	c3                   	ret    

c001252a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001252a:	56                   	push   esi
c001252b:	83 c8 ff             	or     eax,0xffffffff
c001252e:	53                   	push   ebx
c001252f:	89 c2                	mov    edx,eax
c0012531:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012535:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0012539:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001253d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012543:	77 27                	ja     c001256c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012545:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001254b:	89 d8                	mov    eax,ebx
c001254d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0012553:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012558:	89 c2                	mov    edx,eax
c001255a:	73 10                	jae    c001256c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001255c:	89 c8                	mov    eax,ecx
c001255e:	89 da                	mov    edx,ebx
c0012560:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012566:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001256c:	5b                   	pop    ebx
c001256d:	5e                   	pop    esi
c001256e:	c3                   	ret    
c001256f:	90                   	nop

c0012570 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012570:	83 ec 1c             	sub    esp,0x1c
c0012573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001257b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001257f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012583:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012587:	89 04 24             	mov    DWORD PTR [esp],eax
c001258a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001258e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012596:	83 ec 08             	sub    esp,0x8
c0012599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001259d:	50                   	push   eax
c001259e:	e8 bb e1 ff ff       	call   c001075e <Device::Device(char const*)>
c00125a3:	83 c4 10             	add    esp,0x10
c00125a6:	ba ec 1f 02 c0       	mov    edx,0xc0021fec
c00125ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125af:	89 10                	mov    DWORD PTR [eax],edx
c00125b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125b5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125c0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125cb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00125d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00125e7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00125ed:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00125f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125f8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00125fe:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0012604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012608:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001260c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0012612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012616:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012620:	90                   	nop
c0012621:	83 c4 1c             	add    esp,0x1c
c0012624:	c3                   	ret    
c0012625:	90                   	nop

c0012626 <LogicalDisk::assignDriveLetter()>:
c0012626:	55                   	push   ebp
c0012627:	57                   	push   edi
c0012628:	56                   	push   esi
c0012629:	53                   	push   ebx
c001262a:	83 ec 14             	sub    esp,0x14
c001262d:	8b 3d 60 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024b60
c0012633:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012637:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001263b:	8b 3d 64 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024b64
c0012641:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0012647:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001264b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0012651:	3c 01                	cmp    al,0x1
c0012653:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012657:	19 c0                	sbb    eax,eax
c0012659:	83 e0 02             	and    eax,0x2
c001265c:	83 c0 41             	add    eax,0x41
c001265f:	0f be e8             	movsx  ebp,al
c0012662:	3c 43                	cmp    al,0x43
c0012664:	75 10                	jne    c0012676 <LogicalDisk::assignDriveLetter()+0x50>
c0012666:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001266d:	75 5d                	jne    c00126cc <LogicalDisk::assignDriveLetter()+0xa6>
c001266f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012674:	75 56                	jne    c00126cc <LogicalDisk::assignDriveLetter()+0xa6>
c0012676:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012679:	ba 01 00 00 00       	mov    edx,0x1
c001267e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012682:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012686:	d3 e2                	shl    edx,cl
c0012688:	89 d7                	mov    edi,edx
c001268a:	89 d6                	mov    esi,edx
c001268c:	c1 ff 1f             	sar    edi,0x1f
c001268f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012693:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012697:	21 f9                	and    ecx,edi
c0012699:	09 d1                	or     ecx,edx
c001269b:	75 2f                	jne    c00126cc <LogicalDisk::assignDriveLetter()+0xa6>
c001269d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126a1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00126a5:	09 f2                	or     edx,esi
c00126a7:	89 15 60 4b 02 c0    	mov    DWORD PTR ds:0xc0024b60,edx
c00126ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126b1:	09 fa                	or     edx,edi
c00126b3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00126b7:	89 15 64 4b 02 c0    	mov    DWORD PTR ds:0xc0024b64,edx
c00126bd:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00126c3:	89 1c bd 80 4b 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb480],ebx
c00126ca:	eb 08                	jmp    c00126d4 <LogicalDisk::assignDriveLetter()+0xae>
c00126cc:	40                   	inc    eax
c00126cd:	45                   	inc    ebp
c00126ce:	3c 5b                	cmp    al,0x5b
c00126d0:	75 90                	jne    c0012662 <LogicalDisk::assignDriveLetter()+0x3c>
c00126d2:	31 c0                	xor    eax,eax
c00126d4:	83 c4 14             	add    esp,0x14
c00126d7:	5b                   	pop    ebx
c00126d8:	5e                   	pop    esi
c00126d9:	5f                   	pop    edi
c00126da:	5d                   	pop    ebp
c00126db:	c3                   	ret    

c00126dc <LogicalDisk::mount()>:
c00126dc:	56                   	push   esi
c00126dd:	53                   	push   ebx
c00126de:	51                   	push   ecx
c00126df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00126e3:	8b 1d e8 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246e8
c00126e9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00126f3:	85 db                	test   ebx,ebx
c00126f5:	74 50                	je     c0012747 <LogicalDisk::mount()+0x6b>
c00126f7:	e8 24 62 00 00       	call   c0018920 <getIRQNestingLevel()>
c00126fc:	52                   	push   edx
c00126fd:	52                   	push   edx
c00126fe:	50                   	push   eax
c00126ff:	68 8c 1f 02 c0       	push   0xc0021f8c
c0012704:	e8 50 ca ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0012709:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0012710:	83 c4 0c             	add    esp,0xc
c0012713:	83 e8 41             	sub    eax,0x41
c0012716:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012718:	50                   	push   eax
c0012719:	56                   	push   esi
c001271a:	53                   	push   ebx
c001271b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001271e:	83 c4 10             	add    esp,0x10
c0012721:	84 c0                	test   al,al
c0012723:	74 08                	je     c001272d <LogicalDisk::mount()+0x51>
c0012725:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001272b:	eb 1c                	jmp    c0012749 <LogicalDisk::mount()+0x6d>
c001272d:	e8 ee 61 00 00       	call   c0018920 <getIRQNestingLevel()>
c0012732:	51                   	push   ecx
c0012733:	51                   	push   ecx
c0012734:	50                   	push   eax
c0012735:	68 a7 1f 02 c0       	push   0xc0021fa7
c001273a:	e8 1a ca ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001273f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0012742:	83 c4 10             	add    esp,0x10
c0012745:	eb ac                	jmp    c00126f3 <LogicalDisk::mount()+0x17>
c0012747:	31 c0                	xor    eax,eax
c0012749:	5a                   	pop    edx
c001274a:	5b                   	pop    ebx
c001274b:	5e                   	pop    esi
c001274c:	c3                   	ret    
c001274d:	90                   	nop

c001274e <LogicalDisk::unmount()>:
c001274e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012752:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001275c:	c3                   	ret    
c001275d:	90                   	nop

c001275e <LogicalDisk::unassignDriveLetter()>:
c001275e:	57                   	push   edi
c001275f:	56                   	push   esi
c0012760:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012764:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001276b:	84 c9                	test   cl,cl
c001276d:	75 0f                	jne    c001277e <LogicalDisk::unassignDriveLetter()+0x20>
c001276f:	c7 44 24 0c c2 1f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021fc2
c0012777:	5e                   	pop    esi
c0012778:	5f                   	pop    edi
c0012779:	e9 ca 31 00 00       	jmp    c0015948 <Krnl::panic(char const*)>
c001277e:	83 e9 41             	sub    ecx,0x41
c0012781:	b8 01 00 00 00       	mov    eax,0x1
c0012786:	d3 e0                	shl    eax,cl
c0012788:	89 c7                	mov    edi,eax
c001278a:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012791:	c1 ff 1f             	sar    edi,0x1f
c0012794:	c7 04 8d 80 4b 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb480],0x0
c001279f:	89 fe                	mov    esi,edi
c00127a1:	f7 d6                	not    esi
c00127a3:	f7 d0                	not    eax
c00127a5:	21 35 64 4b 02 c0    	and    DWORD PTR ds:0xc0024b64,esi
c00127ab:	5e                   	pop    esi
c00127ac:	21 05 60 4b 02 c0    	and    DWORD PTR ds:0xc0024b60,eax
c00127b2:	5f                   	pop    edi
c00127b3:	c3                   	ret    

c00127b4 <LogicalDisk::read(unsigned long long, int, void*)>:
c00127b4:	57                   	push   edi
c00127b5:	56                   	push   esi
c00127b6:	53                   	push   ebx
c00127b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127bf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127c7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00127cd:	77 41                	ja     c0012810 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00127cf:	99                   	cdq    
c00127d0:	01 c8                	add    eax,ecx
c00127d2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00127d8:	11 da                	adc    edx,ebx
c00127da:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00127e0:	19 d7                	sbb    edi,edx
c00127e2:	72 33                	jb     c0012817 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00127e4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00127ea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00127f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127f4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00127f8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00127fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012804:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012808:	5b                   	pop    ebx
c0012809:	5e                   	pop    esi
c001280a:	5f                   	pop    edi
c001280b:	e9 9a 09 00 00       	jmp    c00131aa <VCache::read(unsigned long long, int, void*)>
c0012810:	b8 05 00 00 00       	mov    eax,0x5
c0012815:	eb 05                	jmp    c001281c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0012817:	b8 07 00 00 00       	mov    eax,0x7
c001281c:	5b                   	pop    ebx
c001281d:	5e                   	pop    esi
c001281e:	5f                   	pop    edi
c001281f:	c3                   	ret    

c0012820 <LogicalDisk::write(unsigned long long, int, void*)>:
c0012820:	57                   	push   edi
c0012821:	56                   	push   esi
c0012822:	53                   	push   ebx
c0012823:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012827:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001282b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001282f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012833:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012839:	77 41                	ja     c001287c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001283b:	99                   	cdq    
c001283c:	01 c8                	add    eax,ecx
c001283e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012844:	11 da                	adc    edx,ebx
c0012846:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001284c:	19 d7                	sbb    edi,edx
c001284e:	72 33                	jb     c0012883 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012850:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012856:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001285c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012860:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012864:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001286a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012874:	5b                   	pop    ebx
c0012875:	5e                   	pop    esi
c0012876:	5f                   	pop    edi
c0012877:	e9 4a 08 00 00       	jmp    c00130c6 <VCache::write(unsigned long long, int, void*)>
c001287c:	b8 05 00 00 00       	mov    eax,0x5
c0012881:	eb 05                	jmp    c0012888 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012883:	b8 07 00 00 00       	mov    eax,0x7
c0012888:	5b                   	pop    ebx
c0012889:	5e                   	pop    esi
c001288a:	5f                   	pop    edi
c001288b:	c3                   	ret    

c001288c <Mouse::Mouse(char const*)>:
c001288c:	83 ec 0c             	sub    esp,0xc
c001288f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012893:	83 ec 08             	sub    esp,0x8
c0012896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001289a:	50                   	push   eax
c001289b:	e8 be de ff ff       	call   c001075e <Device::Device(char const*)>
c00128a0:	83 c4 10             	add    esp,0x10
c00128a3:	ba 18 20 02 c0       	mov    edx,0xc0022018
c00128a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ac:	89 10                	mov    DWORD PTR [eax],edx
c00128ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00128bc:	90                   	nop
c00128bd:	83 c4 0c             	add    esp,0xc
c00128c0:	c3                   	ret    
c00128c1:	90                   	nop

c00128c2 <Mouse::~Mouse()>:
c00128c2:	83 ec 0c             	sub    esp,0xc
c00128c5:	ba 18 20 02 c0       	mov    edx,0xc0022018
c00128ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ce:	89 10                	mov    DWORD PTR [eax],edx
c00128d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d4:	83 ec 0c             	sub    esp,0xc
c00128d7:	50                   	push   eax
c00128d8:	e8 37 db ff ff       	call   c0010414 <Device::~Device()>
c00128dd:	83 c4 10             	add    esp,0x10
c00128e0:	90                   	nop
c00128e1:	83 c4 0c             	add    esp,0xc
c00128e4:	c3                   	ret    
c00128e5:	90                   	nop

c00128e6 <Mouse::~Mouse()>:
c00128e6:	83 ec 0c             	sub    esp,0xc
c00128e9:	83 ec 0c             	sub    esp,0xc
c00128ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128f0:	e8 cd ff ff ff       	call   c00128c2 <Mouse::~Mouse()>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	83 ec 08             	sub    esp,0x8
c00128fb:	68 58 01 00 00       	push   0x158
c0012900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012904:	e8 2a c7 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0012909:	83 c4 10             	add    esp,0x10
c001290c:	83 c4 0c             	add    esp,0xc
c001290f:	c3                   	ret    

c0012910 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012910:	55                   	push   ebp
c0012911:	57                   	push   edi
c0012912:	56                   	push   esi
c0012913:	53                   	push   ebx
c0012914:	81 ec 28 01 00 00    	sub    esp,0x128
c001291a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0012921:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0012928:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001292f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012936:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001293a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001293e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012945:	e8 06 df ff ff       	call   c0010850 <Device::getName()>
c001294a:	5a                   	pop    edx
c001294b:	59                   	pop    ecx
c001294c:	50                   	push   eax
c001294d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012951:	55                   	push   ebp
c0012952:	e8 02 de fe ff       	call   c0000759 <strcpy>
c0012957:	5b                   	pop    ebx
c0012958:	58                   	pop    eax
c0012959:	68 3c 20 02 c0       	push   0xc002203c
c001295e:	55                   	push   ebp
c001295f:	e8 ac de fe ff       	call   c0000810 <strcat>
c0012964:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001296b:	e8 b4 c6 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012970:	83 c4 0c             	add    esp,0xc
c0012973:	89 c3                	mov    ebx,eax
c0012975:	57                   	push   edi
c0012976:	56                   	push   esi
c0012977:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001297b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001297f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012986:	55                   	push   ebp
c0012987:	50                   	push   eax
c0012988:	e8 e3 fb ff ff       	call   c0012570 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001298d:	83 c4 14             	add    esp,0x14
c0012990:	53                   	push   ebx
c0012991:	e8 90 fc ff ff       	call   c0012626 <LogicalDisk::assignDriveLetter()>
c0012996:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012999:	e8 3e fd ff ff       	call   c00126dc <LogicalDisk::mount()>
c001299e:	58                   	pop    eax
c001299f:	5a                   	pop    edx
c00129a0:	53                   	push   ebx
c00129a1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00129a8:	e8 c1 db ff ff       	call   c001056e <Device::addChild(Device*)>
c00129ad:	81 c4 2c 01 00 00    	add    esp,0x12c
c00129b3:	5b                   	pop    ebx
c00129b4:	5e                   	pop    esi
c00129b5:	5f                   	pop    edi
c00129b6:	5d                   	pop    ebp
c00129b7:	c3                   	ret    

c00129b8 <createPartitionsForDisk(PhysicalDisk*)>:
c00129b8:	55                   	push   ebp
c00129b9:	57                   	push   edi
c00129ba:	56                   	push   esi
c00129bb:	53                   	push   ebx
c00129bc:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00129c2:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00129c9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00129cf:	3d 00 02 00 00       	cmp    eax,0x200
c00129d4:	74 27                	je     c00129fd <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00129d6:	83 ec 10             	sub    esp,0x10
c00129d9:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00129df:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00129e5:	99                   	cdq    
c00129e6:	52                   	push   edx
c00129e7:	0f a4 f7 0a          	shld   edi,esi,0xa
c00129eb:	50                   	push   eax
c00129ec:	89 fd                	mov    ebp,edi
c00129ee:	c1 e6 0a             	shl    esi,0xa
c00129f1:	55                   	push   ebp
c00129f2:	56                   	push   esi
c00129f3:	e8 d4 c9 00 00       	call   c001f3cc <__udivdi3>
c00129f8:	e9 b1 00 00 00       	jmp    c0012aae <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00129fd:	83 ec 0c             	sub    esp,0xc
c0012a00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a02:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012a06:	56                   	push   esi
c0012a07:	6a 01                	push   0x1
c0012a09:	6a 00                	push   0x0
c0012a0b:	6a 00                	push   0x0
c0012a0d:	53                   	push   ebx
c0012a0e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012a11:	83 c4 20             	add    esp,0x20
c0012a14:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012a1c:	75 0a                	jne    c0012a28 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012a1e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012a26:	74 2c                	je     c0012a54 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012a28:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a2e:	83 ec 10             	sub    esp,0x10
c0012a31:	89 f7                	mov    edi,esi
c0012a33:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a39:	c1 ff 1f             	sar    edi,0x1f
c0012a3c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a42:	57                   	push   edi
c0012a43:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a47:	c1 e0 0a             	shl    eax,0xa
c0012a4a:	56                   	push   esi
c0012a4b:	52                   	push   edx
c0012a4c:	50                   	push   eax
c0012a4d:	e8 7a c9 00 00       	call   c001f3cc <__udivdi3>
c0012a52:	eb 5a                	jmp    c0012aae <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012a54:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012a5b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012a62:	83 e0 7f             	and    eax,0x7f
c0012a65:	83 e1 7f             	and    ecx,0x7f
c0012a68:	01 c1                	add    ecx,eax
c0012a6a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012a71:	83 e0 7f             	and    eax,0x7f
c0012a74:	01 c1                	add    ecx,eax
c0012a76:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012a7d:	83 e0 7f             	and    eax,0x7f
c0012a80:	00 c1                	add    cl,al
c0012a82:	74 41                	je     c0012ac5 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012a84:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a8a:	83 ec 10             	sub    esp,0x10
c0012a8d:	89 f7                	mov    edi,esi
c0012a8f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a95:	c1 ff 1f             	sar    edi,0x1f
c0012a98:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a9e:	57                   	push   edi
c0012a9f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012aa3:	c1 e0 0a             	shl    eax,0xa
c0012aa6:	56                   	push   esi
c0012aa7:	52                   	push   edx
c0012aa8:	50                   	push   eax
c0012aa9:	e8 1e c9 00 00       	call   c001f3cc <__udivdi3>
c0012aae:	83 c4 14             	add    esp,0x14
c0012ab1:	52                   	push   edx
c0012ab2:	50                   	push   eax
c0012ab3:	6a 00                	push   0x0
c0012ab5:	6a 00                	push   0x0
c0012ab7:	53                   	push   ebx
c0012ab8:	e8 53 fe ff ff       	call   c0012910 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012abd:	83 c4 20             	add    esp,0x20
c0012ac0:	e9 79 01 00 00       	jmp    c0012c3e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012ac5:	89 f0                	mov    eax,esi
c0012ac7:	31 f6                	xor    esi,esi
c0012ac9:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012ad0:	75 02                	jne    c0012ad4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012ad2:	89 f1                	mov    ecx,esi
c0012ad4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012adb:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012ae2:	c1 e2 08             	shl    edx,0x8
c0012ae5:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012aed:	c1 e7 10             	shl    edi,0x10
c0012af0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012af8:	09 fa                	or     edx,edi
c0012afa:	83 c0 10             	add    eax,0x10
c0012afd:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012b04:	09 fa                	or     edx,edi
c0012b06:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012b0d:	c1 e7 18             	shl    edi,0x18
c0012b10:	09 fa                	or     edx,edi
c0012b12:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012b16:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012b1d:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012b24:	c1 e7 10             	shl    edi,0x10
c0012b27:	c1 e2 08             	shl    edx,0x8
c0012b2a:	09 fa                	or     edx,edi
c0012b2c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012b33:	09 fa                	or     edx,edi
c0012b35:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012b3c:	c1 e7 18             	shl    edi,0x18
c0012b3f:	09 fa                	or     edx,edi
c0012b41:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012b45:	46                   	inc    esi
c0012b46:	83 fe 04             	cmp    esi,0x4
c0012b49:	0f 85 7a ff ff ff    	jne    c0012ac9 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b53:	83 f0 01             	xor    eax,0x1
c0012b56:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012b5a:	75 57                	jne    c0012bb3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b60:	83 f0 01             	xor    eax,0x1
c0012b63:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012b67:	75 4a                	jne    c0012bb3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b69:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b6f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012b73:	89 f7                	mov    edi,esi
c0012b75:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012b7d:	c1 ff 1f             	sar    edi,0x1f
c0012b80:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b88:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b8e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b94:	57                   	push   edi
c0012b95:	56                   	push   esi
c0012b96:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b9a:	c1 e0 0a             	shl    eax,0xa
c0012b9d:	52                   	push   edx
c0012b9e:	50                   	push   eax
c0012b9f:	e8 28 c8 00 00       	call   c001f3cc <__udivdi3>
c0012ba4:	83 c4 10             	add    esp,0x10
c0012ba7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012bab:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012baf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012bb3:	84 c9                	test   cl,cl
c0012bb5:	74 53                	je     c0012c0a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012bb7:	0f b6 c9             	movzx  ecx,cl
c0012bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012bc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bca:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012bce:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012bd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012bd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012be2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012be6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012bea:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012bee:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012bf2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012bf6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012bfa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012bfe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c02:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012c06:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012c0a:	31 ed                	xor    ebp,ebp
c0012c0c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012c10:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012c14:	89 f8                	mov    eax,edi
c0012c16:	09 f0                	or     eax,esi
c0012c18:	74 1e                	je     c0012c38 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c1a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012c1e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012c22:	89 d1                	mov    ecx,edx
c0012c24:	09 c1                	or     ecx,eax
c0012c26:	74 10                	je     c0012c38 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	57                   	push   edi
c0012c2c:	56                   	push   esi
c0012c2d:	52                   	push   edx
c0012c2e:	50                   	push   eax
c0012c2f:	53                   	push   ebx
c0012c30:	e8 db fc ff ff       	call   c0012910 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012c35:	83 c4 20             	add    esp,0x20
c0012c38:	45                   	inc    ebp
c0012c39:	83 fd 04             	cmp    ebp,0x4
c0012c3c:	75 ce                	jne    c0012c0c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012c3e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012c44:	5b                   	pop    ebx
c0012c45:	5e                   	pop    esi
c0012c46:	5f                   	pop    edi
c0012c47:	5d                   	pop    ebp
c0012c48:	c3                   	ret    
c0012c49:	90                   	nop

c0012c4a <Timer::Timer(char const*)>:
c0012c4a:	83 ec 0c             	sub    esp,0xc
c0012c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c51:	83 ec 08             	sub    esp,0x8
c0012c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c58:	50                   	push   eax
c0012c59:	e8 00 db ff ff       	call   c001075e <Device::Device(char const*)>
c0012c5e:	83 c4 10             	add    esp,0x10
c0012c61:	ba 50 20 02 c0       	mov    edx,0xc0022050
c0012c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6a:	89 10                	mov    DWORD PTR [eax],edx
c0012c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c70:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012c7a:	90                   	nop
c0012c7b:	83 c4 0c             	add    esp,0xc
c0012c7e:	c3                   	ret    
c0012c7f:	90                   	nop

c0012c80 <Timer::~Timer()>:
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	ba 50 20 02 c0       	mov    edx,0xc0022050
c0012c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8c:	89 10                	mov    DWORD PTR [eax],edx
c0012c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c92:	83 ec 0c             	sub    esp,0xc
c0012c95:	50                   	push   eax
c0012c96:	e8 79 d7 ff ff       	call   c0010414 <Device::~Device()>
c0012c9b:	83 c4 10             	add    esp,0x10
c0012c9e:	90                   	nop
c0012c9f:	83 c4 0c             	add    esp,0xc
c0012ca2:	c3                   	ret    
c0012ca3:	90                   	nop

c0012ca4 <Timer::~Timer()>:
c0012ca4:	83 ec 0c             	sub    esp,0xc
c0012ca7:	83 ec 0c             	sub    esp,0xc
c0012caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cae:	e8 cd ff ff ff       	call   c0012c80 <Timer::~Timer()>
c0012cb3:	83 c4 10             	add    esp,0x10
c0012cb6:	83 ec 08             	sub    esp,0x8
c0012cb9:	68 5c 01 00 00       	push   0x15c
c0012cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cc2:	e8 6c c3 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	83 c4 0c             	add    esp,0xc
c0012ccd:	c3                   	ret    

c0012cce <Timer::read()>:
c0012cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cd2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012cd8:	c3                   	ret    

c0012cd9 <timerHandler(unsigned long long)>:
c0012cd9:	55                   	push   ebp
c0012cda:	57                   	push   edi
c0012cdb:	56                   	push   esi
c0012cdc:	53                   	push   ebx
c0012cdd:	83 ec 0c             	sub    esp,0xc
c0012ce0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ce4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012ce8:	01 35 f0 4b 02 c0    	add    DWORD PTR ds:0xc0024bf0,esi
c0012cee:	11 3d f4 4b 02 c0    	adc    DWORD PTR ds:0xc0024bf4,edi
c0012cf4:	80 3d 8d 45 02 c0 00 	cmp    BYTE PTR ds:0xc002458d,0x0
c0012cfb:	0f 84 07 01 00 00    	je     c0012e08 <timerHandler(unsigned long long)+0x12f>
c0012d01:	e8 56 5c 00 00       	call   c001895c <lockStuff()>
c0012d06:	83 ec 0c             	sub    esp,0xc
c0012d09:	68 bc 59 02 c0       	push   0xc00259bc
c0012d0e:	e8 8d cd 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d13:	c7 04 24 bc 59 02 c0 	mov    DWORD PTR [esp],0xc00259bc
c0012d1a:	89 c3                	mov    ebx,eax
c0012d1c:	e8 87 cd 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	84 c0                	test   al,al
c0012d26:	74 60                	je     c0012d88 <timerHandler(unsigned long long)+0xaf>
c0012d28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012d2e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012d31:	85 c0                	test   eax,eax
c0012d33:	0f 85 91 00 00 00    	jne    c0012dca <timerHandler(unsigned long long)+0xf1>
c0012d39:	e9 be 00 00 00       	jmp    c0012dfc <timerHandler(unsigned long long)+0x123>
c0012d3e:	83 ec 0c             	sub    esp,0xc
c0012d41:	55                   	push   ebp
c0012d42:	e8 12 62 00 00       	call   c0018f59 <unblockTask(ThreadControlBlock*)>
c0012d47:	83 c4 10             	add    esp,0x10
c0012d4a:	39 eb                	cmp    ebx,ebp
c0012d4c:	75 12                	jne    c0012d60 <timerHandler(unsigned long long)+0x87>
c0012d4e:	83 ec 0c             	sub    esp,0xc
c0012d51:	68 bc 59 02 c0       	push   0xc00259bc
c0012d56:	e8 45 cd 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d5b:	89 c3                	mov    ebx,eax
c0012d5d:	83 c4 10             	add    esp,0x10
c0012d60:	83 ec 0c             	sub    esp,0xc
c0012d63:	68 bc 59 02 c0       	push   0xc00259bc
c0012d68:	e8 3b cd 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d6d:	83 c4 10             	add    esp,0x10
c0012d70:	84 c0                	test   al,al
c0012d72:	75 b4                	jne    c0012d28 <timerHandler(unsigned long long)+0x4f>
c0012d74:	83 ec 0c             	sub    esp,0xc
c0012d77:	68 bc 59 02 c0       	push   0xc00259bc
c0012d7c:	e8 1f cd 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d81:	83 c4 10             	add    esp,0x10
c0012d84:	39 d8                	cmp    eax,ebx
c0012d86:	74 a0                	je     c0012d28 <timerHandler(unsigned long long)+0x4f>
c0012d88:	83 ec 0c             	sub    esp,0xc
c0012d8b:	68 bc 59 02 c0       	push   0xc00259bc
c0012d90:	e8 0b cd 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d95:	89 c5                	mov    ebp,eax
c0012d97:	c7 04 24 bc 59 02 c0 	mov    DWORD PTR [esp],0xc00259bc
c0012d9e:	e8 21 cd 00 00       	call   c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012da3:	83 c4 10             	add    esp,0x10
c0012da6:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012da9:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0012dae:	39 15 f0 4b 02 c0    	cmp    DWORD PTR ds:0xc0024bf0,edx
c0012db4:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012db7:	19 c8                	sbb    eax,ecx
c0012db9:	73 83                	jae    c0012d3e <timerHandler(unsigned long long)+0x65>
c0012dbb:	50                   	push   eax
c0012dbc:	50                   	push   eax
c0012dbd:	55                   	push   ebp
c0012dbe:	68 bc 59 02 c0       	push   0xc00259bc
c0012dc3:	e8 aa cd 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012dc8:	eb 93                	jmp    c0012d5d <timerHandler(unsigned long long)+0x84>
c0012dca:	80 3d 8c 45 02 c0 00 	cmp    BYTE PTR ds:0xc002458c,0x0
c0012dd1:	74 29                	je     c0012dfc <timerHandler(unsigned long long)+0x123>
c0012dd3:	39 c6                	cmp    esi,eax
c0012dd5:	bb 00 00 00 00       	mov    ebx,0x0
c0012dda:	19 df                	sbb    edi,ebx
c0012ddc:	72 19                	jb     c0012df7 <timerHandler(unsigned long long)+0x11e>
c0012dde:	e8 52 5b 00 00       	call   c0018935 <lockScheduler()>
c0012de3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012de8:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012deb:	e8 8e 5e 00 00       	call   c0018c7e <schedule()>
c0012df0:	e8 42 5b 00 00       	call   c0018937 <unlockScheduler()>
c0012df5:	eb 05                	jmp    c0012dfc <timerHandler(unsigned long long)+0x123>
c0012df7:	29 f0                	sub    eax,esi
c0012df9:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012dfc:	83 c4 0c             	add    esp,0xc
c0012dff:	5b                   	pop    ebx
c0012e00:	5e                   	pop    esi
c0012e01:	5f                   	pop    edi
c0012e02:	5d                   	pop    ebp
c0012e03:	e9 fb 5e 00 00       	jmp    c0018d03 <unlockStuff()>
c0012e08:	83 c4 0c             	add    esp,0xc
c0012e0b:	5b                   	pop    ebx
c0012e0c:	5e                   	pop    esi
c0012e0d:	5f                   	pop    edi
c0012e0e:	5d                   	pop    ebp
c0012e0f:	c3                   	ret    

c0012e10 <setupTimer(int)>:
c0012e10:	57                   	push   edi
c0012e11:	56                   	push   esi
c0012e12:	53                   	push   ebx
c0012e13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e17:	e8 bd 19 00 00       	call   c00147d9 <getCPUNumber()>
c0012e1c:	85 c0                	test   eax,eax
c0012e1e:	74 32                	je     c0012e52 <setupTimer(int)+0x42>
c0012e20:	83 ec 0c             	sub    esp,0xc
c0012e23:	68 60 01 00 00       	push   0x160
c0012e28:	e8 f7 c1 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012e2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e30:	89 c3                	mov    ebx,eax
c0012e32:	e8 23 c0 00 00       	call   c001ee5a <APICTimer::APICTimer()>
c0012e37:	6a 00                	push   0x0
c0012e39:	6a 00                	push   0x0
c0012e3b:	56                   	push   esi
c0012e3c:	53                   	push   ebx
c0012e3d:	e8 12 bf 00 00       	call   c001ed54 <APICTimer::open(int, int, void*)>
c0012e42:	83 c4 20             	add    esp,0x20
c0012e45:	e8 92 19 00 00       	call   c00147dc <thisCPU()>
c0012e4a:	56                   	push   esi
c0012e4b:	56                   	push   esi
c0012e4c:	53                   	push   ebx
c0012e4d:	e9 96 00 00 00       	jmp    c0012ee8 <setupTimer(int)+0xd8>
c0012e52:	e8 85 19 00 00       	call   c00147dc <thisCPU()>
c0012e57:	83 ec 0c             	sub    esp,0xc
c0012e5a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012e60:	e8 eb d9 ff ff       	call   c0010850 <Device::getName()>
c0012e65:	83 c4 10             	add    esp,0x10
c0012e68:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012e6b:	0f 85 87 00 00 00    	jne    c0012ef8 <setupTimer(int)+0xe8>
c0012e71:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0012e76:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012e7d:	74 79                	je     c0012ef8 <setupTimer(int)+0xe8>
c0012e7f:	83 ec 0c             	sub    esp,0xc
c0012e82:	68 5c 01 00 00       	push   0x15c
c0012e87:	e8 98 c1 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012e8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e8f:	89 c3                	mov    ebx,eax
c0012e91:	e8 20 c1 00 00       	call   c001efb6 <PIT::PIT()>
c0012e96:	59                   	pop    ecx
c0012e97:	5f                   	pop    edi
c0012e98:	53                   	push   ebx
c0012e99:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c0012e9f:	e8 ca d6 ff ff       	call   c001056e <Device::addChild(Device*)>
c0012ea4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ea6:	6a 00                	push   0x0
c0012ea8:	6a 00                	push   0x0
c0012eaa:	56                   	push   esi
c0012eab:	53                   	push   ebx
c0012eac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012eaf:	83 c4 14             	add    esp,0x14
c0012eb2:	68 60 01 00 00       	push   0x160
c0012eb7:	e8 68 c1 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012ebc:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ebf:	89 c7                	mov    edi,eax
c0012ec1:	e8 94 bf 00 00       	call   c001ee5a <APICTimer::APICTimer()>
c0012ec6:	6a 00                	push   0x0
c0012ec8:	6a 00                	push   0x0
c0012eca:	56                   	push   esi
c0012ecb:	57                   	push   edi
c0012ecc:	e8 83 be 00 00       	call   c001ed54 <APICTimer::open(int, int, void*)>
c0012ed1:	83 c4 20             	add    esp,0x20
c0012ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ed6:	6a 00                	push   0x0
c0012ed8:	6a 00                	push   0x0
c0012eda:	6a 00                	push   0x0
c0012edc:	53                   	push   ebx
c0012edd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ee0:	e8 f7 18 00 00       	call   c00147dc <thisCPU()>
c0012ee5:	5a                   	pop    edx
c0012ee6:	59                   	pop    ecx
c0012ee7:	57                   	push   edi
c0012ee8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012eee:	e8 7b d6 ff ff       	call   c001056e <Device::addChild(Device*)>
c0012ef3:	83 c4 10             	add    esp,0x10
c0012ef6:	eb 33                	jmp    c0012f2b <setupTimer(int)+0x11b>
c0012ef8:	83 ec 0c             	sub    esp,0xc
c0012efb:	68 5c 01 00 00       	push   0x15c
c0012f00:	e8 1f c1 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f08:	89 c3                	mov    ebx,eax
c0012f0a:	e8 a7 c0 00 00       	call   c001efb6 <PIT::PIT()>
c0012f0f:	58                   	pop    eax
c0012f10:	5a                   	pop    edx
c0012f11:	53                   	push   ebx
c0012f12:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c0012f18:	e8 51 d6 ff ff       	call   c001056e <Device::addChild(Device*)>
c0012f1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f1f:	6a 00                	push   0x0
c0012f21:	6a 00                	push   0x0
c0012f23:	56                   	push   esi
c0012f24:	53                   	push   ebx
c0012f25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f28:	83 c4 20             	add    esp,0x20
c0012f2b:	89 d8                	mov    eax,ebx
c0012f2d:	5b                   	pop    ebx
c0012f2e:	5e                   	pop    esi
c0012f2f:	5f                   	pop    edi
c0012f30:	c3                   	ret    
c0012f31:	90                   	nop

c0012f32 <VCache::VCache(PhysicalDisk*)>:
c0012f32:	53                   	push   ebx
c0012f33:	83 ec 08             	sub    esp,0x8
c0012f36:	ba 80 20 02 c0       	mov    edx,0xc0022080
c0012f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f3f:	89 10                	mov    DWORD PTR [eax],edx
c0012f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f45:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f50:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012f62:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012f74:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f7f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012f8e:	83 ec 0c             	sub    esp,0xc
c0012f91:	6a 10                	push   0x10
c0012f93:	e8 8c c0 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012f98:	83 c4 10             	add    esp,0x10
c0012f9b:	89 c3                	mov    ebx,eax
c0012f9d:	83 ec 0c             	sub    esp,0xc
c0012fa0:	53                   	push   ebx
c0012fa1:	e8 b2 5a 00 00       	call   c0018a58 <Mutex::Mutex()>
c0012fa6:	83 c4 10             	add    esp,0x10
c0012fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fad:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fb8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fbf:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012fc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fca:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012fd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fdb:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012fe1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012fe7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012feb:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012fee:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff5:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012ff9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ffd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013003:	c1 e0 06             	shl    eax,0x6
c0013006:	83 ec 0c             	sub    esp,0xc
c0013009:	50                   	push   eax
c001300a:	e8 dc 8f ff ff       	call   c000bfeb <malloc>
c001300f:	83 c4 10             	add    esp,0x10
c0013012:	89 c2                	mov    edx,eax
c0013014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013018:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001301b:	90                   	nop
c001301c:	83 c4 08             	add    esp,0x8
c001301f:	5b                   	pop    ebx
c0013020:	c3                   	ret    
c0013021:	90                   	nop

c0013022 <VCache::writeWriteBuffer()>:
c0013022:	53                   	push   ebx
c0013023:	83 ec 14             	sub    esp,0x14
c0013026:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001302a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001302d:	8b 10                	mov    edx,DWORD PTR [eax]
c001302f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013032:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013035:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013038:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001303b:	50                   	push   eax
c001303c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001303f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0013046:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001304d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0013051:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013058:	83 c4 28             	add    esp,0x28
c001305b:	5b                   	pop    ebx
c001305c:	c3                   	ret    
c001305d:	90                   	nop

c001305e <VCache::~VCache()>:
c001305e:	83 ec 0c             	sub    esp,0xc
c0013061:	ba 80 20 02 c0       	mov    edx,0xc0022080
c0013066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306a:	89 10                	mov    DWORD PTR [eax],edx
c001306c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013070:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013073:	84 c0                	test   al,al
c0013075:	74 0f                	je     c0013086 <VCache::~VCache()+0x28>
c0013077:	83 ec 0c             	sub    esp,0xc
c001307a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001307e:	e8 9f ff ff ff       	call   c0013022 <VCache::writeWriteBuffer()>
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001308d:	83 ec 0c             	sub    esp,0xc
c0013090:	50                   	push   eax
c0013091:	e8 65 8f ff ff       	call   c000bffb <free>
c0013096:	83 c4 10             	add    esp,0x10
c0013099:	90                   	nop
c001309a:	83 c4 0c             	add    esp,0xc
c001309d:	c3                   	ret    

c001309e <VCache::~VCache()>:
c001309e:	83 ec 0c             	sub    esp,0xc
c00130a1:	83 ec 0c             	sub    esp,0xc
c00130a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a8:	e8 b1 ff ff ff       	call   c001305e <VCache::~VCache()>
c00130ad:	83 c4 10             	add    esp,0x10
c00130b0:	83 ec 08             	sub    esp,0x8
c00130b3:	6a 30                	push   0x30
c00130b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130b9:	e8 75 bf ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00130be:	83 c4 10             	add    esp,0x10
c00130c1:	83 c4 0c             	add    esp,0xc
c00130c4:	c3                   	ret    
c00130c5:	90                   	nop

c00130c6 <VCache::write(unsigned long long, int, void*)>:
c00130c6:	55                   	push   ebp
c00130c7:	57                   	push   edi
c00130c8:	56                   	push   esi
c00130c9:	53                   	push   ebx
c00130ca:	83 ec 28             	sub    esp,0x28
c00130cd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00130d1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00130d5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00130d9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00130dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00130e0:	e8 e1 5d 00 00       	call   c0018ec6 <Semaphore::acquire()>
c00130e5:	83 c4 10             	add    esp,0x10
c00130e8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00130ec:	74 66                	je     c0013154 <VCache::write(unsigned long long, int, void*)+0x8e>
c00130ee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00130f1:	99                   	cdq    
c00130f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00130f6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00130f9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00130fc:	89 c1                	mov    ecx,eax
c00130fe:	31 f1                	xor    ecx,esi
c0013100:	89 d0                	mov    eax,edx
c0013102:	31 f8                	xor    eax,edi
c0013104:	89 ca                	mov    edx,ecx
c0013106:	09 c2                	or     edx,eax
c0013108:	75 3e                	jne    c0013148 <VCache::write(unsigned long long, int, void*)+0x82>
c001310a:	83 fd 01             	cmp    ebp,0x1
c001310d:	75 39                	jne    c0013148 <VCache::write(unsigned long long, int, void*)+0x82>
c001310f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013112:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013118:	51                   	push   ecx
c0013119:	50                   	push   eax
c001311a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001311e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013122:	0f af c8             	imul   ecx,eax
c0013125:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0013128:	51                   	push   ecx
c0013129:	e8 56 d5 fe ff       	call   c0000684 <memcpy>
c001312e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0013131:	83 c4 10             	add    esp,0x10
c0013134:	40                   	inc    eax
c0013135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0013138:	83 f8 40             	cmp    eax,0x40
c001313b:	75 57                	jne    c0013194 <VCache::write(unsigned long long, int, void*)+0xce>
c001313d:	83 ec 0c             	sub    esp,0xc
c0013140:	53                   	push   ebx
c0013141:	e8 dc fe ff ff       	call   c0013022 <VCache::writeWriteBuffer()>
c0013146:	eb 34                	jmp    c001317c <VCache::write(unsigned long long, int, void*)+0xb6>
c0013148:	83 ec 0c             	sub    esp,0xc
c001314b:	53                   	push   ebx
c001314c:	e8 d1 fe ff ff       	call   c0013022 <VCache::writeWriteBuffer()>
c0013151:	83 c4 10             	add    esp,0x10
c0013154:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013157:	83 fd 3f             	cmp    ebp,0x3f
c001315a:	7f 25                	jg     c0013181 <VCache::write(unsigned long long, int, void*)+0xbb>
c001315c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001315f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0013162:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013165:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013169:	52                   	push   edx
c001316a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013170:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013174:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013177:	e8 08 d5 fe ff       	call   c0000684 <memcpy>
c001317c:	83 c4 10             	add    esp,0x10
c001317f:	eb 13                	jmp    c0013194 <VCache::write(unsigned long long, int, void*)+0xce>
c0013181:	83 ec 0c             	sub    esp,0xc
c0013184:	8b 10                	mov    edx,DWORD PTR [eax]
c0013186:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001318a:	55                   	push   ebp
c001318b:	57                   	push   edi
c001318c:	56                   	push   esi
c001318d:	50                   	push   eax
c001318e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013191:	83 c4 20             	add    esp,0x20
c0013194:	83 ec 0c             	sub    esp,0xc
c0013197:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001319a:	e8 b3 62 00 00       	call   c0019452 <Semaphore::release()>
c001319f:	83 c4 2c             	add    esp,0x2c
c00131a2:	5b                   	pop    ebx
c00131a3:	31 c0                	xor    eax,eax
c00131a5:	5e                   	pop    esi
c00131a6:	5f                   	pop    edi
c00131a7:	5d                   	pop    ebp
c00131a8:	c3                   	ret    
c00131a9:	90                   	nop

c00131aa <VCache::read(unsigned long long, int, void*)>:
c00131aa:	57                   	push   edi
c00131ab:	56                   	push   esi
c00131ac:	53                   	push   ebx
c00131ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131b9:	83 ec 0c             	sub    esp,0xc
c00131bc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131bf:	e8 02 5d 00 00       	call   c0018ec6 <Semaphore::acquire()>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131cb:	74 0c                	je     c00131d9 <VCache::read(unsigned long long, int, void*)+0x2f>
c00131cd:	83 ec 0c             	sub    esp,0xc
c00131d0:	53                   	push   ebx
c00131d1:	e8 4c fe ff ff       	call   c0013022 <VCache::writeWriteBuffer()>
c00131d6:	83 c4 10             	add    esp,0x10
c00131d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	8b 10                	mov    edx,DWORD PTR [eax]
c00131e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131e9:	57                   	push   edi
c00131ea:	56                   	push   esi
c00131eb:	50                   	push   eax
c00131ec:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00131ef:	83 c4 14             	add    esp,0x14
c00131f2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131f5:	e8 58 62 00 00       	call   c0019452 <Semaphore::release()>
c00131fa:	83 c4 10             	add    esp,0x10
c00131fd:	5b                   	pop    ebx
c00131fe:	31 c0                	xor    eax,eax
c0013200:	5e                   	pop    esi
c0013201:	5f                   	pop    edi
c0013202:	c3                   	ret    
c0013203:	90                   	nop

c0013204 <Video::putrect(int, int, int, int, unsigned int)>:
c0013204:	55                   	push   ebp
c0013205:	57                   	push   edi
c0013206:	56                   	push   esi
c0013207:	53                   	push   ebx
c0013208:	83 ec 1c             	sub    esp,0x1c
c001320b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001320f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013213:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013217:	01 e8                	add    eax,ebp
c0013219:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001321d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013225:	01 df                	add    edi,ebx
c0013227:	39 fb                	cmp    ebx,edi
c0013229:	7d 1b                	jge    c0013246 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c001322b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001322f:	7d 12                	jge    c0013243 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0013231:	8b 16                	mov    edx,DWORD PTR [esi]
c0013233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013237:	53                   	push   ebx
c0013238:	55                   	push   ebp
c0013239:	45                   	inc    ebp
c001323a:	56                   	push   esi
c001323b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001323e:	83 c4 10             	add    esp,0x10
c0013241:	eb e8                	jmp    c001322b <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0013243:	43                   	inc    ebx
c0013244:	eb e1                	jmp    c0013227 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0013246:	83 c4 1c             	add    esp,0x1c
c0013249:	5b                   	pop    ebx
c001324a:	5e                   	pop    esi
c001324b:	5f                   	pop    edi
c001324c:	5d                   	pop    ebp
c001324d:	c3                   	ret    

c001324e <Video::blit(unsigned int*, int, int, int, int)>:
c001324e:	55                   	push   ebp
c001324f:	57                   	push   edi
c0013250:	56                   	push   esi
c0013251:	53                   	push   ebx
c0013252:	83 ec 1c             	sub    esp,0x1c
c0013255:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013259:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001325d:	85 c0                	test   eax,eax
c001325f:	79 02                	jns    c0013263 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0013261:	31 c0                	xor    eax,eax
c0013263:	c1 e0 02             	shl    eax,0x2
c0013266:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001326a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001326e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013272:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013276:	39 d8                	cmp    eax,ebx
c0013278:	7e 49                	jle    c00132c3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001327a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013280:	7c 41                	jl     c00132c3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013282:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013286:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001328a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001328e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013292:	39 f9                	cmp    ecx,edi
c0013294:	7e 22                	jle    c00132b8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013296:	83 c5 04             	add    ebp,0x4
c0013299:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001329f:	7c 14                	jl     c00132b5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00132a1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00132a3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00132a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00132aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00132ae:	56                   	push   esi
c00132af:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	47                   	inc    edi
c00132b6:	eb d2                	jmp    c001328a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00132b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132bc:	43                   	inc    ebx
c00132bd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00132c1:	eb ab                	jmp    c001326e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00132c3:	83 c4 1c             	add    esp,0x1c
c00132c6:	5b                   	pop    ebx
c00132c7:	5e                   	pop    esi
c00132c8:	5f                   	pop    edi
c00132c9:	5d                   	pop    ebp
c00132ca:	c3                   	ret    
c00132cb:	90                   	nop

c00132cc <Video::clearScreen(unsigned int)>:
c00132cc:	57                   	push   edi
c00132cd:	56                   	push   esi
c00132ce:	53                   	push   ebx
c00132cf:	31 db                	xor    ebx,ebx
c00132d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132d5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00132db:	7e 1f                	jle    c00132fc <Video::clearScreen(unsigned int)+0x30>
c00132dd:	31 ff                	xor    edi,edi
c00132df:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00132e5:	7e 12                	jle    c00132f9 <Video::clearScreen(unsigned int)+0x2d>
c00132e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00132e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00132ed:	53                   	push   ebx
c00132ee:	57                   	push   edi
c00132ef:	47                   	inc    edi
c00132f0:	56                   	push   esi
c00132f1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00132f4:	83 c4 10             	add    esp,0x10
c00132f7:	eb e6                	jmp    c00132df <Video::clearScreen(unsigned int)+0x13>
c00132f9:	43                   	inc    ebx
c00132fa:	eb d9                	jmp    c00132d5 <Video::clearScreen(unsigned int)+0x9>
c00132fc:	5b                   	pop    ebx
c00132fd:	5e                   	pop    esi
c00132fe:	5f                   	pop    edi
c00132ff:	c3                   	ret    

c0013300 <Video::putpixel(int, int, unsigned int)>:
c0013300:	c7 44 24 04 88 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022088
c0013308:	e9 4c be ff ff       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>
c001330d:	90                   	nop

c001330e <Video::Video(char const*)>:
c001330e:	83 ec 0c             	sub    esp,0xc
c0013311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013315:	83 ec 08             	sub    esp,0x8
c0013318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001331c:	50                   	push   eax
c001331d:	e8 3c d4 ff ff       	call   c001075e <Device::Device(char const*)>
c0013322:	83 c4 10             	add    esp,0x10
c0013325:	ba a0 20 02 c0       	mov    edx,0xc00220a0
c001332a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332e:	89 10                	mov    DWORD PTR [eax],edx
c0013330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013334:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001333e:	90                   	nop
c001333f:	83 c4 0c             	add    esp,0xc
c0013342:	c3                   	ret    
c0013343:	90                   	nop

c0013344 <Video::~Video()>:
c0013344:	83 ec 0c             	sub    esp,0xc
c0013347:	ba a0 20 02 c0       	mov    edx,0xc00220a0
c001334c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013350:	89 10                	mov    DWORD PTR [eax],edx
c0013352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013356:	83 ec 0c             	sub    esp,0xc
c0013359:	50                   	push   eax
c001335a:	e8 b5 d0 ff ff       	call   c0010414 <Device::~Device()>
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	90                   	nop
c0013363:	83 c4 0c             	add    esp,0xc
c0013366:	c3                   	ret    
c0013367:	90                   	nop

c0013368 <Video::~Video()>:
c0013368:	83 ec 0c             	sub    esp,0xc
c001336b:	83 ec 0c             	sub    esp,0xc
c001336e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013372:	e8 cd ff ff ff       	call   c0013344 <Video::~Video()>
c0013377:	83 c4 10             	add    esp,0x10
c001337a:	83 ec 08             	sub    esp,0x8
c001337d:	68 64 01 00 00       	push   0x164
c0013382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013386:	e8 a8 bc ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001338b:	83 c4 10             	add    esp,0x10
c001338e:	83 c4 0c             	add    esp,0xc
c0013391:	c3                   	ret    

c0013392 <Video::isMonochrome()>:
c0013392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013396:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001339c:	c3                   	ret    
c001339d:	90                   	nop

c001339e <Video::getWidth()>:
c001339e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00133a8:	c3                   	ret    
c00133a9:	90                   	nop

c00133aa <Video::getHeight()>:
c00133aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133ae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00133b4:	c3                   	ret    
c00133b5:	90                   	nop

c00133b6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00133b6:	55                   	push   ebp
c00133b7:	57                   	push   edi
c00133b8:	56                   	push   esi
c00133b9:	53                   	push   ebx
c00133ba:	83 ec 2c             	sub    esp,0x2c
c00133bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00133c1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00133c5:	83 f8 01             	cmp    eax,0x1
c00133c8:	19 c9                	sbb    ecx,ecx
c00133ca:	31 db                	xor    ebx,ebx
c00133cc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00133d0:	89 cd                	mov    ebp,ecx
c00133d2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00133da:	f7 d5                	not    ebp
c00133dc:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00133e2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00133e6:	01 d8                	add    eax,ebx
c00133e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00133ec:	56                   	push   esi
c00133ed:	e8 b8 ff ff ff       	call   c00133aa <Video::getHeight()>
c00133f2:	59                   	pop    ecx
c00133f3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00133f7:	7e 70                	jle    c0013469 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00133f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133fd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0013401:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0013404:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013408:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001340c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0013413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013417:	89 f8                	mov    eax,edi
c0013419:	83 c0 20             	add    eax,0x20
c001341c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013420:	56                   	push   esi
c0013421:	e8 78 ff ff ff       	call   c001339e <Video::getWidth()>
c0013426:	5a                   	pop    edx
c0013427:	39 c7                	cmp    edi,eax
c0013429:	7d 34                	jge    c001345f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001342b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0013430:	74 05                	je     c0013437 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0013432:	8b 06                	mov    eax,DWORD PTR [esi]
c0013434:	55                   	push   ebp
c0013435:	eb 0d                	jmp    c0013444 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0013437:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001343c:	74 12                	je     c0013450 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001343e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013440:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013444:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013448:	57                   	push   edi
c0013449:	56                   	push   esi
c001344a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001344d:	83 c4 10             	add    esp,0x10
c0013450:	47                   	inc    edi
c0013451:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0013455:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013459:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001345d:	75 c1                	jne    c0013420 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001345f:	43                   	inc    ebx
c0013460:	83 fb 20             	cmp    ebx,0x20
c0013463:	0f 85 79 ff ff ff    	jne    c00133e2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013469:	83 c4 2c             	add    esp,0x2c
c001346c:	5b                   	pop    ebx
c001346d:	5e                   	pop    esi
c001346e:	5f                   	pop    edi
c001346f:	5d                   	pop    ebp
c0013470:	c3                   	ret    
c0013471:	90                   	nop

c0013472 <ACPI::close(int, int, void*)>:
c0013472:	83 ec 1c             	sub    esp,0x1c
c0013475:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001347d:	74 0a                	je     c0013489 <ACPI::close(int, int, void*)+0x17>
c001347f:	b8 00 00 00 00       	mov    eax,0x0
c0013484:	e9 9a 00 00 00       	jmp    c0013523 <ACPI::close(int, int, void*)+0xb1>
c0013489:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001348e:	75 37                	jne    c00134c7 <ACPI::close(int, int, void*)+0x55>
c0013490:	83 ec 0c             	sub    esp,0xc
c0013493:	68 d8 20 02 c0       	push   0xc00220d8
c0013498:	e8 bc bc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001349d:	83 c4 10             	add    esp,0x10
c00134a0:	a1 08 4c 02 c0       	mov    eax,ds:0xc0024c08
c00134a5:	85 c0                	test   eax,eax
c00134a7:	74 07                	je     c00134b0 <ACPI::close(int, int, void*)+0x3e>
c00134a9:	a1 08 4c 02 c0       	mov    eax,ds:0xc0024c08
c00134ae:	ff d0                	call   eax
c00134b0:	83 ec 0c             	sub    esp,0xc
c00134b3:	68 ac 21 02 c0       	push   0xc00221ac
c00134b8:	e8 8b 24 00 00       	call   c0015948 <Krnl::panic(char const*)>
c00134bd:	83 c4 10             	add    esp,0x10
c00134c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00134c5:	eb 5c                	jmp    c0013523 <ACPI::close(int, int, void*)+0xb1>
c00134c7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00134cc:	75 50                	jne    c001351e <ACPI::close(int, int, void*)+0xac>
c00134ce:	a1 04 4c 02 c0       	mov    eax,ds:0xc0024c04
c00134d3:	85 c0                	test   eax,eax
c00134d5:	74 07                	je     c00134de <ACPI::close(int, int, void*)+0x6c>
c00134d7:	a1 04 4c 02 c0       	mov    eax,ds:0xc0024c04
c00134dc:	ff d0                	call   eax
c00134de:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00134e3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00134e8:	83 e0 02             	and    eax,0x2
c00134eb:	74 1c                	je     c0013509 <ACPI::close(int, int, void*)+0x97>
c00134ed:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00134f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134f8:	89 c2                	mov    edx,eax
c00134fa:	ec                   	in     al,dx
c00134fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00134ff:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013503:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013507:	eb da                	jmp    c00134e3 <ACPI::close(int, int, void*)+0x71>
c0013509:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0013510:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0013515:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0013519:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001351d:	ee                   	out    dx,al
c001351e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013523:	83 c4 1c             	add    esp,0x1c
c0013526:	c3                   	ret    

c0013527 <findRSDP()>:
c0013527:	83 ec 1c             	sub    esp,0x1c
c001352a:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001352f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013535:	83 e0 04             	and    eax,0x4
c0013538:	84 c0                	test   al,al
c001353a:	75 07                	jne    c0013543 <findRSDP()+0x1c>
c001353c:	b8 00 00 00 00       	mov    eax,0x0
c0013541:	eb 6a                	jmp    c00135ad <findRSDP()+0x86>
c0013543:	a1 d0 45 02 c0       	mov    eax,ds:0xc00245d0
c0013548:	3d ff 07 00 00       	cmp    eax,0x7ff
c001354d:	7f 1b                	jg     c001356a <findRSDP()+0x43>
c001354f:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0013554:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001355a:	83 e2 fb             	and    edx,0xfffffffb
c001355d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013563:	b8 00 00 00 00       	mov    eax,0x0
c0013568:	eb 43                	jmp    c00135ad <findRSDP()+0x86>
c001356a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013572:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001357a:	77 2c                	ja     c00135a8 <findRSDP()+0x81>
c001357c:	83 ec 04             	sub    esp,0x4
c001357f:	6a 08                	push   0x8
c0013581:	68 e5 20 02 c0       	push   0xc00220e5
c0013586:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001358a:	e8 92 d0 fe ff       	call   c0000621 <memcmp>
c001358f:	83 c4 10             	add    esp,0x10
c0013592:	85 c0                	test   eax,eax
c0013594:	0f 94 c0             	sete   al
c0013597:	84 c0                	test   al,al
c0013599:	74 06                	je     c00135a1 <findRSDP()+0x7a>
c001359b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001359f:	eb 0c                	jmp    c00135ad <findRSDP()+0x86>
c00135a1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00135a6:	eb ca                	jmp    c0013572 <findRSDP()+0x4b>
c00135a8:	b8 00 00 00 00       	mov    eax,0x0
c00135ad:	83 c4 1c             	add    esp,0x1c
c00135b0:	c3                   	ret    

c00135b1 <loadACPITables(unsigned char*)>:
c00135b1:	56                   	push   esi
c00135b2:	53                   	push   ebx
c00135b3:	83 ec 44             	sub    esp,0x44
c00135b6:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c00135bb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135c1:	83 e0 04             	and    eax,0x4
c00135c4:	84 c0                	test   al,al
c00135c6:	0f 84 05 02 00 00    	je     c00137d1 <loadACPITables(unsigned char*)+0x220>
c00135cc:	a0 20 4e 02 c0       	mov    al,ds:0xc0024e20
c00135d1:	84 c0                	test   al,al
c00135d3:	74 75                	je     c001364a <loadACPITables(unsigned char*)+0x99>
c00135d5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00135dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135e4:	83 e8 24             	sub    eax,0x24
c00135e7:	c1 e8 03             	shr    eax,0x3
c00135ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00135ee:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00135f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00135fa:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00135fe:	0f 8d b2 00 00 00    	jge    c00136b6 <loadACPITables(unsigned char*)+0x105>
c0013604:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013608:	83 c0 24             	add    eax,0x24
c001360b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001360f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013613:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013617:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001361b:	c1 e0 03             	shl    eax,0x3
c001361e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0013622:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013626:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013629:	8b 00                	mov    eax,DWORD PTR [eax]
c001362b:	89 c1                	mov    ecx,eax
c001362d:	a1 0c 4c 02 c0       	mov    eax,ds:0xc0024c0c
c0013632:	8d 50 01             	lea    edx,[eax+0x1]
c0013635:	89 15 0c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c0c,edx
c001363b:	89 ca                	mov    edx,ecx
c001363d:	89 14 c5 24 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb3dc],edx
c0013644:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013648:	eb ac                	jmp    c00135f6 <loadACPITables(unsigned char*)+0x45>
c001364a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001364e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013656:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013659:	83 e8 24             	sub    eax,0x24
c001365c:	c1 e8 02             	shr    eax,0x2
c001365f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013663:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001366b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001366f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013673:	7d 41                	jge    c00136b6 <loadACPITables(unsigned char*)+0x105>
c0013675:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013679:	83 c0 24             	add    eax,0x24
c001367c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013680:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013684:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013688:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001368c:	c1 e0 02             	shl    eax,0x2
c001368f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013697:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013699:	a1 0c 4c 02 c0       	mov    eax,ds:0xc0024c0c
c001369e:	8d 50 01             	lea    edx,[eax+0x1]
c00136a1:	89 15 0c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c0c,edx
c00136a7:	89 ca                	mov    edx,ecx
c00136a9:	89 14 c5 24 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb3dc],edx
c00136b0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00136b4:	eb b5                	jmp    c001366b <loadACPITables(unsigned char*)+0xba>
c00136b6:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00136be:	a1 0c 4c 02 c0       	mov    eax,ds:0xc0024c0c
c00136c3:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00136c7:	0f 8d 05 01 00 00    	jge    c00137d2 <loadACPITables(unsigned char*)+0x221>
c00136cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136d1:	8b 04 c5 24 4c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb3dc]
c00136d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e8:	25 ff 0f 00 00       	and    eax,0xfff
c00136ed:	89 c6                	mov    esi,eax
c00136ef:	e8 d7 ab ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c00136f4:	89 c3                	mov    ebx,eax
c00136f6:	83 ec 0c             	sub    esp,0xc
c00136f9:	6a 01                	push   0x1
c00136fb:	e8 3e aa ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0013700:	83 c4 10             	add    esp,0x10
c0013703:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013707:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001370d:	83 ec 0c             	sub    esp,0xc
c0013710:	6a 01                	push   0x1
c0013712:	6a 01                	push   0x1
c0013714:	50                   	push   eax
c0013715:	52                   	push   edx
c0013716:	53                   	push   ebx
c0013717:	e8 e0 b3 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001371c:	83 c4 20             	add    esp,0x20
c001371f:	09 f0                	or     eax,esi
c0013721:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013725:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013729:	c1 e0 03             	shl    eax,0x3
c001372c:	05 20 4c 02 c0       	add    eax,0xc0024c20
c0013731:	83 ec 04             	sub    esp,0x4
c0013734:	6a 04                	push   0x4
c0013736:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001373a:	50                   	push   eax
c001373b:	e8 44 cf fe ff       	call   c0000684 <memcpy>
c0013740:	83 c4 10             	add    esp,0x10
c0013743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013747:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001374a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001374e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013752:	05 00 10 00 00       	add    eax,0x1000
c0013757:	c1 e8 0c             	shr    eax,0xc
c001375a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001375e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013762:	89 04 24             	mov    DWORD PTR [esp],eax
c0013765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013769:	25 ff 0f 00 00       	and    eax,0xfff
c001376e:	89 c6                	mov    esi,eax
c0013770:	e8 56 ab ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0013775:	89 c3                	mov    ebx,eax
c0013777:	83 ec 0c             	sub    esp,0xc
c001377a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001377e:	e8 bb a9 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0013783:	83 c4 10             	add    esp,0x10
c0013786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001378a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013790:	83 ec 0c             	sub    esp,0xc
c0013793:	6a 01                	push   0x1
c0013795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013799:	50                   	push   eax
c001379a:	52                   	push   edx
c001379b:	53                   	push   ebx
c001379c:	e8 5b b3 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137a1:	83 c4 20             	add    esp,0x20
c00137a4:	09 f0                	or     eax,esi
c00137a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00137ad:	83 ec 0c             	sub    esp,0xc
c00137b0:	50                   	push   eax
c00137b1:	e8 d5 ac ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c00137b6:	83 c4 10             	add    esp,0x10
c00137b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137c1:	89 14 c5 24 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb3dc],edx
c00137c8:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00137cc:	e9 ed fe ff ff       	jmp    c00136be <loadACPITables(unsigned char*)+0x10d>
c00137d1:	90                   	nop
c00137d2:	83 c4 44             	add    esp,0x44
c00137d5:	5b                   	pop    ebx
c00137d6:	5e                   	pop    esi
c00137d7:	c3                   	ret    

c00137d8 <findRSDT(unsigned char*)>:
c00137d8:	56                   	push   esi
c00137d9:	53                   	push   ebx
c00137da:	83 ec 44             	sub    esp,0x44
c00137dd:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c00137e2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00137e8:	83 e0 04             	and    eax,0x4
c00137eb:	84 c0                	test   al,al
c00137ed:	75 0a                	jne    c00137f9 <findRSDT(unsigned char*)+0x21>
c00137ef:	b8 00 00 00 00       	mov    eax,0x0
c00137f4:	e9 f7 00 00 00       	jmp    c00138f0 <findRSDT(unsigned char*)+0x118>
c00137f9:	83 ec 04             	sub    esp,0x4
c00137fc:	6a 24                	push   0x24
c00137fe:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0013802:	8d 44 24 18          	lea    eax,[esp+0x18]
c0013806:	50                   	push   eax
c0013807:	e8 78 ce fe ff       	call   c0000684 <memcpy>
c001380c:	83 c4 10             	add    esp,0x10
c001380f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0013813:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013817:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001381f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013823:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013827:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001382b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001382f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013833:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013837:	25 ff 0f 00 00       	and    eax,0xfff
c001383c:	89 c6                	mov    esi,eax
c001383e:	e8 88 aa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0013843:	89 c3                	mov    ebx,eax
c0013845:	83 ec 0c             	sub    esp,0xc
c0013848:	6a 02                	push   0x2
c001384a:	e8 ef a8 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c001384f:	83 c4 10             	add    esp,0x10
c0013852:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013856:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001385c:	83 ec 0c             	sub    esp,0xc
c001385f:	6a 01                	push   0x1
c0013861:	6a 02                	push   0x2
c0013863:	50                   	push   eax
c0013864:	52                   	push   edx
c0013865:	53                   	push   ebx
c0013866:	e8 91 b2 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001386b:	83 c4 20             	add    esp,0x20
c001386e:	09 f0                	or     eax,esi
c0013870:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013874:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013878:	25 ff 0f 00 00       	and    eax,0xfff
c001387d:	89 c6                	mov    esi,eax
c001387f:	e8 47 aa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0013884:	89 c3                	mov    ebx,eax
c0013886:	83 ec 0c             	sub    esp,0xc
c0013889:	6a 02                	push   0x2
c001388b:	e8 ae a8 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0013890:	83 c4 10             	add    esp,0x10
c0013893:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013897:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001389d:	83 ec 0c             	sub    esp,0xc
c00138a0:	6a 01                	push   0x1
c00138a2:	6a 02                	push   0x2
c00138a4:	50                   	push   eax
c00138a5:	52                   	push   edx
c00138a6:	53                   	push   ebx
c00138a7:	e8 50 b2 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00138ac:	83 c4 20             	add    esp,0x20
c00138af:	09 f0                	or     eax,esi
c00138b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138b5:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00138ba:	75 11                	jne    c00138cd <findRSDT(unsigned char*)+0xf5>
c00138bc:	c6 05 20 4e 02 c0 00 	mov    BYTE PTR ds:0xc0024e20,0x0
c00138c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138c7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138cb:	eb 1f                	jmp    c00138ec <findRSDT(unsigned char*)+0x114>
c00138cd:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00138d2:	75 11                	jne    c00138e5 <findRSDT(unsigned char*)+0x10d>
c00138d4:	c6 05 20 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024e20,0x1
c00138db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138df:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138e3:	eb 07                	jmp    c00138ec <findRSDT(unsigned char*)+0x114>
c00138e5:	b8 00 00 00 00       	mov    eax,0x0
c00138ea:	eb 04                	jmp    c00138f0 <findRSDT(unsigned char*)+0x118>
c00138ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00138f0:	83 c4 44             	add    esp,0x44
c00138f3:	5b                   	pop    ebx
c00138f4:	5e                   	pop    esi
c00138f5:	c3                   	ret    

c00138f6 <findDataTable(unsigned char*, char*)>:
c00138f6:	83 ec 1c             	sub    esp,0x1c
c00138f9:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c00138fe:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013904:	83 e0 04             	and    eax,0x4
c0013907:	84 c0                	test   al,al
c0013909:	75 07                	jne    c0013912 <findDataTable(unsigned char*, char*)+0x1c>
c001390b:	b8 00 00 00 00       	mov    eax,0x0
c0013910:	eb 7c                	jmp    c001398e <findDataTable(unsigned char*, char*)+0x98>
c0013912:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001391a:	a1 0c 4c 02 c0       	mov    eax,ds:0xc0024c0c
c001391f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0013923:	7d 3a                	jge    c001395f <findDataTable(unsigned char*, char*)+0x69>
c0013925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013929:	c1 e0 03             	shl    eax,0x3
c001392c:	05 20 4c 02 c0       	add    eax,0xc0024c20
c0013931:	83 ec 04             	sub    esp,0x4
c0013934:	6a 04                	push   0x4
c0013936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001393a:	50                   	push   eax
c001393b:	e8 e1 cc fe ff       	call   c0000621 <memcmp>
c0013940:	83 c4 10             	add    esp,0x10
c0013943:	85 c0                	test   eax,eax
c0013945:	0f 94 c0             	sete   al
c0013948:	84 c0                	test   al,al
c001394a:	74 0d                	je     c0013959 <findDataTable(unsigned char*, char*)+0x63>
c001394c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013950:	8b 04 c5 24 4c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb3dc]
c0013957:	eb 35                	jmp    c001398e <findDataTable(unsigned char*, char*)+0x98>
c0013959:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001395d:	eb bb                	jmp    c001391a <findDataTable(unsigned char*, char*)+0x24>
c001395f:	a0 20 4e 02 c0       	mov    al,ds:0xc0024e20
c0013964:	84 c0                	test   al,al
c0013966:	74 07                	je     c001396f <findDataTable(unsigned char*, char*)+0x79>
c0013968:	b8 58 00 00 00       	mov    eax,0x58
c001396d:	eb 05                	jmp    c0013974 <findDataTable(unsigned char*, char*)+0x7e>
c001396f:	b8 52 00 00 00       	mov    eax,0x52
c0013974:	83 ec 04             	sub    esp,0x4
c0013977:	50                   	push   eax
c0013978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001397c:	68 d0 21 02 c0       	push   0xc00221d0
c0013981:	e8 d3 b7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0013986:	83 c4 10             	add    esp,0x10
c0013989:	b8 00 00 00 00       	mov    eax,0x0
c001398e:	83 c4 1c             	add    esp,0x1c
c0013991:	c3                   	ret    

c0013992 <scanMADT()>:
c0013992:	83 ec 2c             	sub    esp,0x2c
c0013995:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001399a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139a0:	83 e0 04             	and    eax,0x4
c00139a3:	84 c0                	test   al,al
c00139a5:	0f 84 73 03 00 00    	je     c0013d1e <scanMADT()+0x38c>
c00139ab:	e8 77 fb ff ff       	call   c0013527 <findRSDP()>
c00139b0:	a3 2c 4e 02 c0       	mov    ds:0xc0024e2c,eax
c00139b5:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00139ba:	85 c0                	test   eax,eax
c00139bc:	75 19                	jne    c00139d7 <scanMADT()+0x45>
c00139be:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c00139c3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139c9:	83 e2 fb             	and    edx,0xfffffffb
c00139cc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139d2:	e9 4b 03 00 00       	jmp    c0013d22 <scanMADT()+0x390>
c00139d7:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	50                   	push   eax
c00139e0:	e8 f3 fd ff ff       	call   c00137d8 <findRSDT(unsigned char*)>
c00139e5:	83 c4 10             	add    esp,0x10
c00139e8:	a3 28 4e 02 c0       	mov    ds:0xc0024e28,eax
c00139ed:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c00139f2:	85 c0                	test   eax,eax
c00139f4:	75 19                	jne    c0013a0f <scanMADT()+0x7d>
c00139f6:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c00139fb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a01:	83 e2 fb             	and    edx,0xfffffffb
c0013a04:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a0a:	e9 13 03 00 00       	jmp    c0013d22 <scanMADT()+0x390>
c0013a0f:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	50                   	push   eax
c0013a18:	e8 94 fb ff ff       	call   c00135b1 <loadACPITables(unsigned char*)>
c0013a1d:	83 c4 10             	add    esp,0x10
c0013a20:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013a25:	83 ec 08             	sub    esp,0x8
c0013a28:	68 ee 20 02 c0       	push   0xc00220ee
c0013a2d:	50                   	push   eax
c0013a2e:	e8 c3 fe ff ff       	call   c00138f6 <findDataTable(unsigned char*, char*)>
c0013a33:	83 c4 10             	add    esp,0x10
c0013a36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a3a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013a3f:	75 19                	jne    c0013a5a <scanMADT()+0xc8>
c0013a41:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0013a46:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a4c:	83 e2 fe             	and    edx,0xfffffffe
c0013a4f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a55:	e9 c8 02 00 00       	jmp    c0013d22 <scanMADT()+0x390>
c0013a5a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a69:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013a6d:	0f 87 af 02 00 00    	ja     c0013d22 <scanMADT()+0x390>
c0013a73:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013a7b:	0f 87 a1 02 00 00    	ja     c0013d22 <scanMADT()+0x390>
c0013a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a8d:	8d 50 01             	lea    edx,[eax+0x1]
c0013a90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a98:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a9c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013aa0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013aa4:	8d 50 01             	lea    edx,[eax+0x1]
c0013aa7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013aab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013aaf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013ab3:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013ab7:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013abc:	0f 86 5f 02 00 00    	jbe    c0013d21 <scanMADT()+0x38f>
c0013ac2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013ac7:	75 57                	jne    c0013b20 <scanMADT()+0x18e>
c0013ac9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013acd:	8d 50 01             	lea    edx,[eax+0x1]
c0013ad0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ad4:	8a 15 60 4f 02 c0    	mov    dl,BYTE PTR ds:0xc0024f60
c0013ada:	0f b6 d2             	movzx  edx,dl
c0013add:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ae1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013ae5:	88 82 a0 4f 02 c0    	mov    BYTE PTR [edx-0x3ffdb060],al
c0013aeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013aef:	8d 50 01             	lea    edx,[eax+0x1]
c0013af2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013af6:	8a 15 60 4f 02 c0    	mov    dl,BYTE PTR ds:0xc0024f60
c0013afc:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013aff:	88 0d 60 4f 02 c0    	mov    BYTE PTR ds:0xc0024f60,cl
c0013b05:	0f b6 d2             	movzx  edx,dl
c0013b08:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b0c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b10:	88 82 80 4f 02 c0    	mov    BYTE PTR [edx-0x3ffdb080],al
c0013b16:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013b1b:	e9 ea 01 00 00       	jmp    c0013d0a <scanMADT()+0x378>
c0013b20:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013b25:	0f 85 14 01 00 00    	jne    c0013c3f <scanMADT()+0x2ad>
c0013b2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b2f:	8d 50 01             	lea    edx,[eax+0x1]
c0013b32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b36:	8a 15 30 4e 02 c0    	mov    dl,BYTE PTR ds:0xc0024e30
c0013b3c:	0f b6 d2             	movzx  edx,dl
c0013b3f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b43:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b47:	88 82 40 4e 02 c0    	mov    BYTE PTR [edx-0x3ffdb1c0],al
c0013b4d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013b51:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b59:	01 d0                	add    eax,edx
c0013b5b:	83 c0 2c             	add    eax,0x2c
c0013b5e:	8a 00                	mov    al,BYTE PTR [eax]
c0013b60:	0f b6 d0             	movzx  edx,al
c0013b63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b67:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b6e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b72:	0f b6 c0             	movzx  eax,al
c0013b75:	c1 e0 08             	shl    eax,0x8
c0013b78:	89 d1                	mov    ecx,edx
c0013b7a:	09 c1                	or     ecx,eax
c0013b7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b80:	8d 50 02             	lea    edx,[eax+0x2]
c0013b83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b87:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b8b:	0f b6 c0             	movzx  eax,al
c0013b8e:	c1 e0 10             	shl    eax,0x10
c0013b91:	09 c1                	or     ecx,eax
c0013b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b97:	8d 50 03             	lea    edx,[eax+0x3]
c0013b9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b9e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ba2:	0f b6 c0             	movzx  eax,al
c0013ba5:	c1 e0 18             	shl    eax,0x18
c0013ba8:	09 c1                	or     ecx,eax
c0013baa:	89 ca                	mov    edx,ecx
c0013bac:	a0 30 4e 02 c0       	mov    al,ds:0xc0024e30
c0013bb1:	0f b6 c0             	movzx  eax,al
c0013bb4:	89 14 85 60 4e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb1a0],edx
c0013bbb:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bc8:	01 d0                	add    eax,edx
c0013bca:	83 c0 2c             	add    eax,0x2c
c0013bcd:	8a 00                	mov    al,BYTE PTR [eax]
c0013bcf:	0f b6 d0             	movzx  edx,al
c0013bd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bd6:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bdd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013be1:	0f b6 c0             	movzx  eax,al
c0013be4:	c1 e0 08             	shl    eax,0x8
c0013be7:	89 d1                	mov    ecx,edx
c0013be9:	09 c1                	or     ecx,eax
c0013beb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bef:	8d 50 02             	lea    edx,[eax+0x2]
c0013bf2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bf6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013bfa:	0f b6 c0             	movzx  eax,al
c0013bfd:	c1 e0 10             	shl    eax,0x10
c0013c00:	09 c1                	or     ecx,eax
c0013c02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c06:	8d 50 03             	lea    edx,[eax+0x3]
c0013c09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c0d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c11:	0f b6 c0             	movzx  eax,al
c0013c14:	c1 e0 18             	shl    eax,0x18
c0013c17:	09 c1                	or     ecx,eax
c0013c19:	89 ca                	mov    edx,ecx
c0013c1b:	a0 30 4e 02 c0       	mov    al,ds:0xc0024e30
c0013c20:	0f b6 c0             	movzx  eax,al
c0013c23:	89 14 85 e0 4e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb120],edx
c0013c2a:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c2f:	a0 30 4e 02 c0       	mov    al,ds:0xc0024e30
c0013c34:	40                   	inc    eax
c0013c35:	a2 30 4e 02 c0       	mov    ds:0xc0024e30,al
c0013c3a:	e9 cb 00 00 00       	jmp    c0013d0a <scanMADT()+0x378>
c0013c3f:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013c44:	0f 85 a6 00 00 00    	jne    c0013cf0 <scanMADT()+0x35e>
c0013c4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c4e:	8d 50 01             	lea    edx,[eax+0x1]
c0013c51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c55:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c59:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c5d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013c61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c65:	8d 50 01             	lea    edx,[eax+0x1]
c0013c68:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c70:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c74:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013c78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c80:	01 d0                	add    eax,edx
c0013c82:	83 c0 2c             	add    eax,0x2c
c0013c85:	8a 00                	mov    al,BYTE PTR [eax]
c0013c87:	0f b6 d0             	movzx  edx,al
c0013c8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c8e:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c95:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c99:	0f b6 c0             	movzx  eax,al
c0013c9c:	c1 e0 08             	shl    eax,0x8
c0013c9f:	89 d1                	mov    ecx,edx
c0013ca1:	09 c1                	or     ecx,eax
c0013ca3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca7:	8d 50 02             	lea    edx,[eax+0x2]
c0013caa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cb2:	0f b6 c0             	movzx  eax,al
c0013cb5:	c1 e0 10             	shl    eax,0x10
c0013cb8:	09 c1                	or     ecx,eax
c0013cba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cbe:	8d 50 03             	lea    edx,[eax+0x3]
c0013cc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cc9:	0f b6 c0             	movzx  eax,al
c0013ccc:	c1 e0 18             	shl    eax,0x18
c0013ccf:	09 c8                	or     eax,ecx
c0013cd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cd5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cda:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013cdf:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013ce4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ce8:	88 90 e0 3c 02 c0    	mov    BYTE PTR [eax-0x3ffdc320],dl
c0013cee:	eb 1a                	jmp    c0013d0a <scanMADT()+0x378>
c0013cf0:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013cf5:	75 07                	jne    c0013cfe <scanMADT()+0x36c>
c0013cf7:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cfc:	eb 0c                	jmp    c0013d0a <scanMADT()+0x378>
c0013cfe:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013d03:	75 05                	jne    c0013d0a <scanMADT()+0x378>
c0013d05:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013d0a:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013d0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d13:	01 d0                	add    eax,edx
c0013d15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d19:	e9 44 fd ff ff       	jmp    c0013a62 <scanMADT()+0xd0>
c0013d1e:	90                   	nop
c0013d1f:	eb 01                	jmp    c0013d22 <scanMADT()+0x390>
c0013d21:	90                   	nop
c0013d22:	83 c4 2c             	add    esp,0x2c
c0013d25:	c3                   	ret    

c0013d26 <ACPI::ACPI()>:
c0013d26:	83 ec 0c             	sub    esp,0xc
c0013d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2d:	83 ec 08             	sub    esp,0x8
c0013d30:	68 f3 20 02 c0       	push   0xc00220f3
c0013d35:	50                   	push   eax
c0013d36:	e8 23 ca ff ff       	call   c001075e <Device::Device(char const*)>
c0013d3b:	83 c4 10             	add    esp,0x10
c0013d3e:	ba 9c 22 02 c0       	mov    edx,0xc002229c
c0013d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d47:	89 10                	mov    DWORD PTR [eax],edx
c0013d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d58:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d66:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d74:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013d7b:	e8 12 fc ff ff       	call   c0013992 <scanMADT()>
c0013d80:	90                   	nop
c0013d81:	83 c4 0c             	add    esp,0xc
c0013d84:	c3                   	ret    
c0013d85:	90                   	nop

c0013d86 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013d86:	83 ec 2c             	sub    esp,0x2c
c0013d89:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013d8d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d91:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013d95:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d99:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013d9e:	88 d0                	mov    al,dl
c0013da0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013da4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013da9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013db1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013db5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013dbb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013dbf:	0f 8d 97 00 00 00    	jge    c0013e5c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013dc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013dc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dcd:	83 c2 2a             	add    edx,0x2a
c0013dd0:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013dd4:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013dd9:	75 78                	jne    c0013e53 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ddb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ddf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013de3:	83 c2 2a             	add    edx,0x2a
c0013de6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013dea:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013dee:	75 63                	jne    c0013e53 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013df0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013df5:	74 3a                	je     c0013e31 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013df7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013dfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dff:	83 c2 2a             	add    edx,0x2a
c0013e02:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013e06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013e0d:	39 c2                	cmp    edx,eax
c0013e0f:	74 10                	je     c0013e21 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013e11:	83 ec 0c             	sub    esp,0xc
c0013e14:	68 00 22 02 c0       	push   0xc0022200
c0013e19:	e8 2a 1b 00 00       	call   c0015948 <Krnl::panic(char const*)>
c0013e1e:	83 c4 10             	add    esp,0x10
c0013e21:	83 ec 0c             	sub    esp,0xc
c0013e24:	68 f8 20 02 c0       	push   0xc00220f8
c0013e29:	e8 1a 1b 00 00       	call   c0015948 <Krnl::panic(char const*)>
c0013e2e:	83 c4 10             	add    esp,0x10
c0013e31:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e39:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e3d:	83 c2 2a             	add    edx,0x2a
c0013e40:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013e44:	8b 02                	mov    eax,DWORD PTR [edx]
c0013e46:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013e49:	89 01                	mov    DWORD PTR [ecx],eax
c0013e4b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013e4e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013e53:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013e57:	e9 55 ff ff ff       	jmp    c0013db1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013e5c:	90                   	nop
c0013e5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e61:	83 c4 2c             	add    esp,0x2c
c0013e64:	c2 04 00             	ret    0x4
c0013e67:	90                   	nop

c0013e68 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013e68:	56                   	push   esi
c0013e69:	53                   	push   ebx
c0013e6a:	83 ec 14             	sub    esp,0x14
c0013e6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e71:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013e79:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013e7e:	88 c8                	mov    al,cl
c0013e80:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013e84:	88 d0                	mov    al,dl
c0013e86:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e8e:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e98:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013e9e:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013ea3:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013ea8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013ead:	83 ec 04             	sub    esp,0x4
c0013eb0:	56                   	push   esi
c0013eb1:	53                   	push   ebx
c0013eb2:	51                   	push   ecx
c0013eb3:	52                   	push   edx
c0013eb4:	50                   	push   eax
c0013eb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013eb9:	68 30 22 02 c0       	push   0xc0022230
c0013ebe:	e8 96 b2 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0013ec3:	83 c4 20             	add    esp,0x20
c0013ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eca:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ed4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013ed7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013edb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ee3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013ee9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013eed:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013ef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ef4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013ef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013efd:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013f03:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f07:	8d 48 01             	lea    ecx,[eax+0x1]
c0013f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f0e:	83 c2 2a             	add    edx,0x2a
c0013f11:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f19:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013f1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f23:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013f26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f2a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f32:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f38:	8d 50 01             	lea    edx,[eax+0x1]
c0013f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f3f:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f49:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f4f:	3d 00 08 00 00       	cmp    eax,0x800
c0013f54:	75 10                	jne    c0013f66 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013f56:	83 ec 0c             	sub    esp,0xc
c0013f59:	68 07 21 02 c0       	push   0xc0022107
c0013f5e:	e8 e5 19 00 00       	call   c0015948 <Krnl::panic(char const*)>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	90                   	nop
c0013f67:	83 c4 14             	add    esp,0x14
c0013f6a:	5b                   	pop    ebx
c0013f6b:	5e                   	pop    esi
c0013f6c:	c3                   	ret    
c0013f6d:	90                   	nop

c0013f6e <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013f6e:	b8 00 00 00 00       	mov    eax,0x0
c0013f73:	c3                   	ret    

c0013f74 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013f74:	83 ec 1c             	sub    esp,0x1c
c0013f77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013f7b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013f7e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013f82:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0013f87:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f8c:	83 ec 08             	sub    esp,0x8
c0013f8f:	52                   	push   edx
c0013f90:	50                   	push   eax
c0013f91:	e8 66 76 ff ff       	call   c000b5fc <Computer::readCMOS(unsigned char)>
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013f9d:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0013fa2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013fa7:	83 ec 04             	sub    esp,0x4
c0013faa:	6a 01                	push   0x1
c0013fac:	52                   	push   edx
c0013fad:	50                   	push   eax
c0013fae:	e8 5f 77 ff ff       	call   c000b712 <Computer::writeCMOS(unsigned char, unsigned char)>
c0013fb3:	83 c4 10             	add    esp,0x10
c0013fb6:	90                   	nop
c0013fb7:	83 c4 1c             	add    esp,0x1c
c0013fba:	c3                   	ret    
c0013fbb:	90                   	nop

c0013fbc <ACPI::open(int, int, void*)>:
c0013fbc:	53                   	push   ebx
c0013fbd:	83 ec 18             	sub    esp,0x18
c0013fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc4:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fcf:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013fd5:	84 c0                	test   al,al
c0013fd7:	74 60                	je     c0014039 <ACPI::open(int, int, void*)+0x7d>
c0013fd9:	83 ec 0c             	sub    esp,0xc
c0013fdc:	68 58 01 00 00       	push   0x158
c0013fe1:	e8 3e b0 ff ff       	call   c000f024 <operator new(unsigned long)>
c0013fe6:	83 c4 10             	add    esp,0x10
c0013fe9:	89 c3                	mov    ebx,eax
c0013feb:	83 ec 0c             	sub    esp,0xc
c0013fee:	53                   	push   ebx
c0013fef:	e8 8c 80 00 00       	call   c001c080 <PCI::PCI()>
c0013ff4:	83 c4 10             	add    esp,0x10
c0013ff7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0013ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fff:	83 ec 08             	sub    esp,0x8
c0014002:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014006:	50                   	push   eax
c0014007:	e8 62 c5 ff ff       	call   c001056e <Device::addChild(Device*)>
c001400c:	83 c4 10             	add    esp,0x10
c001400f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014013:	8b 00                	mov    eax,DWORD PTR [eax]
c0014015:	83 c0 08             	add    eax,0x8
c0014018:	8b 00                	mov    eax,DWORD PTR [eax]
c001401a:	6a 00                	push   0x0
c001401c:	6a 00                	push   0x0
c001401e:	6a 00                	push   0x0
c0014020:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014024:	ff d0                	call   eax
c0014026:	83 c4 10             	add    esp,0x10
c0014029:	83 ec 0c             	sub    esp,0xc
c001402c:	68 24 21 02 c0       	push   0xc0022124
c0014031:	e8 23 b1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014036:	83 c4 10             	add    esp,0x10
c0014039:	83 ec 0c             	sub    esp,0xc
c001403c:	68 2f 21 02 c0       	push   0xc002212f
c0014041:	e8 28 38 00 00       	call   c001786e <Thr::loadKernelSymbolTable(char const*)>
c0014046:	83 c4 10             	add    esp,0x10
c0014049:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c001404f:	83 ec 08             	sub    esp,0x8
c0014052:	6a 01                	push   0x1
c0014054:	68 4d 21 02 c0       	push   0xc002214d
c0014059:	e8 f2 42 00 00       	call   c0018350 <Thr::loadDLL(char const*, bool)>
c001405e:	83 c4 10             	add    esp,0x10
c0014061:	83 ec 08             	sub    esp,0x8
c0014064:	53                   	push   ebx
c0014065:	50                   	push   eax
c0014066:	e8 ab 44 00 00       	call   c0018516 <Thr::executeDLL(unsigned long, void*)>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c0014074:	83 ec 08             	sub    esp,0x8
c0014077:	6a 01                	push   0x1
c0014079:	68 6a 21 02 c0       	push   0xc002216a
c001407e:	e8 cd 42 00 00       	call   c0018350 <Thr::loadDLL(char const*, bool)>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	83 ec 08             	sub    esp,0x8
c0014089:	53                   	push   ebx
c001408a:	50                   	push   eax
c001408b:	e8 86 44 00 00       	call   c0018516 <Thr::executeDLL(unsigned long, void*)>
c0014090:	83 c4 10             	add    esp,0x10
c0014093:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0014098:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001409e:	83 e0 04             	and    eax,0x4
c00140a1:	84 c0                	test   al,al
c00140a3:	0f 84 cf 00 00 00    	je     c0014178 <ACPI::open(int, int, void*)+0x1bc>
c00140a9:	83 ec 0c             	sub    esp,0xc
c00140ac:	68 14 01 00 00       	push   0x114
c00140b1:	e8 6e af ff ff       	call   c000f024 <operator new(unsigned long)>
c00140b6:	83 c4 10             	add    esp,0x10
c00140b9:	89 c3                	mov    ebx,eax
c00140bb:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00140c0:	83 ec 04             	sub    esp,0x4
c00140c3:	50                   	push   eax
c00140c4:	68 87 21 02 c0       	push   0xc0022187
c00140c9:	53                   	push   ebx
c00140ca:	e8 c1 b5 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00140d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00140db:	74 17                	je     c00140f4 <ACPI::open(int, int, void*)+0x138>
c00140dd:	83 ec 0c             	sub    esp,0xc
c00140e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140e4:	e8 79 b8 ff ff       	call   c000f962 <File::exists()>
c00140e9:	83 c4 10             	add    esp,0x10
c00140ec:	84 c0                	test   al,al
c00140ee:	74 04                	je     c00140f4 <ACPI::open(int, int, void*)+0x138>
c00140f0:	b0 01                	mov    al,0x1
c00140f2:	eb 02                	jmp    c00140f6 <ACPI::open(int, int, void*)+0x13a>
c00140f4:	b0 00                	mov    al,0x0
c00140f6:	84 c0                	test   al,al
c00140f8:	74 25                	je     c001411f <ACPI::open(int, int, void*)+0x163>
c00140fa:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c0014100:	83 ec 08             	sub    esp,0x8
c0014103:	6a 01                	push   0x1
c0014105:	68 87 21 02 c0       	push   0xc0022187
c001410a:	e8 41 42 00 00       	call   c0018350 <Thr::loadDLL(char const*, bool)>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	83 ec 08             	sub    esp,0x8
c0014115:	53                   	push   ebx
c0014116:	50                   	push   eax
c0014117:	e8 fa 43 00 00       	call   c0018516 <Thr::executeDLL(unsigned long, void*)>
c001411c:	83 c4 10             	add    esp,0x10
c001411f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014124:	74 1e                	je     c0014144 <ACPI::open(int, int, void*)+0x188>
c0014126:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001412b:	74 17                	je     c0014144 <ACPI::open(int, int, void*)+0x188>
c001412d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014131:	8b 00                	mov    eax,DWORD PTR [eax]
c0014133:	83 c0 08             	add    eax,0x8
c0014136:	8b 00                	mov    eax,DWORD PTR [eax]
c0014138:	83 ec 0c             	sub    esp,0xc
c001413b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001413f:	ff d0                	call   eax
c0014141:	83 c4 10             	add    esp,0x10
c0014144:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0014149:	83 ec 08             	sub    esp,0x8
c001414c:	68 a4 21 02 c0       	push   0xc00221a4
c0014151:	50                   	push   eax
c0014152:	e8 9f f7 ff ff       	call   c00138f6 <findDataTable(unsigned char*, char*)>
c0014157:	83 c4 10             	add    esp,0x10
c001415a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001415e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0014163:	74 13                	je     c0014178 <ACPI::open(int, int, void*)+0x1bc>
c0014165:	83 ec 08             	sub    esp,0x8
c0014168:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001416c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014170:	e8 ff fd ff ff       	call   c0013f74 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	b8 00 00 00 00       	mov    eax,0x0
c001417d:	83 c4 18             	add    esp,0x18
c0014180:	5b                   	pop    ebx
c0014181:	c3                   	ret    

c0014182 <ACPI::sleep()>:
c0014182:	83 ec 0c             	sub    esp,0xc
c0014185:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c001418a:	85 c0                	test   eax,eax
c001418c:	74 07                	je     c0014195 <ACPI::sleep()+0x13>
c001418e:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c0014193:	ff d0                	call   eax
c0014195:	90                   	nop
c0014196:	83 c4 0c             	add    esp,0xc
c0014199:	c3                   	ret    

c001419a <CPU::close(int, int, void*)>:
c001419a:	31 c0                	xor    eax,eax
c001419c:	c3                   	ret    

c001419d <lookupAMDCPUName(unsigned char, unsigned char)>:
c001419d:	55                   	push   ebp
c001419e:	57                   	push   edi
c001419f:	56                   	push   esi
c00141a0:	53                   	push   ebx
c00141a1:	51                   	push   ecx
c00141a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141a6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141aa:	89 d6                	mov    esi,edx
c00141ac:	89 cd                	mov    ebp,ecx
c00141ae:	80 fa 04             	cmp    dl,0x4
c00141b1:	75 28                	jne    c00141db <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00141b3:	8d 41 f9             	lea    eax,[ecx-0x7]
c00141b6:	3c 03                	cmp    al,0x3
c00141b8:	0f 86 64 01 00 00    	jbe    c0014322 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00141be:	80 f9 03             	cmp    cl,0x3
c00141c1:	0f 84 5b 01 00 00    	je     c0014322 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00141c7:	8d 79 f2             	lea    edi,[ecx-0xe]
c00141ca:	b8 b0 3e 02 c0       	mov    eax,0xc0023eb0
c00141cf:	89 fb                	mov    ebx,edi
c00141d1:	80 fb 01             	cmp    bl,0x1
c00141d4:	77 4e                	ja     c0014224 <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00141d6:	e9 61 01 00 00       	jmp    c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00141db:	80 fa 05             	cmp    dl,0x5
c00141de:	75 4d                	jne    c001422d <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00141e0:	b8 c0 3e 02 c0       	mov    eax,0xc0023ec0
c00141e5:	80 f9 03             	cmp    cl,0x3
c00141e8:	0f 86 4e 01 00 00    	jbe    c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00141ee:	8d 79 fa             	lea    edi,[ecx-0x6]
c00141f1:	b8 d0 3e 02 c0       	mov    eax,0xc0023ed0
c00141f6:	89 fb                	mov    ebx,edi
c00141f8:	80 fb 01             	cmp    bl,0x1
c00141fb:	0f 86 3b 01 00 00    	jbe    c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014201:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c0014206:	80 f9 08             	cmp    cl,0x8
c0014209:	0f 84 2d 01 00 00    	je     c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001420f:	89 cf                	mov    edi,ecx
c0014211:	b8 f0 3e 02 c0       	mov    eax,0xc0023ef0
c0014216:	83 e7 fb             	and    edi,0xfffffffb
c0014219:	89 fb                	mov    ebx,edi
c001421b:	80 fb 09             	cmp    bl,0x9
c001421e:	0f 84 18 01 00 00    	je     c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014224:	31 c0                	xor    eax,eax
c0014226:	89 eb                	mov    ebx,ebp
c0014228:	0f b6 fb             	movzx  edi,bl
c001422b:	eb 30                	jmp    c001425d <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c001422d:	31 c0                	xor    eax,eax
c001422f:	80 fa 06             	cmp    dl,0x6
c0014232:	75 f2                	jne    c0014226 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014234:	80 f9 0a             	cmp    cl,0xa
c0014237:	77 ed                	ja     c0014226 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014239:	bf de 05 00 00       	mov    edi,0x5de
c001423e:	0f a3 cf             	bt     edi,ecx
c0014241:	73 e3                	jae    c0014226 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014243:	b8 00 3f 02 c0       	mov    eax,0xc0023f00
c0014248:	e9 ef 00 00 00       	jmp    c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001424d:	39 c7                	cmp    edi,eax
c001424f:	0f 84 d4 00 00 00    	je     c0014329 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0014255:	40                   	inc    eax
c0014256:	3d d0 00 00 00       	cmp    eax,0xd0
c001425b:	74 09                	je     c0014266 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c001425d:	89 f3                	mov    ebx,esi
c001425f:	80 fb 0f             	cmp    bl,0xf
c0014262:	75 f1                	jne    c0014255 <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0014264:	eb e7                	jmp    c001424d <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0014266:	80 fa 10             	cmp    dl,0x10
c0014269:	75 19                	jne    c0014284 <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c001426b:	8d 41 fc             	lea    eax,[ecx-0x4]
c001426e:	83 e0 fb             	and    eax,0xfffffffb
c0014271:	3c 02                	cmp    al,0x2
c0014273:	0f 86 b7 00 00 00    	jbe    c0014330 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014279:	80 f9 02             	cmp    cl,0x2
c001427c:	0f 84 ae 00 00 00    	je     c0014330 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014282:	eb 13                	jmp    c0014297 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014284:	80 fa 11             	cmp    dl,0x11
c0014287:	75 0e                	jne    c0014297 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014289:	b8 10 3f 02 c0       	mov    eax,0xc0023f10
c001428e:	80 f9 03             	cmp    cl,0x3
c0014291:	0f 84 a5 00 00 00    	je     c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014297:	80 fa 12             	cmp    dl,0x12
c001429a:	75 0e                	jne    c00142aa <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c001429c:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c00142a1:	80 f9 01             	cmp    cl,0x1
c00142a4:	0f 84 92 00 00 00    	je     c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142aa:	80 fa 14             	cmp    dl,0x14
c00142ad:	be 01 00 00 00       	mov    esi,0x1
c00142b2:	0f 94 c3             	sete   bl
c00142b5:	80 f9 13             	cmp    cl,0x13
c00142b8:	77 0c                	ja     c00142c6 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00142ba:	be 04 00 09 00       	mov    esi,0x90004
c00142bf:	d3 ee                	shr    esi,cl
c00142c1:	f7 d6                	not    esi
c00142c3:	83 e6 01             	and    esi,0x1
c00142c6:	8d 41 ff             	lea    eax,[ecx-0x1]
c00142c9:	3c 01                	cmp    al,0x1
c00142cb:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c00142d0:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00142d5:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00142d9:	75 61                	jne    c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142db:	80 fa 15             	cmp    dl,0x15
c00142de:	75 1f                	jne    c00142ff <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00142e0:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c00142e5:	80 f9 01             	cmp    cl,0x1
c00142e8:	74 52                	je     c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142ea:	89 f3                	mov    ebx,esi
c00142ec:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c00142f1:	84 db                	test   bl,bl
c00142f3:	74 47                	je     c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142f5:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c00142fa:	80 f9 30             	cmp    cl,0x30
c00142fd:	74 3d                	je     c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142ff:	80 fa 16             	cmp    dl,0x16
c0014302:	0f 94 c2             	sete   dl
c0014305:	84 c9                	test   cl,cl
c0014307:	75 09                	jne    c0014312 <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0014309:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c001430e:	84 d2                	test   dl,dl
c0014310:	75 2a                	jne    c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014312:	80 f9 30             	cmp    cl,0x30
c0014315:	75 20                	jne    c0014337 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014317:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c001431c:	84 d2                	test   dl,dl
c001431e:	75 1c                	jne    c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014320:	eb 15                	jmp    c0014337 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014322:	b8 a0 3e 02 c0       	mov    eax,0xc0023ea0
c0014327:	eb 13                	jmp    c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014329:	b8 10 3f 02 c0       	mov    eax,0xc0023f10
c001432e:	eb 0c                	jmp    c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014330:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c0014335:	eb 05                	jmp    c001433c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014337:	b8 b2 25 02 c0       	mov    eax,0xc00225b2
c001433c:	5a                   	pop    edx
c001433d:	5b                   	pop    ebx
c001433e:	5e                   	pop    esi
c001433f:	5f                   	pop    edi
c0014340:	5d                   	pop    ebp
c0014341:	c3                   	ret    

c0014342 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0014342:	53                   	push   ebx
c0014343:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001434b:	80 f9 04             	cmp    cl,0x4
c001434e:	75 6a                	jne    c00143ba <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0014350:	b8 00 3d 02 c0       	mov    eax,0xc0023d00
c0014355:	80 fa 01             	cmp    dl,0x1
c0014358:	0f 86 9b 02 00 00    	jbe    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001435e:	b8 10 3d 02 c0       	mov    eax,0xc0023d10
c0014363:	80 fa 02             	cmp    dl,0x2
c0014366:	0f 84 8d 02 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001436c:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c0014371:	80 fa 03             	cmp    dl,0x3
c0014374:	0f 84 7f 02 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001437a:	b8 30 3d 02 c0       	mov    eax,0xc0023d30
c001437f:	80 fa 04             	cmp    dl,0x4
c0014382:	0f 84 71 02 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014388:	b8 40 3d 02 c0       	mov    eax,0xc0023d40
c001438d:	80 fa 05             	cmp    dl,0x5
c0014390:	0f 84 63 02 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014396:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c001439b:	80 fa 07             	cmp    dl,0x7
c001439e:	0f 84 55 02 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143a4:	8d 5a f8             	lea    ebx,[edx-0x8]
c00143a7:	b8 50 3d 02 c0       	mov    eax,0xc0023d50
c00143ac:	80 fb 01             	cmp    bl,0x1
c00143af:	0f 87 e0 01 00 00    	ja     c0014595 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00143b5:	e9 3f 02 00 00       	jmp    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143ba:	80 f9 05             	cmp    cl,0x5
c00143bd:	75 3e                	jne    c00143fd <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00143bf:	8d 5a ff             	lea    ebx,[edx-0x1]
c00143c2:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c00143c7:	80 fb 02             	cmp    bl,0x2
c00143ca:	0f 86 29 02 00 00    	jbe    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143d0:	80 fa 04             	cmp    dl,0x4
c00143d3:	0f 84 f1 01 00 00    	je     c00145ca <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00143d9:	80 fa 07             	cmp    dl,0x7
c00143dc:	0f 84 17 02 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143e2:	b8 70 3d 02 c0       	mov    eax,0xc0023d70
c00143e7:	80 fa 08             	cmp    dl,0x8
c00143ea:	0f 84 09 02 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143f0:	b8 80 3d 02 c0       	mov    eax,0xc0023d80
c00143f5:	80 fa 09             	cmp    dl,0x9
c00143f8:	e9 96 01 00 00       	jmp    c0014593 <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c00143fd:	80 f9 06             	cmp    cl,0x6
c0014400:	0f 85 80 01 00 00    	jne    c0014586 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c0014406:	b8 90 3d 02 c0       	mov    eax,0xc0023d90
c001440b:	80 fa 01             	cmp    dl,0x1
c001440e:	0f 84 e5 01 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014414:	8d 42 fb             	lea    eax,[edx-0x5]
c0014417:	3c 01                	cmp    al,0x1
c0014419:	0f 86 b2 01 00 00    	jbe    c00145d1 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c001441f:	80 fa 03             	cmp    dl,0x3
c0014422:	0f 84 a9 01 00 00    	je     c00145d1 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014428:	8d 5a f9             	lea    ebx,[edx-0x7]
c001442b:	b8 b0 3d 02 c0       	mov    eax,0xc0023db0
c0014430:	80 fb 01             	cmp    bl,0x1
c0014433:	0f 86 c0 01 00 00    	jbe    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014439:	80 fa 09             	cmp    dl,0x9
c001443c:	0f 84 96 01 00 00    	je     c00145d8 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014442:	8d 5a f6             	lea    ebx,[edx-0xa]
c0014445:	80 fb 01             	cmp    bl,0x1
c0014448:	0f 86 ab 01 00 00    	jbe    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001444e:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c0014453:	80 fa 0d             	cmp    dl,0xd
c0014456:	0f 84 9d 01 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001445c:	b8 d0 3d 02 c0       	mov    eax,0xc0023dd0
c0014461:	80 fa 0e             	cmp    dl,0xe
c0014464:	0f 84 8f 01 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001446a:	b8 e0 3d 02 c0       	mov    eax,0xc0023de0
c001446f:	80 fa 0f             	cmp    dl,0xf
c0014472:	0f 84 81 01 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014478:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c001447d:	80 fa 15             	cmp    dl,0x15
c0014480:	0f 84 73 01 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014486:	8d 5a ea             	lea    ebx,[edx-0x16]
c0014489:	b8 e0 3d 02 c0       	mov    eax,0xc0023de0
c001448e:	80 fb 01             	cmp    bl,0x1
c0014491:	0f 86 62 01 00 00    	jbe    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014497:	80 fa 1a             	cmp    dl,0x1a
c001449a:	0f 84 3f 01 00 00    	je     c00145df <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c00144a0:	80 fa 1c             	cmp    dl,0x1c
c00144a3:	0f 84 3d 01 00 00    	je     c00145e6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c00144a9:	80 fa 1d             	cmp    dl,0x1d
c00144ac:	0f 84 47 01 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144b2:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c00144b7:	80 fa 25             	cmp    dl,0x25
c00144ba:	0f 84 39 01 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144c0:	8d 5a da             	lea    ebx,[edx-0x26]
c00144c3:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c00144c8:	80 fb 01             	cmp    bl,0x1
c00144cb:	0f 86 28 01 00 00    	jbe    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144d1:	b8 20 3e 02 c0       	mov    eax,0xc0023e20
c00144d6:	80 fa 2a             	cmp    dl,0x2a
c00144d9:	0f 84 1a 01 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144df:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c00144e4:	80 fa 2c             	cmp    dl,0x2c
c00144e7:	0f 84 0c 01 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ed:	b8 20 3e 02 c0       	mov    eax,0xc0023e20
c00144f2:	80 fa 2d             	cmp    dl,0x2d
c00144f5:	0f 84 fe 00 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144fb:	b8 f0 3d 02 c0       	mov    eax,0xc0023df0
c0014500:	80 fa 2e             	cmp    dl,0x2e
c0014503:	0f 84 f0 00 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014509:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c001450e:	80 fa 2f             	cmp    dl,0x2f
c0014511:	0f 84 e2 00 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014517:	8d 5a cb             	lea    ebx,[edx-0x35]
c001451a:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c001451f:	80 fb 01             	cmp    bl,0x1
c0014522:	0f 86 d1 00 00 00    	jbe    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014528:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c001452d:	80 fa 37             	cmp    dl,0x37
c0014530:	0f 84 c3 00 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014536:	b8 40 3e 02 c0       	mov    eax,0xc0023e40
c001453b:	80 fa 3a             	cmp    dl,0x3a
c001453e:	0f 84 b5 00 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014544:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c0014549:	80 fa 3c             	cmp    dl,0x3c
c001454c:	0f 84 a7 00 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014552:	b8 60 3e 02 c0       	mov    eax,0xc0023e60
c0014557:	80 fa 3d             	cmp    dl,0x3d
c001455a:	0f 84 99 00 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014560:	b8 40 3e 02 c0       	mov    eax,0xc0023e40
c0014565:	80 fa 3e             	cmp    dl,0x3e
c0014568:	0f 84 8b 00 00 00    	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001456e:	8d 42 bb             	lea    eax,[edx-0x45]
c0014571:	3c 01                	cmp    al,0x1
c0014573:	76 78                	jbe    c00145ed <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014575:	80 fa 3f             	cmp    dl,0x3f
c0014578:	74 73                	je     c00145ed <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001457a:	80 fa 4a             	cmp    dl,0x4a
c001457d:	74 75                	je     c00145f4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c001457f:	80 fa 4d             	cmp    dl,0x4d
c0014582:	75 11                	jne    c0014595 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014584:	eb 6e                	jmp    c00145f4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014586:	80 f9 0b             	cmp    cl,0xb
c0014589:	75 0a                	jne    c0014595 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001458b:	b8 70 3e 02 c0       	mov    eax,0xc0023e70
c0014590:	80 fa 01             	cmp    dl,0x1
c0014593:	74 64                	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014595:	80 f9 0f             	cmp    cl,0xf
c0014598:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c001459d:	0f 94 c1             	sete   cl
c00145a0:	80 fa 02             	cmp    dl,0x2
c00145a3:	0f 96 c3             	setbe  bl
c00145a6:	84 cb                	test   bl,cl
c00145a8:	75 4f                	jne    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145aa:	8d 42 fd             	lea    eax,[edx-0x3]
c00145ad:	3c 01                	cmp    al,0x1
c00145af:	0f 96 c0             	setbe  al
c00145b2:	80 fa 06             	cmp    dl,0x6
c00145b5:	0f 94 c2             	sete   dl
c00145b8:	09 c2                	or     edx,eax
c00145ba:	b8 b2 25 02 c0       	mov    eax,0xc00225b2
c00145bf:	84 ca                	test   dl,cl
c00145c1:	74 36                	je     c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145c3:	b8 90 3e 02 c0       	mov    eax,0xc0023e90
c00145c8:	eb 2f                	jmp    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ca:	b8 70 3d 02 c0       	mov    eax,0xc0023d70
c00145cf:	eb 28                	jmp    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d1:	b8 a0 3d 02 c0       	mov    eax,0xc0023da0
c00145d6:	eb 21                	jmp    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d8:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c00145dd:	eb 1a                	jmp    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145df:	b8 f0 3d 02 c0       	mov    eax,0xc0023df0
c00145e4:	eb 13                	jmp    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e6:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c00145eb:	eb 0c                	jmp    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ed:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c00145f2:	eb 05                	jmp    c00145f9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f4:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c00145f9:	5b                   	pop    ebx
c00145fa:	c3                   	ret    

c00145fb <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00145fb:	60                   	pusha  
c00145fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014600:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014604:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014608:	9c                   	pushf  
c0014609:	fa                   	cli    
c001460a:	0f 09                	wbinvd 
c001460c:	0f 30                	wrmsr  
c001460e:	9d                   	popf   
c001460f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014613:	89 02                	mov    DWORD PTR [edx],eax
c0014615:	61                   	popa   
c0014616:	c3                   	ret    

c0014617 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014617:	60                   	pusha  
c0014618:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001461c:	9c                   	pushf  
c001461d:	fa                   	cli    
c001461e:	0f 09                	wbinvd 
c0014620:	31 c0                	xor    eax,eax
c0014622:	31 d2                	xor    edx,edx
c0014624:	0f 32                	rdmsr  
c0014626:	9d                   	popf   
c0014627:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001462b:	89 02                	mov    DWORD PTR [edx],eax
c001462d:	61                   	popa   
c001462e:	c3                   	ret    

c001462f <AMD_K6_writeback(int, int, int)>:
c001462f:	56                   	push   esi
c0014630:	53                   	push   ebx
c0014631:	83 ec 10             	sub    esp,0x10
c0014634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014638:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001463d:	75 5d                	jne    c001469c <AMD_K6_writeback(int, int, int)+0x6d>
c001463f:	83 f8 08             	cmp    eax,0x8
c0014642:	75 09                	jne    c001464d <AMD_K6_writeback(int, int, int)+0x1e>
c0014644:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014649:	7e 13                	jle    c001465e <AMD_K6_writeback(int, int, int)+0x2f>
c001464b:	eb 30                	jmp    c001467d <AMD_K6_writeback(int, int, int)+0x4e>
c001464d:	83 f8 06             	cmp    eax,0x6
c0014650:	7c 4a                	jl     c001469c <AMD_K6_writeback(int, int, int)+0x6d>
c0014652:	83 f8 07             	cmp    eax,0x7
c0014655:	7e 07                	jle    c001465e <AMD_K6_writeback(int, int, int)+0x2f>
c0014657:	83 f8 09             	cmp    eax,0x9
c001465a:	74 21                	je     c001467d <AMD_K6_writeback(int, int, int)+0x4e>
c001465c:	eb 3e                	jmp    c001469c <AMD_K6_writeback(int, int, int)+0x6d>
c001465e:	89 e6                	mov    esi,esp
c0014660:	8b 1d c4 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c4
c0014666:	c1 eb 15             	shr    ebx,0x15
c0014669:	56                   	push   esi
c001466a:	68 82 00 00 c0       	push   0xc0000082
c001466f:	e8 a3 ff ff ff       	call   c0014617 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014674:	56                   	push   esi
c0014675:	83 e3 7e             	and    ebx,0x7e
c0014678:	6a 00                	push   0x0
c001467a:	53                   	push   ebx
c001467b:	eb 12                	jmp    c001468f <AMD_K6_writeback(int, int, int)+0x60>
c001467d:	89 e3                	mov    ebx,esp
c001467f:	53                   	push   ebx
c0014680:	68 82 00 00 c0       	push   0xc0000082
c0014685:	e8 8d ff ff ff       	call   c0014617 <AMD_K6_read_msr(unsigned int, REGS*)>
c001468a:	53                   	push   ebx
c001468b:	6a 00                	push   0x0
c001468d:	6a 00                	push   0x0
c001468f:	68 82 00 00 c0       	push   0xc0000082
c0014694:	e8 62 ff ff ff       	call   c00145fb <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0014699:	83 c4 18             	add    esp,0x18
c001469c:	83 c4 10             	add    esp,0x10
c001469f:	5b                   	pop    ebx
c00146a0:	5e                   	pop    esi
c00146a1:	c3                   	ret    

c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00146a2:	55                   	push   ebp
c00146a3:	57                   	push   edi
c00146a4:	56                   	push   esi
c00146a5:	53                   	push   ebx
c00146a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146aa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00146ae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00146b2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00146b6:	39 05 a0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fa0,eax
c00146bc:	75 23                	jne    c00146e1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00146be:	a1 cc 4f 02 c0       	mov    eax,ds:0xc0024fcc
c00146c3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146c7:	89 06                	mov    DWORD PTR [esi],eax
c00146c9:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c00146ce:	89 07                	mov    DWORD PTR [edi],eax
c00146d0:	a1 c4 4f 02 c0       	mov    eax,ds:0xc0024fc4
c00146d5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00146d8:	a1 c0 4f 02 c0       	mov    eax,ds:0xc0024fc0
c00146dd:	89 02                	mov    DWORD PTR [edx],eax
c00146df:	eb 3f                	jmp    c0014720 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00146e1:	31 c9                	xor    ecx,ecx
c00146e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146e7:	0f a2                	cpuid  
c00146e9:	89 06                	mov    DWORD PTR [esi],eax
c00146eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146ef:	89 1f                	mov    DWORD PTR [edi],ebx
c00146f1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00146f4:	89 10                	mov    DWORD PTR [eax],edx
c00146f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146fa:	a3 a0 3f 02 c0       	mov    ds:0xc0023fa0,eax
c00146ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0014701:	a3 cc 4f 02 c0       	mov    ds:0xc0024fcc,eax
c0014706:	8b 07                	mov    eax,DWORD PTR [edi]
c0014708:	a3 c8 4f 02 c0       	mov    ds:0xc0024fc8,eax
c001470d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014710:	a3 c4 4f 02 c0       	mov    ds:0xc0024fc4,eax
c0014715:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014719:	8b 00                	mov    eax,DWORD PTR [eax]
c001471b:	a3 c0 4f 02 c0       	mov    ds:0xc0024fc0,eax
c0014720:	5b                   	pop    ebx
c0014721:	5e                   	pop    esi
c0014722:	5f                   	pop    edi
c0014723:	5d                   	pop    ebp
c0014724:	c3                   	ret    

c0014725 <cpuidCheckEDX(unsigned int)>:
c0014725:	83 ec 10             	sub    esp,0x10
c0014728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001472c:	50                   	push   eax
c001472d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014731:	50                   	push   eax
c0014732:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014736:	50                   	push   eax
c0014737:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001473b:	50                   	push   eax
c001473c:	6a 01                	push   0x1
c001473e:	e8 5f ff ff ff       	call   c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014747:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001474b:	0f 95 c0             	setne  al
c001474e:	83 c4 24             	add    esp,0x24
c0014751:	c3                   	ret    

c0014752 <cpuidCheckECX(unsigned int)>:
c0014752:	83 ec 10             	sub    esp,0x10
c0014755:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014759:	50                   	push   eax
c001475a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001475e:	50                   	push   eax
c001475f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014763:	50                   	push   eax
c0014764:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014768:	50                   	push   eax
c0014769:	6a 01                	push   0x1
c001476b:	e8 32 ff ff ff       	call   c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014770:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014774:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014778:	0f 95 c0             	setne  al
c001477b:	83 c4 24             	add    esp,0x24
c001477e:	c3                   	ret    

c001477f <cpuidCheckExtendedEBX(unsigned int)>:
c001477f:	83 ec 10             	sub    esp,0x10
c0014782:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014786:	50                   	push   eax
c0014787:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001478b:	50                   	push   eax
c001478c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014790:	50                   	push   eax
c0014791:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014795:	50                   	push   eax
c0014796:	6a 07                	push   0x7
c0014798:	e8 05 ff ff ff       	call   c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001479d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147a1:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00147a5:	0f 95 c0             	setne  al
c00147a8:	83 c4 24             	add    esp,0x24
c00147ab:	c3                   	ret    

c00147ac <cpuidCheckExtendedECX(unsigned int)>:
c00147ac:	83 ec 10             	sub    esp,0x10
c00147af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147b3:	50                   	push   eax
c00147b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147b8:	50                   	push   eax
c00147b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147bd:	50                   	push   eax
c00147be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147c2:	50                   	push   eax
c00147c3:	6a 07                	push   0x7
c00147c5:	e8 d8 fe ff ff       	call   c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00147ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147ce:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00147d2:	0f 95 c0             	setne  al
c00147d5:	83 c4 24             	add    esp,0x24
c00147d8:	c3                   	ret    

c00147d9 <getCPUNumber()>:
c00147d9:	31 c0                	xor    eax,eax
c00147db:	c3                   	ret    

c00147dc <thisCPU()>:
c00147dc:	e8 f8 ff ff ff       	call   c00147d9 <getCPUNumber()>
c00147e1:	8b 15 88 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024588
c00147e7:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00147ee:	c3                   	ret    
c00147ef:	90                   	nop

c00147f0 <CPU::CPU()>:
c00147f0:	83 ec 0c             	sub    esp,0xc
c00147f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f7:	83 ec 08             	sub    esp,0x8
c00147fa:	68 b2 25 02 c0       	push   0xc00225b2
c00147ff:	50                   	push   eax
c0014800:	e8 59 bf ff ff       	call   c001075e <Device::Device(char const*)>
c0014805:	83 c4 10             	add    esp,0x10
c0014808:	ba 8c 26 02 c0       	mov    edx,0xc002268c
c001480d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014811:	89 10                	mov    DWORD PTR [eax],edx
c0014813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014817:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0014821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014825:	05 78 01 00 00       	add    eax,0x178
c001482a:	83 ec 0c             	sub    esp,0xc
c001482d:	50                   	push   eax
c001482e:	e8 c9 6f ff ff       	call   c000b7fc <GDT::GDT()>
c0014833:	83 c4 10             	add    esp,0x10
c0014836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483a:	05 7c 09 00 00       	add    eax,0x97c
c001483f:	83 ec 0c             	sub    esp,0xc
c0014842:	50                   	push   eax
c0014843:	e8 14 72 ff ff       	call   c000ba5c <IDT::IDT()>
c0014848:	83 c4 10             	add    esp,0x10
c001484b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001484f:	05 7c 11 00 00       	add    eax,0x117c
c0014854:	83 ec 0c             	sub    esp,0xc
c0014857:	50                   	push   eax
c0014858:	e8 71 92 ff ff       	call   c000dace <TSS::TSS()>
c001485d:	83 c4 10             	add    esp,0x10
c0014860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014864:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001486b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014879:	90                   	nop
c001487a:	83 c4 0c             	add    esp,0xc
c001487d:	c3                   	ret    

c001487e <CPU::displayFeatures()>:
c001487e:	53                   	push   ebx
c001487f:	83 ec 10             	sub    esp,0x10
c0014882:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014886:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001488c:	68 c0 22 02 c0       	push   0xc00222c0
c0014891:	e8 c3 a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014896:	59                   	pop    ecx
c0014897:	58                   	pop    eax
c0014898:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001489e:	50                   	push   eax
c001489f:	68 d1 22 02 c0       	push   0xc00222d1
c00148a4:	e8 b0 a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00148a9:	58                   	pop    eax
c00148aa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00148b0:	c1 e8 0e             	shr    eax,0xe
c00148b3:	5a                   	pop    edx
c00148b4:	0f b6 c0             	movzx  eax,al
c00148b7:	50                   	push   eax
c00148b8:	68 e2 22 02 c0       	push   0xc00222e2
c00148bd:	e8 97 a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00148c2:	59                   	pop    ecx
c00148c3:	58                   	pop    eax
c00148c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00148ca:	66 c1 e8 06          	shr    ax,0x6
c00148ce:	0f b6 c0             	movzx  eax,al
c00148d1:	50                   	push   eax
c00148d2:	68 f3 22 02 c0       	push   0xc00222f3
c00148d7:	e8 7d a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00148dc:	c7 04 24 06 27 02 c0 	mov    DWORD PTR [esp],0xc0022706
c00148e3:	e8 71 a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00148e8:	83 c4 10             	add    esp,0x10
c00148eb:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c00148f0:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00148f7:	74 05                	je     c00148fe <CPU::displayFeatures()+0x80>
c00148f9:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c00148fe:	52                   	push   edx
c00148ff:	52                   	push   edx
c0014900:	50                   	push   eax
c0014901:	68 04 23 02 c0       	push   0xc0022304
c0014906:	e8 4e a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c0014913:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001491a:	78 05                	js     c0014921 <CPU::displayFeatures()+0xa3>
c001491c:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c0014921:	51                   	push   ecx
c0014922:	51                   	push   ecx
c0014923:	50                   	push   eax
c0014924:	68 1b 23 02 c0       	push   0xc002231b
c0014929:	e8 2b a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001492e:	83 c4 10             	add    esp,0x10
c0014931:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c0014936:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001493d:	75 05                	jne    c0014944 <CPU::displayFeatures()+0xc6>
c001493f:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c0014944:	52                   	push   edx
c0014945:	52                   	push   edx
c0014946:	50                   	push   eax
c0014947:	68 32 23 02 c0       	push   0xc0022332
c001494c:	e8 08 a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014951:	83 c4 10             	add    esp,0x10
c0014954:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c0014959:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014960:	75 05                	jne    c0014967 <CPU::displayFeatures()+0xe9>
c0014962:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c0014967:	51                   	push   ecx
c0014968:	51                   	push   ecx
c0014969:	50                   	push   eax
c001496a:	68 49 23 02 c0       	push   0xc0022349
c001496f:	e8 e5 a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014974:	83 c4 10             	add    esp,0x10
c0014977:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c001497c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014983:	75 05                	jne    c001498a <CPU::displayFeatures()+0x10c>
c0014985:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c001498a:	52                   	push   edx
c001498b:	52                   	push   edx
c001498c:	50                   	push   eax
c001498d:	68 60 23 02 c0       	push   0xc0022360
c0014992:	e8 c2 a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014997:	83 c4 10             	add    esp,0x10
c001499a:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c001499f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00149a6:	75 05                	jne    c00149ad <CPU::displayFeatures()+0x12f>
c00149a8:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c00149ad:	51                   	push   ecx
c00149ae:	51                   	push   ecx
c00149af:	50                   	push   eax
c00149b0:	68 77 23 02 c0       	push   0xc0022377
c00149b5:	e8 9f a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00149ba:	83 c4 10             	add    esp,0x10
c00149bd:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c00149c2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00149c9:	75 05                	jne    c00149d0 <CPU::displayFeatures()+0x152>
c00149cb:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c00149d0:	52                   	push   edx
c00149d1:	52                   	push   edx
c00149d2:	50                   	push   eax
c00149d3:	68 8e 23 02 c0       	push   0xc002238e
c00149d8:	e8 7c a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00149dd:	83 c4 10             	add    esp,0x10
c00149e0:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c00149e5:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00149ec:	75 05                	jne    c00149f3 <CPU::displayFeatures()+0x175>
c00149ee:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c00149f3:	51                   	push   ecx
c00149f4:	51                   	push   ecx
c00149f5:	50                   	push   eax
c00149f6:	68 a5 23 02 c0       	push   0xc00223a5
c00149fb:	e8 59 a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014a00:	83 c4 10             	add    esp,0x10
c0014a03:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c0014a08:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014a0f:	75 05                	jne    c0014a16 <CPU::displayFeatures()+0x198>
c0014a11:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c0014a16:	52                   	push   edx
c0014a17:	52                   	push   edx
c0014a18:	50                   	push   eax
c0014a19:	68 bc 23 02 c0       	push   0xc00223bc
c0014a1e:	e8 36 a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014a23:	83 c4 10             	add    esp,0x10
c0014a26:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c0014a2b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014a32:	75 05                	jne    c0014a39 <CPU::displayFeatures()+0x1bb>
c0014a34:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c0014a39:	51                   	push   ecx
c0014a3a:	51                   	push   ecx
c0014a3b:	50                   	push   eax
c0014a3c:	68 d3 23 02 c0       	push   0xc00223d3
c0014a41:	e8 13 a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014a46:	83 c4 10             	add    esp,0x10
c0014a49:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c0014a4e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014a55:	75 05                	jne    c0014a5c <CPU::displayFeatures()+0x1de>
c0014a57:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c0014a5c:	52                   	push   edx
c0014a5d:	52                   	push   edx
c0014a5e:	50                   	push   eax
c0014a5f:	68 ea 23 02 c0       	push   0xc00223ea
c0014a64:	e8 f0 a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014a69:	83 c4 10             	add    esp,0x10
c0014a6c:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c0014a71:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014a78:	75 05                	jne    c0014a7f <CPU::displayFeatures()+0x201>
c0014a7a:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c0014a7f:	51                   	push   ecx
c0014a80:	51                   	push   ecx
c0014a81:	50                   	push   eax
c0014a82:	68 01 24 02 c0       	push   0xc0022401
c0014a87:	e8 cd a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014a8c:	83 c4 10             	add    esp,0x10
c0014a8f:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c0014a94:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014a9b:	75 05                	jne    c0014aa2 <CPU::displayFeatures()+0x224>
c0014a9d:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c0014aa2:	52                   	push   edx
c0014aa3:	52                   	push   edx
c0014aa4:	50                   	push   eax
c0014aa5:	68 18 24 02 c0       	push   0xc0022418
c0014aaa:	e8 aa a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014aaf:	83 c4 10             	add    esp,0x10
c0014ab2:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c0014ab7:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014abe:	78 05                	js     c0014ac5 <CPU::displayFeatures()+0x247>
c0014ac0:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c0014ac5:	51                   	push   ecx
c0014ac6:	51                   	push   ecx
c0014ac7:	50                   	push   eax
c0014ac8:	68 2f 24 02 c0       	push   0xc002242f
c0014acd:	e8 87 a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014ad2:	83 c4 10             	add    esp,0x10
c0014ad5:	b8 ce 0f 02 c0       	mov    eax,0xc0020fce
c0014ada:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014ae1:	75 05                	jne    c0014ae8 <CPU::displayFeatures()+0x26a>
c0014ae3:	b8 d2 0f 02 c0       	mov    eax,0xc0020fd2
c0014ae8:	52                   	push   edx
c0014ae9:	52                   	push   edx
c0014aea:	50                   	push   eax
c0014aeb:	68 46 24 02 c0       	push   0xc0022446
c0014af0:	e8 64 a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014af5:	83 c4 18             	add    esp,0x18
c0014af8:	5b                   	pop    ebx
c0014af9:	c3                   	ret    

c0014afa <CPU::detectFeatures()>:
c0014afa:	55                   	push   ebp
c0014afb:	57                   	push   edi
c0014afc:	56                   	push   esi
c0014afd:	53                   	push   ebx
c0014afe:	83 ec 50             	sub    esp,0x50
c0014b01:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014b05:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014b0f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014b16:	6a 0d                	push   0xd
c0014b18:	6a 00                	push   0x0
c0014b1a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014b20:	57                   	push   edi
c0014b21:	e8 94 bb fe ff       	call   c00006ba <memset>
c0014b26:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0014b2b:	83 c4 10             	add    esp,0x10
c0014b2e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014b35:	0f 84 04 09 00 00    	je     c001543f <CPU::detectFeatures()+0x945>
c0014b3b:	83 ec 0c             	sub    esp,0xc
c0014b3e:	6a 10                	push   0x10
c0014b40:	e8 e0 fb ff ff       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c0014b45:	83 e0 01             	and    eax,0x1
c0014b48:	8d 14 00             	lea    edx,[eax+eax*1]
c0014b4b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b51:	83 e0 fd             	and    eax,0xfffffffd
c0014b54:	09 d0                	or     eax,edx
c0014b56:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b5c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014b63:	e8 bd fb ff ff       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c0014b68:	83 e0 01             	and    eax,0x1
c0014b6b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014b72:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b78:	83 e0 fb             	and    eax,0xfffffffb
c0014b7b:	09 d0                	or     eax,edx
c0014b7d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b83:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014b8a:	e8 96 fb ff ff       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c0014b8f:	83 e0 01             	and    eax,0x1
c0014b92:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014b99:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b9f:	83 e0 f7             	and    eax,0xfffffff7
c0014ba2:	09 d0                	or     eax,edx
c0014ba4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014baa:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014bb1:	e8 6f fb ff ff       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c0014bb6:	83 e0 01             	and    eax,0x1
c0014bb9:	c1 e0 04             	shl    eax,0x4
c0014bbc:	88 c2                	mov    dl,al
c0014bbe:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014bc4:	83 e0 ef             	and    eax,0xffffffef
c0014bc7:	09 d0                	or     eax,edx
c0014bc9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bcf:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014bd6:	e8 4a fb ff ff       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c0014bdb:	83 e0 01             	and    eax,0x1
c0014bde:	c1 e0 05             	shl    eax,0x5
c0014be1:	88 c2                	mov    dl,al
c0014be3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014be9:	83 e0 df             	and    eax,0xffffffdf
c0014bec:	09 d0                	or     eax,edx
c0014bee:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bf4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014bfb:	e8 25 fb ff ff       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c0014c00:	83 e0 01             	and    eax,0x1
c0014c03:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c06:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014c0c:	83 e0 fd             	and    eax,0xfffffffd
c0014c0f:	09 d0                	or     eax,edx
c0014c11:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014c17:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014c1e:	e8 02 fb ff ff       	call   c0014725 <cpuidCheckEDX(unsigned int)>
c0014c23:	83 e0 01             	and    eax,0x1
c0014c26:	c1 e0 06             	shl    eax,0x6
c0014c29:	88 c2                	mov    dl,al
c0014c2b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014c31:	83 e0 bf             	and    eax,0xffffffbf
c0014c34:	09 d0                	or     eax,edx
c0014c36:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014c3c:	58                   	pop    eax
c0014c3d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014c41:	56                   	push   esi
c0014c42:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014c46:	55                   	push   ebp
c0014c47:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014c4b:	50                   	push   eax
c0014c4c:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014c50:	52                   	push   edx
c0014c51:	6a 00                	push   0x0
c0014c53:	e8 4a fa ff ff       	call   c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014c58:	83 c4 1c             	add    esp,0x1c
c0014c5b:	6a 04                	push   0x4
c0014c5d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014c61:	50                   	push   eax
c0014c62:	57                   	push   edi
c0014c63:	e8 1c ba fe ff       	call   c0000684 <memcpy>
c0014c68:	83 c4 0c             	add    esp,0xc
c0014c6b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014c71:	6a 04                	push   0x4
c0014c73:	56                   	push   esi
c0014c74:	50                   	push   eax
c0014c75:	e8 0a ba fe ff       	call   c0000684 <memcpy>
c0014c7a:	83 c4 0c             	add    esp,0xc
c0014c7d:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014c83:	6a 04                	push   0x4
c0014c85:	55                   	push   ebp
c0014c86:	50                   	push   eax
c0014c87:	e8 f8 b9 fe ff       	call   c0000684 <memcpy>
c0014c8c:	58                   	pop    eax
c0014c8d:	5a                   	pop    edx
c0014c8e:	68 5d 24 02 c0       	push   0xc002245d
c0014c93:	57                   	push   edi
c0014c94:	e8 11 bb fe ff       	call   c00007aa <strcmp>
c0014c99:	83 c4 10             	add    esp,0x10
c0014c9c:	85 c0                	test   eax,eax
c0014c9e:	75 0f                	jne    c0014caf <CPU::detectFeatures()+0x1b5>
c0014ca0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014caa:	e9 22 02 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014caf:	50                   	push   eax
c0014cb0:	50                   	push   eax
c0014cb1:	68 6a 24 02 c0       	push   0xc002246a
c0014cb6:	57                   	push   edi
c0014cb7:	e8 ee ba fe ff       	call   c00007aa <strcmp>
c0014cbc:	83 c4 10             	add    esp,0x10
c0014cbf:	85 c0                	test   eax,eax
c0014cc1:	74 dd                	je     c0014ca0 <CPU::detectFeatures()+0x1a6>
c0014cc3:	51                   	push   ecx
c0014cc4:	51                   	push   ecx
c0014cc5:	68 77 24 02 c0       	push   0xc0022477
c0014cca:	57                   	push   edi
c0014ccb:	e8 da ba fe ff       	call   c00007aa <strcmp>
c0014cd0:	83 c4 10             	add    esp,0x10
c0014cd3:	85 c0                	test   eax,eax
c0014cd5:	74 2a                	je     c0014d01 <CPU::detectFeatures()+0x207>
c0014cd7:	52                   	push   edx
c0014cd8:	52                   	push   edx
c0014cd9:	68 84 24 02 c0       	push   0xc0022484
c0014cde:	57                   	push   edi
c0014cdf:	e8 c6 ba fe ff       	call   c00007aa <strcmp>
c0014ce4:	83 c4 10             	add    esp,0x10
c0014ce7:	85 c0                	test   eax,eax
c0014ce9:	74 16                	je     c0014d01 <CPU::detectFeatures()+0x207>
c0014ceb:	50                   	push   eax
c0014cec:	50                   	push   eax
c0014ced:	68 91 24 02 c0       	push   0xc0022491
c0014cf2:	57                   	push   edi
c0014cf3:	e8 b2 ba fe ff       	call   c00007aa <strcmp>
c0014cf8:	83 c4 10             	add    esp,0x10
c0014cfb:	85 c0                	test   eax,eax
c0014cfd:	74 48                	je     c0014d47 <CPU::detectFeatures()+0x24d>
c0014cff:	eb 0f                	jmp    c0014d10 <CPU::detectFeatures()+0x216>
c0014d01:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014d0b:	e9 c1 01 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014d10:	50                   	push   eax
c0014d11:	50                   	push   eax
c0014d12:	68 9e 24 02 c0       	push   0xc002249e
c0014d17:	57                   	push   edi
c0014d18:	e8 8d ba fe ff       	call   c00007aa <strcmp>
c0014d1d:	83 c4 10             	add    esp,0x10
c0014d20:	85 c0                	test   eax,eax
c0014d22:	74 23                	je     c0014d47 <CPU::detectFeatures()+0x24d>
c0014d24:	50                   	push   eax
c0014d25:	50                   	push   eax
c0014d26:	68 ab 24 02 c0       	push   0xc00224ab
c0014d2b:	57                   	push   edi
c0014d2c:	e8 79 ba fe ff       	call   c00007aa <strcmp>
c0014d31:	83 c4 10             	add    esp,0x10
c0014d34:	85 c0                	test   eax,eax
c0014d36:	75 1e                	jne    c0014d56 <CPU::detectFeatures()+0x25c>
c0014d38:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014d42:	e9 8a 01 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014d47:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014d51:	e9 7b 01 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014d56:	50                   	push   eax
c0014d57:	50                   	push   eax
c0014d58:	68 b8 24 02 c0       	push   0xc00224b8
c0014d5d:	57                   	push   edi
c0014d5e:	e8 47 ba fe ff       	call   c00007aa <strcmp>
c0014d63:	83 c4 10             	add    esp,0x10
c0014d66:	85 c0                	test   eax,eax
c0014d68:	75 0f                	jne    c0014d79 <CPU::detectFeatures()+0x27f>
c0014d6a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014d74:	e9 58 01 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014d79:	50                   	push   eax
c0014d7a:	50                   	push   eax
c0014d7b:	68 77 24 02 c0       	push   0xc0022477
c0014d80:	57                   	push   edi
c0014d81:	e8 24 ba fe ff       	call   c00007aa <strcmp>
c0014d86:	83 c4 10             	add    esp,0x10
c0014d89:	85 c0                	test   eax,eax
c0014d8b:	75 0f                	jne    c0014d9c <CPU::detectFeatures()+0x2a2>
c0014d8d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014d97:	e9 35 01 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014d9c:	50                   	push   eax
c0014d9d:	50                   	push   eax
c0014d9e:	68 c5 24 02 c0       	push   0xc00224c5
c0014da3:	57                   	push   edi
c0014da4:	e8 01 ba fe ff       	call   c00007aa <strcmp>
c0014da9:	83 c4 10             	add    esp,0x10
c0014dac:	85 c0                	test   eax,eax
c0014dae:	75 0f                	jne    c0014dbf <CPU::detectFeatures()+0x2c5>
c0014db0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014dba:	e9 12 01 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014dbf:	51                   	push   ecx
c0014dc0:	51                   	push   ecx
c0014dc1:	68 d2 24 02 c0       	push   0xc00224d2
c0014dc6:	57                   	push   edi
c0014dc7:	e8 de b9 fe ff       	call   c00007aa <strcmp>
c0014dcc:	83 c4 10             	add    esp,0x10
c0014dcf:	85 c0                	test   eax,eax
c0014dd1:	75 0f                	jne    c0014de2 <CPU::detectFeatures()+0x2e8>
c0014dd3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014ddd:	e9 ef 00 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014de2:	52                   	push   edx
c0014de3:	52                   	push   edx
c0014de4:	68 df 24 02 c0       	push   0xc00224df
c0014de9:	57                   	push   edi
c0014dea:	e8 bb b9 fe ff       	call   c00007aa <strcmp>
c0014def:	83 c4 10             	add    esp,0x10
c0014df2:	85 c0                	test   eax,eax
c0014df4:	75 0f                	jne    c0014e05 <CPU::detectFeatures()+0x30b>
c0014df6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014e00:	e9 cc 00 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014e05:	50                   	push   eax
c0014e06:	50                   	push   eax
c0014e07:	68 ec 24 02 c0       	push   0xc00224ec
c0014e0c:	57                   	push   edi
c0014e0d:	e8 98 b9 fe ff       	call   c00007aa <strcmp>
c0014e12:	83 c4 10             	add    esp,0x10
c0014e15:	85 c0                	test   eax,eax
c0014e17:	75 0f                	jne    c0014e28 <CPU::detectFeatures()+0x32e>
c0014e19:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014e23:	e9 a9 00 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014e28:	50                   	push   eax
c0014e29:	50                   	push   eax
c0014e2a:	68 f9 24 02 c0       	push   0xc00224f9
c0014e2f:	57                   	push   edi
c0014e30:	e8 75 b9 fe ff       	call   c00007aa <strcmp>
c0014e35:	83 c4 10             	add    esp,0x10
c0014e38:	85 c0                	test   eax,eax
c0014e3a:	75 0f                	jne    c0014e4b <CPU::detectFeatures()+0x351>
c0014e3c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014e46:	e9 86 00 00 00       	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014e4b:	50                   	push   eax
c0014e4c:	50                   	push   eax
c0014e4d:	68 06 25 02 c0       	push   0xc0022506
c0014e52:	57                   	push   edi
c0014e53:	e8 52 b9 fe ff       	call   c00007aa <strcmp>
c0014e58:	83 c4 10             	add    esp,0x10
c0014e5b:	85 c0                	test   eax,eax
c0014e5d:	75 0c                	jne    c0014e6b <CPU::detectFeatures()+0x371>
c0014e5f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014e69:	eb 66                	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014e6b:	50                   	push   eax
c0014e6c:	50                   	push   eax
c0014e6d:	68 13 25 02 c0       	push   0xc0022513
c0014e72:	57                   	push   edi
c0014e73:	e8 32 b9 fe ff       	call   c00007aa <strcmp>
c0014e78:	83 c4 10             	add    esp,0x10
c0014e7b:	85 c0                	test   eax,eax
c0014e7d:	75 0c                	jne    c0014e8b <CPU::detectFeatures()+0x391>
c0014e7f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014e89:	eb 46                	jmp    c0014ed1 <CPU::detectFeatures()+0x3d7>
c0014e8b:	50                   	push   eax
c0014e8c:	50                   	push   eax
c0014e8d:	68 20 25 02 c0       	push   0xc0022520
c0014e92:	57                   	push   edi
c0014e93:	e8 12 b9 fe ff       	call   c00007aa <strcmp>
c0014e98:	83 c4 10             	add    esp,0x10
c0014e9b:	85 c0                	test   eax,eax
c0014e9d:	74 e0                	je     c0014e7f <CPU::detectFeatures()+0x385>
c0014e9f:	50                   	push   eax
c0014ea0:	50                   	push   eax
c0014ea1:	68 2d 25 02 c0       	push   0xc002252d
c0014ea6:	57                   	push   edi
c0014ea7:	e8 fe b8 fe ff       	call   c00007aa <strcmp>
c0014eac:	83 c4 10             	add    esp,0x10
c0014eaf:	85 c0                	test   eax,eax
c0014eb1:	74 cc                	je     c0014e7f <CPU::detectFeatures()+0x385>
c0014eb3:	51                   	push   ecx
c0014eb4:	51                   	push   ecx
c0014eb5:	68 3a 25 02 c0       	push   0xc002253a
c0014eba:	57                   	push   edi
c0014ebb:	e8 ea b8 fe ff       	call   c00007aa <strcmp>
c0014ec0:	83 c4 10             	add    esp,0x10
c0014ec3:	85 c0                	test   eax,eax
c0014ec5:	74 b8                	je     c0014e7f <CPU::detectFeatures()+0x385>
c0014ec7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014ed1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014ed6:	0f 86 be 00 00 00    	jbe    c0014f9a <CPU::detectFeatures()+0x4a0>
c0014edc:	83 ec 0c             	sub    esp,0xc
c0014edf:	68 80 00 00 00       	push   0x80
c0014ee4:	e8 96 f8 ff ff       	call   c001477f <cpuidCheckExtendedEBX(unsigned int)>
c0014ee9:	83 e0 01             	and    eax,0x1
c0014eec:	c1 e0 06             	shl    eax,0x6
c0014eef:	88 c2                	mov    dl,al
c0014ef1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ef7:	83 e0 bf             	and    eax,0xffffffbf
c0014efa:	09 d0                	or     eax,edx
c0014efc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014f02:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014f09:	e8 71 f8 ff ff       	call   c001477f <cpuidCheckExtendedEBX(unsigned int)>
c0014f0e:	83 e0 01             	and    eax,0x1
c0014f11:	c1 e0 04             	shl    eax,0x4
c0014f14:	88 c2                	mov    dl,al
c0014f16:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014f1c:	83 e0 ef             	and    eax,0xffffffef
c0014f1f:	09 d0                	or     eax,edx
c0014f21:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014f27:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014f2e:	e8 4c f8 ff ff       	call   c001477f <cpuidCheckExtendedEBX(unsigned int)>
c0014f33:	c1 e0 07             	shl    eax,0x7
c0014f36:	88 c2                	mov    dl,al
c0014f38:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014f3e:	83 e0 7f             	and    eax,0x7f
c0014f41:	09 d0                	or     eax,edx
c0014f43:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014f49:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014f50:	e8 57 f8 ff ff       	call   c00147ac <cpuidCheckExtendedECX(unsigned int)>
c0014f55:	83 e0 01             	and    eax,0x1
c0014f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014f5f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014f65:	83 e0 f7             	and    eax,0xfffffff7
c0014f68:	09 d0                	or     eax,edx
c0014f6a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014f70:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014f77:	e8 30 f8 ff ff       	call   c00147ac <cpuidCheckExtendedECX(unsigned int)>
c0014f7c:	83 c4 10             	add    esp,0x10
c0014f7f:	83 e0 01             	and    eax,0x1
c0014f82:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014f89:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014f8f:	83 e0 fb             	and    eax,0xfffffffb
c0014f92:	09 d0                	or     eax,edx
c0014f94:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014f9a:	83 ec 0c             	sub    esp,0xc
c0014f9d:	56                   	push   esi
c0014f9e:	55                   	push   ebp
c0014f9f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014fa3:	57                   	push   edi
c0014fa4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014fa8:	50                   	push   eax
c0014fa9:	6a 01                	push   0x1
c0014fab:	e8 f2 f6 ff ff       	call   c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014fb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fb4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014fba:	88 c1                	mov    cl,al
c0014fbc:	83 e2 f0             	and    edx,0xfffffff0
c0014fbf:	83 e1 0f             	and    ecx,0xf
c0014fc2:	09 ca                	or     edx,ecx
c0014fc4:	88 c1                	mov    cl,al
c0014fc6:	c0 e9 04             	shr    cl,0x4
c0014fc9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014fcf:	0f b6 d1             	movzx  edx,cl
c0014fd2:	c1 e2 06             	shl    edx,0x6
c0014fd5:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c0014fd9:	89 d5                	mov    ebp,edx
c0014fdb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014fe1:	66 81 e2 3f c0       	and    dx,0xc03f
c0014fe6:	83 c4 20             	add    esp,0x20
c0014fe9:	09 ea                	or     edx,ebp
c0014feb:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014ff2:	89 c2                	mov    edx,eax
c0014ff4:	c1 ea 08             	shr    edx,0x8
c0014ff7:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0014ffd:	83 e2 0f             	and    edx,0xf
c0015000:	83 e1 3f             	and    ecx,0x3f
c0015003:	89 d5                	mov    ebp,edx
c0015005:	c1 e5 06             	shl    ebp,0x6
c0015008:	09 cd                	or     ebp,ecx
c001500a:	89 e9                	mov    ecx,ebp
c001500c:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0015012:	88 d1                	mov    cl,dl
c0015014:	c0 e9 02             	shr    cl,0x2
c0015017:	89 cd                	mov    ebp,ecx
c0015019:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001501f:	83 e1 c0             	and    ecx,0xffffffc0
c0015022:	09 cd                	or     ebp,ecx
c0015024:	89 e9                	mov    ecx,ebp
c0015026:	89 c5                	mov    ebp,eax
c0015028:	c1 ed 0c             	shr    ebp,0xc
c001502b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0015031:	83 e5 03             	and    ebp,0x3
c0015034:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001503a:	c1 e5 04             	shl    ebp,0x4
c001503d:	83 e1 cf             	and    ecx,0xffffffcf
c0015040:	09 cd                	or     ebp,ecx
c0015042:	80 fa 06             	cmp    dl,0x6
c0015045:	89 e9                	mov    ecx,ebp
c0015047:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001504d:	74 05                	je     c0015054 <CPU::detectFeatures()+0x55a>
c001504f:	80 fa 0f             	cmp    dl,0xf
c0015052:	75 5d                	jne    c00150b1 <CPU::detectFeatures()+0x5b7>
c0015054:	89 c5                	mov    ebp,eax
c0015056:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001505a:	c1 ed 10             	shr    ebp,0x10
c001505d:	c1 e5 04             	shl    ebp,0x4
c0015060:	09 e9                	or     ecx,ebp
c0015062:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0015068:	0f b6 c9             	movzx  ecx,cl
c001506b:	c1 e1 06             	shl    ecx,0x6
c001506e:	66 81 e5 3f c0       	and    bp,0xc03f
c0015073:	09 e9                	or     ecx,ebp
c0015075:	80 fa 0f             	cmp    dl,0xf
c0015078:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001507f:	75 30                	jne    c00150b1 <CPU::detectFeatures()+0x5b7>
c0015081:	c1 e8 14             	shr    eax,0x14
c0015084:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001508a:	83 c0 0f             	add    eax,0xf
c001508d:	83 e2 3f             	and    edx,0x3f
c0015090:	88 c1                	mov    cl,al
c0015092:	c1 e1 06             	shl    ecx,0x6
c0015095:	c0 e8 02             	shr    al,0x2
c0015098:	09 ca                	or     edx,ecx
c001509a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00150a0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00150a6:	83 e2 c0             	and    edx,0xffffffc0
c00150a9:	09 d0                	or     eax,edx
c00150ab:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00150b1:	83 ec 0c             	sub    esp,0xc
c00150b4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00150bb:	56                   	push   esi
c00150bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00150c0:	50                   	push   eax
c00150c1:	57                   	push   edi
c00150c2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00150c6:	55                   	push   ebp
c00150c7:	68 00 00 00 80       	push   0x80000000
c00150cc:	e8 d1 f5 ff ff       	call   c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150d1:	83 c4 20             	add    esp,0x20
c00150d4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00150dc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00150e0:	76 1e                	jbe    c0015100 <CPU::detectFeatures()+0x606>
c00150e2:	83 ec 0c             	sub    esp,0xc
c00150e5:	56                   	push   esi
c00150e6:	50                   	push   eax
c00150e7:	57                   	push   edi
c00150e8:	55                   	push   ebp
c00150e9:	68 01 00 00 80       	push   0x80000001
c00150ee:	e8 af f5 ff ff       	call   c00146a2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150f3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00150fd:	83 c4 20             	add    esp,0x20
c0015100:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0015106:	83 f8 01             	cmp    eax,0x1
c0015109:	75 6f                	jne    c001517a <CPU::detectFeatures()+0x680>
c001510b:	51                   	push   ecx
c001510c:	51                   	push   ecx
c001510d:	68 46 25 02 c0       	push   0xc0022546
c0015112:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015116:	56                   	push   esi
c0015117:	e8 3d b6 fe ff       	call   c0000759 <strcpy>
c001511c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015122:	5f                   	pop    edi
c0015123:	66 c1 e8 06          	shr    ax,0x6
c0015127:	5d                   	pop    ebp
c0015128:	0f b6 c0             	movzx  eax,al
c001512b:	50                   	push   eax
c001512c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015132:	c1 e8 0e             	shr    eax,0xe
c0015135:	0f b6 c0             	movzx  eax,al
c0015138:	50                   	push   eax
c0015139:	e8 04 f2 ff ff       	call   c0014342 <lookupIntelCPUName(unsigned char, unsigned char)>
c001513e:	5a                   	pop    edx
c001513f:	59                   	pop    ecx
c0015140:	50                   	push   eax
c0015141:	56                   	push   esi
c0015142:	e8 c9 b6 fe ff       	call   c0000810 <strcat>
c0015147:	5f                   	pop    edi
c0015148:	5d                   	pop    ebp
c0015149:	56                   	push   esi
c001514a:	53                   	push   ebx
c001514b:	e8 00 b6 ff ff       	call   c0010750 <Device::setName(char const*)>
c0015150:	58                   	pop    eax
c0015151:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015157:	5a                   	pop    edx
c0015158:	68 4d 25 02 c0       	push   0xc002254d
c001515d:	50                   	push   eax
c001515e:	e8 47 b6 fe ff       	call   c00007aa <strcmp>
c0015163:	83 c4 10             	add    esp,0x10
c0015166:	85 c0                	test   eax,eax
c0015168:	0f 85 53 03 00 00    	jne    c00154c1 <CPU::detectFeatures()+0x9c7>
c001516e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0015175:	e9 47 03 00 00       	jmp    c00154c1 <CPU::detectFeatures()+0x9c7>
c001517a:	83 f8 02             	cmp    eax,0x2
c001517d:	0f 85 b5 00 00 00    	jne    c0015238 <CPU::detectFeatures()+0x73e>
c0015183:	57                   	push   edi
c0015184:	57                   	push   edi
c0015185:	68 5f 25 02 c0       	push   0xc002255f
c001518a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001518e:	56                   	push   esi
c001518f:	e8 c5 b5 fe ff       	call   c0000759 <strcpy>
c0015194:	5d                   	pop    ebp
c0015195:	58                   	pop    eax
c0015196:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001519c:	66 c1 e8 06          	shr    ax,0x6
c00151a0:	0f b6 c0             	movzx  eax,al
c00151a3:	50                   	push   eax
c00151a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151aa:	c1 e8 0e             	shr    eax,0xe
c00151ad:	0f b6 c0             	movzx  eax,al
c00151b0:	50                   	push   eax
c00151b1:	e8 e7 ef ff ff       	call   c001419d <lookupAMDCPUName(unsigned char, unsigned char)>
c00151b6:	5a                   	pop    edx
c00151b7:	59                   	pop    ecx
c00151b8:	50                   	push   eax
c00151b9:	56                   	push   esi
c00151ba:	e8 51 b6 fe ff       	call   c0000810 <strcat>
c00151bf:	5f                   	pop    edi
c00151c0:	5d                   	pop    ebp
c00151c1:	56                   	push   esi
c00151c2:	53                   	push   ebx
c00151c3:	e8 88 b5 ff ff       	call   c0010750 <Device::setName(char const*)>
c00151c8:	58                   	pop    eax
c00151c9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00151cf:	5a                   	pop    edx
c00151d0:	68 64 25 02 c0       	push   0xc0022564
c00151d5:	50                   	push   eax
c00151d6:	e8 cf b5 fe ff       	call   c00007aa <strcmp>
c00151db:	83 c4 10             	add    esp,0x10
c00151de:	85 c0                	test   eax,eax
c00151e0:	75 20                	jne    c0015202 <CPU::detectFeatures()+0x708>
c00151e2:	8b 15 88 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024588
c00151e8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00151ee:	a8 01                	test   al,0x1
c00151f0:	74 10                	je     c0015202 <CPU::detectFeatures()+0x708>
c00151f2:	83 e0 fe             	and    eax,0xfffffffe
c00151f5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00151fb:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0015202:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015208:	c1 e8 0e             	shr    eax,0xe
c001520b:	3c 05                	cmp    al,0x5
c001520d:	0f 85 ae 02 00 00    	jne    c00154c1 <CPU::detectFeatures()+0x9c7>
c0015213:	56                   	push   esi
c0015214:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001521a:	83 e0 0f             	and    eax,0xf
c001521d:	50                   	push   eax
c001521e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015224:	66 c1 e8 06          	shr    ax,0x6
c0015228:	0f b6 c0             	movzx  eax,al
c001522b:	50                   	push   eax
c001522c:	6a 05                	push   0x5
c001522e:	e8 fc f3 ff ff       	call   c001462f <AMD_K6_writeback(int, int, int)>
c0015233:	e9 ff 01 00 00       	jmp    c0015437 <CPU::detectFeatures()+0x93d>
c0015238:	89 c1                	mov    ecx,eax
c001523a:	83 e1 fd             	and    ecx,0xfffffffd
c001523d:	83 f9 04             	cmp    ecx,0x4
c0015240:	74 09                	je     c001524b <CPU::detectFeatures()+0x751>
c0015242:	83 f8 03             	cmp    eax,0x3
c0015245:	0f 85 6f 01 00 00    	jne    c00153ba <CPU::detectFeatures()+0x8c0>
c001524b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015251:	c1 ea 0e             	shr    edx,0xe
c0015254:	80 fa 05             	cmp    dl,0x5
c0015257:	75 62                	jne    c00152bb <CPU::detectFeatures()+0x7c1>
c0015259:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001525f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015264:	66 81 fa 00 01       	cmp    dx,0x100
c0015269:	75 0c                	jne    c0015277 <CPU::detectFeatures()+0x77d>
c001526b:	51                   	push   ecx
c001526c:	51                   	push   ecx
c001526d:	68 6b 25 02 c0       	push   0xc002256b
c0015272:	e9 ba 01 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c0015277:	66 81 fa 00 02       	cmp    dx,0x200
c001527c:	75 0c                	jne    c001528a <CPU::detectFeatures()+0x790>
c001527e:	52                   	push   edx
c001527f:	52                   	push   edx
c0015280:	68 7e 25 02 c0       	push   0xc002257e
c0015285:	e9 a7 01 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c001528a:	66 81 fa 40 02       	cmp    dx,0x240
c001528f:	75 0c                	jne    c001529d <CPU::detectFeatures()+0x7a3>
c0015291:	50                   	push   eax
c0015292:	50                   	push   eax
c0015293:	68 90 25 02 c0       	push   0xc0022590
c0015298:	e9 94 01 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c001529d:	83 f8 06             	cmp    eax,0x6
c00152a0:	0f 84 ee 00 00 00    	je     c0015394 <CPU::detectFeatures()+0x89a>
c00152a6:	83 f9 04             	cmp    ecx,0x4
c00152a9:	0f 84 f6 00 00 00    	je     c00153a5 <CPU::detectFeatures()+0x8ab>
c00152af:	50                   	push   eax
c00152b0:	50                   	push   eax
c00152b1:	68 b6 25 02 c0       	push   0xc00225b6
c00152b6:	e9 76 01 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c00152bb:	80 fa 06             	cmp    dl,0x6
c00152be:	0f 85 cb 00 00 00    	jne    c001538f <CPU::detectFeatures()+0x895>
c00152c4:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00152ca:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00152cf:	66 81 fa 80 01       	cmp    dx,0x180
c00152d4:	75 0c                	jne    c00152e2 <CPU::detectFeatures()+0x7e8>
c00152d6:	50                   	push   eax
c00152d7:	50                   	push   eax
c00152d8:	68 c1 25 02 c0       	push   0xc00225c1
c00152dd:	e9 4f 01 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c00152e2:	66 81 fa c0 01       	cmp    dx,0x1c0
c00152e7:	74 07                	je     c00152f0 <CPU::detectFeatures()+0x7f6>
c00152e9:	66 81 fa 00 02       	cmp    dx,0x200
c00152ee:	75 0c                	jne    c00152fc <CPU::detectFeatures()+0x802>
c00152f0:	50                   	push   eax
c00152f1:	50                   	push   eax
c00152f2:	68 d1 25 02 c0       	push   0xc00225d1
c00152f7:	e9 35 01 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c00152fc:	66 81 fa 40 02       	cmp    dx,0x240
c0015301:	75 0c                	jne    c001530f <CPU::detectFeatures()+0x815>
c0015303:	50                   	push   eax
c0015304:	50                   	push   eax
c0015305:	68 d8 25 02 c0       	push   0xc00225d8
c001530a:	e9 22 01 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c001530f:	66 81 fa 80 02       	cmp    dx,0x280
c0015314:	74 07                	je     c001531d <CPU::detectFeatures()+0x823>
c0015316:	66 81 fa 40 03       	cmp    dx,0x340
c001531b:	75 0c                	jne    c0015329 <CPU::detectFeatures()+0x82f>
c001531d:	50                   	push   eax
c001531e:	50                   	push   eax
c001531f:	68 e1 25 02 c0       	push   0xc00225e1
c0015324:	e9 08 01 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c0015329:	66 81 fa c0 03       	cmp    dx,0x3c0
c001532e:	75 0c                	jne    c001533c <CPU::detectFeatures()+0x842>
c0015330:	55                   	push   ebp
c0015331:	55                   	push   ebp
c0015332:	68 e8 25 02 c0       	push   0xc00225e8
c0015337:	e9 f5 00 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c001533c:	83 f8 06             	cmp    eax,0x6
c001533f:	74 53                	je     c0015394 <CPU::detectFeatures()+0x89a>
c0015341:	83 f9 04             	cmp    ecx,0x4
c0015344:	74 5f                	je     c00153a5 <CPU::detectFeatures()+0x8ab>
c0015346:	57                   	push   edi
c0015347:	57                   	push   edi
c0015348:	68 f1 25 02 c0       	push   0xc00225f1
c001534d:	53                   	push   ebx
c001534e:	e8 fd b3 ff ff       	call   c0010750 <Device::setName(char const*)>
c0015353:	b1 c1                	mov    cl,0xc1
c0015355:	88 c8                	mov    al,cl
c0015357:	e6 22                	out    0x22,al
c0015359:	e4 23                	in     al,0x23
c001535b:	88 c2                	mov    dl,al
c001535d:	88 c8                	mov    al,cl
c001535f:	e6 22                	out    0x22,al
c0015361:	88 d0                	mov    al,dl
c0015363:	83 c8 10             	or     eax,0x10
c0015366:	e6 23                	out    0x23,al
c0015368:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001536f:	89 d0                	mov    eax,edx
c0015371:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0015374:	40                   	inc    eax
c0015375:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001537b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001537f:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0015385:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001538a:	e9 a8 00 00 00       	jmp    c0015437 <CPU::detectFeatures()+0x93d>
c001538f:	83 f8 06             	cmp    eax,0x6
c0015392:	75 0c                	jne    c00153a0 <CPU::detectFeatures()+0x8a6>
c0015394:	56                   	push   esi
c0015395:	56                   	push   esi
c0015396:	68 a2 25 02 c0       	push   0xc00225a2
c001539b:	e9 91 00 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c00153a0:	83 f9 04             	cmp    ecx,0x4
c00153a3:	75 0c                	jne    c00153b1 <CPU::detectFeatures()+0x8b7>
c00153a5:	51                   	push   ecx
c00153a6:	51                   	push   ecx
c00153a7:	68 ae 25 02 c0       	push   0xc00225ae
c00153ac:	e9 80 00 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x937>
c00153b1:	52                   	push   edx
c00153b2:	52                   	push   edx
c00153b3:	68 fc 25 02 c0       	push   0xc00225fc
c00153b8:	eb 77                	jmp    c0015431 <CPU::detectFeatures()+0x937>
c00153ba:	83 f8 07             	cmp    eax,0x7
c00153bd:	75 09                	jne    c00153c8 <CPU::detectFeatures()+0x8ce>
c00153bf:	50                   	push   eax
c00153c0:	50                   	push   eax
c00153c1:	68 06 26 02 c0       	push   0xc0022606
c00153c6:	eb 69                	jmp    c0015431 <CPU::detectFeatures()+0x937>
c00153c8:	83 f8 0a             	cmp    eax,0xa
c00153cb:	75 09                	jne    c00153d6 <CPU::detectFeatures()+0x8dc>
c00153cd:	50                   	push   eax
c00153ce:	50                   	push   eax
c00153cf:	68 11 26 02 c0       	push   0xc0022611
c00153d4:	eb 5b                	jmp    c0015431 <CPU::detectFeatures()+0x937>
c00153d6:	83 f8 0b             	cmp    eax,0xb
c00153d9:	75 09                	jne    c00153e4 <CPU::detectFeatures()+0x8ea>
c00153db:	50                   	push   eax
c00153dc:	50                   	push   eax
c00153dd:	68 19 26 02 c0       	push   0xc0022619
c00153e2:	eb 4d                	jmp    c0015431 <CPU::detectFeatures()+0x937>
c00153e4:	83 f8 08             	cmp    eax,0x8
c00153e7:	75 09                	jne    c00153f2 <CPU::detectFeatures()+0x8f8>
c00153e9:	50                   	push   eax
c00153ea:	50                   	push   eax
c00153eb:	68 22 26 02 c0       	push   0xc0022622
c00153f0:	eb 3f                	jmp    c0015431 <CPU::detectFeatures()+0x937>
c00153f2:	83 f8 09             	cmp    eax,0x9
c00153f5:	75 09                	jne    c0015400 <CPU::detectFeatures()+0x906>
c00153f7:	50                   	push   eax
c00153f8:	50                   	push   eax
c00153f9:	68 2a 26 02 c0       	push   0xc002262a
c00153fe:	eb 31                	jmp    c0015431 <CPU::detectFeatures()+0x937>
c0015400:	83 f8 05             	cmp    eax,0x5
c0015403:	75 09                	jne    c001540e <CPU::detectFeatures()+0x914>
c0015405:	50                   	push   eax
c0015406:	50                   	push   eax
c0015407:	68 32 26 02 c0       	push   0xc0022632
c001540c:	eb 23                	jmp    c0015431 <CPU::detectFeatures()+0x937>
c001540e:	83 f8 0c             	cmp    eax,0xc
c0015411:	75 09                	jne    c001541c <CPU::detectFeatures()+0x922>
c0015413:	55                   	push   ebp
c0015414:	55                   	push   ebp
c0015415:	68 40 26 02 c0       	push   0xc0022640
c001541a:	eb 15                	jmp    c0015431 <CPU::detectFeatures()+0x937>
c001541c:	83 f8 0d             	cmp    eax,0xd
c001541f:	75 09                	jne    c001542a <CPU::detectFeatures()+0x930>
c0015421:	57                   	push   edi
c0015422:	57                   	push   edi
c0015423:	68 4b 26 02 c0       	push   0xc002264b
c0015428:	eb 07                	jmp    c0015431 <CPU::detectFeatures()+0x937>
c001542a:	56                   	push   esi
c001542b:	56                   	push   esi
c001542c:	68 5f 26 02 c0       	push   0xc002265f
c0015431:	53                   	push   ebx
c0015432:	e8 19 b3 ff ff       	call   c0010750 <Device::setName(char const*)>
c0015437:	83 c4 10             	add    esp,0x10
c001543a:	e9 82 00 00 00       	jmp    c00154c1 <CPU::detectFeatures()+0x9c7>
c001543f:	51                   	push   ecx
c0015440:	51                   	push   ecx
c0015441:	68 ab 24 02 c0       	push   0xc00224ab
c0015446:	57                   	push   edi
c0015447:	e8 0d b3 fe ff       	call   c0000759 <strcpy>
c001544c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015456:	e8 d6 ad fe ff       	call   c0000231 <is486>
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	85 c0                	test   eax,eax
c0015460:	74 2d                	je     c001548f <CPU::detectFeatures()+0x995>
c0015462:	52                   	push   edx
c0015463:	52                   	push   edx
c0015464:	68 6b 26 02 c0       	push   0xc002266b
c0015469:	53                   	push   ebx
c001546a:	e8 e1 b2 ff ff       	call   c0010750 <Device::setName(char const*)>
c001546f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015476:	e8 9d a5 00 00       	call   c001fa18 <CPU::readCR0()>
c001547b:	83 c4 10             	add    esp,0x10
c001547e:	83 e0 14             	and    eax,0x14
c0015481:	83 f8 04             	cmp    eax,0x4
c0015484:	75 1f                	jne    c00154a5 <CPU::detectFeatures()+0x9ab>
c0015486:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001548d:	eb 32                	jmp    c00154c1 <CPU::detectFeatures()+0x9c7>
c001548f:	50                   	push   eax
c0015490:	50                   	push   eax
c0015491:	68 76 26 02 c0       	push   0xc0022676
c0015496:	53                   	push   ebx
c0015497:	e8 b4 b2 ff ff       	call   c0010750 <Device::setName(char const*)>
c001549c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00154a3:	eb d1                	jmp    c0015476 <CPU::detectFeatures()+0x97c>
c00154a5:	e8 62 ad fe ff       	call   c000020c <hasLegacyFPU>
c00154aa:	83 e0 01             	and    eax,0x1
c00154ad:	8d 14 00             	lea    edx,[eax+eax*1]
c00154b0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00154b6:	83 e0 fd             	and    eax,0xfffffffd
c00154b9:	09 d0                	or     eax,edx
c00154bb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00154c1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00154c8:	83 c4 4c             	add    esp,0x4c
c00154cb:	5b                   	pop    ebx
c00154cc:	5e                   	pop    esi
c00154cd:	5f                   	pop    edi
c00154ce:	5d                   	pop    ebp
c00154cf:	c3                   	ret    

c00154d0 <CPU::setupSMEP()>:
c00154d0:	83 ec 0c             	sub    esp,0xc
c00154d3:	e8 0a a8 00 00       	call   c001fce2 <CPU::readCR4()>
c00154d8:	0d 00 00 10 00       	or     eax,0x100000
c00154dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154e1:	83 c4 0c             	add    esp,0xc
c00154e4:	e9 14 a8 00 00       	jmp    c001fcfd <CPU::writeCR4(unsigned long)>
c00154e9:	90                   	nop

c00154ea <CPU::setupUMIP()>:
c00154ea:	83 ec 0c             	sub    esp,0xc
c00154ed:	e8 f0 a7 00 00       	call   c001fce2 <CPU::readCR4()>
c00154f2:	80 cc 08             	or     ah,0x8
c00154f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154f9:	83 c4 0c             	add    esp,0xc
c00154fc:	e9 fc a7 00 00       	jmp    c001fcfd <CPU::writeCR4(unsigned long)>
c0015501:	90                   	nop

c0015502 <CPU::setupTSC()>:
c0015502:	83 ec 0c             	sub    esp,0xc
c0015505:	e8 d8 a7 00 00       	call   c001fce2 <CPU::readCR4()>
c001550a:	83 c8 04             	or     eax,0x4
c001550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015511:	83 c4 0c             	add    esp,0xc
c0015514:	e9 e4 a7 00 00       	jmp    c001fcfd <CPU::writeCR4(unsigned long)>
c0015519:	90                   	nop

c001551a <CPU::setupLargePages()>:
c001551a:	83 ec 0c             	sub    esp,0xc
c001551d:	e8 c0 a7 00 00       	call   c001fce2 <CPU::readCR4()>
c0015522:	83 c8 10             	or     eax,0x10
c0015525:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015529:	83 c4 0c             	add    esp,0xc
c001552c:	e9 cc a7 00 00       	jmp    c001fcfd <CPU::writeCR4(unsigned long)>
c0015531:	90                   	nop

c0015532 <CPU::setupPAT()>:
c0015532:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0015537:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001553e:	74 2c                	je     c001556c <CPU::setupPAT()+0x3a>
c0015540:	53                   	push   ebx
c0015541:	83 ec 10             	sub    esp,0x10
c0015544:	68 77 02 00 00       	push   0x277
c0015549:	50                   	push   eax
c001554a:	e8 3d 60 ff ff       	call   c000b58c <Computer::rdmsr(unsigned int)>
c001554f:	83 e2 f8             	and    edx,0xfffffff8
c0015552:	83 ca 01             	or     edx,0x1
c0015555:	52                   	push   edx
c0015556:	50                   	push   eax
c0015557:	68 77 02 00 00       	push   0x277
c001555c:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c0015562:	e8 51 60 ff ff       	call   c000b5b8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0015567:	83 c4 28             	add    esp,0x28
c001556a:	5b                   	pop    ebx
c001556b:	c3                   	ret    
c001556c:	c3                   	ret    
c001556d:	90                   	nop

c001556e <CPU::setupMTRR()>:
c001556e:	c3                   	ret    
c001556f:	90                   	nop

c0015570 <CPU::setupGlobalPages()>:
c0015570:	83 ec 0c             	sub    esp,0xc
c0015573:	e8 6a a7 00 00       	call   c001fce2 <CPU::readCR4()>
c0015578:	0c 80                	or     al,0x80
c001557a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001557e:	83 c4 0c             	add    esp,0xc
c0015581:	e9 77 a7 00 00       	jmp    c001fcfd <CPU::writeCR4(unsigned long)>

c0015586 <CPU::allowUsermodeDataAccess()>:
c0015586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001558a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015591:	74 03                	je     c0015596 <CPU::allowUsermodeDataAccess()+0x10>
c0015593:	0f 01 cb             	stac   
c0015596:	c3                   	ret    
c0015597:	90                   	nop

c0015598 <CPU::prohibitUsermodeDataAccess()>:
c0015598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001559c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00155a3:	74 03                	je     c00155a8 <CPU::prohibitUsermodeDataAccess()+0x10>
c00155a5:	0f 01 ca             	clac   
c00155a8:	c3                   	ret    
c00155a9:	90                   	nop

c00155aa <CPU::setupSMAP()>:
c00155aa:	53                   	push   ebx
c00155ab:	83 ec 08             	sub    esp,0x8
c00155ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155b2:	e8 2b a7 00 00       	call   c001fce2 <CPU::readCR4()>
c00155b7:	83 ec 0c             	sub    esp,0xc
c00155ba:	0d 00 00 20 00       	or     eax,0x200000
c00155bf:	50                   	push   eax
c00155c0:	e8 38 a7 00 00       	call   c001fcfd <CPU::writeCR4(unsigned long)>
c00155c5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00155c9:	83 c4 18             	add    esp,0x18
c00155cc:	5b                   	pop    ebx
c00155cd:	eb c9                	jmp    c0015598 <CPU::prohibitUsermodeDataAccess()>
c00155cf:	90                   	nop

c00155d0 <CPU::setupFeatures()>:
c00155d0:	53                   	push   ebx
c00155d1:	83 ec 08             	sub    esp,0x8
c00155d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155d8:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00155df:	74 0c                	je     c00155ed <CPU::setupFeatures()+0x1d>
c00155e1:	83 ec 0c             	sub    esp,0xc
c00155e4:	53                   	push   ebx
c00155e5:	e8 e6 fe ff ff       	call   c00154d0 <CPU::setupSMEP()>
c00155ea:	83 c4 10             	add    esp,0x10
c00155ed:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00155f4:	74 0c                	je     c0015602 <CPU::setupFeatures()+0x32>
c00155f6:	83 ec 0c             	sub    esp,0xc
c00155f9:	53                   	push   ebx
c00155fa:	e8 ab ff ff ff       	call   c00155aa <CPU::setupSMAP()>
c00155ff:	83 c4 10             	add    esp,0x10
c0015602:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0015609:	74 0c                	je     c0015617 <CPU::setupFeatures()+0x47>
c001560b:	83 ec 0c             	sub    esp,0xc
c001560e:	53                   	push   ebx
c001560f:	e8 d6 fe ff ff       	call   c00154ea <CPU::setupUMIP()>
c0015614:	83 c4 10             	add    esp,0x10
c0015617:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001561e:	74 0c                	je     c001562c <CPU::setupFeatures()+0x5c>
c0015620:	83 ec 0c             	sub    esp,0xc
c0015623:	53                   	push   ebx
c0015624:	e8 d9 fe ff ff       	call   c0015502 <CPU::setupTSC()>
c0015629:	83 c4 10             	add    esp,0x10
c001562c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0015633:	74 0c                	je     c0015641 <CPU::setupFeatures()+0x71>
c0015635:	83 ec 0c             	sub    esp,0xc
c0015638:	53                   	push   ebx
c0015639:	e8 dc fe ff ff       	call   c001551a <CPU::setupLargePages()>
c001563e:	83 c4 10             	add    esp,0x10
c0015641:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015648:	74 0c                	je     c0015656 <CPU::setupFeatures()+0x86>
c001564a:	83 ec 0c             	sub    esp,0xc
c001564d:	53                   	push   ebx
c001564e:	e8 1d ff ff ff       	call   c0015570 <CPU::setupGlobalPages()>
c0015653:	83 c4 10             	add    esp,0x10
c0015656:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001565d:	74 0d                	je     c001566c <CPU::setupFeatures()+0x9c>
c001565f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015663:	83 c4 08             	add    esp,0x8
c0015666:	5b                   	pop    ebx
c0015667:	e9 c6 fe ff ff       	jmp    c0015532 <CPU::setupPAT()>
c001566c:	83 c4 08             	add    esp,0x8
c001566f:	5b                   	pop    ebx
c0015670:	c3                   	ret    
c0015671:	90                   	nop

c0015672 <CPU::open(int, int, void*)>:
c0015672:	57                   	push   edi
c0015673:	56                   	push   esi
c0015674:	53                   	push   ebx
c0015675:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015679:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001567d:	83 ec 0c             	sub    esp,0xc
c0015680:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015686:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001568c:	50                   	push   eax
c001568d:	e8 e6 61 ff ff       	call   c000b878 <GDT::setup()>
c0015692:	83 c4 0c             	add    esp,0xc
c0015695:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001569b:	6a 00                	push   0x0
c001569d:	68 ef be ad de       	push   0xdeadbeef
c00156a2:	57                   	push   edi
c00156a3:	e8 66 84 ff ff       	call   c000db0e <TSS::setup(unsigned long, unsigned long)>
c00156a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156ab:	e8 3e 84 ff ff       	call   c000daee <TSS::flush()>
c00156b0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00156b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00156b9:	e8 14 64 ff ff       	call   c000bad2 <IDT::setup()>
c00156be:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00156c5:	e8 2a a6 00 00       	call   c001fcf4 <CPU::writeDR7(unsigned long)>
c00156ca:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00156d4:	e8 e8 6e ff ff       	call   c000c5c1 <Phys::allocatePage()>
c00156d9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00156df:	89 30                	mov    DWORD PTR [eax],esi
c00156e1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00156e7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00156ea:	58                   	pop    eax
c00156eb:	5a                   	pop    edx
c00156ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00156f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00156f6:	e8 e3 93 ff ff       	call   c000eade <VAS::setCPUSpecific(unsigned long)>
c00156fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156fe:	e8 f7 f3 ff ff       	call   c0014afa <CPU::detectFeatures()>
c0015703:	e8 62 c3 ff ff       	call   c0011a6a <setupInterruptController()>
c0015708:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001570e:	a1 a0 45 02 c0       	mov    eax,ds:0xc00245a0
c0015713:	83 e0 10             	and    eax,0x10
c0015716:	83 f8 01             	cmp    eax,0x1
c0015719:	19 c0                	sbb    eax,eax
c001571b:	83 e0 46             	and    eax,0x46
c001571e:	83 c0 1e             	add    eax,0x1e
c0015721:	89 04 24             	mov    DWORD PTR [esp],eax
c0015724:	e8 e7 d6 ff ff       	call   c0012e10 <setupTimer(int)>
c0015729:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001572f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015732:	e8 99 fe ff ff       	call   c00155d0 <CPU::setupFeatures()>
c0015737:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001573a:	e8 3f f1 ff ff       	call   c001487e <CPU::displayFeatures()>
c001573f:	83 c4 10             	add    esp,0x10
c0015742:	5b                   	pop    ebx
c0015743:	31 c0                	xor    eax,eax
c0015745:	5e                   	pop    esi
c0015746:	5f                   	pop    edi
c0015747:	c3                   	ret    

c0015748 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015748:	56                   	push   esi
c0015749:	53                   	push   ebx
c001574a:	51                   	push   ecx
c001574b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001574f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015753:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015756:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015759:	88 c1                	mov    cl,al
c001575b:	c0 e9 06             	shr    cl,0x6
c001575e:	88 0c 24             	mov    BYTE PTR [esp],cl
c0015761:	88 c1                	mov    cl,al
c0015763:	66 c1 e8 03          	shr    ax,0x3
c0015767:	83 e1 07             	and    ecx,0x7
c001576a:	83 e0 07             	and    eax,0x7
c001576d:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015771:	88 06                	mov    BYTE PTR [esi],al
c0015773:	74 7f                	je     c00157f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015775:	80 f9 04             	cmp    cl,0x4
c0015778:	74 7a                	je     c00157f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001577a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001577e:	75 05                	jne    c0015785 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c0015780:	80 f9 05             	cmp    cl,0x5
c0015783:	74 6f                	je     c00157f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015785:	84 c9                	test   cl,cl
c0015787:	75 05                	jne    c001578e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c0015789:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c001578c:	eb 3c                	jmp    c00157ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001578e:	80 f9 01             	cmp    cl,0x1
c0015791:	75 05                	jne    c0015798 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c0015793:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015796:	eb 32                	jmp    c00157ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015798:	80 f9 02             	cmp    cl,0x2
c001579b:	75 05                	jne    c00157a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c001579d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00157a0:	eb 28                	jmp    c00157ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157a2:	31 c0                	xor    eax,eax
c00157a4:	80 f9 03             	cmp    cl,0x3
c00157a7:	75 05                	jne    c00157ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c00157a9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00157ac:	eb 1c                	jmp    c00157ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157ae:	80 f9 05             	cmp    cl,0x5
c00157b1:	75 05                	jne    c00157b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00157b3:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00157b6:	eb 12                	jmp    c00157ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157b8:	80 f9 06             	cmp    cl,0x6
c00157bb:	75 05                	jne    c00157c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00157bd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00157c0:	eb 08                	jmp    c00157ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157c2:	80 f9 07             	cmp    cl,0x7
c00157c5:	75 03                	jne    c00157ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157c7:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00157ca:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00157ce:	75 10                	jne    c00157e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00157d0:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00157d4:	b9 03 00 00 00       	mov    ecx,0x3
c00157d9:	01 d0                	add    eax,edx
c00157db:	e9 42 01 00 00       	jmp    c0015922 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00157e0:	b9 02 00 00 00       	mov    ecx,0x2
c00157e5:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00157e9:	0f 85 33 01 00 00    	jne    c0015922 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00157ef:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00157f2:	eb 18                	jmp    c001580c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00157f4:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00157f8:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00157fd:	80 f9 05             	cmp    cl,0x5
c0015800:	0f 94 c0             	sete   al
c0015803:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c0015807:	74 0d                	je     c0015816 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0015809:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001580c:	b9 06 00 00 00       	mov    ecx,0x6
c0015811:	e9 0c 01 00 00       	jmp    c0015922 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015816:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001581a:	0f 84 06 01 00 00    	je     c0015926 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c0015820:	80 f9 04             	cmp    cl,0x4
c0015823:	0f 85 06 01 00 00    	jne    c001592f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015829:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c001582c:	89 c6                	mov    esi,eax
c001582e:	88 c1                	mov    cl,al
c0015830:	66 c1 ee 03          	shr    si,0x3
c0015834:	c0 e9 06             	shr    cl,0x6
c0015837:	83 e6 07             	and    esi,0x7
c001583a:	24 07                	and    al,0x7
c001583c:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c0015840:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015844:	89 f1                	mov    ecx,esi
c0015846:	75 05                	jne    c001584d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c0015848:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c001584b:	eb 4b                	jmp    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001584d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015852:	75 05                	jne    c0015859 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c0015854:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015857:	eb 3f                	jmp    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015859:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001585e:	75 05                	jne    c0015865 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c0015860:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c0015863:	eb 33                	jmp    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015865:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001586a:	75 05                	jne    c0015871 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c001586c:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001586f:	eb 27                	jmp    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015871:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c0015876:	75 05                	jne    c001587d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c0015878:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c001587b:	eb 1b                	jmp    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001587d:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015882:	75 05                	jne    c0015889 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c0015884:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c0015887:	eb 0f                	jmp    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015889:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c001588e:	75 05                	jne    c0015895 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c0015890:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c0015893:	eb 03                	jmp    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015895:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0015898:	84 c9                	test   cl,cl
c001589a:	75 05                	jne    c00158a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001589c:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c001589f:	eb 3c                	jmp    c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158a1:	80 f9 01             	cmp    cl,0x1
c00158a4:	75 05                	jne    c00158ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00158a6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00158a9:	eb 32                	jmp    c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158ab:	80 f9 02             	cmp    cl,0x2
c00158ae:	75 05                	jne    c00158b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00158b0:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00158b3:	eb 28                	jmp    c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158b5:	80 f9 03             	cmp    cl,0x3
c00158b8:	75 05                	jne    c00158bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00158ba:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00158bd:	eb 1e                	jmp    c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158bf:	31 c0                	xor    eax,eax
c00158c1:	80 f9 04             	cmp    cl,0x4
c00158c4:	74 17                	je     c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158c6:	80 f9 05             	cmp    cl,0x5
c00158c9:	75 05                	jne    c00158d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00158cb:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158ce:	eb 0d                	jmp    c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158d0:	80 f9 06             	cmp    cl,0x6
c00158d3:	75 05                	jne    c00158da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00158d5:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158d8:	eb 03                	jmp    c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158da:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158dd:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00158e2:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00158e6:	0f 94 c2             	sete   dl
c00158e9:	d3 e0                	shl    eax,cl
c00158eb:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00158ef:	74 07                	je     c00158f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00158f1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00158f4:	31 d2                	xor    edx,edx
c00158f6:	eb 23                	jmp    c001591b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00158f8:	01 f0                	add    eax,esi
c00158fa:	b9 03 00 00 00       	mov    ecx,0x3
c00158ff:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015903:	74 33                	je     c0015938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015905:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015909:	75 0d                	jne    c0015918 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c001590b:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001590f:	01 c8                	add    eax,ecx
c0015911:	b9 04 00 00 00       	mov    ecx,0x4
c0015916:	eb 20                	jmp    c0015938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015918:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001591b:	b9 07 00 00 00       	mov    ecx,0x7
c0015920:	eb 16                	jmp    c0015938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015922:	31 d2                	xor    edx,edx
c0015924:	eb 12                	jmp    c0015938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015926:	b9 02 00 00 00       	mov    ecx,0x2
c001592b:	b2 01                	mov    dl,0x1
c001592d:	eb 07                	jmp    c0015936 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c001592f:	31 d2                	xor    edx,edx
c0015931:	b9 02 00 00 00       	mov    ecx,0x2
c0015936:	31 c0                	xor    eax,eax
c0015938:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001593c:	89 0b                	mov    DWORD PTR [ebx],ecx
c001593e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015942:	88 11                	mov    BYTE PTR [ecx],dl
c0015944:	5a                   	pop    edx
c0015945:	5b                   	pop    ebx
c0015946:	5e                   	pop    esi
c0015947:	c3                   	ret    

c0015948 <Krnl::panic(char const*)>:
c0015948:	55                   	push   ebp
c0015949:	89 e5                	mov    ebp,esp
c001594b:	53                   	push   ebx
c001594c:	51                   	push   ecx
c001594d:	a1 d0 4f 02 c0       	mov    eax,ds:0xc0024fd0
c0015952:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015955:	85 c0                	test   eax,eax
c0015957:	74 02                	je     c001595b <Krnl::panic(char const*)+0x13>
c0015959:	ff d0                	call   eax
c001595b:	fa                   	cli    
c001595c:	50                   	push   eax
c001595d:	c6 05 d4 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024fd4,0x1
c0015964:	50                   	push   eax
c0015965:	c6 05 c0 39 02 c0 00 	mov    BYTE PTR ds:0xc00239c0,0x0
c001596c:	53                   	push   ebx
c001596d:	68 b0 26 02 c0       	push   0xc00226b0
c0015972:	e8 e2 97 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015977:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001597c:	5a                   	pop    edx
c001597d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015983:	51                   	push   ecx
c0015984:	e8 c4 79 ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c0015989:	83 c4 0c             	add    esp,0xc
c001598c:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015991:	6a 01                	push   0x1
c0015993:	6a 0f                	push   0xf
c0015995:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001599b:	50                   	push   eax
c001599c:	e8 eb 73 ff ff       	call   c000cd8c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00159a1:	58                   	pop    eax
c00159a2:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00159a7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159ad:	50                   	push   eax
c00159ae:	e8 3d 7c ff ff       	call   c000d5f0 <VgaText::clearScreen()>
c00159b3:	58                   	pop    eax
c00159b4:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00159b9:	5a                   	pop    edx
c00159ba:	68 c9 26 02 c0       	push   0xc00226c9
c00159bf:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159c5:	51                   	push   ecx
c00159c6:	e8 a3 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00159cb:	58                   	pop    eax
c00159cc:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00159d1:	5a                   	pop    edx
c00159d2:	68 70 27 02 c0       	push   0xc0022770
c00159d7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159dd:	51                   	push   ecx
c00159de:	e8 8b 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00159e3:	58                   	pop    eax
c00159e4:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00159e9:	5a                   	pop    edx
c00159ea:	68 e5 26 02 c0       	push   0xc00226e5
c00159ef:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159f5:	51                   	push   ecx
c00159f6:	e8 73 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00159fb:	58                   	pop    eax
c00159fc:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a01:	5a                   	pop    edx
c0015a02:	53                   	push   ebx
c0015a03:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a09:	51                   	push   ecx
c0015a0a:	e8 5f 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a0f:	5b                   	pop    ebx
c0015a10:	58                   	pop    eax
c0015a11:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a16:	68 05 27 02 c0       	push   0xc0022705
c0015a1b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a21:	50                   	push   eax
c0015a22:	e8 47 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a27:	58                   	pop    eax
c0015a28:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a2d:	5a                   	pop    edx
c0015a2e:	68 ac 27 02 c0       	push   0xc00227ac
c0015a33:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a39:	51                   	push   ecx
c0015a3a:	e8 2f 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a3f:	5b                   	pop    ebx
c0015a40:	58                   	pop    eax
c0015a41:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a46:	68 e5 26 02 c0       	push   0xc00226e5
c0015a4b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a51:	50                   	push   eax
c0015a52:	e8 17 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a57:	58                   	pop    eax
c0015a58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a5d:	5a                   	pop    edx
c0015a5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a61:	83 c0 0c             	add    eax,0xc
c0015a64:	50                   	push   eax
c0015a65:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a6a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a70:	51                   	push   ecx
c0015a71:	e8 f8 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a76:	5b                   	pop    ebx
c0015a77:	58                   	pop    eax
c0015a78:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a7d:	68 04 27 02 c0       	push   0xc0022704
c0015a82:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a88:	50                   	push   eax
c0015a89:	e8 e0 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a8e:	58                   	pop    eax
c0015a8f:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a94:	5a                   	pop    edx
c0015a95:	68 d8 27 02 c0       	push   0xc00227d8
c0015a9a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015aa0:	51                   	push   ecx
c0015aa1:	e8 c8 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015aa6:	5b                   	pop    ebx
c0015aa7:	58                   	pop    eax
c0015aa8:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015aad:	68 18 28 02 c0       	push   0xc0022818
c0015ab2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ab8:	50                   	push   eax
c0015ab9:	e8 b0 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015abe:	58                   	pop    eax
c0015abf:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015ac4:	5a                   	pop    edx
c0015ac5:	68 f0 26 02 c0       	push   0xc00226f0
c0015aca:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ad0:	51                   	push   ecx
c0015ad1:	e8 98 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015ad6:	5b                   	pop    ebx
c0015ad7:	58                   	pop    eax
c0015ad8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015adb:	50                   	push   eax
c0015adc:	68 08 27 02 c0       	push   0xc0022708
c0015ae1:	e8 73 96 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015ae6:	58                   	pop    eax
c0015ae7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015aea:	5a                   	pop    edx
c0015aeb:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015aee:	51                   	push   ecx
c0015aef:	68 11 27 02 c0       	push   0xc0022711
c0015af4:	e8 60 96 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015af9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015afc:	5b                   	pop    ebx
c0015afd:	5a                   	pop    edx
c0015afe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b00:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015b03:	51                   	push   ecx
c0015b04:	68 1a 27 02 c0       	push   0xc002271a
c0015b09:	e8 4b 96 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015b0e:	5b                   	pop    ebx
c0015b0f:	58                   	pop    eax
c0015b10:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b15:	68 5c 28 02 c0       	push   0xc002285c
c0015b1a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b20:	50                   	push   eax
c0015b21:	e8 48 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b26:	58                   	pop    eax
c0015b27:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b2c:	5a                   	pop    edx
c0015b2d:	68 23 27 02 c0       	push   0xc0022723
c0015b32:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b38:	51                   	push   ecx
c0015b39:	e8 30 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b3e:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b43:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b49:	e8 ca 9e 00 00       	call   c001fa18 <CPU::readCR0()>
c0015b4e:	5a                   	pop    edx
c0015b4f:	59                   	pop    ecx
c0015b50:	50                   	push   eax
c0015b51:	53                   	push   ebx
c0015b52:	e8 3d 7c ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015b57:	5b                   	pop    ebx
c0015b58:	58                   	pop    eax
c0015b59:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b5e:	68 2d 27 02 c0       	push   0xc002272d
c0015b63:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b69:	50                   	push   eax
c0015b6a:	e8 ff 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b6f:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b74:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b7a:	e8 87 a1 00 00       	call   c001fd06 <CPU::readCR2()>
c0015b7f:	5a                   	pop    edx
c0015b80:	59                   	pop    ecx
c0015b81:	50                   	push   eax
c0015b82:	53                   	push   ebx
c0015b83:	e8 0c 7c ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015b88:	5b                   	pop    ebx
c0015b89:	58                   	pop    eax
c0015b8a:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b8f:	68 37 27 02 c0       	push   0xc0022737
c0015b94:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b9a:	50                   	push   eax
c0015b9b:	e8 ce 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015ba0:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015ba5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015bab:	e8 f5 9a 00 00       	call   c001f6a5 <CPU::readCR3()>
c0015bb0:	5a                   	pop    edx
c0015bb1:	59                   	pop    ecx
c0015bb2:	50                   	push   eax
c0015bb3:	53                   	push   ebx
c0015bb4:	e8 db 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015bb9:	5b                   	pop    ebx
c0015bba:	58                   	pop    eax
c0015bbb:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015bc0:	68 4a 27 02 c0       	push   0xc002274a
c0015bc5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bcb:	50                   	push   eax
c0015bcc:	e8 9d 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015bd1:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015bd6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015bdc:	e8 01 a1 00 00       	call   c001fce2 <CPU::readCR4()>
c0015be1:	5a                   	pop    edx
c0015be2:	59                   	pop    ecx
c0015be3:	50                   	push   eax
c0015be4:	53                   	push   ebx
c0015be5:	e8 aa 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015bea:	5b                   	pop    ebx
c0015beb:	58                   	pop    eax
c0015bec:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015bf1:	68 54 27 02 c0       	push   0xc0022754
c0015bf6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bfc:	50                   	push   eax
c0015bfd:	e8 6c 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015c02:	5a                   	pop    edx
c0015c03:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015c08:	59                   	pop    ecx
c0015c09:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015c0c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c12:	53                   	push   ebx
c0015c13:	50                   	push   eax
c0015c14:	e8 7b 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015c19:	58                   	pop    eax
c0015c1a:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015c1f:	5a                   	pop    edx
c0015c20:	68 6b 27 02 c0       	push   0xc002276b
c0015c25:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c2b:	51                   	push   ecx
c0015c2c:	e8 3d 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015c31:	5b                   	pop    ebx
c0015c32:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015c37:	5a                   	pop    edx
c0015c38:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c3b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c41:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015c44:	51                   	push   ecx
c0015c45:	50                   	push   eax
c0015c46:	e8 49 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015c4b:	5b                   	pop    ebx
c0015c4c:	58                   	pop    eax
c0015c4d:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015c52:	68 6b 27 02 c0       	push   0xc002276b
c0015c57:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c5d:	50                   	push   eax
c0015c5e:	e8 0b 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015c63:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c66:	59                   	pop    ecx
c0015c67:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015c6c:	5b                   	pop    ebx
c0015c6d:	8b 12                	mov    edx,DWORD PTR [edx]
c0015c6f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c75:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015c78:	52                   	push   edx
c0015c79:	50                   	push   eax
c0015c7a:	e8 15 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015c7f:	83 c4 10             	add    esp,0x10
c0015c82:	b2 fe                	mov    dl,0xfe
c0015c84:	e4 60                	in     al,0x60
c0015c86:	3c 1c                	cmp    al,0x1c
c0015c88:	74 04                	je     c0015c8e <Krnl::panic(char const*)+0x346>
c0015c8a:	3c 5a                	cmp    al,0x5a
c0015c8c:	75 f6                	jne    c0015c84 <Krnl::panic(char const*)+0x33c>
c0015c8e:	e4 64                	in     al,0x64
c0015c90:	a8 02                	test   al,0x2
c0015c92:	75 fa                	jne    c0015c8e <Krnl::panic(char const*)+0x346>
c0015c94:	88 d0                	mov    al,dl
c0015c96:	e6 64                	out    0x64,al
c0015c98:	fa                   	cli    
c0015c99:	f4                   	hlt    
c0015c9a:	eb e8                	jmp    c0015c84 <Krnl::panic(char const*)+0x33c>

c0015c9c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015c9c:	55                   	push   ebp
c0015c9d:	57                   	push   edi
c0015c9e:	56                   	push   esi
c0015c9f:	53                   	push   ebx
c0015ca0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015ca6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015cad:	8d 46 01             	lea    eax,[esi+0x1]
c0015cb0:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015cb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cb6:	80 fb 40             	cmp    bl,0x40
c0015cb9:	75 19                	jne    c0015cd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015cbb:	8a 06                	mov    al,BYTE PTR [esi]
c0015cbd:	84 c0                	test   al,al
c0015cbf:	74 07                	je     c0015cc8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015cc1:	3c 3a                	cmp    al,0x3a
c0015cc3:	74 03                	je     c0015cc8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015cc5:	46                   	inc    esi
c0015cc6:	eb f3                	jmp    c0015cbb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015cc8:	84 c0                	test   al,al
c0015cca:	0f 84 1f 01 00 00    	je     c0015def <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015cd0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015cd3:	46                   	inc    esi
c0015cd4:	50                   	push   eax
c0015cd5:	6a 40                	push   0x40
c0015cd7:	6a 00                	push   0x0
c0015cd9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015cdd:	50                   	push   eax
c0015cde:	e8 d7 a9 fe ff       	call   c00006ba <memset>
c0015ce3:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015cea:	31 d2                	xor    edx,edx
c0015cec:	83 c4 10             	add    esp,0x10
c0015cef:	8a 07                	mov    al,BYTE PTR [edi]
c0015cf1:	84 c0                	test   al,al
c0015cf3:	0f 84 f6 00 00 00    	je     c0015def <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015cf9:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015cff:	0f 8f ea 00 00 00    	jg     c0015def <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d05:	3c 0a                	cmp    al,0xa
c0015d07:	0f 85 d3 00 00 00    	jne    c0015de0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015d0d:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015d12:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015d16:	f6 c1 df             	test   cl,0xdf
c0015d19:	0f 94 c2             	sete   dl
c0015d1c:	80 f9 23             	cmp    cl,0x23
c0015d1f:	0f 94 c0             	sete   al
c0015d22:	08 c2                	or     dl,al
c0015d24:	75 47                	jne    c0015d6d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d26:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015d29:	3c 01                	cmp    al,0x1
c0015d2b:	76 40                	jbe    c0015d6d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d2d:	80 f9 5b             	cmp    cl,0x5b
c0015d30:	75 3f                	jne    c0015d71 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015d32:	80 fb 40             	cmp    bl,0x40
c0015d35:	75 36                	jne    c0015d6d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d37:	83 ec 0c             	sub    esp,0xc
c0015d3a:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015d3e:	55                   	push   ebp
c0015d3f:	e8 93 a9 fe ff       	call   c00006d7 <strlen>
c0015d44:	83 c4 10             	add    esp,0x10
c0015d47:	83 f8 3f             	cmp    eax,0x3f
c0015d4a:	0f 87 9f 00 00 00    	ja     c0015def <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d50:	50                   	push   eax
c0015d51:	50                   	push   eax
c0015d52:	55                   	push   ebp
c0015d53:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015d57:	55                   	push   ebp
c0015d58:	e8 fc a9 fe ff       	call   c0000759 <strcpy>
c0015d5d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015d60:	e8 72 a9 fe ff       	call   c00006d7 <strlen>
c0015d65:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015d6a:	83 c4 10             	add    esp,0x10
c0015d6d:	31 c9                	xor    ecx,ecx
c0015d6f:	eb 76                	jmp    c0015de7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015d71:	80 fb 40             	cmp    bl,0x40
c0015d74:	74 06                	je     c0015d7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015d76:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015d7a:	eb 19                	jmp    c0015d95 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015d7c:	51                   	push   ecx
c0015d7d:	51                   	push   ecx
c0015d7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d82:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d86:	50                   	push   eax
c0015d87:	e8 1e aa fe ff       	call   c00007aa <strcmp>
c0015d8c:	83 c4 10             	add    esp,0x10
c0015d8f:	85 c0                	test   eax,eax
c0015d91:	75 da                	jne    c0015d6d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d93:	eb e1                	jmp    c0015d76 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015d95:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015d98:	84 c0                	test   al,al
c0015d9a:	0f 94 c1             	sete   cl
c0015d9d:	3c 3d                	cmp    al,0x3d
c0015d9f:	0f 94 c2             	sete   dl
c0015da2:	08 d1                	or     cl,dl
c0015da4:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015da8:	75 03                	jne    c0015dad <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015daa:	45                   	inc    ebp
c0015dab:	eb e8                	jmp    c0015d95 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015dad:	84 c0                	test   al,al
c0015daf:	74 3e                	je     c0015def <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015db1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015db5:	52                   	push   edx
c0015db6:	52                   	push   edx
c0015db7:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015dbb:	50                   	push   eax
c0015dbc:	56                   	push   esi
c0015dbd:	e8 e8 a9 fe ff       	call   c00007aa <strcmp>
c0015dc2:	83 c4 10             	add    esp,0x10
c0015dc5:	85 c0                	test   eax,eax
c0015dc7:	75 a4                	jne    c0015d6d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015dc9:	50                   	push   eax
c0015dca:	8d 55 01             	lea    edx,[ebp+0x1]
c0015dcd:	50                   	push   eax
c0015dce:	52                   	push   edx
c0015dcf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015dd6:	e8 7e a9 fe ff       	call   c0000759 <strcpy>
c0015ddb:	83 c4 10             	add    esp,0x10
c0015dde:	eb 14                	jmp    c0015df4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015de0:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015de3:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015de7:	47                   	inc    edi
c0015de8:	89 ca                	mov    edx,ecx
c0015dea:	e9 00 ff ff ff       	jmp    c0015cef <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015def:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015df4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015df8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015dfe:	5b                   	pop    ebx
c0015dff:	5e                   	pop    esi
c0015e00:	5f                   	pop    edi
c0015e01:	5d                   	pop    ebp
c0015e02:	c3                   	ret    

c0015e03 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015e03:	57                   	push   edi
c0015e04:	56                   	push   esi
c0015e05:	53                   	push   ebx
c0015e06:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015e0c:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015e13:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015e1a:	53                   	push   ebx
c0015e1b:	e8 b7 a8 fe ff       	call   c00006d7 <strlen>
c0015e20:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e23:	89 c7                	mov    edi,eax
c0015e25:	e8 ad a8 fe ff       	call   c00006d7 <strlen>
c0015e2a:	83 c4 10             	add    esp,0x10
c0015e2d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015e31:	31 ff                	xor    edi,edi
c0015e33:	3d ff 00 00 00       	cmp    eax,0xff
c0015e38:	0f 87 18 01 00 00    	ja     c0015f56 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015e3e:	51                   	push   ecx
c0015e3f:	51                   	push   ecx
c0015e40:	56                   	push   esi
c0015e41:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015e45:	56                   	push   esi
c0015e46:	e8 0e a9 fe ff       	call   c0000759 <strcpy>
c0015e4b:	58                   	pop    eax
c0015e4c:	5a                   	pop    edx
c0015e4d:	68 54 2c 02 c0       	push   0xc0022c54
c0015e52:	56                   	push   esi
c0015e53:	e8 b8 a9 fe ff       	call   c0000810 <strcat>
c0015e58:	59                   	pop    ecx
c0015e59:	58                   	pop    eax
c0015e5a:	53                   	push   ebx
c0015e5b:	56                   	push   esi
c0015e5c:	e8 af a9 fe ff       	call   c0000810 <strcat>
c0015e61:	58                   	pop    eax
c0015e62:	5a                   	pop    edx
c0015e63:	68 82 28 02 c0       	push   0xc0022882
c0015e68:	56                   	push   esi
c0015e69:	e8 a2 a9 fe ff       	call   c0000810 <strcat>
c0015e6e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e75:	e8 aa 91 ff ff       	call   c000f024 <operator new(unsigned long)>
c0015e7a:	83 c4 0c             	add    esp,0xc
c0015e7d:	89 c3                	mov    ebx,eax
c0015e7f:	ff 35 d4 59 02 c0    	push   DWORD PTR ds:0xc00259d4
c0015e85:	56                   	push   esi
c0015e86:	50                   	push   eax
c0015e87:	e8 04 98 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0015e8c:	59                   	pop    ecx
c0015e8d:	5e                   	pop    esi
c0015e8e:	6a 01                	push   0x1
c0015e90:	53                   	push   ebx
c0015e91:	e8 5e 98 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0015e96:	83 c4 10             	add    esp,0x10
c0015e99:	85 c0                	test   eax,eax
c0015e9b:	74 08                	je     c0015ea5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015e9d:	83 ec 0c             	sub    esp,0xc
c0015ea0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ea2:	53                   	push   ebx
c0015ea3:	eb 2e                	jmp    c0015ed3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015ea5:	52                   	push   edx
c0015ea6:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015eaa:	50                   	push   eax
c0015eab:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015eaf:	50                   	push   eax
c0015eb0:	53                   	push   ebx
c0015eb1:	e8 ea 9a ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c0015eb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015eba:	83 c4 10             	add    esp,0x10
c0015ebd:	89 c1                	mov    ecx,eax
c0015ebf:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015ec3:	75 13                	jne    c0015ed8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015ec5:	83 ec 0c             	sub    esp,0xc
c0015ec8:	53                   	push   ebx
c0015ec9:	e8 84 98 ff ff       	call   c000f752 <File::close()>
c0015ece:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ed0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ed3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ed6:	eb 7b                	jmp    c0015f53 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015ed8:	83 ec 0c             	sub    esp,0xc
c0015edb:	50                   	push   eax
c0015edc:	e8 0a 61 ff ff       	call   c000bfeb <malloc>
c0015ee1:	89 c6                	mov    esi,eax
c0015ee3:	58                   	pop    eax
c0015ee4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ee6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015eea:	52                   	push   edx
c0015eeb:	56                   	push   esi
c0015eec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ef0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ef4:	53                   	push   ebx
c0015ef5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ef8:	83 c4 20             	add    esp,0x20
c0015efb:	85 c0                	test   eax,eax
c0015efd:	75 0a                	jne    c0015f09 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015eff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f03:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015f07:	74 18                	je     c0015f21 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015f09:	83 ec 0c             	sub    esp,0xc
c0015f0c:	31 ff                	xor    edi,edi
c0015f0e:	53                   	push   ebx
c0015f0f:	e8 3e 98 ff ff       	call   c000f752 <File::close()>
c0015f14:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f1c:	83 c4 10             	add    esp,0x10
c0015f1f:	eb 35                	jmp    c0015f56 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f21:	83 ec 0c             	sub    esp,0xc
c0015f24:	53                   	push   ebx
c0015f25:	e8 28 98 ff ff       	call   c000f752 <File::close()>
c0015f2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f32:	83 c4 0c             	add    esp,0xc
c0015f35:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015f3c:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015f43:	56                   	push   esi
c0015f44:	e8 53 fd ff ff       	call   c0015c9c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015f49:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f4c:	89 c7                	mov    edi,eax
c0015f4e:	e8 a8 60 ff ff       	call   c000bffb <free>
c0015f53:	83 c4 10             	add    esp,0x10
c0015f56:	81 c4 10 01 00 00    	add    esp,0x110
c0015f5c:	89 f8                	mov    eax,edi
c0015f5e:	5b                   	pop    ebx
c0015f5f:	5e                   	pop    esi
c0015f60:	5f                   	pop    edi
c0015f61:	c3                   	ret    

c0015f62 <Reg::getLine(char*, char*, char*)>:
c0015f62:	57                   	push   edi
c0015f63:	56                   	push   esi
c0015f64:	53                   	push   ebx
c0015f65:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015f71:	57                   	push   edi
c0015f72:	56                   	push   esi
c0015f73:	53                   	push   ebx
c0015f74:	68 87 28 02 c0       	push   0xc0022887
c0015f79:	e8 85 fe ff ff       	call   c0015e03 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f7e:	83 c4 10             	add    esp,0x10
c0015f81:	84 c0                	test   al,al
c0015f83:	75 10                	jne    c0015f95 <Reg::getLine(char*, char*, char*)+0x33>
c0015f85:	57                   	push   edi
c0015f86:	56                   	push   esi
c0015f87:	53                   	push   ebx
c0015f88:	68 ac 28 02 c0       	push   0xc00228ac
c0015f8d:	e8 71 fe ff ff       	call   c0015e03 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f92:	83 c4 10             	add    esp,0x10
c0015f95:	5b                   	pop    ebx
c0015f96:	5e                   	pop    esi
c0015f97:	5f                   	pop    edi
c0015f98:	c3                   	ret    

c0015f99 <Reg::readInt(char*, char*, int*)>:
c0015f99:	55                   	push   ebp
c0015f9a:	57                   	push   edi
c0015f9b:	56                   	push   esi
c0015f9c:	53                   	push   ebx
c0015f9d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015fa3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015fa7:	57                   	push   edi
c0015fa8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015faf:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fb6:	e8 a7 ff ff ff       	call   c0015f62 <Reg::getLine(char*, char*, char*)>
c0015fbb:	83 c4 10             	add    esp,0x10
c0015fbe:	84 c0                	test   al,al
c0015fc0:	0f 84 b2 00 00 00    	je     c0016078 <Reg::readInt(char*, char*, int*)+0xdf>
c0015fc6:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015fca:	80 fa 2b             	cmp    dl,0x2b
c0015fcd:	74 0c                	je     c0015fdb <Reg::readInt(char*, char*, int*)+0x42>
c0015fcf:	80 fa 2d             	cmp    dl,0x2d
c0015fd2:	75 0e                	jne    c0015fe2 <Reg::readInt(char*, char*, int*)+0x49>
c0015fd4:	ba 01 00 00 00       	mov    edx,0x1
c0015fd9:	eb 0b                	jmp    c0015fe6 <Reg::readInt(char*, char*, int*)+0x4d>
c0015fdb:	ba 01 00 00 00       	mov    edx,0x1
c0015fe0:	eb 02                	jmp    c0015fe4 <Reg::readInt(char*, char*, int*)+0x4b>
c0015fe2:	31 d2                	xor    edx,edx
c0015fe4:	31 c0                	xor    eax,eax
c0015fe6:	be 0a 00 00 00       	mov    esi,0xa
c0015feb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015ff0:	75 20                	jne    c0016012 <Reg::readInt(char*, char*, int*)+0x79>
c0015ff2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015ff6:	80 f9 78             	cmp    cl,0x78
c0015ff9:	75 0a                	jne    c0016005 <Reg::readInt(char*, char*, int*)+0x6c>
c0015ffb:	83 c2 02             	add    edx,0x2
c0015ffe:	be 10 00 00 00       	mov    esi,0x10
c0016003:	eb 0d                	jmp    c0016012 <Reg::readInt(char*, char*, int*)+0x79>
c0016005:	80 f9 62             	cmp    cl,0x62
c0016008:	75 08                	jne    c0016012 <Reg::readInt(char*, char*, int*)+0x79>
c001600a:	83 c2 02             	add    edx,0x2
c001600d:	be 02 00 00 00       	mov    esi,0x2
c0016012:	01 d7                	add    edi,edx
c0016014:	31 d2                	xor    edx,edx
c0016016:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016018:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001601c:	84 db                	test   bl,bl
c001601e:	0f 94 c3             	sete   bl
c0016021:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0016026:	0f 94 c1             	sete   cl
c0016029:	08 cb                	or     bl,cl
c001602b:	75 3a                	jne    c0016067 <Reg::readInt(char*, char*, int*)+0xce>
c001602d:	0f af d6             	imul   edx,esi
c0016030:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016035:	83 fe 10             	cmp    esi,0x10
c0016038:	75 26                	jne    c0016060 <Reg::readInt(char*, char*, int*)+0xc7>
c001603a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001603e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016041:	89 e9                	mov    ecx,ebp
c0016043:	80 f9 05             	cmp    cl,0x5
c0016046:	77 06                	ja     c001604e <Reg::readInt(char*, char*, int*)+0xb5>
c0016048:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001604c:	eb 16                	jmp    c0016064 <Reg::readInt(char*, char*, int*)+0xcb>
c001604e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016052:	83 e9 61             	sub    ecx,0x61
c0016055:	80 f9 05             	cmp    cl,0x5
c0016058:	77 06                	ja     c0016060 <Reg::readInt(char*, char*, int*)+0xc7>
c001605a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001605e:	eb 04                	jmp    c0016064 <Reg::readInt(char*, char*, int*)+0xcb>
c0016060:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016064:	47                   	inc    edi
c0016065:	eb af                	jmp    c0016016 <Reg::readInt(char*, char*, int*)+0x7d>
c0016067:	84 c0                	test   al,al
c0016069:	74 02                	je     c001606d <Reg::readInt(char*, char*, int*)+0xd4>
c001606b:	f7 da                	neg    edx
c001606d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016074:	89 10                	mov    DWORD PTR [eax],edx
c0016076:	88 d8                	mov    al,bl
c0016078:	81 c4 ec 00 00 00    	add    esp,0xec
c001607e:	5b                   	pop    ebx
c001607f:	5e                   	pop    esi
c0016080:	5f                   	pop    edi
c0016081:	5d                   	pop    ebp
c0016082:	c3                   	ret    

c0016083 <Reg::readString(char*, char*, char*, int)>:
c0016083:	57                   	push   edi
c0016084:	56                   	push   esi
c0016085:	53                   	push   ebx
c0016086:	81 ec d4 00 00 00    	sub    esp,0xd4
c001608c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0016090:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0016097:	57                   	push   edi
c0016098:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001609f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160a6:	e8 b7 fe ff ff       	call   c0015f62 <Reg::getLine(char*, char*, char*)>
c00160ab:	83 c4 10             	add    esp,0x10
c00160ae:	89 c6                	mov    esi,eax
c00160b0:	84 c0                	test   al,al
c00160b2:	74 44                	je     c00160f8 <Reg::readString(char*, char*, char*, int)+0x75>
c00160b4:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00160bb:	31 c0                	xor    eax,eax
c00160bd:	4a                   	dec    edx
c00160be:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00160c1:	84 c9                	test   cl,cl
c00160c3:	74 0f                	je     c00160d4 <Reg::readString(char*, char*, char*, int)+0x51>
c00160c5:	39 c2                	cmp    edx,eax
c00160c7:	7e 0b                	jle    c00160d4 <Reg::readString(char*, char*, char*, int)+0x51>
c00160c9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00160cc:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00160d1:	40                   	inc    eax
c00160d2:	eb ea                	jmp    c00160be <Reg::readString(char*, char*, char*, int)+0x3b>
c00160d4:	83 ec 0c             	sub    esp,0xc
c00160d7:	53                   	push   ebx
c00160d8:	e8 fa a5 fe ff       	call   c00006d7 <strlen>
c00160dd:	83 c4 10             	add    esp,0x10
c00160e0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00160e5:	75 11                	jne    c00160f8 <Reg::readString(char*, char*, char*, int)+0x75>
c00160e7:	83 ec 0c             	sub    esp,0xc
c00160ea:	53                   	push   ebx
c00160eb:	e8 e7 a5 fe ff       	call   c00006d7 <strlen>
c00160f0:	83 c4 10             	add    esp,0x10
c00160f3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00160f8:	81 c4 d0 00 00 00    	add    esp,0xd0
c00160fe:	89 f0                	mov    eax,esi
c0016100:	5b                   	pop    ebx
c0016101:	5e                   	pop    esi
c0016102:	5f                   	pop    edi
c0016103:	c3                   	ret    

c0016104 <Reg::readBool(char*, char*, bool*)>:
c0016104:	83 ec 20             	sub    esp,0x20
c0016107:	8d 44 24 10          	lea    eax,[esp+0x10]
c001610b:	50                   	push   eax
c001610c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016114:	e8 80 fe ff ff       	call   c0015f99 <Reg::readInt(char*, char*, int*)>
c0016119:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001611d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016122:	0f 95 02             	setne  BYTE PTR [edx]
c0016125:	83 c4 2c             	add    esp,0x2c
c0016128:	c3                   	ret    

c0016129 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016129:	53                   	push   ebx
c001612a:	83 ec 1c             	sub    esp,0x1c
c001612d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016131:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016135:	50                   	push   eax
c0016136:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001613a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001613e:	e8 c1 ff ff ff       	call   c0016104 <Reg::readBool(char*, char*, bool*)>
c0016143:	83 c4 10             	add    esp,0x10
c0016146:	84 c0                	test   al,al
c0016148:	74 04                	je     c001614e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001614a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001614e:	83 c4 18             	add    esp,0x18
c0016151:	88 d8                	mov    al,bl
c0016153:	5b                   	pop    ebx
c0016154:	c3                   	ret    

c0016155 <Reg::readIntWithDefault(char*, char*, int)>:
c0016155:	53                   	push   ebx
c0016156:	83 ec 1c             	sub    esp,0x1c
c0016159:	8d 44 24 10          	lea    eax,[esp+0x10]
c001615d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016161:	50                   	push   eax
c0016162:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016166:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001616a:	e8 2a fe ff ff       	call   c0015f99 <Reg::readInt(char*, char*, int*)>
c001616f:	83 c4 10             	add    esp,0x10
c0016172:	84 c0                	test   al,al
c0016174:	74 04                	je     c001617a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0016176:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001617a:	83 c4 18             	add    esp,0x18
c001617d:	89 d8                	mov    eax,ebx
c001617f:	5b                   	pop    ebx
c0016180:	c3                   	ret    

c0016181 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016181:	56                   	push   esi
c0016182:	53                   	push   ebx
c0016183:	51                   	push   ecx
c0016184:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016188:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001618c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016190:	56                   	push   esi
c0016191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016199:	e8 e5 fe ff ff       	call   c0016083 <Reg::readString(char*, char*, char*, int)>
c001619e:	83 c4 10             	add    esp,0x10
c00161a1:	84 c0                	test   al,al
c00161a3:	74 02                	je     c00161a7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00161a5:	89 f3                	mov    ebx,esi
c00161a7:	5a                   	pop    edx
c00161a8:	89 d8                	mov    eax,ebx
c00161aa:	5b                   	pop    ebx
c00161ab:	5e                   	pop    esi
c00161ac:	c3                   	ret    

c00161ad <Sys::exit(regs*)>:
c00161ad:	83 ec 18             	sub    esp,0x18
c00161b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161b4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00161b7:	e8 a6 31 00 00       	call   c0019362 <terminateTask(int)>
c00161bc:	83 c8 ff             	or     eax,0xffffffff
c00161bf:	89 c2                	mov    edx,eax
c00161c1:	83 c4 1c             	add    esp,0x1c
c00161c4:	c3                   	ret    

c00161c5 <Sys::loadDLL(regs*)>:
c00161c5:	56                   	push   esi
c00161c6:	31 d2                	xor    edx,edx
c00161c8:	53                   	push   ebx
c00161c9:	b8 01 00 00 00       	mov    eax,0x1
c00161ce:	51                   	push   ecx
c00161cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161d3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00161d7:	74 7d                	je     c0016256 <Sys::loadDLL(regs*)+0x91>
c00161d9:	83 ec 0c             	sub    esp,0xc
c00161dc:	68 14 01 00 00       	push   0x114
c00161e1:	e8 3e 8e ff ff       	call   c000f024 <operator new(unsigned long)>
c00161e6:	89 c3                	mov    ebx,eax
c00161e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161ed:	83 c4 0c             	add    esp,0xc
c00161f0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00161f3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00161f6:	53                   	push   ebx
c00161f7:	e8 94 94 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00161fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161ff:	e8 5e 97 ff ff       	call   c000f962 <File::exists()>
c0016204:	83 c4 10             	add    esp,0x10
c0016207:	84 c0                	test   al,al
c0016209:	8b 03                	mov    eax,DWORD PTR [ebx]
c001620b:	75 11                	jne    c001621e <Sys::loadDLL(regs*)+0x59>
c001620d:	83 ec 0c             	sub    esp,0xc
c0016210:	53                   	push   ebx
c0016211:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016214:	83 c4 10             	add    esp,0x10
c0016217:	b8 03 00 00 00       	mov    eax,0x3
c001621c:	eb 36                	jmp    c0016254 <Sys::loadDLL(regs*)+0x8f>
c001621e:	83 ec 0c             	sub    esp,0xc
c0016221:	53                   	push   ebx
c0016222:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016225:	58                   	pop    eax
c0016226:	5a                   	pop    edx
c0016227:	6a 00                	push   0x0
c0016229:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001622c:	e8 1f 21 00 00       	call   c0018350 <Thr::loadDLL(char const*, bool)>
c0016231:	83 c4 10             	add    esp,0x10
c0016234:	89 c1                	mov    ecx,eax
c0016236:	31 d2                	xor    edx,edx
c0016238:	b8 04 00 00 00       	mov    eax,0x4
c001623d:	85 c9                	test   ecx,ecx
c001623f:	74 15                	je     c0016256 <Sys::loadDLL(regs*)+0x91>
c0016241:	53                   	push   ebx
c0016242:	53                   	push   ebx
c0016243:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c0016249:	51                   	push   ecx
c001624a:	e8 c7 22 00 00       	call   c0018516 <Thr::executeDLL(unsigned long, void*)>
c001624f:	83 c4 10             	add    esp,0x10
c0016252:	31 c0                	xor    eax,eax
c0016254:	31 d2                	xor    edx,edx
c0016256:	59                   	pop    ecx
c0016257:	5b                   	pop    ebx
c0016258:	5e                   	pop    esi
c0016259:	c3                   	ret    

c001625a <Sys::read(regs*)>:
c001625a:	57                   	push   edi
c001625b:	56                   	push   esi
c001625c:	53                   	push   ebx
c001625d:	83 ec 10             	sub    esp,0x10
c0016260:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016264:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016267:	83 f8 02             	cmp    eax,0x2
c001626a:	77 10                	ja     c001627c <Sys::read(regs*)+0x22>
c001626c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016271:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016274:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001627a:	eb 0e                	jmp    c001628a <Sys::read(regs*)+0x30>
c001627c:	83 ec 0c             	sub    esp,0xc
c001627f:	50                   	push   eax
c0016280:	e8 5e 7d ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016285:	83 c4 10             	add    esp,0x10
c0016288:	89 c1                	mov    ecx,eax
c001628a:	83 c8 ff             	or     eax,0xffffffff
c001628d:	85 c9                	test   ecx,ecx
c001628f:	89 c2                	mov    edx,eax
c0016291:	74 28                	je     c00162bb <Sys::read(regs*)+0x61>
c0016293:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001629b:	83 ec 0c             	sub    esp,0xc
c001629e:	8b 01                	mov    eax,DWORD PTR [ecx]
c00162a0:	31 ff                	xor    edi,edi
c00162a2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00162a6:	52                   	push   edx
c00162a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162aa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00162ad:	57                   	push   edi
c00162ae:	56                   	push   esi
c00162af:	51                   	push   ecx
c00162b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00162b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00162b7:	83 c4 20             	add    esp,0x20
c00162ba:	99                   	cdq    
c00162bb:	83 c4 10             	add    esp,0x10
c00162be:	5b                   	pop    ebx
c00162bf:	5e                   	pop    esi
c00162c0:	5f                   	pop    edi
c00162c1:	c3                   	ret    

c00162c2 <Sys::sbrk(regs*)>:
c00162c2:	56                   	push   esi
c00162c3:	53                   	push   ebx
c00162c4:	50                   	push   eax
c00162c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162d1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00162d4:	85 db                	test   ebx,ebx
c00162d6:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00162dc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00162df:	74 02                	je     c00162e3 <Sys::sbrk(regs*)+0x21>
c00162e1:	79 06                	jns    c00162e9 <Sys::sbrk(regs*)+0x27>
c00162e3:	89 f0                	mov    eax,esi
c00162e5:	31 d2                	xor    edx,edx
c00162e7:	eb 2a                	jmp    c0016313 <Sys::sbrk(regs*)+0x51>
c00162e9:	83 c8 ff             	or     eax,0xffffffff
c00162ec:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00162f2:	89 c2                	mov    edx,eax
c00162f4:	77 1d                	ja     c0016313 <Sys::sbrk(regs*)+0x51>
c00162f6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00162fc:	50                   	push   eax
c00162fd:	c1 ea 0c             	shr    edx,0xc
c0016300:	68 07 04 00 00       	push   0x407
c0016305:	52                   	push   edx
c0016306:	51                   	push   ecx
c0016307:	e8 00 86 ff ff       	call   c000e90c <VAS::allocatePages(int, int)>
c001630c:	89 f0                	mov    eax,esi
c001630e:	31 d2                	xor    edx,edx
c0016310:	83 c4 10             	add    esp,0x10
c0016313:	59                   	pop    ecx
c0016314:	5b                   	pop    ebx
c0016315:	5e                   	pop    esi
c0016316:	c3                   	ret    

c0016317 <Sys::write(regs*)>:
c0016317:	57                   	push   edi
c0016318:	56                   	push   esi
c0016319:	53                   	push   ebx
c001631a:	83 ec 10             	sub    esp,0x10
c001631d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016321:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016324:	83 f8 02             	cmp    eax,0x2
c0016327:	77 10                	ja     c0016339 <Sys::write(regs*)+0x22>
c0016329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001632e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016331:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016337:	eb 0e                	jmp    c0016347 <Sys::write(regs*)+0x30>
c0016339:	83 ec 0c             	sub    esp,0xc
c001633c:	50                   	push   eax
c001633d:	e8 a1 7c ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016342:	83 c4 10             	add    esp,0x10
c0016345:	89 c1                	mov    ecx,eax
c0016347:	83 c8 ff             	or     eax,0xffffffff
c001634a:	85 c9                	test   ecx,ecx
c001634c:	89 c2                	mov    edx,eax
c001634e:	74 28                	je     c0016378 <Sys::write(regs*)+0x61>
c0016350:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016358:	31 ff                	xor    edi,edi
c001635a:	83 ec 0c             	sub    esp,0xc
c001635d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001635f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016363:	52                   	push   edx
c0016364:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016367:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001636a:	57                   	push   edi
c001636b:	56                   	push   esi
c001636c:	51                   	push   ecx
c001636d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016370:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016374:	83 c4 20             	add    esp,0x20
c0016377:	99                   	cdq    
c0016378:	83 c4 10             	add    esp,0x10
c001637b:	5b                   	pop    ebx
c001637c:	5e                   	pop    esi
c001637d:	5f                   	pop    edi
c001637e:	c3                   	ret    

c001637f <Sys::yield(regs*)>:
c001637f:	83 ec 0c             	sub    esp,0xc
c0016382:	e8 ae 25 00 00       	call   c0018935 <lockScheduler()>
c0016387:	e8 f2 28 00 00       	call   c0018c7e <schedule()>
c001638c:	e8 a6 25 00 00       	call   c0018937 <unlockScheduler()>
c0016391:	31 c0                	xor    eax,eax
c0016393:	31 d2                	xor    edx,edx
c0016395:	83 c4 0c             	add    esp,0xc
c0016398:	c3                   	ret    

c0016399 <sysCallGetPID(regs*)>:
c0016399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001639e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00163a3:	89 c2                	mov    edx,eax
c00163a5:	c1 fa 1f             	sar    edx,0x1f
c00163a8:	c3                   	ret    

c00163a9 <sysCallSeekDir(regs*)>:
c00163a9:	31 c0                	xor    eax,eax
c00163ab:	31 d2                	xor    edx,edx
c00163ad:	c3                   	ret    

c00163ae <sysCallTellDir(regs*)>:
c00163ae:	31 c0                	xor    eax,eax
c00163b0:	31 d2                	xor    edx,edx
c00163b2:	c3                   	ret    

c00163b3 <sysCallVerify(regs*)>:
c00163b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163b7:	31 d2                	xor    edx,edx
c00163b9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00163bc:	c3                   	ret    

c00163bd <sysCallFork(regs*)>:
c00163bd:	83 c8 ff             	or     eax,0xffffffff
c00163c0:	83 ca ff             	or     edx,0xffffffff
c00163c3:	c3                   	ret    

c00163c4 <sysCallExecve(regs*)>:
c00163c4:	83 c8 ff             	or     eax,0xffffffff
c00163c7:	83 ca ff             	or     edx,0xffffffff
c00163ca:	c3                   	ret    

c00163cb <sysCallGetArgc(regs*)>:
c00163cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163d3:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00163d9:	89 c2                	mov    edx,eax
c00163db:	c1 fa 1f             	sar    edx,0x1f
c00163de:	c3                   	ret    

c00163df <sysFormatDisk(regs*)>:
c00163df:	56                   	push   esi
c00163e0:	53                   	push   ebx
c00163e1:	50                   	push   eax
c00163e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163e6:	8b 1d e8 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246e8
c00163ec:	eb 2a                	jmp    c0016418 <sysFormatDisk(regs*)+0x39>
c00163ee:	83 ec 0c             	sub    esp,0xc
c00163f1:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00163f4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00163f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00163f9:	51                   	push   ecx
c00163fa:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00163fd:	51                   	push   ecx
c00163fe:	50                   	push   eax
c00163ff:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c0016406:	50                   	push   eax
c0016407:	53                   	push   ebx
c0016408:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001640b:	83 c4 20             	add    esp,0x20
c001640e:	89 c1                	mov    ecx,eax
c0016410:	83 f8 08             	cmp    eax,0x8
c0016413:	75 12                	jne    c0016427 <sysFormatDisk(regs*)+0x48>
c0016415:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016418:	85 db                	test   ebx,ebx
c001641a:	75 d2                	jne    c00163ee <sysFormatDisk(regs*)+0xf>
c001641c:	b8 03 00 00 00       	mov    eax,0x3
c0016421:	31 d2                	xor    edx,edx
c0016423:	59                   	pop    ecx
c0016424:	5b                   	pop    ebx
c0016425:	5e                   	pop    esi
c0016426:	c3                   	ret    
c0016427:	85 c0                	test   eax,eax
c0016429:	74 13                	je     c001643e <sysFormatDisk(regs*)+0x5f>
c001642b:	31 d2                	xor    edx,edx
c001642d:	b8 01 00 00 00       	mov    eax,0x1
c0016432:	83 f9 09             	cmp    ecx,0x9
c0016435:	74 ec                	je     c0016423 <sysFormatDisk(regs*)+0x44>
c0016437:	b8 02 00 00 00       	mov    eax,0x2
c001643c:	eb e3                	jmp    c0016421 <sysFormatDisk(regs*)+0x42>
c001643e:	31 c0                	xor    eax,eax
c0016440:	eb df                	jmp    c0016421 <sysFormatDisk(regs*)+0x42>

c0016442 <sysSetDiskVolumeLabel(regs*)>:
c0016442:	56                   	push   esi
c0016443:	53                   	push   ebx
c0016444:	53                   	push   ebx
c0016445:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016449:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001644c:	83 f8 19             	cmp    eax,0x19
c001644f:	77 2d                	ja     c001647e <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016451:	8b 0c 85 80 4b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb480]
c0016458:	85 c9                	test   ecx,ecx
c001645a:	74 22                	je     c001647e <sysSetDiskVolumeLabel(regs*)+0x3c>
c001645c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001645f:	85 d2                	test   edx,edx
c0016461:	74 1b                	je     c001647e <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016463:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0016469:	8b 33                	mov    esi,DWORD PTR [ebx]
c001646b:	52                   	push   edx
c001646c:	50                   	push   eax
c001646d:	51                   	push   ecx
c001646e:	53                   	push   ebx
c001646f:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016472:	83 c4 10             	add    esp,0x10
c0016475:	89 c2                	mov    edx,eax
c0016477:	c1 fa 1f             	sar    edx,0x1f
c001647a:	59                   	pop    ecx
c001647b:	5b                   	pop    ebx
c001647c:	5e                   	pop    esi
c001647d:	c3                   	ret    
c001647e:	59                   	pop    ecx
c001647f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016484:	5b                   	pop    ebx
c0016485:	83 ca ff             	or     edx,0xffffffff
c0016488:	5e                   	pop    esi
c0016489:	c3                   	ret    

c001648a <sysGetDiskVolumeLabel(regs*)>:
c001648a:	57                   	push   edi
c001648b:	56                   	push   esi
c001648c:	53                   	push   ebx
c001648d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016491:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016494:	83 fa 19             	cmp    edx,0x19
c0016497:	77 38                	ja     c00164d1 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016499:	8b 0c 95 80 4b 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb480]
c00164a0:	85 c9                	test   ecx,ecx
c00164a2:	74 2d                	je     c00164d1 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164a4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00164a7:	85 db                	test   ebx,ebx
c00164a9:	74 26                	je     c00164d1 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164ab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00164ae:	85 c0                	test   eax,eax
c00164b0:	74 1f                	je     c00164d1 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164b2:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00164b8:	83 ec 0c             	sub    esp,0xc
c00164bb:	8b 3e                	mov    edi,DWORD PTR [esi]
c00164bd:	50                   	push   eax
c00164be:	53                   	push   ebx
c00164bf:	52                   	push   edx
c00164c0:	51                   	push   ecx
c00164c1:	56                   	push   esi
c00164c2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00164c5:	83 c4 20             	add    esp,0x20
c00164c8:	89 c2                	mov    edx,eax
c00164ca:	c1 fa 1f             	sar    edx,0x1f
c00164cd:	5b                   	pop    ebx
c00164ce:	5e                   	pop    esi
c00164cf:	5f                   	pop    edi
c00164d0:	c3                   	ret    
c00164d1:	5b                   	pop    ebx
c00164d2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00164d7:	5e                   	pop    esi
c00164d8:	83 ca ff             	or     edx,0xffffffff
c00164db:	5f                   	pop    edi
c00164dc:	c3                   	ret    

c00164dd <sysShutdown(regs*)>:
c00164dd:	57                   	push   edi
c00164de:	56                   	push   esi
c00164df:	56                   	push   esi
c00164e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164e7:	85 c0                	test   eax,eax
c00164e9:	74 18                	je     c0016503 <sysShutdown(regs*)+0x26>
c00164eb:	83 f8 01             	cmp    eax,0x1
c00164ee:	74 51                	je     c0016541 <sysShutdown(regs*)+0x64>
c00164f0:	83 ce ff             	or     esi,0xffffffff
c00164f3:	83 cf ff             	or     edi,0xffffffff
c00164f6:	83 f8 02             	cmp    eax,0x2
c00164f9:	74 2a                	je     c0016525 <sysShutdown(regs*)+0x48>
c00164fb:	59                   	pop    ecx
c00164fc:	89 f0                	mov    eax,esi
c00164fe:	5e                   	pop    esi
c00164ff:	89 fa                	mov    edx,edi
c0016501:	5f                   	pop    edi
c0016502:	c3                   	ret    
c0016503:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0016508:	83 ce ff             	or     esi,0xffffffff
c001650b:	83 cf ff             	or     edi,0xffffffff
c001650e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016510:	6a 00                	push   0x0
c0016512:	6a 00                	push   0x0
c0016514:	6a 00                	push   0x0
c0016516:	50                   	push   eax
c0016517:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001651a:	83 c4 10             	add    esp,0x10
c001651d:	89 f0                	mov    eax,esi
c001651f:	89 fa                	mov    edx,edi
c0016521:	59                   	pop    ecx
c0016522:	5e                   	pop    esi
c0016523:	5f                   	pop    edi
c0016524:	c3                   	ret    
c0016525:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001652a:	8b 10                	mov    edx,DWORD PTR [eax]
c001652c:	6a 00                	push   0x0
c001652e:	6a 00                	push   0x0
c0016530:	6a 01                	push   0x1
c0016532:	50                   	push   eax
c0016533:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016536:	83 c4 10             	add    esp,0x10
c0016539:	89 f0                	mov    eax,esi
c001653b:	89 fa                	mov    edx,edi
c001653d:	59                   	pop    ecx
c001653e:	5e                   	pop    esi
c001653f:	5f                   	pop    edi
c0016540:	c3                   	ret    
c0016541:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c0016546:	85 c0                	test   eax,eax
c0016548:	74 02                	je     c001654c <sysShutdown(regs*)+0x6f>
c001654a:	ff d0                	call   eax
c001654c:	31 f6                	xor    esi,esi
c001654e:	59                   	pop    ecx
c001654f:	31 ff                	xor    edi,edi
c0016551:	89 f0                	mov    eax,esi
c0016553:	5e                   	pop    esi
c0016554:	89 fa                	mov    edx,edi
c0016556:	5f                   	pop    edi
c0016557:	c3                   	ret    

c0016558 <sysCallGetCwd(regs*)>:
c0016558:	83 ec 10             	sub    esp,0x10
c001655b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001655f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016562:	52                   	push   edx
c0016563:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016566:	51                   	push   ecx
c0016567:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001656c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001656f:	50                   	push   eax
c0016570:	e8 8c 94 ff ff       	call   c000fa01 <getcwd(Process*, char*, int)>
c0016575:	89 c2                	mov    edx,eax
c0016577:	83 c4 1c             	add    esp,0x1c
c001657a:	c1 fa 1f             	sar    edx,0x1f
c001657d:	c3                   	ret    

c001657e <sysCallSetCwd(regs*)>:
c001657e:	83 ec 14             	sub    esp,0x14
c0016581:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016585:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016588:	50                   	push   eax
c0016589:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001658e:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0016591:	52                   	push   edx
c0016592:	e8 94 94 ff ff       	call   c000fa2b <setcwd(Process*, char*)>
c0016597:	89 c2                	mov    edx,eax
c0016599:	83 c4 1c             	add    esp,0x1c
c001659c:	c1 fa 1f             	sar    edx,0x1f
c001659f:	c3                   	ret    

c00165a0 <sysCallRealpath(regs*)>:
c00165a0:	53                   	push   ebx
c00165a1:	83 ec 08             	sub    esp,0x8
c00165a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a8:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00165ab:	85 c9                	test   ecx,ecx
c00165ad:	74 35                	je     c00165e4 <sysCallRealpath(regs*)+0x44>
c00165af:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165b2:	31 d2                	xor    edx,edx
c00165b4:	b8 01 00 00 00       	mov    eax,0x1
c00165b9:	85 db                	test   ebx,ebx
c00165bb:	75 05                	jne    c00165c2 <sysCallRealpath(regs*)+0x22>
c00165bd:	83 c4 08             	add    esp,0x8
c00165c0:	5b                   	pop    ebx
c00165c1:	c3                   	ret    
c00165c2:	50                   	push   eax
c00165c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165cb:	05 0c 01 00 00       	add    eax,0x10c
c00165d0:	50                   	push   eax
c00165d1:	51                   	push   ecx
c00165d2:	53                   	push   ebx
c00165d3:	e8 0e 8f ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c00165d8:	83 c4 10             	add    esp,0x10
c00165db:	31 c0                	xor    eax,eax
c00165dd:	31 d2                	xor    edx,edx
c00165df:	83 c4 08             	add    esp,0x8
c00165e2:	5b                   	pop    ebx
c00165e3:	c3                   	ret    
c00165e4:	b8 01 00 00 00       	mov    eax,0x1
c00165e9:	31 d2                	xor    edx,edx
c00165eb:	eb f2                	jmp    c00165df <sysCallRealpath(regs*)+0x3f>

c00165ed <sysCallReadDir(regs*)>:
c00165ed:	53                   	push   ebx
c00165ee:	83 ec 18             	sub    esp,0x18
c00165f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00165f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00165f8:	83 f8 02             	cmp    eax,0x2
c00165fb:	76 56                	jbe    c0016653 <sysCallReadDir(regs*)+0x66>
c00165fd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016600:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016606:	77 57                	ja     c001665f <sysCallReadDir(regs*)+0x72>
c0016608:	83 ec 0c             	sub    esp,0xc
c001660b:	50                   	push   eax
c001660c:	e8 d2 79 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016611:	83 c4 10             	add    esp,0x10
c0016614:	85 c0                	test   eax,eax
c0016616:	74 57                	je     c001666f <sysCallReadDir(regs*)+0x82>
c0016618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016620:	83 ec 0c             	sub    esp,0xc
c0016623:	8b 10                	mov    edx,DWORD PTR [eax]
c0016625:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016629:	51                   	push   ecx
c001662a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001662d:	51                   	push   ecx
c001662e:	6a 00                	push   0x0
c0016630:	68 10 01 00 00       	push   0x110
c0016635:	50                   	push   eax
c0016636:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016639:	83 c4 20             	add    esp,0x20
c001663c:	89 c1                	mov    ecx,eax
c001663e:	85 c0                	test   eax,eax
c0016640:	74 38                	je     c001667a <sysCallReadDir(regs*)+0x8d>
c0016642:	31 d2                	xor    edx,edx
c0016644:	b8 02 00 00 00       	mov    eax,0x2
c0016649:	83 f9 07             	cmp    ecx,0x7
c001664c:	74 05                	je     c0016653 <sysCallReadDir(regs*)+0x66>
c001664e:	83 c4 18             	add    esp,0x18
c0016651:	5b                   	pop    ebx
c0016652:	c3                   	ret    
c0016653:	b8 01 00 00 00       	mov    eax,0x1
c0016658:	31 d2                	xor    edx,edx
c001665a:	83 c4 18             	add    esp,0x18
c001665d:	5b                   	pop    ebx
c001665e:	c3                   	ret    
c001665f:	53                   	push   ebx
c0016660:	53                   	push   ebx
c0016661:	52                   	push   edx
c0016662:	68 c8 28 02 c0       	push   0xc00228c8
c0016667:	e8 ed 8a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001666c:	83 c4 10             	add    esp,0x10
c001666f:	83 c4 18             	add    esp,0x18
c0016672:	83 c8 ff             	or     eax,0xffffffff
c0016675:	83 ca ff             	or     edx,0xffffffff
c0016678:	5b                   	pop    ebx
c0016679:	c3                   	ret    
c001667a:	31 c0                	xor    eax,eax
c001667c:	31 d2                	xor    edx,edx
c001667e:	eb da                	jmp    c001665a <sysCallReadDir(regs*)+0x6d>

c0016680 <sysCallIsATTY(regs*)>:
c0016680:	83 ec 0c             	sub    esp,0xc
c0016683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016687:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001668a:	83 f8 02             	cmp    eax,0x2
c001668d:	76 07                	jbe    c0016696 <sysCallIsATTY(regs*)+0x16>
c001668f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016694:	75 28                	jne    c00166be <sysCallIsATTY(regs*)+0x3e>
c0016696:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001669b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001669e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00166a4:	85 c0                	test   eax,eax
c00166a6:	74 26                	je     c00166ce <sysCallIsATTY(regs*)+0x4e>
c00166a8:	83 ec 0c             	sub    esp,0xc
c00166ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00166ad:	50                   	push   eax
c00166ae:	ff 12                	call   DWORD PTR [edx]
c00166b0:	83 c4 10             	add    esp,0x10
c00166b3:	25 ff 00 00 00       	and    eax,0xff
c00166b8:	31 d2                	xor    edx,edx
c00166ba:	83 c4 0c             	add    esp,0xc
c00166bd:	c3                   	ret    
c00166be:	83 ec 0c             	sub    esp,0xc
c00166c1:	50                   	push   eax
c00166c2:	e8 1c 79 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c00166c7:	83 c4 10             	add    esp,0x10
c00166ca:	85 c0                	test   eax,eax
c00166cc:	75 da                	jne    c00166a8 <sysCallIsATTY(regs*)+0x28>
c00166ce:	83 c8 ff             	or     eax,0xffffffff
c00166d1:	83 ca ff             	or     edx,0xffffffff
c00166d4:	83 c4 0c             	add    esp,0xc
c00166d7:	c3                   	ret    

c00166d8 <sysCallSeek(regs*)>:
c00166d8:	53                   	push   ebx
c00166d9:	83 ec 08             	sub    esp,0x8
c00166dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00166e3:	83 f8 02             	cmp    eax,0x2
c00166e6:	76 4b                	jbe    c0016733 <sysCallSeek(regs*)+0x5b>
c00166e8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00166ed:	77 34                	ja     c0016723 <sysCallSeek(regs*)+0x4b>
c00166ef:	83 ec 0c             	sub    esp,0xc
c00166f2:	50                   	push   eax
c00166f3:	e8 eb 78 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c00166f8:	83 c4 0c             	add    esp,0xc
c00166fb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00166fe:	31 db                	xor    ebx,ebx
c0016700:	53                   	push   ebx
c0016701:	51                   	push   ecx
c0016702:	50                   	push   eax
c0016703:	e8 aa 90 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0016708:	83 c4 10             	add    esp,0x10
c001670b:	85 c0                	test   eax,eax
c001670d:	0f 95 c0             	setne  al
c0016710:	25 ff 00 00 00       	and    eax,0xff
c0016715:	31 d2                	xor    edx,edx
c0016717:	f7 d8                	neg    eax
c0016719:	83 d2 00             	adc    edx,0x0
c001671c:	83 c4 08             	add    esp,0x8
c001671f:	f7 da                	neg    edx
c0016721:	5b                   	pop    ebx
c0016722:	c3                   	ret    
c0016723:	52                   	push   edx
c0016724:	52                   	push   edx
c0016725:	50                   	push   eax
c0016726:	68 84 29 02 c0       	push   0xc0022984
c001672b:	e8 29 8a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016730:	83 c4 10             	add    esp,0x10
c0016733:	83 c4 08             	add    esp,0x8
c0016736:	83 c8 ff             	or     eax,0xffffffff
c0016739:	83 ca ff             	or     edx,0xffffffff
c001673c:	5b                   	pop    ebx
c001673d:	c3                   	ret    

c001673e <sysCallTell(regs*)>:
c001673e:	53                   	push   ebx
c001673f:	83 ec 08             	sub    esp,0x8
c0016742:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016746:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016749:	83 f8 02             	cmp    eax,0x2
c001674c:	76 60                	jbe    c00167ae <sysCallTell(regs*)+0x70>
c001674e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016753:	77 30                	ja     c0016785 <sysCallTell(regs*)+0x47>
c0016755:	83 ec 0c             	sub    esp,0xc
c0016758:	50                   	push   eax
c0016759:	e8 85 78 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c001675e:	5a                   	pop    edx
c001675f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016762:	59                   	pop    ecx
c0016763:	53                   	push   ebx
c0016764:	50                   	push   eax
c0016765:	e8 9e 90 ff ff       	call   c000f808 <File::tell(unsigned long long*)>
c001676a:	83 c4 10             	add    esp,0x10
c001676d:	85 c0                	test   eax,eax
c001676f:	0f 95 c0             	setne  al
c0016772:	25 ff 00 00 00       	and    eax,0xff
c0016777:	31 d2                	xor    edx,edx
c0016779:	f7 d8                	neg    eax
c001677b:	83 d2 00             	adc    edx,0x0
c001677e:	83 c4 08             	add    esp,0x8
c0016781:	f7 da                	neg    edx
c0016783:	5b                   	pop    ebx
c0016784:	c3                   	ret    
c0016785:	52                   	push   edx
c0016786:	52                   	push   edx
c0016787:	50                   	push   eax
c0016788:	68 9e 29 02 c0       	push   0xc002299e
c001678d:	e8 c7 89 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016792:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016795:	83 c4 10             	add    esp,0x10
c0016798:	31 d2                	xor    edx,edx
c001679a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00167a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00167a7:	83 c4 08             	add    esp,0x8
c00167aa:	31 c0                	xor    eax,eax
c00167ac:	5b                   	pop    ebx
c00167ad:	c3                   	ret    
c00167ae:	83 c4 08             	add    esp,0x8
c00167b1:	83 c8 ff             	or     eax,0xffffffff
c00167b4:	83 ca ff             	or     edx,0xffffffff
c00167b7:	5b                   	pop    ebx
c00167b8:	c3                   	ret    

c00167b9 <sysCallSizeFromFilename(regs*)>:
c00167b9:	57                   	push   edi
c00167ba:	56                   	push   esi
c00167bb:	53                   	push   ebx
c00167bc:	83 ec 10             	sub    esp,0x10
c00167bf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00167c3:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00167c6:	83 fb 02             	cmp    ebx,0x2
c00167c9:	0f 86 8b 00 00 00    	jbe    c001685a <sysCallSizeFromFilename(regs*)+0xa1>
c00167cf:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00167d5:	77 58                	ja     c001682f <sysCallSizeFromFilename(regs*)+0x76>
c00167d7:	83 ec 0c             	sub    esp,0xc
c00167da:	68 14 01 00 00       	push   0x114
c00167df:	e8 40 88 ff ff       	call   c000f024 <operator new(unsigned long)>
c00167e4:	89 c7                	mov    edi,eax
c00167e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167eb:	83 c4 0c             	add    esp,0xc
c00167ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167f1:	50                   	push   eax
c00167f2:	53                   	push   ebx
c00167f3:	57                   	push   edi
c00167f4:	e8 97 8e ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00167f9:	83 c4 0c             	add    esp,0xc
c00167fc:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016800:	50                   	push   eax
c0016801:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0016804:	52                   	push   edx
c0016805:	57                   	push   edi
c0016806:	e8 95 91 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c001680b:	89 c3                	mov    ebx,eax
c001680d:	8b 07                	mov    eax,DWORD PTR [edi]
c001680f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016812:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016815:	31 c0                	xor    eax,eax
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	85 db                	test   ebx,ebx
c001681c:	0f 95 c0             	setne  al
c001681f:	31 d2                	xor    edx,edx
c0016821:	f7 d8                	neg    eax
c0016823:	83 d2 00             	adc    edx,0x0
c0016826:	83 c4 10             	add    esp,0x10
c0016829:	f7 da                	neg    edx
c001682b:	5b                   	pop    ebx
c001682c:	5e                   	pop    esi
c001682d:	5f                   	pop    edi
c001682e:	c3                   	ret    
c001682f:	51                   	push   ecx
c0016830:	51                   	push   ecx
c0016831:	53                   	push   ebx
c0016832:	68 b8 29 02 c0       	push   0xc00229b8
c0016837:	e8 1d 89 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001683c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001683f:	83 c4 10             	add    esp,0x10
c0016842:	31 d2                	xor    edx,edx
c0016844:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001684a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016851:	83 c4 10             	add    esp,0x10
c0016854:	31 c0                	xor    eax,eax
c0016856:	5b                   	pop    ebx
c0016857:	5e                   	pop    esi
c0016858:	5f                   	pop    edi
c0016859:	c3                   	ret    
c001685a:	83 c4 10             	add    esp,0x10
c001685d:	83 c8 ff             	or     eax,0xffffffff
c0016860:	83 ca ff             	or     edx,0xffffffff
c0016863:	5b                   	pop    ebx
c0016864:	5e                   	pop    esi
c0016865:	5f                   	pop    edi
c0016866:	c3                   	ret    

c0016867 <sysCallSize(regs*)>:
c0016867:	53                   	push   ebx
c0016868:	83 ec 18             	sub    esp,0x18
c001686b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001686f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016872:	83 f8 02             	cmp    eax,0x2
c0016875:	76 66                	jbe    c00168dd <sysCallSize(regs*)+0x76>
c0016877:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001687c:	77 36                	ja     c00168b4 <sysCallSize(regs*)+0x4d>
c001687e:	83 ec 0c             	sub    esp,0xc
c0016881:	50                   	push   eax
c0016882:	e8 5c 77 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016887:	83 c4 0c             	add    esp,0xc
c001688a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001688e:	52                   	push   edx
c001688f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016892:	52                   	push   edx
c0016893:	50                   	push   eax
c0016894:	e8 07 91 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c0016899:	83 c4 10             	add    esp,0x10
c001689c:	85 c0                	test   eax,eax
c001689e:	0f 95 c0             	setne  al
c00168a1:	25 ff 00 00 00       	and    eax,0xff
c00168a6:	31 d2                	xor    edx,edx
c00168a8:	f7 d8                	neg    eax
c00168aa:	83 d2 00             	adc    edx,0x0
c00168ad:	83 c4 18             	add    esp,0x18
c00168b0:	f7 da                	neg    edx
c00168b2:	5b                   	pop    ebx
c00168b3:	c3                   	ret    
c00168b4:	51                   	push   ecx
c00168b5:	51                   	push   ecx
c00168b6:	50                   	push   eax
c00168b7:	68 b8 29 02 c0       	push   0xc00229b8
c00168bc:	e8 98 88 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00168c1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00168c4:	83 c4 10             	add    esp,0x10
c00168c7:	31 d2                	xor    edx,edx
c00168c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168d6:	83 c4 18             	add    esp,0x18
c00168d9:	31 c0                	xor    eax,eax
c00168db:	5b                   	pop    ebx
c00168dc:	c3                   	ret    
c00168dd:	83 c4 18             	add    esp,0x18
c00168e0:	83 c8 ff             	or     eax,0xffffffff
c00168e3:	83 ca ff             	or     edx,0xffffffff
c00168e6:	5b                   	pop    ebx
c00168e7:	c3                   	ret    

c00168e8 <sysCallClose(regs*)>:
c00168e8:	53                   	push   ebx
c00168e9:	83 ec 08             	sub    esp,0x8
c00168ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00168f3:	83 f8 02             	cmp    eax,0x2
c00168f6:	76 4f                	jbe    c0016947 <sysCallClose(regs*)+0x5f>
c00168f8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00168fd:	74 53                	je     c0016952 <sysCallClose(regs*)+0x6a>
c00168ff:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016904:	74 5b                	je     c0016961 <sysCallClose(regs*)+0x79>
c0016906:	77 2f                	ja     c0016937 <sysCallClose(regs*)+0x4f>
c0016908:	83 ec 0c             	sub    esp,0xc
c001690b:	50                   	push   eax
c001690c:	e8 d2 76 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016911:	89 c3                	mov    ebx,eax
c0016913:	89 04 24             	mov    DWORD PTR [esp],eax
c0016916:	e8 37 8e ff ff       	call   c000f752 <File::close()>
c001691b:	83 c4 10             	add    esp,0x10
c001691e:	85 db                	test   ebx,ebx
c0016920:	74 0c                	je     c001692e <sysCallClose(regs*)+0x46>
c0016922:	83 ec 0c             	sub    esp,0xc
c0016925:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016927:	53                   	push   ebx
c0016928:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	83 c4 08             	add    esp,0x8
c0016931:	31 c0                	xor    eax,eax
c0016933:	31 d2                	xor    edx,edx
c0016935:	5b                   	pop    ebx
c0016936:	c3                   	ret    
c0016937:	52                   	push   edx
c0016938:	52                   	push   edx
c0016939:	50                   	push   eax
c001693a:	68 ec 28 02 c0       	push   0xc00228ec
c001693f:	e8 15 88 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016944:	83 c4 10             	add    esp,0x10
c0016947:	83 c4 08             	add    esp,0x8
c001694a:	83 c8 ff             	or     eax,0xffffffff
c001694d:	83 ca ff             	or     edx,0xffffffff
c0016950:	5b                   	pop    ebx
c0016951:	c3                   	ret    
c0016952:	83 ec 0c             	sub    esp,0xc
c0016955:	68 d3 29 02 c0       	push   0xc00229d3
c001695a:	e8 fa 87 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001695f:	eb ca                	jmp    c001692b <sysCallClose(regs*)+0x43>
c0016961:	83 ec 0c             	sub    esp,0xc
c0016964:	68 e1 29 02 c0       	push   0xc00229e1
c0016969:	eb ef                	jmp    c001695a <sysCallClose(regs*)+0x72>

c001696b <sysCallOpenDir(regs*)>:
c001696b:	56                   	push   esi
c001696c:	53                   	push   ebx
c001696d:	50                   	push   eax
c001696e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016972:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016975:	85 c0                	test   eax,eax
c0016977:	74 53                	je     c00169cc <sysCallOpenDir(regs*)+0x61>
c0016979:	83 ec 0c             	sub    esp,0xc
c001697c:	68 14 01 00 00       	push   0x114
c0016981:	e8 9e 86 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016986:	89 c6                	mov    esi,eax
c0016988:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001698d:	83 c4 0c             	add    esp,0xc
c0016990:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016993:	50                   	push   eax
c0016994:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016997:	50                   	push   eax
c0016998:	56                   	push   esi
c0016999:	e8 b4 91 ff ff       	call   c000fb52 <Directory::Directory(char const*, Process*)>
c001699e:	89 34 24             	mov    DWORD PTR [esp],esi
c00169a1:	e8 10 92 ff ff       	call   c000fbb6 <Directory::open()>
c00169a6:	83 c4 10             	add    esp,0x10
c00169a9:	85 c0                	test   eax,eax
c00169ab:	75 1f                	jne    c00169cc <sysCallOpenDir(regs*)+0x61>
c00169ad:	83 ec 0c             	sub    esp,0xc
c00169b0:	56                   	push   esi
c00169b1:	e8 78 73 ff ff       	call   c000dd2e <UnixFile::getFileDescriptor()>
c00169b6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00169b9:	83 c4 10             	add    esp,0x10
c00169bc:	89 02                	mov    DWORD PTR [edx],eax
c00169be:	c1 f8 1f             	sar    eax,0x1f
c00169c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169c4:	31 c0                	xor    eax,eax
c00169c6:	59                   	pop    ecx
c00169c7:	31 d2                	xor    edx,edx
c00169c9:	5b                   	pop    ebx
c00169ca:	5e                   	pop    esi
c00169cb:	c3                   	ret    
c00169cc:	59                   	pop    ecx
c00169cd:	83 c8 ff             	or     eax,0xffffffff
c00169d0:	5b                   	pop    ebx
c00169d1:	83 ca ff             	or     edx,0xffffffff
c00169d4:	5e                   	pop    esi
c00169d5:	c3                   	ret    

c00169d6 <sysCallMakeDir(regs*)>:
c00169d6:	56                   	push   esi
c00169d7:	53                   	push   ebx
c00169d8:	83 ec 10             	sub    esp,0x10
c00169db:	68 14 01 00 00       	push   0x114
c00169e0:	e8 3f 86 ff ff       	call   c000f024 <operator new(unsigned long)>
c00169e5:	89 c3                	mov    ebx,eax
c00169e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169ec:	83 c4 0c             	add    esp,0xc
c00169ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00169f2:	50                   	push   eax
c00169f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00169f7:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00169fa:	52                   	push   edx
c00169fb:	53                   	push   ebx
c00169fc:	e8 51 91 ff ff       	call   c000fb52 <Directory::Directory(char const*, Process*)>
c0016a01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a04:	e8 8d 93 ff ff       	call   c000fd96 <Directory::create()>
c0016a09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a0c:	89 c6                	mov    esi,eax
c0016a0e:	e8 ff 91 ff ff       	call   c000fc12 <Directory::close()>
c0016a13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a1b:	31 c0                	xor    eax,eax
c0016a1d:	85 f6                	test   esi,esi
c0016a1f:	0f 95 c0             	setne  al
c0016a22:	31 d2                	xor    edx,edx
c0016a24:	f7 d8                	neg    eax
c0016a26:	83 d2 00             	adc    edx,0x0
c0016a29:	83 c4 14             	add    esp,0x14
c0016a2c:	f7 da                	neg    edx
c0016a2e:	5b                   	pop    ebx
c0016a2f:	5e                   	pop    esi
c0016a30:	c3                   	ret    

c0016a31 <sysCallCloseDir(regs*)>:
c0016a31:	53                   	push   ebx
c0016a32:	83 ec 08             	sub    esp,0x8
c0016a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a3c:	83 f8 02             	cmp    eax,0x2
c0016a3f:	76 46                	jbe    c0016a87 <sysCallCloseDir(regs*)+0x56>
c0016a41:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a46:	77 2f                	ja     c0016a77 <sysCallCloseDir(regs*)+0x46>
c0016a48:	83 ec 0c             	sub    esp,0xc
c0016a4b:	50                   	push   eax
c0016a4c:	e8 92 75 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016a51:	89 c3                	mov    ebx,eax
c0016a53:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a56:	e8 b7 91 ff ff       	call   c000fc12 <Directory::close()>
c0016a5b:	83 c4 10             	add    esp,0x10
c0016a5e:	85 db                	test   ebx,ebx
c0016a60:	74 0c                	je     c0016a6e <sysCallCloseDir(regs*)+0x3d>
c0016a62:	83 ec 0c             	sub    esp,0xc
c0016a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a67:	53                   	push   ebx
c0016a68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a6b:	83 c4 10             	add    esp,0x10
c0016a6e:	83 c4 08             	add    esp,0x8
c0016a71:	31 c0                	xor    eax,eax
c0016a73:	31 d2                	xor    edx,edx
c0016a75:	5b                   	pop    ebx
c0016a76:	c3                   	ret    
c0016a77:	52                   	push   edx
c0016a78:	52                   	push   edx
c0016a79:	50                   	push   eax
c0016a7a:	68 14 29 02 c0       	push   0xc0022914
c0016a7f:	e8 d5 86 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016a84:	83 c4 10             	add    esp,0x10
c0016a87:	83 c4 08             	add    esp,0x8
c0016a8a:	83 c8 ff             	or     eax,0xffffffff
c0016a8d:	83 ca ff             	or     edx,0xffffffff
c0016a90:	5b                   	pop    ebx
c0016a91:	c3                   	ret    

c0016a92 <sysCallWait(regs*)>:
c0016a92:	83 ec 10             	sub    esp,0x10
c0016a95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016a99:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016a9c:	52                   	push   edx
c0016a9d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016aa0:	51                   	push   ecx
c0016aa1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016aa4:	50                   	push   eax
c0016aa5:	e8 4e 23 00 00       	call   c0018df8 <waitTask(int, int*, int)>
c0016aaa:	89 c2                	mov    edx,eax
c0016aac:	83 c4 1c             	add    esp,0x1c
c0016aaf:	c1 fa 1f             	sar    edx,0x1f
c0016ab2:	c3                   	ret    

c0016ab3 <sysCallRmdir(regs*)>:
c0016ab3:	56                   	push   esi
c0016ab4:	53                   	push   ebx
c0016ab5:	83 ec 10             	sub    esp,0x10
c0016ab8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016abc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016abf:	68 14 01 00 00       	push   0x114
c0016ac4:	e8 5b 85 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016ac9:	83 c4 0c             	add    esp,0xc
c0016acc:	89 c3                	mov    ebx,eax
c0016ace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ad3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ad6:	50                   	push   eax
c0016ad7:	56                   	push   esi
c0016ad8:	53                   	push   ebx
c0016ad9:	e8 b2 8b ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016ade:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ae1:	e8 86 8d ff ff       	call   c000f86c <File::unlink()>
c0016ae6:	89 c6                	mov    esi,eax
c0016ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016aed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016af0:	31 c0                	xor    eax,eax
c0016af2:	85 f6                	test   esi,esi
c0016af4:	0f 95 c0             	setne  al
c0016af7:	31 d2                	xor    edx,edx
c0016af9:	f7 d8                	neg    eax
c0016afb:	83 d2 00             	adc    edx,0x0
c0016afe:	83 c4 14             	add    esp,0x14
c0016b01:	f7 da                	neg    edx
c0016b03:	5b                   	pop    ebx
c0016b04:	5e                   	pop    esi
c0016b05:	c3                   	ret    

c0016b06 <sysCallUnlink(regs*)>:
c0016b06:	56                   	push   esi
c0016b07:	53                   	push   ebx
c0016b08:	83 ec 10             	sub    esp,0x10
c0016b0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b0f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016b12:	68 14 01 00 00       	push   0x114
c0016b17:	e8 08 85 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016b1c:	83 c4 0c             	add    esp,0xc
c0016b1f:	89 c3                	mov    ebx,eax
c0016b21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b29:	50                   	push   eax
c0016b2a:	56                   	push   esi
c0016b2b:	53                   	push   ebx
c0016b2c:	e8 5f 8b ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016b31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b34:	e8 33 8d ff ff       	call   c000f86c <File::unlink()>
c0016b39:	89 c6                	mov    esi,eax
c0016b3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b43:	31 c0                	xor    eax,eax
c0016b45:	85 f6                	test   esi,esi
c0016b47:	0f 95 c0             	setne  al
c0016b4a:	31 d2                	xor    edx,edx
c0016b4c:	f7 d8                	neg    eax
c0016b4e:	83 d2 00             	adc    edx,0x0
c0016b51:	83 c4 14             	add    esp,0x14
c0016b54:	f7 da                	neg    edx
c0016b56:	5b                   	pop    ebx
c0016b57:	5e                   	pop    esi
c0016b58:	c3                   	ret    

c0016b59 <sysCallGetArgv(regs*)>:
c0016b59:	83 ec 0c             	sub    esp,0xc
c0016b5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b60:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016b63:	85 c0                	test   eax,eax
c0016b65:	78 2b                	js     c0016b92 <sysCallGetArgv(regs*)+0x39>
c0016b67:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016b6d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016b70:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016b76:	7d 1a                	jge    c0016b92 <sysCallGetArgv(regs*)+0x39>
c0016b78:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016b7f:	85 c0                	test   eax,eax
c0016b81:	74 17                	je     c0016b9a <sysCallGetArgv(regs*)+0x41>
c0016b83:	51                   	push   ecx
c0016b84:	51                   	push   ecx
c0016b85:	50                   	push   eax
c0016b86:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016b89:	50                   	push   eax
c0016b8a:	e8 ca 9b fe ff       	call   c0000759 <strcpy>
c0016b8f:	83 c4 10             	add    esp,0x10
c0016b92:	31 c0                	xor    eax,eax
c0016b94:	31 d2                	xor    edx,edx
c0016b96:	83 c4 0c             	add    esp,0xc
c0016b99:	c3                   	ret    
c0016b9a:	b8 01 00 00 00       	mov    eax,0x1
c0016b9f:	31 d2                	xor    edx,edx
c0016ba1:	83 c4 0c             	add    esp,0xc
c0016ba4:	c3                   	ret    

c0016ba5 <sysCallTTYName(regs*)>:
c0016ba5:	56                   	push   esi
c0016ba6:	53                   	push   ebx
c0016ba7:	50                   	push   eax
c0016ba8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016bac:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016baf:	85 c0                	test   eax,eax
c0016bb1:	74 4d                	je     c0016c00 <sysCallTTYName(regs*)+0x5b>
c0016bb3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016bb6:	83 f8 02             	cmp    eax,0x2
c0016bb9:	76 07                	jbe    c0016bc2 <sysCallTTYName(regs*)+0x1d>
c0016bbb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016bc0:	75 54                	jne    c0016c16 <sysCallTTYName(regs*)+0x71>
c0016bc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bc7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016bca:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016bd0:	85 db                	test   ebx,ebx
c0016bd2:	74 2c                	je     c0016c00 <sysCallTTYName(regs*)+0x5b>
c0016bd4:	83 ec 0c             	sub    esp,0xc
c0016bd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bd9:	53                   	push   ebx
c0016bda:	ff 10                	call   DWORD PTR [eax]
c0016bdc:	83 c4 10             	add    esp,0x10
c0016bdf:	84 c0                	test   al,al
c0016be1:	74 28                	je     c0016c0b <sysCallTTYName(regs*)+0x66>
c0016be3:	50                   	push   eax
c0016be4:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016bea:	50                   	push   eax
c0016beb:	53                   	push   ebx
c0016bec:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016bef:	50                   	push   eax
c0016bf0:	e8 64 9b fe ff       	call   c0000759 <strcpy>
c0016bf5:	83 c4 10             	add    esp,0x10
c0016bf8:	31 c0                	xor    eax,eax
c0016bfa:	31 d2                	xor    edx,edx
c0016bfc:	59                   	pop    ecx
c0016bfd:	5b                   	pop    ebx
c0016bfe:	5e                   	pop    esi
c0016bff:	c3                   	ret    
c0016c00:	59                   	pop    ecx
c0016c01:	b8 01 00 00 00       	mov    eax,0x1
c0016c06:	5b                   	pop    ebx
c0016c07:	31 d2                	xor    edx,edx
c0016c09:	5e                   	pop    esi
c0016c0a:	c3                   	ret    
c0016c0b:	59                   	pop    ecx
c0016c0c:	b8 02 00 00 00       	mov    eax,0x2
c0016c11:	5b                   	pop    ebx
c0016c12:	31 d2                	xor    edx,edx
c0016c14:	5e                   	pop    esi
c0016c15:	c3                   	ret    
c0016c16:	83 ec 0c             	sub    esp,0xc
c0016c19:	50                   	push   eax
c0016c1a:	e8 c4 73 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016c1f:	83 c4 10             	add    esp,0x10
c0016c22:	89 c3                	mov    ebx,eax
c0016c24:	eb aa                	jmp    c0016bd0 <sysCallTTYName(regs*)+0x2b>

c0016c26 <sysCallGetEnv(regs*)>:
c0016c26:	83 ec 0c             	sub    esp,0xc
c0016c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016c30:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016c33:	85 d2                	test   edx,edx
c0016c35:	75 22                	jne    c0016c59 <sysCallGetEnv(regs*)+0x33>
c0016c37:	31 c0                	xor    eax,eax
c0016c39:	31 d2                	xor    edx,edx
c0016c3b:	85 c9                	test   ecx,ecx
c0016c3d:	74 04                	je     c0016c43 <sysCallGetEnv(regs*)+0x1d>
c0016c3f:	83 c4 0c             	add    esp,0xc
c0016c42:	c3                   	ret    
c0016c43:	83 ec 0c             	sub    esp,0xc
c0016c46:	68 38 29 02 c0       	push   0xc0022938
c0016c4b:	e8 87 9a fe ff       	call   c00006d7 <strlen>
c0016c50:	83 c4 10             	add    esp,0x10
c0016c53:	31 d2                	xor    edx,edx
c0016c55:	83 c4 0c             	add    esp,0xc
c0016c58:	c3                   	ret    
c0016c59:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016c5c:	85 c9                	test   ecx,ecx
c0016c5e:	74 0b                	je     c0016c6b <sysCallGetEnv(regs*)+0x45>
c0016c60:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016c63:	31 c0                	xor    eax,eax
c0016c65:	31 d2                	xor    edx,edx
c0016c67:	83 c4 0c             	add    esp,0xc
c0016c6a:	c3                   	ret    
c0016c6b:	52                   	push   edx
c0016c6c:	52                   	push   edx
c0016c6d:	68 38 29 02 c0       	push   0xc0022938
c0016c72:	50                   	push   eax
c0016c73:	e8 e1 9a fe ff       	call   c0000759 <strcpy>
c0016c78:	83 c4 10             	add    esp,0x10
c0016c7b:	eb e6                	jmp    c0016c63 <sysCallGetEnv(regs*)+0x3d>

c0016c7d <sysCallUSleep(regs*)>:
c0016c7d:	57                   	push   edi
c0016c7e:	56                   	push   esi
c0016c7f:	53                   	push   ebx
c0016c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c84:	52                   	push   edx
c0016c85:	52                   	push   edx
c0016c86:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016c89:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016c8c:	89 c8                	mov    eax,ecx
c0016c8e:	89 da                	mov    edx,ebx
c0016c90:	0f a4 c2 05          	shld   edx,eax,0x5
c0016c94:	c1 e0 05             	shl    eax,0x5
c0016c97:	29 c8                	sub    eax,ecx
c0016c99:	19 da                	sbb    edx,ebx
c0016c9b:	0f a4 c2 02          	shld   edx,eax,0x2
c0016c9f:	c1 e0 02             	shl    eax,0x2
c0016ca2:	01 c8                	add    eax,ecx
c0016ca4:	11 da                	adc    edx,ebx
c0016ca6:	0f a4 c2 03          	shld   edx,eax,0x3
c0016caa:	c1 e0 03             	shl    eax,0x3
c0016cad:	52                   	push   edx
c0016cae:	50                   	push   eax
c0016caf:	e8 df 21 00 00       	call   c0018e93 <nanoSleep(unsigned long long)>
c0016cb4:	83 c4 10             	add    esp,0x10
c0016cb7:	31 c0                	xor    eax,eax
c0016cb9:	31 d2                	xor    edx,edx
c0016cbb:	5b                   	pop    ebx
c0016cbc:	5e                   	pop    esi
c0016cbd:	5f                   	pop    edi
c0016cbe:	c3                   	ret    

c0016cbf <sysCallSpawn(regs*)>:
c0016cbf:	56                   	push   esi
c0016cc0:	53                   	push   ebx
c0016cc1:	50                   	push   eax
c0016cc2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016cc6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016cc9:	85 c0                	test   eax,eax
c0016ccb:	75 08                	jne    c0016cd5 <sysCallSpawn(regs*)+0x16>
c0016ccd:	59                   	pop    ecx
c0016cce:	31 c0                	xor    eax,eax
c0016cd0:	5b                   	pop    ebx
c0016cd1:	31 d2                	xor    edx,edx
c0016cd3:	5e                   	pop    esi
c0016cd4:	c3                   	ret    
c0016cd5:	83 ec 0c             	sub    esp,0xc
c0016cd8:	68 3b 07 00 00       	push   0x73b
c0016cdd:	e8 42 83 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016ce2:	89 c6                	mov    esi,eax
c0016ce4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016ce7:	50                   	push   eax
c0016ce8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ced:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cf0:	50                   	push   eax
c0016cf1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016cf4:	50                   	push   eax
c0016cf5:	56                   	push   esi
c0016cf6:	e8 d5 18 00 00       	call   c00185d0 <Process::Process(char const*, Process*, char**)>
c0016cfb:	83 c4 20             	add    esp,0x20
c0016cfe:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016d05:	75 c6                	jne    c0016ccd <sysCallSpawn(regs*)+0xe>
c0016d07:	83 ec 0c             	sub    esp,0xc
c0016d0a:	56                   	push   esi
c0016d0b:	e8 3c 1e 00 00       	call   c0018b4c <Process::createUserThread()>
c0016d10:	83 c4 10             	add    esp,0x10
c0016d13:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d15:	89 c2                	mov    edx,eax
c0016d17:	c1 fa 1f             	sar    edx,0x1f
c0016d1a:	59                   	pop    ecx
c0016d1b:	5b                   	pop    ebx
c0016d1c:	5e                   	pop    esi
c0016d1d:	c3                   	ret    

c0016d1e <sysAppSettings(regs*)>:
c0016d1e:	53                   	push   ebx
c0016d1f:	31 d2                	xor    edx,edx
c0016d21:	83 ec 08             	sub    esp,0x8
c0016d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d28:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016d2b:	b8 01 00 00 00       	mov    eax,0x1
c0016d30:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016d36:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016d3c:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016d41:	75 30                	jne    c0016d73 <sysAppSettings(regs*)+0x55>
c0016d43:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016d49:	83 e0 1f             	and    eax,0x1f
c0016d4c:	3c 01                	cmp    al,0x1
c0016d4e:	74 28                	je     c0016d78 <sysAppSettings(regs*)+0x5a>
c0016d50:	3c 07                	cmp    al,0x7
c0016d52:	0f 84 be 00 00 00    	je     c0016e16 <sysAppSettings(regs*)+0xf8>
c0016d58:	84 c0                	test   al,al
c0016d5a:	0f 84 da 00 00 00    	je     c0016e3a <sysAppSettings(regs*)+0x11c>
c0016d60:	3c 08                	cmp    al,0x8
c0016d62:	74 6d                	je     c0016dd1 <sysAppSettings(regs*)+0xb3>
c0016d64:	25 ff 00 00 00       	and    eax,0xff
c0016d69:	05 e8 03 00 00       	add    eax,0x3e8
c0016d6e:	89 c2                	mov    edx,eax
c0016d70:	c1 fa 1f             	sar    edx,0x1f
c0016d73:	83 c4 08             	add    esp,0x8
c0016d76:	5b                   	pop    ebx
c0016d77:	c3                   	ret    
c0016d78:	50                   	push   eax
c0016d79:	68 00 01 00 00       	push   0x100
c0016d7e:	6a 00                	push   0x0
c0016d80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d88:	83 c0 0c             	add    eax,0xc
c0016d8b:	50                   	push   eax
c0016d8c:	e8 29 99 fe ff       	call   c00006ba <memset>
c0016d91:	83 c4 0c             	add    esp,0xc
c0016d94:	68 ff 00 00 00       	push   0xff
c0016d99:	53                   	push   ebx
c0016d9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d9f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016da2:	83 c0 0c             	add    eax,0xc
c0016da5:	50                   	push   eax
c0016da6:	e8 d9 98 fe ff       	call   c0000684 <memcpy>
c0016dab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db0:	5a                   	pop    edx
c0016db1:	59                   	pop    ecx
c0016db2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016db5:	8d 50 0c             	lea    edx,[eax+0xc]
c0016db8:	52                   	push   edx
c0016db9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016dbf:	53                   	push   ebx
c0016dc0:	e8 fb 63 ff ff       	call   c000d1c0 <VgaText::setTitle(char*)>
c0016dc5:	83 c4 10             	add    esp,0x10
c0016dc8:	31 c0                	xor    eax,eax
c0016dca:	31 d2                	xor    edx,edx
c0016dcc:	83 c4 08             	add    esp,0x8
c0016dcf:	5b                   	pop    ebx
c0016dd0:	c3                   	ret    
c0016dd1:	50                   	push   eax
c0016dd2:	50                   	push   eax
c0016dd3:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016dd9:	83 e0 0f             	and    eax,0xf
c0016ddc:	50                   	push   eax
c0016ddd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016de2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016de5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016deb:	50                   	push   eax
c0016dec:	e8 bf 63 ff ff       	call   c000d1b0 <VgaText::setTitleColour(VgaColour)>
c0016df1:	58                   	pop    eax
c0016df2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016df8:	c1 e8 04             	shr    eax,0x4
c0016dfb:	5a                   	pop    edx
c0016dfc:	83 e0 0f             	and    eax,0xf
c0016dff:	50                   	push   eax
c0016e00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e05:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e08:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016e0e:	51                   	push   ecx
c0016e0f:	e8 8c 63 ff ff       	call   c000d1a0 <VgaText::setTitleTextColour(VgaColour)>
c0016e14:	eb af                	jmp    c0016dc5 <sysAppSettings(regs*)+0xa7>
c0016e16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e1e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016e24:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016e2a:	c0 e8 06             	shr    al,0x6
c0016e2d:	83 e0 01             	and    eax,0x1
c0016e30:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016e36:	31 c0                	xor    eax,eax
c0016e38:	eb 90                	jmp    c0016dca <sysAppSettings(regs*)+0xac>
c0016e3a:	b8 02 00 00 00       	mov    eax,0x2
c0016e3f:	31 d2                	xor    edx,edx
c0016e41:	eb 89                	jmp    c0016dcc <sysAppSettings(regs*)+0xae>

c0016e43 <sysSetFatAttrib(regs*)>:
c0016e43:	57                   	push   edi
c0016e44:	56                   	push   esi
c0016e45:	53                   	push   ebx
c0016e46:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e4a:	83 ec 0c             	sub    esp,0xc
c0016e4d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016e50:	68 14 01 00 00       	push   0x114
c0016e55:	e8 ca 81 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016e5a:	83 c4 0c             	add    esp,0xc
c0016e5d:	89 c3                	mov    ebx,eax
c0016e5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e64:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e67:	50                   	push   eax
c0016e68:	57                   	push   edi
c0016e69:	53                   	push   ebx
c0016e6a:	e8 21 88 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016e6f:	83 c4 0c             	add    esp,0xc
c0016e72:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016e75:	0f b6 d4             	movzx  edx,ah
c0016e78:	52                   	push   edx
c0016e79:	25 ff 00 00 00       	and    eax,0xff
c0016e7e:	50                   	push   eax
c0016e7f:	53                   	push   ebx
c0016e80:	e8 81 8a ff ff       	call   c000f906 <File::chfatattr(unsigned char, unsigned char)>
c0016e85:	89 c6                	mov    esi,eax
c0016e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e8f:	83 c4 10             	add    esp,0x10
c0016e92:	31 c0                	xor    eax,eax
c0016e94:	85 f6                	test   esi,esi
c0016e96:	0f 95 c0             	setne  al
c0016e99:	5b                   	pop    ebx
c0016e9a:	31 d2                	xor    edx,edx
c0016e9c:	f7 d8                	neg    eax
c0016e9e:	83 d2 00             	adc    edx,0x0
c0016ea1:	5e                   	pop    esi
c0016ea2:	f7 da                	neg    edx
c0016ea4:	5f                   	pop    edi
c0016ea5:	c3                   	ret    

c0016ea6 <sysPanic(regs*)>:
c0016ea6:	83 ec 18             	sub    esp,0x18
c0016ea9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ead:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016eb0:	50                   	push   eax
c0016eb1:	e8 92 ea ff ff       	call   c0015948 <Krnl::panic(char const*)>
c0016eb6:	c7 04 24 ef 29 02 c0 	mov    DWORD PTR [esp],0xc00229ef
c0016ebd:	e8 86 ea ff ff       	call   c0015948 <Krnl::panic(char const*)>
c0016ec2:	b8 01 00 00 00       	mov    eax,0x1
c0016ec7:	31 d2                	xor    edx,edx
c0016ec9:	83 c4 1c             	add    esp,0x1c
c0016ecc:	c3                   	ret    

c0016ecd <sysPipe(regs*)>:
c0016ecd:	57                   	push   edi
c0016ece:	56                   	push   esi
c0016ecf:	53                   	push   ebx
c0016ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ed4:	83 ec 0c             	sub    esp,0xc
c0016ed7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016eda:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016edd:	6a 20                	push   0x20
c0016edf:	e8 40 81 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016ee4:	89 c3                	mov    ebx,eax
c0016ee6:	58                   	pop    eax
c0016ee7:	5a                   	pop    edx
c0016ee8:	68 00 50 00 00       	push   0x5000
c0016eed:	53                   	push   ebx
c0016eee:	e8 0b 5c ff ff       	call   c000cafe <Pipe::Pipe(int)>
c0016ef3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ef6:	e8 33 6e ff ff       	call   c000dd2e <UnixFile::getFileDescriptor()>
c0016efb:	89 07                	mov    DWORD PTR [edi],eax
c0016efd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f00:	e8 29 6e ff ff       	call   c000dd2e <UnixFile::getFileDescriptor()>
c0016f05:	83 c4 10             	add    esp,0x10
c0016f08:	89 06                	mov    DWORD PTR [esi],eax
c0016f0a:	31 d2                	xor    edx,edx
c0016f0c:	5b                   	pop    ebx
c0016f0d:	31 c0                	xor    eax,eax
c0016f0f:	5e                   	pop    esi
c0016f10:	5f                   	pop    edi
c0016f11:	c3                   	ret    

c0016f12 <sysGetUnixTime(regs*)>:
c0016f12:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0016f17:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f21:	e9 32 91 ff ff       	jmp    c0010058 <Clock::timeInSecondsLocal()>

c0016f26 <string_ends_with(char const*, char const*)>:
c0016f26:	57                   	push   edi
c0016f27:	56                   	push   esi
c0016f28:	53                   	push   ebx
c0016f29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016f2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016f31:	83 ec 0c             	sub    esp,0xc
c0016f34:	53                   	push   ebx
c0016f35:	e8 9d 97 fe ff       	call   c00006d7 <strlen>
c0016f3a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f3d:	89 c6                	mov    esi,eax
c0016f3f:	e8 93 97 fe ff       	call   c00006d7 <strlen>
c0016f44:	83 c4 10             	add    esp,0x10
c0016f47:	31 d2                	xor    edx,edx
c0016f49:	39 c6                	cmp    esi,eax
c0016f4b:	7d 06                	jge    c0016f53 <string_ends_with(char const*, char const*)+0x2d>
c0016f4d:	5b                   	pop    ebx
c0016f4e:	89 d0                	mov    eax,edx
c0016f50:	5e                   	pop    esi
c0016f51:	5f                   	pop    edi
c0016f52:	c3                   	ret    
c0016f53:	52                   	push   edx
c0016f54:	29 c6                	sub    esi,eax
c0016f56:	52                   	push   edx
c0016f57:	01 f3                	add    ebx,esi
c0016f59:	57                   	push   edi
c0016f5a:	53                   	push   ebx
c0016f5b:	e8 4a 98 fe ff       	call   c00007aa <strcmp>
c0016f60:	83 c4 10             	add    esp,0x10
c0016f63:	31 d2                	xor    edx,edx
c0016f65:	85 c0                	test   eax,eax
c0016f67:	5b                   	pop    ebx
c0016f68:	0f 94 c2             	sete   dl
c0016f6b:	5e                   	pop    esi
c0016f6c:	89 d0                	mov    eax,edx
c0016f6e:	5f                   	pop    edi
c0016f6f:	c3                   	ret    

c0016f70 <sysCallOpen(regs*)>:
c0016f70:	56                   	push   esi
c0016f71:	53                   	push   ebx
c0016f72:	81 ec 04 01 00 00    	sub    esp,0x104
c0016f78:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016f7f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016f82:	85 c9                	test   ecx,ecx
c0016f84:	0f 84 bb 00 00 00    	je     c0017045 <sysCallOpen(regs*)+0xd5>
c0016f8a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016f8d:	85 c0                	test   eax,eax
c0016f8f:	0f 84 b0 00 00 00    	je     c0017045 <sysCallOpen(regs*)+0xd5>
c0016f95:	52                   	push   edx
c0016f96:	68 fe 29 02 c0       	push   0xc00229fe
c0016f9b:	50                   	push   eax
c0016f9c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016fa0:	56                   	push   esi
c0016fa1:	e8 40 85 ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c0016fa6:	89 34 24             	mov    DWORD PTR [esp],esi
c0016fa9:	e8 29 97 fe ff       	call   c00006d7 <strlen>
c0016fae:	83 c4 10             	add    esp,0x10
c0016fb1:	48                   	dec    eax
c0016fb2:	74 25                	je     c0016fd9 <sysCallOpen(regs*)+0x69>
c0016fb4:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016fb7:	80 fa 2e             	cmp    dl,0x2e
c0016fba:	74 19                	je     c0016fd5 <sysCallOpen(regs*)+0x65>
c0016fbc:	80 fa 3a             	cmp    dl,0x3a
c0016fbf:	74 14                	je     c0016fd5 <sysCallOpen(regs*)+0x65>
c0016fc1:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016fc5:	48                   	dec    eax
c0016fc6:	74 11                	je     c0016fd9 <sysCallOpen(regs*)+0x69>
c0016fc8:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016fcb:	80 fa 3a             	cmp    dl,0x3a
c0016fce:	74 05                	je     c0016fd5 <sysCallOpen(regs*)+0x65>
c0016fd0:	80 fa 2e             	cmp    dl,0x2e
c0016fd3:	75 ec                	jne    c0016fc1 <sysCallOpen(regs*)+0x51>
c0016fd5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016fd9:	51                   	push   ecx
c0016fda:	51                   	push   ecx
c0016fdb:	68 02 2a 02 c0       	push   0xc0022a02
c0016fe0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016fe3:	50                   	push   eax
c0016fe4:	e8 3d ff ff ff       	call   c0016f26 <string_ends_with(char const*, char const*)>
c0016fe9:	83 c4 10             	add    esp,0x10
c0016fec:	85 c0                	test   eax,eax
c0016fee:	75 17                	jne    c0017007 <sysCallOpen(regs*)+0x97>
c0016ff0:	50                   	push   eax
c0016ff1:	50                   	push   eax
c0016ff2:	68 23 2a 02 c0       	push   0xc0022a23
c0016ff7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ffa:	50                   	push   eax
c0016ffb:	e8 26 ff ff ff       	call   c0016f26 <string_ends_with(char const*, char const*)>
c0017000:	83 c4 10             	add    esp,0x10
c0017003:	85 c0                	test   eax,eax
c0017005:	74 4d                	je     c0017054 <sysCallOpen(regs*)+0xe4>
c0017007:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001700a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017010:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017017:	50                   	push   eax
c0017018:	50                   	push   eax
c0017019:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001701c:	8b 10                	mov    edx,DWORD PTR [eax]
c001701e:	52                   	push   edx
c001701f:	68 07 2a 02 c0       	push   0xc0022a07
c0017024:	e8 30 81 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017029:	c7 04 24 16 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a16
c0017030:	e8 24 81 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017035:	83 c4 10             	add    esp,0x10
c0017038:	81 c4 04 01 00 00    	add    esp,0x104
c001703e:	31 c0                	xor    eax,eax
c0017040:	31 d2                	xor    edx,edx
c0017042:	5b                   	pop    ebx
c0017043:	5e                   	pop    esi
c0017044:	c3                   	ret    
c0017045:	81 c4 04 01 00 00    	add    esp,0x104
c001704b:	83 c8 ff             	or     eax,0xffffffff
c001704e:	83 ca ff             	or     edx,0xffffffff
c0017051:	5b                   	pop    ebx
c0017052:	5e                   	pop    esi
c0017053:	c3                   	ret    
c0017054:	50                   	push   eax
c0017055:	50                   	push   eax
c0017056:	68 03 2a 02 c0       	push   0xc0022a03
c001705b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001705e:	50                   	push   eax
c001705f:	e8 46 97 fe ff       	call   c00007aa <strcmp>
c0017064:	83 c4 10             	add    esp,0x10
c0017067:	85 c0                	test   eax,eax
c0017069:	74 9c                	je     c0017007 <sysCallOpen(regs*)+0x97>
c001706b:	50                   	push   eax
c001706c:	50                   	push   eax
c001706d:	68 02 2a 02 c0       	push   0xc0022a02
c0017072:	56                   	push   esi
c0017073:	e8 ae fe ff ff       	call   c0016f26 <string_ends_with(char const*, char const*)>
c0017078:	83 c4 10             	add    esp,0x10
c001707b:	85 c0                	test   eax,eax
c001707d:	75 88                	jne    c0017007 <sysCallOpen(regs*)+0x97>
c001707f:	52                   	push   edx
c0017080:	52                   	push   edx
c0017081:	68 28 2a 02 c0       	push   0xc0022a28
c0017086:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0017089:	51                   	push   ecx
c001708a:	e8 97 fe ff ff       	call   c0016f26 <string_ends_with(char const*, char const*)>
c001708f:	83 c4 10             	add    esp,0x10
c0017092:	85 c0                	test   eax,eax
c0017094:	0f 85 d5 00 00 00    	jne    c001716f <sysCallOpen(regs*)+0x1ff>
c001709a:	50                   	push   eax
c001709b:	50                   	push   eax
c001709c:	68 2d 2a 02 c0       	push   0xc0022a2d
c00170a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170a4:	50                   	push   eax
c00170a5:	e8 7c fe ff ff       	call   c0016f26 <string_ends_with(char const*, char const*)>
c00170aa:	83 c4 10             	add    esp,0x10
c00170ad:	85 c0                	test   eax,eax
c00170af:	0f 85 ba 00 00 00    	jne    c001716f <sysCallOpen(regs*)+0x1ff>
c00170b5:	50                   	push   eax
c00170b6:	50                   	push   eax
c00170b7:	68 29 2a 02 c0       	push   0xc0022a29
c00170bc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170bf:	50                   	push   eax
c00170c0:	e8 e5 96 fe ff       	call   c00007aa <strcmp>
c00170c5:	83 c4 10             	add    esp,0x10
c00170c8:	85 c0                	test   eax,eax
c00170ca:	0f 84 9f 00 00 00    	je     c001716f <sysCallOpen(regs*)+0x1ff>
c00170d0:	50                   	push   eax
c00170d1:	50                   	push   eax
c00170d2:	68 28 2a 02 c0       	push   0xc0022a28
c00170d7:	56                   	push   esi
c00170d8:	e8 49 fe ff ff       	call   c0016f26 <string_ends_with(char const*, char const*)>
c00170dd:	83 c4 10             	add    esp,0x10
c00170e0:	85 c0                	test   eax,eax
c00170e2:	0f 85 87 00 00 00    	jne    c001716f <sysCallOpen(regs*)+0x1ff>
c00170e8:	83 ec 0c             	sub    esp,0xc
c00170eb:	68 14 01 00 00       	push   0x114
c00170f0:	e8 2f 7f ff ff       	call   c000f024 <operator new(unsigned long)>
c00170f5:	89 c6                	mov    esi,eax
c00170f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170fc:	83 c4 0c             	add    esp,0xc
c00170ff:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0017102:	51                   	push   ecx
c0017103:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017106:	50                   	push   eax
c0017107:	56                   	push   esi
c0017108:	e8 83 85 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c001710d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017110:	83 c4 10             	add    esp,0x10
c0017113:	89 d0                	mov    eax,edx
c0017115:	25 ff 00 00 00       	and    eax,0xff
c001711a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001711d:	89 d0                	mov    eax,edx
c001711f:	83 e0 01             	and    eax,0x1
c0017122:	f6 c2 02             	test   dl,0x2
c0017125:	74 03                	je     c001712a <sysCallOpen(regs*)+0x1ba>
c0017127:	83 c8 02             	or     eax,0x2
c001712a:	f6 c2 04             	test   dl,0x4
c001712d:	74 03                	je     c0017132 <sysCallOpen(regs*)+0x1c2>
c001712f:	83 c8 04             	or     eax,0x4
c0017132:	f6 c2 08             	test   dl,0x8
c0017135:	74 03                	je     c001713a <sysCallOpen(regs*)+0x1ca>
c0017137:	83 c8 0a             	or     eax,0xa
c001713a:	83 e2 10             	and    edx,0x10
c001713d:	74 03                	je     c0017142 <sysCallOpen(regs*)+0x1d2>
c001713f:	83 c8 12             	or     eax,0x12
c0017142:	52                   	push   edx
c0017143:	52                   	push   edx
c0017144:	50                   	push   eax
c0017145:	56                   	push   esi
c0017146:	e8 a9 85 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c001714b:	83 c4 10             	add    esp,0x10
c001714e:	85 c0                	test   eax,eax
c0017150:	0f 85 ef fe ff ff    	jne    c0017045 <sysCallOpen(regs*)+0xd5>
c0017156:	83 ec 0c             	sub    esp,0xc
c0017159:	56                   	push   esi
c001715a:	e8 cf 6b ff ff       	call   c000dd2e <UnixFile::getFileDescriptor()>
c001715f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017162:	89 02                	mov    DWORD PTR [edx],eax
c0017164:	c1 f8 1f             	sar    eax,0x1f
c0017167:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001716a:	e9 c6 fe ff ff       	jmp    c0017035 <sysCallOpen(regs*)+0xc5>
c001716f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017172:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017178:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001717f:	e9 b4 fe ff ff       	jmp    c0017038 <sysCallOpen(regs*)+0xc8>

c0017184 <setupSystemCalls()>:
c0017184:	c7 05 e0 4f 02 c0 7f 63 01 c0 	mov    DWORD PTR ds:0xc0024fe0,0xc001637f
c001718e:	c7 05 e4 4f 02 c0 ad 61 01 c0 	mov    DWORD PTR ds:0xc0024fe4,0xc00161ad
c0017198:	c7 05 e8 4f 02 c0 c2 62 01 c0 	mov    DWORD PTR ds:0xc0024fe8,0xc00162c2
c00171a2:	c7 05 ec 4f 02 c0 17 63 01 c0 	mov    DWORD PTR ds:0xc0024fec,0xc0016317
c00171ac:	c7 05 f0 4f 02 c0 5a 62 01 c0 	mov    DWORD PTR ds:0xc0024ff0,0xc001625a
c00171b6:	c7 05 f4 4f 02 c0 99 63 01 c0 	mov    DWORD PTR ds:0xc0024ff4,0xc0016399
c00171c0:	c7 05 f8 4f 02 c0 58 65 01 c0 	mov    DWORD PTR ds:0xc0024ff8,0xc0016558
c00171ca:	c7 05 fc 4f 02 c0 7e 65 01 c0 	mov    DWORD PTR ds:0xc0024ffc,0xc001657e
c00171d4:	c7 05 04 50 02 c0 e8 68 01 c0 	mov    DWORD PTR ds:0xc0025004,0xc00168e8
c00171de:	c7 05 00 50 02 c0 70 6f 01 c0 	mov    DWORD PTR ds:0xc0025000,0xc0016f70
c00171e8:	c7 05 08 50 02 c0 6b 69 01 c0 	mov    DWORD PTR ds:0xc0025008,0xc001696b
c00171f2:	c7 05 0c 50 02 c0 ed 65 01 c0 	mov    DWORD PTR ds:0xc002500c,0xc00165ed
c00171fc:	c7 05 10 50 02 c0 a9 63 01 c0 	mov    DWORD PTR ds:0xc0025010,0xc00163a9
c0017206:	c7 05 14 50 02 c0 ae 63 01 c0 	mov    DWORD PTR ds:0xc0025014,0xc00163ae
c0017210:	c7 05 18 50 02 c0 d6 69 01 c0 	mov    DWORD PTR ds:0xc0025018,0xc00169d6
c001721a:	c7 05 1c 50 02 c0 31 6a 01 c0 	mov    DWORD PTR ds:0xc002501c,0xc0016a31
c0017224:	c7 05 20 50 02 c0 d8 66 01 c0 	mov    DWORD PTR ds:0xc0025020,0xc00166d8
c001722e:	c7 05 24 50 02 c0 3e 67 01 c0 	mov    DWORD PTR ds:0xc0025024,0xc001673e
c0017238:	c7 05 28 50 02 c0 67 68 01 c0 	mov    DWORD PTR ds:0xc0025028,0xc0016867
c0017242:	c7 05 2c 50 02 c0 b3 63 01 c0 	mov    DWORD PTR ds:0xc002502c,0xc00163b3
c001724c:	c7 05 30 50 02 c0 92 6a 01 c0 	mov    DWORD PTR ds:0xc0025030,0xc0016a92
c0017256:	c7 05 34 50 02 c0 bd 63 01 c0 	mov    DWORD PTR ds:0xc0025034,0xc00163bd
c0017260:	c7 05 38 50 02 c0 c4 63 01 c0 	mov    DWORD PTR ds:0xc0025038,0xc00163c4
c001726a:	c7 05 3c 50 02 c0 b3 6a 01 c0 	mov    DWORD PTR ds:0xc002503c,0xc0016ab3
c0017274:	c7 05 40 50 02 c0 06 6b 01 c0 	mov    DWORD PTR ds:0xc0025040,0xc0016b06
c001727e:	c7 05 44 50 02 c0 cb 63 01 c0 	mov    DWORD PTR ds:0xc0025044,0xc00163cb
c0017288:	c7 05 48 50 02 c0 59 6b 01 c0 	mov    DWORD PTR ds:0xc0025048,0xc0016b59
c0017292:	c7 05 4c 50 02 c0 a0 65 01 c0 	mov    DWORD PTR ds:0xc002504c,0xc00165a0
c001729c:	c7 05 50 50 02 c0 a5 6b 01 c0 	mov    DWORD PTR ds:0xc0025050,0xc0016ba5
c00172a6:	c7 05 54 50 02 c0 80 66 01 c0 	mov    DWORD PTR ds:0xc0025054,0xc0016680
c00172b0:	c7 05 58 50 02 c0 7d 6c 01 c0 	mov    DWORD PTR ds:0xc0025058,0xc0016c7d
c00172ba:	c7 05 5c 50 02 c0 b9 67 01 c0 	mov    DWORD PTR ds:0xc002505c,0xc00167b9
c00172c4:	c7 05 60 50 02 c0 bf 6c 01 c0 	mov    DWORD PTR ds:0xc0025060,0xc0016cbf
c00172ce:	c7 05 64 50 02 c0 26 6c 01 c0 	mov    DWORD PTR ds:0xc0025064,0xc0016c26
c00172d8:	c7 05 68 50 02 c0 1e 6d 01 c0 	mov    DWORD PTR ds:0xc0025068,0xc0016d1e
c00172e2:	c7 05 6c 50 02 c0 df 63 01 c0 	mov    DWORD PTR ds:0xc002506c,0xc00163df
c00172ec:	c7 05 70 50 02 c0 42 64 01 c0 	mov    DWORD PTR ds:0xc0025070,0xc0016442
c00172f6:	c7 05 74 50 02 c0 8a 64 01 c0 	mov    DWORD PTR ds:0xc0025074,0xc001648a
c0017300:	c7 05 78 50 02 c0 43 6e 01 c0 	mov    DWORD PTR ds:0xc0025078,0xc0016e43
c001730a:	c7 05 7c 50 02 c0 a6 6e 01 c0 	mov    DWORD PTR ds:0xc002507c,0xc0016ea6
c0017314:	c7 05 80 50 02 c0 dd 64 01 c0 	mov    DWORD PTR ds:0xc0025080,0xc00164dd
c001731e:	c7 05 84 50 02 c0 cd 6e 01 c0 	mov    DWORD PTR ds:0xc0025084,0xc0016ecd
c0017328:	c7 05 88 50 02 c0 12 6f 01 c0 	mov    DWORD PTR ds:0xc0025088,0xc0016f12
c0017332:	c7 05 8c 50 02 c0 c5 61 01 c0 	mov    DWORD PTR ds:0xc002508c,0xc00161c5
c001733c:	c3                   	ret    

c001733d <systemCall(regs*, void*)>:
c001733d:	53                   	push   ebx
c001733e:	83 ec 08             	sub    esp,0x8
c0017341:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017345:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017348:	83 f8 7f             	cmp    eax,0x7f
c001734b:	77 16                	ja     c0017363 <systemCall(regs*, void*)+0x26>
c001734d:	8b 14 85 e0 4f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb020]
c0017354:	85 d2                	test   edx,edx
c0017356:	74 0b                	je     c0017363 <systemCall(regs*, void*)+0x26>
c0017358:	83 ec 0c             	sub    esp,0xc
c001735b:	53                   	push   ebx
c001735c:	ff d2                	call   edx
c001735e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017361:	eb 0d                	jmp    c0017370 <systemCall(regs*, void*)+0x33>
c0017363:	52                   	push   edx
c0017364:	52                   	push   edx
c0017365:	50                   	push   eax
c0017366:	68 32 2a 02 c0       	push   0xc0022a32
c001736b:	e8 e9 7d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017370:	83 c4 10             	add    esp,0x10
c0017373:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017378:	83 c4 08             	add    esp,0x8
c001737b:	31 d2                	xor    edx,edx
c001737d:	5b                   	pop    ebx
c001737e:	c3                   	ret    

c001737f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001737f:	55                   	push   ebp
c0017380:	89 e5                	mov    ebp,esp
c0017382:	57                   	push   edi
c0017383:	56                   	push   esi
c0017384:	53                   	push   ebx
c0017385:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001738b:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001738e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017391:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0017398:	74 27                	je     c00173c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c001739a:	85 c0                	test   eax,eax
c001739c:	74 23                	je     c00173c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c001739e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00173a2:	75 1d                	jne    c00173c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00173a4:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00173a7:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00173ad:	89 d1                	mov    ecx,edx
c00173af:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173b5:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00173bb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00173be:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00173c1:	83 ec 0c             	sub    esp,0xc
c00173c4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00173c7:	05 ff 0f 00 00       	add    eax,0xfff
c00173cc:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00173d2:	6a 01                	push   0x1
c00173d4:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00173da:	e8 5f 6d ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c00173df:	83 c4 10             	add    esp,0x10
c00173e2:	89 c6                	mov    esi,eax
c00173e4:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00173ea:	0f 86 21 01 00 00    	jbe    c0017511 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00173f0:	c1 eb 0c             	shr    ebx,0xc
c00173f3:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c00173fd:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017403:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017406:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017409:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001740f:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017412:	29 d8                	sub    eax,ebx
c0017414:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001741a:	0f 83 f4 00 00 00    	jae    c0017514 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0017420:	83 ec 0c             	sub    esp,0xc
c0017423:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017426:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001742c:	3d 00 10 00 00       	cmp    eax,0x1000
c0017431:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017433:	52                   	push   edx
c0017434:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001743a:	52                   	push   edx
c001743b:	76 05                	jbe    c0017442 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001743d:	b8 00 10 00 00       	mov    eax,0x1000
c0017442:	31 d2                	xor    edx,edx
c0017444:	52                   	push   edx
c0017445:	50                   	push   eax
c0017446:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017449:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001744c:	83 c4 20             	add    esp,0x20
c001744f:	85 c0                	test   eax,eax
c0017451:	74 1f                	je     c0017472 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017453:	51                   	push   ecx
c0017454:	51                   	push   ecx
c0017455:	50                   	push   eax
c0017456:	68 46 2a 02 c0       	push   0xc0022a46
c001745b:	e8 f9 7c ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017460:	89 34 24             	mov    DWORD PTR [esp],esi
c0017463:	e8 23 70 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c0017468:	83 c4 10             	add    esp,0x10
c001746b:	31 c0                	xor    eax,eax
c001746d:	e9 7c 01 00 00       	jmp    c00175ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0017472:	e8 be 14 00 00       	call   c0018935 <lockScheduler()>
c0017477:	e8 45 51 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c001747c:	6a 07                	push   0x7
c001747e:	56                   	push   esi
c001747f:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0017485:	50                   	push   eax
c0017486:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001748c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001748f:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0017495:	e8 70 73 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c001749a:	83 c4 0c             	add    esp,0xc
c001749d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00174a3:	6a 00                	push   0x0
c00174a5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174ab:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00174ae:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00174b4:	e8 af 71 ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c00174b9:	58                   	pop    eax
c00174ba:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00174c0:	5a                   	pop    edx
c00174c1:	68 07 04 00 00       	push   0x407
c00174c6:	53                   	push   ebx
c00174c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00174cd:	50                   	push   eax
c00174ce:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00174d4:	6a 00                	push   0x0
c00174d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00174de:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00174e4:	e8 dd 76 ff ff       	call   c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00174e9:	83 c4 1c             	add    esp,0x1c
c00174ec:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00174f2:	68 00 10 00 00       	push   0x1000
c00174f7:	50                   	push   eax
c00174f8:	56                   	push   esi
c00174f9:	e8 86 91 fe ff       	call   c0000684 <memcpy>
c00174fe:	e8 34 14 00 00       	call   c0018937 <unlockScheduler()>
c0017503:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0017509:	83 c4 10             	add    esp,0x10
c001750c:	e9 f5 fe ff ff       	jmp    c0017406 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0017511:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017514:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001751e:	0f 86 bc 00 00 00    	jbe    c00175e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0017524:	e8 0c 14 00 00       	call   c0018935 <lockScheduler()>
c0017529:	51                   	push   ecx
c001752a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017530:	6a 00                	push   0x0
c0017532:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017537:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001753a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017540:	e8 23 71 ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c0017545:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001754b:	c1 e8 0c             	shr    eax,0xc
c001754e:	83 c4 10             	add    esp,0x10
c0017551:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017557:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017561:	e8 5b 50 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c0017566:	6a 07                	push   0x7
c0017568:	56                   	push   esi
c0017569:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001756f:	50                   	push   eax
c0017570:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017576:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0017579:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001757f:	e8 86 72 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c0017584:	58                   	pop    eax
c0017585:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001758b:	5a                   	pop    edx
c001758c:	68 07 04 00 00       	push   0x407
c0017591:	53                   	push   ebx
c0017592:	81 c3 00 10 00 00    	add    ebx,0x1000
c0017598:	50                   	push   eax
c0017599:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001759f:	6a 00                	push   0x0
c00175a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175a9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00175af:	e8 12 76 ff ff       	call   c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00175b4:	83 c4 1c             	add    esp,0x1c
c00175b7:	68 00 10 00 00       	push   0x1000
c00175bc:	6a 00                	push   0x0
c00175be:	56                   	push   esi
c00175bf:	e8 f6 90 fe ff       	call   c00006ba <memset>
c00175c4:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00175ca:	83 c4 10             	add    esp,0x10
c00175cd:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00175d3:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00175d9:	77 86                	ja     c0017561 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c00175db:	e8 57 13 00 00       	call   c0018937 <unlockScheduler()>
c00175e0:	83 ec 0c             	sub    esp,0xc
c00175e3:	56                   	push   esi
c00175e4:	e8 a2 6e ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c00175e9:	83 c4 10             	add    esp,0x10
c00175ec:	b0 01                	mov    al,0x1
c00175ee:	8d 65 f4             	lea    esp,[ebp-0xc]
c00175f1:	5b                   	pop    ebx
c00175f2:	5e                   	pop    esi
c00175f3:	5f                   	pop    edi
c00175f4:	5d                   	pop    ebp
c00175f5:	c3                   	ret    

c00175f6 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00175f6:	55                   	push   ebp
c00175f7:	57                   	push   edi
c00175f8:	56                   	push   esi
c00175f9:	53                   	push   ebx
c00175fa:	83 ec 48             	sub    esp,0x48
c00175fd:	68 14 01 00 00       	push   0x114
c0017602:	e8 1d 7a ff ff       	call   c000f024 <operator new(unsigned long)>
c0017607:	83 c4 0c             	add    esp,0xc
c001760a:	89 c6                	mov    esi,eax
c001760c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017610:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017614:	50                   	push   eax
c0017615:	e8 76 80 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c001761a:	58                   	pop    eax
c001761b:	5a                   	pop    edx
c001761c:	6a 01                	push   0x1
c001761e:	56                   	push   esi
c001761f:	e8 d0 80 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0017624:	83 c4 10             	add    esp,0x10
c0017627:	85 c0                	test   eax,eax
c0017629:	0f 85 47 01 00 00    	jne    c0017776 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001762f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017637:	83 ec 0c             	sub    esp,0xc
c001763a:	6a 34                	push   0x34
c001763c:	e8 aa 49 ff ff       	call   c000bfeb <malloc>
c0017641:	89 c3                	mov    ebx,eax
c0017643:	58                   	pop    eax
c0017644:	8b 06                	mov    eax,DWORD PTR [esi]
c0017646:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001764a:	57                   	push   edi
c001764b:	53                   	push   ebx
c001764c:	6a 00                	push   0x0
c001764e:	6a 34                	push   0x34
c0017650:	56                   	push   esi
c0017651:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017654:	83 c4 20             	add    esp,0x20
c0017657:	85 c0                	test   eax,eax
c0017659:	0f 85 17 01 00 00    	jne    c0017776 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001765f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017665:	0f 85 0b 01 00 00    	jne    c0017776 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001766b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001766e:	85 c0                	test   eax,eax
c0017670:	0f 84 00 01 00 00    	je     c0017776 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017676:	31 d2                	xor    edx,edx
c0017678:	55                   	push   ebp
c0017679:	52                   	push   edx
c001767a:	50                   	push   eax
c001767b:	56                   	push   esi
c001767c:	e8 31 81 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017681:	83 c4 10             	add    esp,0x10
c0017684:	85 c0                	test   eax,eax
c0017686:	0f 85 ea 00 00 00    	jne    c0017776 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001768c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001768f:	83 ec 0c             	sub    esp,0xc
c0017692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017696:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001769a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001769e:	0f af c2             	imul   eax,edx
c00176a1:	50                   	push   eax
c00176a2:	e8 44 49 ff ff       	call   c000bfeb <malloc>
c00176a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c00176ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176b2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00176b6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00176ba:	0f af c2             	imul   eax,edx
c00176bd:	99                   	cdq    
c00176be:	52                   	push   edx
c00176bf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00176c1:	50                   	push   eax
c00176c2:	56                   	push   esi
c00176c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176c6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00176c9:	83 c4 20             	add    esp,0x20
c00176cc:	85 c0                	test   eax,eax
c00176ce:	0f 84 a2 00 00 00    	je     c0017776 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176d4:	31 d2                	xor    edx,edx
c00176d6:	51                   	push   ecx
c00176d7:	52                   	push   edx
c00176d8:	50                   	push   eax
c00176d9:	56                   	push   esi
c00176da:	e8 d3 80 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00176df:	83 c4 10             	add    esp,0x10
c00176e2:	85 c0                	test   eax,eax
c00176e4:	0f 85 8c 00 00 00    	jne    c0017776 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176ea:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00176ee:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00176f2:	0f af c2             	imul   eax,edx
c00176f5:	83 ec 0c             	sub    esp,0xc
c00176f8:	31 ed                	xor    ebp,ebp
c00176fa:	50                   	push   eax
c00176fb:	e8 eb 48 ff ff       	call   c000bfeb <malloc>
c0017700:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017704:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017707:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001770b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001770f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017713:	0f af c2             	imul   eax,edx
c0017716:	99                   	cdq    
c0017717:	52                   	push   edx
c0017718:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001771a:	50                   	push   eax
c001771b:	56                   	push   esi
c001771c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001771f:	83 c4 20             	add    esp,0x20
c0017722:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001772a:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001772e:	0f 86 80 00 00 00    	jbe    c00177b4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017734:	0f b7 fd             	movzx  edi,bp
c0017737:	c1 e7 05             	shl    edi,0x5
c001773a:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001773e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017741:	75 6b                	jne    c00177ae <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017743:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017746:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001774a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001774d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017751:	52                   	push   edx
c0017752:	31 d2                	xor    edx,edx
c0017754:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017757:	52                   	push   edx
c0017758:	50                   	push   eax
c0017759:	56                   	push   esi
c001775a:	e8 53 80 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c001775f:	83 c4 10             	add    esp,0x10
c0017762:	85 c0                	test   eax,eax
c0017764:	74 17                	je     c001777d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017766:	83 ec 0c             	sub    esp,0xc
c0017769:	68 71 2a 02 c0       	push   0xc0022a71
c001776e:	e8 e6 79 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017773:	83 c4 10             	add    esp,0x10
c0017776:	31 c0                	xor    eax,eax
c0017778:	e9 87 00 00 00       	jmp    c0017804 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001777d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017780:	83 ec 0c             	sub    esp,0xc
c0017783:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017786:	50                   	push   eax
c0017787:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001778b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001778f:	56                   	push   esi
c0017790:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017794:	e8 e6 fb ff ff       	call   c001737f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017799:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001779d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00177a1:	83 c4 20             	add    esp,0x20
c00177a4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00177a8:	73 04                	jae    c00177ae <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00177aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177ae:	45                   	inc    ebp
c00177af:	e9 76 ff ff ff       	jmp    c001772a <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00177b4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00177b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177c0:	83 ec 0c             	sub    esp,0xc
c00177c3:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00177c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00177ce:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00177d4:	05 00 10 00 00       	add    eax,0x1000
c00177d9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00177dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177e0:	e8 16 48 ff ff       	call   c000bffb <free>
c00177e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00177e8:	e8 0e 48 ff ff       	call   c000bffb <free>
c00177ed:	58                   	pop    eax
c00177ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177f2:	e8 04 48 ff ff       	call   c000bffb <free>
c00177f7:	89 34 24             	mov    DWORD PTR [esp],esi
c00177fa:	e8 53 7f ff ff       	call   c000f752 <File::close()>
c00177ff:	83 c4 10             	add    esp,0x10
c0017802:	b0 01                	mov    al,0x1
c0017804:	83 c4 3c             	add    esp,0x3c
c0017807:	5b                   	pop    ebx
c0017808:	5e                   	pop    esi
c0017809:	5f                   	pop    edi
c001780a:	5d                   	pop    ebp
c001780b:	c3                   	ret    

c001780c <Thr::runtimeReferenceHelper()>:
c001780c:	83 ec 18             	sub    esp,0x18
c001780f:	68 79 2a 02 c0       	push   0xc0022a79
c0017814:	e8 40 79 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017819:	fa                   	cli    
c001781a:	83 c4 10             	add    esp,0x10
c001781d:	eb fe                	jmp    c001781d <Thr::runtimeReferenceHelper()+0x11>

c001781f <Thr::getAddressOfKernelSymbol(char const*)>:
c001781f:	57                   	push   edi
c0017820:	56                   	push   esi
c0017821:	53                   	push   ebx
c0017822:	31 db                	xor    ebx,ebx
c0017824:	39 1d 80 59 02 c0    	cmp    DWORD PTR ds:0xc0025980,ebx
c001782a:	7e 3c                	jle    c0017868 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001782c:	8b 34 9d 00 59 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda700]
c0017833:	31 ff                	xor    edi,edi
c0017835:	39 3c 9d 00 58 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda800],edi
c001783c:	7e 27                	jle    c0017865 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001783e:	50                   	push   eax
c001783f:	50                   	push   eax
c0017840:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017844:	8b 06                	mov    eax,DWORD PTR [esi]
c0017846:	03 04 9d 80 58 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda780]
c001784d:	50                   	push   eax
c001784e:	e8 57 8f fe ff       	call   c00007aa <strcmp>
c0017853:	83 c4 10             	add    esp,0x10
c0017856:	85 c0                	test   eax,eax
c0017858:	75 05                	jne    c001785f <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001785a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001785d:	eb 0b                	jmp    c001786a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001785f:	83 c6 10             	add    esi,0x10
c0017862:	47                   	inc    edi
c0017863:	eb d0                	jmp    c0017835 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017865:	43                   	inc    ebx
c0017866:	eb bc                	jmp    c0017824 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017868:	31 c0                	xor    eax,eax
c001786a:	5b                   	pop    ebx
c001786b:	5e                   	pop    esi
c001786c:	5f                   	pop    edi
c001786d:	c3                   	ret    

c001786e <Thr::loadKernelSymbolTable(char const*)>:
c001786e:	55                   	push   ebp
c001786f:	57                   	push   edi
c0017870:	56                   	push   esi
c0017871:	53                   	push   ebx
c0017872:	83 ec 68             	sub    esp,0x68
c0017875:	8b 35 d4 59 02 c0    	mov    esi,DWORD PTR ds:0xc00259d4
c001787b:	68 14 01 00 00       	push   0x114
c0017880:	e8 9f 77 ff ff       	call   c000f024 <operator new(unsigned long)>
c0017885:	83 c4 0c             	add    esp,0xc
c0017888:	89 c3                	mov    ebx,eax
c001788a:	56                   	push   esi
c001788b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001788f:	50                   	push   eax
c0017890:	e8 fb 7d ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0017895:	5e                   	pop    esi
c0017896:	5f                   	pop    edi
c0017897:	6a 01                	push   0x1
c0017899:	53                   	push   ebx
c001789a:	e8 55 7e ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c001789f:	83 c4 10             	add    esp,0x10
c00178a2:	31 d2                	xor    edx,edx
c00178a4:	85 c0                	test   eax,eax
c00178a6:	0f 85 79 02 00 00    	jne    c0017b25 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00178ac:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00178b4:	83 ec 0c             	sub    esp,0xc
c00178b7:	6a 34                	push   0x34
c00178b9:	e8 2d 47 ff ff       	call   c000bfeb <malloc>
c00178be:	59                   	pop    ecx
c00178bf:	89 c7                	mov    edi,eax
c00178c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00178c3:	8d 74 24 34          	lea    esi,[esp+0x34]
c00178c7:	56                   	push   esi
c00178c8:	57                   	push   edi
c00178c9:	6a 00                	push   0x0
c00178cb:	6a 34                	push   0x34
c00178cd:	53                   	push   ebx
c00178ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00178d1:	83 c4 20             	add    esp,0x20
c00178d4:	85 c0                	test   eax,eax
c00178d6:	74 17                	je     c00178ef <Thr::loadKernelSymbolTable(char const*)+0x81>
c00178d8:	83 ec 0c             	sub    esp,0xc
c00178db:	68 9b 2a 02 c0       	push   0xc0022a9b
c00178e0:	e8 63 e0 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c00178e5:	83 c4 10             	add    esp,0x10
c00178e8:	31 d2                	xor    edx,edx
c00178ea:	e9 36 02 00 00       	jmp    c0017b25 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00178ef:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00178f5:	75 e1                	jne    c00178d8 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00178f7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00178fa:	85 c0                	test   eax,eax
c00178fc:	74 da                	je     c00178d8 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00178fe:	52                   	push   edx
c00178ff:	31 d2                	xor    edx,edx
c0017901:	52                   	push   edx
c0017902:	50                   	push   eax
c0017903:	53                   	push   ebx
c0017904:	e8 a9 7e ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017909:	83 c4 10             	add    esp,0x10
c001790c:	85 c0                	test   eax,eax
c001790e:	75 c8                	jne    c00178d8 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017910:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017914:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017918:	0f af c2             	imul   eax,edx
c001791b:	83 ec 0c             	sub    esp,0xc
c001791e:	31 ed                	xor    ebp,ebp
c0017920:	50                   	push   eax
c0017921:	e8 c5 46 ff ff       	call   c000bfeb <malloc>
c0017926:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001792a:	89 34 24             	mov    DWORD PTR [esp],esi
c001792d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017931:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017935:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017939:	0f af c2             	imul   eax,edx
c001793c:	99                   	cdq    
c001793d:	52                   	push   edx
c001793e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017940:	50                   	push   eax
c0017941:	53                   	push   ebx
c0017942:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017945:	83 c4 20             	add    esp,0x20
c0017948:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017950:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017958:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017960:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017968:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001796c:	0f 86 aa 00 00 00    	jbe    c0017a1c <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017972:	0f b7 f5             	movzx  esi,bp
c0017975:	6b f6 28             	imul   esi,esi,0x28
c0017978:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001797c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001797f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017983:	50                   	push   eax
c0017984:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017988:	6b c0 28             	imul   eax,eax,0x28
c001798b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001798f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017991:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017995:	89 d0                	mov    eax,edx
c0017997:	31 d2                	xor    edx,edx
c0017999:	52                   	push   edx
c001799a:	50                   	push   eax
c001799b:	53                   	push   ebx
c001799c:	e8 11 7e ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00179a1:	83 c4 0c             	add    esp,0xc
c00179a4:	6a 20                	push   0x20
c00179a6:	6a 00                	push   0x0
c00179a8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00179ac:	52                   	push   edx
c00179ad:	e8 08 8d fe ff       	call   c00006ba <memset>
c00179b2:	58                   	pop    eax
c00179b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179b5:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00179b9:	51                   	push   ecx
c00179ba:	8d 54 24 40          	lea    edx,[esp+0x40]
c00179be:	52                   	push   edx
c00179bf:	6a 00                	push   0x0
c00179c1:	6a 1f                	push   0x1f
c00179c3:	53                   	push   ebx
c00179c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179c7:	83 c4 18             	add    esp,0x18
c00179ca:	68 b2 2a 02 c0       	push   0xc0022ab2
c00179cf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00179d3:	52                   	push   edx
c00179d4:	e8 d1 8d fe ff       	call   c00007aa <strcmp>
c00179d9:	83 c4 10             	add    esp,0x10
c00179dc:	85 c0                	test   eax,eax
c00179de:	75 0f                	jne    c00179ef <Thr::loadKernelSymbolTable(char const*)+0x181>
c00179e0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00179e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179ef:	50                   	push   eax
c00179f0:	50                   	push   eax
c00179f1:	68 ba 2a 02 c0       	push   0xc0022aba
c00179f6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00179fa:	50                   	push   eax
c00179fb:	e8 aa 8d fe ff       	call   c00007aa <strcmp>
c0017a00:	83 c4 10             	add    esp,0x10
c0017a03:	85 c0                	test   eax,eax
c0017a05:	75 0f                	jne    c0017a16 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017a07:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a16:	45                   	inc    ebp
c0017a17:	e9 4c ff ff ff       	jmp    c0017968 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017a1c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017a21:	75 10                	jne    c0017a33 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017a23:	83 ec 0c             	sub    esp,0xc
c0017a26:	68 c2 2a 02 c0       	push   0xc0022ac2
c0017a2b:	e8 18 df ff ff       	call   c0015948 <Krnl::panic(char const*)>
c0017a30:	83 c4 10             	add    esp,0x10
c0017a33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a38:	75 10                	jne    c0017a4a <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017a3a:	83 ec 0c             	sub    esp,0xc
c0017a3d:	68 c2 2a 02 c0       	push   0xc0022ac2
c0017a42:	e8 01 df ff ff       	call   c0015948 <Krnl::panic(char const*)>
c0017a47:	83 c4 10             	add    esp,0x10
c0017a4a:	31 d2                	xor    edx,edx
c0017a4c:	50                   	push   eax
c0017a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a51:	52                   	push   edx
c0017a52:	50                   	push   eax
c0017a53:	53                   	push   ebx
c0017a54:	e8 59 7d ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017a59:	5a                   	pop    edx
c0017a5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a5e:	e8 88 45 ff ff       	call   c000bfeb <malloc>
c0017a63:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017a6b:	89 c1                	mov    ecx,eax
c0017a6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a75:	5e                   	pop    esi
c0017a76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a78:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017a7c:	55                   	push   ebp
c0017a7d:	51                   	push   ecx
c0017a7e:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017a82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a8a:	53                   	push   ebx
c0017a8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a8e:	83 c4 14             	add    esp,0x14
c0017a91:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a95:	e8 51 45 ff ff       	call   c000bfeb <malloc>
c0017a9a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a9d:	89 c6                	mov    esi,eax
c0017a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017aa1:	56                   	push   esi
c0017aa2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017aa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017aaa:	53                   	push   ebx
c0017aab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017aae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ab2:	8b 15 80 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025980
c0017ab8:	c1 e8 04             	shr    eax,0x4
c0017abb:	83 c4 1c             	add    esp,0x1c
c0017abe:	89 04 95 00 58 02 c0 	mov    DWORD PTR [edx*4-0x3ffda800],eax
c0017ac5:	31 d2                	xor    edx,edx
c0017ac7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017acb:	52                   	push   edx
c0017acc:	50                   	push   eax
c0017acd:	53                   	push   ebx
c0017ace:	e8 df 7c ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017ad3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ad6:	31 d2                	xor    edx,edx
c0017ad8:	56                   	push   esi
c0017ad9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017add:	52                   	push   edx
c0017ade:	50                   	push   eax
c0017adf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ae1:	53                   	push   ebx
c0017ae2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ae5:	83 c4 14             	add    esp,0x14
c0017ae8:	53                   	push   ebx
c0017ae9:	e8 64 7c ff ff       	call   c000f752 <File::close()>
c0017aee:	5d                   	pop    ebp
c0017aef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017af3:	e8 03 45 ff ff       	call   c000bffb <free>
c0017af8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017afb:	e8 fb 44 ff ff       	call   c000bffb <free>
c0017b00:	a1 80 59 02 c0       	mov    eax,ds:0xc0025980
c0017b05:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017b09:	8d 50 01             	lea    edx,[eax+0x1]
c0017b0c:	89 15 80 59 02 c0    	mov    DWORD PTR ds:0xc0025980,edx
c0017b12:	89 0c 85 00 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda700],ecx
c0017b19:	89 34 85 80 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda780],esi
c0017b20:	83 c4 10             	add    esp,0x10
c0017b23:	b2 01                	mov    dl,0x1
c0017b25:	83 c4 5c             	add    esp,0x5c
c0017b28:	88 d0                	mov    al,dl
c0017b2a:	5b                   	pop    ebx
c0017b2b:	5e                   	pop    esi
c0017b2c:	5f                   	pop    edi
c0017b2d:	5d                   	pop    ebp
c0017b2e:	c3                   	ret    

c0017b2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017b2f:	55                   	push   ebp
c0017b30:	57                   	push   edi
c0017b31:	56                   	push   esi
c0017b32:	53                   	push   ebx
c0017b33:	81 ec 68 03 00 00    	sub    esp,0x368
c0017b39:	8b 1d d4 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259d4
c0017b3f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017b46:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017b4a:	68 14 01 00 00       	push   0x114
c0017b4f:	e8 d0 74 ff ff       	call   c000f024 <operator new(unsigned long)>
c0017b54:	83 c4 0c             	add    esp,0xc
c0017b57:	53                   	push   ebx
c0017b58:	89 c7                	mov    edi,eax
c0017b5a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017b61:	50                   	push   eax
c0017b62:	e8 29 7b ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0017b67:	5e                   	pop    esi
c0017b68:	5d                   	pop    ebp
c0017b69:	6a 01                	push   0x1
c0017b6b:	57                   	push   edi
c0017b6c:	e8 83 7b ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0017b71:	83 c4 10             	add    esp,0x10
c0017b74:	85 c0                	test   eax,eax
c0017b76:	0f 85 10 07 00 00    	jne    c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b7c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017b84:	83 ec 0c             	sub    esp,0xc
c0017b87:	6a 34                	push   0x34
c0017b89:	e8 5d 44 ff ff       	call   c000bfeb <malloc>
c0017b8e:	5b                   	pop    ebx
c0017b8f:	89 c5                	mov    ebp,eax
c0017b91:	8b 07                	mov    eax,DWORD PTR [edi]
c0017b93:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017b97:	53                   	push   ebx
c0017b98:	55                   	push   ebp
c0017b99:	6a 00                	push   0x0
c0017b9b:	6a 34                	push   0x34
c0017b9d:	57                   	push   edi
c0017b9e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ba1:	83 c4 20             	add    esp,0x20
c0017ba4:	85 c0                	test   eax,eax
c0017ba6:	0f 85 e0 06 00 00    	jne    c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bac:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017bb3:	0f 85 d3 06 00 00    	jne    c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bb9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017bbc:	85 c0                	test   eax,eax
c0017bbe:	0f 84 c8 06 00 00    	je     c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bc4:	31 d2                	xor    edx,edx
c0017bc6:	51                   	push   ecx
c0017bc7:	52                   	push   edx
c0017bc8:	50                   	push   eax
c0017bc9:	57                   	push   edi
c0017bca:	e8 e3 7b ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017bcf:	83 c4 10             	add    esp,0x10
c0017bd2:	85 c0                	test   eax,eax
c0017bd4:	0f 85 b2 06 00 00    	jne    c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bda:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017bdd:	83 ec 0c             	sub    esp,0xc
c0017be0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017be4:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017be8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017bec:	0f af c2             	imul   eax,edx
c0017bef:	50                   	push   eax
c0017bf0:	e8 f6 43 ff ff       	call   c000bfeb <malloc>
c0017bf5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017bf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c00:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017c04:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017c08:	0f af c2             	imul   eax,edx
c0017c0b:	99                   	cdq    
c0017c0c:	52                   	push   edx
c0017c0d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c0f:	50                   	push   eax
c0017c10:	57                   	push   edi
c0017c11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c14:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017c17:	83 c4 20             	add    esp,0x20
c0017c1a:	85 c0                	test   eax,eax
c0017c1c:	0f 84 6a 06 00 00    	je     c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c22:	52                   	push   edx
c0017c23:	31 d2                	xor    edx,edx
c0017c25:	52                   	push   edx
c0017c26:	50                   	push   eax
c0017c27:	57                   	push   edi
c0017c28:	e8 85 7b ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	85 c0                	test   eax,eax
c0017c32:	0f 85 54 06 00 00    	jne    c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c38:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017c3c:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017c40:	0f af c2             	imul   eax,edx
c0017c43:	83 ec 0c             	sub    esp,0xc
c0017c46:	31 f6                	xor    esi,esi
c0017c48:	50                   	push   eax
c0017c49:	e8 9d 43 ff ff       	call   c000bfeb <malloc>
c0017c4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c59:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017c5d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017c61:	0f af c2             	imul   eax,edx
c0017c64:	99                   	cdq    
c0017c65:	52                   	push   edx
c0017c66:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c68:	50                   	push   eax
c0017c69:	57                   	push   edi
c0017c6a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c6d:	83 c4 20             	add    esp,0x20
c0017c70:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017c74:	0f 86 af 00 00 00    	jbe    c0017d29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017c7a:	0f b7 de             	movzx  ebx,si
c0017c7d:	c1 e3 05             	shl    ebx,0x5
c0017c80:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017c84:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017c87:	0f 85 96 00 00 00    	jne    c0017d23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017c8d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017c90:	31 d2                	xor    edx,edx
c0017c92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017c99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c9d:	50                   	push   eax
c0017c9e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017ca1:	52                   	push   edx
c0017ca2:	50                   	push   eax
c0017ca3:	57                   	push   edi
c0017ca4:	e8 09 7b ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017ca9:	83 c4 10             	add    esp,0x10
c0017cac:	85 c0                	test   eax,eax
c0017cae:	0f 85 d8 05 00 00    	jne    c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cb4:	52                   	push   edx
c0017cb5:	52                   	push   edx
c0017cb6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017cba:	68 dc 2a 02 c0       	push   0xc0022adc
c0017cbf:	e8 95 74 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017cc4:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017ccb:	31 d2                	xor    edx,edx
c0017ccd:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017cd1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017cd5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cd9:	59                   	pop    ecx
c0017cda:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017cdc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017ce3:	50                   	push   eax
c0017ce4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ce8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cec:	52                   	push   edx
c0017ced:	50                   	push   eax
c0017cee:	57                   	push   edi
c0017cef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017cf2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017cf5:	83 c4 18             	add    esp,0x18
c0017cf8:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017cfb:	50                   	push   eax
c0017cfc:	68 00 2b 02 c0       	push   0xc0022b00
c0017d01:	e8 53 74 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017d06:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017d09:	83 c4 0c             	add    esp,0xc
c0017d0c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017d0f:	50                   	push   eax
c0017d10:	6a 00                	push   0x0
c0017d12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d16:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017d1a:	50                   	push   eax
c0017d1b:	e8 9a 89 fe ff       	call   c00006ba <memset>
c0017d20:	83 c4 10             	add    esp,0x10
c0017d23:	46                   	inc    esi
c0017d24:	e9 47 ff ff ff       	jmp    c0017c70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017d29:	50                   	push   eax
c0017d2a:	31 db                	xor    ebx,ebx
c0017d2c:	68 00 01 00 00       	push   0x100
c0017d31:	6a 00                	push   0x0
c0017d33:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017d37:	50                   	push   eax
c0017d38:	e8 7d 89 fe ff       	call   c00006ba <memset>
c0017d3d:	83 c4 0c             	add    esp,0xc
c0017d40:	68 00 01 00 00       	push   0x100
c0017d45:	6a 00                	push   0x0
c0017d47:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017d4e:	50                   	push   eax
c0017d4f:	e8 66 89 fe ff       	call   c00006ba <memset>
c0017d54:	83 c4 10             	add    esp,0x10
c0017d57:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017d5f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017d67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017d6f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017d77:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d7f:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017d83:	0f 86 2f 01 00 00    	jbe    c0017eb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017d89:	0f b7 f3             	movzx  esi,bx
c0017d8c:	6b f6 28             	imul   esi,esi,0x28
c0017d8f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017d93:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017d96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d9a:	50                   	push   eax
c0017d9b:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017d9f:	6b d2 28             	imul   edx,edx,0x28
c0017da2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017da6:	8b 06                	mov    eax,DWORD PTR [esi]
c0017da8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017dac:	31 d2                	xor    edx,edx
c0017dae:	52                   	push   edx
c0017daf:	50                   	push   eax
c0017db0:	57                   	push   edi
c0017db1:	e8 fc 79 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017db6:	83 c4 0c             	add    esp,0xc
c0017db9:	6a 20                	push   0x20
c0017dbb:	6a 00                	push   0x0
c0017dbd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017dc4:	51                   	push   ecx
c0017dc5:	e8 f0 88 fe ff       	call   c00006ba <memset>
c0017dca:	58                   	pop    eax
c0017dcb:	8b 07                	mov    eax,DWORD PTR [edi]
c0017dcd:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017dd1:	52                   	push   edx
c0017dd2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017dd9:	51                   	push   ecx
c0017dda:	6a 00                	push   0x0
c0017ddc:	6a 1f                	push   0x1f
c0017dde:	57                   	push   edi
c0017ddf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017de2:	83 c4 1c             	add    esp,0x1c
c0017de5:	6a 09                	push   0x9
c0017de7:	68 1d 2b 02 c0       	push   0xc0022b1d
c0017dec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017df3:	51                   	push   ecx
c0017df4:	e8 28 88 fe ff       	call   c0000621 <memcmp>
c0017df9:	83 c4 10             	add    esp,0x10
c0017dfc:	85 c0                	test   eax,eax
c0017dfe:	75 21                	jne    c0017e21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e08:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e0c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e10:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e13:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017e1a:	89 c8                	mov    eax,ecx
c0017e1c:	40                   	inc    eax
c0017e1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e21:	50                   	push   eax
c0017e22:	6a 09                	push   0x9
c0017e24:	68 27 2b 02 c0       	push   0xc0022b27
c0017e29:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e30:	50                   	push   eax
c0017e31:	e8 eb 87 fe ff       	call   c0000621 <memcmp>
c0017e36:	83 c4 10             	add    esp,0x10
c0017e39:	85 c0                	test   eax,eax
c0017e3b:	75 21                	jne    c0017e5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017e3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e45:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e49:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e50:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017e57:	89 c8                	mov    eax,ecx
c0017e59:	40                   	inc    eax
c0017e5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e5e:	50                   	push   eax
c0017e5f:	50                   	push   eax
c0017e60:	68 b2 2a 02 c0       	push   0xc0022ab2
c0017e65:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e6c:	50                   	push   eax
c0017e6d:	e8 38 89 fe ff       	call   c00007aa <strcmp>
c0017e72:	83 c4 10             	add    esp,0x10
c0017e75:	85 c0                	test   eax,eax
c0017e77:	75 0f                	jne    c0017e88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017e79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e88:	50                   	push   eax
c0017e89:	50                   	push   eax
c0017e8a:	68 ba 2a 02 c0       	push   0xc0022aba
c0017e8f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e96:	50                   	push   eax
c0017e97:	e8 0e 89 fe ff       	call   c00007aa <strcmp>
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	85 c0                	test   eax,eax
c0017ea1:	75 0f                	jne    c0017eb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017ea3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017ea6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017eaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017eb2:	43                   	inc    ebx
c0017eb3:	e9 c7 fe ff ff       	jmp    c0017d7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017eb8:	31 d2                	xor    edx,edx
c0017eba:	50                   	push   eax
c0017ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ebf:	52                   	push   edx
c0017ec0:	50                   	push   eax
c0017ec1:	57                   	push   edi
c0017ec2:	e8 eb 78 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017ec7:	5a                   	pop    edx
c0017ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ecc:	e8 1a 41 ff ff       	call   c000bfeb <malloc>
c0017ed1:	31 d2                	xor    edx,edx
c0017ed3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017ed7:	59                   	pop    ecx
c0017ed8:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017eda:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ede:	53                   	push   ebx
c0017edf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ee3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ee7:	52                   	push   edx
c0017ee8:	50                   	push   eax
c0017ee9:	57                   	push   edi
c0017eea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017eed:	83 c4 14             	add    esp,0x14
c0017ef0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ef4:	e8 f2 40 ff ff       	call   c000bfeb <malloc>
c0017ef9:	31 d2                	xor    edx,edx
c0017efb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017eff:	83 c4 0c             	add    esp,0xc
c0017f02:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f06:	52                   	push   edx
c0017f07:	50                   	push   eax
c0017f08:	57                   	push   edi
c0017f09:	e8 a4 78 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017f0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f11:	31 d2                	xor    edx,edx
c0017f13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f1b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017f1d:	52                   	push   edx
c0017f1e:	50                   	push   eax
c0017f1f:	57                   	push   edi
c0017f20:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f23:	83 c4 20             	add    esp,0x20
c0017f26:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f2e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f32:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017f36:	0f 84 54 03 00 00    	je     c0018290 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017f3c:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017f43:	31 d2                	xor    edx,edx
c0017f45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f49:	c1 e8 03             	shr    eax,0x3
c0017f4c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f50:	50                   	push   eax
c0017f51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f55:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017f59:	52                   	push   edx
c0017f5a:	50                   	push   eax
c0017f5b:	57                   	push   edi
c0017f5c:	e8 51 78 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017f61:	58                   	pop    eax
c0017f62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f66:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017f6d:	e8 79 40 ff ff       	call   c000bfeb <malloc>
c0017f72:	31 d2                	xor    edx,edx
c0017f74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f78:	58                   	pop    eax
c0017f79:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017f7b:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017f7f:	50                   	push   eax
c0017f80:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017f84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f88:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017f8f:	52                   	push   edx
c0017f90:	50                   	push   eax
c0017f91:	57                   	push   edi
c0017f92:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f95:	83 c4 20             	add    esp,0x20
c0017f98:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017fa0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017fa4:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017fa8:	0f 8d c6 02 00 00    	jge    c0018274 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017fae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fb6:	31 db                	xor    ebx,ebx
c0017fb8:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017fbb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017fbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fc3:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017fc7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fcb:	c1 e8 08             	shr    eax,0x8
c0017fce:	89 c6                	mov    esi,eax
c0017fd0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017fd4:	c1 e6 04             	shl    esi,0x4
c0017fd7:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017fdb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017fde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017fe2:	85 c0                	test   eax,eax
c0017fe4:	0f 85 17 01 00 00    	jne    c0018101 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017fea:	83 ec 0c             	sub    esp,0xc
c0017fed:	b3 01                	mov    bl,0x1
c0017fef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ff3:	03 06                	add    eax,DWORD PTR [esi]
c0017ff5:	50                   	push   eax
c0017ff6:	e8 24 f8 ff ff       	call   c001781f <Thr::getAddressOfKernelSymbol(char const*)>
c0017ffb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fff:	83 c4 10             	add    esp,0x10
c0018002:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018007:	0f 85 f4 00 00 00    	jne    c0018101 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001800d:	50                   	push   eax
c001800e:	50                   	push   eax
c001800f:	68 31 2b 02 c0       	push   0xc0022b31
c0018014:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018018:	03 06                	add    eax,DWORD PTR [esi]
c001801a:	50                   	push   eax
c001801b:	e8 8a 87 fe ff       	call   c00007aa <strcmp>
c0018020:	83 c4 10             	add    esp,0x10
c0018023:	85 c0                	test   eax,eax
c0018025:	75 0a                	jne    c0018031 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0018027:	b8 cc f3 01 c0       	mov    eax,0xc001f3cc
c001802c:	e9 ca 00 00 00       	jmp    c00180fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018031:	50                   	push   eax
c0018032:	50                   	push   eax
c0018033:	68 3b 2b 02 c0       	push   0xc0022b3b
c0018038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001803c:	03 06                	add    eax,DWORD PTR [esi]
c001803e:	50                   	push   eax
c001803f:	e8 66 87 fe ff       	call   c00007aa <strcmp>
c0018044:	83 c4 10             	add    esp,0x10
c0018047:	85 c0                	test   eax,eax
c0018049:	75 0a                	jne    c0018055 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001804b:	b8 00 f1 01 c0       	mov    eax,0xc001f100
c0018050:	e9 a6 00 00 00       	jmp    c00180fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018055:	53                   	push   ebx
c0018056:	53                   	push   ebx
c0018057:	68 44 2b 02 c0       	push   0xc0022b44
c001805c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018060:	03 06                	add    eax,DWORD PTR [esi]
c0018062:	50                   	push   eax
c0018063:	e8 42 87 fe ff       	call   c00007aa <strcmp>
c0018068:	83 c4 10             	add    esp,0x10
c001806b:	85 c0                	test   eax,eax
c001806d:	75 0a                	jne    c0018079 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001806f:	b8 cc f4 01 c0       	mov    eax,0xc001f4cc
c0018074:	e9 82 00 00 00       	jmp    c00180fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018079:	51                   	push   ecx
c001807a:	51                   	push   ecx
c001807b:	68 4e 2b 02 c0       	push   0xc0022b4e
c0018080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018084:	03 06                	add    eax,DWORD PTR [esi]
c0018086:	50                   	push   eax
c0018087:	e8 1e 87 fe ff       	call   c00007aa <strcmp>
c001808c:	83 c4 10             	add    esp,0x10
c001808f:	85 c0                	test   eax,eax
c0018091:	74 63                	je     c00180f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c0018093:	50                   	push   eax
c0018094:	50                   	push   eax
c0018095:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018099:	03 06                	add    eax,DWORD PTR [esi]
c001809b:	50                   	push   eax
c001809c:	68 57 2b 02 c0       	push   0xc0022b57
c00180a1:	e8 b3 70 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00180a6:	58                   	pop    eax
c00180a7:	5a                   	pop    edx
c00180a8:	68 71 2b 02 c0       	push   0xc0022b71
c00180ad:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00180b4:	53                   	push   ebx
c00180b5:	e8 9f 86 fe ff       	call   c0000759 <strcpy>
c00180ba:	59                   	pop    ecx
c00180bb:	58                   	pop    eax
c00180bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180c0:	03 06                	add    eax,DWORD PTR [esi]
c00180c2:	50                   	push   eax
c00180c3:	53                   	push   ebx
c00180c4:	e8 47 87 fe ff       	call   c0000810 <strcat>
c00180c9:	58                   	pop    eax
c00180ca:	5a                   	pop    edx
c00180cb:	68 07 2c 02 c0       	push   0xc0022c07
c00180d0:	53                   	push   ebx
c00180d1:	e8 3a 87 fe ff       	call   c0000810 <strcat>
c00180d6:	83 c4 10             	add    esp,0x10
c00180d9:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00180de:	0f 84 4b 01 00 00    	je     c001822f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00180e4:	83 ec 0c             	sub    esp,0xc
c00180e7:	53                   	push   ebx
c00180e8:	e8 5b d8 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c00180ed:	83 c4 10             	add    esp,0x10
c00180f0:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c00180f4:	eb 0b                	jmp    c0018101 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00180f6:	b8 4c f2 01 c0       	mov    eax,0xc001f24c
c00180fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180ff:	b3 01                	mov    bl,0x1
c0018101:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018106:	0f 85 80 00 00 00    	jne    c001818c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001810c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018113:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018117:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001811b:	01 ce                	add    esi,ecx
c001811d:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018125:	0f 94 c2             	sete   dl
c0018128:	8b 06                	mov    eax,DWORD PTR [esi]
c001812a:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018132:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0018137:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001813b:	84 db                	test   bl,bl
c001813d:	74 31                	je     c0018170 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001813f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018143:	01 c3                	add    ebx,eax
c0018145:	84 d2                	test   dl,dl
c0018147:	75 0a                	jne    c0018153 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018149:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001814d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018151:	76 32                	jbe    c0018185 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018153:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018158:	0f 84 d1 00 00 00    	je     c001822f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001815e:	83 ec 0c             	sub    esp,0xc
c0018161:	68 88 2b 02 c0       	push   0xc0022b88
c0018166:	e8 dd d7 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001816b:	83 c4 10             	add    esp,0x10
c001816e:	eb 15                	jmp    c0018185 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018170:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0018173:	84 d2                	test   dl,dl
c0018175:	75 0e                	jne    c0018185 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018177:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001817b:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001817f:	77 04                	ja     c0018185 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018181:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0018185:	89 1e                	mov    DWORD PTR [esi],ebx
c0018187:	e9 df 00 00 00       	jmp    c001826b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001818c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0018191:	75 6e                	jne    c0018201 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c0018193:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001819a:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001819e:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00181a2:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00181aa:	74 17                	je     c00181c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00181ac:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00181b4:	74 0d                	je     c00181c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00181b6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00181ba:	83 e8 04             	sub    eax,0x4
c00181bd:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00181c1:	76 17                	jbe    c00181da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00181c3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181c8:	74 65                	je     c001822f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00181ca:	83 ec 0c             	sub    esp,0xc
c00181cd:	68 a4 2b 02 c0       	push   0xc0022ba4
c00181d2:	e8 71 d7 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c00181d7:	83 c4 10             	add    esp,0x10
c00181da:	8b 16                	mov    edx,DWORD PTR [esi]
c00181dc:	84 db                	test   bl,bl
c00181de:	74 13                	je     c00181f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00181e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e4:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00181eb:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00181ef:	01 d0                	add    eax,edx
c00181f1:	eb 06                	jmp    c00181f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c00181f3:	89 d0                	mov    eax,edx
c00181f5:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00181f9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00181fd:	89 06                	mov    DWORD PTR [esi],eax
c00181ff:	eb 6a                	jmp    c001826b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018201:	50                   	push   eax
c0018202:	50                   	push   eax
c0018203:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018208:	50                   	push   eax
c0018209:	68 c0 2b 02 c0       	push   0xc0022bc0
c001820e:	e8 46 6f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018213:	83 c4 10             	add    esp,0x10
c0018216:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001821b:	74 12                	je     c001822f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001821d:	83 ec 0c             	sub    esp,0xc
c0018220:	68 cb 2b 02 c0       	push   0xc0022bcb
c0018225:	e8 1e d7 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001822a:	83 c4 10             	add    esp,0x10
c001822d:	eb 3c                	jmp    c001826b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001822f:	83 ec 0c             	sub    esp,0xc
c0018232:	57                   	push   edi
c0018233:	e8 1a 75 ff ff       	call   c000f752 <File::close()>
c0018238:	8b 07                	mov    eax,DWORD PTR [edi]
c001823a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001823d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018240:	59                   	pop    ecx
c0018241:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018245:	e8 b1 3d ff ff       	call   c000bffb <free>
c001824a:	5b                   	pop    ebx
c001824b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001824f:	e8 a7 3d ff ff       	call   c000bffb <free>
c0018254:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018257:	e8 9f 3d ff ff       	call   c000bffb <free>
c001825c:	5e                   	pop    esi
c001825d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018261:	e8 95 3d ff ff       	call   c000bffb <free>
c0018266:	83 c4 10             	add    esp,0x10
c0018269:	eb 21                	jmp    c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001826b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001826f:	e9 2c fd ff ff       	jmp    c0017fa0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0018274:	83 ec 0c             	sub    esp,0xc
c0018277:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001827b:	e8 7b 3d ff ff       	call   c000bffb <free>
c0018280:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0018284:	83 c4 10             	add    esp,0x10
c0018287:	e9 a2 fc ff ff       	jmp    c0017f2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001828c:	31 c0                	xor    eax,eax
c001828e:	eb 32                	jmp    c00182c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c0018290:	83 ec 0c             	sub    esp,0xc
c0018293:	57                   	push   edi
c0018294:	e8 b9 74 ff ff       	call   c000f752 <File::close()>
c0018299:	8b 07                	mov    eax,DWORD PTR [edi]
c001829b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001829e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182a1:	58                   	pop    eax
c00182a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182a6:	e8 50 3d ff ff       	call   c000bffb <free>
c00182ab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00182ae:	e8 48 3d ff ff       	call   c000bffb <free>
c00182b3:	5a                   	pop    edx
c00182b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00182b8:	e8 3e 3d ff ff       	call   c000bffb <free>
c00182bd:	83 c4 10             	add    esp,0x10
c00182c0:	b0 01                	mov    al,0x1
c00182c2:	81 c4 5c 03 00 00    	add    esp,0x35c
c00182c8:	5b                   	pop    ebx
c00182c9:	5e                   	pop    esi
c00182ca:	5f                   	pop    edi
c00182cb:	5d                   	pop    ebp
c00182cc:	c3                   	ret    

c00182cd <Thr::getDriverBaseFromAddress(unsigned long)>:
c00182cd:	56                   	push   esi
c00182ce:	31 d2                	xor    edx,edx
c00182d0:	53                   	push   ebx
c00182d1:	8b 1d e0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251e0
c00182d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00182db:	39 d3                	cmp    ebx,edx
c00182dd:	7e 1b                	jle    c00182fa <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00182df:	8b 04 95 00 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdac00]
c00182e6:	39 c8                	cmp    eax,ecx
c00182e8:	77 0d                	ja     c00182f7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00182ea:	8b 34 95 00 52 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdae00]
c00182f1:	01 c6                	add    esi,eax
c00182f3:	39 ce                	cmp    esi,ecx
c00182f5:	77 05                	ja     c00182fc <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00182f7:	42                   	inc    edx
c00182f8:	eb e1                	jmp    c00182db <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00182fa:	31 c0                	xor    eax,eax
c00182fc:	5b                   	pop    ebx
c00182fd:	5e                   	pop    esi
c00182fe:	c3                   	ret    

c00182ff <Thr::getDriverNameFromAddress(unsigned long)>:
c00182ff:	53                   	push   ebx
c0018300:	31 c0                	xor    eax,eax
c0018302:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018306:	8b 1d e0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251e0
c001830c:	39 c3                	cmp    ebx,eax
c001830e:	7e 22                	jle    c0018332 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018310:	8b 14 85 00 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdac00]
c0018317:	39 ca                	cmp    edx,ecx
c0018319:	77 14                	ja     c001832f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001831b:	03 14 85 00 52 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdae00]
c0018322:	39 ca                	cmp    edx,ecx
c0018324:	76 09                	jbe    c001832f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018326:	8b 04 85 00 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa00]
c001832d:	eb 05                	jmp    c0018334 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001832f:	40                   	inc    eax
c0018330:	eb da                	jmp    c001830c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018332:	31 c0                	xor    eax,eax
c0018334:	5b                   	pop    ebx
c0018335:	c3                   	ret    

c0018336 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018336:	53                   	push   ebx
c0018337:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001833b:	53                   	push   ebx
c001833c:	e8 8c ff ff ff       	call   c00182cd <Thr::getDriverBaseFromAddress(unsigned long)>
c0018341:	5a                   	pop    edx
c0018342:	31 d2                	xor    edx,edx
c0018344:	85 c0                	test   eax,eax
c0018346:	74 04                	je     c001834c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018348:	89 da                	mov    edx,ebx
c001834a:	29 c2                	sub    edx,eax
c001834c:	89 d0                	mov    eax,edx
c001834e:	5b                   	pop    ebx
c001834f:	c3                   	ret    

c0018350 <Thr::loadDLL(char const*, bool)>:
c0018350:	55                   	push   ebp
c0018351:	57                   	push   edi
c0018352:	56                   	push   esi
c0018353:	53                   	push   ebx
c0018354:	81 ec 34 01 00 00    	sub    esp,0x134
c001835a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018361:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0018368:	56                   	push   esi
c0018369:	68 e3 2b 02 c0       	push   0xc0022be3
c001836e:	e8 e6 6d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018373:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001837a:	e8 a5 6c ff ff       	call   c000f024 <operator new(unsigned long)>
c001837f:	83 c4 0c             	add    esp,0xc
c0018382:	89 c3                	mov    ebx,eax
c0018384:	ff 35 d4 59 02 c0    	push   DWORD PTR ds:0xc00259d4
c001838a:	56                   	push   esi
c001838b:	50                   	push   eax
c001838c:	e8 ff 72 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0018391:	83 c4 0c             	add    esp,0xc
c0018394:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0018398:	50                   	push   eax
c0018399:	8d 44 24 20          	lea    eax,[esp+0x20]
c001839d:	50                   	push   eax
c001839e:	53                   	push   ebx
c001839f:	e8 fc 75 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c00183a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183ac:	83 c4 10             	add    esp,0x10
c00183af:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00183b4:	75 0a                	jne    c00183c0 <Thr::loadDLL(char const*, bool)+0x70>
c00183b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183ba:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00183be:	75 3c                	jne    c00183fc <Thr::loadDLL(char const*, bool)+0xac>
c00183c0:	89 e8                	mov    eax,ebp
c00183c2:	84 c0                	test   al,al
c00183c4:	0f 84 3d 01 00 00    	je     c0018507 <Thr::loadDLL(char const*, bool)+0x1b7>
c00183ca:	50                   	push   eax
c00183cb:	50                   	push   eax
c00183cc:	68 f4 2b 02 c0       	push   0xc0022bf4
c00183d1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00183d5:	53                   	push   ebx
c00183d6:	e8 7e 83 fe ff       	call   c0000759 <strcpy>
c00183db:	58                   	pop    eax
c00183dc:	5a                   	pop    edx
c00183dd:	56                   	push   esi
c00183de:	53                   	push   ebx
c00183df:	e8 2c 84 fe ff       	call   c0000810 <strcat>
c00183e4:	59                   	pop    ecx
c00183e5:	5f                   	pop    edi
c00183e6:	68 07 2c 02 c0       	push   0xc0022c07
c00183eb:	53                   	push   ebx
c00183ec:	e8 1f 84 fe ff       	call   c0000810 <strcat>
c00183f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183f4:	e8 4f d5 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c00183f9:	83 c4 10             	add    esp,0x10
c00183fc:	e8 ca 5e ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0018401:	51                   	push   ecx
c0018402:	6a 03                	push   0x3
c0018404:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018408:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001840c:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018412:	83 d3 00             	adc    ebx,0x0
c0018415:	89 ca                	mov    edx,ecx
c0018417:	89 d1                	mov    ecx,edx
c0018419:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001841d:	51                   	push   ecx
c001841e:	50                   	push   eax
c001841f:	e8 e8 64 ff ff       	call   c000e90c <VAS::allocatePages(int, int)>
c0018424:	89 34 24             	mov    DWORD PTR [esp],esi
c0018427:	89 c3                	mov    ebx,eax
c0018429:	e8 a9 82 fe ff       	call   c00006d7 <strlen>
c001842e:	8b 3d e0 51 02 c0    	mov    edi,DWORD PTR ds:0xc00251e0
c0018434:	40                   	inc    eax
c0018435:	89 04 24             	mov    DWORD PTR [esp],eax
c0018438:	e8 ae 3b ff ff       	call   c000bfeb <malloc>
c001843d:	89 04 bd 00 56 02 c0 	mov    DWORD PTR [edi*4-0x3ffdaa00],eax
c0018444:	5f                   	pop    edi
c0018445:	58                   	pop    eax
c0018446:	a1 e0 51 02 c0       	mov    eax,ds:0xc00251e0
c001844b:	56                   	push   esi
c001844c:	ff 34 85 00 56 02 c0 	push   DWORD PTR [eax*4-0x3ffdaa00]
c0018453:	e8 01 83 fe ff       	call   c0000759 <strcpy>
c0018458:	a1 e0 51 02 c0       	mov    eax,ds:0xc00251e0
c001845d:	8d 50 01             	lea    edx,[eax+0x1]
c0018460:	89 1c 85 00 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdac00],ebx
c0018467:	89 15 e0 51 02 c0    	mov    DWORD PTR ds:0xc00251e0,edx
c001846d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018471:	83 c4 0c             	add    esp,0xc
c0018474:	89 14 85 00 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdae00],edx
c001847b:	6a 01                	push   0x1
c001847d:	53                   	push   ebx
c001847e:	56                   	push   esi
c001847f:	e8 ab f6 ff ff       	call   c0017b2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0018484:	83 c4 10             	add    esp,0x10
c0018487:	89 c7                	mov    edi,eax
c0018489:	fe c8                	dec    al
c001848b:	74 16                	je     c00184a3 <Thr::loadDLL(char const*, bool)+0x153>
c001848d:	89 e8                	mov    eax,ebp
c001848f:	84 c0                	test   al,al
c0018491:	74 10                	je     c00184a3 <Thr::loadDLL(char const*, bool)+0x153>
c0018493:	83 ec 0c             	sub    esp,0xc
c0018496:	68 09 2c 02 c0       	push   0xc0022c09
c001849b:	e8 a8 d4 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c00184a0:	83 c4 10             	add    esp,0x10
c00184a3:	31 f6                	xor    esi,esi
c00184a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184ad:	05 ff 0f 00 00       	add    eax,0xfff
c00184b2:	83 d2 00             	adc    edx,0x0
c00184b5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00184b9:	c1 ea 0c             	shr    edx,0xc
c00184bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00184c4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00184c8:	ba 00 00 00 00       	mov    edx,0x0
c00184cd:	89 d0                	mov    eax,edx
c00184cf:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00184d3:	73 2c                	jae    c0018501 <Thr::loadDLL(char const*, bool)+0x1b1>
c00184d5:	e8 f1 5d ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c00184da:	89 f5                	mov    ebp,esi
c00184dc:	c1 e5 0c             	shl    ebp,0xc
c00184df:	52                   	push   edx
c00184e0:	52                   	push   edx
c00184e1:	01 dd                	add    ebp,ebx
c00184e3:	55                   	push   ebp
c00184e4:	50                   	push   eax
c00184e5:	e8 82 5f ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	f6 00 60             	test   BYTE PTR [eax],0x60
c00184f0:	75 0c                	jne    c00184fe <Thr::loadDLL(char const*, bool)+0x1ae>
c00184f2:	83 ec 0c             	sub    esp,0xc
c00184f5:	55                   	push   ebp
c00184f6:	e8 39 40 ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c00184fb:	83 c4 10             	add    esp,0x10
c00184fe:	46                   	inc    esi
c00184ff:	eb a4                	jmp    c00184a5 <Thr::loadDLL(char const*, bool)+0x155>
c0018501:	89 f8                	mov    eax,edi
c0018503:	84 c0                	test   al,al
c0018505:	75 02                	jne    c0018509 <Thr::loadDLL(char const*, bool)+0x1b9>
c0018507:	31 db                	xor    ebx,ebx
c0018509:	81 c4 2c 01 00 00    	add    esp,0x12c
c001850f:	89 d8                	mov    eax,ebx
c0018511:	5b                   	pop    ebx
c0018512:	5e                   	pop    esi
c0018513:	5f                   	pop    edi
c0018514:	5d                   	pop    ebp
c0018515:	c3                   	ret    

c0018516 <Thr::executeDLL(unsigned long, void*)>:
c0018516:	56                   	push   esi
c0018517:	53                   	push   ebx
c0018518:	51                   	push   ecx
c0018519:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001851d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018521:	85 db                	test   ebx,ebx
c0018523:	75 10                	jne    c0018535 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018525:	83 ec 0c             	sub    esp,0xc
c0018528:	68 28 2c 02 c0       	push   0xc0022c28
c001852d:	e8 16 d4 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c0018532:	83 c4 10             	add    esp,0x10
c0018535:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018539:	5a                   	pop    edx
c001853a:	89 d8                	mov    eax,ebx
c001853c:	5b                   	pop    ebx
c001853d:	5e                   	pop    esi
c001853e:	ff e0                	jmp    eax

c0018540 <changeTSS>:
c0018540:	83 ec 0c             	sub    esp,0xc
c0018543:	e8 94 c2 ff ff       	call   c00147dc <thisCPU()>
c0018548:	52                   	push   edx
c0018549:	05 7c 11 00 00       	add    eax,0x117c
c001854e:	52                   	push   edx
c001854f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018555:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018558:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001855d:	c1 e1 15             	shl    ecx,0x15
c0018560:	29 ca                	sub    edx,ecx
c0018562:	52                   	push   edx
c0018563:	50                   	push   eax
c0018564:	e8 73 55 ff ff       	call   c000dadc <TSS::setESP(unsigned long)>
c0018569:	83 c4 1c             	add    esp,0x1c
c001856c:	c3                   	ret    
c001856d:	90                   	nop

c001856e <Process::addArgs(char**)>:
c001856e:	57                   	push   edi
c001856f:	56                   	push   esi
c0018570:	53                   	push   ebx
c0018571:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018575:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018579:	85 ff                	test   edi,edi
c001857b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0018585:	74 45                	je     c00185cc <Process::addArgs(char**)+0x5e>
c0018587:	8b 07                	mov    eax,DWORD PTR [edi]
c0018589:	85 c0                	test   eax,eax
c001858b:	74 3f                	je     c00185cc <Process::addArgs(char**)+0x5e>
c001858d:	31 db                	xor    ebx,ebx
c001858f:	83 ec 0c             	sub    esp,0xc
c0018592:	50                   	push   eax
c0018593:	e8 3f 81 fe ff       	call   c00006d7 <strlen>
c0018598:	40                   	inc    eax
c0018599:	89 04 24             	mov    DWORD PTR [esp],eax
c001859c:	e8 4a 3a ff ff       	call   c000bfeb <malloc>
c00185a1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00185a8:	5a                   	pop    edx
c00185a9:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00185ac:	59                   	pop    ecx
c00185ad:	43                   	inc    ebx
c00185ae:	52                   	push   edx
c00185af:	50                   	push   eax
c00185b0:	e8 a4 81 fe ff       	call   c0000759 <strcpy>
c00185b5:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00185bb:	83 c4 10             	add    esp,0x10
c00185be:	41                   	inc    ecx
c00185bf:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00185c5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00185c8:	85 c0                	test   eax,eax
c00185ca:	75 c3                	jne    c001858f <Process::addArgs(char**)+0x21>
c00185cc:	5b                   	pop    ebx
c00185cd:	5e                   	pop    esi
c00185ce:	5f                   	pop    edi
c00185cf:	c3                   	ret    

c00185d0 <Process::Process(char const*, Process*, char**)>:
c00185d0:	56                   	push   esi
c00185d1:	53                   	push   ebx
c00185d2:	83 ec 14             	sub    esp,0x14
c00185d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185d9:	05 0c 02 00 00       	add    eax,0x20c
c00185de:	bb 07 00 00 00       	mov    ebx,0x7
c00185e3:	89 c6                	mov    esi,eax
c00185e5:	85 db                	test   ebx,ebx
c00185e7:	78 12                	js     c00185fb <Process::Process(char const*, Process*, char**)+0x2b>
c00185e9:	83 ec 0c             	sub    esp,0xc
c00185ec:	56                   	push   esi
c00185ed:	e8 28 77 00 00       	call   c001fd1a <ThreadControlBlock::ThreadControlBlock()>
c00185f2:	83 c4 10             	add    esp,0x10
c00185f5:	83 c6 63             	add    esi,0x63
c00185f8:	4b                   	dec    ebx
c00185f9:	eb ea                	jmp    c00185e5 <Process::Process(char const*, Process*, char**)+0x15>
c00185fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185ff:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001860a:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018613:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c0018618:	8d 50 01             	lea    edx,[eax+0x1]
c001861b:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c0018621:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018625:	89 02                	mov    DWORD PTR [edx],eax
c0018627:	83 ec 0c             	sub    esp,0xc
c001862a:	6a 10                	push   0x10
c001862c:	e8 f3 69 ff ff       	call   c000f024 <operator new(unsigned long)>
c0018631:	83 c4 10             	add    esp,0x10
c0018634:	89 c3                	mov    ebx,eax
c0018636:	83 ec 08             	sub    esp,0x8
c0018639:	6a 00                	push   0x0
c001863b:	53                   	push   ebx
c001863c:	e8 77 66 ff ff       	call   c000ecb8 <VAS::VAS(bool)>
c0018641:	83 c4 10             	add    esp,0x10
c0018644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018648:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001864e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018652:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001865c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018660:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018664:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001866a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001866e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018674:	85 c0                	test   eax,eax
c0018676:	74 42                	je     c00186ba <Process::Process(char const*, Process*, char**)+0xea>
c0018678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001867c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018682:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001868c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018696:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001869c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00186a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186a6:	05 0c 01 00 00       	add    eax,0x10c
c00186ab:	83 ec 08             	sub    esp,0x8
c00186ae:	52                   	push   edx
c00186af:	50                   	push   eax
c00186b0:	e8 a4 80 fe ff       	call   c0000759 <strcpy>
c00186b5:	83 c4 10             	add    esp,0x10
c00186b8:	eb 5c                	jmp    c0018716 <Process::Process(char const*, Process*, char**)+0x146>
c00186ba:	83 ec 0c             	sub    esp,0xc
c00186bd:	68 60 12 00 00       	push   0x1260
c00186c2:	e8 5d 69 ff ff       	call   c000f024 <operator new(unsigned long)>
c00186c7:	83 c4 10             	add    esp,0x10
c00186ca:	89 c3                	mov    ebx,eax
c00186cc:	83 ec 08             	sub    esp,0x8
c00186cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186d3:	53                   	push   ebx
c00186d4:	e8 01 51 ff ff       	call   c000d7da <VgaText::VgaText(char const*)>
c00186d9:	83 c4 10             	add    esp,0x10
c00186dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00186e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186ea:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00186f0:	83 ec 0c             	sub    esp,0xc
c00186f3:	50                   	push   eax
c00186f4:	e8 e0 44 ff ff       	call   c000cbd9 <addToTerminalCycle(VgaText*)>
c00186f9:	83 c4 10             	add    esp,0x10
c00186fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018700:	05 0c 01 00 00       	add    eax,0x10c
c0018705:	83 ec 08             	sub    esp,0x8
c0018708:	68 52 2c 02 c0       	push   0xc0022c52
c001870d:	50                   	push   eax
c001870e:	e8 46 80 fe ff       	call   c0000759 <strcpy>
c0018713:	83 c4 10             	add    esp,0x10
c0018716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001871a:	83 c0 0c             	add    eax,0xc
c001871d:	83 ec 08             	sub    esp,0x8
c0018720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018724:	50                   	push   eax
c0018725:	e8 2f 80 fe ff       	call   c0000759 <strcpy>
c001872a:	83 c4 10             	add    esp,0x10
c001872d:	83 ec 08             	sub    esp,0x8
c0018730:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018738:	e8 31 fe ff ff       	call   c001856e <Process::addArgs(char**)>
c001873d:	83 c4 10             	add    esp,0x10
c0018740:	83 ec 08             	sub    esp,0x8
c0018743:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018747:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001874b:	e8 a6 ee ff ff       	call   c00175f6 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018750:	83 c4 10             	add    esp,0x10
c0018753:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018757:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001875b:	83 f0 01             	xor    eax,0x1
c001875e:	88 c2                	mov    dl,al
c0018760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018764:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001876a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001876e:	25 ff 00 00 00       	and    eax,0xff
c0018773:	83 ec 08             	sub    esp,0x8
c0018776:	50                   	push   eax
c0018777:	68 50 2d 02 c0       	push   0xc0022d50
c001877c:	e8 d8 69 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018781:	83 c4 10             	add    esp,0x10
c0018784:	90                   	nop
c0018785:	83 c4 14             	add    esp,0x14
c0018788:	5b                   	pop    ebx
c0018789:	5e                   	pop    esi
c001878a:	c3                   	ret    
c001878b:	90                   	nop

c001878c <Process::Process(bool, char const*, Process*, char**)>:
c001878c:	56                   	push   esi
c001878d:	53                   	push   ebx
c001878e:	83 ec 14             	sub    esp,0x14
c0018791:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018795:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001879d:	05 0c 02 00 00       	add    eax,0x20c
c00187a2:	bb 07 00 00 00       	mov    ebx,0x7
c00187a7:	89 c6                	mov    esi,eax
c00187a9:	85 db                	test   ebx,ebx
c00187ab:	78 12                	js     c00187bf <Process::Process(bool, char const*, Process*, char**)+0x33>
c00187ad:	83 ec 0c             	sub    esp,0xc
c00187b0:	56                   	push   esi
c00187b1:	e8 64 75 00 00       	call   c001fd1a <ThreadControlBlock::ThreadControlBlock()>
c00187b6:	83 c4 10             	add    esp,0x10
c00187b9:	83 c6 63             	add    esi,0x63
c00187bc:	4b                   	dec    ebx
c00187bd:	eb ea                	jmp    c00187a9 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00187bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187c3:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00187ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187ce:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00187d7:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c00187dc:	8d 50 01             	lea    edx,[eax+0x1]
c00187df:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c00187e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187e9:	89 02                	mov    DWORD PTR [edx],eax
c00187eb:	83 ec 0c             	sub    esp,0xc
c00187ee:	6a 10                	push   0x10
c00187f0:	e8 2f 68 ff ff       	call   c000f024 <operator new(unsigned long)>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	89 c3                	mov    ebx,eax
c00187fa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00187fe:	25 ff 00 00 00       	and    eax,0xff
c0018803:	83 ec 08             	sub    esp,0x8
c0018806:	50                   	push   eax
c0018807:	53                   	push   ebx
c0018808:	e8 ab 64 ff ff       	call   c000ecb8 <VAS::VAS(bool)>
c001880d:	83 c4 10             	add    esp,0x10
c0018810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018814:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001881a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001881e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001882c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018830:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001883a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018840:	85 c0                	test   eax,eax
c0018842:	74 42                	je     c0018886 <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018848:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001884e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018858:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001885e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018862:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018868:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001886e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018872:	05 0c 01 00 00       	add    eax,0x10c
c0018877:	83 ec 08             	sub    esp,0x8
c001887a:	52                   	push   edx
c001887b:	50                   	push   eax
c001887c:	e8 d8 7e fe ff       	call   c0000759 <strcpy>
c0018881:	83 c4 10             	add    esp,0x10
c0018884:	eb 5c                	jmp    c00188e2 <Process::Process(bool, char const*, Process*, char**)+0x156>
c0018886:	83 ec 0c             	sub    esp,0xc
c0018889:	68 60 12 00 00       	push   0x1260
c001888e:	e8 91 67 ff ff       	call   c000f024 <operator new(unsigned long)>
c0018893:	83 c4 10             	add    esp,0x10
c0018896:	89 c3                	mov    ebx,eax
c0018898:	83 ec 08             	sub    esp,0x8
c001889b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001889f:	53                   	push   ebx
c00188a0:	e8 35 4f ff ff       	call   c000d7da <VgaText::VgaText(char const*)>
c00188a5:	83 c4 10             	add    esp,0x10
c00188a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188ac:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00188b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188b6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00188bc:	83 ec 0c             	sub    esp,0xc
c00188bf:	50                   	push   eax
c00188c0:	e8 14 43 ff ff       	call   c000cbd9 <addToTerminalCycle(VgaText*)>
c00188c5:	83 c4 10             	add    esp,0x10
c00188c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188cc:	05 0c 01 00 00       	add    eax,0x10c
c00188d1:	83 ec 08             	sub    esp,0x8
c00188d4:	68 52 2c 02 c0       	push   0xc0022c52
c00188d9:	50                   	push   eax
c00188da:	e8 7a 7e fe ff       	call   c0000759 <strcpy>
c00188df:	83 c4 10             	add    esp,0x10
c00188e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e6:	83 c0 0c             	add    eax,0xc
c00188e9:	83 ec 08             	sub    esp,0x8
c00188ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188f0:	50                   	push   eax
c00188f1:	e8 63 7e fe ff       	call   c0000759 <strcpy>
c00188f6:	83 c4 10             	add    esp,0x10
c00188f9:	83 ec 08             	sub    esp,0x8
c00188fc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018900:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018904:	e8 65 fc ff ff       	call   c001856e <Process::addArgs(char**)>
c0018909:	83 c4 10             	add    esp,0x10
c001890c:	90                   	nop
c001890d:	83 c4 14             	add    esp,0x14
c0018910:	5b                   	pop    ebx
c0018911:	5e                   	pop    esi
c0018912:	c3                   	ret    

c0018913 <disableIRQs()>:
c0018913:	fa                   	cli    
c0018914:	a1 ac 59 02 c0       	mov    eax,ds:0xc00259ac
c0018919:	40                   	inc    eax
c001891a:	a3 ac 59 02 c0       	mov    ds:0xc00259ac,eax
c001891f:	c3                   	ret    

c0018920 <getIRQNestingLevel()>:
c0018920:	a1 ac 59 02 c0       	mov    eax,ds:0xc00259ac
c0018925:	c3                   	ret    

c0018926 <enableIRQs()>:
c0018926:	a1 ac 59 02 c0       	mov    eax,ds:0xc00259ac
c001892b:	48                   	dec    eax
c001892c:	a3 ac 59 02 c0       	mov    ds:0xc00259ac,eax
c0018931:	75 01                	jne    c0018934 <enableIRQs()+0xe>
c0018933:	fb                   	sti    
c0018934:	c3                   	ret    

c0018935 <lockScheduler()>:
c0018935:	eb dc                	jmp    c0018913 <disableIRQs()>

c0018937 <unlockScheduler()>:
c0018937:	eb ed                	jmp    c0018926 <enableIRQs()>

c0018939 <userModeEntryPoint(void*)>:
c0018939:	83 ec 0c             	sub    esp,0xc
c001893c:	e8 f6 ff ff ff       	call   c0018937 <unlockScheduler()>
c0018941:	fb                   	sti    
c0018942:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018947:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001894a:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018950:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018954:	83 c4 0c             	add    esp,0xc
c0018957:	e9 3c 79 fe ff       	jmp    c0000298 <goToUsermode>

c001895c <lockStuff()>:
c001895c:	e8 b2 ff ff ff       	call   c0018913 <disableIRQs()>
c0018961:	a1 a8 59 02 c0       	mov    eax,ds:0xc00259a8
c0018966:	40                   	inc    eax
c0018967:	a3 a8 59 02 c0       	mov    ds:0xc00259a8,eax
c001896c:	c3                   	ret    

c001896d <taskStartupFunction>:
c001896d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018972:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018975:	c3                   	ret    

c0018976 <updateTimeUsed()>:
c0018976:	57                   	push   edi
c0018977:	56                   	push   esi
c0018978:	53                   	push   ebx
c0018979:	e8 5e be ff ff       	call   c00147dc <thisCPU()>
c001897e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018985:	74 49                	je     c00189d0 <updateTimeUsed()+0x5a>
c0018987:	0f 31                	rdtsc  
c0018989:	89 c1                	mov    ecx,eax
c001898b:	a3 e8 59 02 c0       	mov    ds:0xc00259e8,eax
c0018990:	2b 0d d8 59 02 c0    	sub    ecx,DWORD PTR ds:0xc00259d8
c0018996:	a3 d8 59 02 c0       	mov    ds:0xc00259d8,eax
c001899b:	89 0d e0 59 02 c0    	mov    DWORD PTR ds:0xc00259e0,ecx
c00189a1:	89 d3                	mov    ebx,edx
c00189a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189a8:	89 15 ec 59 02 c0    	mov    DWORD PTR ds:0xc00259ec,edx
c00189ae:	1b 1d dc 59 02 c0    	sbb    ebx,DWORD PTR ds:0xc00259dc
c00189b4:	89 15 dc 59 02 c0    	mov    DWORD PTR ds:0xc00259dc,edx
c00189ba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00189bd:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c00189c0:	01 f1                	add    ecx,esi
c00189c2:	89 1d e4 59 02 c0    	mov    DWORD PTR ds:0xc00259e4,ebx
c00189c8:	11 fb                	adc    ebx,edi
c00189ca:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c00189cd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00189d0:	5b                   	pop    ebx
c00189d1:	5e                   	pop    esi
c00189d2:	5f                   	pop    edi
c00189d3:	c3                   	ret    

c00189d4 <switchToThread(ThreadControlBlock*)>:
c00189d4:	53                   	push   ebx
c00189d5:	83 ec 08             	sub    esp,0x8
c00189d8:	a1 a8 59 02 c0       	mov    eax,ds:0xc00259a8
c00189dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00189e1:	85 c0                	test   eax,eax
c00189e3:	75 36                	jne    c0018a1b <switchToThread(ThreadControlBlock*)+0x47>
c00189e5:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c00189e8:	80 fa ff             	cmp    dl,0xff
c00189eb:	74 2a                	je     c0018a17 <switchToThread(ThreadControlBlock*)+0x43>
c00189ed:	81 e2 ff 00 00 00    	and    edx,0xff
c00189f3:	b8 84 03 00 00       	mov    eax,0x384
c00189f8:	29 d0                	sub    eax,edx
c00189fa:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00189fd:	c1 e0 10             	shl    eax,0x10
c0018a00:	01 c8                	add    eax,ecx
c0018a02:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018a05:	e8 6c ff ff ff       	call   c0018976 <updateTimeUsed()>
c0018a0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018a0e:	83 c4 08             	add    esp,0x8
c0018a11:	5b                   	pop    ebx
c0018a12:	e9 ba 78 fe ff       	jmp    c00002d1 <switchToThreadASM>
c0018a17:	31 c0                	xor    eax,eax
c0018a19:	eb e7                	jmp    c0018a02 <switchToThread(ThreadControlBlock*)+0x2e>
c0018a1b:	c7 05 a4 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00259a4,0x1
c0018a25:	83 c4 08             	add    esp,0x8
c0018a28:	5b                   	pop    ebx
c0018a29:	c3                   	ret    

c0018a2a <Semaphore::Semaphore(int)>:
c0018a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a32:	89 10                	mov    DWORD PTR [eax],edx
c0018a34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a38:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018a3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018a4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a4e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018a55:	90                   	nop
c0018a56:	c3                   	ret    
c0018a57:	90                   	nop

c0018a58 <Mutex::Mutex()>:
c0018a58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a5c:	6a 01                	push   0x1
c0018a5e:	50                   	push   eax
c0018a5f:	e8 c6 ff ff ff       	call   c0018a2a <Semaphore::Semaphore(int)>
c0018a64:	83 c4 08             	add    esp,0x8
c0018a67:	90                   	nop
c0018a68:	c3                   	ret    
c0018a69:	90                   	nop

c0018a6a <Process::createThread(void (*)(void*), void*, int)>:
c0018a6a:	55                   	push   ebp
c0018a6b:	31 c9                	xor    ecx,ecx
c0018a6d:	57                   	push   edi
c0018a6e:	56                   	push   esi
c0018a6f:	53                   	push   ebx
c0018a70:	83 ec 1c             	sub    esp,0x1c
c0018a73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018a77:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018a7e:	89 f2                	mov    edx,esi
c0018a80:	31 c0                	xor    eax,eax
c0018a82:	66 89 d0             	mov    ax,dx
c0018a85:	83 e2 01             	and    edx,0x1
c0018a88:	74 14                	je     c0018a9e <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018a8a:	d1 f8                	sar    eax,1
c0018a8c:	41                   	inc    ecx
c0018a8d:	89 c2                	mov    edx,eax
c0018a8f:	83 f9 10             	cmp    ecx,0x10
c0018a92:	75 ec                	jne    c0018a80 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018a94:	83 c4 1c             	add    esp,0x1c
c0018a97:	31 c0                	xor    eax,eax
c0018a99:	5b                   	pop    ebx
c0018a9a:	5e                   	pop    esi
c0018a9b:	5f                   	pop    edi
c0018a9c:	5d                   	pop    ebp
c0018a9d:	c3                   	ret    
c0018a9e:	b8 01 00 00 00       	mov    eax,0x1
c0018aa3:	d3 e0                	shl    eax,cl
c0018aa5:	09 c6                	or     esi,eax
c0018aa7:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018aad:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018ab4:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018ab7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018aba:	89 f0                	mov    eax,esi
c0018abc:	c1 e0 05             	shl    eax,0x5
c0018abf:	01 c6                	add    esi,eax
c0018ac1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018ac4:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018aca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018ace:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018ad4:	89 ca                	mov    edx,ecx
c0018ad6:	f7 da                	neg    edx
c0018ad8:	c1 e2 15             	shl    edx,0x15
c0018adb:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018ae1:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018ae7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018aed:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018af3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018af7:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018afd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b01:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018b0b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018b11:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018b1b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018b25:	52                   	push   edx
c0018b26:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018b2d:	52                   	push   edx
c0018b2e:	50                   	push   eax
c0018b2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b33:	68 c8 59 02 c0       	push   0xc00259c8
c0018b38:	e8 35 70 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b3d:	83 c4 10             	add    esp,0x10
c0018b40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b44:	83 c4 1c             	add    esp,0x1c
c0018b47:	5b                   	pop    ebx
c0018b48:	5e                   	pop    esi
c0018b49:	5f                   	pop    edi
c0018b4a:	5d                   	pop    ebp
c0018b4b:	c3                   	ret    

c0018b4c <Process::createUserThread()>:
c0018b4c:	83 ec 0c             	sub    esp,0xc
c0018b4f:	68 80 00 00 00       	push   0x80
c0018b54:	6a 00                	push   0x0
c0018b56:	68 39 89 01 c0       	push   0xc0018939
c0018b5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b5f:	50                   	push   eax
c0018b60:	e8 05 ff ff ff       	call   c0018a6a <Process::createThread(void (*)(void*), void*, int)>
c0018b65:	83 c4 1c             	add    esp,0x1c
c0018b68:	c3                   	ret    

c0018b69 <setupMultitasking(void (*)())>:
c0018b69:	56                   	push   esi
c0018b6a:	53                   	push   ebx
c0018b6b:	51                   	push   ecx
c0018b6c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b70:	eb 10                	jmp    c0018b82 <setupMultitasking(void (*)())+0x19>
c0018b72:	83 ec 0c             	sub    esp,0xc
c0018b75:	68 c8 59 02 c0       	push   0xc00259c8
c0018b7a:	e8 45 6f 00 00       	call   c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b7f:	83 c4 10             	add    esp,0x10
c0018b82:	83 ec 0c             	sub    esp,0xc
c0018b85:	68 c8 59 02 c0       	push   0xc00259c8
c0018b8a:	e8 19 6f 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b8f:	83 c4 10             	add    esp,0x10
c0018b92:	84 c0                	test   al,al
c0018b94:	74 dc                	je     c0018b72 <setupMultitasking(void (*)())+0x9>
c0018b96:	83 ec 0c             	sub    esp,0xc
c0018b99:	68 3b 07 00 00       	push   0x73b
c0018b9e:	e8 81 64 ff ff       	call   c000f024 <operator new(unsigned long)>
c0018ba3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018baa:	6a 00                	push   0x0
c0018bac:	68 56 2c 02 c0       	push   0xc0022c56
c0018bb1:	89 c3                	mov    ebx,eax
c0018bb3:	6a 01                	push   0x1
c0018bb5:	50                   	push   eax
c0018bb6:	e8 d1 fb ff ff       	call   c001878c <Process::Process(bool, char const*, Process*, char**)>
c0018bbb:	83 c4 18             	add    esp,0x18
c0018bbe:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018bc4:	89 1d d4 59 02 c0    	mov    DWORD PTR ds:0xc00259d4,ebx
c0018bca:	50                   	push   eax
c0018bcb:	68 78 2d 02 c0       	push   0xc0022d78
c0018bd0:	e8 84 65 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018bd5:	5a                   	pop    edx
c0018bd6:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018bdc:	51                   	push   ecx
c0018bdd:	e8 6b 47 ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c0018be2:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018be9:	83 c8 01             	or     eax,0x1
c0018bec:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018bf3:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bf9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018bfc:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018c06:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018c0c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018c16:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018c20:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018c26:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018c2c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018c36:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018c3c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018c46:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018c50:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018c56:	58                   	pop    eax
c0018c57:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018c5d:	5a                   	pop    edx
c0018c5e:	68 52 2c 02 c0       	push   0xc0022c52
c0018c63:	50                   	push   eax
c0018c64:	e8 f0 7a fe ff       	call   c0000759 <strcpy>
c0018c69:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018c70:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018c74:	83 c4 14             	add    esp,0x14
c0018c77:	5b                   	pop    ebx
c0018c78:	5e                   	pop    esi
c0018c79:	e9 45 76 fe ff       	jmp    c00002c3 <switchToThreadASMFirstTime>

c0018c7e <schedule()>:
c0018c7e:	a1 a8 59 02 c0       	mov    eax,ds:0xc00259a8
c0018c83:	85 c0                	test   eax,eax
c0018c85:	74 0b                	je     c0018c92 <schedule()+0x14>
c0018c87:	c7 05 a4 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00259a4,0x1
c0018c91:	c3                   	ret    
c0018c92:	53                   	push   ebx
c0018c93:	83 ec 14             	sub    esp,0x14
c0018c96:	68 c8 59 02 c0       	push   0xc00259c8
c0018c9b:	e8 08 6e 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ca0:	83 c4 10             	add    esp,0x10
c0018ca3:	84 c0                	test   al,al
c0018ca5:	75 38                	jne    c0018cdf <schedule()+0x61>
c0018ca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018caf:	4a                   	dec    edx
c0018cb0:	74 32                	je     c0018ce4 <schedule()+0x66>
c0018cb2:	83 ec 0c             	sub    esp,0xc
c0018cb5:	68 c8 59 02 c0       	push   0xc00259c8
c0018cba:	e8 e1 6d 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018cbf:	89 c3                	mov    ebx,eax
c0018cc1:	c7 04 24 c8 59 02 c0 	mov    DWORD PTR [esp],0xc00259c8
c0018cc8:	e8 f7 6d 00 00       	call   c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018ccd:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018cd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018cd7:	e8 f8 fc ff ff       	call   c00189d4 <switchToThread(ThreadControlBlock*)>
c0018cdc:	83 c4 10             	add    esp,0x10
c0018cdf:	83 c4 08             	add    esp,0x8
c0018ce2:	5b                   	pop    ebx
c0018ce3:	c3                   	ret    
c0018ce4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018ceb:	51                   	push   ecx
c0018cec:	51                   	push   ecx
c0018ced:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018cf3:	53                   	push   ebx
c0018cf4:	68 c8 59 02 c0       	push   0xc00259c8
c0018cf9:	e8 74 6e 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018cfe:	83 c4 10             	add    esp,0x10
c0018d01:	eb af                	jmp    c0018cb2 <schedule()+0x34>

c0018d03 <unlockStuff()>:
c0018d03:	a1 a8 59 02 c0       	mov    eax,ds:0xc00259a8
c0018d08:	48                   	dec    eax
c0018d09:	a3 a8 59 02 c0       	mov    ds:0xc00259a8,eax
c0018d0e:	75 09                	jne    c0018d19 <unlockStuff()+0x16>
c0018d10:	a1 a4 59 02 c0       	mov    eax,ds:0xc00259a4
c0018d15:	85 c0                	test   eax,eax
c0018d17:	75 05                	jne    c0018d1e <unlockStuff()+0x1b>
c0018d19:	e9 08 fc ff ff       	jmp    c0018926 <enableIRQs()>
c0018d1e:	83 ec 0c             	sub    esp,0xc
c0018d21:	c7 05 a4 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00259a4,0x0
c0018d2b:	e8 4e ff ff ff       	call   c0018c7e <schedule()>
c0018d30:	83 c4 0c             	add    esp,0xc
c0018d33:	e9 ee fb ff ff       	jmp    c0018926 <enableIRQs()>

c0018d38 <Semaphore::tryAcquire()>:
c0018d38:	83 ec 0c             	sub    esp,0xc
c0018d3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d3f:	e8 18 fc ff ff       	call   c001895c <lockStuff()>
c0018d44:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018d47:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018d49:	7c 0b                	jl     c0018d56 <Semaphore::tryAcquire()+0x1e>
c0018d4b:	e8 b3 ff ff ff       	call   c0018d03 <unlockStuff()>
c0018d50:	31 c0                	xor    eax,eax
c0018d52:	83 c4 0c             	add    esp,0xc
c0018d55:	c3                   	ret    
c0018d56:	40                   	inc    eax
c0018d57:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018d5a:	e8 a4 ff ff ff       	call   c0018d03 <unlockStuff()>
c0018d5f:	b0 01                	mov    al,0x1
c0018d61:	83 c4 0c             	add    esp,0xc
c0018d64:	c3                   	ret    
c0018d65:	90                   	nop

c0018d66 <Semaphore::assertLocked(char const*)>:
c0018d66:	83 ec 0c             	sub    esp,0xc
c0018d69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d6d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018d71:	e8 e6 fb ff ff       	call   c001895c <lockStuff()>
c0018d76:	8b 02                	mov    eax,DWORD PTR [edx]
c0018d78:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018d7b:	7c 05                	jl     c0018d82 <Semaphore::assertLocked(char const*)+0x1c>
c0018d7d:	83 c4 0c             	add    esp,0xc
c0018d80:	eb 81                	jmp    c0018d03 <unlockStuff()>
c0018d82:	83 ec 0c             	sub    esp,0xc
c0018d85:	51                   	push   ecx
c0018d86:	e8 bd cb ff ff       	call   c0015948 <Krnl::panic(char const*)>
c0018d8b:	83 c4 10             	add    esp,0x10
c0018d8e:	83 c4 0c             	add    esp,0xc
c0018d91:	e9 6d ff ff ff       	jmp    c0018d03 <unlockStuff()>

c0018d96 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018d96:	83 ec 0c             	sub    esp,0xc
c0018d99:	e8 82 fb ff ff       	call   c0018920 <getIRQNestingLevel()>
c0018d9e:	52                   	push   edx
c0018d9f:	52                   	push   edx
c0018da0:	50                   	push   eax
c0018da1:	68 ac 2d 02 c0       	push   0xc0022dac
c0018da6:	e8 ae 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018dab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018db0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018db4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018db7:	e8 c2 fe ff ff       	call   c0018c7e <schedule()>
c0018dbc:	e8 76 fb ff ff       	call   c0018937 <unlockScheduler()>
c0018dc1:	e8 5a fb ff ff       	call   c0018920 <getIRQNestingLevel()>
c0018dc6:	59                   	pop    ecx
c0018dc7:	5a                   	pop    edx
c0018dc8:	50                   	push   eax
c0018dc9:	68 e0 2d 02 c0       	push   0xc0022de0
c0018dce:	e8 86 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018dd3:	83 c4 1c             	add    esp,0x1c
c0018dd6:	c3                   	ret    

c0018dd7 <blockTask(TaskState)>:
c0018dd7:	83 ec 0c             	sub    esp,0xc
c0018dda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018dde:	e8 52 fb ff ff       	call   c0018935 <lockScheduler()>
c0018de3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018de8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018deb:	e8 8e fe ff ff       	call   c0018c7e <schedule()>
c0018df0:	83 c4 0c             	add    esp,0xc
c0018df3:	e9 3f fb ff ff       	jmp    c0018937 <unlockScheduler()>

c0018df8 <waitTask(int, int*, int)>:
c0018df8:	83 ec 18             	sub    esp,0x18
c0018dfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e04:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018e07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e10:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018e13:	6a 07                	push   0x7
c0018e15:	e8 bd ff ff ff       	call   c0018dd7 <blockTask(TaskState)>
c0018e1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e1f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018e22:	83 c4 10             	add    esp,0x10
c0018e25:	85 d2                	test   edx,edx
c0018e27:	74 0a                	je     c0018e33 <waitTask(int, int*, int)+0x3b>
c0018e29:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018e2c:	89 02                	mov    DWORD PTR [edx],eax
c0018e2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e33:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018e36:	83 c4 0c             	add    esp,0xc
c0018e39:	c3                   	ret    

c0018e3a <nanoSleepUntil(unsigned long long)>:
c0018e3a:	53                   	push   ebx
c0018e3b:	83 ec 08             	sub    esp,0x8
c0018e3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018e42:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018e46:	3b 0d f0 4b 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024bf0
c0018e4c:	89 d8                	mov    eax,ebx
c0018e4e:	1b 05 f4 4b 02 c0    	sbb    eax,DWORD PTR ds:0xc0024bf4
c0018e54:	73 05                	jae    c0018e5b <nanoSleepUntil(unsigned long long)+0x21>
c0018e56:	83 c4 08             	add    esp,0x8
c0018e59:	5b                   	pop    ebx
c0018e5a:	c3                   	ret    
c0018e5b:	e8 fc fa ff ff       	call   c001895c <lockStuff()>
c0018e60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e65:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018e68:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018e6b:	51                   	push   ecx
c0018e6c:	51                   	push   ecx
c0018e6d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018e73:	53                   	push   ebx
c0018e74:	68 bc 59 02 c0       	push   0xc00259bc
c0018e79:	e8 f4 6c 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e7e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018e85:	e8 4d ff ff ff       	call   c0018dd7 <blockTask(TaskState)>
c0018e8a:	83 c4 18             	add    esp,0x18
c0018e8d:	5b                   	pop    ebx
c0018e8e:	e9 70 fe ff ff       	jmp    c0018d03 <unlockStuff()>

c0018e93 <nanoSleep(unsigned long long)>:
c0018e93:	a1 f0 4b 02 c0       	mov    eax,ds:0xc0024bf0
c0018e98:	8b 15 f4 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bf4
c0018e9e:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018ea2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018ea6:	eb 92                	jmp    c0018e3a <nanoSleepUntil(unsigned long long)>

c0018ea8 <sleep(unsigned long long)>:
c0018ea8:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018ead:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018eb5:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018eb9:	01 ca                	add    edx,ecx
c0018ebb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ebf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018ec3:	eb ce                	jmp    c0018e93 <nanoSleep(unsigned long long)>
c0018ec5:	90                   	nop

c0018ec6 <Semaphore::acquire()>:
c0018ec6:	83 ec 0c             	sub    esp,0xc
c0018ec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ecd:	e8 8a fa ff ff       	call   c001895c <lockStuff()>
c0018ed2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018ed5:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018ed7:	7d 0c                	jge    c0018ee5 <Semaphore::acquire()+0x1f>
c0018ed9:	40                   	inc    eax
c0018eda:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018edd:	83 c4 0c             	add    esp,0xc
c0018ee0:	e9 1e fe ff ff       	jmp    c0018d03 <unlockStuff()>
c0018ee5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018eea:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018ef1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0018ef4:	85 c0                	test   eax,eax
c0018ef6:	74 29                	je     c0018f21 <Semaphore::acquire()+0x5b>
c0018ef8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018efb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018f01:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018f04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f09:	83 ec 0c             	sub    esp,0xc
c0018f0c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018f0f:	6a 05                	push   0x5
c0018f11:	e8 c1 fe ff ff       	call   c0018dd7 <blockTask(TaskState)>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	83 c4 0c             	add    esp,0xc
c0018f1c:	e9 e2 fd ff ff       	jmp    c0018d03 <unlockStuff()>
c0018f21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f26:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018f29:	eb d9                	jmp    c0018f04 <Semaphore::acquire()+0x3e>

c0018f2b <taskReturned>:
c0018f2b:	83 ec 18             	sub    esp,0x18
c0018f2e:	68 14 2e 02 c0       	push   0xc0022e14
c0018f33:	e8 10 ca ff ff       	call   c0015948 <Krnl::panic(char const*)>
c0018f38:	83 c4 10             	add    esp,0x10
c0018f3b:	83 ec 0c             	sub    esp,0xc
c0018f3e:	6a 02                	push   0x2
c0018f40:	e8 92 fe ff ff       	call   c0018dd7 <blockTask(TaskState)>
c0018f45:	e8 eb f9 ff ff       	call   c0018935 <lockScheduler()>
c0018f4a:	e8 2f fd ff ff       	call   c0018c7e <schedule()>
c0018f4f:	e8 e3 f9 ff ff       	call   c0018937 <unlockScheduler()>
c0018f54:	83 c4 10             	add    esp,0x10
c0018f57:	eb e2                	jmp    c0018f3b <taskReturned+0x10>

c0018f59 <unblockTask(ThreadControlBlock*)>:
c0018f59:	53                   	push   ebx
c0018f5a:	83 ec 08             	sub    esp,0x8
c0018f5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018f61:	e8 cf f9 ff ff       	call   c0018935 <lockScheduler()>
c0018f66:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018f69:	85 c0                	test   eax,eax
c0018f6b:	74 5b                	je     c0018fc8 <unblockTask(ThreadControlBlock*)+0x6f>
c0018f6d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018f70:	48                   	dec    eax
c0018f71:	74 30                	je     c0018fa3 <unblockTask(ThreadControlBlock*)+0x4a>
c0018f73:	83 ec 0c             	sub    esp,0xc
c0018f76:	68 c8 59 02 c0       	push   0xc00259c8
c0018f7b:	e8 20 6b 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018f80:	83 c4 10             	add    esp,0x10
c0018f83:	85 c0                	test   eax,eax
c0018f85:	75 16                	jne    c0018f9d <unblockTask(ThreadControlBlock*)+0x44>
c0018f87:	eb 64                	jmp    c0018fed <unblockTask(ThreadControlBlock*)+0x94>
c0018f89:	52                   	push   edx
c0018f8a:	52                   	push   edx
c0018f8b:	50                   	push   eax
c0018f8c:	68 c8 59 02 c0       	push   0xc00259c8
c0018f91:	e8 1a 6e 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018f96:	83 c4 10             	add    esp,0x10
c0018f99:	85 c0                	test   eax,eax
c0018f9b:	74 50                	je     c0018fed <unblockTask(ThreadControlBlock*)+0x94>
c0018f9d:	39 c3                	cmp    ebx,eax
c0018f9f:	75 e8                	jne    c0018f89 <unblockTask(ThreadControlBlock*)+0x30>
c0018fa1:	eb 1c                	jmp    c0018fbf <unblockTask(ThreadControlBlock*)+0x66>
c0018fa3:	83 ec 0c             	sub    esp,0xc
c0018fa6:	68 04 2f 02 c0       	push   0xc0022f04
c0018fab:	e8 a9 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018fb0:	c7 04 24 90 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e90
c0018fb7:	e8 9d 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018fbc:	83 c4 10             	add    esp,0x10
c0018fbf:	83 c4 08             	add    esp,0x8
c0018fc2:	5b                   	pop    ebx
c0018fc3:	e9 6f f9 ff ff       	jmp    c0018937 <unlockScheduler()>
c0018fc8:	83 ec 0c             	sub    esp,0xc
c0018fcb:	68 48 2e 02 c0       	push   0xc0022e48
c0018fd0:	e8 84 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018fd5:	c7 04 24 90 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e90
c0018fdc:	e8 78 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018fe1:	83 c4 10             	add    esp,0x10
c0018fe4:	83 c4 08             	add    esp,0x8
c0018fe7:	5b                   	pop    ebx
c0018fe8:	e9 4a f9 ff ff       	jmp    c0018937 <unlockScheduler()>
c0018fed:	50                   	push   eax
c0018fee:	50                   	push   eax
c0018fef:	53                   	push   ebx
c0018ff0:	68 c8 59 02 c0       	push   0xc00259c8
c0018ff5:	e8 78 6b 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	83 c4 08             	add    esp,0x8
c0019000:	5b                   	pop    ebx
c0019001:	e9 31 f9 ff ff       	jmp    c0018937 <unlockScheduler()>

c0019006 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019006:	55                   	push   ebp
c0019007:	57                   	push   edi
c0019008:	56                   	push   esi
c0019009:	53                   	push   ebx
c001900a:	83 ec 1c             	sub    esp,0x1c
c001900d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019011:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019014:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c001901a:	85 ed                	test   ebp,ebp
c001901c:	7e 21                	jle    c001903f <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c001901e:	31 f6                	xor    esi,esi
c0019020:	83 ec 0c             	sub    esp,0xc
c0019023:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c001902a:	46                   	inc    esi
c001902b:	57                   	push   edi
c001902c:	e8 ca 2f ff ff       	call   c000bffb <free>
c0019031:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019034:	83 c4 10             	add    esp,0x10
c0019037:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001903d:	7f e1                	jg     c0019020 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001903f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0019049:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001904e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019051:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0019054:	d3 c0                	rol    eax,cl
c0019056:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c001905d:	21 c1                	and    ecx,eax
c001905f:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c0019066:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019069:	89 f7                	mov    edi,esi
c001906b:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0019073:	0f 85 4f 01 00 00    	jne    c00191c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c0019079:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001907f:	85 c0                	test   eax,eax
c0019081:	0f 84 aa 00 00 00    	je     c0019131 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0019087:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001908a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001908e:	31 c9                	xor    ecx,ecx
c0019090:	eb 10                	jmp    c00190a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c0019092:	41                   	inc    ecx
c0019093:	83 f9 10             	cmp    ecx,0x10
c0019096:	0f 84 95 00 00 00    	je     c0019131 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c001909c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00190a2:	31 d2                	xor    edx,edx
c00190a4:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00190ab:	d3 fa                	sar    edx,cl
c00190ad:	83 e2 01             	and    edx,0x1
c00190b0:	74 e0                	je     c0019092 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00190b2:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00190b5:	89 d5                	mov    ebp,edx
c00190b7:	c1 e5 05             	shl    ebp,0x5
c00190ba:	01 ea                	add    edx,ebp
c00190bc:	01 d0                	add    eax,edx
c00190be:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00190c4:	83 fd 07             	cmp    ebp,0x7
c00190c7:	75 c9                	jne    c0019092 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00190c9:	05 40 02 00 00       	add    eax,0x240
c00190ce:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00190d1:	83 fd ff             	cmp    ebp,0xffffffff
c00190d4:	0f 8c 07 01 00 00    	jl     c00191e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c00190da:	0f 84 b4 01 00 00    	je     c0019294 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c00190e0:	85 ed                	test   ebp,ebp
c00190e2:	0f 84 9b 01 00 00    	je     c0019283 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c00190e8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00190ea:	75 a6                	jne    c0019092 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00190ec:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00190f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00190f6:	01 d0                	add    eax,edx
c00190f8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00190fc:	83 ec 0c             	sub    esp,0xc
c00190ff:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0019105:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019108:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001910e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019115:	50                   	push   eax
c0019116:	e8 3e fe ff ff       	call   c0018f59 <unblockTask(ThreadControlBlock*)>
c001911b:	83 c4 10             	add    esp,0x10
c001911e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019122:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019125:	41                   	inc    ecx
c0019126:	89 f7                	mov    edi,esi
c0019128:	83 f9 10             	cmp    ecx,0x10
c001912b:	0f 85 6b ff ff ff    	jne    c001909c <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0019131:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0019137:	85 c0                	test   eax,eax
c0019139:	74 5d                	je     c0019198 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c001913b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019141:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0019147:	74 4f                	je     c0019198 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019149:	83 ec 0c             	sub    esp,0xc
c001914c:	68 c8 59 02 c0       	push   0xc00259c8
c0019151:	e8 4a 69 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019156:	c7 04 24 c8 59 02 c0 	mov    DWORD PTR [esp],0xc00259c8
c001915d:	89 c7                	mov    edi,eax
c001915f:	e8 44 69 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019164:	83 c4 10             	add    esp,0x10
c0019167:	84 c0                	test   al,al
c0019169:	0f 84 e2 00 00 00    	je     c0019251 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c001916f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019172:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019178:	85 d2                	test   edx,edx
c001917a:	74 0f                	je     c001918b <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001917c:	83 ec 0c             	sub    esp,0xc
c001917f:	8b 02                	mov    eax,DWORD PTR [edx]
c0019181:	52                   	push   edx
c0019182:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019185:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019188:	83 c4 10             	add    esp,0x10
c001918b:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0019195:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019198:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001919e:	85 db                	test   ebx,ebx
c00191a0:	74 16                	je     c00191b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00191a2:	83 ec 0c             	sub    esp,0xc
c00191a5:	53                   	push   ebx
c00191a6:	e8 f3 54 ff ff       	call   c000e69e <VAS::~VAS()>
c00191ab:	5a                   	pop    edx
c00191ac:	59                   	pop    ecx
c00191ad:	6a 10                	push   0x10
c00191af:	53                   	push   ebx
c00191b0:	e8 7e 5e ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00191b5:	83 c4 10             	add    esp,0x10
c00191b8:	83 ec 0c             	sub    esp,0xc
c00191bb:	68 5d 2c 02 c0       	push   0xc0022c5d
c00191c0:	e8 94 5f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00191c5:	83 c4 10             	add    esp,0x10
c00191c8:	50                   	push   eax
c00191c9:	50                   	push   eax
c00191ca:	68 3b 07 00 00       	push   0x73b
c00191cf:	68 6b 2c 02 c0       	push   0xc0022c6b
c00191d4:	e8 80 5f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00191d9:	83 c4 2c             	add    esp,0x2c
c00191dc:	5b                   	pop    ebx
c00191dd:	5e                   	pop    esi
c00191de:	5f                   	pop    edi
c00191df:	5d                   	pop    ebp
c00191e0:	c3                   	ret    
c00191e1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00191e5:	83 ec 0c             	sub    esp,0xc
c00191e8:	68 48 2f 02 c0       	push   0xc0022f48
c00191ed:	e8 56 c7 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c00191f2:	83 c4 10             	add    esp,0x10
c00191f5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00191f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00191fc:	89 f7                	mov    edi,esi
c00191fe:	e9 8f fe ff ff       	jmp    c0019092 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019203:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019209:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001920f:	75 1c                	jne    c001922d <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019211:	83 ec 0c             	sub    esp,0xc
c0019214:	68 b0 2f 02 c0       	push   0xc0022fb0
c0019219:	e8 3b 5f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001921e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019225:	e8 ad fb ff ff       	call   c0018dd7 <blockTask(TaskState)>
c001922a:	83 c4 10             	add    esp,0x10
c001922d:	55                   	push   ebp
c001922e:	55                   	push   ebp
c001922f:	56                   	push   esi
c0019230:	68 c8 59 02 c0       	push   0xc00259c8
c0019235:	e8 38 69 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001923a:	c7 04 24 c8 59 02 c0 	mov    DWORD PTR [esp],0xc00259c8
c0019241:	e8 5a 68 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019246:	83 c4 10             	add    esp,0x10
c0019249:	39 f8                	cmp    eax,edi
c001924b:	0f 84 1e ff ff ff    	je     c001916f <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0019251:	83 ec 0c             	sub    esp,0xc
c0019254:	68 c8 59 02 c0       	push   0xc00259c8
c0019259:	e8 42 68 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001925e:	89 c6                	mov    esi,eax
c0019260:	c7 04 24 c8 59 02 c0 	mov    DWORD PTR [esp],0xc00259c8
c0019267:	e8 58 68 00 00       	call   c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001926c:	83 c4 10             	add    esp,0x10
c001926f:	39 f3                	cmp    ebx,esi
c0019271:	74 ba                	je     c001922d <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019273:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0019276:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019279:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001927f:	75 ac                	jne    c001922d <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019281:	eb 80                	jmp    c0019203 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c0019283:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019287:	83 ec 0c             	sub    esp,0xc
c001928a:	68 7c 2f 02 c0       	push   0xc0022f7c
c001928f:	e9 59 ff ff ff       	jmp    c00191ed <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c0019294:	8b 36                	mov    esi,DWORD PTR [esi]
c0019296:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001929a:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001929d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00192a0:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00192a6:	01 d7                	add    edi,edx
c00192a8:	89 f8                	mov    eax,edi
c00192aa:	e9 49 fe ff ff       	jmp    c00190f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00192af <cleanerTaskFunction(void*)>:
c00192af:	53                   	push   ebx
c00192b0:	83 ec 08             	sub    esp,0x8
c00192b3:	e8 7f f6 ff ff       	call   c0018937 <unlockScheduler()>
c00192b8:	e8 78 f6 ff ff       	call   c0018935 <lockScheduler()>
c00192bd:	80 3d 8c 59 02 c0 00 	cmp    BYTE PTR ds:0xc002598c,0x0
c00192c4:	0f 85 8e 00 00 00    	jne    c0019358 <cleanerTaskFunction(void*)+0xa9>
c00192ca:	83 ec 0c             	sub    esp,0xc
c00192cd:	6a 02                	push   0x2
c00192cf:	e8 c2 fa ff ff       	call   c0018d96 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00192d4:	83 c4 10             	add    esp,0x10
c00192d7:	c6 05 8c 59 02 c0 00 	mov    BYTE PTR ds:0xc002598c,0x0
c00192de:	e8 79 f6 ff ff       	call   c001895c <lockStuff()>
c00192e3:	e8 4d f6 ff ff       	call   c0018935 <lockScheduler()>
c00192e8:	83 ec 0c             	sub    esp,0xc
c00192eb:	68 b0 59 02 c0       	push   0xc00259b0
c00192f0:	e8 b3 67 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	84 c0                	test   al,al
c00192fa:	75 40                	jne    c001933c <cleanerTaskFunction(void*)+0x8d>
c00192fc:	83 ec 0c             	sub    esp,0xc
c00192ff:	68 b0 59 02 c0       	push   0xc00259b0
c0019304:	e8 97 67 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019309:	89 c3                	mov    ebx,eax
c001930b:	c7 04 24 b0 59 02 c0 	mov    DWORD PTR [esp],0xc00259b0
c0019312:	e8 ad 67 00 00       	call   c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019317:	c7 04 24 81 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c81
c001931e:	e8 36 5e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019323:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019326:	e8 db fc ff ff       	call   c0019006 <cleanupTerminatedTask(ThreadControlBlock*)>
c001932b:	c7 04 24 9a 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c9a
c0019332:	e8 22 5e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019337:	83 c4 10             	add    esp,0x10
c001933a:	eb ac                	jmp    c00192e8 <cleanerTaskFunction(void*)+0x39>
c001933c:	e8 f6 f5 ff ff       	call   c0018937 <unlockScheduler()>
c0019341:	e8 bd f9 ff ff       	call   c0018d03 <unlockStuff()>
c0019346:	e8 ea f5 ff ff       	call   c0018935 <lockScheduler()>
c001934b:	80 3d 8c 59 02 c0 00 	cmp    BYTE PTR ds:0xc002598c,0x0
c0019352:	0f 84 72 ff ff ff    	je     c00192ca <cleanerTaskFunction(void*)+0x1b>
c0019358:	e8 da f5 ff ff       	call   c0018937 <unlockScheduler()>
c001935d:	e9 75 ff ff ff       	jmp    c00192d7 <cleanerTaskFunction(void*)+0x28>

c0019362 <terminateTask(int)>:
c0019362:	83 ec 14             	sub    esp,0x14
c0019365:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001936a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001936d:	83 c0 0c             	add    eax,0xc
c0019370:	50                   	push   eax
c0019371:	68 d8 2f 02 c0       	push   0xc0022fd8
c0019376:	e8 de 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001937b:	e8 dc f5 ff ff       	call   c001895c <lockStuff()>
c0019380:	e8 b0 f5 ff ff       	call   c0018935 <lockScheduler()>
c0019385:	c7 04 24 ad 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cad
c001938c:	e8 c8 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019391:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019396:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001939a:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001939d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193a2:	59                   	pop    ecx
c00193a3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00193a6:	5a                   	pop    edx
c00193a7:	50                   	push   eax
c00193a8:	68 b0 59 02 c0       	push   0xc00259b0
c00193ad:	e8 c0 67 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00193b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193b7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00193be:	c7 04 24 c7 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cc7
c00193c5:	e8 8f 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00193ca:	8b 0d 88 59 02 c0    	mov    ecx,DWORD PTR ds:0xc0025988
c00193d0:	83 c4 10             	add    esp,0x10
c00193d3:	85 c9                	test   ecx,ecx
c00193d5:	74 5b                	je     c0019432 <terminateTask(int)+0xd0>
c00193d7:	83 ec 0c             	sub    esp,0xc
c00193da:	68 e1 2c 02 c0       	push   0xc0022ce1
c00193df:	e8 75 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00193e4:	58                   	pop    eax
c00193e5:	8b 15 88 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025988
c00193eb:	52                   	push   edx
c00193ec:	c6 05 8c 59 02 c0 01 	mov    BYTE PTR ds:0xc002598c,0x1
c00193f3:	e8 61 fb ff ff       	call   c0018f59 <unblockTask(ThreadControlBlock*)>
c00193f8:	c7 04 24 fb 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cfb
c00193ff:	e8 55 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019404:	83 c4 10             	add    esp,0x10
c0019407:	e8 2b f5 ff ff       	call   c0018937 <unlockScheduler()>
c001940c:	e8 f2 f8 ff ff       	call   c0018d03 <unlockStuff()>
c0019411:	83 ec 0c             	sub    esp,0xc
c0019414:	68 33 2d 02 c0       	push   0xc0022d33
c0019419:	e8 3b 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001941e:	83 c4 10             	add    esp,0x10
c0019421:	e8 0f f5 ff ff       	call   c0018935 <lockScheduler()>
c0019426:	e8 53 f8 ff ff       	call   c0018c7e <schedule()>
c001942b:	e8 07 f5 ff ff       	call   c0018937 <unlockScheduler()>
c0019430:	eb ef                	jmp    c0019421 <terminateTask(int)+0xbf>
c0019432:	83 ec 0c             	sub    esp,0xc
c0019435:	68 15 2d 02 c0       	push   0xc0022d15
c001943a:	e8 1a 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001943f:	83 c4 10             	add    esp,0x10
c0019442:	eb c3                	jmp    c0019407 <terminateTask(int)+0xa5>

c0019444 <Thr::terminateFromIRQ(int)>:
c0019444:	83 ec 18             	sub    esp,0x18
c0019447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001944b:	50                   	push   eax
c001944c:	e8 11 ff ff ff       	call   c0019362 <terminateTask(int)>
c0019451:	90                   	nop

c0019452 <Semaphore::release()>:
c0019452:	83 ec 0c             	sub    esp,0xc
c0019455:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019459:	e8 fe f4 ff ff       	call   c001895c <lockStuff()>
c001945e:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019461:	85 c0                	test   eax,eax
c0019463:	74 1a                	je     c001947f <Semaphore::release()+0x2d>
c0019465:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0019468:	83 ec 0c             	sub    esp,0xc
c001946b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c001946e:	50                   	push   eax
c001946f:	e8 e5 fa ff ff       	call   c0018f59 <unblockTask(ThreadControlBlock*)>
c0019474:	83 c4 10             	add    esp,0x10
c0019477:	83 c4 0c             	add    esp,0xc
c001947a:	e9 84 f8 ff ff       	jmp    c0018d03 <unlockStuff()>
c001947f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0019482:	48                   	dec    eax
c0019483:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0019486:	83 c4 0c             	add    esp,0xc
c0019489:	e9 75 f8 ff ff       	jmp    c0018d03 <unlockStuff()>

c001948e <__static_initialization_and_destruction_0(int, int)>:
c001948e:	83 ec 0c             	sub    esp,0xc
c0019491:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019496:	0f 85 88 00 00 00    	jne    c0019524 <__static_initialization_and_destruction_0(int, int)+0x96>
c001949c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00194a4:	75 7e                	jne    c0019524 <__static_initialization_and_destruction_0(int, int)+0x96>
c00194a6:	83 ec 0c             	sub    esp,0xc
c00194a9:	68 c8 59 02 c0       	push   0xc00259c8
c00194ae:	e8 a5 68 00 00       	call   c001fd58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00194b3:	83 c4 10             	add    esp,0x10
c00194b6:	83 ec 04             	sub    esp,0x4
c00194b9:	68 9c 39 02 c0       	push   0xc002399c
c00194be:	68 c8 59 02 c0       	push   0xc00259c8
c00194c3:	68 18 fd 01 c0       	push   0xc001fd18
c00194c8:	e8 e2 5a ff ff       	call   c000efaf <__cxa_atexit>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	83 ec 0c             	sub    esp,0xc
c00194d3:	68 bc 59 02 c0       	push   0xc00259bc
c00194d8:	e8 7b 68 00 00       	call   c001fd58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00194dd:	83 c4 10             	add    esp,0x10
c00194e0:	83 ec 04             	sub    esp,0x4
c00194e3:	68 9c 39 02 c0       	push   0xc002399c
c00194e8:	68 bc 59 02 c0       	push   0xc00259bc
c00194ed:	68 18 fd 01 c0       	push   0xc001fd18
c00194f2:	e8 b8 5a ff ff       	call   c000efaf <__cxa_atexit>
c00194f7:	83 c4 10             	add    esp,0x10
c00194fa:	83 ec 0c             	sub    esp,0xc
c00194fd:	68 b0 59 02 c0       	push   0xc00259b0
c0019502:	e8 51 68 00 00       	call   c001fd58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019507:	83 c4 10             	add    esp,0x10
c001950a:	83 ec 04             	sub    esp,0x4
c001950d:	68 9c 39 02 c0       	push   0xc002399c
c0019512:	68 b0 59 02 c0       	push   0xc00259b0
c0019517:	68 18 fd 01 c0       	push   0xc001fd18
c001951c:	e8 8e 5a ff ff       	call   c000efaf <__cxa_atexit>
c0019521:	83 c4 10             	add    esp,0x10
c0019524:	90                   	nop
c0019525:	83 c4 0c             	add    esp,0xc
c0019528:	c3                   	ret    

c0019529 <_GLOBAL__sub_I_kernelProcess>:
c0019529:	83 ec 0c             	sub    esp,0xc
c001952c:	83 ec 08             	sub    esp,0x8
c001952f:	68 ff ff 00 00       	push   0xffff
c0019534:	6a 01                	push   0x1
c0019536:	e8 53 ff ff ff       	call   c001948e <__static_initialization_and_destruction_0(int, int)>
c001953b:	83 c4 10             	add    esp,0x10
c001953e:	83 c4 0c             	add    esp,0xc
c0019541:	c3                   	ret    

c0019542 <Vm::vm8086EntryPoint(void*)>:
c0019542:	83 ec 0c             	sub    esp,0xc
c0019545:	e8 ed f3 ff ff       	call   c0018937 <unlockScheduler()>
c001954a:	fb                   	sti    
c001954b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019550:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019554:	52                   	push   edx
c0019555:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019559:	52                   	push   edx
c001955a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001955e:	52                   	push   edx
c001955f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019563:	50                   	push   eax
c0019564:	e8 fe 6c fe ff       	call   c0000267 <goToVM86>
c0019569:	83 c4 1c             	add    esp,0x1c
c001956c:	c3                   	ret    

c001956d <Vm::inbv(unsigned short)>:
c001956d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019571:	ec                   	in     al,dx
c0019572:	c3                   	ret    

c0019573 <Vm::outbv(unsigned short, unsigned char)>:
c0019573:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019577:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001957b:	ee                   	out    dx,al
c001957c:	c3                   	ret    

c001957d <Vm::realToLinear(unsigned short, unsigned short)>:
c001957d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019582:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019587:	c1 e0 04             	shl    eax,0x4
c001958a:	01 d0                	add    eax,edx
c001958c:	c3                   	ret    

c001958d <Vm::getSegment(unsigned int)>:
c001958d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019591:	c1 e8 10             	shr    eax,0x10
c0019594:	c3                   	ret    

c0019595 <Vm::getOffset(unsigned int)>:
c0019595:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019599:	c3                   	ret    

c001959a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001959a:	55                   	push   ebp
c001959b:	57                   	push   edi
c001959c:	56                   	push   esi
c001959d:	53                   	push   ebx
c001959e:	83 ec 2c             	sub    esp,0x2c
c00195a1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00195a5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00195a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00195ad:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00195b1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00195b5:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00195b9:	e8 77 f3 ff ff       	call   c0018935 <lockScheduler()>
c00195be:	68 80 00 00 00       	push   0x80
c00195c3:	6a 00                	push   0x0
c00195c5:	68 42 95 01 c0       	push   0xc0019542
c00195ca:	55                   	push   ebp
c00195cb:	e8 9a f4 ff ff       	call   c0018a6a <Process::createThread(void (*)(void*), void*, int)>
c00195d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195d4:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00195d8:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00195dc:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00195e0:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00195e4:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00195e8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00195ef:	e8 30 5a ff ff       	call   c000f024 <operator new(unsigned long)>
c00195f4:	83 c4 0c             	add    esp,0xc
c00195f7:	55                   	push   ebp
c00195f8:	89 c3                	mov    ebx,eax
c00195fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00195fe:	50                   	push   eax
c00195ff:	e8 8c 60 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0019604:	83 c4 0c             	add    esp,0xc
c0019607:	8d 44 24 17          	lea    eax,[esp+0x17]
c001960b:	50                   	push   eax
c001960c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019610:	50                   	push   eax
c0019611:	53                   	push   ebx
c0019612:	e8 89 63 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c0019617:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001961b:	83 c4 10             	add    esp,0x10
c001961e:	84 d2                	test   dl,dl
c0019620:	74 1c                	je     c001963e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019622:	83 ec 0c             	sub    esp,0xc
c0019625:	68 f7 2f 02 c0       	push   0xc0022ff7
c001962a:	e8 19 c3 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001962f:	e8 03 f3 ff ff       	call   c0018937 <unlockScheduler()>
c0019634:	83 c4 10             	add    esp,0x10
c0019637:	31 d2                	xor    edx,edx
c0019639:	e9 81 00 00 00       	jmp    c00196bf <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001963e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019642:	51                   	push   ecx
c0019643:	51                   	push   ecx
c0019644:	6a 01                	push   0x1
c0019646:	53                   	push   ebx
c0019647:	e8 a8 60 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c001964c:	83 c4 10             	add    esp,0x10
c001964f:	85 c0                	test   eax,eax
c0019651:	74 1b                	je     c001966e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019653:	83 ec 0c             	sub    esp,0xc
c0019656:	68 10 30 02 c0       	push   0xc0023010
c001965b:	e8 e8 c2 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c0019660:	e8 d2 f2 ff ff       	call   c0018937 <unlockScheduler()>
c0019665:	83 c4 10             	add    esp,0x10
c0019668:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001966c:	eb 51                	jmp    c00196bf <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001966e:	83 ec 0c             	sub    esp,0xc
c0019671:	0f b7 ff             	movzx  edi,di
c0019674:	6a 07                	push   0x7
c0019676:	68 00 01 00 00       	push   0x100
c001967b:	6a 00                	push   0x0
c001967d:	6a 00                	push   0x0
c001967f:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0019685:	e8 72 54 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001968a:	83 c4 18             	add    esp,0x18
c001968d:	0f b7 f6             	movzx  esi,si
c0019690:	57                   	push   edi
c0019691:	56                   	push   esi
c0019692:	e8 e6 fe ff ff       	call   c001957d <Vm::realToLinear(unsigned short, unsigned short)>
c0019697:	5a                   	pop    edx
c0019698:	8b 13                	mov    edx,DWORD PTR [ebx]
c001969a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001969e:	51                   	push   ecx
c001969f:	50                   	push   eax
c00196a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196a8:	53                   	push   ebx
c00196a9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00196ac:	83 c4 14             	add    esp,0x14
c00196af:	53                   	push   ebx
c00196b0:	e8 9d 60 ff ff       	call   c000f752 <File::close()>
c00196b5:	e8 7d f2 ff ff       	call   c0018937 <unlockScheduler()>
c00196ba:	83 c4 10             	add    esp,0x10
c00196bd:	b2 01                	mov    dl,0x1
c00196bf:	83 c4 2c             	add    esp,0x2c
c00196c2:	88 d0                	mov    al,dl
c00196c4:	5b                   	pop    ebx
c00196c5:	5e                   	pop    esi
c00196c6:	5f                   	pop    edi
c00196c7:	5d                   	pop    ebp
c00196c8:	c3                   	ret    

c00196c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00196c9:	57                   	push   edi
c00196ca:	56                   	push   esi
c00196cb:	53                   	push   ebx
c00196cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00196d4:	83 e8 06             	sub    eax,0x6
c00196d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00196db:	0f b7 c0             	movzx  eax,ax
c00196de:	50                   	push   eax
c00196df:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00196e4:	50                   	push   eax
c00196e5:	e8 93 fe ff ff       	call   c001957d <Vm::realToLinear(unsigned short, unsigned short)>
c00196ea:	5a                   	pop    edx
c00196eb:	5e                   	pop    esi
c00196ec:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00196ef:	8d 56 fa             	lea    edx,[esi-0x6]
c00196f2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00196f8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00196fb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00196fe:	83 c2 02             	add    edx,0x2
c0019701:	66 89 10             	mov    WORD PTR [eax],dx
c0019704:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019707:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001970b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001970e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019712:	89 d6                	mov    esi,edx
c0019714:	66 81 e6 ff fd       	and    si,0xfdff
c0019719:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001971f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019723:	74 07                	je     c001972c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019725:	89 d6                	mov    esi,edx
c0019727:	66 81 ce 00 02       	or     si,0x200
c001972c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019730:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019735:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019739:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019741:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019744:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001974c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001974f:	5b                   	pop    ebx
c0019750:	5e                   	pop    esi
c0019751:	5f                   	pop    edi
c0019752:	c3                   	ret    

c0019753 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019753:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019758:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001975d:	c1 e0 04             	shl    eax,0x4
c0019760:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019763:	c3                   	ret    

c0019764 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019764:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019769:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001976e:	c1 e0 04             	shl    eax,0x4
c0019771:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019775:	c3                   	ret    

c0019776 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019776:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001977b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019780:	c1 e0 04             	shl    eax,0x4
c0019783:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019786:	c3                   	ret    

c0019787 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019787:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001978c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019791:	c1 e0 04             	shl    eax,0x4
c0019794:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019798:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001979b:	c3                   	ret    

c001979c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001979c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197a1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197a6:	c1 e0 04             	shl    eax,0x4
c00197a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197ad:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00197b1:	c3                   	ret    

c00197b2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00197b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197bc:	c1 e0 04             	shl    eax,0x4
c00197bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197c3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00197c6:	c3                   	ret    

c00197c7 <Vm::faultHandler(regs*)>:
c00197c7:	55                   	push   ebp
c00197c8:	57                   	push   edi
c00197c9:	56                   	push   esi
c00197ca:	53                   	push   ebx
c00197cb:	83 ec 1c             	sub    esp,0x1c
c00197ce:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00197d2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00197d6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00197d9:	52                   	push   edx
c00197da:	0f b7 f0             	movzx  esi,ax
c00197dd:	0f b7 c0             	movzx  eax,ax
c00197e0:	50                   	push   eax
c00197e1:	e8 97 fd ff ff       	call   c001957d <Vm::realToLinear(unsigned short, unsigned short)>
c00197e6:	5a                   	pop    edx
c00197e7:	89 c7                	mov    edi,eax
c00197e9:	59                   	pop    ecx
c00197ea:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00197ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00197f1:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00197f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197fd:	0f b7 c5             	movzx  eax,bp
c0019800:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019804:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019808:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001980c:	e8 6c fd ff ff       	call   c001957d <Vm::realToLinear(unsigned short, unsigned short)>
c0019811:	5a                   	pop    edx
c0019812:	59                   	pop    ecx
c0019813:	b1 06                	mov    cl,0x6
c0019815:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001981a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001981f:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019822:	80 fa 9d             	cmp    dl,0x9d
c0019825:	0f 84 1d 02 00 00    	je     c0019a48 <Vm::faultHandler(regs*)+0x281>
c001982b:	0f 87 8e 00 00 00    	ja     c00198bf <Vm::faultHandler(regs*)+0xf8>
c0019831:	80 fa 66             	cmp    dl,0x66
c0019834:	0f 84 89 01 00 00    	je     c00199c3 <Vm::faultHandler(regs*)+0x1fc>
c001983a:	77 44                	ja     c0019880 <Vm::faultHandler(regs*)+0xb9>
c001983c:	80 fa 36             	cmp    dl,0x36
c001983f:	0f 84 74 01 00 00    	je     c00199b9 <Vm::faultHandler(regs*)+0x1f2>
c0019845:	77 1a                	ja     c0019861 <Vm::faultHandler(regs*)+0x9a>
c0019847:	80 fa 26             	cmp    dl,0x26
c001984a:	0f 84 4b 01 00 00    	je     c001999b <Vm::faultHandler(regs*)+0x1d4>
c0019850:	80 fa 2e             	cmp    dl,0x2e
c0019853:	0f 85 4a 05 00 00    	jne    c0019da3 <Vm::faultHandler(regs*)+0x5dc>
c0019859:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001985c:	31 c9                	xor    ecx,ecx
c001985e:	47                   	inc    edi
c001985f:	eb be                	jmp    c001981f <Vm::faultHandler(regs*)+0x58>
c0019861:	80 fa 64             	cmp    dl,0x64
c0019864:	0f 84 3b 01 00 00    	je     c00199a5 <Vm::faultHandler(regs*)+0x1de>
c001986a:	0f 87 3f 01 00 00    	ja     c00199af <Vm::faultHandler(regs*)+0x1e8>
c0019870:	80 fa 3e             	cmp    dl,0x3e
c0019873:	0f 85 2a 05 00 00    	jne    c0019da3 <Vm::faultHandler(regs*)+0x5dc>
c0019879:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001987c:	b1 01                	mov    cl,0x1
c001987e:	eb de                	jmp    c001985e <Vm::faultHandler(regs*)+0x97>
c0019880:	80 fa 6d             	cmp    dl,0x6d
c0019883:	0f 84 bf 02 00 00    	je     c0019b48 <Vm::faultHandler(regs*)+0x381>
c0019889:	77 17                	ja     c00198a2 <Vm::faultHandler(regs*)+0xdb>
c001988b:	80 fa 67             	cmp    dl,0x67
c001988e:	0f 84 3c 01 00 00    	je     c00199d0 <Vm::faultHandler(regs*)+0x209>
c0019894:	80 fa 6c             	cmp    dl,0x6c
c0019897:	0f 84 5d 02 00 00    	je     c0019afa <Vm::faultHandler(regs*)+0x333>
c001989d:	e9 01 05 00 00       	jmp    c0019da3 <Vm::faultHandler(regs*)+0x5dc>
c00198a2:	80 fa 6f             	cmp    dl,0x6f
c00198a5:	0f 84 8b 03 00 00    	je     c0019c36 <Vm::faultHandler(regs*)+0x46f>
c00198ab:	0f 82 0f 03 00 00    	jb     c0019bc0 <Vm::faultHandler(regs*)+0x3f9>
c00198b1:	80 fa 9c             	cmp    dl,0x9c
c00198b4:	0f 84 23 01 00 00    	je     c00199dd <Vm::faultHandler(regs*)+0x216>
c00198ba:	e9 e4 04 00 00       	jmp    c0019da3 <Vm::faultHandler(regs*)+0x5dc>
c00198bf:	80 fa ec             	cmp    dl,0xec
c00198c2:	0f 84 7f 04 00 00    	je     c0019d47 <Vm::faultHandler(regs*)+0x580>
c00198c8:	77 7b                	ja     c0019945 <Vm::faultHandler(regs*)+0x17e>
c00198ca:	80 fa e4             	cmp    dl,0xe4
c00198cd:	0f 84 fe 03 00 00    	je     c0019cd1 <Vm::faultHandler(regs*)+0x50a>
c00198d3:	77 53                	ja     c0019928 <Vm::faultHandler(regs*)+0x161>
c00198d5:	80 fa cd             	cmp    dl,0xcd
c00198d8:	0f 84 cd 01 00 00    	je     c0019aab <Vm::faultHandler(regs*)+0x2e4>
c00198de:	80 fa cf             	cmp    dl,0xcf
c00198e1:	0f 85 bc 04 00 00    	jne    c0019da3 <Vm::faultHandler(regs*)+0x5dc>
c00198e7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00198ea:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00198ed:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00198f1:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00198f4:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00198f8:	81 ca 00 02 02 00    	or     edx,0x20200
c00198fe:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019901:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019905:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001990b:	66 c1 e8 09          	shr    ax,0x9
c001990f:	83 e0 01             	and    eax,0x1
c0019912:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019915:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019918:	83 c0 06             	add    eax,0x6
c001991b:	25 ff ff 00 00       	and    eax,0xffff
c0019920:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019923:	e9 77 04 00 00       	jmp    c0019d9f <Vm::faultHandler(regs*)+0x5d8>
c0019928:	80 fa e6             	cmp    dl,0xe6
c001992b:	0f 84 ea 03 00 00    	je     c0019d1b <Vm::faultHandler(regs*)+0x554>
c0019931:	0f 82 b6 03 00 00    	jb     c0019ced <Vm::faultHandler(regs*)+0x526>
c0019937:	80 fa e7             	cmp    dl,0xe7
c001993a:	0f 84 f2 03 00 00    	je     c0019d32 <Vm::faultHandler(regs*)+0x56b>
c0019940:	e9 5e 04 00 00       	jmp    c0019da3 <Vm::faultHandler(regs*)+0x5dc>
c0019945:	80 fa ef             	cmp    dl,0xef
c0019948:	0f 84 3c 04 00 00    	je     c0019d8a <Vm::faultHandler(regs*)+0x5c3>
c001994e:	77 28                	ja     c0019978 <Vm::faultHandler(regs*)+0x1b1>
c0019950:	80 fa ed             	cmp    dl,0xed
c0019953:	0f 84 0a 04 00 00    	je     c0019d63 <Vm::faultHandler(regs*)+0x59c>
c0019959:	80 fa ee             	cmp    dl,0xee
c001995c:	0f 85 41 04 00 00    	jne    c0019da3 <Vm::faultHandler(regs*)+0x5dc>
c0019962:	50                   	push   eax
c0019963:	50                   	push   eax
c0019964:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019968:	50                   	push   eax
c0019969:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001996d:	50                   	push   eax
c001996e:	e8 00 fc ff ff       	call   c0019573 <Vm::outbv(unsigned short, unsigned char)>
c0019973:	e9 0a 04 00 00       	jmp    c0019d82 <Vm::faultHandler(regs*)+0x5bb>
c0019978:	80 fa fa             	cmp    dl,0xfa
c001997b:	0f 84 5d 01 00 00    	je     c0019ade <Vm::faultHandler(regs*)+0x317>
c0019981:	80 fa fb             	cmp    dl,0xfb
c0019984:	0f 84 62 01 00 00    	je     c0019aec <Vm::faultHandler(regs*)+0x325>
c001998a:	80 fa f3             	cmp    dl,0xf3
c001998d:	0f 85 10 04 00 00    	jne    c0019da3 <Vm::faultHandler(regs*)+0x5dc>
c0019993:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019996:	e9 c3 fe ff ff       	jmp    c001985e <Vm::faultHandler(regs*)+0x97>
c001999b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001999e:	b1 02                	mov    cl,0x2
c00199a0:	e9 b9 fe ff ff       	jmp    c001985e <Vm::faultHandler(regs*)+0x97>
c00199a5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199a8:	b1 03                	mov    cl,0x3
c00199aa:	e9 af fe ff ff       	jmp    c001985e <Vm::faultHandler(regs*)+0x97>
c00199af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199b2:	b1 04                	mov    cl,0x4
c00199b4:	e9 a5 fe ff ff       	jmp    c001985e <Vm::faultHandler(regs*)+0x97>
c00199b9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199bc:	b1 05                	mov    cl,0x5
c00199be:	e9 9b fe ff ff       	jmp    c001985e <Vm::faultHandler(regs*)+0x97>
c00199c3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199c6:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00199cb:	e9 8e fe ff ff       	jmp    c001985e <Vm::faultHandler(regs*)+0x97>
c00199d0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199d3:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00199d8:	e9 81 fe ff ff       	jmp    c001985e <Vm::faultHandler(regs*)+0x97>
c00199dd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00199e0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00199e4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199e9:	74 30                	je     c0019a1b <Vm::faultHandler(regs*)+0x254>
c00199eb:	83 e9 04             	sub    ecx,0x4
c00199ee:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00199f4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00199fa:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00199fd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019a00:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a06:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019a0a:	0f 84 8c 03 00 00    	je     c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019a10:	80 ce 02             	or     dh,0x2
c0019a13:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019a16:	e9 81 03 00 00       	jmp    c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019a1b:	83 e9 02             	sub    ecx,0x2
c0019a1e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019a24:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019a27:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019a2b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a31:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019a35:	74 05                	je     c0019a3c <Vm::faultHandler(regs*)+0x275>
c0019a37:	80 ce 02             	or     dh,0x2
c0019a3a:	eb 03                	jmp    c0019a3f <Vm::faultHandler(regs*)+0x278>
c0019a3c:	80 e6 fd             	and    dh,0xfd
c0019a3f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019a43:	e9 54 03 00 00       	jmp    c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019a48:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a4d:	74 2a                	je     c0019a79 <Vm::faultHandler(regs*)+0x2b2>
c0019a4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a51:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019a57:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a5d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a68:	c1 e8 09             	shr    eax,0x9
c0019a6b:	83 e0 01             	and    eax,0x1
c0019a6e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a71:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a74:	83 c0 04             	add    eax,0x4
c0019a77:	eb 25                	jmp    c0019a9e <Vm::faultHandler(regs*)+0x2d7>
c0019a79:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019a7c:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a82:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a85:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019a88:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a8e:	66 c1 e8 09          	shr    ax,0x9
c0019a92:	83 e0 01             	and    eax,0x1
c0019a95:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a98:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a9b:	83 c0 02             	add    eax,0x2
c0019a9e:	25 ff ff 00 00       	and    eax,0xffff
c0019aa3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019aa6:	e9 f1 02 00 00       	jmp    c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019aab:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019aaf:	3c ff                	cmp    al,0xff
c0019ab1:	75 10                	jne    c0019ac3 <Vm::faultHandler(regs*)+0x2fc>
c0019ab3:	83 ec 0c             	sub    esp,0xc
c0019ab6:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019ab9:	e8 86 f9 ff ff       	call   c0019444 <Thr::terminateFromIRQ(int)>
c0019abe:	e9 c2 02 00 00       	jmp    c0019d85 <Vm::faultHandler(regs*)+0x5be>
c0019ac3:	83 ec 0c             	sub    esp,0xc
c0019ac6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ace:	57                   	push   edi
c0019acf:	50                   	push   eax
c0019ad0:	53                   	push   ebx
c0019ad1:	e8 f3 fb ff ff       	call   c00196c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019ad6:	83 c4 20             	add    esp,0x20
c0019ad9:	e9 c1 02 00 00       	jmp    c0019d9f <Vm::faultHandler(regs*)+0x5d8>
c0019ade:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ae3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019ae7:	e9 b0 02 00 00       	jmp    c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019af1:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019af5:	e9 a2 02 00 00       	jmp    c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019afa:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019aff:	74 0d                	je     c0019b0e <Vm::faultHandler(regs*)+0x347>
c0019b01:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019b08:	0f 87 e9 02 00 00    	ja     c0019df7 <Vm::faultHandler(regs*)+0x630>
c0019b0e:	83 ec 0c             	sub    esp,0xc
c0019b11:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019b14:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b18:	50                   	push   eax
c0019b19:	e8 4f fa ff ff       	call   c001956d <Vm::inbv(unsigned short)>
c0019b1e:	83 c4 0c             	add    esp,0xc
c0019b21:	0f b6 c0             	movzx  eax,al
c0019b24:	50                   	push   eax
c0019b25:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019b29:	0f b7 c9             	movzx  ecx,cx
c0019b2c:	50                   	push   eax
c0019b2d:	51                   	push   ecx
c0019b2e:	e8 54 fc ff ff       	call   c0019787 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019b33:	83 c4 10             	add    esp,0x10
c0019b36:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019b39:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b3d:	74 03                	je     c0019b42 <Vm::faultHandler(regs*)+0x37b>
c0019b3f:	48                   	dec    eax
c0019b40:	eb 01                	jmp    c0019b43 <Vm::faultHandler(regs*)+0x37c>
c0019b42:	40                   	inc    eax
c0019b43:	0f b7 c0             	movzx  eax,ax
c0019b46:	eb 70                	jmp    c0019bb8 <Vm::faultHandler(regs*)+0x3f1>
c0019b48:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019b4b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019b4e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b53:	74 0c                	je     c0019b61 <Vm::faultHandler(regs*)+0x39a>
c0019b55:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019b5b:	0f 87 96 02 00 00    	ja     c0019df7 <Vm::faultHandler(regs*)+0x630>
c0019b61:	0f b7 c9             	movzx  ecx,cx
c0019b64:	0f b7 f6             	movzx  esi,si
c0019b67:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019b6a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b6f:	74 20                	je     c0019b91 <Vm::faultHandler(regs*)+0x3ca>
c0019b71:	ed                   	in     eax,dx
c0019b72:	55                   	push   ebp
c0019b73:	50                   	push   eax
c0019b74:	51                   	push   ecx
c0019b75:	56                   	push   esi
c0019b76:	e8 37 fc ff ff       	call   c00197b2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019b7b:	83 c4 10             	add    esp,0x10
c0019b7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019b81:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b85:	74 05                	je     c0019b8c <Vm::faultHandler(regs*)+0x3c5>
c0019b87:	83 e8 04             	sub    eax,0x4
c0019b8a:	eb 27                	jmp    c0019bb3 <Vm::faultHandler(regs*)+0x3ec>
c0019b8c:	83 c0 04             	add    eax,0x4
c0019b8f:	eb 22                	jmp    c0019bb3 <Vm::faultHandler(regs*)+0x3ec>
c0019b91:	66 ed                	in     ax,dx
c0019b93:	0f b7 c0             	movzx  eax,ax
c0019b96:	57                   	push   edi
c0019b97:	50                   	push   eax
c0019b98:	51                   	push   ecx
c0019b99:	56                   	push   esi
c0019b9a:	e8 fd fb ff ff       	call   c001979c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019b9f:	83 c4 10             	add    esp,0x10
c0019ba2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ba5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019ba9:	74 05                	je     c0019bb0 <Vm::faultHandler(regs*)+0x3e9>
c0019bab:	83 e8 02             	sub    eax,0x2
c0019bae:	eb 03                	jmp    c0019bb3 <Vm::faultHandler(regs*)+0x3ec>
c0019bb0:	83 c0 02             	add    eax,0x2
c0019bb3:	25 ff ff 00 00       	and    eax,0xffff
c0019bb8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019bbb:	e9 dc 01 00 00       	jmp    c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019bc0:	49                   	dec    ecx
c0019bc1:	80 f9 05             	cmp    cl,0x5
c0019bc4:	77 24                	ja     c0019bea <Vm::faultHandler(regs*)+0x423>
c0019bc6:	0f b6 c9             	movzx  ecx,cl
c0019bc9:	ff 24 8d 58 30 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcfa8]
c0019bd0:	0f b7 f5             	movzx  esi,bp
c0019bd3:	eb 15                	jmp    c0019bea <Vm::faultHandler(regs*)+0x423>
c0019bd5:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019bd9:	eb 0f                	jmp    c0019bea <Vm::faultHandler(regs*)+0x423>
c0019bdb:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019bdf:	eb 09                	jmp    c0019bea <Vm::faultHandler(regs*)+0x423>
c0019be1:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019be5:	eb 03                	jmp    c0019bea <Vm::faultHandler(regs*)+0x423>
c0019be7:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019bea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019bed:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019bf2:	74 0b                	je     c0019bff <Vm::faultHandler(regs*)+0x438>
c0019bf4:	3d ff ff 00 00       	cmp    eax,0xffff
c0019bf9:	0f 87 f8 01 00 00    	ja     c0019df7 <Vm::faultHandler(regs*)+0x630>
c0019bff:	52                   	push   edx
c0019c00:	52                   	push   edx
c0019c01:	0f b7 c0             	movzx  eax,ax
c0019c04:	50                   	push   eax
c0019c05:	56                   	push   esi
c0019c06:	e8 48 fb ff ff       	call   c0019753 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019c0b:	59                   	pop    ecx
c0019c0c:	5e                   	pop    esi
c0019c0d:	0f b6 c0             	movzx  eax,al
c0019c10:	50                   	push   eax
c0019c11:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c15:	50                   	push   eax
c0019c16:	e8 58 f9 ff ff       	call   c0019573 <Vm::outbv(unsigned short, unsigned char)>
c0019c1b:	83 c4 10             	add    esp,0x10
c0019c1e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019c21:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c25:	74 03                	je     c0019c2a <Vm::faultHandler(regs*)+0x463>
c0019c27:	48                   	dec    eax
c0019c28:	eb 01                	jmp    c0019c2b <Vm::faultHandler(regs*)+0x464>
c0019c2a:	40                   	inc    eax
c0019c2b:	0f b7 c0             	movzx  eax,ax
c0019c2e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019c31:	e9 66 01 00 00       	jmp    c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019c36:	49                   	dec    ecx
c0019c37:	80 f9 05             	cmp    cl,0x5
c0019c3a:	77 1f                	ja     c0019c5b <Vm::faultHandler(regs*)+0x494>
c0019c3c:	0f b6 c9             	movzx  ecx,cl
c0019c3f:	ff 24 8d 70 30 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcf90]
c0019c46:	89 ee                	mov    esi,ebp
c0019c48:	eb 11                	jmp    c0019c5b <Vm::faultHandler(regs*)+0x494>
c0019c4a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019c4d:	eb 0c                	jmp    c0019c5b <Vm::faultHandler(regs*)+0x494>
c0019c4f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c52:	eb 07                	jmp    c0019c5b <Vm::faultHandler(regs*)+0x494>
c0019c54:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019c57:	eb 02                	jmp    c0019c5b <Vm::faultHandler(regs*)+0x494>
c0019c59:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019c5b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019c5e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c63:	74 0c                	je     c0019c71 <Vm::faultHandler(regs*)+0x4aa>
c0019c65:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c6b:	0f 87 86 01 00 00    	ja     c0019df7 <Vm::faultHandler(regs*)+0x630>
c0019c71:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019c74:	0f b7 d6             	movzx  edx,si
c0019c77:	81 e7 00 04 00 00    	and    edi,0x400
c0019c7d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019c80:	0f b7 c1             	movzx  eax,cx
c0019c83:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c88:	74 1d                	je     c0019ca7 <Vm::faultHandler(regs*)+0x4e0>
c0019c8a:	55                   	push   ebp
c0019c8b:	55                   	push   ebp
c0019c8c:	50                   	push   eax
c0019c8d:	52                   	push   edx
c0019c8e:	e8 e3 fa ff ff       	call   c0019776 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019c93:	83 c4 10             	add    esp,0x10
c0019c96:	89 f2                	mov    edx,esi
c0019c98:	ef                   	out    dx,eax
c0019c99:	85 ff                	test   edi,edi
c0019c9b:	74 05                	je     c0019ca2 <Vm::faultHandler(regs*)+0x4db>
c0019c9d:	83 e9 04             	sub    ecx,0x4
c0019ca0:	eb 21                	jmp    c0019cc3 <Vm::faultHandler(regs*)+0x4fc>
c0019ca2:	83 c1 04             	add    ecx,0x4
c0019ca5:	eb 1c                	jmp    c0019cc3 <Vm::faultHandler(regs*)+0x4fc>
c0019ca7:	55                   	push   ebp
c0019ca8:	55                   	push   ebp
c0019ca9:	50                   	push   eax
c0019caa:	52                   	push   edx
c0019cab:	e8 b4 fa ff ff       	call   c0019764 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019cb0:	83 c4 10             	add    esp,0x10
c0019cb3:	89 f2                	mov    edx,esi
c0019cb5:	66 ef                	out    dx,ax
c0019cb7:	85 ff                	test   edi,edi
c0019cb9:	74 05                	je     c0019cc0 <Vm::faultHandler(regs*)+0x4f9>
c0019cbb:	83 e9 02             	sub    ecx,0x2
c0019cbe:	eb 03                	jmp    c0019cc3 <Vm::faultHandler(regs*)+0x4fc>
c0019cc0:	83 c1 02             	add    ecx,0x2
c0019cc3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019cc9:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019ccc:	e9 cb 00 00 00       	jmp    c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019cd1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019cd8:	83 ec 0c             	sub    esp,0xc
c0019cdb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019cdf:	50                   	push   eax
c0019ce0:	e8 88 f8 ff ff       	call   c001956d <Vm::inbv(unsigned short)>
c0019ce5:	0f b6 c0             	movzx  eax,al
c0019ce8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019ceb:	eb 3f                	jmp    c0019d2c <Vm::faultHandler(regs*)+0x565>
c0019ced:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cf2:	74 07                	je     c0019cfb <Vm::faultHandler(regs*)+0x534>
c0019cf4:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019cf8:	ed                   	in     eax,dx
c0019cf9:	eb 14                	jmp    c0019d0f <Vm::faultHandler(regs*)+0x548>
c0019cfb:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019cfe:	66 31 c9             	xor    cx,cx
c0019d01:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019d04:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019d08:	66 ed                	in     ax,dx
c0019d0a:	0f b7 c0             	movzx  eax,ax
c0019d0d:	09 c8                	or     eax,ecx
c0019d0f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019d12:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019d16:	e9 84 00 00 00       	jmp    c0019d9f <Vm::faultHandler(regs*)+0x5d8>
c0019d1b:	52                   	push   edx
c0019d1c:	52                   	push   edx
c0019d1d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019d21:	50                   	push   eax
c0019d22:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019d26:	50                   	push   eax
c0019d27:	e8 47 f8 ff ff       	call   c0019573 <Vm::outbv(unsigned short, unsigned char)>
c0019d2c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019d30:	eb 53                	jmp    c0019d85 <Vm::faultHandler(regs*)+0x5be>
c0019d32:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019d35:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019d39:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d3e:	74 03                	je     c0019d43 <Vm::faultHandler(regs*)+0x57c>
c0019d40:	ef                   	out    dx,eax
c0019d41:	eb cf                	jmp    c0019d12 <Vm::faultHandler(regs*)+0x54b>
c0019d43:	66 ef                	out    dx,ax
c0019d45:	eb cb                	jmp    c0019d12 <Vm::faultHandler(regs*)+0x54b>
c0019d47:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019d4e:	83 ec 0c             	sub    esp,0xc
c0019d51:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d55:	50                   	push   eax
c0019d56:	e8 12 f8 ff ff       	call   c001956d <Vm::inbv(unsigned short)>
c0019d5b:	0f b6 c0             	movzx  eax,al
c0019d5e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019d61:	eb 1f                	jmp    c0019d82 <Vm::faultHandler(regs*)+0x5bb>
c0019d63:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019d66:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d6b:	74 03                	je     c0019d70 <Vm::faultHandler(regs*)+0x5a9>
c0019d6d:	ed                   	in     eax,dx
c0019d6e:	eb 0d                	jmp    c0019d7d <Vm::faultHandler(regs*)+0x5b6>
c0019d70:	66 ed                	in     ax,dx
c0019d72:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019d75:	66 31 d2             	xor    dx,dx
c0019d78:	0f b7 c0             	movzx  eax,ax
c0019d7b:	09 d0                	or     eax,edx
c0019d7d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019d80:	eb 1a                	jmp    c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019d82:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d85:	83 c4 10             	add    esp,0x10
c0019d88:	eb 15                	jmp    c0019d9f <Vm::faultHandler(regs*)+0x5d8>
c0019d8a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019d8d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019d90:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d95:	74 03                	je     c0019d9a <Vm::faultHandler(regs*)+0x5d3>
c0019d97:	ef                   	out    dx,eax
c0019d98:	eb 02                	jmp    c0019d9c <Vm::faultHandler(regs*)+0x5d5>
c0019d9a:	66 ef                	out    dx,ax
c0019d9c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d9f:	b0 01                	mov    al,0x1
c0019da1:	eb 56                	jmp    c0019df9 <Vm::faultHandler(regs*)+0x632>
c0019da3:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019da7:	50                   	push   eax
c0019da8:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019dac:	50                   	push   eax
c0019dad:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019db1:	50                   	push   eax
c0019db2:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019db6:	50                   	push   eax
c0019db7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019dbb:	50                   	push   eax
c0019dbc:	52                   	push   edx
c0019dbd:	52                   	push   edx
c0019dbe:	68 29 30 02 c0       	push   0xc0023029
c0019dc3:	e8 91 53 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019dc8:	83 c4 20             	add    esp,0x20
c0019dcb:	83 ec 0c             	sub    esp,0xc
c0019dce:	6a 60                	push   0x60
c0019dd0:	e8 98 f7 ff ff       	call   c001956d <Vm::inbv(unsigned short)>
c0019dd5:	83 c4 10             	add    esp,0x10
c0019dd8:	3c 1c                	cmp    al,0x1c
c0019dda:	74 04                	je     c0019de0 <Vm::faultHandler(regs*)+0x619>
c0019ddc:	3c 5a                	cmp    al,0x5a
c0019dde:	75 eb                	jne    c0019dcb <Vm::faultHandler(regs*)+0x604>
c0019de0:	3c 1c                	cmp    al,0x1c
c0019de2:	74 04                	je     c0019de8 <Vm::faultHandler(regs*)+0x621>
c0019de4:	3c 5a                	cmp    al,0x5a
c0019de6:	75 0f                	jne    c0019df7 <Vm::faultHandler(regs*)+0x630>
c0019de8:	83 ec 0c             	sub    esp,0xc
c0019deb:	6a 60                	push   0x60
c0019ded:	e8 7b f7 ff ff       	call   c001956d <Vm::inbv(unsigned short)>
c0019df2:	83 c4 10             	add    esp,0x10
c0019df5:	eb e9                	jmp    c0019de0 <Vm::faultHandler(regs*)+0x619>
c0019df7:	31 c0                	xor    eax,eax
c0019df9:	83 c4 1c             	add    esp,0x1c
c0019dfc:	5b                   	pop    ebx
c0019dfd:	5e                   	pop    esi
c0019dfe:	5f                   	pop    edi
c0019dff:	5d                   	pop    ebp
c0019e00:	c3                   	ret    
c0019e01:	90                   	nop

c0019e02 <FAT::getName()>:
c0019e02:	b8 88 30 02 c0       	mov    eax,0xc0023088
c0019e07:	c3                   	ret    

c0019e08 <FAT::tell(void*, unsigned long long*)>:
c0019e08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e0d:	75 06                	jne    c0019e15 <FAT::tell(void*, unsigned long long*)+0xd>
c0019e0f:	b8 04 00 00 00       	mov    eax,0x4
c0019e14:	c3                   	ret    
c0019e15:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e1a:	75 06                	jne    c0019e22 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019e1c:	b8 04 00 00 00       	mov    eax,0x4
c0019e21:	c3                   	ret    
c0019e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e26:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019e29:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019e2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e30:	89 01                	mov    DWORD PTR [ecx],eax
c0019e32:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019e35:	b8 00 00 00 00       	mov    eax,0x0
c0019e3a:	c3                   	ret    
c0019e3b:	90                   	nop

c0019e3c <FAT::stat(void*, unsigned long long*)>:
c0019e3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e41:	75 06                	jne    c0019e49 <FAT::stat(void*, unsigned long long*)+0xd>
c0019e43:	b8 04 00 00 00       	mov    eax,0x4
c0019e48:	c3                   	ret    
c0019e49:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e4e:	75 06                	jne    c0019e56 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019e50:	b8 04 00 00 00       	mov    eax,0x4
c0019e55:	c3                   	ret    
c0019e56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e5a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019e5d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019e60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e64:	89 01                	mov    DWORD PTR [ecx],eax
c0019e66:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019e69:	b8 00 00 00 00       	mov    eax,0x0
c0019e6e:	c3                   	ret    
c0019e6f:	90                   	nop

c0019e70 <FAT::~FAT()>:
c0019e70:	83 ec 0c             	sub    esp,0xc
c0019e73:	ba 0c 31 02 c0       	mov    edx,0xc002310c
c0019e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e7c:	89 10                	mov    DWORD PTR [eax],edx
c0019e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e82:	83 ec 0c             	sub    esp,0xc
c0019e85:	50                   	push   eax
c0019e86:	e8 ff 55 ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c0019e8b:	83 c4 10             	add    esp,0x10
c0019e8e:	90                   	nop
c0019e8f:	83 c4 0c             	add    esp,0xc
c0019e92:	c3                   	ret    
c0019e93:	90                   	nop

c0019e94 <FAT::~FAT()>:
c0019e94:	83 ec 0c             	sub    esp,0xc
c0019e97:	83 ec 0c             	sub    esp,0xc
c0019e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e9e:	e8 cd ff ff ff       	call   c0019e70 <FAT::~FAT()>
c0019ea3:	83 c4 10             	add    esp,0x10
c0019ea6:	83 ec 08             	sub    esp,0x8
c0019ea9:	6a 08                	push   0x8
c0019eab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019eaf:	e8 7f 51 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0019eb4:	83 c4 10             	add    esp,0x10
c0019eb7:	83 c4 0c             	add    esp,0xc
c0019eba:	c3                   	ret    
c0019ebb:	90                   	nop

c0019ebc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019ebc:	83 ec 1c             	sub    esp,0x1c
c0019ebf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019ec6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019ecb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ecf:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c0019ed6:	83 f8 ff             	cmp    eax,0xffffffff
c0019ed9:	75 34                	jne    c0019f0f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019edb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019edf:	88 c2                	mov    dl,al
c0019ee1:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c0019ee6:	01 d0                	add    eax,edx
c0019ee8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019eec:	8b 15 00 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a00
c0019ef2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ef6:	89 14 85 20 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5e0],edx
c0019efd:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c0019f02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019f06:	89 14 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],edx
c0019f0d:	eb 17                	jmp    c0019f26 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019f0f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019f13:	88 c2                	mov    dl,al
c0019f15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f19:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c0019f20:	01 d0                	add    eax,edx
c0019f22:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019f26:	83 ec 04             	sub    esp,0x4
c0019f29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019f2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019f31:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019f35:	50                   	push   eax
c0019f36:	e8 92 cb fe ff       	call   c0006acd <f_getlabel>
c0019f3b:	83 c4 10             	add    esp,0x10
c0019f3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f42:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f47:	75 07                	jne    c0019f50 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019f49:	b8 00 00 00 00       	mov    eax,0x0
c0019f4e:	eb 05                	jmp    c0019f55 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019f50:	b8 01 00 00 00       	mov    eax,0x1
c0019f55:	83 c4 1c             	add    esp,0x1c
c0019f58:	c3                   	ret    
c0019f59:	90                   	nop

c0019f5a <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019f5a:	57                   	push   edi
c0019f5b:	83 ec 58             	sub    esp,0x58
c0019f5e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019f66:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f6a:	b8 00 00 00 00       	mov    eax,0x0
c0019f6f:	b9 0f 00 00 00       	mov    ecx,0xf
c0019f74:	fc                   	cld    
c0019f75:	89 d7                	mov    edi,edx
c0019f77:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019f79:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019f7d:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c0019f84:	83 f8 ff             	cmp    eax,0xffffffff
c0019f87:	75 34                	jne    c0019fbd <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019f89:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f8d:	88 c2                	mov    dl,al
c0019f8f:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c0019f94:	01 d0                	add    eax,edx
c0019f96:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f9a:	8b 15 00 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a00
c0019fa0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019fa4:	89 14 85 20 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5e0],edx
c0019fab:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c0019fb0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019fb4:	89 14 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],edx
c0019fbb:	eb 17                	jmp    c0019fd4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019fbd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fc1:	88 c2                	mov    dl,al
c0019fc3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019fc7:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c0019fce:	01 d0                	add    eax,edx
c0019fd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fd4:	83 ec 08             	sub    esp,0x8
c0019fd7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019fdb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fdf:	50                   	push   eax
c0019fe0:	e8 2b 68 fe ff       	call   c0000810 <strcat>
c0019fe5:	83 c4 10             	add    esp,0x10
c0019fe8:	83 ec 0c             	sub    esp,0xc
c0019feb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fef:	50                   	push   eax
c0019ff0:	e8 cc cc fe ff       	call   c0006cc1 <f_setlabel>
c0019ff5:	83 c4 10             	add    esp,0x10
c0019ff8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019ffc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a001:	75 07                	jne    c001a00a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a003:	b8 00 00 00 00       	mov    eax,0x0
c001a008:	eb 05                	jmp    c001a00f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a00a:	b8 01 00 00 00       	mov    eax,0x1
c001a00f:	83 c4 58             	add    esp,0x58
c001a012:	5f                   	pop    edi
c001a013:	c3                   	ret    

c001a014 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a014:	83 ec 2c             	sub    esp,0x2c
c001a017:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a01f:	83 ec 08             	sub    esp,0x8
c001a022:	68 ac 30 02 c0       	push   0xc00230ac
c001a027:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a02b:	e8 7a 67 fe ff       	call   c00007aa <strcmp>
c001a030:	83 c4 10             	add    esp,0x10
c001a033:	85 c0                	test   eax,eax
c001a035:	0f 94 c0             	sete   al
c001a038:	84 c0                	test   al,al
c001a03a:	74 0d                	je     c001a049 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a03c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a044:	e9 a6 00 00 00       	jmp    c001a0ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a049:	83 ec 08             	sub    esp,0x8
c001a04c:	68 9e 30 02 c0       	push   0xc002309e
c001a051:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a055:	e8 50 67 fe ff       	call   c00007aa <strcmp>
c001a05a:	83 c4 10             	add    esp,0x10
c001a05d:	85 c0                	test   eax,eax
c001a05f:	0f 94 c0             	sete   al
c001a062:	84 c0                	test   al,al
c001a064:	74 0a                	je     c001a070 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a066:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a06e:	eb 7f                	jmp    c001a0ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a070:	83 ec 08             	sub    esp,0x8
c001a073:	68 a4 30 02 c0       	push   0xc00230a4
c001a078:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a07c:	e8 29 67 fe ff       	call   c00007aa <strcmp>
c001a081:	83 c4 10             	add    esp,0x10
c001a084:	85 c0                	test   eax,eax
c001a086:	0f 94 c0             	sete   al
c001a089:	84 c0                	test   al,al
c001a08b:	74 0a                	je     c001a097 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a08d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a095:	eb 58                	jmp    c001a0ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a097:	83 ec 08             	sub    esp,0x8
c001a09a:	68 2c 04 02 c0       	push   0xc002042c
c001a09f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0a3:	e8 02 67 fe ff       	call   c00007aa <strcmp>
c001a0a8:	83 c4 10             	add    esp,0x10
c001a0ab:	85 c0                	test   eax,eax
c001a0ad:	0f 94 c0             	sete   al
c001a0b0:	84 c0                	test   al,al
c001a0b2:	74 0a                	je     c001a0be <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a0b4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a0bc:	eb 31                	jmp    c001a0ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a0be:	83 ec 08             	sub    esp,0x8
c001a0c1:	68 aa 30 02 c0       	push   0xc00230aa
c001a0c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0ca:	e8 db 66 fe ff       	call   c00007aa <strcmp>
c001a0cf:	83 c4 10             	add    esp,0x10
c001a0d2:	85 c0                	test   eax,eax
c001a0d4:	0f 94 c0             	sete   al
c001a0d7:	84 c0                	test   al,al
c001a0d9:	74 0a                	je     c001a0e5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a0db:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a0e3:	eb 0a                	jmp    c001a0ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a0e5:	b8 08 00 00 00       	mov    eax,0x8
c001a0ea:	e9 04 01 00 00       	jmp    c001a1f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a0ef:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a0f6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a0fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0ff:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c001a106:	83 f8 ff             	cmp    eax,0xffffffff
c001a109:	75 34                	jne    c001a13f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a10b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a10f:	88 c2                	mov    dl,al
c001a111:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a116:	01 d0                	add    eax,edx
c001a118:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a11c:	8b 15 00 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a00
c001a122:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a126:	89 14 85 20 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5e0],edx
c001a12d:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a132:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a136:	89 14 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],edx
c001a13d:	eb 17                	jmp    c001a156 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a13f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a143:	88 c2                	mov    dl,al
c001a145:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a149:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c001a150:	01 d0                	add    eax,edx
c001a152:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a156:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a15a:	88 04 24             	mov    BYTE PTR [esp],al
c001a15d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a165:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a16d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a172:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a17a:	83 ec 0c             	sub    esp,0xc
c001a17d:	68 00 20 00 00       	push   0x2000
c001a182:	e8 64 1e ff ff       	call   c000bfeb <malloc>
c001a187:	83 c4 10             	add    esp,0x10
c001a18a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a18e:	68 00 20 00 00       	push   0x2000
c001a193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a197:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a19b:	50                   	push   eax
c001a19c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a1a0:	50                   	push   eax
c001a1a1:	e8 66 cf fe ff       	call   c000710c <f_mkfs>
c001a1a6:	83 c4 10             	add    esp,0x10
c001a1a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1b2:	75 07                	jne    c001a1bb <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a1b4:	b8 00 00 00 00       	mov    eax,0x0
c001a1b9:	eb 38                	jmp    c001a1f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a1bb:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a1c0:	75 17                	jne    c001a1d9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a1c2:	83 ec 0c             	sub    esp,0xc
c001a1c5:	68 dc 30 02 c0       	push   0xc00230dc
c001a1ca:	e8 8a 4f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001a1cf:	83 c4 10             	add    esp,0x10
c001a1d2:	b8 09 00 00 00       	mov    eax,0x9
c001a1d7:	eb 1a                	jmp    c001a1f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a1d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1dd:	83 ec 08             	sub    esp,0x8
c001a1e0:	50                   	push   eax
c001a1e1:	68 b0 30 02 c0       	push   0xc00230b0
c001a1e6:	e8 6e 4f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001a1eb:	83 c4 10             	add    esp,0x10
c001a1ee:	b8 01 00 00 00       	mov    eax,0x1
c001a1f3:	83 c4 2c             	add    esp,0x2c
c001a1f6:	c3                   	ret    
c001a1f7:	90                   	nop

c001a1f8 <FAT::tryMount(LogicalDisk*, int)>:
c001a1f8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a1fe:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a203:	83 f8 14             	cmp    eax,0x14
c001a206:	75 17                	jne    c001a21f <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a208:	83 ec 0c             	sub    esp,0xc
c001a20b:	68 c2 30 02 c0       	push   0xc00230c2
c001a210:	e8 33 b7 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001a215:	83 c4 10             	add    esp,0x10
c001a218:	b0 00                	mov    al,0x0
c001a21a:	e9 d7 01 00 00       	jmp    c001a3f6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a21f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a226:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a22c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a232:	3d 00 02 00 00       	cmp    eax,0x200
c001a237:	74 07                	je     c001a240 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a239:	b0 00                	mov    al,0x0
c001a23b:	e9 b6 01 00 00       	jmp    c001a3f6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a240:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a248:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a24f:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c001a256:	83 f8 ff             	cmp    eax,0xffffffff
c001a259:	74 07                	je     c001a262 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a25b:	b0 01                	mov    al,0x1
c001a25d:	e9 94 01 00 00       	jmp    c001a3f6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a262:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a26c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a274:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a27b:	88 c2                	mov    dl,al
c001a27d:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a282:	01 d0                	add    eax,edx
c001a284:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a28b:	8b 15 00 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a00
c001a291:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a298:	89 14 85 20 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5e0],edx
c001a29f:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a2a4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a2ab:	89 14 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],edx
c001a2b2:	83 ec 0c             	sub    esp,0xc
c001a2b5:	68 54 02 00 00       	push   0x254
c001a2ba:	e8 2c 1d ff ff       	call   c000bfeb <malloc>
c001a2bf:	83 c4 10             	add    esp,0x10
c001a2c2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a2c9:	83 ec 04             	sub    esp,0x4
c001a2cc:	6a 00                	push   0x0
c001a2ce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a2d5:	50                   	push   eax
c001a2d6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a2dd:	e8 19 aa fe ff       	call   c0004cfb <f_mount>
c001a2e2:	83 c4 10             	add    esp,0x10
c001a2e5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a2ec:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a2f4:	74 19                	je     c001a30f <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a2f6:	83 ec 0c             	sub    esp,0xc
c001a2f9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a300:	e8 06 1d ff ff       	call   c000c00b <rfree>
c001a305:	83 c4 10             	add    esp,0x10
c001a308:	b0 00                	mov    al,0x0
c001a30a:	e9 e7 00 00 00       	jmp    c001a3f6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a30f:	83 ec 04             	sub    esp,0x4
c001a312:	68 00 01 00 00       	push   0x100
c001a317:	6a 00                	push   0x0
c001a319:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a320:	50                   	push   eax
c001a321:	e8 94 63 fe ff       	call   c00006ba <memset>
c001a326:	83 c4 10             	add    esp,0x10
c001a329:	83 ec 08             	sub    esp,0x8
c001a32c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a333:	50                   	push   eax
c001a334:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a33b:	50                   	push   eax
c001a33c:	e8 cf 64 fe ff       	call   c0000810 <strcat>
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	83 ec 08             	sub    esp,0x8
c001a347:	68 d0 30 02 c0       	push   0xc00230d0
c001a34c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a353:	50                   	push   eax
c001a354:	e8 b7 64 fe ff       	call   c0000810 <strcat>
c001a359:	83 c4 10             	add    esp,0x10
c001a35c:	83 ec 04             	sub    esp,0x4
c001a35f:	6a 01                	push   0x1
c001a361:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a368:	50                   	push   eax
c001a369:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a36d:	50                   	push   eax
c001a36e:	e8 ea a9 fe ff       	call   c0004d5d <f_open>
c001a373:	83 c4 10             	add    esp,0x10
c001a376:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a37d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a384:	85 c0                	test   eax,eax
c001a386:	74 0a                	je     c001a392 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a388:	78 2d                	js     c001a3b7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a38a:	83 e8 04             	sub    eax,0x4
c001a38d:	83 f8 01             	cmp    eax,0x1
c001a390:	77 25                	ja     c001a3b7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a392:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a39a:	83 ec 0c             	sub    esp,0xc
c001a39d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a3a1:	50                   	push   eax
c001a3a2:	e8 08 b5 fe ff       	call   c00058af <f_close>
c001a3a7:	83 c4 10             	add    esp,0x10
c001a3aa:	90                   	nop
c001a3ab:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a3b3:	74 3a                	je     c001a3ef <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a3b5:	eb 2d                	jmp    c001a3e4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a3b7:	83 ec 0c             	sub    esp,0xc
c001a3ba:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3c1:	e8 45 1c ff ff       	call   c000c00b <rfree>
c001a3c6:	83 c4 10             	add    esp,0x10
c001a3c9:	83 ec 04             	sub    esp,0x4
c001a3cc:	6a 00                	push   0x0
c001a3ce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3d5:	50                   	push   eax
c001a3d6:	6a 00                	push   0x0
c001a3d8:	e8 1e a9 fe ff       	call   c0004cfb <f_mount>
c001a3dd:	83 c4 10             	add    esp,0x10
c001a3e0:	b0 00                	mov    al,0x0
c001a3e2:	eb 12                	jmp    c001a3f6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a3e4:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a3e9:	40                   	inc    eax
c001a3ea:	a3 00 5a 02 c0       	mov    ds:0xc0025a00,eax
c001a3ef:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a3f6:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a3fc:	c3                   	ret    
c001a3fd:	90                   	nop

c001a3fe <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a3fe:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a404:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a40c:	74 0a                	je     c001a418 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a40e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a416:	75 0a                	jne    c001a422 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a418:	b8 04 00 00 00       	mov    eax,0x4
c001a41d:	e9 dd 00 00 00       	jmp    c001a4ff <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a422:	83 ec 08             	sub    esp,0x8
c001a425:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a42c:	50                   	push   eax
c001a42d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a434:	e8 2e ba fe ff       	call   c0005e67 <f_readdir>
c001a439:	83 c4 10             	add    esp,0x10
c001a43c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a443:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a449:	83 ec 0c             	sub    esp,0xc
c001a44c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a453:	83 c0 1a             	add    eax,0x1a
c001a456:	50                   	push   eax
c001a457:	e8 7b 62 fe ff       	call   c00006d7 <strlen>
c001a45c:	83 c4 10             	add    esp,0x10
c001a45f:	ba 00 00 00 00       	mov    edx,0x0
c001a464:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a468:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a46c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a473:	25 ff 00 00 00       	and    eax,0xff
c001a478:	83 e0 10             	and    eax,0x10
c001a47b:	74 07                	je     c001a484 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a47d:	b8 02 00 00 00       	mov    eax,0x2
c001a482:	eb 05                	jmp    c001a489 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a484:	b8 01 00 00 00       	mov    eax,0x1
c001a489:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a48d:	83 ec 08             	sub    esp,0x8
c001a490:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a497:	83 c0 1a             	add    eax,0x1a
c001a49a:	50                   	push   eax
c001a49b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a49f:	83 c0 10             	add    eax,0x10
c001a4a2:	50                   	push   eax
c001a4a3:	e8 b1 62 fe ff       	call   c0000759 <strcpy>
c001a4a8:	83 c4 10             	add    esp,0x10
c001a4ab:	83 ec 04             	sub    esp,0x4
c001a4ae:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a4b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4b9:	50                   	push   eax
c001a4ba:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a4c1:	e8 be 61 fe ff       	call   c0000684 <memcpy>
c001a4c6:	83 c4 10             	add    esp,0x10
c001a4c9:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a4d0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a4d6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a4dd:	84 c0                	test   al,al
c001a4df:	75 07                	jne    c001a4e8 <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a4e1:	b8 07 00 00 00       	mov    eax,0x7
c001a4e6:	eb 17                	jmp    c001a4ff <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a4e8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a4ef:	85 c0                	test   eax,eax
c001a4f1:	75 07                	jne    c001a4fa <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a4f3:	b8 00 00 00 00       	mov    eax,0x0
c001a4f8:	eb 05                	jmp    c001a4ff <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a4fa:	b8 01 00 00 00       	mov    eax,0x1
c001a4ff:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a505:	c3                   	ret    

c001a506 <FAT::read(void*, unsigned long, void*, int*)>:
c001a506:	83 ec 1c             	sub    esp,0x1c
c001a509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a50e:	74 07                	je     c001a517 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a510:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a515:	75 07                	jne    c001a51e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a517:	b8 04 00 00 00       	mov    eax,0x4
c001a51c:	eb 3d                	jmp    c001a55b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a51e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a522:	50                   	push   eax
c001a523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a527:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a52b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a52f:	e8 65 ac fe ff       	call   c0005199 <f_read>
c001a534:	83 c4 10             	add    esp,0x10
c001a537:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a53b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a53f:	89 c2                	mov    edx,eax
c001a541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a545:	89 10                	mov    DWORD PTR [eax],edx
c001a547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a54b:	85 c0                	test   eax,eax
c001a54d:	75 07                	jne    c001a556 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a54f:	b8 00 00 00 00       	mov    eax,0x0
c001a554:	eb 05                	jmp    c001a55b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a556:	b8 01 00 00 00       	mov    eax,0x1
c001a55b:	83 c4 1c             	add    esp,0x1c
c001a55e:	c3                   	ret    
c001a55f:	90                   	nop

c001a560 <FAT::write(void*, unsigned long, void*, int*)>:
c001a560:	83 ec 1c             	sub    esp,0x1c
c001a563:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a568:	74 07                	je     c001a571 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a56a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a56f:	75 07                	jne    c001a578 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a571:	b8 04 00 00 00       	mov    eax,0x4
c001a576:	eb 3d                	jmp    c001a5b5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a578:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a57c:	50                   	push   eax
c001a57d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a585:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a589:	e8 8b ae fe ff       	call   c0005419 <f_write>
c001a58e:	83 c4 10             	add    esp,0x10
c001a591:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a599:	89 c2                	mov    edx,eax
c001a59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a59f:	89 10                	mov    DWORD PTR [eax],edx
c001a5a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5a5:	85 c0                	test   eax,eax
c001a5a7:	75 07                	jne    c001a5b0 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a5a9:	b8 00 00 00 00       	mov    eax,0x0
c001a5ae:	eb 05                	jmp    c001a5b5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a5b0:	b8 01 00 00 00       	mov    eax,0x1
c001a5b5:	83 c4 1c             	add    esp,0x1c
c001a5b8:	c3                   	ret    
c001a5b9:	90                   	nop

c001a5ba <FAT::close(void*)>:
c001a5ba:	83 ec 1c             	sub    esp,0x1c
c001a5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a5c2:	75 07                	jne    c001a5cb <FAT::close(void*)+0x11>
c001a5c4:	b8 04 00 00 00       	mov    eax,0x4
c001a5c9:	eb 36                	jmp    c001a601 <FAT::close(void*)+0x47>
c001a5cb:	83 ec 0c             	sub    esp,0xc
c001a5ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5d2:	e8 d8 b2 fe ff       	call   c00058af <f_close>
c001a5d7:	83 c4 10             	add    esp,0x10
c001a5da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5de:	83 ec 0c             	sub    esp,0xc
c001a5e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5e5:	e8 11 1a ff ff       	call   c000bffb <free>
c001a5ea:	83 c4 10             	add    esp,0x10
c001a5ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5f1:	85 c0                	test   eax,eax
c001a5f3:	75 07                	jne    c001a5fc <FAT::close(void*)+0x42>
c001a5f5:	b8 00 00 00 00       	mov    eax,0x0
c001a5fa:	eb 05                	jmp    c001a601 <FAT::close(void*)+0x47>
c001a5fc:	b8 01 00 00 00       	mov    eax,0x1
c001a601:	83 c4 1c             	add    esp,0x1c
c001a604:	c3                   	ret    
c001a605:	90                   	nop

c001a606 <FAT::closeDir(void*)>:
c001a606:	83 ec 1c             	sub    esp,0x1c
c001a609:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a60e:	75 07                	jne    c001a617 <FAT::closeDir(void*)+0x11>
c001a610:	b8 04 00 00 00       	mov    eax,0x4
c001a615:	eb 36                	jmp    c001a64d <FAT::closeDir(void*)+0x47>
c001a617:	83 ec 0c             	sub    esp,0xc
c001a61a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a61e:	e8 22 b8 fe ff       	call   c0005e45 <f_closedir>
c001a623:	83 c4 10             	add    esp,0x10
c001a626:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a62a:	83 ec 0c             	sub    esp,0xc
c001a62d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a631:	e8 c5 19 ff ff       	call   c000bffb <free>
c001a636:	83 c4 10             	add    esp,0x10
c001a639:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a63d:	85 c0                	test   eax,eax
c001a63f:	75 07                	jne    c001a648 <FAT::closeDir(void*)+0x42>
c001a641:	b8 00 00 00 00       	mov    eax,0x0
c001a646:	eb 05                	jmp    c001a64d <FAT::closeDir(void*)+0x47>
c001a648:	b8 01 00 00 00       	mov    eax,0x1
c001a64d:	83 c4 1c             	add    esp,0x1c
c001a650:	c3                   	ret    
c001a651:	90                   	nop

c001a652 <FAT::seek(void*, unsigned long long)>:
c001a652:	83 ec 2c             	sub    esp,0x2c
c001a655:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a659:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a65d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a661:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a665:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a66a:	75 07                	jne    c001a673 <FAT::seek(void*, unsigned long long)+0x21>
c001a66c:	b8 04 00 00 00       	mov    eax,0x4
c001a671:	eb 2f                	jmp    c001a6a2 <FAT::seek(void*, unsigned long long)+0x50>
c001a673:	83 ec 04             	sub    esp,0x4
c001a676:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a67a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a67e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a682:	e8 57 b2 fe ff       	call   c00058de <f_lseek>
c001a687:	83 c4 10             	add    esp,0x10
c001a68a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a68e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a692:	85 c0                	test   eax,eax
c001a694:	75 07                	jne    c001a69d <FAT::seek(void*, unsigned long long)+0x4b>
c001a696:	b8 00 00 00 00       	mov    eax,0x0
c001a69b:	eb 05                	jmp    c001a6a2 <FAT::seek(void*, unsigned long long)+0x50>
c001a69d:	b8 01 00 00 00       	mov    eax,0x1
c001a6a2:	83 c4 2c             	add    esp,0x2c
c001a6a5:	c3                   	ret    

c001a6a6 <fatWrapperReadDisk>:
c001a6a6:	83 ec 1c             	sub    esp,0x1c
c001a6a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ad:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a6bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6c4:	25 ff 00 00 00       	and    eax,0xff
c001a6c9:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c001a6d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a6d4:	83 ec 0c             	sub    esp,0xc
c001a6d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6db:	52                   	push   edx
c001a6dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6e4:	50                   	push   eax
c001a6e5:	e8 ca 80 ff ff       	call   c00127b4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a6ea:	83 c4 20             	add    esp,0x20
c001a6ed:	83 c4 1c             	add    esp,0x1c
c001a6f0:	c3                   	ret    

c001a6f1 <fatWrapperWriteDisk>:
c001a6f1:	83 ec 1c             	sub    esp,0x1c
c001a6f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a700:	89 04 24             	mov    DWORD PTR [esp],eax
c001a703:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a707:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a70b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a70f:	25 ff 00 00 00       	and    eax,0xff
c001a714:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c001a71b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a71f:	83 ec 0c             	sub    esp,0xc
c001a722:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a726:	52                   	push   edx
c001a727:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a72b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a72f:	50                   	push   eax
c001a730:	e8 eb 80 ff ff       	call   c0012820 <LogicalDisk::write(unsigned long long, int, void*)>
c001a735:	83 c4 20             	add    esp,0x20
c001a738:	83 c4 1c             	add    esp,0x1c
c001a73b:	c3                   	ret    

c001a73c <fatWrapperIoctl>:
c001a73c:	53                   	push   ebx
c001a73d:	83 ec 28             	sub    esp,0x28
c001a740:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a744:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a748:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a74c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a750:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a755:	75 35                	jne    c001a78c <fatWrapperIoctl+0x50>
c001a757:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a75b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a75f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a763:	25 ff 00 00 00       	and    eax,0xff
c001a768:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c001a76f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a775:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a77b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a77f:	66 89 02             	mov    WORD PTR [edx],ax
c001a782:	b8 00 00 00 00       	mov    eax,0x0
c001a787:	e9 bb 00 00 00       	jmp    c001a847 <fatWrapperIoctl+0x10b>
c001a78c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a791:	75 73                	jne    c001a806 <fatWrapperIoctl+0xca>
c001a793:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a797:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a79b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a79f:	25 ff 00 00 00       	and    eax,0xff
c001a7a4:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c001a7ab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a7b1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a7b7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a7bd:	89 c8                	mov    eax,ecx
c001a7bf:	89 da                	mov    edx,ebx
c001a7c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a7c5:	c1 e0 0a             	shl    eax,0xa
c001a7c8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a7cc:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a7d2:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c001a7d9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a7df:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a7e5:	89 cb                	mov    ebx,ecx
c001a7e7:	c1 fb 1f             	sar    ebx,0x1f
c001a7ea:	53                   	push   ebx
c001a7eb:	51                   	push   ecx
c001a7ec:	52                   	push   edx
c001a7ed:	50                   	push   eax
c001a7ee:	e8 d9 4b 00 00       	call   c001f3cc <__udivdi3>
c001a7f3:	83 c4 10             	add    esp,0x10
c001a7f6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a7fa:	89 01                	mov    DWORD PTR [ecx],eax
c001a7fc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a7ff:	b8 00 00 00 00       	mov    eax,0x0
c001a804:	eb 41                	jmp    c001a847 <fatWrapperIoctl+0x10b>
c001a806:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a80b:	75 07                	jne    c001a814 <fatWrapperIoctl+0xd8>
c001a80d:	b8 00 00 00 00       	mov    eax,0x0
c001a812:	eb 33                	jmp    c001a847 <fatWrapperIoctl+0x10b>
c001a814:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a819:	75 19                	jne    c001a834 <fatWrapperIoctl+0xf8>
c001a81b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a81f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a827:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a82d:	b8 00 00 00 00       	mov    eax,0x0
c001a832:	eb 13                	jmp    c001a847 <fatWrapperIoctl+0x10b>
c001a834:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a839:	75 07                	jne    c001a842 <fatWrapperIoctl+0x106>
c001a83b:	b8 00 00 00 00       	mov    eax,0x0
c001a840:	eb 05                	jmp    c001a847 <fatWrapperIoctl+0x10b>
c001a842:	b8 04 00 00 00       	mov    eax,0x4
c001a847:	83 c4 28             	add    esp,0x28
c001a84a:	5b                   	pop    ebx
c001a84b:	c3                   	ret    

c001a84c <FAT::FAT()>:
c001a84c:	83 ec 1c             	sub    esp,0x1c
c001a84f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a853:	83 ec 0c             	sub    esp,0xc
c001a856:	50                   	push   eax
c001a857:	e8 0a 4c ff ff       	call   c000f466 <Filesystem::Filesystem()>
c001a85c:	83 c4 10             	add    esp,0x10
c001a85f:	ba 0c 31 02 c0       	mov    edx,0xc002310c
c001a864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a868:	89 10                	mov    DWORD PTR [eax],edx
c001a86a:	c7 05 00 5a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025a00,0x0
c001a874:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a87c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a881:	7f 15                	jg     c001a898 <FAT::FAT()+0x4c>
c001a883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a887:	c7 04 85 20 5a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda5e0],0xffffffff
c001a892:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a896:	eb e4                	jmp    c001a87c <FAT::FAT()+0x30>
c001a898:	90                   	nop
c001a899:	83 c4 1c             	add    esp,0x1c
c001a89c:	c3                   	ret    
c001a89d:	90                   	nop

c001a89e <FAT::fixFilepath(char*)>:
c001a89e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8a2:	8a 00                	mov    al,BYTE PTR [eax]
c001a8a4:	3c 40                	cmp    al,0x40
c001a8a6:	7e 2c                	jle    c001a8d4 <FAT::fixFilepath(char*)+0x36>
c001a8a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8ac:	8a 00                	mov    al,BYTE PTR [eax]
c001a8ae:	83 e8 41             	sub    eax,0x41
c001a8b1:	88 c2                	mov    dl,al
c001a8b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8b7:	88 10                	mov    BYTE PTR [eax],dl
c001a8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8bd:	8a 00                	mov    al,BYTE PTR [eax]
c001a8bf:	0f be c0             	movsx  eax,al
c001a8c2:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c001a8c9:	83 c0 30             	add    eax,0x30
c001a8cc:	88 c2                	mov    dl,al
c001a8ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8d2:	88 10                	mov    BYTE PTR [eax],dl
c001a8d4:	90                   	nop
c001a8d5:	c3                   	ret    

c001a8d6 <FAT::open(char const*, void**, FileOpenMode)>:
c001a8d6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a8dc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a8e4:	74 0a                	je     c001a8f0 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a8e6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a8ee:	75 0a                	jne    c001a8fa <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a8f0:	b8 04 00 00 00       	mov    eax,0x4
c001a8f5:	e9 00 01 00 00       	jmp    c001a9fa <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a8fa:	83 ec 08             	sub    esp,0x8
c001a8fd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a904:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a908:	50                   	push   eax
c001a909:	e8 4b 5e fe ff       	call   c0000759 <strcpy>
c001a90e:	83 c4 10             	add    esp,0x10
c001a911:	83 ec 08             	sub    esp,0x8
c001a914:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a918:	50                   	push   eax
c001a919:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a920:	e8 79 ff ff ff       	call   c001a89e <FAT::fixFilepath(char*)>
c001a925:	83 c4 10             	add    esp,0x10
c001a928:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a930:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a937:	83 e0 01             	and    eax,0x1
c001a93a:	74 08                	je     c001a944 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a93c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a944:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a94b:	83 e0 04             	and    eax,0x4
c001a94e:	74 10                	je     c001a960 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a950:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a958:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a960:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a967:	83 e0 02             	and    eax,0x2
c001a96a:	74 08                	je     c001a974 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a96c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a974:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a97b:	83 e0 08             	and    eax,0x8
c001a97e:	74 08                	je     c001a988 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a980:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a988:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a98f:	83 e0 10             	and    eax,0x10
c001a992:	74 08                	je     c001a99c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a994:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a99c:	83 ec 0c             	sub    esp,0xc
c001a99f:	68 50 02 00 00       	push   0x250
c001a9a4:	e8 42 16 ff ff       	call   c000bfeb <malloc>
c001a9a9:	83 c4 10             	add    esp,0x10
c001a9ac:	89 c2                	mov    edx,eax
c001a9ae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9b5:	89 10                	mov    DWORD PTR [eax],edx
c001a9b7:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a9be:	31 d2                	xor    edx,edx
c001a9c0:	88 c2                	mov    dl,al
c001a9c2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9cb:	83 ec 04             	sub    esp,0x4
c001a9ce:	52                   	push   edx
c001a9cf:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a9d3:	52                   	push   edx
c001a9d4:	50                   	push   eax
c001a9d5:	e8 83 a3 fe ff       	call   c0004d5d <f_open>
c001a9da:	83 c4 10             	add    esp,0x10
c001a9dd:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a9e4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a9ec:	74 07                	je     c001a9f5 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001a9ee:	b8 01 00 00 00       	mov    eax,0x1
c001a9f3:	eb 05                	jmp    c001a9fa <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a9f5:	b8 00 00 00 00       	mov    eax,0x0
c001a9fa:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa00:	c3                   	ret    
c001aa01:	90                   	nop

c001aa02 <FAT::openDir(char const*, void**)>:
c001aa02:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa08:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa10:	74 0a                	je     c001aa1c <FAT::openDir(char const*, void**)+0x1a>
c001aa12:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa1a:	75 07                	jne    c001aa23 <FAT::openDir(char const*, void**)+0x21>
c001aa1c:	b8 04 00 00 00       	mov    eax,0x4
c001aa21:	eb 7d                	jmp    c001aaa0 <FAT::openDir(char const*, void**)+0x9e>
c001aa23:	83 ec 08             	sub    esp,0x8
c001aa26:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa31:	50                   	push   eax
c001aa32:	e8 22 5d fe ff       	call   c0000759 <strcpy>
c001aa37:	83 c4 10             	add    esp,0x10
c001aa3a:	83 ec 08             	sub    esp,0x8
c001aa3d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa41:	50                   	push   eax
c001aa42:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa49:	e8 50 fe ff ff       	call   c001a89e <FAT::fixFilepath(char*)>
c001aa4e:	83 c4 10             	add    esp,0x10
c001aa51:	83 ec 0c             	sub    esp,0xc
c001aa54:	6a 4c                	push   0x4c
c001aa56:	e8 90 15 ff ff       	call   c000bfeb <malloc>
c001aa5b:	83 c4 10             	add    esp,0x10
c001aa5e:	89 c2                	mov    edx,eax
c001aa60:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa67:	89 10                	mov    DWORD PTR [eax],edx
c001aa69:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa70:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa72:	83 ec 08             	sub    esp,0x8
c001aa75:	8d 54 24 14          	lea    edx,[esp+0x14]
c001aa79:	52                   	push   edx
c001aa7a:	50                   	push   eax
c001aa7b:	e8 c3 b2 fe ff       	call   c0005d43 <f_opendir>
c001aa80:	83 c4 10             	add    esp,0x10
c001aa83:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa8a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001aa92:	74 07                	je     c001aa9b <FAT::openDir(char const*, void**)+0x99>
c001aa94:	b8 01 00 00 00       	mov    eax,0x1
c001aa99:	eb 05                	jmp    c001aaa0 <FAT::openDir(char const*, void**)+0x9e>
c001aa9b:	b8 00 00 00 00       	mov    eax,0x0
c001aaa0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aaa6:	c3                   	ret    
c001aaa7:	90                   	nop

c001aaa8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001aaa8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aaae:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001aab6:	75 0a                	jne    c001aac2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001aab8:	b8 04 00 00 00       	mov    eax,0x4
c001aabd:	e9 cb 00 00 00       	jmp    c001ab8d <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aac2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001aaca:	75 0a                	jne    c001aad6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001aacc:	b8 04 00 00 00       	mov    eax,0x4
c001aad1:	e9 b7 00 00 00       	jmp    c001ab8d <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aad6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001aade:	75 0a                	jne    c001aaea <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001aae0:	b8 04 00 00 00       	mov    eax,0x4
c001aae5:	e9 a3 00 00 00       	jmp    c001ab8d <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aaea:	83 ec 08             	sub    esp,0x8
c001aaed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aaf4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aafb:	50                   	push   eax
c001aafc:	e8 58 5c fe ff       	call   c0000759 <strcpy>
c001ab01:	83 c4 10             	add    esp,0x10
c001ab04:	83 ec 08             	sub    esp,0x8
c001ab07:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ab0e:	50                   	push   eax
c001ab0f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab16:	e8 83 fd ff ff       	call   c001a89e <FAT::fixFilepath(char*)>
c001ab1b:	83 c4 10             	add    esp,0x10
c001ab1e:	83 ec 08             	sub    esp,0x8
c001ab21:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab25:	50                   	push   eax
c001ab26:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ab2d:	50                   	push   eax
c001ab2e:	e8 cf b3 fe ff       	call   c0005f02 <f_stat>
c001ab33:	83 c4 10             	add    esp,0x10
c001ab36:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab3d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab44:	85 c0                	test   eax,eax
c001ab46:	74 07                	je     c001ab4f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ab48:	83 f8 04             	cmp    eax,0x4
c001ab4b:	74 34                	je     c001ab81 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ab4d:	eb 39                	jmp    c001ab88 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ab4f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ab53:	25 ff 00 00 00       	and    eax,0xff
c001ab58:	83 e0 10             	and    eax,0x10
c001ab5b:	0f 95 c2             	setne  dl
c001ab5e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ab65:	88 10                	mov    BYTE PTR [eax],dl
c001ab67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ab6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab6e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ab75:	89 01                	mov    DWORD PTR [ecx],eax
c001ab77:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ab7a:	b8 00 00 00 00       	mov    eax,0x0
c001ab7f:	eb 0c                	jmp    c001ab8d <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab81:	b8 02 00 00 00       	mov    eax,0x2
c001ab86:	eb 05                	jmp    c001ab8d <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab88:	b8 01 00 00 00       	mov    eax,0x1
c001ab8d:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ab93:	c3                   	ret    

c001ab94 <FAT::unlink(char const*)>:
c001ab94:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab9a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aba2:	75 07                	jne    c001abab <FAT::unlink(char const*)+0x17>
c001aba4:	b8 04 00 00 00       	mov    eax,0x4
c001aba9:	eb 5c                	jmp    c001ac07 <FAT::unlink(char const*)+0x73>
c001abab:	83 ec 08             	sub    esp,0x8
c001abae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001abb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abb9:	50                   	push   eax
c001abba:	e8 9a 5b fe ff       	call   c0000759 <strcpy>
c001abbf:	83 c4 10             	add    esp,0x10
c001abc2:	83 ec 08             	sub    esp,0x8
c001abc5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001abc9:	50                   	push   eax
c001abca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001abd1:	e8 c8 fc ff ff       	call   c001a89e <FAT::fixFilepath(char*)>
c001abd6:	83 c4 10             	add    esp,0x10
c001abd9:	83 ec 0c             	sub    esp,0xc
c001abdc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abe0:	50                   	push   eax
c001abe1:	e8 8b b6 fe ff       	call   c0006271 <f_unlink>
c001abe6:	83 c4 10             	add    esp,0x10
c001abe9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001abf0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001abf7:	85 c0                	test   eax,eax
c001abf9:	75 07                	jne    c001ac02 <FAT::unlink(char const*)+0x6e>
c001abfb:	b8 00 00 00 00       	mov    eax,0x0
c001ac00:	eb 05                	jmp    c001ac07 <FAT::unlink(char const*)+0x73>
c001ac02:	b8 01 00 00 00       	mov    eax,0x1
c001ac07:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ac0d:	c3                   	ret    

c001ac0e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac0e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac14:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ac1b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ac22:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ac26:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ac2a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ac32:	75 0a                	jne    c001ac3e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ac34:	b8 04 00 00 00       	mov    eax,0x4
c001ac39:	e9 43 01 00 00       	jmp    c001ad81 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ac3e:	83 ec 08             	sub    esp,0x8
c001ac41:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac48:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac4c:	50                   	push   eax
c001ac4d:	e8 07 5b fe ff       	call   c0000759 <strcpy>
c001ac52:	83 c4 10             	add    esp,0x10
c001ac55:	83 ec 08             	sub    esp,0x8
c001ac58:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ac5c:	50                   	push   eax
c001ac5d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac64:	e8 35 fc ff ff       	call   c001a89e <FAT::fixFilepath(char*)>
c001ac69:	83 c4 10             	add    esp,0x10
c001ac6c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ac74:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ac7c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ac80:	25 ff 00 00 00       	and    eax,0xff
c001ac85:	83 e0 01             	and    eax,0x1
c001ac88:	74 08                	je     c001ac92 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001ac8a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ac92:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ac96:	25 ff 00 00 00       	and    eax,0xff
c001ac9b:	83 e0 02             	and    eax,0x2
c001ac9e:	74 08                	je     c001aca8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001aca0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001aca8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001acac:	25 ff 00 00 00       	and    eax,0xff
c001acb1:	83 e0 04             	and    eax,0x4
c001acb4:	74 08                	je     c001acbe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001acb6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001acbe:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001acc2:	25 ff 00 00 00       	and    eax,0xff
c001acc7:	83 e0 08             	and    eax,0x8
c001acca:	74 08                	je     c001acd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001accc:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001acd4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001acd8:	25 ff 00 00 00       	and    eax,0xff
c001acdd:	83 e0 01             	and    eax,0x1
c001ace0:	74 08                	je     c001acea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001ace2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001acea:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001acee:	25 ff 00 00 00       	and    eax,0xff
c001acf3:	83 e0 02             	and    eax,0x2
c001acf6:	74 08                	je     c001ad00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001acf8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ad00:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad04:	25 ff 00 00 00       	and    eax,0xff
c001ad09:	83 e0 04             	and    eax,0x4
c001ad0c:	74 08                	je     c001ad16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ad0e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ad16:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad1a:	25 ff 00 00 00       	and    eax,0xff
c001ad1f:	83 e0 08             	and    eax,0x8
c001ad22:	74 08                	je     c001ad2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ad24:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ad2c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ad33:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ad3a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ad41:	31 d2                	xor    edx,edx
c001ad43:	88 c2                	mov    dl,al
c001ad45:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ad4c:	25 ff 00 00 00       	and    eax,0xff
c001ad51:	83 ec 04             	sub    esp,0x4
c001ad54:	52                   	push   edx
c001ad55:	50                   	push   eax
c001ad56:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad5a:	50                   	push   eax
c001ad5b:	e8 b1 bb fe ff       	call   c0006911 <f_chmod>
c001ad60:	83 c4 10             	add    esp,0x10
c001ad63:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ad6a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ad71:	85 c0                	test   eax,eax
c001ad73:	75 07                	jne    c001ad7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ad75:	b8 00 00 00 00       	mov    eax,0x0
c001ad7a:	eb 05                	jmp    c001ad81 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad7c:	b8 01 00 00 00       	mov    eax,0x1
c001ad81:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad87:	c3                   	ret    

c001ad88 <FAT::rename(char const*, char const*)>:
c001ad88:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ad8e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ad96:	74 0a                	je     c001ada2 <FAT::rename(char const*, char const*)+0x1a>
c001ad98:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ada0:	75 0a                	jne    c001adac <FAT::rename(char const*, char const*)+0x24>
c001ada2:	b8 04 00 00 00       	mov    eax,0x4
c001ada7:	e9 98 00 00 00       	jmp    c001ae44 <FAT::rename(char const*, char const*)+0xbc>
c001adac:	83 ec 08             	sub    esp,0x8
c001adaf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001adb6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001adbd:	50                   	push   eax
c001adbe:	e8 96 59 fe ff       	call   c0000759 <strcpy>
c001adc3:	83 c4 10             	add    esp,0x10
c001adc6:	83 ec 08             	sub    esp,0x8
c001adc9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001add0:	50                   	push   eax
c001add1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001add8:	e8 c1 fa ff ff       	call   c001a89e <FAT::fixFilepath(char*)>
c001addd:	83 c4 10             	add    esp,0x10
c001ade0:	83 ec 08             	sub    esp,0x8
c001ade3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001adea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001adee:	50                   	push   eax
c001adef:	e8 65 59 fe ff       	call   c0000759 <strcpy>
c001adf4:	83 c4 10             	add    esp,0x10
c001adf7:	83 ec 08             	sub    esp,0x8
c001adfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001adfe:	50                   	push   eax
c001adff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ae06:	e8 93 fa ff ff       	call   c001a89e <FAT::fixFilepath(char*)>
c001ae0b:	83 c4 10             	add    esp,0x10
c001ae0e:	83 ec 08             	sub    esp,0x8
c001ae11:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae15:	50                   	push   eax
c001ae16:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ae1d:	50                   	push   eax
c001ae1e:	e8 fb b7 fe ff       	call   c000661e <f_rename>
c001ae23:	83 c4 10             	add    esp,0x10
c001ae26:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ae2d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ae34:	85 c0                	test   eax,eax
c001ae36:	75 07                	jne    c001ae3f <FAT::rename(char const*, char const*)+0xb7>
c001ae38:	b8 00 00 00 00       	mov    eax,0x0
c001ae3d:	eb 05                	jmp    c001ae44 <FAT::rename(char const*, char const*)+0xbc>
c001ae3f:	b8 01 00 00 00       	mov    eax,0x1
c001ae44:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ae4a:	c3                   	ret    
c001ae4b:	90                   	nop

c001ae4c <FAT::mkdir(char const*)>:
c001ae4c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ae52:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ae5a:	75 07                	jne    c001ae63 <FAT::mkdir(char const*)+0x17>
c001ae5c:	b8 04 00 00 00       	mov    eax,0x4
c001ae61:	eb 5c                	jmp    c001aebf <FAT::mkdir(char const*)+0x73>
c001ae63:	83 ec 08             	sub    esp,0x8
c001ae66:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae71:	50                   	push   eax
c001ae72:	e8 e2 58 fe ff       	call   c0000759 <strcpy>
c001ae77:	83 c4 10             	add    esp,0x10
c001ae7a:	83 ec 08             	sub    esp,0x8
c001ae7d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae81:	50                   	push   eax
c001ae82:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae89:	e8 10 fa ff ff       	call   c001a89e <FAT::fixFilepath(char*)>
c001ae8e:	83 c4 10             	add    esp,0x10
c001ae91:	83 ec 0c             	sub    esp,0xc
c001ae94:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae98:	50                   	push   eax
c001ae99:	e8 54 b5 fe ff       	call   c00063f2 <f_mkdir>
c001ae9e:	83 c4 10             	add    esp,0x10
c001aea1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aea8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aeaf:	85 c0                	test   eax,eax
c001aeb1:	75 07                	jne    c001aeba <FAT::mkdir(char const*)+0x6e>
c001aeb3:	b8 00 00 00 00       	mov    eax,0x0
c001aeb8:	eb 05                	jmp    c001aebf <FAT::mkdir(char const*)+0x73>
c001aeba:	b8 01 00 00 00       	mov    eax,0x1
c001aebf:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aec5:	c3                   	ret    

c001aec6 <FAT::exists(char const*)>:
c001aec6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aecc:	83 ec 08             	sub    esp,0x8
c001aecf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aed6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aeda:	50                   	push   eax
c001aedb:	e8 79 58 fe ff       	call   c0000759 <strcpy>
c001aee0:	83 c4 10             	add    esp,0x10
c001aee3:	83 ec 08             	sub    esp,0x8
c001aee6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aeea:	50                   	push   eax
c001aeeb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aef2:	e8 a7 f9 ff ff       	call   c001a89e <FAT::fixFilepath(char*)>
c001aef7:	83 c4 10             	add    esp,0x10
c001aefa:	83 ec 08             	sub    esp,0x8
c001aefd:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001af04:	50                   	push   eax
c001af05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001af09:	50                   	push   eax
c001af0a:	e8 f3 af fe ff       	call   c0005f02 <f_stat>
c001af0f:	83 c4 10             	add    esp,0x10
c001af12:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001af19:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001af20:	85 c0                	test   eax,eax
c001af22:	75 04                	jne    c001af28 <FAT::exists(char const*)+0x62>
c001af24:	b0 01                	mov    al,0x1
c001af26:	eb 02                	jmp    c001af2a <FAT::exists(char const*)+0x64>
c001af28:	b0 00                	mov    al,0x0
c001af2a:	81 c4 2c 02 00 00    	add    esp,0x22c
c001af30:	c3                   	ret    
c001af31:	90                   	nop

c001af32 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001af32:	b8 08 00 00 00       	mov    eax,0x8
c001af37:	c3                   	ret    

c001af38 <ISO9660::seek(void*, unsigned long long)>:
c001af38:	53                   	push   ebx
c001af39:	b8 04 00 00 00       	mov    eax,0x4
c001af3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af46:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001af4a:	85 d2                	test   edx,edx
c001af4c:	74 17                	je     c001af65 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001af4e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001af51:	89 c8                	mov    eax,ecx
c001af53:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001af56:	b8 01 00 00 00       	mov    eax,0x1
c001af5b:	73 08                	jae    c001af65 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001af5d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001af60:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001af63:	31 c0                	xor    eax,eax
c001af65:	5b                   	pop    ebx
c001af66:	c3                   	ret    
c001af67:	90                   	nop

c001af68 <ISO9660::tell(void*, unsigned long long*)>:
c001af68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af70:	85 d2                	test   edx,edx
c001af72:	74 12                	je     c001af86 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001af74:	85 c0                	test   eax,eax
c001af76:	74 0e                	je     c001af86 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001af78:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af7b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001af7e:	89 10                	mov    DWORD PTR [eax],edx
c001af80:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001af83:	31 c0                	xor    eax,eax
c001af85:	c3                   	ret    
c001af86:	b8 04 00 00 00       	mov    eax,0x4
c001af8b:	c3                   	ret    

c001af8c <ISO9660::getName()>:
c001af8c:	b8 68 31 02 c0       	mov    eax,0xc0023168
c001af91:	c3                   	ret    

c001af92 <ISO9660::stat(void*, unsigned long long*)>:
c001af92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af9a:	85 d2                	test   edx,edx
c001af9c:	74 12                	je     c001afb0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001af9e:	85 c0                	test   eax,eax
c001afa0:	74 0e                	je     c001afb0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001afa2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001afa5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001afa8:	89 10                	mov    DWORD PTR [eax],edx
c001afaa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001afad:	31 c0                	xor    eax,eax
c001afaf:	c3                   	ret    
c001afb0:	b8 04 00 00 00       	mov    eax,0x4
c001afb5:	c3                   	ret    

c001afb6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001afb6:	b8 01 00 00 00       	mov    eax,0x1
c001afbb:	c3                   	ret    

c001afbc <ISO9660::unlink(char const*)>:
c001afbc:	b8 01 00 00 00       	mov    eax,0x1
c001afc1:	c3                   	ret    

c001afc2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001afc2:	b8 01 00 00 00       	mov    eax,0x1
c001afc7:	c3                   	ret    

c001afc8 <ISO9660::rename(char const*, char const*)>:
c001afc8:	b8 01 00 00 00       	mov    eax,0x1
c001afcd:	c3                   	ret    

c001afce <ISO9660::mkdir(char const*)>:
c001afce:	b8 01 00 00 00       	mov    eax,0x1
c001afd3:	c3                   	ret    

c001afd4 <ISO9660::close(void*)>:
c001afd4:	83 ec 0c             	sub    esp,0xc
c001afd7:	b8 04 00 00 00       	mov    eax,0x4
c001afdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afe0:	85 d2                	test   edx,edx
c001afe2:	74 0e                	je     c001aff2 <ISO9660::close(void*)+0x1e>
c001afe4:	83 ec 0c             	sub    esp,0xc
c001afe7:	52                   	push   edx
c001afe8:	e8 0e 10 ff ff       	call   c000bffb <free>
c001afed:	83 c4 10             	add    esp,0x10
c001aff0:	31 c0                	xor    eax,eax
c001aff2:	83 c4 0c             	add    esp,0xc
c001aff5:	c3                   	ret    

c001aff6 <ISO9660::closeDir(void*)>:
c001aff6:	83 ec 0c             	sub    esp,0xc
c001aff9:	b8 04 00 00 00       	mov    eax,0x4
c001affe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b002:	85 d2                	test   edx,edx
c001b004:	74 0e                	je     c001b014 <ISO9660::closeDir(void*)+0x1e>
c001b006:	83 ec 0c             	sub    esp,0xc
c001b009:	52                   	push   edx
c001b00a:	e8 ec 0f ff ff       	call   c000bffb <free>
c001b00f:	83 c4 10             	add    esp,0x10
c001b012:	31 c0                	xor    eax,eax
c001b014:	83 c4 0c             	add    esp,0xc
c001b017:	c3                   	ret    

c001b018 <ISO9660::~ISO9660()>:
c001b018:	83 ec 0c             	sub    esp,0xc
c001b01b:	ba bc 31 02 c0       	mov    edx,0xc00231bc
c001b020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b024:	89 10                	mov    DWORD PTR [eax],edx
c001b026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b02a:	83 ec 0c             	sub    esp,0xc
c001b02d:	50                   	push   eax
c001b02e:	e8 57 44 ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c001b033:	83 c4 10             	add    esp,0x10
c001b036:	90                   	nop
c001b037:	83 c4 0c             	add    esp,0xc
c001b03a:	c3                   	ret    
c001b03b:	90                   	nop

c001b03c <ISO9660::~ISO9660()>:
c001b03c:	83 ec 0c             	sub    esp,0xc
c001b03f:	83 ec 0c             	sub    esp,0xc
c001b042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b046:	e8 cd ff ff ff       	call   c001b018 <ISO9660::~ISO9660()>
c001b04b:	83 c4 10             	add    esp,0x10
c001b04e:	83 ec 08             	sub    esp,0x8
c001b051:	6a 08                	push   0x8
c001b053:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b057:	e8 d7 3f ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001b05c:	83 c4 10             	add    esp,0x10
c001b05f:	83 c4 0c             	add    esp,0xc
c001b062:	c3                   	ret    

c001b063 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b063:	55                   	push   ebp
c001b064:	31 c9                	xor    ecx,ecx
c001b066:	57                   	push   edi
c001b067:	56                   	push   esi
c001b068:	53                   	push   ebx
c001b069:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b06d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b071:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b075:	89 eb                	mov    ebx,ebp
c001b077:	39 ce                	cmp    esi,ecx
c001b079:	7e 17                	jle    c001b092 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b07b:	31 d2                	xor    edx,edx
c001b07d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b081:	7d 13                	jge    c001b096 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b083:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b087:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b08a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b08d:	75 0d                	jne    c001b09c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b08f:	42                   	inc    edx
c001b090:	eb eb                	jmp    c001b07d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b092:	31 c0                	xor    eax,eax
c001b094:	eb 0a                	jmp    c001b0a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b096:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b09a:	eb 04                	jmp    c001b0a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b09c:	41                   	inc    ecx
c001b09d:	43                   	inc    ebx
c001b09e:	eb d7                	jmp    c001b077 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b0a0:	5b                   	pop    ebx
c001b0a1:	5e                   	pop    esi
c001b0a2:	5f                   	pop    edi
c001b0a3:	5d                   	pop    ebp
c001b0a4:	c3                   	ret    

c001b0a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b0a5:	56                   	push   esi
c001b0a6:	53                   	push   ebx
c001b0a7:	52                   	push   edx
c001b0a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0b4:	39 0d 00 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b00,ecx
c001b0ba:	75 08                	jne    c001b0c4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b0bc:	38 05 a8 3f 02 c0    	cmp    BYTE PTR ds:0xc0023fa8,al
c001b0c2:	74 2b                	je     c001b0ef <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b0c4:	83 ec 0c             	sub    esp,0xc
c001b0c7:	31 db                	xor    ebx,ebx
c001b0c9:	a2 a8 3f 02 c0       	mov    ds:0xc0023fa8,al
c001b0ce:	89 0d 00 5b 02 c0    	mov    DWORD PTR ds:0xc0025b00,ecx
c001b0d4:	68 20 5b 02 c0       	push   0xc0025b20
c001b0d9:	6a 01                	push   0x1
c001b0db:	53                   	push   ebx
c001b0dc:	0f be c0             	movsx  eax,al
c001b0df:	51                   	push   ecx
c001b0e0:	ff 34 85 7c 4a 02 c0 	push   DWORD PTR [eax*4-0x3ffdb584]
c001b0e7:	e8 c8 76 ff ff       	call   c00127b4 <LogicalDisk::read(unsigned long long, int, void*)>
c001b0ec:	83 c4 20             	add    esp,0x20
c001b0ef:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b0f7:	c7 44 24 14 20 5b 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025b20
c001b0ff:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b103:	58                   	pop    eax
c001b104:	5b                   	pop    ebx
c001b105:	5e                   	pop    esi
c001b106:	e9 79 55 fe ff       	jmp    c0000684 <memcpy>
c001b10b:	90                   	nop

c001b10c <ISO9660::tryMount(LogicalDisk*, int)>:
c001b10c:	81 ec 10 08 00 00    	sub    esp,0x810
c001b112:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b119:	83 c0 41             	add    eax,0x41
c001b11c:	0f be c0             	movsx  eax,al
c001b11f:	50                   	push   eax
c001b120:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b124:	50                   	push   eax
c001b125:	6a 10                	push   0x10
c001b127:	e8 79 ff ff ff       	call   c001b0a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b12c:	83 c4 10             	add    esp,0x10
c001b12f:	31 c0                	xor    eax,eax
c001b131:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b136:	75 1d                	jne    c001b155 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b138:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b13d:	75 16                	jne    c001b155 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b13f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b144:	75 0f                	jne    c001b155 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b146:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b14b:	75 08                	jne    c001b155 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b14d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b152:	0f 94 c0             	sete   al
c001b155:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b15b:	c3                   	ret    

c001b15c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b15c:	55                   	push   ebp
c001b15d:	57                   	push   edi
c001b15e:	56                   	push   esi
c001b15f:	53                   	push   ebx
c001b160:	81 ec 34 08 00 00    	sub    esp,0x834
c001b166:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b16d:	55                   	push   ebp
c001b16e:	68 83 31 02 c0       	push   0xc0023183
c001b173:	e8 e1 3f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001b178:	83 c4 10             	add    esp,0x10
c001b17b:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b183:	0f 84 06 02 00 00    	je     c001b38f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b189:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b191:	0f 84 f8 01 00 00    	je     c001b38f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b197:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b19e:	b8 01 00 00 00       	mov    eax,0x1
c001b1a3:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b1a7:	0f 85 e7 01 00 00    	jne    c001b394 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b1ad:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b1b0:	31 d2                	xor    edx,edx
c001b1b2:	89 e9                	mov    ecx,ebp
c001b1b4:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b1b7:	01 f1                	add    ecx,esi
c001b1b9:	89 d3                	mov    ebx,edx
c001b1bb:	11 fb                	adc    ebx,edi
c001b1bd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b1c1:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b1c5:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b1cc:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b1cf:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b1d2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b1d6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b1da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b1de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1e2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b1e6:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b1ea:	72 19                	jb     c001b205 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b1ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b1f8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b1fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b1ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b203:	eb 13                	jmp    c001b218 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b205:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b209:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b20d:	29 f0                	sub    eax,esi
c001b20f:	19 fa                	sbb    edx,edi
c001b211:	89 04 24             	mov    DWORD PTR [esp],eax
c001b214:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b218:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b21f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b222:	8b 00                	mov    eax,DWORD PTR [eax]
c001b224:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b228:	c1 e0 0b             	shl    eax,0xb
c001b22b:	53                   	push   ebx
c001b22c:	01 c6                	add    esi,eax
c001b22e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b235:	11 d7                	adc    edi,edx
c001b237:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b23b:	50                   	push   eax
c001b23c:	89 fa                	mov    edx,edi
c001b23e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b242:	50                   	push   eax
c001b243:	89 f0                	mov    eax,esi
c001b245:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b249:	50                   	push   eax
c001b24a:	e8 56 fe ff ff       	call   c001b0a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b24f:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b256:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b25a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b25e:	83 c4 10             	add    esp,0x10
c001b261:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b264:	b8 00 08 00 00       	mov    eax,0x800
c001b269:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b26f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b273:	29 d0                	sub    eax,edx
c001b275:	39 c1                	cmp    ecx,eax
c001b277:	83 db 00             	sbb    ebx,0x0
c001b27a:	7d 19                	jge    c001b295 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b27c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b281:	75 16                	jne    c001b299 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b283:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b28a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b290:	e9 f6 00 00 00       	jmp    c001b38b <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b295:	89 c5                	mov    ebp,eax
c001b297:	eb 03                	jmp    c001b29c <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b299:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b29c:	51                   	push   ecx
c001b29d:	55                   	push   ebp
c001b29e:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b2a2:	50                   	push   eax
c001b2a3:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b2aa:	e8 d5 53 fe ff       	call   c0000684 <memcpy>
c001b2af:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b2b6:	01 e8                	add    eax,ebp
c001b2b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b2c0:	89 e8                	mov    eax,ebp
c001b2c2:	99                   	cdq    
c001b2c3:	01 ee                	add    esi,ebp
c001b2c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b2c9:	11 d7                	adc    edi,edx
c001b2cb:	29 e9                	sub    ecx,ebp
c001b2cd:	19 d3                	sbb    ebx,edx
c001b2cf:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2d3:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2d7:	83 c4 10             	add    esp,0x10
c001b2da:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b2df:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b2e2:	b8 00 00 00 00       	mov    eax,0x0
c001b2e7:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b2eb:	7d 3f                	jge    c001b32c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b2ed:	52                   	push   edx
c001b2ee:	89 fa                	mov    edx,edi
c001b2f0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b2f7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b2fb:	50                   	push   eax
c001b2fc:	89 f0                	mov    eax,esi
c001b2fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b302:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b306:	50                   	push   eax
c001b307:	e8 99 fd ff ff       	call   c001b0a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b30c:	81 c6 00 08 00 00    	add    esi,0x800
c001b312:	83 d7 00             	adc    edi,0x0
c001b315:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b31d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b325:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b32a:	eb ab                	jmp    c001b2d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b32c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b330:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b333:	74 34                	je     c001b369 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b335:	50                   	push   eax
c001b336:	89 fa                	mov    edx,edi
c001b338:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b33f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b343:	50                   	push   eax
c001b344:	89 f0                	mov    eax,esi
c001b346:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b34a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b34e:	55                   	push   ebp
c001b34f:	50                   	push   eax
c001b350:	e8 50 fd ff ff       	call   c001b0a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b355:	83 c4 0c             	add    esp,0xc
c001b358:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b35c:	55                   	push   ebp
c001b35d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b361:	e8 1e 53 fe ff       	call   c0000684 <memcpy>
c001b366:	83 c4 10             	add    esp,0x10
c001b369:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b370:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b374:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b378:	89 38                	mov    DWORD PTR [eax],edi
c001b37a:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b381:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b385:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b388:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b38b:	31 c0                	xor    eax,eax
c001b38d:	eb 05                	jmp    c001b394 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b38f:	b8 04 00 00 00       	mov    eax,0x4
c001b394:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b39a:	5b                   	pop    ebx
c001b39b:	5e                   	pop    esi
c001b39c:	5f                   	pop    edi
c001b39d:	5d                   	pop    ebp
c001b39e:	c3                   	ret    
c001b39f:	90                   	nop

c001b3a0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b3a0:	55                   	push   ebp
c001b3a1:	57                   	push   edi
c001b3a2:	56                   	push   esi
c001b3a3:	53                   	push   ebx
c001b3a4:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b3aa:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b3b1:	85 f6                	test   esi,esi
c001b3b3:	0f 84 62 02 00 00    	je     c001b61b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b3b9:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b3c1:	0f 84 54 02 00 00    	je     c001b61b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b3c7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b3ca:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b3cd:	75 0a                	jne    c001b3d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b3cf:	b8 07 00 00 00       	mov    eax,0x7
c001b3d4:	e9 47 02 00 00       	jmp    c001b620 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b3d9:	50                   	push   eax
c001b3da:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b3de:	50                   	push   eax
c001b3df:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b3e6:	53                   	push   ebx
c001b3e7:	8b 06                	mov    eax,DWORD PTR [esi]
c001b3e9:	c1 e0 0b             	shl    eax,0xb
c001b3ec:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b3ef:	c1 e8 0b             	shr    eax,0xb
c001b3f2:	50                   	push   eax
c001b3f3:	e8 ad fc ff ff       	call   c001b0a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b3f8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b3fb:	83 c4 10             	add    esp,0x10
c001b3fe:	89 c1                	mov    ecx,eax
c001b400:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b403:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b409:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b40c:	84 db                	test   bl,bl
c001b40e:	0f 85 90 00 00 00    	jne    c001b4a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b414:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b41a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b420:	29 c7                	sub    edi,eax
c001b422:	89 fb                	mov    ebx,edi
c001b424:	c1 fb 1f             	sar    ebx,0x1f
c001b427:	01 f8                	add    eax,edi
c001b429:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b430:	11 da                	adc    edx,ebx
c001b432:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b435:	89 04 24             	mov    DWORD PTR [esp],eax
c001b438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b43c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b43f:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b442:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b445:	89 d8                	mov    eax,ebx
c001b447:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b44b:	ba 00 00 00 00       	mov    edx,0x0
c001b450:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b454:	b8 00 00 00 00       	mov    eax,0x0
c001b459:	73 0b                	jae    c001b466 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b45b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b45e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b462:	29 f8                	sub    eax,edi
c001b464:	19 da                	sbb    edx,ebx
c001b466:	89 d3                	mov    ebx,edx
c001b468:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b46b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b46e:	09 c3                	or     ebx,eax
c001b470:	0f 84 59 ff ff ff    	je     c001b3cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b476:	55                   	push   ebp
c001b477:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b47b:	50                   	push   eax
c001b47c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b483:	53                   	push   ebx
c001b484:	8b 06                	mov    eax,DWORD PTR [esi]
c001b486:	c1 e0 0b             	shl    eax,0xb
c001b489:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b48d:	c1 e8 0b             	shr    eax,0xb
c001b490:	50                   	push   eax
c001b491:	e8 0f fc ff ff       	call   c001b0a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b496:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b499:	83 c4 10             	add    esp,0x10
c001b49c:	25 ff 07 00 00       	and    eax,0x7ff
c001b4a1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b4a4:	57                   	push   edi
c001b4a5:	6a 28                	push   0x28
c001b4a7:	6a 00                	push   0x0
c001b4a9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b4ad:	50                   	push   eax
c001b4ae:	e8 07 52 fe ff       	call   c00006ba <memset>
c001b4b3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b4b6:	31 d2                	xor    edx,edx
c001b4b8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b4be:	89 f8                	mov    eax,edi
c001b4c0:	83 c0 21             	add    eax,0x21
c001b4c3:	83 d2 00             	adc    edx,0x0
c001b4c6:	89 c7                	mov    edi,eax
c001b4c8:	89 d5                	mov    ebp,edx
c001b4ca:	83 c4 10             	add    esp,0x10
c001b4cd:	31 c9                	xor    ecx,ecx
c001b4cf:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b4d6:	83 f9 28             	cmp    ecx,0x28
c001b4d9:	0f 94 c2             	sete   dl
c001b4dc:	88 04 24             	mov    BYTE PTR [esp],al
c001b4df:	88 d0                	mov    al,dl
c001b4e1:	ba ff 07 00 00       	mov    edx,0x7ff
c001b4e6:	39 fa                	cmp    edx,edi
c001b4e8:	ba 00 00 00 00       	mov    edx,0x0
c001b4ed:	19 ea                	sbb    edx,ebp
c001b4ef:	0f 92 c2             	setb   dl
c001b4f2:	09 c2                	or     edx,eax
c001b4f4:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b4f8:	0f 94 c0             	sete   al
c001b4fb:	08 d0                	or     al,dl
c001b4fd:	75 16                	jne    c001b515 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b4ff:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b503:	74 10                	je     c001b515 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b505:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b508:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b50c:	41                   	inc    ecx
c001b50d:	83 c7 01             	add    edi,0x1
c001b510:	83 d5 00             	adc    ebp,0x0
c001b513:	eb ba                	jmp    c001b4cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b515:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b51c:	83 ec 0c             	sub    esp,0xc
c001b51f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b523:	57                   	push   edi
c001b524:	e8 ae 51 fe ff       	call   c00006d7 <strlen>
c001b529:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b52d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b530:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b537:	25 ff 07 00 00       	and    eax,0x7ff
c001b53c:	01 c8                	add    eax,ecx
c001b53e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b546:	5a                   	pop    edx
c001b547:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b54e:	59                   	pop    ecx
c001b54f:	0f 95 c0             	setne  al
c001b552:	0f b6 c0             	movzx  eax,al
c001b555:	40                   	inc    eax
c001b556:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b55a:	57                   	push   edi
c001b55b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b55f:	50                   	push   eax
c001b560:	e8 f4 51 fe ff       	call   c0000759 <strcpy>
c001b565:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b569:	83 c4 10             	add    esp,0x10
c001b56c:	84 c0                	test   al,al
c001b56e:	75 21                	jne    c001b591 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b570:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b578:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b580:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b588:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b58f:	eb 28                	jmp    c001b5b9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b591:	fe c8                	dec    al
c001b593:	75 24                	jne    c001b5b9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b595:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b59d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b5a5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b5ad:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b5b4:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b5b9:	50                   	push   eax
c001b5ba:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b5c1:	0f b6 fb             	movzx  edi,bl
c001b5c4:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b5c8:	31 db                	xor    ebx,ebx
c001b5ca:	50                   	push   eax
c001b5cb:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b5d2:	e8 ad 50 fe ff       	call   c0000684 <memcpy>
c001b5d7:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b5de:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b5e4:	89 f9                	mov    ecx,edi
c001b5e6:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b5e9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b5ec:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b5ef:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b5f2:	83 c4 10             	add    esp,0x10
c001b5f5:	39 c7                	cmp    edi,eax
c001b5f7:	89 df                	mov    edi,ebx
c001b5f9:	19 d7                	sbb    edi,edx
c001b5fb:	72 10                	jb     c001b60d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b5fd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b604:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b60b:	eb 0a                	jmp    c001b617 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b60d:	29 c8                	sub    eax,ecx
c001b60f:	19 da                	sbb    edx,ebx
c001b611:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b614:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b617:	31 c0                	xor    eax,eax
c001b619:	eb 05                	jmp    c001b620 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b61b:	b8 04 00 00 00       	mov    eax,0x4
c001b620:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b626:	5b                   	pop    ebx
c001b627:	5e                   	pop    esi
c001b628:	5f                   	pop    edi
c001b629:	5d                   	pop    ebp
c001b62a:	c3                   	ret    

c001b62b <readRoot(unsigned int*, unsigned int*, char)>:
c001b62b:	81 ec 40 08 00 00    	sub    esp,0x840
c001b631:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b639:	50                   	push   eax
c001b63a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b63e:	50                   	push   eax
c001b63f:	6a 10                	push   0x10
c001b641:	e8 5f fa ff ff       	call   c001b0a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b646:	83 c4 0c             	add    esp,0xc
c001b649:	6a 22                	push   0x22
c001b64b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b652:	50                   	push   eax
c001b653:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b657:	50                   	push   eax
c001b658:	e8 27 50 fe ff       	call   c0000684 <memcpy>
c001b65d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b664:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b668:	89 10                	mov    DWORD PTR [eax],edx
c001b66a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b671:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b675:	89 10                	mov    DWORD PTR [eax],edx
c001b677:	b0 01                	mov    al,0x1
c001b679:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b67f:	c3                   	ret    

c001b680 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b680:	55                   	push   ebp
c001b681:	57                   	push   edi
c001b682:	56                   	push   esi
c001b683:	53                   	push   ebx
c001b684:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b68a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b691:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b698:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b69c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b6a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b6a4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b6a8:	75 03                	jne    c001b6ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b6aa:	83 c3 02             	add    ebx,0x2
c001b6ad:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b6b0:	75 03                	jne    c001b6b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b6b2:	43                   	inc    ebx
c001b6b3:	eb f8                	jmp    c001b6ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b6b5:	51                   	push   ecx
c001b6b6:	68 00 01 00 00       	push   0x100
c001b6bb:	6a 00                	push   0x0
c001b6bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b6c1:	50                   	push   eax
c001b6c2:	e8 f3 4f fe ff       	call   c00006ba <memset>
c001b6c7:	83 c4 10             	add    esp,0x10
c001b6ca:	31 d2                	xor    edx,edx
c001b6cc:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b6cf:	84 c0                	test   al,al
c001b6d1:	74 21                	je     c001b6f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b6d3:	3c 2f                	cmp    al,0x2f
c001b6d5:	75 0b                	jne    c001b6e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b6d7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b6db:	bd 01 00 00 00       	mov    ebp,0x1
c001b6e0:	eb 14                	jmp    c001b6f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b6e2:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b6e5:	80 f9 19             	cmp    cl,0x19
c001b6e8:	77 03                	ja     c001b6ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b6ea:	83 e8 20             	sub    eax,0x20
c001b6ed:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b6f1:	42                   	inc    edx
c001b6f2:	eb d8                	jmp    c001b6cc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b6f4:	31 ed                	xor    ebp,ebp
c001b6f6:	83 ec 0c             	sub    esp,0xc
c001b6f9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b700:	e8 e6 08 ff ff       	call   c000bfeb <malloc>
c001b705:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b70c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b712:	89 c6                	mov    esi,eax
c001b714:	c1 ef 0b             	shr    edi,0xb
c001b717:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b71e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b722:	83 c4 10             	add    esp,0x10
c001b725:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b72a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b72e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b735:	74 28                	je     c001b75f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b737:	52                   	push   edx
c001b738:	57                   	push   edi
c001b739:	50                   	push   eax
c001b73a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b73e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b745:	e8 5b f9 ff ff       	call   c001b0a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b74a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b74e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b755:	05 00 08 00 00       	add    eax,0x800
c001b75a:	83 c4 10             	add    esp,0x10
c001b75d:	eb cb                	jmp    c001b72a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b75f:	83 ec 0c             	sub    esp,0xc
c001b762:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b766:	57                   	push   edi
c001b767:	e8 6b 4f fe ff       	call   c00006d7 <strlen>
c001b76c:	50                   	push   eax
c001b76d:	57                   	push   edi
c001b76e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b775:	56                   	push   esi
c001b776:	e8 e8 f8 ff ff       	call   c001b063 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b77b:	83 c4 20             	add    esp,0x20
c001b77e:	85 c0                	test   eax,eax
c001b780:	75 13                	jne    c001b795 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b782:	83 ec 0c             	sub    esp,0xc
c001b785:	56                   	push   esi
c001b786:	e8 70 08 ff ff       	call   c000bffb <free>
c001b78b:	83 c4 10             	add    esp,0x10
c001b78e:	31 c0                	xor    eax,eax
c001b790:	e9 b3 00 00 00       	jmp    c001b848 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b795:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b799:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b79d:	c1 e7 08             	shl    edi,0x8
c001b7a0:	c1 e2 10             	shl    edx,0x10
c001b7a3:	09 d7                	or     edi,edx
c001b7a5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b7a9:	09 d7                	or     edi,edx
c001b7ab:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b7af:	c1 e2 18             	shl    edx,0x18
c001b7b2:	09 d7                	or     edi,edx
c001b7b4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b7b8:	89 d1                	mov    ecx,edx
c001b7ba:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b7be:	c1 e1 08             	shl    ecx,0x8
c001b7c1:	c1 e2 10             	shl    edx,0x10
c001b7c4:	09 ca                	or     edx,ecx
c001b7c6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b7ca:	09 ca                	or     edx,ecx
c001b7cc:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b7d0:	c1 e1 18             	shl    ecx,0x18
c001b7d3:	09 ca                	or     edx,ecx
c001b7d5:	89 e9                	mov    ecx,ebp
c001b7d7:	84 c9                	test   cl,cl
c001b7d9:	74 3c                	je     c001b817 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b7db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b7df:	83 ec 0c             	sub    esp,0xc
c001b7e2:	56                   	push   esi
c001b7e3:	e8 13 08 ff ff       	call   c000bffb <free>
c001b7e8:	83 c4 0c             	add    esp,0xc
c001b7eb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b7f2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b7f7:	50                   	push   eax
c001b7f8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b7ff:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b806:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b80a:	52                   	push   edx
c001b80b:	57                   	push   edi
c001b80c:	53                   	push   ebx
c001b80d:	e8 6e fe ff ff       	call   c001b680 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b812:	83 c4 20             	add    esp,0x20
c001b815:	eb 31                	jmp    c001b848 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b817:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b81e:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b821:	d0 e8                	shr    al,1
c001b823:	83 ec 0c             	sub    esp,0xc
c001b826:	89 3b                	mov    DWORD PTR [ebx],edi
c001b828:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b82f:	83 e0 01             	and    eax,0x1
c001b832:	89 13                	mov    DWORD PTR [ebx],edx
c001b834:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b83b:	89 03                	mov    DWORD PTR [ebx],eax
c001b83d:	56                   	push   esi
c001b83e:	e8 b8 07 ff ff       	call   c000bffb <free>
c001b843:	83 c4 10             	add    esp,0x10
c001b846:	b0 01                	mov    al,0x1
c001b848:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b84e:	5b                   	pop    ebx
c001b84f:	5e                   	pop    esi
c001b850:	5f                   	pop    edi
c001b851:	5d                   	pop    ebp
c001b852:	c3                   	ret    

c001b853 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b853:	55                   	push   ebp
c001b854:	57                   	push   edi
c001b855:	56                   	push   esi
c001b856:	53                   	push   ebx
c001b857:	83 ec 20             	sub    esp,0x20
c001b85a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b85e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b862:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b867:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b86b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b873:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b87b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b881:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b887:	57                   	push   edi
c001b888:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b88c:	50                   	push   eax
c001b88d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b891:	50                   	push   eax
c001b892:	e8 94 fd ff ff       	call   c001b62b <readRoot(unsigned int*, unsigned int*, char)>
c001b897:	5a                   	pop    edx
c001b898:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b89c:	e8 36 4e fe ff       	call   c00006d7 <strlen>
c001b8a1:	83 c4 10             	add    esp,0x10
c001b8a4:	83 f8 03             	cmp    eax,0x3
c001b8a7:	77 17                	ja     c001b8c0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b8a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8ad:	89 03                	mov    DWORD PTR [ebx],eax
c001b8af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8b3:	89 06                	mov    DWORD PTR [esi],eax
c001b8b5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b8bc:	b0 01                	mov    al,0x1
c001b8be:	eb 19                	jmp    c001b8d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b8c0:	50                   	push   eax
c001b8c1:	55                   	push   ebp
c001b8c2:	57                   	push   edi
c001b8c3:	56                   	push   esi
c001b8c4:	53                   	push   ebx
c001b8c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b8c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b8cd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b8d1:	e8 aa fd ff ff       	call   c001b680 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b8d6:	83 c4 20             	add    esp,0x20
c001b8d9:	83 c4 1c             	add    esp,0x1c
c001b8dc:	5b                   	pop    ebx
c001b8dd:	5e                   	pop    esi
c001b8de:	5f                   	pop    edi
c001b8df:	5d                   	pop    ebp
c001b8e0:	c3                   	ret    
c001b8e1:	90                   	nop

c001b8e2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b8e2:	57                   	push   edi
c001b8e3:	56                   	push   esi
c001b8e4:	53                   	push   ebx
c001b8e5:	83 ec 10             	sub    esp,0x10
c001b8e8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b8ec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b8f0:	85 f6                	test   esi,esi
c001b8f2:	74 7b                	je     c001b96f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b8f4:	85 ff                	test   edi,edi
c001b8f6:	74 77                	je     c001b96f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b8f8:	83 ec 0c             	sub    esp,0xc
c001b8fb:	6a 1c                	push   0x1c
c001b8fd:	e8 e9 06 ff ff       	call   c000bfeb <malloc>
c001b902:	89 07                	mov    DWORD PTR [edi],eax
c001b904:	89 c3                	mov    ebx,eax
c001b906:	58                   	pop    eax
c001b907:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b90b:	50                   	push   eax
c001b90c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b90f:	50                   	push   eax
c001b910:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b914:	50                   	push   eax
c001b915:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b919:	50                   	push   eax
c001b91a:	56                   	push   esi
c001b91b:	e8 33 ff ff ff       	call   c001b853 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b920:	83 c4 20             	add    esp,0x20
c001b923:	84 c0                	test   al,al
c001b925:	74 07                	je     c001b92e <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b927:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b92c:	74 0b                	je     c001b939 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b92e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b932:	b8 01 00 00 00       	mov    eax,0x1
c001b937:	eb 3b                	jmp    c001b974 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b939:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b93d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b941:	89 03                	mov    DWORD PTR [ebx],eax
c001b943:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b94a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b94e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b955:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b95c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b95f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b966:	8a 06                	mov    al,BYTE PTR [esi]
c001b968:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b96b:	31 c0                	xor    eax,eax
c001b96d:	eb 05                	jmp    c001b974 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b96f:	b8 04 00 00 00       	mov    eax,0x4
c001b974:	83 c4 10             	add    esp,0x10
c001b977:	5b                   	pop    ebx
c001b978:	5e                   	pop    esi
c001b979:	5f                   	pop    edi
c001b97a:	c3                   	ret    
c001b97b:	90                   	nop

c001b97c <ISO9660::exists(char const*)>:
c001b97c:	83 ec 28             	sub    esp,0x28
c001b97f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b983:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b987:	52                   	push   edx
c001b988:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b98b:	52                   	push   edx
c001b98c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b990:	52                   	push   edx
c001b991:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b995:	52                   	push   edx
c001b996:	50                   	push   eax
c001b997:	e8 b7 fe ff ff       	call   c001b853 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b99c:	83 c4 3c             	add    esp,0x3c
c001b99f:	c3                   	ret    

c001b9a0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b9a0:	56                   	push   esi
c001b9a1:	53                   	push   ebx
c001b9a2:	83 ec 14             	sub    esp,0x14
c001b9a5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b9a9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b9ad:	85 db                	test   ebx,ebx
c001b9af:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9b3:	0f 94 c2             	sete   dl
c001b9b6:	85 f6                	test   esi,esi
c001b9b8:	0f 94 c0             	sete   al
c001b9bb:	08 c2                	or     dl,al
c001b9bd:	75 68                	jne    c001ba27 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b9bf:	85 c9                	test   ecx,ecx
c001b9c1:	74 64                	je     c001ba27 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b9c3:	83 ec 0c             	sub    esp,0xc
c001b9c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9c9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b9cf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b9d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b9da:	50                   	push   eax
c001b9db:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b9de:	50                   	push   eax
c001b9df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b9e3:	50                   	push   eax
c001b9e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b9e8:	50                   	push   eax
c001b9e9:	51                   	push   ecx
c001b9ea:	e8 64 fe ff ff       	call   c001b853 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b9ef:	83 c4 20             	add    esp,0x20
c001b9f2:	ba 01 00 00 00       	mov    edx,0x1
c001b9f7:	84 c0                	test   al,al
c001b9f9:	74 31                	je     c001ba2c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b9fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9ff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba06:	89 03                	mov    DWORD PTR [ebx],eax
c001ba08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba0c:	85 c0                	test   eax,eax
c001ba0e:	ba 00 00 00 00       	mov    edx,0x0
c001ba13:	0f 95 06             	setne  BYTE PTR [esi]
c001ba16:	74 14                	je     c001ba2c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ba18:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ba1e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba25:	eb 05                	jmp    c001ba2c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ba27:	ba 04 00 00 00       	mov    edx,0x4
c001ba2c:	83 c4 14             	add    esp,0x14
c001ba2f:	89 d0                	mov    eax,edx
c001ba31:	5b                   	pop    ebx
c001ba32:	5e                   	pop    esi
c001ba33:	c3                   	ret    

c001ba34 <ISO9660::openDir(char const*, void**)>:
c001ba34:	57                   	push   edi
c001ba35:	56                   	push   esi
c001ba36:	53                   	push   ebx
c001ba37:	83 ec 10             	sub    esp,0x10
c001ba3a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ba3e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba42:	85 f6                	test   esi,esi
c001ba44:	0f 84 95 00 00 00    	je     c001badf <ISO9660::openDir(char const*, void**)+0xab>
c001ba4a:	85 ff                	test   edi,edi
c001ba4c:	0f 84 8d 00 00 00    	je     c001badf <ISO9660::openDir(char const*, void**)+0xab>
c001ba52:	83 ec 0c             	sub    esp,0xc
c001ba55:	6a 1c                	push   0x1c
c001ba57:	e8 8f 05 ff ff       	call   c000bfeb <malloc>
c001ba5c:	89 07                	mov    DWORD PTR [edi],eax
c001ba5e:	89 c3                	mov    ebx,eax
c001ba60:	59                   	pop    ecx
c001ba61:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba65:	50                   	push   eax
c001ba66:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba69:	50                   	push   eax
c001ba6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba6e:	50                   	push   eax
c001ba6f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba73:	50                   	push   eax
c001ba74:	56                   	push   esi
c001ba75:	e8 d9 fd ff ff       	call   c001b853 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba7a:	83 c4 20             	add    esp,0x20
c001ba7d:	84 c0                	test   al,al
c001ba7f:	74 07                	je     c001ba88 <ISO9660::openDir(char const*, void**)+0x54>
c001ba81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba86:	75 21                	jne    c001baa9 <ISO9660::openDir(char const*, void**)+0x75>
c001ba88:	52                   	push   edx
c001ba89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ba8d:	0f b6 c0             	movzx  eax,al
c001ba90:	50                   	push   eax
c001ba91:	68 96 31 02 c0       	push   0xc0023196
c001ba96:	e8 be 36 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ba9b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba9f:	83 c4 10             	add    esp,0x10
c001baa2:	b8 01 00 00 00       	mov    eax,0x1
c001baa7:	eb 3b                	jmp    c001bae4 <ISO9660::openDir(char const*, void**)+0xb0>
c001baa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baad:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bab1:	89 03                	mov    DWORD PTR [ebx],eax
c001bab3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001baba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001babe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bac5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bacc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bacf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bad6:	8a 06                	mov    al,BYTE PTR [esi]
c001bad8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001badb:	31 c0                	xor    eax,eax
c001badd:	eb 05                	jmp    c001bae4 <ISO9660::openDir(char const*, void**)+0xb0>
c001badf:	b8 04 00 00 00       	mov    eax,0x4
c001bae4:	83 c4 10             	add    esp,0x10
c001bae7:	5b                   	pop    ebx
c001bae8:	5e                   	pop    esi
c001bae9:	5f                   	pop    edi
c001baea:	c3                   	ret    
c001baeb:	90                   	nop

c001baec <ISO9660::ISO9660()>:
c001baec:	83 ec 0c             	sub    esp,0xc
c001baef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf3:	83 ec 0c             	sub    esp,0xc
c001baf6:	50                   	push   eax
c001baf7:	e8 6a 39 ff ff       	call   c000f466 <Filesystem::Filesystem()>
c001bafc:	83 c4 10             	add    esp,0x10
c001baff:	ba bc 31 02 c0       	mov    edx,0xc00231bc
c001bb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb08:	89 10                	mov    DWORD PTR [eax],edx
c001bb0a:	90                   	nop
c001bb0b:	83 c4 0c             	add    esp,0xc
c001bb0e:	c3                   	ret    
c001bb0f:	90                   	nop

c001bb10 <SoundChannel::~SoundChannel()>:
c001bb10:	83 ec 0c             	sub    esp,0xc
c001bb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bb1a:	83 ec 0c             	sub    esp,0xc
c001bb1d:	50                   	push   eax
c001bb1e:	e8 d8 04 ff ff       	call   c000bffb <free>
c001bb23:	83 c4 10             	add    esp,0x10
c001bb26:	90                   	nop
c001bb27:	83 c4 0c             	add    esp,0xc
c001bb2a:	c3                   	ret    
c001bb2b:	90                   	nop

c001bb2c <SoundChannel::setSpeed(float)>:
c001bb2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb30:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bb34:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bb37:	c3                   	ret    

c001bb38 <SoundChannel::getSpeed()>:
c001bb38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb3c:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bb3f:	c3                   	ret    

c001bb40 <SoundChannel::setVolume(int)>:
c001bb40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb44:	83 f8 64             	cmp    eax,0x64
c001bb47:	7e 05                	jle    c001bb4e <SoundChannel::setVolume(int)+0xe>
c001bb49:	b8 64 00 00 00       	mov    eax,0x64
c001bb4e:	85 c0                	test   eax,eax
c001bb50:	79 02                	jns    c001bb54 <SoundChannel::setVolume(int)+0x14>
c001bb52:	31 c0                	xor    eax,eax
c001bb54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb58:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bb5b:	c3                   	ret    

c001bb5c <SoundChannel::getVolume()>:
c001bb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb60:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bb63:	c3                   	ret    

c001bb64 <SoundChannel::pause()>:
c001bb64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb68:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bb6c:	c3                   	ret    
c001bb6d:	90                   	nop

c001bb6e <SoundChannel::SoundChannel(int, int, int, int)>:
c001bb6e:	83 ec 1c             	sub    esp,0x1c
c001bb71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bb75:	e8 ea ff ff ff       	call   c001bb64 <SoundChannel::pause()>
c001bb7a:	83 c4 04             	add    esp,0x4
c001bb7d:	6a 50                	push   0x50
c001bb7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb83:	e8 b8 ff ff ff       	call   c001bb40 <SoundChannel::setVolume(int)>
c001bb88:	83 c4 08             	add    esp,0x8
c001bb8b:	d9 e8                	fld1   
c001bb8d:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bb91:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bb94:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb98:	e8 8f ff ff ff       	call   c001bb2c <SoundChannel::setSpeed(float)>
c001bb9d:	83 c4 08             	add    esp,0x8
c001bba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bba4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bba8:	89 10                	mov    DWORD PTR [eax],edx
c001bbaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bbb2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bbb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbb9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bbbd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bbc0:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bbc5:	75 26                	jne    c001bbed <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bbc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbcb:	8b 10                	mov    edx,DWORD PTR [eax]
c001bbcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bbd4:	0f af c2             	imul   eax,edx
c001bbd7:	89 c2                	mov    edx,eax
c001bbd9:	c1 fa 1f             	sar    edx,0x1f
c001bbdc:	83 e2 03             	and    edx,0x3
c001bbdf:	01 d0                	add    eax,edx
c001bbe1:	c1 f8 02             	sar    eax,0x2
c001bbe4:	05 a0 0f 00 00       	add    eax,0xfa0
c001bbe9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbf1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bbf5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bbf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbfc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bc03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc07:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bc0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc12:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bc15:	c1 e0 02             	shl    eax,0x2
c001bc18:	83 ec 0c             	sub    esp,0xc
c001bc1b:	50                   	push   eax
c001bc1c:	e8 ca 03 ff ff       	call   c000bfeb <malloc>
c001bc21:	83 c4 10             	add    esp,0x10
c001bc24:	89 c2                	mov    edx,eax
c001bc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc2a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bc2d:	83 ec 04             	sub    esp,0x4
c001bc30:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bc34:	50                   	push   eax
c001bc35:	6a 01                	push   0x1
c001bc37:	6a 04                	push   0x4
c001bc39:	e8 a4 cc fe ff       	call   c00088e2 <src_new>
c001bc3e:	83 c4 10             	add    esp,0x10
c001bc41:	89 c2                	mov    edx,eax
c001bc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc47:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bc4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc4e:	85 c0                	test   eax,eax
c001bc50:	74 10                	je     c001bc62 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bc52:	83 ec 0c             	sub    esp,0xc
c001bc55:	68 18 32 02 c0       	push   0xc0023218
c001bc5a:	e8 e9 9c ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001bc5f:	83 c4 10             	add    esp,0x10
c001bc62:	90                   	nop
c001bc63:	83 c4 1c             	add    esp,0x1c
c001bc66:	c3                   	ret    
c001bc67:	90                   	nop

c001bc68 <SoundChannel::play()>:
c001bc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc6c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bc70:	c3                   	ret    
c001bc71:	90                   	nop

c001bc72 <SoundChannel::paused()>:
c001bc72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc76:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bc79:	c3                   	ret    

c001bc7a <SoundChannel::getSampleRate()>:
c001bc7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc80:	c3                   	ret    
c001bc81:	90                   	nop

c001bc82 <SoundChannel::getBits()>:
c001bc82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc89:	c3                   	ret    

c001bc8a <SoundChannel::getBufferUsed()>:
c001bc8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc8e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bc91:	c3                   	ret    

c001bc92 <SoundChannel::getBufferSize()>:
c001bc92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc96:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bc99:	c3                   	ret    

c001bc9a <SoundChannel::unbuffer(float*, int, int)>:
c001bc9a:	53                   	push   ebx
c001bc9b:	83 ec 40             	sub    esp,0x40
c001bc9e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bca2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bcaa:	db 03                	fild   DWORD PTR [ebx]
c001bcac:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bcb0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bcb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bcb7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bcba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bcbe:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bcc2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bcc6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bcca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bcd2:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bcd5:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bcd9:	50                   	push   eax
c001bcda:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bcdd:	e8 ba c8 fe ff       	call   c000859c <src_process>
c001bce2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bce6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bce9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bcec:	83 c4 0c             	add    esp,0xc
c001bcef:	29 d0                	sub    eax,edx
c001bcf1:	c1 e0 02             	shl    eax,0x2
c001bcf4:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bcf7:	50                   	push   eax
c001bcf8:	8d 04 91             	lea    eax,[ecx+edx*4]
c001bcfb:	50                   	push   eax
c001bcfc:	51                   	push   ecx
c001bcfd:	e8 4a 49 fe ff       	call   c000064c <memmove>
c001bd02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd06:	83 c4 48             	add    esp,0x48
c001bd09:	5b                   	pop    ebx
c001bd0a:	c3                   	ret    
c001bd0b:	90                   	nop

c001bd0c <SoundChannel::buffer8(unsigned char*, int)>:
c001bd0c:	53                   	push   ebx
c001bd0d:	31 c0                	xor    eax,eax
c001bd0f:	83 ec 08             	sub    esp,0x8
c001bd12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd16:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001bd19:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001bd1c:	74 35                	je     c001bd53 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bd1e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001bd22:	7d 2f                	jge    c001bd53 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bd24:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bd28:	d9 05 34 32 02 c0    	fld    DWORD PTR ds:0xc0023234
c001bd2e:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001bd32:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001bd37:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001bd3a:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001bd3e:	40                   	inc    eax
c001bd3f:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bd42:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001bd45:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001bd48:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001bd4b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bd4e:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001bd51:	eb c9                	jmp    c001bd1c <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001bd53:	83 c4 08             	add    esp,0x8
c001bd56:	5b                   	pop    ebx
c001bd57:	c3                   	ret    

c001bd58 <SoundDevice::SoundDevice(char const*)>:
c001bd58:	83 ec 1c             	sub    esp,0x1c
c001bd5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd5f:	83 ec 08             	sub    esp,0x8
c001bd62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd66:	50                   	push   eax
c001bd67:	e8 f2 49 ff ff       	call   c001075e <Device::Device(char const*)>
c001bd6c:	83 c4 10             	add    esp,0x10
c001bd6f:	ba 40 32 02 c0       	mov    edx,0xc0023240
c001bd74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd78:	89 10                	mov    DWORD PTR [eax],edx
c001bd7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd7e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bd88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd8c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bd96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd9e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bda3:	7f 19                	jg     c001bdbe <SoundDevice::SoundDevice(char const*)+0x66>
c001bda5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bda9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bdad:	83 c2 54             	add    edx,0x54
c001bdb0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bdb8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bdbc:	eb e0                	jmp    c001bd9e <SoundDevice::SoundDevice(char const*)+0x46>
c001bdbe:	90                   	nop
c001bdbf:	83 c4 1c             	add    esp,0x1c
c001bdc2:	c3                   	ret    
c001bdc3:	90                   	nop

c001bdc4 <SoundDevice::~SoundDevice()>:
c001bdc4:	53                   	push   ebx
c001bdc5:	83 ec 18             	sub    esp,0x18
c001bdc8:	ba 40 32 02 c0       	mov    edx,0xc0023240
c001bdcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdd1:	89 10                	mov    DWORD PTR [eax],edx
c001bdd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bddb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bde0:	7f 46                	jg     c001be28 <SoundDevice::~SoundDevice()+0x64>
c001bde2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bde6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bdea:	83 c2 54             	add    edx,0x54
c001bded:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bdf1:	85 c0                	test   eax,eax
c001bdf3:	74 2d                	je     c001be22 <SoundDevice::~SoundDevice()+0x5e>
c001bdf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bdfd:	83 c2 54             	add    edx,0x54
c001be00:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001be04:	85 db                	test   ebx,ebx
c001be06:	74 1a                	je     c001be22 <SoundDevice::~SoundDevice()+0x5e>
c001be08:	83 ec 0c             	sub    esp,0xc
c001be0b:	53                   	push   ebx
c001be0c:	e8 ff fc ff ff       	call   c001bb10 <SoundChannel::~SoundChannel()>
c001be11:	83 c4 10             	add    esp,0x10
c001be14:	83 ec 08             	sub    esp,0x8
c001be17:	6a 2c                	push   0x2c
c001be19:	53                   	push   ebx
c001be1a:	e8 14 32 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001be1f:	83 c4 10             	add    esp,0x10
c001be22:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001be26:	eb b3                	jmp    c001bddb <SoundDevice::~SoundDevice()+0x17>
c001be28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be2c:	83 ec 0c             	sub    esp,0xc
c001be2f:	50                   	push   eax
c001be30:	e8 df 45 ff ff       	call   c0010414 <Device::~Device()>
c001be35:	83 c4 10             	add    esp,0x10
c001be38:	90                   	nop
c001be39:	83 c4 18             	add    esp,0x18
c001be3c:	5b                   	pop    ebx
c001be3d:	c3                   	ret    

c001be3e <SoundDevice::~SoundDevice()>:
c001be3e:	83 ec 0c             	sub    esp,0xc
c001be41:	83 ec 0c             	sub    esp,0xc
c001be44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be48:	e8 77 ff ff ff       	call   c001bdc4 <SoundDevice::~SoundDevice()>
c001be4d:	83 c4 10             	add    esp,0x10
c001be50:	83 ec 08             	sub    esp,0x8
c001be53:	68 e4 01 00 00       	push   0x1e4
c001be58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be5c:	e8 d2 31 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001be61:	83 c4 10             	add    esp,0x10
c001be64:	83 c4 0c             	add    esp,0xc
c001be67:	c3                   	ret    

c001be68 <SoundDevice::getFreeChannelNum()>:
c001be68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be6c:	31 c0                	xor    eax,eax
c001be6e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001be76:	74 09                	je     c001be81 <SoundDevice::getFreeChannelNum()+0x19>
c001be78:	40                   	inc    eax
c001be79:	83 f8 20             	cmp    eax,0x20
c001be7c:	75 f0                	jne    c001be6e <SoundDevice::getFreeChannelNum()+0x6>
c001be7e:	83 c8 ff             	or     eax,0xffffffff
c001be81:	c3                   	ret    

c001be82 <SoundDevice::addChannel(SoundChannel*)>:
c001be82:	56                   	push   esi
c001be83:	53                   	push   ebx
c001be84:	51                   	push   ecx
c001be85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001be8d:	53                   	push   ebx
c001be8e:	e8 d5 ff ff ff       	call   c001be68 <SoundDevice::getFreeChannelNum()>
c001be93:	5a                   	pop    edx
c001be94:	83 f8 ff             	cmp    eax,0xffffffff
c001be97:	74 51                	je     c001beea <SoundDevice::addChannel(SoundChannel*)+0x68>
c001be99:	85 f6                	test   esi,esi
c001be9b:	74 4d                	je     c001beea <SoundDevice::addChannel(SoundChannel*)+0x68>
c001be9d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bea4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001beab:	75 30                	jne    c001bedd <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bead:	83 ec 0c             	sub    esp,0xc
c001beb0:	56                   	push   esi
c001beb1:	e8 c4 fd ff ff       	call   c001bc7a <SoundChannel::getSampleRate()>
c001beb6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bebc:	89 34 24             	mov    DWORD PTR [esp],esi
c001bebf:	e8 be fd ff ff       	call   c001bc82 <SoundChannel::getBits()>
c001bec4:	83 c4 0c             	add    esp,0xc
c001bec7:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001becd:	8b 13                	mov    edx,DWORD PTR [ebx]
c001becf:	50                   	push   eax
c001bed0:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bed6:	53                   	push   ebx
c001bed7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001beda:	83 c4 10             	add    esp,0x10
c001bedd:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bee3:	b8 01 00 00 00       	mov    eax,0x1
c001bee8:	eb 03                	jmp    c001beed <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001beea:	83 c8 ff             	or     eax,0xffffffff
c001beed:	5a                   	pop    edx
c001beee:	5b                   	pop    ebx
c001beef:	5e                   	pop    esi
c001bef0:	c3                   	ret    
c001bef1:	90                   	nop

c001bef2 <SoundDevice::removeChannel(int)>:
c001bef2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001befa:	83 fa 1f             	cmp    edx,0x1f
c001befd:	77 23                	ja     c001bf22 <SoundDevice::removeChannel(int)+0x30>
c001beff:	8d 14 90             	lea    edx,[eax+edx*4]
c001bf02:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001bf09:	74 17                	je     c001bf22 <SoundDevice::removeChannel(int)+0x30>
c001bf0b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001bf15:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001bf1b:	75 05                	jne    c001bf22 <SoundDevice::removeChannel(int)+0x30>
c001bf1d:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf1f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001bf22:	c3                   	ret    
c001bf23:	90                   	nop

c001bf24 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001bf24:	56                   	push   esi
c001bf25:	53                   	push   ebx
c001bf26:	31 db                	xor    ebx,ebx
c001bf28:	83 ec 14             	sub    esp,0x14
c001bf2b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bf2f:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001bf33:	7d 55                	jge    c001bf8a <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001bf35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf39:	d9 e8                	fld1   
c001bf3b:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001bf3e:	d8 0d 70 32 02 c0    	fmul   DWORD PTR ds:0xc0023270
c001bf44:	d8 0d 74 32 02 c0    	fmul   DWORD PTR ds:0xc0023274
c001bf4a:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001bf4e:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bf52:	d8 15 78 32 02 c0    	fcom   DWORD PTR ds:0xc0023278
c001bf58:	df e0                	fnstsw ax
c001bf5a:	9e                   	sahf   
c001bf5b:	72 08                	jb     c001bf65 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001bf5d:	dd d8                	fstp   st(0)
c001bf5f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001bf63:	eb 22                	jmp    c001bf87 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bf65:	d9 ee                	fldz   
c001bf67:	d8 d9                	fcomp  st(1)
c001bf69:	df e0                	fnstsw ax
c001bf6b:	9e                   	sahf   
c001bf6c:	72 08                	jb     c001bf76 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001bf6e:	dd d8                	fstp   st(0)
c001bf70:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001bf74:	eb 11                	jmp    c001bf87 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bf76:	83 ec 10             	sub    esp,0x10
c001bf79:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bf7c:	e8 9b 36 00 00       	call   c001f61c <lrintf>
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001bf87:	43                   	inc    ebx
c001bf88:	eb a5                	jmp    c001bf2f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001bf8a:	83 c4 14             	add    esp,0x14
c001bf8d:	5b                   	pop    ebx
c001bf8e:	5e                   	pop    esi
c001bf8f:	c3                   	ret    

c001bf90 <SoundDevice::getAudio(int, float*, float*)>:
c001bf90:	55                   	push   ebp
c001bf91:	57                   	push   edi
c001bf92:	56                   	push   esi
c001bf93:	53                   	push   ebx
c001bf94:	31 db                	xor    ebx,ebx
c001bf96:	83 ec 20             	sub    esp,0x20
c001bf99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf9d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bfa1:	c1 e0 02             	shl    eax,0x2
c001bfa4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bfa8:	50                   	push   eax
c001bfa9:	6a 00                	push   0x0
c001bfab:	55                   	push   ebp
c001bfac:	e8 09 47 fe ff       	call   c00006ba <memset>
c001bfb1:	83 c4 10             	add    esp,0x10
c001bfb4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bfb8:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001bfbf:	85 c0                	test   eax,eax
c001bfc1:	0f 84 8c 00 00 00    	je     c001c053 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bfc7:	83 ec 0c             	sub    esp,0xc
c001bfca:	50                   	push   eax
c001bfcb:	e8 a2 fc ff ff       	call   c001bc72 <SoundChannel::paused()>
c001bfd0:	83 c4 10             	add    esp,0x10
c001bfd3:	84 c0                	test   al,al
c001bfd5:	75 7c                	jne    c001c053 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bfd7:	83 ec 0c             	sub    esp,0xc
c001bfda:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bfe1:	e8 76 fb ff ff       	call   c001bb5c <SoundChannel::getVolume()>
c001bfe6:	83 c4 10             	add    esp,0x10
c001bfe9:	85 c0                	test   eax,eax
c001bfeb:	74 66                	je     c001c053 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bfed:	83 ec 0c             	sub    esp,0xc
c001bff0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bff7:	e8 60 fb ff ff       	call   c001bb5c <SoundChannel::getVolume()>
c001bffc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c000:	d9 05 7c 32 02 c0    	fld    DWORD PTR ds:0xc002327c
c001c006:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c00a:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c00e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c012:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c018:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c01c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c023:	e8 72 fc ff ff       	call   c001bc9a <SoundChannel::unbuffer(float*, int, int)>
c001c028:	83 c4 20             	add    esp,0x20
c001c02b:	31 d2                	xor    edx,edx
c001c02d:	39 c2                	cmp    edx,eax
c001c02f:	7d 1c                	jge    c001c04d <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c031:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c035:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c039:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c03c:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c042:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c046:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c04a:	42                   	inc    edx
c001c04b:	eb e0                	jmp    c001c02d <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c04d:	39 c7                	cmp    edi,eax
c001c04f:	7e 02                	jle    c001c053 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c051:	89 c7                	mov    edi,eax
c001c053:	43                   	inc    ebx
c001c054:	83 fb 20             	cmp    ebx,0x20
c001c057:	0f 85 5b ff ff ff    	jne    c001bfb8 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c05d:	83 c4 1c             	add    esp,0x1c
c001c060:	89 f8                	mov    eax,edi
c001c062:	5b                   	pop    ebx
c001c063:	5e                   	pop    esi
c001c064:	5f                   	pop    edi
c001c065:	5d                   	pop    ebp
c001c066:	c3                   	ret    
c001c067:	90                   	nop

c001c068 <PCI::open(int, int, void*)>:
c001c068:	83 ec 18             	sub    esp,0x18
c001c06b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c06f:	8b 10                	mov    edx,DWORD PTR [eax]
c001c071:	50                   	push   eax
c001c072:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c075:	31 c0                	xor    eax,eax
c001c077:	83 c4 1c             	add    esp,0x1c
c001c07a:	c3                   	ret    
c001c07b:	90                   	nop

c001c07c <PCI::close(int, int, void*)>:
c001c07c:	31 c0                	xor    eax,eax
c001c07e:	c3                   	ret    
c001c07f:	90                   	nop

c001c080 <PCI::PCI()>:
c001c080:	83 ec 0c             	sub    esp,0xc
c001c083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c087:	83 ec 08             	sub    esp,0x8
c001c08a:	68 80 32 02 c0       	push   0xc0023280
c001c08f:	50                   	push   eax
c001c090:	e8 53 3d ff ff       	call   c000fde8 <Bus::Bus(char const*)>
c001c095:	83 c4 10             	add    esp,0x10
c001c098:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001c09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a1:	89 10                	mov    DWORD PTR [eax],edx
c001c0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0ad:	0f b6 d0             	movzx  edx,al
c001c0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b4:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0c5:	0f b6 d0             	movzx  edx,al
c001c0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0cc:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0db:	8d 50 01             	lea    edx,[eax+0x1]
c001c0de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0e2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c0e8:	0f b6 d0             	movzx  edx,al
c001c0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ef:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c0f3:	83 c9 c0             	or     ecx,0xffffffc0
c001c0f6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c0fa:	90                   	nop
c001c0fb:	83 c4 0c             	add    esp,0xc
c001c0fe:	c3                   	ret    
c001c0ff:	90                   	nop

c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c100:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c104:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c109:	89 ca                	mov    edx,ecx
c001c10b:	c1 e0 10             	shl    eax,0x10
c001c10e:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c114:	09 d0                	or     eax,edx
c001c116:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c11b:	c1 e2 08             	shl    edx,0x8
c001c11e:	09 d0                	or     eax,edx
c001c120:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c125:	c1 e2 0b             	shl    edx,0xb
c001c128:	09 d0                	or     eax,edx
c001c12a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c12f:	0d 00 00 00 80       	or     eax,0x80000000
c001c134:	ef                   	out    dx,eax
c001c135:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c13a:	ed                   	in     eax,dx
c001c13b:	83 e1 02             	and    ecx,0x2
c001c13e:	0f b6 c9             	movzx  ecx,cl
c001c141:	c1 e1 03             	shl    ecx,0x3
c001c144:	d3 e8                	shr    eax,cl
c001c146:	c3                   	ret    
c001c147:	90                   	nop

c001c148 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c148:	6a 00                	push   0x0
c001c14a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c14f:	50                   	push   eax
c001c150:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c155:	50                   	push   eax
c001c156:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c15b:	50                   	push   eax
c001c15c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c160:	e8 9b ff ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c165:	83 c4 14             	add    esp,0x14
c001c168:	c3                   	ret    
c001c169:	90                   	nop

c001c16a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c16a:	6a 0e                	push   0xe
c001c16c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c171:	50                   	push   eax
c001c172:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c177:	50                   	push   eax
c001c178:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c17d:	50                   	push   eax
c001c17e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c182:	e8 79 ff ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c187:	83 c4 14             	add    esp,0x14
c001c18a:	0f b6 c0             	movzx  eax,al
c001c18d:	c3                   	ret    

c001c18e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c18e:	55                   	push   ebp
c001c18f:	57                   	push   edi
c001c190:	56                   	push   esi
c001c191:	53                   	push   ebx
c001c192:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c197:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c19c:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c1a1:	6a 0a                	push   0xa
c001c1a3:	56                   	push   esi
c001c1a4:	55                   	push   ebp
c001c1a5:	57                   	push   edi
c001c1a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c1aa:	e8 51 ff ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1af:	6a 0a                	push   0xa
c001c1b1:	89 c3                	mov    ebx,eax
c001c1b3:	56                   	push   esi
c001c1b4:	0f b6 db             	movzx  ebx,bl
c001c1b7:	55                   	push   ebp
c001c1b8:	57                   	push   edi
c001c1b9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c1bd:	e8 3e ff ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1c2:	83 c4 28             	add    esp,0x28
c001c1c5:	25 00 ff 00 00       	and    eax,0xff00
c001c1ca:	09 d8                	or     eax,ebx
c001c1cc:	5b                   	pop    ebx
c001c1cd:	5e                   	pop    esi
c001c1ce:	5f                   	pop    edi
c001c1cf:	5d                   	pop    ebp
c001c1d0:	c3                   	ret    
c001c1d1:	90                   	nop

c001c1d2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c1d2:	6a 08                	push   0x8
c001c1d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1d9:	50                   	push   eax
c001c1da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1df:	50                   	push   eax
c001c1e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1e5:	50                   	push   eax
c001c1e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1ea:	e8 11 ff ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1ef:	83 c4 14             	add    esp,0x14
c001c1f2:	0f b6 c4             	movzx  eax,ah
c001c1f5:	c3                   	ret    

c001c1f6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c1f6:	6a 08                	push   0x8
c001c1f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1fd:	50                   	push   eax
c001c1fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c203:	50                   	push   eax
c001c204:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c209:	50                   	push   eax
c001c20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c20e:	e8 ed fe ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c213:	83 c4 14             	add    esp,0x14
c001c216:	c3                   	ret    
c001c217:	90                   	nop

c001c218 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c218:	6a 3c                	push   0x3c
c001c21a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c21f:	50                   	push   eax
c001c220:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c225:	50                   	push   eax
c001c226:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c22b:	50                   	push   eax
c001c22c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c230:	e8 cb fe ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c235:	83 c4 14             	add    esp,0x14
c001c238:	c3                   	ret    
c001c239:	90                   	nop

c001c23a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c23a:	6a 18                	push   0x18
c001c23c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c241:	50                   	push   eax
c001c242:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c247:	50                   	push   eax
c001c248:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c24d:	50                   	push   eax
c001c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c252:	e8 a9 fe ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c257:	83 c4 14             	add    esp,0x14
c001c25a:	0f b6 c4             	movzx  eax,ah
c001c25d:	c3                   	ret    

c001c25e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c25e:	55                   	push   ebp
c001c25f:	57                   	push   edi
c001c260:	56                   	push   esi
c001c261:	53                   	push   ebx
c001c262:	50                   	push   eax
c001c263:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c267:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c26c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c271:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c276:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c27d:	8d 43 12             	lea    eax,[ebx+0x12]
c001c280:	83 c3 10             	add    ebx,0x10
c001c283:	0f b6 c0             	movzx  eax,al
c001c286:	0f b6 db             	movzx  ebx,bl
c001c289:	50                   	push   eax
c001c28a:	51                   	push   ecx
c001c28b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c28f:	57                   	push   edi
c001c290:	55                   	push   ebp
c001c291:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c295:	e8 66 fe ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c29a:	53                   	push   ebx
c001c29b:	89 c6                	mov    esi,eax
c001c29d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c2a1:	c1 e6 10             	shl    esi,0x10
c001c2a4:	51                   	push   ecx
c001c2a5:	57                   	push   edi
c001c2a6:	55                   	push   ebp
c001c2a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2ab:	e8 50 fe ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2b0:	83 c4 2c             	add    esp,0x2c
c001c2b3:	0f b7 c0             	movzx  eax,ax
c001c2b6:	5b                   	pop    ebx
c001c2b7:	09 f0                	or     eax,esi
c001c2b9:	5e                   	pop    esi
c001c2ba:	5f                   	pop    edi
c001c2bb:	5d                   	pop    ebp
c001c2bc:	c3                   	ret    
c001c2bd:	90                   	nop

c001c2be <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c2be:	53                   	push   ebx
c001c2bf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c2c4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c2c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2cd:	c1 e1 10             	shl    ecx,0x10
c001c2d0:	25 fc 00 00 00       	and    eax,0xfc
c001c2d5:	09 c1                	or     ecx,eax
c001c2d7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2dc:	c1 e0 08             	shl    eax,0x8
c001c2df:	09 c1                	or     ecx,eax
c001c2e1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c2e6:	c1 e0 0b             	shl    eax,0xb
c001c2e9:	09 c1                	or     ecx,eax
c001c2eb:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c2f1:	89 c8                	mov    eax,ecx
c001c2f3:	ef                   	out    dx,eax
c001c2f4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c2f9:	ed                   	in     eax,dx
c001c2fa:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c2ff:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c304:	74 0a                	je     c001c310 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c306:	0f b7 d8             	movzx  ebx,ax
c001c309:	89 d0                	mov    eax,edx
c001c30b:	c1 e0 10             	shl    eax,0x10
c001c30e:	eb 05                	jmp    c001c315 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c310:	66 31 c0             	xor    ax,ax
c001c313:	89 d3                	mov    ebx,edx
c001c315:	09 c3                	or     ebx,eax
c001c317:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c31c:	89 c8                	mov    eax,ecx
c001c31e:	ef                   	out    dx,eax
c001c31f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c324:	89 d8                	mov    eax,ebx
c001c326:	ef                   	out    dx,eax
c001c327:	5b                   	pop    ebx
c001c328:	c3                   	ret    
c001c329:	90                   	nop

c001c32a <PCI::checkBus(unsigned char)>:
c001c32a:	56                   	push   esi
c001c32b:	53                   	push   ebx
c001c32c:	31 db                	xor    ebx,ebx
c001c32e:	51                   	push   ecx
c001c32f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c334:	52                   	push   edx
c001c335:	53                   	push   ebx
c001c336:	43                   	inc    ebx
c001c337:	56                   	push   esi
c001c338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c33c:	e8 29 03 00 00       	call   c001c66a <PCI::checkDevice(unsigned char, unsigned char)>
c001c341:	83 c4 10             	add    esp,0x10
c001c344:	83 fb 20             	cmp    ebx,0x20
c001c347:	75 eb                	jne    c001c334 <PCI::checkBus(unsigned char)+0xa>
c001c349:	58                   	pop    eax
c001c34a:	5b                   	pop    ebx
c001c34b:	5e                   	pop    esi
c001c34c:	c3                   	ret    
c001c34d:	90                   	nop

c001c34e <PCI::foundDevice(PCIDeviceInfo)>:
c001c34e:	55                   	push   ebp
c001c34f:	57                   	push   edi
c001c350:	56                   	push   esi
c001c351:	53                   	push   ebx
c001c352:	83 ec 1c             	sub    esp,0x1c
c001c355:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c359:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c35f:	0f 84 51 01 00 00    	je     c001c4b6 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c365:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c369:	66 81 f9 06 04       	cmp    cx,0x406
c001c36e:	75 2c                	jne    c001c39c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c370:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c375:	50                   	push   eax
c001c376:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c37b:	50                   	push   eax
c001c37c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c381:	50                   	push   eax
c001c382:	56                   	push   esi
c001c383:	e8 b2 fe ff ff       	call   c001c23a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c388:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c38c:	0f b6 c0             	movzx  eax,al
c001c38f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c393:	83 c4 2c             	add    esp,0x2c
c001c396:	5b                   	pop    ebx
c001c397:	5e                   	pop    esi
c001c398:	5f                   	pop    edi
c001c399:	5d                   	pop    ebp
c001c39a:	eb 8e                	jmp    c001c32a <PCI::checkBus(unsigned char)>
c001c39c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c3a0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c3a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c3aa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c3ae:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c3b2:	88 d3                	mov    bl,dl
c001c3b4:	85 c0                	test   eax,eax
c001c3b6:	74 33                	je     c001c3eb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c3b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c3bb:	85 d2                	test   edx,edx
c001c3bd:	74 28                	je     c001c3e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c3bf:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c3c5:	31 ef                	xor    edi,ebp
c001c3c7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c3cd:	75 18                	jne    c001c3e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c3cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c3d3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c3d9:	75 0c                	jne    c001c3e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c3db:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c3e1:	0f 84 cf 00 00 00    	je     c001c4b6 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c3e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3e9:	eb c9                	jmp    c001c3b4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c3eb:	66 81 f9 01 06       	cmp    cx,0x601
c001c3f0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c3f4:	75 18                	jne    c001c40e <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c3f6:	83 ec 0c             	sub    esp,0xc
c001c3f9:	68 58 01 00 00       	push   0x158
c001c3fe:	e8 21 2c ff ff       	call   c000f024 <operator new(unsigned long)>
c001c403:	59                   	pop    ecx
c001c404:	89 c5                	mov    ebp,eax
c001c406:	5f                   	pop    edi
c001c407:	68 88 32 02 c0       	push   0xc0023288
c001c40c:	eb 7d                	jmp    c001c48b <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c40e:	66 81 f9 01 01       	cmp    cx,0x101
c001c413:	75 60                	jne    c001c475 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c415:	83 ec 0c             	sub    esp,0xc
c001c418:	68 70 02 00 00       	push   0x270
c001c41d:	e8 02 2c ff ff       	call   c000f024 <operator new(unsigned long)>
c001c422:	89 04 24             	mov    DWORD PTR [esp],eax
c001c425:	89 c5                	mov    ebp,eax
c001c427:	e8 02 03 00 00       	call   c001c72e <IDE::IDE()>
c001c42c:	58                   	pop    eax
c001c42d:	5a                   	pop    edx
c001c42e:	55                   	push   ebp
c001c42f:	56                   	push   esi
c001c430:	e8 39 41 ff ff       	call   c001056e <Device::addChild(Device*)>
c001c435:	83 ec 1c             	sub    esp,0x1c
c001c438:	b9 09 00 00 00       	mov    ecx,0x9
c001c43d:	fc                   	cld    
c001c43e:	89 e7                	mov    edi,esp
c001c440:	89 de                	mov    esi,ebx
c001c442:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c444:	55                   	push   ebp
c001c445:	e8 02 40 ff ff       	call   c001044c <Device::preOpenPCI(PCIDeviceInfo)>
c001c44a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c44d:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c451:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c459:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c461:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c469:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c46c:	83 c4 4c             	add    esp,0x4c
c001c46f:	5b                   	pop    ebx
c001c470:	5e                   	pop    esi
c001c471:	5f                   	pop    edi
c001c472:	5d                   	pop    ebp
c001c473:	ff e0                	jmp    eax
c001c475:	83 ec 0c             	sub    esp,0xc
c001c478:	68 58 01 00 00       	push   0x158
c001c47d:	e8 a2 2b ff ff       	call   c000f024 <operator new(unsigned long)>
c001c482:	59                   	pop    ecx
c001c483:	89 c5                	mov    ebp,eax
c001c485:	5f                   	pop    edi
c001c486:	68 a7 32 02 c0       	push   0xc00232a7
c001c48b:	55                   	push   ebp
c001c48c:	e8 c9 43 ff ff       	call   c001085a <DriverlessDevice::DriverlessDevice(char const*)>
c001c491:	58                   	pop    eax
c001c492:	5a                   	pop    edx
c001c493:	55                   	push   ebp
c001c494:	56                   	push   esi
c001c495:	e8 d4 40 ff ff       	call   c001056e <Device::addChild(Device*)>
c001c49a:	b9 09 00 00 00       	mov    ecx,0x9
c001c49f:	fc                   	cld    
c001c4a0:	89 df                	mov    edi,ebx
c001c4a2:	89 de                	mov    esi,ebx
c001c4a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c4a6:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c4aa:	83 c4 2c             	add    esp,0x2c
c001c4ad:	5b                   	pop    ebx
c001c4ae:	5e                   	pop    esi
c001c4af:	5f                   	pop    edi
c001c4b0:	5d                   	pop    ebp
c001c4b1:	e9 96 3f ff ff       	jmp    c001044c <Device::preOpenPCI(PCIDeviceInfo)>
c001c4b6:	83 c4 1c             	add    esp,0x1c
c001c4b9:	5b                   	pop    ebx
c001c4ba:	5e                   	pop    esi
c001c4bb:	5f                   	pop    edi
c001c4bc:	5d                   	pop    ebp
c001c4bd:	c3                   	ret    

c001c4be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c4be:	55                   	push   ebp
c001c4bf:	57                   	push   edi
c001c4c0:	56                   	push   esi
c001c4c1:	53                   	push   ebx
c001c4c2:	83 ec 5c             	sub    esp,0x5c
c001c4c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c4c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4cd:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c4d1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c4d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4da:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c4de:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c4e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4e7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c4ec:	6a 0c                	push   0xc
c001c4ee:	55                   	push   ebp
c001c4ef:	53                   	push   ebx
c001c4f0:	57                   	push   edi
c001c4f1:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c4f8:	e8 03 fc ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c4fd:	55                   	push   ebp
c001c4fe:	53                   	push   ebx
c001c4ff:	57                   	push   edi
c001c500:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c507:	e8 82 fc ff ff       	call   c001c18e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c50c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c001c511:	83 c4 24             	add    esp,0x24
c001c514:	55                   	push   ebp
c001c515:	53                   	push   ebx
c001c516:	57                   	push   edi
c001c517:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c51b:	e8 f8 fc ff ff       	call   c001c218 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c520:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c524:	6a 3c                	push   0x3c
c001c526:	55                   	push   ebp
c001c527:	53                   	push   ebx
c001c528:	57                   	push   edi
c001c529:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c530:	e8 cb fb ff ff       	call   c001c100 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c535:	0f b6 c4             	movzx  eax,ah
c001c538:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c53c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c540:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001c544:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001c549:	83 c4 24             	add    esp,0x24
c001c54c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c552:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c559:	74 6c                	je     c001c5c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c55b:	31 f6                	xor    esi,esi
c001c55d:	8b 15 88 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024588
c001c563:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c569:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c56f:	7e 56                	jle    c001c5c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c571:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c574:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c57b:	39 cb                	cmp    ebx,ecx
c001c57d:	75 45                	jne    c001c5c4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c57f:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c586:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c58a:	75 38                	jne    c001c5c4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c58c:	83 ec 0c             	sub    esp,0xc
c001c58f:	68 c1 32 02 c0       	push   0xc00232c1
c001c594:	e8 c0 2b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c599:	8b 15 88 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024588
c001c59f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c5a5:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c5ad:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c5b1:	52                   	push   edx
c001c5b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5b6:	53                   	push   ebx
c001c5b7:	68 e6 32 02 c0       	push   0xc00232e6
c001c5bc:	e8 98 2b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c5c1:	83 c4 20             	add    esp,0x20
c001c5c4:	46                   	inc    esi
c001c5c5:	eb 96                	jmp    c001c55d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c001c5c7:	31 d2                	xor    edx,edx
c001c5c9:	83 ec 0c             	sub    esp,0xc
c001c5cc:	55                   	push   ebp
c001c5cd:	53                   	push   ebx
c001c5ce:	57                   	push   edi
c001c5cf:	52                   	push   edx
c001c5d0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c5d4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c5db:	e8 7e fc ff ff       	call   c001c25e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c5e0:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c5e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c5e8:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c5ec:	42                   	inc    edx
c001c5ed:	83 c4 20             	add    esp,0x20
c001c5f0:	83 fa 06             	cmp    edx,0x6
c001c5f3:	75 d4                	jne    c001c5c9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c001c5f5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c5f9:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c5fd:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c601:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c605:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c609:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c60d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c612:	86 e0                	xchg   al,ah
c001c614:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c619:	55                   	push   ebp
c001c61a:	53                   	push   ebx
c001c61b:	57                   	push   edi
c001c61c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c620:	e8 ad fb ff ff       	call   c001c1d2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c625:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c629:	55                   	push   ebp
c001c62a:	53                   	push   ebx
c001c62b:	57                   	push   edi
c001c62c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c633:	e8 10 fb ff ff       	call   c001c148 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c638:	83 ec 0c             	sub    esp,0xc
c001c63b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c640:	b9 09 00 00 00       	mov    ecx,0x9
c001c645:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c649:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c64d:	fc                   	cld    
c001c64e:	89 e7                	mov    edi,esp
c001c650:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c652:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c659:	e8 f0 fc ff ff       	call   c001c34e <PCI::foundDevice(PCIDeviceInfo)>
c001c65e:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c664:	5b                   	pop    ebx
c001c665:	5e                   	pop    esi
c001c666:	5f                   	pop    edi
c001c667:	5d                   	pop    ebp
c001c668:	c3                   	ret    
c001c669:	90                   	nop

c001c66a <PCI::checkDevice(unsigned char, unsigned char)>:
c001c66a:	55                   	push   ebp
c001c66b:	57                   	push   edi
c001c66c:	56                   	push   esi
c001c66d:	53                   	push   ebx
c001c66e:	83 ec 0c             	sub    esp,0xc
c001c671:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c675:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c67a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c67f:	6a 00                	push   0x0
c001c681:	56                   	push   esi
c001c682:	57                   	push   edi
c001c683:	55                   	push   ebp
c001c684:	e8 bf fa ff ff       	call   c001c148 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c689:	6a 00                	push   0x0
c001c68b:	56                   	push   esi
c001c68c:	57                   	push   edi
c001c68d:	55                   	push   ebp
c001c68e:	e8 2b fe ff ff       	call   c001c4be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c693:	83 c4 20             	add    esp,0x20
c001c696:	6a 00                	push   0x0
c001c698:	56                   	push   esi
c001c699:	57                   	push   edi
c001c69a:	55                   	push   ebp
c001c69b:	e8 ca fa ff ff       	call   c001c16a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c6a0:	83 c4 10             	add    esp,0x10
c001c6a3:	84 c0                	test   al,al
c001c6a5:	79 27                	jns    c001c6ce <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c6a7:	bb 01 00 00 00       	mov    ebx,0x1
c001c6ac:	53                   	push   ebx
c001c6ad:	56                   	push   esi
c001c6ae:	57                   	push   edi
c001c6af:	55                   	push   ebp
c001c6b0:	e8 93 fa ff ff       	call   c001c148 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c6b5:	83 c4 10             	add    esp,0x10
c001c6b8:	66 40                	inc    ax
c001c6ba:	74 0c                	je     c001c6c8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c6bc:	53                   	push   ebx
c001c6bd:	56                   	push   esi
c001c6be:	57                   	push   edi
c001c6bf:	55                   	push   ebp
c001c6c0:	e8 f9 fd ff ff       	call   c001c4be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c6c5:	83 c4 10             	add    esp,0x10
c001c6c8:	43                   	inc    ebx
c001c6c9:	83 fb 08             	cmp    ebx,0x8
c001c6cc:	75 de                	jne    c001c6ac <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c6ce:	83 c4 0c             	add    esp,0xc
c001c6d1:	5b                   	pop    ebx
c001c6d2:	5e                   	pop    esi
c001c6d3:	5f                   	pop    edi
c001c6d4:	5d                   	pop    ebp
c001c6d5:	c3                   	ret    

c001c6d6 <PCI::detect()>:
c001c6d6:	56                   	push   esi
c001c6d7:	53                   	push   ebx
c001c6d8:	53                   	push   ebx
c001c6d9:	31 db                	xor    ebx,ebx
c001c6db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6df:	6a 00                	push   0x0
c001c6e1:	6a 00                	push   0x0
c001c6e3:	6a 00                	push   0x0
c001c6e5:	56                   	push   esi
c001c6e6:	e8 7f fa ff ff       	call   c001c16a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c6eb:	83 c4 10             	add    esp,0x10
c001c6ee:	a8 80                	test   al,0x80
c001c6f0:	75 21                	jne    c001c713 <PCI::detect()+0x3d>
c001c6f2:	51                   	push   ecx
c001c6f3:	51                   	push   ecx
c001c6f4:	6a 00                	push   0x0
c001c6f6:	56                   	push   esi
c001c6f7:	e8 2e fc ff ff       	call   c001c32a <PCI::checkBus(unsigned char)>
c001c6fc:	83 c4 10             	add    esp,0x10
c001c6ff:	eb 24                	jmp    c001c725 <PCI::detect()+0x4f>
c001c701:	52                   	push   edx
c001c702:	52                   	push   edx
c001c703:	53                   	push   ebx
c001c704:	43                   	inc    ebx
c001c705:	56                   	push   esi
c001c706:	e8 1f fc ff ff       	call   c001c32a <PCI::checkBus(unsigned char)>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	83 fb 08             	cmp    ebx,0x8
c001c711:	74 12                	je     c001c725 <PCI::detect()+0x4f>
c001c713:	53                   	push   ebx
c001c714:	6a 00                	push   0x0
c001c716:	6a 00                	push   0x0
c001c718:	56                   	push   esi
c001c719:	e8 2a fa ff ff       	call   c001c148 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c71e:	83 c4 10             	add    esp,0x10
c001c721:	66 40                	inc    ax
c001c723:	74 dc                	je     c001c701 <PCI::detect()+0x2b>
c001c725:	58                   	pop    eax
c001c726:	5b                   	pop    ebx
c001c727:	5e                   	pop    esi
c001c728:	c3                   	ret    
c001c729:	90                   	nop

c001c72a <IDE::close(int, int, void*)>:
c001c72a:	83 c8 ff             	or     eax,0xffffffff
c001c72d:	c3                   	ret    

c001c72e <IDE::IDE()>:
c001c72e:	83 ec 0c             	sub    esp,0xc
c001c731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c735:	83 ec 08             	sub    esp,0x8
c001c738:	68 30 33 02 c0       	push   0xc0023330
c001c73d:	50                   	push   eax
c001c73e:	e8 ad 41 ff ff       	call   c00108f0 <HardDiskController::HardDiskController(char const*)>
c001c743:	83 c4 10             	add    esp,0x10
c001c746:	ba 70 35 02 c0       	mov    edx,0xc0023570
c001c74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74f:	89 10                	mov    DWORD PTR [eax],edx
c001c751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c755:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c75c:	90                   	nop
c001c75d:	83 c4 0c             	add    esp,0xc
c001c760:	c3                   	ret    
c001c761:	90                   	nop

c001c762 <IDE::prepareInterrupt(unsigned char)>:
c001c762:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c767:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c76b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c773:	c3                   	ret    

c001c774 <selectDrive(unsigned char, unsigned char)>:
c001c774:	c3                   	ret    
c001c775:	90                   	nop

c001c776 <IDE::getBase(unsigned char)>:
c001c776:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c77f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c787:	c3                   	ret    

c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c788:	55                   	push   ebp
c001c789:	57                   	push   edi
c001c78a:	56                   	push   esi
c001c78b:	53                   	push   ebx
c001c78c:	83 ec 1c             	sub    esp,0x1c
c001c78f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c793:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c797:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c79b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c79f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c7a2:	80 f9 03             	cmp    cl,0x3
c001c7a5:	77 51                	ja     c001c7f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c7a7:	0f b6 f2             	movzx  esi,dl
c001c7aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7ae:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c7b1:	0f b6 db             	movzx  ebx,bl
c001c7b4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c7b8:	83 ca 80             	or     edx,0xffffff80
c001c7bb:	0f b6 d2             	movzx  edx,dl
c001c7be:	52                   	push   edx
c001c7bf:	6a 0c                	push   0xc
c001c7c1:	56                   	push   esi
c001c7c2:	57                   	push   edi
c001c7c3:	e8 c0 ff ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7c8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c7cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7d1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c7d5:	ee                   	out    dx,al
c001c7d6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c7db:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c7df:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c7e3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c7e7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c7ef:	83 c4 2c             	add    esp,0x2c
c001c7f2:	5b                   	pop    ebx
c001c7f3:	5e                   	pop    esi
c001c7f4:	5f                   	pop    edi
c001c7f5:	5d                   	pop    ebp
c001c7f6:	eb 90                	jmp    c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7f8:	80 fb 07             	cmp    bl,0x7
c001c7fb:	77 12                	ja     c001c80f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c7fd:	0f b6 d2             	movzx  edx,dl
c001c800:	0f b6 db             	movzx  ebx,bl
c001c803:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c80b:	89 da                	mov    edx,ebx
c001c80d:	eb 2f                	jmp    c001c83e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c80f:	80 fb 0d             	cmp    bl,0xd
c001c812:	77 13                	ja     c001c827 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c814:	0f b6 d2             	movzx  edx,dl
c001c817:	0f b6 db             	movzx  ebx,bl
c001c81a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c821:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c825:	eb 17                	jmp    c001c83e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c827:	80 fb 15             	cmp    bl,0x15
c001c82a:	77 13                	ja     c001c83f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c82c:	0f b6 d2             	movzx  edx,dl
c001c82f:	0f b6 db             	movzx  ebx,bl
c001c832:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c83a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c83e:	ee                   	out    dx,al
c001c83f:	83 c4 1c             	add    esp,0x1c
c001c842:	5b                   	pop    ebx
c001c843:	5e                   	pop    esi
c001c844:	5f                   	pop    edi
c001c845:	5d                   	pop    ebp
c001c846:	c3                   	ret    
c001c847:	90                   	nop

c001c848 <IDE::read(unsigned char, unsigned char)>:
c001c848:	55                   	push   ebp
c001c849:	57                   	push   edi
c001c84a:	56                   	push   esi
c001c84b:	53                   	push   ebx
c001c84c:	83 ec 1c             	sub    esp,0x1c
c001c84f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c853:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c857:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c85b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c85e:	3c 03                	cmp    al,0x3
c001c860:	77 43                	ja     c001c8a5 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c862:	0f b6 f2             	movzx  esi,dl
c001c865:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c868:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c86c:	83 c8 80             	or     eax,0xffffff80
c001c86f:	0f b6 c0             	movzx  eax,al
c001c872:	50                   	push   eax
c001c873:	6a 0c                	push   0xc
c001c875:	56                   	push   esi
c001c876:	57                   	push   edi
c001c877:	e8 0c ff ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c87c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c881:	0f b6 c3             	movzx  eax,bl
c001c884:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c888:	ec                   	in     al,dx
c001c889:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c88e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c892:	52                   	push   edx
c001c893:	6a 0c                	push   0xc
c001c895:	56                   	push   esi
c001c896:	57                   	push   edi
c001c897:	e8 ec fe ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c89c:	83 c4 20             	add    esp,0x20
c001c89f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c8a3:	eb 49                	jmp    c001c8ee <IDE::read(unsigned char, unsigned char)+0xa6>
c001c8a5:	80 fb 07             	cmp    bl,0x7
c001c8a8:	77 12                	ja     c001c8bc <IDE::read(unsigned char, unsigned char)+0x74>
c001c8aa:	0f b6 d2             	movzx  edx,dl
c001c8ad:	0f b6 c3             	movzx  eax,bl
c001c8b0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c8b8:	89 c2                	mov    edx,eax
c001c8ba:	eb 31                	jmp    c001c8ed <IDE::read(unsigned char, unsigned char)+0xa5>
c001c8bc:	80 fb 0d             	cmp    bl,0xd
c001c8bf:	77 13                	ja     c001c8d4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c8c1:	0f b6 d2             	movzx  edx,dl
c001c8c4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c8cb:	0f b6 d3             	movzx  edx,bl
c001c8ce:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c8d2:	eb 19                	jmp    c001c8ed <IDE::read(unsigned char, unsigned char)+0xa5>
c001c8d4:	31 c0                	xor    eax,eax
c001c8d6:	80 fb 15             	cmp    bl,0x15
c001c8d9:	77 13                	ja     c001c8ee <IDE::read(unsigned char, unsigned char)+0xa6>
c001c8db:	0f b6 d2             	movzx  edx,dl
c001c8de:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c8e6:	0f b6 d3             	movzx  edx,bl
c001c8e9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c8ed:	ec                   	in     al,dx
c001c8ee:	83 c4 1c             	add    esp,0x1c
c001c8f1:	5b                   	pop    ebx
c001c8f2:	5e                   	pop    esi
c001c8f3:	5f                   	pop    edi
c001c8f4:	5d                   	pop    ebp
c001c8f5:	c3                   	ret    

c001c8f6 <IDE::waitInterrupt(unsigned char)>:
c001c8f6:	57                   	push   edi
c001c8f7:	56                   	push   esi
c001c8f8:	31 f6                	xor    esi,esi
c001c8fa:	53                   	push   ebx
c001c8fb:	83 ec 10             	sub    esp,0x10
c001c8fe:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001c902:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c906:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c90a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c90f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001c916:	84 db                	test   bl,bl
c001c918:	75 37                	jne    c001c951 <IDE::waitInterrupt(unsigned char)+0x5b>
c001c91a:	52                   	push   edx
c001c91b:	6a 0c                	push   0xc
c001c91d:	50                   	push   eax
c001c91e:	57                   	push   edi
c001c91f:	e8 24 ff ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001c924:	83 c4 10             	add    esp,0x10
c001c927:	a8 01                	test   al,0x1
c001c929:	75 2e                	jne    c001c959 <IDE::waitInterrupt(unsigned char)+0x63>
c001c92b:	f7 c6 04 00 00 00    	test   esi,0x4
c001c931:	75 16                	jne    c001c949 <IDE::waitInterrupt(unsigned char)+0x53>
c001c933:	83 fe 32             	cmp    esi,0x32
c001c936:	7e 11                	jle    c001c949 <IDE::waitInterrupt(unsigned char)+0x53>
c001c938:	50                   	push   eax
c001c939:	50                   	push   eax
c001c93a:	6a 00                	push   0x0
c001c93c:	68 80 96 98 00       	push   0x989680
c001c941:	e8 4d c5 ff ff       	call   c0018e93 <nanoSleep(unsigned long long)>
c001c946:	83 c4 10             	add    esp,0x10
c001c949:	83 fe 3c             	cmp    esi,0x3c
c001c94c:	74 0b                	je     c001c959 <IDE::waitInterrupt(unsigned char)+0x63>
c001c94e:	46                   	inc    esi
c001c94f:	eb b9                	jmp    c001c90a <IDE::waitInterrupt(unsigned char)+0x14>
c001c951:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001c959:	83 c4 10             	add    esp,0x10
c001c95c:	88 d8                	mov    al,bl
c001c95e:	5b                   	pop    ebx
c001c95f:	5e                   	pop    esi
c001c960:	5f                   	pop    edi
c001c961:	c3                   	ret    

c001c962 <ideChannel0IRQHandler(regs*, void*)>:
c001c962:	83 ec 10             	sub    esp,0x10
c001c965:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c969:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c970:	6a 07                	push   0x7
c001c972:	6a 00                	push   0x0
c001c974:	50                   	push   eax
c001c975:	e8 ce fe ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001c97a:	83 c4 1c             	add    esp,0x1c
c001c97d:	c3                   	ret    

c001c97e <ideChannel1IRQHandler(regs*, void*)>:
c001c97e:	83 ec 10             	sub    esp,0x10
c001c981:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c985:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c98c:	6a 07                	push   0x7
c001c98e:	6a 01                	push   0x1
c001c990:	50                   	push   eax
c001c991:	e8 b2 fe ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001c996:	83 c4 1c             	add    esp,0x1c
c001c999:	c3                   	ret    

c001c99a <IDE::enableIRQs(unsigned char, bool)>:
c001c99a:	57                   	push   edi
c001c99b:	56                   	push   esi
c001c99c:	be 04 00 00 00       	mov    esi,0x4
c001c9a1:	53                   	push   ebx
c001c9a2:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c9a7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c9ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9b0:	0f 94 c0             	sete   al
c001c9b3:	01 c0                	add    eax,eax
c001c9b5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c9bc:	0f b6 c0             	movzx  eax,al
c001c9bf:	50                   	push   eax
c001c9c0:	6a 0c                	push   0xc
c001c9c2:	57                   	push   edi
c001c9c3:	53                   	push   ebx
c001c9c4:	e8 bf fd ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9c9:	83 c4 10             	add    esp,0x10
c001c9cc:	50                   	push   eax
c001c9cd:	6a 0c                	push   0xc
c001c9cf:	57                   	push   edi
c001c9d0:	53                   	push   ebx
c001c9d1:	e8 72 fe ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001c9d6:	83 c4 10             	add    esp,0x10
c001c9d9:	4e                   	dec    esi
c001c9da:	75 f0                	jne    c001c9cc <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c9dc:	5b                   	pop    ebx
c001c9dd:	5e                   	pop    esi
c001c9de:	5f                   	pop    edi
c001c9df:	c3                   	ret    

c001c9e0 <IDE::open(int, int, void*)>:
c001c9e0:	55                   	push   ebp
c001c9e1:	57                   	push   edi
c001c9e2:	56                   	push   esi
c001c9e3:	53                   	push   ebx
c001c9e4:	83 ec 1c             	sub    esp,0x1c
c001c9e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c9eb:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c9f4:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c9fd:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ca04:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ca0b:	0f 85 b2 02 00 00    	jne    c001ccc3 <IDE::open(int, int, void*)+0x2e3>
c001ca11:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ca17:	88 04 24             	mov    BYTE PTR [esp],al
c001ca1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ca1d:	83 e0 7f             	and    eax,0x7f
c001ca20:	83 f8 05             	cmp    eax,0x5
c001ca23:	74 05                	je     c001ca2a <IDE::open(int, int, void*)+0x4a>
c001ca25:	83 f8 0f             	cmp    eax,0xf
c001ca28:	75 32                	jne    c001ca5c <IDE::open(int, int, void*)+0x7c>
c001ca2a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ca30:	83 e0 fc             	and    eax,0xfffffffc
c001ca33:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ca3a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ca40:	83 e0 fc             	and    eax,0xfffffffc
c001ca43:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ca4a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ca50:	83 e0 fc             	and    eax,0xfffffffc
c001ca53:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca5a:	eb 14                	jmp    c001ca70 <IDE::open(int, int, void*)+0x90>
c001ca5c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ca66:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ca70:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ca77:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ca7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca82:	89 c6                	mov    esi,eax
c001ca84:	89 e8                	mov    eax,ebp
c001ca86:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ca8b:	c1 e6 10             	shl    esi,0x10
c001ca8e:	89 fa                	mov    edx,edi
c001ca90:	c1 e0 0b             	shl    eax,0xb
c001ca93:	09 f0                	or     eax,esi
c001ca95:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ca9c:	c1 e6 08             	shl    esi,0x8
c001ca9f:	09 c6                	or     esi,eax
c001caa1:	89 f0                	mov    eax,esi
c001caa3:	0d 08 00 00 80       	or     eax,0x80000008
c001caa8:	ef                   	out    dx,eax
c001caa9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001caae:	89 ca                	mov    edx,ecx
c001cab0:	ed                   	in     eax,dx
c001cab1:	c1 e8 10             	shr    eax,0x10
c001cab4:	3d ff ff 00 00       	cmp    eax,0xffff
c001cab9:	0f 84 f3 00 00 00    	je     c001cbb2 <IDE::open(int, int, void*)+0x1d2>
c001cabf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cac5:	89 fa                	mov    edx,edi
c001cac7:	89 f0                	mov    eax,esi
c001cac9:	ef                   	out    dx,eax
c001caca:	b0 fe                	mov    al,0xfe
c001cacc:	89 ca                	mov    edx,ecx
c001cace:	ee                   	out    dx,al
c001cacf:	89 f0                	mov    eax,esi
c001cad1:	89 fa                	mov    edx,edi
c001cad3:	ef                   	out    dx,eax
c001cad4:	89 ca                	mov    edx,ecx
c001cad6:	ed                   	in     eax,dx
c001cad7:	3c fe                	cmp    al,0xfe
c001cad9:	0f 85 a9 00 00 00    	jne    c001cb88 <IDE::open(int, int, void*)+0x1a8>
c001cadf:	8b 15 88 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024588
c001cae5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001caec:	74 33                	je     c001cb21 <IDE::open(int, int, void*)+0x141>
c001caee:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001caf4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001caf8:	40                   	inc    eax
c001caf9:	83 ec 0c             	sub    esp,0xc
c001cafc:	0f b6 c0             	movzx  eax,al
c001caff:	50                   	push   eax
c001cb00:	55                   	push   ebp
c001cb01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb05:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cb0b:	51                   	push   ecx
c001cb0c:	e8 75 72 ff ff       	call   c0013d86 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cb11:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cb16:	83 c4 1c             	add    esp,0x1c
c001cb19:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cb1f:	eb 0a                	jmp    c001cb2b <IDE::open(int, int, void*)+0x14b>
c001cb21:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cb2b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cb32:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cb39:	c1 e1 10             	shl    ecx,0x10
c001cb3c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cb41:	c1 e0 08             	shl    eax,0x8
c001cb44:	89 fa                	mov    edx,edi
c001cb46:	09 c1                	or     ecx,eax
c001cb48:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cb4f:	c1 e0 0b             	shl    eax,0xb
c001cb52:	09 c1                	or     ecx,eax
c001cb54:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cb5a:	89 c8                	mov    eax,ecx
c001cb5c:	ef                   	out    dx,eax
c001cb5d:	be fc 0c 00 00       	mov    esi,0xcfc
c001cb62:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cb68:	89 f2                	mov    edx,esi
c001cb6a:	ee                   	out    dx,al
c001cb6b:	89 c8                	mov    eax,ecx
c001cb6d:	89 fa                	mov    edx,edi
c001cb6f:	ef                   	out    dx,eax
c001cb70:	89 f2                	mov    edx,esi
c001cb72:	ed                   	in     eax,dx
c001cb73:	0f b6 c0             	movzx  eax,al
c001cb76:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001cb7c:	74 44                	je     c001cbc2 <IDE::open(int, int, void*)+0x1e2>
c001cb7e:	83 ec 0c             	sub    esp,0xc
c001cb81:	68 48 33 02 c0       	push   0xc0023348
c001cb86:	eb 32                	jmp    c001cbba <IDE::open(int, int, void*)+0x1da>
c001cb88:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cb91:	75 15                	jne    c001cba8 <IDE::open(int, int, void*)+0x1c8>
c001cb93:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001cb97:	74 06                	je     c001cb9f <IDE::open(int, int, void*)+0x1bf>
c001cb99:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001cb9d:	75 09                	jne    c001cba8 <IDE::open(int, int, void*)+0x1c8>
c001cb9f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cba6:	eb 1a                	jmp    c001cbc2 <IDE::open(int, int, void*)+0x1e2>
c001cba8:	83 ec 0c             	sub    esp,0xc
c001cbab:	68 50 33 02 c0       	push   0xc0023350
c001cbb0:	eb 08                	jmp    c001cbba <IDE::open(int, int, void*)+0x1da>
c001cbb2:	83 ec 0c             	sub    esp,0xc
c001cbb5:	68 81 33 02 c0       	push   0xc0023381
c001cbba:	e8 89 8d ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001cbbf:	83 c4 10             	add    esp,0x10
c001cbc2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cbc9:	79 1a                	jns    c001cbe5 <IDE::open(int, int, void*)+0x205>
c001cbcb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cbd1:	83 e0 fc             	and    eax,0xfffffffc
c001cbd4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cbdb:	83 c0 08             	add    eax,0x8
c001cbde:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cbe5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cbeb:	89 c2                	mov    edx,eax
c001cbed:	83 e2 0f             	and    edx,0xf
c001cbf0:	66 83 fa 08          	cmp    dx,0x8
c001cbf4:	75 0a                	jne    c001cc00 <IDE::open(int, int, void*)+0x220>
c001cbf6:	83 e8 02             	sub    eax,0x2
c001cbf9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cc00:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cc06:	89 c2                	mov    edx,eax
c001cc08:	83 e2 0f             	and    edx,0xf
c001cc0b:	66 83 fa 08          	cmp    dx,0x8
c001cc0f:	75 0a                	jne    c001cc1b <IDE::open(int, int, void*)+0x23b>
c001cc11:	83 e8 02             	sub    eax,0x2
c001cc14:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cc1b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cc22:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cc29:	89 d0                	mov    eax,edx
c001cc2b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc2e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc32:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cc36:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cc39:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cc3e:	0f b6 c9             	movzx  ecx,cl
c001cc41:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cc48:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cc4b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cc4f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cc53:	8d 50 02             	lea    edx,[eax+0x2]
c001cc56:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cc5b:	0f b6 d2             	movzx  edx,dl
c001cc5e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cc64:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc67:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc6b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cc6f:	8d 48 03             	lea    ecx,[eax+0x3]
c001cc72:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cc77:	0f b6 c9             	movzx  ecx,cl
c001cc7a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cc80:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cc83:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cc87:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cc8b:	8d 50 04             	lea    edx,[eax+0x4]
c001cc8e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cc94:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cc99:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cca0:	66 85 f6             	test   si,si
c001cca3:	74 3e                	je     c001cce3 <IDE::open(int, int, void*)+0x303>
c001cca5:	0f b6 d2             	movzx  edx,dl
c001cca8:	83 c0 05             	add    eax,0x5
c001ccab:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ccae:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ccb2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ccb6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ccbc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ccc1:	eb 20                	jmp    c001cce3 <IDE::open(int, int, void*)+0x303>
c001ccc3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cccd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ccd7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ccde:	e9 02 ff ff ff       	jmp    c001cbe5 <IDE::open(int, int, void*)+0x205>
c001cce3:	52                   	push   edx
c001cce4:	52                   	push   edx
c001cce5:	6a 00                	push   0x0
c001cce7:	53                   	push   ebx
c001cce8:	e8 75 fa ff ff       	call   c001c762 <IDE::prepareInterrupt(unsigned char)>
c001cced:	59                   	pop    ecx
c001ccee:	5e                   	pop    esi
c001ccef:	6a 01                	push   0x1
c001ccf1:	53                   	push   ebx
c001ccf2:	e8 6b fa ff ff       	call   c001c762 <IDE::prepareInterrupt(unsigned char)>
c001ccf7:	83 c4 0c             	add    esp,0xc
c001ccfa:	6a 00                	push   0x0
c001ccfc:	6a 00                	push   0x0
c001ccfe:	53                   	push   ebx
c001ccff:	e8 96 fc ff ff       	call   c001c99a <IDE::enableIRQs(unsigned char, bool)>
c001cd04:	83 c4 0c             	add    esp,0xc
c001cd07:	6a 00                	push   0x0
c001cd09:	6a 01                	push   0x1
c001cd0b:	53                   	push   ebx
c001cd0c:	e8 89 fc ff ff       	call   c001c99a <IDE::enableIRQs(unsigned char, bool)>
c001cd11:	83 c4 10             	add    esp,0x10
c001cd14:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cd1b:	74 40                	je     c001cd5d <IDE::open(int, int, void*)+0x37d>
c001cd1d:	83 ec 0c             	sub    esp,0xc
c001cd20:	68 ab 33 02 c0       	push   0xc00233ab
c001cd25:	e8 2f 24 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cd2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd2d:	6a 01                	push   0x1
c001cd2f:	68 62 c9 01 c0       	push   0xc001c962
c001cd34:	6a 0e                	push   0xe
c001cd36:	53                   	push   ebx
c001cd37:	e8 86 37 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd3c:	83 c4 14             	add    esp,0x14
c001cd3f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cd45:	53                   	push   ebx
c001cd46:	6a 01                	push   0x1
c001cd48:	68 7e c9 01 c0       	push   0xc001c97e
c001cd4d:	6a 0f                	push   0xf
c001cd4f:	53                   	push   ebx
c001cd50:	e8 6d 37 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd55:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cd5b:	eb 4a                	jmp    c001cda7 <IDE::open(int, int, void*)+0x3c7>
c001cd5d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cd67:	50                   	push   eax
c001cd68:	6a 0f                	push   0xf
c001cd6a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cd70:	68 c7 33 02 c0       	push   0xc00233c7
c001cd75:	e8 df 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cd7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd7d:	6a 00                	push   0x0
c001cd7f:	68 62 c9 01 c0       	push   0xc001c962
c001cd84:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cd8a:	53                   	push   ebx
c001cd8b:	e8 32 37 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd90:	83 c4 14             	add    esp,0x14
c001cd93:	53                   	push   ebx
c001cd94:	6a 00                	push   0x0
c001cd96:	68 7e c9 01 c0       	push   0xc001c97e
c001cd9b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cda1:	53                   	push   ebx
c001cda2:	e8 1b 37 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cda7:	83 c4 20             	add    esp,0x20
c001cdaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdac:	83 ec 0c             	sub    esp,0xc
c001cdaf:	53                   	push   ebx
c001cdb0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cdb3:	83 c4 0c             	add    esp,0xc
c001cdb6:	6a 07                	push   0x7
c001cdb8:	6a 00                	push   0x0
c001cdba:	53                   	push   ebx
c001cdbb:	e8 88 fa ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cdc0:	83 c4 0c             	add    esp,0xc
c001cdc3:	6a 07                	push   0x7
c001cdc5:	6a 01                	push   0x1
c001cdc7:	53                   	push   ebx
c001cdc8:	e8 7b fa ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cdcd:	83 c4 0c             	add    esp,0xc
c001cdd0:	6a 01                	push   0x1
c001cdd2:	6a 00                	push   0x0
c001cdd4:	53                   	push   ebx
c001cdd5:	e8 c0 fb ff ff       	call   c001c99a <IDE::enableIRQs(unsigned char, bool)>
c001cdda:	83 c4 0c             	add    esp,0xc
c001cddd:	6a 01                	push   0x1
c001cddf:	6a 01                	push   0x1
c001cde1:	53                   	push   ebx
c001cde2:	e8 b3 fb ff ff       	call   c001c99a <IDE::enableIRQs(unsigned char, bool)>
c001cde7:	83 c4 2c             	add    esp,0x2c
c001cdea:	31 c0                	xor    eax,eax
c001cdec:	5b                   	pop    ebx
c001cded:	5e                   	pop    esi
c001cdee:	5f                   	pop    edi
c001cdef:	5d                   	pop    ebp
c001cdf0:	c3                   	ret    
c001cdf1:	90                   	nop

c001cdf2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cdf2:	55                   	push   ebp
c001cdf3:	57                   	push   edi
c001cdf4:	56                   	push   esi
c001cdf5:	53                   	push   ebx
c001cdf6:	83 ec 1c             	sub    esp,0x1c
c001cdf9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cdfd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ce01:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ce05:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ce09:	8d 50 f8             	lea    edx,[eax-0x8]
c001ce0c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ce10:	80 fa 03             	cmp    dl,0x3
c001ce13:	77 5d                	ja     c001ce72 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ce15:	0f b6 db             	movzx  ebx,bl
c001ce18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ce1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ce20:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ce23:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ce27:	83 ca 80             	or     edx,0xffffff80
c001ce2a:	0f b6 d2             	movzx  edx,dl
c001ce2d:	52                   	push   edx
c001ce2e:	6a 0c                	push   0xc
c001ce30:	53                   	push   ebx
c001ce31:	56                   	push   esi
c001ce32:	e8 51 f9 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce3b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ce40:	0f b6 c0             	movzx  eax,al
c001ce43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce47:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ce4b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ce4d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ce52:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ce56:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ce5a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ce5e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ce66:	83 c4 2c             	add    esp,0x2c
c001ce69:	5b                   	pop    ebx
c001ce6a:	5e                   	pop    esi
c001ce6b:	5f                   	pop    edi
c001ce6c:	5d                   	pop    ebp
c001ce6d:	e9 16 f9 ff ff       	jmp    c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce72:	3c 07                	cmp    al,0x7
c001ce74:	77 10                	ja     c001ce86 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ce76:	0f b6 db             	movzx  ebx,bl
c001ce79:	0f b6 d0             	movzx  edx,al
c001ce7c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ce84:	eb 2d                	jmp    c001ceb3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ce86:	3c 0d                	cmp    al,0xd
c001ce88:	77 13                	ja     c001ce9d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ce8a:	0f b6 db             	movzx  ebx,bl
c001ce8d:	0f b6 c0             	movzx  eax,al
c001ce90:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ce97:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ce9b:	eb 16                	jmp    c001ceb3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ce9d:	3c 15                	cmp    al,0x15
c001ce9f:	77 14                	ja     c001ceb5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cea1:	0f b6 db             	movzx  ebx,bl
c001cea4:	0f b6 c0             	movzx  eax,al
c001cea7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ceaf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ceb3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ceb5:	83 c4 1c             	add    esp,0x1c
c001ceb8:	5b                   	pop    ebx
c001ceb9:	5e                   	pop    esi
c001ceba:	5f                   	pop    edi
c001cebb:	5d                   	pop    ebp
c001cebc:	c3                   	ret    
c001cebd:	90                   	nop

c001cebe <IDE::detect()>:
c001cebe:	55                   	push   ebp
c001cebf:	57                   	push   edi
c001cec0:	56                   	push   esi
c001cec1:	53                   	push   ebx
c001cec2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cec8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cecf:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ced6:	0f 85 c0 02 00 00    	jne    c001d19c <IDE::detect()+0x2de>
c001cedc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cee3:	31 f6                	xor    esi,esi
c001cee5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ceed:	31 ed                	xor    ebp,ebp
c001ceef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cef3:	c1 e0 06             	shl    eax,0x6
c001cef6:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cefe:	89 e8                	mov    eax,ebp
c001cf00:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cf04:	c1 e0 04             	shl    eax,0x4
c001cf07:	83 c8 a0             	or     eax,0xffffffa0
c001cf0a:	0f b6 c0             	movzx  eax,al
c001cf0d:	50                   	push   eax
c001cf0e:	6a 06                	push   0x6
c001cf10:	56                   	push   esi
c001cf11:	53                   	push   ebx
c001cf12:	e8 71 f8 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf17:	83 c4 0c             	add    esp,0xc
c001cf1a:	6a 0c                	push   0xc
c001cf1c:	56                   	push   esi
c001cf1d:	53                   	push   ebx
c001cf1e:	e8 25 f9 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cf23:	83 c4 0c             	add    esp,0xc
c001cf26:	6a 0c                	push   0xc
c001cf28:	56                   	push   esi
c001cf29:	53                   	push   ebx
c001cf2a:	e8 19 f9 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cf2f:	83 c4 0c             	add    esp,0xc
c001cf32:	6a 0c                	push   0xc
c001cf34:	56                   	push   esi
c001cf35:	53                   	push   ebx
c001cf36:	e8 0d f9 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cf3b:	83 c4 0c             	add    esp,0xc
c001cf3e:	6a 0c                	push   0xc
c001cf40:	56                   	push   esi
c001cf41:	53                   	push   ebx
c001cf42:	e8 01 f9 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cf47:	68 ec 00 00 00       	push   0xec
c001cf4c:	6a 07                	push   0x7
c001cf4e:	56                   	push   esi
c001cf4f:	53                   	push   ebx
c001cf50:	e8 33 f8 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf55:	83 c4 1c             	add    esp,0x1c
c001cf58:	6a 0c                	push   0xc
c001cf5a:	56                   	push   esi
c001cf5b:	53                   	push   ebx
c001cf5c:	e8 e7 f8 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cf61:	83 c4 0c             	add    esp,0xc
c001cf64:	6a 0c                	push   0xc
c001cf66:	56                   	push   esi
c001cf67:	53                   	push   ebx
c001cf68:	e8 db f8 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cf6d:	83 c4 0c             	add    esp,0xc
c001cf70:	6a 0c                	push   0xc
c001cf72:	56                   	push   esi
c001cf73:	53                   	push   ebx
c001cf74:	e8 cf f8 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cf79:	83 c4 0c             	add    esp,0xc
c001cf7c:	6a 0c                	push   0xc
c001cf7e:	56                   	push   esi
c001cf7f:	53                   	push   ebx
c001cf80:	e8 c3 f8 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cf85:	83 c4 0c             	add    esp,0xc
c001cf88:	6a 0c                	push   0xc
c001cf8a:	56                   	push   esi
c001cf8b:	53                   	push   ebx
c001cf8c:	e8 b7 f8 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cf91:	83 c4 10             	add    esp,0x10
c001cf94:	84 c0                	test   al,al
c001cf96:	0f 84 8b 01 00 00    	je     c001d127 <IDE::detect()+0x269>
c001cf9c:	31 ff                	xor    edi,edi
c001cf9e:	50                   	push   eax
c001cf9f:	6a 0c                	push   0xc
c001cfa1:	56                   	push   esi
c001cfa2:	53                   	push   ebx
c001cfa3:	e8 a0 f8 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001cfa8:	83 c4 10             	add    esp,0x10
c001cfab:	a8 01                	test   al,0x1
c001cfad:	0f 85 8e 01 00 00    	jne    c001d141 <IDE::detect()+0x283>
c001cfb3:	84 c0                	test   al,al
c001cfb5:	78 04                	js     c001cfbb <IDE::detect()+0xfd>
c001cfb7:	a8 08                	test   al,0x8
c001cfb9:	75 27                	jne    c001cfe2 <IDE::detect()+0x124>
c001cfbb:	47                   	inc    edi
c001cfbc:	81 ff 17 01 00 00    	cmp    edi,0x117
c001cfc2:	7e da                	jle    c001cf9e <IDE::detect()+0xe0>
c001cfc4:	50                   	push   eax
c001cfc5:	50                   	push   eax
c001cfc6:	6a 00                	push   0x0
c001cfc8:	68 40 4b 4c 00       	push   0x4c4b40
c001cfcd:	e8 c1 be ff ff       	call   c0018e93 <nanoSleep(unsigned long long)>
c001cfd2:	83 c4 10             	add    esp,0x10
c001cfd5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001cfdb:	75 c1                	jne    c001cf9e <IDE::detect()+0xe0>
c001cfdd:	e9 5f 01 00 00       	jmp    c001d141 <IDE::detect()+0x283>
c001cfe2:	31 c9                	xor    ecx,ecx
c001cfe4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001cfe8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001cfec:	83 ec 0c             	sub    esp,0xc
c001cfef:	68 80 00 00 00       	push   0x80
c001cff4:	57                   	push   edi
c001cff5:	6a 00                	push   0x0
c001cff7:	56                   	push   esi
c001cff8:	53                   	push   ebx
c001cff9:	e8 f4 fd ff ff       	call   c001cdf2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001cffe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d002:	c1 e0 06             	shl    eax,0x6
c001d005:	01 d8                	add    eax,ebx
c001d007:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d00c:	89 d1                	mov    ecx,edx
c001d00e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d015:	89 f2                	mov    edx,esi
c001d017:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d01e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d024:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d028:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d02e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d032:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d039:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d041:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d048:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d050:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d056:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d05d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d063:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d067:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d06b:	83 c4 20             	add    esp,0x20
c001d06e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d071:	83 c7 02             	add    edi,0x2
c001d074:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d07a:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d07d:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d083:	83 c0 02             	add    eax,0x2
c001d086:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d08a:	75 e2                	jne    c001d06e <IDE::detect()+0x1b0>
c001d08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d090:	c1 e0 06             	shl    eax,0x6
c001d093:	01 d8                	add    eax,ebx
c001d095:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d09b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d0a2:	66 c1 ea 09          	shr    dx,0x9
c001d0a6:	83 e2 01             	and    edx,0x1
c001d0a9:	84 c9                	test   cl,cl
c001d0ab:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d0b1:	75 2f                	jne    c001d0e2 <IDE::detect()+0x224>
c001d0b3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d0b9:	85 c0                	test   eax,eax
c001d0bb:	74 66                	je     c001d123 <IDE::detect()+0x265>
c001d0bd:	50                   	push   eax
c001d0be:	55                   	push   ebp
c001d0bf:	56                   	push   esi
c001d0c0:	68 e3 33 02 c0       	push   0xc00233e3
c001d0c5:	e8 8f 20 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d0ca:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d0d1:	e8 4e 1f ff ff       	call   c000f024 <operator new(unsigned long)>
c001d0d6:	89 c7                	mov    edi,eax
c001d0d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0db:	e8 f4 02 00 00       	call   c001d3d4 <ATA::ATA()>
c001d0e0:	eb 28                	jmp    c001d10a <IDE::detect()+0x24c>
c001d0e2:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d0e8:	55                   	push   ebp
c001d0e9:	56                   	push   esi
c001d0ea:	68 12 34 02 c0       	push   0xc0023412
c001d0ef:	e8 65 20 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d0f4:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d0fb:	e8 24 1f ff ff       	call   c000f024 <operator new(unsigned long)>
c001d100:	89 c7                	mov    edi,eax
c001d102:	89 04 24             	mov    DWORD PTR [esp],eax
c001d105:	e8 1e 09 00 00       	call   c001da28 <ATAPI::ATAPI()>
c001d10a:	5a                   	pop    edx
c001d10b:	59                   	pop    ecx
c001d10c:	57                   	push   edi
c001d10d:	53                   	push   ebx
c001d10e:	e8 5b 34 ff ff       	call   c001056e <Device::addChild(Device*)>
c001d113:	8b 07                	mov    eax,DWORD PTR [edi]
c001d115:	53                   	push   ebx
c001d116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d11a:	6a 00                	push   0x0
c001d11c:	57                   	push   edi
c001d11d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d120:	83 c4 20             	add    esp,0x20
c001d123:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d127:	4d                   	dec    ebp
c001d128:	74 0a                	je     c001d134 <IDE::detect()+0x276>
c001d12a:	bd 01 00 00 00       	mov    ebp,0x1
c001d12f:	e9 bb fd ff ff       	jmp    c001ceef <IDE::detect()+0x31>
c001d134:	4e                   	dec    esi
c001d135:	74 65                	je     c001d19c <IDE::detect()+0x2de>
c001d137:	be 01 00 00 00       	mov    esi,0x1
c001d13c:	e9 ac fd ff ff       	jmp    c001ceed <IDE::detect()+0x2f>
c001d141:	50                   	push   eax
c001d142:	6a 04                	push   0x4
c001d144:	56                   	push   esi
c001d145:	53                   	push   ebx
c001d146:	e8 fd f6 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001d14b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d14f:	83 c4 0c             	add    esp,0xc
c001d152:	6a 05                	push   0x5
c001d154:	56                   	push   esi
c001d155:	53                   	push   ebx
c001d156:	e8 ed f6 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001d15b:	83 c4 10             	add    esp,0x10
c001d15e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d162:	80 fa 14             	cmp    dl,0x14
c001d165:	74 2f                	je     c001d196 <IDE::detect()+0x2d8>
c001d167:	80 fa 69             	cmp    dl,0x69
c001d16a:	75 bb                	jne    c001d127 <IDE::detect()+0x269>
c001d16c:	3c 96                	cmp    al,0x96
c001d16e:	75 b7                	jne    c001d127 <IDE::detect()+0x269>
c001d170:	68 a1 00 00 00       	push   0xa1
c001d175:	6a 07                	push   0x7
c001d177:	56                   	push   esi
c001d178:	53                   	push   ebx
c001d179:	e8 0a f6 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d17e:	5f                   	pop    edi
c001d17f:	58                   	pop    eax
c001d180:	6a 00                	push   0x0
c001d182:	68 40 42 0f 00       	push   0xf4240
c001d187:	e8 07 bd ff ff       	call   c0018e93 <nanoSleep(unsigned long long)>
c001d18c:	83 c4 10             	add    esp,0x10
c001d18f:	b1 01                	mov    cl,0x1
c001d191:	e9 4e fe ff ff       	jmp    c001cfe4 <IDE::detect()+0x126>
c001d196:	3c eb                	cmp    al,0xeb
c001d198:	75 cd                	jne    c001d167 <IDE::detect()+0x2a9>
c001d19a:	eb d4                	jmp    c001d170 <IDE::detect()+0x2b2>
c001d19c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d1a2:	5b                   	pop    ebx
c001d1a3:	5e                   	pop    esi
c001d1a4:	5f                   	pop    edi
c001d1a5:	5d                   	pop    ebp
c001d1a6:	c3                   	ret    
c001d1a7:	90                   	nop

c001d1a8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d1a8:	55                   	push   ebp
c001d1a9:	57                   	push   edi
c001d1aa:	56                   	push   esi
c001d1ab:	53                   	push   ebx
c001d1ac:	83 ec 1c             	sub    esp,0x1c
c001d1af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d1b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d1b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d1bb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d1bf:	88 c3                	mov    bl,al
c001d1c1:	84 c0                	test   al,al
c001d1c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1c7:	0f 84 67 01 00 00    	je     c001d334 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d1cd:	83 ec 0c             	sub    esp,0xc
c001d1d0:	68 43 34 02 c0       	push   0xc0023443
c001d1d5:	e8 7f 1f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d1da:	83 c4 10             	add    esp,0x10
c001d1dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1e1:	3c 01                	cmp    al,0x1
c001d1e3:	75 17                	jne    c001d1fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d1e5:	83 ec 0c             	sub    esp,0xc
c001d1e8:	b3 13                	mov    bl,0x13
c001d1ea:	68 4f 34 02 c0       	push   0xc002344f
c001d1ef:	e8 65 1f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d1f4:	83 c4 10             	add    esp,0x10
c001d1f7:	e9 25 01 00 00       	jmp    c001d321 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d1fc:	3c 02                	cmp    al,0x2
c001d1fe:	0f 85 ef 00 00 00    	jne    c001d2f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d204:	01 f6                	add    esi,esi
c001d206:	52                   	push   edx
c001d207:	09 ee                	or     esi,ebp
c001d209:	6a 01                	push   0x1
c001d20b:	89 f0                	mov    eax,esi
c001d20d:	0f b6 f0             	movzx  esi,al
c001d210:	c1 e6 06             	shl    esi,0x6
c001d213:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d21b:	50                   	push   eax
c001d21c:	57                   	push   edi
c001d21d:	e8 26 f6 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001d222:	83 c4 10             	add    esp,0x10
c001d225:	89 c6                	mov    esi,eax
c001d227:	a8 01                	test   al,0x1
c001d229:	74 12                	je     c001d23d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d22b:	83 ec 0c             	sub    esp,0xc
c001d22e:	b3 07                	mov    bl,0x7
c001d230:	68 64 34 02 c0       	push   0xc0023464
c001d235:	e8 1f 1f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d23a:	83 c4 10             	add    esp,0x10
c001d23d:	f7 c6 02 00 00 00    	test   esi,0x2
c001d243:	74 12                	je     c001d257 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d245:	83 ec 0c             	sub    esp,0xc
c001d248:	b3 03                	mov    bl,0x3
c001d24a:	68 82 34 02 c0       	push   0xc0023482
c001d24f:	e8 05 1f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d254:	83 c4 10             	add    esp,0x10
c001d257:	f7 c6 04 00 00 00    	test   esi,0x4
c001d25d:	74 12                	je     c001d271 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d25f:	83 ec 0c             	sub    esp,0xc
c001d262:	b3 14                	mov    bl,0x14
c001d264:	68 a2 34 02 c0       	push   0xc00234a2
c001d269:	e8 eb 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d26e:	83 c4 10             	add    esp,0x10
c001d271:	f7 c6 08 00 00 00    	test   esi,0x8
c001d277:	74 12                	je     c001d28b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d279:	83 ec 0c             	sub    esp,0xc
c001d27c:	b3 03                	mov    bl,0x3
c001d27e:	68 82 34 02 c0       	push   0xc0023482
c001d283:	e8 d1 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d288:	83 c4 10             	add    esp,0x10
c001d28b:	f7 c6 10 00 00 00    	test   esi,0x10
c001d291:	74 12                	je     c001d2a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d293:	83 ec 0c             	sub    esp,0xc
c001d296:	b3 15                	mov    bl,0x15
c001d298:	68 ba 34 02 c0       	push   0xc00234ba
c001d29d:	e8 b7 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d2a2:	83 c4 10             	add    esp,0x10
c001d2a5:	f7 c6 20 00 00 00    	test   esi,0x20
c001d2ab:	74 12                	je     c001d2bf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d2ad:	83 ec 0c             	sub    esp,0xc
c001d2b0:	b3 03                	mov    bl,0x3
c001d2b2:	68 82 34 02 c0       	push   0xc0023482
c001d2b7:	e8 9d 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d2bc:	83 c4 10             	add    esp,0x10
c001d2bf:	f7 c6 40 00 00 00    	test   esi,0x40
c001d2c5:	74 12                	je     c001d2d9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d2c7:	83 ec 0c             	sub    esp,0xc
c001d2ca:	b3 16                	mov    bl,0x16
c001d2cc:	68 d4 34 02 c0       	push   0xc00234d4
c001d2d1:	e8 83 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d2d6:	83 c4 10             	add    esp,0x10
c001d2d9:	89 f0                	mov    eax,esi
c001d2db:	84 c0                	test   al,al
c001d2dd:	79 42                	jns    c001d321 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d2df:	83 ec 0c             	sub    esp,0xc
c001d2e2:	b3 0d                	mov    bl,0xd
c001d2e4:	68 f5 34 02 c0       	push   0xc00234f5
c001d2e9:	e8 6b 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d2ee:	83 c4 10             	add    esp,0x10
c001d2f1:	eb 2e                	jmp    c001d321 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d2f3:	3c 03                	cmp    al,0x3
c001d2f5:	75 14                	jne    c001d30b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d2f7:	83 ec 0c             	sub    esp,0xc
c001d2fa:	b3 17                	mov    bl,0x17
c001d2fc:	68 09 35 02 c0       	push   0xc0023509
c001d301:	e8 53 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d306:	83 c4 10             	add    esp,0x10
c001d309:	eb 16                	jmp    c001d321 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d30b:	3c 04                	cmp    al,0x4
c001d30d:	75 12                	jne    c001d321 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d30f:	83 ec 0c             	sub    esp,0xc
c001d312:	b3 08                	mov    bl,0x8
c001d314:	68 1f 35 02 c0       	push   0xc002351f
c001d319:	e8 3b 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d31e:	83 c4 10             	add    esp,0x10
c001d321:	50                   	push   eax
c001d322:	50                   	push   eax
c001d323:	0f b6 c3             	movzx  eax,bl
c001d326:	50                   	push   eax
c001d327:	68 37 35 02 c0       	push   0xc0023537
c001d32c:	e8 28 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d331:	83 c4 10             	add    esp,0x10
c001d334:	83 c4 1c             	add    esp,0x1c
c001d337:	88 d8                	mov    al,bl
c001d339:	5b                   	pop    ebx
c001d33a:	5e                   	pop    esi
c001d33b:	5f                   	pop    edi
c001d33c:	5d                   	pop    ebp
c001d33d:	c3                   	ret    

c001d33e <IDE::polling(unsigned char, unsigned int)>:
c001d33e:	55                   	push   ebp
c001d33f:	bd 04 00 00 00       	mov    ebp,0x4
c001d344:	57                   	push   edi
c001d345:	56                   	push   esi
c001d346:	53                   	push   ebx
c001d347:	83 ec 0c             	sub    esp,0xc
c001d34a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d34e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d352:	52                   	push   edx
c001d353:	6a 0c                	push   0xc
c001d355:	0f b6 f3             	movzx  esi,bl
c001d358:	56                   	push   esi
c001d359:	57                   	push   edi
c001d35a:	e8 e9 f4 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001d35f:	83 c4 10             	add    esp,0x10
c001d362:	4d                   	dec    ebp
c001d363:	75 ed                	jne    c001d352 <IDE::polling(unsigned char, unsigned int)+0x14>
c001d365:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d36a:	50                   	push   eax
c001d36b:	6a 0c                	push   0xc
c001d36d:	56                   	push   esi
c001d36e:	57                   	push   edi
c001d36f:	e8 d4 f4 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001d374:	83 c4 10             	add    esp,0x10
c001d377:	a8 01                	test   al,0x1
c001d379:	74 12                	je     c001d38d <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d37b:	83 ec 0c             	sub    esp,0xc
c001d37e:	68 51 35 02 c0       	push   0xc0023551
c001d383:	e8 d1 1d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d388:	83 c4 10             	add    esp,0x10
c001d38b:	eb 17                	jmp    c001d3a4 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d38d:	a8 20                	test   al,0x20
c001d38f:	75 0f                	jne    c001d3a0 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d391:	4b                   	dec    ebx
c001d392:	74 10                	je     c001d3a4 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d394:	84 c0                	test   al,al
c001d396:	78 d2                	js     c001d36a <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d398:	a8 08                	test   al,0x8
c001d39a:	74 ce                	je     c001d36a <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d39c:	31 c0                	xor    eax,eax
c001d39e:	eb 06                	jmp    c001d3a6 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d3a0:	b0 01                	mov    al,0x1
c001d3a2:	eb 02                	jmp    c001d3a6 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d3a4:	b0 02                	mov    al,0x2
c001d3a6:	83 c4 0c             	add    esp,0xc
c001d3a9:	5b                   	pop    ebx
c001d3aa:	5e                   	pop    esi
c001d3ab:	5f                   	pop    edi
c001d3ac:	5d                   	pop    ebp
c001d3ad:	c3                   	ret    

c001d3ae <ATA::close(int, int, void*)>:
c001d3ae:	83 ec 0c             	sub    esp,0xc
c001d3b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d3bb:	85 c0                	test   eax,eax
c001d3bd:	74 0c                	je     c001d3cb <ATA::close(int, int, void*)+0x1d>
c001d3bf:	83 ec 0c             	sub    esp,0xc
c001d3c2:	8b 10                	mov    edx,DWORD PTR [eax]
c001d3c4:	50                   	push   eax
c001d3c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d3c8:	83 c4 10             	add    esp,0x10
c001d3cb:	31 c0                	xor    eax,eax
c001d3cd:	83 c4 0c             	add    esp,0xc
c001d3d0:	c3                   	ret    
c001d3d1:	90                   	nop

c001d3d2 <ATA::powerSaving(PowerSavingLevel)>:
c001d3d2:	c3                   	ret    
c001d3d3:	90                   	nop

c001d3d4 <ATA::ATA()>:
c001d3d4:	83 ec 0c             	sub    esp,0xc
c001d3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3db:	83 ec 04             	sub    esp,0x4
c001d3de:	68 00 02 00 00       	push   0x200
c001d3e3:	68 94 35 02 c0       	push   0xc0023594
c001d3e8:	50                   	push   eax
c001d3e9:	e8 86 35 ff ff       	call   c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d3ee:	83 c4 10             	add    esp,0x10
c001d3f1:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c001d3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3fa:	89 10                	mov    DWORD PTR [eax],edx
c001d3fc:	90                   	nop
c001d3fd:	83 c4 0c             	add    esp,0xc
c001d400:	c3                   	ret    
c001d401:	90                   	nop

c001d402 <ATA::flush(bool)>:
c001d402:	53                   	push   ebx
c001d403:	83 ec 08             	sub    esp,0x8
c001d406:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d40b:	19 c0                	sbb    eax,eax
c001d40d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d411:	83 e0 fd             	and    eax,0xfffffffd
c001d414:	05 ea 00 00 00       	add    eax,0xea
c001d419:	50                   	push   eax
c001d41a:	6a 07                	push   0x7
c001d41c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d423:	50                   	push   eax
c001d424:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d42a:	e8 59 f3 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d42f:	83 c4 0c             	add    esp,0xc
c001d432:	6a 00                	push   0x0
c001d434:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d43b:	50                   	push   eax
c001d43c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d442:	e8 f7 fe ff ff       	call   c001d33e <IDE::polling(unsigned char, unsigned int)>
c001d447:	83 c4 18             	add    esp,0x18
c001d44a:	5b                   	pop    ebx
c001d44b:	c3                   	ret    

c001d44c <ATA::readyForCommand()>:
c001d44c:	56                   	push   esi
c001d44d:	53                   	push   ebx
c001d44e:	31 db                	xor    ebx,ebx
c001d450:	50                   	push   eax
c001d451:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d455:	50                   	push   eax
c001d456:	6a 0c                	push   0xc
c001d458:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d45f:	50                   	push   eax
c001d460:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d466:	e8 dd f3 ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001d46b:	83 c4 10             	add    esp,0x10
c001d46e:	a8 88                	test   al,0x88
c001d470:	74 23                	je     c001d495 <ATA::readyForCommand()+0x49>
c001d472:	43                   	inc    ebx
c001d473:	83 fb 63             	cmp    ebx,0x63
c001d476:	7e dd                	jle    c001d455 <ATA::readyForCommand()+0x9>
c001d478:	51                   	push   ecx
c001d479:	51                   	push   ecx
c001d47a:	6a 00                	push   0x0
c001d47c:	68 40 42 0f 00       	push   0xf4240
c001d481:	e8 0d ba ff ff       	call   c0018e93 <nanoSleep(unsigned long long)>
c001d486:	83 c4 10             	add    esp,0x10
c001d489:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d48f:	75 c4                	jne    c001d455 <ATA::readyForCommand()+0x9>
c001d491:	31 c0                	xor    eax,eax
c001d493:	eb 02                	jmp    c001d497 <ATA::readyForCommand()+0x4b>
c001d495:	b0 01                	mov    al,0x1
c001d497:	5a                   	pop    edx
c001d498:	5b                   	pop    ebx
c001d499:	5e                   	pop    esi
c001d49a:	c3                   	ret    
c001d49b:	90                   	nop

c001d49c <ATA::access(unsigned long long, int, void*, bool)>:
c001d49c:	55                   	push   ebp
c001d49d:	57                   	push   edi
c001d49e:	56                   	push   esi
c001d49f:	53                   	push   ebx
c001d4a0:	83 ec 2c             	sub    esp,0x2c
c001d4a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d4a7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d4ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4ae:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d4b2:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d4b5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d4b9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d4bd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d4c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4c7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d4cd:	c1 e0 06             	shl    eax,0x6
c001d4d0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d4d4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d4dc:	74 5d                	je     c001d53b <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d4de:	89 fa                	mov    edx,edi
c001d4e0:	89 f0                	mov    eax,esi
c001d4e2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d4e6:	c1 ea 1c             	shr    edx,0x1c
c001d4e9:	89 d1                	mov    ecx,edx
c001d4eb:	09 c1                	or     ecx,eax
c001d4ed:	74 25                	je     c001d514 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d4ef:	31 ed                	xor    ebp,ebp
c001d4f1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d4f8:	89 fa                	mov    edx,edi
c001d4fa:	89 f0                	mov    eax,esi
c001d4fc:	0f ad d0             	shrd   eax,edx,cl
c001d4ff:	d3 ea                	shr    edx,cl
c001d501:	f6 c1 20             	test   cl,0x20
c001d504:	74 02                	je     c001d508 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d506:	89 d0                	mov    eax,edx
c001d508:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d50c:	45                   	inc    ebp
c001d50d:	83 fd 06             	cmp    ebp,0x6
c001d510:	75 df                	jne    c001d4f1 <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d512:	eb 73                	jmp    c001d587 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d514:	89 f0                	mov    eax,esi
c001d516:	89 fa                	mov    edx,edi
c001d518:	0f ac d0 10          	shrd   eax,edx,0x10
c001d51c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d521:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d525:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d52c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d531:	c1 ee 18             	shr    esi,0x18
c001d534:	bf 01 00 00 00       	mov    edi,0x1
c001d539:	eb 53                	jmp    c001d58e <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d53b:	6a 00                	push   0x0
c001d53d:	6a 3f                	push   0x3f
c001d53f:	57                   	push   edi
c001d540:	56                   	push   esi
c001d541:	e8 86 1f 00 00       	call   c001f4cc <__umoddi3>
c001d546:	83 c4 10             	add    esp,0x10
c001d549:	40                   	inc    eax
c001d54a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d54e:	6a 00                	push   0x0
c001d550:	68 f0 03 00 00       	push   0x3f0
c001d555:	57                   	push   edi
c001d556:	56                   	push   esi
c001d557:	e8 70 1e 00 00       	call   c001f3cc <__udivdi3>
c001d55c:	83 c4 10             	add    esp,0x10
c001d55f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d564:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d56b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d570:	6a 00                	push   0x0
c001d572:	6a 3f                	push   0x3f
c001d574:	57                   	push   edi
c001d575:	31 ff                	xor    edi,edi
c001d577:	56                   	push   esi
c001d578:	e8 4f 1e 00 00       	call   c001f3cc <__udivdi3>
c001d57d:	89 c6                	mov    esi,eax
c001d57f:	83 c4 10             	add    esp,0x10
c001d582:	83 e6 0f             	and    esi,0xf
c001d585:	eb 07                	jmp    c001d58e <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d587:	31 f6                	xor    esi,esi
c001d589:	bf 02 00 00 00       	mov    edi,0x2
c001d58e:	50                   	push   eax
c001d58f:	6a 00                	push   0x0
c001d591:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d598:	50                   	push   eax
c001d599:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d59d:	e8 f8 f3 ff ff       	call   c001c99a <IDE::enableIRQs(unsigned char, bool)>
c001d5a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5a5:	e8 a2 fe ff ff       	call   c001d44c <ATA::readyForCommand()>
c001d5aa:	83 c4 10             	add    esp,0x10
c001d5ad:	84 c0                	test   al,al
c001d5af:	75 0a                	jne    c001d5bb <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d5b1:	be 01 00 00 00       	mov    esi,0x1
c001d5b6:	e9 79 02 00 00       	jmp    c001d834 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d5bb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d5c1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d5c7:	c1 e0 04             	shl    eax,0x4
c001d5ca:	09 c6                	or     esi,eax
c001d5cc:	89 f8                	mov    eax,edi
c001d5ce:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d5d5:	84 c0                	test   al,al
c001d5d7:	75 05                	jne    c001d5de <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d5d9:	83 ce a0             	or     esi,0xffffffa0
c001d5dc:	eb 03                	jmp    c001d5e1 <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d5de:	83 ce e0             	or     esi,0xffffffe0
c001d5e1:	89 f0                	mov    eax,esi
c001d5e3:	0f b6 f0             	movzx  esi,al
c001d5e6:	56                   	push   esi
c001d5e7:	6a 06                	push   0x6
c001d5e9:	51                   	push   ecx
c001d5ea:	52                   	push   edx
c001d5eb:	e8 98 f1 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5f0:	83 c4 10             	add    esp,0x10
c001d5f3:	6a 00                	push   0x0
c001d5f5:	6a 01                	push   0x1
c001d5f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5fe:	50                   	push   eax
c001d5ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d605:	e8 7e f1 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d60a:	89 f8                	mov    eax,edi
c001d60c:	83 c4 10             	add    esp,0x10
c001d60f:	3c 02                	cmp    al,0x2
c001d611:	75 6e                	jne    c001d681 <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d613:	6a 00                	push   0x0
c001d615:	6a 08                	push   0x8
c001d617:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d61e:	50                   	push   eax
c001d61f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d625:	e8 5e f1 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d62a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d62f:	50                   	push   eax
c001d630:	6a 09                	push   0x9
c001d632:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d639:	50                   	push   eax
c001d63a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d640:	e8 43 f1 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d645:	83 c4 20             	add    esp,0x20
c001d648:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d64d:	50                   	push   eax
c001d64e:	6a 0a                	push   0xa
c001d650:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d657:	50                   	push   eax
c001d658:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d65e:	e8 25 f1 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d663:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d668:	50                   	push   eax
c001d669:	6a 0b                	push   0xb
c001d66b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d672:	50                   	push   eax
c001d673:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d679:	e8 0a f1 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d67e:	83 c4 20             	add    esp,0x20
c001d681:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d686:	50                   	push   eax
c001d687:	6a 02                	push   0x2
c001d689:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d690:	50                   	push   eax
c001d691:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d697:	e8 ec f0 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d69c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d6a1:	50                   	push   eax
c001d6a2:	6a 03                	push   0x3
c001d6a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6ab:	50                   	push   eax
c001d6ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6b2:	e8 d1 f0 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6b7:	83 c4 20             	add    esp,0x20
c001d6ba:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d6bf:	50                   	push   eax
c001d6c0:	6a 04                	push   0x4
c001d6c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6c9:	50                   	push   eax
c001d6ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6d0:	e8 b3 f0 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6da:	50                   	push   eax
c001d6db:	6a 05                	push   0x5
c001d6dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6e4:	50                   	push   eax
c001d6e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6eb:	e8 98 f0 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6f0:	83 c4 20             	add    esp,0x20
c001d6f3:	89 f8                	mov    eax,edi
c001d6f5:	3c 02                	cmp    al,0x2
c001d6f7:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d6fc:	75 06                	jne    c001d704 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d6fe:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d702:	75 40                	jne    c001d744 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d704:	89 f8                	mov    eax,edi
c001d706:	3c 02                	cmp    al,0x2
c001d708:	0f 95 c1             	setne  cl
c001d70b:	74 0b                	je     c001d718 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d70d:	b8 30 00 00 00       	mov    eax,0x30
c001d712:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d716:	75 31                	jne    c001d749 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d718:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d71b:	83 f2 01             	xor    edx,0x1
c001d71e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d723:	74 09                	je     c001d72e <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d725:	b8 24 00 00 00       	mov    eax,0x24
c001d72a:	84 d2                	test   dl,dl
c001d72c:	75 1b                	jne    c001d749 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d72e:	84 c9                	test   cl,cl
c001d730:	0f 84 7b fe ff ff    	je     c001d5b1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d736:	b8 20 00 00 00       	mov    eax,0x20
c001d73b:	84 d2                	test   dl,dl
c001d73d:	75 0a                	jne    c001d749 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d73f:	e9 6d fe ff ff       	jmp    c001d5b1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d744:	b8 34 00 00 00       	mov    eax,0x34
c001d749:	50                   	push   eax
c001d74a:	6a 07                	push   0x7
c001d74c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d753:	50                   	push   eax
c001d754:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d75a:	e8 29 f0 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d75f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d763:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d767:	83 c4 10             	add    esp,0x10
c001d76a:	85 f6                	test   esi,esi
c001d76c:	0f 84 a9 00 00 00    	je     c001d81b <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d772:	50                   	push   eax
c001d773:	6a 01                	push   0x1
c001d775:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d77c:	50                   	push   eax
c001d77d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d783:	e8 b6 fb ff ff       	call   c001d33e <IDE::polling(unsigned char, unsigned int)>
c001d788:	83 c4 10             	add    esp,0x10
c001d78b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d791:	84 c0                	test   al,al
c001d793:	74 1d                	je     c001d7b2 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d795:	0f b6 f0             	movzx  esi,al
c001d798:	56                   	push   esi
c001d799:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d7a0:	0f b6 d2             	movzx  edx,dl
c001d7a3:	50                   	push   eax
c001d7a4:	52                   	push   edx
c001d7a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7ab:	e8 f8 f9 ff ff       	call   c001d1a8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7b0:	eb 7f                	jmp    c001d831 <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d7b2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d7b7:	74 41                	je     c001d7fa <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d7b9:	31 c9                	xor    ecx,ecx
c001d7bb:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d7bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d7c3:	50                   	push   eax
c001d7c4:	50                   	push   eax
c001d7c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7cc:	50                   	push   eax
c001d7cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7d3:	e8 9e ef ff ff       	call   c001c776 <IDE::getBase(unsigned char)>
c001d7d8:	89 c2                	mov    edx,eax
c001d7da:	89 e8                	mov    eax,ebp
c001d7dc:	66 ef                	out    dx,ax
c001d7de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7e2:	83 c4 10             	add    esp,0x10
c001d7e5:	41                   	inc    ecx
c001d7e6:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d7ec:	75 cd                	jne    c001d7bb <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d7ee:	4e                   	dec    esi
c001d7ef:	81 c7 00 02 00 00    	add    edi,0x200
c001d7f5:	e9 70 ff ff ff       	jmp    c001d76a <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d7fa:	51                   	push   ecx
c001d7fb:	51                   	push   ecx
c001d7fc:	0f b6 d2             	movzx  edx,dl
c001d7ff:	52                   	push   edx
c001d800:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d806:	e8 6b ef ff ff       	call   c001c776 <IDE::getBase(unsigned char)>
c001d80b:	b9 00 01 00 00       	mov    ecx,0x100
c001d810:	89 c2                	mov    edx,eax
c001d812:	fc                   	cld    
c001d813:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d816:	83 c4 10             	add    esp,0x10
c001d819:	eb d3                	jmp    c001d7ee <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d81b:	31 f6                	xor    esi,esi
c001d81d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d821:	74 11                	je     c001d834 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d823:	50                   	push   eax
c001d824:	50                   	push   eax
c001d825:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d82a:	50                   	push   eax
c001d82b:	53                   	push   ebx
c001d82c:	e8 d1 fb ff ff       	call   c001d402 <ATA::flush(bool)>
c001d831:	83 c4 10             	add    esp,0x10
c001d834:	83 c4 2c             	add    esp,0x2c
c001d837:	89 f0                	mov    eax,esi
c001d839:	5b                   	pop    ebx
c001d83a:	5e                   	pop    esi
c001d83b:	5f                   	pop    edi
c001d83c:	5d                   	pop    ebp
c001d83d:	c3                   	ret    

c001d83e <ATA::read(unsigned long long, int, void*)>:
c001d83e:	57                   	push   edi
c001d83f:	b8 04 00 00 00       	mov    eax,0x4
c001d844:	56                   	push   esi
c001d845:	53                   	push   ebx
c001d846:	83 ec 10             	sub    esp,0x10
c001d849:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d84d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d851:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d855:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d859:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d85c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d862:	77 3b                	ja     c001d89f <ATA::read(unsigned long long, int, void*)+0x61>
c001d864:	b8 06 00 00 00       	mov    eax,0x6
c001d869:	85 d2                	test   edx,edx
c001d86b:	74 32                	je     c001d89f <ATA::read(unsigned long long, int, void*)+0x61>
c001d86d:	50                   	push   eax
c001d86e:	50                   	push   eax
c001d86f:	6a 00                	push   0x0
c001d871:	52                   	push   edx
c001d872:	53                   	push   ebx
c001d873:	57                   	push   edi
c001d874:	56                   	push   esi
c001d875:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d879:	e8 1e fc ff ff       	call   c001d49c <ATA::access(unsigned long long, int, void*, bool)>
c001d87e:	83 c4 20             	add    esp,0x20
c001d881:	85 c0                	test   eax,eax
c001d883:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d887:	75 11                	jne    c001d89a <ATA::read(unsigned long long, int, void*)+0x5c>
c001d889:	01 1d 24 63 02 c0    	add    DWORD PTR ds:0xc0026324,ebx
c001d88f:	e8 60 f7 fe ff       	call   c000cff4 <VgaText::updateDiskUsage()>
c001d894:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d898:	eb 05                	jmp    c001d89f <ATA::read(unsigned long long, int, void*)+0x61>
c001d89a:	b8 01 00 00 00       	mov    eax,0x1
c001d89f:	83 c4 10             	add    esp,0x10
c001d8a2:	5b                   	pop    ebx
c001d8a3:	5e                   	pop    esi
c001d8a4:	5f                   	pop    edi
c001d8a5:	c3                   	ret    

c001d8a6 <ATA::write(unsigned long long, int, void*)>:
c001d8a6:	57                   	push   edi
c001d8a7:	b8 04 00 00 00       	mov    eax,0x4
c001d8ac:	56                   	push   esi
c001d8ad:	53                   	push   ebx
c001d8ae:	83 ec 10             	sub    esp,0x10
c001d8b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d8b5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d8b9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d8bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8c1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d8c4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d8ca:	77 3b                	ja     c001d907 <ATA::write(unsigned long long, int, void*)+0x61>
c001d8cc:	b8 06 00 00 00       	mov    eax,0x6
c001d8d1:	85 d2                	test   edx,edx
c001d8d3:	74 32                	je     c001d907 <ATA::write(unsigned long long, int, void*)+0x61>
c001d8d5:	50                   	push   eax
c001d8d6:	50                   	push   eax
c001d8d7:	6a 01                	push   0x1
c001d8d9:	52                   	push   edx
c001d8da:	53                   	push   ebx
c001d8db:	57                   	push   edi
c001d8dc:	56                   	push   esi
c001d8dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8e1:	e8 b6 fb ff ff       	call   c001d49c <ATA::access(unsigned long long, int, void*, bool)>
c001d8e6:	83 c4 20             	add    esp,0x20
c001d8e9:	85 c0                	test   eax,eax
c001d8eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8ef:	75 11                	jne    c001d902 <ATA::write(unsigned long long, int, void*)+0x5c>
c001d8f1:	01 1d 20 63 02 c0    	add    DWORD PTR ds:0xc0026320,ebx
c001d8f7:	e8 f8 f6 fe ff       	call   c000cff4 <VgaText::updateDiskUsage()>
c001d8fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d900:	eb 05                	jmp    c001d907 <ATA::write(unsigned long long, int, void*)+0x61>
c001d902:	b8 01 00 00 00       	mov    eax,0x1
c001d907:	83 c4 10             	add    esp,0x10
c001d90a:	5b                   	pop    ebx
c001d90b:	5e                   	pop    esi
c001d90c:	5f                   	pop    edi
c001d90d:	c3                   	ret    

c001d90e <ATA::detectCHS()>:
c001d90e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d912:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d918:	c1 e0 06             	shl    eax,0x6
c001d91b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d921:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d92b:	c7 44 24 04 a3 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc00235a3
c001d933:	e9 10 80 ff ff       	jmp    c0015948 <Krnl::panic(char const*)>

c001d938 <ATA::open(int, int, void*)>:
c001d938:	53                   	push   ebx
c001d939:	83 ec 08             	sub    esp,0x8
c001d93c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d940:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d944:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d948:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d94e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d954:	c1 e0 06             	shl    eax,0x6
c001d957:	01 d0                	add    eax,edx
c001d959:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d960:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d966:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d96d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d977:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d97d:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d984:	75 0c                	jne    c001d992 <ATA::open(int, int, void*)+0x5a>
c001d986:	83 ec 0c             	sub    esp,0xc
c001d989:	53                   	push   ebx
c001d98a:	e8 7f ff ff ff       	call   c001d90e <ATA::detectCHS()>
c001d98f:	83 c4 10             	add    esp,0x10
c001d992:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d998:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d99e:	c1 e0 06             	shl    eax,0x6
c001d9a1:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d9a8:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d9b2:	d1 e8                	shr    eax,1
c001d9b4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d9ba:	6a 04                	push   0x4
c001d9bc:	6a 0c                	push   0xc
c001d9be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9c5:	50                   	push   eax
c001d9c6:	52                   	push   edx
c001d9c7:	e8 bc ed ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9cc:	90                   	nop
c001d9cd:	90                   	nop
c001d9ce:	6a 00                	push   0x0
c001d9d0:	6a 0c                	push   0xc
c001d9d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9d9:	50                   	push   eax
c001d9da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9e0:	e8 a3 ed ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9e5:	83 c4 14             	add    esp,0x14
c001d9e8:	53                   	push   ebx
c001d9e9:	e8 ee 2f ff ff       	call   c00109dc <PhysicalDisk::startCache()>
c001d9ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d9f1:	e8 c2 4f ff ff       	call   c00129b8 <createPartitionsForDisk(PhysicalDisk*)>
c001d9f6:	83 c4 18             	add    esp,0x18
c001d9f9:	31 c0                	xor    eax,eax
c001d9fb:	5b                   	pop    ebx
c001d9fc:	c3                   	ret    
c001d9fd:	90                   	nop

c001d9fe <ATAPI::write(unsigned long long, int, void*)>:
c001d9fe:	b8 03 00 00 00       	mov    eax,0x3
c001da03:	c3                   	ret    

c001da04 <ATAPI::close(int, int, void*)>:
c001da04:	83 ec 0c             	sub    esp,0xc
c001da07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da0b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da11:	85 c0                	test   eax,eax
c001da13:	74 0c                	je     c001da21 <ATAPI::close(int, int, void*)+0x1d>
c001da15:	83 ec 0c             	sub    esp,0xc
c001da18:	8b 10                	mov    edx,DWORD PTR [eax]
c001da1a:	50                   	push   eax
c001da1b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001da1e:	83 c4 10             	add    esp,0x10
c001da21:	31 c0                	xor    eax,eax
c001da23:	83 c4 0c             	add    esp,0xc
c001da26:	c3                   	ret    
c001da27:	90                   	nop

c001da28 <ATAPI::ATAPI()>:
c001da28:	83 ec 0c             	sub    esp,0xc
c001da2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da2f:	83 ec 04             	sub    esp,0x4
c001da32:	68 00 08 00 00       	push   0x800
c001da37:	68 ec 35 02 c0       	push   0xc00235ec
c001da3c:	50                   	push   eax
c001da3d:	e8 32 2f ff ff       	call   c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001da42:	83 c4 10             	add    esp,0x10
c001da45:	ba 2c 36 02 c0       	mov    edx,0xc002362c
c001da4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da4e:	89 10                	mov    DWORD PTR [eax],edx
c001da50:	90                   	nop
c001da51:	83 c4 0c             	add    esp,0xc
c001da54:	c3                   	ret    
c001da55:	90                   	nop

c001da56 <ATAPI::readyForCommand()>:
c001da56:	56                   	push   esi
c001da57:	53                   	push   ebx
c001da58:	31 db                	xor    ebx,ebx
c001da5a:	50                   	push   eax
c001da5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da5f:	50                   	push   eax
c001da60:	6a 0c                	push   0xc
c001da62:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001da69:	50                   	push   eax
c001da6a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001da70:	e8 d3 ed ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001da75:	83 c4 10             	add    esp,0x10
c001da78:	a8 88                	test   al,0x88
c001da7a:	74 23                	je     c001da9f <ATAPI::readyForCommand()+0x49>
c001da7c:	43                   	inc    ebx
c001da7d:	83 fb 63             	cmp    ebx,0x63
c001da80:	7e dd                	jle    c001da5f <ATAPI::readyForCommand()+0x9>
c001da82:	51                   	push   ecx
c001da83:	51                   	push   ecx
c001da84:	6a 00                	push   0x0
c001da86:	68 40 42 0f 00       	push   0xf4240
c001da8b:	e8 03 b4 ff ff       	call   c0018e93 <nanoSleep(unsigned long long)>
c001da90:	83 c4 10             	add    esp,0x10
c001da93:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001da99:	75 c4                	jne    c001da5f <ATAPI::readyForCommand()+0x9>
c001da9b:	31 c0                	xor    eax,eax
c001da9d:	eb 02                	jmp    c001daa1 <ATAPI::readyForCommand()+0x4b>
c001da9f:	b0 01                	mov    al,0x1
c001daa1:	5a                   	pop    edx
c001daa2:	5b                   	pop    ebx
c001daa3:	5e                   	pop    esi
c001daa4:	c3                   	ret    
c001daa5:	90                   	nop

c001daa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001daa6:	55                   	push   ebp
c001daa7:	57                   	push   edi
c001daa8:	56                   	push   esi
c001daa9:	53                   	push   ebx
c001daaa:	83 ec 20             	sub    esp,0x20
c001daad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dab1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dab5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dab9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dabd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dac1:	6a 01                	push   0x1
c001dac3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001daca:	50                   	push   eax
c001dacb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dad1:	e8 c4 ee ff ff       	call   c001c99a <IDE::enableIRQs(unsigned char, bool)>
c001dad6:	5e                   	pop    esi
c001dad7:	58                   	pop    eax
c001dad8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dadf:	50                   	push   eax
c001dae0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dae6:	e8 77 ec ff ff       	call   c001c762 <IDE::prepareInterrupt(unsigned char)>
c001daeb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001daee:	e8 63 ff ff ff       	call   c001da56 <ATAPI::readyForCommand()>
c001daf3:	83 c4 10             	add    esp,0x10
c001daf6:	84 c0                	test   al,al
c001daf8:	75 0a                	jne    c001db04 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dafa:	bb 01 00 00 00       	mov    ebx,0x1
c001daff:	e9 57 02 00 00       	jmp    c001dd5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001db04:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001db0a:	c1 e0 04             	shl    eax,0x4
c001db0d:	0f b6 c0             	movzx  eax,al
c001db10:	50                   	push   eax
c001db11:	6a 06                	push   0x6
c001db13:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db1a:	50                   	push   eax
c001db1b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db21:	e8 62 ec ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db26:	6a 00                	push   0x0
c001db28:	6a 01                	push   0x1
c001db2a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db31:	50                   	push   eax
c001db32:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db38:	e8 4b ec ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db3d:	83 c4 20             	add    esp,0x20
c001db40:	0f b6 c3             	movzx  eax,bl
c001db43:	50                   	push   eax
c001db44:	6a 04                	push   0x4
c001db46:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db4d:	50                   	push   eax
c001db4e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db54:	0f b6 df             	movzx  ebx,bh
c001db57:	e8 2c ec ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db5c:	53                   	push   ebx
c001db5d:	6a 05                	push   0x5
c001db5f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db66:	50                   	push   eax
c001db67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db6d:	e8 16 ec ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db72:	83 c4 20             	add    esp,0x20
c001db75:	68 a0 00 00 00       	push   0xa0
c001db7a:	6a 07                	push   0x7
c001db7c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db83:	50                   	push   eax
c001db84:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db8a:	e8 f9 eb ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db8f:	83 c4 0c             	add    esp,0xc
c001db92:	6a 01                	push   0x1
c001db94:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db9b:	50                   	push   eax
c001db9c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dba2:	e8 97 f7 ff ff       	call   c001d33e <IDE::polling(unsigned char, unsigned int)>
c001dba7:	83 c4 10             	add    esp,0x10
c001dbaa:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dbb0:	84 c0                	test   al,al
c001dbb2:	74 23                	je     c001dbd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dbb4:	0f b6 d8             	movzx  ebx,al
c001dbb7:	53                   	push   ebx
c001dbb8:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dbbf:	0f b6 d2             	movzx  edx,dl
c001dbc2:	50                   	push   eax
c001dbc3:	52                   	push   edx
c001dbc4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbca:	e8 d9 f5 ff ff       	call   c001d1a8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dbcf:	83 c4 10             	add    esp,0x10
c001dbd2:	e9 84 01 00 00       	jmp    c001dd5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dbd7:	53                   	push   ebx
c001dbd8:	53                   	push   ebx
c001dbd9:	0f b6 d2             	movzx  edx,dl
c001dbdc:	52                   	push   edx
c001dbdd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbe3:	e8 8e eb ff ff       	call   c001c776 <IDE::getBase(unsigned char)>
c001dbe8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dbec:	b9 06 00 00 00       	mov    ecx,0x6
c001dbf1:	89 c2                	mov    edx,eax
c001dbf3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dbf6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dbfa:	83 c4 10             	add    esp,0x10
c001dbfd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dc03:	85 db                	test   ebx,ebx
c001dc05:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dc0c:	0f 84 ec 00 00 00    	je     c001dcfe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dc12:	51                   	push   ecx
c001dc13:	51                   	push   ecx
c001dc14:	52                   	push   edx
c001dc15:	50                   	push   eax
c001dc16:	e8 db ec ff ff       	call   c001c8f6 <IDE::waitInterrupt(unsigned char)>
c001dc1b:	83 c4 10             	add    esp,0x10
c001dc1e:	84 c0                	test   al,al
c001dc20:	0f 84 d4 fe ff ff    	je     c001dafa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dc26:	56                   	push   esi
c001dc27:	56                   	push   esi
c001dc28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc2f:	50                   	push   eax
c001dc30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc36:	e8 27 eb ff ff       	call   c001c762 <IDE::prepareInterrupt(unsigned char)>
c001dc3b:	83 c4 0c             	add    esp,0xc
c001dc3e:	6a 04                	push   0x4
c001dc40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc47:	50                   	push   eax
c001dc48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc4e:	e8 f5 eb ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001dc53:	83 c4 0c             	add    esp,0xc
c001dc56:	6a 05                	push   0x5
c001dc58:	89 c6                	mov    esi,eax
c001dc5a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc61:	50                   	push   eax
c001dc62:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc68:	e8 db eb ff ff       	call   c001c848 <IDE::read(unsigned char, unsigned char)>
c001dc6d:	89 f1                	mov    ecx,esi
c001dc6f:	0f b6 c0             	movzx  eax,al
c001dc72:	c1 e0 08             	shl    eax,0x8
c001dc75:	0f b6 f1             	movzx  esi,cl
c001dc78:	09 c6                	or     esi,eax
c001dc7a:	d1 fe                	sar    esi,1
c001dc7c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001dc80:	83 c4 10             	add    esp,0x10
c001dc83:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001dc88:	74 41                	je     c001dccb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001dc8a:	31 c9                	xor    ecx,ecx
c001dc8c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dc92:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dc96:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dc9d:	75 0a                	jne    c001dca9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dc9f:	01 c9                	add    ecx,ecx
c001dca1:	01 cd                	add    ebp,ecx
c001dca3:	4b                   	dec    ebx
c001dca4:	e9 54 ff ff ff       	jmp    c001dbfd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dca9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001dcae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dcb2:	51                   	push   ecx
c001dcb3:	51                   	push   ecx
c001dcb4:	52                   	push   edx
c001dcb5:	50                   	push   eax
c001dcb6:	e8 bb ea ff ff       	call   c001c776 <IDE::getBase(unsigned char)>
c001dcbb:	89 c2                	mov    edx,eax
c001dcbd:	89 f0                	mov    eax,esi
c001dcbf:	66 ef                	out    dx,ax
c001dcc1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dcc5:	83 c4 10             	add    esp,0x10
c001dcc8:	41                   	inc    ecx
c001dcc9:	eb c1                	jmp    c001dc8c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001dccb:	31 f6                	xor    esi,esi
c001dccd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dcd3:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001dcd7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dcde:	75 06                	jne    c001dce6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001dce0:	01 f6                	add    esi,esi
c001dce2:	01 f5                	add    ebp,esi
c001dce4:	eb bd                	jmp    c001dca3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001dce6:	51                   	push   ecx
c001dce7:	51                   	push   ecx
c001dce8:	52                   	push   edx
c001dce9:	50                   	push   eax
c001dcea:	e8 87 ea ff ff       	call   c001c776 <IDE::getBase(unsigned char)>
c001dcef:	89 c2                	mov    edx,eax
c001dcf1:	66 ed                	in     ax,dx
c001dcf3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001dcf8:	83 c4 10             	add    esp,0x10
c001dcfb:	46                   	inc    esi
c001dcfc:	eb cf                	jmp    c001dccd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001dcfe:	51                   	push   ecx
c001dcff:	51                   	push   ecx
c001dd00:	52                   	push   edx
c001dd01:	50                   	push   eax
c001dd02:	e8 ef eb ff ff       	call   c001c8f6 <IDE::waitInterrupt(unsigned char)>
c001dd07:	83 c4 10             	add    esp,0x10
c001dd0a:	84 c0                	test   al,al
c001dd0c:	0f 84 e8 fd ff ff    	je     c001dafa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd12:	52                   	push   edx
c001dd13:	bb a0 86 01 00       	mov    ebx,0x186a0
c001dd18:	52                   	push   edx
c001dd19:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd20:	50                   	push   eax
c001dd21:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd27:	e8 36 ea ff ff       	call   c001c762 <IDE::prepareInterrupt(unsigned char)>
c001dd2c:	83 c4 10             	add    esp,0x10
c001dd2f:	50                   	push   eax
c001dd30:	50                   	push   eax
c001dd31:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd38:	50                   	push   eax
c001dd39:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd3f:	e8 32 ea ff ff       	call   c001c776 <IDE::getBase(unsigned char)>
c001dd44:	8d 50 07             	lea    edx,[eax+0x7]
c001dd47:	ec                   	in     al,dx
c001dd48:	83 c4 10             	add    esp,0x10
c001dd4b:	a8 88                	test   al,0x88
c001dd4d:	74 0a                	je     c001dd59 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001dd4f:	4b                   	dec    ebx
c001dd50:	75 dd                	jne    c001dd2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dd52:	bb 02 00 00 00       	mov    ebx,0x2
c001dd57:	eb 02                	jmp    c001dd5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd59:	31 db                	xor    ebx,ebx
c001dd5b:	83 c4 1c             	add    esp,0x1c
c001dd5e:	89 d8                	mov    eax,ebx
c001dd60:	5b                   	pop    ebx
c001dd61:	5e                   	pop    esi
c001dd62:	5f                   	pop    edi
c001dd63:	5d                   	pop    ebp
c001dd64:	c3                   	ret    
c001dd65:	90                   	nop

c001dd66 <ATAPI::diskRemoved()>:
c001dd66:	83 ec 18             	sub    esp,0x18
c001dd69:	68 f7 35 02 c0       	push   0xc00235f7
c001dd6e:	e8 e6 13 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001dd73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd77:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001dd7e:	83 c4 1c             	add    esp,0x1c
c001dd81:	c3                   	ret    

c001dd82 <ATAPI::eject()>:
c001dd82:	57                   	push   edi
c001dd83:	b9 03 00 00 00       	mov    ecx,0x3
c001dd88:	53                   	push   ebx
c001dd89:	83 ec 14             	sub    esp,0x14
c001dd8c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dd90:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dd94:	fc                   	cld    
c001dd95:	31 c0                	xor    eax,eax
c001dd97:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dd99:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dd9e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dda3:	50                   	push   eax
c001dda4:	50                   	push   eax
c001dda5:	6a 00                	push   0x0
c001dda7:	6a 00                	push   0x0
c001dda9:	6a 00                	push   0x0
c001ddab:	6a 02                	push   0x2
c001ddad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ddb1:	50                   	push   eax
c001ddb2:	53                   	push   ebx
c001ddb3:	e8 ee fc ff ff       	call   c001daa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ddb8:	83 c4 14             	add    esp,0x14
c001ddbb:	53                   	push   ebx
c001ddbc:	e8 a5 ff ff ff       	call   c001dd66 <ATAPI::diskRemoved()>
c001ddc1:	83 c4 24             	add    esp,0x24
c001ddc4:	5b                   	pop    ebx
c001ddc5:	5f                   	pop    edi
c001ddc6:	c3                   	ret    
c001ddc7:	90                   	nop

c001ddc8 <ATAPI::diskInserted()>:
c001ddc8:	53                   	push   ebx
c001ddc9:	83 ec 14             	sub    esp,0x14
c001ddcc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ddd0:	68 0d 36 02 c0       	push   0xc002360d
c001ddd5:	e8 7f 13 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ddda:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001dde1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dde4:	e8 f3 2b ff ff       	call   c00109dc <PhysicalDisk::startCache()>
c001dde9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001dded:	83 c4 18             	add    esp,0x18
c001ddf0:	5b                   	pop    ebx
c001ddf1:	e9 c2 4b ff ff       	jmp    c00129b8 <createPartitionsForDisk(PhysicalDisk*)>

c001ddf6 <ATAPI::detectMedia()>:
c001ddf6:	56                   	push   esi
c001ddf7:	53                   	push   ebx
c001ddf8:	83 ec 28             	sub    esp,0x28
c001ddfb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ddff:	6a 0c                	push   0xc
c001de01:	6a 00                	push   0x0
c001de03:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001de07:	56                   	push   esi
c001de08:	e8 ad 28 fe ff       	call   c00006ba <memset>
c001de0d:	58                   	pop    eax
c001de0e:	5a                   	pop    edx
c001de0f:	6a 00                	push   0x0
c001de11:	6a 00                	push   0x0
c001de13:	6a 00                	push   0x0
c001de15:	6a 00                	push   0x0
c001de17:	56                   	push   esi
c001de18:	53                   	push   ebx
c001de19:	e8 88 fc ff ff       	call   c001daa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de1e:	83 c4 1c             	add    esp,0x1c
c001de21:	6a 0c                	push   0xc
c001de23:	6a 00                	push   0x0
c001de25:	56                   	push   esi
c001de26:	e8 8f 28 fe ff       	call   c00006ba <memset>
c001de2b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001de30:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001de35:	59                   	pop    ecx
c001de36:	58                   	pop    eax
c001de37:	6a 01                	push   0x1
c001de39:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001de3d:	50                   	push   eax
c001de3e:	6a 00                	push   0x0
c001de40:	6a 12                	push   0x12
c001de42:	56                   	push   esi
c001de43:	53                   	push   ebx
c001de44:	e8 5d fc ff ff       	call   c001daa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de49:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001de4d:	83 c4 20             	add    esp,0x20
c001de50:	83 e0 7f             	and    eax,0x7f
c001de53:	3c 70                	cmp    al,0x70
c001de55:	74 15                	je     c001de6c <ATAPI::detectMedia()+0x76>
c001de57:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de5e:	75 0c                	jne    c001de6c <ATAPI::detectMedia()+0x76>
c001de60:	83 ec 0c             	sub    esp,0xc
c001de63:	53                   	push   ebx
c001de64:	e8 5f ff ff ff       	call   c001ddc8 <ATAPI::diskInserted()>
c001de69:	83 c4 10             	add    esp,0x10
c001de6c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001de70:	83 e0 0f             	and    eax,0xf
c001de73:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001de78:	75 18                	jne    c001de92 <ATAPI::detectMedia()+0x9c>
c001de7a:	3c 02                	cmp    al,0x2
c001de7c:	75 14                	jne    c001de92 <ATAPI::detectMedia()+0x9c>
c001de7e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de85:	74 24                	je     c001deab <ATAPI::detectMedia()+0xb5>
c001de87:	83 ec 0c             	sub    esp,0xc
c001de8a:	53                   	push   ebx
c001de8b:	e8 d6 fe ff ff       	call   c001dd66 <ATAPI::diskRemoved()>
c001de90:	eb 16                	jmp    c001dea8 <ATAPI::detectMedia()+0xb2>
c001de92:	84 c0                	test   al,al
c001de94:	75 15                	jne    c001deab <ATAPI::detectMedia()+0xb5>
c001de96:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de9d:	75 0c                	jne    c001deab <ATAPI::detectMedia()+0xb5>
c001de9f:	83 ec 0c             	sub    esp,0xc
c001dea2:	53                   	push   ebx
c001dea3:	e8 20 ff ff ff       	call   c001ddc8 <ATAPI::diskInserted()>
c001dea8:	83 c4 10             	add    esp,0x10
c001deab:	83 c4 24             	add    esp,0x24
c001deae:	5b                   	pop    ebx
c001deaf:	5e                   	pop    esi
c001deb0:	c3                   	ret    
c001deb1:	90                   	nop

c001deb2 <ATAPI::open(int, int, void*)>:
c001deb2:	53                   	push   ebx
c001deb3:	83 ec 08             	sub    esp,0x8
c001deb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001deba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001debe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dec2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dec8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dece:	c1 e0 06             	shl    eax,0x6
c001ded1:	01 d0                	add    eax,edx
c001ded3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001deda:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dee0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001dee7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001def1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001def7:	6a 04                	push   0x4
c001def9:	6a 0c                	push   0xc
c001defb:	51                   	push   ecx
c001defc:	52                   	push   edx
c001defd:	e8 86 e8 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df02:	90                   	nop
c001df03:	90                   	nop
c001df04:	6a 00                	push   0x0
c001df06:	6a 0c                	push   0xc
c001df08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df0f:	50                   	push   eax
c001df10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df16:	e8 6d e8 ff ff       	call   c001c788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df1b:	83 c4 14             	add    esp,0x14
c001df1e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001df25:	53                   	push   ebx
c001df26:	e8 cb fe ff ff       	call   c001ddf6 <ATAPI::detectMedia()>
c001df2b:	83 c4 18             	add    esp,0x18
c001df2e:	31 c0                	xor    eax,eax
c001df30:	5b                   	pop    ebx
c001df31:	c3                   	ret    

c001df32 <ATAPI::read(unsigned long long, int, void*)>:
c001df32:	55                   	push   ebp
c001df33:	57                   	push   edi
c001df34:	56                   	push   esi
c001df35:	53                   	push   ebx
c001df36:	83 ec 1c             	sub    esp,0x1c
c001df39:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df3d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001df41:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001df45:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df4c:	74 3c                	je     c001df8a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001df4e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001df52:	b9 03 00 00 00       	mov    ecx,0x3
c001df57:	fc                   	cld    
c001df58:	31 c0                	xor    eax,eax
c001df5a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001df5c:	0f ce                	bswap  esi
c001df5e:	89 e8                	mov    eax,ebp
c001df60:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001df65:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001df69:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001df6d:	50                   	push   eax
c001df6e:	50                   	push   eax
c001df6f:	55                   	push   ebp
c001df70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df74:	c1 e5 0b             	shl    ebp,0xb
c001df77:	6a 00                	push   0x0
c001df79:	55                   	push   ebp
c001df7a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001df7e:	50                   	push   eax
c001df7f:	53                   	push   ebx
c001df80:	e8 21 fb ff ff       	call   c001daa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df85:	83 c4 20             	add    esp,0x20
c001df88:	eb 1a                	jmp    c001dfa4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001df8a:	83 ec 0c             	sub    esp,0xc
c001df8d:	53                   	push   ebx
c001df8e:	e8 63 fe ff ff       	call   c001ddf6 <ATAPI::detectMedia()>
c001df93:	83 c4 10             	add    esp,0x10
c001df96:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df9d:	75 af                	jne    c001df4e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001df9f:	b8 02 00 00 00       	mov    eax,0x2
c001dfa4:	83 c4 1c             	add    esp,0x1c
c001dfa7:	5b                   	pop    ebx
c001dfa8:	5e                   	pop    esi
c001dfa9:	5f                   	pop    edi
c001dfaa:	5d                   	pop    ebp
c001dfab:	c3                   	ret    

c001dfac <AVX::open(int, int, void*)>:
c001dfac:	83 ec 0c             	sub    esp,0xc
c001dfaf:	e8 94 10 00 00       	call   c001f048 <avxInit>
c001dfb4:	b8 00 00 00 00       	mov    eax,0x0
c001dfb9:	83 c4 0c             	add    esp,0xc
c001dfbc:	c3                   	ret    
c001dfbd:	90                   	nop

c001dfbe <AVX::close(int, int, void*)>:
c001dfbe:	83 ec 0c             	sub    esp,0xc
c001dfc1:	e8 83 10 00 00       	call   c001f049 <avxClose>
c001dfc6:	b8 00 00 00 00       	mov    eax,0x0
c001dfcb:	83 c4 0c             	add    esp,0xc
c001dfce:	c3                   	ret    
c001dfcf:	90                   	nop

c001dfd0 <AVX::available()>:
c001dfd0:	83 ec 0c             	sub    esp,0xc
c001dfd3:	e8 68 10 00 00       	call   c001f040 <avxDetect>
c001dfd8:	85 c0                	test   eax,eax
c001dfda:	0f 95 c0             	setne  al
c001dfdd:	83 c4 0c             	add    esp,0xc
c001dfe0:	c3                   	ret    
c001dfe1:	90                   	nop

c001dfe2 <AVX::save(void*)>:
c001dfe2:	83 ec 0c             	sub    esp,0xc
c001dfe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfe9:	83 ec 0c             	sub    esp,0xc
c001dfec:	50                   	push   eax
c001dfed:	e8 54 10 00 00       	call   c001f046 <avxSave>
c001dff2:	83 c4 10             	add    esp,0x10
c001dff5:	90                   	nop
c001dff6:	83 c4 0c             	add    esp,0xc
c001dff9:	c3                   	ret    

c001dffa <AVX::load(void*)>:
c001dffa:	83 ec 0c             	sub    esp,0xc
c001dffd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e001:	83 ec 0c             	sub    esp,0xc
c001e004:	50                   	push   eax
c001e005:	e8 3d 10 00 00       	call   c001f047 <avxLoad>
c001e00a:	83 c4 10             	add    esp,0x10
c001e00d:	90                   	nop
c001e00e:	83 c4 0c             	add    esp,0xc
c001e011:	c3                   	ret    

c001e012 <AVX::AVX()>:
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e019:	83 ec 08             	sub    esp,0x8
c001e01c:	68 58 36 02 c0       	push   0xc0023658
c001e021:	50                   	push   eax
c001e022:	e8 2b 2a ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001e027:	83 c4 10             	add    esp,0x10
c001e02a:	ba 68 36 02 c0       	mov    edx,0xc0023668
c001e02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e033:	89 10                	mov    DWORD PTR [eax],edx
c001e035:	90                   	nop
c001e036:	83 c4 0c             	add    esp,0xc
c001e039:	c3                   	ret    

c001e03a <MMX::available()>:
c001e03a:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001e03f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e045:	83 e0 20             	and    eax,0x20
c001e048:	84 c0                	test   al,al
c001e04a:	0f 95 c0             	setne  al
c001e04d:	c3                   	ret    

c001e04e <MMX::open(int, int, void*)>:
c001e04e:	83 ec 0c             	sub    esp,0xc
c001e051:	e8 66 10 00 00       	call   c001f0bc <x87Init>
c001e056:	b8 00 00 00 00       	mov    eax,0x0
c001e05b:	83 c4 0c             	add    esp,0xc
c001e05e:	c3                   	ret    
c001e05f:	90                   	nop

c001e060 <MMX::close(int, int, void*)>:
c001e060:	83 ec 0c             	sub    esp,0xc
c001e063:	e8 6e 10 00 00       	call   c001f0d6 <x87Close>
c001e068:	b8 00 00 00 00       	mov    eax,0x0
c001e06d:	83 c4 0c             	add    esp,0xc
c001e070:	c3                   	ret    
c001e071:	90                   	nop

c001e072 <MMX::save(void*)>:
c001e072:	83 ec 0c             	sub    esp,0xc
c001e075:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e079:	83 ec 0c             	sub    esp,0xc
c001e07c:	50                   	push   eax
c001e07d:	e8 2f 10 00 00       	call   c001f0b1 <x87Save>
c001e082:	83 c4 10             	add    esp,0x10
c001e085:	90                   	nop
c001e086:	83 c4 0c             	add    esp,0xc
c001e089:	c3                   	ret    

c001e08a <MMX::load(void*)>:
c001e08a:	83 ec 0c             	sub    esp,0xc
c001e08d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e091:	83 ec 0c             	sub    esp,0xc
c001e094:	50                   	push   eax
c001e095:	e8 1d 10 00 00       	call   c001f0b7 <x87Load>
c001e09a:	83 c4 10             	add    esp,0x10
c001e09d:	90                   	nop
c001e09e:	83 c4 0c             	add    esp,0xc
c001e0a1:	c3                   	ret    

c001e0a2 <MMX::MMX()>:
c001e0a2:	83 ec 0c             	sub    esp,0xc
c001e0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a9:	83 ec 08             	sub    esp,0x8
c001e0ac:	68 98 36 02 c0       	push   0xc0023698
c001e0b1:	50                   	push   eax
c001e0b2:	e8 9b 29 ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001e0b7:	83 c4 10             	add    esp,0x10
c001e0ba:	ba a8 36 02 c0       	mov    edx,0xc00236a8
c001e0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0c3:	89 10                	mov    DWORD PTR [eax],edx
c001e0c5:	90                   	nop
c001e0c6:	83 c4 0c             	add    esp,0xc
c001e0c9:	c3                   	ret    

c001e0ca <SSE::open(int, int, void*)>:
c001e0ca:	83 ec 0c             	sub    esp,0xc
c001e0cd:	e8 a5 0f 00 00       	call   c001f077 <sseInit>
c001e0d2:	b8 00 00 00 00       	mov    eax,0x0
c001e0d7:	83 c4 0c             	add    esp,0xc
c001e0da:	c3                   	ret    
c001e0db:	90                   	nop

c001e0dc <SSE::close(int, int, void*)>:
c001e0dc:	83 ec 0c             	sub    esp,0xc
c001e0df:	e8 a3 0f 00 00       	call   c001f087 <sseClose>
c001e0e4:	b8 00 00 00 00       	mov    eax,0x0
c001e0e9:	83 c4 0c             	add    esp,0xc
c001e0ec:	c3                   	ret    
c001e0ed:	90                   	nop

c001e0ee <SSE::available()>:
c001e0ee:	83 ec 1c             	sub    esp,0x1c
c001e0f1:	e8 5a 0f 00 00       	call   c001f050 <sseDetect>
c001e0f6:	85 c0                	test   eax,eax
c001e0f8:	0f 95 c0             	setne  al
c001e0fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e0ff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e103:	83 c4 1c             	add    esp,0x1c
c001e106:	c3                   	ret    
c001e107:	90                   	nop

c001e108 <SSE::save(void*)>:
c001e108:	83 ec 0c             	sub    esp,0xc
c001e10b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e10f:	83 ec 0c             	sub    esp,0xc
c001e112:	50                   	push   eax
c001e113:	e8 53 0f 00 00       	call   c001f06b <sseSave>
c001e118:	83 c4 10             	add    esp,0x10
c001e11b:	90                   	nop
c001e11c:	83 c4 0c             	add    esp,0xc
c001e11f:	c3                   	ret    

c001e120 <SSE::load(void*)>:
c001e120:	83 ec 0c             	sub    esp,0xc
c001e123:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e127:	83 ec 0c             	sub    esp,0xc
c001e12a:	50                   	push   eax
c001e12b:	e8 41 0f 00 00       	call   c001f071 <sseLoad>
c001e130:	83 c4 10             	add    esp,0x10
c001e133:	90                   	nop
c001e134:	83 c4 0c             	add    esp,0xc
c001e137:	c3                   	ret    

c001e138 <SSE::SSE()>:
c001e138:	83 ec 0c             	sub    esp,0xc
c001e13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e13f:	83 ec 08             	sub    esp,0x8
c001e142:	68 d8 36 02 c0       	push   0xc00236d8
c001e147:	50                   	push   eax
c001e148:	e8 05 29 ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001e14d:	83 c4 10             	add    esp,0x10
c001e150:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c001e155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e159:	89 10                	mov    DWORD PTR [eax],edx
c001e15b:	90                   	nop
c001e15c:	83 c4 0c             	add    esp,0xc
c001e15f:	c3                   	ret    

c001e160 <x87::open(int, int, void*)>:
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	e8 54 0f 00 00       	call   c001f0bc <x87Init>
c001e168:	b8 00 00 00 00       	mov    eax,0x0
c001e16d:	83 c4 0c             	add    esp,0xc
c001e170:	c3                   	ret    
c001e171:	90                   	nop

c001e172 <x87::close(int, int, void*)>:
c001e172:	83 ec 0c             	sub    esp,0xc
c001e175:	e8 5c 0f 00 00       	call   c001f0d6 <x87Close>
c001e17a:	b8 00 00 00 00       	mov    eax,0x0
c001e17f:	83 c4 0c             	add    esp,0xc
c001e182:	c3                   	ret    
c001e183:	90                   	nop

c001e184 <x87::available()>:
c001e184:	83 ec 0c             	sub    esp,0xc
c001e187:	e8 0a 0f 00 00       	call   c001f096 <x87Detect>
c001e18c:	85 c0                	test   eax,eax
c001e18e:	0f 95 c0             	setne  al
c001e191:	83 c4 0c             	add    esp,0xc
c001e194:	c3                   	ret    
c001e195:	90                   	nop

c001e196 <x87::save(void*)>:
c001e196:	83 ec 0c             	sub    esp,0xc
c001e199:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e19d:	83 ec 0c             	sub    esp,0xc
c001e1a0:	50                   	push   eax
c001e1a1:	e8 0b 0f 00 00       	call   c001f0b1 <x87Save>
c001e1a6:	83 c4 10             	add    esp,0x10
c001e1a9:	90                   	nop
c001e1aa:	83 c4 0c             	add    esp,0xc
c001e1ad:	c3                   	ret    

c001e1ae <x87::load(void*)>:
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1b5:	83 ec 0c             	sub    esp,0xc
c001e1b8:	50                   	push   eax
c001e1b9:	e8 f9 0e 00 00       	call   c001f0b7 <x87Load>
c001e1be:	83 c4 10             	add    esp,0x10
c001e1c1:	90                   	nop
c001e1c2:	83 c4 0c             	add    esp,0xc
c001e1c5:	c3                   	ret    

c001e1c6 <x87::x87()>:
c001e1c6:	83 ec 0c             	sub    esp,0xc
c001e1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1cd:	83 ec 08             	sub    esp,0x8
c001e1d0:	68 18 37 02 c0       	push   0xc0023718
c001e1d5:	50                   	push   eax
c001e1d6:	e8 77 28 ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001e1db:	83 c4 10             	add    esp,0x10
c001e1de:	ba 28 37 02 c0       	mov    edx,0xc0023728
c001e1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e7:	89 10                	mov    DWORD PTR [eax],edx
c001e1e9:	90                   	nop
c001e1ea:	83 c4 0c             	add    esp,0xc
c001e1ed:	c3                   	ret    

c001e1ee <APIC::disable()>:
c001e1ee:	90                   	nop
c001e1ef:	c3                   	ret    

c001e1f0 <APIC::close(int, int, void*)>:
c001e1f0:	55                   	push   ebp
c001e1f1:	89 e5                	mov    ebp,esp
c001e1f3:	83 ec 08             	sub    esp,0x8
c001e1f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e1f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1fb:	83 c0 3c             	add    eax,0x3c
c001e1fe:	8b 00                	mov    eax,DWORD PTR [eax]
c001e200:	83 ec 0c             	sub    esp,0xc
c001e203:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e206:	ff d0                	call   eax
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	b8 00 00 00 00       	mov    eax,0x0
c001e210:	c9                   	leave  
c001e211:	c3                   	ret    

c001e212 <IOAPIC::close(int, int, void*)>:
c001e212:	b8 00 00 00 00       	mov    eax,0x0
c001e217:	c3                   	ret    

c001e218 <APIC::io_wait()>:
c001e218:	eb 00                	jmp    c001e21a <APIC::io_wait()+0x2>
c001e21a:	eb 00                	jmp    c001e21c <APIC::io_wait()+0x4>
c001e21c:	90                   	nop
c001e21d:	c3                   	ret    

c001e21e <APIC::getBase()>:
c001e21e:	55                   	push   ebp
c001e21f:	89 e5                	mov    ebp,esp
c001e221:	83 ec 18             	sub    esp,0x18
c001e224:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001e229:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e22f:	83 e0 08             	and    eax,0x8
c001e232:	84 c0                	test   al,al
c001e234:	75 07                	jne    c001e23d <APIC::getBase()+0x1f>
c001e236:	b8 00 00 00 00       	mov    eax,0x0
c001e23b:	eb 21                	jmp    c001e25e <APIC::getBase()+0x40>
c001e23d:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001e242:	83 ec 08             	sub    esp,0x8
c001e245:	6a 1b                	push   0x1b
c001e247:	50                   	push   eax
c001e248:	e8 3f d3 fe ff       	call   c000b58c <Computer::rdmsr(unsigned int)>
c001e24d:	83 c4 10             	add    esp,0x10
c001e250:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e253:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e256:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e259:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e25e:	c9                   	leave  
c001e25f:	c3                   	ret    

c001e260 <APIC::eoi(unsigned char)>:
c001e260:	55                   	push   ebp
c001e261:	89 e5                	mov    ebp,esp
c001e263:	83 ec 28             	sub    esp,0x28
c001e266:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e269:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e26c:	83 ec 0c             	sub    esp,0xc
c001e26f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e272:	e8 a7 ff ff ff       	call   c001e21e <APIC::getBase()>
c001e277:	83 c4 10             	add    esp,0x10
c001e27a:	05 b0 00 00 00       	add    eax,0xb0
c001e27f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e282:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e285:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e28b:	90                   	nop
c001e28c:	c9                   	leave  
c001e28d:	c3                   	ret    

c001e28e <APIC::open(int, int, void*)>:
c001e28e:	55                   	push   ebp
c001e28f:	89 e5                	mov    ebp,esp
c001e291:	57                   	push   edi
c001e292:	56                   	push   esi
c001e293:	53                   	push   ebx
c001e294:	83 ec 1c             	sub    esp,0x1c
c001e297:	83 ec 0c             	sub    esp,0xc
c001e29a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e29d:	e8 7c ff ff ff       	call   c001e21e <APIC::getBase()>
c001e2a2:	83 c4 10             	add    esp,0x10
c001e2a5:	05 f0 00 00 00       	add    eax,0xf0
c001e2aa:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e2ad:	83 ec 0c             	sub    esp,0xc
c001e2b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2b3:	e8 66 ff ff ff       	call   c001e21e <APIC::getBase()>
c001e2b8:	83 c4 10             	add    esp,0x10
c001e2bb:	89 c2                	mov    edx,eax
c001e2bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2c0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e2c6:	89 c7                	mov    edi,eax
c001e2c8:	81 e7 ff 00 00 00    	and    edi,0xff
c001e2ce:	89 d0                	mov    eax,edx
c001e2d0:	ba 00 00 00 00       	mov    edx,0x0
c001e2d5:	89 c1                	mov    ecx,eax
c001e2d7:	80 e5 ff             	and    ch,0xff
c001e2da:	89 cb                	mov    ebx,ecx
c001e2dc:	89 d0                	mov    eax,edx
c001e2de:	25 ff 00 00 00       	and    eax,0xff
c001e2e3:	89 c6                	mov    esi,eax
c001e2e5:	89 d8                	mov    eax,ebx
c001e2e7:	89 f2                	mov    edx,esi
c001e2e9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e2ec:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e2ef:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e2f3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e2f7:	83 e0 00             	and    eax,0x0
c001e2fa:	09 d0                	or     eax,edx
c001e2fc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e303:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e309:	8d 50 01             	lea    edx,[eax+0x1]
c001e30c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e30f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e315:	31 d2                	xor    edx,edx
c001e317:	88 c2                	mov    dl,al
c001e319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e31c:	83 c2 08             	add    edx,0x8
c001e31f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e323:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e329:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e32f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e333:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e336:	8b 00                	mov    eax,DWORD PTR [eax]
c001e338:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e33b:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e342:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e345:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e348:	89 10                	mov    DWORD PTR [eax],edx
c001e34a:	b8 00 00 00 00       	mov    eax,0x0
c001e34f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e352:	5b                   	pop    ebx
c001e353:	5e                   	pop    esi
c001e354:	5f                   	pop    edi
c001e355:	5d                   	pop    ebp
c001e356:	c3                   	ret    
c001e357:	90                   	nop

c001e358 <IOAPIC::IOAPIC()>:
c001e358:	83 ec 0c             	sub    esp,0xc
c001e35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35f:	83 ec 08             	sub    esp,0x8
c001e362:	68 58 37 02 c0       	push   0xc0023758
c001e367:	50                   	push   eax
c001e368:	e8 f1 23 ff ff       	call   c001075e <Device::Device(char const*)>
c001e36d:	83 c4 10             	add    esp,0x10
c001e370:	ba 80 38 02 c0       	mov    edx,0xc0023880
c001e375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e379:	89 10                	mov    DWORD PTR [eax],edx
c001e37b:	90                   	nop
c001e37c:	83 c4 0c             	add    esp,0xc
c001e37f:	c3                   	ret    

c001e380 <APIC::APIC()>:
c001e380:	53                   	push   ebx
c001e381:	83 ec 18             	sub    esp,0x18
c001e384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e388:	83 ec 08             	sub    esp,0x8
c001e38b:	68 60 37 02 c0       	push   0xc0023760
c001e390:	50                   	push   eax
c001e391:	e8 16 2b ff ff       	call   c0010eac <InterruptController::InterruptController(char const*)>
c001e396:	83 c4 10             	add    esp,0x10
c001e399:	ba 38 38 02 c0       	mov    edx,0xc0023838
c001e39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3a2:	89 10                	mov    DWORD PTR [eax],edx
c001e3a4:	a0 80 63 02 c0       	mov    al,ds:0xc0026380
c001e3a9:	83 f0 01             	xor    eax,0x1
c001e3ac:	84 c0                	test   al,al
c001e3ae:	0f 84 a2 00 00 00    	je     c001e456 <APIC::APIC()+0xd6>
c001e3b4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e3b9:	a0 30 4e 02 c0       	mov    al,ds:0xc0024e30
c001e3be:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e3c2:	0f 83 87 00 00 00    	jae    c001e44f <APIC::APIC()+0xcf>
c001e3c8:	83 ec 0c             	sub    esp,0xc
c001e3cb:	68 68 01 00 00       	push   0x168
c001e3d0:	e8 4f 0c ff ff       	call   c000f024 <operator new(unsigned long)>
c001e3d5:	83 c4 10             	add    esp,0x10
c001e3d8:	89 c3                	mov    ebx,eax
c001e3da:	83 ec 0c             	sub    esp,0xc
c001e3dd:	53                   	push   ebx
c001e3de:	e8 75 ff ff ff       	call   c001e358 <IOAPIC::IOAPIC()>
c001e3e3:	83 c4 10             	add    esp,0x10
c001e3e6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e3ea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e3ee:	25 ff 00 00 00       	and    eax,0xff
c001e3f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e3f7:	89 14 85 60 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ca0],edx
c001e3fe:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c001e403:	40                   	inc    eax
c001e404:	a3 40 63 02 c0       	mov    ds:0xc0026340,eax
c001e409:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001e40e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e414:	83 ec 08             	sub    esp,0x8
c001e417:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e41b:	50                   	push   eax
c001e41c:	e8 4d 21 ff ff       	call   c001056e <Device::addChild(Device*)>
c001e421:	83 c4 10             	add    esp,0x10
c001e424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e428:	8b 00                	mov    eax,DWORD PTR [eax]
c001e42a:	83 c0 08             	add    eax,0x8
c001e42d:	8b 10                	mov    edx,DWORD PTR [eax]
c001e42f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e433:	25 ff 00 00 00       	and    eax,0xff
c001e438:	6a 00                	push   0x0
c001e43a:	6a 00                	push   0x0
c001e43c:	50                   	push   eax
c001e43d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e441:	ff d2                	call   edx
c001e443:	83 c4 10             	add    esp,0x10
c001e446:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e44a:	e9 6a ff ff ff       	jmp    c001e3b9 <APIC::APIC()+0x39>
c001e44f:	c6 05 80 63 02 c0 01 	mov    BYTE PTR ds:0xc0026380,0x1
c001e456:	90                   	nop
c001e457:	83 c4 18             	add    esp,0x18
c001e45a:	5b                   	pop    ebx
c001e45b:	c3                   	ret    

c001e45c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e45c:	55                   	push   ebp
c001e45d:	89 e5                	mov    ebp,esp
c001e45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e462:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e468:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e46b:	72 1d                	jb     c001e48a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e46d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e470:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e479:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e47f:	01 d0                	add    eax,edx
c001e481:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e484:	73 04                	jae    c001e48a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e486:	b0 01                	mov    al,0x1
c001e488:	eb 02                	jmp    c001e48c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e48a:	b0 00                	mov    al,0x0
c001e48c:	5d                   	pop    ebp
c001e48d:	c3                   	ret    

c001e48e <IOAPIC::read(int)>:
c001e48e:	55                   	push   ebp
c001e48f:	89 e5                	mov    ebp,esp
c001e491:	83 ec 10             	sub    esp,0x10
c001e494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e497:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e49d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e4a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e4a3:	31 d2                	xor    edx,edx
c001e4a5:	88 c2                	mov    dl,al
c001e4a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4aa:	89 10                	mov    DWORD PTR [eax],edx
c001e4ac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4af:	83 c0 10             	add    eax,0x10
c001e4b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4b4:	c9                   	leave  
c001e4b5:	c3                   	ret    

c001e4b6 <IOAPIC::open(int, int, void*)>:
c001e4b6:	55                   	push   ebp
c001e4b7:	89 e5                	mov    ebp,esp
c001e4b9:	57                   	push   edi
c001e4ba:	56                   	push   esi
c001e4bb:	53                   	push   ebx
c001e4bc:	83 ec 0c             	sub    esp,0xc
c001e4bf:	83 ec 0c             	sub    esp,0xc
c001e4c2:	68 8b 37 02 c0       	push   0xc002378b
c001e4c7:	e8 8d 0c ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e4d5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e4db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e4e4:	8b 14 85 60 4e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb1a0]
c001e4eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e4f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e4fd:	8b 14 85 e0 4e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb120]
c001e504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e507:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e50d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e510:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e519:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e51f:	89 c7                	mov    edi,eax
c001e521:	81 e7 ff 00 00 00    	and    edi,0xff
c001e527:	89 d0                	mov    eax,edx
c001e529:	ba 00 00 00 00       	mov    edx,0x0
c001e52e:	89 c1                	mov    ecx,eax
c001e530:	80 e5 ff             	and    ch,0xff
c001e533:	89 cb                	mov    ebx,ecx
c001e535:	89 d0                	mov    eax,edx
c001e537:	25 ff 00 00 00       	and    eax,0xff
c001e53c:	89 c6                	mov    esi,eax
c001e53e:	89 d8                	mov    eax,ebx
c001e540:	89 f2                	mov    edx,esi
c001e542:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e545:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e548:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e54c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e550:	83 e0 00             	and    eax,0x0
c001e553:	09 d0                	or     eax,edx
c001e555:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e55c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e562:	8d 50 01             	lea    edx,[eax+0x1]
c001e565:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e568:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e56e:	31 d2                	xor    edx,edx
c001e570:	88 c2                	mov    dl,al
c001e572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e575:	83 c2 08             	add    edx,0x8
c001e578:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e57c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e582:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e588:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e58c:	83 ec 08             	sub    esp,0x8
c001e58f:	6a 01                	push   0x1
c001e591:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e594:	e8 f5 fe ff ff       	call   c001e48e <IOAPIC::read(int)>
c001e599:	83 c4 10             	add    esp,0x10
c001e59c:	c1 f8 10             	sar    eax,0x10
c001e59f:	25 ff 00 00 00       	and    eax,0xff
c001e5a4:	8d 50 01             	lea    edx,[eax+0x1]
c001e5a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5aa:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e5b0:	b8 00 00 00 00       	mov    eax,0x0
c001e5b5:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e5b8:	5b                   	pop    ebx
c001e5b9:	5e                   	pop    esi
c001e5ba:	5f                   	pop    edi
c001e5bb:	5d                   	pop    ebp
c001e5bc:	c3                   	ret    
c001e5bd:	90                   	nop

c001e5be <IOAPIC::write(int, int)>:
c001e5be:	55                   	push   ebp
c001e5bf:	89 e5                	mov    ebp,esp
c001e5c1:	83 ec 10             	sub    esp,0x10
c001e5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5cd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5d3:	31 d2                	xor    edx,edx
c001e5d5:	88 c2                	mov    dl,al
c001e5d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5da:	89 10                	mov    DWORD PTR [eax],edx
c001e5dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5df:	8d 50 10             	lea    edx,[eax+0x10]
c001e5e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e5e5:	89 02                	mov    DWORD PTR [edx],eax
c001e5e7:	90                   	nop
c001e5e8:	c9                   	leave  
c001e5e9:	c3                   	ret    

c001e5ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e5ea:	55                   	push   ebp
c001e5eb:	89 e5                	mov    ebp,esp
c001e5ed:	83 ec 20             	sub    esp,0x20
c001e5f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5f3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e5f6:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e5f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e5fc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e5ff:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e602:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e605:	88 d0                	mov    al,dl
c001e607:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e60a:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e60d:	25 ff 00 00 00       	and    eax,0xff
c001e612:	83 c0 08             	add    eax,0x8
c001e615:	01 c0                	add    eax,eax
c001e617:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e61a:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e61d:	25 ff 00 00 00       	and    eax,0xff
c001e622:	83 c0 08             	add    eax,0x8
c001e625:	01 c0                	add    eax,eax
c001e627:	40                   	inc    eax
c001e628:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e62b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e62e:	50                   	push   eax
c001e62f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e632:	e8 57 fe ff ff       	call   c001e48e <IOAPIC::read(int)>
c001e637:	83 c4 08             	add    esp,0x8
c001e63a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e63d:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e644:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e647:	c1 e0 18             	shl    eax,0x18
c001e64a:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e64d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e650:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e653:	52                   	push   edx
c001e654:	50                   	push   eax
c001e655:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e658:	e8 61 ff ff ff       	call   c001e5be <IOAPIC::write(int, int)>
c001e65d:	83 c4 0c             	add    esp,0xc
c001e660:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e663:	50                   	push   eax
c001e664:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e667:	e8 22 fe ff ff       	call   c001e48e <IOAPIC::read(int)>
c001e66c:	83 c4 08             	add    esp,0x8
c001e66f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e672:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e679:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e680:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e687:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e68e:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e691:	25 ff 00 00 00       	and    eax,0xff
c001e696:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e699:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e69c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e69f:	52                   	push   edx
c001e6a0:	50                   	push   eax
c001e6a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6a4:	e8 15 ff ff ff       	call   c001e5be <IOAPIC::write(int, int)>
c001e6a9:	83 c4 0c             	add    esp,0xc
c001e6ac:	90                   	nop
c001e6ad:	c9                   	leave  
c001e6ae:	c3                   	ret    
c001e6af:	90                   	nop

c001e6b0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e6b0:	55                   	push   ebp
c001e6b1:	89 e5                	mov    ebp,esp
c001e6b3:	56                   	push   esi
c001e6b4:	53                   	push   ebx
c001e6b5:	83 ec 20             	sub    esp,0x20
c001e6b8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e6bb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e6be:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e6c2:	74 2a                	je     c001e6ee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e6c4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e6c8:	7f 14                	jg     c001e6de <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e6ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6cd:	05 e0 3c 02 c0       	add    eax,0xc0023ce0
c001e6d2:	8a 00                	mov    al,BYTE PTR [eax]
c001e6d4:	25 ff 00 00 00       	and    eax,0xff
c001e6d9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e6dc:	eb 10                	jmp    c001e6ee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e6de:	83 ec 0c             	sub    esp,0xc
c001e6e1:	68 9c 37 02 c0       	push   0xc002379c
c001e6e6:	e8 5d 72 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001e6eb:	83 c4 10             	add    esp,0x10
c001e6ee:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e6f2:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c001e6f7:	83 ec 08             	sub    esp,0x8
c001e6fa:	50                   	push   eax
c001e6fb:	68 d4 37 02 c0       	push   0xc00237d4
c001e700:	e8 54 0a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001e705:	83 c4 10             	add    esp,0x10
c001e708:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e70f:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c001e714:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e717:	7d 64                	jge    c001e77d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e719:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e71c:	8b 04 85 60 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ca0]
c001e723:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e726:	83 ec 08             	sub    esp,0x8
c001e729:	52                   	push   edx
c001e72a:	50                   	push   eax
c001e72b:	e8 2c fd ff ff       	call   c001e45c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e730:	83 c4 10             	add    esp,0x10
c001e733:	84 c0                	test   al,al
c001e735:	74 41                	je     c001e778 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e737:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e73a:	8b 1c 85 60 63 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9ca0]
c001e741:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e744:	83 c0 20             	add    eax,0x20
c001e747:	89 c6                	mov    esi,eax
c001e749:	81 e6 ff 00 00 00    	and    esi,0xff
c001e74f:	e8 85 60 ff ff       	call   c00147d9 <getCPUNumber()>
c001e754:	89 c2                	mov    edx,eax
c001e756:	c1 fa 1f             	sar    edx,0x1f
c001e759:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e75c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e762:	83 ec 0c             	sub    esp,0xc
c001e765:	56                   	push   esi
c001e766:	52                   	push   edx
c001e767:	50                   	push   eax
c001e768:	51                   	push   ecx
c001e769:	53                   	push   ebx
c001e76a:	e8 7b fe ff ff       	call   c001e5ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e76f:	83 c4 20             	add    esp,0x20
c001e772:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e776:	eb 05                	jmp    c001e77d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e778:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e77b:	eb 92                	jmp    c001e70f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e77d:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e780:	83 f0 01             	xor    eax,0x1
c001e783:	84 c0                	test   al,al
c001e785:	74 10                	je     c001e797 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e787:	83 ec 0c             	sub    esp,0xc
c001e78a:	68 eb 37 02 c0       	push   0xc00237eb
c001e78f:	e8 b4 71 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001e794:	83 c4 10             	add    esp,0x10
c001e797:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e79b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e7a2:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e7a6:	7f 65                	jg     c001e80d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e7a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7ae:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e7b5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e7b8:	01 ca                	add    edx,ecx
c001e7ba:	83 c2 54             	add    edx,0x54
c001e7bd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e7c1:	85 c0                	test   eax,eax
c001e7c3:	75 43                	jne    c001e808 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e7c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7cb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e7d2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e7d5:	01 ca                	add    edx,ecx
c001e7d7:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e7da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e7dd:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e7e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7e7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e7ee:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e7f1:	01 ca                	add    edx,ecx
c001e7f3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e7f9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e7fc:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e800:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e803:	83 e8 20             	sub    eax,0x20
c001e806:	eb 1a                	jmp    c001e822 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e808:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e80b:	eb 95                	jmp    c001e7a2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e80d:	83 ec 0c             	sub    esp,0xc
c001e810:	68 f8 37 02 c0       	push   0xc00237f8
c001e815:	e8 2e 71 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001e81a:	83 c4 10             	add    esp,0x10
c001e81d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e822:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e825:	5b                   	pop    ebx
c001e826:	5e                   	pop    esi
c001e827:	5d                   	pop    ebp
c001e828:	c3                   	ret    
c001e829:	90                   	nop

c001e82a <PIC::disable()>:
c001e82a:	55                   	push   ebp
c001e82b:	89 e5                	mov    ebp,esp
c001e82d:	83 ec 10             	sub    esp,0x10
c001e830:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e836:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e83a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e83d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e841:	ee                   	out    dx,al
c001e842:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e848:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e84c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e84f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e853:	ee                   	out    dx,al
c001e854:	90                   	nop
c001e855:	c9                   	leave  
c001e856:	c3                   	ret    
c001e857:	90                   	nop

c001e858 <PIC::close(int, int, void*)>:
c001e858:	55                   	push   ebp
c001e859:	89 e5                	mov    ebp,esp
c001e85b:	83 ec 08             	sub    esp,0x8
c001e85e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e861:	8b 00                	mov    eax,DWORD PTR [eax]
c001e863:	83 c0 3c             	add    eax,0x3c
c001e866:	8b 00                	mov    eax,DWORD PTR [eax]
c001e868:	83 ec 0c             	sub    esp,0xc
c001e86b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e86e:	ff d0                	call   eax
c001e870:	83 c4 10             	add    esp,0x10
c001e873:	b8 00 00 00 00       	mov    eax,0x0
c001e878:	c9                   	leave  
c001e879:	c3                   	ret    

c001e87a <PIC::PIC()>:
c001e87a:	83 ec 0c             	sub    esp,0xc
c001e87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e881:	83 ec 08             	sub    esp,0x8
c001e884:	68 a4 38 02 c0       	push   0xc00238a4
c001e889:	50                   	push   eax
c001e88a:	e8 1d 26 ff ff       	call   c0010eac <InterruptController::InterruptController(char const*)>
c001e88f:	83 c4 10             	add    esp,0x10
c001e892:	ba d0 38 02 c0       	mov    edx,0xc00238d0
c001e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89b:	89 10                	mov    DWORD PTR [eax],edx
c001e89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8a7:	31 d2                	xor    edx,edx
c001e8a9:	88 c2                	mov    dl,al
c001e8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8af:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8c0:	31 d2                	xor    edx,edx
c001e8c2:	88 c2                	mov    dl,al
c001e8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8d7:	8d 50 01             	lea    edx,[eax+0x1]
c001e8da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8de:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e8e4:	31 d2                	xor    edx,edx
c001e8e6:	88 c2                	mov    dl,al
c001e8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e8f0:	83 e1 3f             	and    ecx,0x3f
c001e8f3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e901:	31 d2                	xor    edx,edx
c001e903:	88 c2                	mov    dl,al
c001e905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e909:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e914:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e91a:	31 d2                	xor    edx,edx
c001e91c:	88 c2                	mov    dl,al
c001e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e922:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e92b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e931:	8d 50 01             	lea    edx,[eax+0x1]
c001e934:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e938:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e93e:	31 d2                	xor    edx,edx
c001e940:	88 c2                	mov    dl,al
c001e942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e946:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e94a:	83 e1 3f             	and    ecx,0x3f
c001e94d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e951:	90                   	nop
c001e952:	83 c4 0c             	add    esp,0xc
c001e955:	c3                   	ret    

c001e956 <PIC::ioWait()>:
c001e956:	eb 00                	jmp    c001e958 <PIC::ioWait()+0x2>
c001e958:	eb 00                	jmp    c001e95a <PIC::ioWait()+0x4>
c001e95a:	90                   	nop
c001e95b:	c3                   	ret    

c001e95c <PIC::getIRQReg(int)>:
c001e95c:	55                   	push   ebp
c001e95d:	89 e5                	mov    ebp,esp
c001e95f:	83 ec 10             	sub    esp,0x10
c001e962:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e965:	25 ff 00 00 00       	and    eax,0xff
c001e96a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e970:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e973:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e976:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e97a:	ee                   	out    dx,al
c001e97b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e97e:	25 ff 00 00 00       	and    eax,0xff
c001e983:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e989:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e98c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e98f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e993:	ee                   	out    dx,al
c001e994:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e99a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e99e:	89 c2                	mov    edx,eax
c001e9a0:	ec                   	in     al,dx
c001e9a1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e9a4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e9a7:	25 ff 00 00 00       	and    eax,0xff
c001e9ac:	c1 e0 08             	shl    eax,0x8
c001e9af:	89 c1                	mov    ecx,eax
c001e9b1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e9b7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e9bb:	89 c2                	mov    edx,eax
c001e9bd:	ec                   	in     al,dx
c001e9be:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e9c1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e9c4:	25 ff 00 00 00       	and    eax,0xff
c001e9c9:	09 c8                	or     eax,ecx
c001e9cb:	c9                   	leave  
c001e9cc:	c3                   	ret    
c001e9cd:	90                   	nop

c001e9ce <PIC::eoi(unsigned char)>:
c001e9ce:	55                   	push   ebp
c001e9cf:	89 e5                	mov    ebp,esp
c001e9d1:	83 ec 14             	sub    esp,0x14
c001e9d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e9d7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e9da:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e9de:	75 23                	jne    c001ea03 <PIC::eoi(unsigned char)+0x35>
c001e9e0:	6a 0b                	push   0xb
c001e9e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9e5:	e8 72 ff ff ff       	call   c001e95c <PIC::getIRQReg(int)>
c001e9ea:	83 c4 08             	add    esp,0x8
c001e9ed:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e9f1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e9f5:	25 ff ff 00 00       	and    eax,0xffff
c001e9fa:	25 80 00 00 00       	and    eax,0x80
c001e9ff:	85 c0                	test   eax,eax
c001ea01:	74 5f                	je     c001ea62 <PIC::eoi(unsigned char)+0x94>
c001ea03:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001ea07:	75 2d                	jne    c001ea36 <PIC::eoi(unsigned char)+0x68>
c001ea09:	6a 0b                	push   0xb
c001ea0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea0e:	e8 49 ff ff ff       	call   c001e95c <PIC::getIRQReg(int)>
c001ea13:	83 c4 08             	add    esp,0x8
c001ea16:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001ea1a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ea1d:	66 85 c0             	test   ax,ax
c001ea20:	78 14                	js     c001ea36 <PIC::eoi(unsigned char)+0x68>
c001ea22:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001ea28:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001ea2c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ea2f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001ea33:	ee                   	out    dx,al
c001ea34:	eb 2d                	jmp    c001ea63 <PIC::eoi(unsigned char)+0x95>
c001ea36:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ea3a:	76 12                	jbe    c001ea4e <PIC::eoi(unsigned char)+0x80>
c001ea3c:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ea42:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001ea46:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ea49:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ea4d:	ee                   	out    dx,al
c001ea4e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001ea54:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001ea58:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ea5b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ea5f:	ee                   	out    dx,al
c001ea60:	eb 01                	jmp    c001ea63 <PIC::eoi(unsigned char)+0x95>
c001ea62:	90                   	nop
c001ea63:	c9                   	leave  
c001ea64:	c3                   	ret    
c001ea65:	90                   	nop

c001ea66 <PIC::remap()>:
c001ea66:	55                   	push   ebp
c001ea67:	89 e5                	mov    ebp,esp
c001ea69:	83 ec 48             	sub    esp,0x48
c001ea6c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ea73:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ea7a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ea80:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ea83:	89 c2                	mov    edx,eax
c001ea85:	ec                   	in     al,dx
c001ea86:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ea89:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ea8c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ea8f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ea95:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ea98:	89 c2                	mov    edx,eax
c001ea9a:	ec                   	in     al,dx
c001ea9b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ea9e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001eaa1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001eaa4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001eaaa:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001eaae:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001eab1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001eab4:	ee                   	out    dx,al
c001eab5:	83 ec 0c             	sub    esp,0xc
c001eab8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eabb:	e8 96 fe ff ff       	call   c001e956 <PIC::ioWait()>
c001eac0:	83 c4 10             	add    esp,0x10
c001eac3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001eac9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001eacd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ead0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ead3:	ee                   	out    dx,al
c001ead4:	83 ec 0c             	sub    esp,0xc
c001ead7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eada:	e8 77 fe ff ff       	call   c001e956 <PIC::ioWait()>
c001eadf:	83 c4 10             	add    esp,0x10
c001eae2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001eae5:	25 ff 00 00 00       	and    eax,0xff
c001eaea:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001eaf0:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001eaf3:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001eaf6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001eaf9:	ee                   	out    dx,al
c001eafa:	83 ec 0c             	sub    esp,0xc
c001eafd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb00:	e8 51 fe ff ff       	call   c001e956 <PIC::ioWait()>
c001eb05:	83 c4 10             	add    esp,0x10
c001eb08:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb0b:	25 ff 00 00 00       	and    eax,0xff
c001eb10:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001eb16:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001eb19:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001eb1c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb1f:	ee                   	out    dx,al
c001eb20:	83 ec 0c             	sub    esp,0xc
c001eb23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb26:	e8 2b fe ff ff       	call   c001e956 <PIC::ioWait()>
c001eb2b:	83 c4 10             	add    esp,0x10
c001eb2e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001eb34:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001eb38:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001eb3b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001eb3e:	ee                   	out    dx,al
c001eb3f:	83 ec 0c             	sub    esp,0xc
c001eb42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb45:	e8 0c fe ff ff       	call   c001e956 <PIC::ioWait()>
c001eb4a:	83 c4 10             	add    esp,0x10
c001eb4d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001eb53:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001eb57:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001eb5a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001eb5d:	ee                   	out    dx,al
c001eb5e:	83 ec 0c             	sub    esp,0xc
c001eb61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb64:	e8 ed fd ff ff       	call   c001e956 <PIC::ioWait()>
c001eb69:	83 c4 10             	add    esp,0x10
c001eb6c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001eb72:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001eb76:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001eb79:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001eb7c:	ee                   	out    dx,al
c001eb7d:	83 ec 0c             	sub    esp,0xc
c001eb80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb83:	e8 ce fd ff ff       	call   c001e956 <PIC::ioWait()>
c001eb88:	83 c4 10             	add    esp,0x10
c001eb8b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001eb91:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001eb95:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001eb98:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb9b:	ee                   	out    dx,al
c001eb9c:	83 ec 0c             	sub    esp,0xc
c001eb9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eba2:	e8 af fd ff ff       	call   c001e956 <PIC::ioWait()>
c001eba7:	83 c4 10             	add    esp,0x10
c001ebaa:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ebad:	25 ff 00 00 00       	and    eax,0xff
c001ebb2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ebb8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ebbb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ebbe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ebc1:	ee                   	out    dx,al
c001ebc2:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ebc5:	25 ff 00 00 00       	and    eax,0xff
c001ebca:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ebd0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ebd3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ebd6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ebd9:	ee                   	out    dx,al
c001ebda:	90                   	nop
c001ebdb:	c9                   	leave  
c001ebdc:	c3                   	ret    
c001ebdd:	90                   	nop

c001ebde <PIC::open(int, int, void*)>:
c001ebde:	55                   	push   ebp
c001ebdf:	89 e5                	mov    ebp,esp
c001ebe1:	83 ec 18             	sub    esp,0x18
c001ebe4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ebea:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ebee:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ebf1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ebf5:	ee                   	out    dx,al
c001ebf6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ebfc:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ec00:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ec03:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ec07:	ee                   	out    dx,al
c001ec08:	83 ec 0c             	sub    esp,0xc
c001ec0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec0e:	e8 53 fe ff ff       	call   c001ea66 <PIC::remap()>
c001ec13:	83 c4 10             	add    esp,0x10
c001ec16:	b8 00 00 00 00       	mov    eax,0x0
c001ec1b:	c9                   	leave  
c001ec1c:	c3                   	ret    
c001ec1d:	90                   	nop

c001ec1e <APICTimer::close(int, int, void*)>:
c001ec1e:	b8 00 00 00 00       	mov    eax,0x0
c001ec23:	c3                   	ret    

c001ec24 <apicTimerHandler(regs*, void*)>:
c001ec24:	83 ec 0c             	sub    esp,0xc
c001ec27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ec2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec2d:	89 c2                	mov    edx,eax
c001ec2f:	c1 fa 1f             	sar    edx,0x1f
c001ec32:	52                   	push   edx
c001ec33:	50                   	push   eax
c001ec34:	6a 00                	push   0x0
c001ec36:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ec3b:	e8 8c 07 00 00       	call   c001f3cc <__udivdi3>
c001ec40:	83 c4 10             	add    esp,0x10
c001ec43:	83 ec 08             	sub    esp,0x8
c001ec46:	52                   	push   edx
c001ec47:	50                   	push   eax
c001ec48:	e8 8c 40 ff ff       	call   c0012cd9 <timerHandler(unsigned long long)>
c001ec4d:	83 c4 10             	add    esp,0x10
c001ec50:	90                   	nop
c001ec51:	83 c4 0c             	add    esp,0xc
c001ec54:	c3                   	ret    
c001ec55:	90                   	nop

c001ec56 <APICTimer::write(int)>:
c001ec56:	53                   	push   ebx
c001ec57:	83 ec 28             	sub    esp,0x28
c001ec5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ec5e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ec62:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec68:	e8 6f 5b ff ff       	call   c00147dc <thisCPU()>
c001ec6d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ec73:	83 ec 0c             	sub    esp,0xc
c001ec76:	50                   	push   eax
c001ec77:	e8 a2 f5 ff ff       	call   c001e21e <APIC::getBase()>
c001ec7c:	83 c4 10             	add    esp,0x10
c001ec7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ec83:	a1 f0 4b 02 c0       	mov    eax,ds:0xc0024bf0
c001ec88:	8b 15 f4 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bf4
c001ec8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ec92:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ec96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec9a:	05 e0 03 00 00       	add    eax,0x3e0
c001ec9f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eca5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eca9:	05 80 03 00 00       	add    eax,0x380
c001ecae:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001ecb4:	fb                   	sti    
c001ecb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecbd:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ecc2:	83 d2 00             	adc    edx,0x0
c001ecc5:	89 c1                	mov    ecx,eax
c001ecc7:	89 d3                	mov    ebx,edx
c001ecc9:	a1 f0 4b 02 c0       	mov    eax,ds:0xc0024bf0
c001ecce:	8b 15 f4 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bf4
c001ecd4:	39 c8                	cmp    eax,ecx
c001ecd6:	89 d0                	mov    eax,edx
c001ecd8:	19 d8                	sbb    eax,ebx
c001ecda:	73 02                	jae    c001ecde <APICTimer::write(int)+0x88>
c001ecdc:	eb d7                	jmp    c001ecb5 <APICTimer::write(int)+0x5f>
c001ecde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ece2:	05 20 03 00 00       	add    eax,0x320
c001ece7:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001eced:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecf1:	05 90 03 00 00       	add    eax,0x390
c001ecf6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecf8:	f7 d0                	not    eax
c001ecfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecfe:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ed02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed06:	ba 00 00 00 00       	mov    edx,0x0
c001ed0b:	f7 f3                	div    ebx
c001ed0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ed11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed15:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed1b:	0d 00 00 02 00       	or     eax,0x20000
c001ed20:	89 c2                	mov    edx,eax
c001ed22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed26:	05 20 03 00 00       	add    eax,0x320
c001ed2b:	89 10                	mov    DWORD PTR [eax],edx
c001ed2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed31:	05 e0 03 00 00       	add    eax,0x3e0
c001ed36:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ed3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed40:	05 80 03 00 00       	add    eax,0x380
c001ed45:	89 c2                	mov    edx,eax
c001ed47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed4b:	89 02                	mov    DWORD PTR [edx],eax
c001ed4d:	90                   	nop
c001ed4e:	83 c4 28             	add    esp,0x28
c001ed51:	5b                   	pop    ebx
c001ed52:	c3                   	ret    
c001ed53:	90                   	nop

c001ed54 <APICTimer::open(int, int, void*)>:
c001ed54:	57                   	push   edi
c001ed55:	56                   	push   esi
c001ed56:	53                   	push   ebx
c001ed57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed5d:	83 c0 24             	add    eax,0x24
c001ed60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed62:	83 ec 08             	sub    esp,0x8
c001ed65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed6d:	ff d0                	call   eax
c001ed6f:	83 c4 10             	add    esp,0x10
c001ed72:	e8 65 5a ff ff       	call   c00147dc <thisCPU()>
c001ed77:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ed7d:	83 ec 0c             	sub    esp,0xc
c001ed80:	50                   	push   eax
c001ed81:	e8 98 f4 ff ff       	call   c001e21e <APIC::getBase()>
c001ed86:	83 c4 10             	add    esp,0x10
c001ed89:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001ed8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed93:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ed99:	89 c7                	mov    edi,eax
c001ed9b:	81 e7 ff 00 00 00    	and    edi,0xff
c001eda1:	89 d0                	mov    eax,edx
c001eda3:	ba 00 00 00 00       	mov    edx,0x0
c001eda8:	89 c1                	mov    ecx,eax
c001edaa:	80 e5 ff             	and    ch,0xff
c001edad:	89 cb                	mov    ebx,ecx
c001edaf:	89 d0                	mov    eax,edx
c001edb1:	25 ff 00 00 00       	and    eax,0xff
c001edb6:	89 c6                	mov    esi,eax
c001edb8:	89 d8                	mov    eax,ebx
c001edba:	89 f2                	mov    edx,esi
c001edbc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edc0:	8d 5f 08             	lea    ebx,[edi+0x8]
c001edc3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001edc7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001edcb:	83 e0 00             	and    eax,0x0
c001edce:	09 d0                	or     eax,edx
c001edd0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001edd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001edde:	8d 50 01             	lea    edx,[eax+0x1]
c001ede1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ede5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001edeb:	31 d2                	xor    edx,edx
c001eded:	88 c2                	mov    dl,al
c001edef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf3:	83 c2 08             	add    edx,0x8
c001edf6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001edfa:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ee00:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ee06:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ee0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee12:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee20:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee2a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee30:	83 ec 0c             	sub    esp,0xc
c001ee33:	51                   	push   ecx
c001ee34:	6a 01                	push   0x1
c001ee36:	68 24 ec 01 c0       	push   0xc001ec24
c001ee3b:	52                   	push   edx
c001ee3c:	50                   	push   eax
c001ee3d:	e8 80 16 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee42:	83 c4 20             	add    esp,0x20
c001ee45:	89 c2                	mov    edx,eax
c001ee47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee51:	b8 00 00 00 00       	mov    eax,0x0
c001ee56:	5b                   	pop    ebx
c001ee57:	5e                   	pop    esi
c001ee58:	5f                   	pop    edi
c001ee59:	c3                   	ret    

c001ee5a <APICTimer::APICTimer()>:
c001ee5a:	83 ec 0c             	sub    esp,0xc
c001ee5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee61:	83 ec 08             	sub    esp,0x8
c001ee64:	68 10 39 02 c0       	push   0xc0023910
c001ee69:	50                   	push   eax
c001ee6a:	e8 db 3d ff ff       	call   c0012c4a <Timer::Timer(char const*)>
c001ee6f:	83 c4 10             	add    esp,0x10
c001ee72:	ba 24 39 02 c0       	mov    edx,0xc0023924
c001ee77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7b:	89 10                	mov    DWORD PTR [eax],edx
c001ee7d:	90                   	nop
c001ee7e:	83 c4 0c             	add    esp,0xc
c001ee81:	c3                   	ret    

c001ee82 <PIT::write(int)>:
c001ee82:	83 ec 10             	sub    esp,0x10
c001ee85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee8d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee97:	a3 84 63 02 c0       	mov    ds:0xc0026384,eax
c001ee9c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eea1:	89 c2                	mov    edx,eax
c001eea3:	c1 fa 1f             	sar    edx,0x1f
c001eea6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eeaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eeae:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eeb5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eeba:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eebe:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eec3:	ee                   	out    dx,al
c001eec4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eec8:	25 ff 00 00 00       	and    eax,0xff
c001eecd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eed4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eed8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eedc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eee1:	ee                   	out    dx,al
c001eee2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eee6:	c1 f8 08             	sar    eax,0x8
c001eee9:	25 ff 00 00 00       	and    eax,0xff
c001eeee:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eef5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eef9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eefd:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef02:	ee                   	out    dx,al
c001ef03:	90                   	nop
c001ef04:	83 c4 10             	add    esp,0x10
c001ef07:	c3                   	ret    

c001ef08 <pitHandler(regs*, void*)>:
c001ef08:	83 ec 0c             	sub    esp,0xc
c001ef0b:	a1 84 63 02 c0       	mov    eax,ds:0xc0026384
c001ef10:	89 c2                	mov    edx,eax
c001ef12:	c1 fa 1f             	sar    edx,0x1f
c001ef15:	52                   	push   edx
c001ef16:	50                   	push   eax
c001ef17:	6a 00                	push   0x0
c001ef19:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ef1e:	e8 a9 04 00 00       	call   c001f3cc <__udivdi3>
c001ef23:	83 c4 10             	add    esp,0x10
c001ef26:	83 ec 08             	sub    esp,0x8
c001ef29:	52                   	push   edx
c001ef2a:	50                   	push   eax
c001ef2b:	e8 a9 3d ff ff       	call   c0012cd9 <timerHandler(unsigned long long)>
c001ef30:	83 c4 10             	add    esp,0x10
c001ef33:	90                   	nop
c001ef34:	83 c4 0c             	add    esp,0xc
c001ef37:	c3                   	ret    

c001ef38 <PIT::open(int, int, void*)>:
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef41:	83 c0 24             	add    eax,0x24
c001ef44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef46:	83 ec 08             	sub    esp,0x8
c001ef49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef51:	ff d0                	call   eax
c001ef53:	83 c4 10             	add    esp,0x10
c001ef56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5a:	83 ec 0c             	sub    esp,0xc
c001ef5d:	6a 00                	push   0x0
c001ef5f:	6a 01                	push   0x1
c001ef61:	68 08 ef 01 c0       	push   0xc001ef08
c001ef66:	6a 00                	push   0x0
c001ef68:	50                   	push   eax
c001ef69:	e8 54 15 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef6e:	83 c4 20             	add    esp,0x20
c001ef71:	89 c2                	mov    edx,eax
c001ef73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef77:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef7d:	b8 00 00 00 00       	mov    eax,0x0
c001ef82:	83 c4 0c             	add    esp,0xc
c001ef85:	c3                   	ret    

c001ef86 <PIT::close(int, int, void*)>:
c001ef86:	83 ec 0c             	sub    esp,0xc
c001ef89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9b:	6a 01                	push   0x1
c001ef9d:	68 08 ef 01 c0       	push   0xc001ef08
c001efa2:	6a 00                	push   0x0
c001efa4:	50                   	push   eax
c001efa5:	e8 76 15 ff ff       	call   c0010520 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001efaa:	83 c4 10             	add    esp,0x10
c001efad:	b8 00 00 00 00       	mov    eax,0x0
c001efb2:	83 c4 0c             	add    esp,0xc
c001efb5:	c3                   	ret    

c001efb6 <PIT::PIT()>:
c001efb6:	83 ec 0c             	sub    esp,0xc
c001efb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbd:	83 ec 08             	sub    esp,0x8
c001efc0:	68 4c 39 02 c0       	push   0xc002394c
c001efc5:	50                   	push   eax
c001efc6:	e8 7f 3c ff ff       	call   c0012c4a <Timer::Timer(char const*)>
c001efcb:	83 c4 10             	add    esp,0x10
c001efce:	ba 74 39 02 c0       	mov    edx,0xc0023974
c001efd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd7:	89 10                	mov    DWORD PTR [eax],edx
c001efd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efe3:	31 d2                	xor    edx,edx
c001efe5:	88 c2                	mov    dl,al
c001efe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efeb:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001effc:	31 d2                	xor    edx,edx
c001effe:	88 c2                	mov    dl,al
c001f000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f004:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f013:	8d 50 01             	lea    edx,[eax+0x1]
c001f016:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f01a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f020:	31 d2                	xor    edx,edx
c001f022:	88 c2                	mov    dl,al
c001f024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f028:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f02c:	83 e1 3f             	and    ecx,0x3f
c001f02f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f033:	90                   	nop
c001f034:	83 c4 0c             	add    esp,0xc
c001f037:	c3                   	ret    
c001f038:	66 90                	xchg   ax,ax
c001f03a:	66 90                	xchg   ax,ax
c001f03c:	66 90                	xchg   ax,ax
c001f03e:	66 90                	xchg   ax,ax

c001f040 <avxDetect>:
c001f040:	b8 00 00 00 00       	mov    eax,0x0
c001f045:	c3                   	ret    

c001f046 <avxSave>:
c001f046:	c3                   	ret    

c001f047 <avxLoad>:
c001f047:	c3                   	ret    

c001f048 <avxInit>:
c001f048:	c3                   	ret    

c001f049 <avxClose>:
c001f049:	c3                   	ret    
c001f04a:	66 90                	xchg   ax,ax
c001f04c:	66 90                	xchg   ax,ax
c001f04e:	66 90                	xchg   ax,ax

c001f050 <sseDetect>:
c001f050:	b8 01 00 00 00       	mov    eax,0x1
c001f055:	0f a2                	cpuid  
c001f057:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f05d:	74 06                	je     c001f065 <sseDetect.noSSE>
c001f05f:	b8 01 00 00 00       	mov    eax,0x1
c001f064:	c3                   	ret    

c001f065 <sseDetect.noSSE>:
c001f065:	b8 00 00 00 00       	mov    eax,0x0
c001f06a:	c3                   	ret    

c001f06b <sseSave>:
c001f06b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f070:	c3                   	ret    

c001f071 <sseLoad>:
c001f071:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f076:	c3                   	ret    

c001f077 <sseInit>:
c001f077:	e8 40 00 00 00       	call   c001f0bc <x87Init>
c001f07c:	0f 20 e0             	mov    eax,cr4
c001f07f:	66 0d 00 06          	or     ax,0x600
c001f083:	0f 22 e0             	mov    cr4,eax
c001f086:	c3                   	ret    

c001f087 <sseClose>:
c001f087:	c3                   	ret    
c001f088:	66 90                	xchg   ax,ax
c001f08a:	66 90                	xchg   ax,ax
c001f08c:	66 90                	xchg   ax,ax
c001f08e:	66 90                	xchg   ax,ax

c001f090 <value_37F>:
c001f090:	7f 03                	jg     c001f095 <value_37A+0x1>

c001f092 <value_37E>:
c001f092:	7e 03                	jle    c001f097 <x87Detect+0x1>

c001f094 <value_37A>:
c001f094:	7a 03                	jp     c001f099 <x87Detect+0x3>

c001f096 <x87Detect>:
c001f096:	b8 01 00 00 00       	mov    eax,0x1
c001f09b:	0f a2                	cpuid  
c001f09d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f0a3:	74 06                	je     c001f0ab <x87Detect.nox87>
c001f0a5:	b8 01 00 00 00       	mov    eax,0x1
c001f0aa:	c3                   	ret    

c001f0ab <x87Detect.nox87>:
c001f0ab:	b8 00 00 00 00       	mov    eax,0x0
c001f0b0:	c3                   	ret    

c001f0b1 <x87Save>:
c001f0b1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f0b6:	c3                   	ret    

c001f0b7 <x87Load>:
c001f0b7:	dd 64 24 08          	frstor [esp+0x8]
c001f0bb:	c3                   	ret    

c001f0bc <x87Init>:
c001f0bc:	9b db e3             	finit  
c001f0bf:	0f 20 c0             	mov    eax,cr0
c001f0c2:	66 25 fb ff          	and    ax,0xfffb
c001f0c6:	66 0d 22 00          	or     ax,0x22
c001f0ca:	0f 22 c0             	mov    cr0,eax
c001f0cd:	0f 06                	clts   
c001f0cf:	d9 2d 94 f0 01 c0    	fldcw  WORD PTR ds:0xc001f094
c001f0d5:	c3                   	ret    

c001f0d6 <x87Close>:
c001f0d6:	c3                   	ret    
c001f0d7:	90                   	nop

c001f0d8 <__do_global_ctors_aux>:
c001f0d8:	a1 b8 01 02 c0       	mov    eax,ds:0xc00201b8
c001f0dd:	83 f8 ff             	cmp    eax,0xffffffff
c001f0e0:	74 1a                	je     c001f0fc <__do_global_ctors_aux+0x24>
c001f0e2:	55                   	push   ebp
c001f0e3:	89 e5                	mov    ebp,esp
c001f0e5:	53                   	push   ebx
c001f0e6:	52                   	push   edx
c001f0e7:	bb b8 01 02 c0       	mov    ebx,0xc00201b8
c001f0ec:	ff d0                	call   eax
c001f0ee:	83 eb 04             	sub    ebx,0x4
c001f0f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f0f3:	83 f8 ff             	cmp    eax,0xffffffff
c001f0f6:	75 f4                	jne    c001f0ec <__do_global_ctors_aux+0x14>
c001f0f8:	58                   	pop    eax
c001f0f9:	5b                   	pop    ebx
c001f0fa:	5d                   	pop    ebp
c001f0fb:	c3                   	ret    
c001f0fc:	c3                   	ret    
c001f0fd:	66 90                	xchg   ax,ax
c001f0ff:	90                   	nop

c001f100 <__divdi3>:
c001f100:	55                   	push   ebp
c001f101:	57                   	push   edi
c001f102:	56                   	push   esi
c001f103:	53                   	push   ebx
c001f104:	83 ec 1c             	sub    esp,0x1c
c001f107:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f10b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f10f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f112:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f116:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f11a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f11e:	85 db                	test   ebx,ebx
c001f120:	0f 88 8e 00 00 00    	js     c001f1b4 <__divdi3+0xb4>
c001f126:	89 dd                	mov    ebp,ebx
c001f128:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f130:	89 d3                	mov    ebx,edx
c001f132:	85 d2                	test   edx,edx
c001f134:	79 0d                	jns    c001f143 <__divdi3+0x43>
c001f136:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f13a:	f7 d8                	neg    eax
c001f13c:	83 d2 00             	adc    edx,0x0
c001f13f:	f7 da                	neg    edx
c001f141:	89 d3                	mov    ebx,edx
c001f143:	89 c7                	mov    edi,eax
c001f145:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f148:	85 db                	test   ebx,ebx
c001f14a:	75 48                	jne    c001f194 <__divdi3+0x94>
c001f14c:	39 ef                	cmp    edi,ebp
c001f14e:	76 24                	jbe    c001f174 <__divdi3+0x74>
c001f150:	89 ea                	mov    edx,ebp
c001f152:	f7 f7                	div    edi
c001f154:	89 c1                	mov    ecx,eax
c001f156:	31 f6                	xor    esi,esi
c001f158:	89 c8                	mov    eax,ecx
c001f15a:	89 f2                	mov    edx,esi
c001f15c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f160:	85 c9                	test   ecx,ecx
c001f162:	74 07                	je     c001f16b <__divdi3+0x6b>
c001f164:	f7 d8                	neg    eax
c001f166:	83 d2 00             	adc    edx,0x0
c001f169:	f7 da                	neg    edx
c001f16b:	83 c4 1c             	add    esp,0x1c
c001f16e:	5b                   	pop    ebx
c001f16f:	5e                   	pop    esi
c001f170:	5f                   	pop    edi
c001f171:	5d                   	pop    ebp
c001f172:	c3                   	ret    
c001f173:	90                   	nop
c001f174:	85 ff                	test   edi,edi
c001f176:	75 0b                	jne    c001f183 <__divdi3+0x83>
c001f178:	b8 01 00 00 00       	mov    eax,0x1
c001f17d:	31 d2                	xor    edx,edx
c001f17f:	f7 f3                	div    ebx
c001f181:	89 c7                	mov    edi,eax
c001f183:	31 d2                	xor    edx,edx
c001f185:	89 e8                	mov    eax,ebp
c001f187:	f7 f7                	div    edi
c001f189:	89 c6                	mov    esi,eax
c001f18b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f18e:	f7 f7                	div    edi
c001f190:	89 c1                	mov    ecx,eax
c001f192:	eb c4                	jmp    c001f158 <__divdi3+0x58>
c001f194:	39 eb                	cmp    ebx,ebp
c001f196:	77 3c                	ja     c001f1d4 <__divdi3+0xd4>
c001f198:	0f bd f3             	bsr    esi,ebx
c001f19b:	83 f6 1f             	xor    esi,0x1f
c001f19e:	75 40                	jne    c001f1e0 <__divdi3+0xe0>
c001f1a0:	39 eb                	cmp    ebx,ebp
c001f1a2:	72 09                	jb     c001f1ad <__divdi3+0xad>
c001f1a4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f1a7:	0f 87 97 00 00 00    	ja     c001f244 <__divdi3+0x144>
c001f1ad:	b9 01 00 00 00       	mov    ecx,0x1
c001f1b2:	eb a4                	jmp    c001f158 <__divdi3+0x58>
c001f1b4:	f7 d9                	neg    ecx
c001f1b6:	83 d3 00             	adc    ebx,0x0
c001f1b9:	f7 db                	neg    ebx
c001f1bb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f1be:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f1c2:	89 dd                	mov    ebp,ebx
c001f1c4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f1cc:	e9 5f ff ff ff       	jmp    c001f130 <__divdi3+0x30>
c001f1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f1d4:	31 f6                	xor    esi,esi
c001f1d6:	31 c9                	xor    ecx,ecx
c001f1d8:	e9 7b ff ff ff       	jmp    c001f158 <__divdi3+0x58>
c001f1dd:	8d 76 00             	lea    esi,[esi+0x0]
c001f1e0:	b8 20 00 00 00       	mov    eax,0x20
c001f1e5:	29 f0                	sub    eax,esi
c001f1e7:	89 f1                	mov    ecx,esi
c001f1e9:	d3 e3                	shl    ebx,cl
c001f1eb:	89 fa                	mov    edx,edi
c001f1ed:	88 c1                	mov    cl,al
c001f1ef:	d3 ea                	shr    edx,cl
c001f1f1:	09 da                	or     edx,ebx
c001f1f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f1f7:	89 f1                	mov    ecx,esi
c001f1f9:	d3 e7                	shl    edi,cl
c001f1fb:	89 eb                	mov    ebx,ebp
c001f1fd:	88 c1                	mov    cl,al
c001f1ff:	d3 eb                	shr    ebx,cl
c001f201:	89 f1                	mov    ecx,esi
c001f203:	d3 e5                	shl    ebp,cl
c001f205:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f208:	88 c1                	mov    cl,al
c001f20a:	d3 ea                	shr    edx,cl
c001f20c:	09 d5                	or     ebp,edx
c001f20e:	89 e8                	mov    eax,ebp
c001f210:	89 da                	mov    edx,ebx
c001f212:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f216:	89 d3                	mov    ebx,edx
c001f218:	89 c5                	mov    ebp,eax
c001f21a:	f7 e7                	mul    edi
c001f21c:	39 d3                	cmp    ebx,edx
c001f21e:	72 18                	jb     c001f238 <__divdi3+0x138>
c001f220:	74 0a                	je     c001f22c <__divdi3+0x12c>
c001f222:	89 e9                	mov    ecx,ebp
c001f224:	31 f6                	xor    esi,esi
c001f226:	e9 2d ff ff ff       	jmp    c001f158 <__divdi3+0x58>
c001f22b:	90                   	nop
c001f22c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f22f:	89 f1                	mov    ecx,esi
c001f231:	d3 e7                	shl    edi,cl
c001f233:	39 c7                	cmp    edi,eax
c001f235:	73 eb                	jae    c001f222 <__divdi3+0x122>
c001f237:	90                   	nop
c001f238:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f23b:	31 f6                	xor    esi,esi
c001f23d:	e9 16 ff ff ff       	jmp    c001f158 <__divdi3+0x58>
c001f242:	66 90                	xchg   ax,ax
c001f244:	31 c9                	xor    ecx,ecx
c001f246:	e9 0d ff ff ff       	jmp    c001f158 <__divdi3+0x58>
c001f24b:	90                   	nop

c001f24c <__moddi3>:
c001f24c:	55                   	push   ebp
c001f24d:	57                   	push   edi
c001f24e:	56                   	push   esi
c001f24f:	53                   	push   ebx
c001f250:	83 ec 2c             	sub    esp,0x2c
c001f253:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f257:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f25b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f25f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f263:	85 db                	test   ebx,ebx
c001f265:	0f 88 85 00 00 00    	js     c001f2f0 <__moddi3+0xa4>
c001f26b:	89 de                	mov    esi,ebx
c001f26d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f275:	89 d7                	mov    edi,edx
c001f277:	85 d2                	test   edx,edx
c001f279:	79 09                	jns    c001f284 <__moddi3+0x38>
c001f27b:	f7 d8                	neg    eax
c001f27d:	83 d2 00             	adc    edx,0x0
c001f280:	f7 da                	neg    edx
c001f282:	89 d7                	mov    edi,edx
c001f284:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f288:	89 cd                	mov    ebp,ecx
c001f28a:	85 ff                	test   edi,edi
c001f28c:	75 52                	jne    c001f2e0 <__moddi3+0x94>
c001f28e:	89 c3                	mov    ebx,eax
c001f290:	39 f0                	cmp    eax,esi
c001f292:	76 24                	jbe    c001f2b8 <__moddi3+0x6c>
c001f294:	89 c8                	mov    eax,ecx
c001f296:	89 f2                	mov    edx,esi
c001f298:	f7 f3                	div    ebx
c001f29a:	89 d6                	mov    esi,edx
c001f29c:	89 f0                	mov    eax,esi
c001f29e:	31 d2                	xor    edx,edx
c001f2a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2a4:	85 c9                	test   ecx,ecx
c001f2a6:	74 07                	je     c001f2af <__moddi3+0x63>
c001f2a8:	f7 d8                	neg    eax
c001f2aa:	83 d2 00             	adc    edx,0x0
c001f2ad:	f7 da                	neg    edx
c001f2af:	83 c4 2c             	add    esp,0x2c
c001f2b2:	5b                   	pop    ebx
c001f2b3:	5e                   	pop    esi
c001f2b4:	5f                   	pop    edi
c001f2b5:	5d                   	pop    ebp
c001f2b6:	c3                   	ret    
c001f2b7:	90                   	nop
c001f2b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f2bc:	85 db                	test   ebx,ebx
c001f2be:	75 0d                	jne    c001f2cd <__moddi3+0x81>
c001f2c0:	b8 01 00 00 00       	mov    eax,0x1
c001f2c5:	31 d2                	xor    edx,edx
c001f2c7:	f7 f7                	div    edi
c001f2c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2cd:	89 f0                	mov    eax,esi
c001f2cf:	31 d2                	xor    edx,edx
c001f2d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f2d5:	f7 f7                	div    edi
c001f2d7:	89 e8                	mov    eax,ebp
c001f2d9:	f7 f7                	div    edi
c001f2db:	89 d6                	mov    esi,edx
c001f2dd:	eb bd                	jmp    c001f29c <__moddi3+0x50>
c001f2df:	90                   	nop
c001f2e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f2e4:	39 f7                	cmp    edi,esi
c001f2e6:	76 20                	jbe    c001f308 <__moddi3+0xbc>
c001f2e8:	89 c8                	mov    eax,ecx
c001f2ea:	89 f2                	mov    edx,esi
c001f2ec:	eb b2                	jmp    c001f2a0 <__moddi3+0x54>
c001f2ee:	66 90                	xchg   ax,ax
c001f2f0:	f7 d9                	neg    ecx
c001f2f2:	83 d3 00             	adc    ebx,0x0
c001f2f5:	f7 db                	neg    ebx
c001f2f7:	89 de                	mov    esi,ebx
c001f2f9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f301:	e9 6f ff ff ff       	jmp    c001f275 <__moddi3+0x29>
c001f306:	66 90                	xchg   ax,ax
c001f308:	0f bd c7             	bsr    eax,edi
c001f30b:	83 f0 1f             	xor    eax,0x1f
c001f30e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f312:	75 24                	jne    c001f338 <__moddi3+0xec>
c001f314:	39 f7                	cmp    edi,esi
c001f316:	72 06                	jb     c001f31e <__moddi3+0xd2>
c001f318:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f31c:	77 0c                	ja     c001f32a <__moddi3+0xde>
c001f31e:	89 e9                	mov    ecx,ebp
c001f320:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f324:	19 fe                	sbb    esi,edi
c001f326:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f32a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f32e:	89 f2                	mov    edx,esi
c001f330:	e9 6b ff ff ff       	jmp    c001f2a0 <__moddi3+0x54>
c001f335:	8d 76 00             	lea    esi,[esi+0x0]
c001f338:	b8 20 00 00 00       	mov    eax,0x20
c001f33d:	89 c2                	mov    edx,eax
c001f33f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f343:	29 da                	sub    edx,ebx
c001f345:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f349:	88 d9                	mov    cl,bl
c001f34b:	d3 e7                	shl    edi,cl
c001f34d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f351:	88 d1                	mov    cl,dl
c001f353:	d3 e8                	shr    eax,cl
c001f355:	09 c7                	or     edi,eax
c001f357:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f35b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f35f:	89 d8                	mov    eax,ebx
c001f361:	88 d9                	mov    cl,bl
c001f363:	d3 e7                	shl    edi,cl
c001f365:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f369:	89 f3                	mov    ebx,esi
c001f36b:	88 d1                	mov    cl,dl
c001f36d:	d3 eb                	shr    ebx,cl
c001f36f:	89 c7                	mov    edi,eax
c001f371:	88 c1                	mov    cl,al
c001f373:	d3 e6                	shl    esi,cl
c001f375:	89 e8                	mov    eax,ebp
c001f377:	88 d1                	mov    cl,dl
c001f379:	d3 e8                	shr    eax,cl
c001f37b:	09 f0                	or     eax,esi
c001f37d:	89 f9                	mov    ecx,edi
c001f37f:	d3 e5                	shl    ebp,cl
c001f381:	89 da                	mov    edx,ebx
c001f383:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f387:	89 d3                	mov    ebx,edx
c001f389:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f38d:	89 c6                	mov    esi,eax
c001f38f:	89 d1                	mov    ecx,edx
c001f391:	39 d3                	cmp    ebx,edx
c001f393:	72 27                	jb     c001f3bc <__moddi3+0x170>
c001f395:	74 21                	je     c001f3b8 <__moddi3+0x16c>
c001f397:	29 f5                	sub    ebp,esi
c001f399:	19 cb                	sbb    ebx,ecx
c001f39b:	89 de                	mov    esi,ebx
c001f39d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f3a1:	d3 e6                	shl    esi,cl
c001f3a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f3a7:	89 f9                	mov    ecx,edi
c001f3a9:	d3 ed                	shr    ebp,cl
c001f3ab:	09 ee                	or     esi,ebp
c001f3ad:	89 f0                	mov    eax,esi
c001f3af:	d3 eb                	shr    ebx,cl
c001f3b1:	89 da                	mov    edx,ebx
c001f3b3:	e9 e8 fe ff ff       	jmp    c001f2a0 <__moddi3+0x54>
c001f3b8:	39 c5                	cmp    ebp,eax
c001f3ba:	73 db                	jae    c001f397 <__moddi3+0x14b>
c001f3bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f3c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f3c4:	89 d1                	mov    ecx,edx
c001f3c6:	89 c6                	mov    esi,eax
c001f3c8:	eb cd                	jmp    c001f397 <__moddi3+0x14b>
c001f3ca:	66 90                	xchg   ax,ax

c001f3cc <__udivdi3>:
c001f3cc:	55                   	push   ebp
c001f3cd:	57                   	push   edi
c001f3ce:	56                   	push   esi
c001f3cf:	53                   	push   ebx
c001f3d0:	83 ec 1c             	sub    esp,0x1c
c001f3d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f3d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f3db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f3df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f3e3:	85 d2                	test   edx,edx
c001f3e5:	75 41                	jne    c001f428 <__udivdi3+0x5c>
c001f3e7:	39 f7                	cmp    edi,esi
c001f3e9:	76 15                	jbe    c001f400 <__udivdi3+0x34>
c001f3eb:	89 e8                	mov    eax,ebp
c001f3ed:	89 f2                	mov    edx,esi
c001f3ef:	f7 f7                	div    edi
c001f3f1:	31 db                	xor    ebx,ebx
c001f3f3:	89 da                	mov    edx,ebx
c001f3f5:	83 c4 1c             	add    esp,0x1c
c001f3f8:	5b                   	pop    ebx
c001f3f9:	5e                   	pop    esi
c001f3fa:	5f                   	pop    edi
c001f3fb:	5d                   	pop    ebp
c001f3fc:	c3                   	ret    
c001f3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001f400:	89 f9                	mov    ecx,edi
c001f402:	85 ff                	test   edi,edi
c001f404:	75 0b                	jne    c001f411 <__udivdi3+0x45>
c001f406:	b8 01 00 00 00       	mov    eax,0x1
c001f40b:	31 d2                	xor    edx,edx
c001f40d:	f7 f7                	div    edi
c001f40f:	89 c1                	mov    ecx,eax
c001f411:	31 d2                	xor    edx,edx
c001f413:	89 f0                	mov    eax,esi
c001f415:	f7 f1                	div    ecx
c001f417:	89 c3                	mov    ebx,eax
c001f419:	89 e8                	mov    eax,ebp
c001f41b:	f7 f1                	div    ecx
c001f41d:	89 da                	mov    edx,ebx
c001f41f:	83 c4 1c             	add    esp,0x1c
c001f422:	5b                   	pop    ebx
c001f423:	5e                   	pop    esi
c001f424:	5f                   	pop    edi
c001f425:	5d                   	pop    ebp
c001f426:	c3                   	ret    
c001f427:	90                   	nop
c001f428:	39 f2                	cmp    edx,esi
c001f42a:	77 1c                	ja     c001f448 <__udivdi3+0x7c>
c001f42c:	0f bd da             	bsr    ebx,edx
c001f42f:	83 f3 1f             	xor    ebx,0x1f
c001f432:	75 24                	jne    c001f458 <__udivdi3+0x8c>
c001f434:	39 f2                	cmp    edx,esi
c001f436:	72 08                	jb     c001f440 <__udivdi3+0x74>
c001f438:	39 ef                	cmp    edi,ebp
c001f43a:	0f 87 84 00 00 00    	ja     c001f4c4 <__udivdi3+0xf8>
c001f440:	b8 01 00 00 00       	mov    eax,0x1
c001f445:	eb ac                	jmp    c001f3f3 <__udivdi3+0x27>
c001f447:	90                   	nop
c001f448:	31 db                	xor    ebx,ebx
c001f44a:	31 c0                	xor    eax,eax
c001f44c:	89 da                	mov    edx,ebx
c001f44e:	83 c4 1c             	add    esp,0x1c
c001f451:	5b                   	pop    ebx
c001f452:	5e                   	pop    esi
c001f453:	5f                   	pop    edi
c001f454:	5d                   	pop    ebp
c001f455:	c3                   	ret    
c001f456:	66 90                	xchg   ax,ax
c001f458:	b8 20 00 00 00       	mov    eax,0x20
c001f45d:	29 d8                	sub    eax,ebx
c001f45f:	88 d9                	mov    cl,bl
c001f461:	d3 e2                	shl    edx,cl
c001f463:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f467:	89 fa                	mov    edx,edi
c001f469:	88 c1                	mov    cl,al
c001f46b:	d3 ea                	shr    edx,cl
c001f46d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f471:	09 d1                	or     ecx,edx
c001f473:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f477:	88 d9                	mov    cl,bl
c001f479:	d3 e7                	shl    edi,cl
c001f47b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f47f:	89 f7                	mov    edi,esi
c001f481:	88 c1                	mov    cl,al
c001f483:	d3 ef                	shr    edi,cl
c001f485:	88 d9                	mov    cl,bl
c001f487:	d3 e6                	shl    esi,cl
c001f489:	89 ea                	mov    edx,ebp
c001f48b:	88 c1                	mov    cl,al
c001f48d:	d3 ea                	shr    edx,cl
c001f48f:	09 d6                	or     esi,edx
c001f491:	89 f0                	mov    eax,esi
c001f493:	89 fa                	mov    edx,edi
c001f495:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f499:	89 d7                	mov    edi,edx
c001f49b:	89 c6                	mov    esi,eax
c001f49d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4a1:	39 d7                	cmp    edi,edx
c001f4a3:	72 13                	jb     c001f4b8 <__udivdi3+0xec>
c001f4a5:	74 09                	je     c001f4b0 <__udivdi3+0xe4>
c001f4a7:	89 f0                	mov    eax,esi
c001f4a9:	31 db                	xor    ebx,ebx
c001f4ab:	e9 43 ff ff ff       	jmp    c001f3f3 <__udivdi3+0x27>
c001f4b0:	88 d9                	mov    cl,bl
c001f4b2:	d3 e5                	shl    ebp,cl
c001f4b4:	39 c5                	cmp    ebp,eax
c001f4b6:	73 ef                	jae    c001f4a7 <__udivdi3+0xdb>
c001f4b8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f4bb:	31 db                	xor    ebx,ebx
c001f4bd:	e9 31 ff ff ff       	jmp    c001f3f3 <__udivdi3+0x27>
c001f4c2:	66 90                	xchg   ax,ax
c001f4c4:	31 c0                	xor    eax,eax
c001f4c6:	e9 28 ff ff ff       	jmp    c001f3f3 <__udivdi3+0x27>
c001f4cb:	90                   	nop

c001f4cc <__umoddi3>:
c001f4cc:	55                   	push   ebp
c001f4cd:	57                   	push   edi
c001f4ce:	56                   	push   esi
c001f4cf:	53                   	push   ebx
c001f4d0:	83 ec 1c             	sub    esp,0x1c
c001f4d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f4d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f4db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f4df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f4e3:	89 da                	mov    edx,ebx
c001f4e5:	85 c0                	test   eax,eax
c001f4e7:	75 37                	jne    c001f520 <__umoddi3+0x54>
c001f4e9:	39 df                	cmp    edi,ebx
c001f4eb:	76 13                	jbe    c001f500 <__umoddi3+0x34>
c001f4ed:	89 f0                	mov    eax,esi
c001f4ef:	f7 f7                	div    edi
c001f4f1:	89 d0                	mov    eax,edx
c001f4f3:	31 d2                	xor    edx,edx
c001f4f5:	83 c4 1c             	add    esp,0x1c
c001f4f8:	5b                   	pop    ebx
c001f4f9:	5e                   	pop    esi
c001f4fa:	5f                   	pop    edi
c001f4fb:	5d                   	pop    ebp
c001f4fc:	c3                   	ret    
c001f4fd:	8d 76 00             	lea    esi,[esi+0x0]
c001f500:	89 fd                	mov    ebp,edi
c001f502:	85 ff                	test   edi,edi
c001f504:	75 0b                	jne    c001f511 <__umoddi3+0x45>
c001f506:	b8 01 00 00 00       	mov    eax,0x1
c001f50b:	31 d2                	xor    edx,edx
c001f50d:	f7 f7                	div    edi
c001f50f:	89 c5                	mov    ebp,eax
c001f511:	89 d8                	mov    eax,ebx
c001f513:	31 d2                	xor    edx,edx
c001f515:	f7 f5                	div    ebp
c001f517:	89 f0                	mov    eax,esi
c001f519:	f7 f5                	div    ebp
c001f51b:	89 d0                	mov    eax,edx
c001f51d:	eb d4                	jmp    c001f4f3 <__umoddi3+0x27>
c001f51f:	90                   	nop
c001f520:	89 f1                	mov    ecx,esi
c001f522:	39 d8                	cmp    eax,ebx
c001f524:	76 0a                	jbe    c001f530 <__umoddi3+0x64>
c001f526:	89 f0                	mov    eax,esi
c001f528:	83 c4 1c             	add    esp,0x1c
c001f52b:	5b                   	pop    ebx
c001f52c:	5e                   	pop    esi
c001f52d:	5f                   	pop    edi
c001f52e:	5d                   	pop    ebp
c001f52f:	c3                   	ret    
c001f530:	0f bd e8             	bsr    ebp,eax
c001f533:	83 f5 1f             	xor    ebp,0x1f
c001f536:	75 1c                	jne    c001f554 <__umoddi3+0x88>
c001f538:	39 d8                	cmp    eax,ebx
c001f53a:	72 04                	jb     c001f540 <__umoddi3+0x74>
c001f53c:	39 f7                	cmp    edi,esi
c001f53e:	77 08                	ja     c001f548 <__umoddi3+0x7c>
c001f540:	89 da                	mov    edx,ebx
c001f542:	29 fe                	sub    esi,edi
c001f544:	19 c2                	sbb    edx,eax
c001f546:	89 f1                	mov    ecx,esi
c001f548:	89 c8                	mov    eax,ecx
c001f54a:	83 c4 1c             	add    esp,0x1c
c001f54d:	5b                   	pop    ebx
c001f54e:	5e                   	pop    esi
c001f54f:	5f                   	pop    edi
c001f550:	5d                   	pop    ebp
c001f551:	c3                   	ret    
c001f552:	66 90                	xchg   ax,ax
c001f554:	ba 20 00 00 00       	mov    edx,0x20
c001f559:	29 ea                	sub    edx,ebp
c001f55b:	89 e9                	mov    ecx,ebp
c001f55d:	d3 e0                	shl    eax,cl
c001f55f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f563:	89 f8                	mov    eax,edi
c001f565:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f569:	88 d1                	mov    cl,dl
c001f56b:	d3 e8                	shr    eax,cl
c001f56d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f571:	09 c1                	or     ecx,eax
c001f573:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f577:	89 e9                	mov    ecx,ebp
c001f579:	d3 e7                	shl    edi,cl
c001f57b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f57f:	89 d8                	mov    eax,ebx
c001f581:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f585:	88 d1                	mov    cl,dl
c001f587:	d3 e8                	shr    eax,cl
c001f589:	89 c7                	mov    edi,eax
c001f58b:	89 e9                	mov    ecx,ebp
c001f58d:	d3 e3                	shl    ebx,cl
c001f58f:	89 f0                	mov    eax,esi
c001f591:	88 d1                	mov    cl,dl
c001f593:	d3 e8                	shr    eax,cl
c001f595:	09 d8                	or     eax,ebx
c001f597:	89 e9                	mov    ecx,ebp
c001f599:	d3 e6                	shl    esi,cl
c001f59b:	89 f3                	mov    ebx,esi
c001f59d:	89 fa                	mov    edx,edi
c001f59f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5a3:	89 d1                	mov    ecx,edx
c001f5a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5a9:	89 c6                	mov    esi,eax
c001f5ab:	89 d7                	mov    edi,edx
c001f5ad:	39 d1                	cmp    ecx,edx
c001f5af:	72 27                	jb     c001f5d8 <__umoddi3+0x10c>
c001f5b1:	74 21                	je     c001f5d4 <__umoddi3+0x108>
c001f5b3:	89 ca                	mov    edx,ecx
c001f5b5:	29 f3                	sub    ebx,esi
c001f5b7:	19 fa                	sbb    edx,edi
c001f5b9:	89 d0                	mov    eax,edx
c001f5bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f5bf:	d3 e0                	shl    eax,cl
c001f5c1:	89 e9                	mov    ecx,ebp
c001f5c3:	d3 eb                	shr    ebx,cl
c001f5c5:	09 d8                	or     eax,ebx
c001f5c7:	d3 ea                	shr    edx,cl
c001f5c9:	83 c4 1c             	add    esp,0x1c
c001f5cc:	5b                   	pop    ebx
c001f5cd:	5e                   	pop    esi
c001f5ce:	5f                   	pop    edi
c001f5cf:	5d                   	pop    ebp
c001f5d0:	c3                   	ret    
c001f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f5d4:	39 c3                	cmp    ebx,eax
c001f5d6:	73 db                	jae    c001f5b3 <__umoddi3+0xe7>
c001f5d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f5dc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f5e0:	89 d7                	mov    edi,edx
c001f5e2:	89 c6                	mov    esi,eax
c001f5e4:	eb cd                	jmp    c001f5b3 <__umoddi3+0xe7>
c001f5e6:	66 90                	xchg   ax,ax
c001f5e8:	66 90                	xchg   ax,ax
c001f5ea:	66 90                	xchg   ax,ax
c001f5ec:	66 90                	xchg   ax,ax
c001f5ee:	66 90                	xchg   ax,ax

c001f5f0 <fabs>:
c001f5f0:	83 ec 0c             	sub    esp,0xc
c001f5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f5fe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f603:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f607:	dd 04 24             	fld    QWORD PTR [esp]
c001f60a:	83 c4 0c             	add    esp,0xc
c001f60d:	c3                   	ret    
c001f60e:	66 90                	xchg   ax,ax

c001f610 <lrint>:
c001f610:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f614:	83 ec 04             	sub    esp,0x4
c001f617:	db 1c 24             	fistp  DWORD PTR [esp]
c001f61a:	58                   	pop    eax
c001f61b:	c3                   	ret    

c001f61c <lrintf>:
c001f61c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f620:	83 ec 04             	sub    esp,0x4
c001f623:	db 1c 24             	fistp  DWORD PTR [esp]
c001f626:	58                   	pop    eax
c001f627:	c3                   	ret    

Disassembly of section .init:

c001f628 <_init>:
c001f628:	55                   	push   ebp
c001f629:	89 e5                	mov    ebp,esp
c001f62b:	e8 e8 0a fe ff       	call   c0000118 <frame_dummy>
c001f630:	e8 a3 fa ff ff       	call   c001f0d8 <__do_global_ctors_aux>
c001f635:	5d                   	pop    ebp
c001f636:	c3                   	ret    

Disassembly of section .fini:

c001f637 <_fini>:
c001f637:	55                   	push   ebp
c001f638:	89 e5                	mov    ebp,esp
c001f63a:	e8 69 0a fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f63f:	5d                   	pop    ebp
c001f640:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f642 <Computer::~Computer()>:
c001f642:	83 ec 0c             	sub    esp,0xc
c001f645:	ba 64 11 02 c0       	mov    edx,0xc0021164
c001f64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64e:	89 10                	mov    DWORD PTR [eax],edx
c001f650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f654:	83 ec 0c             	sub    esp,0xc
c001f657:	50                   	push   eax
c001f658:	e8 b7 0d ff ff       	call   c0010414 <Device::~Device()>
c001f65d:	83 c4 10             	add    esp,0x10
c001f660:	90                   	nop
c001f661:	83 c4 0c             	add    esp,0xc
c001f664:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f666 <Computer::~Computer()>:
c001f666:	83 ec 0c             	sub    esp,0xc
c001f669:	83 ec 0c             	sub    esp,0xc
c001f66c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f670:	e8 cd ff ff ff       	call   c001f642 <Computer::~Computer()>
c001f675:	83 c4 10             	add    esp,0x10
c001f678:	83 ec 08             	sub    esp,0x8
c001f67b:	68 ec 01 00 00       	push   0x1ec
c001f680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f684:	e8 aa f9 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f689:	83 c4 10             	add    esp,0x10
c001f68c:	83 c4 0c             	add    esp,0xc
c001f68f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f690 <idleCommon()>:
c001f690:	83 ec 0c             	sub    esp,0xc
c001f693:	e8 9d 92 ff ff       	call   c0018935 <lockScheduler()>
c001f698:	e8 e1 95 ff ff       	call   c0018c7e <schedule()>
c001f69d:	83 c4 0c             	add    esp,0xc
c001f6a0:	e9 92 92 ff ff       	jmp    c0018937 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f6a5 <CPU::readCR3()>:
c001f6a5:	83 ec 10             	sub    esp,0x10
c001f6a8:	0f 20 d8             	mov    eax,cr3
c001f6ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6b3:	83 c4 10             	add    esp,0x10
c001f6b6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f6b7 <CPU::writeCR3(unsigned long)>:
c001f6b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6bb:	0f 22 d8             	mov    cr3,eax
c001f6be:	90                   	nop
c001f6bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f6c0 <LinkedList<UnixFile>::~LinkedList()>:
c001f6c0:	90                   	nop
c001f6c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f6c2 <LinkedList<UnixFile>::LinkedList()>:
c001f6c2:	83 ec 0c             	sub    esp,0xc
c001f6c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f705:	83 ec 0c             	sub    esp,0xc
c001f708:	68 da 13 02 c0       	push   0xc00213da
c001f70d:	e8 47 fa fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001f712:	83 c4 10             	add    esp,0x10
c001f715:	90                   	nop
c001f716:	83 c4 0c             	add    esp,0xc
c001f719:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f71a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f71a:	83 ec 0c             	sub    esp,0xc
c001f71d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f722:	75 10                	jne    c001f734 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f724:	83 ec 0c             	sub    esp,0xc
c001f727:	68 f4 13 02 c0       	push   0xc00213f4
c001f72c:	e8 17 62 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001f731:	83 c4 10             	add    esp,0x10
c001f734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f738:	8b 00                	mov    eax,DWORD PTR [eax]
c001f73a:	85 c0                	test   eax,eax
c001f73c:	74 34                	je     c001f772 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f742:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f745:	85 c0                	test   eax,eax
c001f747:	74 29                	je     c001f772 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f750:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f754:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f75f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f766:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f769:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f770:	eb 65                	jmp    c001f7d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f776:	8b 00                	mov    eax,DWORD PTR [eax]
c001f778:	85 c0                	test   eax,eax
c001f77a:	75 4b                	jne    c001f7c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f783:	85 c0                	test   eax,eax
c001f785:	75 40                	jne    c001f7c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f78f:	89 10                	mov    DWORD PTR [eax],edx
c001f791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f795:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f799:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7b1:	85 c0                	test   eax,eax
c001f7b3:	74 22                	je     c001f7d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7b5:	83 ec 0c             	sub    esp,0xc
c001f7b8:	68 16 14 02 c0       	push   0xc0021416
c001f7bd:	e8 86 61 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001f7c2:	83 c4 10             	add    esp,0x10
c001f7c5:	eb 10                	jmp    c001f7d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7c7:	83 ec 0c             	sub    esp,0xc
c001f7ca:	68 20 14 02 c0       	push   0xc0021420
c001f7cf:	e8 74 61 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001f7d4:	83 c4 10             	add    esp,0x10
c001f7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7de:	8d 50 01             	lea    edx,[eax+0x1]
c001f7e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7e8:	90                   	nop
c001f7e9:	83 c4 0c             	add    esp,0xc
c001f7ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f7ee <LinkedList<UnixFile>::getFirstElement()>:
c001f7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f7f6 <LinkedList<UnixFile>::removeFirst()>:
c001f7f6:	83 ec 0c             	sub    esp,0xc
c001f7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7ff:	85 c0                	test   eax,eax
c001f801:	75 12                	jne    c001f815 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f803:	83 ec 0c             	sub    esp,0xc
c001f806:	68 2c 14 02 c0       	push   0xc002142c
c001f80b:	e8 38 61 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001f810:	83 c4 10             	add    esp,0x10
c001f813:	eb 7e                	jmp    c001f893 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f819:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f81c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f81f:	85 c0                	test   eax,eax
c001f821:	74 10                	je     c001f833 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f823:	83 ec 0c             	sub    esp,0xc
c001f826:	68 77 14 02 c0       	push   0xc0021477
c001f82b:	e8 18 61 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001f830:	83 c4 10             	add    esp,0x10
c001f833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f837:	8b 00                	mov    eax,DWORD PTR [eax]
c001f839:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f83c:	85 c0                	test   eax,eax
c001f83e:	75 33                	jne    c001f873 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f844:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f859:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f85c:	83 f8 01             	cmp    eax,0x1
c001f85f:	74 21                	je     c001f882 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f861:	83 ec 0c             	sub    esp,0xc
c001f864:	68 50 14 02 c0       	push   0xc0021450
c001f869:	e8 da 60 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001f86e:	83 c4 10             	add    esp,0x10
c001f871:	eb 0f                	jmp    c001f882 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f877:	8b 00                	mov    eax,DWORD PTR [eax]
c001f879:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f880:	89 10                	mov    DWORD PTR [eax],edx
c001f882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f886:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f889:	8d 50 ff             	lea    edx,[eax-0x1]
c001f88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f890:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f893:	83 c4 0c             	add    esp,0xc
c001f896:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f898 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f89c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f89f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f8a0 <DriverlessDevice::~DriverlessDevice()>:
c001f8a0:	ba e4 1a 02 c0       	mov    edx,0xc0021ae4
c001f8a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8a9:	89 10                	mov    DWORD PTR [eax],edx
c001f8ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8af:	50                   	push   eax
c001f8b0:	e8 5f 0b ff ff       	call   c0010414 <Device::~Device()>
c001f8b5:	83 c4 04             	add    esp,0x4
c001f8b8:	90                   	nop
c001f8b9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f8ba <DriverlessDevice::~DriverlessDevice()>:
c001f8ba:	83 ec 0c             	sub    esp,0xc
c001f8bd:	83 ec 0c             	sub    esp,0xc
c001f8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c4:	e8 d7 ff ff ff       	call   c001f8a0 <DriverlessDevice::~DriverlessDevice()>
c001f8c9:	83 c4 10             	add    esp,0x10
c001f8cc:	83 ec 08             	sub    esp,0x8
c001f8cf:	68 58 01 00 00       	push   0x158
c001f8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d8:	e8 56 f7 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f8dd:	83 c4 10             	add    esp,0x10
c001f8e0:	83 c4 0c             	add    esp,0xc
c001f8e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f8e4 <LinkedList<Device>::addElement(Device*)>:
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f8ec:	75 10                	jne    c001f8fe <LinkedList<Device>::addElement(Device*)+0x1a>
c001f8ee:	83 ec 0c             	sub    esp,0xc
c001f8f1:	68 f4 13 02 c0       	push   0xc00213f4
c001f8f6:	e8 4d 60 ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001f8fb:	83 c4 10             	add    esp,0x10
c001f8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f902:	8b 00                	mov    eax,DWORD PTR [eax]
c001f904:	85 c0                	test   eax,eax
c001f906:	74 3a                	je     c001f942 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f90f:	85 c0                	test   eax,eax
c001f911:	74 2f                	je     c001f942 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f917:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f91a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f91e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f928:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f92c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f933:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f936:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f940:	eb 68                	jmp    c001f9aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f946:	8b 00                	mov    eax,DWORD PTR [eax]
c001f948:	85 c0                	test   eax,eax
c001f94a:	75 4e                	jne    c001f99a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f950:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f953:	85 c0                	test   eax,eax
c001f955:	75 43                	jne    c001f99a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f95f:	89 10                	mov    DWORD PTR [eax],edx
c001f961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f965:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f969:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f973:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f981:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f984:	85 c0                	test   eax,eax
c001f986:	74 22                	je     c001f9aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f988:	83 ec 0c             	sub    esp,0xc
c001f98b:	68 16 14 02 c0       	push   0xc0021416
c001f990:	e8 b3 5f ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001f995:	83 c4 10             	add    esp,0x10
c001f998:	eb 10                	jmp    c001f9aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f99a:	83 ec 0c             	sub    esp,0xc
c001f99d:	68 20 14 02 c0       	push   0xc0021420
c001f9a2:	e8 a1 5f ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001f9a7:	83 c4 10             	add    esp,0x10
c001f9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9b1:	8d 50 01             	lea    edx,[eax+0x1]
c001f9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9bb:	90                   	nop
c001f9bc:	83 c4 0c             	add    esp,0xc
c001f9bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f9c0 <LinkedList<Device>::LinkedList()>:
c001f9c0:	83 ec 0c             	sub    esp,0xc
c001f9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa03:	83 ec 0c             	sub    esp,0xc
c001fa06:	68 da 13 02 c0       	push   0xc00213da
c001fa0b:	e8 49 f7 fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001fa10:	83 c4 10             	add    esp,0x10
c001fa13:	90                   	nop
c001fa14:	83 c4 0c             	add    esp,0xc
c001fa17:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fa18 <CPU::readCR0()>:
c001fa18:	83 ec 10             	sub    esp,0x10
c001fa1b:	0f 20 c0             	mov    eax,cr0
c001fa1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa26:	83 c4 10             	add    esp,0x10
c001fa29:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fa2a <CPU::writeCR0(unsigned long)>:
c001fa2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa2e:	0f 22 c0             	mov    cr0,eax
c001fa31:	90                   	nop
c001fa32:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fa33 <CPU::readDR0()>:
c001fa33:	83 ec 10             	sub    esp,0x10
c001fa36:	0f 21 c0             	mov    eax,db0
c001fa39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa41:	83 c4 10             	add    esp,0x10
c001fa44:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fa45 <CPU::readDR1()>:
c001fa45:	83 ec 10             	sub    esp,0x10
c001fa48:	0f 21 c8             	mov    eax,db1
c001fa4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa53:	83 c4 10             	add    esp,0x10
c001fa56:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fa57 <CPU::readDR2()>:
c001fa57:	83 ec 10             	sub    esp,0x10
c001fa5a:	0f 21 d0             	mov    eax,db2
c001fa5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa65:	83 c4 10             	add    esp,0x10
c001fa68:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fa69 <CPU::readDR3()>:
c001fa69:	83 ec 10             	sub    esp,0x10
c001fa6c:	0f 21 d8             	mov    eax,db3
c001fa6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa77:	83 c4 10             	add    esp,0x10
c001fa7a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fa7b <CPU::readDR6()>:
c001fa7b:	83 ec 10             	sub    esp,0x10
c001fa7e:	0f 21 f0             	mov    eax,db6
c001fa81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa89:	83 c4 10             	add    esp,0x10
c001fa8c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fa8d <CPU::readDR7()>:
c001fa8d:	83 ec 10             	sub    esp,0x10
c001fa90:	0f 21 f8             	mov    eax,db7
c001fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa9b:	83 c4 10             	add    esp,0x10
c001fa9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001faa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001faa6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001faa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faac:	8b 00                	mov    eax,DWORD PTR [eax]
c001faae:	85 c0                	test   eax,eax
c001fab0:	75 0e                	jne    c001fac0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab9:	85 c0                	test   eax,eax
c001fabb:	75 03                	jne    c001fac0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fabd:	b0 01                	mov    al,0x1
c001fabf:	c3                   	ret    
c001fac0:	b0 00                	mov    al,0x0
c001fac2:	90                   	nop
c001fac3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fac4:	83 ec 0c             	sub    esp,0xc
c001fac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facb:	8b 00                	mov    eax,DWORD PTR [eax]
c001facd:	85 c0                	test   eax,eax
c001facf:	75 15                	jne    c001fae6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fad1:	83 ec 0c             	sub    esp,0xc
c001fad4:	68 2c 14 02 c0       	push   0xc002142c
c001fad9:	e8 6a 5e ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001fade:	83 c4 10             	add    esp,0x10
c001fae1:	e9 88 00 00 00       	jmp    c001fb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001faf0:	85 c0                	test   eax,eax
c001faf2:	0f 95 c0             	setne  al
c001faf5:	84 c0                	test   al,al
c001faf7:	74 10                	je     c001fb09 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001faf9:	83 ec 0c             	sub    esp,0xc
c001fafc:	68 77 14 02 c0       	push   0xc0021477
c001fb01:	e8 42 5e ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001fb06:	83 c4 10             	add    esp,0x10
c001fb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb12:	85 c0                	test   eax,eax
c001fb14:	0f 94 c0             	sete   al
c001fb17:	84 c0                	test   al,al
c001fb19:	74 33                	je     c001fb4e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb29:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb37:	83 f8 01             	cmp    eax,0x1
c001fb3a:	74 21                	je     c001fb5d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fb3c:	83 ec 0c             	sub    esp,0xc
c001fb3f:	68 50 14 02 c0       	push   0xc0021450
c001fb44:	e8 ff 5d ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001fb49:	83 c4 10             	add    esp,0x10
c001fb4c:	eb 0f                	jmp    c001fb5d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb52:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb54:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5b:	89 10                	mov    DWORD PTR [eax],edx
c001fb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb64:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb6e:	83 c4 0c             	add    esp,0xc
c001fb71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb7a:	75 10                	jne    c001fb8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fb7c:	83 ec 0c             	sub    esp,0xc
c001fb7f:	68 f4 13 02 c0       	push   0xc00213f4
c001fb84:	e8 bf 5d ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001fb89:	83 c4 10             	add    esp,0x10
c001fb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb92:	85 c0                	test   eax,eax
c001fb94:	74 34                	je     c001fbca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb9d:	85 c0                	test   eax,eax
c001fb9f:	74 29                	je     c001fbca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fba8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbc1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fbc8:	eb 65                	jmp    c001fc2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbce:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd0:	85 c0                	test   eax,eax
c001fbd2:	75 4b                	jne    c001fc1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbdb:	85 c0                	test   eax,eax
c001fbdd:	75 40                	jne    c001fc1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbe7:	89 10                	mov    DWORD PTR [eax],edx
c001fbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbf1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbfb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc06:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc09:	85 c0                	test   eax,eax
c001fc0b:	74 22                	je     c001fc2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fc0d:	83 ec 0c             	sub    esp,0xc
c001fc10:	68 16 14 02 c0       	push   0xc0021416
c001fc15:	e8 2e 5d ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001fc1a:	83 c4 10             	add    esp,0x10
c001fc1d:	eb 10                	jmp    c001fc2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fc1f:	83 ec 0c             	sub    esp,0xc
c001fc22:	68 20 14 02 c0       	push   0xc0021420
c001fc27:	e8 1c 5d ff ff       	call   c0015948 <Krnl::panic(char const*)>
c001fc2c:	83 c4 10             	add    esp,0x10
c001fc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc33:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc36:	8d 50 01             	lea    edx,[eax+0x1]
c001fc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc40:	90                   	nop
c001fc41:	83 c4 0c             	add    esp,0xc
c001fc44:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fc46 <ACPI::~ACPI()>:
c001fc46:	83 ec 0c             	sub    esp,0xc
c001fc49:	ba 9c 22 02 c0       	mov    edx,0xc002229c
c001fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc52:	89 10                	mov    DWORD PTR [eax],edx
c001fc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	50                   	push   eax
c001fc5c:	e8 b3 07 ff ff       	call   c0010414 <Device::~Device()>
c001fc61:	83 c4 10             	add    esp,0x10
c001fc64:	90                   	nop
c001fc65:	83 c4 0c             	add    esp,0xc
c001fc68:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fc6a <ACPI::~ACPI()>:
c001fc6a:	83 ec 0c             	sub    esp,0xc
c001fc6d:	83 ec 0c             	sub    esp,0xc
c001fc70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc74:	e8 cd ff ff ff       	call   c001fc46 <ACPI::~ACPI()>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	83 ec 08             	sub    esp,0x8
c001fc7f:	68 68 22 00 00       	push   0x2268
c001fc84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc88:	e8 a6 f3 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fc8d:	83 c4 10             	add    esp,0x10
c001fc90:	83 c4 0c             	add    esp,0xc
c001fc93:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fc94 <CPU::~CPU()>:
c001fc94:	83 ec 0c             	sub    esp,0xc
c001fc97:	ba 8c 26 02 c0       	mov    edx,0xc002268c
c001fc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca0:	89 10                	mov    DWORD PTR [eax],edx
c001fca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca6:	83 ec 0c             	sub    esp,0xc
c001fca9:	50                   	push   eax
c001fcaa:	e8 65 07 ff ff       	call   c0010414 <Device::~Device()>
c001fcaf:	83 c4 10             	add    esp,0x10
c001fcb2:	90                   	nop
c001fcb3:	83 c4 0c             	add    esp,0xc
c001fcb6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fcb8 <CPU::~CPU()>:
c001fcb8:	83 ec 0c             	sub    esp,0xc
c001fcbb:	83 ec 0c             	sub    esp,0xc
c001fcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc2:	e8 cd ff ff ff       	call   c001fc94 <CPU::~CPU()>
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	83 ec 08             	sub    esp,0x8
c001fccd:	68 98 11 00 00       	push   0x1198
c001fcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd6:	e8 58 f3 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fcdb:	83 c4 10             	add    esp,0x10
c001fcde:	83 c4 0c             	add    esp,0xc
c001fce1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fce2 <CPU::readCR4()>:
c001fce2:	83 ec 10             	sub    esp,0x10
c001fce5:	0f 20 e0             	mov    eax,cr4
c001fce8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcf0:	83 c4 10             	add    esp,0x10
c001fcf3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fcf4 <CPU::writeDR7(unsigned long)>:
c001fcf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf8:	0f 23 f8             	mov    db7,eax
c001fcfb:	90                   	nop
c001fcfc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fcfd <CPU::writeCR4(unsigned long)>:
c001fcfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd01:	0f 22 e0             	mov    cr4,eax
c001fd04:	90                   	nop
c001fd05:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fd06 <CPU::readCR2()>:
c001fd06:	83 ec 10             	sub    esp,0x10
c001fd09:	0f 20 d0             	mov    eax,cr2
c001fd0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd14:	83 c4 10             	add    esp,0x10
c001fd17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fd18 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fd18:	90                   	nop
c001fd19:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fd1a <ThreadControlBlock::ThreadControlBlock()>:
c001fd1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd1e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd29:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd34:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fd3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd3f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fd46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd4a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd52:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fd56:	90                   	nop
c001fd57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fd58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fd58:	83 ec 0c             	sub    esp,0xc
c001fd5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd74:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd9b:	83 ec 0c             	sub    esp,0xc
c001fd9e:	68 da 13 02 c0       	push   0xc00213da
c001fda3:	e8 b1 f3 fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001fda8:	83 c4 10             	add    esp,0x10
c001fdab:	90                   	nop
c001fdac:	83 c4 0c             	add    esp,0xc
c001fdaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fdb0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fdb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdb4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdb7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fdb8 <PCI::~PCI()>:
c001fdb8:	83 ec 0c             	sub    esp,0xc
c001fdbb:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001fdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc4:	89 10                	mov    DWORD PTR [eax],edx
c001fdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	50                   	push   eax
c001fdce:	e8 4b 00 ff ff       	call   c000fe1e <Bus::~Bus()>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	90                   	nop
c001fdd7:	83 c4 0c             	add    esp,0xc
c001fdda:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fddc <PCI::~PCI()>:
c001fddc:	83 ec 0c             	sub    esp,0xc
c001fddf:	83 ec 0c             	sub    esp,0xc
c001fde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde6:	e8 cd ff ff ff       	call   c001fdb8 <PCI::~PCI()>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	83 ec 08             	sub    esp,0x8
c001fdf1:	68 58 01 00 00       	push   0x158
c001fdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfa:	e8 34 f2 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	83 c4 0c             	add    esp,0xc
c001fe05:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fe06 <IDE::~IDE()>:
c001fe06:	83 ec 0c             	sub    esp,0xc
c001fe09:	ba 70 35 02 c0       	mov    edx,0xc0023570
c001fe0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe12:	89 10                	mov    DWORD PTR [eax],edx
c001fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe18:	83 ec 0c             	sub    esp,0xc
c001fe1b:	50                   	push   eax
c001fe1c:	e8 05 0b ff ff       	call   c0010926 <HardDiskController::~HardDiskController()>
c001fe21:	83 c4 10             	add    esp,0x10
c001fe24:	90                   	nop
c001fe25:	83 c4 0c             	add    esp,0xc
c001fe28:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fe2a <IDE::~IDE()>:
c001fe2a:	83 ec 0c             	sub    esp,0xc
c001fe2d:	83 ec 0c             	sub    esp,0xc
c001fe30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe34:	e8 cd ff ff ff       	call   c001fe06 <IDE::~IDE()>
c001fe39:	83 c4 10             	add    esp,0x10
c001fe3c:	83 ec 08             	sub    esp,0x8
c001fe3f:	68 70 02 00 00       	push   0x270
c001fe44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe48:	e8 e6 f1 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fe4d:	83 c4 10             	add    esp,0x10
c001fe50:	83 c4 0c             	add    esp,0xc
c001fe53:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fe54 <ATA::~ATA()>:
c001fe54:	83 ec 0c             	sub    esp,0xc
c001fe57:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c001fe5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe60:	89 10                	mov    DWORD PTR [eax],edx
c001fe62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe66:	83 ec 0c             	sub    esp,0xc
c001fe69:	50                   	push   eax
c001fe6a:	e8 95 0b ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c001fe6f:	83 c4 10             	add    esp,0x10
c001fe72:	90                   	nop
c001fe73:	83 c4 0c             	add    esp,0xc
c001fe76:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fe78 <ATA::~ATA()>:
c001fe78:	83 ec 0c             	sub    esp,0xc
c001fe7b:	83 ec 0c             	sub    esp,0xc
c001fe7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe82:	e8 cd ff ff ff       	call   c001fe54 <ATA::~ATA()>
c001fe87:	83 c4 10             	add    esp,0x10
c001fe8a:	83 ec 08             	sub    esp,0x8
c001fe8d:	68 7c 01 00 00       	push   0x17c
c001fe92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe96:	e8 98 f1 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fe9b:	83 c4 10             	add    esp,0x10
c001fe9e:	83 c4 0c             	add    esp,0xc
c001fea1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fea2 <ATAPI::~ATAPI()>:
c001fea2:	83 ec 0c             	sub    esp,0xc
c001fea5:	ba 2c 36 02 c0       	mov    edx,0xc002362c
c001feaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feae:	89 10                	mov    DWORD PTR [eax],edx
c001feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb4:	83 ec 0c             	sub    esp,0xc
c001feb7:	50                   	push   eax
c001feb8:	e8 47 0b ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c001febd:	83 c4 10             	add    esp,0x10
c001fec0:	90                   	nop
c001fec1:	83 c4 0c             	add    esp,0xc
c001fec4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fec6 <ATAPI::~ATAPI()>:
c001fec6:	83 ec 0c             	sub    esp,0xc
c001fec9:	83 ec 0c             	sub    esp,0xc
c001fecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fed0:	e8 cd ff ff ff       	call   c001fea2 <ATAPI::~ATAPI()>
c001fed5:	83 c4 10             	add    esp,0x10
c001fed8:	83 ec 08             	sub    esp,0x8
c001fedb:	68 80 01 00 00       	push   0x180
c001fee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee4:	e8 4a f1 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fee9:	83 c4 10             	add    esp,0x10
c001feec:	83 c4 0c             	add    esp,0xc
c001feef:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001fef0 <AVX::~AVX()>:
c001fef0:	83 ec 0c             	sub    esp,0xc
c001fef3:	ba 68 36 02 c0       	mov    edx,0xc0023668
c001fef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefc:	89 10                	mov    DWORD PTR [eax],edx
c001fefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff02:	83 ec 0c             	sub    esp,0xc
c001ff05:	50                   	push   eax
c001ff06:	e8 7d 0b ff ff       	call   c0010a88 <FPU::~FPU()>
c001ff0b:	83 c4 10             	add    esp,0x10
c001ff0e:	90                   	nop
c001ff0f:	83 c4 0c             	add    esp,0xc
c001ff12:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001ff14 <AVX::~AVX()>:
c001ff14:	83 ec 0c             	sub    esp,0xc
c001ff17:	83 ec 0c             	sub    esp,0xc
c001ff1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff1e:	e8 cd ff ff ff       	call   c001fef0 <AVX::~AVX()>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	83 ec 08             	sub    esp,0x8
c001ff29:	68 58 01 00 00       	push   0x158
c001ff2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff32:	e8 fc f0 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001ff37:	83 c4 10             	add    esp,0x10
c001ff3a:	83 c4 0c             	add    esp,0xc
c001ff3d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001ff3e <MMX::~MMX()>:
c001ff3e:	83 ec 0c             	sub    esp,0xc
c001ff41:	ba a8 36 02 c0       	mov    edx,0xc00236a8
c001ff46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4a:	89 10                	mov    DWORD PTR [eax],edx
c001ff4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff50:	83 ec 0c             	sub    esp,0xc
c001ff53:	50                   	push   eax
c001ff54:	e8 2f 0b ff ff       	call   c0010a88 <FPU::~FPU()>
c001ff59:	83 c4 10             	add    esp,0x10
c001ff5c:	90                   	nop
c001ff5d:	83 c4 0c             	add    esp,0xc
c001ff60:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ff62 <MMX::~MMX()>:
c001ff62:	83 ec 0c             	sub    esp,0xc
c001ff65:	83 ec 0c             	sub    esp,0xc
c001ff68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff6c:	e8 cd ff ff ff       	call   c001ff3e <MMX::~MMX()>
c001ff71:	83 c4 10             	add    esp,0x10
c001ff74:	83 ec 08             	sub    esp,0x8
c001ff77:	68 58 01 00 00       	push   0x158
c001ff7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff80:	e8 ae f0 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001ff85:	83 c4 10             	add    esp,0x10
c001ff88:	83 c4 0c             	add    esp,0xc
c001ff8b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ff8c <SSE::~SSE()>:
c001ff8c:	83 ec 0c             	sub    esp,0xc
c001ff8f:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c001ff94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff98:	89 10                	mov    DWORD PTR [eax],edx
c001ff9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9e:	83 ec 0c             	sub    esp,0xc
c001ffa1:	50                   	push   eax
c001ffa2:	e8 e1 0a ff ff       	call   c0010a88 <FPU::~FPU()>
c001ffa7:	83 c4 10             	add    esp,0x10
c001ffaa:	90                   	nop
c001ffab:	83 c4 0c             	add    esp,0xc
c001ffae:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001ffb0 <SSE::~SSE()>:
c001ffb0:	83 ec 0c             	sub    esp,0xc
c001ffb3:	83 ec 0c             	sub    esp,0xc
c001ffb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffba:	e8 cd ff ff ff       	call   c001ff8c <SSE::~SSE()>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	83 ec 08             	sub    esp,0x8
c001ffc5:	68 58 01 00 00       	push   0x158
c001ffca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffce:	e8 60 f0 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001ffd3:	83 c4 10             	add    esp,0x10
c001ffd6:	83 c4 0c             	add    esp,0xc
c001ffd9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001ffda <x87::~x87()>:
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	ba 28 37 02 c0       	mov    edx,0xc0023728
c001ffe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe6:	89 10                	mov    DWORD PTR [eax],edx
c001ffe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffec:	83 ec 0c             	sub    esp,0xc
c001ffef:	50                   	push   eax
c001fff0:	e8 93 0a ff ff       	call   c0010a88 <FPU::~FPU()>
c001fff5:	83 c4 10             	add    esp,0x10
c001fff8:	90                   	nop
c001fff9:	83 c4 0c             	add    esp,0xc
c001fffc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001fffe <x87::~x87()>:
c001fffe:	83 ec 0c             	sub    esp,0xc
c0020001:	83 ec 0c             	sub    esp,0xc
c0020004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020008:	e8 cd ff ff ff       	call   c001ffda <x87::~x87()>
c002000d:	83 c4 10             	add    esp,0x10
c0020010:	83 ec 08             	sub    esp,0x8
c0020013:	68 58 01 00 00       	push   0x158
c0020018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002001c:	e8 12 f0 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0020021:	83 c4 10             	add    esp,0x10
c0020024:	83 c4 0c             	add    esp,0xc
c0020027:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020028 <IOAPIC::~IOAPIC()>:
c0020028:	83 ec 0c             	sub    esp,0xc
c002002b:	ba 80 38 02 c0       	mov    edx,0xc0023880
c0020030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020034:	89 10                	mov    DWORD PTR [eax],edx
c0020036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003a:	83 ec 0c             	sub    esp,0xc
c002003d:	50                   	push   eax
c002003e:	e8 d1 03 ff ff       	call   c0010414 <Device::~Device()>
c0020043:	83 c4 10             	add    esp,0x10
c0020046:	90                   	nop
c0020047:	83 c4 0c             	add    esp,0xc
c002004a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002004c <IOAPIC::~IOAPIC()>:
c002004c:	83 ec 0c             	sub    esp,0xc
c002004f:	83 ec 0c             	sub    esp,0xc
c0020052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020056:	e8 cd ff ff ff       	call   c0020028 <IOAPIC::~IOAPIC()>
c002005b:	83 c4 10             	add    esp,0x10
c002005e:	83 ec 08             	sub    esp,0x8
c0020061:	68 68 01 00 00       	push   0x168
c0020066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002006a:	e8 c4 ef fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c002006f:	83 c4 10             	add    esp,0x10
c0020072:	83 c4 0c             	add    esp,0xc
c0020075:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0020076 <APIC::~APIC()>:
c0020076:	83 ec 0c             	sub    esp,0xc
c0020079:	ba 38 38 02 c0       	mov    edx,0xc0023838
c002007e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020082:	89 10                	mov    DWORD PTR [eax],edx
c0020084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020088:	83 ec 0c             	sub    esp,0xc
c002008b:	50                   	push   eax
c002008c:	e8 c1 0e ff ff       	call   c0010f52 <InterruptController::~InterruptController()>
c0020091:	83 c4 10             	add    esp,0x10
c0020094:	90                   	nop
c0020095:	83 c4 0c             	add    esp,0xc
c0020098:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002009a <APIC::~APIC()>:
c002009a:	83 ec 0c             	sub    esp,0xc
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200a4:	e8 cd ff ff ff       	call   c0020076 <APIC::~APIC()>
c00200a9:	83 c4 10             	add    esp,0x10
c00200ac:	83 ec 08             	sub    esp,0x8
c00200af:	68 58 21 00 00       	push   0x2158
c00200b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200b8:	e8 76 ef fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00200bd:	83 c4 10             	add    esp,0x10
c00200c0:	83 c4 0c             	add    esp,0xc
c00200c3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00200c4 <PIC::~PIC()>:
c00200c4:	83 ec 0c             	sub    esp,0xc
c00200c7:	ba d0 38 02 c0       	mov    edx,0xc00238d0
c00200cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d0:	89 10                	mov    DWORD PTR [eax],edx
c00200d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d6:	83 ec 0c             	sub    esp,0xc
c00200d9:	50                   	push   eax
c00200da:	e8 73 0e ff ff       	call   c0010f52 <InterruptController::~InterruptController()>
c00200df:	83 c4 10             	add    esp,0x10
c00200e2:	90                   	nop
c00200e3:	83 c4 0c             	add    esp,0xc
c00200e6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00200e8 <PIC::~PIC()>:
c00200e8:	83 ec 0c             	sub    esp,0xc
c00200eb:	83 ec 0c             	sub    esp,0xc
c00200ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200f2:	e8 cd ff ff ff       	call   c00200c4 <PIC::~PIC()>
c00200f7:	83 c4 10             	add    esp,0x10
c00200fa:	83 ec 08             	sub    esp,0x8
c00200fd:	68 58 21 00 00       	push   0x2158
c0020102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020106:	e8 28 ef fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c002010b:	83 c4 10             	add    esp,0x10
c002010e:	83 c4 0c             	add    esp,0xc
c0020111:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020112 <APICTimer::~APICTimer()>:
c0020112:	83 ec 0c             	sub    esp,0xc
c0020115:	ba 24 39 02 c0       	mov    edx,0xc0023924
c002011a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011e:	89 10                	mov    DWORD PTR [eax],edx
c0020120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020124:	83 ec 0c             	sub    esp,0xc
c0020127:	50                   	push   eax
c0020128:	e8 53 2b ff ff       	call   c0012c80 <Timer::~Timer()>
c002012d:	83 c4 10             	add    esp,0x10
c0020130:	90                   	nop
c0020131:	83 c4 0c             	add    esp,0xc
c0020134:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020136 <APICTimer::~APICTimer()>:
c0020136:	83 ec 0c             	sub    esp,0xc
c0020139:	83 ec 0c             	sub    esp,0xc
c002013c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020140:	e8 cd ff ff ff       	call   c0020112 <APICTimer::~APICTimer()>
c0020145:	83 c4 10             	add    esp,0x10
c0020148:	83 ec 08             	sub    esp,0x8
c002014b:	68 60 01 00 00       	push   0x160
c0020150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020154:	e8 da ee fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0020159:	83 c4 10             	add    esp,0x10
c002015c:	83 c4 0c             	add    esp,0xc
c002015f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020160 <PIT::~PIT()>:
c0020160:	83 ec 0c             	sub    esp,0xc
c0020163:	ba 74 39 02 c0       	mov    edx,0xc0023974
c0020168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016c:	89 10                	mov    DWORD PTR [eax],edx
c002016e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020172:	83 ec 0c             	sub    esp,0xc
c0020175:	50                   	push   eax
c0020176:	e8 05 2b ff ff       	call   c0012c80 <Timer::~Timer()>
c002017b:	83 c4 10             	add    esp,0x10
c002017e:	90                   	nop
c002017f:	83 c4 0c             	add    esp,0xc
c0020182:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020184 <PIT::~PIT()>:
c0020184:	83 ec 0c             	sub    esp,0xc
c0020187:	83 ec 0c             	sub    esp,0xc
c002018a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002018e:	e8 cd ff ff ff       	call   c0020160 <PIT::~PIT()>
c0020193:	83 c4 10             	add    esp,0x10
c0020196:	83 ec 08             	sub    esp,0x8
c0020199:	68 5c 01 00 00       	push   0x15c
c002019e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a2:	e8 8c ee fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00201a7:	83 c4 10             	add    esp,0x10
c00201aa:	83 c4 0c             	add    esp,0xc
c00201ad:	c3                   	ret    
