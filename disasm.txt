
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ed be 00 00       	call   c000bf0d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 e9 01 00       	call   c001e9a8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 32 f5 01 c0       	mov    ebx,0xc001f532
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 3c f5 01 c0    	cmp    ebx,0xc001f53c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 4c 31 02 c0       	mov    eax,0xc002314c
c0000049:	3d 4c 31 02 c0       	cmp    eax,0xc002314c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 4c 31 02 c0       	push   0xc002314c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 4c 31 02 c0       	mov    eax,0xc002314c
c0000075:	2d 4c 31 02 c0       	sub    eax,0xc002314c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 4c 31 02 c0       	push   0xc002314c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d ec 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232ec,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 44 f5 01 c0       	mov    ebx,0xc001f544
c00000bb:	81 eb 40 f5 01 c0    	sub    ebx,0xc001f540
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 40 f5 01 c0       	mov    esi,0xc001f540
c00000ca:	a1 f0 32 02 c0       	mov    eax,ds:0xc00232f0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 f0 32 02 c0       	mov    ds:0xc00232f0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 f0 32 02 c0       	mov    eax,ds:0xc00232f0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 4c 31 02 c0       	push   0xc002314c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 ec 32 02 c0 01 	mov    BYTE PTR ds:0xc00232ec,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f4 32 02 c0       	push   0xc00232f4
c000012c:	68 4c 31 02 c0       	push   0xc002314c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 61 eb 00 00       	call   c000edc0 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 63 75 01 00       	call   c00177cc <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 4f 79 01 00       	call   c0017bdf <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 f5 80 01 00       	call   c001838e <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 24 75 01 00       	call   c00177cc <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 30 37 02 c0 	lgdtd  ds:0xc0023730
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 8d 0c 01 c0       	mov    ecx,0xc0010c8d
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 8d 0c 01 c0       	mov    ecx,0xc0010c8d
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 0c 33 02 c0    	mov    ebx,DWORD PTR ds:0xc002330c
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 0c 33 02 c0       	mov    ds:0xc002330c,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 0c 33 02 c0       	mov    eax,ds:0xc002330c
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 0c 33 02 c0    	mov    DWORD PTR ds:0xc002330c,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 60 f5 01 c0 02 	test   BYTE PTR [edx-0x3ffe0aa0],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 60 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0aa0],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 60 f5 01 c0 08 	test   BYTE PTR [edx-0x3ffe0aa0],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 60 f5 01 c0 04 	test   BYTE PTR [edi-0x3ffe0aa0],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 60 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0aa0],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 20 33 02 c0    	mov    ecx,DWORD PTR ds:0xc0023320
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 20 33 02 c0    	mov    DWORD PTR ds:0xc0023320,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 24 33 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdccdc]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 24 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdccdc],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 20 33 02 c0    	mov    DWORD PTR ds:0xc0023320,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 4c 33 02 c0    	cmp    DWORD PTR ds:0xc002334c,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d 5c 33 02 c0    	mov    ecx,DWORD PTR ds:0xc002335c
c0000b8d:	c7 42 0c 54 33 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023354
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 5c 33 02 c0    	mov    DWORD PTR ds:0xc002335c,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 4c 33 02 c0    	mov    DWORD PTR ds:0xc002334c,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 20 33 02 c0 02 	test   BYTE PTR ds:0xc0023320,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 20 33 02 c0       	mov    eax,0xc0023320
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 fd ad 00 00       	call   c000ba6b <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 3f ad 00 00       	call   c000ba6b <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 29 ad 00 00       	call   c000ba6b <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 05 ad 00 00       	call   c000ba6b <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 20 33 02 c0    	mov    edi,DWORD PTR ds:0xc0023320
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 20 33 02 c0       	mov    eax,0xc0023320
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 24 33 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdccdc]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 24 33 02 c0 	mov    DWORD PTR [edx*4-0x3ffdccdc],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 54 33 02 c0 	lea    edx,[eax*8-0x3ffdccac]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 20 33 02 c0       	mov    eax,0xc0023320
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 60 33 02 c0    	mov    ebx,DWORD PTR ds:0xc0023360
c0000f0f:	81 fb 54 33 02 c0    	cmp    ebx,0xc0023354
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d 54 33 02 c0       	cmp    eax,0xc0023354
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d 50 33 02 c0    	cmp    DWORD PTR ds:0xc0023350,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 5c 33 02 c0       	mov    ds:0xc002335c,eax
c0000f4b:	a3 60 33 02 c0       	mov    ds:0xc0023360,eax
c0000f50:	a3 50 33 02 c0       	mov    ds:0xc0023350,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 54 33 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023354
c0000f5e:	c7 40 0c 54 33 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023354
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 60 33 02 c0       	mov    ds:0xc0023360,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 54 33 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023354
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 18 33 02 c0 	lea    ebp,[edx*4-0x3ffdcce8]
c0000faf:	8b 14 95 20 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcce0]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 20 33 02 c0 	lea    ecx,[edx*4-0x3ffdcce0]
c0000fca:	8b 14 95 20 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcce0]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd 54 36 02 c0 	or     DWORD PTR [edi*4-0x3ffdc9ac],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 54 33 02 c0 	lea    eax,[eax*8-0x3ffdccac]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d 5c 33 02 c0    	mov    DWORD PTR ds:0xc002335c,ecx
c0001084:	89 0d 60 33 02 c0    	mov    DWORD PTR ds:0xc0023360,ecx
c000108a:	c7 41 08 54 33 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023354
c0001091:	c7 41 0c 54 33 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023354
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd 4c 33 02 c0 	lea    edx,[ecx*8-0x3ffdccb4]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d 54 36 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc9ac]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d 54 36 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc9ac]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 4c 33 02 c0 	lea    edx,[eax*4-0x3ffdccb4]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d 54 36 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdc9ac],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d 5c 33 02 c0    	mov    DWORD PTR ds:0xc002335c,edi
c0001157:	89 3d 60 33 02 c0    	mov    DWORD PTR ds:0xc0023360,edi
c000115d:	c7 47 08 54 33 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023354
c0001164:	c7 47 0c 54 33 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023354
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d 50 33 02 c0    	mov    DWORD PTR ds:0xc0023350,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 4c 33 02 c0       	mov    eax,ds:0xc002334c
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d 4c 33 02 c0    	mov    DWORD PTR ds:0xc002334c,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 20 33 02 c0       	mov    edx,0xc0023320
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 20 33 02 c0 00 	cmp    DWORD PTR ds:0xc0023320,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 20 33 02 c0       	mov    eax,0xc0023320
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 74 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023674
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 74 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023674,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 74 36 02 c0    	mov    DWORD PTR ds:0xc0023674,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 4c 33 02 c0    	cmp    DWORD PTR ds:0xc002334c,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d 4c 33 02 c0    	mov    DWORD PTR ds:0xc002334c,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 20 33 02 c0 00 	cmp    DWORD PTR ds:0xc0023320,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 20 33 02 c0       	mov    eax,0xc0023320
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 7c 36 02 c0    	push   DWORD PTR ds:0xc002367c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 20 33 02 c0 00 	cmp    DWORD PTR ds:0xc0023320,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 20 33 02 c0       	mov    eax,0xc0023320
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 7c 36 02 c0       	mov    eax,ds:0xc002367c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 20 33 02 c0       	mov    eax,0xc0023320
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d 4c 33 02 c0 00 	cmp    DWORD PTR ds:0xc002334c,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 20 33 02 c0       	mov    eax,0xc0023320
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 4c 33 02 c0       	mov    eax,ds:0xc002334c
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 24 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdccdc]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 54 33 02 c0       	mov    eax,0xc0023354
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d 4c 36 02 c0       	cmp    eax,0xc002364c
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 88 36 02 c0       	mov    eax,ds:0xc0023688
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 70 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023670
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 84 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023684
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 94 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023694
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 20 33 02 c0       	mov    eax,0xc0023320
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 64 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe099c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 20 33 02 c0       	mov    eax,ds:0xc0023320
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 20 33 02 c0       	mov    ds:0xc0023320,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 64 36 02 c0    	mov    DWORD PTR ds:0xc0023664,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 68 36 02 c0    	mov    DWORD PTR ds:0xc0023668,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 6c 36 02 c0    	mov    DWORD PTR ds:0xc002366c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 74 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023674,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 40 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb3c0]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 97 81 01 00       	jmp    c0019af0 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 40 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb3c0]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 c8 81 01 00       	jmp    c0019b37 <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 40 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb3c0]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 f0 81 01 00       	jmp    c0019b7e <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 db ca 01 00       	call   c001e74c <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 80 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0880]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 80 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0880]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba 80 f6 01 c0       	mov    edx,0xc001f680
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba a0 f7 01 c0       	mov    edx,0xc001f7a0
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba ac f7 01 c0       	mov    edx,0xc001f7ac
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 c0 36 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdc940]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 a0 36 02 c0    	mov    ax,ds:0xc00236a0
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 a0 36 02 c0    	mov    ds:0xc00236a0,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 d8 b8 01 00       	call   c001e74c <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 b2 f7 01 c0       	mov    eax,0xc001f7b2
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 00 f7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0900]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 bb f7 01 c0       	mov    eax,0xc001f7bb
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 80 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0880]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 a3 a2 01 00       	call   c001e74c <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba 80 f6 01 c0       	mov    edx,0xc001f680
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba 90 f6 01 c0       	mov    edx,0xc001f690
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 c0 36 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc940]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 c0 36 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc940],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 6a 8c 01 00       	call   c001e74c <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 50 8c 01 00       	call   c001e74c <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 d7 f6 01 c0       	mov    eax,0xc001f6d7
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 d0 f6 01 c0       	mov    eax,0xc001f6d0
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 c0 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc940]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be c0 f6 01 c0       	mov    esi,0xc001f6c0
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 93 73 01 00       	call   c001e74c <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba a0 f7 01 c0       	mov    edx,0xc001f7a0
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba a0 f6 01 c0       	mov    edx,0xc001f6a0
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba b0 f6 01 c0       	mov    edx,0xc001f6b0
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba c2 f7 01 c0       	mov    edx,0xc001f7c2
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba ce f7 01 c0       	mov    edx,0xc001f7ce
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba e2 f7 01 c0       	mov    edx,0xc001f7e2
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 4e 3a 00 00       	call   c000bc1e <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 48 3a 00 00       	call   c000bc2e <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 00 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fb00
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 00 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb00
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 00 f9 01 c0       	mov    eax,0xc001f900
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 40 f8 01 c0       	mov    eax,0xc001f840
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 00 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0800]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 49 37 00 00       	call   c000bc2e <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 33 37 00 00       	call   c000bc2e <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 e0 00 02 c0    	fld    DWORD PTR ds:0xc00200e0
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 9b 63 01 00       	call   c001e970 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 d0 00 02 c0    	fld    QWORD PTR ds:0xc00200d0
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 d7 33 00 00       	call   c000bc4e <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 72 33 00 00       	call   c000bc2e <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 60 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdffa0]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 e4 00 02 c0    	fld    DWORD PTR ds:0xc00200e4
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 e8 00 02 c0    	fld    DWORD PTR ds:0xc00200e8
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 d8 00 02 c0    	fcom   QWORD PTR ds:0xc00200d8
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 ec 00 02 c0    	fld    DWORD PTR ds:0xc00200ec
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 d9 5e 01 00       	call   c001e990 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 f0 00 02 c0    	fld    DWORD PTR ds:0xc00200f0
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 e8 00 02 c0    	fld    DWORD PTR ds:0xc00200e8
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 d8 00 02 c0    	fcom   QWORD PTR ds:0xc00200d8
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 ec 00 02 c0    	fld    DWORD PTR ds:0xc00200ec
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 4d 5e 01 00       	call   c001e990 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 da 5d 01 00       	call   c001e990 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 a6 5c 01 00       	call   c001e970 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 3f 5c 01 00       	call   c001e990 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 cc 5b 01 00       	call   c001e970 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 f4 00 02 c0       	mov    eax,0xc00200f4
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 08 01 02 c0       	mov    eax,0xc0020108
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 45 2d 00 00       	call   c000bc2e <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 47 2d 00 00       	call   c000bc4e <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f21:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 c8 02 02 c0    	fld    DWORD PTR ds:0xc00202c8
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 40 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfec0]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 5c 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfea4]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 78 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe88]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 cc 02 02 c0    	fld    DWORD PTR ds:0xc00202cc
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 3e 4f 01 00       	jmp    c001e990 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 1b 4f 01 00       	call   c001e990 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 d0 02 02 c0    	fld    DWORD PTR ds:0xc00202d0
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 c6 4c 01 00       	call   c001e990 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 91 4c 01 00       	call   c001e990 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 a3 4b 01 00       	call   c001e970 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d c0 02 02 c0    	fcomp  QWORD PTR ds:0xc00202c0
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 06 4b 01 00       	call   c001e990 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 d0 02 02 c0    	fld    DWORD PTR ds:0xc00202d0
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 42 4a 01 00       	call   c001e990 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 0d 4a 01 00       	call   c001e990 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 1f 49 01 00       	call   c001e970 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d c0 02 02 c0    	fcomp  QWORD PTR ds:0xc00202c0
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 87 48 01 00       	call   c001e990 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 d0 02 02 c0    	fld    DWORD PTR ds:0xc00202d0
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 c3 47 01 00       	call   c001e990 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 8e 47 01 00       	call   c001e990 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 a0 46 01 00       	call   c001e970 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d c0 02 02 c0    	fcomp  QWORD PTR ds:0xc00202c0
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 08 46 01 00       	call   c001e990 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 d0 02 02 c0    	fld    DWORD PTR ds:0xc00202d0
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 44 45 01 00       	call   c001e990 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 0f 45 01 00       	call   c001e990 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 21 44 01 00       	call   c001e970 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d c0 02 02 c0    	fcomp  QWORD PTR ds:0xc00202c0
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 89 43 01 00       	call   c001e990 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 d0 02 02 c0    	fld    DWORD PTR ds:0xc00202d0
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 c5 42 01 00       	call   c001e990 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 90 42 01 00       	call   c001e990 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 a9 41 01 00       	call   c001e970 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d c0 02 02 c0    	fcomp  QWORD PTR ds:0xc00202c0
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 0b 41 01 00       	call   c001e990 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 a0 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe60]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 94 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe6c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 48 13 00 00       	call   c000bc2e <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 9e 3f 01 00       	call   c001e990 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 72 3e 01 00       	call   c001e970 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 17 3e 01 00       	call   c001e990 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 a4 3d 01 00       	call   c001e970 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 d4 02 02 c0       	mov    eax,0xc00202d4
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 e5 02 02 c0       	mov    eax,0xc00202e5
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 33 0f 00 00       	call   c000bc2e <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 35 0f 00 00       	call   c000bc4e <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad33:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 f1 57 00 00       	call   c001056c <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 1c 03 02 c0       	push   0xc002031c
c000adb1:	50                   	push   eax
c000adb2:	e8 2f 58 00 00       	call   c00105e6 <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba 98 03 02 c0       	mov    edx,0xc0020398
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 a0 cc 00 00       	call   c0017bac <lockScheduler()>
c000af0c:	e8 cf cf 00 00       	call   c0017ee0 <schedule()>
c000af11:	e8 98 cc 00 00       	call   c0017bae <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 d8 3f 00 00       	call   c000eefc <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 74 4b 02 c0    	push   DWORD PTR ds:0xc0024b74
c000af33:	68 25 03 02 c0       	push   0xc0020325
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 cc ca 00 00       	call   c0017a0c <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 ab b5 00 c0       	push   0xc000b5ab
c000af4f:	56                   	push   esi
c000af50:	e8 81 cd 00 00       	call   c0017cd6 <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 0f 87 01 c0       	push   0xc001870f
c000af5e:	ff 35 74 4b 02 c0    	push   DWORD PTR ds:0xc0024b74
c000af64:	e8 6d cd 00 00       	call   c0017cd6 <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 28 4b 02 c0       	mov    ds:0xc0024b28,eax
c000af71:	c6 05 2d 37 02 c0 01 	mov    BYTE PTR ds:0xc002372d,0x1
c000af78:	e8 c9 43 00 00       	call   c000f346 <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 05 b5 00 00       	call   c0016499 <setupSystemCalls()>
c000af94:	e8 ab 4e 00 00       	call   c000fe44 <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 9f 55 00 00       	call   c0010540 <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d 28 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023728
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 32 03 02 c0       	push   0xc0020332
c000afb0:	e8 99 c6 00 00       	call   c001764e <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 e3 c7 00 00       	call   c00177a1 <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 fc 13 02 c0 	mov    DWORD PTR [esp],0xc00213fc
c000afc5:	e8 21 40 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 d4 d1 00 00       	call   c00181ab <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 41 37 02 c0 04 	test   BYTE PTR ds:0xc0023741,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 e1 33 01 00       	call   c001e416 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 53 8e 00 00       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 2c 8e 00 00       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 0a 8e 00 00       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 e8 8d 00 00       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 40 37 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023740,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 11 8d 00 00       	call   c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 ec 8c 00 00       	call   c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 65 32 01 00       	call   c001e3d0 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 32 32 01 00       	call   c001e3c0 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 07 8d 00 00       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 4e 03 02 c0       	push   0xc002034e
c000b1e8:	e8 93 9a 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 54 03 02 c0       	push   0xc0020354
c000b220:	e8 5b 9a 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 40 37 02 c0 04 	test   BYTE PTR ds:0xc0023740,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 60 2b 02 c0 	sete   BYTE PTR ds:0xc0022b60
c000b284:	e8 73 3c 00 00       	call   c000eefc <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 4d 82 00 00       	call   c00134e0 <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 54 51 00 00       	call   c00103f6 <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 3c 3c 00 00       	call   c000eefc <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 c4 8c 00 00       	call   c0013f8e <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 1d 51 00 00       	call   c00103f6 <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 69 56 00 00       	call   c001095e <setupFPU()>
c000b2f5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fb:	85 c0                	test   eax,eax
c000b2fd:	74 1f                	je     c000b31e <Computer::open(int, int, void*)+0xb6>
c000b2ff:	83 ec 08             	sub    esp,0x8
c000b302:	50                   	push   eax
c000b303:	53                   	push   ebx
c000b304:	e8 ed 50 00 00       	call   c00103f6 <Device::addChild(Device*)>
c000b309:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b311:	6a 00                	push   0x0
c000b313:	6a 00                	push   0x0
c000b315:	6a 00                	push   0x0
c000b317:	50                   	push   eax
c000b318:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b31b:	83 c4 20             	add    esp,0x20
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 dc af 00 c0       	push   0xc000afdc
c000b326:	e8 ab ca 00 00       	call   c0017dd6 <setupMultitasking(void (*)())>
c000b32b:	83 c4 14             	add    esp,0x14
c000b32e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b333:	5b                   	pop    ebx
c000b334:	5e                   	pop    esi
c000b335:	c3                   	ret    

c000b336 <Computer::disableNMI()>:
c000b336:	6a 00                	push   0x0
c000b338:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b33c:	e8 0f ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b341:	58                   	pop    eax
c000b342:	5a                   	pop    edx
c000b343:	c3                   	ret    

c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b348:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b34f:	19 c0                	sbb    eax,eax
c000b351:	83 e0 80             	and    eax,0xffffff80
c000b354:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b358:	e6 70                	out    0x70,al
c000b35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b35e:	e6 71                	out    0x71,al
c000b360:	c3                   	ret    
c000b361:	90                   	nop

c000b362 <Computer::handleNMI()>:
c000b362:	56                   	push   esi
c000b363:	53                   	push   ebx
c000b364:	83 ec 10             	sub    esp,0x10
c000b367:	e4 92                	in     al,0x92
c000b369:	89 c6                	mov    esi,eax
c000b36b:	e4 61                	in     al,0x61
c000b36d:	68 5a 03 02 c0       	push   0xc002035a
c000b372:	88 c3                	mov    bl,al
c000b374:	e8 72 3c 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	83 e6 10             	and    esi,0x10
c000b37f:	75 0d                	jne    c000b38e <Computer::handleNMI()+0x2c>
c000b381:	f6 c3 40             	test   bl,0x40
c000b384:	75 1d                	jne    c000b3a3 <Computer::handleNMI()+0x41>
c000b386:	84 db                	test   bl,bl
c000b388:	78 2d                	js     c000b3b7 <Computer::handleNMI()+0x55>
c000b38a:	58                   	pop    eax
c000b38b:	5b                   	pop    ebx
c000b38c:	5e                   	pop    esi
c000b38d:	c3                   	ret    
c000b38e:	83 ec 0c             	sub    esp,0xc
c000b391:	68 6b 03 02 c0       	push   0xc002036b
c000b396:	e8 e5 98 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	f6 c3 40             	test   bl,0x40
c000b3a1:	74 e3                	je     c000b386 <Computer::handleNMI()+0x24>
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	68 78 03 02 c0       	push   0xc0020378
c000b3ab:	e8 d0 98 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	84 db                	test   bl,bl
c000b3b5:	79 d3                	jns    c000b38a <Computer::handleNMI()+0x28>
c000b3b7:	c7 44 24 10 82 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020382
c000b3bf:	5a                   	pop    edx
c000b3c0:	5b                   	pop    ebx
c000b3c1:	5e                   	pop    esi
c000b3c2:	e9 b9 98 00 00       	jmp    c0014c80 <Krnl::panic(char const*)>
c000b3c7:	90                   	nop

c000b3c8 <Computer::setDiskActivityLight(int, bool)>:
c000b3c8:	56                   	push   esi
c000b3c9:	53                   	push   ebx
c000b3ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3ce:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3d3:	77 1b                	ja     c000b3f0 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3d5:	e4 92                	in     al,0x92
c000b3d7:	bb 40 00 00 00       	mov    ebx,0x40
c000b3dc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3e0:	89 da                	mov    edx,ebx
c000b3e2:	d3 e2                	shl    edx,cl
c000b3e4:	89 f1                	mov    ecx,esi
c000b3e6:	f7 d2                	not    edx
c000b3e8:	d3 e3                	shl    ebx,cl
c000b3ea:	21 d0                	and    eax,edx
c000b3ec:	09 d8                	or     eax,ebx
c000b3ee:	e6 92                	out    0x92,al
c000b3f0:	5b                   	pop    ebx
c000b3f1:	5e                   	pop    esi
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <GDTEntry::setBase(unsigned int)>:
c000b3f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3fc:	89 c1                	mov    ecx,eax
c000b3fe:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b402:	c1 e9 10             	shr    ecx,0x10
c000b405:	c1 e8 18             	shr    eax,0x18
c000b408:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b40b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <GDTEntry::setLimit(unsigned int)>:
c000b410:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b418:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b41b:	66 89 01             	mov    WORD PTR [ecx],ax
c000b41e:	83 e2 f0             	and    edx,0xfffffff0
c000b421:	c1 e8 10             	shr    eax,0x10
c000b424:	83 e0 0f             	and    eax,0xf
c000b427:	09 d0                	or     eax,edx
c000b429:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b42c:	c3                   	ret    
c000b42d:	90                   	nop

c000b42e <GDT::GDT()>:
c000b42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b432:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b43c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b442:	90                   	nop
c000b443:	c3                   	ret    

c000b444 <GDT::addEntry(GDTEntry)>:
c000b444:	53                   	push   ebx
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b44c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b455:	52                   	push   edx
c000b456:	50                   	push   eax
c000b457:	68 bc 03 02 c0       	push   0xc00203bc
c000b45c:	e8 8a 3b 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000b461:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b467:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b46b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b46f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b473:	8d 50 01             	lea    edx,[eax+0x1]
c000b476:	c1 e0 03             	shl    eax,0x3
c000b479:	89 13                	mov    DWORD PTR [ebx],edx
c000b47b:	83 c4 18             	add    esp,0x18
c000b47e:	5b                   	pop    ebx
c000b47f:	c3                   	ret    

c000b480 <GDT::getNumberOfEntries()>:
c000b480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b484:	8b 00                	mov    eax,DWORD PTR [eax]
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <GDT::flush()>:
c000b488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b48e:	83 c0 04             	add    eax,0x4
c000b491:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b498:	a3 32 37 02 c0       	mov    ds:0xc0023732,eax
c000b49d:	66 89 15 30 37 02 c0 	mov    WORD PTR ds:0xc0023730,dx
c000b4a4:	e9 8a 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4a9:	90                   	nop

c000b4aa <GDT::setup()>:
c000b4aa:	55                   	push   ebp
c000b4ab:	57                   	push   edi
c000b4ac:	56                   	push   esi
c000b4ad:	53                   	push   ebx
c000b4ae:	83 ec 3c             	sub    esp,0x3c
c000b4b1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4b5:	6a 00                	push   0x0
c000b4b7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4bb:	53                   	push   ebx
c000b4bc:	e8 33 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4c1:	6a 00                	push   0x0
c000b4c3:	53                   	push   ebx
c000b4c4:	e8 47 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4c9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4d1:	6a 00                	push   0x0
c000b4d3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4d7:	53                   	push   ebx
c000b4d8:	e8 17 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4dd:	68 ff ff ff 00       	push   0xffffff
c000b4e2:	53                   	push   ebx
c000b4e3:	e8 28 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4ec:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4f1:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4fa:	83 c4 20             	add    esp,0x20
c000b4fd:	6a 00                	push   0x0
c000b4ff:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b503:	53                   	push   ebx
c000b504:	e8 eb fe ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b509:	68 ff ff ff 00       	push   0xffffff
c000b50e:	53                   	push   ebx
c000b50f:	e8 fc fe ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b514:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b518:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b51c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b520:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b524:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b528:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b52d:	0d 00 92 c0 00       	or     eax,0xc09200
c000b532:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b536:	89 d8                	mov    eax,ebx
c000b538:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b53c:	80 cc 60             	or     ah,0x60
c000b53f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b543:	83 c4 0c             	add    esp,0xc
c000b546:	89 f8                	mov    eax,edi
c000b548:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b54c:	80 cc 60             	or     ah,0x60
c000b54f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b553:	89 c7                	mov    edi,eax
c000b555:	55                   	push   ebp
c000b556:	e8 e9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b562:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b566:	55                   	push   ebp
c000b567:	e8 d8 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b56c:	83 c4 0c             	add    esp,0xc
c000b56f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b573:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b577:	55                   	push   ebp
c000b578:	e8 c7 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b57d:	83 c4 0c             	add    esp,0xc
c000b580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b588:	53                   	push   ebx
c000b589:	51                   	push   ecx
c000b58a:	55                   	push   ebp
c000b58b:	e8 b4 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b590:	83 c4 0c             	add    esp,0xc
c000b593:	57                   	push   edi
c000b594:	56                   	push   esi
c000b595:	55                   	push   ebp
c000b596:	e8 a9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b59b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b59e:	e8 e5 fe ff ff       	call   c000b488 <GDT::flush()>
c000b5a3:	83 c4 4c             	add    esp,0x4c
c000b5a6:	5b                   	pop    ebx
c000b5a7:	5e                   	pop    esi
c000b5a8:	5f                   	pop    edi
c000b5a9:	5d                   	pop    ebp
c000b5aa:	c3                   	ret    

c000b5ab <idleFunction(void*)>:
c000b5ab:	53                   	push   ebx
c000b5ac:	83 ec 08             	sub    esp,0x8
c000b5af:	e8 fa c5 00 00       	call   c0017bae <unlockScheduler()>
c000b5b4:	e8 c1 89 00 00       	call   c0013f7a <thisCPU()>
c000b5b9:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5c0:	74 41                	je     c000b603 <idleFunction(void*)+0x58>
c000b5c2:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c000b5c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ce:	74 33                	je     c000b603 <idleFunction(void*)+0x58>
c000b5d0:	31 db                	xor    ebx,ebx
c000b5d2:	52                   	push   edx
c000b5d3:	52                   	push   edx
c000b5d4:	68 e1 00 00 00       	push   0xe1
c000b5d9:	50                   	push   eax
c000b5da:	e8 e7 fb ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000b5df:	53                   	push   ebx
c000b5e0:	83 e0 02             	and    eax,0x2
c000b5e3:	50                   	push   eax
c000b5e4:	68 e1 00 00 00       	push   0xe1
c000b5e9:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c000b5ef:	e8 fe fb ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5f4:	83 c4 20             	add    esp,0x20
c000b5f7:	e8 54 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5fc:	e8 0f 34 01 00       	call   c001ea10 <idleCommon()>
c000b601:	eb f4                	jmp    c000b5f7 <idleFunction(void*)+0x4c>
c000b603:	fb                   	sti    
c000b604:	f4                   	hlt    
c000b605:	e8 06 34 01 00       	call   c001ea10 <idleCommon()>
c000b60a:	eb f7                	jmp    c000b603 <idleFunction(void*)+0x58>

c000b60c <IDTEntry::IDTEntry(bool)>:
c000b60c:	83 ec 04             	sub    esp,0x4
c000b60f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b613:	88 04 24             	mov    BYTE PTR [esp],al
c000b616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b624:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b62f:	83 e2 f0             	and    edx,0xfffffff0
c000b632:	83 ca 0e             	or     edx,0xe
c000b635:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b63c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b63f:	83 e2 ef             	and    edx,0xffffffef
c000b642:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b645:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b649:	74 04                	je     c000b64f <IDTEntry::IDTEntry(bool)+0x43>
c000b64b:	b2 03                	mov    dl,0x3
c000b64d:	eb 02                	jmp    c000b651 <IDTEntry::IDTEntry(bool)+0x45>
c000b64f:	b2 00                	mov    dl,0x0
c000b651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b655:	83 e2 03             	and    edx,0x3
c000b658:	88 d1                	mov    cl,dl
c000b65a:	c1 e1 05             	shl    ecx,0x5
c000b65d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b660:	83 e2 9f             	and    edx,0xffffff9f
c000b663:	09 ca                	or     edx,ecx
c000b665:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b668:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b66f:	83 ca 80             	or     edx,0xffffff80
c000b672:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b675:	90                   	nop
c000b676:	83 c4 04             	add    esp,0x4
c000b679:	c3                   	ret    

c000b67a <IDTEntry::setOffset(unsigned int)>:
c000b67a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b682:	66 89 02             	mov    WORD PTR [edx],ax
c000b685:	c1 e8 10             	shr    eax,0x10
c000b688:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b68c:	c3                   	ret    
c000b68d:	90                   	nop

c000b68e <IDT::IDT()>:
c000b68e:	90                   	nop
c000b68f:	c3                   	ret    

c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b694:	83 c0 30             	add    eax,0x30
c000b697:	c3                   	ret    

c000b698 <IDT::addEntry(IDTEntry, int)>:
c000b698:	53                   	push   ebx
c000b699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b69d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6a9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6ac:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6b0:	5b                   	pop    ebx
c000b6b1:	c3                   	ret    

c000b6b2 <IDT::addEntry(int, void (*)(), bool)>:
c000b6b2:	53                   	push   ebx
c000b6b3:	83 ec 10             	sub    esp,0x10
c000b6b6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6bb:	50                   	push   eax
c000b6bc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6c0:	53                   	push   ebx
c000b6c1:	e8 46 ff ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000b6c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6ca:	53                   	push   ebx
c000b6cb:	e8 aa ff ff ff       	call   c000b67a <IDTEntry::setOffset(unsigned int)>
c000b6d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6e0:	e8 b3 ff ff ff       	call   c000b698 <IDT::addEntry(IDTEntry, int)>
c000b6e5:	83 c4 30             	add    esp,0x30
c000b6e8:	5b                   	pop    ebx
c000b6e9:	c3                   	ret    

c000b6ea <IDT::flush()>:
c000b6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ee:	66 c7 05 38 37 02 c0 ff 07 	mov    WORD PTR ds:0xc0023738,0x7ff
c000b6f7:	a3 3a 37 02 c0       	mov    ds:0xc002373a,eax
c000b6fc:	0f 01 1d 38 37 02 c0 	lidtd  ds:0xc0023738
c000b703:	c3                   	ret    

c000b704 <IDT::setup()>:
c000b704:	57                   	push   edi
c000b705:	56                   	push   esi
c000b706:	53                   	push   ebx
c000b707:	83 ec 10             	sub    esp,0x10
c000b70a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b70e:	6a 00                	push   0x0
c000b710:	68 53 03 00 c0       	push   0xc0000353
c000b715:	6a 00                	push   0x0
c000b717:	53                   	push   ebx
c000b718:	e8 95 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b71d:	6a 00                	push   0x0
c000b71f:	68 63 03 00 c0       	push   0xc0000363
c000b724:	6a 01                	push   0x1
c000b726:	53                   	push   ebx
c000b727:	e8 86 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b72c:	83 c4 20             	add    esp,0x20
c000b72f:	6a 00                	push   0x0
c000b731:	68 6d 03 00 c0       	push   0xc000036d
c000b736:	6a 02                	push   0x2
c000b738:	53                   	push   ebx
c000b739:	e8 74 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b73e:	6a 00                	push   0x0
c000b740:	68 77 03 00 c0       	push   0xc0000377
c000b745:	6a 03                	push   0x3
c000b747:	53                   	push   ebx
c000b748:	e8 65 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b74d:	83 c4 20             	add    esp,0x20
c000b750:	6a 00                	push   0x0
c000b752:	68 81 03 00 c0       	push   0xc0000381
c000b757:	6a 04                	push   0x4
c000b759:	53                   	push   ebx
c000b75a:	e8 53 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b75f:	6a 00                	push   0x0
c000b761:	68 8b 03 00 c0       	push   0xc000038b
c000b766:	6a 05                	push   0x5
c000b768:	53                   	push   ebx
c000b769:	e8 44 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b76e:	83 c4 20             	add    esp,0x20
c000b771:	6a 00                	push   0x0
c000b773:	68 95 03 00 c0       	push   0xc0000395
c000b778:	6a 06                	push   0x6
c000b77a:	53                   	push   ebx
c000b77b:	e8 32 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b780:	6a 00                	push   0x0
c000b782:	68 9f 03 00 c0       	push   0xc000039f
c000b787:	6a 07                	push   0x7
c000b789:	53                   	push   ebx
c000b78a:	e8 23 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b78f:	83 c4 20             	add    esp,0x20
c000b792:	6a 00                	push   0x0
c000b794:	68 a9 03 00 c0       	push   0xc00003a9
c000b799:	6a 08                	push   0x8
c000b79b:	53                   	push   ebx
c000b79c:	e8 11 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7a1:	6a 00                	push   0x0
c000b7a3:	68 b1 03 00 c0       	push   0xc00003b1
c000b7a8:	6a 09                	push   0x9
c000b7aa:	53                   	push   ebx
c000b7ab:	e8 02 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7b0:	83 c4 20             	add    esp,0x20
c000b7b3:	6a 00                	push   0x0
c000b7b5:	68 bb 03 00 c0       	push   0xc00003bb
c000b7ba:	6a 0a                	push   0xa
c000b7bc:	53                   	push   ebx
c000b7bd:	e8 f0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7c2:	6a 00                	push   0x0
c000b7c4:	68 c3 03 00 c0       	push   0xc00003c3
c000b7c9:	6a 0b                	push   0xb
c000b7cb:	53                   	push   ebx
c000b7cc:	e8 e1 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7d1:	83 c4 20             	add    esp,0x20
c000b7d4:	6a 00                	push   0x0
c000b7d6:	68 cb 03 00 c0       	push   0xc00003cb
c000b7db:	6a 0c                	push   0xc
c000b7dd:	53                   	push   ebx
c000b7de:	e8 cf fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7e3:	6a 00                	push   0x0
c000b7e5:	68 d3 03 00 c0       	push   0xc00003d3
c000b7ea:	6a 0d                	push   0xd
c000b7ec:	53                   	push   ebx
c000b7ed:	e8 c0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7f2:	83 c4 20             	add    esp,0x20
c000b7f5:	6a 00                	push   0x0
c000b7f7:	68 db 03 00 c0       	push   0xc00003db
c000b7fc:	6a 0e                	push   0xe
c000b7fe:	53                   	push   ebx
c000b7ff:	e8 ae fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b804:	6a 00                	push   0x0
c000b806:	68 e3 03 00 c0       	push   0xc00003e3
c000b80b:	6a 0f                	push   0xf
c000b80d:	53                   	push   ebx
c000b80e:	e8 9f fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b813:	83 c4 20             	add    esp,0x20
c000b816:	6a 00                	push   0x0
c000b818:	68 ed 03 00 c0       	push   0xc00003ed
c000b81d:	6a 10                	push   0x10
c000b81f:	53                   	push   ebx
c000b820:	e8 8d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b825:	6a 00                	push   0x0
c000b827:	68 f7 03 00 c0       	push   0xc00003f7
c000b82c:	6a 11                	push   0x11
c000b82e:	53                   	push   ebx
c000b82f:	e8 7e fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b834:	83 c4 20             	add    esp,0x20
c000b837:	6a 00                	push   0x0
c000b839:	68 01 04 00 c0       	push   0xc0000401
c000b83e:	6a 12                	push   0x12
c000b840:	53                   	push   ebx
c000b841:	e8 6c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b846:	6a 01                	push   0x1
c000b848:	68 0b 04 00 c0       	push   0xc000040b
c000b84d:	6a 60                	push   0x60
c000b84f:	53                   	push   ebx
c000b850:	e8 5d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b855:	83 c4 20             	add    esp,0x20
c000b858:	6a 00                	push   0x0
c000b85a:	68 15 04 00 c0       	push   0xc0000415
c000b85f:	6a 20                	push   0x20
c000b861:	53                   	push   ebx
c000b862:	e8 4b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b867:	6a 00                	push   0x0
c000b869:	68 1f 04 00 c0       	push   0xc000041f
c000b86e:	6a 21                	push   0x21
c000b870:	53                   	push   ebx
c000b871:	e8 3c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b876:	83 c4 20             	add    esp,0x20
c000b879:	6a 00                	push   0x0
c000b87b:	68 29 04 00 c0       	push   0xc0000429
c000b880:	6a 22                	push   0x22
c000b882:	53                   	push   ebx
c000b883:	e8 2a fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b888:	6a 00                	push   0x0
c000b88a:	68 33 04 00 c0       	push   0xc0000433
c000b88f:	6a 23                	push   0x23
c000b891:	53                   	push   ebx
c000b892:	e8 1b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b897:	83 c4 20             	add    esp,0x20
c000b89a:	6a 00                	push   0x0
c000b89c:	68 3d 04 00 c0       	push   0xc000043d
c000b8a1:	6a 24                	push   0x24
c000b8a3:	53                   	push   ebx
c000b8a4:	e8 09 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8a9:	6a 00                	push   0x0
c000b8ab:	68 47 04 00 c0       	push   0xc0000447
c000b8b0:	6a 25                	push   0x25
c000b8b2:	53                   	push   ebx
c000b8b3:	e8 fa fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8b8:	83 c4 20             	add    esp,0x20
c000b8bb:	6a 00                	push   0x0
c000b8bd:	68 51 04 00 c0       	push   0xc0000451
c000b8c2:	6a 26                	push   0x26
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 e8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8ca:	6a 00                	push   0x0
c000b8cc:	68 5b 04 00 c0       	push   0xc000045b
c000b8d1:	6a 27                	push   0x27
c000b8d3:	53                   	push   ebx
c000b8d4:	e8 d9 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8d9:	83 c4 20             	add    esp,0x20
c000b8dc:	6a 00                	push   0x0
c000b8de:	68 65 04 00 c0       	push   0xc0000465
c000b8e3:	6a 28                	push   0x28
c000b8e5:	53                   	push   ebx
c000b8e6:	e8 c7 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8eb:	6a 00                	push   0x0
c000b8ed:	68 6f 04 00 c0       	push   0xc000046f
c000b8f2:	6a 29                	push   0x29
c000b8f4:	53                   	push   ebx
c000b8f5:	e8 b8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8fa:	83 c4 20             	add    esp,0x20
c000b8fd:	6a 00                	push   0x0
c000b8ff:	68 79 04 00 c0       	push   0xc0000479
c000b904:	6a 2a                	push   0x2a
c000b906:	53                   	push   ebx
c000b907:	e8 a6 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b90c:	6a 00                	push   0x0
c000b90e:	68 83 04 00 c0       	push   0xc0000483
c000b913:	6a 2b                	push   0x2b
c000b915:	53                   	push   ebx
c000b916:	e8 97 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b91b:	83 c4 20             	add    esp,0x20
c000b91e:	6a 00                	push   0x0
c000b920:	68 8d 04 00 c0       	push   0xc000048d
c000b925:	6a 2c                	push   0x2c
c000b927:	53                   	push   ebx
c000b928:	e8 85 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b92d:	6a 00                	push   0x0
c000b92f:	68 97 04 00 c0       	push   0xc0000497
c000b934:	6a 2d                	push   0x2d
c000b936:	53                   	push   ebx
c000b937:	e8 76 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b93c:	83 c4 20             	add    esp,0x20
c000b93f:	6a 00                	push   0x0
c000b941:	68 a1 04 00 c0       	push   0xc00004a1
c000b946:	6a 2e                	push   0x2e
c000b948:	53                   	push   ebx
c000b949:	e8 64 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b94e:	6a 00                	push   0x0
c000b950:	68 ab 04 00 c0       	push   0xc00004ab
c000b955:	6a 2f                	push   0x2f
c000b957:	53                   	push   ebx
c000b958:	e8 55 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b95d:	83 c4 20             	add    esp,0x20
c000b960:	6a 00                	push   0x0
c000b962:	68 b5 04 00 c0       	push   0xc00004b5
c000b967:	6a 30                	push   0x30
c000b969:	53                   	push   ebx
c000b96a:	e8 43 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b96f:	6a 00                	push   0x0
c000b971:	68 bf 04 00 c0       	push   0xc00004bf
c000b976:	6a 31                	push   0x31
c000b978:	53                   	push   ebx
c000b979:	e8 34 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b97e:	83 c4 20             	add    esp,0x20
c000b981:	6a 00                	push   0x0
c000b983:	68 c9 04 00 c0       	push   0xc00004c9
c000b988:	6a 32                	push   0x32
c000b98a:	53                   	push   ebx
c000b98b:	e8 22 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b990:	6a 00                	push   0x0
c000b992:	68 d3 04 00 c0       	push   0xc00004d3
c000b997:	6a 33                	push   0x33
c000b999:	53                   	push   ebx
c000b99a:	e8 13 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b99f:	83 c4 20             	add    esp,0x20
c000b9a2:	6a 00                	push   0x0
c000b9a4:	68 dd 04 00 c0       	push   0xc00004dd
c000b9a9:	6a 34                	push   0x34
c000b9ab:	53                   	push   ebx
c000b9ac:	e8 01 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9b1:	6a 00                	push   0x0
c000b9b3:	68 e7 04 00 c0       	push   0xc00004e7
c000b9b8:	6a 35                	push   0x35
c000b9ba:	53                   	push   ebx
c000b9bb:	e8 f2 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9c0:	83 c4 20             	add    esp,0x20
c000b9c3:	6a 00                	push   0x0
c000b9c5:	68 f1 04 00 c0       	push   0xc00004f1
c000b9ca:	6a 36                	push   0x36
c000b9cc:	53                   	push   ebx
c000b9cd:	e8 e0 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9d2:	6a 00                	push   0x0
c000b9d4:	68 fb 04 00 c0       	push   0xc00004fb
c000b9d9:	6a 37                	push   0x37
c000b9db:	53                   	push   ebx
c000b9dc:	e8 d1 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9e1:	83 c4 20             	add    esp,0x20
c000b9e4:	e8 12 25 00 00       	call   c000defb <Virt::getAKernelVAS()>
c000b9e9:	52                   	push   edx
c000b9ea:	6a 03                	push   0x3
c000b9ec:	6a 02                	push   0x2
c000b9ee:	50                   	push   eax
c000b9ef:	e8 ae 2a 00 00       	call   c000e4a2 <VAS::allocatePages(int, int)>
c000b9f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9fb:	89 c6                	mov    esi,eax
c000b9fd:	e8 fa 34 00 00       	call   c000eefc <operator new(unsigned long)>
c000ba02:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba08:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba0b:	89 c7                	mov    edi,eax
c000ba0d:	e8 3a 1c 00 00       	call   c000d64c <TSS::TSS()>
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	68 a9 03 00 c0       	push   0xc00003a9
c000ba1a:	56                   	push   esi
c000ba1b:	57                   	push   edi
c000ba1c:	e8 6b 1c 00 00       	call   c000d68c <TSS::setup(unsigned long, unsigned long)>
c000ba21:	59                   	pop    ecx
c000ba22:	89 c6                	mov    esi,eax
c000ba24:	5f                   	pop    edi
c000ba25:	6a 00                	push   0x0
c000ba27:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba2b:	50                   	push   eax
c000ba2c:	e8 db fb ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000ba31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba35:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba3a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba41:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba4b:	80 ce 05             	or     dh,0x5
c000ba4e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba59:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba5f:	e8 86 fc ff ff       	call   c000b6ea <IDT::flush()>
c000ba64:	83 c4 20             	add    esp,0x20
c000ba67:	5b                   	pop    ebx
c000ba68:	5e                   	pop    esi
c000ba69:	5f                   	pop    edi
c000ba6a:	c3                   	ret    

c000ba6b <sbrk>:
c000ba6b:	55                   	push   ebp
c000ba6c:	57                   	push   edi
c000ba6d:	56                   	push   esi
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 1c             	sub    esp,0x1c
c000ba72:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ba76:	85 db                	test   ebx,ebx
c000ba78:	74 37                	je     c000bab1 <sbrk+0x46>
c000ba7a:	78 3f                	js     c000babb <sbrk+0x50>
c000ba7c:	e8 f9 84 00 00       	call   c0013f7a <thisCPU()>
c000ba81:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ba87:	83 e0 01             	and    eax,0x1
c000ba8a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ba8e:	a1 54 2b 02 c0       	mov    eax,ds:0xc0022b54
c000ba93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba97:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000ba9d:	89 d8                	mov    eax,ebx
c000ba9f:	78 35                	js     c000bad6 <sbrk+0x6b>
c000baa1:	c1 f8 0c             	sar    eax,0xc
c000baa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa8:	89 c7                	mov    edi,eax
c000baaa:	be 00 00 00 00       	mov    esi,0x0
c000baaf:	eb 3c                	jmp    c000baed <sbrk+0x82>
c000bab1:	a1 54 2b 02 c0       	mov    eax,ds:0xc0022b54
c000bab6:	e9 ad 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000babb:	83 ec 08             	sub    esp,0x8
c000babe:	53                   	push   ebx
c000babf:	68 d8 03 02 c0       	push   0xc00203d8
c000bac4:	e8 22 35 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bad1:	e9 92 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000bad6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000badc:	eb c3                	jmp    c000baa1 <sbrk+0x36>
c000bade:	81 05 54 2b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022b54,0x1000
c000bae8:	46                   	inc    esi
c000bae9:	39 f7                	cmp    edi,esi
c000baeb:	74 34                	je     c000bb21 <sbrk+0xb6>
c000baed:	e8 09 24 00 00       	call   c000defb <Virt::getAKernelVAS()>
c000baf2:	89 c3                	mov    ebx,eax
c000baf4:	8b 2d 54 2b 02 c0    	mov    ebp,DWORD PTR ds:0xc0022b54
c000bafa:	e8 c9 06 00 00       	call   c000c1c8 <Phys::allocatePage()>
c000baff:	68 01 04 00 00       	push   0x401
c000bb04:	55                   	push   ebp
c000bb05:	50                   	push   eax
c000bb06:	53                   	push   ebx
c000bb07:	e8 96 28 00 00       	call   c000e3a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb14:	74 c8                	je     c000bade <sbrk+0x73>
c000bb16:	8b 1d 54 2b 02 c0    	mov    ebx,DWORD PTR ds:0xc0022b54
c000bb1c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb1f:	eb bd                	jmp    c000bade <sbrk+0x73>
c000bb21:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb26:	74 48                	je     c000bb70 <sbrk+0x105>
c000bb28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb2c:	89 d3                	mov    ebx,edx
c000bb2e:	c1 eb 0a             	shr    ebx,0xa
c000bb31:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb37:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb41:	c1 e0 0c             	shl    eax,0xc
c000bb44:	01 d0                	add    eax,edx
c000bb46:	c1 e8 0a             	shr    eax,0xa
c000bb49:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb4e:	2d 00 00 40 00       	sub    eax,0x400000
c000bb53:	39 c3                	cmp    ebx,eax
c000bb55:	77 0d                	ja     c000bb64 <sbrk+0xf9>
c000bb57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb60:	39 d8                	cmp    eax,ebx
c000bb62:	73 f3                	jae    c000bb57 <sbrk+0xec>
c000bb64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb68:	83 c4 1c             	add    esp,0x1c
c000bb6b:	5b                   	pop    ebx
c000bb6c:	5e                   	pop    esi
c000bb6d:	5f                   	pop    edi
c000bb6e:	5d                   	pop    ebp
c000bb6f:	c3                   	ret    
c000bb70:	e8 b0 2e 01 00       	call   c001ea25 <CPU::readCR3()>
c000bb75:	83 ec 0c             	sub    esp,0xc
c000bb78:	50                   	push   eax
c000bb79:	e8 b9 2e 01 00       	call   c001ea37 <CPU::writeCR3(unsigned long)>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	eb e1                	jmp    c000bb64 <sbrk+0xf9>

c000bb83 <mmap>:
c000bb83:	83 ec 18             	sub    esp,0x18
c000bb86:	68 08 04 02 c0       	push   0xc0020408
c000bb8b:	e8 f0 90 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000bb90:	b8 00 00 00 00       	mov    eax,0x0
c000bb95:	83 c4 1c             	add    esp,0x1c
c000bb98:	c3                   	ret    

c000bb99 <munmap>:
c000bb99:	83 ec 18             	sub    esp,0x18
c000bb9c:	68 0d 04 02 c0       	push   0xc002040d
c000bba1:	e8 da 90 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000bba6:	b8 00 00 00 00       	mov    eax,0x0
c000bbab:	83 c4 1c             	add    esp,0x1c
c000bbae:	c3                   	ret    

c000bbaf <liballoc_lock()>:
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	e8 f5 bf 00 00       	call   c0017bac <lockScheduler()>
c000bbb7:	b8 00 00 00 00       	mov    eax,0x0
c000bbbc:	83 c4 0c             	add    esp,0xc
c000bbbf:	c3                   	ret    

c000bbc0 <liballoc_unlock()>:
c000bbc0:	83 ec 0c             	sub    esp,0xc
c000bbc3:	e8 e6 bf 00 00       	call   c0017bae <unlockScheduler()>
c000bbc8:	b8 00 00 00 00       	mov    eax,0x0
c000bbcd:	83 c4 0c             	add    esp,0xc
c000bbd0:	c3                   	ret    

c000bbd1 <liballoc_alloc(int)>:
c000bbd1:	83 ec 0c             	sub    esp,0xc
c000bbd4:	e8 22 23 00 00       	call   c000defb <Virt::getAKernelVAS()>
c000bbd9:	83 ec 04             	sub    esp,0x4
c000bbdc:	6a 01                	push   0x1
c000bbde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbe2:	50                   	push   eax
c000bbe3:	e8 ba 28 00 00       	call   c000e4a2 <VAS::allocatePages(int, int)>
c000bbe8:	83 c4 1c             	add    esp,0x1c
c000bbeb:	c3                   	ret    

c000bbec <liballoc_free(void*, int)>:
c000bbec:	83 ec 0c             	sub    esp,0xc
c000bbef:	e8 07 23 00 00       	call   c000defb <Virt::getAKernelVAS()>
c000bbf4:	83 ec 08             	sub    esp,0x8
c000bbf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbfb:	50                   	push   eax
c000bbfc:	e8 c3 25 00 00       	call   c000e1c4 <VAS::freeAllocatedPages(unsigned long)>
c000bc01:	b8 00 00 00 00       	mov    eax,0x0
c000bc06:	83 c4 1c             	add    esp,0x1c
c000bc09:	c3                   	ret    

c000bc0a <realloc>:
c000bc0a:	83 ec 14             	sub    esp,0x14
c000bc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc15:	e8 67 57 ff ff       	call   c0001381 <dlrealloc>
c000bc1a:	83 c4 1c             	add    esp,0x1c
c000bc1d:	c3                   	ret    

c000bc1e <malloc>:
c000bc1e:	83 ec 18             	sub    esp,0x18
c000bc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc25:	e8 1a 52 ff ff       	call   c0000e44 <dlmalloc>
c000bc2a:	83 c4 1c             	add    esp,0x1c
c000bc2d:	c3                   	ret    

c000bc2e <free>:
c000bc2e:	83 ec 18             	sub    esp,0x18
c000bc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc35:	e8 af 4e ff ff       	call   c0000ae9 <dlfree>
c000bc3a:	83 c4 1c             	add    esp,0x1c
c000bc3d:	c3                   	ret    

c000bc3e <rfree>:
c000bc3e:	83 ec 18             	sub    esp,0x18
c000bc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc45:	e8 e4 ff ff ff       	call   c000bc2e <free>
c000bc4a:	83 c4 1c             	add    esp,0x1c
c000bc4d:	c3                   	ret    

c000bc4e <calloc>:
c000bc4e:	56                   	push   esi
c000bc4f:	53                   	push   ebx
c000bc50:	83 ec 10             	sub    esp,0x10
c000bc53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc57:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 bc ff ff ff       	call   c000bc1e <malloc>
c000bc62:	89 c6                	mov    esi,eax
c000bc64:	83 c4 0c             	add    esp,0xc
c000bc67:	53                   	push   ebx
c000bc68:	6a 00                	push   0x0
c000bc6a:	50                   	push   eax
c000bc6b:	e8 98 49 ff ff       	call   c0000608 <memset>
c000bc70:	89 f0                	mov    eax,esi
c000bc72:	83 c4 14             	add    esp,0x14
c000bc75:	5b                   	pop    ebx
c000bc76:	5e                   	pop    esi
c000bc77:	c3                   	ret    

c000bc78 <hwTextMode_loadInData(VgaText*)>:
c000bc78:	57                   	push   edi
c000bc79:	56                   	push   esi
c000bc7a:	53                   	push   ebx
c000bc7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc7f:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bc85:	85 c0                	test   eax,eax
c000bc87:	7e 30                	jle    c000bcb9 <hwTextMode_loadInData(VgaText*)+0x41>
c000bc89:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bc8c:	31 f6                	xor    esi,esi
c000bc8e:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bc91:	31 c0                	xor    eax,eax
c000bc93:	c1 e1 05             	shl    ecx,0x5
c000bc96:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bc9c:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bca0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bca4:	40                   	inc    eax
c000bca5:	83 f8 50             	cmp    eax,0x50
c000bca8:	75 f2                	jne    c000bc9c <hwTextMode_loadInData(VgaText*)+0x24>
c000bcaa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bcb0:	46                   	inc    esi
c000bcb1:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bcb7:	7f d5                	jg     c000bc8e <hwTextMode_loadInData(VgaText*)+0x16>
c000bcb9:	5b                   	pop    ebx
c000bcba:	5e                   	pop    esi
c000bcbb:	5f                   	pop    edi
c000bcbc:	c3                   	ret    

c000bcbd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bcbd:	56                   	push   esi
c000bcbe:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcc3:	53                   	push   ebx
c000bcc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bccc:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bcd2:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bcd8:	c1 e0 04             	shl    eax,0x4
c000bcdb:	83 e6 0f             	and    esi,0xf
c000bcde:	0f b6 c0             	movzx  eax,al
c000bce1:	41                   	inc    ecx
c000bce2:	09 f0                	or     eax,esi
c000bce4:	83 c2 02             	add    edx,0x2
c000bce7:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bceb:	c1 e0 08             	shl    eax,0x8
c000bcee:	09 f0                	or     eax,esi
c000bcf0:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bcf4:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bcfa:	75 d0                	jne    c000bccc <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bcfc:	5b                   	pop    ebx
c000bcfd:	5e                   	pop    esi
c000bcfe:	c3                   	ret    

c000bcff <hwTextMode_showCursor(VgaText*, bool)>:
c000bcff:	56                   	push   esi
c000bd00:	53                   	push   ebx
c000bd01:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd06:	74 38                	je     c000bd40 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd08:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd0d:	b0 0a                	mov    al,0xa
c000bd0f:	89 da                	mov    edx,ebx
c000bd11:	ee                   	out    dx,al
c000bd12:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd17:	89 ca                	mov    edx,ecx
c000bd19:	ec                   	in     al,dx
c000bd1a:	b2 0f                	mov    dl,0xf
c000bd1c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd20:	83 e0 c0             	and    eax,0xffffffc0
c000bd23:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd29:	09 d0                	or     eax,edx
c000bd2b:	89 ca                	mov    edx,ecx
c000bd2d:	ee                   	out    dx,al
c000bd2e:	b0 0b                	mov    al,0xb
c000bd30:	89 da                	mov    edx,ebx
c000bd32:	ee                   	out    dx,al
c000bd33:	89 ca                	mov    edx,ecx
c000bd35:	ec                   	in     al,dx
c000bd36:	83 e0 e0             	and    eax,0xffffffe0
c000bd39:	83 c8 0f             	or     eax,0xf
c000bd3c:	ee                   	out    dx,al
c000bd3d:	5b                   	pop    ebx
c000bd3e:	5e                   	pop    esi
c000bd3f:	c3                   	ret    
c000bd40:	b0 0a                	mov    al,0xa
c000bd42:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd47:	ee                   	out    dx,al
c000bd48:	b0 20                	mov    al,0x20
c000bd4a:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd4f:	ee                   	out    dx,al
c000bd50:	5b                   	pop    ebx
c000bd51:	5e                   	pop    esi
c000bd52:	c3                   	ret    

c000bd53 <hwTextMode_update(VgaText*)>:
c000bd53:	c3                   	ret    

c000bd54 <hwTextMode_updateCursor(VgaText*)>:
c000bd54:	56                   	push   esi
c000bd55:	b9 19 00 00 00       	mov    ecx,0x19
c000bd5a:	53                   	push   ebx
c000bd5b:	be d4 03 00 00       	mov    esi,0x3d4
c000bd60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd64:	89 f2                	mov    edx,esi
c000bd66:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd6c:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bd72:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bd75:	c1 e1 04             	shl    ecx,0x4
c000bd78:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bd7e:	b0 0f                	mov    al,0xf
c000bd80:	ee                   	out    dx,al
c000bd81:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bd86:	88 c8                	mov    al,cl
c000bd88:	89 da                	mov    edx,ebx
c000bd8a:	ee                   	out    dx,al
c000bd8b:	b0 0e                	mov    al,0xe
c000bd8d:	89 f2                	mov    edx,esi
c000bd8f:	ee                   	out    dx,al
c000bd90:	89 c8                	mov    eax,ecx
c000bd92:	89 da                	mov    edx,ebx
c000bd94:	66 c1 e8 08          	shr    ax,0x8
c000bd98:	ee                   	out    dx,al
c000bd99:	5b                   	pop    ebx
c000bd9a:	5e                   	pop    esi
c000bd9b:	c3                   	ret    

c000bd9c <hwTextMode_disableBlink(VgaText*, bool)>:
c000bd9c:	ba da 03 00 00       	mov    edx,0x3da
c000bda1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bda6:	75 18                	jne    c000bdc0 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bda8:	ec                   	in     al,dx
c000bda9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdae:	b0 30                	mov    al,0x30
c000bdb0:	89 ca                	mov    edx,ecx
c000bdb2:	ee                   	out    dx,al
c000bdb3:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdb8:	ec                   	in     al,dx
c000bdb9:	83 c8 08             	or     eax,0x8
c000bdbc:	89 ca                	mov    edx,ecx
c000bdbe:	ee                   	out    dx,al
c000bdbf:	c3                   	ret    
c000bdc0:	ec                   	in     al,dx
c000bdc1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdc6:	b0 30                	mov    al,0x30
c000bdc8:	89 ca                	mov    edx,ecx
c000bdca:	ee                   	out    dx,al
c000bdcb:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdd0:	ec                   	in     al,dx
c000bdd1:	83 e0 f7             	and    eax,0xfffffff7
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	ee                   	out    dx,al
c000bdd7:	c3                   	ret    

c000bdd8 <hwTextMode_scrollScreen(VgaText*)>:
c000bdd8:	55                   	push   ebp
c000bdd9:	bd 02 00 00 00       	mov    ebp,0x2
c000bdde:	57                   	push   edi
c000bddf:	56                   	push   esi
c000bde0:	53                   	push   ebx
c000bde1:	83 ec 1c             	sub    esp,0x1c
c000bde4:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000bdec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bdf0:	31 c0                	xor    eax,eax
c000bdf2:	eb 0b                	jmp    c000bdff <hwTextMode_scrollScreen(VgaText*)+0x27>
c000bdf4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000bdfa:	74 57                	je     c000be53 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000bdfc:	43                   	inc    ebx
c000bdfd:	89 f0                	mov    eax,esi
c000bdff:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000be05:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be0b:	88 13                	mov    BYTE PTR [ebx],dl
c000be0d:	8d 70 01             	lea    esi,[eax+0x1]
c000be10:	83 fd 18             	cmp    ebp,0x18
c000be13:	75 df                	jne    c000bdf4 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be15:	a8 01                	test   al,0x1
c000be17:	75 13                	jne    c000be2c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be19:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be1c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be22:	75 d8                	jne    c000bdfc <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be24:	83 c4 1c             	add    esp,0x1c
c000be27:	5b                   	pop    ebx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 08             	sub    esp,0x8
c000be2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be33:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be3a:	50                   	push   eax
c000be3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be3f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be46:	50                   	push   eax
c000be47:	e8 e0 0a 00 00       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	88 07                	mov    BYTE PTR [edi],al
c000be51:	eb c9                	jmp    c000be1c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be53:	45                   	inc    ebp
c000be54:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be5c:	eb 8e                	jmp    c000bdec <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be5e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be5e:	56                   	push   esi
c000be5f:	53                   	push   ebx
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be6b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be70:	50                   	push   eax
c000be71:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be76:	50                   	push   eax
c000be77:	e8 b0 0a 00 00       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000be7c:	5a                   	pop    edx
c000be7d:	0f b6 c0             	movzx  eax,al
c000be80:	59                   	pop    ecx
c000be81:	50                   	push   eax
c000be82:	89 f0                	mov    eax,esi
c000be84:	0f be f0             	movsx  esi,al
c000be87:	56                   	push   esi
c000be88:	e8 45 0b 00 00       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000be8d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be91:	ba 19 00 00 00       	mov    edx,0x19
c000be96:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000be9c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be9f:	8d 14 92             	lea    edx,[edx+edx*4]
c000bea2:	c1 e1 04             	shl    ecx,0x4
c000bea5:	c1 e2 04             	shl    edx,0x4
c000bea8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000beac:	01 ca                	add    edx,ecx
c000beae:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000beb6:	83 c4 14             	add    esp,0x14
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	c3                   	ret    

c000bebc <setupTextMode()>:
c000bebc:	c7 05 d8 37 02 c0 9c bd 00 c0 	mov    DWORD PTR ds:0xc00237d8,0xc000bd9c
c000bec6:	c7 05 c4 37 02 c0 78 bc 00 c0 	mov    DWORD PTR ds:0xc00237c4,0xc000bc78
c000bed0:	c7 05 c0 37 02 c0 bd bc 00 c0 	mov    DWORD PTR ds:0xc00237c0,0xc000bcbd
c000beda:	c7 05 cc 37 02 c0 d8 bd 00 c0 	mov    DWORD PTR ds:0xc00237cc,0xc000bdd8
c000bee4:	c7 05 d4 37 02 c0 ff bc 00 c0 	mov    DWORD PTR ds:0xc00237d4,0xc000bcff
c000beee:	c7 05 c8 37 02 c0 53 bd 00 c0 	mov    DWORD PTR ds:0xc00237c8,0xc000bd53
c000bef8:	c7 05 d0 37 02 c0 54 bd 00 c0 	mov    DWORD PTR ds:0xc00237d0,0xc000bd54
c000bf02:	c7 05 dc 37 02 c0 5e be 00 c0 	mov    DWORD PTR ds:0xc00237dc,0xc000be5e
c000bf0c:	c3                   	ret    

c000bf0d <kernel_main>:
c000bf0d:	57                   	push   edi
c000bf0e:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf13:	56                   	push   esi
c000bf14:	31 f6                	xor    esi,esi
c000bf16:	53                   	push   ebx
c000bf17:	83 ec 10             	sub    esp,0x10
c000bf1a:	e8 67 08 00 00       	call   c000c786 <installVgaTextImplementation()>
c000bf1f:	e8 98 ff ff ff       	call   c000bebc <setupTextMode()>
c000bf24:	89 f0                	mov    eax,esi
c000bf26:	89 fa                	mov    edx,edi
c000bf28:	ee                   	out    dx,al
c000bf29:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf2e:	b0 80                	mov    al,0x80
c000bf30:	89 da                	mov    edx,ebx
c000bf32:	ee                   	out    dx,al
c000bf33:	b1 03                	mov    cl,0x3
c000bf35:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf3a:	88 c8                	mov    al,cl
c000bf3c:	ee                   	out    dx,al
c000bf3d:	89 f0                	mov    eax,esi
c000bf3f:	89 fa                	mov    edx,edi
c000bf41:	ee                   	out    dx,al
c000bf42:	88 c8                	mov    al,cl
c000bf44:	89 da                	mov    edx,ebx
c000bf46:	ee                   	out    dx,al
c000bf47:	b0 c7                	mov    al,0xc7
c000bf49:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf4e:	ee                   	out    dx,al
c000bf4f:	b0 0b                	mov    al,0xb
c000bf51:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf56:	ee                   	out    dx,al
c000bf57:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	05 ff 0f 00 00       	add    eax,0xfff
c000bf64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf69:	50                   	push   eax
c000bf6a:	e8 4d 03 00 00       	call   c000c2bc <Phys::physicalMemorySetup(unsigned int)>
c000bf6f:	e8 08 1f 00 00       	call   c000de7c <Virt::virtualMemorySetup()>
c000bf74:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bf7a:	83 c4 10             	add    esp,0x10
c000bf7d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bf83:	75 0e                	jne    c000bf93 <kernel_main+0x86>
c000bf85:	89 d8                	mov    eax,ebx
c000bf87:	25 48 03 00 00       	and    eax,0x348
c000bf8c:	3d 00 03 00 00       	cmp    eax,0x300
c000bf91:	74 10                	je     c000bfa3 <kernel_main+0x96>
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	68 3b 18 02 c0       	push   0xc002183b
c000bf9b:	e8 e0 8c 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000bfa0:	83 c4 10             	add    esp,0x10
c000bfa3:	83 ec 0c             	sub    esp,0xc
c000bfa6:	89 1d 40 37 02 c0    	mov    DWORD PTR ds:0xc0023740,ebx
c000bfac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfb0:	53                   	push   ebx
c000bfb1:	e8 70 20 00 00       	call   c000e026 <VAS::VAS()>
c000bfb6:	89 1d 84 38 02 c0    	mov    DWORD PTR ds:0xc0023884,ebx
c000bfbc:	e8 5f 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfc1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bfc8:	e8 2f 2f 00 00       	call   c000eefc <operator new(unsigned long)>
c000bfcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd0:	89 c6                	mov    esi,eax
c000bfd2:	e8 cb ed ff ff       	call   c000ada2 <Computer::Computer()>
c000bfd7:	6a 00                	push   0x0
c000bfd9:	89 35 28 37 02 c0    	mov    DWORD PTR ds:0xc0023728,esi
c000bfdf:	6a 00                	push   0x0
c000bfe1:	6a 00                	push   0x0
c000bfe3:	56                   	push   esi
c000bfe4:	e8 7f f2 ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000bfe9:	83 c4 14             	add    esp,0x14
c000bfec:	53                   	push   ebx
c000bfed:	e8 44 22 00 00       	call   c000e236 <VAS::~VAS()>
c000bff2:	c7 04 24 14 04 02 c0 	mov    DWORD PTR [esp],0xc0020414
c000bff9:	e8 82 8c 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000bffe:	83 c4 20             	add    esp,0x20
c000c001:	5b                   	pop    ebx
c000c002:	5e                   	pop    esi
c000c003:	5f                   	pop    edi
c000c004:	c3                   	ret    

c000c005 <Phys::allocateDMA(unsigned long)>:
c000c005:	55                   	push   ebp
c000c006:	31 d2                	xor    edx,edx
c000c008:	57                   	push   edi
c000c009:	31 ed                	xor    ebp,ebp
c000c00b:	56                   	push   esi
c000c00c:	31 c9                	xor    ecx,ecx
c000c00e:	53                   	push   ebx
c000c00f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c013:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c019:	31 c0                	xor    eax,eax
c000c01b:	c1 ee 0c             	shr    esi,0xc
c000c01e:	eb 17                	jmp    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c020:	85 c9                	test   ecx,ecx
c000c022:	75 04                	jne    c000c028 <Phys::allocateDMA(unsigned long)+0x23>
c000c024:	89 d5                	mov    ebp,edx
c000c026:	89 d0                	mov    eax,edx
c000c028:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c02b:	39 de                	cmp    esi,ebx
c000c02d:	74 20                	je     c000c04f <Phys::allocateDMA(unsigned long)+0x4a>
c000c02f:	42                   	inc    edx
c000c030:	89 d9                	mov    ecx,ebx
c000c032:	83 fa 2f             	cmp    edx,0x2f
c000c035:	7f 11                	jg     c000c048 <Phys::allocateDMA(unsigned long)+0x43>
c000c037:	80 ba 80 37 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdc880],0x0
c000c03e:	74 e0                	je     c000c020 <Phys::allocateDMA(unsigned long)+0x1b>
c000c040:	31 c9                	xor    ecx,ecx
c000c042:	42                   	inc    edx
c000c043:	83 fa 2f             	cmp    edx,0x2f
c000c046:	7e ef                	jle    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c048:	5b                   	pop    ebx
c000c049:	31 c0                	xor    eax,eax
c000c04b:	5e                   	pop    esi
c000c04c:	5f                   	pop    edi
c000c04d:	5d                   	pop    ebp
c000c04e:	c3                   	ret    
c000c04f:	8d 14 30             	lea    edx,[eax+esi*1]
c000c052:	89 d7                	mov    edi,edx
c000c054:	4f                   	dec    edi
c000c055:	79 03                	jns    c000c05a <Phys::allocateDMA(unsigned long)+0x55>
c000c057:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c05a:	c1 ff 04             	sar    edi,0x4
c000c05d:	89 c2                	mov    edx,eax
c000c05f:	c1 fa 04             	sar    edx,0x4
c000c062:	39 fa                	cmp    edx,edi
c000c064:	75 2f                	jne    c000c095 <Phys::allocateDMA(unsigned long)+0x90>
c000c066:	85 db                	test   ebx,ebx
c000c068:	74 1a                	je     c000c084 <Phys::allocateDMA(unsigned long)+0x7f>
c000c06a:	be 80 37 02 c0       	mov    esi,0xc0023780
c000c06f:	8d 90 80 37 02 c0    	lea    edx,[eax-0x3ffdc880]
c000c075:	f7 d6                	not    esi
c000c077:	29 c6                	sub    esi,eax
c000c079:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c07c:	42                   	inc    edx
c000c07d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c080:	39 d9                	cmp    ecx,ebx
c000c082:	7f f5                	jg     c000c079 <Phys::allocateDMA(unsigned long)+0x74>
c000c084:	85 ff                	test   edi,edi
c000c086:	74 13                	je     c000c09b <Phys::allocateDMA(unsigned long)+0x96>
c000c088:	5b                   	pop    ebx
c000c089:	05 50 20 0c 00       	add    eax,0xc2050
c000c08e:	5e                   	pop    esi
c000c08f:	c1 e0 0c             	shl    eax,0xc
c000c092:	5f                   	pop    edi
c000c093:	5d                   	pop    ebp
c000c094:	c3                   	ret    
c000c095:	89 ea                	mov    edx,ebp
c000c097:	31 c9                	xor    ecx,ecx
c000c099:	eb a7                	jmp    c000c042 <Phys::allocateDMA(unsigned long)+0x3d>
c000c09b:	5b                   	pop    ebx
c000c09c:	c1 e0 0c             	shl    eax,0xc
c000c09f:	5e                   	pop    esi
c000c0a0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c0a5:	5f                   	pop    edi
c000c0a6:	5d                   	pop    ebp
c000c0a7:	c3                   	ret    

c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0b0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0b6:	c1 e9 0c             	shr    ecx,0xc
c000c0b9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0be:	76 25                	jbe    c000c0e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0c0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0c5:	c1 e8 0c             	shr    eax,0xc
c000c0c8:	8d 50 10             	lea    edx,[eax+0x10]
c000c0cb:	85 c9                	test   ecx,ecx
c000c0cd:	74 15                	je     c000c0e4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0cf:	8d 82 80 37 02 c0    	lea    eax,[edx-0x3ffdc880]
c000c0d5:	8d 94 11 80 37 02 c0 	lea    edx,[ecx+edx*1-0x3ffdc880]
c000c0dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c0df:	40                   	inc    eax
c000c0e0:	39 d0                	cmp    eax,edx
c000c0e2:	75 f8                	jne    c000c0dc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c0e4:	c3                   	ret    
c000c0e5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c0eb:	c1 ea 0c             	shr    edx,0xc
c000c0ee:	eb db                	jmp    c000c0cb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c0f0 <Phys::setPageState(unsigned long, bool)>:
c000c0f0:	56                   	push   esi
c000c0f1:	ba 01 00 00 00       	mov    edx,0x1
c000c0f6:	53                   	push   ebx
c000c0f7:	8b 35 58 2b 02 c0    	mov    esi,DWORD PTR ds:0xc0022b58
c000c0fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c105:	89 c8                	mov    eax,ecx
c000c107:	83 e1 07             	and    ecx,0x7
c000c10a:	c1 e8 03             	shr    eax,0x3
c000c10d:	d3 e3                	shl    ebx,cl
c000c10f:	01 c6                	add    esi,eax
c000c111:	d3 e2                	shl    edx,cl
c000c113:	f7 d2                	not    edx
c000c115:	20 16                	and    BYTE PTR [esi],dl
c000c117:	03 05 58 2b 02 c0    	add    eax,DWORD PTR ds:0xc0022b58
c000c11d:	08 18                	or     BYTE PTR [eax],bl
c000c11f:	5b                   	pop    ebx
c000c120:	5e                   	pop    esi
c000c121:	c3                   	ret    

c000c122 <Phys::getPageState(unsigned long)>:
c000c122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c126:	8b 15 58 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022b58
c000c12c:	89 c8                	mov    eax,ecx
c000c12e:	83 e1 07             	and    ecx,0x7
c000c131:	c1 e8 03             	shr    eax,0x3
c000c134:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c138:	d3 f8                	sar    eax,cl
c000c13a:	83 e0 01             	and    eax,0x1
c000c13d:	c3                   	ret    

c000c13e <Phys::freePage(unsigned long)>:
c000c13e:	53                   	push   ebx
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c146:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c14c:	76 57                	jbe    c000c1a5 <Phys::freePage(unsigned long)+0x67>
c000c14e:	c1 eb 0c             	shr    ebx,0xc
c000c151:	53                   	push   ebx
c000c152:	e8 cb ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c157:	5a                   	pop    edx
c000c158:	84 c0                	test   al,al
c000c15a:	74 5b                	je     c000c1b7 <Phys::freePage(unsigned long)+0x79>
c000c15c:	a1 6c 37 02 c0       	mov    eax,ds:0xc002376c
c000c161:	48                   	dec    eax
c000c162:	a3 6c 37 02 c0       	mov    ds:0xc002376c,eax
c000c167:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16d:	c1 e0 02             	shl    eax,0x2
c000c170:	99                   	cdq    
c000c171:	f7 3d 70 37 02 c0    	idiv   DWORD PTR ds:0xc0023770
c000c177:	39 05 68 37 02 c0    	cmp    DWORD PTR ds:0xc0023768,eax
c000c17d:	75 13                	jne    c000c192 <Phys::freePage(unsigned long)+0x54>
c000c17f:	83 ec 08             	sub    esp,0x8
c000c182:	6a 00                	push   0x0
c000c184:	53                   	push   ebx
c000c185:	e8 66 ff ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	83 c4 08             	add    esp,0x8
c000c190:	5b                   	pop    ebx
c000c191:	c3                   	ret    
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	a3 68 37 02 c0       	mov    ds:0xc0023768,eax
c000c19a:	50                   	push   eax
c000c19b:	e8 7a 09 00 00       	call   c000cb1a <VgaText::updateRAMUsageDisplay(int)>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	eb da                	jmp    c000c17f <Phys::freePage(unsigned long)+0x41>
c000c1a5:	68 00 10 00 00       	push   0x1000
c000c1aa:	53                   	push   ebx
c000c1ab:	e8 f8 fe ff ff       	call   c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1b0:	59                   	pop    ecx
c000c1b1:	5b                   	pop    ebx
c000c1b2:	83 c4 08             	add    esp,0x8
c000c1b5:	5b                   	pop    ebx
c000c1b6:	c3                   	ret    
c000c1b7:	c7 44 24 10 2f 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc002042f
c000c1bf:	83 c4 08             	add    esp,0x8
c000c1c2:	5b                   	pop    ebx
c000c1c3:	e9 b8 8a 00 00       	jmp    c0014c80 <Krnl::panic(char const*)>

c000c1c8 <Phys::allocatePage()>:
c000c1c8:	56                   	push   esi
c000c1c9:	53                   	push   ebx
c000c1ca:	51                   	push   ecx
c000c1cb:	8b 35 60 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023760
c000c1d1:	89 f3                	mov    ebx,esi
c000c1d3:	eb 0a                	jmp    c000c1df <Phys::allocatePage()+0x17>
c000c1d5:	89 1d 60 37 02 c0    	mov    DWORD PTR ds:0xc0023760,ebx
c000c1db:	39 de                	cmp    esi,ebx
c000c1dd:	74 24                	je     c000c203 <Phys::allocatePage()+0x3b>
c000c1df:	53                   	push   ebx
c000c1e0:	e8 3d ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c1e5:	5a                   	pop    edx
c000c1e6:	84 c0                	test   al,al
c000c1e8:	74 4e                	je     c000c238 <Phys::allocatePage()+0x70>
c000c1ea:	43                   	inc    ebx
c000c1eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c1f1:	75 e2                	jne    c000c1d5 <Phys::allocatePage()+0xd>
c000c1f3:	31 db                	xor    ebx,ebx
c000c1f5:	c7 05 60 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023760,0x0
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 dc                	jne    c000c1df <Phys::allocatePage()+0x17>
c000c203:	83 ec 0c             	sub    esp,0xc
c000c206:	68 00 10 00 00       	push   0x1000
c000c20b:	e8 f5 fd ff ff       	call   c000c005 <Phys::allocateDMA(unsigned long)>
c000c210:	83 c4 10             	add    esp,0x10
c000c213:	85 c0                	test   eax,eax
c000c215:	75 56                	jne    c000c26d <Phys::allocatePage()+0xa5>
c000c217:	83 ec 0c             	sub    esp,0xc
c000c21a:	68 45 04 02 c0       	push   0xc0020445
c000c21f:	e8 5c 8a 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	8b 1d 60 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023760
c000c22d:	53                   	push   ebx
c000c22e:	e8 ef fe ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c233:	5a                   	pop    edx
c000c234:	84 c0                	test   al,al
c000c236:	75 b2                	jne    c000c1ea <Phys::allocatePage()+0x22>
c000c238:	6a 01                	push   0x1
c000c23a:	53                   	push   ebx
c000c23b:	e8 b0 fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c240:	a1 6c 37 02 c0       	mov    eax,ds:0xc002376c
c000c245:	59                   	pop    ecx
c000c246:	40                   	inc    eax
c000c247:	5b                   	pop    ebx
c000c248:	a3 6c 37 02 c0       	mov    ds:0xc002376c,eax
c000c24d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c250:	8d 04 80             	lea    eax,[eax+eax*4]
c000c253:	c1 e0 02             	shl    eax,0x2
c000c256:	99                   	cdq    
c000c257:	f7 3d 70 37 02 c0    	idiv   DWORD PTR ds:0xc0023770
c000c25d:	39 05 68 37 02 c0    	cmp    DWORD PTR ds:0xc0023768,eax
c000c263:	75 0c                	jne    c000c271 <Phys::allocatePage()+0xa9>
c000c265:	a1 60 37 02 c0       	mov    eax,ds:0xc0023760
c000c26a:	c1 e0 0c             	shl    eax,0xc
c000c26d:	5a                   	pop    edx
c000c26e:	5b                   	pop    ebx
c000c26f:	5e                   	pop    esi
c000c270:	c3                   	ret    
c000c271:	83 ec 0c             	sub    esp,0xc
c000c274:	a3 68 37 02 c0       	mov    ds:0xc0023768,eax
c000c279:	50                   	push   eax
c000c27a:	e8 9b 08 00 00       	call   c000cb1a <VgaText::updateRAMUsageDisplay(int)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	eb e1                	jmp    c000c265 <Phys::allocatePage()+0x9d>

c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c284:	56                   	push   esi
c000c285:	53                   	push   ebx
c000c286:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c28a:	39 1d 64 37 02 c0    	cmp    DWORD PTR ds:0xc0023764,ebx
c000c290:	73 06                	jae    c000c298 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c292:	89 1d 64 37 02 c0    	mov    DWORD PTR ds:0xc0023764,ebx
c000c298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c29c:	c1 eb 0c             	shr    ebx,0xc
c000c29f:	c1 e8 0c             	shr    eax,0xc
c000c2a2:	39 d8                	cmp    eax,ebx
c000c2a4:	73 13                	jae    c000c2b9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2a6:	6a 00                	push   0x0
c000c2a8:	8d 70 01             	lea    esi,[eax+0x1]
c000c2ab:	50                   	push   eax
c000c2ac:	e8 3f fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2b1:	5a                   	pop    edx
c000c2b2:	89 f0                	mov    eax,esi
c000c2b4:	59                   	pop    ecx
c000c2b5:	39 f3                	cmp    ebx,esi
c000c2b7:	75 ed                	jne    c000c2a6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2b9:	5b                   	pop    ebx
c000c2ba:	5e                   	pop    esi
c000c2bb:	c3                   	ret    

c000c2bc <Phys::physicalMemorySetup(unsigned int)>:
c000c2bc:	55                   	push   ebp
c000c2bd:	57                   	push   edi
c000c2be:	56                   	push   esi
c000c2bf:	53                   	push   ebx
c000c2c0:	31 db                	xor    ebx,ebx
c000c2c2:	83 ec 30             	sub    esp,0x30
c000c2c5:	6a 30                	push   0x30
c000c2c7:	6a 00                	push   0x0
c000c2c9:	68 80 37 02 c0       	push   0xc0023780
c000c2ce:	e8 35 43 ff ff       	call   c0000608 <memset>
c000c2d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2dc:	05 00 10 00 00       	add    eax,0x1000
c000c2e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2e5:	83 c4 10             	add    esp,0x10
c000c2e8:	83 ec 08             	sub    esp,0x8
c000c2eb:	6a 01                	push   0x1
c000c2ed:	53                   	push   ebx
c000c2ee:	43                   	inc    ebx
c000c2ef:	e8 fc fd ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c2fd:	75 e9                	jne    c000c2e8 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c2ff:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c306:	66 85 c0             	test   ax,ax
c000c309:	0f 84 28 01 00 00    	je     c000c437 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c30f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c313:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000c319:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000c31e:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000c324:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000c32a:	89 f1                	mov    ecx,esi
c000c32c:	89 fb                	mov    ebx,edi
c000c32e:	01 c1                	add    ecx,eax
c000c330:	89 d5                	mov    ebp,edx
c000c332:	11 d3                	adc    ebx,edx
c000c334:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c337:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c33b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c33f:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000c345:	09 dd                	or     ebp,ebx
c000c347:	0f 85 fa 00 00 00    	jne    c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c34d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c351:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c359:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000c361:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c365:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c36d:	eb 45                	jmp    c000c3b4 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000c36f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000c373:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000c378:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c37c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c380:	0f 84 c1 00 00 00    	je     c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c386:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c38a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c38d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c390:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000c393:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000c396:	89 c1                	mov    ecx,eax
c000c398:	89 d3                	mov    ebx,edx
c000c39a:	01 f1                	add    ecx,esi
c000c39c:	11 fb                	adc    ebx,edi
c000c39e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3a1:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c3a5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000c3a8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3ac:	09 d3                	or     ebx,edx
c000c3ae:	0f 85 93 00 00 00    	jne    c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c3b4:	49                   	dec    ecx
c000c3b5:	75 b8                	jne    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c3ba:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c3be:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3c2:	39 e9                	cmp    ecx,ebp
c000c3c4:	89 d9                	mov    ecx,ebx
c000c3c6:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3ca:	72 a3                	jb     c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3cc:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c3d1:	39 f1                	cmp    ecx,esi
c000c3d3:	b9 00 00 00 00       	mov    ecx,0x0
c000c3d8:	19 f9                	sbb    ecx,edi
c000c3da:	73 93                	jae    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3dc:	39 e8                	cmp    eax,ebp
c000c3de:	89 d1                	mov    ecx,edx
c000c3e0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3e4:	73 13                	jae    c000c3f9 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000c3e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c3e9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c3ed:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000c3f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c3f5:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000c3f9:	83 ec 08             	sub    esp,0x8
c000c3fc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c400:	50                   	push   eax
c000c401:	e8 7e fe ff ff       	call   c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c406:	83 c4 0c             	add    esp,0xc
c000c409:	89 fa                	mov    edx,edi
c000c40b:	89 f0                	mov    eax,esi
c000c40d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c411:	03 05 70 37 02 c0    	add    eax,DWORD PTR ds:0xc0023770
c000c417:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c41e:	a3 70 37 02 c0       	mov    ds:0xc0023770,eax
c000c423:	52                   	push   edx
c000c424:	50                   	push   eax
c000c425:	68 61 04 02 c0       	push   0xc0020461
c000c42a:	e8 bc 2b 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000c42f:	83 c4 10             	add    esp,0x10
c000c432:	e9 38 ff ff ff       	jmp    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c437:	83 ec 0c             	sub    esp,0xc
c000c43a:	68 53 04 02 c0       	push   0xc0020453
c000c43f:	e8 3c 88 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000c444:	83 c4 10             	add    esp,0x10
c000c447:	bb 40 01 00 00       	mov    ebx,0x140
c000c44c:	83 ec 08             	sub    esp,0x8
c000c44f:	6a 00                	push   0x0
c000c451:	53                   	push   ebx
c000c452:	43                   	inc    ebx
c000c453:	e8 98 fc ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c458:	ff 05 70 37 02 c0    	inc    DWORD PTR ds:0xc0023770
c000c45e:	83 c4 10             	add    esp,0x10
c000c461:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c467:	75 e3                	jne    c000c44c <Phys::physicalMemorySetup(unsigned int)+0x190>
c000c469:	83 c4 2c             	add    esp,0x2c
c000c46c:	5b                   	pop    ebx
c000c46d:	5e                   	pop    esi
c000c46e:	5f                   	pop    edi
c000c46f:	5d                   	pop    ebp
c000c470:	c3                   	ret    
c000c471:	90                   	nop

c000c472 <Pipe::isAtty()>:
c000c472:	31 c0                	xor    eax,eax
c000c474:	c3                   	ret    
c000c475:	90                   	nop

c000c476 <Pipe::~Pipe()>:
c000c476:	83 ec 0c             	sub    esp,0xc
c000c479:	ba c0 04 02 c0       	mov    edx,0xc00204c0
c000c47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c482:	89 10                	mov    DWORD PTR [eax],edx
c000c484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c488:	83 ec 0c             	sub    esp,0xc
c000c48b:	50                   	push   eax
c000c48c:	e8 51 16 00 00       	call   c000dae2 <UnixFile::~UnixFile()>
c000c491:	83 c4 10             	add    esp,0x10
c000c494:	90                   	nop
c000c495:	83 c4 0c             	add    esp,0xc
c000c498:	c3                   	ret    
c000c499:	90                   	nop

c000c49a <Pipe::~Pipe()>:
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	83 ec 0c             	sub    esp,0xc
c000c4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a4:	e8 cd ff ff ff       	call   c000c476 <Pipe::~Pipe()>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	83 ec 08             	sub    esp,0x8
c000c4af:	6a 20                	push   0x20
c000c4b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b5:	e8 51 2a 00 00       	call   c000ef0b <operator delete(void*, unsigned long)>
c000c4ba:	83 c4 10             	add    esp,0x10
c000c4bd:	83 c4 0c             	add    esp,0xc
c000c4c0:	c3                   	ret    
c000c4c1:	90                   	nop

c000c4c2 <Pipe::read(unsigned long long, void*, int*)>:
c000c4c2:	55                   	push   ebp
c000c4c3:	57                   	push   edi
c000c4c4:	56                   	push   esi
c000c4c5:	53                   	push   ebx
c000c4c6:	83 ec 1c             	sub    esp,0x1c
c000c4c9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c4cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4d5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c4d8:	89 c8                	mov    eax,ecx
c000c4da:	99                   	cdq    
c000c4db:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c4df:	74 19                	je     c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e1:	39 f9                	cmp    ecx,edi
c000c4e3:	89 d1                	mov    ecx,edx
c000c4e5:	19 f1                	sbb    ecx,esi
c000c4e7:	73 11                	jae    c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e9:	e8 be b6 00 00       	call   c0017bac <lockScheduler()>
c000c4ee:	e8 ed b9 00 00       	call   c0017ee0 <schedule()>
c000c4f3:	e8 b6 b6 00 00       	call   c0017bae <unlockScheduler()>
c000c4f8:	eb db                	jmp    c000c4d5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c4fa:	39 f8                	cmp    eax,edi
c000c4fc:	89 d1                	mov    ecx,edx
c000c4fe:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c502:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c506:	19 f1                	sbb    ecx,esi
c000c508:	73 08                	jae    c000c512 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c50a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c50e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c512:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c515:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c518:	29 c6                	sub    esi,eax
c000c51a:	89 f1                	mov    ecx,esi
c000c51c:	c1 f9 1f             	sar    ecx,0x1f
c000c51f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c523:	89 ca                	mov    edx,ecx
c000c525:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c529:	19 d1                	sbb    ecx,edx
c000c52b:	73 04                	jae    c000c531 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c52d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c531:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c535:	89 fd                	mov    ebp,edi
c000c537:	29 f5                	sub    ebp,esi
c000c539:	85 f6                	test   esi,esi
c000c53b:	74 12                	je     c000c54f <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c53d:	52                   	push   edx
c000c53e:	56                   	push   esi
c000c53f:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c542:	50                   	push   eax
c000c543:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c547:	e8 86 40 ff ff       	call   c00005d2 <memcpy>
c000c54c:	83 c4 10             	add    esp,0x10
c000c54f:	85 ed                	test   ebp,ebp
c000c551:	74 12                	je     c000c565 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c553:	50                   	push   eax
c000c554:	55                   	push   ebp
c000c555:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c558:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c55c:	56                   	push   esi
c000c55d:	e8 70 40 ff ff       	call   c00005d2 <memcpy>
c000c562:	83 c4 10             	add    esp,0x10
c000c565:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c56b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c56e:	99                   	cdq    
c000c56f:	89 f7                	mov    edi,esi
c000c571:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c575:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c579:	c1 ff 1f             	sar    edi,0x1f
c000c57c:	57                   	push   edi
c000c57d:	56                   	push   esi
c000c57e:	52                   	push   edx
c000c57f:	50                   	push   eax
c000c580:	e8 c7 22 01 00       	call   c001e84c <__umoddi3>
c000c585:	83 c4 10             	add    esp,0x10
c000c588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c58b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c590:	75 10                	jne    c000c5a2 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c592:	83 ec 0c             	sub    esp,0xc
c000c595:	68 7d 04 02 c0       	push   0xc002047d
c000c59a:	e8 e1 86 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c5aa:	89 10                	mov    DWORD PTR [eax],edx
c000c5ac:	83 c4 1c             	add    esp,0x1c
c000c5af:	31 c0                	xor    eax,eax
c000c5b1:	5b                   	pop    ebx
c000c5b2:	5e                   	pop    esi
c000c5b3:	5f                   	pop    edi
c000c5b4:	5d                   	pop    ebp
c000c5b5:	c3                   	ret    

c000c5b6 <Pipe::write(unsigned long long, void*, int*)>:
c000c5b6:	55                   	push   ebp
c000c5b7:	57                   	push   edi
c000c5b8:	56                   	push   esi
c000c5b9:	53                   	push   ebx
c000c5ba:	83 ec 1c             	sub    esp,0x1c
c000c5bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5c1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c5c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5cc:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c5cf:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c5d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d6:	89 de                	mov    esi,ebx
c000c5d8:	89 df                	mov    edi,ebx
c000c5da:	c1 ff 1f             	sar    edi,0x1f
c000c5dd:	01 c6                	add    esi,eax
c000c5df:	89 c8                	mov    eax,ecx
c000c5e1:	11 d7                	adc    edi,edx
c000c5e3:	99                   	cdq    
c000c5e4:	39 f1                	cmp    ecx,esi
c000c5e6:	89 d0                	mov    eax,edx
c000c5e8:	19 f8                	sbb    eax,edi
c000c5ea:	b8 01 00 00 00       	mov    eax,0x1
c000c5ef:	0f 82 80 00 00 00    	jb     c000c675 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c5f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c5f8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c5fb:	01 d8                	add    eax,ebx
c000c5fd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c601:	99                   	cdq    
c000c602:	f7 f9                	idiv   ecx
c000c604:	29 d1                	sub    ecx,edx
c000c606:	89 d7                	mov    edi,edx
c000c608:	89 c8                	mov    eax,ecx
c000c60a:	99                   	cdq    
c000c60b:	39 ce                	cmp    esi,ecx
c000c60d:	19 d3                	sbb    ebx,edx
c000c60f:	bb 00 00 00 00       	mov    ebx,0x0
c000c614:	72 04                	jb     c000c61a <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c616:	89 f3                	mov    ebx,esi
c000c618:	29 cb                	sub    ebx,ecx
c000c61a:	89 f1                	mov    ecx,esi
c000c61c:	29 d9                	sub    ecx,ebx
c000c61e:	74 1a                	je     c000c63a <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c620:	52                   	push   edx
c000c621:	51                   	push   ecx
c000c622:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c626:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c62a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c62d:	57                   	push   edi
c000c62e:	e8 9f 3f ff ff       	call   c00005d2 <memcpy>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c63a:	85 db                	test   ebx,ebx
c000c63c:	74 12                	je     c000c650 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c63e:	50                   	push   eax
c000c63f:	53                   	push   ebx
c000c640:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c644:	51                   	push   ecx
c000c645:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c648:	e8 85 3f ff ff       	call   c00005d2 <memcpy>
c000c64d:	83 c4 10             	add    esp,0x10
c000c650:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c653:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c658:	75 10                	jne    c000c66a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c65a:	83 ec 0c             	sub    esp,0xc
c000c65d:	68 99 04 02 c0       	push   0xc0020499
c000c662:	e8 19 86 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000c667:	83 c4 10             	add    esp,0x10
c000c66a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c66e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c671:	89 38                	mov    DWORD PTR [eax],edi
c000c673:	31 c0                	xor    eax,eax
c000c675:	83 c4 1c             	add    esp,0x1c
c000c678:	5b                   	pop    ebx
c000c679:	5e                   	pop    esi
c000c67a:	5f                   	pop    edi
c000c67b:	5d                   	pop    ebp
c000c67c:	c3                   	ret    
c000c67d:	90                   	nop

c000c67e <Pipe::Pipe(int)>:
c000c67e:	83 ec 0c             	sub    esp,0xc
c000c681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c685:	83 ec 08             	sub    esp,0x8
c000c688:	6a 00                	push   0x0
c000c68a:	50                   	push   eax
c000c68b:	e8 ba 12 00 00       	call   c000d94a <UnixFile::UnixFile(int)>
c000c690:	83 c4 10             	add    esp,0x10
c000c693:	ba c0 04 02 c0       	mov    edx,0xc00204c0
c000c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c69c:	89 10                	mov    DWORD PTR [eax],edx
c000c69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ad:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6b8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c6bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6c3:	83 ec 0c             	sub    esp,0xc
c000c6c6:	50                   	push   eax
c000c6c7:	e8 52 f5 ff ff       	call   c000bc1e <malloc>
c000c6cc:	83 c4 10             	add    esp,0x10
c000c6cf:	89 c2                	mov    edx,eax
c000c6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6dc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c6e0:	90                   	nop
c000c6e1:	83 c4 0c             	add    esp,0xc
c000c6e4:	c3                   	ret    
c000c6e5:	90                   	nop

c000c6e6 <VgaText::isAtty()>:
c000c6e6:	b0 01                	mov    al,0x1
c000c6e8:	c3                   	ret    
c000c6e9:	90                   	nop

c000c6ea <VgaText::~VgaText()>:
c000c6ea:	83 ec 0c             	sub    esp,0xc
c000c6ed:	ba 7c 05 02 c0       	mov    edx,0xc002057c
c000c6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6f6:	89 10                	mov    DWORD PTR [eax],edx
c000c6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6fc:	83 ec 0c             	sub    esp,0xc
c000c6ff:	50                   	push   eax
c000c700:	e8 dd 13 00 00       	call   c000dae2 <UnixFile::~UnixFile()>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	90                   	nop
c000c709:	83 c4 0c             	add    esp,0xc
c000c70c:	c3                   	ret    
c000c70d:	90                   	nop

c000c70e <VgaText::~VgaText()>:
c000c70e:	83 ec 0c             	sub    esp,0xc
c000c711:	83 ec 0c             	sub    esp,0xc
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	e8 cd ff ff ff       	call   c000c6ea <VgaText::~VgaText()>
c000c71d:	83 c4 10             	add    esp,0x10
c000c720:	83 ec 08             	sub    esp,0x8
c000c723:	68 60 12 00 00       	push   0x1260
c000c728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c72c:	e8 da 27 00 00       	call   c000ef0b <operator delete(void*, unsigned long)>
c000c731:	83 c4 10             	add    esp,0x10
c000c734:	83 c4 0c             	add    esp,0xc
c000c737:	c3                   	ret    

c000c738 <VgaText::read(unsigned long long, void*, int*)>:
c000c738:	83 ec 10             	sub    esp,0x10
c000c73b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c747:	e8 e0 53 00 00       	call   c0011b2c <readKeyboard(VgaText*, char*, unsigned long)>
c000c74c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c750:	89 02                	mov    DWORD PTR [edx],eax
c000c752:	31 c0                	xor    eax,eax
c000c754:	83 c4 1c             	add    esp,0x1c
c000c757:	c3                   	ret    

c000c758 <setTerminalScrollLock(bool)>:
c000c758:	c3                   	ret    

c000c759 <addToTerminalCycle(VgaText*)>:
c000c759:	8b 15 e0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237e0
c000c75f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c763:	85 d2                	test   edx,edx
c000c765:	75 0c                	jne    c000c773 <addToTerminalCycle(VgaText*)+0x1a>
c000c767:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c76d:	a3 e0 37 02 c0       	mov    ds:0xc00237e0,eax
c000c772:	c3                   	ret    
c000c773:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c779:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c77f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c785:	c3                   	ret    

c000c786 <installVgaTextImplementation()>:
c000c786:	83 ec 10             	sub    esp,0x10
c000c789:	6a 20                	push   0x20
c000c78b:	6a 00                	push   0x0
c000c78d:	68 c0 37 02 c0       	push   0xc00237c0
c000c792:	e8 71 3e ff ff       	call   c0000608 <memset>
c000c797:	83 c4 1c             	add    esp,0x1c
c000c79a:	c3                   	ret    

c000c79b <scrollTerminalScrollLock(int)>:
c000c79b:	c3                   	ret    

c000c79c <VgaText::load()>:
c000c79c:	53                   	push   ebx
c000c79d:	31 c0                	xor    eax,eax
c000c79f:	83 ec 58             	sub    esp,0x58
c000c7a2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c7a6:	89 e2                	mov    edx,esp
c000c7a8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c7ac:	40                   	inc    eax
c000c7ad:	83 f8 50             	cmp    eax,0x50
c000c7b0:	75 f6                	jne    c000c7a8 <VgaText::load()+0xc>
c000c7b2:	31 c0                	xor    eax,eax
c000c7b4:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c7bb:	84 c9                	test   cl,cl
c000c7bd:	74 06                	je     c000c7c5 <VgaText::load()+0x29>
c000c7bf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c7c2:	40                   	inc    eax
c000c7c3:	eb ef                	jmp    c000c7b4 <VgaText::load()+0x18>
c000c7c5:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c7cb:	85 c0                	test   eax,eax
c000c7cd:	74 09                	je     c000c7d8 <VgaText::load()+0x3c>
c000c7cf:	51                   	push   ecx
c000c7d0:	51                   	push   ecx
c000c7d1:	52                   	push   edx
c000c7d2:	53                   	push   ebx
c000c7d3:	ff d0                	call   eax
c000c7d5:	83 c4 10             	add    esp,0x10
c000c7d8:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c7de:	85 c0                	test   eax,eax
c000c7e0:	74 09                	je     c000c7eb <VgaText::load()+0x4f>
c000c7e2:	83 ec 0c             	sub    esp,0xc
c000c7e5:	53                   	push   ebx
c000c7e6:	ff d0                	call   eax
c000c7e8:	83 c4 10             	add    esp,0x10
c000c7eb:	83 c4 58             	add    esp,0x58
c000c7ee:	5b                   	pop    ebx
c000c7ef:	c3                   	ret    

c000c7f0 <VgaText::updateCursor()>:
c000c7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7f4:	39 05 e4 37 02 c0    	cmp    DWORD PTR ds:0xc00237e4,eax
c000c7fa:	75 0c                	jne    c000c808 <VgaText::updateCursor()+0x18>
c000c7fc:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c802:	85 c0                	test   eax,eax
c000c804:	74 02                	je     c000c808 <VgaText::updateCursor()+0x18>
c000c806:	ff e0                	jmp    eax
c000c808:	c3                   	ret    
c000c809:	90                   	nop

c000c80a <VgaText::showCursor(bool)>:
c000c80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c80e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c812:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c818:	c3                   	ret    
c000c819:	90                   	nop

c000c81a <VgaText::disableBlink(bool)>:
c000c81a:	56                   	push   esi
c000c81b:	53                   	push   ebx
c000c81c:	51                   	push   ecx
c000c81d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c821:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c825:	39 1d e4 37 02 c0    	cmp    DWORD PTR ds:0xc00237e4,ebx
c000c82b:	75 18                	jne    c000c845 <VgaText::disableBlink(bool)+0x2b>
c000c82d:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c833:	85 c0                	test   eax,eax
c000c835:	74 0e                	je     c000c845 <VgaText::disableBlink(bool)+0x2b>
c000c837:	89 f1                	mov    ecx,esi
c000c839:	52                   	push   edx
c000c83a:	52                   	push   edx
c000c83b:	0f b6 d1             	movzx  edx,cl
c000c83e:	52                   	push   edx
c000c83f:	53                   	push   ebx
c000c840:	ff d0                	call   eax
c000c842:	83 c4 10             	add    esp,0x10
c000c845:	89 f0                	mov    eax,esi
c000c847:	83 f0 01             	xor    eax,0x1
c000c84a:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c850:	58                   	pop    eax
c000c851:	5b                   	pop    ebx
c000c852:	5e                   	pop    esi
c000c853:	c3                   	ret    

c000c854 <VgaText::doANSI_SGR(int)>:
c000c854:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c85c:	85 d2                	test   edx,edx
c000c85e:	75 14                	jne    c000c874 <VgaText::doANSI_SGR(int)+0x20>
c000c860:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c866:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c86c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c872:	eb 65                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c874:	83 fa 07             	cmp    edx,0x7
c000c877:	75 14                	jne    c000c88d <VgaText::doANSI_SGR(int)+0x39>
c000c879:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c87f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c885:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c88b:	eb 4c                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c88d:	83 fa 1b             	cmp    edx,0x1b
c000c890:	74 ce                	je     c000c860 <VgaText::doANSI_SGR(int)+0xc>
c000c892:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c895:	83 f9 07             	cmp    ecx,0x7
c000c898:	77 09                	ja     c000c8a3 <VgaText::doANSI_SGR(int)+0x4f>
c000c89a:	8b 14 8d 80 2b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd480]
c000c8a1:	eb 20                	jmp    c000c8c3 <VgaText::doANSI_SGR(int)+0x6f>
c000c8a3:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c8a6:	83 f9 07             	cmp    ecx,0x7
c000c8a9:	77 09                	ja     c000c8b4 <VgaText::doANSI_SGR(int)+0x60>
c000c8ab:	8b 14 8d 80 2b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd480]
c000c8b2:	eb 25                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c8b4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c8b7:	83 f9 07             	cmp    ecx,0x7
c000c8ba:	77 0e                	ja     c000c8ca <VgaText::doANSI_SGR(int)+0x76>
c000c8bc:	8b 14 95 38 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c8]
c000c8c3:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8c9:	c3                   	ret    
c000c8ca:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c8cd:	83 f9 07             	cmp    ecx,0x7
c000c8d0:	77 0d                	ja     c000c8df <VgaText::doANSI_SGR(int)+0x8b>
c000c8d2:	8b 14 95 10 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5f0]
c000c8d9:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8df:	c3                   	ret    

c000c8e0 <VgaText::setDefaultBgColour(VgaColour)>:
c000c8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8e8:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c8ee:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <VgaText::setDefaultFgColour(VgaColour)>:
c000c8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8fe:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c904:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c90c:	53                   	push   ebx
c000c90d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c911:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c915:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c919:	51                   	push   ecx
c000c91a:	e8 c1 ff ff ff       	call   c000c8e0 <VgaText::setDefaultBgColour(VgaColour)>
c000c91f:	58                   	pop    eax
c000c920:	5a                   	pop    edx
c000c921:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c925:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c929:	5b                   	pop    ebx
c000c92a:	eb ca                	jmp    c000c8f6 <VgaText::setDefaultFgColour(VgaColour)>

c000c92c <VgaText::combineColours(unsigned char, unsigned char)>:
c000c92c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c930:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c935:	83 e0 0f             	and    eax,0xf
c000c938:	c1 e2 04             	shl    edx,0x4
c000c93b:	09 d0                	or     eax,edx
c000c93d:	c3                   	ret    

c000c93e <VgaText::scrollScreen()>:
c000c93e:	57                   	push   edi
c000c93f:	56                   	push   esi
c000c940:	be 01 00 00 00       	mov    esi,0x1
c000c945:	53                   	push   ebx
c000c946:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c94a:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c950:	31 ff                	xor    edi,edi
c000c952:	01 d9                	add    ecx,ebx
c000c954:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c957:	83 fe 17             	cmp    esi,0x17
c000c95a:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c960:	75 28                	jne    c000c98a <VgaText::scrollScreen()+0x4c>
c000c962:	f7 c7 01 00 00 00    	test   edi,0x1
c000c968:	74 1c                	je     c000c986 <VgaText::scrollScreen()+0x48>
c000c96a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c971:	50                   	push   eax
c000c972:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c979:	50                   	push   eax
c000c97a:	e8 ad ff ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000c97f:	5a                   	pop    edx
c000c980:	5a                   	pop    edx
c000c981:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c984:	eb 04                	jmp    c000c98a <VgaText::scrollScreen()+0x4c>
c000c986:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000c98a:	47                   	inc    edi
c000c98b:	41                   	inc    ecx
c000c98c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000c992:	75 c0                	jne    c000c954 <VgaText::scrollScreen()+0x16>
c000c994:	46                   	inc    esi
c000c995:	83 fe 18             	cmp    esi,0x18
c000c998:	75 b0                	jne    c000c94a <VgaText::scrollScreen()+0xc>
c000c99a:	39 1d e4 37 02 c0    	cmp    DWORD PTR ds:0xc00237e4,ebx
c000c9a0:	75 24                	jne    c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9a2:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000c9a9:	74 08                	je     c000c9b3 <VgaText::scrollScreen()+0x75>
c000c9ab:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000c9b1:	eb 13                	jmp    c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9b3:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000c9b9:	85 c0                	test   eax,eax
c000c9bb:	74 09                	je     c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9bd:	83 ec 0c             	sub    esp,0xc
c000c9c0:	53                   	push   ebx
c000c9c1:	ff d0                	call   eax
c000c9c3:	83 c4 10             	add    esp,0x10
c000c9c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c9ca:	5b                   	pop    ebx
c000c9cb:	5e                   	pop    esi
c000c9cc:	5f                   	pop    edi
c000c9cd:	e9 1e fe ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>

c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>:
c000c9d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000c9d7:	c1 e0 08             	shl    eax,0x8
c000c9da:	89 c2                	mov    edx,eax
c000c9dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000c9e1:	09 d0                	or     eax,edx
c000c9e3:	c3                   	ret    

c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000c9e4:	53                   	push   ebx
c000c9e5:	83 ec 08             	sub    esp,0x8
c000c9e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9ec:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f1:	50                   	push   eax
c000c9f2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f7:	50                   	push   eax
c000c9f8:	e8 2f ff ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000c9fd:	5a                   	pop    edx
c000c9fe:	0f b6 c0             	movzx  eax,al
c000ca01:	5b                   	pop    ebx
c000ca02:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ca07:	50                   	push   eax
c000ca08:	53                   	push   ebx
c000ca09:	e8 c4 ff ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ca0e:	5a                   	pop    edx
c000ca0f:	5a                   	pop    edx
c000ca10:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca16:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca1a:	0f b7 d2             	movzx  edx,dx
c000ca1d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca22:	39 0d e4 37 02 c0    	cmp    DWORD PTR ds:0xc00237e4,ecx
c000ca28:	75 14                	jne    c000ca3e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca2a:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ca30:	85 c0                	test   eax,eax
c000ca32:	74 0a                	je     c000ca3e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca34:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca38:	83 c4 08             	add    esp,0x8
c000ca3b:	5b                   	pop    ebx
c000ca3c:	ff e0                	jmp    eax
c000ca3e:	83 c4 08             	add    esp,0x8
c000ca41:	5b                   	pop    ebx
c000ca42:	c3                   	ret    
c000ca43:	90                   	nop

c000ca44 <VgaText::getCursorX()>:
c000ca44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca48:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ca4e:	c3                   	ret    
c000ca4f:	90                   	nop

c000ca50 <VgaText::getCursorY()>:
c000ca50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca54:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ca5a:	c3                   	ret    
c000ca5b:	90                   	nop

c000ca5c <VgaText::setCursor(int, int)>:
c000ca5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca64:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ca6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca6e:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ca74:	e9 77 fd ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000ca79:	90                   	nop

c000ca7a <VgaText::setCursorX(int)>:
c000ca7a:	83 ec 10             	sub    esp,0x10
c000ca7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca81:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	50                   	push   eax
c000ca8c:	e8 cb ff ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000ca91:	83 c4 1c             	add    esp,0x1c
c000ca94:	c3                   	ret    
c000ca95:	90                   	nop

c000ca96 <VgaText::setCursorY(int)>:
c000ca96:	83 ec 10             	sub    esp,0x10
c000ca99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000caa1:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000caa7:	50                   	push   eax
c000caa8:	e8 af ff ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000caad:	83 c4 1c             	add    esp,0x1c
c000cab0:	c3                   	ret    
c000cab1:	90                   	nop

c000cab2 <VgaText::incrementCursor(bool)>:
c000cab2:	56                   	push   esi
c000cab3:	53                   	push   ebx
c000cab4:	51                   	push   ecx
c000cab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cab9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cabd:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cac3:	40                   	inc    eax
c000cac4:	83 f8 50             	cmp    eax,0x50
c000cac7:	74 08                	je     c000cad1 <VgaText::incrementCursor(bool)+0x1f>
c000cac9:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cacf:	eb 33                	jmp    c000cb04 <VgaText::incrementCursor(bool)+0x52>
c000cad1:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cad7:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cae1:	8d 50 01             	lea    edx,[eax+0x1]
c000cae4:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000caea:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000caf0:	75 12                	jne    c000cb04 <VgaText::incrementCursor(bool)+0x52>
c000caf2:	83 ec 0c             	sub    esp,0xc
c000caf5:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cafb:	53                   	push   ebx
c000cafc:	e8 3d fe ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000cb01:	83 c4 10             	add    esp,0x10
c000cb04:	89 f0                	mov    eax,esi
c000cb06:	84 c0                	test   al,al
c000cb08:	74 0c                	je     c000cb16 <VgaText::incrementCursor(bool)+0x64>
c000cb0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb0e:	5a                   	pop    edx
c000cb0f:	5b                   	pop    ebx
c000cb10:	5e                   	pop    esi
c000cb11:	e9 da fc ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000cb16:	58                   	pop    eax
c000cb17:	5b                   	pop    ebx
c000cb18:	5e                   	pop    esi
c000cb19:	c3                   	ret    

c000cb1a <VgaText::updateRAMUsageDisplay(int)>:
c000cb1a:	53                   	push   ebx
c000cb1b:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb20:	6a 0f                	push   0xf
c000cb22:	6a 00                	push   0x0
c000cb24:	e8 03 fe ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb29:	5a                   	pop    edx
c000cb2a:	59                   	pop    ecx
c000cb2b:	0f b6 c8             	movzx  ecx,al
c000cb2e:	51                   	push   ecx
c000cb2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb33:	99                   	cdq    
c000cb34:	f7 fb                	idiv   ebx
c000cb36:	89 d3                	mov    ebx,edx
c000cb38:	83 c0 30             	add    eax,0x30
c000cb3b:	83 c3 30             	add    ebx,0x30
c000cb3e:	0f be c0             	movsx  eax,al
c000cb41:	0f b6 db             	movzx  ebx,bl
c000cb44:	50                   	push   eax
c000cb45:	e8 88 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb4a:	5a                   	pop    edx
c000cb4b:	5a                   	pop    edx
c000cb4c:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cb52:	51                   	push   ecx
c000cb53:	53                   	push   ebx
c000cb54:	e8 79 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb59:	5b                   	pop    ebx
c000cb5a:	5a                   	pop    edx
c000cb5b:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cb61:	51                   	push   ecx
c000cb62:	6a 25                	push   0x25
c000cb64:	e8 69 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb69:	59                   	pop    ecx
c000cb6a:	5b                   	pop    ebx
c000cb6b:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cb71:	5b                   	pop    ebx
c000cb72:	c3                   	ret    
c000cb73:	90                   	nop

c000cb74 <VgaText::updateDiskUsage()>:
c000cb74:	55                   	push   ebp
c000cb75:	bd 10 27 00 00       	mov    ebp,0x2710
c000cb7a:	57                   	push   edi
c000cb7b:	56                   	push   esi
c000cb7c:	53                   	push   ebx
c000cb7d:	6a 0f                	push   0xf
c000cb7f:	6a 00                	push   0x0
c000cb81:	e8 a6 fd ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb86:	5a                   	pop    edx
c000cb87:	0f b6 d8             	movzx  ebx,al
c000cb8a:	59                   	pop    ecx
c000cb8b:	a1 c4 54 02 c0       	mov    eax,ds:0xc00254c4
c000cb90:	53                   	push   ebx
c000cb91:	b9 0a 00 00 00       	mov    ecx,0xa
c000cb96:	99                   	cdq    
c000cb97:	f7 fd                	idiv   ebp
c000cb99:	99                   	cdq    
c000cb9a:	f7 f9                	idiv   ecx
c000cb9c:	8d 42 30             	lea    eax,[edx+0x30]
c000cb9f:	0f b6 c0             	movzx  eax,al
c000cba2:	50                   	push   eax
c000cba3:	e8 2a fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cba8:	5e                   	pop    esi
c000cba9:	5f                   	pop    edi
c000cbaa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cbb0:	bf e8 03 00 00       	mov    edi,0x3e8
c000cbb5:	53                   	push   ebx
c000cbb6:	a1 c4 54 02 c0       	mov    eax,ds:0xc00254c4
c000cbbb:	99                   	cdq    
c000cbbc:	f7 ff                	idiv   edi
c000cbbe:	99                   	cdq    
c000cbbf:	f7 f9                	idiv   ecx
c000cbc1:	8d 42 30             	lea    eax,[edx+0x30]
c000cbc4:	0f b6 c0             	movzx  eax,al
c000cbc7:	50                   	push   eax
c000cbc8:	e8 05 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbcd:	5a                   	pop    edx
c000cbce:	5e                   	pop    esi
c000cbcf:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cbd5:	be 64 00 00 00       	mov    esi,0x64
c000cbda:	53                   	push   ebx
c000cbdb:	a1 c4 54 02 c0       	mov    eax,ds:0xc00254c4
c000cbe0:	99                   	cdq    
c000cbe1:	f7 fe                	idiv   esi
c000cbe3:	99                   	cdq    
c000cbe4:	f7 f9                	idiv   ecx
c000cbe6:	8d 42 30             	lea    eax,[edx+0x30]
c000cbe9:	0f b6 c0             	movzx  eax,al
c000cbec:	50                   	push   eax
c000cbed:	e8 e0 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbf2:	5a                   	pop    edx
c000cbf3:	5a                   	pop    edx
c000cbf4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cbfa:	53                   	push   ebx
c000cbfb:	a1 c4 54 02 c0       	mov    eax,ds:0xc00254c4
c000cc00:	99                   	cdq    
c000cc01:	f7 f9                	idiv   ecx
c000cc03:	99                   	cdq    
c000cc04:	f7 f9                	idiv   ecx
c000cc06:	8d 42 30             	lea    eax,[edx+0x30]
c000cc09:	0f b6 c0             	movzx  eax,al
c000cc0c:	50                   	push   eax
c000cc0d:	e8 c0 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc12:	5a                   	pop    edx
c000cc13:	5a                   	pop    edx
c000cc14:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc1a:	53                   	push   ebx
c000cc1b:	a1 c4 54 02 c0       	mov    eax,ds:0xc00254c4
c000cc20:	99                   	cdq    
c000cc21:	f7 f9                	idiv   ecx
c000cc23:	8d 42 30             	lea    eax,[edx+0x30]
c000cc26:	0f b6 c0             	movzx  eax,al
c000cc29:	50                   	push   eax
c000cc2a:	e8 a3 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc2f:	5a                   	pop    edx
c000cc30:	5a                   	pop    edx
c000cc31:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cc37:	53                   	push   ebx
c000cc38:	a1 c0 54 02 c0       	mov    eax,ds:0xc00254c0
c000cc3d:	99                   	cdq    
c000cc3e:	f7 fd                	idiv   ebp
c000cc40:	99                   	cdq    
c000cc41:	f7 f9                	idiv   ecx
c000cc43:	8d 42 30             	lea    eax,[edx+0x30]
c000cc46:	0f b6 c0             	movzx  eax,al
c000cc49:	50                   	push   eax
c000cc4a:	e8 83 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc4f:	5d                   	pop    ebp
c000cc50:	5a                   	pop    edx
c000cc51:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cc57:	53                   	push   ebx
c000cc58:	a1 c0 54 02 c0       	mov    eax,ds:0xc00254c0
c000cc5d:	99                   	cdq    
c000cc5e:	f7 ff                	idiv   edi
c000cc60:	99                   	cdq    
c000cc61:	f7 f9                	idiv   ecx
c000cc63:	8d 42 30             	lea    eax,[edx+0x30]
c000cc66:	0f b6 c0             	movzx  eax,al
c000cc69:	50                   	push   eax
c000cc6a:	e8 63 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc6f:	5f                   	pop    edi
c000cc70:	5d                   	pop    ebp
c000cc71:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000cc77:	53                   	push   ebx
c000cc78:	a1 c0 54 02 c0       	mov    eax,ds:0xc00254c0
c000cc7d:	99                   	cdq    
c000cc7e:	f7 fe                	idiv   esi
c000cc80:	99                   	cdq    
c000cc81:	f7 f9                	idiv   ecx
c000cc83:	8d 42 30             	lea    eax,[edx+0x30]
c000cc86:	0f b6 c0             	movzx  eax,al
c000cc89:	50                   	push   eax
c000cc8a:	e8 43 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc8f:	5a                   	pop    edx
c000cc90:	5e                   	pop    esi
c000cc91:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cc97:	53                   	push   ebx
c000cc98:	a1 c0 54 02 c0       	mov    eax,ds:0xc00254c0
c000cc9d:	99                   	cdq    
c000cc9e:	f7 f9                	idiv   ecx
c000cca0:	99                   	cdq    
c000cca1:	f7 f9                	idiv   ecx
c000cca3:	8d 42 30             	lea    eax,[edx+0x30]
c000cca6:	0f b6 c0             	movzx  eax,al
c000cca9:	50                   	push   eax
c000ccaa:	e8 23 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccaf:	5f                   	pop    edi
c000ccb0:	5d                   	pop    ebp
c000ccb1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000ccb7:	53                   	push   ebx
c000ccb8:	a1 c0 54 02 c0       	mov    eax,ds:0xc00254c0
c000ccbd:	99                   	cdq    
c000ccbe:	f7 f9                	idiv   ecx
c000ccc0:	83 c2 30             	add    edx,0x30
c000ccc3:	0f b6 d2             	movzx  edx,dl
c000ccc6:	52                   	push   edx
c000ccc7:	e8 06 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cccc:	5a                   	pop    edx
c000cccd:	59                   	pop    ecx
c000ccce:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000ccd4:	5b                   	pop    ebx
c000ccd5:	5e                   	pop    esi
c000ccd6:	5f                   	pop    edi
c000ccd7:	5d                   	pop    ebp
c000ccd8:	c3                   	ret    
c000ccd9:	90                   	nop

c000ccda <VgaText::updateTitle()>:
c000ccda:	53                   	push   ebx
c000ccdb:	31 c0                	xor    eax,eax
c000ccdd:	83 ec 58             	sub    esp,0x58
c000cce0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000cce4:	89 e1                	mov    ecx,esp
c000cce6:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ccea:	40                   	inc    eax
c000cceb:	83 f8 50             	cmp    eax,0x50
c000ccee:	75 f6                	jne    c000cce6 <VgaText::updateTitle()+0xc>
c000ccf0:	31 c0                	xor    eax,eax
c000ccf2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000ccf9:	84 db                	test   bl,bl
c000ccfb:	74 06                	je     c000cd03 <VgaText::updateTitle()+0x29>
c000ccfd:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000cd00:	40                   	inc    eax
c000cd01:	eb ef                	jmp    c000ccf2 <VgaText::updateTitle()+0x18>
c000cd03:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000cd09:	85 c0                	test   eax,eax
c000cd0b:	74 09                	je     c000cd16 <VgaText::updateTitle()+0x3c>
c000cd0d:	53                   	push   ebx
c000cd0e:	53                   	push   ebx
c000cd0f:	51                   	push   ecx
c000cd10:	52                   	push   edx
c000cd11:	ff d0                	call   eax
c000cd13:	83 c4 10             	add    esp,0x10
c000cd16:	e8 59 fe ff ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c000cd1b:	83 c4 58             	add    esp,0x58
c000cd1e:	5b                   	pop    ebx
c000cd1f:	c3                   	ret    

c000cd20 <VgaText::setTitleTextColour(VgaColour)>:
c000cd20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd28:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cd2e:	eb aa                	jmp    c000ccda <VgaText::updateTitle()>

c000cd30 <VgaText::setTitleColour(VgaColour)>:
c000cd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd38:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cd3e:	eb 9a                	jmp    c000ccda <VgaText::updateTitle()>

c000cd40 <VgaText::setTitle(char*)>:
c000cd40:	53                   	push   ebx
c000cd41:	83 ec 10             	sub    esp,0x10
c000cd44:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cd52:	50                   	push   eax
c000cd53:	e8 4f 39 ff ff       	call   c00006a7 <strcpy>
c000cd58:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cd5c:	83 c4 18             	add    esp,0x18
c000cd5f:	5b                   	pop    ebx
c000cd60:	e9 75 ff ff ff       	jmp    c000ccda <VgaText::updateTitle()>
c000cd65:	90                   	nop

c000cd66 <VgaText::decrementCursor(bool)>:
c000cd66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd6e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cd74:	85 c0                	test   eax,eax
c000cd76:	74 07                	je     c000cd7f <VgaText::decrementCursor(bool)+0x19>
c000cd78:	48                   	dec    eax
c000cd79:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cd7f:	84 c9                	test   cl,cl
c000cd81:	74 09                	je     c000cd8c <VgaText::decrementCursor(bool)+0x26>
c000cd83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd87:	e9 64 fa ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000cd8c:	c3                   	ret    
c000cd8d:	90                   	nop

c000cd8e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000cd8e:	53                   	push   ebx
c000cd8f:	83 ec 08             	sub    esp,0x8
c000cd92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cd96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cda2:	3c 07                	cmp    al,0x7
c000cda4:	75 2a                	jne    c000cdd0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000cda6:	a1 8c 38 02 c0       	mov    eax,ds:0xc002388c
c000cdab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cdb3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000cdbb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000cdc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdc7:	83 c4 08             	add    esp,0x8
c000cdca:	5b                   	pop    ebx
c000cdcb:	e9 06 30 00 00       	jmp    c000fdd6 <Buzzer::beep(int, int, bool)>
c000cdd0:	3c 0d                	cmp    al,0xd
c000cdd2:	75 0c                	jne    c000cde0 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000cdd4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdde:	eb 3b                	jmp    c000ce1b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000cde0:	3c 0a                	cmp    al,0xa
c000cde2:	75 40                	jne    c000ce24 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000cde4:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cdea:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdf4:	8d 50 01             	lea    edx,[eax+0x1]
c000cdf7:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cdfd:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ce03:	75 12                	jne    c000ce17 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000ce05:	83 ec 0c             	sub    esp,0xc
c000ce08:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce0e:	53                   	push   ebx
c000ce0f:	e8 2a fb ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000ce14:	83 c4 10             	add    esp,0x10
c000ce17:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce1b:	83 c4 08             	add    esp,0x8
c000ce1e:	5b                   	pop    ebx
c000ce1f:	e9 cc f9 ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000ce24:	3c 08                	cmp    al,0x8
c000ce26:	75 31                	jne    c000ce59 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ce28:	50                   	push   eax
c000ce29:	50                   	push   eax
c000ce2a:	6a 01                	push   0x1
c000ce2c:	53                   	push   ebx
c000ce2d:	e8 34 ff ff ff       	call   c000cd66 <VgaText::decrementCursor(bool)>
c000ce32:	5a                   	pop    edx
c000ce33:	59                   	pop    ecx
c000ce34:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce3a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce40:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000ce46:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ce4c:	6a 20                	push   0x20
c000ce4e:	53                   	push   ebx
c000ce4f:	e8 90 fb ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce54:	83 c4 28             	add    esp,0x28
c000ce57:	5b                   	pop    ebx
c000ce58:	c3                   	ret    
c000ce59:	83 ec 08             	sub    esp,0x8
c000ce5c:	0f be c0             	movsx  eax,al
c000ce5f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce65:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce6b:	51                   	push   ecx
c000ce6c:	52                   	push   edx
c000ce6d:	50                   	push   eax
c000ce6e:	53                   	push   ebx
c000ce6f:	e8 70 fb ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce74:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ce78:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ce80:	83 c4 28             	add    esp,0x28
c000ce83:	5b                   	pop    ebx
c000ce84:	e9 29 fc ff ff       	jmp    c000cab2 <VgaText::incrementCursor(bool)>
c000ce89:	90                   	nop

c000ce8a <VgaText::isShowingCursor()>:
c000ce8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce8e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000ce94:	c3                   	ret    
c000ce95:	90                   	nop

c000ce96 <VgaText::isBlinkDisabled()>:
c000ce96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce9a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000cea0:	83 f0 01             	xor    eax,0x1
c000cea3:	c3                   	ret    

c000cea4 <VgaText::setCursorHeight(int)>:
c000cea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cea8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ceac:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000ceb2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000ceb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cebd:	e9 48 f9 ff ff       	jmp    c000c80a <VgaText::showCursor(bool)>

c000cec2 <VgaText::getCursorHeight()>:
c000cec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cecc:	c3                   	ret    

c000cecd <setActiveTerminal(VgaText*)>:
c000cecd:	53                   	push   ebx
c000cece:	83 ec 08             	sub    esp,0x8
c000ced1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	75 11                	jne    c000ceea <setActiveTerminal(VgaText*)+0x1d>
c000ced9:	c7 44 24 10 d4 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc00204d4
c000cee1:	83 c4 08             	add    esp,0x8
c000cee4:	5b                   	pop    ebx
c000cee5:	e9 96 7d 00 00       	jmp    c0014c80 <Krnl::panic(char const*)>
c000ceea:	50                   	push   eax
c000ceeb:	50                   	push   eax
c000ceec:	53                   	push   ebx
c000ceed:	68 e2 04 02 c0       	push   0xc00204e2
c000cef2:	e8 f4 20 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000cef7:	a1 e4 37 02 c0       	mov    eax,ds:0xc00237e4
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	85 c0                	test   eax,eax
c000cf01:	74 0c                	je     c000cf0f <setActiveTerminal(VgaText*)+0x42>
c000cf03:	83 ec 0c             	sub    esp,0xc
c000cf06:	50                   	push   eax
c000cf07:	e8 e4 f8 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	89 1d e4 37 02 c0    	mov    DWORD PTR ds:0xc00237e4,ebx
c000cf15:	51                   	push   ecx
c000cf16:	51                   	push   ecx
c000cf17:	53                   	push   ebx
c000cf18:	68 fa 04 02 c0       	push   0xc00204fa
c000cf1d:	e8 c9 20 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000cf22:	83 c4 0c             	add    esp,0xc
c000cf25:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cf2b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cf31:	53                   	push   ebx
c000cf32:	e8 25 fb ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000cf37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf3a:	e8 57 ff ff ff       	call   c000ce96 <VgaText::isBlinkDisabled()>
c000cf3f:	5a                   	pop    edx
c000cf40:	0f b6 c0             	movzx  eax,al
c000cf43:	59                   	pop    ecx
c000cf44:	50                   	push   eax
c000cf45:	53                   	push   ebx
c000cf46:	e8 cf f8 ff ff       	call   c000c81a <VgaText::disableBlink(bool)>
c000cf4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf4e:	e8 6f ff ff ff       	call   c000cec2 <VgaText::getCursorHeight()>
c000cf53:	5a                   	pop    edx
c000cf54:	59                   	pop    ecx
c000cf55:	50                   	push   eax
c000cf56:	53                   	push   ebx
c000cf57:	e8 48 ff ff ff       	call   c000cea4 <VgaText::setCursorHeight(int)>
c000cf5c:	83 c4 10             	add    esp,0x10
c000cf5f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cf66:	75 0a                	jne    c000cf72 <setActiveTerminal(VgaText*)+0xa5>
c000cf68:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cf72:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf76:	83 c4 08             	add    esp,0x8
c000cf79:	5b                   	pop    ebx
c000cf7a:	e9 1d f8 ff ff       	jmp    c000c79c <VgaText::load()>

c000cf7f <doTerminalCycle()>:
c000cf7f:	83 ec 18             	sub    esp,0x18
c000cf82:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c000cf87:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000cf8d:	50                   	push   eax
c000cf8e:	a3 e0 37 02 c0       	mov    ds:0xc00237e0,eax
c000cf93:	e8 35 ff ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c000cf98:	83 c4 1c             	add    esp,0x1c
c000cf9b:	c3                   	ret    

c000cf9c <VgaText::doUpdate()>:
c000cf9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfa0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000cfa6:	85 c0                	test   eax,eax
c000cfa8:	74 02                	je     c000cfac <VgaText::doUpdate()+0x10>
c000cfaa:	ff e0                	jmp    eax
c000cfac:	c3                   	ret    
c000cfad:	90                   	nop

c000cfae <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000cfae:	55                   	push   ebp
c000cfaf:	57                   	push   edi
c000cfb0:	56                   	push   esi
c000cfb1:	53                   	push   ebx
c000cfb2:	83 ec 1c             	sub    esp,0x1c
c000cfb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cfb9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfbe:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000cfc5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000cfc8:	50                   	push   eax
c000cfc9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfce:	50                   	push   eax
c000cfcf:	e8 58 f9 ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cfd4:	59                   	pop    ecx
c000cfd5:	0f b6 c0             	movzx  eax,al
c000cfd8:	5b                   	pop    ebx
c000cfd9:	31 c9                	xor    ecx,ecx
c000cfdb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000cfe3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cfe7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000cfed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cff1:	0f b7 db             	movzx  ebx,bx
c000cff4:	01 db                	add    ebx,ebx
c000cff6:	01 fb                	add    ebx,edi
c000cff8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cffb:	84 c0                	test   al,al
c000cffd:	0f 84 38 01 00 00    	je     c000d13b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d003:	3c 0d                	cmp    al,0xd
c000d005:	75 0f                	jne    c000d016 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d007:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d011:	e9 1f 01 00 00       	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d016:	3c 0a                	cmp    al,0xa
c000d018:	75 5b                	jne    c000d075 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d01a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d020:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d02a:	8d 48 01             	lea    ecx,[eax+0x1]
c000d02d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d033:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d039:	75 12                	jne    c000d04d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d03b:	83 ec 0c             	sub    esp,0xc
c000d03e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d044:	55                   	push   ebp
c000d045:	e8 f4 f8 ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000d04a:	83 c4 10             	add    esp,0x10
c000d04d:	83 ec 0c             	sub    esp,0xc
c000d050:	55                   	push   ebp
c000d051:	e8 9a f7 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000d056:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d05e:	83 c4 10             	add    esp,0x10
c000d061:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d067:	31 c9                	xor    ecx,ecx
c000d069:	0f b7 db             	movzx  ebx,bx
c000d06c:	01 db                	add    ebx,ebx
c000d06e:	01 fb                	add    ebx,edi
c000d070:	e9 c0 00 00 00       	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d075:	3c 08                	cmp    al,0x8
c000d077:	75 4e                	jne    c000d0c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d079:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d07d:	53                   	push   ebx
c000d07e:	53                   	push   ebx
c000d07f:	6a 01                	push   0x1
c000d081:	55                   	push   ebp
c000d082:	e8 df fc ff ff       	call   c000cd66 <VgaText::decrementCursor(bool)>
c000d087:	58                   	pop    eax
c000d088:	5a                   	pop    edx
c000d089:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d08f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d095:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d09b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d0a1:	6a 20                	push   0x20
c000d0a3:	55                   	push   ebp
c000d0a4:	e8 3b f9 ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d0a9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0b1:	83 c4 20             	add    esp,0x20
c000d0b4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0ba:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d0be:	0f b7 db             	movzx  ebx,bx
c000d0c1:	01 db                	add    ebx,ebx
c000d0c3:	01 fb                	add    ebx,edi
c000d0c5:	eb 6e                	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0c7:	51                   	push   ecx
c000d0c8:	51                   	push   ecx
c000d0c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d0cd:	50                   	push   eax
c000d0ce:	e8 ff f8 ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0d3:	83 c4 10             	add    esp,0x10
c000d0d6:	66 89 03             	mov    WORD PTR [ebx],ax
c000d0d9:	39 2d e4 37 02 c0    	cmp    DWORD PTR ds:0xc00237e4,ebp
c000d0df:	75 2a                	jne    c000d10b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0e1:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d0e7:	85 c0                	test   eax,eax
c000d0e9:	74 20                	je     c000d10b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0eb:	52                   	push   edx
c000d0ec:	52                   	push   edx
c000d0ed:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d0f3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d0f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d101:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d104:	51                   	push   ecx
c000d105:	55                   	push   ebp
c000d106:	ff d0                	call   eax
c000d108:	83 c4 20             	add    esp,0x20
c000d10b:	83 c3 02             	add    ebx,0x2
c000d10e:	50                   	push   eax
c000d10f:	50                   	push   eax
c000d110:	6a 00                	push   0x0
c000d112:	55                   	push   ebp
c000d113:	e8 9a f9 ff ff       	call   c000cab2 <VgaText::incrementCursor(bool)>
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d122:	75 0f                	jne    c000d133 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d124:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d12c:	0f b7 db             	movzx  ebx,bx
c000d12f:	01 db                	add    ebx,ebx
c000d131:	01 fb                	add    ebx,edi
c000d133:	b1 01                	mov    cl,0x1
c000d135:	46                   	inc    esi
c000d136:	e9 bd fe ff ff       	jmp    c000cff8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d13b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d13f:	83 ec 0c             	sub    esp,0xc
c000d142:	55                   	push   ebp
c000d143:	e8 a8 f6 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000d148:	83 c4 10             	add    esp,0x10
c000d14b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d14f:	84 c9                	test   cl,cl
c000d151:	74 0c                	je     c000d15f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d153:	83 ec 0c             	sub    esp,0xc
c000d156:	55                   	push   ebp
c000d157:	e8 40 fe ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d166:	83 c4 1c             	add    esp,0x1c
c000d169:	5b                   	pop    ebx
c000d16a:	5e                   	pop    esi
c000d16b:	5f                   	pop    edi
c000d16c:	5d                   	pop    ebp
c000d16d:	c3                   	ret    

c000d16e <VgaText::clearScreen()>:
c000d16e:	57                   	push   edi
c000d16f:	56                   	push   esi
c000d170:	31 f6                	xor    esi,esi
c000d172:	53                   	push   ebx
c000d173:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d177:	52                   	push   edx
c000d178:	6a 00                	push   0x0
c000d17a:	6a 00                	push   0x0
c000d17c:	53                   	push   ebx
c000d17d:	e8 da f8 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d182:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d192:	7e 26                	jle    c000d1ba <VgaText::clearScreen()+0x4c>
c000d194:	31 ff                	xor    edi,edi
c000d196:	50                   	push   eax
c000d197:	50                   	push   eax
c000d198:	56                   	push   esi
c000d199:	57                   	push   edi
c000d19a:	47                   	inc    edi
c000d19b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d1a1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d1a7:	6a 20                	push   0x20
c000d1a9:	53                   	push   ebx
c000d1aa:	e8 35 f8 ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d1af:	83 c4 20             	add    esp,0x20
c000d1b2:	83 ff 50             	cmp    edi,0x50
c000d1b5:	75 df                	jne    c000d196 <VgaText::clearScreen()+0x28>
c000d1b7:	46                   	inc    esi
c000d1b8:	eb d2                	jmp    c000d18c <VgaText::clearScreen()+0x1e>
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	53                   	push   ebx
c000d1be:	e8 d9 fd ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d1c3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	5b                   	pop    ebx
c000d1ce:	5e                   	pop    esi
c000d1cf:	5f                   	pop    edi
c000d1d0:	c3                   	ret    
c000d1d1:	90                   	nop

c000d1d2 <VgaText::putchar(char)>:
c000d1d2:	56                   	push   esi
c000d1d3:	53                   	push   ebx
c000d1d4:	83 ec 14             	sub    esp,0x14
c000d1d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d1db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d1df:	3c 5b                	cmp    al,0x5b
c000d1e1:	75 21                	jne    c000d204 <VgaText::putchar(char)+0x32>
c000d1e3:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d1ea:	74 28                	je     c000d214 <VgaText::putchar(char)+0x42>
c000d1ec:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d1f5:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d1ff:	e9 e2 00 00 00       	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d204:	3c 1b                	cmp    al,0x1b
c000d206:	75 0c                	jne    c000d214 <VgaText::putchar(char)+0x42>
c000d208:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d20f:	e9 d2 00 00 00       	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d214:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d21a:	84 c9                	test   cl,cl
c000d21c:	0f 84 ab 00 00 00    	je     c000d2cd <VgaText::putchar(char)+0xfb>
c000d222:	8d 50 c0             	lea    edx,[eax-0x40]
c000d225:	80 fa 3e             	cmp    dl,0x3e
c000d228:	0f 87 82 00 00 00    	ja     c000d2b0 <VgaText::putchar(char)+0xde>
c000d22e:	3c 6d                	cmp    al,0x6d
c000d230:	75 4d                	jne    c000d27f <VgaText::putchar(char)+0xad>
c000d232:	31 f6                	xor    esi,esi
c000d234:	31 d2                	xor    edx,edx
c000d236:	31 c0                	xor    eax,eax
c000d238:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d23e:	7e 30                	jle    c000d270 <VgaText::putchar(char)+0x9e>
c000d240:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d248:	80 fa 3b             	cmp    dl,0x3b
c000d24b:	75 17                	jne    c000d264 <VgaText::putchar(char)+0x92>
c000d24d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d251:	50                   	push   eax
c000d252:	53                   	push   ebx
c000d253:	e8 fc f5 ff ff       	call   c000c854 <VgaText::doANSI_SGR(int)>
c000d258:	59                   	pop    ecx
c000d259:	31 d2                	xor    edx,edx
c000d25b:	58                   	pop    eax
c000d25c:	31 c0                	xor    eax,eax
c000d25e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d262:	eb 09                	jmp    c000d26d <VgaText::putchar(char)+0x9b>
c000d264:	6b c0 0a             	imul   eax,eax,0xa
c000d267:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d26b:	88 ca                	mov    dl,cl
c000d26d:	46                   	inc    esi
c000d26e:	eb c8                	jmp    c000d238 <VgaText::putchar(char)+0x66>
c000d270:	84 d2                	test   dl,dl
c000d272:	74 31                	je     c000d2a5 <VgaText::putchar(char)+0xd3>
c000d274:	50                   	push   eax
c000d275:	53                   	push   ebx
c000d276:	e8 d9 f5 ff ff       	call   c000c854 <VgaText::doANSI_SGR(int)>
c000d27b:	58                   	pop    eax
c000d27c:	5a                   	pop    edx
c000d27d:	eb 26                	jmp    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d27f:	3c 4a                	cmp    al,0x4a
c000d281:	75 22                	jne    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d283:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d28a:	75 19                	jne    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d28c:	83 ec 0c             	sub    esp,0xc
c000d28f:	53                   	push   ebx
c000d290:	e8 d9 fe ff ff       	call   c000d16e <VgaText::clearScreen()>
c000d295:	83 c4 0c             	add    esp,0xc
c000d298:	6a 00                	push   0x0
c000d29a:	6a 00                	push   0x0
c000d29c:	53                   	push   ebx
c000d29d:	e8 ba f7 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d2a2:	83 c4 10             	add    esp,0x10
c000d2a5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d2ae:	eb 36                	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d2b0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d2b6:	83 fa 0e             	cmp    edx,0xe
c000d2b9:	7f 2b                	jg     c000d2e6 <VgaText::putchar(char)+0x114>
c000d2bb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2be:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d2c4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d2cb:	eb 19                	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d2cd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2d3:	0f be c0             	movsx  eax,al
c000d2d6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2dc:	50                   	push   eax
c000d2dd:	53                   	push   ebx
c000d2de:	e8 ab fa ff ff       	call   c000cd8e <VgaText::putchar(char, VgaColour, VgaColour)>
c000d2e3:	83 c4 10             	add    esp,0x10
c000d2e6:	83 c4 14             	add    esp,0x14
c000d2e9:	5b                   	pop    ebx
c000d2ea:	5e                   	pop    esi
c000d2eb:	c3                   	ret    

c000d2ec <VgaText::puts(char const*)>:
c000d2ec:	53                   	push   ebx
c000d2ed:	83 ec 08             	sub    esp,0x8
c000d2f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d2f7:	84 c0                	test   al,al
c000d2f9:	74 12                	je     c000d30d <VgaText::puts(char const*)+0x21>
c000d2fb:	43                   	inc    ebx
c000d2fc:	51                   	push   ecx
c000d2fd:	51                   	push   ecx
c000d2fe:	50                   	push   eax
c000d2ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d303:	e8 ca fe ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	eb e7                	jmp    c000d2f4 <VgaText::puts(char const*)+0x8>
c000d30d:	83 c4 08             	add    esp,0x8
c000d310:	5b                   	pop    ebx
c000d311:	c3                   	ret    

c000d312 <VgaText::putx(unsigned int)>:
c000d312:	57                   	push   edi
c000d313:	b9 11 00 00 00       	mov    ecx,0x11
c000d318:	56                   	push   esi
c000d319:	be 16 05 02 c0       	mov    esi,0xc0020516
c000d31e:	53                   	push   ebx
c000d31f:	83 ec 20             	sub    esp,0x20
c000d322:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d326:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d32a:	fc                   	cld    
c000d32b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d32d:	be 08 00 00 00       	mov    esi,0x8
c000d332:	50                   	push   eax
c000d333:	50                   	push   eax
c000d334:	89 d8                	mov    eax,ebx
c000d336:	c1 e3 04             	shl    ebx,0x4
c000d339:	c1 e8 1c             	shr    eax,0x1c
c000d33c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d341:	50                   	push   eax
c000d342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d346:	e8 87 fe ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d34b:	83 c4 10             	add    esp,0x10
c000d34e:	4e                   	dec    esi
c000d34f:	75 e1                	jne    c000d332 <VgaText::putx(unsigned int)+0x20>
c000d351:	83 c4 20             	add    esp,0x20
c000d354:	5b                   	pop    ebx
c000d355:	5e                   	pop    esi
c000d356:	5f                   	pop    edi
c000d357:	c3                   	ret    

c000d358 <VgaText::VgaText(char const*)>:
c000d358:	57                   	push   edi
c000d359:	56                   	push   esi
c000d35a:	53                   	push   ebx
c000d35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35f:	83 ec 08             	sub    esp,0x8
c000d362:	6a 00                	push   0x0
c000d364:	50                   	push   eax
c000d365:	e8 e0 05 00 00       	call   c000d94a <UnixFile::UnixFile(int)>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	ba 7c 05 02 c0       	mov    edx,0xc002057c
c000d372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d376:	89 10                	mov    DWORD PTR [eax],edx
c000d378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d398:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ae:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3bc:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ca:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e0:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d3e6:	bb c0 37 02 c0       	mov    ebx,0xc00237c0
c000d3eb:	b8 08 00 00 00       	mov    eax,0x8
c000d3f0:	fc                   	cld    
c000d3f1:	89 d7                	mov    edi,edx
c000d3f3:	89 de                	mov    esi,ebx
c000d3f5:	89 c1                	mov    ecx,eax
c000d3f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3fd:	05 1e 10 00 00       	add    eax,0x101e
c000d402:	83 ec 08             	sub    esp,0x8
c000d405:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d409:	50                   	push   eax
c000d40a:	e8 98 32 ff ff       	call   c00006a7 <strcpy>
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d416:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d424:	83 c0 0c             	add    eax,0xc
c000d427:	83 ec 04             	sub    esp,0x4
c000d42a:	68 00 0f 00 00       	push   0xf00
c000d42f:	6a 00                	push   0x0
c000d431:	50                   	push   eax
c000d432:	e8 d1 31 ff ff       	call   c0000608 <memset>
c000d437:	83 c4 10             	add    esp,0x10
c000d43a:	83 ec 04             	sub    esp,0x4
c000d43d:	6a 00                	push   0x0
c000d43f:	6a 07                	push   0x7
c000d441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d445:	e8 c2 f4 ff ff       	call   c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d44a:	83 c4 10             	add    esp,0x10
c000d44d:	83 ec 08             	sub    esp,0x8
c000d450:	6a 02                	push   0x2
c000d452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d456:	e8 49 fa ff ff       	call   c000cea4 <VgaText::setCursorHeight(int)>
c000d45b:	83 c4 10             	add    esp,0x10
c000d45e:	83 ec 04             	sub    esp,0x4
c000d461:	6a 00                	push   0x0
c000d463:	6a 00                	push   0x0
c000d465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d469:	e8 ee f5 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	83 ec 08             	sub    esp,0x8
c000d474:	6a 01                	push   0x1
c000d476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47a:	e8 8b f3 ff ff       	call   c000c80a <VgaText::showCursor(bool)>
c000d47f:	83 c4 10             	add    esp,0x10
c000d482:	83 ec 08             	sub    esp,0x8
c000d485:	6a 01                	push   0x1
c000d487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48b:	e8 8a f3 ff ff       	call   c000c81a <VgaText::disableBlink(bool)>
c000d490:	83 c4 10             	add    esp,0x10
c000d493:	83 ec 0c             	sub    esp,0xc
c000d496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49a:	e8 cf fc ff ff       	call   c000d16e <VgaText::clearScreen()>
c000d49f:	83 c4 10             	add    esp,0x10
c000d4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b1:	05 9e 10 00 00       	add    eax,0x109e
c000d4b6:	83 ec 04             	sub    esp,0x4
c000d4b9:	68 96 00 00 00       	push   0x96
c000d4be:	6a 00                	push   0x0
c000d4c0:	50                   	push   eax
c000d4c1:	e8 42 31 ff ff       	call   c0000608 <memset>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4cd:	05 34 11 00 00       	add    eax,0x1134
c000d4d2:	83 ec 04             	sub    esp,0x4
c000d4d5:	68 2c 01 00 00       	push   0x12c
c000d4da:	6a 00                	push   0x0
c000d4dc:	50                   	push   eax
c000d4dd:	e8 26 31 ff ff       	call   c0000608 <memset>
c000d4e2:	83 c4 10             	add    esp,0x10
c000d4e5:	90                   	nop
c000d4e6:	5b                   	pop    ebx
c000d4e7:	5e                   	pop    esi
c000d4e8:	5f                   	pop    edi
c000d4e9:	c3                   	ret    

c000d4ea <VgaText::receiveKey(unsigned char)>:
c000d4ea:	55                   	push   ebp
c000d4eb:	57                   	push   edi
c000d4ec:	56                   	push   esi
c000d4ed:	53                   	push   ebx
c000d4ee:	83 ec 1c             	sub    esp,0x1c
c000d4f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d4f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d4f9:	84 db                	test   bl,bl
c000d4fb:	0f 84 c9 00 00 00    	je     c000d5ca <VgaText::receiveKey(unsigned char)+0xe0>
c000d501:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d507:	80 fb 08             	cmp    bl,0x8
c000d50a:	75 2c                	jne    c000d538 <VgaText::receiveKey(unsigned char)+0x4e>
c000d50c:	83 ec 0c             	sub    esp,0xc
c000d50f:	57                   	push   edi
c000d510:	e8 10 31 ff ff       	call   c0000625 <strlen>
c000d515:	83 c4 10             	add    esp,0x10
c000d518:	85 c0                	test   eax,eax
c000d51a:	74 41                	je     c000d55d <VgaText::receiveKey(unsigned char)+0x73>
c000d51c:	50                   	push   eax
c000d51d:	50                   	push   eax
c000d51e:	6a 08                	push   0x8
c000d520:	56                   	push   esi
c000d521:	e8 ac fc ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d526:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d529:	e8 f7 30 ff ff       	call   c0000625 <strlen>
c000d52e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d536:	eb 22                	jmp    c000d55a <VgaText::receiveKey(unsigned char)+0x70>
c000d538:	0f be c3             	movsx  eax,bl
c000d53b:	52                   	push   edx
c000d53c:	52                   	push   edx
c000d53d:	50                   	push   eax
c000d53e:	56                   	push   esi
c000d53f:	e8 8e fc ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d544:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d548:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d54d:	59                   	pop    ecx
c000d54e:	5d                   	pop    ebp
c000d54f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d553:	50                   	push   eax
c000d554:	57                   	push   edi
c000d555:	e8 04 32 ff ff       	call   c000075e <strcat>
c000d55a:	83 c4 10             	add    esp,0x10
c000d55d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d564:	75 05                	jne    c000d56b <VgaText::receiveKey(unsigned char)+0x81>
c000d566:	80 fb 0a             	cmp    bl,0xa
c000d569:	75 53                	jne    c000d5be <VgaText::receiveKey(unsigned char)+0xd4>
c000d56b:	83 ec 0c             	sub    esp,0xc
c000d56e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d574:	53                   	push   ebx
c000d575:	e8 ab 30 ff ff       	call   c0000625 <strlen>
c000d57a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d57d:	89 c5                	mov    ebp,eax
c000d57f:	e8 a1 30 ff ff       	call   c0000625 <strlen>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d58b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d590:	76 10                	jbe    c000d5a2 <VgaText::receiveKey(unsigned char)+0xb8>
c000d592:	83 ec 0c             	sub    esp,0xc
c000d595:	68 27 05 02 c0       	push   0xc0020527
c000d59a:	e8 e1 76 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000d59f:	83 c4 10             	add    esp,0x10
c000d5a2:	50                   	push   eax
c000d5a3:	50                   	push   eax
c000d5a4:	57                   	push   edi
c000d5a5:	53                   	push   ebx
c000d5a6:	e8 b3 31 ff ff       	call   c000075e <strcat>
c000d5ab:	83 c4 0c             	add    esp,0xc
c000d5ae:	68 96 00 00 00       	push   0x96
c000d5b3:	6a 00                	push   0x0
c000d5b5:	57                   	push   edi
c000d5b6:	e8 4d 30 ff ff       	call   c0000608 <memset>
c000d5bb:	83 c4 10             	add    esp,0x10
c000d5be:	83 ec 0c             	sub    esp,0xc
c000d5c1:	56                   	push   esi
c000d5c2:	e8 d5 f9 ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d5c7:	83 c4 10             	add    esp,0x10
c000d5ca:	83 c4 1c             	add    esp,0x1c
c000d5cd:	5b                   	pop    ebx
c000d5ce:	5e                   	pop    esi
c000d5cf:	5f                   	pop    edi
c000d5d0:	5d                   	pop    ebp
c000d5d1:	c3                   	ret    

c000d5d2 <VgaText::write(unsigned long long, void*, int*)>:
c000d5d2:	55                   	push   ebp
c000d5d3:	57                   	push   edi
c000d5d4:	56                   	push   esi
c000d5d5:	53                   	push   ebx
c000d5d6:	83 ec 0c             	sub    esp,0xc
c000d5d9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d5dd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d5e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d5e5:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d5ec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d5ef:	39 eb                	cmp    ebx,ebp
c000d5f1:	74 13                	je     c000d606 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d5f3:	43                   	inc    ebx
c000d5f4:	50                   	push   eax
c000d5f5:	50                   	push   eax
c000d5f6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d5fa:	50                   	push   eax
c000d5fb:	56                   	push   esi
c000d5fc:	e8 d1 fb ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	eb e9                	jmp    c000d5ef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d606:	83 ec 0c             	sub    esp,0xc
c000d609:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d610:	56                   	push   esi
c000d611:	e8 86 f9 ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d616:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d61a:	89 38                	mov    DWORD PTR [eax],edi
c000d61c:	83 c4 1c             	add    esp,0x1c
c000d61f:	31 c0                	xor    eax,eax
c000d621:	5b                   	pop    ebx
c000d622:	5e                   	pop    esi
c000d623:	5f                   	pop    edi
c000d624:	5d                   	pop    ebp
c000d625:	c3                   	ret    

c000d626 <newTerminal(char*)>:
c000d626:	83 ec 28             	sub    esp,0x28
c000d629:	68 60 12 00 00       	push   0x1260
c000d62e:	e8 c9 18 00 00       	call   c000eefc <operator new(unsigned long)>
c000d633:	5a                   	pop    edx
c000d634:	59                   	pop    ecx
c000d635:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d639:	50                   	push   eax
c000d63a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d63e:	e8 15 fd ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c000d643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d647:	83 c4 2c             	add    esp,0x2c
c000d64a:	c3                   	ret    
c000d64b:	90                   	nop

c000d64c <TSS::TSS()>:
c000d64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d650:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d657:	90                   	nop
c000d658:	c3                   	ret    
c000d659:	90                   	nop

c000d65a <TSS::setESP(unsigned long)>:
c000d65a:	55                   	push   ebp
c000d65b:	89 e5                	mov    ebp,esp
c000d65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d663:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d666:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d669:	90                   	nop
c000d66a:	5d                   	pop    ebp
c000d66b:	c3                   	ret    

c000d66c <TSS::flush()>:
c000d66c:	55                   	push   ebp
c000d66d:	89 e5                	mov    ebp,esp
c000d66f:	83 ec 10             	sub    esp,0x10
c000d672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d675:	8b 00                	mov    eax,DWORD PTR [eax]
c000d677:	83 c8 03             	or     eax,0x3
c000d67a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d67e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d682:	66 89 d0             	mov    ax,dx
c000d685:	0f 00 d8             	ltr    ax
c000d688:	90                   	nop
c000d689:	c9                   	leave  
c000d68a:	c3                   	ret    
c000d68b:	90                   	nop

c000d68c <TSS::setup(unsigned long, unsigned long)>:
c000d68c:	55                   	push   ebp
c000d68d:	89 e5                	mov    ebp,esp
c000d68f:	53                   	push   ebx
c000d690:	83 ec 14             	sub    esp,0x14
c000d693:	83 ec 0c             	sub    esp,0xc
c000d696:	6a 68                	push   0x68
c000d698:	e8 81 e5 ff ff       	call   c000bc1e <malloc>
c000d69d:	83 c4 10             	add    esp,0x10
c000d6a0:	89 c2                	mov    edx,eax
c000d6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6ae:	83 ec 04             	sub    esp,0x4
c000d6b1:	6a 68                	push   0x68
c000d6b3:	6a 00                	push   0x0
c000d6b5:	50                   	push   eax
c000d6b6:	e8 4d 2f ff ff       	call   c0000608 <memset>
c000d6bb:	83 c4 10             	add    esp,0x10
c000d6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6c4:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d6ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6d0:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d6df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e8:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6f4:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d6fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d700:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d709:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d70c:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d715:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d718:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d71b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d71e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d724:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d727:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d72a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d72d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d730:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73a:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d73d:	e8 e3 12 01 00       	call   c001ea25 <CPU::readCR3()>
c000d742:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d74b:	83 ec 08             	sub    esp,0x8
c000d74e:	50                   	push   eax
c000d74f:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d752:	50                   	push   eax
c000d753:	e8 9c dc ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	83 ec 08             	sub    esp,0x8
c000d75e:	6a 68                	push   0x68
c000d760:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d763:	50                   	push   eax
c000d764:	e8 a7 dc ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d770:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d773:	83 e0 0f             	and    eax,0xf
c000d776:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d779:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d77c:	83 c8 40             	or     eax,0x40
c000d77f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d782:	e8 f3 67 00 00       	call   c0013f7a <thisCPU()>
c000d787:	05 78 01 00 00       	add    eax,0x178
c000d78c:	83 ec 04             	sub    esp,0x4
c000d78f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d792:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d795:	50                   	push   eax
c000d796:	e8 a9 dc ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000d79b:	83 c4 10             	add    esp,0x10
c000d79e:	89 c2                	mov    edx,eax
c000d7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a3:	89 10                	mov    DWORD PTR [eax],edx
c000d7a5:	e8 d0 67 00 00       	call   c0013f7a <thisCPU()>
c000d7aa:	05 78 01 00 00       	add    eax,0x178
c000d7af:	83 ec 0c             	sub    esp,0xc
c000d7b2:	50                   	push   eax
c000d7b3:	e8 d0 dc ff ff       	call   c000b488 <GDT::flush()>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7be:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7c0:	83 ec 08             	sub    esp,0x8
c000d7c3:	50                   	push   eax
c000d7c4:	68 90 05 02 c0       	push   0xc0020590
c000d7c9:	e8 1d 18 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000d7ce:	83 c4 10             	add    esp,0x10
c000d7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d7d9:	c9                   	leave  
c000d7da:	c3                   	ret    
c000d7db:	90                   	nop

c000d7dc <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d7dc:	55                   	push   ebp
c000d7dd:	57                   	push   edi
c000d7de:	56                   	push   esi
c000d7df:	53                   	push   ebx
c000d7e0:	83 ec 0c             	sub    esp,0xc
c000d7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d7eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7ee:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d7f2:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d7f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d7fa:	3d 03 ff ff 3f       	cmp    eax,0x3fffff03
c000d7ff:	75 08                	jne    c000d809 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000d801:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d807:	eb 5e                	jmp    c000d867 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000d809:	3d 01 ff ff 3f       	cmp    eax,0x3fffff01
c000d80e:	75 3d                	jne    c000d84d <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000d810:	83 ec 0c             	sub    esp,0xc
c000d813:	68 ae 05 02 c0       	push   0xc00205ae
c000d818:	e8 ce 17 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000d81d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d822:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d825:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d82b:	8b 10                	mov    edx,DWORD PTR [eax]
c000d82d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d831:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d835:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d839:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d83d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d841:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d844:	83 c4 1c             	add    esp,0x1c
c000d847:	5b                   	pop    ebx
c000d848:	5e                   	pop    esi
c000d849:	5f                   	pop    edi
c000d84a:	5d                   	pop    ebp
c000d84b:	ff e0                	jmp    eax
c000d84d:	89 c2                	mov    edx,eax
c000d84f:	83 e2 fd             	and    edx,0xfffffffd
c000d852:	81 fa 00 ff ff 3f    	cmp    edx,0x3fffff00
c000d858:	74 a7                	je     c000d801 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d85a:	2d 10 ff ff 3f       	sub    eax,0x3fffff10
c000d85f:	83 e0 ef             	and    eax,0xffffffef
c000d862:	83 f8 08             	cmp    eax,0x8
c000d865:	76 9a                	jbe    c000d801 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d867:	83 c4 0c             	add    esp,0xc
c000d86a:	31 c0                	xor    eax,eax
c000d86c:	5b                   	pop    ebx
c000d86d:	5e                   	pop    esi
c000d86e:	5f                   	pop    edi
c000d86f:	5d                   	pop    ebp
c000d870:	c3                   	ret    
c000d871:	90                   	nop

c000d872 <ReservedFilename::isAtty()>:
c000d872:	83 ec 18             	sub    esp,0x18
c000d875:	68 bb 05 02 c0       	push   0xc00205bb
c000d87a:	e8 6c 17 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000d87f:	83 c4 10             	add    esp,0x10
c000d882:	31 c0                	xor    eax,eax
c000d884:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d888:	81 7a 04 01 ff ff 3f 	cmp    DWORD PTR [edx+0x4],0x3fffff01
c000d88f:	75 12                	jne    c000d8a3 <ReservedFilename::isAtty()+0x31>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	68 d1 05 02 c0       	push   0xc00205d1
c000d899:	e8 4d 17 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000d89e:	83 c4 10             	add    esp,0x10
c000d8a1:	b0 01                	mov    al,0x1
c000d8a3:	83 c4 0c             	add    esp,0xc
c000d8a6:	c3                   	ret    
c000d8a7:	90                   	nop

c000d8a8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d8a8:	55                   	push   ebp
c000d8a9:	57                   	push   edi
c000d8aa:	56                   	push   esi
c000d8ab:	53                   	push   ebx
c000d8ac:	83 ec 0c             	sub    esp,0xc
c000d8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d8b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d8be:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d8c2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8c6:	3d 03 ff ff 3f       	cmp    eax,0x3fffff03
c000d8cb:	75 08                	jne    c000d8d5 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000d8cd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d8d3:	eb 63                	jmp    c000d938 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d8d5:	3d 01 ff ff 3f       	cmp    eax,0x3fffff01
c000d8da:	75 3d                	jne    c000d919 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000d8dc:	83 ec 0c             	sub    esp,0xc
c000d8df:	68 e4 05 02 c0       	push   0xc00205e4
c000d8e4:	e8 02 17 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000d8e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d8f1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d8f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8f9:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d8fd:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d901:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d905:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d909:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d90d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d910:	83 c4 1c             	add    esp,0x1c
c000d913:	5b                   	pop    ebx
c000d914:	5e                   	pop    esi
c000d915:	5f                   	pop    edi
c000d916:	5d                   	pop    ebp
c000d917:	ff e0                	jmp    eax
c000d919:	3d 00 ff ff 3f       	cmp    eax,0x3fffff00
c000d91e:	75 04                	jne    c000d924 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000d920:	89 33                	mov    DWORD PTR [ebx],esi
c000d922:	eb 14                	jmp    c000d938 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d924:	3d 02 ff ff 3f       	cmp    eax,0x3fffff02
c000d929:	74 a2                	je     c000d8cd <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d92b:	2d 10 ff ff 3f       	sub    eax,0x3fffff10
c000d930:	83 e0 ef             	and    eax,0xffffffef
c000d933:	83 f8 08             	cmp    eax,0x8
c000d936:	76 95                	jbe    c000d8cd <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d938:	83 c4 0c             	add    esp,0xc
c000d93b:	31 c0                	xor    eax,eax
c000d93d:	5b                   	pop    ebx
c000d93e:	5e                   	pop    esi
c000d93f:	5f                   	pop    edi
c000d940:	5d                   	pop    ebp
c000d941:	c3                   	ret    

c000d942 <UnixFile::getFileDescriptor()>:
c000d942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d949:	c3                   	ret    

c000d94a <UnixFile::UnixFile(int)>:
c000d94a:	53                   	push   ebx
c000d94b:	83 ec 18             	sub    esp,0x18
c000d94e:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000d953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d957:	89 10                	mov    DWORD PTR [eax],edx
c000d959:	81 7c 24 24 ff fe ff 3f 	cmp    DWORD PTR [esp+0x24],0x3ffffeff
c000d961:	0f 8f 4d 01 00 00    	jg     c000dab4 <UnixFile::UnixFile(int)+0x16a>
c000d967:	a1 c0 2b 02 c0       	mov    eax,ds:0xc0022bc0
c000d96c:	8d 50 01             	lea    edx,[eax+0x1]
c000d96f:	89 15 c0 2b 02 c0    	mov    DWORD PTR ds:0xc0022bc0,edx
c000d975:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d979:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d97c:	83 ec 08             	sub    esp,0x8
c000d97f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d983:	68 78 38 02 c0       	push   0xc0023878
c000d988:	e8 0d 11 01 00       	call   c001ea9a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d98d:	83 c4 10             	add    esp,0x10
c000d990:	a0 74 38 02 c0       	mov    al,ds:0xc0023874
c000d995:	83 f0 01             	xor    eax,0x1
c000d998:	84 c0                	test   al,al
c000d99a:	0f 84 15 01 00 00    	je     c000dab5 <UnixFile::UnixFile(int)+0x16b>
c000d9a0:	c6 05 74 38 02 c0 01 	mov    BYTE PTR ds:0xc0023874,0x1
c000d9a7:	83 ec 0c             	sub    esp,0xc
c000d9aa:	6a 0c                	push   0xc
c000d9ac:	e8 4b 15 00 00       	call   c000eefc <operator new(unsigned long)>
c000d9b1:	83 c4 10             	add    esp,0x10
c000d9b4:	89 c3                	mov    ebx,eax
c000d9b6:	83 ec 08             	sub    esp,0x8
c000d9b9:	68 03 ff ff 3f       	push   0x3fffff03
c000d9be:	53                   	push   ebx
c000d9bf:	e8 f6 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000d9c4:	83 c4 10             	add    esp,0x10
c000d9c7:	89 1d 6c 38 02 c0    	mov    DWORD PTR ds:0xc002386c,ebx
c000d9cd:	83 ec 0c             	sub    esp,0xc
c000d9d0:	6a 0c                	push   0xc
c000d9d2:	e8 25 15 00 00       	call   c000eefc <operator new(unsigned long)>
c000d9d7:	83 c4 10             	add    esp,0x10
c000d9da:	89 c3                	mov    ebx,eax
c000d9dc:	83 ec 08             	sub    esp,0x8
c000d9df:	68 01 ff ff 3f       	push   0x3fffff01
c000d9e4:	53                   	push   ebx
c000d9e5:	e8 d0 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000d9ea:	83 c4 10             	add    esp,0x10
c000d9ed:	89 1d 70 38 02 c0    	mov    DWORD PTR ds:0xc0023870,ebx
c000d9f3:	83 ec 0c             	sub    esp,0xc
c000d9f6:	6a 0c                	push   0xc
c000d9f8:	e8 ff 14 00 00       	call   c000eefc <operator new(unsigned long)>
c000d9fd:	83 c4 10             	add    esp,0x10
c000da00:	89 c3                	mov    ebx,eax
c000da02:	83 ec 08             	sub    esp,0x8
c000da05:	68 00 ff ff 3f       	push   0x3fffff00
c000da0a:	53                   	push   ebx
c000da0b:	e8 aa 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000da10:	83 c4 10             	add    esp,0x10
c000da13:	89 1d 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,ebx
c000da19:	83 ec 0c             	sub    esp,0xc
c000da1c:	6a 0c                	push   0xc
c000da1e:	e8 d9 14 00 00       	call   c000eefc <operator new(unsigned long)>
c000da23:	83 c4 10             	add    esp,0x10
c000da26:	89 c3                	mov    ebx,eax
c000da28:	83 ec 08             	sub    esp,0x8
c000da2b:	68 02 ff ff 3f       	push   0x3fffff02
c000da30:	53                   	push   ebx
c000da31:	e8 84 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000da36:	83 c4 10             	add    esp,0x10
c000da39:	89 1d 68 38 02 c0    	mov    DWORD PTR ds:0xc0023868,ebx
c000da3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da47:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000da4c:	7f 67                	jg     c000dab5 <UnixFile::UnixFile(int)+0x16b>
c000da4e:	83 ec 0c             	sub    esp,0xc
c000da51:	6a 0c                	push   0xc
c000da53:	e8 a4 14 00 00       	call   c000eefc <operator new(unsigned long)>
c000da58:	83 c4 10             	add    esp,0x10
c000da5b:	89 c3                	mov    ebx,eax
c000da5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da61:	05 10 ff ff 3f       	add    eax,0x3fffff10
c000da66:	83 ec 08             	sub    esp,0x8
c000da69:	50                   	push   eax
c000da6a:	53                   	push   ebx
c000da6b:	e8 4a 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da77:	89 1c 85 40 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7c0],ebx
c000da7e:	83 ec 0c             	sub    esp,0xc
c000da81:	6a 0c                	push   0xc
c000da83:	e8 74 14 00 00       	call   c000eefc <operator new(unsigned long)>
c000da88:	83 c4 10             	add    esp,0x10
c000da8b:	89 c3                	mov    ebx,eax
c000da8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da91:	05 20 ff ff 3f       	add    eax,0x3fffff20
c000da96:	83 ec 08             	sub    esp,0x8
c000da99:	50                   	push   eax
c000da9a:	53                   	push   ebx
c000da9b:	e8 1a 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000daa0:	83 c4 10             	add    esp,0x10
c000daa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daa7:	89 1c 85 00 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc800],ebx
c000daae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dab2:	eb 93                	jmp    c000da47 <UnixFile::UnixFile(int)+0xfd>
c000dab4:	90                   	nop
c000dab5:	83 c4 18             	add    esp,0x18
c000dab8:	5b                   	pop    ebx
c000dab9:	c3                   	ret    

c000daba <ReservedFilename::ReservedFilename(int)>:
c000daba:	83 ec 0c             	sub    esp,0xc
c000dabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac1:	83 ec 08             	sub    esp,0x8
c000dac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac8:	50                   	push   eax
c000dac9:	e8 7c fe ff ff       	call   c000d94a <UnixFile::UnixFile(int)>
c000dace:	83 c4 10             	add    esp,0x10
c000dad1:	ba 1c 07 02 c0       	mov    edx,0xc002071c
c000dad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dada:	89 10                	mov    DWORD PTR [eax],edx
c000dadc:	90                   	nop
c000dadd:	83 c4 0c             	add    esp,0xc
c000dae0:	c3                   	ret    
c000dae1:	90                   	nop

c000dae2 <UnixFile::~UnixFile()>:
c000dae2:	83 ec 1c             	sub    esp,0x1c
c000dae5:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000daea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daee:	89 10                	mov    DWORD PTR [eax],edx
c000daf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daf7:	3d ff fe ff 3f       	cmp    eax,0x3ffffeff
c000dafc:	7f 73                	jg     c000db71 <UnixFile::~UnixFile()+0x8f>
c000dafe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db06:	83 ec 0c             	sub    esp,0xc
c000db09:	68 78 38 02 c0       	push   0xc0023878
c000db0e:	e8 5b 10 01 00       	call   c001eb6e <LinkedList<UnixFile>::getFirstElement()>
c000db13:	83 c4 10             	add    esp,0x10
c000db16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db1a:	83 ec 0c             	sub    esp,0xc
c000db1d:	68 78 38 02 c0       	push   0xc0023878
c000db22:	e8 4f 10 01 00       	call   c001eb76 <LinkedList<UnixFile>::removeFirst()>
c000db27:	83 c4 10             	add    esp,0x10
c000db2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db2e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000db32:	74 40                	je     c000db74 <UnixFile::~UnixFile()+0x92>
c000db34:	83 ec 08             	sub    esp,0x8
c000db37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db3b:	68 78 38 02 c0       	push   0xc0023878
c000db40:	e8 55 0f 01 00       	call   c001ea9a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000db45:	83 c4 10             	add    esp,0x10
c000db48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db4c:	8d 50 01             	lea    edx,[eax+0x1]
c000db4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db53:	3d 88 13 00 00       	cmp    eax,0x1388
c000db58:	0f 94 c0             	sete   al
c000db5b:	84 c0                	test   al,al
c000db5d:	74 a7                	je     c000db06 <UnixFile::~UnixFile()+0x24>
c000db5f:	83 ec 0c             	sub    esp,0xc
c000db62:	68 d8 06 02 c0       	push   0xc00206d8
c000db67:	e8 14 71 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000db6c:	83 c4 10             	add    esp,0x10
c000db6f:	eb 95                	jmp    c000db06 <UnixFile::~UnixFile()+0x24>
c000db71:	90                   	nop
c000db72:	eb 01                	jmp    c000db75 <UnixFile::~UnixFile()+0x93>
c000db74:	90                   	nop
c000db75:	90                   	nop
c000db76:	83 c4 1c             	add    esp,0x1c
c000db79:	c3                   	ret    

c000db7a <UnixFile::~UnixFile()>:
c000db7a:	83 ec 0c             	sub    esp,0xc
c000db7d:	83 ec 0c             	sub    esp,0xc
c000db80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db84:	e8 59 ff ff ff       	call   c000dae2 <UnixFile::~UnixFile()>
c000db89:	83 c4 10             	add    esp,0x10
c000db8c:	83 ec 08             	sub    esp,0x8
c000db8f:	6a 0c                	push   0xc
c000db91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db95:	e8 71 13 00 00       	call   c000ef0b <operator delete(void*, unsigned long)>
c000db9a:	83 c4 10             	add    esp,0x10
c000db9d:	83 c4 0c             	add    esp,0xc
c000dba0:	c3                   	ret    
c000dba1:	90                   	nop

c000dba2 <ReservedFilename::~ReservedFilename()>:
c000dba2:	83 ec 0c             	sub    esp,0xc
c000dba5:	ba 1c 07 02 c0       	mov    edx,0xc002071c
c000dbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbae:	89 10                	mov    DWORD PTR [eax],edx
c000dbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb4:	83 ec 0c             	sub    esp,0xc
c000dbb7:	50                   	push   eax
c000dbb8:	e8 25 ff ff ff       	call   c000dae2 <UnixFile::~UnixFile()>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	90                   	nop
c000dbc1:	83 c4 0c             	add    esp,0xc
c000dbc4:	c3                   	ret    
c000dbc5:	90                   	nop

c000dbc6 <ReservedFilename::~ReservedFilename()>:
c000dbc6:	83 ec 0c             	sub    esp,0xc
c000dbc9:	83 ec 0c             	sub    esp,0xc
c000dbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd0:	e8 cd ff ff ff       	call   c000dba2 <ReservedFilename::~ReservedFilename()>
c000dbd5:	83 c4 10             	add    esp,0x10
c000dbd8:	83 ec 08             	sub    esp,0x8
c000dbdb:	6a 0c                	push   0xc
c000dbdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe1:	e8 25 13 00 00       	call   c000ef0b <operator delete(void*, unsigned long)>
c000dbe6:	83 c4 10             	add    esp,0x10
c000dbe9:	83 c4 0c             	add    esp,0xc
c000dbec:	c3                   	ret    

c000dbed <getFromFileDescriptor(int)>:
c000dbed:	53                   	push   ebx
c000dbee:	83 ec 08             	sub    esp,0x8
c000dbf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbf5:	81 fb ff fe ff 3f    	cmp    ebx,0x3ffffeff
c000dbfb:	7f 33                	jg     c000dc30 <getFromFileDescriptor(int)+0x43>
c000dbfd:	83 ec 0c             	sub    esp,0xc
c000dc00:	68 78 38 02 c0       	push   0xc0023878
c000dc05:	e8 64 0f 01 00       	call   c001eb6e <LinkedList<UnixFile>::getFirstElement()>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	85 c0                	test   eax,eax
c000dc0f:	75 07                	jne    c000dc18 <getFromFileDescriptor(int)+0x2b>
c000dc11:	31 c0                	xor    eax,eax
c000dc13:	e9 98 00 00 00       	jmp    c000dcb0 <getFromFileDescriptor(int)+0xc3>
c000dc18:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dc1b:	0f 84 8f 00 00 00    	je     c000dcb0 <getFromFileDescriptor(int)+0xc3>
c000dc21:	52                   	push   edx
c000dc22:	52                   	push   edx
c000dc23:	50                   	push   eax
c000dc24:	68 78 38 02 c0       	push   0xc0023878
c000dc29:	e8 ea 0f 01 00       	call   c001ec18 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dc2e:	eb da                	jmp    c000dc0a <getFromFileDescriptor(int)+0x1d>
c000dc30:	83 ec 0c             	sub    esp,0xc
c000dc33:	68 f1 05 02 c0       	push   0xc00205f1
c000dc38:	e8 ae 13 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	a1 6c 38 02 c0       	mov    eax,ds:0xc002386c
c000dc45:	81 fb 03 ff ff 3f    	cmp    ebx,0x3fffff03
c000dc4b:	74 63                	je     c000dcb0 <getFromFileDescriptor(int)+0xc3>
c000dc4d:	81 fb 01 ff ff 3f    	cmp    ebx,0x3fffff01
c000dc53:	75 17                	jne    c000dc6c <getFromFileDescriptor(int)+0x7f>
c000dc55:	83 ec 0c             	sub    esp,0xc
c000dc58:	68 18 06 02 c0       	push   0xc0020618
c000dc5d:	e8 89 13 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000dc62:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000dc67:	83 c4 10             	add    esp,0x10
c000dc6a:	eb 44                	jmp    c000dcb0 <getFromFileDescriptor(int)+0xc3>
c000dc6c:	a1 68 38 02 c0       	mov    eax,ds:0xc0023868
c000dc71:	81 fb 02 ff ff 3f    	cmp    ebx,0x3fffff02
c000dc77:	74 37                	je     c000dcb0 <getFromFileDescriptor(int)+0xc3>
c000dc79:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c000dc7e:	81 fb 00 ff ff 3f    	cmp    ebx,0x3fffff00
c000dc84:	74 2a                	je     c000dcb0 <getFromFileDescriptor(int)+0xc3>
c000dc86:	8d 83 f0 00 00 c0    	lea    eax,[ebx-0x3fffff10]
c000dc8c:	83 f8 08             	cmp    eax,0x8
c000dc8f:	77 09                	ja     c000dc9a <getFromFileDescriptor(int)+0xad>
c000dc91:	8b 04 85 40 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7c0]
c000dc98:	eb 16                	jmp    c000dcb0 <getFromFileDescriptor(int)+0xc3>
c000dc9a:	81 eb 20 ff ff 3f    	sub    ebx,0x3fffff20
c000dca0:	83 fb 08             	cmp    ebx,0x8
c000dca3:	0f 87 68 ff ff ff    	ja     c000dc11 <getFromFileDescriptor(int)+0x24>
c000dca9:	8b 04 9d 00 38 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc800]
c000dcb0:	83 c4 08             	add    esp,0x8
c000dcb3:	5b                   	pop    ebx
c000dcb4:	c3                   	ret    

c000dcb5 <__static_initialization_and_destruction_0(int, int)>:
c000dcb5:	83 ec 0c             	sub    esp,0xc
c000dcb8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dcbd:	75 34                	jne    c000dcf3 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dcbf:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dcc7:	75 2a                	jne    c000dcf3 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dcc9:	83 ec 0c             	sub    esp,0xc
c000dccc:	68 78 38 02 c0       	push   0xc0023878
c000dcd1:	e8 6c 0d 01 00       	call   c001ea42 <LinkedList<UnixFile>::LinkedList()>
c000dcd6:	83 c4 10             	add    esp,0x10
c000dcd9:	83 ec 04             	sub    esp,0x4
c000dcdc:	68 50 2b 02 c0       	push   0xc0022b50
c000dce1:	68 78 38 02 c0       	push   0xc0023878
c000dce6:	68 40 ea 01 c0       	push   0xc001ea40
c000dceb:	e8 97 11 00 00       	call   c000ee87 <__cxa_atexit>
c000dcf0:	83 c4 10             	add    esp,0x10
c000dcf3:	90                   	nop
c000dcf4:	83 c4 0c             	add    esp,0xc
c000dcf7:	c3                   	ret    

c000dcf8 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000dcf8:	83 ec 0c             	sub    esp,0xc
c000dcfb:	83 ec 08             	sub    esp,0x8
c000dcfe:	68 ff ff 00 00       	push   0xffff
c000dd03:	6a 01                	push   0x1
c000dd05:	e8 ab ff ff ff       	call   c000dcb5 <__static_initialization_and_destruction_0(int, int)>
c000dd0a:	83 c4 10             	add    esp,0x10
c000dd0d:	83 c4 0c             	add    esp,0xc
c000dd10:	c3                   	ret    
c000dd11:	90                   	nop

c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000dd12:	53                   	push   ebx
c000dd13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dd1b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000dd21:	89 c8                	mov    eax,ecx
c000dd23:	d1 e8                	shr    eax,1
c000dd25:	03 05 c8 2b 02 c0    	add    eax,DWORD PTR ds:0xc0022bc8
c000dd2b:	83 e1 01             	and    ecx,0x1
c000dd2e:	8a 10                	mov    dl,BYTE PTR [eax]
c000dd30:	75 09                	jne    c000dd3b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000dd32:	83 e2 f0             	and    edx,0xfffffff0
c000dd35:	09 da                	or     edx,ebx
c000dd37:	88 10                	mov    BYTE PTR [eax],dl
c000dd39:	5b                   	pop    ebx
c000dd3a:	c3                   	ret    
c000dd3b:	c1 e3 04             	shl    ebx,0x4
c000dd3e:	83 e2 0f             	and    edx,0xf
c000dd41:	09 da                	or     edx,ebx
c000dd43:	88 10                	mov    BYTE PTR [eax],dl
c000dd45:	5b                   	pop    ebx
c000dd46:	c3                   	ret    

c000dd47 <Virt::getPageState(unsigned long)>:
c000dd47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd4b:	8b 0d c8 2b 02 c0    	mov    ecx,DWORD PTR ds:0xc0022bc8
c000dd51:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000dd57:	89 d0                	mov    eax,edx
c000dd59:	d1 e8                	shr    eax,1
c000dd5b:	83 e2 01             	and    edx,0x1
c000dd5e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000dd61:	75 04                	jne    c000dd67 <Virt::getPageState(unsigned long)+0x20>
c000dd63:	83 e0 0f             	and    eax,0xf
c000dd66:	c3                   	ret    
c000dd67:	c0 e8 04             	shr    al,0x4
c000dd6a:	c3                   	ret    

c000dd6b <Virt::allocateKernelVirtualPages(int)>:
c000dd6b:	55                   	push   ebp
c000dd6c:	31 ed                	xor    ebp,ebp
c000dd6e:	57                   	push   edi
c000dd6f:	56                   	push   esi
c000dd70:	53                   	push   ebx
c000dd71:	31 db                	xor    ebx,ebx
c000dd73:	83 ec 1c             	sub    esp,0x1c
c000dd76:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd7a:	8b 3d c4 2b 02 c0    	mov    edi,DWORD PTR ds:0xc0022bc4
c000dd80:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000dd85:	57                   	push   edi
c000dd86:	e8 bc ff ff ff       	call   c000dd47 <Virt::getPageState(unsigned long)>
c000dd8b:	5a                   	pop    edx
c000dd8c:	84 c0                	test   al,al
c000dd8e:	75 3a                	jne    c000ddca <Virt::allocateKernelVirtualPages(int)+0x5f>
c000dd90:	85 db                	test   ebx,ebx
c000dd92:	75 02                	jne    c000dd96 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000dd94:	89 fd                	mov    ebp,edi
c000dd96:	43                   	inc    ebx
c000dd97:	39 f3                	cmp    ebx,esi
c000dd99:	74 5a                	je     c000ddf5 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000dd9b:	47                   	inc    edi
c000dd9c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dda2:	76 31                	jbe    c000ddd5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000dda4:	c7 05 c4 2b 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022bc4,0xc8000
c000ddae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ddb3:	75 28                	jne    c000dddd <Virt::allocateKernelVirtualPages(int)+0x72>
c000ddb5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ddba:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ddbf:	57                   	push   edi
c000ddc0:	e8 82 ff ff ff       	call   c000dd47 <Virt::getPageState(unsigned long)>
c000ddc5:	5a                   	pop    edx
c000ddc6:	84 c0                	test   al,al
c000ddc8:	74 c6                	je     c000dd90 <Virt::allocateKernelVirtualPages(int)+0x25>
c000ddca:	31 db                	xor    ebx,ebx
c000ddcc:	47                   	inc    edi
c000ddcd:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ddd3:	77 cf                	ja     c000dda4 <Virt::allocateKernelVirtualPages(int)+0x39>
c000ddd5:	89 3d c4 2b 02 c0    	mov    DWORD PTR ds:0xc0022bc4,edi
c000dddb:	eb a8                	jmp    c000dd85 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dddd:	83 ec 0c             	sub    esp,0xc
c000dde0:	68 30 07 02 c0       	push   0xc0020730
c000dde5:	e8 96 6e 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000ddea:	8b 3d c4 2b 02 c0    	mov    edi,DWORD PTR ds:0xc0022bc4
c000ddf0:	83 c4 10             	add    esp,0x10
c000ddf3:	eb 90                	jmp    c000dd85 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ddf5:	89 2d c4 2b 02 c0    	mov    DWORD PTR ds:0xc0022bc4,ebp
c000ddfb:	4b                   	dec    ebx
c000ddfc:	74 5f                	je     c000de5d <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ddfe:	85 f6                	test   esi,esi
c000de00:	74 3d                	je     c000de3f <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de02:	89 e8                	mov    eax,ebp
c000de04:	31 db                	xor    ebx,ebx
c000de06:	8d 7e ff             	lea    edi,[esi-0x1]
c000de09:	eb 14                	jmp    c000de1f <Virt::allocateKernelVirtualPages(int)+0xb4>
c000de0b:	6a 01                	push   0x1
c000de0d:	43                   	inc    ebx
c000de0e:	50                   	push   eax
c000de0f:	e8 fe fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de14:	58                   	pop    eax
c000de15:	39 f3                	cmp    ebx,esi
c000de17:	5a                   	pop    edx
c000de18:	74 25                	je     c000de3f <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de1a:	a1 c4 2b 02 c0       	mov    eax,ds:0xc0022bc4
c000de1f:	8d 50 01             	lea    edx,[eax+0x1]
c000de22:	85 db                	test   ebx,ebx
c000de24:	89 15 c4 2b 02 c0    	mov    DWORD PTR ds:0xc0022bc4,edx
c000de2a:	74 20                	je     c000de4c <Virt::allocateKernelVirtualPages(int)+0xe1>
c000de2c:	39 df                	cmp    edi,ebx
c000de2e:	75 db                	jne    c000de0b <Virt::allocateKernelVirtualPages(int)+0xa0>
c000de30:	6a 03                	push   0x3
c000de32:	43                   	inc    ebx
c000de33:	50                   	push   eax
c000de34:	e8 d9 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de39:	59                   	pop    ecx
c000de3a:	39 f3                	cmp    ebx,esi
c000de3c:	58                   	pop    eax
c000de3d:	75 db                	jne    c000de1a <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de3f:	83 c4 1c             	add    esp,0x1c
c000de42:	89 e8                	mov    eax,ebp
c000de44:	5b                   	pop    ebx
c000de45:	c1 e0 0c             	shl    eax,0xc
c000de48:	5e                   	pop    esi
c000de49:	5f                   	pop    edi
c000de4a:	5d                   	pop    ebp
c000de4b:	c3                   	ret    
c000de4c:	6a 02                	push   0x2
c000de4e:	bb 01 00 00 00       	mov    ebx,0x1
c000de53:	50                   	push   eax
c000de54:	e8 b9 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de59:	58                   	pop    eax
c000de5a:	5a                   	pop    edx
c000de5b:	eb bd                	jmp    c000de1a <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de5d:	6a 04                	push   0x4
c000de5f:	8d 45 01             	lea    eax,[ebp+0x1]
c000de62:	55                   	push   ebp
c000de63:	a3 c4 2b 02 c0       	mov    ds:0xc0022bc4,eax
c000de68:	e8 a5 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de6d:	59                   	pop    ecx
c000de6e:	89 e8                	mov    eax,ebp
c000de70:	5b                   	pop    ebx
c000de71:	c1 e0 0c             	shl    eax,0xc
c000de74:	83 c4 1c             	add    esp,0x1c
c000de77:	5b                   	pop    ebx
c000de78:	5e                   	pop    esi
c000de79:	5f                   	pop    edi
c000de7a:	5d                   	pop    ebp
c000de7b:	c3                   	ret    

c000de7c <Virt::virtualMemorySetup()>:
c000de7c:	53                   	push   ebx
c000de7d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000de82:	83 ec 08             	sub    esp,0x8
c000de85:	6a 0f                	push   0xf
c000de87:	53                   	push   ebx
c000de88:	43                   	inc    ebx
c000de89:	e8 84 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de8e:	59                   	pop    ecx
c000de8f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000de95:	58                   	pop    eax
c000de96:	75 ed                	jne    c000de85 <Virt::virtualMemorySetup()+0x9>
c000de98:	83 ec 08             	sub    esp,0x8
c000de9b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dea0:	68 00 00 00 c8       	push   0xc8000000
c000dea5:	68 db 08 02 c0       	push   0xc00208db
c000deaa:	e8 3c 11 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000deaf:	58                   	pop    eax
c000deb0:	5a                   	pop    edx
c000deb1:	68 00 f0 ff ef       	push   0xeffff000
c000deb6:	68 ef 08 02 c0       	push   0xc00208ef
c000debb:	e8 2b 11 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000dec0:	83 c4 10             	add    esp,0x10
c000dec3:	83 ec 08             	sub    esp,0x8
c000dec6:	6a 00                	push   0x0
c000dec8:	53                   	push   ebx
c000dec9:	43                   	inc    ebx
c000deca:	e8 43 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000ded8:	75 e9                	jne    c000dec3 <Virt::virtualMemorySetup()+0x47>
c000deda:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000dedf:	83 ec 08             	sub    esp,0x8
c000dee2:	6a 0f                	push   0xf
c000dee4:	53                   	push   ebx
c000dee5:	43                   	inc    ebx
c000dee6:	e8 27 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000deeb:	83 c4 10             	add    esp,0x10
c000deee:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000def4:	75 e9                	jne    c000dedf <Virt::virtualMemorySetup()+0x63>
c000def6:	83 c4 08             	add    esp,0x8
c000def9:	5b                   	pop    ebx
c000defa:	c3                   	ret    

c000defb <Virt::getAKernelVAS()>:
c000defb:	a1 84 38 02 c0       	mov    eax,ds:0xc0023884
c000df00:	c3                   	ret    

c000df01 <Virt::setupPageSwapping(int)>:
c000df01:	57                   	push   edi
c000df02:	56                   	push   esi
c000df03:	53                   	push   ebx
c000df04:	83 ec 1c             	sub    esp,0x1c
c000df07:	68 14 01 00 00       	push   0x114
c000df0c:	e8 eb 0f 00 00       	call   c000eefc <operator new(unsigned long)>
c000df11:	83 c4 0c             	add    esp,0xc
c000df14:	89 c6                	mov    esi,eax
c000df16:	ff 35 74 4b 02 c0    	push   DWORD PTR ds:0xc0024b74
c000df1c:	68 03 09 02 c0       	push   0xc0020903
c000df21:	50                   	push   eax
c000df22:	e8 f3 15 00 00       	call   c000f51a <File::File(char const*, Process*)>
c000df27:	89 34 24             	mov    DWORD PTR [esp],esi
c000df2a:	e8 c7 17 00 00       	call   c000f6f6 <File::unlink()>
c000df2f:	58                   	pop    eax
c000df30:	5a                   	pop    edx
c000df31:	6a 12                	push   0x12
c000df33:	56                   	push   esi
c000df34:	e8 45 16 00 00       	call   c000f57e <File::open(FileOpenMode)>
c000df39:	83 c4 10             	add    esp,0x10
c000df3c:	85 c0                	test   eax,eax
c000df3e:	0f 85 bf 00 00 00    	jne    c000e003 <Virt::setupPageSwapping(int)+0x102>
c000df44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000df48:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df50:	c1 e3 08             	shl    ebx,0x8
c000df53:	83 ec 0c             	sub    esp,0xc
c000df56:	68 00 00 01 00       	push   0x10000
c000df5b:	e8 be dc ff ff       	call   c000bc1e <malloc>
c000df60:	83 c4 0c             	add    esp,0xc
c000df63:	89 c7                	mov    edi,eax
c000df65:	68 00 00 01 00       	push   0x10000
c000df6a:	6a 00                	push   0x0
c000df6c:	50                   	push   eax
c000df6d:	e8 96 26 ff ff       	call   c0000608 <memset>
c000df72:	83 c4 10             	add    esp,0x10
c000df75:	85 db                	test   ebx,ebx
c000df77:	79 03                	jns    c000df7c <Virt::setupPageSwapping(int)+0x7b>
c000df79:	83 c3 0f             	add    ebx,0xf
c000df7c:	c1 fb 04             	sar    ebx,0x4
c000df7f:	4b                   	dec    ebx
c000df80:	83 fb ff             	cmp    ebx,0xffffffff
c000df83:	74 4b                	je     c000dfd0 <Virt::setupPageSwapping(int)+0xcf>
c000df85:	83 ec 0c             	sub    esp,0xc
c000df88:	8b 06                	mov    eax,DWORD PTR [esi]
c000df8a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000df8e:	52                   	push   edx
c000df8f:	57                   	push   edi
c000df90:	6a 00                	push   0x0
c000df92:	68 00 00 01 00       	push   0x10000
c000df97:	56                   	push   esi
c000df98:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df9b:	83 c4 20             	add    esp,0x20
c000df9e:	85 c0                	test   eax,eax
c000dfa0:	75 4e                	jne    c000dff0 <Virt::setupPageSwapping(int)+0xef>
c000dfa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfa6:	3d 00 00 01 00       	cmp    eax,0x10000
c000dfab:	74 d2                	je     c000df7f <Virt::setupPageSwapping(int)+0x7e>
c000dfad:	83 ec 08             	sub    esp,0x8
c000dfb0:	4b                   	dec    ebx
c000dfb1:	50                   	push   eax
c000dfb2:	68 56 09 02 c0       	push   0xc0020956
c000dfb7:	e8 2f 10 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000dfbc:	c7 04 24 5f 09 02 c0 	mov    DWORD PTR [esp],0xc002095f
c000dfc3:	e8 b8 6c 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000dfc8:	83 c4 10             	add    esp,0x10
c000dfcb:	83 fb ff             	cmp    ebx,0xffffffff
c000dfce:	75 b5                	jne    c000df85 <Virt::setupPageSwapping(int)+0x84>
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	56                   	push   esi
c000dfd4:	e8 03 16 00 00       	call   c000f5dc <File::close()>
c000dfd9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dfdc:	e8 5d dc ff ff       	call   c000bc3e <rfree>
c000dfe1:	89 34 24             	mov    DWORD PTR [esp],esi
c000dfe4:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfe6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dfe9:	83 c4 20             	add    esp,0x20
c000dfec:	5b                   	pop    ebx
c000dfed:	5e                   	pop    esi
c000dfee:	5f                   	pop    edi
c000dfef:	c3                   	ret    
c000dff0:	83 ec 08             	sub    esp,0x8
c000dff3:	50                   	push   eax
c000dff4:	68 3e 09 02 c0       	push   0xc002093e
c000dff9:	e8 ed 0f 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000dffe:	83 c4 10             	add    esp,0x10
c000e001:	eb 9f                	jmp    c000dfa2 <Virt::setupPageSwapping(int)+0xa1>
c000e003:	83 ec 08             	sub    esp,0x8
c000e006:	50                   	push   eax
c000e007:	68 1a 09 02 c0       	push   0xc002091a
c000e00c:	e8 da 0f 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000e011:	c7 04 24 23 09 02 c0 	mov    DWORD PTR [esp],0xc0020923
c000e018:	e8 63 6c 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 1f ff ff ff       	jmp    c000df44 <Virt::setupPageSwapping(int)+0x43>
c000e025:	90                   	nop

c000e026 <VAS::VAS()>:
c000e026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e02a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e031:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e035:	a3 84 38 02 c0       	mov    ds:0xc0023884,eax
c000e03a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e03e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e046:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e049:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e04d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e054:	90                   	nop
c000e055:	c3                   	ret    

c000e056 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e056:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e05a:	89 c2                	mov    edx,eax
c000e05c:	c1 e8 0a             	shr    eax,0xa
c000e05f:	c1 ea 16             	shr    edx,0x16
c000e062:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e067:	19 c9                	sbb    ecx,ecx
c000e069:	c1 e2 0c             	shl    edx,0xc
c000e06c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e072:	25 fc 0f 00 00       	and    eax,0xffc
c000e077:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e07e:	01 d0                	add    eax,edx
c000e080:	c3                   	ret    
c000e081:	90                   	nop

c000e082 <VAS::getPageTableEntry(unsigned long)>:
c000e082:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e086:	89 ca                	mov    edx,ecx
c000e088:	c1 e9 0a             	shr    ecx,0xa
c000e08b:	c1 ea 16             	shr    edx,0x16
c000e08e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e094:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e09a:	c1 e0 0c             	shl    eax,0xc
c000e09d:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e0a0:	c3                   	ret    

c000e0a1 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e0a1:	57                   	push   edi
c000e0a2:	56                   	push   esi
c000e0a3:	be 01 00 00 00       	mov    esi,0x1
c000e0a8:	53                   	push   ebx
c000e0a9:	83 ec 10             	sub    esp,0x10
c000e0ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e0b0:	c1 eb 0c             	shr    ebx,0xc
c000e0b3:	eb 3f                	jmp    c000e0f4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e0b5:	e8 41 fe ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e0ba:	83 ec 08             	sub    esp,0x8
c000e0bd:	57                   	push   edi
c000e0be:	50                   	push   eax
c000e0bf:	e8 be ff ff ff       	call   c000e082 <VAS::getPageTableEntry(unsigned long)>
c000e0c4:	83 c4 10             	add    esp,0x10
c000e0c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0c9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e0cd:	f6 c4 04             	test   ah,0x4
c000e0d0:	75 5f                	jne    c000e131 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e0d2:	80 fa 04             	cmp    dl,0x4
c000e0d5:	74 78                	je     c000e14f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e0d7:	80 fa 02             	cmp    dl,0x2
c000e0da:	0f 84 88 00 00 00    	je     c000e168 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e0e0:	80 fa 03             	cmp    dl,0x3
c000e0e3:	0f 84 ad 00 00 00    	je     c000e196 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e0e9:	fe ca                	dec    dl
c000e0eb:	0f 84 92 00 00 00    	je     c000e183 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e0f1:	43                   	inc    ebx
c000e0f2:	31 f6                	xor    esi,esi
c000e0f4:	53                   	push   ebx
c000e0f5:	e8 4d fc ff ff       	call   c000dd47 <Virt::getPageState(unsigned long)>
c000e0fa:	5f                   	pop    edi
c000e0fb:	89 df                	mov    edi,ebx
c000e0fd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e101:	c1 e7 0c             	shl    edi,0xc
c000e104:	84 c0                	test   al,al
c000e106:	75 ad                	jne    c000e0b5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e108:	83 ec 0c             	sub    esp,0xc
c000e10b:	68 65 09 02 c0       	push   0xc0020965
c000e110:	e8 6b 6b 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000e115:	e8 e1 fd ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e11a:	5a                   	pop    edx
c000e11b:	59                   	pop    ecx
c000e11c:	57                   	push   edi
c000e11d:	50                   	push   eax
c000e11e:	e8 5f ff ff ff       	call   c000e082 <VAS::getPageTableEntry(unsigned long)>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	8b 00                	mov    eax,DWORD PTR [eax]
c000e128:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e12c:	f6 c4 04             	test   ah,0x4
c000e12f:	74 c0                	je     c000e0f1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e131:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e135:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e13a:	83 ec 0c             	sub    esp,0xc
c000e13d:	50                   	push   eax
c000e13e:	e8 fb df ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e143:	83 c4 10             	add    esp,0x10
c000e146:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e14a:	80 fa 04             	cmp    dl,0x4
c000e14d:	75 88                	jne    c000e0d7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e14f:	89 f0                	mov    eax,esi
c000e151:	84 c0                	test   al,al
c000e153:	75 47                	jne    c000e19c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e155:	c7 44 24 20 50 07 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020750
c000e15d:	83 c4 10             	add    esp,0x10
c000e160:	5b                   	pop    ebx
c000e161:	5e                   	pop    esi
c000e162:	5f                   	pop    edi
c000e163:	e9 18 6b 00 00       	jmp    c0014c80 <Krnl::panic(char const*)>
c000e168:	89 f0                	mov    eax,esi
c000e16a:	84 c0                	test   al,al
c000e16c:	75 15                	jne    c000e183 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e16e:	83 ec 0c             	sub    esp,0xc
c000e171:	68 81 09 02 c0       	push   0xc0020981
c000e176:	e8 05 6b 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000e17b:	83 c4 10             	add    esp,0x10
c000e17e:	e9 6e ff ff ff       	jmp    c000e0f1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e183:	83 ec 08             	sub    esp,0x8
c000e186:	6a 00                	push   0x0
c000e188:	53                   	push   ebx
c000e189:	e8 84 fb ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e18e:	83 c4 10             	add    esp,0x10
c000e191:	e9 5b ff ff ff       	jmp    c000e0f1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e196:	89 f0                	mov    eax,esi
c000e198:	84 c0                	test   al,al
c000e19a:	75 15                	jne    c000e1b1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e19c:	83 ec 08             	sub    esp,0x8
c000e19f:	6a 00                	push   0x0
c000e1a1:	53                   	push   ebx
c000e1a2:	e8 6b fb ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1a7:	83 c4 10             	add    esp,0x10
c000e1aa:	83 c4 10             	add    esp,0x10
c000e1ad:	5b                   	pop    ebx
c000e1ae:	5e                   	pop    esi
c000e1af:	5f                   	pop    edi
c000e1b0:	c3                   	ret    
c000e1b1:	c7 44 24 20 9d 09 02 c0 	mov    DWORD PTR [esp+0x20],0xc002099d
c000e1b9:	83 c4 10             	add    esp,0x10
c000e1bc:	5b                   	pop    ebx
c000e1bd:	5e                   	pop    esi
c000e1be:	5f                   	pop    edi
c000e1bf:	e9 bc 6a 00 00       	jmp    c0014c80 <Krnl::panic(char const*)>

c000e1c4 <VAS::freeAllocatedPages(unsigned long)>:
c000e1c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e1cc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e1d0:	74 09                	je     c000e1db <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e1d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e1d6:	e9 c6 fe ff ff       	jmp    c000e0a1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e1db:	c7 44 24 04 74 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020774
c000e1e3:	e9 03 0e 00 00       	jmp    c000efeb <Dbg::kprintf(char const*, ...)>

c000e1e8 <VAS::virtualToPhysical(unsigned long)>:
c000e1e8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1ec:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1f0:	e8 8d fe ff ff       	call   c000e082 <VAS::getPageTableEntry(unsigned long)>
c000e1f5:	5a                   	pop    edx
c000e1f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1f8:	59                   	pop    ecx
c000e1f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e1fe:	c3                   	ret    
c000e1ff:	90                   	nop

c000e200 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e200:	83 ec 0c             	sub    esp,0xc
c000e203:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e208:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e20c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e213:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e216:	19 c0                	sbb    eax,eax
c000e218:	83 ca 03             	or     edx,0x3
c000e21b:	83 e0 fc             	and    eax,0xfffffffc
c000e21e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e225:	e8 fb 07 01 00       	call   c001ea25 <CPU::readCR3()>
c000e22a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e22e:	83 c4 0c             	add    esp,0xc
c000e231:	e9 01 08 01 00       	jmp    c001ea37 <CPU::writeCR3(unsigned long)>

c000e236 <VAS::~VAS()>:
c000e236:	83 ec 2c             	sub    esp,0x2c
c000e239:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e241:	e8 66 99 00 00       	call   c0017bac <lockScheduler()>
c000e246:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e24b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e24d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e250:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e256:	83 ec 04             	sub    esp,0x4
c000e259:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e25d:	6a 01                	push   0x1
c000e25f:	50                   	push   eax
c000e260:	e8 9b ff ff ff       	call   c000e200 <VAS::mapOtherVASIn(bool, VAS*)>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e270:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e278:	0f 8f d7 00 00 00    	jg     c000e355 <VAS::~VAS()+0x11f>
c000e27e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e282:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e285:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e289:	c1 e2 02             	shl    edx,0x2
c000e28c:	01 d0                	add    eax,edx
c000e28e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e298:	83 e0 01             	and    eax,0x1
c000e29b:	0f 84 ab 00 00 00    	je     c000e34c <VAS::~VAS()+0x116>
c000e2a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e2a9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e2b1:	7f 75                	jg     c000e328 <VAS::~VAS()+0xf2>
c000e2b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2b7:	c1 e0 0a             	shl    eax,0xa
c000e2ba:	89 c2                	mov    edx,eax
c000e2bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e2c0:	01 d0                	add    eax,edx
c000e2c2:	c1 e0 0c             	shl    eax,0xc
c000e2c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2c9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e2ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e2d3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e2d9:	83 ec 04             	sub    esp,0x4
c000e2dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e2e0:	6a 01                	push   0x1
c000e2e2:	50                   	push   eax
c000e2e3:	e8 6e fd ff ff       	call   c000e056 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e2e8:	83 c4 10             	add    esp,0x10
c000e2eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e2f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2fd:	25 01 04 00 00       	and    eax,0x401
c000e302:	3d 01 04 00 00       	cmp    eax,0x401
c000e307:	75 19                	jne    c000e322 <VAS::~VAS()+0xec>
c000e309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e30d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e312:	83 ec 0c             	sub    esp,0xc
c000e315:	50                   	push   eax
c000e316:	e8 23 de ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e31b:	83 c4 10             	add    esp,0x10
c000e31e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e322:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e326:	eb 81                	jmp    c000e2a9 <VAS::~VAS()+0x73>
c000e328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32c:	25 00 04 00 00       	and    eax,0x400
c000e331:	74 19                	je     c000e34c <VAS::~VAS()+0x116>
c000e333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e337:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e33c:	83 ec 0c             	sub    esp,0xc
c000e33f:	50                   	push   eax
c000e340:	e8 f9 dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e345:	83 c4 10             	add    esp,0x10
c000e348:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e34c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e350:	e9 1b ff ff ff       	jmp    c000e270 <VAS::~VAS()+0x3a>
c000e355:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e359:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e35c:	83 ec 0c             	sub    esp,0xc
c000e35f:	50                   	push   eax
c000e360:	e8 3c fd ff ff       	call   c000e0a1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e365:	83 c4 10             	add    esp,0x10
c000e368:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e36c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e36f:	83 ec 0c             	sub    esp,0xc
c000e372:	50                   	push   eax
c000e373:	e8 c6 dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e378:	83 c4 10             	add    esp,0x10
c000e37b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e37f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e383:	c1 e0 02             	shl    eax,0x2
c000e386:	83 ec 08             	sub    esp,0x8
c000e389:	50                   	push   eax
c000e38a:	68 98 07 02 c0       	push   0xc0020798
c000e38f:	e8 57 0c 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000e394:	83 c4 10             	add    esp,0x10
c000e397:	e8 12 98 00 00       	call   c0017bae <unlockScheduler()>
c000e39c:	90                   	nop
c000e39d:	83 c4 2c             	add    esp,0x2c
c000e3a0:	c3                   	ret    
c000e3a1:	90                   	nop

c000e3a2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e3a2:	55                   	push   ebp
c000e3a3:	57                   	push   edi
c000e3a4:	56                   	push   esi
c000e3a5:	53                   	push   ebx
c000e3a6:	83 ec 1c             	sub    esp,0x1c
c000e3a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e3ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e3b1:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e3b7:	77 08                	ja     c000e3c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e3b9:	0f 20 d8             	mov    eax,cr3
c000e3bc:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e3bf:	75 47                	jne    c000e408 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e3c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e3c5:	09 d8                	or     eax,ebx
c000e3c7:	a9 ff 0f 00 00       	test   eax,0xfff
c000e3cc:	75 57                	jne    c000e425 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e3ce:	89 de                	mov    esi,ebx
c000e3d0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e3d3:	c1 ee 16             	shr    esi,0x16
c000e3d6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e3dd:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e3e1:	74 54                	je     c000e437 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e3e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e3e7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e3ed:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e3f1:	c1 e6 0c             	shl    esi,0xc
c000e3f4:	c1 eb 0a             	shr    ebx,0xa
c000e3f7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e3fd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e400:	83 c4 1c             	add    esp,0x1c
c000e403:	5b                   	pop    ebx
c000e404:	5e                   	pop    esi
c000e405:	5f                   	pop    edi
c000e406:	5d                   	pop    ebp
c000e407:	c3                   	ret    
c000e408:	83 ec 0c             	sub    esp,0xc
c000e40b:	68 b8 07 02 c0       	push   0xc00207b8
c000e410:	e8 d6 0b 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000e415:	83 c4 10             	add    esp,0x10
c000e418:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e41c:	09 d8                	or     eax,ebx
c000e41e:	a9 ff 0f 00 00       	test   eax,0xfff
c000e423:	74 a9                	je     c000e3ce <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e425:	83 ec 0c             	sub    esp,0xc
c000e428:	68 20 08 02 c0       	push   0xc0020820
c000e42d:	e8 4e 68 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000e432:	83 c4 10             	add    esp,0x10
c000e435:	eb 97                	jmp    c000e3ce <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e437:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e43b:	e8 88 dd ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e440:	89 c5                	mov    ebp,eax
c000e442:	e8 b4 fa ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e447:	83 ec 0c             	sub    esp,0xc
c000e44a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e44e:	6a 01                	push   0x1
c000e450:	e8 16 f9 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000e455:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e45c:	6a 01                	push   0x1
c000e45e:	50                   	push   eax
c000e45f:	55                   	push   ebp
c000e460:	81 cd 07 04 00 00    	or     ebp,0x407
c000e466:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e46a:	51                   	push   ecx
c000e46b:	e8 1e 02 00 00       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e470:	83 c4 1c             	add    esp,0x1c
c000e473:	68 00 10 00 00       	push   0x1000
c000e478:	6a 00                	push   0x0
c000e47a:	50                   	push   eax
c000e47b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e47f:	e8 84 21 ff ff       	call   c0000608 <memset>
c000e484:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e488:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e48b:	e8 11 fc ff ff       	call   c000e0a1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e490:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e494:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e497:	83 c4 10             	add    esp,0x10
c000e49a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e49d:	e9 41 ff ff ff       	jmp    c000e3e3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e4a2 <VAS::allocatePages(int, int)>:
c000e4a2:	55                   	push   ebp
c000e4a3:	57                   	push   edi
c000e4a4:	56                   	push   esi
c000e4a5:	53                   	push   ebx
c000e4a6:	83 ec 1c             	sub    esp,0x1c
c000e4a9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e4ad:	e8 c8 5a 00 00       	call   c0013f7a <thisCPU()>
c000e4b2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e4b8:	83 e0 01             	and    eax,0x1
c000e4bb:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e4bf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e4c3:	0f 85 d7 00 00 00    	jne    c000e5a0 <VAS::allocatePages(int, int)+0xfe>
c000e4c9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e4cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e4d0:	85 c0                	test   eax,eax
c000e4d2:	0f 84 ac 00 00 00    	je     c000e584 <VAS::allocatePages(int, int)+0xe2>
c000e4d8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e4dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4e0:	c1 e6 0c             	shl    esi,0xc
c000e4e3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e4e7:	85 c0                	test   eax,eax
c000e4e9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e4ec:	7e 33                	jle    c000e521 <VAS::allocatePages(int, int)+0x7f>
c000e4ee:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e4f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e4f6:	81 cd 00 04 00 00    	or     ebp,0x400
c000e4fc:	e8 c7 dc ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e501:	55                   	push   ebp
c000e502:	53                   	push   ebx
c000e503:	50                   	push   eax
c000e504:	57                   	push   edi
c000e505:	e8 98 fe ff ff       	call   c000e3a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e50a:	83 c4 10             	add    esp,0x10
c000e50d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e512:	74 03                	je     c000e517 <VAS::allocatePages(int, int)+0x75>
c000e514:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e517:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e51d:	39 de                	cmp    esi,ebx
c000e51f:	75 db                	jne    c000e4fc <VAS::allocatePages(int, int)+0x5a>
c000e521:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e526:	74 3f                	je     c000e567 <VAS::allocatePages(int, int)+0xc5>
c000e528:	c1 ee 0a             	shr    esi,0xa
c000e52b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e52f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e535:	c1 eb 0a             	shr    ebx,0xa
c000e538:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e53e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e544:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e54a:	39 f3                	cmp    ebx,esi
c000e54c:	77 0d                	ja     c000e55b <VAS::allocatePages(int, int)+0xb9>
c000e54e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e551:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e557:	39 de                	cmp    esi,ebx
c000e559:	73 f3                	jae    c000e54e <VAS::allocatePages(int, int)+0xac>
c000e55b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e55f:	83 c4 1c             	add    esp,0x1c
c000e562:	5b                   	pop    ebx
c000e563:	5e                   	pop    esi
c000e564:	5f                   	pop    edi
c000e565:	5d                   	pop    ebp
c000e566:	c3                   	ret    
c000e567:	e8 b9 04 01 00       	call   c001ea25 <CPU::readCR3()>
c000e56c:	83 ec 0c             	sub    esp,0xc
c000e56f:	50                   	push   eax
c000e570:	e8 c2 04 01 00       	call   c001ea37 <CPU::writeCR3(unsigned long)>
c000e575:	83 c4 10             	add    esp,0x10
c000e578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e57c:	83 c4 1c             	add    esp,0x1c
c000e57f:	5b                   	pop    ebx
c000e580:	5e                   	pop    esi
c000e581:	5f                   	pop    edi
c000e582:	5d                   	pop    ebp
c000e583:	c3                   	ret    
c000e584:	83 ec 0c             	sub    esp,0xc
c000e587:	68 44 08 02 c0       	push   0xc0020844
c000e58c:	e8 ef 66 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000e591:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e594:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e598:	83 c4 10             	add    esp,0x10
c000e59b:	e9 38 ff ff ff       	jmp    c000e4d8 <VAS::allocatePages(int, int)+0x36>
c000e5a0:	83 ec 0c             	sub    esp,0xc
c000e5a3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e5a7:	e8 bf f7 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000e5ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5b0:	83 c4 10             	add    esp,0x10
c000e5b3:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e5b8:	0f 87 94 00 00 00    	ja     c000e652 <VAS::allocatePages(int, int)+0x1b0>
c000e5be:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e5c2:	85 d2                	test   edx,edx
c000e5c4:	7e 3c                	jle    c000e602 <VAS::allocatePages(int, int)+0x160>
c000e5c6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e5ca:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e5ce:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e5d2:	c1 e5 0c             	shl    ebp,0xc
c000e5d5:	81 ce 00 04 00 00    	or     esi,0x400
c000e5db:	01 dd                	add    ebp,ebx
c000e5dd:	e8 e6 db ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e5e2:	56                   	push   esi
c000e5e3:	53                   	push   ebx
c000e5e4:	50                   	push   eax
c000e5e5:	57                   	push   edi
c000e5e6:	e8 b7 fd ff ff       	call   c000e3a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e5eb:	83 c4 10             	add    esp,0x10
c000e5ee:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5f3:	74 03                	je     c000e5f8 <VAS::allocatePages(int, int)+0x156>
c000e5f5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e5f8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e5fe:	39 dd                	cmp    ebp,ebx
c000e600:	75 db                	jne    c000e5dd <VAS::allocatePages(int, int)+0x13b>
c000e602:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e607:	0f 84 5a ff ff ff    	je     c000e567 <VAS::allocatePages(int, int)+0xc5>
c000e60d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e611:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e615:	89 d3                	mov    ebx,edx
c000e617:	c1 e0 0c             	shl    eax,0xc
c000e61a:	c1 eb 0a             	shr    ebx,0xa
c000e61d:	01 d0                	add    eax,edx
c000e61f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e625:	c1 e8 0a             	shr    eax,0xa
c000e628:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e62e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e633:	2d 00 00 40 00       	sub    eax,0x400000
c000e638:	39 c3                	cmp    ebx,eax
c000e63a:	0f 87 1b ff ff ff    	ja     c000e55b <VAS::allocatePages(int, int)+0xb9>
c000e640:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e643:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e649:	39 d8                	cmp    eax,ebx
c000e64b:	73 f3                	jae    c000e640 <VAS::allocatePages(int, int)+0x19e>
c000e64d:	e9 09 ff ff ff       	jmp    c000e55b <VAS::allocatePages(int, int)+0xb9>
c000e652:	e8 23 59 00 00       	call   c0013f7a <thisCPU()>
c000e657:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e65e:	0f 84 5a ff ff ff    	je     c000e5be <VAS::allocatePages(int, int)+0x11c>
c000e664:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e66c:	e9 4d ff ff ff       	jmp    c000e5be <VAS::allocatePages(int, int)+0x11c>
c000e671:	90                   	nop

c000e672 <VAS::setCPUSpecific(unsigned long)>:
c000e672:	83 ec 0c             	sub    esp,0xc
c000e675:	6a 05                	push   0x5
c000e677:	68 00 00 40 c2       	push   0xc2400000
c000e67c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e684:	e8 19 fd ff ff       	call   c000e3a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e689:	83 c4 1c             	add    esp,0x1c
c000e68c:	c3                   	ret    
c000e68d:	90                   	nop

c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e68e:	55                   	push   ebp
c000e68f:	57                   	push   edi
c000e690:	56                   	push   esi
c000e691:	53                   	push   ebx
c000e692:	83 ec 1c             	sub    esp,0x1c
c000e695:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e699:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e69d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e6a1:	e8 d4 58 00 00       	call   c0013f7a <thisCPU()>
c000e6a6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e6ac:	83 e0 01             	and    eax,0x1
c000e6af:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e6b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6b7:	85 c0                	test   eax,eax
c000e6b9:	7e 39                	jle    c000e6f4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e6bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6bf:	89 f3                	mov    ebx,esi
c000e6c1:	c1 e0 0c             	shl    eax,0xc
c000e6c4:	01 f0                	add    eax,esi
c000e6c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6ca:	55                   	push   ebp
c000e6cb:	53                   	push   ebx
c000e6cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6d0:	29 f0                	sub    eax,esi
c000e6d2:	01 d8                	add    eax,ebx
c000e6d4:	50                   	push   eax
c000e6d5:	57                   	push   edi
c000e6d6:	e8 c7 fc ff ff       	call   c000e3a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e6db:	83 c4 10             	add    esp,0x10
c000e6de:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e6e3:	74 03                	je     c000e6e8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e6e5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e6e8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e6ee:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e6f2:	75 d6                	jne    c000e6ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e6f4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e6f9:	74 42                	je     c000e73d <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e6fb:	89 f3                	mov    ebx,esi
c000e6fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e701:	c1 eb 0a             	shr    ebx,0xa
c000e704:	c1 e0 0c             	shl    eax,0xc
c000e707:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e70d:	01 f0                	add    eax,esi
c000e70f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e715:	c1 e8 0a             	shr    eax,0xa
c000e718:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e71d:	2d 00 00 40 00       	sub    eax,0x400000
c000e722:	39 c3                	cmp    ebx,eax
c000e724:	77 0d                	ja     c000e733 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e726:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e729:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e72f:	39 d8                	cmp    eax,ebx
c000e731:	73 f3                	jae    c000e726 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e733:	83 c4 1c             	add    esp,0x1c
c000e736:	89 f0                	mov    eax,esi
c000e738:	5b                   	pop    ebx
c000e739:	5e                   	pop    esi
c000e73a:	5f                   	pop    edi
c000e73b:	5d                   	pop    ebp
c000e73c:	c3                   	ret    
c000e73d:	e8 e3 02 01 00       	call   c001ea25 <CPU::readCR3()>
c000e742:	83 ec 0c             	sub    esp,0xc
c000e745:	50                   	push   eax
c000e746:	e8 ec 02 01 00       	call   c001ea37 <CPU::writeCR3(unsigned long)>
c000e74b:	89 f0                	mov    eax,esi
c000e74d:	83 c4 10             	add    esp,0x10
c000e750:	83 c4 1c             	add    esp,0x1c
c000e753:	5b                   	pop    ebx
c000e754:	5e                   	pop    esi
c000e755:	5f                   	pop    edi
c000e756:	5d                   	pop    ebp
c000e757:	c3                   	ret    

c000e758 <VAS::VAS(VAS*)>:
c000e758:	53                   	push   ebx
c000e759:	83 ec 38             	sub    esp,0x38
c000e75c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e760:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e767:	e8 67 94 00 00       	call   c0017bd3 <lockStuff()>
c000e76c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e770:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e773:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e777:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e77a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e77e:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c000e781:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e785:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e788:	e8 3b da ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e78d:	89 c2                	mov    edx,eax
c000e78f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e793:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e796:	e8 60 f7 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e79b:	89 c3                	mov    ebx,eax
c000e79d:	83 ec 0c             	sub    esp,0xc
c000e7a0:	6a 01                	push   0x1
c000e7a2:	e8 c4 f5 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000e7a7:	83 c4 10             	add    esp,0x10
c000e7aa:	89 c2                	mov    edx,eax
c000e7ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7b3:	83 ec 0c             	sub    esp,0xc
c000e7b6:	6a 03                	push   0x3
c000e7b8:	6a 01                	push   0x1
c000e7ba:	52                   	push   edx
c000e7bb:	50                   	push   eax
c000e7bc:	53                   	push   ebx
c000e7bd:	e8 cc fe ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7c2:	83 c4 20             	add    esp,0x20
c000e7c5:	89 c2                	mov    edx,eax
c000e7c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e7ce:	83 ec 04             	sub    esp,0x4
c000e7d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e7d5:	6a 01                	push   0x1
c000e7d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e7db:	e8 20 fa ff ff       	call   c000e200 <VAS::mapOtherVASIn(bool, VAS*)>
c000e7e0:	83 c4 10             	add    esp,0x10
c000e7e3:	83 ec 0c             	sub    esp,0xc
c000e7e6:	6a 01                	push   0x1
c000e7e8:	e8 7e f5 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000e7ed:	83 c4 10             	add    esp,0x10
c000e7f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e7f4:	83 ec 0c             	sub    esp,0xc
c000e7f7:	6a 01                	push   0x1
c000e7f9:	e8 6d f5 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e805:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e80d:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c000e815:	0f 8f 5e 02 00 00    	jg     c000ea79 <VAS::VAS(VAS*)+0x321>
c000e81b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e820:	8b 00                	mov    eax,DWORD PTR [eax]
c000e822:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e825:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e82b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e82e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e832:	c1 e2 02             	shl    edx,0x2
c000e835:	01 d0                	add    eax,edx
c000e837:	8b 00                	mov    eax,DWORD PTR [eax]
c000e839:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e83d:	83 ec 08             	sub    esp,0x8
c000e840:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e844:	68 b7 09 02 c0       	push   0xc00209b7
c000e849:	e8 9d 07 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000e84e:	83 c4 10             	add    esp,0x10
c000e851:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e855:	25 01 04 00 00       	and    eax,0x401
c000e85a:	3d 01 04 00 00       	cmp    eax,0x401
c000e85f:	0f 85 e5 01 00 00    	jne    c000ea4a <VAS::VAS(VAS*)+0x2f2>
c000e865:	83 ec 0c             	sub    esp,0xc
c000e868:	68 c8 09 02 c0       	push   0xc00209c8
c000e86d:	e8 79 07 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000e872:	83 c4 10             	add    esp,0x10
c000e875:	e8 4e d9 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e87a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e87e:	83 ec 08             	sub    esp,0x8
c000e881:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e885:	68 de 09 02 c0       	push   0xc00209de
c000e88a:	e8 5c 07 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000e88f:	83 c4 10             	add    esp,0x10
c000e892:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e896:	25 ff 0f 00 00       	and    eax,0xfff
c000e89b:	89 c1                	mov    ecx,eax
c000e89d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e8a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8a8:	c1 e2 02             	shl    edx,0x2
c000e8ab:	01 c2                	add    edx,eax
c000e8ad:	89 c8                	mov    eax,ecx
c000e8af:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c000e8b3:	89 02                	mov    DWORD PTR [edx],eax
c000e8b5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000e8bd:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c000e8c5:	0f 8f a5 01 00 00    	jg     c000ea70 <VAS::VAS(VAS*)+0x318>
c000e8cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8cf:	c1 e0 0a             	shl    eax,0xa
c000e8d2:	89 c2                	mov    edx,eax
c000e8d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8d8:	01 d0                	add    eax,edx
c000e8da:	c1 e0 0c             	shl    eax,0xc
c000e8dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8e1:	83 ec 08             	sub    esp,0x8
c000e8e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e8ec:	e8 91 f7 ff ff       	call   c000e082 <VAS::getPageTableEntry(unsigned long)>
c000e8f1:	83 c4 10             	add    esp,0x10
c000e8f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8fa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e8ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000e901:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e904:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e90a:	83 ec 04             	sub    esp,0x4
c000e90d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e911:	6a 01                	push   0x1
c000e913:	50                   	push   eax
c000e914:	e8 3d f7 ff ff       	call   c000e056 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e919:	83 c4 10             	add    esp,0x10
c000e91c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e920:	83 ec 04             	sub    esp,0x4
c000e923:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e927:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e92b:	68 70 08 02 c0       	push   0xc0020870
c000e930:	e8 b6 06 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e93c:	25 01 04 00 00       	and    eax,0x401
c000e941:	3d 01 04 00 00       	cmp    eax,0x401
c000e946:	0f 85 db 00 00 00    	jne    c000ea27 <VAS::VAS(VAS*)+0x2cf>
c000e94c:	83 ec 0c             	sub    esp,0xc
c000e94f:	68 ed 09 02 c0       	push   0xc00209ed
c000e954:	e8 92 06 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	e8 67 d8 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e961:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e965:	83 ec 08             	sub    esp,0x8
c000e968:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e96c:	68 fc 09 02 c0       	push   0xc00209fc
c000e971:	e8 75 06 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000e976:	83 c4 10             	add    esp,0x10
c000e979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e97d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e982:	83 ec 08             	sub    esp,0x8
c000e985:	50                   	push   eax
c000e986:	68 10 0a 02 c0       	push   0xc0020a10
c000e98b:	e8 5b 06 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000e990:	83 c4 10             	add    esp,0x10
c000e993:	e8 63 f5 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e998:	83 ec 0c             	sub    esp,0xc
c000e99b:	6a 03                	push   0x3
c000e99d:	6a 01                	push   0x1
c000e99f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e9a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e9a7:	50                   	push   eax
c000e9a8:	e8 e1 fc ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9ad:	83 c4 20             	add    esp,0x20
c000e9b0:	e8 46 f5 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e9b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9b9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9bf:	83 ec 0c             	sub    esp,0xc
c000e9c2:	6a 03                	push   0x3
c000e9c4:	6a 01                	push   0x1
c000e9c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e9ca:	52                   	push   edx
c000e9cb:	50                   	push   eax
c000e9cc:	e8 bd fc ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9d1:	83 c4 20             	add    esp,0x20
c000e9d4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e9d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9dc:	83 ec 04             	sub    esp,0x4
c000e9df:	68 00 10 00 00       	push   0x1000
c000e9e4:	52                   	push   edx
c000e9e5:	50                   	push   eax
c000e9e6:	e8 e7 1b ff ff       	call   c00005d2 <memcpy>
c000e9eb:	83 c4 10             	add    esp,0x10
c000e9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f2:	25 ff 0f 00 00       	and    eax,0xfff
c000e9f7:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e9fb:	89 c2                	mov    edx,eax
c000e9fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea01:	89 10                	mov    DWORD PTR [eax],edx
c000ea03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea07:	25 ff 0f 00 00       	and    eax,0xfff
c000ea0c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ea10:	83 ec 04             	sub    esp,0x4
c000ea13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea17:	50                   	push   eax
c000ea18:	68 94 08 02 c0       	push   0xc0020894
c000ea1d:	e8 c9 05 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000ea22:	83 c4 10             	add    esp,0x10
c000ea25:	eb 1a                	jmp    c000ea41 <VAS::VAS(VAS*)+0x2e9>
c000ea27:	83 ec 0c             	sub    esp,0xc
c000ea2a:	68 24 0a 02 c0       	push   0xc0020a24
c000ea2f:	e8 b7 05 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000ea34:	83 c4 10             	add    esp,0x10
c000ea37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea3f:	89 10                	mov    DWORD PTR [eax],edx
c000ea41:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ea45:	e9 73 fe ff ff       	jmp    c000e8bd <VAS::VAS(VAS*)+0x165>
c000ea4a:	83 ec 0c             	sub    esp,0xc
c000ea4d:	68 28 0a 02 c0       	push   0xc0020a28
c000ea52:	e8 94 05 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000ea57:	83 c4 10             	add    esp,0x10
c000ea5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea61:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ea65:	c1 e2 02             	shl    edx,0x2
c000ea68:	01 c2                	add    edx,eax
c000ea6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea6e:	89 02                	mov    DWORD PTR [edx],eax
c000ea70:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea74:	e9 94 fd ff ff       	jmp    c000e80d <VAS::VAS(VAS*)+0xb5>
c000ea79:	83 ec 0c             	sub    esp,0xc
c000ea7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea80:	e8 1c f6 ff ff       	call   c000e0a1 <Virt::freeKernelVirtualPages(unsigned long)>
c000ea85:	83 c4 10             	add    esp,0x10
c000ea88:	83 ec 0c             	sub    esp,0xc
c000ea8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea8f:	e8 0d f6 ff ff       	call   c000e0a1 <Virt::freeKernelVirtualPages(unsigned long)>
c000ea94:	83 c4 10             	add    esp,0x10
c000ea97:	e8 c9 94 00 00       	call   c0017f65 <unlockStuff()>
c000ea9c:	90                   	nop
c000ea9d:	83 c4 38             	add    esp,0x38
c000eaa0:	5b                   	pop    ebx
c000eaa1:	c3                   	ret    

c000eaa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000eaa2:	55                   	push   ebp
c000eaa3:	57                   	push   edi
c000eaa4:	56                   	push   esi
c000eaa5:	53                   	push   ebx
c000eaa6:	83 ec 1c             	sub    esp,0x1c
c000eaa9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaad:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eab1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000eab5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eab9:	a9 ff 0f 00 00       	test   eax,0xfff
c000eabe:	75 4a                	jne    c000eb0a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000eac0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eac4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eac7:	c1 eb 16             	shr    ebx,0x16
c000eaca:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ead1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ead5:	74 4d                	je     c000eb24 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000ead7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eadb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000eadf:	c1 e8 0a             	shr    eax,0xa
c000eae2:	80 fa 01             	cmp    dl,0x1
c000eae5:	19 d2                	sbb    edx,edx
c000eae7:	c1 e3 0c             	shl    ebx,0xc
c000eaea:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000eaee:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000eaf4:	25 fc 0f 00 00       	and    eax,0xffc
c000eaf9:	01 d8                	add    eax,ebx
c000eafb:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000eb02:	83 c4 1c             	add    esp,0x1c
c000eb05:	5b                   	pop    ebx
c000eb06:	5e                   	pop    esi
c000eb07:	5f                   	pop    edi
c000eb08:	5d                   	pop    ebp
c000eb09:	c3                   	ret    
c000eb0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000eb0e:	83 ec 0c             	sub    esp,0xc
c000eb11:	68 b8 08 02 c0       	push   0xc00208b8
c000eb16:	e8 65 61 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000eb1b:	83 c4 10             	add    esp,0x10
c000eb1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb22:	eb 9c                	jmp    c000eac0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000eb24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eb28:	e8 9b d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000eb2d:	89 c5                	mov    ebp,eax
c000eb2f:	e8 c7 f3 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000eb34:	83 ec 0c             	sub    esp,0xc
c000eb37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eb3b:	6a 01                	push   0x1
c000eb3d:	e8 29 f2 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000eb42:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000eb49:	6a 01                	push   0x1
c000eb4b:	50                   	push   eax
c000eb4c:	55                   	push   ebp
c000eb4d:	81 cd 07 04 00 00    	or     ebp,0x407
c000eb53:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000eb57:	51                   	push   ecx
c000eb58:	e8 31 fb ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eb5d:	83 c4 1c             	add    esp,0x1c
c000eb60:	68 00 10 00 00       	push   0x1000
c000eb65:	6a 00                	push   0x0
c000eb67:	50                   	push   eax
c000eb68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb6c:	e8 97 1a ff ff       	call   c0000608 <memset>
c000eb71:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000eb75:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000eb78:	e8 24 f5 ff ff       	call   c000e0a1 <Virt::freeKernelVirtualPages(unsigned long)>
c000eb7d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eb80:	83 c4 10             	add    esp,0x10
c000eb83:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000eb86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb8a:	e9 48 ff ff ff       	jmp    c000ead7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000eb8f:	90                   	nop

c000eb90 <VAS::VAS(bool)>:
c000eb90:	53                   	push   ebx
c000eb91:	83 ec 28             	sub    esp,0x28
c000eb94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000eb9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eba0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eba7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebab:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ebaf:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ebb2:	e8 11 d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ebb7:	89 c2                	mov    edx,eax
c000ebb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebbd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ebc0:	e8 36 f3 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000ebc5:	89 c3                	mov    ebx,eax
c000ebc7:	83 ec 0c             	sub    esp,0xc
c000ebca:	6a 01                	push   0x1
c000ebcc:	e8 9a f1 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000ebd1:	83 c4 10             	add    esp,0x10
c000ebd4:	89 c2                	mov    edx,eax
c000ebd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ebdd:	83 ec 0c             	sub    esp,0xc
c000ebe0:	6a 03                	push   0x3
c000ebe2:	6a 01                	push   0x1
c000ebe4:	52                   	push   edx
c000ebe5:	50                   	push   eax
c000ebe6:	53                   	push   ebx
c000ebe7:	e8 a2 fa ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ebec:	83 c4 20             	add    esp,0x20
c000ebef:	89 c2                	mov    edx,eax
c000ebf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebf5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ebf8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ec00:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ec08:	7f 1c                	jg     c000ec26 <VAS::VAS(bool)+0x96>
c000ec0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec15:	c1 e2 02             	shl    edx,0x2
c000ec18:	01 d0                	add    eax,edx
c000ec1a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ec20:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ec24:	eb da                	jmp    c000ec00 <VAS::VAS(bool)+0x70>
c000ec26:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ec2e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ec36:	7f 71                	jg     c000eca9 <VAS::VAS(bool)+0x119>
c000ec38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec3c:	2d 00 02 00 00       	sub    eax,0x200
c000ec41:	c1 e0 0c             	shl    eax,0xc
c000ec44:	83 c8 03             	or     eax,0x3
c000ec47:	89 c3                	mov    ebx,eax
c000ec49:	e8 2c 53 00 00       	call   c0013f7a <thisCPU()>
c000ec4e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ec54:	83 e0 10             	and    eax,0x10
c000ec57:	84 c0                	test   al,al
c000ec59:	74 07                	je     c000ec62 <VAS::VAS(bool)+0xd2>
c000ec5b:	b8 00 01 00 00       	mov    eax,0x100
c000ec60:	eb 05                	jmp    c000ec67 <VAS::VAS(bool)+0xd7>
c000ec62:	b8 00 00 00 00       	mov    eax,0x0
c000ec67:	09 d8                	or     eax,ebx
c000ec69:	89 c1                	mov    ecx,eax
c000ec6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec76:	c1 e2 02             	shl    edx,0x2
c000ec79:	01 d0                	add    eax,edx
c000ec7b:	89 ca                	mov    edx,ecx
c000ec7d:	89 10                	mov    DWORD PTR [eax],edx
c000ec7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec83:	2d 40 03 00 00       	sub    eax,0x340
c000ec88:	83 f8 7f             	cmp    eax,0x7f
c000ec8b:	77 16                	ja     c000eca3 <VAS::VAS(bool)+0x113>
c000ec8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec98:	c1 e2 02             	shl    edx,0x2
c000ec9b:	01 d0                	add    eax,edx
c000ec9d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000eca3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000eca7:	eb 85                	jmp    c000ec2e <VAS::VAS(bool)+0x9e>
c000eca9:	e8 cc 52 00 00       	call   c0013f7a <thisCPU()>
c000ecae:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ecb4:	83 e0 10             	and    eax,0x10
c000ecb7:	84 c0                	test   al,al
c000ecb9:	74 07                	je     c000ecc2 <VAS::VAS(bool)+0x132>
c000ecbb:	b8 03 41 00 00       	mov    eax,0x4103
c000ecc0:	eb 05                	jmp    c000ecc7 <VAS::VAS(bool)+0x137>
c000ecc2:	b8 03 40 00 00       	mov    eax,0x4003
c000ecc7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eccb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ecce:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ecd4:	89 02                	mov    DWORD PTR [edx],eax
c000ecd6:	e8 9f 52 00 00       	call   c0013f7a <thisCPU()>
c000ecdb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ece1:	83 ec 08             	sub    esp,0x8
c000ece4:	50                   	push   eax
c000ece5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ece9:	e8 84 f9 ff ff       	call   c000e672 <VAS::setCPUSpecific(unsigned long)>
c000ecee:	83 c4 10             	add    esp,0x10
c000ecf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecf5:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ecf8:	e8 7d 52 00 00       	call   c0013f7a <thisCPU()>
c000ecfd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed03:	83 e0 10             	and    eax,0x10
c000ed06:	84 c0                	test   al,al
c000ed08:	74 07                	je     c000ed11 <VAS::VAS(bool)+0x181>
c000ed0a:	b8 00 01 00 00       	mov    eax,0x100
c000ed0f:	eb 05                	jmp    c000ed16 <VAS::VAS(bool)+0x186>
c000ed11:	b8 00 00 00 00       	mov    eax,0x0
c000ed16:	09 d8                	or     eax,ebx
c000ed18:	89 c2                	mov    edx,eax
c000ed1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed21:	05 fc 0f 00 00       	add    eax,0xffc
c000ed26:	83 ca 03             	or     edx,0x3
c000ed29:	89 10                	mov    DWORD PTR [eax],edx
c000ed2b:	e8 4a 52 00 00       	call   c0013f7a <thisCPU()>
c000ed30:	83 ec 0c             	sub    esp,0xc
c000ed33:	50                   	push   eax
c000ed34:	e8 9f 19 00 00       	call   c00106d8 <Device::getName()>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	83 ec 08             	sub    esp,0x8
c000ed3f:	68 38 0a 02 c0       	push   0xc0020a38
c000ed44:	50                   	push   eax
c000ed45:	e8 ae 19 ff ff       	call   c00006f8 <strcmp>
c000ed4a:	83 c4 10             	add    esp,0x10
c000ed4d:	85 c0                	test   eax,eax
c000ed4f:	0f 94 c0             	sete   al
c000ed52:	84 c0                	test   al,al
c000ed54:	74 64                	je     c000edba <VAS::VAS(bool)+0x22a>
c000ed56:	e8 34 8e 00 00       	call   c0017b8f <disableIRQs()>
c000ed5b:	e8 1a 52 00 00       	call   c0013f7a <thisCPU()>
c000ed60:	05 7c 09 00 00       	add    eax,0x97c
c000ed65:	83 ec 0c             	sub    esp,0xc
c000ed68:	50                   	push   eax
c000ed69:	e8 22 c9 ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ed6e:	83 c4 10             	add    esp,0x10
c000ed71:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ed76:	89 c3                	mov    ebx,eax
c000ed78:	e8 fd 51 00 00       	call   c0013f7a <thisCPU()>
c000ed7d:	05 7c 09 00 00       	add    eax,0x97c
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	50                   	push   eax
c000ed86:	e8 05 c9 ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ed8b:	83 c4 10             	add    esp,0x10
c000ed8e:	83 ec 08             	sub    esp,0x8
c000ed91:	50                   	push   eax
c000ed92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed96:	e8 e7 f2 ff ff       	call   c000e082 <VAS::getPageTableEntry(unsigned long)>
c000ed9b:	83 c4 10             	add    esp,0x10
c000ed9e:	8b 00                	mov    eax,DWORD PTR [eax]
c000eda0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eda5:	6a 11                	push   0x11
c000eda7:	53                   	push   ebx
c000eda8:	50                   	push   eax
c000eda9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000edad:	e8 f0 f5 ff ff       	call   c000e3a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	e8 e3 8d 00 00       	call   c0017b9d <enableIRQs()>
c000edba:	90                   	nop
c000edbb:	83 c4 28             	add    esp,0x28
c000edbe:	5b                   	pop    ebx
c000edbf:	c3                   	ret    

c000edc0 <mapVASFirstTime>:
c000edc0:	55                   	push   ebp
c000edc1:	57                   	push   edi
c000edc2:	56                   	push   esi
c000edc3:	53                   	push   ebx
c000edc4:	83 ec 0c             	sub    esp,0xc
c000edc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edcc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000edcf:	4a                   	dec    edx
c000edd0:	0f 84 99 00 00 00    	je     c000ee6f <mapVASFirstTime+0xaf>
c000edd6:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000edd9:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000eddc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ede1:	c1 e5 15             	shl    ebp,0x15
c000ede4:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ede9:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000edef:	29 eb                	sub    ebx,ebp
c000edf1:	29 ee                	sub    esi,ebp
c000edf3:	e8 d0 d3 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000edf8:	83 ec 0c             	sub    esp,0xc
c000edfb:	68 03 04 00 00       	push   0x403
c000ee00:	6a 01                	push   0x1
c000ee02:	53                   	push   ebx
c000ee03:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ee09:	50                   	push   eax
c000ee0a:	57                   	push   edi
c000ee0b:	e8 7e f8 ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee10:	83 c4 20             	add    esp,0x20
c000ee13:	39 f3                	cmp    ebx,esi
c000ee15:	75 dc                	jne    c000edf3 <mapVASFirstTime+0x33>
c000ee17:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ee1c:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ee21:	29 ee                	sub    esi,ebp
c000ee23:	29 e8                	sub    eax,ebp
c000ee25:	89 c5                	mov    ebp,eax
c000ee27:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ee2b:	19 db                	sbb    ebx,ebx
c000ee2d:	e8 96 d3 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ee32:	83 e3 04             	and    ebx,0x4
c000ee35:	83 ec 0c             	sub    esp,0xc
c000ee38:	81 c3 03 04 00 00    	add    ebx,0x403
c000ee3e:	53                   	push   ebx
c000ee3f:	6a 01                	push   0x1
c000ee41:	56                   	push   esi
c000ee42:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ee48:	50                   	push   eax
c000ee49:	57                   	push   edi
c000ee4a:	e8 3f f8 ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee4f:	83 c4 20             	add    esp,0x20
c000ee52:	39 f5                	cmp    ebp,esi
c000ee54:	75 d1                	jne    c000ee27 <mapVASFirstTime+0x67>
c000ee56:	e8 ca fb 00 00       	call   c001ea25 <CPU::readCR3()>
c000ee5b:	83 ec 0c             	sub    esp,0xc
c000ee5e:	50                   	push   eax
c000ee5f:	e8 d3 fb 00 00       	call   c001ea37 <CPU::writeCR3(unsigned long)>
c000ee64:	83 c4 10             	add    esp,0x10
c000ee67:	83 c4 0c             	add    esp,0xc
c000ee6a:	5b                   	pop    ebx
c000ee6b:	5e                   	pop    esi
c000ee6c:	5f                   	pop    edi
c000ee6d:	5d                   	pop    ebp
c000ee6e:	c3                   	ret    
c000ee6f:	83 ec 0c             	sub    esp,0xc
c000ee72:	68 46 0a 02 c0       	push   0xc0020a46
c000ee77:	e8 6f 01 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000ee7c:	83 c4 10             	add    esp,0x10
c000ee7f:	83 c4 0c             	add    esp,0xc
c000ee82:	5b                   	pop    ebx
c000ee83:	5e                   	pop    esi
c000ee84:	5f                   	pop    edi
c000ee85:	5d                   	pop    ebp
c000ee86:	c3                   	ret    

c000ee87 <__cxa_atexit>:
c000ee87:	31 c0                	xor    eax,eax
c000ee89:	c3                   	ret    

c000ee8a <__cxa_finalize>:
c000ee8a:	c3                   	ret    

c000ee8b <__stack_chk_fail>:
c000ee8b:	55                   	push   ebp
c000ee8c:	89 e5                	mov    ebp,esp
c000ee8e:	83 ec 10             	sub    esp,0x10
c000ee91:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ee94:	68 5f 0a 02 c0       	push   0xc0020a5f
c000ee99:	e8 4d 01 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000ee9e:	58                   	pop    eax
c000ee9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eea2:	5a                   	pop    edx
c000eea3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eea6:	68 5f 0a 02 c0       	push   0xc0020a5f
c000eeab:	e8 3b 01 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000eeb0:	59                   	pop    ecx
c000eeb1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eeb4:	5a                   	pop    edx
c000eeb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeb7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eeba:	68 5f 0a 02 c0       	push   0xc0020a5f
c000eebf:	e8 27 01 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000eec4:	59                   	pop    ecx
c000eec5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eec8:	5a                   	pop    edx
c000eec9:	8b 00                	mov    eax,DWORD PTR [eax]
c000eecb:	8b 00                	mov    eax,DWORD PTR [eax]
c000eecd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eed0:	68 5f 0a 02 c0       	push   0xc0020a5f
c000eed5:	e8 11 01 00 00       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c000eeda:	c7 04 24 67 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a67
c000eee1:	e8 9a 5d 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000eee6:	83 c4 10             	add    esp,0x10
c000eee9:	c9                   	leave  
c000eeea:	c3                   	ret    

c000eeeb <__cxa_pure_virtual>:
c000eeeb:	83 ec 18             	sub    esp,0x18
c000eeee:	68 7f 0a 02 c0       	push   0xc0020a7f
c000eef3:	e8 88 5d 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c000eef8:	83 c4 1c             	add    esp,0x1c
c000eefb:	c3                   	ret    

c000eefc <operator new(unsigned long)>:
c000eefc:	e9 1d cd ff ff       	jmp    c000bc1e <malloc>

c000ef01 <operator new[](unsigned long)>:
c000ef01:	e9 18 cd ff ff       	jmp    c000bc1e <malloc>

c000ef06 <operator delete(void*)>:
c000ef06:	e9 33 cd ff ff       	jmp    c000bc3e <rfree>

c000ef0b <operator delete(void*, unsigned long)>:
c000ef0b:	e9 2e cd ff ff       	jmp    c000bc3e <rfree>

c000ef10 <operator delete[](void*)>:
c000ef10:	e9 29 cd ff ff       	jmp    c000bc3e <rfree>

c000ef15 <operator delete[](void*, unsigned long)>:
c000ef15:	e9 24 cd ff ff       	jmp    c000bc3e <rfree>

c000ef1a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ef1a:	57                   	push   edi
c000ef1b:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ef20:	56                   	push   esi
c000ef21:	be 94 0a 02 c0       	mov    esi,0xc0020a94
c000ef26:	53                   	push   ebx
c000ef27:	83 ec 40             	sub    esp,0x40
c000ef2a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ef2e:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ef32:	fc                   	cld    
c000ef33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef35:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ef39:	83 f9 3e             	cmp    ecx,0x3e
c000ef3c:	7e 05                	jle    c000ef43 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ef3e:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ef43:	89 df                	mov    edi,ebx
c000ef45:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ef49:	eb 02                	jmp    c000ef4d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ef4b:	89 c7                	mov    edi,eax
c000ef4d:	31 d2                	xor    edx,edx
c000ef4f:	46                   	inc    esi
c000ef50:	89 f8                	mov    eax,edi
c000ef52:	f7 f1                	div    ecx
c000ef54:	39 cf                	cmp    edi,ecx
c000ef56:	73 f3                	jae    c000ef4b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ef58:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ef5b:	eb 02                	jmp    c000ef5f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ef5d:	89 c3                	mov    ebx,eax
c000ef5f:	31 d2                	xor    edx,edx
c000ef61:	4e                   	dec    esi
c000ef62:	89 d8                	mov    eax,ebx
c000ef64:	f7 f1                	div    ecx
c000ef66:	39 cb                	cmp    ebx,ecx
c000ef68:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ef6c:	88 16                	mov    BYTE PTR [esi],dl
c000ef6e:	73 ed                	jae    c000ef5d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ef70:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef74:	83 c4 40             	add    esp,0x40
c000ef77:	5b                   	pop    ebx
c000ef78:	5e                   	pop    esi
c000ef79:	5f                   	pop    edi
c000ef7a:	c3                   	ret    

c000ef7b <Dbg::logc(char)>:
c000ef7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef7f:	ba fd 03 00 00       	mov    edx,0x3fd
c000ef84:	ec                   	in     al,dx
c000ef85:	a8 20                	test   al,0x20
c000ef87:	74 fb                	je     c000ef84 <Dbg::logc(char)+0x9>
c000ef89:	ba f8 03 00 00       	mov    edx,0x3f8
c000ef8e:	88 c8                	mov    al,cl
c000ef90:	ee                   	out    dx,al
c000ef91:	c3                   	ret    

c000ef92 <Dbg::logs(char*)>:
c000ef92:	53                   	push   ebx
c000ef93:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ef97:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ef9a:	84 c0                	test   al,al
c000ef9c:	74 0f                	je     c000efad <Dbg::logs(char*)+0x1b>
c000ef9e:	50                   	push   eax
c000ef9f:	43                   	inc    ebx
c000efa0:	e8 d6 ff ff ff       	call   c000ef7b <Dbg::logc(char)>
c000efa5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000efa8:	5a                   	pop    edx
c000efa9:	84 c0                	test   al,al
c000efab:	75 f1                	jne    c000ef9e <Dbg::logs(char*)+0xc>
c000efad:	5b                   	pop    ebx
c000efae:	c3                   	ret    

c000efaf <Dbg::logWriteInt(unsigned int)>:
c000efaf:	83 ec 10             	sub    esp,0x10
c000efb2:	6a 0a                	push   0xa
c000efb4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000efb8:	50                   	push   eax
c000efb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efbd:	e8 58 ff ff ff       	call   c000ef1a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000efc2:	50                   	push   eax
c000efc3:	e8 ca ff ff ff       	call   c000ef92 <Dbg::logs(char*)>
c000efc8:	83 c4 20             	add    esp,0x20
c000efcb:	c3                   	ret    

c000efcc <Dbg::logWriteIntBase(unsigned int, int)>:
c000efcc:	83 ec 10             	sub    esp,0x10
c000efcf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efd3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000efd7:	50                   	push   eax
c000efd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efdc:	e8 39 ff ff ff       	call   c000ef1a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000efe1:	50                   	push   eax
c000efe2:	e8 ab ff ff ff       	call   c000ef92 <Dbg::logs(char*)>
c000efe7:	83 c4 20             	add    esp,0x20
c000efea:	c3                   	ret    

c000efeb <Dbg::kprintf(char const*, ...)>:
c000efeb:	55                   	push   ebp
c000efec:	57                   	push   edi
c000efed:	56                   	push   esi
c000efee:	53                   	push   ebx
c000efef:	83 ec 0c             	sub    esp,0xc
c000eff2:	8d 44 24 24          	lea    eax,[esp+0x24]
c000eff6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000effa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000effe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f001:	84 c0                	test   al,al
c000f003:	74 4a                	je     c000f04f <Dbg::kprintf(char const*, ...)+0x64>
c000f005:	31 db                	xor    ebx,ebx
c000f007:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000f00a:	3c 25                	cmp    al,0x25
c000f00c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000f00f:	0f 85 e4 00 00 00    	jne    c000f0f9 <Dbg::kprintf(char const*, ...)+0x10e>
c000f015:	83 c3 02             	add    ebx,0x2
c000f018:	8a 07                	mov    al,BYTE PTR [edi]
c000f01a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000f01d:	83 e8 25             	sub    eax,0x25
c000f020:	3c 53                	cmp    al,0x53
c000f022:	0f 87 ba 00 00 00    	ja     c000f0e2 <Dbg::kprintf(char const*, ...)+0xf7>
c000f028:	0f b6 c0             	movzx  eax,al
c000f02b:	ff 24 85 d4 0a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf52c]
c000f032:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f036:	89 c8                	mov    eax,ecx
c000f038:	83 c1 04             	add    ecx,0x4
c000f03b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f03f:	ff 30                	push   DWORD PTR [eax]
c000f041:	e8 4c ff ff ff       	call   c000ef92 <Dbg::logs(char*)>
c000f046:	58                   	pop    eax
c000f047:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f04b:	84 c0                	test   al,al
c000f04d:	75 b8                	jne    c000f007 <Dbg::kprintf(char const*, ...)+0x1c>
c000f04f:	83 c4 0c             	add    esp,0xc
c000f052:	5b                   	pop    ebx
c000f053:	5e                   	pop    esi
c000f054:	5f                   	pop    edi
c000f055:	5d                   	pop    ebp
c000f056:	c3                   	ret    
c000f057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f05b:	89 d0                	mov    eax,edx
c000f05d:	83 c2 04             	add    edx,0x4
c000f060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f064:	ff 30                	push   DWORD PTR [eax]
c000f066:	e8 44 ff ff ff       	call   c000efaf <Dbg::logWriteInt(unsigned int)>
c000f06b:	58                   	pop    eax
c000f06c:	eb d9                	jmp    c000f047 <Dbg::kprintf(char const*, ...)+0x5c>
c000f06e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f072:	89 d0                	mov    eax,edx
c000f074:	83 c2 04             	add    edx,0x4
c000f077:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f07a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f07e:	50                   	push   eax
c000f07f:	e8 f7 fe ff ff       	call   c000ef7b <Dbg::logc(char)>
c000f084:	58                   	pop    eax
c000f085:	eb c0                	jmp    c000f047 <Dbg::kprintf(char const*, ...)+0x5c>
c000f087:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f08b:	89 c8                	mov    eax,ecx
c000f08d:	83 c1 04             	add    ecx,0x4
c000f090:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f094:	ff 30                	push   DWORD PTR [eax]
c000f096:	e8 14 ff ff ff       	call   c000efaf <Dbg::logWriteInt(unsigned int)>
c000f09b:	5f                   	pop    edi
c000f09c:	eb a9                	jmp    c000f047 <Dbg::kprintf(char const*, ...)+0x5c>
c000f09e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0a2:	89 c8                	mov    eax,ecx
c000f0a4:	83 c1 04             	add    ecx,0x4
c000f0a7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f0ab:	6a 10                	push   0x10
c000f0ad:	ff 30                	push   DWORD PTR [eax]
c000f0af:	e8 18 ff ff ff       	call   c000efcc <Dbg::logWriteIntBase(unsigned int, int)>
c000f0b4:	59                   	pop    ecx
c000f0b5:	5f                   	pop    edi
c000f0b6:	eb 8f                	jmp    c000f047 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0bc:	89 d0                	mov    eax,edx
c000f0be:	83 c2 08             	add    edx,0x8
c000f0c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0c5:	6a 10                	push   0x10
c000f0c7:	ff 30                	push   DWORD PTR [eax]
c000f0c9:	e8 fe fe ff ff       	call   c000efcc <Dbg::logWriteIntBase(unsigned int, int)>
c000f0ce:	58                   	pop    eax
c000f0cf:	5a                   	pop    edx
c000f0d0:	e9 72 ff ff ff       	jmp    c000f047 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0d5:	6a 25                	push   0x25
c000f0d7:	e8 9f fe ff ff       	call   c000ef7b <Dbg::logc(char)>
c000f0dc:	58                   	pop    eax
c000f0dd:	e9 65 ff ff ff       	jmp    c000f047 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0e2:	6a 25                	push   0x25
c000f0e4:	e8 92 fe ff ff       	call   c000ef7b <Dbg::logc(char)>
c000f0e9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f0ec:	50                   	push   eax
c000f0ed:	e8 89 fe ff ff       	call   c000ef7b <Dbg::logc(char)>
c000f0f2:	5a                   	pop    edx
c000f0f3:	59                   	pop    ecx
c000f0f4:	e9 4e ff ff ff       	jmp    c000f047 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0f9:	50                   	push   eax
c000f0fa:	89 eb                	mov    ebx,ebp
c000f0fc:	e8 7a fe ff ff       	call   c000ef7b <Dbg::logc(char)>
c000f101:	89 fd                	mov    ebp,edi
c000f103:	58                   	pop    eax
c000f104:	e9 3e ff ff ff       	jmp    c000f047 <Dbg::kprintf(char const*, ...)+0x5c>
c000f109:	90                   	nop

c000f10a <File::read(unsigned long long, void*, int*)>:
c000f10a:	53                   	push   ebx
c000f10b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f10f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f113:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f11a:	3c 19                	cmp    al,0x19
c000f11c:	77 35                	ja     c000f153 <File::read(unsigned long long, void*, int*)+0x49>
c000f11e:	8b 04 85 20 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2e0]
c000f125:	85 c0                	test   eax,eax
c000f127:	74 2a                	je     c000f153 <File::read(unsigned long long, void*, int*)+0x49>
c000f129:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f12f:	85 c0                	test   eax,eax
c000f131:	74 20                	je     c000f153 <File::read(unsigned long long, void*, int*)+0x49>
c000f133:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f137:	74 21                	je     c000f15a <File::read(unsigned long long, void*, int*)+0x50>
c000f139:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f13b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f13f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f145:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f149:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f14d:	5b                   	pop    ebx
c000f14e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f151:	ff e0                	jmp    eax
c000f153:	b8 0b 00 00 00       	mov    eax,0xb
c000f158:	eb 05                	jmp    c000f15f <File::read(unsigned long long, void*, int*)+0x55>
c000f15a:	b8 05 00 00 00       	mov    eax,0x5
c000f15f:	5b                   	pop    ebx
c000f160:	c3                   	ret    
c000f161:	90                   	nop

c000f162 <File::write(unsigned long long, void*, int*)>:
c000f162:	53                   	push   ebx
c000f163:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f167:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f16b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f172:	3c 19                	cmp    al,0x19
c000f174:	77 35                	ja     c000f1ab <File::write(unsigned long long, void*, int*)+0x49>
c000f176:	8b 04 85 20 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2e0]
c000f17d:	85 c0                	test   eax,eax
c000f17f:	74 2a                	je     c000f1ab <File::write(unsigned long long, void*, int*)+0x49>
c000f181:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f187:	85 c0                	test   eax,eax
c000f189:	74 20                	je     c000f1ab <File::write(unsigned long long, void*, int*)+0x49>
c000f18b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f18f:	74 21                	je     c000f1b2 <File::write(unsigned long long, void*, int*)+0x50>
c000f191:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f193:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f197:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f19d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f1a5:	5b                   	pop    ebx
c000f1a6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f1a9:	ff e0                	jmp    eax
c000f1ab:	b8 0b 00 00 00       	mov    eax,0xb
c000f1b0:	eb 05                	jmp    c000f1b7 <File::write(unsigned long long, void*, int*)+0x55>
c000f1b2:	b8 05 00 00 00       	mov    eax,0x5
c000f1b7:	5b                   	pop    ebx
c000f1b8:	c3                   	ret    
c000f1b9:	90                   	nop

c000f1ba <Directory::read(unsigned long long, void*, int*)>:
c000f1ba:	53                   	push   ebx
c000f1bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1c3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f1ca:	3c 19                	cmp    al,0x19
c000f1cc:	77 35                	ja     c000f203 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f1ce:	8b 04 85 20 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2e0]
c000f1d5:	85 c0                	test   eax,eax
c000f1d7:	74 2a                	je     c000f203 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f1d9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f1df:	85 c0                	test   eax,eax
c000f1e1:	74 20                	je     c000f203 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f1e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f1e7:	74 21                	je     c000f20a <Directory::read(unsigned long long, void*, int*)+0x50>
c000f1e9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f1ef:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f1f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f1fd:	5b                   	pop    ebx
c000f1fe:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f201:	ff e0                	jmp    eax
c000f203:	b8 0b 00 00 00       	mov    eax,0xb
c000f208:	eb 05                	jmp    c000f20f <Directory::read(unsigned long long, void*, int*)+0x55>
c000f20a:	b8 05 00 00 00       	mov    eax,0x5
c000f20f:	5b                   	pop    ebx
c000f210:	c3                   	ret    
c000f211:	90                   	nop

c000f212 <Directory::write(unsigned long long, void*, int*)>:
c000f212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f216:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f21d:	b8 0b 00 00 00       	mov    eax,0xb
c000f222:	80 fa 19             	cmp    dl,0x19
c000f225:	77 18                	ja     c000f23f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f227:	8b 14 95 20 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2e0]
c000f22e:	85 d2                	test   edx,edx
c000f230:	74 0d                	je     c000f23f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f232:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f239:	19 c0                	sbb    eax,eax
c000f23b:	83 e0 0a             	and    eax,0xa
c000f23e:	40                   	inc    eax
c000f23f:	c3                   	ret    

c000f240 <File::isAtty()>:
c000f240:	31 c0                	xor    eax,eax
c000f242:	c3                   	ret    
c000f243:	90                   	nop

c000f244 <Directory::isAtty()>:
c000f244:	31 c0                	xor    eax,eax
c000f246:	c3                   	ret    
c000f247:	90                   	nop

c000f248 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f248:	b8 0a 00 00 00       	mov    eax,0xa
c000f24d:	c3                   	ret    

c000f24e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f24e:	b8 0a 00 00 00       	mov    eax,0xa
c000f253:	c3                   	ret    

c000f254 <File::~File()>:
c000f254:	83 ec 0c             	sub    esp,0xc
c000f257:	ba 90 0c 02 c0       	mov    edx,0xc0020c90
c000f25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f260:	89 10                	mov    DWORD PTR [eax],edx
c000f262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f266:	83 ec 0c             	sub    esp,0xc
c000f269:	50                   	push   eax
c000f26a:	e8 73 e8 ff ff       	call   c000dae2 <UnixFile::~UnixFile()>
c000f26f:	83 c4 10             	add    esp,0x10
c000f272:	90                   	nop
c000f273:	83 c4 0c             	add    esp,0xc
c000f276:	c3                   	ret    
c000f277:	90                   	nop

c000f278 <File::~File()>:
c000f278:	83 ec 0c             	sub    esp,0xc
c000f27b:	83 ec 0c             	sub    esp,0xc
c000f27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f282:	e8 cd ff ff ff       	call   c000f254 <File::~File()>
c000f287:	83 c4 10             	add    esp,0x10
c000f28a:	83 ec 08             	sub    esp,0x8
c000f28d:	68 14 01 00 00       	push   0x114
c000f292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f296:	e8 70 fc ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c000f29b:	83 c4 10             	add    esp,0x10
c000f29e:	83 c4 0c             	add    esp,0xc
c000f2a1:	c3                   	ret    

c000f2a2 <Directory::~Directory()>:
c000f2a2:	83 ec 0c             	sub    esp,0xc
c000f2a5:	ba ac 0c 02 c0       	mov    edx,0xc0020cac
c000f2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ae:	89 10                	mov    DWORD PTR [eax],edx
c000f2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2b4:	83 ec 0c             	sub    esp,0xc
c000f2b7:	50                   	push   eax
c000f2b8:	e8 25 e8 ff ff       	call   c000dae2 <UnixFile::~UnixFile()>
c000f2bd:	83 c4 10             	add    esp,0x10
c000f2c0:	90                   	nop
c000f2c1:	83 c4 0c             	add    esp,0xc
c000f2c4:	c3                   	ret    
c000f2c5:	90                   	nop

c000f2c6 <Directory::~Directory()>:
c000f2c6:	83 ec 0c             	sub    esp,0xc
c000f2c9:	83 ec 0c             	sub    esp,0xc
c000f2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2d0:	e8 cd ff ff ff       	call   c000f2a2 <Directory::~Directory()>
c000f2d5:	83 c4 10             	add    esp,0x10
c000f2d8:	83 ec 08             	sub    esp,0x8
c000f2db:	68 14 01 00 00       	push   0x114
c000f2e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2e4:	e8 22 fc ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c000f2e9:	83 c4 10             	add    esp,0x10
c000f2ec:	83 c4 0c             	add    esp,0xc
c000f2ef:	c3                   	ret    

c000f2f0 <Filesystem::Filesystem()>:
c000f2f0:	ba 2c 0c 02 c0       	mov    edx,0xc0020c2c
c000f2f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2f9:	89 10                	mov    DWORD PTR [eax],edx
c000f2fb:	8b 15 88 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023888
c000f301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f305:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f30c:	a3 88 38 02 c0       	mov    ds:0xc0023888,eax
c000f311:	90                   	nop
c000f312:	c3                   	ret    
c000f313:	90                   	nop

c000f314 <Filesystem::~Filesystem()>:
c000f314:	ba 2c 0c 02 c0       	mov    edx,0xc0020c2c
c000f319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31d:	89 10                	mov    DWORD PTR [eax],edx
c000f31f:	90                   	nop
c000f320:	c3                   	ret    
c000f321:	90                   	nop

c000f322 <Filesystem::~Filesystem()>:
c000f322:	83 ec 0c             	sub    esp,0xc
c000f325:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f329:	e8 e6 ff ff ff       	call   c000f314 <Filesystem::~Filesystem()>
c000f32e:	83 c4 04             	add    esp,0x4
c000f331:	83 ec 08             	sub    esp,0x8
c000f334:	6a 08                	push   0x8
c000f336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f33a:	e8 cc fb ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c000f33f:	83 c4 10             	add    esp,0x10
c000f342:	83 c4 0c             	add    esp,0xc
c000f345:	c3                   	ret    

c000f346 <initVFS()>:
c000f346:	83 ec 18             	sub    esp,0x18
c000f349:	6a 08                	push   0x8
c000f34b:	e8 ac fb ff ff       	call   c000eefc <operator new(unsigned long)>
c000f350:	89 04 24             	mov    DWORD PTR [esp],eax
c000f353:	e8 2a a9 00 00       	call   c0019c82 <FAT::FAT()>
c000f358:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f35f:	e8 98 fb ff ff       	call   c000eefc <operator new(unsigned long)>
c000f364:	89 04 24             	mov    DWORD PTR [esp],eax
c000f367:	e8 8c bb 00 00       	call   c001aef8 <ISO9660::ISO9660()>
c000f36c:	83 c4 1c             	add    esp,0x1c
c000f36f:	c3                   	ret    

c000f370 <standardiseFiles(char*, char const*, char const*)>:
c000f370:	55                   	push   ebp
c000f371:	57                   	push   edi
c000f372:	56                   	push   esi
c000f373:	53                   	push   ebx
c000f374:	81 ec 10 04 00 00    	sub    esp,0x410
c000f37a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f381:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f388:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f38f:	68 00 04 00 00       	push   0x400
c000f394:	6a 00                	push   0x0
c000f396:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f39a:	56                   	push   esi
c000f39b:	e8 68 12 ff ff       	call   c0000608 <memset>
c000f3a0:	83 c4 10             	add    esp,0x10
c000f3a3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f3a7:	75 0b                	jne    c000f3b4 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f3a9:	50                   	push   eax
c000f3aa:	50                   	push   eax
c000f3ab:	57                   	push   edi
c000f3ac:	56                   	push   esi
c000f3ad:	e8 f5 12 ff ff       	call   c00006a7 <strcpy>
c000f3b2:	eb 41                	jmp    c000f3f5 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f3b4:	8a 07                	mov    al,BYTE PTR [edi]
c000f3b6:	3c 5c                	cmp    al,0x5c
c000f3b8:	74 04                	je     c000f3be <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f3ba:	3c 2f                	cmp    al,0x2f
c000f3bc:	75 18                	jne    c000f3d6 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f3be:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f3c1:	3c 60                	cmp    al,0x60
c000f3c3:	7e 03                	jle    c000f3c8 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f3c5:	83 e8 20             	sub    eax,0x20
c000f3c8:	88 04 24             	mov    BYTE PTR [esp],al
c000f3cb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f3d2:	50                   	push   eax
c000f3d3:	50                   	push   eax
c000f3d4:	eb 18                	jmp    c000f3ee <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f3d6:	50                   	push   eax
c000f3d7:	50                   	push   eax
c000f3d8:	55                   	push   ebp
c000f3d9:	56                   	push   esi
c000f3da:	e8 c8 12 ff ff       	call   c00006a7 <strcpy>
c000f3df:	5a                   	pop    edx
c000f3e0:	59                   	pop    ecx
c000f3e1:	68 c5 1d 02 c0       	push   0xc0021dc5
c000f3e6:	56                   	push   esi
c000f3e7:	e8 72 13 ff ff       	call   c000075e <strcat>
c000f3ec:	5d                   	pop    ebp
c000f3ed:	58                   	pop    eax
c000f3ee:	57                   	push   edi
c000f3ef:	56                   	push   esi
c000f3f0:	e8 69 13 ff ff       	call   c000075e <strcat>
c000f3f5:	83 c4 10             	add    esp,0x10
c000f3f8:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f3fb:	3c 60                	cmp    al,0x60
c000f3fd:	7e 03                	jle    c000f402 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f3ff:	83 e8 20             	sub    eax,0x20
c000f402:	88 04 24             	mov    BYTE PTR [esp],al
c000f405:	88 03                	mov    BYTE PTR [ebx],al
c000f407:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f40e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f414:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f418:	bf 03 00 00 00       	mov    edi,0x3
c000f41d:	b8 03 00 00 00       	mov    eax,0x3
c000f422:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f425:	84 d2                	test   dl,dl
c000f427:	0f 84 91 00 00 00    	je     c000f4be <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f42d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f430:	80 fa 5c             	cmp    dl,0x5c
c000f433:	74 05                	je     c000f43a <standardiseFiles(char*, char const*, char const*)+0xca>
c000f435:	80 fa 2f             	cmp    dl,0x2f
c000f438:	75 12                	jne    c000f44c <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f43a:	89 c5                	mov    ebp,eax
c000f43c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f441:	74 09                	je     c000f44c <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f443:	40                   	inc    eax
c000f444:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f448:	89 cf                	mov    edi,ecx
c000f44a:	eb d6                	jmp    c000f422 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f44c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f451:	75 5b                	jne    c000f4ae <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f453:	80 fa 2e             	cmp    dl,0x2e
c000f456:	75 56                	jne    c000f4ae <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f458:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f45c:	74 19                	je     c000f477 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f45e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f463:	74 53                	je     c000f4b8 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f465:	89 f9                	mov    ecx,edi
c000f467:	41                   	inc    ecx
c000f468:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f46b:	80 fa 2f             	cmp    dl,0x2f
c000f46e:	74 f7                	je     c000f467 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f470:	80 fa 5c             	cmp    dl,0x5c
c000f473:	74 f2                	je     c000f467 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f475:	eb d1                	jmp    c000f448 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f477:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f47c:	74 3a                	je     c000f4b8 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f47e:	83 f8 03             	cmp    eax,0x3
c000f481:	74 c5                	je     c000f448 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f483:	41                   	inc    ecx
c000f484:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f487:	80 fa 2f             	cmp    dl,0x2f
c000f48a:	74 f7                	je     c000f483 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f48c:	80 fa 5c             	cmp    dl,0x5c
c000f48f:	74 f2                	je     c000f483 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f491:	48                   	dec    eax
c000f492:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f496:	75 06                	jne    c000f49e <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f498:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f49c:	eb f3                	jmp    c000f491 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f49e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f4a2:	74 07                	je     c000f4ab <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f4a4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4a8:	48                   	dec    eax
c000f4a9:	eb f3                	jmp    c000f49e <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f4ab:	40                   	inc    eax
c000f4ac:	eb 9a                	jmp    c000f448 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4ae:	80 fa 2f             	cmp    dl,0x2f
c000f4b1:	74 95                	je     c000f448 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4b3:	80 fa 5c             	cmp    dl,0x5c
c000f4b6:	74 90                	je     c000f448 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4b8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f4bb:	40                   	inc    eax
c000f4bc:	eb 8a                	jmp    c000f448 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4be:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4c2:	83 ec 0c             	sub    esp,0xc
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 5a 11 ff ff       	call   c0000625 <strlen>
c000f4cb:	83 c4 10             	add    esp,0x10
c000f4ce:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f4d3:	75 26                	jne    c000f4fb <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f4d5:	83 ec 0c             	sub    esp,0xc
c000f4d8:	53                   	push   ebx
c000f4d9:	e8 47 11 ff ff       	call   c0000625 <strlen>
c000f4de:	83 c4 10             	add    esp,0x10
c000f4e1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f4e6:	74 26                	je     c000f50e <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f4e8:	83 ec 0c             	sub    esp,0xc
c000f4eb:	53                   	push   ebx
c000f4ec:	e8 34 11 ff ff       	call   c0000625 <strlen>
c000f4f1:	83 c4 10             	add    esp,0x10
c000f4f4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f4f9:	eb c7                	jmp    c000f4c2 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f4fb:	83 ec 0c             	sub    esp,0xc
c000f4fe:	53                   	push   ebx
c000f4ff:	e8 21 11 ff ff       	call   c0000625 <strlen>
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f50c:	74 c7                	je     c000f4d5 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f50e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f514:	5b                   	pop    ebx
c000f515:	5e                   	pop    esi
c000f516:	5f                   	pop    edi
c000f517:	5d                   	pop    ebp
c000f518:	c3                   	ret    
c000f519:	90                   	nop

c000f51a <File::File(char const*, Process*)>:
c000f51a:	83 ec 0c             	sub    esp,0xc
c000f51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f521:	83 ec 08             	sub    esp,0x8
c000f524:	6a 00                	push   0x0
c000f526:	50                   	push   eax
c000f527:	e8 1e e4 ff ff       	call   c000d94a <UnixFile::UnixFile(int)>
c000f52c:	83 c4 10             	add    esp,0x10
c000f52f:	ba 90 0c 02 c0       	mov    edx,0xc0020c90
c000f534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f538:	89 10                	mov    DWORD PTR [eax],edx
c000f53a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f53e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f548:	83 c0 0d             	add    eax,0xd
c000f54b:	83 ec 04             	sub    esp,0x4
c000f54e:	52                   	push   edx
c000f54f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f553:	50                   	push   eax
c000f554:	e8 17 fe ff ff       	call   c000f370 <standardiseFiles(char*, char const*, char const*)>
c000f559:	83 c4 10             	add    esp,0x10
c000f55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f560:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f563:	8d 50 bf             	lea    edx,[eax-0x41]
c000f566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f56a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f574:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f578:	90                   	nop
c000f579:	83 c4 0c             	add    esp,0xc
c000f57c:	c3                   	ret    
c000f57d:	90                   	nop

c000f57e <File::open(FileOpenMode)>:
c000f57e:	53                   	push   ebx
c000f57f:	b8 0b 00 00 00       	mov    eax,0xb
c000f584:	83 ec 08             	sub    esp,0x8
c000f587:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f58b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f592:	80 fa 19             	cmp    dl,0x19
c000f595:	77 40                	ja     c000f5d7 <File::open(FileOpenMode)+0x59>
c000f597:	8b 14 95 20 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2e0]
c000f59e:	85 d2                	test   edx,edx
c000f5a0:	74 35                	je     c000f5d7 <File::open(FileOpenMode)+0x59>
c000f5a2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f5a8:	85 d2                	test   edx,edx
c000f5aa:	74 2b                	je     c000f5d7 <File::open(FileOpenMode)+0x59>
c000f5ac:	b8 06 00 00 00       	mov    eax,0x6
c000f5b1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f5b5:	75 20                	jne    c000f5d7 <File::open(FileOpenMode)+0x59>
c000f5b7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f5b9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f5bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f5c3:	51                   	push   ecx
c000f5c4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f5c7:	51                   	push   ecx
c000f5c8:	52                   	push   edx
c000f5c9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f5cc:	83 c4 10             	add    esp,0x10
c000f5cf:	85 c0                	test   eax,eax
c000f5d1:	75 04                	jne    c000f5d7 <File::open(FileOpenMode)+0x59>
c000f5d3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f5d7:	83 c4 08             	add    esp,0x8
c000f5da:	5b                   	pop    ebx
c000f5db:	c3                   	ret    

c000f5dc <File::close()>:
c000f5dc:	53                   	push   ebx
c000f5dd:	b8 0b 00 00 00       	mov    eax,0xb
c000f5e2:	83 ec 08             	sub    esp,0x8
c000f5e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f5e9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f5f0:	80 fa 19             	cmp    dl,0x19
c000f5f3:	77 41                	ja     c000f636 <File::close()+0x5a>
c000f5f5:	8b 1c 95 20 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc2e0]
c000f5fc:	85 db                	test   ebx,ebx
c000f5fe:	74 36                	je     c000f636 <File::close()+0x5a>
c000f600:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f607:	74 2d                	je     c000f636 <File::close()+0x5a>
c000f609:	b8 05 00 00 00       	mov    eax,0x5
c000f60e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f612:	74 22                	je     c000f636 <File::close()+0x5a>
c000f614:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f618:	8b 04 95 20 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc2e0]
c000f61f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f625:	53                   	push   ebx
c000f626:	53                   	push   ebx
c000f627:	8b 10                	mov    edx,DWORD PTR [eax]
c000f629:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f62f:	50                   	push   eax
c000f630:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f633:	83 c4 10             	add    esp,0x10
c000f636:	83 c4 08             	add    esp,0x8
c000f639:	5b                   	pop    ebx
c000f63a:	c3                   	ret    
c000f63b:	90                   	nop

c000f63c <File::seek(unsigned long long)>:
c000f63c:	56                   	push   esi
c000f63d:	53                   	push   ebx
c000f63e:	b8 0b 00 00 00       	mov    eax,0xb
c000f643:	51                   	push   ecx
c000f644:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f648:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f64c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f653:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f657:	80 fa 19             	cmp    dl,0x19
c000f65a:	77 31                	ja     c000f68d <File::seek(unsigned long long)+0x51>
c000f65c:	8b 14 95 20 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2e0]
c000f663:	85 d2                	test   edx,edx
c000f665:	74 26                	je     c000f68d <File::seek(unsigned long long)+0x51>
c000f667:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f66d:	85 d2                	test   edx,edx
c000f66f:	74 1c                	je     c000f68d <File::seek(unsigned long long)+0x51>
c000f671:	b8 05 00 00 00       	mov    eax,0x5
c000f676:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f67a:	74 11                	je     c000f68d <File::seek(unsigned long long)+0x51>
c000f67c:	8b 02                	mov    eax,DWORD PTR [edx]
c000f67e:	53                   	push   ebx
c000f67f:	51                   	push   ecx
c000f680:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f686:	52                   	push   edx
c000f687:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f68a:	83 c4 10             	add    esp,0x10
c000f68d:	5a                   	pop    edx
c000f68e:	5b                   	pop    ebx
c000f68f:	5e                   	pop    esi
c000f690:	c3                   	ret    
c000f691:	90                   	nop

c000f692 <File::tell(unsigned long long*)>:
c000f692:	83 ec 0c             	sub    esp,0xc
c000f695:	b8 0b 00 00 00       	mov    eax,0xb
c000f69a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f69e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f6a5:	80 fa 19             	cmp    dl,0x19
c000f6a8:	77 34                	ja     c000f6de <File::tell(unsigned long long*)+0x4c>
c000f6aa:	8b 14 95 20 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2e0]
c000f6b1:	85 d2                	test   edx,edx
c000f6b3:	74 29                	je     c000f6de <File::tell(unsigned long long*)+0x4c>
c000f6b5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6bb:	85 d2                	test   edx,edx
c000f6bd:	74 1f                	je     c000f6de <File::tell(unsigned long long*)+0x4c>
c000f6bf:	b8 05 00 00 00       	mov    eax,0x5
c000f6c4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f6c8:	74 14                	je     c000f6de <File::tell(unsigned long long*)+0x4c>
c000f6ca:	50                   	push   eax
c000f6cb:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f6d1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f6d7:	52                   	push   edx
c000f6d8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f6db:	83 c4 10             	add    esp,0x10
c000f6de:	83 c4 0c             	add    esp,0xc
c000f6e1:	c3                   	ret    

c000f6e2 <File::rewind()>:
c000f6e2:	83 ec 10             	sub    esp,0x10
c000f6e5:	6a 00                	push   0x0
c000f6e7:	6a 00                	push   0x0
c000f6e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6ed:	e8 4a ff ff ff       	call   c000f63c <File::seek(unsigned long long)>
c000f6f2:	83 c4 1c             	add    esp,0x1c
c000f6f5:	c3                   	ret    

c000f6f6 <File::unlink()>:
c000f6f6:	83 ec 0c             	sub    esp,0xc
c000f6f9:	b8 0b 00 00 00       	mov    eax,0xb
c000f6fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f702:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f709:	80 f9 19             	cmp    cl,0x19
c000f70c:	77 2f                	ja     c000f73d <File::unlink()+0x47>
c000f70e:	8b 0c 8d 20 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2e0]
c000f715:	85 c9                	test   ecx,ecx
c000f717:	74 24                	je     c000f73d <File::unlink()+0x47>
c000f719:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f71f:	85 c9                	test   ecx,ecx
c000f721:	74 1a                	je     c000f73d <File::unlink()+0x47>
c000f723:	b8 06 00 00 00       	mov    eax,0x6
c000f728:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f72c:	75 0f                	jne    c000f73d <File::unlink()+0x47>
c000f72e:	83 c2 0d             	add    edx,0xd
c000f731:	50                   	push   eax
c000f732:	50                   	push   eax
c000f733:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f735:	52                   	push   edx
c000f736:	51                   	push   ecx
c000f737:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f73a:	83 c4 10             	add    esp,0x10
c000f73d:	83 c4 0c             	add    esp,0xc
c000f740:	c3                   	ret    
c000f741:	90                   	nop

c000f742 <File::rename(char const*)>:
c000f742:	83 ec 0c             	sub    esp,0xc
c000f745:	b8 0b 00 00 00       	mov    eax,0xb
c000f74a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f74e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f755:	80 f9 19             	cmp    cl,0x19
c000f758:	77 32                	ja     c000f78c <File::rename(char const*)+0x4a>
c000f75a:	8b 0c 8d 20 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2e0]
c000f761:	85 c9                	test   ecx,ecx
c000f763:	74 27                	je     c000f78c <File::rename(char const*)+0x4a>
c000f765:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f76b:	85 c9                	test   ecx,ecx
c000f76d:	74 1d                	je     c000f78c <File::rename(char const*)+0x4a>
c000f76f:	b8 06 00 00 00       	mov    eax,0x6
c000f774:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f778:	75 12                	jne    c000f78c <File::rename(char const*)+0x4a>
c000f77a:	83 c2 0d             	add    edx,0xd
c000f77d:	50                   	push   eax
c000f77e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f780:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f784:	52                   	push   edx
c000f785:	51                   	push   ecx
c000f786:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	83 c4 0c             	add    esp,0xc
c000f78f:	c3                   	ret    

c000f790 <File::chfatattr(unsigned char, unsigned char)>:
c000f790:	57                   	push   edi
c000f791:	b8 0b 00 00 00       	mov    eax,0xb
c000f796:	56                   	push   esi
c000f797:	53                   	push   ebx
c000f798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f79c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f7a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f7a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f7ab:	80 f9 19             	cmp    cl,0x19
c000f7ae:	77 37                	ja     c000f7e7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7b0:	8b 0c 8d 20 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2e0]
c000f7b7:	85 c9                	test   ecx,ecx
c000f7b9:	74 2c                	je     c000f7e7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7bb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f7c1:	85 c9                	test   ecx,ecx
c000f7c3:	74 22                	je     c000f7e7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7c5:	b8 06 00 00 00       	mov    eax,0x6
c000f7ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f7ce:	75 17                	jne    c000f7e7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7d0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f7d2:	89 f0                	mov    eax,esi
c000f7d4:	83 c2 0d             	add    edx,0xd
c000f7d7:	0f b6 f0             	movzx  esi,al
c000f7da:	0f b6 db             	movzx  ebx,bl
c000f7dd:	56                   	push   esi
c000f7de:	53                   	push   ebx
c000f7df:	52                   	push   edx
c000f7e0:	51                   	push   ecx
c000f7e1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f7e4:	83 c4 10             	add    esp,0x10
c000f7e7:	5b                   	pop    ebx
c000f7e8:	5e                   	pop    esi
c000f7e9:	5f                   	pop    edi
c000f7ea:	c3                   	ret    
c000f7eb:	90                   	nop

c000f7ec <File::exists()>:
c000f7ec:	83 ec 0c             	sub    esp,0xc
c000f7ef:	31 c0                	xor    eax,eax
c000f7f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f7f5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f7fc:	80 f9 19             	cmp    cl,0x19
c000f7ff:	77 24                	ja     c000f825 <File::exists()+0x39>
c000f801:	8b 0c 8d 20 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2e0]
c000f808:	85 c9                	test   ecx,ecx
c000f80a:	74 19                	je     c000f825 <File::exists()+0x39>
c000f80c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f812:	85 c9                	test   ecx,ecx
c000f814:	74 0f                	je     c000f825 <File::exists()+0x39>
c000f816:	83 c2 0d             	add    edx,0xd
c000f819:	50                   	push   eax
c000f81a:	50                   	push   eax
c000f81b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f81d:	52                   	push   edx
c000f81e:	51                   	push   ecx
c000f81f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f822:	83 c4 10             	add    esp,0x10
c000f825:	83 c4 0c             	add    esp,0xc
c000f828:	c3                   	ret    
c000f829:	90                   	nop

c000f82a <File::stat(unsigned long long*, bool*)>:
c000f82a:	56                   	push   esi
c000f82b:	53                   	push   ebx
c000f82c:	50                   	push   eax
c000f82d:	b8 0b 00 00 00       	mov    eax,0xb
c000f832:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f836:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f83a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f841:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f845:	80 f9 19             	cmp    cl,0x19
c000f848:	77 3d                	ja     c000f887 <File::stat(unsigned long long*, bool*)+0x5d>
c000f84a:	8b 0c 8d 20 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2e0]
c000f851:	85 c9                	test   ecx,ecx
c000f853:	74 32                	je     c000f887 <File::stat(unsigned long long*, bool*)+0x5d>
c000f855:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f85b:	85 c9                	test   ecx,ecx
c000f85d:	74 28                	je     c000f887 <File::stat(unsigned long long*, bool*)+0x5d>
c000f85f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f861:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f865:	74 13                	je     c000f87a <File::stat(unsigned long long*, bool*)+0x50>
c000f867:	83 ec 04             	sub    esp,0x4
c000f86a:	56                   	push   esi
c000f86b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f871:	51                   	push   ecx
c000f872:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f875:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f878:	eb 0a                	jmp    c000f884 <File::stat(unsigned long long*, bool*)+0x5a>
c000f87a:	53                   	push   ebx
c000f87b:	83 c2 0d             	add    edx,0xd
c000f87e:	56                   	push   esi
c000f87f:	52                   	push   edx
c000f880:	51                   	push   ecx
c000f881:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f884:	83 c4 10             	add    esp,0x10
c000f887:	5a                   	pop    edx
c000f888:	5b                   	pop    ebx
c000f889:	5e                   	pop    esi
c000f88a:	c3                   	ret    

c000f88b <getcwd(Process*, char*, int)>:
c000f88b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f88f:	31 c0                	xor    eax,eax
c000f891:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f894:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f898:	7d 15                	jge    c000f8af <getcwd(Process*, char*, int)+0x24>
c000f89a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f89e:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f8a5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f8a8:	84 c9                	test   cl,cl
c000f8aa:	74 06                	je     c000f8b2 <getcwd(Process*, char*, int)+0x27>
c000f8ac:	40                   	inc    eax
c000f8ad:	eb e2                	jmp    c000f891 <getcwd(Process*, char*, int)+0x6>
c000f8af:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f8b2:	31 c0                	xor    eax,eax
c000f8b4:	c3                   	ret    

c000f8b5 <setcwd(Process*, char*)>:
c000f8b5:	55                   	push   ebp
c000f8b6:	57                   	push   edi
c000f8b7:	56                   	push   esi
c000f8b8:	53                   	push   ebx
c000f8b9:	81 ec 20 02 00 00    	sub    esp,0x220
c000f8bf:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f8c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f8cc:	57                   	push   edi
c000f8cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f8d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f8d8:	56                   	push   esi
c000f8d9:	e8 92 fa ff ff       	call   c000f370 <standardiseFiles(char*, char const*, char const*)>
c000f8de:	89 34 24             	mov    DWORD PTR [esp],esi
c000f8e1:	e8 3f 0d ff ff       	call   c0000625 <strlen>
c000f8e6:	83 c4 10             	add    esp,0x10
c000f8e9:	83 f8 02             	cmp    eax,0x2
c000f8ec:	77 17                	ja     c000f905 <setcwd(Process*, char*)+0x50>
c000f8ee:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f8f3:	83 e8 41             	sub    eax,0x41
c000f8f6:	83 f8 19             	cmp    eax,0x19
c000f8f9:	76 24                	jbe    c000f91f <setcwd(Process*, char*)+0x6a>
c000f8fb:	b8 03 00 00 00       	mov    eax,0x3
c000f900:	e9 cb 00 00 00       	jmp    c000f9d0 <setcwd(Process*, char*)+0x11b>
c000f905:	83 ec 0c             	sub    esp,0xc
c000f908:	56                   	push   esi
c000f909:	e8 17 0d ff ff       	call   c0000625 <strlen>
c000f90e:	83 c4 10             	add    esp,0x10
c000f911:	83 f8 03             	cmp    eax,0x3
c000f914:	75 33                	jne    c000f949 <setcwd(Process*, char*)+0x94>
c000f916:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f91b:	75 2c                	jne    c000f949 <setcwd(Process*, char*)+0x94>
c000f91d:	eb cf                	jmp    c000f8ee <setcwd(Process*, char*)+0x39>
c000f91f:	8b 14 85 20 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc2e0]
c000f926:	b8 05 00 00 00       	mov    eax,0x5
c000f92b:	85 d2                	test   edx,edx
c000f92d:	0f 84 9d 00 00 00    	je     c000f9d0 <setcwd(Process*, char*)+0x11b>
c000f933:	b8 06 00 00 00       	mov    eax,0x6
c000f938:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f93f:	0f 84 8b 00 00 00    	je     c000f9d0 <setcwd(Process*, char*)+0x11b>
c000f945:	51                   	push   ecx
c000f946:	51                   	push   ecx
c000f947:	eb 7b                	jmp    c000f9c4 <setcwd(Process*, char*)+0x10f>
c000f949:	83 ec 0c             	sub    esp,0xc
c000f94c:	68 14 01 00 00       	push   0x114
c000f951:	e8 a6 f5 ff ff       	call   c000eefc <operator new(unsigned long)>
c000f956:	83 c4 0c             	add    esp,0xc
c000f959:	89 c3                	mov    ebx,eax
c000f95b:	55                   	push   ebp
c000f95c:	56                   	push   esi
c000f95d:	50                   	push   eax
c000f95e:	e8 b7 fb ff ff       	call   c000f51a <File::File(char const*, Process*)>
c000f963:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f968:	83 c4 0c             	add    esp,0xc
c000f96b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f96f:	50                   	push   eax
c000f970:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f974:	50                   	push   eax
c000f975:	53                   	push   ebx
c000f976:	e8 af fe ff ff       	call   c000f82a <File::stat(unsigned long long*, bool*)>
c000f97b:	83 c4 10             	add    esp,0x10
c000f97e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f980:	83 f8 02             	cmp    eax,0x2
c000f983:	75 09                	jne    c000f98e <setcwd(Process*, char*)+0xd9>
c000f985:	83 ec 0c             	sub    esp,0xc
c000f988:	53                   	push   ebx
c000f989:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f98c:	eb 0d                	jmp    c000f99b <setcwd(Process*, char*)+0xe6>
c000f98e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f991:	85 c0                	test   eax,eax
c000f993:	74 10                	je     c000f9a5 <setcwd(Process*, char*)+0xf0>
c000f995:	83 ec 0c             	sub    esp,0xc
c000f998:	53                   	push   ebx
c000f999:	ff d2                	call   edx
c000f99b:	83 c4 10             	add    esp,0x10
c000f99e:	b8 01 00 00 00       	mov    eax,0x1
c000f9a3:	eb 2b                	jmp    c000f9d0 <setcwd(Process*, char*)+0x11b>
c000f9a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f9aa:	75 10                	jne    c000f9bc <setcwd(Process*, char*)+0x107>
c000f9ac:	83 ec 0c             	sub    esp,0xc
c000f9af:	53                   	push   ebx
c000f9b0:	ff d2                	call   edx
c000f9b2:	83 c4 10             	add    esp,0x10
c000f9b5:	b8 02 00 00 00       	mov    eax,0x2
c000f9ba:	eb 14                	jmp    c000f9d0 <setcwd(Process*, char*)+0x11b>
c000f9bc:	83 ec 0c             	sub    esp,0xc
c000f9bf:	53                   	push   ebx
c000f9c0:	ff d2                	call   edx
c000f9c2:	58                   	pop    eax
c000f9c3:	5a                   	pop    edx
c000f9c4:	56                   	push   esi
c000f9c5:	57                   	push   edi
c000f9c6:	e8 dc 0c ff ff       	call   c00006a7 <strcpy>
c000f9cb:	83 c4 10             	add    esp,0x10
c000f9ce:	31 c0                	xor    eax,eax
c000f9d0:	81 c4 1c 02 00 00    	add    esp,0x21c
c000f9d6:	5b                   	pop    ebx
c000f9d7:	5e                   	pop    esi
c000f9d8:	5f                   	pop    edi
c000f9d9:	5d                   	pop    ebp
c000f9da:	c3                   	ret    
c000f9db:	90                   	nop

c000f9dc <Directory::Directory(char const*, Process*)>:
c000f9dc:	83 ec 0c             	sub    esp,0xc
c000f9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9e3:	83 ec 08             	sub    esp,0x8
c000f9e6:	6a 00                	push   0x0
c000f9e8:	50                   	push   eax
c000f9e9:	e8 5c df ff ff       	call   c000d94a <UnixFile::UnixFile(int)>
c000f9ee:	83 c4 10             	add    esp,0x10
c000f9f1:	ba ac 0c 02 c0       	mov    edx,0xc0020cac
c000f9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9fa:	89 10                	mov    DWORD PTR [eax],edx
c000f9fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa00:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fa06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa0a:	83 c0 0d             	add    eax,0xd
c000fa0d:	83 ec 04             	sub    esp,0x4
c000fa10:	52                   	push   edx
c000fa11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa15:	50                   	push   eax
c000fa16:	e8 55 f9 ff ff       	call   c000f370 <standardiseFiles(char*, char const*, char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa22:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fa25:	8d 50 bf             	lea    edx,[eax-0x41]
c000fa28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa2c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa36:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fa3a:	90                   	nop
c000fa3b:	83 c4 0c             	add    esp,0xc
c000fa3e:	c3                   	ret    
c000fa3f:	90                   	nop

c000fa40 <Directory::open()>:
c000fa40:	53                   	push   ebx
c000fa41:	b8 0b 00 00 00       	mov    eax,0xb
c000fa46:	83 ec 08             	sub    esp,0x8
c000fa49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa4d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fa54:	80 fa 19             	cmp    dl,0x19
c000fa57:	77 3d                	ja     c000fa96 <Directory::open()+0x56>
c000fa59:	8b 14 95 20 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2e0]
c000fa60:	85 d2                	test   edx,edx
c000fa62:	74 32                	je     c000fa96 <Directory::open()+0x56>
c000fa64:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fa6a:	85 d2                	test   edx,edx
c000fa6c:	74 28                	je     c000fa96 <Directory::open()+0x56>
c000fa6e:	b8 06 00 00 00       	mov    eax,0x6
c000fa73:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fa77:	75 1d                	jne    c000fa96 <Directory::open()+0x56>
c000fa79:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fa7f:	50                   	push   eax
c000fa80:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa82:	51                   	push   ecx
c000fa83:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fa86:	51                   	push   ecx
c000fa87:	52                   	push   edx
c000fa88:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fa8b:	83 c4 10             	add    esp,0x10
c000fa8e:	85 c0                	test   eax,eax
c000fa90:	75 04                	jne    c000fa96 <Directory::open()+0x56>
c000fa92:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fa96:	83 c4 08             	add    esp,0x8
c000fa99:	5b                   	pop    ebx
c000fa9a:	c3                   	ret    
c000fa9b:	90                   	nop

c000fa9c <Directory::close()>:
c000fa9c:	53                   	push   ebx
c000fa9d:	b8 0b 00 00 00       	mov    eax,0xb
c000faa2:	83 ec 08             	sub    esp,0x8
c000faa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000faa9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fab0:	80 fa 19             	cmp    dl,0x19
c000fab3:	77 41                	ja     c000faf6 <Directory::close()+0x5a>
c000fab5:	8b 1c 95 20 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc2e0]
c000fabc:	85 db                	test   ebx,ebx
c000fabe:	74 36                	je     c000faf6 <Directory::close()+0x5a>
c000fac0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fac7:	74 2d                	je     c000faf6 <Directory::close()+0x5a>
c000fac9:	b8 05 00 00 00       	mov    eax,0x5
c000face:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fad2:	74 22                	je     c000faf6 <Directory::close()+0x5a>
c000fad4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fad8:	8b 04 95 20 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc2e0]
c000fadf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fae5:	53                   	push   ebx
c000fae6:	53                   	push   ebx
c000fae7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fae9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000faef:	50                   	push   eax
c000faf0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	83 c4 08             	add    esp,0x8
c000faf9:	5b                   	pop    ebx
c000fafa:	c3                   	ret    
c000fafb:	90                   	nop

c000fafc <Directory::unlink()>:
c000fafc:	83 ec 0c             	sub    esp,0xc
c000faff:	b8 0b 00 00 00       	mov    eax,0xb
c000fb04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb0f:	80 f9 19             	cmp    cl,0x19
c000fb12:	77 2f                	ja     c000fb43 <Directory::unlink()+0x47>
c000fb14:	8b 0c 8d 20 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2e0]
c000fb1b:	85 c9                	test   ecx,ecx
c000fb1d:	74 24                	je     c000fb43 <Directory::unlink()+0x47>
c000fb1f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb25:	85 c9                	test   ecx,ecx
c000fb27:	74 1a                	je     c000fb43 <Directory::unlink()+0x47>
c000fb29:	b8 06 00 00 00       	mov    eax,0x6
c000fb2e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fb32:	75 0f                	jne    c000fb43 <Directory::unlink()+0x47>
c000fb34:	83 c2 0d             	add    edx,0xd
c000fb37:	50                   	push   eax
c000fb38:	50                   	push   eax
c000fb39:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb3b:	52                   	push   edx
c000fb3c:	51                   	push   ecx
c000fb3d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	83 c4 0c             	add    esp,0xc
c000fb46:	c3                   	ret    
c000fb47:	90                   	nop

c000fb48 <Directory::rename(char const*)>:
c000fb48:	83 ec 0c             	sub    esp,0xc
c000fb4b:	b8 0b 00 00 00       	mov    eax,0xb
c000fb50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb54:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb5b:	80 f9 19             	cmp    cl,0x19
c000fb5e:	77 32                	ja     c000fb92 <Directory::rename(char const*)+0x4a>
c000fb60:	8b 0c 8d 20 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2e0]
c000fb67:	85 c9                	test   ecx,ecx
c000fb69:	74 27                	je     c000fb92 <Directory::rename(char const*)+0x4a>
c000fb6b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb71:	85 c9                	test   ecx,ecx
c000fb73:	74 1d                	je     c000fb92 <Directory::rename(char const*)+0x4a>
c000fb75:	b8 06 00 00 00       	mov    eax,0x6
c000fb7a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fb7e:	75 12                	jne    c000fb92 <Directory::rename(char const*)+0x4a>
c000fb80:	83 c2 0d             	add    edx,0xd
c000fb83:	50                   	push   eax
c000fb84:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb8a:	52                   	push   edx
c000fb8b:	51                   	push   ecx
c000fb8c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fb8f:	83 c4 10             	add    esp,0x10
c000fb92:	83 c4 0c             	add    esp,0xc
c000fb95:	c3                   	ret    

c000fb96 <Directory::exists()>:
c000fb96:	83 ec 0c             	sub    esp,0xc
c000fb99:	31 c0                	xor    eax,eax
c000fb9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb9f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fba6:	80 f9 19             	cmp    cl,0x19
c000fba9:	77 24                	ja     c000fbcf <Directory::exists()+0x39>
c000fbab:	8b 0c 8d 20 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2e0]
c000fbb2:	85 c9                	test   ecx,ecx
c000fbb4:	74 19                	je     c000fbcf <Directory::exists()+0x39>
c000fbb6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fbbc:	85 c9                	test   ecx,ecx
c000fbbe:	74 0f                	je     c000fbcf <Directory::exists()+0x39>
c000fbc0:	83 c2 0d             	add    edx,0xd
c000fbc3:	50                   	push   eax
c000fbc4:	50                   	push   eax
c000fbc5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fbc7:	52                   	push   edx
c000fbc8:	51                   	push   ecx
c000fbc9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fbcc:	83 c4 10             	add    esp,0x10
c000fbcf:	83 c4 0c             	add    esp,0xc
c000fbd2:	c3                   	ret    
c000fbd3:	90                   	nop

c000fbd4 <Directory::read(dirent*)>:
c000fbd4:	83 ec 1c             	sub    esp,0x1c
c000fbd7:	b8 0b 00 00 00       	mov    eax,0xb
c000fbdc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fbe0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fbe7:	80 fa 19             	cmp    dl,0x19
c000fbea:	77 30                	ja     c000fc1c <Directory::read(dirent*)+0x48>
c000fbec:	8b 14 95 20 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2e0]
c000fbf3:	85 d2                	test   edx,edx
c000fbf5:	74 25                	je     c000fc1c <Directory::read(dirent*)+0x48>
c000fbf7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fbfe:	74 1c                	je     c000fc1c <Directory::read(dirent*)+0x48>
c000fc00:	83 ec 0c             	sub    esp,0xc
c000fc03:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc05:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fc09:	52                   	push   edx
c000fc0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fc0e:	6a 00                	push   0x0
c000fc10:	68 10 01 00 00       	push   0x110
c000fc15:	51                   	push   ecx
c000fc16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fc19:	83 c4 20             	add    esp,0x20
c000fc1c:	83 c4 1c             	add    esp,0x1c
c000fc1f:	c3                   	ret    

c000fc20 <Directory::create()>:
c000fc20:	83 ec 0c             	sub    esp,0xc
c000fc23:	b8 0b 00 00 00       	mov    eax,0xb
c000fc28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc2c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc33:	80 f9 19             	cmp    cl,0x19
c000fc36:	77 2f                	ja     c000fc67 <Directory::create()+0x47>
c000fc38:	8b 0c 8d 20 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2e0]
c000fc3f:	85 c9                	test   ecx,ecx
c000fc41:	74 24                	je     c000fc67 <Directory::create()+0x47>
c000fc43:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc49:	85 c9                	test   ecx,ecx
c000fc4b:	74 1a                	je     c000fc67 <Directory::create()+0x47>
c000fc4d:	b8 06 00 00 00       	mov    eax,0x6
c000fc52:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc56:	75 0f                	jne    c000fc67 <Directory::create()+0x47>
c000fc58:	83 c2 0d             	add    edx,0xd
c000fc5b:	50                   	push   eax
c000fc5c:	50                   	push   eax
c000fc5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc5f:	52                   	push   edx
c000fc60:	51                   	push   ecx
c000fc61:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fc64:	83 c4 10             	add    esp,0x10
c000fc67:	83 c4 0c             	add    esp,0xc
c000fc6a:	c3                   	ret    
c000fc6b:	90                   	nop

c000fc6c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fc6c:	b8 0a 00 00 00       	mov    eax,0xa
c000fc71:	c3                   	ret    

c000fc72 <Bus::Bus(char const*)>:
c000fc72:	83 ec 0c             	sub    esp,0xc
c000fc75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc79:	83 ec 08             	sub    esp,0x8
c000fc7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc80:	50                   	push   eax
c000fc81:	e8 60 09 00 00       	call   c00105e6 <Device::Device(char const*)>
c000fc86:	83 c4 10             	add    esp,0x10
c000fc89:	ba c8 0c 02 c0       	mov    edx,0xc0020cc8
c000fc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc92:	89 10                	mov    DWORD PTR [eax],edx
c000fc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc98:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fca2:	90                   	nop
c000fca3:	83 c4 0c             	add    esp,0xc
c000fca6:	c3                   	ret    
c000fca7:	90                   	nop

c000fca8 <Bus::~Bus()>:
c000fca8:	83 ec 0c             	sub    esp,0xc
c000fcab:	ba c8 0c 02 c0       	mov    edx,0xc0020cc8
c000fcb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcb4:	89 10                	mov    DWORD PTR [eax],edx
c000fcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcba:	83 ec 0c             	sub    esp,0xc
c000fcbd:	50                   	push   eax
c000fcbe:	e8 d5 05 00 00       	call   c0010298 <Device::~Device()>
c000fcc3:	83 c4 10             	add    esp,0x10
c000fcc6:	90                   	nop
c000fcc7:	83 c4 0c             	add    esp,0xc
c000fcca:	c3                   	ret    
c000fccb:	90                   	nop

c000fccc <Bus::~Bus()>:
c000fccc:	83 ec 0c             	sub    esp,0xc
c000fccf:	83 ec 0c             	sub    esp,0xc
c000fcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcd6:	e8 cd ff ff ff       	call   c000fca8 <Bus::~Bus()>
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	83 ec 08             	sub    esp,0x8
c000fce1:	68 58 01 00 00       	push   0x158
c000fce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcea:	e8 1c f2 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c000fcef:	83 c4 10             	add    esp,0x10
c000fcf2:	83 c4 0c             	add    esp,0xc
c000fcf5:	c3                   	ret    

c000fcf6 <Buzzer::Buzzer(char const*)>:
c000fcf6:	83 ec 0c             	sub    esp,0xc
c000fcf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcfd:	83 ec 08             	sub    esp,0x8
c000fd00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd04:	50                   	push   eax
c000fd05:	e8 dc 08 00 00       	call   c00105e6 <Device::Device(char const*)>
c000fd0a:	83 c4 10             	add    esp,0x10
c000fd0d:	ba f4 0c 02 c0       	mov    edx,0xc0020cf4
c000fd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd16:	89 10                	mov    DWORD PTR [eax],edx
c000fd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd1c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd2a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fd34:	90                   	nop
c000fd35:	83 c4 0c             	add    esp,0xc
c000fd38:	c3                   	ret    
c000fd39:	90                   	nop

c000fd3a <Buzzer::~Buzzer()>:
c000fd3a:	83 ec 0c             	sub    esp,0xc
c000fd3d:	ba f4 0c 02 c0       	mov    edx,0xc0020cf4
c000fd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd46:	89 10                	mov    DWORD PTR [eax],edx
c000fd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd4c:	83 ec 0c             	sub    esp,0xc
c000fd4f:	50                   	push   eax
c000fd50:	e8 43 05 00 00       	call   c0010298 <Device::~Device()>
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	90                   	nop
c000fd59:	83 c4 0c             	add    esp,0xc
c000fd5c:	c3                   	ret    
c000fd5d:	90                   	nop

c000fd5e <Buzzer::~Buzzer()>:
c000fd5e:	83 ec 0c             	sub    esp,0xc
c000fd61:	83 ec 0c             	sub    esp,0xc
c000fd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd68:	e8 cd ff ff ff       	call   c000fd3a <Buzzer::~Buzzer()>
c000fd6d:	83 c4 10             	add    esp,0x10
c000fd70:	83 ec 08             	sub    esp,0x8
c000fd73:	68 5c 01 00 00       	push   0x15c
c000fd78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd7c:	e8 8a f1 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c000fd81:	83 c4 10             	add    esp,0x10
c000fd84:	83 c4 0c             	add    esp,0xc
c000fd87:	c3                   	ret    

c000fd88 <Buzzer::stop()>:
c000fd88:	83 ec 14             	sub    esp,0x14
c000fd8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fd8f:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd91:	6a 00                	push   0x0
c000fd93:	50                   	push   eax
c000fd94:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fd97:	83 c4 1c             	add    esp,0x1c
c000fd9a:	c3                   	ret    

c000fd9b <beepThread(void*)>:
c000fd9b:	53                   	push   ebx
c000fd9c:	83 ec 08             	sub    esp,0x8
c000fd9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fda3:	e8 06 7e 00 00       	call   c0017bae <unlockScheduler()>
c000fda8:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fdad:	52                   	push   edx
c000fdae:	52                   	push   edx
c000fdaf:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fdb5:	52                   	push   edx
c000fdb6:	50                   	push   eax
c000fdb7:	e8 a9 84 00 00       	call   c0018265 <nanoSleep(unsigned long long)>
c000fdbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdbf:	e8 c4 ff ff ff       	call   c000fd88 <Buzzer::stop()>
c000fdc4:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fdcc:	83 c4 18             	add    esp,0x18
c000fdcf:	5b                   	pop    ebx
c000fdd0:	e9 d6 83 00 00       	jmp    c00181ab <blockTask(TaskState)>
c000fdd5:	90                   	nop

c000fdd6 <Buzzer::beep(int, int, bool)>:
c000fdd6:	57                   	push   edi
c000fdd7:	56                   	push   esi
c000fdd8:	53                   	push   ebx
c000fdd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fddd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fde1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fde5:	52                   	push   edx
c000fde6:	52                   	push   edx
c000fde7:	8b 06                	mov    eax,DWORD PTR [esi]
c000fde9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fded:	56                   	push   esi
c000fdee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fdf1:	83 c4 10             	add    esp,0x10
c000fdf4:	89 f8                	mov    eax,edi
c000fdf6:	84 c0                	test   al,al
c000fdf8:	74 1f                	je     c000fe19 <Buzzer::beep(int, int, bool)+0x43>
c000fdfa:	50                   	push   eax
c000fdfb:	50                   	push   eax
c000fdfc:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fe02:	99                   	cdq    
c000fe03:	52                   	push   edx
c000fe04:	50                   	push   eax
c000fe05:	e8 5b 84 00 00       	call   c0018265 <nanoSleep(unsigned long long)>
c000fe0a:	83 c4 10             	add    esp,0x10
c000fe0d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fe11:	5b                   	pop    ebx
c000fe12:	5e                   	pop    esi
c000fe13:	5f                   	pop    edi
c000fe14:	e9 6f ff ff ff       	jmp    c000fd88 <Buzzer::stop()>
c000fe19:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fe1f:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c000fe24:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fe2c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fe30:	c7 44 24 14 9b fd 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fd9b
c000fe38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe3c:	5b                   	pop    ebx
c000fe3d:	5e                   	pop    esi
c000fe3e:	5f                   	pop    edi
c000fe3f:	e9 92 7e 00 00       	jmp    c0017cd6 <Process::createThread(void (*)(void*), void*, int)>

c000fe44 <loadClockSettings()>:
c000fe44:	c7 05 94 38 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0023894,0xa
c000fe4e:	c6 05 91 38 02 c0 00 	mov    BYTE PTR ds:0xc0023891,0x0
c000fe55:	c6 05 90 38 02 c0 01 	mov    BYTE PTR ds:0xc0023890,0x1
c000fe5c:	c3                   	ret    
c000fe5d:	90                   	nop

c000fe5e <Clock::Clock(char const*)>:
c000fe5e:	83 ec 0c             	sub    esp,0xc
c000fe61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe65:	83 ec 08             	sub    esp,0x8
c000fe68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe6c:	50                   	push   eax
c000fe6d:	e8 74 07 00 00       	call   c00105e6 <Device::Device(char const*)>
c000fe72:	83 c4 10             	add    esp,0x10
c000fe75:	ba 24 0d 02 c0       	mov    edx,0xc0020d24
c000fe7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7e:	89 10                	mov    DWORD PTR [eax],edx
c000fe80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe84:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fe8e:	90                   	nop
c000fe8f:	83 c4 0c             	add    esp,0xc
c000fe92:	c3                   	ret    
c000fe93:	90                   	nop

c000fe94 <Clock::~Clock()>:
c000fe94:	83 ec 0c             	sub    esp,0xc
c000fe97:	ba 24 0d 02 c0       	mov    edx,0xc0020d24
c000fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea0:	89 10                	mov    DWORD PTR [eax],edx
c000fea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea6:	83 ec 0c             	sub    esp,0xc
c000fea9:	50                   	push   eax
c000feaa:	e8 e9 03 00 00       	call   c0010298 <Device::~Device()>
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	90                   	nop
c000feb3:	83 c4 0c             	add    esp,0xc
c000feb6:	c3                   	ret    
c000feb7:	90                   	nop

c000feb8 <Clock::~Clock()>:
c000feb8:	83 ec 0c             	sub    esp,0xc
c000febb:	83 ec 0c             	sub    esp,0xc
c000febe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fec2:	e8 cd ff ff ff       	call   c000fe94 <Clock::~Clock()>
c000fec7:	83 c4 10             	add    esp,0x10
c000feca:	83 ec 08             	sub    esp,0x8
c000fecd:	68 58 01 00 00       	push   0x158
c000fed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fed6:	e8 30 f0 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c000fedb:	83 c4 10             	add    esp,0x10
c000fede:	83 c4 0c             	add    esp,0xc
c000fee1:	c3                   	ret    

c000fee2 <Clock::timeInSecondsLocal()>:
c000fee2:	53                   	push   ebx
c000fee3:	83 ec 14             	sub    esp,0x14
c000fee6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feea:	8b 10                	mov    edx,DWORD PTR [eax]
c000feec:	50                   	push   eax
c000feed:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fef0:	0f b6 0d 90 38 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023890
c000fef7:	03 0d 94 38 02 c0    	add    ecx,DWORD PTR ds:0xc0023894
c000fefd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ff03:	89 cb                	mov    ebx,ecx
c000ff05:	c1 fb 1f             	sar    ebx,0x1f
c000ff08:	01 c8                	add    eax,ecx
c000ff0a:	11 da                	adc    edx,ebx
c000ff0c:	83 c4 10             	add    esp,0x10
c000ff0f:	31 c9                	xor    ecx,ecx
c000ff11:	80 3d 91 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023891,0x0
c000ff18:	74 05                	je     c000ff1f <Clock::timeInSecondsLocal()+0x3d>
c000ff1a:	b9 08 07 00 00       	mov    ecx,0x708
c000ff1f:	31 db                	xor    ebx,ebx
c000ff21:	01 c8                	add    eax,ecx
c000ff23:	11 da                	adc    edx,ebx
c000ff25:	83 c4 08             	add    esp,0x8
c000ff28:	5b                   	pop    ebx
c000ff29:	c3                   	ret    

c000ff2a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ff2a:	57                   	push   edi
c000ff2b:	56                   	push   esi
c000ff2c:	53                   	push   ebx
c000ff2d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff35:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ff37:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ff3b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ff3e:	0f b6 05 90 38 02 c0 	movzx  eax,BYTE PTR ds:0xc0023890
c000ff45:	03 05 94 38 02 c0    	add    eax,DWORD PTR ds:0xc0023894
c000ff4b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ff51:	99                   	cdq    
c000ff52:	29 c6                	sub    esi,eax
c000ff54:	19 d7                	sbb    edi,edx
c000ff56:	89 f0                	mov    eax,esi
c000ff58:	89 fa                	mov    edx,edi
c000ff5a:	31 f6                	xor    esi,esi
c000ff5c:	80 3d 91 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023891,0x0
c000ff63:	74 05                	je     c000ff6a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ff65:	be 08 07 00 00       	mov    esi,0x708
c000ff6a:	31 ff                	xor    edi,edi
c000ff6c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ff70:	29 f0                	sub    eax,esi
c000ff72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ff76:	19 fa                	sbb    edx,edi
c000ff78:	89 d8                	mov    eax,ebx
c000ff7a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ff7e:	5b                   	pop    ebx
c000ff7f:	5e                   	pop    esi
c000ff80:	5f                   	pop    edi
c000ff81:	ff e0                	jmp    eax

c000ff83 <datetimeToSeconds(datetime_t)>:
c000ff83:	55                   	push   ebp
c000ff84:	57                   	push   edi
c000ff85:	56                   	push   esi
c000ff86:	53                   	push   ebx
c000ff87:	83 ec 14             	sub    esp,0x14
c000ff8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ff8e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ff92:	89 d3                	mov    ebx,edx
c000ff94:	0f b6 c6             	movzx  eax,dh
c000ff97:	c1 eb 10             	shr    ebx,0x10
c000ff9a:	48                   	dec    eax
c000ff9b:	66 81 eb 6c 07       	sub    bx,0x76c
c000ffa0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ffa4:	0f b6 f5             	movzx  esi,ch
c000ffa7:	89 cf                	mov    edi,ecx
c000ffa9:	6b f6 3c             	imul   esi,esi,0x3c
c000ffac:	c1 ef 10             	shr    edi,0x10
c000ffaf:	0f b6 c9             	movzx  ecx,cl
c000ffb2:	89 f8                	mov    eax,edi
c000ffb4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ffba:	0f b6 f8             	movzx  edi,al
c000ffbd:	0f b6 d2             	movzx  edx,dl
c000ffc0:	01 fe                	add    esi,edi
c000ffc2:	01 f1                	add    ecx,esi
c000ffc4:	0f b7 f3             	movzx  esi,bx
c000ffc7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ffcb:	c1 f9 1f             	sar    ecx,0x1f
c000ffce:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000ffd3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ffd7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000ffdc:	8b 0c 8d 60 0d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf2a0]
c000ffe3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ffe7:	76 29                	jbe    c0010012 <datetimeToSeconds(datetime_t)+0x8f>
c000ffe9:	f6 c3 03             	test   bl,0x3
c000ffec:	75 24                	jne    c0010012 <datetimeToSeconds(datetime_t)+0x8f>
c000ffee:	31 d2                	xor    edx,edx
c000fff0:	bf 64 00 00 00       	mov    edi,0x64
c000fff5:	89 d8                	mov    eax,ebx
c000fff7:	66 f7 f7             	div    di
c000fffa:	66 85 d2             	test   dx,dx
c000fffd:	75 12                	jne    c0010011 <datetimeToSeconds(datetime_t)+0x8e>
c000ffff:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010005:	bf 90 01 00 00       	mov    edi,0x190
c001000a:	99                   	cdq    
c001000b:	f7 ff                	idiv   edi
c001000d:	85 d2                	test   edx,edx
c001000f:	75 01                	jne    c0010012 <datetimeToSeconds(datetime_t)+0x8f>
c0010011:	41                   	inc    ecx
c0010012:	66 83 fb 46          	cmp    bx,0x46
c0010016:	76 45                	jbe    c001005d <datetimeToSeconds(datetime_t)+0xda>
c0010018:	bb 46 00 00 00       	mov    ebx,0x46
c001001d:	bf 64 00 00 00       	mov    edi,0x64
c0010022:	bd 90 01 00 00       	mov    ebp,0x190
c0010027:	b8 6d 01 00 00       	mov    eax,0x16d
c001002c:	f6 c3 03             	test   bl,0x3
c001002f:	75 23                	jne    c0010054 <datetimeToSeconds(datetime_t)+0xd1>
c0010031:	89 d8                	mov    eax,ebx
c0010033:	99                   	cdq    
c0010034:	f7 ff                	idiv   edi
c0010036:	b8 6e 01 00 00       	mov    eax,0x16e
c001003b:	85 d2                	test   edx,edx
c001003d:	75 15                	jne    c0010054 <datetimeToSeconds(datetime_t)+0xd1>
c001003f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010045:	99                   	cdq    
c0010046:	f7 fd                	idiv   ebp
c0010048:	83 fa 01             	cmp    edx,0x1
c001004b:	19 c0                	sbb    eax,eax
c001004d:	f7 d0                	not    eax
c001004f:	05 6e 01 00 00       	add    eax,0x16e
c0010054:	01 c1                	add    ecx,eax
c0010056:	43                   	inc    ebx
c0010057:	39 f3                	cmp    ebx,esi
c0010059:	7c cc                	jl     c0010027 <datetimeToSeconds(datetime_t)+0xa4>
c001005b:	eb 35                	jmp    c0010092 <datetimeToSeconds(datetime_t)+0x10f>
c001005d:	74 33                	je     c0010092 <datetimeToSeconds(datetime_t)+0x10f>
c001005f:	b8 45 00 00 00       	mov    eax,0x45
c0010064:	89 c2                	mov    edx,eax
c0010066:	83 e2 03             	and    edx,0x3
c0010069:	39 f0                	cmp    eax,esi
c001006b:	7e 0f                	jle    c001007c <datetimeToSeconds(datetime_t)+0xf9>
c001006d:	83 fa 01             	cmp    edx,0x1
c0010070:	19 d2                	sbb    edx,edx
c0010072:	48                   	dec    eax
c0010073:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001007a:	eb e8                	jmp    c0010064 <datetimeToSeconds(datetime_t)+0xe1>
c001007c:	b8 6d 01 00 00       	mov    eax,0x16d
c0010081:	85 d2                	test   edx,edx
c0010083:	75 0b                	jne    c0010090 <datetimeToSeconds(datetime_t)+0x10d>
c0010085:	66 83 fb 01          	cmp    bx,0x1
c0010089:	19 c0                	sbb    eax,eax
c001008b:	05 6e 01 00 00       	add    eax,0x16e
c0010090:	29 c1                	sub    ecx,eax
c0010092:	b8 80 51 01 00       	mov    eax,0x15180
c0010097:	f7 e9                	imul   ecx
c0010099:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001009d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00100a1:	83 c4 14             	add    esp,0x14
c00100a4:	5b                   	pop    ebx
c00100a5:	5e                   	pop    esi
c00100a6:	5f                   	pop    edi
c00100a7:	5d                   	pop    ebp
c00100a8:	c3                   	ret    
c00100a9:	90                   	nop

c00100aa <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00100aa:	57                   	push   edi
c00100ab:	56                   	push   esi
c00100ac:	53                   	push   ebx
c00100ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00100b3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00100b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100be:	e8 c0 fe ff ff       	call   c000ff83 <datetimeToSeconds(datetime_t)>
c00100c3:	59                   	pop    ecx
c00100c4:	0f b6 0d 90 38 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023890
c00100cb:	5b                   	pop    ebx
c00100cc:	03 0d 94 38 02 c0    	add    ecx,DWORD PTR ds:0xc0023894
c00100d2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00100d8:	89 cb                	mov    ebx,ecx
c00100da:	c1 fb 1f             	sar    ebx,0x1f
c00100dd:	29 c8                	sub    eax,ecx
c00100df:	19 da                	sbb    edx,ebx
c00100e1:	31 c9                	xor    ecx,ecx
c00100e3:	80 3d 91 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023891,0x0
c00100ea:	74 05                	je     c00100f1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00100ec:	b9 08 07 00 00       	mov    ecx,0x708
c00100f1:	31 db                	xor    ebx,ebx
c00100f3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00100f7:	29 c8                	sub    eax,ecx
c00100f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100fd:	19 da                	sbb    edx,ebx
c00100ff:	89 f8                	mov    eax,edi
c0010101:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010105:	5b                   	pop    ebx
c0010106:	5e                   	pop    esi
c0010107:	5f                   	pop    edi
c0010108:	ff e0                	jmp    eax

c001010a <secondsToDatetime(unsigned long long)>:
c001010a:	55                   	push   ebp
c001010b:	57                   	push   edi
c001010c:	56                   	push   esi
c001010d:	53                   	push   ebx
c001010e:	83 ec 1c             	sub    esp,0x1c
c0010111:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010115:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010119:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001011d:	6a 00                	push   0x0
c001011f:	68 80 51 01 00       	push   0x15180
c0010124:	55                   	push   ebp
c0010125:	57                   	push   edi
c0010126:	e8 21 e6 00 00       	call   c001e74c <__udivdi3>
c001012b:	83 c4 10             	add    esp,0x10
c001012e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010134:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010138:	6a 00                	push   0x0
c001013a:	68 80 51 01 00       	push   0x15180
c001013f:	55                   	push   ebp
c0010140:	57                   	push   edi
c0010141:	bf 10 0e 00 00       	mov    edi,0xe10
c0010146:	e8 01 e7 00 00       	call   c001e84c <__umoddi3>
c001014b:	83 c4 10             	add    esp,0x10
c001014e:	99                   	cdq    
c001014f:	f7 ff                	idiv   edi
c0010151:	bf 3c 00 00 00       	mov    edi,0x3c
c0010156:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010159:	89 d0                	mov    eax,edx
c001015b:	99                   	cdq    
c001015c:	f7 ff                	idiv   edi
c001015e:	85 db                	test   ebx,ebx
c0010160:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0010163:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0010166:	79 11                	jns    c0010179 <secondsToDatetime(unsigned long long)+0x6f>
c0010168:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001016c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0010172:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010177:	eb 07                	jmp    c0010180 <secondsToDatetime(unsigned long long)+0x76>
c0010179:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001017e:	89 d8                	mov    eax,ebx
c0010180:	bf b4 05 00 00       	mov    edi,0x5b4
c0010185:	99                   	cdq    
c0010186:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001018b:	f7 f9                	idiv   ecx
c001018d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0010192:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010196:	31 d2                	xor    edx,edx
c0010198:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00101a0:	01 c3                	add    ebx,eax
c00101a2:	89 d8                	mov    eax,ebx
c00101a4:	f7 f1                	div    ecx
c00101a6:	31 d2                	xor    edx,edx
c00101a8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00101ab:	89 d8                	mov    eax,ebx
c00101ad:	f7 f7                	div    edi
c00101af:	31 d2                	xor    edx,edx
c00101b1:	29 c1                	sub    ecx,eax
c00101b3:	89 d8                	mov    eax,ebx
c00101b5:	f7 f5                	div    ebp
c00101b7:	bd 6d 01 00 00       	mov    ebp,0x16d
c00101bc:	29 c1                	sub    ecx,eax
c00101be:	31 d2                	xor    edx,edx
c00101c0:	89 c8                	mov    eax,ecx
c00101c2:	f7 f5                	div    ebp
c00101c4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00101c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101cd:	31 d2                	xor    edx,edx
c00101cf:	89 c8                	mov    eax,ecx
c00101d1:	f7 f5                	div    ebp
c00101d3:	31 d2                	xor    edx,edx
c00101d5:	01 c3                	add    ebx,eax
c00101d7:	89 c8                	mov    eax,ecx
c00101d9:	f7 f7                	div    edi
c00101db:	bf 99 00 00 00       	mov    edi,0x99
c00101e0:	29 c3                	sub    ebx,eax
c00101e2:	31 d2                	xor    edx,edx
c00101e4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00101ec:	29 c3                	sub    ebx,eax
c00101ee:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00101f1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00101f4:	bb 05 00 00 00       	mov    ebx,0x5
c00101f9:	83 c1 02             	add    ecx,0x2
c00101fc:	89 c8                	mov    eax,ecx
c00101fe:	f7 f7                	div    edi
c0010200:	31 d2                	xor    edx,edx
c0010202:	89 c7                	mov    edi,eax
c0010204:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001020a:	83 c0 02             	add    eax,0x2
c001020d:	f7 f3                	div    ebx
c001020f:	89 eb                	mov    ebx,ebp
c0010211:	29 c3                	sub    ebx,eax
c0010213:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010219:	88 1e                	mov    BYTE PTR [esi],bl
c001021b:	19 c0                	sbb    eax,eax
c001021d:	31 d2                	xor    edx,edx
c001021f:	83 e0 0c             	and    eax,0xc
c0010222:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010226:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001022e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010232:	83 f9 01             	cmp    ecx,0x1
c0010235:	0f 96 c2             	setbe  dl
c0010238:	41                   	inc    ecx
c0010239:	01 d0                	add    eax,edx
c001023b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001023e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010242:	83 c4 1c             	add    esp,0x1c
c0010245:	89 f0                	mov    eax,esi
c0010247:	5b                   	pop    ebx
c0010248:	5e                   	pop    esi
c0010249:	5f                   	pop    edi
c001024a:	5d                   	pop    ebp
c001024b:	c2 04 00             	ret    0x4

c001024e <Clock::timeInDatetimeLocal()>:
c001024e:	53                   	push   ebx
c001024f:	83 ec 14             	sub    esp,0x14
c0010252:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010256:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001025a:	e8 83 fc ff ff       	call   c000fee2 <Clock::timeInSecondsLocal()>
c001025f:	83 c4 0c             	add    esp,0xc
c0010262:	52                   	push   edx
c0010263:	50                   	push   eax
c0010264:	53                   	push   ebx
c0010265:	e8 a0 fe ff ff       	call   c001010a <secondsToDatetime(unsigned long long)>
c001026a:	89 d8                	mov    eax,ebx
c001026c:	83 c4 14             	add    esp,0x14
c001026f:	5b                   	pop    ebx
c0010270:	c2 04 00             	ret    0x4
c0010273:	90                   	nop

c0010274 <Device::hibernate()>:
c0010274:	c3                   	ret    
c0010275:	90                   	nop

c0010276 <Device::wake()>:
c0010276:	c3                   	ret    
c0010277:	90                   	nop

c0010278 <Device::detect()>:
c0010278:	c3                   	ret    
c0010279:	90                   	nop

c001027a <Device::disableLegacy()>:
c001027a:	c3                   	ret    
c001027b:	90                   	nop

c001027c <Device::powerSaving(PowerSavingLevel)>:
c001027c:	c3                   	ret    
c001027d:	90                   	nop

c001027e <DriverlessDevice::close(int, int, void*)>:
c001027e:	31 c0                	xor    eax,eax
c0010280:	c3                   	ret    
c0010281:	90                   	nop

c0010282 <DriverlessDevice::detect()>:
c0010282:	c3                   	ret    
c0010283:	90                   	nop

c0010284 <DriverlessDevice::open(int, int, void*)>:
c0010284:	83 ec 18             	sub    esp,0x18
c0010287:	68 90 0d 02 c0       	push   0xc0020d90
c001028c:	e8 ef 49 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c0010291:	83 c8 ff             	or     eax,0xffffffff
c0010294:	83 c4 1c             	add    esp,0x1c
c0010297:	c3                   	ret    

c0010298 <Device::~Device()>:
c0010298:	ba b8 0d 02 c0       	mov    edx,0xc0020db8
c001029d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102a1:	89 10                	mov    DWORD PTR [eax],edx
c00102a3:	90                   	nop
c00102a4:	c3                   	ret    
c00102a5:	90                   	nop

c00102a6 <Device::~Device()>:
c00102a6:	83 ec 0c             	sub    esp,0xc
c00102a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102ad:	e8 e6 ff ff ff       	call   c0010298 <Device::~Device()>
c00102b2:	83 c4 04             	add    esp,0x4
c00102b5:	83 ec 08             	sub    esp,0x8
c00102b8:	68 58 01 00 00       	push   0x158
c00102bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c1:	e8 45 ec ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c00102c6:	83 c4 10             	add    esp,0x10
c00102c9:	83 c4 0c             	add    esp,0xc
c00102cc:	c3                   	ret    
c00102cd:	90                   	nop

c00102ce <Device::findAndLoadDriver()>:
c00102ce:	c3                   	ret    
c00102cf:	90                   	nop

c00102d0 <Device::preOpenPCI(PCIDeviceInfo)>:
c00102d0:	57                   	push   edi
c00102d1:	b9 09 00 00 00       	mov    ecx,0x9
c00102d6:	56                   	push   esi
c00102d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00102db:	8d 74 24 10          	lea    esi,[esp+0x10]
c00102df:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00102e9:	81 c7 18 01 00 00    	add    edi,0x118
c00102ef:	fc                   	cld    
c00102f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00102f2:	5e                   	pop    esi
c00102f3:	5f                   	pop    edi
c00102f4:	c3                   	ret    
c00102f5:	90                   	nop

c00102f6 <Device::preOpenACPI(void*, char*, char*)>:
c00102f6:	56                   	push   esi
c00102f7:	53                   	push   ebx
c00102f8:	83 ec 08             	sub    esp,0x8
c00102fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00102ff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010303:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001030d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010311:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010317:	6a 1e                	push   0x1e
c0010319:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001031f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010323:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010329:	50                   	push   eax
c001032a:	e8 a3 02 ff ff       	call   c00005d2 <memcpy>
c001032f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010333:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010337:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001033f:	83 c4 14             	add    esp,0x14
c0010342:	5b                   	pop    ebx
c0010343:	5e                   	pop    esi
c0010344:	e9 89 02 ff ff       	jmp    c00005d2 <memcpy>
c0010349:	90                   	nop

c001034a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001034a:	55                   	push   ebp
c001034b:	57                   	push   edi
c001034c:	56                   	push   esi
c001034d:	53                   	push   ebx
c001034e:	83 ec 0c             	sub    esp,0xc
c0010351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010355:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010359:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001035d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010361:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010366:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001036d:	75 0b                	jne    c001037a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c001036f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010371:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010375:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010378:	eb 24                	jmp    c001039e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c001037a:	e8 fb 3b 00 00       	call   c0013f7a <thisCPU()>
c001037f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010385:	8b 10                	mov    edx,DWORD PTR [eax]
c0010387:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001038b:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001038f:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0010393:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010397:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001039b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001039e:	83 c4 0c             	add    esp,0xc
c00103a1:	5b                   	pop    ebx
c00103a2:	5e                   	pop    esi
c00103a3:	5f                   	pop    edi
c00103a4:	5d                   	pop    ebp
c00103a5:	ff e0                	jmp    eax
c00103a7:	90                   	nop

c00103a8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00103a8:	57                   	push   edi
c00103a9:	56                   	push   esi
c00103aa:	53                   	push   ebx
c00103ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00103b7:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00103bc:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00103c3:	75 0b                	jne    c00103d0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00103c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00103c7:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00103cb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00103ce:	eb 20                	jmp    c00103f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00103d0:	e8 a5 3b 00 00       	call   c0013f7a <thisCPU()>
c00103d5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00103db:	8b 10                	mov    edx,DWORD PTR [eax]
c00103dd:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00103e1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00103e5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00103e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00103ed:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c00103f0:	5b                   	pop    ebx
c00103f1:	5e                   	pop    esi
c00103f2:	5f                   	pop    edi
c00103f3:	ff e0                	jmp    eax
c00103f5:	90                   	nop

c00103f6 <Device::addChild(Device*)>:
c00103f6:	53                   	push   ebx
c00103f7:	83 ec 08             	sub    esp,0x8
c00103fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010402:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010408:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001040e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010410:	85 d2                	test   edx,edx
c0010412:	74 04                	je     c0010418 <Device::addChild(Device*)+0x22>
c0010414:	89 d3                	mov    ebx,edx
c0010416:	eb f6                	jmp    c001040e <Device::addChild(Device*)+0x18>
c0010418:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001041b:	83 ec 0c             	sub    esp,0xc
c001041e:	6a 08                	push   0x8
c0010420:	e8 d7 ea ff ff       	call   c000eefc <operator new(unsigned long)>
c0010425:	89 03                	mov    DWORD PTR [ebx],eax
c0010427:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001042d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010434:	83 c4 18             	add    esp,0x18
c0010437:	5b                   	pop    ebx
c0010438:	c3                   	ret    
c0010439:	90                   	nop

c001043a <Device::removeAllChildren()>:
c001043a:	56                   	push   esi
c001043b:	53                   	push   ebx
c001043c:	52                   	push   edx
c001043d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010441:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010447:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001044a:	74 17                	je     c0010463 <Device::removeAllChildren()+0x29>
c001044c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001044f:	85 c0                	test   eax,eax
c0010451:	74 0c                	je     c001045f <Device::removeAllChildren()+0x25>
c0010453:	83 ec 0c             	sub    esp,0xc
c0010456:	8b 10                	mov    edx,DWORD PTR [eax]
c0010458:	50                   	push   eax
c0010459:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001045c:	83 c4 10             	add    esp,0x10
c001045f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010461:	eb e4                	jmp    c0010447 <Device::removeAllChildren()+0xd>
c0010463:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010469:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001046f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010475:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001047c:	58                   	pop    eax
c001047d:	5b                   	pop    ebx
c001047e:	5e                   	pop    esi
c001047f:	c3                   	ret    

c0010480 <Device::hibernateAll()>:
c0010480:	53                   	push   ebx
c0010481:	83 ec 14             	sub    esp,0x14
c0010484:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010488:	8b 03                	mov    eax,DWORD PTR [ebx]
c001048a:	53                   	push   ebx
c001048b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001048e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010494:	83 c4 10             	add    esp,0x10
c0010497:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001049a:	74 0f                	je     c00104ab <Device::hibernateAll()+0x2b>
c001049c:	83 ec 0c             	sub    esp,0xc
c001049f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104a2:	e8 d9 ff ff ff       	call   c0010480 <Device::hibernateAll()>
c00104a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104a9:	eb e9                	jmp    c0010494 <Device::hibernateAll()+0x14>
c00104ab:	83 c4 08             	add    esp,0x8
c00104ae:	5b                   	pop    ebx
c00104af:	c3                   	ret    

c00104b0 <Device::wakeAll()>:
c00104b0:	53                   	push   ebx
c00104b1:	83 ec 14             	sub    esp,0x14
c00104b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104ba:	53                   	push   ebx
c00104bb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00104be:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104c4:	83 c4 10             	add    esp,0x10
c00104c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104ca:	74 0f                	je     c00104db <Device::wakeAll()+0x2b>
c00104cc:	83 ec 0c             	sub    esp,0xc
c00104cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104d2:	e8 d9 ff ff ff       	call   c00104b0 <Device::wakeAll()>
c00104d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104d9:	eb e9                	jmp    c00104c4 <Device::wakeAll()+0x14>
c00104db:	83 c4 08             	add    esp,0x8
c00104de:	5b                   	pop    ebx
c00104df:	c3                   	ret    

c00104e0 <Device::detectAll()>:
c00104e0:	53                   	push   ebx
c00104e1:	83 ec 14             	sub    esp,0x14
c00104e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104ea:	53                   	push   ebx
c00104eb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00104ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104f4:	83 c4 10             	add    esp,0x10
c00104f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104fa:	74 0f                	je     c001050b <Device::detectAll()+0x2b>
c00104fc:	83 ec 0c             	sub    esp,0xc
c00104ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010502:	e8 d9 ff ff ff       	call   c00104e0 <Device::detectAll()>
c0010507:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010509:	eb e9                	jmp    c00104f4 <Device::detectAll()+0x14>
c001050b:	83 c4 08             	add    esp,0x8
c001050e:	5b                   	pop    ebx
c001050f:	c3                   	ret    

c0010510 <Device::disableLegacyAll()>:
c0010510:	53                   	push   ebx
c0010511:	83 ec 14             	sub    esp,0x14
c0010514:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010518:	8b 03                	mov    eax,DWORD PTR [ebx]
c001051a:	53                   	push   ebx
c001051b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001051e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010524:	83 c4 10             	add    esp,0x10
c0010527:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001052a:	74 0f                	je     c001053b <Device::disableLegacyAll()+0x2b>
c001052c:	83 ec 0c             	sub    esp,0xc
c001052f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010532:	e8 d9 ff ff ff       	call   c0010510 <Device::disableLegacyAll()>
c0010537:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010539:	eb e9                	jmp    c0010524 <Device::disableLegacyAll()+0x14>
c001053b:	83 c4 08             	add    esp,0x8
c001053e:	5b                   	pop    ebx
c001053f:	c3                   	ret    

c0010540 <Device::loadDriversForAll()>:
c0010540:	53                   	push   ebx
c0010541:	83 ec 08             	sub    esp,0x8
c0010544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010548:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001054e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010550:	85 db                	test   ebx,ebx
c0010552:	74 12                	je     c0010566 <Device::loadDriversForAll()+0x26>
c0010554:	83 ec 0c             	sub    esp,0xc
c0010557:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001055a:	e8 e1 ff ff ff       	call   c0010540 <Device::loadDriversForAll()>
c001055f:	83 c4 10             	add    esp,0x10
c0010562:	89 d8                	mov    eax,ebx
c0010564:	eb e8                	jmp    c001054e <Device::loadDriversForAll()+0xe>
c0010566:	83 c4 08             	add    esp,0x8
c0010569:	5b                   	pop    ebx
c001056a:	c3                   	ret    
c001056b:	90                   	nop

c001056c <Device::closeAll()>:
c001056c:	53                   	push   ebx
c001056d:	83 ec 08             	sub    esp,0x8
c0010570:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010574:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010576:	6a 00                	push   0x0
c0010578:	6a 00                	push   0x0
c001057a:	6a 00                	push   0x0
c001057c:	53                   	push   ebx
c001057d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010580:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010586:	83 c4 10             	add    esp,0x10
c0010589:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001058c:	74 0f                	je     c001059d <Device::closeAll()+0x31>
c001058e:	83 ec 0c             	sub    esp,0xc
c0010591:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010594:	e8 d3 ff ff ff       	call   c001056c <Device::closeAll()>
c0010599:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001059b:	eb e9                	jmp    c0010586 <Device::closeAll()+0x1a>
c001059d:	83 c4 08             	add    esp,0x8
c00105a0:	5b                   	pop    ebx
c00105a1:	c3                   	ret    

c00105a2 <Device::powerSavingAll(PowerSavingLevel)>:
c00105a2:	56                   	push   esi
c00105a3:	53                   	push   ebx
c00105a4:	83 ec 0c             	sub    esp,0xc
c00105a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105ab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00105af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105b1:	56                   	push   esi
c00105b2:	53                   	push   ebx
c00105b3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00105b6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105bc:	83 c4 10             	add    esp,0x10
c00105bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105c2:	74 0f                	je     c00105d3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00105c4:	52                   	push   edx
c00105c5:	52                   	push   edx
c00105c6:	56                   	push   esi
c00105c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105ca:	e8 d3 ff ff ff       	call   c00105a2 <Device::powerSavingAll(PowerSavingLevel)>
c00105cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105d1:	eb e9                	jmp    c00105bc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00105d3:	58                   	pop    eax
c00105d4:	5b                   	pop    ebx
c00105d5:	5e                   	pop    esi
c00105d6:	c3                   	ret    
c00105d7:	90                   	nop

c00105d8 <Device::setName(char const*)>:
c00105d8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00105e0:	e9 c2 00 ff ff       	jmp    c00006a7 <strcpy>
c00105e5:	90                   	nop

c00105e6 <Device::Device(char const*)>:
c00105e6:	83 ec 0c             	sub    esp,0xc
c00105e9:	ba b8 0d 02 c0       	mov    edx,0xc0020db8
c00105ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f2:	89 10                	mov    DWORD PTR [eax],edx
c00105f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010606:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010614:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001061e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010622:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001062c:	83 ec 08             	sub    esp,0x8
c001062f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010633:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010637:	e8 9c ff ff ff       	call   c00105d8 <Device::setName(char const*)>
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	83 ec 0c             	sub    esp,0xc
c0010642:	6a 08                	push   0x8
c0010644:	e8 b3 e8 ff ff       	call   c000eefc <operator new(unsigned long)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010652:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010659:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001065d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010667:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001066d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010677:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001067d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010688:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001068f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010693:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001069a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00106a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00106b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ba:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00106c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00106d2:	90                   	nop
c00106d3:	83 c4 0c             	add    esp,0xc
c00106d6:	c3                   	ret    
c00106d7:	90                   	nop

c00106d8 <Device::getName()>:
c00106d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106dc:	05 d0 00 00 00       	add    eax,0xd0
c00106e1:	c3                   	ret    

c00106e2 <DriverlessDevice::DriverlessDevice(char const*)>:
c00106e2:	83 ec 0c             	sub    esp,0xc
c00106e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e9:	83 ec 08             	sub    esp,0x8
c00106ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106f0:	50                   	push   eax
c00106f1:	e8 f0 fe ff ff       	call   c00105e6 <Device::Device(char const*)>
c00106f6:	83 c4 10             	add    esp,0x10
c00106f9:	ba e4 0d 02 c0       	mov    edx,0xc0020de4
c00106fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010702:	89 10                	mov    DWORD PTR [eax],edx
c0010704:	90                   	nop
c0010705:	83 c4 0c             	add    esp,0xc
c0010708:	c3                   	ret    
c0010709:	90                   	nop

c001070a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001070a:	57                   	push   edi
c001070b:	56                   	push   esi
c001070c:	53                   	push   ebx
c001070d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010711:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010715:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010719:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001071f:	75 0c                	jne    c001072d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010721:	52                   	push   edx
c0010722:	52                   	push   edx
c0010723:	53                   	push   ebx
c0010724:	56                   	push   esi
c0010725:	e8 3a e5 00 00       	call   c001ec64 <LinkedList<Device>::addElement(Device*)>
c001072a:	83 c4 10             	add    esp,0x10
c001072d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010733:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010736:	74 12                	je     c001074a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010738:	50                   	push   eax
c0010739:	57                   	push   edi
c001073a:	56                   	push   esi
c001073b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001073e:	e8 c7 ff ff ff       	call   c001070a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010743:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010745:	83 c4 10             	add    esp,0x10
c0010748:	eb e9                	jmp    c0010733 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001074a:	5b                   	pop    ebx
c001074b:	5e                   	pop    esi
c001074c:	5f                   	pop    edi
c001074d:	c3                   	ret    

c001074e <getDevicesOfType(DeviceType)>:
c001074e:	53                   	push   ebx
c001074f:	83 ec 14             	sub    esp,0x14
c0010752:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010756:	53                   	push   ebx
c0010757:	e8 e4 e5 00 00       	call   c001ed40 <LinkedList<Device>::LinkedList()>
c001075c:	83 c4 0c             	add    esp,0xc
c001075f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010763:	53                   	push   ebx
c0010764:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c001076a:	e8 9b ff ff ff       	call   c001070a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001076f:	89 d8                	mov    eax,ebx
c0010771:	83 c4 18             	add    esp,0x18
c0010774:	5b                   	pop    ebx
c0010775:	c2 04 00             	ret    0x4

c0010778 <HardDiskController::HardDiskController(char const*)>:
c0010778:	83 ec 0c             	sub    esp,0xc
c001077b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077f:	83 ec 08             	sub    esp,0x8
c0010782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010786:	50                   	push   eax
c0010787:	e8 5a fe ff ff       	call   c00105e6 <Device::Device(char const*)>
c001078c:	83 c4 10             	add    esp,0x10
c001078f:	ba 10 0e 02 c0       	mov    edx,0xc0020e10
c0010794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010798:	89 10                	mov    DWORD PTR [eax],edx
c001079a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001079e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00107a8:	90                   	nop
c00107a9:	83 c4 0c             	add    esp,0xc
c00107ac:	c3                   	ret    
c00107ad:	90                   	nop

c00107ae <HardDiskController::~HardDiskController()>:
c00107ae:	83 ec 0c             	sub    esp,0xc
c00107b1:	ba 10 0e 02 c0       	mov    edx,0xc0020e10
c00107b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ba:	89 10                	mov    DWORD PTR [eax],edx
c00107bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c0:	83 ec 0c             	sub    esp,0xc
c00107c3:	50                   	push   eax
c00107c4:	e8 cf fa ff ff       	call   c0010298 <Device::~Device()>
c00107c9:	83 c4 10             	add    esp,0x10
c00107cc:	90                   	nop
c00107cd:	83 c4 0c             	add    esp,0xc
c00107d0:	c3                   	ret    
c00107d1:	90                   	nop

c00107d2 <HardDiskController::~HardDiskController()>:
c00107d2:	83 ec 0c             	sub    esp,0xc
c00107d5:	83 ec 0c             	sub    esp,0xc
c00107d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107dc:	e8 cd ff ff ff       	call   c00107ae <HardDiskController::~HardDiskController()>
c00107e1:	83 c4 10             	add    esp,0x10
c00107e4:	83 ec 08             	sub    esp,0x8
c00107e7:	68 58 01 00 00       	push   0x158
c00107ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107f0:	e8 16 e7 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c00107f5:	83 c4 10             	add    esp,0x10
c00107f8:	83 c4 0c             	add    esp,0xc
c00107fb:	c3                   	ret    

c00107fc <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00107fc:	83 ec 0c             	sub    esp,0xc
c00107ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010803:	83 ec 08             	sub    esp,0x8
c0010806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001080a:	50                   	push   eax
c001080b:	e8 d6 fd ff ff       	call   c00105e6 <Device::Device(char const*)>
c0010810:	83 c4 10             	add    esp,0x10
c0010813:	ba 3c 0e 02 c0       	mov    edx,0xc0020e3c
c0010818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081c:	89 10                	mov    DWORD PTR [eax],edx
c001081e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010822:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010838:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010846:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001084a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010854:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001085e:	90                   	nop
c001085f:	83 c4 0c             	add    esp,0xc
c0010862:	c3                   	ret    
c0010863:	90                   	nop

c0010864 <PhysicalDisk::startCache()>:
c0010864:	56                   	push   esi
c0010865:	53                   	push   ebx
c0010866:	83 ec 10             	sub    esp,0x10
c0010869:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001086d:	6a 30                	push   0x30
c001086f:	e8 88 e6 ff ff       	call   c000eefc <operator new(unsigned long)>
c0010874:	89 c6                	mov    esi,eax
c0010876:	58                   	pop    eax
c0010877:	5a                   	pop    edx
c0010878:	53                   	push   ebx
c0010879:	56                   	push   esi
c001087a:	e8 6d 1e 00 00       	call   c00126ec <VCache::VCache(PhysicalDisk*)>
c001087f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010885:	83 c4 14             	add    esp,0x14
c0010888:	5b                   	pop    ebx
c0010889:	5e                   	pop    esi
c001088a:	c3                   	ret    
c001088b:	90                   	nop

c001088c <PhysicalDisk::~PhysicalDisk()>:
c001088c:	83 ec 0c             	sub    esp,0xc
c001088f:	ba 3c 0e 02 c0       	mov    edx,0xc0020e3c
c0010894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010898:	89 10                	mov    DWORD PTR [eax],edx
c001089a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089e:	83 ec 0c             	sub    esp,0xc
c00108a1:	50                   	push   eax
c00108a2:	e8 f1 f9 ff ff       	call   c0010298 <Device::~Device()>
c00108a7:	83 c4 10             	add    esp,0x10
c00108aa:	90                   	nop
c00108ab:	83 c4 0c             	add    esp,0xc
c00108ae:	c3                   	ret    
c00108af:	90                   	nop

c00108b0 <PhysicalDisk::~PhysicalDisk()>:
c00108b0:	83 ec 0c             	sub    esp,0xc
c00108b3:	83 ec 0c             	sub    esp,0xc
c00108b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ba:	e8 cd ff ff ff       	call   c001088c <PhysicalDisk::~PhysicalDisk()>
c00108bf:	83 c4 10             	add    esp,0x10
c00108c2:	83 ec 08             	sub    esp,0x8
c00108c5:	68 6c 01 00 00       	push   0x16c
c00108ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ce:	e8 38 e6 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c00108d3:	83 c4 10             	add    esp,0x10
c00108d6:	83 c4 0c             	add    esp,0xc
c00108d9:	c3                   	ret    

c00108da <FPU::FPU(char const*)>:
c00108da:	83 ec 0c             	sub    esp,0xc
c00108dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e1:	83 ec 08             	sub    esp,0x8
c00108e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e8:	50                   	push   eax
c00108e9:	e8 f8 fc ff ff       	call   c00105e6 <Device::Device(char const*)>
c00108ee:	83 c4 10             	add    esp,0x10
c00108f1:	ba 7c 0e 02 c0       	mov    edx,0xc0020e7c
c00108f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fa:	89 10                	mov    DWORD PTR [eax],edx
c00108fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010900:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001090a:	90                   	nop
c001090b:	83 c4 0c             	add    esp,0xc
c001090e:	c3                   	ret    
c001090f:	90                   	nop

c0010910 <FPU::~FPU()>:
c0010910:	83 ec 0c             	sub    esp,0xc
c0010913:	ba 7c 0e 02 c0       	mov    edx,0xc0020e7c
c0010918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091c:	89 10                	mov    DWORD PTR [eax],edx
c001091e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010922:	83 ec 0c             	sub    esp,0xc
c0010925:	50                   	push   eax
c0010926:	e8 6d f9 ff ff       	call   c0010298 <Device::~Device()>
c001092b:	83 c4 10             	add    esp,0x10
c001092e:	90                   	nop
c001092f:	83 c4 0c             	add    esp,0xc
c0010932:	c3                   	ret    
c0010933:	90                   	nop

c0010934 <FPU::~FPU()>:
c0010934:	83 ec 0c             	sub    esp,0xc
c0010937:	83 ec 0c             	sub    esp,0xc
c001093a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001093e:	e8 cd ff ff ff       	call   c0010910 <FPU::~FPU()>
c0010943:	83 c4 10             	add    esp,0x10
c0010946:	83 ec 08             	sub    esp,0x8
c0010949:	68 58 01 00 00       	push   0x158
c001094e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010952:	e8 b4 e5 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c0010957:	83 c4 10             	add    esp,0x10
c001095a:	83 c4 0c             	add    esp,0xc
c001095d:	c3                   	ret    

c001095e <setupFPU()>:
c001095e:	53                   	push   ebx
c001095f:	83 ec 08             	sub    esp,0x8
c0010962:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0010967:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c001096e:	74 19                	je     c0010989 <setupFPU()+0x2b>
c0010970:	83 ec 0c             	sub    esp,0xc
c0010973:	68 58 01 00 00       	push   0x158
c0010978:	e8 7f e5 ff ff       	call   c000eefc <operator new(unsigned long)>
c001097d:	89 c3                	mov    ebx,eax
c001097f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010982:	e8 8d ca 00 00       	call   c001d414 <AVX::AVX()>
c0010987:	eb 5b                	jmp    c00109e4 <setupFPU()+0x86>
c0010989:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001098f:	84 c0                	test   al,al
c0010991:	79 19                	jns    c00109ac <setupFPU()+0x4e>
c0010993:	83 ec 0c             	sub    esp,0xc
c0010996:	68 58 01 00 00       	push   0x158
c001099b:	e8 5c e5 ff ff       	call   c000eefc <operator new(unsigned long)>
c00109a0:	89 c3                	mov    ebx,eax
c00109a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00109a5:	e8 90 cb 00 00       	call   c001d53a <SSE::SSE()>
c00109aa:	eb 38                	jmp    c00109e4 <setupFPU()+0x86>
c00109ac:	a8 20                	test   al,0x20
c00109ae:	74 19                	je     c00109c9 <setupFPU()+0x6b>
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	68 58 01 00 00       	push   0x158
c00109b8:	e8 3f e5 ff ff       	call   c000eefc <operator new(unsigned long)>
c00109bd:	89 c3                	mov    ebx,eax
c00109bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00109c2:	e8 dd ca 00 00       	call   c001d4a4 <MMX::MMX()>
c00109c7:	eb 1b                	jmp    c00109e4 <setupFPU()+0x86>
c00109c9:	a8 10                	test   al,0x10
c00109cb:	74 1c                	je     c00109e9 <setupFPU()+0x8b>
c00109cd:	83 ec 0c             	sub    esp,0xc
c00109d0:	68 58 01 00 00       	push   0x158
c00109d5:	e8 22 e5 ff ff       	call   c000eefc <operator new(unsigned long)>
c00109da:	89 c3                	mov    ebx,eax
c00109dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00109df:	e8 e4 cb 00 00       	call   c001d5c8 <x87::x87()>
c00109e4:	83 c4 10             	add    esp,0x10
c00109e7:	eb 2c                	jmp    c0010a15 <setupFPU()+0xb7>
c00109e9:	83 ec 0c             	sub    esp,0xc
c00109ec:	31 db                	xor    ebx,ebx
c00109ee:	68 68 0e 02 c0       	push   0xc0020e68
c00109f3:	e8 f3 e5 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c00109f8:	e8 7d 35 00 00       	call   c0013f7a <thisCPU()>
c00109fd:	e8 78 35 00 00       	call   c0013f7a <thisCPU()>
c0010a02:	e8 91 e3 00 00       	call   c001ed98 <CPU::readCR0()>
c0010a07:	83 c8 04             	or     eax,0x4
c0010a0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a0d:	e8 98 e3 00 00       	call   c001edaa <CPU::writeCR0(unsigned long)>
c0010a12:	83 c4 10             	add    esp,0x10
c0010a15:	89 d8                	mov    eax,ebx
c0010a17:	83 c4 08             	add    esp,0x8
c0010a1a:	5b                   	pop    ebx
c0010a1b:	c3                   	ret    

c0010a1c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010a1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010a24:	c1 e0 04             	shl    eax,0x4
c0010a27:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010a2b:	8d 50 10             	lea    edx,[eax+0x10]
c0010a2e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010a34:	74 08                	je     c0010a3e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010a36:	83 c0 04             	add    eax,0x4
c0010a39:	39 d0                	cmp    eax,edx
c0010a3b:	75 f1                	jne    c0010a2e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010a3d:	c3                   	ret    
c0010a3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a48:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010a52:	eb e2                	jmp    c0010a36 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010a54 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010a54:	57                   	push   edi
c0010a55:	31 c0                	xor    eax,eax
c0010a57:	56                   	push   esi
c0010a58:	53                   	push   ebx
c0010a59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010a5d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a61:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010a65:	89 da                	mov    edx,ebx
c0010a67:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010a6b:	c1 e2 04             	shl    edx,0x4
c0010a6e:	01 ca                	add    edx,ecx
c0010a70:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010a78:	74 16                	je     c0010a90 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010a7a:	40                   	inc    eax
c0010a7b:	83 f8 04             	cmp    eax,0x4
c0010a7e:	75 f0                	jne    c0010a70 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010a80:	c7 44 24 10 ac 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020eac
c0010a88:	5b                   	pop    ebx
c0010a89:	5e                   	pop    esi
c0010a8a:	5f                   	pop    edi
c0010a8b:	e9 f0 41 00 00       	jmp    c0014c80 <Krnl::panic(char const*)>
c0010a90:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010a93:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010a96:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010a9c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010aa2:	5b                   	pop    ebx
c0010aa3:	5e                   	pop    esi
c0010aa4:	5f                   	pop    edi
c0010aa5:	c3                   	ret    

c0010aa6 <doubleFault(regs*, void*)>:
c0010aa6:	c7 44 24 04 dc 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fdc
c0010aae:	e9 cd 41 00 00       	jmp    c0014c80 <Krnl::panic(char const*)>
c0010ab3:	90                   	nop

c0010ab4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010ab4:	56                   	push   esi
c0010ab5:	53                   	push   ebx
c0010ab6:	50                   	push   eax
c0010ab7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010abb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010abf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010ac4:	75 35                	jne    c0010afb <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010ac6:	8d 43 20             	lea    eax,[ebx+0x20]
c0010ac9:	31 d2                	xor    edx,edx
c0010acb:	89 c1                	mov    ecx,eax
c0010acd:	c1 e1 04             	shl    ecx,0x4
c0010ad0:	01 f1                	add    ecx,esi
c0010ad2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010ada:	74 3e                	je     c0010b1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010adc:	42                   	inc    edx
c0010add:	83 fa 04             	cmp    edx,0x4
c0010ae0:	75 f0                	jne    c0010ad2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010ae2:	83 ec 0c             	sub    esp,0xc
c0010ae5:	68 20 0f 02 c0       	push   0xc0020f20
c0010aea:	e8 91 41 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c0010aef:	83 c4 10             	add    esp,0x10
c0010af2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010af7:	5a                   	pop    edx
c0010af8:	5b                   	pop    ebx
c0010af9:	5e                   	pop    esi
c0010afa:	c3                   	ret    
c0010afb:	83 ec 0c             	sub    esp,0xc
c0010afe:	56                   	push   esi
c0010aff:	e8 d4 fb ff ff       	call   c00106d8 <Device::getName()>
c0010b04:	83 c4 10             	add    esp,0x10
c0010b07:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b0a:	75 ba                	jne    c0010ac6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b0c:	83 fb 0f             	cmp    ebx,0xf
c0010b0f:	7f 29                	jg     c0010b3a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010b11:	0f b6 9b 80 2e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd180]
c0010b18:	eb ac                	jmp    c0010ac6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b1a:	8d 04 82             	lea    eax,[edx+eax*4]
c0010b1d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b21:	8d 04 86             	lea    eax,[esi+eax*4]
c0010b24:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010b2a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b2e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010b34:	89 d8                	mov    eax,ebx
c0010b36:	5a                   	pop    edx
c0010b37:	5b                   	pop    ebx
c0010b38:	5e                   	pop    esi
c0010b39:	c3                   	ret    
c0010b3a:	83 ec 0c             	sub    esp,0xc
c0010b3d:	68 e8 0e 02 c0       	push   0xc0020ee8
c0010b42:	e8 39 41 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c0010b47:	83 c4 10             	add    esp,0x10
c0010b4a:	e9 77 ff ff ff       	jmp    c0010ac6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b4f:	90                   	nop

c0010b50 <InterruptController::clearAllHandlers(int, bool)>:
c0010b50:	56                   	push   esi
c0010b51:	53                   	push   ebx
c0010b52:	52                   	push   edx
c0010b53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010b5b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010b60:	75 61                	jne    c0010bc3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010b62:	8d 46 20             	lea    eax,[esi+0x20]
c0010b65:	c1 e6 04             	shl    esi,0x4
c0010b68:	c1 e0 04             	shl    eax,0x4
c0010b6b:	01 de                	add    esi,ebx
c0010b6d:	01 d8                	add    eax,ebx
c0010b6f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010b79:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010b83:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010b8d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010b97:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010ba1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010bab:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010bb5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010bbf:	58                   	pop    eax
c0010bc0:	5b                   	pop    ebx
c0010bc1:	5e                   	pop    esi
c0010bc2:	c3                   	ret    
c0010bc3:	83 ec 0c             	sub    esp,0xc
c0010bc6:	53                   	push   ebx
c0010bc7:	e8 0c fb ff ff       	call   c00106d8 <Device::getName()>
c0010bcc:	83 c4 10             	add    esp,0x10
c0010bcf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010bd2:	75 8e                	jne    c0010b62 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010bd4:	83 fe 0f             	cmp    esi,0xf
c0010bd7:	7f 09                	jg     c0010be2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010bd9:	0f b6 b6 80 2e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd180]
c0010be0:	eb 80                	jmp    c0010b62 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010be2:	83 ec 0c             	sub    esp,0xc
c0010be5:	68 5c 0f 02 c0       	push   0xc0020f5c
c0010bea:	e8 91 40 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c0010bef:	83 c4 10             	add    esp,0x10
c0010bf2:	e9 6b ff ff ff       	jmp    c0010b62 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010bf7:	90                   	nop

c0010bf8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010bf8:	56                   	push   esi
c0010bf9:	53                   	push   ebx
c0010bfa:	52                   	push   edx
c0010bfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c03:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c08:	75 3a                	jne    c0010c44 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010c0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c0e:	8d 50 20             	lea    edx,[eax+0x20]
c0010c11:	c1 e2 04             	shl    edx,0x4
c0010c14:	8d 04 16             	lea    eax,[esi+edx*1]
c0010c17:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010c1b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010c21:	74 0b                	je     c0010c2e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010c23:	83 c0 04             	add    eax,0x4
c0010c26:	39 d0                	cmp    eax,edx
c0010c28:	75 f1                	jne    c0010c1b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010c2a:	58                   	pop    eax
c0010c2b:	5b                   	pop    ebx
c0010c2c:	5e                   	pop    esi
c0010c2d:	c3                   	ret    
c0010c2e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c38:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c42:	eb df                	jmp    c0010c23 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010c44:	83 ec 0c             	sub    esp,0xc
c0010c47:	56                   	push   esi
c0010c48:	e8 8b fa ff ff       	call   c00106d8 <Device::getName()>
c0010c4d:	83 c4 10             	add    esp,0x10
c0010c50:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c53:	75 b5                	jne    c0010c0a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010c55:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010c5a:	7f 11                	jg     c0010c6d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010c5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c60:	0f b6 80 80 2e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd180]
c0010c67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010c6b:	eb 9d                	jmp    c0010c0a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010c6d:	83 ec 0c             	sub    esp,0xc
c0010c70:	68 5c 0f 02 c0       	push   0xc0020f5c
c0010c75:	e8 06 40 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c0010c7a:	83 c4 10             	add    esp,0x10
c0010c7d:	eb 8b                	jmp    c0010c0a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010c7f <nmiHandler(regs*, void*)>:
c0010c7f:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0010c84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010c88:	e9 d5 a6 ff ff       	jmp    c000b362 <Computer::handleNMI()>

c0010c8d <int_handler>:
c0010c8d:	55                   	push   ebp
c0010c8e:	57                   	push   edi
c0010c8f:	56                   	push   esi
c0010c90:	53                   	push   ebx
c0010c91:	83 ec 0c             	sub    esp,0xc
c0010c94:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010c98:	80 3d 70 41 02 c0 00 	cmp    BYTE PTR ds:0xc0024170,0x0
c0010c9f:	74 0b                	je     c0010cac <int_handler+0x1f>
c0010ca1:	fa                   	cli    
c0010ca2:	f4                   	hlt    
c0010ca3:	80 3d 70 41 02 c0 00 	cmp    BYTE PTR ds:0xc0024170,0x0
c0010caa:	75 f5                	jne    c0010ca1 <int_handler+0x14>
c0010cac:	e8 c9 32 00 00       	call   c0013f7a <thisCPU()>
c0010cb1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010cb4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010cba:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010cbd:	83 f8 17             	cmp    eax,0x17
c0010cc0:	77 13                	ja     c0010cd5 <int_handler+0x48>
c0010cc2:	83 ec 08             	sub    esp,0x8
c0010cc5:	8b 17                	mov    edx,DWORD PTR [edi]
c0010cc7:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010cca:	0f b6 c0             	movzx  eax,al
c0010ccd:	50                   	push   eax
c0010cce:	57                   	push   edi
c0010ccf:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010cd2:	83 c4 10             	add    esp,0x10
c0010cd5:	83 c3 15             	add    ebx,0x15
c0010cd8:	c1 e3 04             	shl    ebx,0x4
c0010cdb:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010cdf:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010ce6:	31 db                	xor    ebx,ebx
c0010ce8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010cec:	85 c0                	test   eax,eax
c0010cee:	74 13                	je     c0010d03 <int_handler+0x76>
c0010cf0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010cf3:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010cf7:	74 1c                	je     c0010d15 <int_handler+0x88>
c0010cf9:	83 ec 08             	sub    esp,0x8
c0010cfc:	52                   	push   edx
c0010cfd:	56                   	push   esi
c0010cfe:	ff d0                	call   eax
c0010d00:	83 c4 10             	add    esp,0x10
c0010d03:	43                   	inc    ebx
c0010d04:	83 fb 04             	cmp    ebx,0x4
c0010d07:	75 df                	jne    c0010ce8 <int_handler+0x5b>
c0010d09:	83 c4 0c             	add    esp,0xc
c0010d0c:	31 c0                	xor    eax,eax
c0010d0e:	5b                   	pop    ebx
c0010d0f:	31 d2                	xor    edx,edx
c0010d11:	5e                   	pop    esi
c0010d12:	5f                   	pop    edi
c0010d13:	5d                   	pop    ebp
c0010d14:	c3                   	ret    
c0010d15:	83 ec 08             	sub    esp,0x8
c0010d18:	52                   	push   edx
c0010d19:	56                   	push   esi
c0010d1a:	ff d0                	call   eax
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	83 c4 0c             	add    esp,0xc
c0010d22:	5b                   	pop    ebx
c0010d23:	5e                   	pop    esi
c0010d24:	5f                   	pop    edi
c0010d25:	5d                   	pop    ebp
c0010d26:	c3                   	ret    
c0010d27:	90                   	nop

c0010d28 <InterruptController::InterruptController(char const*)>:
c0010d28:	83 ec 1c             	sub    esp,0x1c
c0010d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d2f:	83 ec 08             	sub    esp,0x8
c0010d32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d36:	50                   	push   eax
c0010d37:	e8 aa f8 ff ff       	call   c00105e6 <Device::Device(char const*)>
c0010d3c:	83 c4 10             	add    esp,0x10
c0010d3f:	ba 78 11 02 c0       	mov    edx,0xc0021178
c0010d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d48:	89 10                	mov    DWORD PTR [eax],edx
c0010d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d4e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010d58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d60:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010d68:	7f 5e                	jg     c0010dc8 <InterruptController::InterruptController(char const*)+0xa0>
c0010d6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010d72:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010d77:	7f 49                	jg     c0010dc2 <InterruptController::InterruptController(char const*)+0x9a>
c0010d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010d81:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010d88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d8c:	01 ca                	add    edx,ecx
c0010d8e:	83 c2 54             	add    edx,0x54
c0010d91:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010d99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010da1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010da8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010dac:	01 ca                	add    edx,ecx
c0010dae:	81 c2 54 04 00 00    	add    edx,0x454
c0010db4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010dbc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010dc0:	eb b0                	jmp    c0010d72 <InterruptController::InterruptController(char const*)+0x4a>
c0010dc2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010dc6:	eb 98                	jmp    c0010d60 <InterruptController::InterruptController(char const*)+0x38>
c0010dc8:	90                   	nop
c0010dc9:	83 c4 1c             	add    esp,0x1c
c0010dcc:	c3                   	ret    
c0010dcd:	90                   	nop

c0010dce <InterruptController::~InterruptController()>:
c0010dce:	83 ec 0c             	sub    esp,0xc
c0010dd1:	ba 78 11 02 c0       	mov    edx,0xc0021178
c0010dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dda:	89 10                	mov    DWORD PTR [eax],edx
c0010ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	50                   	push   eax
c0010de4:	e8 af f4 ff ff       	call   c0010298 <Device::~Device()>
c0010de9:	83 c4 10             	add    esp,0x10
c0010dec:	90                   	nop
c0010ded:	83 c4 0c             	add    esp,0xc
c0010df0:	c3                   	ret    
c0010df1:	90                   	nop

c0010df2 <InterruptController::~InterruptController()>:
c0010df2:	83 ec 0c             	sub    esp,0xc
c0010df5:	83 ec 0c             	sub    esp,0xc
c0010df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dfc:	e8 cd ff ff ff       	call   c0010dce <InterruptController::~InterruptController()>
c0010e01:	83 c4 10             	add    esp,0x10
c0010e04:	83 ec 08             	sub    esp,0x8
c0010e07:	68 58 21 00 00       	push   0x2158
c0010e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e10:	e8 f6 e0 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c0010e15:	83 c4 10             	add    esp,0x10
c0010e18:	83 c4 0c             	add    esp,0xc
c0010e1b:	c3                   	ret    

c0010e1c <displayDebugInfo(regs*)>:
c0010e1c:	55                   	push   ebp
c0010e1d:	57                   	push   edi
c0010e1e:	56                   	push   esi
c0010e1f:	53                   	push   ebx
c0010e20:	83 ec 24             	sub    esp,0x24
c0010e23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e27:	0f 20 c2             	mov    edx,cr0
c0010e2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010e2e:	0f 20 d7             	mov    edi,cr2
c0010e31:	0f 20 de             	mov    esi,cr3
c0010e34:	0f 20 e5             	mov    ebp,cr4
c0010e37:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010e3a:	68 e9 0f 02 c0       	push   0xc0020fe9
c0010e3f:	e8 a7 e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010e44:	58                   	pop    eax
c0010e45:	5a                   	pop    edx
c0010e46:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010e49:	68 f4 0f 02 c0       	push   0xc0020ff4
c0010e4e:	e8 98 e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010e53:	59                   	pop    ecx
c0010e54:	58                   	pop    eax
c0010e55:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010e58:	68 ff 0f 02 c0       	push   0xc0020fff
c0010e5d:	e8 89 e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010e62:	58                   	pop    eax
c0010e63:	5a                   	pop    edx
c0010e64:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010e67:	68 0a 10 02 c0       	push   0xc002100a
c0010e6c:	e8 7a e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010e71:	59                   	pop    ecx
c0010e72:	58                   	pop    eax
c0010e73:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e76:	68 15 10 02 c0       	push   0xc0021015
c0010e7b:	e8 6b e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010e80:	58                   	pop    eax
c0010e81:	5a                   	pop    edx
c0010e82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010e85:	68 20 10 02 c0       	push   0xc0021020
c0010e8a:	e8 5c e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010e8f:	59                   	pop    ecx
c0010e90:	58                   	pop    eax
c0010e91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010e94:	68 3a 10 02 c0       	push   0xc002103a
c0010e99:	e8 4d e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010e9e:	58                   	pop    eax
c0010e9f:	5a                   	pop    edx
c0010ea0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ea3:	68 2b 10 02 c0       	push   0xc002102b
c0010ea8:	e8 3e e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010ead:	59                   	pop    ecx
c0010eae:	58                   	pop    eax
c0010eaf:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010eb2:	68 36 10 02 c0       	push   0xc0021036
c0010eb7:	e8 2f e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010ebc:	58                   	pop    eax
c0010ebd:	5a                   	pop    edx
c0010ebe:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010ec1:	68 45 10 02 c0       	push   0xc0021045
c0010ec6:	e8 20 e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010ecb:	59                   	pop    ecx
c0010ecc:	58                   	pop    eax
c0010ecd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ed0:	68 50 10 02 c0       	push   0xc0021050
c0010ed5:	e8 11 e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010eda:	58                   	pop    eax
c0010edb:	5a                   	pop    edx
c0010edc:	57                   	push   edi
c0010edd:	68 5b 10 02 c0       	push   0xc002105b
c0010ee2:	e8 04 e1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010ee7:	59                   	pop    ecx
c0010ee8:	58                   	pop    eax
c0010ee9:	56                   	push   esi
c0010eea:	68 66 10 02 c0       	push   0xc0021066
c0010eef:	e8 f7 e0 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0010ef4:	58                   	pop    eax
c0010ef5:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010efa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f00:	e8 c8 bf ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0010f05:	58                   	pop    eax
c0010f06:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010f09:	5a                   	pop    edx
c0010f0a:	c1 e0 05             	shl    eax,0x5
c0010f0d:	05 e0 2b 02 c0       	add    eax,0xc0022be0
c0010f12:	50                   	push   eax
c0010f13:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010f18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f1e:	e8 c9 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f23:	59                   	pop    ecx
c0010f24:	58                   	pop    eax
c0010f25:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010f2a:	68 71 10 02 c0       	push   0xc0021071
c0010f2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f35:	e8 b2 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f3a:	58                   	pop    eax
c0010f3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f40:	5a                   	pop    edx
c0010f41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f44:	83 c0 0c             	add    eax,0xc
c0010f47:	50                   	push   eax
c0010f48:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010f4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f53:	e8 94 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f58:	59                   	pop    ecx
c0010f59:	58                   	pop    eax
c0010f5a:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010f5f:	68 7a 10 02 c0       	push   0xc002107a
c0010f64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f6a:	e8 7d c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f6f:	58                   	pop    eax
c0010f70:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010f75:	5a                   	pop    edx
c0010f76:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010f79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f7f:	e8 8e c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f84:	59                   	pop    ecx
c0010f85:	58                   	pop    eax
c0010f86:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010f8b:	68 82 10 02 c0       	push   0xc0021082
c0010f90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f96:	e8 51 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f9b:	58                   	pop    eax
c0010f9c:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010fa1:	5a                   	pop    edx
c0010fa2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010fa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fab:	e8 62 c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010fb0:	59                   	pop    ecx
c0010fb1:	58                   	pop    eax
c0010fb2:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010fb7:	68 8a 10 02 c0       	push   0xc002108a
c0010fbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fc2:	e8 25 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010fc7:	58                   	pop    eax
c0010fc8:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010fcd:	5a                   	pop    edx
c0010fce:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010fd1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fd7:	e8 36 c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010fdc:	59                   	pop    ecx
c0010fdd:	58                   	pop    eax
c0010fde:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010fe3:	68 92 10 02 c0       	push   0xc0021092
c0010fe8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fee:	e8 f9 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010ff3:	58                   	pop    eax
c0010ff4:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0010ff9:	5a                   	pop    edx
c0010ffa:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0010ffd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011003:	e8 0a c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011008:	59                   	pop    ecx
c0011009:	58                   	pop    eax
c001100a:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c001100f:	68 9a 10 02 c0       	push   0xc002109a
c0011014:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001101a:	e8 cd c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001101f:	58                   	pop    eax
c0011020:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011025:	5a                   	pop    edx
c0011026:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011029:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001102f:	e8 de c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011034:	59                   	pop    ecx
c0011035:	58                   	pop    eax
c0011036:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c001103b:	68 a2 10 02 c0       	push   0xc00210a2
c0011040:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011046:	e8 a1 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001104b:	58                   	pop    eax
c001104c:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011051:	5a                   	pop    edx
c0011052:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0011055:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001105b:	e8 b2 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011060:	59                   	pop    ecx
c0011061:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011066:	5b                   	pop    ebx
c0011067:	68 aa 10 02 c0       	push   0xc00210aa
c001106c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011072:	e8 75 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011077:	58                   	pop    eax
c0011078:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c001107d:	5a                   	pop    edx
c001107e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011082:	52                   	push   edx
c0011083:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011089:	e8 84 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001108e:	59                   	pop    ecx
c001108f:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011094:	5b                   	pop    ebx
c0011095:	68 b3 10 02 c0       	push   0xc00210b3
c001109a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110a0:	e8 47 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00110a5:	58                   	pop    eax
c00110a6:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c00110ab:	5a                   	pop    edx
c00110ac:	57                   	push   edi
c00110ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110b3:	e8 5a c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00110b8:	59                   	pop    ecx
c00110b9:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c00110be:	5b                   	pop    ebx
c00110bf:	68 bb 10 02 c0       	push   0xc00210bb
c00110c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ca:	e8 1d c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00110cf:	5f                   	pop    edi
c00110d0:	58                   	pop    eax
c00110d1:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c00110d6:	56                   	push   esi
c00110d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110dd:	e8 30 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00110e2:	58                   	pop    eax
c00110e3:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c00110e8:	5a                   	pop    edx
c00110e9:	68 c3 10 02 c0       	push   0xc00210c3
c00110ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110f4:	e8 f3 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00110f9:	59                   	pop    ecx
c00110fa:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c00110ff:	5b                   	pop    ebx
c0011100:	55                   	push   ebp
c0011101:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011107:	e8 06 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001110c:	5e                   	pop    esi
c001110d:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011112:	5f                   	pop    edi
c0011113:	68 cb 10 02 c0       	push   0xc00210cb
c0011118:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001111e:	e8 c9 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011123:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011128:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001112e:	e8 80 dc 00 00       	call   c001edb3 <CPU::readDR0()>
c0011133:	5d                   	pop    ebp
c0011134:	5a                   	pop    edx
c0011135:	50                   	push   eax
c0011136:	53                   	push   ebx
c0011137:	e8 d6 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001113c:	59                   	pop    ecx
c001113d:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011142:	5b                   	pop    ebx
c0011143:	68 d4 10 02 c0       	push   0xc00210d4
c0011148:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001114e:	e8 99 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011153:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011158:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001115e:	e8 62 dc 00 00       	call   c001edc5 <CPU::readDR1()>
c0011163:	5e                   	pop    esi
c0011164:	5f                   	pop    edi
c0011165:	50                   	push   eax
c0011166:	53                   	push   ebx
c0011167:	e8 a6 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001116c:	5d                   	pop    ebp
c001116d:	58                   	pop    eax
c001116e:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011173:	68 dc 10 02 c0       	push   0xc00210dc
c0011178:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001117e:	e8 69 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011183:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011188:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001118e:	e8 44 dc 00 00       	call   c001edd7 <CPU::readDR2()>
c0011193:	5a                   	pop    edx
c0011194:	59                   	pop    ecx
c0011195:	50                   	push   eax
c0011196:	53                   	push   ebx
c0011197:	e8 76 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001119c:	5b                   	pop    ebx
c001119d:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c00111a2:	5e                   	pop    esi
c00111a3:	68 e4 10 02 c0       	push   0xc00210e4
c00111a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111ae:	e8 39 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00111b3:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c00111b8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111be:	e8 26 dc 00 00       	call   c001ede9 <CPU::readDR3()>
c00111c3:	5f                   	pop    edi
c00111c4:	5d                   	pop    ebp
c00111c5:	50                   	push   eax
c00111c6:	53                   	push   ebx
c00111c7:	e8 46 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00111cc:	58                   	pop    eax
c00111cd:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c00111d2:	5a                   	pop    edx
c00111d3:	68 ec 10 02 c0       	push   0xc00210ec
c00111d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111de:	e8 09 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00111e3:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c00111e8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111ee:	e8 08 dc 00 00       	call   c001edfb <CPU::readDR6()>
c00111f3:	59                   	pop    ecx
c00111f4:	5e                   	pop    esi
c00111f5:	50                   	push   eax
c00111f6:	53                   	push   ebx
c00111f7:	e8 16 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00111fc:	5f                   	pop    edi
c00111fd:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011202:	5d                   	pop    ebp
c0011203:	68 f4 10 02 c0       	push   0xc00210f4
c0011208:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001120e:	e8 d9 c0 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011213:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011218:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001121e:	e8 ea db 00 00       	call   c001ee0d <CPU::readDR7()>
c0011223:	5a                   	pop    edx
c0011224:	59                   	pop    ecx
c0011225:	50                   	push   eax
c0011226:	53                   	push   ebx
c0011227:	e8 e6 c0 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001122c:	fa                   	cli    
c001122d:	f4                   	hlt    
c001122e:	83 c4 10             	add    esp,0x10
c0011231:	eb fe                	jmp    c0011231 <displayDebugInfo(regs*)+0x415>

c0011233 <x87EmulHandler(regs*, void*)>:
c0011233:	53                   	push   ebx
c0011234:	83 ec 08             	sub    esp,0x8
c0011237:	a1 b4 38 02 c0       	mov    eax,ds:0xc00238b4
c001123c:	85 c0                	test   eax,eax
c001123e:	74 15                	je     c0011255 <x87EmulHandler(regs*, void*)+0x22>
c0011240:	83 ec 0c             	sub    esp,0xc
c0011243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011247:	ff d0                	call   eax
c0011249:	83 c4 10             	add    esp,0x10
c001124c:	84 c0                	test   al,al
c001124e:	74 2f                	je     c001127f <x87EmulHandler(regs*, void*)+0x4c>
c0011250:	83 c4 08             	add    esp,0x8
c0011253:	5b                   	pop    ebx
c0011254:	c3                   	ret    
c0011255:	83 ec 08             	sub    esp,0x8
c0011258:	8b 1d 28 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023728
c001125e:	6a 01                	push   0x1
c0011260:	68 fc 10 02 c0       	push   0xc00210fc
c0011265:	e8 e4 63 00 00       	call   c001764e <Thr::loadDLL(char const*, bool)>
c001126a:	5a                   	pop    edx
c001126b:	59                   	pop    ecx
c001126c:	53                   	push   ebx
c001126d:	50                   	push   eax
c001126e:	e8 2e 65 00 00       	call   c00177a1 <Thr::executeDLL(unsigned long, void*)>
c0011273:	a1 b4 38 02 c0       	mov    eax,ds:0xc00238b4
c0011278:	83 c4 10             	add    esp,0x10
c001127b:	85 c0                	test   eax,eax
c001127d:	75 c1                	jne    c0011240 <x87EmulHandler(regs*, void*)+0xd>
c001127f:	83 ec 0c             	sub    esp,0xc
c0011282:	68 19 11 02 c0       	push   0xc0021119
c0011287:	e8 5f dd ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001128c:	58                   	pop    eax
c001128d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011291:	e8 86 fb ff ff       	call   c0010e1c <displayDebugInfo(regs*)>

c0011296 <gpFault(regs*, void*)>:
c0011296:	53                   	push   ebx
c0011297:	83 ec 14             	sub    esp,0x14
c001129a:	c7 05 b0 38 02 c0 13 8c 01 c0 	mov    DWORD PTR ds:0xc00238b0,0xc0018c13
c00112a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00112a8:	53                   	push   ebx
c00112a9:	e8 65 79 00 00       	call   c0018c13 <Vm::faultHandler(regs*)>
c00112ae:	83 c4 10             	add    esp,0x10
c00112b1:	84 c0                	test   al,al
c00112b3:	74 05                	je     c00112ba <gpFault(regs*, void*)+0x24>
c00112b5:	83 c4 08             	add    esp,0x8
c00112b8:	5b                   	pop    ebx
c00112b9:	c3                   	ret    
c00112ba:	83 ec 0c             	sub    esp,0xc
c00112bd:	68 19 11 02 c0       	push   0xc0021119
c00112c2:	e8 24 dd ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c00112c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112ca:	e8 4d fb ff ff       	call   c0010e1c <displayDebugInfo(regs*)>

c00112cf <pgFault(regs*, void*)>:
c00112cf:	83 ec 18             	sub    esp,0x18
c00112d2:	68 34 11 02 c0       	push   0xc0021134
c00112d7:	e8 0f dd ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c00112dc:	58                   	pop    eax
c00112dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e1:	e8 36 fb ff ff       	call   c0010e1c <displayDebugInfo(regs*)>

c00112e6 <otherISRHandler(regs*, void*)>:
c00112e6:	53                   	push   ebx
c00112e7:	83 ec 0c             	sub    esp,0xc
c00112ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00112ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00112f1:	50                   	push   eax
c00112f2:	50                   	push   eax
c00112f3:	68 41 11 02 c0       	push   0xc0021141
c00112f8:	e8 ee dc ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c00112fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011300:	e8 17 fb ff ff       	call   c0010e1c <displayDebugInfo(regs*)>

c0011305 <opcodeFault(regs*, void*)>:
c0011305:	53                   	push   ebx
c0011306:	83 ec 08             	sub    esp,0x8
c0011309:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001130d:	e8 68 2c 00 00       	call   c0013f7a <thisCPU()>
c0011312:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0011319:	74 16                	je     c0011331 <opcodeFault(regs*, void*)+0x2c>
c001131b:	83 ec 0c             	sub    esp,0xc
c001131e:	68 98 0f 02 c0       	push   0xc0020f98
c0011323:	e8 c3 dc ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0011328:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c001132c:	83 c4 18             	add    esp,0x18
c001132f:	5b                   	pop    ebx
c0011330:	c3                   	ret    
c0011331:	83 ec 0c             	sub    esp,0xc
c0011334:	68 5e 11 02 c0       	push   0xc002115e
c0011339:	e8 ad dc ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001133e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0011341:	c1 e0 04             	shl    eax,0x4
c0011344:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0011347:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001134b:	89 14 24             	mov    DWORD PTR [esp],edx
c001134e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0011352:	52                   	push   edx
c0011353:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0011357:	52                   	push   edx
c0011358:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001135b:	50                   	push   eax
c001135c:	68 bc 0f 02 c0       	push   0xc0020fbc
c0011361:	e8 85 dc ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0011366:	83 c4 14             	add    esp,0x14
c0011369:	53                   	push   ebx
c001136a:	e8 ad fa ff ff       	call   c0010e1c <displayDebugInfo(regs*)>

c001136f <displayProgramFault(char const*)>:
c001136f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011374:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011377:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001137d:	85 c0                	test   eax,eax
c001137f:	74 15                	je     c0011396 <displayProgramFault(char const*)+0x27>
c0011381:	83 ec 0c             	sub    esp,0xc
c0011384:	6a 04                	push   0x4
c0011386:	6a 0f                	push   0xf
c0011388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001138c:	50                   	push   eax
c001138d:	e8 1c bc ff ff       	call   c000cfae <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011392:	83 c4 1c             	add    esp,0x1c
c0011395:	c3                   	ret    
c0011396:	c3                   	ret    
c0011397:	90                   	nop

c0011398 <InterruptController::convertLegacyIRQNumber(int)>:
c0011398:	53                   	push   ebx
c0011399:	83 ec 14             	sub    esp,0x14
c001139c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a4:	e8 2f f3 ff ff       	call   c00106d8 <Device::getName()>
c00113a9:	83 c4 10             	add    esp,0x10
c00113ac:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00113af:	74 07                	je     c00113b8 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00113b1:	89 d8                	mov    eax,ebx
c00113b3:	83 c4 08             	add    esp,0x8
c00113b6:	5b                   	pop    ebx
c00113b7:	c3                   	ret    
c00113b8:	83 fb 0f             	cmp    ebx,0xf
c00113bb:	7f 0e                	jg     c00113cb <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00113bd:	0f b6 9b 80 2e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd180]
c00113c4:	83 c4 08             	add    esp,0x8
c00113c7:	89 d8                	mov    eax,ebx
c00113c9:	5b                   	pop    ebx
c00113ca:	c3                   	ret    
c00113cb:	83 ec 0c             	sub    esp,0xc
c00113ce:	68 e8 0e 02 c0       	push   0xc0020ee8
c00113d3:	e8 a8 38 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c00113d8:	89 d8                	mov    eax,ebx
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	83 c4 08             	add    esp,0x8
c00113e0:	5b                   	pop    ebx
c00113e1:	c3                   	ret    

c00113e2 <setupInterruptController()>:
c00113e2:	56                   	push   esi
c00113e3:	53                   	push   ebx
c00113e4:	51                   	push   ecx
c00113e5:	e8 8d 2b 00 00       	call   c0013f77 <getCPUNumber()>
c00113ea:	85 c0                	test   eax,eax
c00113ec:	0f 85 10 02 00 00    	jne    c0011602 <setupInterruptController()+0x220>
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c00113fa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011400:	68 58 21 00 00       	push   0x2158
c0011405:	83 e0 01             	and    eax,0x1
c0011408:	89 c6                	mov    esi,eax
c001140a:	e8 ed da ff ff       	call   c000eefc <operator new(unsigned long)>
c001140f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011412:	89 c3                	mov    ebx,eax
c0011414:	e8 1b c8 00 00       	call   c001dc34 <PIC::PIC()>
c0011419:	6a 00                	push   0x0
c001141b:	6a 00                	push   0x0
c001141d:	6a 00                	push   0x0
c001141f:	53                   	push   ebx
c0011420:	e8 53 cb 00 00       	call   c001df78 <PIC::open(int, int, void*)>
c0011425:	83 c4 20             	add    esp,0x20
c0011428:	89 f0                	mov    eax,esi
c001142a:	84 c0                	test   al,al
c001142c:	0f 85 92 01 00 00    	jne    c00115c4 <setupInterruptController()+0x1e2>
c0011432:	83 ec 08             	sub    esp,0x8
c0011435:	53                   	push   ebx
c0011436:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c001143c:	e8 b5 ef ff ff       	call   c00103f6 <Device::addChild(Device*)>
c0011441:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011443:	6a 00                	push   0x0
c0011445:	68 e6 12 01 c0       	push   0xc00112e6
c001144a:	6a 00                	push   0x0
c001144c:	53                   	push   ebx
c001144d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011450:	83 c4 20             	add    esp,0x20
c0011453:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011455:	6a 00                	push   0x0
c0011457:	68 e6 12 01 c0       	push   0xc00112e6
c001145c:	6a 01                	push   0x1
c001145e:	53                   	push   ebx
c001145f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011464:	6a 00                	push   0x0
c0011466:	68 7f 0c 01 c0       	push   0xc0010c7f
c001146b:	6a 02                	push   0x2
c001146d:	53                   	push   ebx
c001146e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011471:	83 c4 20             	add    esp,0x20
c0011474:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011476:	6a 00                	push   0x0
c0011478:	68 e6 12 01 c0       	push   0xc00112e6
c001147d:	6a 03                	push   0x3
c001147f:	53                   	push   ebx
c0011480:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011483:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011485:	6a 00                	push   0x0
c0011487:	68 e6 12 01 c0       	push   0xc00112e6
c001148c:	6a 04                	push   0x4
c001148e:	53                   	push   ebx
c001148f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011492:	83 c4 20             	add    esp,0x20
c0011495:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011497:	6a 00                	push   0x0
c0011499:	68 e6 12 01 c0       	push   0xc00112e6
c001149e:	6a 05                	push   0x5
c00114a0:	53                   	push   ebx
c00114a1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114a6:	6a 00                	push   0x0
c00114a8:	68 05 13 01 c0       	push   0xc0011305
c00114ad:	6a 06                	push   0x6
c00114af:	53                   	push   ebx
c00114b0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114b3:	83 c4 20             	add    esp,0x20
c00114b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114b8:	6a 00                	push   0x0
c00114ba:	68 33 12 01 c0       	push   0xc0011233
c00114bf:	6a 07                	push   0x7
c00114c1:	53                   	push   ebx
c00114c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114c7:	6a 00                	push   0x0
c00114c9:	68 a6 0a 01 c0       	push   0xc0010aa6
c00114ce:	6a 08                	push   0x8
c00114d0:	53                   	push   ebx
c00114d1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114d4:	83 c4 20             	add    esp,0x20
c00114d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114d9:	6a 00                	push   0x0
c00114db:	68 e6 12 01 c0       	push   0xc00112e6
c00114e0:	6a 09                	push   0x9
c00114e2:	53                   	push   ebx
c00114e3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114e8:	6a 00                	push   0x0
c00114ea:	68 e6 12 01 c0       	push   0xc00112e6
c00114ef:	6a 0a                	push   0xa
c00114f1:	53                   	push   ebx
c00114f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114f5:	83 c4 20             	add    esp,0x20
c00114f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114fa:	6a 00                	push   0x0
c00114fc:	68 e6 12 01 c0       	push   0xc00112e6
c0011501:	6a 0b                	push   0xb
c0011503:	53                   	push   ebx
c0011504:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011507:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011509:	6a 00                	push   0x0
c001150b:	68 e6 12 01 c0       	push   0xc00112e6
c0011510:	6a 0c                	push   0xc
c0011512:	53                   	push   ebx
c0011513:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011516:	83 c4 20             	add    esp,0x20
c0011519:	8b 03                	mov    eax,DWORD PTR [ebx]
c001151b:	6a 00                	push   0x0
c001151d:	68 96 12 01 c0       	push   0xc0011296
c0011522:	6a 0d                	push   0xd
c0011524:	53                   	push   ebx
c0011525:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011528:	8b 03                	mov    eax,DWORD PTR [ebx]
c001152a:	6a 00                	push   0x0
c001152c:	68 cf 12 01 c0       	push   0xc00112cf
c0011531:	6a 0e                	push   0xe
c0011533:	53                   	push   ebx
c0011534:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011537:	83 c4 20             	add    esp,0x20
c001153a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001153c:	6a 00                	push   0x0
c001153e:	68 e6 12 01 c0       	push   0xc00112e6
c0011543:	6a 0f                	push   0xf
c0011545:	53                   	push   ebx
c0011546:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011549:	8b 03                	mov    eax,DWORD PTR [ebx]
c001154b:	6a 00                	push   0x0
c001154d:	68 e6 12 01 c0       	push   0xc00112e6
c0011552:	6a 10                	push   0x10
c0011554:	53                   	push   ebx
c0011555:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011558:	83 c4 20             	add    esp,0x20
c001155b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001155d:	6a 00                	push   0x0
c001155f:	68 e6 12 01 c0       	push   0xc00112e6
c0011564:	6a 11                	push   0x11
c0011566:	53                   	push   ebx
c0011567:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001156a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001156c:	6a 00                	push   0x0
c001156e:	68 e6 12 01 c0       	push   0xc00112e6
c0011573:	6a 12                	push   0x12
c0011575:	53                   	push   ebx
c0011576:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011579:	83 c4 20             	add    esp,0x20
c001157c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001157e:	6a 00                	push   0x0
c0011580:	68 e6 12 01 c0       	push   0xc00112e6
c0011585:	6a 13                	push   0x13
c0011587:	53                   	push   ebx
c0011588:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001158b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001158d:	6a 00                	push   0x0
c001158f:	68 e6 12 01 c0       	push   0xc00112e6
c0011594:	6a 14                	push   0x14
c0011596:	53                   	push   ebx
c0011597:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001159a:	83 c4 20             	add    esp,0x20
c001159d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001159f:	6a 00                	push   0x0
c00115a1:	68 e6 12 01 c0       	push   0xc00112e6
c00115a6:	6a 1e                	push   0x1e
c00115a8:	53                   	push   ebx
c00115a9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115ae:	6a 00                	push   0x0
c00115b0:	68 52 66 01 c0       	push   0xc0016652
c00115b5:	6a 60                	push   0x60
c00115b7:	53                   	push   ebx
c00115b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115bb:	83 c4 20             	add    esp,0x20
c00115be:	89 d8                	mov    eax,ebx
c00115c0:	5a                   	pop    edx
c00115c1:	5b                   	pop    ebx
c00115c2:	5e                   	pop    esi
c00115c3:	c3                   	ret    
c00115c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115c6:	6a 00                	push   0x0
c00115c8:	6a 00                	push   0x0
c00115ca:	6a 00                	push   0x0
c00115cc:	53                   	push   ebx
c00115cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00115d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115d5:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00115d8:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00115df:	e8 18 d9 ff ff       	call   c000eefc <operator new(unsigned long)>
c00115e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00115e7:	89 c3                	mov    ebx,eax
c00115e9:	e8 84 c1 00 00       	call   c001d772 <APIC::APIC()>
c00115ee:	6a 00                	push   0x0
c00115f0:	6a 00                	push   0x0
c00115f2:	6a 00                	push   0x0
c00115f4:	53                   	push   ebx
c00115f5:	e8 96 c0 00 00       	call   c001d690 <APIC::open(int, int, void*)>
c00115fa:	83 c4 20             	add    esp,0x20
c00115fd:	e9 30 fe ff ff       	jmp    c0011432 <setupInterruptController()+0x50>
c0011602:	83 ec 0c             	sub    esp,0xc
c0011605:	68 58 21 00 00       	push   0x2158
c001160a:	e8 ed d8 ff ff       	call   c000eefc <operator new(unsigned long)>
c001160f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011612:	89 c3                	mov    ebx,eax
c0011614:	e8 59 c1 00 00       	call   c001d772 <APIC::APIC()>
c0011619:	6a 00                	push   0x0
c001161b:	6a 00                	push   0x0
c001161d:	6a 00                	push   0x0
c001161f:	53                   	push   ebx
c0011620:	e8 6b c0 00 00       	call   c001d690 <APIC::open(int, int, void*)>
c0011625:	83 c4 18             	add    esp,0x18
c0011628:	53                   	push   ebx
c0011629:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c001162f:	e8 c2 ed ff ff       	call   c00103f6 <Device::addChild(Device*)>
c0011634:	83 c4 10             	add    esp,0x10
c0011637:	89 d8                	mov    eax,ebx
c0011639:	5a                   	pop    edx
c001163a:	5b                   	pop    ebx
c001163b:	5e                   	pop    esi
c001163c:	c3                   	ret    
c001163d:	90                   	nop

c001163e <startGUI(void*)>:
c001163e:	55                   	push   ebp
c001163f:	89 e5                	mov    ebp,esp
c0011641:	53                   	push   ebx
c0011642:	83 ec 04             	sub    esp,0x4
c0011645:	e8 64 65 00 00       	call   c0017bae <unlockScheduler()>
c001164a:	e8 48 65 00 00       	call   c0017b97 <getIRQNestingLevel()>
c001164f:	83 ec 08             	sub    esp,0x8
c0011652:	50                   	push   eax
c0011653:	68 b8 11 02 c0       	push   0xc00211b8
c0011658:	e8 8e d9 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001165d:	83 c4 10             	add    esp,0x10
c0011660:	8b 1d 28 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023728
c0011666:	83 ec 08             	sub    esp,0x8
c0011669:	6a 01                	push   0x1
c001166b:	68 d2 11 02 c0       	push   0xc00211d2
c0011670:	e8 d9 5f 00 00       	call   c001764e <Thr::loadDLL(char const*, bool)>
c0011675:	83 c4 10             	add    esp,0x10
c0011678:	83 ec 08             	sub    esp,0x8
c001167b:	53                   	push   ebx
c001167c:	50                   	push   eax
c001167d:	e8 1f 61 00 00       	call   c00177a1 <Thr::executeDLL(unsigned long, void*)>
c0011682:	83 c4 10             	add    esp,0x10
c0011685:	8b 1d 28 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023728
c001168b:	83 ec 08             	sub    esp,0x8
c001168e:	6a 01                	push   0x1
c0011690:	68 ec 11 02 c0       	push   0xc00211ec
c0011695:	e8 b4 5f 00 00       	call   c001764e <Thr::loadDLL(char const*, bool)>
c001169a:	83 c4 10             	add    esp,0x10
c001169d:	83 ec 08             	sub    esp,0x8
c00116a0:	53                   	push   ebx
c00116a1:	50                   	push   eax
c00116a2:	e8 fa 60 00 00       	call   c00177a1 <Thr::executeDLL(unsigned long, void*)>
c00116a7:	83 c4 10             	add    esp,0x10
c00116aa:	90                   	nop
c00116ab:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00116ae:	c9                   	leave  
c00116af:	c3                   	ret    

c00116b0 <sendKeyToTerminal(unsigned char)>:
c00116b0:	55                   	push   ebp
c00116b1:	89 e5                	mov    ebp,esp
c00116b3:	83 ec 28             	sub    esp,0x28
c00116b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116b9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00116bc:	a1 e4 37 02 c0       	mov    eax,ds:0xc00237e4
c00116c1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00116c5:	83 ec 08             	sub    esp,0x8
c00116c8:	52                   	push   edx
c00116c9:	50                   	push   eax
c00116ca:	e8 1b be ff ff       	call   c000d4ea <VgaText::receiveKey(unsigned char)>
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00116d6:	75 41                	jne    c0011719 <sendKeyToTerminal(unsigned char)+0x69>
c00116d8:	e8 f6 64 00 00       	call   c0017bd3 <lockStuff()>
c00116dd:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c00116e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00116e5:	c7 05 c0 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238c0,0x0
c00116ef:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00116f3:	74 1f                	je     c0011714 <sendKeyToTerminal(unsigned char)+0x64>
c00116f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00116fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00116fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011701:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011704:	83 ec 0c             	sub    esp,0xc
c0011707:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001170a:	e8 ad 6c 00 00       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c001170f:	83 c4 10             	add    esp,0x10
c0011712:	eb db                	jmp    c00116ef <sendKeyToTerminal(unsigned char)+0x3f>
c0011714:	e8 4c 68 00 00       	call   c0017f65 <unlockStuff()>
c0011719:	90                   	nop
c001171a:	c9                   	leave  
c001171b:	c3                   	ret    

c001171c <sendKeyboardToken(KeyboardToken)>:
c001171c:	55                   	push   ebp
c001171d:	89 e5                	mov    ebp,esp
c001171f:	83 ec 18             	sub    esp,0x18
c0011722:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011728:	0f b7 c0             	movzx  eax,ax
c001172b:	83 f2 01             	xor    edx,0x1
c001172e:	88 90 e0 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc720],dl
c0011734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011737:	66 3d 03 02          	cmp    ax,0x203
c001173b:	75 07                	jne    c0011744 <sendKeyboardToken(KeyboardToken)+0x28>
c001173d:	a0 e0 39 02 c0       	mov    al,ds:0xc00239e0
c0011742:	84 c0                	test   al,al
c0011744:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011748:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001174b:	a0 e8 3c 02 c0       	mov    al,ds:0xc0023ce8
c0011750:	38 c2                	cmp    dl,al
c0011752:	74 1c                	je     c0011770 <sendKeyboardToken(KeyboardToken)+0x54>
c0011754:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011757:	a2 e8 3c 02 c0       	mov    ds:0xc0023ce8,al
c001175c:	a0 e8 3c 02 c0       	mov    al,ds:0xc0023ce8
c0011761:	0f b6 c0             	movzx  eax,al
c0011764:	83 ec 0c             	sub    esp,0xc
c0011767:	50                   	push   eax
c0011768:	e8 eb af ff ff       	call   c000c758 <setTerminalScrollLock(bool)>
c001176d:	83 c4 10             	add    esp,0x10
c0011770:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011773:	84 c0                	test   al,al
c0011775:	0f 84 ae 00 00 00    	je     c0011829 <sendKeyboardToken(KeyboardToken)+0x10d>
c001177b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001177e:	66 3d 10 03          	cmp    ax,0x310
c0011782:	75 06                	jne    c001178a <sendKeyboardToken(KeyboardToken)+0x6e>
c0011784:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001178a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001178d:	66 3d 11 03          	cmp    ax,0x311
c0011791:	75 06                	jne    c0011799 <sendKeyboardToken(KeyboardToken)+0x7d>
c0011793:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001179c:	66 3d 12 03          	cmp    ax,0x312
c00117a0:	75 06                	jne    c00117a8 <sendKeyboardToken(KeyboardToken)+0x8c>
c00117a2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00117a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ab:	66 3d 13 03          	cmp    ax,0x313
c00117af:	75 06                	jne    c00117b7 <sendKeyboardToken(KeyboardToken)+0x9b>
c00117b1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00117b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ba:	66 3d 14 03          	cmp    ax,0x314
c00117be:	75 06                	jne    c00117c6 <sendKeyboardToken(KeyboardToken)+0xaa>
c00117c0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00117c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c9:	66 3d 15 03          	cmp    ax,0x315
c00117cd:	75 06                	jne    c00117d5 <sendKeyboardToken(KeyboardToken)+0xb9>
c00117cf:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00117d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d8:	66 3d 16 03          	cmp    ax,0x316
c00117dc:	75 06                	jne    c00117e4 <sendKeyboardToken(KeyboardToken)+0xc8>
c00117de:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00117e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e7:	66 3d 17 03          	cmp    ax,0x317
c00117eb:	75 06                	jne    c00117f3 <sendKeyboardToken(KeyboardToken)+0xd7>
c00117ed:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00117f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f6:	66 3d 18 03          	cmp    ax,0x318
c00117fa:	75 06                	jne    c0011802 <sendKeyboardToken(KeyboardToken)+0xe6>
c00117fc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011805:	66 3d 19 03          	cmp    ax,0x319
c0011809:	75 06                	jne    c0011811 <sendKeyboardToken(KeyboardToken)+0xf5>
c001180b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011814:	66 3d 1a 03          	cmp    ax,0x31a
c0011818:	0f 85 c9 00 00 00    	jne    c00118e7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001181e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011824:	e9 be 00 00 00       	jmp    c00118e7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001182c:	66 3d 10 03          	cmp    ax,0x310
c0011830:	75 0a                	jne    c001183c <sendKeyboardToken(KeyboardToken)+0x120>
c0011832:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0011838:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001183c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001183f:	66 3d 11 03          	cmp    ax,0x311
c0011843:	75 0a                	jne    c001184f <sendKeyboardToken(KeyboardToken)+0x133>
c0011845:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001184b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001184f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011852:	66 3d 12 03          	cmp    ax,0x312
c0011856:	75 0a                	jne    c0011862 <sendKeyboardToken(KeyboardToken)+0x146>
c0011858:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001185e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011865:	66 3d 13 03          	cmp    ax,0x313
c0011869:	75 0a                	jne    c0011875 <sendKeyboardToken(KeyboardToken)+0x159>
c001186b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0011871:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011878:	66 3d 14 03          	cmp    ax,0x314
c001187c:	75 0a                	jne    c0011888 <sendKeyboardToken(KeyboardToken)+0x16c>
c001187e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0011884:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001188b:	66 3d 15 03          	cmp    ax,0x315
c001188f:	75 0a                	jne    c001189b <sendKeyboardToken(KeyboardToken)+0x17f>
c0011891:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011897:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001189b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189e:	66 3d 16 03          	cmp    ax,0x316
c00118a2:	75 0a                	jne    c00118ae <sendKeyboardToken(KeyboardToken)+0x192>
c00118a4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00118aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b1:	66 3d 17 03          	cmp    ax,0x317
c00118b5:	75 0a                	jne    c00118c1 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00118b7:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00118bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c4:	66 3d 18 03          	cmp    ax,0x318
c00118c8:	75 0a                	jne    c00118d4 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00118ca:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00118d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d7:	66 3d 19 03          	cmp    ax,0x319
c00118db:	75 0a                	jne    c00118e7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00118dd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00118e3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ea:	66 3d 00 02          	cmp    ax,0x200
c00118ee:	75 2a                	jne    c001191a <sendKeyboardToken(KeyboardToken)+0x1fe>
c00118f0:	a0 e0 3c 02 c0       	mov    al,ds:0xc0023ce0
c00118f5:	83 f0 01             	xor    eax,0x1
c00118f8:	84 c0                	test   al,al
c00118fa:	74 1e                	je     c001191a <sendKeyboardToken(KeyboardToken)+0x1fe>
c00118fc:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0011901:	6a 01                	push   0x1
c0011903:	6a 00                	push   0x0
c0011905:	68 3e 16 01 c0       	push   0xc001163e
c001190a:	50                   	push   eax
c001190b:	e8 c6 63 00 00       	call   c0017cd6 <Process::createThread(void (*)(void*), void*, int)>
c0011910:	83 c4 10             	add    esp,0x10
c0011913:	c6 05 e0 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023ce0,0x1
c001191a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191d:	66 3d 1d 03          	cmp    ax,0x31d
c0011921:	75 06                	jne    c0011929 <sendKeyboardToken(KeyboardToken)+0x20d>
c0011923:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001192c:	66 3d 1c 03          	cmp    ax,0x31c
c0011930:	75 06                	jne    c0011938 <sendKeyboardToken(KeyboardToken)+0x21c>
c0011932:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001193b:	66 3d 1b 03          	cmp    ax,0x31b
c001193f:	75 06                	jne    c0011947 <sendKeyboardToken(KeyboardToken)+0x22b>
c0011941:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0011947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194a:	66 3d 1e 03          	cmp    ax,0x31e
c001194e:	75 06                	jne    c0011956 <sendKeyboardToken(KeyboardToken)+0x23a>
c0011950:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0011956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011959:	66 3d 1f 03          	cmp    ax,0x31f
c001195d:	75 06                	jne    c0011965 <sendKeyboardToken(KeyboardToken)+0x249>
c001195f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0011965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011968:	66 3d 1a 03          	cmp    ax,0x31a
c001196c:	75 06                	jne    c0011974 <sendKeyboardToken(KeyboardToken)+0x258>
c001196e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0011974:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0011978:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001197b:	83 f0 01             	xor    eax,0x1
c001197e:	84 c0                	test   al,al
c0011980:	74 77                	je     c00119f9 <sendKeyboardToken(KeyboardToken)+0x2dd>
c0011982:	a0 e1 39 02 c0       	mov    al,ds:0xc00239e1
c0011987:	84 c0                	test   al,al
c0011989:	74 41                	je     c00119cc <sendKeyboardToken(KeyboardToken)+0x2b0>
c001198b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001198f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0011993:	74 2b                	je     c00119c0 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0011995:	8b 15 e4 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023ce4
c001199b:	89 d0                	mov    eax,edx
c001199d:	c1 e0 02             	shl    eax,0x2
c00119a0:	01 d0                	add    eax,edx
c00119a2:	01 c0                	add    eax,eax
c00119a4:	a3 e4 3c 02 c0       	mov    ds:0xc0023ce4,eax
c00119a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ac:	0f b7 c0             	movzx  eax,ax
c00119af:	8d 50 d0             	lea    edx,[eax-0x30]
c00119b2:	a1 e4 3c 02 c0       	mov    eax,ds:0xc0023ce4
c00119b7:	01 d0                	add    eax,edx
c00119b9:	a3 e4 3c 02 c0       	mov    ds:0xc0023ce4,eax
c00119be:	eb 6d                	jmp    c0011a2d <sendKeyboardToken(KeyboardToken)+0x311>
c00119c0:	c7 05 e4 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ce4,0x0
c00119ca:	eb 61                	jmp    c0011a2d <sendKeyboardToken(KeyboardToken)+0x311>
c00119cc:	a1 e4 3c 02 c0       	mov    eax,ds:0xc0023ce4
c00119d1:	85 c0                	test   eax,eax
c00119d3:	74 18                	je     c00119ed <sendKeyboardToken(KeyboardToken)+0x2d1>
c00119d5:	a1 e4 3c 02 c0       	mov    eax,ds:0xc0023ce4
c00119da:	0f b6 c0             	movzx  eax,al
c00119dd:	83 ec 0c             	sub    esp,0xc
c00119e0:	50                   	push   eax
c00119e1:	e8 ca fc ff ff       	call   c00116b0 <sendKeyToTerminal(unsigned char)>
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00119ed:	c7 05 e4 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ce4,0x0
c00119f7:	eb 34                	jmp    c0011a2d <sendKeyboardToken(KeyboardToken)+0x311>
c00119f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119fc:	66 3d 01 01          	cmp    ax,0x101
c0011a00:	75 2b                	jne    c0011a2d <sendKeyboardToken(KeyboardToken)+0x311>
c0011a02:	a1 e4 3c 02 c0       	mov    eax,ds:0xc0023ce4
c0011a07:	85 c0                	test   eax,eax
c0011a09:	74 18                	je     c0011a23 <sendKeyboardToken(KeyboardToken)+0x307>
c0011a0b:	a1 e4 3c 02 c0       	mov    eax,ds:0xc0023ce4
c0011a10:	0f b6 c0             	movzx  eax,al
c0011a13:	83 ec 0c             	sub    esp,0xc
c0011a16:	50                   	push   eax
c0011a17:	e8 94 fc ff ff       	call   c00116b0 <sendKeyToTerminal(unsigned char)>
c0011a1c:	83 c4 10             	add    esp,0x10
c0011a1f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011a23:	c7 05 e4 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ce4,0x0
c0011a2d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011a30:	83 f0 01             	xor    eax,0x1
c0011a33:	84 c0                	test   al,al
c0011a35:	74 4c                	je     c0011a83 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a37:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011a3a:	83 f0 01             	xor    eax,0x1
c0011a3d:	84 c0                	test   al,al
c0011a3f:	74 42                	je     c0011a83 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a41:	a0 e0 39 02 c0       	mov    al,ds:0xc00239e0
c0011a46:	83 f0 01             	xor    eax,0x1
c0011a49:	84 c0                	test   al,al
c0011a4b:	74 36                	je     c0011a83 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a50:	66 83 f8 1f          	cmp    ax,0x1f
c0011a54:	76 09                	jbe    c0011a5f <sendKeyboardToken(KeyboardToken)+0x343>
c0011a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a59:	66 83 f8 7e          	cmp    ax,0x7e
c0011a5d:	76 12                	jbe    c0011a71 <sendKeyboardToken(KeyboardToken)+0x355>
c0011a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a62:	66 83 f8 0a          	cmp    ax,0xa
c0011a66:	74 09                	je     c0011a71 <sendKeyboardToken(KeyboardToken)+0x355>
c0011a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a6b:	66 83 f8 08          	cmp    ax,0x8
c0011a6f:	75 12                	jne    c0011a83 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a74:	0f b6 c0             	movzx  eax,al
c0011a77:	83 ec 0c             	sub    esp,0xc
c0011a7a:	50                   	push   eax
c0011a7b:	e8 30 fc ff ff       	call   c00116b0 <sendKeyToTerminal(unsigned char)>
c0011a80:	83 c4 10             	add    esp,0x10
c0011a83:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011a86:	83 f0 01             	xor    eax,0x1
c0011a89:	84 c0                	test   al,al
c0011a8b:	74 4f                	je     c0011adc <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a8d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011a90:	83 f0 01             	xor    eax,0x1
c0011a93:	84 c0                	test   al,al
c0011a95:	74 45                	je     c0011adc <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a97:	a0 e0 39 02 c0       	mov    al,ds:0xc00239e0
c0011a9c:	84 c0                	test   al,al
c0011a9e:	74 3c                	je     c0011adc <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa3:	66 83 f8 3f          	cmp    ax,0x3f
c0011aa7:	76 33                	jbe    c0011adc <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aac:	66 83 f8 7f          	cmp    ax,0x7f
c0011ab0:	77 2a                	ja     c0011adc <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab5:	88 c2                	mov    dl,al
c0011ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aba:	66 83 f8 5f          	cmp    ax,0x5f
c0011abe:	76 04                	jbe    c0011ac4 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011ac0:	b0 20                	mov    al,0x20
c0011ac2:	eb 02                	jmp    c0011ac6 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011ac4:	b0 00                	mov    al,0x0
c0011ac6:	29 c2                	sub    edx,eax
c0011ac8:	88 d0                	mov    al,dl
c0011aca:	83 e8 40             	sub    eax,0x40
c0011acd:	0f b6 c0             	movzx  eax,al
c0011ad0:	83 ec 0c             	sub    esp,0xc
c0011ad3:	50                   	push   eax
c0011ad4:	e8 d7 fb ff ff       	call   c00116b0 <sendKeyToTerminal(unsigned char)>
c0011ad9:	83 c4 10             	add    esp,0x10
c0011adc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011adf:	66 3d 00 03          	cmp    ax,0x300
c0011ae3:	75 0f                	jne    c0011af4 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011ae5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011ae8:	83 f0 01             	xor    eax,0x1
c0011aeb:	84 c0                	test   al,al
c0011aed:	74 05                	je     c0011af4 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011aef:	e8 8b b4 ff ff       	call   c000cf7f <doTerminalCycle()>
c0011af4:	90                   	nop
c0011af5:	c9                   	leave  
c0011af6:	c3                   	ret    

c0011af7 <clearInternalKeybuffer(VgaText*)>:
c0011af7:	55                   	push   ebp
c0011af8:	89 e5                	mov    ebp,esp
c0011afa:	83 ec 08             	sub    esp,0x8
c0011afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b00:	05 34 11 00 00       	add    eax,0x1134
c0011b05:	83 ec 0c             	sub    esp,0xc
c0011b08:	50                   	push   eax
c0011b09:	e8 17 eb fe ff       	call   c0000625 <strlen>
c0011b0e:	83 c4 10             	add    esp,0x10
c0011b11:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b14:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b1a:	83 ec 04             	sub    esp,0x4
c0011b1d:	50                   	push   eax
c0011b1e:	6a 00                	push   0x0
c0011b20:	52                   	push   edx
c0011b21:	e8 e2 ea fe ff       	call   c0000608 <memset>
c0011b26:	83 c4 10             	add    esp,0x10
c0011b29:	90                   	nop
c0011b2a:	c9                   	leave  
c0011b2b:	c3                   	ret    

c0011b2c <readKeyboard(VgaText*, char*, unsigned long)>:
c0011b2c:	55                   	push   ebp
c0011b2d:	89 e5                	mov    ebp,esp
c0011b2f:	83 ec 18             	sub    esp,0x18
c0011b32:	fb                   	sti    
c0011b33:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011b3a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011b3e:	74 77                	je     c0011bb7 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b43:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011b49:	84 c0                	test   al,al
c0011b4b:	75 02                	jne    c0011b4f <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011b4d:	eb f1                	jmp    c0011b40 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011b4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011b52:	8d 50 01             	lea    edx,[eax+0x1]
c0011b55:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011b58:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b5b:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011b61:	88 10                	mov    BYTE PTR [eax],dl
c0011b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b66:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011b6c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b72:	05 34 11 00 00       	add    eax,0x1134
c0011b77:	83 ec 0c             	sub    esp,0xc
c0011b7a:	50                   	push   eax
c0011b7b:	e8 a5 ea fe ff       	call   c0000625 <strlen>
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b86:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b8c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011b8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b92:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b98:	83 ec 04             	sub    esp,0x4
c0011b9b:	50                   	push   eax
c0011b9c:	51                   	push   ecx
c0011b9d:	52                   	push   edx
c0011b9e:	e8 f7 e9 fe ff       	call   c000059a <memmove>
c0011ba3:	83 c4 10             	add    esp,0x10
c0011ba6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011ba9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011bac:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011bb0:	75 88                	jne    c0011b3a <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011bb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bb5:	eb 03                	jmp    c0011bba <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011bb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bba:	c9                   	leave  
c0011bbb:	c3                   	ret    

c0011bbc <Keyboard::Keyboard(char const*)>:
c0011bbc:	83 ec 0c             	sub    esp,0xc
c0011bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bc3:	83 ec 08             	sub    esp,0x8
c0011bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bca:	50                   	push   eax
c0011bcb:	e8 16 ea ff ff       	call   c00105e6 <Device::Device(char const*)>
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	ba 10 12 02 c0       	mov    edx,0xc0021210
c0011bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bdc:	89 10                	mov    DWORD PTR [eax],edx
c0011bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011be2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011bec:	c6 05 c4 38 02 c0 01 	mov    BYTE PTR ds:0xc00238c4,0x1
c0011bf3:	90                   	nop
c0011bf4:	83 c4 0c             	add    esp,0xc
c0011bf7:	c3                   	ret    

c0011bf8 <Keyboard::~Keyboard()>:
c0011bf8:	83 ec 0c             	sub    esp,0xc
c0011bfb:	ba 10 12 02 c0       	mov    edx,0xc0021210
c0011c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c04:	89 10                	mov    DWORD PTR [eax],edx
c0011c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c0a:	83 ec 0c             	sub    esp,0xc
c0011c0d:	50                   	push   eax
c0011c0e:	e8 85 e6 ff ff       	call   c0010298 <Device::~Device()>
c0011c13:	83 c4 10             	add    esp,0x10
c0011c16:	90                   	nop
c0011c17:	83 c4 0c             	add    esp,0xc
c0011c1a:	c3                   	ret    
c0011c1b:	90                   	nop

c0011c1c <Keyboard::~Keyboard()>:
c0011c1c:	83 ec 0c             	sub    esp,0xc
c0011c1f:	83 ec 0c             	sub    esp,0xc
c0011c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c26:	e8 cd ff ff ff       	call   c0011bf8 <Keyboard::~Keyboard()>
c0011c2b:	83 c4 10             	add    esp,0x10
c0011c2e:	83 ec 08             	sub    esp,0x8
c0011c31:	68 5c 01 00 00       	push   0x15c
c0011c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c3a:	e8 cc d2 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c0011c3f:	83 c4 10             	add    esp,0x10
c0011c42:	83 c4 0c             	add    esp,0xc
c0011c45:	c3                   	ret    

c0011c46 <LogicalDisk::close(int, int, void*)>:
c0011c46:	83 c8 ff             	or     eax,0xffffffff
c0011c49:	c3                   	ret    

c0011c4a <LogicalDisk::~LogicalDisk()>:
c0011c4a:	83 ec 0c             	sub    esp,0xc
c0011c4d:	ba c0 12 02 c0       	mov    edx,0xc00212c0
c0011c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c56:	89 10                	mov    DWORD PTR [eax],edx
c0011c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c5c:	83 ec 0c             	sub    esp,0xc
c0011c5f:	50                   	push   eax
c0011c60:	e8 33 e6 ff ff       	call   c0010298 <Device::~Device()>
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	90                   	nop
c0011c69:	83 c4 0c             	add    esp,0xc
c0011c6c:	c3                   	ret    
c0011c6d:	90                   	nop

c0011c6e <LogicalDisk::~LogicalDisk()>:
c0011c6e:	83 ec 0c             	sub    esp,0xc
c0011c71:	83 ec 0c             	sub    esp,0xc
c0011c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c78:	e8 cd ff ff ff       	call   c0011c4a <LogicalDisk::~LogicalDisk()>
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	83 ec 08             	sub    esp,0x8
c0011c83:	68 74 01 00 00       	push   0x174
c0011c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c8c:	e8 7a d2 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c0011c91:	83 c4 10             	add    esp,0x10
c0011c94:	83 c4 0c             	add    esp,0xc
c0011c97:	c3                   	ret    

c0011c98 <LogicalDisk::open(int, int, void*)>:
c0011c98:	83 ec 18             	sub    esp,0x18
c0011c9b:	68 3c 12 02 c0       	push   0xc002123c
c0011ca0:	e8 db 2f 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c0011ca5:	83 c8 ff             	or     eax,0xffffffff
c0011ca8:	83 c4 1c             	add    esp,0x1c
c0011cab:	c3                   	ret    

c0011cac <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011cac:	53                   	push   ebx
c0011cad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011cb9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011cbf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011cc5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011ccb:	77 10                	ja     c0011cdd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011ccd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011cd3:	89 d3                	mov    ebx,edx
c0011cd5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011cdb:	72 05                	jb     c0011ce2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011cdd:	83 c8 ff             	or     eax,0xffffffff
c0011ce0:	89 c2                	mov    edx,eax
c0011ce2:	5b                   	pop    ebx
c0011ce3:	c3                   	ret    

c0011ce4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011ce4:	56                   	push   esi
c0011ce5:	83 c8 ff             	or     eax,0xffffffff
c0011ce8:	53                   	push   ebx
c0011ce9:	89 c2                	mov    edx,eax
c0011ceb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011cef:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011cf7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011cfd:	77 27                	ja     c0011d26 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011cff:	89 d8                	mov    eax,ebx
c0011d01:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011d07:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011d0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d12:	89 c2                	mov    edx,eax
c0011d14:	73 10                	jae    c0011d26 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011d16:	89 c8                	mov    eax,ecx
c0011d18:	89 da                	mov    edx,ebx
c0011d1a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011d20:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011d26:	5b                   	pop    ebx
c0011d27:	5e                   	pop    esi
c0011d28:	c3                   	ret    
c0011d29:	90                   	nop

c0011d2a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011d2a:	83 ec 1c             	sub    esp,0x1c
c0011d2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d41:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011d48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d50:	83 ec 08             	sub    esp,0x8
c0011d53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d57:	50                   	push   eax
c0011d58:	e8 89 e8 ff ff       	call   c00105e6 <Device::Device(char const*)>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	ba c0 12 02 c0       	mov    edx,0xc00212c0
c0011d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d69:	89 10                	mov    DWORD PTR [eax],edx
c0011d6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d6f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d7a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011d81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d85:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011d8f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011d93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d9b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011da1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011da7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011dab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011dae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011db2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011db8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dc2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dc6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dd0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011dda:	90                   	nop
c0011ddb:	83 c4 1c             	add    esp,0x1c
c0011dde:	c3                   	ret    
c0011ddf:	90                   	nop

c0011de0 <LogicalDisk::assignDriveLetter()>:
c0011de0:	55                   	push   ebp
c0011de1:	57                   	push   edi
c0011de2:	56                   	push   esi
c0011de3:	53                   	push   ebx
c0011de4:	83 ec 14             	sub    esp,0x14
c0011de7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011deb:	8b 3d 00 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023d00
c0011df1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011df7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011dfb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011e01:	8b 3d 04 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023d04
c0011e07:	3c 01                	cmp    al,0x1
c0011e09:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011e0d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011e11:	19 c0                	sbb    eax,eax
c0011e13:	83 e0 02             	and    eax,0x2
c0011e16:	83 c0 41             	add    eax,0x41
c0011e19:	0f be e8             	movsx  ebp,al
c0011e1c:	3c 43                	cmp    al,0x43
c0011e1e:	75 10                	jne    c0011e30 <LogicalDisk::assignDriveLetter()+0x50>
c0011e20:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011e27:	75 5d                	jne    c0011e86 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e29:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011e2e:	75 56                	jne    c0011e86 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e30:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011e33:	ba 01 00 00 00       	mov    edx,0x1
c0011e38:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011e3c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011e40:	d3 e2                	shl    edx,cl
c0011e42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011e46:	89 d7                	mov    edi,edx
c0011e48:	89 d6                	mov    esi,edx
c0011e4a:	c1 ff 1f             	sar    edi,0x1f
c0011e4d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011e51:	21 f9                	and    ecx,edi
c0011e53:	09 d1                	or     ecx,edx
c0011e55:	75 2f                	jne    c0011e86 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e57:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011e5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e5f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011e65:	09 f2                	or     edx,esi
c0011e67:	89 15 00 3d 02 c0    	mov    DWORD PTR ds:0xc0023d00,edx
c0011e6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e71:	09 fa                	or     edx,edi
c0011e73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011e77:	89 15 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,edx
c0011e7d:	89 1c bd 20 3d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc2e0],ebx
c0011e84:	eb 08                	jmp    c0011e8e <LogicalDisk::assignDriveLetter()+0xae>
c0011e86:	45                   	inc    ebp
c0011e87:	40                   	inc    eax
c0011e88:	3c 5b                	cmp    al,0x5b
c0011e8a:	75 90                	jne    c0011e1c <LogicalDisk::assignDriveLetter()+0x3c>
c0011e8c:	31 c0                	xor    eax,eax
c0011e8e:	83 c4 14             	add    esp,0x14
c0011e91:	5b                   	pop    ebx
c0011e92:	5e                   	pop    esi
c0011e93:	5f                   	pop    edi
c0011e94:	5d                   	pop    ebp
c0011e95:	c3                   	ret    

c0011e96 <LogicalDisk::mount()>:
c0011e96:	56                   	push   esi
c0011e97:	53                   	push   ebx
c0011e98:	51                   	push   ecx
c0011e99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011e9d:	8b 1d 88 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023888
c0011ea3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011ead:	85 db                	test   ebx,ebx
c0011eaf:	74 50                	je     c0011f01 <LogicalDisk::mount()+0x6b>
c0011eb1:	e8 e1 5c 00 00       	call   c0017b97 <getIRQNestingLevel()>
c0011eb6:	52                   	push   edx
c0011eb7:	52                   	push   edx
c0011eb8:	50                   	push   eax
c0011eb9:	68 60 12 02 c0       	push   0xc0021260
c0011ebe:	e8 28 d1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0011ec3:	83 c4 0c             	add    esp,0xc
c0011ec6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011ecd:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ecf:	83 e8 41             	sub    eax,0x41
c0011ed2:	50                   	push   eax
c0011ed3:	56                   	push   esi
c0011ed4:	53                   	push   ebx
c0011ed5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ed8:	83 c4 10             	add    esp,0x10
c0011edb:	84 c0                	test   al,al
c0011edd:	74 08                	je     c0011ee7 <LogicalDisk::mount()+0x51>
c0011edf:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011ee5:	eb 1c                	jmp    c0011f03 <LogicalDisk::mount()+0x6d>
c0011ee7:	e8 ab 5c 00 00       	call   c0017b97 <getIRQNestingLevel()>
c0011eec:	51                   	push   ecx
c0011eed:	51                   	push   ecx
c0011eee:	50                   	push   eax
c0011eef:	68 7b 12 02 c0       	push   0xc002127b
c0011ef4:	e8 f2 d0 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0011ef9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011efc:	83 c4 10             	add    esp,0x10
c0011eff:	eb ac                	jmp    c0011ead <LogicalDisk::mount()+0x17>
c0011f01:	31 c0                	xor    eax,eax
c0011f03:	5a                   	pop    edx
c0011f04:	5b                   	pop    ebx
c0011f05:	5e                   	pop    esi
c0011f06:	c3                   	ret    
c0011f07:	90                   	nop

c0011f08 <LogicalDisk::unmount()>:
c0011f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f0c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011f16:	c3                   	ret    
c0011f17:	90                   	nop

c0011f18 <LogicalDisk::unassignDriveLetter()>:
c0011f18:	57                   	push   edi
c0011f19:	56                   	push   esi
c0011f1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f1e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011f25:	84 c9                	test   cl,cl
c0011f27:	75 0f                	jne    c0011f38 <LogicalDisk::unassignDriveLetter()+0x20>
c0011f29:	c7 44 24 0c 96 12 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021296
c0011f31:	5e                   	pop    esi
c0011f32:	5f                   	pop    edi
c0011f33:	e9 48 2d 00 00       	jmp    c0014c80 <Krnl::panic(char const*)>
c0011f38:	83 e9 41             	sub    ecx,0x41
c0011f3b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011f42:	b8 01 00 00 00       	mov    eax,0x1
c0011f47:	c7 04 8d 20 3d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc2e0],0x0
c0011f52:	d3 e0                	shl    eax,cl
c0011f54:	89 c7                	mov    edi,eax
c0011f56:	f7 d0                	not    eax
c0011f58:	c1 ff 1f             	sar    edi,0x1f
c0011f5b:	21 05 00 3d 02 c0    	and    DWORD PTR ds:0xc0023d00,eax
c0011f61:	89 fe                	mov    esi,edi
c0011f63:	f7 d6                	not    esi
c0011f65:	21 35 04 3d 02 c0    	and    DWORD PTR ds:0xc0023d04,esi
c0011f6b:	5e                   	pop    esi
c0011f6c:	5f                   	pop    edi
c0011f6d:	c3                   	ret    

c0011f6e <LogicalDisk::read(unsigned long long, int, void*)>:
c0011f6e:	57                   	push   edi
c0011f6f:	56                   	push   esi
c0011f70:	53                   	push   ebx
c0011f71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011f75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011f79:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011f7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f81:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011f87:	77 41                	ja     c0011fca <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011f89:	99                   	cdq    
c0011f8a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011f90:	01 c8                	add    eax,ecx
c0011f92:	11 da                	adc    edx,ebx
c0011f94:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011f9a:	19 d7                	sbb    edi,edx
c0011f9c:	72 33                	jb     c0011fd1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011f9e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011fa4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011faa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011fae:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011fb2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011fb8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011fbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011fc2:	5b                   	pop    ebx
c0011fc3:	5e                   	pop    esi
c0011fc4:	5f                   	pop    edi
c0011fc5:	e9 9a 09 00 00       	jmp    c0012964 <VCache::read(unsigned long long, int, void*)>
c0011fca:	b8 05 00 00 00       	mov    eax,0x5
c0011fcf:	eb 05                	jmp    c0011fd6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0011fd1:	b8 07 00 00 00       	mov    eax,0x7
c0011fd6:	5b                   	pop    ebx
c0011fd7:	5e                   	pop    esi
c0011fd8:	5f                   	pop    edi
c0011fd9:	c3                   	ret    

c0011fda <LogicalDisk::write(unsigned long long, int, void*)>:
c0011fda:	57                   	push   edi
c0011fdb:	56                   	push   esi
c0011fdc:	53                   	push   ebx
c0011fdd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011fe1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011fe5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011fe9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011ff3:	77 41                	ja     c0012036 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0011ff5:	99                   	cdq    
c0011ff6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011ffc:	01 c8                	add    eax,ecx
c0011ffe:	11 da                	adc    edx,ebx
c0012000:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012006:	19 d7                	sbb    edi,edx
c0012008:	72 33                	jb     c001203d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001200a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012010:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012016:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001201a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001201e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012024:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001202a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001202e:	5b                   	pop    ebx
c001202f:	5e                   	pop    esi
c0012030:	5f                   	pop    edi
c0012031:	e9 4a 08 00 00       	jmp    c0012880 <VCache::write(unsigned long long, int, void*)>
c0012036:	b8 05 00 00 00       	mov    eax,0x5
c001203b:	eb 05                	jmp    c0012042 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001203d:	b8 07 00 00 00       	mov    eax,0x7
c0012042:	5b                   	pop    ebx
c0012043:	5e                   	pop    esi
c0012044:	5f                   	pop    edi
c0012045:	c3                   	ret    

c0012046 <Mouse::Mouse(char const*)>:
c0012046:	83 ec 0c             	sub    esp,0xc
c0012049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001204d:	83 ec 08             	sub    esp,0x8
c0012050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012054:	50                   	push   eax
c0012055:	e8 8c e5 ff ff       	call   c00105e6 <Device::Device(char const*)>
c001205a:	83 c4 10             	add    esp,0x10
c001205d:	ba ec 12 02 c0       	mov    edx,0xc00212ec
c0012062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012066:	89 10                	mov    DWORD PTR [eax],edx
c0012068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001206c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012076:	90                   	nop
c0012077:	83 c4 0c             	add    esp,0xc
c001207a:	c3                   	ret    
c001207b:	90                   	nop

c001207c <Mouse::~Mouse()>:
c001207c:	83 ec 0c             	sub    esp,0xc
c001207f:	ba ec 12 02 c0       	mov    edx,0xc00212ec
c0012084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012088:	89 10                	mov    DWORD PTR [eax],edx
c001208a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001208e:	83 ec 0c             	sub    esp,0xc
c0012091:	50                   	push   eax
c0012092:	e8 01 e2 ff ff       	call   c0010298 <Device::~Device()>
c0012097:	83 c4 10             	add    esp,0x10
c001209a:	90                   	nop
c001209b:	83 c4 0c             	add    esp,0xc
c001209e:	c3                   	ret    
c001209f:	90                   	nop

c00120a0 <Mouse::~Mouse()>:
c00120a0:	83 ec 0c             	sub    esp,0xc
c00120a3:	83 ec 0c             	sub    esp,0xc
c00120a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120aa:	e8 cd ff ff ff       	call   c001207c <Mouse::~Mouse()>
c00120af:	83 c4 10             	add    esp,0x10
c00120b2:	83 ec 08             	sub    esp,0x8
c00120b5:	68 58 01 00 00       	push   0x158
c00120ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120be:	e8 48 ce ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	83 c4 0c             	add    esp,0xc
c00120c9:	c3                   	ret    

c00120ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00120ca:	55                   	push   ebp
c00120cb:	57                   	push   edi
c00120cc:	56                   	push   esi
c00120cd:	53                   	push   ebx
c00120ce:	81 ec 28 01 00 00    	sub    esp,0x128
c00120d4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00120db:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00120e2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00120e9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00120f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00120f8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00120ff:	e8 d4 e5 ff ff       	call   c00106d8 <Device::getName()>
c0012104:	5a                   	pop    edx
c0012105:	59                   	pop    ecx
c0012106:	50                   	push   eax
c0012107:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001210b:	55                   	push   ebp
c001210c:	e8 96 e5 fe ff       	call   c00006a7 <strcpy>
c0012111:	5b                   	pop    ebx
c0012112:	58                   	pop    eax
c0012113:	68 10 13 02 c0       	push   0xc0021310
c0012118:	55                   	push   ebp
c0012119:	e8 40 e6 fe ff       	call   c000075e <strcat>
c001211e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012125:	e8 d2 cd ff ff       	call   c000eefc <operator new(unsigned long)>
c001212a:	83 c4 0c             	add    esp,0xc
c001212d:	89 c3                	mov    ebx,eax
c001212f:	57                   	push   edi
c0012130:	56                   	push   esi
c0012131:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012135:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012139:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012140:	55                   	push   ebp
c0012141:	50                   	push   eax
c0012142:	e8 e3 fb ff ff       	call   c0011d2a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012147:	83 c4 14             	add    esp,0x14
c001214a:	53                   	push   ebx
c001214b:	e8 90 fc ff ff       	call   c0011de0 <LogicalDisk::assignDriveLetter()>
c0012150:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012153:	e8 3e fd ff ff       	call   c0011e96 <LogicalDisk::mount()>
c0012158:	58                   	pop    eax
c0012159:	5a                   	pop    edx
c001215a:	53                   	push   ebx
c001215b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012162:	e8 8f e2 ff ff       	call   c00103f6 <Device::addChild(Device*)>
c0012167:	81 c4 2c 01 00 00    	add    esp,0x12c
c001216d:	5b                   	pop    ebx
c001216e:	5e                   	pop    esi
c001216f:	5f                   	pop    edi
c0012170:	5d                   	pop    ebp
c0012171:	c3                   	ret    

c0012172 <createPartitionsForDisk(PhysicalDisk*)>:
c0012172:	55                   	push   ebp
c0012173:	57                   	push   edi
c0012174:	56                   	push   esi
c0012175:	53                   	push   ebx
c0012176:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001217c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012183:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012189:	3d 00 02 00 00       	cmp    eax,0x200
c001218e:	74 27                	je     c00121b7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012190:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012196:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001219c:	83 ec 10             	sub    esp,0x10
c001219f:	0f a4 f7 0a          	shld   edi,esi,0xa
c00121a3:	99                   	cdq    
c00121a4:	c1 e6 0a             	shl    esi,0xa
c00121a7:	52                   	push   edx
c00121a8:	89 fd                	mov    ebp,edi
c00121aa:	50                   	push   eax
c00121ab:	55                   	push   ebp
c00121ac:	56                   	push   esi
c00121ad:	e8 9a c5 00 00       	call   c001e74c <__udivdi3>
c00121b2:	e9 b1 00 00 00       	jmp    c0012268 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00121b7:	83 ec 0c             	sub    esp,0xc
c00121ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121bc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00121c0:	56                   	push   esi
c00121c1:	6a 01                	push   0x1
c00121c3:	6a 00                	push   0x0
c00121c5:	6a 00                	push   0x0
c00121c7:	53                   	push   ebx
c00121c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00121cb:	83 c4 20             	add    esp,0x20
c00121ce:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00121d6:	75 0a                	jne    c00121e2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00121d8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00121e0:	74 2c                	je     c001220e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00121e2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00121e8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00121ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00121f4:	83 ec 10             	sub    esp,0x10
c00121f7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00121fb:	89 f7                	mov    edi,esi
c00121fd:	c1 e0 0a             	shl    eax,0xa
c0012200:	c1 ff 1f             	sar    edi,0x1f
c0012203:	57                   	push   edi
c0012204:	56                   	push   esi
c0012205:	52                   	push   edx
c0012206:	50                   	push   eax
c0012207:	e8 40 c5 00 00       	call   c001e74c <__udivdi3>
c001220c:	eb 5a                	jmp    c0012268 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001220e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012215:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001221c:	83 e1 7f             	and    ecx,0x7f
c001221f:	83 e0 7f             	and    eax,0x7f
c0012222:	01 c1                	add    ecx,eax
c0012224:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001222b:	83 e0 7f             	and    eax,0x7f
c001222e:	01 c1                	add    ecx,eax
c0012230:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012237:	83 e0 7f             	and    eax,0x7f
c001223a:	00 c1                	add    cl,al
c001223c:	74 41                	je     c001227f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001223e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012244:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001224a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012250:	83 ec 10             	sub    esp,0x10
c0012253:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012257:	89 f7                	mov    edi,esi
c0012259:	c1 e0 0a             	shl    eax,0xa
c001225c:	c1 ff 1f             	sar    edi,0x1f
c001225f:	57                   	push   edi
c0012260:	56                   	push   esi
c0012261:	52                   	push   edx
c0012262:	50                   	push   eax
c0012263:	e8 e4 c4 00 00       	call   c001e74c <__udivdi3>
c0012268:	83 c4 14             	add    esp,0x14
c001226b:	52                   	push   edx
c001226c:	50                   	push   eax
c001226d:	6a 00                	push   0x0
c001226f:	6a 00                	push   0x0
c0012271:	53                   	push   ebx
c0012272:	e8 53 fe ff ff       	call   c00120ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012277:	83 c4 20             	add    esp,0x20
c001227a:	e9 79 01 00 00       	jmp    c00123f8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001227f:	89 f0                	mov    eax,esi
c0012281:	31 f6                	xor    esi,esi
c0012283:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001228a:	75 02                	jne    c001228e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001228c:	89 f1                	mov    ecx,esi
c001228e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012295:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001229c:	c1 e2 08             	shl    edx,0x8
c001229f:	c1 e7 10             	shl    edi,0x10
c00122a2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00122aa:	09 fa                	or     edx,edi
c00122ac:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00122b4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00122bb:	83 c0 10             	add    eax,0x10
c00122be:	09 fa                	or     edx,edi
c00122c0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00122c7:	c1 e7 18             	shl    edi,0x18
c00122ca:	09 fa                	or     edx,edi
c00122cc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00122d3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00122d7:	c1 e7 10             	shl    edi,0x10
c00122da:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00122e1:	c1 e2 08             	shl    edx,0x8
c00122e4:	09 fa                	or     edx,edi
c00122e6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00122ed:	09 fa                	or     edx,edi
c00122ef:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00122f6:	c1 e7 18             	shl    edi,0x18
c00122f9:	09 fa                	or     edx,edi
c00122fb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00122ff:	46                   	inc    esi
c0012300:	83 fe 04             	cmp    esi,0x4
c0012303:	0f 85 7a ff ff ff    	jne    c0012283 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230d:	83 f0 01             	xor    eax,0x1
c0012310:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012314:	75 57                	jne    c001236d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012316:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001231a:	83 f0 01             	xor    eax,0x1
c001231d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012321:	75 4a                	jne    c001236d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012323:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012327:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001232f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012337:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001233d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012343:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012349:	0f a4 c2 0a          	shld   edx,eax,0xa
c001234d:	89 f7                	mov    edi,esi
c001234f:	c1 e0 0a             	shl    eax,0xa
c0012352:	c1 ff 1f             	sar    edi,0x1f
c0012355:	57                   	push   edi
c0012356:	56                   	push   esi
c0012357:	52                   	push   edx
c0012358:	50                   	push   eax
c0012359:	e8 ee c3 00 00       	call   c001e74c <__udivdi3>
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012365:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012369:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001236d:	84 c9                	test   cl,cl
c001236f:	74 53                	je     c00123c4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012371:	0f b6 c9             	movzx  ecx,cl
c0012374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012378:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001237c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012380:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012384:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012388:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001238c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012390:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012394:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012398:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001239c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123a4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00123a8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00123ac:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00123b0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00123b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00123b8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00123bc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00123c0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00123c4:	31 ed                	xor    ebp,ebp
c00123c6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00123ca:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00123ce:	89 f8                	mov    eax,edi
c00123d0:	09 f0                	or     eax,esi
c00123d2:	74 1e                	je     c00123f2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00123d4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00123d8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00123dc:	89 d1                	mov    ecx,edx
c00123de:	09 c1                	or     ecx,eax
c00123e0:	74 10                	je     c00123f2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00123e2:	83 ec 0c             	sub    esp,0xc
c00123e5:	57                   	push   edi
c00123e6:	56                   	push   esi
c00123e7:	52                   	push   edx
c00123e8:	50                   	push   eax
c00123e9:	53                   	push   ebx
c00123ea:	e8 db fc ff ff       	call   c00120ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00123ef:	83 c4 20             	add    esp,0x20
c00123f2:	45                   	inc    ebp
c00123f3:	83 fd 04             	cmp    ebp,0x4
c00123f6:	75 ce                	jne    c00123c6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00123f8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00123fe:	5b                   	pop    ebx
c00123ff:	5e                   	pop    esi
c0012400:	5f                   	pop    edi
c0012401:	5d                   	pop    ebp
c0012402:	c3                   	ret    
c0012403:	90                   	nop

c0012404 <Timer::Timer(char const*)>:
c0012404:	83 ec 0c             	sub    esp,0xc
c0012407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001240b:	83 ec 08             	sub    esp,0x8
c001240e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012412:	50                   	push   eax
c0012413:	e8 ce e1 ff ff       	call   c00105e6 <Device::Device(char const*)>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	ba 24 13 02 c0       	mov    edx,0xc0021324
c0012420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012424:	89 10                	mov    DWORD PTR [eax],edx
c0012426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001242a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012434:	90                   	nop
c0012435:	83 c4 0c             	add    esp,0xc
c0012438:	c3                   	ret    
c0012439:	90                   	nop

c001243a <Timer::~Timer()>:
c001243a:	83 ec 0c             	sub    esp,0xc
c001243d:	ba 24 13 02 c0       	mov    edx,0xc0021324
c0012442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012446:	89 10                	mov    DWORD PTR [eax],edx
c0012448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001244c:	83 ec 0c             	sub    esp,0xc
c001244f:	50                   	push   eax
c0012450:	e8 43 de ff ff       	call   c0010298 <Device::~Device()>
c0012455:	83 c4 10             	add    esp,0x10
c0012458:	90                   	nop
c0012459:	83 c4 0c             	add    esp,0xc
c001245c:	c3                   	ret    
c001245d:	90                   	nop

c001245e <Timer::~Timer()>:
c001245e:	83 ec 0c             	sub    esp,0xc
c0012461:	83 ec 0c             	sub    esp,0xc
c0012464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012468:	e8 cd ff ff ff       	call   c001243a <Timer::~Timer()>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	83 ec 08             	sub    esp,0x8
c0012473:	68 5c 01 00 00       	push   0x15c
c0012478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001247c:	e8 8a ca ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c0012481:	83 c4 10             	add    esp,0x10
c0012484:	83 c4 0c             	add    esp,0xc
c0012487:	c3                   	ret    

c0012488 <Timer::read()>:
c0012488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001248c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012492:	c3                   	ret    

c0012493 <timerHandler(unsigned long long)>:
c0012493:	55                   	push   ebp
c0012494:	57                   	push   edi
c0012495:	56                   	push   esi
c0012496:	53                   	push   ebx
c0012497:	83 ec 0c             	sub    esp,0xc
c001249a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001249e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00124a2:	01 35 90 3d 02 c0    	add    DWORD PTR ds:0xc0023d90,esi
c00124a8:	11 3d 94 3d 02 c0    	adc    DWORD PTR ds:0xc0023d94,edi
c00124ae:	80 3d 2d 37 02 c0 00 	cmp    BYTE PTR ds:0xc002372d,0x0
c00124b5:	0f 84 07 01 00 00    	je     c00125c2 <timerHandler(unsigned long long)+0x12f>
c00124bb:	e8 13 57 00 00       	call   c0017bd3 <lockStuff()>
c00124c0:	83 ec 0c             	sub    esp,0xc
c00124c3:	68 5c 4b 02 c0       	push   0xc0024b5c
c00124c8:	e8 53 c9 00 00       	call   c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00124cd:	c7 04 24 5c 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b5c
c00124d4:	89 c3                	mov    ebx,eax
c00124d6:	e8 4d c9 00 00       	call   c001ee28 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00124db:	83 c4 10             	add    esp,0x10
c00124de:	84 c0                	test   al,al
c00124e0:	74 60                	je     c0012542 <timerHandler(unsigned long long)+0xaf>
c00124e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00124e8:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00124eb:	85 c0                	test   eax,eax
c00124ed:	0f 85 91 00 00 00    	jne    c0012584 <timerHandler(unsigned long long)+0xf1>
c00124f3:	e9 be 00 00 00       	jmp    c00125b6 <timerHandler(unsigned long long)+0x123>
c00124f8:	83 ec 0c             	sub    esp,0xc
c00124fb:	55                   	push   ebp
c00124fc:	e8 bb 5e 00 00       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c0012501:	83 c4 10             	add    esp,0x10
c0012504:	39 eb                	cmp    ebx,ebp
c0012506:	75 12                	jne    c001251a <timerHandler(unsigned long long)+0x87>
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	68 5c 4b 02 c0       	push   0xc0024b5c
c0012510:	e8 0b c9 00 00       	call   c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012515:	89 c3                	mov    ebx,eax
c0012517:	83 c4 10             	add    esp,0x10
c001251a:	83 ec 0c             	sub    esp,0xc
c001251d:	68 5c 4b 02 c0       	push   0xc0024b5c
c0012522:	e8 01 c9 00 00       	call   c001ee28 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	84 c0                	test   al,al
c001252c:	75 b4                	jne    c00124e2 <timerHandler(unsigned long long)+0x4f>
c001252e:	83 ec 0c             	sub    esp,0xc
c0012531:	68 5c 4b 02 c0       	push   0xc0024b5c
c0012536:	e8 e5 c8 00 00       	call   c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	39 d8                	cmp    eax,ebx
c0012540:	74 a0                	je     c00124e2 <timerHandler(unsigned long long)+0x4f>
c0012542:	83 ec 0c             	sub    esp,0xc
c0012545:	68 5c 4b 02 c0       	push   0xc0024b5c
c001254a:	e8 d1 c8 00 00       	call   c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001254f:	c7 04 24 5c 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b5c
c0012556:	89 c5                	mov    ebp,eax
c0012558:	e8 e7 c8 00 00       	call   c001ee44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001255d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012560:	83 c4 10             	add    esp,0x10
c0012563:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012566:	39 15 90 3d 02 c0    	cmp    DWORD PTR ds:0xc0023d90,edx
c001256c:	a1 94 3d 02 c0       	mov    eax,ds:0xc0023d94
c0012571:	19 c8                	sbb    eax,ecx
c0012573:	73 83                	jae    c00124f8 <timerHandler(unsigned long long)+0x65>
c0012575:	50                   	push   eax
c0012576:	50                   	push   eax
c0012577:	55                   	push   ebp
c0012578:	68 5c 4b 02 c0       	push   0xc0024b5c
c001257d:	e8 70 c9 00 00       	call   c001eef2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012582:	eb 93                	jmp    c0012517 <timerHandler(unsigned long long)+0x84>
c0012584:	80 3d 2c 37 02 c0 00 	cmp    BYTE PTR ds:0xc002372c,0x0
c001258b:	74 29                	je     c00125b6 <timerHandler(unsigned long long)+0x123>
c001258d:	39 c6                	cmp    esi,eax
c001258f:	bb 00 00 00 00       	mov    ebx,0x0
c0012594:	19 df                	sbb    edi,ebx
c0012596:	72 19                	jb     c00125b1 <timerHandler(unsigned long long)+0x11e>
c0012598:	e8 0f 56 00 00       	call   c0017bac <lockScheduler()>
c001259d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125a2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00125a5:	e8 36 59 00 00       	call   c0017ee0 <schedule()>
c00125aa:	e8 ff 55 00 00       	call   c0017bae <unlockScheduler()>
c00125af:	eb 05                	jmp    c00125b6 <timerHandler(unsigned long long)+0x123>
c00125b1:	29 f0                	sub    eax,esi
c00125b3:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00125b6:	83 c4 0c             	add    esp,0xc
c00125b9:	5b                   	pop    ebx
c00125ba:	5e                   	pop    esi
c00125bb:	5f                   	pop    edi
c00125bc:	5d                   	pop    ebp
c00125bd:	e9 a3 59 00 00       	jmp    c0017f65 <unlockStuff()>
c00125c2:	83 c4 0c             	add    esp,0xc
c00125c5:	5b                   	pop    ebx
c00125c6:	5e                   	pop    esi
c00125c7:	5f                   	pop    edi
c00125c8:	5d                   	pop    ebp
c00125c9:	c3                   	ret    

c00125ca <setupTimer(int)>:
c00125ca:	57                   	push   edi
c00125cb:	56                   	push   esi
c00125cc:	53                   	push   ebx
c00125cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00125d1:	e8 a1 19 00 00       	call   c0013f77 <getCPUNumber()>
c00125d6:	85 c0                	test   eax,eax
c00125d8:	74 32                	je     c001260c <setupTimer(int)+0x42>
c00125da:	83 ec 0c             	sub    esp,0xc
c00125dd:	68 60 01 00 00       	push   0x160
c00125e2:	e8 15 c9 ff ff       	call   c000eefc <operator new(unsigned long)>
c00125e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00125ea:	89 c3                	mov    ebx,eax
c00125ec:	e8 f1 bb 00 00       	call   c001e1e2 <APICTimer::APICTimer()>
c00125f1:	6a 00                	push   0x0
c00125f3:	6a 00                	push   0x0
c00125f5:	56                   	push   esi
c00125f6:	53                   	push   ebx
c00125f7:	e8 ee ba 00 00       	call   c001e0ea <APICTimer::open(int, int, void*)>
c00125fc:	83 c4 20             	add    esp,0x20
c00125ff:	e8 76 19 00 00       	call   c0013f7a <thisCPU()>
c0012604:	56                   	push   esi
c0012605:	56                   	push   esi
c0012606:	53                   	push   ebx
c0012607:	e9 96 00 00 00       	jmp    c00126a2 <setupTimer(int)+0xd8>
c001260c:	e8 69 19 00 00       	call   c0013f7a <thisCPU()>
c0012611:	83 ec 0c             	sub    esp,0xc
c0012614:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001261a:	e8 b9 e0 ff ff       	call   c00106d8 <Device::getName()>
c001261f:	83 c4 10             	add    esp,0x10
c0012622:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012625:	0f 85 87 00 00 00    	jne    c00126b2 <setupTimer(int)+0xe8>
c001262b:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0012630:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012637:	74 79                	je     c00126b2 <setupTimer(int)+0xe8>
c0012639:	83 ec 0c             	sub    esp,0xc
c001263c:	68 5c 01 00 00       	push   0x15c
c0012641:	e8 b6 c8 ff ff       	call   c000eefc <operator new(unsigned long)>
c0012646:	89 04 24             	mov    DWORD PTR [esp],eax
c0012649:	89 c3                	mov    ebx,eax
c001264b:	e8 e2 bc 00 00       	call   c001e332 <PIT::PIT()>
c0012650:	59                   	pop    ecx
c0012651:	5f                   	pop    edi
c0012652:	53                   	push   ebx
c0012653:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c0012659:	e8 98 dd ff ff       	call   c00103f6 <Device::addChild(Device*)>
c001265e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012660:	6a 00                	push   0x0
c0012662:	6a 00                	push   0x0
c0012664:	56                   	push   esi
c0012665:	53                   	push   ebx
c0012666:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012669:	83 c4 14             	add    esp,0x14
c001266c:	68 60 01 00 00       	push   0x160
c0012671:	e8 86 c8 ff ff       	call   c000eefc <operator new(unsigned long)>
c0012676:	89 04 24             	mov    DWORD PTR [esp],eax
c0012679:	89 c7                	mov    edi,eax
c001267b:	e8 62 bb 00 00       	call   c001e1e2 <APICTimer::APICTimer()>
c0012680:	6a 00                	push   0x0
c0012682:	6a 00                	push   0x0
c0012684:	56                   	push   esi
c0012685:	57                   	push   edi
c0012686:	e8 5f ba 00 00       	call   c001e0ea <APICTimer::open(int, int, void*)>
c001268b:	83 c4 20             	add    esp,0x20
c001268e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012690:	6a 00                	push   0x0
c0012692:	6a 00                	push   0x0
c0012694:	6a 00                	push   0x0
c0012696:	53                   	push   ebx
c0012697:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001269a:	e8 db 18 00 00       	call   c0013f7a <thisCPU()>
c001269f:	5a                   	pop    edx
c00126a0:	59                   	pop    ecx
c00126a1:	57                   	push   edi
c00126a2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00126a8:	e8 49 dd ff ff       	call   c00103f6 <Device::addChild(Device*)>
c00126ad:	83 c4 10             	add    esp,0x10
c00126b0:	eb 33                	jmp    c00126e5 <setupTimer(int)+0x11b>
c00126b2:	83 ec 0c             	sub    esp,0xc
c00126b5:	68 5c 01 00 00       	push   0x15c
c00126ba:	e8 3d c8 ff ff       	call   c000eefc <operator new(unsigned long)>
c00126bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00126c2:	89 c3                	mov    ebx,eax
c00126c4:	e8 69 bc 00 00       	call   c001e332 <PIT::PIT()>
c00126c9:	58                   	pop    eax
c00126ca:	5a                   	pop    edx
c00126cb:	53                   	push   ebx
c00126cc:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c00126d2:	e8 1f dd ff ff       	call   c00103f6 <Device::addChild(Device*)>
c00126d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126d9:	6a 00                	push   0x0
c00126db:	6a 00                	push   0x0
c00126dd:	56                   	push   esi
c00126de:	53                   	push   ebx
c00126df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126e2:	83 c4 20             	add    esp,0x20
c00126e5:	89 d8                	mov    eax,ebx
c00126e7:	5b                   	pop    ebx
c00126e8:	5e                   	pop    esi
c00126e9:	5f                   	pop    edi
c00126ea:	c3                   	ret    
c00126eb:	90                   	nop

c00126ec <VCache::VCache(PhysicalDisk*)>:
c00126ec:	53                   	push   ebx
c00126ed:	83 ec 08             	sub    esp,0x8
c00126f0:	ba 54 13 02 c0       	mov    edx,0xc0021354
c00126f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126f9:	89 10                	mov    DWORD PTR [eax],edx
c00126fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126ff:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001270a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012715:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001271c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012727:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001272e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012739:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012744:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012748:	83 ec 0c             	sub    esp,0xc
c001274b:	6a 10                	push   0x10
c001274d:	e8 aa c7 ff ff       	call   c000eefc <operator new(unsigned long)>
c0012752:	83 c4 10             	add    esp,0x10
c0012755:	89 c3                	mov    ebx,eax
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	53                   	push   ebx
c001275b:	e8 64 55 00 00       	call   c0017cc4 <Mutex::Mutex()>
c0012760:	83 c4 10             	add    esp,0x10
c0012763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012767:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001276a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001276e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012772:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012779:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012780:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012784:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001278a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001278e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012791:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012795:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001279b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00127a5:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00127a8:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00127ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127af:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00127b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127b7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00127bd:	c1 e0 06             	shl    eax,0x6
c00127c0:	83 ec 0c             	sub    esp,0xc
c00127c3:	50                   	push   eax
c00127c4:	e8 55 94 ff ff       	call   c000bc1e <malloc>
c00127c9:	83 c4 10             	add    esp,0x10
c00127cc:	89 c2                	mov    edx,eax
c00127ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00127d5:	90                   	nop
c00127d6:	83 c4 08             	add    esp,0x8
c00127d9:	5b                   	pop    ebx
c00127da:	c3                   	ret    
c00127db:	90                   	nop

c00127dc <VCache::writeWriteBuffer()>:
c00127dc:	53                   	push   ebx
c00127dd:	83 ec 14             	sub    esp,0x14
c00127e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00127e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00127e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00127e9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00127ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00127ef:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00127f2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00127f5:	50                   	push   eax
c00127f6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00127f9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012800:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012807:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001280b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012812:	83 c4 28             	add    esp,0x28
c0012815:	5b                   	pop    ebx
c0012816:	c3                   	ret    
c0012817:	90                   	nop

c0012818 <VCache::~VCache()>:
c0012818:	83 ec 0c             	sub    esp,0xc
c001281b:	ba 54 13 02 c0       	mov    edx,0xc0021354
c0012820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012824:	89 10                	mov    DWORD PTR [eax],edx
c0012826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001282a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001282d:	84 c0                	test   al,al
c001282f:	74 0f                	je     c0012840 <VCache::~VCache()+0x28>
c0012831:	83 ec 0c             	sub    esp,0xc
c0012834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012838:	e8 9f ff ff ff       	call   c00127dc <VCache::writeWriteBuffer()>
c001283d:	83 c4 10             	add    esp,0x10
c0012840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012844:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0012847:	83 ec 0c             	sub    esp,0xc
c001284a:	50                   	push   eax
c001284b:	e8 de 93 ff ff       	call   c000bc2e <free>
c0012850:	83 c4 10             	add    esp,0x10
c0012853:	90                   	nop
c0012854:	83 c4 0c             	add    esp,0xc
c0012857:	c3                   	ret    

c0012858 <VCache::~VCache()>:
c0012858:	83 ec 0c             	sub    esp,0xc
c001285b:	83 ec 0c             	sub    esp,0xc
c001285e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012862:	e8 b1 ff ff ff       	call   c0012818 <VCache::~VCache()>
c0012867:	83 c4 10             	add    esp,0x10
c001286a:	83 ec 08             	sub    esp,0x8
c001286d:	6a 30                	push   0x30
c001286f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012873:	e8 93 c6 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c0012878:	83 c4 10             	add    esp,0x10
c001287b:	83 c4 0c             	add    esp,0xc
c001287e:	c3                   	ret    
c001287f:	90                   	nop

c0012880 <VCache::write(unsigned long long, int, void*)>:
c0012880:	55                   	push   ebp
c0012881:	57                   	push   edi
c0012882:	56                   	push   esi
c0012883:	53                   	push   ebx
c0012884:	83 ec 28             	sub    esp,0x28
c0012887:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001288b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001288f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012893:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0012897:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001289a:	e8 f9 59 00 00       	call   c0018298 <Semaphore::acquire()>
c001289f:	83 c4 10             	add    esp,0x10
c00128a2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00128a6:	74 66                	je     c001290e <VCache::write(unsigned long long, int, void*)+0x8e>
c00128a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128ab:	99                   	cdq    
c00128ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128b0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00128b3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00128b6:	89 c1                	mov    ecx,eax
c00128b8:	89 d0                	mov    eax,edx
c00128ba:	31 f1                	xor    ecx,esi
c00128bc:	31 f8                	xor    eax,edi
c00128be:	89 ca                	mov    edx,ecx
c00128c0:	09 c2                	or     edx,eax
c00128c2:	75 3e                	jne    c0012902 <VCache::write(unsigned long long, int, void*)+0x82>
c00128c4:	83 fd 01             	cmp    ebp,0x1
c00128c7:	75 39                	jne    c0012902 <VCache::write(unsigned long long, int, void*)+0x82>
c00128c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00128cc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128d2:	51                   	push   ecx
c00128d3:	50                   	push   eax
c00128d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00128d8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00128dc:	0f af c8             	imul   ecx,eax
c00128df:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00128e2:	51                   	push   ecx
c00128e3:	e8 ea dc fe ff       	call   c00005d2 <memcpy>
c00128e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128eb:	83 c4 10             	add    esp,0x10
c00128ee:	40                   	inc    eax
c00128ef:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00128f2:	83 f8 40             	cmp    eax,0x40
c00128f5:	75 57                	jne    c001294e <VCache::write(unsigned long long, int, void*)+0xce>
c00128f7:	83 ec 0c             	sub    esp,0xc
c00128fa:	53                   	push   ebx
c00128fb:	e8 dc fe ff ff       	call   c00127dc <VCache::writeWriteBuffer()>
c0012900:	eb 34                	jmp    c0012936 <VCache::write(unsigned long long, int, void*)+0xb6>
c0012902:	83 ec 0c             	sub    esp,0xc
c0012905:	53                   	push   ebx
c0012906:	e8 d1 fe ff ff       	call   c00127dc <VCache::writeWriteBuffer()>
c001290b:	83 c4 10             	add    esp,0x10
c001290e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012911:	83 fd 3f             	cmp    ebp,0x3f
c0012914:	7f 25                	jg     c001293b <VCache::write(unsigned long long, int, void*)+0xbb>
c0012916:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012919:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001291c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001291f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012923:	52                   	push   edx
c0012924:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001292a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001292e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012931:	e8 9c dc fe ff       	call   c00005d2 <memcpy>
c0012936:	83 c4 10             	add    esp,0x10
c0012939:	eb 13                	jmp    c001294e <VCache::write(unsigned long long, int, void*)+0xce>
c001293b:	83 ec 0c             	sub    esp,0xc
c001293e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012940:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012944:	55                   	push   ebp
c0012945:	57                   	push   edi
c0012946:	56                   	push   esi
c0012947:	50                   	push   eax
c0012948:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001294b:	83 c4 20             	add    esp,0x20
c001294e:	83 ec 0c             	sub    esp,0xc
c0012951:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012954:	e8 49 5f 00 00       	call   c00188a2 <Semaphore::release()>
c0012959:	83 c4 2c             	add    esp,0x2c
c001295c:	31 c0                	xor    eax,eax
c001295e:	5b                   	pop    ebx
c001295f:	5e                   	pop    esi
c0012960:	5f                   	pop    edi
c0012961:	5d                   	pop    ebp
c0012962:	c3                   	ret    
c0012963:	90                   	nop

c0012964 <VCache::read(unsigned long long, int, void*)>:
c0012964:	57                   	push   edi
c0012965:	56                   	push   esi
c0012966:	53                   	push   ebx
c0012967:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001296b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001296f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012973:	83 ec 0c             	sub    esp,0xc
c0012976:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012979:	e8 1a 59 00 00       	call   c0018298 <Semaphore::acquire()>
c001297e:	83 c4 10             	add    esp,0x10
c0012981:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012985:	74 0c                	je     c0012993 <VCache::read(unsigned long long, int, void*)+0x2f>
c0012987:	83 ec 0c             	sub    esp,0xc
c001298a:	53                   	push   ebx
c001298b:	e8 4c fe ff ff       	call   c00127dc <VCache::writeWriteBuffer()>
c0012990:	83 c4 10             	add    esp,0x10
c0012993:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012996:	83 ec 0c             	sub    esp,0xc
c0012999:	8b 10                	mov    edx,DWORD PTR [eax]
c001299b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001299f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129a3:	57                   	push   edi
c00129a4:	56                   	push   esi
c00129a5:	50                   	push   eax
c00129a6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00129a9:	83 c4 14             	add    esp,0x14
c00129ac:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00129af:	e8 ee 5e 00 00       	call   c00188a2 <Semaphore::release()>
c00129b4:	83 c4 10             	add    esp,0x10
c00129b7:	31 c0                	xor    eax,eax
c00129b9:	5b                   	pop    ebx
c00129ba:	5e                   	pop    esi
c00129bb:	5f                   	pop    edi
c00129bc:	c3                   	ret    
c00129bd:	90                   	nop

c00129be <Video::putrect(int, int, int, int, unsigned int)>:
c00129be:	55                   	push   ebp
c00129bf:	57                   	push   edi
c00129c0:	56                   	push   esi
c00129c1:	53                   	push   ebx
c00129c2:	83 ec 1c             	sub    esp,0x1c
c00129c5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00129cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00129d1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00129d5:	01 e8                	add    eax,ebp
c00129d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00129db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129df:	01 df                	add    edi,ebx
c00129e1:	39 fb                	cmp    ebx,edi
c00129e3:	7d 1b                	jge    c0012a00 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00129e5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00129e9:	7d 12                	jge    c00129fd <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00129eb:	8b 16                	mov    edx,DWORD PTR [esi]
c00129ed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00129f1:	53                   	push   ebx
c00129f2:	55                   	push   ebp
c00129f3:	45                   	inc    ebp
c00129f4:	56                   	push   esi
c00129f5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00129f8:	83 c4 10             	add    esp,0x10
c00129fb:	eb e8                	jmp    c00129e5 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00129fd:	43                   	inc    ebx
c00129fe:	eb e1                	jmp    c00129e1 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012a00:	83 c4 1c             	add    esp,0x1c
c0012a03:	5b                   	pop    ebx
c0012a04:	5e                   	pop    esi
c0012a05:	5f                   	pop    edi
c0012a06:	5d                   	pop    ebp
c0012a07:	c3                   	ret    

c0012a08 <Video::blit(unsigned int*, int, int, int, int)>:
c0012a08:	55                   	push   ebp
c0012a09:	57                   	push   edi
c0012a0a:	56                   	push   esi
c0012a0b:	53                   	push   ebx
c0012a0c:	83 ec 1c             	sub    esp,0x1c
c0012a0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012a13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a17:	85 c0                	test   eax,eax
c0012a19:	79 02                	jns    c0012a1d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012a1b:	31 c0                	xor    eax,eax
c0012a1d:	c1 e0 02             	shl    eax,0x2
c0012a20:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a28:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a2c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012a30:	39 d8                	cmp    eax,ebx
c0012a32:	7e 49                	jle    c0012a7d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a34:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012a3a:	7c 41                	jl     c0012a7d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a3c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012a40:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a44:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012a48:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012a4c:	39 f9                	cmp    ecx,edi
c0012a4e:	7e 22                	jle    c0012a72 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012a50:	83 c5 04             	add    ebp,0x4
c0012a53:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012a59:	7c 14                	jl     c0012a6f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012a5b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012a5d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012a60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012a64:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012a68:	56                   	push   esi
c0012a69:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	47                   	inc    edi
c0012a70:	eb d2                	jmp    c0012a44 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012a72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a76:	43                   	inc    ebx
c0012a77:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012a7b:	eb ab                	jmp    c0012a28 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012a7d:	83 c4 1c             	add    esp,0x1c
c0012a80:	5b                   	pop    ebx
c0012a81:	5e                   	pop    esi
c0012a82:	5f                   	pop    edi
c0012a83:	5d                   	pop    ebp
c0012a84:	c3                   	ret    
c0012a85:	90                   	nop

c0012a86 <Video::clearScreen(unsigned int)>:
c0012a86:	57                   	push   edi
c0012a87:	56                   	push   esi
c0012a88:	53                   	push   ebx
c0012a89:	31 db                	xor    ebx,ebx
c0012a8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012a8f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012a95:	7e 1f                	jle    c0012ab6 <Video::clearScreen(unsigned int)+0x30>
c0012a97:	31 ff                	xor    edi,edi
c0012a99:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012a9f:	7e 12                	jle    c0012ab3 <Video::clearScreen(unsigned int)+0x2d>
c0012aa1:	8b 06                	mov    eax,DWORD PTR [esi]
c0012aa3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012aa7:	53                   	push   ebx
c0012aa8:	57                   	push   edi
c0012aa9:	47                   	inc    edi
c0012aaa:	56                   	push   esi
c0012aab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012aae:	83 c4 10             	add    esp,0x10
c0012ab1:	eb e6                	jmp    c0012a99 <Video::clearScreen(unsigned int)+0x13>
c0012ab3:	43                   	inc    ebx
c0012ab4:	eb d9                	jmp    c0012a8f <Video::clearScreen(unsigned int)+0x9>
c0012ab6:	5b                   	pop    ebx
c0012ab7:	5e                   	pop    esi
c0012ab8:	5f                   	pop    edi
c0012ab9:	c3                   	ret    

c0012aba <Video::putpixel(int, int, unsigned int)>:
c0012aba:	c7 44 24 04 5c 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002135c
c0012ac2:	e9 24 c5 ff ff       	jmp    c000efeb <Dbg::kprintf(char const*, ...)>
c0012ac7:	90                   	nop

c0012ac8 <Video::Video(char const*)>:
c0012ac8:	83 ec 0c             	sub    esp,0xc
c0012acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012acf:	83 ec 08             	sub    esp,0x8
c0012ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ad6:	50                   	push   eax
c0012ad7:	e8 0a db ff ff       	call   c00105e6 <Device::Device(char const*)>
c0012adc:	83 c4 10             	add    esp,0x10
c0012adf:	ba 74 13 02 c0       	mov    edx,0xc0021374
c0012ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae8:	89 10                	mov    DWORD PTR [eax],edx
c0012aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aee:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012af8:	90                   	nop
c0012af9:	83 c4 0c             	add    esp,0xc
c0012afc:	c3                   	ret    
c0012afd:	90                   	nop

c0012afe <Video::~Video()>:
c0012afe:	83 ec 0c             	sub    esp,0xc
c0012b01:	ba 74 13 02 c0       	mov    edx,0xc0021374
c0012b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b0a:	89 10                	mov    DWORD PTR [eax],edx
c0012b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b10:	83 ec 0c             	sub    esp,0xc
c0012b13:	50                   	push   eax
c0012b14:	e8 7f d7 ff ff       	call   c0010298 <Device::~Device()>
c0012b19:	83 c4 10             	add    esp,0x10
c0012b1c:	90                   	nop
c0012b1d:	83 c4 0c             	add    esp,0xc
c0012b20:	c3                   	ret    
c0012b21:	90                   	nop

c0012b22 <Video::~Video()>:
c0012b22:	83 ec 0c             	sub    esp,0xc
c0012b25:	83 ec 0c             	sub    esp,0xc
c0012b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b2c:	e8 cd ff ff ff       	call   c0012afe <Video::~Video()>
c0012b31:	83 c4 10             	add    esp,0x10
c0012b34:	83 ec 08             	sub    esp,0x8
c0012b37:	68 64 01 00 00       	push   0x164
c0012b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b40:	e8 c6 c3 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c0012b45:	83 c4 10             	add    esp,0x10
c0012b48:	83 c4 0c             	add    esp,0xc
c0012b4b:	c3                   	ret    

c0012b4c <Video::isMonochrome()>:
c0012b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b50:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012b56:	c3                   	ret    
c0012b57:	90                   	nop

c0012b58 <Video::getWidth()>:
c0012b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b5c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012b62:	c3                   	ret    
c0012b63:	90                   	nop

c0012b64 <Video::getHeight()>:
c0012b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b68:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012b6e:	c3                   	ret    
c0012b6f:	90                   	nop

c0012b70 <Video::drawCursor(int, int, unsigned char*, int)>:
c0012b70:	55                   	push   ebp
c0012b71:	57                   	push   edi
c0012b72:	56                   	push   esi
c0012b73:	53                   	push   ebx
c0012b74:	83 ec 2c             	sub    esp,0x2c
c0012b77:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b7b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012b7f:	83 f8 01             	cmp    eax,0x1
c0012b82:	19 c9                	sbb    ecx,ecx
c0012b84:	31 db                	xor    ebx,ebx
c0012b86:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012b8a:	89 cd                	mov    ebp,ecx
c0012b8c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012b94:	f7 d5                	not    ebp
c0012b96:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012b9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012ba0:	01 d8                	add    eax,ebx
c0012ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ba6:	56                   	push   esi
c0012ba7:	e8 b8 ff ff ff       	call   c0012b64 <Video::getHeight()>
c0012bac:	59                   	pop    ecx
c0012bad:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bb1:	7e 70                	jle    c0012c23 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012bb3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012bb7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012bbb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012bbe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012bc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012bc6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012bcd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bd1:	89 f8                	mov    eax,edi
c0012bd3:	83 c0 20             	add    eax,0x20
c0012bd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bda:	56                   	push   esi
c0012bdb:	e8 78 ff ff ff       	call   c0012b58 <Video::getWidth()>
c0012be0:	5a                   	pop    edx
c0012be1:	39 c7                	cmp    edi,eax
c0012be3:	7d 34                	jge    c0012c19 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012be5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012bea:	74 05                	je     c0012bf1 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012bec:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bee:	55                   	push   ebp
c0012bef:	eb 0d                	jmp    c0012bfe <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012bf1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012bf6:	74 12                	je     c0012c0a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012bf8:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012bfe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c02:	57                   	push   edi
c0012c03:	56                   	push   esi
c0012c04:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012c0e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012c12:	47                   	inc    edi
c0012c13:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012c17:	75 c1                	jne    c0012bda <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012c19:	43                   	inc    ebx
c0012c1a:	83 fb 20             	cmp    ebx,0x20
c0012c1d:	0f 85 79 ff ff ff    	jne    c0012b9c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012c23:	83 c4 2c             	add    esp,0x2c
c0012c26:	5b                   	pop    ebx
c0012c27:	5e                   	pop    esi
c0012c28:	5f                   	pop    edi
c0012c29:	5d                   	pop    ebp
c0012c2a:	c3                   	ret    
c0012c2b:	90                   	nop

c0012c2c <ACPI::close(int, int, void*)>:
c0012c2c:	83 ec 1c             	sub    esp,0x1c
c0012c2f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012c37:	74 0a                	je     c0012c43 <ACPI::close(int, int, void*)+0x17>
c0012c39:	b8 00 00 00 00       	mov    eax,0x0
c0012c3e:	e9 9a 00 00 00       	jmp    c0012cdd <ACPI::close(int, int, void*)+0xb1>
c0012c43:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012c48:	75 37                	jne    c0012c81 <ACPI::close(int, int, void*)+0x55>
c0012c4a:	83 ec 0c             	sub    esp,0xc
c0012c4d:	68 ac 13 02 c0       	push   0xc00213ac
c0012c52:	e8 94 c3 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0012c57:	83 c4 10             	add    esp,0x10
c0012c5a:	a1 a8 3d 02 c0       	mov    eax,ds:0xc0023da8
c0012c5f:	85 c0                	test   eax,eax
c0012c61:	74 07                	je     c0012c6a <ACPI::close(int, int, void*)+0x3e>
c0012c63:	a1 a8 3d 02 c0       	mov    eax,ds:0xc0023da8
c0012c68:	ff d0                	call   eax
c0012c6a:	83 ec 0c             	sub    esp,0xc
c0012c6d:	68 80 14 02 c0       	push   0xc0021480
c0012c72:	e8 09 20 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c0012c77:	83 c4 10             	add    esp,0x10
c0012c7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012c7f:	eb 5c                	jmp    c0012cdd <ACPI::close(int, int, void*)+0xb1>
c0012c81:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012c86:	75 50                	jne    c0012cd8 <ACPI::close(int, int, void*)+0xac>
c0012c88:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c0012c8d:	85 c0                	test   eax,eax
c0012c8f:	74 07                	je     c0012c98 <ACPI::close(int, int, void*)+0x6c>
c0012c91:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c0012c96:	ff d0                	call   eax
c0012c98:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012c9d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012ca2:	83 e0 02             	and    eax,0x2
c0012ca5:	74 1c                	je     c0012cc3 <ACPI::close(int, int, void*)+0x97>
c0012ca7:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012cae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cb2:	89 c2                	mov    edx,eax
c0012cb4:	ec                   	in     al,dx
c0012cb5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012cb9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012cbd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012cc1:	eb da                	jmp    c0012c9d <ACPI::close(int, int, void*)+0x71>
c0012cc3:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012cca:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012ccf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012cd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012cd7:	ee                   	out    dx,al
c0012cd8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012cdd:	83 c4 1c             	add    esp,0x1c
c0012ce0:	c3                   	ret    

c0012ce1 <findRSDP()>:
c0012ce1:	83 ec 1c             	sub    esp,0x1c
c0012ce4:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0012ce9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012cef:	83 e0 04             	and    eax,0x4
c0012cf2:	84 c0                	test   al,al
c0012cf4:	75 07                	jne    c0012cfd <findRSDP()+0x1c>
c0012cf6:	b8 00 00 00 00       	mov    eax,0x0
c0012cfb:	eb 6a                	jmp    c0012d67 <findRSDP()+0x86>
c0012cfd:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0012d02:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012d07:	7f 1b                	jg     c0012d24 <findRSDP()+0x43>
c0012d09:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0012d0e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012d14:	83 e2 fb             	and    edx,0xfffffffb
c0012d17:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012d1d:	b8 00 00 00 00       	mov    eax,0x0
c0012d22:	eb 43                	jmp    c0012d67 <findRSDP()+0x86>
c0012d24:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012d2c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012d34:	77 2c                	ja     c0012d62 <findRSDP()+0x81>
c0012d36:	83 ec 04             	sub    esp,0x4
c0012d39:	6a 08                	push   0x8
c0012d3b:	68 b9 13 02 c0       	push   0xc00213b9
c0012d40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d44:	e8 26 d8 fe ff       	call   c000056f <memcmp>
c0012d49:	83 c4 10             	add    esp,0x10
c0012d4c:	85 c0                	test   eax,eax
c0012d4e:	0f 94 c0             	sete   al
c0012d51:	84 c0                	test   al,al
c0012d53:	74 06                	je     c0012d5b <findRSDP()+0x7a>
c0012d55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d59:	eb 0c                	jmp    c0012d67 <findRSDP()+0x86>
c0012d5b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012d60:	eb ca                	jmp    c0012d2c <findRSDP()+0x4b>
c0012d62:	b8 00 00 00 00       	mov    eax,0x0
c0012d67:	83 c4 1c             	add    esp,0x1c
c0012d6a:	c3                   	ret    

c0012d6b <loadACPITables(unsigned char*)>:
c0012d6b:	56                   	push   esi
c0012d6c:	53                   	push   ebx
c0012d6d:	83 ec 44             	sub    esp,0x44
c0012d70:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0012d75:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d7b:	83 e0 04             	and    eax,0x4
c0012d7e:	84 c0                	test   al,al
c0012d80:	0f 84 05 02 00 00    	je     c0012f8b <loadACPITables(unsigned char*)+0x220>
c0012d86:	a0 c0 3f 02 c0       	mov    al,ds:0xc0023fc0
c0012d8b:	84 c0                	test   al,al
c0012d8d:	74 75                	je     c0012e04 <loadACPITables(unsigned char*)+0x99>
c0012d8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012d93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d9e:	83 e8 24             	sub    eax,0x24
c0012da1:	c1 e8 03             	shr    eax,0x3
c0012da4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012da8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012db0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012db4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012db8:	0f 8d b2 00 00 00    	jge    c0012e70 <loadACPITables(unsigned char*)+0x105>
c0012dbe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012dc2:	83 c0 24             	add    eax,0x24
c0012dc5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012dcd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012dd1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012dd5:	c1 e0 03             	shl    eax,0x3
c0012dd8:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012ddc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012de0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012de3:	8b 00                	mov    eax,DWORD PTR [eax]
c0012de5:	89 c1                	mov    ecx,eax
c0012de7:	a1 ac 3d 02 c0       	mov    eax,ds:0xc0023dac
c0012dec:	8d 50 01             	lea    edx,[eax+0x1]
c0012def:	89 15 ac 3d 02 c0    	mov    DWORD PTR ds:0xc0023dac,edx
c0012df5:	89 ca                	mov    edx,ecx
c0012df7:	89 14 c5 c4 3d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc23c],edx
c0012dfe:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012e02:	eb ac                	jmp    c0012db0 <loadACPITables(unsigned char*)+0x45>
c0012e04:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e13:	83 e8 24             	sub    eax,0x24
c0012e16:	c1 e8 02             	shr    eax,0x2
c0012e19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e1d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012e25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e29:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012e2d:	7d 41                	jge    c0012e70 <loadACPITables(unsigned char*)+0x105>
c0012e2f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e33:	83 c0 24             	add    eax,0x24
c0012e36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012e42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e46:	c1 e0 02             	shl    eax,0x2
c0012e49:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012e4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e51:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012e53:	a1 ac 3d 02 c0       	mov    eax,ds:0xc0023dac
c0012e58:	8d 50 01             	lea    edx,[eax+0x1]
c0012e5b:	89 15 ac 3d 02 c0    	mov    DWORD PTR ds:0xc0023dac,edx
c0012e61:	89 ca                	mov    edx,ecx
c0012e63:	89 14 c5 c4 3d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc23c],edx
c0012e6a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012e6e:	eb b5                	jmp    c0012e25 <loadACPITables(unsigned char*)+0xba>
c0012e70:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012e78:	a1 ac 3d 02 c0       	mov    eax,ds:0xc0023dac
c0012e7d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012e81:	0f 8d 05 01 00 00    	jge    c0012f8c <loadACPITables(unsigned char*)+0x221>
c0012e87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012e8b:	8b 04 c5 c4 3d 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc23c]
c0012e92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ea2:	25 ff 0f 00 00       	and    eax,0xfff
c0012ea7:	89 c6                	mov    esi,eax
c0012ea9:	e8 4d b0 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c0012eae:	89 c3                	mov    ebx,eax
c0012eb0:	83 ec 0c             	sub    esp,0xc
c0012eb3:	6a 01                	push   0x1
c0012eb5:	e8 b1 ae ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c0012eba:	83 c4 10             	add    esp,0x10
c0012ebd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ec1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012ec7:	83 ec 0c             	sub    esp,0xc
c0012eca:	6a 01                	push   0x1
c0012ecc:	6a 01                	push   0x1
c0012ece:	50                   	push   eax
c0012ecf:	52                   	push   edx
c0012ed0:	53                   	push   ebx
c0012ed1:	e8 b8 b7 ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ed6:	83 c4 20             	add    esp,0x20
c0012ed9:	09 f0                	or     eax,esi
c0012edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012edf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ee3:	c1 e0 03             	shl    eax,0x3
c0012ee6:	05 c0 3d 02 c0       	add    eax,0xc0023dc0
c0012eeb:	83 ec 04             	sub    esp,0x4
c0012eee:	6a 04                	push   0x4
c0012ef0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ef4:	50                   	push   eax
c0012ef5:	e8 d8 d6 fe ff       	call   c00005d2 <memcpy>
c0012efa:	83 c4 10             	add    esp,0x10
c0012efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012f0c:	05 00 10 00 00       	add    eax,0x1000
c0012f11:	c1 e8 0c             	shr    eax,0xc
c0012f14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f23:	25 ff 0f 00 00       	and    eax,0xfff
c0012f28:	89 c6                	mov    esi,eax
c0012f2a:	e8 cc af ff ff       	call   c000defb <Virt::getAKernelVAS()>
c0012f2f:	89 c3                	mov    ebx,eax
c0012f31:	83 ec 0c             	sub    esp,0xc
c0012f34:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012f38:	e8 2e ae ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c0012f3d:	83 c4 10             	add    esp,0x10
c0012f40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f44:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f4a:	83 ec 0c             	sub    esp,0xc
c0012f4d:	6a 01                	push   0x1
c0012f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f53:	50                   	push   eax
c0012f54:	52                   	push   edx
c0012f55:	53                   	push   ebx
c0012f56:	e8 33 b7 ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012f5b:	83 c4 20             	add    esp,0x20
c0012f5e:	09 f0                	or     eax,esi
c0012f60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012f67:	83 ec 0c             	sub    esp,0xc
c0012f6a:	50                   	push   eax
c0012f6b:	e8 31 b1 ff ff       	call   c000e0a1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f7b:	89 14 c5 c4 3d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc23c],edx
c0012f82:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012f86:	e9 ed fe ff ff       	jmp    c0012e78 <loadACPITables(unsigned char*)+0x10d>
c0012f8b:	90                   	nop
c0012f8c:	83 c4 44             	add    esp,0x44
c0012f8f:	5b                   	pop    ebx
c0012f90:	5e                   	pop    esi
c0012f91:	c3                   	ret    

c0012f92 <findRSDT(unsigned char*)>:
c0012f92:	56                   	push   esi
c0012f93:	53                   	push   ebx
c0012f94:	83 ec 44             	sub    esp,0x44
c0012f97:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0012f9c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012fa2:	83 e0 04             	and    eax,0x4
c0012fa5:	84 c0                	test   al,al
c0012fa7:	75 0a                	jne    c0012fb3 <findRSDT(unsigned char*)+0x21>
c0012fa9:	b8 00 00 00 00       	mov    eax,0x0
c0012fae:	e9 f7 00 00 00       	jmp    c00130aa <findRSDT(unsigned char*)+0x118>
c0012fb3:	83 ec 04             	sub    esp,0x4
c0012fb6:	6a 24                	push   0x24
c0012fb8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012fbc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012fc0:	50                   	push   eax
c0012fc1:	e8 0c d6 fe ff       	call   c00005d2 <memcpy>
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0012fcd:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012fd1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012fd9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012fdd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012fe1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012fe5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fe9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012fed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ff1:	25 ff 0f 00 00       	and    eax,0xfff
c0012ff6:	89 c6                	mov    esi,eax
c0012ff8:	e8 fe ae ff ff       	call   c000defb <Virt::getAKernelVAS()>
c0012ffd:	89 c3                	mov    ebx,eax
c0012fff:	83 ec 0c             	sub    esp,0xc
c0013002:	6a 02                	push   0x2
c0013004:	e8 62 ad ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c0013009:	83 c4 10             	add    esp,0x10
c001300c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013010:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013016:	83 ec 0c             	sub    esp,0xc
c0013019:	6a 01                	push   0x1
c001301b:	6a 02                	push   0x2
c001301d:	50                   	push   eax
c001301e:	52                   	push   edx
c001301f:	53                   	push   ebx
c0013020:	e8 69 b6 ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013025:	83 c4 20             	add    esp,0x20
c0013028:	09 f0                	or     eax,esi
c001302a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001302e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013032:	25 ff 0f 00 00       	and    eax,0xfff
c0013037:	89 c6                	mov    esi,eax
c0013039:	e8 bd ae ff ff       	call   c000defb <Virt::getAKernelVAS()>
c001303e:	89 c3                	mov    ebx,eax
c0013040:	83 ec 0c             	sub    esp,0xc
c0013043:	6a 02                	push   0x2
c0013045:	e8 21 ad ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c001304a:	83 c4 10             	add    esp,0x10
c001304d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013051:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013057:	83 ec 0c             	sub    esp,0xc
c001305a:	6a 01                	push   0x1
c001305c:	6a 02                	push   0x2
c001305e:	50                   	push   eax
c001305f:	52                   	push   edx
c0013060:	53                   	push   ebx
c0013061:	e8 28 b6 ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013066:	83 c4 20             	add    esp,0x20
c0013069:	09 f0                	or     eax,esi
c001306b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001306f:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013074:	75 11                	jne    c0013087 <findRSDT(unsigned char*)+0xf5>
c0013076:	c6 05 c0 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023fc0,0x0
c001307d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013081:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013085:	eb 1f                	jmp    c00130a6 <findRSDT(unsigned char*)+0x114>
c0013087:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001308c:	75 11                	jne    c001309f <findRSDT(unsigned char*)+0x10d>
c001308e:	c6 05 c0 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc0,0x1
c0013095:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013099:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001309d:	eb 07                	jmp    c00130a6 <findRSDT(unsigned char*)+0x114>
c001309f:	b8 00 00 00 00       	mov    eax,0x0
c00130a4:	eb 04                	jmp    c00130aa <findRSDT(unsigned char*)+0x118>
c00130a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00130aa:	83 c4 44             	add    esp,0x44
c00130ad:	5b                   	pop    ebx
c00130ae:	5e                   	pop    esi
c00130af:	c3                   	ret    

c00130b0 <findDataTable(unsigned char*, char*)>:
c00130b0:	83 ec 1c             	sub    esp,0x1c
c00130b3:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c00130b8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00130be:	83 e0 04             	and    eax,0x4
c00130c1:	84 c0                	test   al,al
c00130c3:	75 07                	jne    c00130cc <findDataTable(unsigned char*, char*)+0x1c>
c00130c5:	b8 00 00 00 00       	mov    eax,0x0
c00130ca:	eb 7c                	jmp    c0013148 <findDataTable(unsigned char*, char*)+0x98>
c00130cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00130d4:	a1 ac 3d 02 c0       	mov    eax,ds:0xc0023dac
c00130d9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00130dd:	7d 3a                	jge    c0013119 <findDataTable(unsigned char*, char*)+0x69>
c00130df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130e3:	c1 e0 03             	shl    eax,0x3
c00130e6:	05 c0 3d 02 c0       	add    eax,0xc0023dc0
c00130eb:	83 ec 04             	sub    esp,0x4
c00130ee:	6a 04                	push   0x4
c00130f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00130f4:	50                   	push   eax
c00130f5:	e8 75 d4 fe ff       	call   c000056f <memcmp>
c00130fa:	83 c4 10             	add    esp,0x10
c00130fd:	85 c0                	test   eax,eax
c00130ff:	0f 94 c0             	sete   al
c0013102:	84 c0                	test   al,al
c0013104:	74 0d                	je     c0013113 <findDataTable(unsigned char*, char*)+0x63>
c0013106:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001310a:	8b 04 c5 c4 3d 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc23c]
c0013111:	eb 35                	jmp    c0013148 <findDataTable(unsigned char*, char*)+0x98>
c0013113:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013117:	eb bb                	jmp    c00130d4 <findDataTable(unsigned char*, char*)+0x24>
c0013119:	a0 c0 3f 02 c0       	mov    al,ds:0xc0023fc0
c001311e:	84 c0                	test   al,al
c0013120:	74 07                	je     c0013129 <findDataTable(unsigned char*, char*)+0x79>
c0013122:	b8 58 00 00 00       	mov    eax,0x58
c0013127:	eb 05                	jmp    c001312e <findDataTable(unsigned char*, char*)+0x7e>
c0013129:	b8 52 00 00 00       	mov    eax,0x52
c001312e:	83 ec 04             	sub    esp,0x4
c0013131:	50                   	push   eax
c0013132:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013136:	68 a4 14 02 c0       	push   0xc00214a4
c001313b:	e8 ab be ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0013140:	83 c4 10             	add    esp,0x10
c0013143:	b8 00 00 00 00       	mov    eax,0x0
c0013148:	83 c4 1c             	add    esp,0x1c
c001314b:	c3                   	ret    

c001314c <scanMADT()>:
c001314c:	83 ec 2c             	sub    esp,0x2c
c001314f:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0013154:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001315a:	83 e0 04             	and    eax,0x4
c001315d:	84 c0                	test   al,al
c001315f:	0f 84 73 03 00 00    	je     c00134d8 <scanMADT()+0x38c>
c0013165:	e8 77 fb ff ff       	call   c0012ce1 <findRSDP()>
c001316a:	a3 cc 3f 02 c0       	mov    ds:0xc0023fcc,eax
c001316f:	a1 cc 3f 02 c0       	mov    eax,ds:0xc0023fcc
c0013174:	85 c0                	test   eax,eax
c0013176:	75 19                	jne    c0013191 <scanMADT()+0x45>
c0013178:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c001317d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013183:	83 e2 fb             	and    edx,0xfffffffb
c0013186:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001318c:	e9 4b 03 00 00       	jmp    c00134dc <scanMADT()+0x390>
c0013191:	a1 cc 3f 02 c0       	mov    eax,ds:0xc0023fcc
c0013196:	83 ec 0c             	sub    esp,0xc
c0013199:	50                   	push   eax
c001319a:	e8 f3 fd ff ff       	call   c0012f92 <findRSDT(unsigned char*)>
c001319f:	83 c4 10             	add    esp,0x10
c00131a2:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c00131a7:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00131ac:	85 c0                	test   eax,eax
c00131ae:	75 19                	jne    c00131c9 <scanMADT()+0x7d>
c00131b0:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c00131b5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00131bb:	83 e2 fb             	and    edx,0xfffffffb
c00131be:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00131c4:	e9 13 03 00 00       	jmp    c00134dc <scanMADT()+0x390>
c00131c9:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00131ce:	83 ec 0c             	sub    esp,0xc
c00131d1:	50                   	push   eax
c00131d2:	e8 94 fb ff ff       	call   c0012d6b <loadACPITables(unsigned char*)>
c00131d7:	83 c4 10             	add    esp,0x10
c00131da:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00131df:	83 ec 08             	sub    esp,0x8
c00131e2:	68 c2 13 02 c0       	push   0xc00213c2
c00131e7:	50                   	push   eax
c00131e8:	e8 c3 fe ff ff       	call   c00130b0 <findDataTable(unsigned char*, char*)>
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131f4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00131f9:	75 19                	jne    c0013214 <scanMADT()+0xc8>
c00131fb:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0013200:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013206:	83 e2 fe             	and    edx,0xfffffffe
c0013209:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001320f:	e9 c8 02 00 00       	jmp    c00134dc <scanMADT()+0x390>
c0013214:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001321c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013220:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013223:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013227:	0f 87 af 02 00 00    	ja     c00134dc <scanMADT()+0x390>
c001322d:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013235:	0f 87 a1 02 00 00    	ja     c00134dc <scanMADT()+0x390>
c001323b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001323f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013243:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013247:	8d 50 01             	lea    edx,[eax+0x1]
c001324a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001324e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013252:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013256:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001325a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001325e:	8d 50 01             	lea    edx,[eax+0x1]
c0013261:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013265:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013269:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001326d:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013271:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013276:	0f 86 5f 02 00 00    	jbe    c00134db <scanMADT()+0x38f>
c001327c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013281:	75 57                	jne    c00132da <scanMADT()+0x18e>
c0013283:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013287:	8d 50 01             	lea    edx,[eax+0x1]
c001328a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001328e:	8a 15 00 41 02 c0    	mov    dl,BYTE PTR ds:0xc0024100
c0013294:	0f b6 d2             	movzx  edx,dl
c0013297:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001329b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001329f:	88 82 40 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbec0],al
c00132a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a9:	8d 50 01             	lea    edx,[eax+0x1]
c00132ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132b0:	8a 15 00 41 02 c0    	mov    dl,BYTE PTR ds:0xc0024100
c00132b6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00132b9:	88 0d 00 41 02 c0    	mov    BYTE PTR ds:0xc0024100,cl
c00132bf:	0f b6 d2             	movzx  edx,dl
c00132c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132c6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00132ca:	88 82 20 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbee0],al
c00132d0:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00132d5:	e9 ea 01 00 00       	jmp    c00134c4 <scanMADT()+0x378>
c00132da:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00132df:	0f 85 14 01 00 00    	jne    c00133f9 <scanMADT()+0x2ad>
c00132e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132e9:	8d 50 01             	lea    edx,[eax+0x1]
c00132ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132f0:	8a 15 d0 3f 02 c0    	mov    dl,BYTE PTR ds:0xc0023fd0
c00132f6:	0f b6 d2             	movzx  edx,dl
c00132f9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132fd:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013301:	88 82 e0 3f 02 c0    	mov    BYTE PTR [edx-0x3ffdc020],al
c0013307:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001330b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001330f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013313:	01 d0                	add    eax,edx
c0013315:	83 c0 2c             	add    eax,0x2c
c0013318:	8a 00                	mov    al,BYTE PTR [eax]
c001331a:	0f b6 d0             	movzx  edx,al
c001331d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013321:	8d 48 01             	lea    ecx,[eax+0x1]
c0013324:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013328:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001332c:	0f b6 c0             	movzx  eax,al
c001332f:	c1 e0 08             	shl    eax,0x8
c0013332:	89 d1                	mov    ecx,edx
c0013334:	09 c1                	or     ecx,eax
c0013336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001333a:	8d 50 02             	lea    edx,[eax+0x2]
c001333d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013341:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013345:	0f b6 c0             	movzx  eax,al
c0013348:	c1 e0 10             	shl    eax,0x10
c001334b:	09 c1                	or     ecx,eax
c001334d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013351:	8d 50 03             	lea    edx,[eax+0x3]
c0013354:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013358:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001335c:	0f b6 c0             	movzx  eax,al
c001335f:	c1 e0 18             	shl    eax,0x18
c0013362:	09 c1                	or     ecx,eax
c0013364:	89 ca                	mov    edx,ecx
c0013366:	a0 d0 3f 02 c0       	mov    al,ds:0xc0023fd0
c001336b:	0f b6 c0             	movzx  eax,al
c001336e:	89 14 85 00 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc000],edx
c0013375:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001337a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001337e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013382:	01 d0                	add    eax,edx
c0013384:	83 c0 2c             	add    eax,0x2c
c0013387:	8a 00                	mov    al,BYTE PTR [eax]
c0013389:	0f b6 d0             	movzx  edx,al
c001338c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013390:	8d 48 01             	lea    ecx,[eax+0x1]
c0013393:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013397:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001339b:	0f b6 c0             	movzx  eax,al
c001339e:	c1 e0 08             	shl    eax,0x8
c00133a1:	89 d1                	mov    ecx,edx
c00133a3:	09 c1                	or     ecx,eax
c00133a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a9:	8d 50 02             	lea    edx,[eax+0x2]
c00133ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133b0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133b4:	0f b6 c0             	movzx  eax,al
c00133b7:	c1 e0 10             	shl    eax,0x10
c00133ba:	09 c1                	or     ecx,eax
c00133bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133c0:	8d 50 03             	lea    edx,[eax+0x3]
c00133c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133cb:	0f b6 c0             	movzx  eax,al
c00133ce:	c1 e0 18             	shl    eax,0x18
c00133d1:	09 c1                	or     ecx,eax
c00133d3:	89 ca                	mov    edx,ecx
c00133d5:	a0 d0 3f 02 c0       	mov    al,ds:0xc0023fd0
c00133da:	0f b6 c0             	movzx  eax,al
c00133dd:	89 14 85 80 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf80],edx
c00133e4:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00133e9:	a0 d0 3f 02 c0       	mov    al,ds:0xc0023fd0
c00133ee:	40                   	inc    eax
c00133ef:	a2 d0 3f 02 c0       	mov    ds:0xc0023fd0,al
c00133f4:	e9 cb 00 00 00       	jmp    c00134c4 <scanMADT()+0x378>
c00133f9:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00133fe:	0f 85 a6 00 00 00    	jne    c00134aa <scanMADT()+0x35e>
c0013404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013408:	8d 50 01             	lea    edx,[eax+0x1]
c001340b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001340f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013413:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013417:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001341b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001341f:	8d 50 01             	lea    edx,[eax+0x1]
c0013422:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013426:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001342a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001342e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013432:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013436:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001343a:	01 d0                	add    eax,edx
c001343c:	83 c0 2c             	add    eax,0x2c
c001343f:	8a 00                	mov    al,BYTE PTR [eax]
c0013441:	0f b6 d0             	movzx  edx,al
c0013444:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013448:	8d 48 01             	lea    ecx,[eax+0x1]
c001344b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001344f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013453:	0f b6 c0             	movzx  eax,al
c0013456:	c1 e0 08             	shl    eax,0x8
c0013459:	89 d1                	mov    ecx,edx
c001345b:	09 c1                	or     ecx,eax
c001345d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013461:	8d 50 02             	lea    edx,[eax+0x2]
c0013464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013468:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001346c:	0f b6 c0             	movzx  eax,al
c001346f:	c1 e0 10             	shl    eax,0x10
c0013472:	09 c1                	or     ecx,eax
c0013474:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013478:	8d 50 03             	lea    edx,[eax+0x3]
c001347b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001347f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013483:	0f b6 c0             	movzx  eax,al
c0013486:	c1 e0 18             	shl    eax,0x18
c0013489:	09 c8                	or     eax,ecx
c001348b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001348f:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013494:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013499:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001349e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00134a2:	88 90 80 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd180],dl
c00134a8:	eb 1a                	jmp    c00134c4 <scanMADT()+0x378>
c00134aa:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00134af:	75 07                	jne    c00134b8 <scanMADT()+0x36c>
c00134b1:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00134b6:	eb 0c                	jmp    c00134c4 <scanMADT()+0x378>
c00134b8:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00134bd:	75 05                	jne    c00134c4 <scanMADT()+0x378>
c00134bf:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00134c4:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00134c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00134cd:	01 d0                	add    eax,edx
c00134cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d3:	e9 44 fd ff ff       	jmp    c001321c <scanMADT()+0xd0>
c00134d8:	90                   	nop
c00134d9:	eb 01                	jmp    c00134dc <scanMADT()+0x390>
c00134db:	90                   	nop
c00134dc:	83 c4 2c             	add    esp,0x2c
c00134df:	c3                   	ret    

c00134e0 <ACPI::ACPI()>:
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e7:	83 ec 08             	sub    esp,0x8
c00134ea:	68 c7 13 02 c0       	push   0xc00213c7
c00134ef:	50                   	push   eax
c00134f0:	e8 f1 d0 ff ff       	call   c00105e6 <Device::Device(char const*)>
c00134f5:	83 c4 10             	add    esp,0x10
c00134f8:	ba 70 15 02 c0       	mov    edx,0xc0021570
c00134fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013501:	89 10                	mov    DWORD PTR [eax],edx
c0013503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013507:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001350e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013512:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001351c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013520:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001352a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013535:	e8 12 fc ff ff       	call   c001314c <scanMADT()>
c001353a:	90                   	nop
c001353b:	83 c4 0c             	add    esp,0xc
c001353e:	c3                   	ret    
c001353f:	90                   	nop

c0013540 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013540:	83 ec 2c             	sub    esp,0x2c
c0013543:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013547:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001354b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001354f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013553:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013558:	88 d0                	mov    al,dl
c001355a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001355e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013563:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001356b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001356f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013575:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013579:	0f 8d 97 00 00 00    	jge    c0013616 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001357f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013583:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013587:	83 c2 2a             	add    edx,0x2a
c001358a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001358e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013593:	75 78                	jne    c001360d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013595:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013599:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001359d:	83 c2 2a             	add    edx,0x2a
c00135a0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00135a4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00135a8:	75 63                	jne    c001360d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00135aa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00135af:	74 3a                	je     c00135eb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00135b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135b9:	83 c2 2a             	add    edx,0x2a
c00135bc:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00135c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135c7:	39 c2                	cmp    edx,eax
c00135c9:	74 10                	je     c00135db <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00135cb:	83 ec 0c             	sub    esp,0xc
c00135ce:	68 d4 14 02 c0       	push   0xc00214d4
c00135d3:	e8 a8 16 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c00135d8:	83 c4 10             	add    esp,0x10
c00135db:	83 ec 0c             	sub    esp,0xc
c00135de:	68 cc 13 02 c0       	push   0xc00213cc
c00135e3:	e8 98 16 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c00135e8:	83 c4 10             	add    esp,0x10
c00135eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00135ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135f7:	83 c2 2a             	add    edx,0x2a
c00135fa:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00135fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0013600:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013603:	89 01                	mov    DWORD PTR [ecx],eax
c0013605:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013608:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001360d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013611:	e9 55 ff ff ff       	jmp    c001356b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013616:	90                   	nop
c0013617:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001361b:	83 c4 2c             	add    esp,0x2c
c001361e:	c2 04 00             	ret    0x4
c0013621:	90                   	nop

c0013622 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013622:	56                   	push   esi
c0013623:	53                   	push   ebx
c0013624:	83 ec 14             	sub    esp,0x14
c0013627:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001362b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001362f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013633:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013638:	88 c8                	mov    al,cl
c001363a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001363e:	88 d0                	mov    al,dl
c0013640:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013648:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001364e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013652:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013658:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001365d:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013662:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013667:	83 ec 04             	sub    esp,0x4
c001366a:	56                   	push   esi
c001366b:	53                   	push   ebx
c001366c:	51                   	push   ecx
c001366d:	52                   	push   edx
c001366e:	50                   	push   eax
c001366f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013673:	68 04 15 02 c0       	push   0xc0021504
c0013678:	e8 6e b9 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001367d:	83 c4 20             	add    esp,0x20
c0013680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013684:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001368a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001368e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013691:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013695:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001369d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00136a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00136a7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00136aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136ae:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00136b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136b7:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00136bd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00136c1:	8d 48 01             	lea    ecx,[eax+0x1]
c00136c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136c8:	83 c2 2a             	add    edx,0x2a
c00136cb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00136cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136d3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00136d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136dd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00136e0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136e4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00136e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ec:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00136f2:	8d 50 01             	lea    edx,[eax+0x1]
c00136f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136f9:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00136ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013703:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013709:	3d 00 08 00 00       	cmp    eax,0x800
c001370e:	75 10                	jne    c0013720 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013710:	83 ec 0c             	sub    esp,0xc
c0013713:	68 db 13 02 c0       	push   0xc00213db
c0013718:	e8 63 15 00 00       	call   c0014c80 <Krnl::panic(char const*)>
c001371d:	83 c4 10             	add    esp,0x10
c0013720:	90                   	nop
c0013721:	83 c4 14             	add    esp,0x14
c0013724:	5b                   	pop    ebx
c0013725:	5e                   	pop    esi
c0013726:	c3                   	ret    
c0013727:	90                   	nop

c0013728 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013728:	b8 00 00 00 00       	mov    eax,0x0
c001372d:	c3                   	ret    

c001372e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001372e:	83 ec 1c             	sub    esp,0x1c
c0013731:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013735:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013738:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001373c:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0013741:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013746:	83 ec 08             	sub    esp,0x8
c0013749:	52                   	push   edx
c001374a:	50                   	push   eax
c001374b:	e8 e6 7a ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c0013750:	83 c4 10             	add    esp,0x10
c0013753:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013757:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c001375c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013761:	83 ec 04             	sub    esp,0x4
c0013764:	6a 01                	push   0x1
c0013766:	52                   	push   edx
c0013767:	50                   	push   eax
c0013768:	e8 d7 7b ff ff       	call   c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>
c001376d:	83 c4 10             	add    esp,0x10
c0013770:	90                   	nop
c0013771:	83 c4 1c             	add    esp,0x1c
c0013774:	c3                   	ret    
c0013775:	90                   	nop

c0013776 <ACPI::open(int, int, void*)>:
c0013776:	53                   	push   ebx
c0013777:	83 ec 18             	sub    esp,0x18
c001377a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001377e:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013789:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001378f:	84 c0                	test   al,al
c0013791:	74 60                	je     c00137f3 <ACPI::open(int, int, void*)+0x7d>
c0013793:	83 ec 0c             	sub    esp,0xc
c0013796:	68 58 01 00 00       	push   0x158
c001379b:	e8 5c b7 ff ff       	call   c000eefc <operator new(unsigned long)>
c00137a0:	83 c4 10             	add    esp,0x10
c00137a3:	89 c3                	mov    ebx,eax
c00137a5:	83 ec 0c             	sub    esp,0xc
c00137a8:	53                   	push   ebx
c00137a9:	e8 e2 7c 00 00       	call   c001b490 <PCI::PCI()>
c00137ae:	83 c4 10             	add    esp,0x10
c00137b1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00137b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137b9:	83 ec 08             	sub    esp,0x8
c00137bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00137c0:	50                   	push   eax
c00137c1:	e8 30 cc ff ff       	call   c00103f6 <Device::addChild(Device*)>
c00137c6:	83 c4 10             	add    esp,0x10
c00137c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00137cf:	83 c0 08             	add    eax,0x8
c00137d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00137d4:	6a 00                	push   0x0
c00137d6:	6a 00                	push   0x0
c00137d8:	6a 00                	push   0x0
c00137da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137de:	ff d0                	call   eax
c00137e0:	83 c4 10             	add    esp,0x10
c00137e3:	83 ec 0c             	sub    esp,0xc
c00137e6:	68 f8 13 02 c0       	push   0xc00213f8
c00137eb:	e8 fb b7 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c00137f0:	83 c4 10             	add    esp,0x10
c00137f3:	83 ec 0c             	sub    esp,0xc
c00137f6:	68 03 14 02 c0       	push   0xc0021403
c00137fb:	e8 89 33 00 00       	call   c0016b89 <Thr::loadKernelSymbolTable(char const*)>
c0013800:	83 c4 10             	add    esp,0x10
c0013803:	8b 1d 28 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023728
c0013809:	83 ec 08             	sub    esp,0x8
c001380c:	6a 01                	push   0x1
c001380e:	68 21 14 02 c0       	push   0xc0021421
c0013813:	e8 36 3e 00 00       	call   c001764e <Thr::loadDLL(char const*, bool)>
c0013818:	83 c4 10             	add    esp,0x10
c001381b:	83 ec 08             	sub    esp,0x8
c001381e:	53                   	push   ebx
c001381f:	50                   	push   eax
c0013820:	e8 7c 3f 00 00       	call   c00177a1 <Thr::executeDLL(unsigned long, void*)>
c0013825:	83 c4 10             	add    esp,0x10
c0013828:	8b 1d 28 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023728
c001382e:	83 ec 08             	sub    esp,0x8
c0013831:	6a 01                	push   0x1
c0013833:	68 3e 14 02 c0       	push   0xc002143e
c0013838:	e8 11 3e 00 00       	call   c001764e <Thr::loadDLL(char const*, bool)>
c001383d:	83 c4 10             	add    esp,0x10
c0013840:	83 ec 08             	sub    esp,0x8
c0013843:	53                   	push   ebx
c0013844:	50                   	push   eax
c0013845:	e8 57 3f 00 00       	call   c00177a1 <Thr::executeDLL(unsigned long, void*)>
c001384a:	83 c4 10             	add    esp,0x10
c001384d:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0013852:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013858:	83 e0 04             	and    eax,0x4
c001385b:	84 c0                	test   al,al
c001385d:	0f 84 cf 00 00 00    	je     c0013932 <ACPI::open(int, int, void*)+0x1bc>
c0013863:	83 ec 0c             	sub    esp,0xc
c0013866:	68 14 01 00 00       	push   0x114
c001386b:	e8 8c b6 ff ff       	call   c000eefc <operator new(unsigned long)>
c0013870:	83 c4 10             	add    esp,0x10
c0013873:	89 c3                	mov    ebx,eax
c0013875:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c001387a:	83 ec 04             	sub    esp,0x4
c001387d:	50                   	push   eax
c001387e:	68 5b 14 02 c0       	push   0xc002145b
c0013883:	53                   	push   ebx
c0013884:	e8 91 bc ff ff       	call   c000f51a <File::File(char const*, Process*)>
c0013889:	83 c4 10             	add    esp,0x10
c001388c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0013890:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013895:	74 17                	je     c00138ae <ACPI::open(int, int, void*)+0x138>
c0013897:	83 ec 0c             	sub    esp,0xc
c001389a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001389e:	e8 49 bf ff ff       	call   c000f7ec <File::exists()>
c00138a3:	83 c4 10             	add    esp,0x10
c00138a6:	84 c0                	test   al,al
c00138a8:	74 04                	je     c00138ae <ACPI::open(int, int, void*)+0x138>
c00138aa:	b0 01                	mov    al,0x1
c00138ac:	eb 02                	jmp    c00138b0 <ACPI::open(int, int, void*)+0x13a>
c00138ae:	b0 00                	mov    al,0x0
c00138b0:	84 c0                	test   al,al
c00138b2:	74 25                	je     c00138d9 <ACPI::open(int, int, void*)+0x163>
c00138b4:	8b 1d 28 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023728
c00138ba:	83 ec 08             	sub    esp,0x8
c00138bd:	6a 01                	push   0x1
c00138bf:	68 5b 14 02 c0       	push   0xc002145b
c00138c4:	e8 85 3d 00 00       	call   c001764e <Thr::loadDLL(char const*, bool)>
c00138c9:	83 c4 10             	add    esp,0x10
c00138cc:	83 ec 08             	sub    esp,0x8
c00138cf:	53                   	push   ebx
c00138d0:	50                   	push   eax
c00138d1:	e8 cb 3e 00 00       	call   c00177a1 <Thr::executeDLL(unsigned long, void*)>
c00138d6:	83 c4 10             	add    esp,0x10
c00138d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138de:	74 1e                	je     c00138fe <ACPI::open(int, int, void*)+0x188>
c00138e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138e5:	74 17                	je     c00138fe <ACPI::open(int, int, void*)+0x188>
c00138e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00138ed:	83 c0 08             	add    eax,0x8
c00138f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00138f2:	83 ec 0c             	sub    esp,0xc
c00138f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138f9:	ff d0                	call   eax
c00138fb:	83 c4 10             	add    esp,0x10
c00138fe:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013903:	83 ec 08             	sub    esp,0x8
c0013906:	68 78 14 02 c0       	push   0xc0021478
c001390b:	50                   	push   eax
c001390c:	e8 9f f7 ff ff       	call   c00130b0 <findDataTable(unsigned char*, char*)>
c0013911:	83 c4 10             	add    esp,0x10
c0013914:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013918:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001391d:	74 13                	je     c0013932 <ACPI::open(int, int, void*)+0x1bc>
c001391f:	83 ec 08             	sub    esp,0x8
c0013922:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013926:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001392a:	e8 ff fd ff ff       	call   c001372e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	b8 00 00 00 00       	mov    eax,0x0
c0013937:	83 c4 18             	add    esp,0x18
c001393a:	5b                   	pop    ebx
c001393b:	c3                   	ret    

c001393c <ACPI::sleep()>:
c001393c:	83 ec 0c             	sub    esp,0xc
c001393f:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c0013944:	85 c0                	test   eax,eax
c0013946:	74 07                	je     c001394f <ACPI::sleep()+0x13>
c0013948:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c001394d:	ff d0                	call   eax
c001394f:	90                   	nop
c0013950:	83 c4 0c             	add    esp,0xc
c0013953:	c3                   	ret    

c0013954 <CPU::close(int, int, void*)>:
c0013954:	31 c0                	xor    eax,eax
c0013956:	c3                   	ret    

c0013957 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0013957:	55                   	push   ebp
c0013958:	57                   	push   edi
c0013959:	56                   	push   esi
c001395a:	53                   	push   ebx
c001395b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001395f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013963:	89 ce                	mov    esi,ecx
c0013965:	89 d5                	mov    ebp,edx
c0013967:	80 f9 04             	cmp    cl,0x4
c001396a:	75 28                	jne    c0013994 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c001396c:	8d 42 f9             	lea    eax,[edx-0x7]
c001396f:	3c 03                	cmp    al,0x3
c0013971:	0f 86 63 01 00 00    	jbe    c0013ada <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013977:	80 fa 03             	cmp    dl,0x3
c001397a:	0f 84 5a 01 00 00    	je     c0013ada <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013980:	8d 7a f2             	lea    edi,[edx-0xe]
c0013983:	b8 50 30 02 c0       	mov    eax,0xc0023050
c0013988:	89 fb                	mov    ebx,edi
c001398a:	80 fb 01             	cmp    bl,0x1
c001398d:	77 4e                	ja     c00139dd <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c001398f:	e9 52 01 00 00       	jmp    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013994:	80 f9 05             	cmp    cl,0x5
c0013997:	75 4d                	jne    c00139e6 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0013999:	b8 60 30 02 c0       	mov    eax,0xc0023060
c001399e:	80 fa 03             	cmp    dl,0x3
c00139a1:	0f 86 3f 01 00 00    	jbe    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139a7:	8d 7a fa             	lea    edi,[edx-0x6]
c00139aa:	b8 70 30 02 c0       	mov    eax,0xc0023070
c00139af:	89 fb                	mov    ebx,edi
c00139b1:	80 fb 01             	cmp    bl,0x1
c00139b4:	0f 86 2c 01 00 00    	jbe    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139ba:	b8 80 30 02 c0       	mov    eax,0xc0023080
c00139bf:	80 fa 08             	cmp    dl,0x8
c00139c2:	0f 84 1e 01 00 00    	je     c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139c8:	89 d7                	mov    edi,edx
c00139ca:	b8 90 30 02 c0       	mov    eax,0xc0023090
c00139cf:	83 e7 fb             	and    edi,0xfffffffb
c00139d2:	89 fb                	mov    ebx,edi
c00139d4:	80 fb 09             	cmp    bl,0x9
c00139d7:	0f 84 09 01 00 00    	je     c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139dd:	31 c0                	xor    eax,eax
c00139df:	89 eb                	mov    ebx,ebp
c00139e1:	0f b6 fb             	movzx  edi,bl
c00139e4:	eb 30                	jmp    c0013a16 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00139e6:	31 c0                	xor    eax,eax
c00139e8:	80 f9 06             	cmp    cl,0x6
c00139eb:	75 f2                	jne    c00139df <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139ed:	80 fa 0a             	cmp    dl,0xa
c00139f0:	77 ed                	ja     c00139df <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139f2:	bf de 05 00 00       	mov    edi,0x5de
c00139f7:	0f a3 d7             	bt     edi,edx
c00139fa:	73 e3                	jae    c00139df <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139fc:	b8 a0 30 02 c0       	mov    eax,0xc00230a0
c0013a01:	e9 e0 00 00 00       	jmp    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a06:	39 c7                	cmp    edi,eax
c0013a08:	0f 84 d3 00 00 00    	je     c0013ae1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a0e:	40                   	inc    eax
c0013a0f:	3d d0 00 00 00       	cmp    eax,0xd0
c0013a14:	74 09                	je     c0013a1f <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0013a16:	89 f3                	mov    ebx,esi
c0013a18:	80 fb 0f             	cmp    bl,0xf
c0013a1b:	75 f1                	jne    c0013a0e <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0013a1d:	eb e7                	jmp    c0013a06 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0013a1f:	80 f9 10             	cmp    cl,0x10
c0013a22:	75 14                	jne    c0013a38 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0013a24:	8d 42 fc             	lea    eax,[edx-0x4]
c0013a27:	83 e0 fb             	and    eax,0xfffffffb
c0013a2a:	3c 02                	cmp    al,0x2
c0013a2c:	76 34                	jbe    c0013a62 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013a2e:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013a33:	80 fa 02             	cmp    dl,0x2
c0013a36:	eb 24                	jmp    c0013a5c <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0013a38:	80 f9 11             	cmp    cl,0x11
c0013a3b:	75 13                	jne    c0013a50 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013a3d:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013a42:	80 fa 03             	cmp    dl,0x3
c0013a45:	0f 85 9b 00 00 00    	jne    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a4b:	e9 91 00 00 00       	jmp    c0013ae1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a50:	80 f9 12             	cmp    cl,0x12
c0013a53:	75 14                	jne    c0013a69 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0013a55:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013a5a:	fe ca                	dec    dl
c0013a5c:	0f 85 84 00 00 00    	jne    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a62:	b8 c0 30 02 c0       	mov    eax,0xc00230c0
c0013a67:	eb 7d                	jmp    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a69:	80 f9 14             	cmp    cl,0x14
c0013a6c:	75 12                	jne    c0013a80 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013a6e:	4a                   	dec    edx
c0013a6f:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013a74:	80 fa 01             	cmp    dl,0x1
c0013a77:	77 6d                	ja     c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a79:	b8 d0 30 02 c0       	mov    eax,0xc00230d0
c0013a7e:	eb 66                	jmp    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a80:	80 f9 15             	cmp    cl,0x15
c0013a83:	75 31                	jne    c0013ab6 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0013a85:	b8 e0 30 02 c0       	mov    eax,0xc00230e0
c0013a8a:	80 fa 01             	cmp    dl,0x1
c0013a8d:	74 57                	je     c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a8f:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013a94:	80 fa 13             	cmp    dl,0x13
c0013a97:	76 0c                	jbe    c0013aa5 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013a99:	80 fa 30             	cmp    dl,0x30
c0013a9c:	75 48                	jne    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a9e:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0013aa3:	eb 41                	jmp    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aa5:	b9 04 00 09 00       	mov    ecx,0x90004
c0013aaa:	0f a3 d1             	bt     ecx,edx
c0013aad:	73 37                	jae    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aaf:	b8 f0 30 02 c0       	mov    eax,0xc00230f0
c0013ab4:	eb 30                	jmp    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ab6:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013abb:	80 f9 16             	cmp    cl,0x16
c0013abe:	75 26                	jne    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ac0:	b8 10 31 02 c0       	mov    eax,0xc0023110
c0013ac5:	84 d2                	test   dl,dl
c0013ac7:	74 1d                	je     c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ac9:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013ace:	80 fa 30             	cmp    dl,0x30
c0013ad1:	75 13                	jne    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ad3:	b8 20 31 02 c0       	mov    eax,0xc0023120
c0013ad8:	eb 0c                	jmp    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ada:	b8 40 30 02 c0       	mov    eax,0xc0023040
c0013adf:	eb 05                	jmp    c0013ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ae1:	b8 b0 30 02 c0       	mov    eax,0xc00230b0
c0013ae6:	5b                   	pop    ebx
c0013ae7:	5e                   	pop    esi
c0013ae8:	5f                   	pop    edi
c0013ae9:	5d                   	pop    ebp
c0013aea:	c3                   	ret    

c0013aeb <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013aeb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013aef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013af3:	80 f9 04             	cmp    cl,0x4
c0013af6:	75 6b                	jne    c0013b63 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013af8:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c0013afd:	80 fa 01             	cmp    dl,0x1
c0013b00:	0f 86 92 02 00 00    	jbe    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b06:	b8 b0 2e 02 c0       	mov    eax,0xc0022eb0
c0013b0b:	80 fa 02             	cmp    dl,0x2
c0013b0e:	0f 84 84 02 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b14:	b8 c0 2e 02 c0       	mov    eax,0xc0022ec0
c0013b19:	80 fa 03             	cmp    dl,0x3
c0013b1c:	0f 84 76 02 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b22:	b8 d0 2e 02 c0       	mov    eax,0xc0022ed0
c0013b27:	80 fa 04             	cmp    dl,0x4
c0013b2a:	0f 84 68 02 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b30:	b8 e0 2e 02 c0       	mov    eax,0xc0022ee0
c0013b35:	80 fa 05             	cmp    dl,0x5
c0013b38:	0f 84 5a 02 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b3e:	b8 c0 2e 02 c0       	mov    eax,0xc0022ec0
c0013b43:	80 fa 07             	cmp    dl,0x7
c0013b46:	0f 84 4c 02 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b4c:	83 ea 08             	sub    edx,0x8
c0013b4f:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013b54:	80 fa 01             	cmp    dl,0x1
c0013b57:	0f 87 3b 02 00 00    	ja     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b5d:	b8 f0 2e 02 c0       	mov    eax,0xc0022ef0
c0013b62:	c3                   	ret    
c0013b63:	80 f9 05             	cmp    cl,0x5
c0013b66:	75 45                	jne    c0013bad <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013b68:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013b6b:	b8 00 2f 02 c0       	mov    eax,0xc0022f00
c0013b70:	80 f9 02             	cmp    cl,0x2
c0013b73:	0f 86 1f 02 00 00    	jbe    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b79:	80 fa 04             	cmp    dl,0x4
c0013b7c:	0f 84 f3 01 00 00    	je     c0013d75 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0013b82:	80 fa 07             	cmp    dl,0x7
c0013b85:	0f 84 0d 02 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b8b:	b8 10 2f 02 c0       	mov    eax,0xc0022f10
c0013b90:	80 fa 08             	cmp    dl,0x8
c0013b93:	0f 84 ff 01 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b99:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013b9e:	80 fa 09             	cmp    dl,0x9
c0013ba1:	0f 85 f1 01 00 00    	jne    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ba7:	b8 20 2f 02 c0       	mov    eax,0xc0022f20
c0013bac:	c3                   	ret    
c0013bad:	80 f9 06             	cmp    cl,0x6
c0013bb0:	0f 85 85 01 00 00    	jne    c0013d3b <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013bb6:	b8 30 2f 02 c0       	mov    eax,0xc0022f30
c0013bbb:	80 fa 01             	cmp    dl,0x1
c0013bbe:	0f 84 d4 01 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bc4:	8d 42 fb             	lea    eax,[edx-0x5]
c0013bc7:	3c 01                	cmp    al,0x1
c0013bc9:	0f 86 ac 01 00 00    	jbe    c0013d7b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013bcf:	80 fa 03             	cmp    dl,0x3
c0013bd2:	0f 84 a3 01 00 00    	je     c0013d7b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013bd8:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013bdb:	b8 50 2f 02 c0       	mov    eax,0xc0022f50
c0013be0:	80 f9 01             	cmp    cl,0x1
c0013be3:	0f 86 af 01 00 00    	jbe    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013be9:	80 fa 09             	cmp    dl,0x9
c0013bec:	0f 84 8f 01 00 00    	je     c0013d81 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013bf2:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013bf5:	80 f9 01             	cmp    cl,0x1
c0013bf8:	0f 86 9a 01 00 00    	jbe    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bfe:	b8 60 2f 02 c0       	mov    eax,0xc0022f60
c0013c03:	80 fa 0d             	cmp    dl,0xd
c0013c06:	0f 84 8c 01 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c0c:	b8 70 2f 02 c0       	mov    eax,0xc0022f70
c0013c11:	80 fa 0e             	cmp    dl,0xe
c0013c14:	0f 84 7e 01 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c1a:	b8 80 2f 02 c0       	mov    eax,0xc0022f80
c0013c1f:	80 fa 0f             	cmp    dl,0xf
c0013c22:	0f 84 70 01 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c28:	b8 60 2f 02 c0       	mov    eax,0xc0022f60
c0013c2d:	80 fa 15             	cmp    dl,0x15
c0013c30:	0f 84 62 01 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c36:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013c39:	b8 80 2f 02 c0       	mov    eax,0xc0022f80
c0013c3e:	80 f9 01             	cmp    cl,0x1
c0013c41:	0f 86 51 01 00 00    	jbe    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c47:	80 fa 1a             	cmp    dl,0x1a
c0013c4a:	0f 84 37 01 00 00    	je     c0013d87 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013c50:	80 fa 1c             	cmp    dl,0x1c
c0013c53:	0f 84 34 01 00 00    	je     c0013d8d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013c59:	80 fa 1d             	cmp    dl,0x1d
c0013c5c:	0f 84 36 01 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c62:	b8 b0 2f 02 c0       	mov    eax,0xc0022fb0
c0013c67:	80 fa 25             	cmp    dl,0x25
c0013c6a:	0f 84 28 01 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c70:	8d 4a da             	lea    ecx,[edx-0x26]
c0013c73:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c0013c78:	80 f9 01             	cmp    cl,0x1
c0013c7b:	0f 86 17 01 00 00    	jbe    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c81:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c0013c86:	80 fa 2a             	cmp    dl,0x2a
c0013c89:	0f 84 09 01 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c8f:	b8 b0 2f 02 c0       	mov    eax,0xc0022fb0
c0013c94:	80 fa 2c             	cmp    dl,0x2c
c0013c97:	0f 84 fb 00 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c9d:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c0013ca2:	80 fa 2d             	cmp    dl,0x2d
c0013ca5:	0f 84 ed 00 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cab:	b8 90 2f 02 c0       	mov    eax,0xc0022f90
c0013cb0:	80 fa 2e             	cmp    dl,0x2e
c0013cb3:	0f 84 df 00 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cb9:	b8 b0 2f 02 c0       	mov    eax,0xc0022fb0
c0013cbe:	80 fa 2f             	cmp    dl,0x2f
c0013cc1:	0f 84 d1 00 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cc7:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013cca:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c0013ccf:	80 f9 01             	cmp    cl,0x1
c0013cd2:	0f 86 c0 00 00 00    	jbe    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cd8:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c0013cdd:	80 fa 37             	cmp    dl,0x37
c0013ce0:	0f 84 b2 00 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ce6:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013ceb:	80 fa 3a             	cmp    dl,0x3a
c0013cee:	0f 84 a4 00 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cf4:	b8 f0 2f 02 c0       	mov    eax,0xc0022ff0
c0013cf9:	80 fa 3c             	cmp    dl,0x3c
c0013cfc:	0f 84 96 00 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d02:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013d07:	80 fa 3d             	cmp    dl,0x3d
c0013d0a:	0f 84 88 00 00 00    	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d10:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013d15:	80 fa 3e             	cmp    dl,0x3e
c0013d18:	74 7e                	je     c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d1a:	8d 42 bb             	lea    eax,[edx-0x45]
c0013d1d:	3c 01                	cmp    al,0x1
c0013d1f:	76 72                	jbe    c0013d93 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d21:	80 fa 3f             	cmp    dl,0x3f
c0013d24:	74 6d                	je     c0013d93 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d26:	80 fa 4a             	cmp    dl,0x4a
c0013d29:	74 0a                	je     c0013d35 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013d2b:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013d30:	80 fa 4d             	cmp    dl,0x4d
c0013d33:	75 63                	jne    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d35:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c0013d3a:	c3                   	ret    
c0013d3b:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013d40:	80 f9 0b             	cmp    cl,0xb
c0013d43:	75 0a                	jne    c0013d4f <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013d45:	fe ca                	dec    dl
c0013d47:	75 4f                	jne    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d49:	b8 10 30 02 c0       	mov    eax,0xc0023010
c0013d4e:	c3                   	ret    
c0013d4f:	80 f9 0f             	cmp    cl,0xf
c0013d52:	75 44                	jne    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d54:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0013d59:	80 fa 02             	cmp    dl,0x2
c0013d5c:	76 3a                	jbe    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d5e:	8d 42 fd             	lea    eax,[edx-0x3]
c0013d61:	3c 01                	cmp    al,0x1
c0013d63:	76 0a                	jbe    c0013d6f <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013d65:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013d6a:	80 fa 06             	cmp    dl,0x6
c0013d6d:	75 29                	jne    c0013d98 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d6f:	b8 30 30 02 c0       	mov    eax,0xc0023030
c0013d74:	c3                   	ret    
c0013d75:	b8 10 2f 02 c0       	mov    eax,0xc0022f10
c0013d7a:	c3                   	ret    
c0013d7b:	b8 40 2f 02 c0       	mov    eax,0xc0022f40
c0013d80:	c3                   	ret    
c0013d81:	b8 60 2f 02 c0       	mov    eax,0xc0022f60
c0013d86:	c3                   	ret    
c0013d87:	b8 90 2f 02 c0       	mov    eax,0xc0022f90
c0013d8c:	c3                   	ret    
c0013d8d:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c0013d92:	c3                   	ret    
c0013d93:	b8 f0 2f 02 c0       	mov    eax,0xc0022ff0
c0013d98:	c3                   	ret    

c0013d99 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013d99:	60                   	pusha  
c0013d9a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013d9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013da2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013da6:	9c                   	pushf  
c0013da7:	fa                   	cli    
c0013da8:	0f 09                	wbinvd 
c0013daa:	0f 30                	wrmsr  
c0013dac:	9d                   	popf   
c0013dad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013db1:	89 02                	mov    DWORD PTR [edx],eax
c0013db3:	61                   	popa   
c0013db4:	c3                   	ret    

c0013db5 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013db5:	60                   	pusha  
c0013db6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013dba:	9c                   	pushf  
c0013dbb:	fa                   	cli    
c0013dbc:	0f 09                	wbinvd 
c0013dbe:	31 c0                	xor    eax,eax
c0013dc0:	31 d2                	xor    edx,edx
c0013dc2:	0f 32                	rdmsr  
c0013dc4:	9d                   	popf   
c0013dc5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013dc9:	89 02                	mov    DWORD PTR [edx],eax
c0013dcb:	61                   	popa   
c0013dcc:	c3                   	ret    

c0013dcd <AMD_K6_writeback(int, int, int)>:
c0013dcd:	56                   	push   esi
c0013dce:	53                   	push   ebx
c0013dcf:	83 ec 10             	sub    esp,0x10
c0013dd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd6:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013ddb:	75 5d                	jne    c0013e3a <AMD_K6_writeback(int, int, int)+0x6d>
c0013ddd:	83 f8 08             	cmp    eax,0x8
c0013de0:	75 09                	jne    c0013deb <AMD_K6_writeback(int, int, int)+0x1e>
c0013de2:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013de7:	7e 13                	jle    c0013dfc <AMD_K6_writeback(int, int, int)+0x2f>
c0013de9:	eb 30                	jmp    c0013e1b <AMD_K6_writeback(int, int, int)+0x4e>
c0013deb:	83 f8 06             	cmp    eax,0x6
c0013dee:	7c 4a                	jl     c0013e3a <AMD_K6_writeback(int, int, int)+0x6d>
c0013df0:	83 f8 07             	cmp    eax,0x7
c0013df3:	7e 07                	jle    c0013dfc <AMD_K6_writeback(int, int, int)+0x2f>
c0013df5:	83 f8 09             	cmp    eax,0x9
c0013df8:	74 21                	je     c0013e1b <AMD_K6_writeback(int, int, int)+0x4e>
c0013dfa:	eb 3e                	jmp    c0013e3a <AMD_K6_writeback(int, int, int)+0x6d>
c0013dfc:	89 e6                	mov    esi,esp
c0013dfe:	8b 1d 64 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023764
c0013e04:	56                   	push   esi
c0013e05:	c1 eb 15             	shr    ebx,0x15
c0013e08:	68 82 00 00 c0       	push   0xc0000082
c0013e0d:	83 e3 7e             	and    ebx,0x7e
c0013e10:	e8 a0 ff ff ff       	call   c0013db5 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e15:	56                   	push   esi
c0013e16:	6a 00                	push   0x0
c0013e18:	53                   	push   ebx
c0013e19:	eb 12                	jmp    c0013e2d <AMD_K6_writeback(int, int, int)+0x60>
c0013e1b:	89 e3                	mov    ebx,esp
c0013e1d:	53                   	push   ebx
c0013e1e:	68 82 00 00 c0       	push   0xc0000082
c0013e23:	e8 8d ff ff ff       	call   c0013db5 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e28:	53                   	push   ebx
c0013e29:	6a 00                	push   0x0
c0013e2b:	6a 00                	push   0x0
c0013e2d:	68 82 00 00 c0       	push   0xc0000082
c0013e32:	e8 62 ff ff ff       	call   c0013d99 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013e37:	83 c4 18             	add    esp,0x18
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	5b                   	pop    ebx
c0013e3e:	5e                   	pop    esi
c0013e3f:	c3                   	ret    

c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013e40:	55                   	push   ebp
c0013e41:	57                   	push   edi
c0013e42:	56                   	push   esi
c0013e43:	53                   	push   ebx
c0013e44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e48:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013e4c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e50:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013e54:	39 05 40 31 02 c0    	cmp    DWORD PTR ds:0xc0023140,eax
c0013e5a:	75 23                	jne    c0013e7f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013e5c:	a1 6c 41 02 c0       	mov    eax,ds:0xc002416c
c0013e61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e65:	89 06                	mov    DWORD PTR [esi],eax
c0013e67:	a1 68 41 02 c0       	mov    eax,ds:0xc0024168
c0013e6c:	89 07                	mov    DWORD PTR [edi],eax
c0013e6e:	a1 64 41 02 c0       	mov    eax,ds:0xc0024164
c0013e73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e76:	a1 60 41 02 c0       	mov    eax,ds:0xc0024160
c0013e7b:	89 02                	mov    DWORD PTR [edx],eax
c0013e7d:	eb 3f                	jmp    c0013ebe <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013e7f:	31 c9                	xor    ecx,ecx
c0013e81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e85:	0f a2                	cpuid  
c0013e87:	89 06                	mov    DWORD PTR [esi],eax
c0013e89:	89 1f                	mov    DWORD PTR [edi],ebx
c0013e8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e8f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013e92:	89 10                	mov    DWORD PTR [eax],edx
c0013e94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e98:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0013e9d:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e9f:	a3 6c 41 02 c0       	mov    ds:0xc002416c,eax
c0013ea4:	8b 07                	mov    eax,DWORD PTR [edi]
c0013ea6:	a3 68 41 02 c0       	mov    ds:0xc0024168,eax
c0013eab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013eae:	a3 64 41 02 c0       	mov    ds:0xc0024164,eax
c0013eb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013eb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0013eb9:	a3 60 41 02 c0       	mov    ds:0xc0024160,eax
c0013ebe:	5b                   	pop    ebx
c0013ebf:	5e                   	pop    esi
c0013ec0:	5f                   	pop    edi
c0013ec1:	5d                   	pop    ebp
c0013ec2:	c3                   	ret    

c0013ec3 <cpuidCheckEDX(unsigned int)>:
c0013ec3:	83 ec 10             	sub    esp,0x10
c0013ec6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013eca:	50                   	push   eax
c0013ecb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ecf:	50                   	push   eax
c0013ed0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ed4:	50                   	push   eax
c0013ed5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ed9:	50                   	push   eax
c0013eda:	6a 01                	push   0x1
c0013edc:	e8 5f ff ff ff       	call   c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ee1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ee5:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013ee9:	0f 95 c0             	setne  al
c0013eec:	83 c4 24             	add    esp,0x24
c0013eef:	c3                   	ret    

c0013ef0 <cpuidCheckECX(unsigned int)>:
c0013ef0:	83 ec 10             	sub    esp,0x10
c0013ef3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ef7:	50                   	push   eax
c0013ef8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013efc:	50                   	push   eax
c0013efd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f01:	50                   	push   eax
c0013f02:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f06:	50                   	push   eax
c0013f07:	6a 01                	push   0x1
c0013f09:	e8 32 ff ff ff       	call   c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f12:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f16:	0f 95 c0             	setne  al
c0013f19:	83 c4 24             	add    esp,0x24
c0013f1c:	c3                   	ret    

c0013f1d <cpuidCheckExtendedEBX(unsigned int)>:
c0013f1d:	83 ec 10             	sub    esp,0x10
c0013f20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f24:	50                   	push   eax
c0013f25:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f29:	50                   	push   eax
c0013f2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f2e:	50                   	push   eax
c0013f2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f33:	50                   	push   eax
c0013f34:	6a 07                	push   0x7
c0013f36:	e8 05 ff ff ff       	call   c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f3f:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013f43:	0f 95 c0             	setne  al
c0013f46:	83 c4 24             	add    esp,0x24
c0013f49:	c3                   	ret    

c0013f4a <cpuidCheckExtendedECX(unsigned int)>:
c0013f4a:	83 ec 10             	sub    esp,0x10
c0013f4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f51:	50                   	push   eax
c0013f52:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f56:	50                   	push   eax
c0013f57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f5b:	50                   	push   eax
c0013f5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f60:	50                   	push   eax
c0013f61:	6a 07                	push   0x7
c0013f63:	e8 d8 fe ff ff       	call   c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f6c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f70:	0f 95 c0             	setne  al
c0013f73:	83 c4 24             	add    esp,0x24
c0013f76:	c3                   	ret    

c0013f77 <getCPUNumber()>:
c0013f77:	31 c0                	xor    eax,eax
c0013f79:	c3                   	ret    

c0013f7a <thisCPU()>:
c0013f7a:	e8 f8 ff ff ff       	call   c0013f77 <getCPUNumber()>
c0013f7f:	8b 15 28 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023728
c0013f85:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013f8c:	c3                   	ret    
c0013f8d:	90                   	nop

c0013f8e <CPU::CPU()>:
c0013f8e:	83 ec 0c             	sub    esp,0xc
c0013f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f95:	83 ec 08             	sub    esp,0x8
c0013f98:	68 e9 16 02 c0       	push   0xc00216e9
c0013f9d:	50                   	push   eax
c0013f9e:	e8 43 c6 ff ff       	call   c00105e6 <Device::Device(char const*)>
c0013fa3:	83 c4 10             	add    esp,0x10
c0013fa6:	ba c0 17 02 c0       	mov    edx,0xc00217c0
c0013fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013faf:	89 10                	mov    DWORD PTR [eax],edx
c0013fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc3:	05 78 01 00 00       	add    eax,0x178
c0013fc8:	83 ec 0c             	sub    esp,0xc
c0013fcb:	50                   	push   eax
c0013fcc:	e8 5d 74 ff ff       	call   c000b42e <GDT::GDT()>
c0013fd1:	83 c4 10             	add    esp,0x10
c0013fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd8:	05 7c 09 00 00       	add    eax,0x97c
c0013fdd:	83 ec 0c             	sub    esp,0xc
c0013fe0:	50                   	push   eax
c0013fe1:	e8 a8 76 ff ff       	call   c000b68e <IDT::IDT()>
c0013fe6:	83 c4 10             	add    esp,0x10
c0013fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fed:	05 7c 11 00 00       	add    eax,0x117c
c0013ff2:	83 ec 0c             	sub    esp,0xc
c0013ff5:	50                   	push   eax
c0013ff6:	e8 51 96 ff ff       	call   c000d64c <TSS::TSS()>
c0013ffb:	83 c4 10             	add    esp,0x10
c0013ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014002:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001400d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014017:	90                   	nop
c0014018:	83 c4 0c             	add    esp,0xc
c001401b:	c3                   	ret    

c001401c <CPU::displayFeatures()>:
c001401c:	c3                   	ret    
c001401d:	90                   	nop

c001401e <CPU::detectFeatures()>:
c001401e:	55                   	push   ebp
c001401f:	57                   	push   edi
c0014020:	56                   	push   esi
c0014021:	53                   	push   ebx
c0014022:	83 ec 50             	sub    esp,0x50
c0014025:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014029:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014033:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001403a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014040:	6a 0d                	push   0xd
c0014042:	6a 00                	push   0x0
c0014044:	57                   	push   edi
c0014045:	e8 be c5 fe ff       	call   c0000608 <memset>
c001404a:	83 c4 10             	add    esp,0x10
c001404d:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0014052:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014059:	0f 84 20 09 00 00    	je     c001497f <CPU::detectFeatures()+0x961>
c001405f:	83 ec 0c             	sub    esp,0xc
c0014062:	6a 10                	push   0x10
c0014064:	e8 5a fe ff ff       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c0014069:	83 e0 01             	and    eax,0x1
c001406c:	8d 14 00             	lea    edx,[eax+eax*1]
c001406f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014075:	83 e0 fd             	and    eax,0xfffffffd
c0014078:	09 d0                	or     eax,edx
c001407a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014080:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014087:	e8 37 fe ff ff       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c001408c:	83 e0 01             	and    eax,0x1
c001408f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014096:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001409c:	83 e0 fb             	and    eax,0xfffffffb
c001409f:	09 d0                	or     eax,edx
c00140a1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140a7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00140ae:	e8 10 fe ff ff       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c00140b3:	83 e0 01             	and    eax,0x1
c00140b6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00140bd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140c3:	83 e0 f7             	and    eax,0xfffffff7
c00140c6:	09 d0                	or     eax,edx
c00140c8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140ce:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00140d5:	e8 e9 fd ff ff       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c00140da:	83 e0 01             	and    eax,0x1
c00140dd:	c1 e0 04             	shl    eax,0x4
c00140e0:	88 c2                	mov    dl,al
c00140e2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140e8:	83 e0 ef             	and    eax,0xffffffef
c00140eb:	09 d0                	or     eax,edx
c00140ed:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140f3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00140fa:	e8 c4 fd ff ff       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c00140ff:	83 e0 01             	and    eax,0x1
c0014102:	c1 e0 05             	shl    eax,0x5
c0014105:	88 c2                	mov    dl,al
c0014107:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001410d:	83 e0 df             	and    eax,0xffffffdf
c0014110:	09 d0                	or     eax,edx
c0014112:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014118:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001411f:	e8 9f fd ff ff       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c0014124:	83 e0 01             	and    eax,0x1
c0014127:	8d 14 00             	lea    edx,[eax+eax*1]
c001412a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014130:	83 e0 fd             	and    eax,0xfffffffd
c0014133:	09 d0                	or     eax,edx
c0014135:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001413b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014142:	e8 7c fd ff ff       	call   c0013ec3 <cpuidCheckEDX(unsigned int)>
c0014147:	83 e0 01             	and    eax,0x1
c001414a:	c1 e0 06             	shl    eax,0x6
c001414d:	88 c2                	mov    dl,al
c001414f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014155:	83 e0 bf             	and    eax,0xffffffbf
c0014158:	09 d0                	or     eax,edx
c001415a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014160:	58                   	pop    eax
c0014161:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014165:	56                   	push   esi
c0014166:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001416a:	55                   	push   ebp
c001416b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001416f:	50                   	push   eax
c0014170:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014174:	52                   	push   edx
c0014175:	6a 00                	push   0x0
c0014177:	e8 c4 fc ff ff       	call   c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001417c:	83 c4 1c             	add    esp,0x1c
c001417f:	6a 04                	push   0x4
c0014181:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014185:	50                   	push   eax
c0014186:	57                   	push   edi
c0014187:	e8 46 c4 fe ff       	call   c00005d2 <memcpy>
c001418c:	83 c4 0c             	add    esp,0xc
c001418f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014195:	6a 04                	push   0x4
c0014197:	56                   	push   esi
c0014198:	50                   	push   eax
c0014199:	e8 34 c4 fe ff       	call   c00005d2 <memcpy>
c001419e:	83 c4 0c             	add    esp,0xc
c00141a1:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00141a7:	6a 04                	push   0x4
c00141a9:	55                   	push   ebp
c00141aa:	50                   	push   eax
c00141ab:	e8 22 c4 fe ff       	call   c00005d2 <memcpy>
c00141b0:	58                   	pop    eax
c00141b1:	5a                   	pop    edx
c00141b2:	68 94 15 02 c0       	push   0xc0021594
c00141b7:	57                   	push   edi
c00141b8:	e8 3b c5 fe ff       	call   c00006f8 <strcmp>
c00141bd:	83 c4 10             	add    esp,0x10
c00141c0:	85 c0                	test   eax,eax
c00141c2:	75 0f                	jne    c00141d3 <CPU::detectFeatures()+0x1b5>
c00141c4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00141ce:	e9 22 02 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c00141d3:	50                   	push   eax
c00141d4:	50                   	push   eax
c00141d5:	68 a1 15 02 c0       	push   0xc00215a1
c00141da:	57                   	push   edi
c00141db:	e8 18 c5 fe ff       	call   c00006f8 <strcmp>
c00141e0:	83 c4 10             	add    esp,0x10
c00141e3:	85 c0                	test   eax,eax
c00141e5:	74 dd                	je     c00141c4 <CPU::detectFeatures()+0x1a6>
c00141e7:	51                   	push   ecx
c00141e8:	51                   	push   ecx
c00141e9:	68 ae 15 02 c0       	push   0xc00215ae
c00141ee:	57                   	push   edi
c00141ef:	e8 04 c5 fe ff       	call   c00006f8 <strcmp>
c00141f4:	83 c4 10             	add    esp,0x10
c00141f7:	85 c0                	test   eax,eax
c00141f9:	74 2a                	je     c0014225 <CPU::detectFeatures()+0x207>
c00141fb:	52                   	push   edx
c00141fc:	52                   	push   edx
c00141fd:	68 bb 15 02 c0       	push   0xc00215bb
c0014202:	57                   	push   edi
c0014203:	e8 f0 c4 fe ff       	call   c00006f8 <strcmp>
c0014208:	83 c4 10             	add    esp,0x10
c001420b:	85 c0                	test   eax,eax
c001420d:	74 16                	je     c0014225 <CPU::detectFeatures()+0x207>
c001420f:	50                   	push   eax
c0014210:	50                   	push   eax
c0014211:	68 c8 15 02 c0       	push   0xc00215c8
c0014216:	57                   	push   edi
c0014217:	e8 dc c4 fe ff       	call   c00006f8 <strcmp>
c001421c:	83 c4 10             	add    esp,0x10
c001421f:	85 c0                	test   eax,eax
c0014221:	74 48                	je     c001426b <CPU::detectFeatures()+0x24d>
c0014223:	eb 0f                	jmp    c0014234 <CPU::detectFeatures()+0x216>
c0014225:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001422f:	e9 c1 01 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c0014234:	50                   	push   eax
c0014235:	50                   	push   eax
c0014236:	68 d5 15 02 c0       	push   0xc00215d5
c001423b:	57                   	push   edi
c001423c:	e8 b7 c4 fe ff       	call   c00006f8 <strcmp>
c0014241:	83 c4 10             	add    esp,0x10
c0014244:	85 c0                	test   eax,eax
c0014246:	74 23                	je     c001426b <CPU::detectFeatures()+0x24d>
c0014248:	50                   	push   eax
c0014249:	50                   	push   eax
c001424a:	68 e2 15 02 c0       	push   0xc00215e2
c001424f:	57                   	push   edi
c0014250:	e8 a3 c4 fe ff       	call   c00006f8 <strcmp>
c0014255:	83 c4 10             	add    esp,0x10
c0014258:	85 c0                	test   eax,eax
c001425a:	75 1e                	jne    c001427a <CPU::detectFeatures()+0x25c>
c001425c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014266:	e9 8a 01 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c001426b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014275:	e9 7b 01 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c001427a:	50                   	push   eax
c001427b:	50                   	push   eax
c001427c:	68 ef 15 02 c0       	push   0xc00215ef
c0014281:	57                   	push   edi
c0014282:	e8 71 c4 fe ff       	call   c00006f8 <strcmp>
c0014287:	83 c4 10             	add    esp,0x10
c001428a:	85 c0                	test   eax,eax
c001428c:	75 0f                	jne    c001429d <CPU::detectFeatures()+0x27f>
c001428e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014298:	e9 58 01 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c001429d:	50                   	push   eax
c001429e:	50                   	push   eax
c001429f:	68 ae 15 02 c0       	push   0xc00215ae
c00142a4:	57                   	push   edi
c00142a5:	e8 4e c4 fe ff       	call   c00006f8 <strcmp>
c00142aa:	83 c4 10             	add    esp,0x10
c00142ad:	85 c0                	test   eax,eax
c00142af:	75 0f                	jne    c00142c0 <CPU::detectFeatures()+0x2a2>
c00142b1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00142bb:	e9 35 01 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c00142c0:	50                   	push   eax
c00142c1:	50                   	push   eax
c00142c2:	68 fc 15 02 c0       	push   0xc00215fc
c00142c7:	57                   	push   edi
c00142c8:	e8 2b c4 fe ff       	call   c00006f8 <strcmp>
c00142cd:	83 c4 10             	add    esp,0x10
c00142d0:	85 c0                	test   eax,eax
c00142d2:	75 0f                	jne    c00142e3 <CPU::detectFeatures()+0x2c5>
c00142d4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00142de:	e9 12 01 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c00142e3:	51                   	push   ecx
c00142e4:	51                   	push   ecx
c00142e5:	68 09 16 02 c0       	push   0xc0021609
c00142ea:	57                   	push   edi
c00142eb:	e8 08 c4 fe ff       	call   c00006f8 <strcmp>
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	85 c0                	test   eax,eax
c00142f5:	75 0f                	jne    c0014306 <CPU::detectFeatures()+0x2e8>
c00142f7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014301:	e9 ef 00 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c0014306:	52                   	push   edx
c0014307:	52                   	push   edx
c0014308:	68 16 16 02 c0       	push   0xc0021616
c001430d:	57                   	push   edi
c001430e:	e8 e5 c3 fe ff       	call   c00006f8 <strcmp>
c0014313:	83 c4 10             	add    esp,0x10
c0014316:	85 c0                	test   eax,eax
c0014318:	75 0f                	jne    c0014329 <CPU::detectFeatures()+0x30b>
c001431a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014324:	e9 cc 00 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c0014329:	50                   	push   eax
c001432a:	50                   	push   eax
c001432b:	68 23 16 02 c0       	push   0xc0021623
c0014330:	57                   	push   edi
c0014331:	e8 c2 c3 fe ff       	call   c00006f8 <strcmp>
c0014336:	83 c4 10             	add    esp,0x10
c0014339:	85 c0                	test   eax,eax
c001433b:	75 0f                	jne    c001434c <CPU::detectFeatures()+0x32e>
c001433d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014347:	e9 a9 00 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c001434c:	50                   	push   eax
c001434d:	50                   	push   eax
c001434e:	68 30 16 02 c0       	push   0xc0021630
c0014353:	57                   	push   edi
c0014354:	e8 9f c3 fe ff       	call   c00006f8 <strcmp>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	85 c0                	test   eax,eax
c001435e:	75 0f                	jne    c001436f <CPU::detectFeatures()+0x351>
c0014360:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001436a:	e9 86 00 00 00       	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c001436f:	50                   	push   eax
c0014370:	50                   	push   eax
c0014371:	68 3d 16 02 c0       	push   0xc002163d
c0014376:	57                   	push   edi
c0014377:	e8 7c c3 fe ff       	call   c00006f8 <strcmp>
c001437c:	83 c4 10             	add    esp,0x10
c001437f:	85 c0                	test   eax,eax
c0014381:	75 0c                	jne    c001438f <CPU::detectFeatures()+0x371>
c0014383:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001438d:	eb 66                	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c001438f:	50                   	push   eax
c0014390:	50                   	push   eax
c0014391:	68 4a 16 02 c0       	push   0xc002164a
c0014396:	57                   	push   edi
c0014397:	e8 5c c3 fe ff       	call   c00006f8 <strcmp>
c001439c:	83 c4 10             	add    esp,0x10
c001439f:	85 c0                	test   eax,eax
c00143a1:	75 0c                	jne    c00143af <CPU::detectFeatures()+0x391>
c00143a3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00143ad:	eb 46                	jmp    c00143f5 <CPU::detectFeatures()+0x3d7>
c00143af:	50                   	push   eax
c00143b0:	50                   	push   eax
c00143b1:	68 57 16 02 c0       	push   0xc0021657
c00143b6:	57                   	push   edi
c00143b7:	e8 3c c3 fe ff       	call   c00006f8 <strcmp>
c00143bc:	83 c4 10             	add    esp,0x10
c00143bf:	85 c0                	test   eax,eax
c00143c1:	74 e0                	je     c00143a3 <CPU::detectFeatures()+0x385>
c00143c3:	50                   	push   eax
c00143c4:	50                   	push   eax
c00143c5:	68 64 16 02 c0       	push   0xc0021664
c00143ca:	57                   	push   edi
c00143cb:	e8 28 c3 fe ff       	call   c00006f8 <strcmp>
c00143d0:	83 c4 10             	add    esp,0x10
c00143d3:	85 c0                	test   eax,eax
c00143d5:	74 cc                	je     c00143a3 <CPU::detectFeatures()+0x385>
c00143d7:	51                   	push   ecx
c00143d8:	51                   	push   ecx
c00143d9:	68 71 16 02 c0       	push   0xc0021671
c00143de:	57                   	push   edi
c00143df:	e8 14 c3 fe ff       	call   c00006f8 <strcmp>
c00143e4:	83 c4 10             	add    esp,0x10
c00143e7:	85 c0                	test   eax,eax
c00143e9:	74 b8                	je     c00143a3 <CPU::detectFeatures()+0x385>
c00143eb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00143f5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00143fa:	0f 86 be 00 00 00    	jbe    c00144be <CPU::detectFeatures()+0x4a0>
c0014400:	83 ec 0c             	sub    esp,0xc
c0014403:	68 80 00 00 00       	push   0x80
c0014408:	e8 10 fb ff ff       	call   c0013f1d <cpuidCheckExtendedEBX(unsigned int)>
c001440d:	83 e0 01             	and    eax,0x1
c0014410:	c1 e0 06             	shl    eax,0x6
c0014413:	88 c2                	mov    dl,al
c0014415:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001441b:	83 e0 bf             	and    eax,0xffffffbf
c001441e:	09 d0                	or     eax,edx
c0014420:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014426:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001442d:	e8 eb fa ff ff       	call   c0013f1d <cpuidCheckExtendedEBX(unsigned int)>
c0014432:	83 e0 01             	and    eax,0x1
c0014435:	c1 e0 04             	shl    eax,0x4
c0014438:	88 c2                	mov    dl,al
c001443a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014440:	83 e0 ef             	and    eax,0xffffffef
c0014443:	09 d0                	or     eax,edx
c0014445:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001444b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014452:	e8 c6 fa ff ff       	call   c0013f1d <cpuidCheckExtendedEBX(unsigned int)>
c0014457:	c1 e0 07             	shl    eax,0x7
c001445a:	88 c2                	mov    dl,al
c001445c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014462:	83 e0 7f             	and    eax,0x7f
c0014465:	09 d0                	or     eax,edx
c0014467:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001446d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014474:	e8 d1 fa ff ff       	call   c0013f4a <cpuidCheckExtendedECX(unsigned int)>
c0014479:	83 e0 01             	and    eax,0x1
c001447c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014483:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014489:	83 e0 f7             	and    eax,0xfffffff7
c001448c:	09 d0                	or     eax,edx
c001448e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014494:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001449b:	e8 aa fa ff ff       	call   c0013f4a <cpuidCheckExtendedECX(unsigned int)>
c00144a0:	83 c4 10             	add    esp,0x10
c00144a3:	83 e0 01             	and    eax,0x1
c00144a6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00144ad:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00144b3:	83 e0 fb             	and    eax,0xfffffffb
c00144b6:	09 d0                	or     eax,edx
c00144b8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00144be:	83 ec 0c             	sub    esp,0xc
c00144c1:	56                   	push   esi
c00144c2:	55                   	push   ebp
c00144c3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00144c7:	57                   	push   edi
c00144c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00144cc:	50                   	push   eax
c00144cd:	6a 01                	push   0x1
c00144cf:	e8 6c f9 ff ff       	call   c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00144d4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00144d8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00144de:	88 ca                	mov    dl,cl
c00144e0:	83 e0 f0             	and    eax,0xfffffff0
c00144e3:	83 e2 0f             	and    edx,0xf
c00144e6:	09 d0                	or     eax,edx
c00144e8:	88 ca                	mov    dl,cl
c00144ea:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00144f0:	c0 ea 04             	shr    dl,0x4
c00144f3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00144f7:	0f b6 c2             	movzx  eax,dl
c00144fa:	83 c4 20             	add    esp,0x20
c00144fd:	c1 e0 06             	shl    eax,0x6
c0014500:	89 c5                	mov    ebp,eax
c0014502:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014508:	66 25 3f c0          	and    ax,0xc03f
c001450c:	09 e8                	or     eax,ebp
c001450e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014515:	89 c8                	mov    eax,ecx
c0014517:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001451d:	c1 e8 08             	shr    eax,0x8
c0014520:	83 e2 3f             	and    edx,0x3f
c0014523:	83 e0 0f             	and    eax,0xf
c0014526:	89 c5                	mov    ebp,eax
c0014528:	c1 e5 06             	shl    ebp,0x6
c001452b:	09 d5                	or     ebp,edx
c001452d:	89 ea                	mov    edx,ebp
c001452f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014535:	88 c2                	mov    dl,al
c0014537:	c0 ea 02             	shr    dl,0x2
c001453a:	89 d5                	mov    ebp,edx
c001453c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014542:	83 e2 c0             	and    edx,0xffffffc0
c0014545:	09 d5                	or     ebp,edx
c0014547:	89 ea                	mov    edx,ebp
c0014549:	89 cd                	mov    ebp,ecx
c001454b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014551:	c1 ed 0c             	shr    ebp,0xc
c0014554:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001455a:	83 e5 03             	and    ebp,0x3
c001455d:	83 e2 cf             	and    edx,0xffffffcf
c0014560:	c1 e5 04             	shl    ebp,0x4
c0014563:	09 d5                	or     ebp,edx
c0014565:	3c 06                	cmp    al,0x6
c0014567:	89 ea                	mov    edx,ebp
c0014569:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001456f:	74 04                	je     c0014575 <CPU::detectFeatures()+0x557>
c0014571:	3c 0f                	cmp    al,0xf
c0014573:	75 5c                	jne    c00145d1 <CPU::detectFeatures()+0x5b3>
c0014575:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014579:	89 cd                	mov    ebp,ecx
c001457b:	c1 ed 10             	shr    ebp,0x10
c001457e:	c1 e5 04             	shl    ebp,0x4
c0014581:	09 ea                	or     edx,ebp
c0014583:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014589:	0f b6 d2             	movzx  edx,dl
c001458c:	66 81 e5 3f c0       	and    bp,0xc03f
c0014591:	c1 e2 06             	shl    edx,0x6
c0014594:	09 ea                	or     edx,ebp
c0014596:	3c 0f                	cmp    al,0xf
c0014598:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001459f:	75 30                	jne    c00145d1 <CPU::detectFeatures()+0x5b3>
c00145a1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00145a7:	c1 e9 14             	shr    ecx,0x14
c00145aa:	83 e0 3f             	and    eax,0x3f
c00145ad:	83 c1 0f             	add    ecx,0xf
c00145b0:	88 ca                	mov    dl,cl
c00145b2:	c0 e9 02             	shr    cl,0x2
c00145b5:	c1 e2 06             	shl    edx,0x6
c00145b8:	09 d0                	or     eax,edx
c00145ba:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00145c0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00145c6:	83 e0 c0             	and    eax,0xffffffc0
c00145c9:	09 c1                	or     ecx,eax
c00145cb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00145d1:	83 ec 0c             	sub    esp,0xc
c00145d4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00145db:	56                   	push   esi
c00145dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00145e0:	50                   	push   eax
c00145e1:	57                   	push   edi
c00145e2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00145e6:	55                   	push   ebp
c00145e7:	68 00 00 00 80       	push   0x80000000
c00145ec:	e8 4f f8 ff ff       	call   c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00145f1:	83 c4 20             	add    esp,0x20
c00145f4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00145fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0014600:	76 1e                	jbe    c0014620 <CPU::detectFeatures()+0x602>
c0014602:	83 ec 0c             	sub    esp,0xc
c0014605:	56                   	push   esi
c0014606:	50                   	push   eax
c0014607:	57                   	push   edi
c0014608:	55                   	push   ebp
c0014609:	68 01 00 00 80       	push   0x80000001
c001460e:	e8 2d f8 ff ff       	call   c0013e40 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014613:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001461d:	83 c4 20             	add    esp,0x20
c0014620:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014626:	83 f8 01             	cmp    eax,0x1
c0014629:	75 6f                	jne    c001469a <CPU::detectFeatures()+0x67c>
c001462b:	51                   	push   ecx
c001462c:	51                   	push   ecx
c001462d:	68 7d 16 02 c0       	push   0xc002167d
c0014632:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014636:	56                   	push   esi
c0014637:	e8 6b c0 fe ff       	call   c00006a7 <strcpy>
c001463c:	5f                   	pop    edi
c001463d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014643:	5d                   	pop    ebp
c0014644:	66 c1 e8 06          	shr    ax,0x6
c0014648:	0f b6 c0             	movzx  eax,al
c001464b:	50                   	push   eax
c001464c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014652:	c1 e8 0e             	shr    eax,0xe
c0014655:	0f b6 c0             	movzx  eax,al
c0014658:	50                   	push   eax
c0014659:	e8 8d f4 ff ff       	call   c0013aeb <lookupIntelCPUName(unsigned char, unsigned char)>
c001465e:	5a                   	pop    edx
c001465f:	59                   	pop    ecx
c0014660:	50                   	push   eax
c0014661:	56                   	push   esi
c0014662:	e8 f7 c0 fe ff       	call   c000075e <strcat>
c0014667:	5f                   	pop    edi
c0014668:	5d                   	pop    ebp
c0014669:	56                   	push   esi
c001466a:	53                   	push   ebx
c001466b:	e8 68 bf ff ff       	call   c00105d8 <Device::setName(char const*)>
c0014670:	58                   	pop    eax
c0014671:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014677:	5a                   	pop    edx
c0014678:	68 84 16 02 c0       	push   0xc0021684
c001467d:	50                   	push   eax
c001467e:	e8 75 c0 fe ff       	call   c00006f8 <strcmp>
c0014683:	83 c4 10             	add    esp,0x10
c0014686:	85 c0                	test   eax,eax
c0014688:	0f 85 73 03 00 00    	jne    c0014a01 <CPU::detectFeatures()+0x9e3>
c001468e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014695:	e9 67 03 00 00       	jmp    c0014a01 <CPU::detectFeatures()+0x9e3>
c001469a:	83 f8 02             	cmp    eax,0x2
c001469d:	0f 85 b5 00 00 00    	jne    c0014758 <CPU::detectFeatures()+0x73a>
c00146a3:	57                   	push   edi
c00146a4:	57                   	push   edi
c00146a5:	68 96 16 02 c0       	push   0xc0021696
c00146aa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00146ae:	56                   	push   esi
c00146af:	e8 f3 bf fe ff       	call   c00006a7 <strcpy>
c00146b4:	5d                   	pop    ebp
c00146b5:	58                   	pop    eax
c00146b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146bc:	66 c1 e8 06          	shr    ax,0x6
c00146c0:	0f b6 c0             	movzx  eax,al
c00146c3:	50                   	push   eax
c00146c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146ca:	c1 e8 0e             	shr    eax,0xe
c00146cd:	0f b6 c0             	movzx  eax,al
c00146d0:	50                   	push   eax
c00146d1:	e8 81 f2 ff ff       	call   c0013957 <lookupAMDCPUName(unsigned char, unsigned char)>
c00146d6:	5a                   	pop    edx
c00146d7:	59                   	pop    ecx
c00146d8:	50                   	push   eax
c00146d9:	56                   	push   esi
c00146da:	e8 7f c0 fe ff       	call   c000075e <strcat>
c00146df:	5f                   	pop    edi
c00146e0:	5d                   	pop    ebp
c00146e1:	56                   	push   esi
c00146e2:	53                   	push   ebx
c00146e3:	e8 f0 be ff ff       	call   c00105d8 <Device::setName(char const*)>
c00146e8:	58                   	pop    eax
c00146e9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00146ef:	5a                   	pop    edx
c00146f0:	68 9b 16 02 c0       	push   0xc002169b
c00146f5:	50                   	push   eax
c00146f6:	e8 fd bf fe ff       	call   c00006f8 <strcmp>
c00146fb:	83 c4 10             	add    esp,0x10
c00146fe:	85 c0                	test   eax,eax
c0014700:	75 20                	jne    c0014722 <CPU::detectFeatures()+0x704>
c0014702:	8b 15 28 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023728
c0014708:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001470e:	a8 01                	test   al,0x1
c0014710:	74 10                	je     c0014722 <CPU::detectFeatures()+0x704>
c0014712:	83 e0 fe             	and    eax,0xfffffffe
c0014715:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001471b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014722:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014728:	c1 e8 0e             	shr    eax,0xe
c001472b:	3c 05                	cmp    al,0x5
c001472d:	0f 85 ce 02 00 00    	jne    c0014a01 <CPU::detectFeatures()+0x9e3>
c0014733:	56                   	push   esi
c0014734:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001473a:	83 e0 0f             	and    eax,0xf
c001473d:	50                   	push   eax
c001473e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014744:	66 c1 e8 06          	shr    ax,0x6
c0014748:	0f b6 c0             	movzx  eax,al
c001474b:	50                   	push   eax
c001474c:	6a 05                	push   0x5
c001474e:	e8 7a f6 ff ff       	call   c0013dcd <AMD_K6_writeback(int, int, int)>
c0014753:	e9 1f 02 00 00       	jmp    c0014977 <CPU::detectFeatures()+0x959>
c0014758:	8d 50 fd             	lea    edx,[eax-0x3]
c001475b:	83 fa 01             	cmp    edx,0x1
c001475e:	76 09                	jbe    c0014769 <CPU::detectFeatures()+0x74b>
c0014760:	83 f8 06             	cmp    eax,0x6
c0014763:	0f 85 91 01 00 00    	jne    c00148fa <CPU::detectFeatures()+0x8dc>
c0014769:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001476f:	c1 ea 0e             	shr    edx,0xe
c0014772:	80 fa 05             	cmp    dl,0x5
c0014775:	75 7b                	jne    c00147f2 <CPU::detectFeatures()+0x7d4>
c0014777:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001477d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014782:	66 81 fa 00 01       	cmp    dx,0x100
c0014787:	75 0c                	jne    c0014795 <CPU::detectFeatures()+0x777>
c0014789:	51                   	push   ecx
c001478a:	51                   	push   ecx
c001478b:	68 a2 16 02 c0       	push   0xc00216a2
c0014790:	e9 dc 01 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014795:	66 81 fa 00 02       	cmp    dx,0x200
c001479a:	75 0c                	jne    c00147a8 <CPU::detectFeatures()+0x78a>
c001479c:	52                   	push   edx
c001479d:	52                   	push   edx
c001479e:	68 b5 16 02 c0       	push   0xc00216b5
c00147a3:	e9 c9 01 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c00147a8:	66 81 fa 40 02       	cmp    dx,0x240
c00147ad:	75 0c                	jne    c00147bb <CPU::detectFeatures()+0x79d>
c00147af:	50                   	push   eax
c00147b0:	50                   	push   eax
c00147b1:	68 c7 16 02 c0       	push   0xc00216c7
c00147b6:	e9 b6 01 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c00147bb:	83 f8 06             	cmp    eax,0x6
c00147be:	75 0c                	jne    c00147cc <CPU::detectFeatures()+0x7ae>
c00147c0:	50                   	push   eax
c00147c1:	50                   	push   eax
c00147c2:	68 d9 16 02 c0       	push   0xc00216d9
c00147c7:	e9 a5 01 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c00147cc:	83 f8 04             	cmp    eax,0x4
c00147cf:	75 0c                	jne    c00147dd <CPU::detectFeatures()+0x7bf>
c00147d1:	50                   	push   eax
c00147d2:	50                   	push   eax
c00147d3:	68 e5 16 02 c0       	push   0xc00216e5
c00147d8:	e9 94 01 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c00147dd:	83 f8 03             	cmp    eax,0x3
c00147e0:	0f 85 1b 02 00 00    	jne    c0014a01 <CPU::detectFeatures()+0x9e3>
c00147e6:	50                   	push   eax
c00147e7:	50                   	push   eax
c00147e8:	68 ed 16 02 c0       	push   0xc00216ed
c00147ed:	e9 7f 01 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c00147f2:	80 fa 06             	cmp    dl,0x6
c00147f5:	0f 85 db 00 00 00    	jne    c00148d6 <CPU::detectFeatures()+0x8b8>
c00147fb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014801:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014806:	66 81 fa 80 01       	cmp    dx,0x180
c001480b:	75 0c                	jne    c0014819 <CPU::detectFeatures()+0x7fb>
c001480d:	50                   	push   eax
c001480e:	50                   	push   eax
c001480f:	68 f8 16 02 c0       	push   0xc00216f8
c0014814:	e9 58 01 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014819:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001481f:	66 f7 c1 80 ff       	test   cx,0xff80
c0014824:	75 0c                	jne    c0014832 <CPU::detectFeatures()+0x814>
c0014826:	50                   	push   eax
c0014827:	50                   	push   eax
c0014828:	68 08 17 02 c0       	push   0xc0021708
c001482d:	e9 3f 01 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014832:	66 81 fa 40 02       	cmp    dx,0x240
c0014837:	75 0c                	jne    c0014845 <CPU::detectFeatures()+0x827>
c0014839:	55                   	push   ebp
c001483a:	55                   	push   ebp
c001483b:	68 0f 17 02 c0       	push   0xc002170f
c0014840:	e9 2c 01 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014845:	66 81 fa 80 02       	cmp    dx,0x280
c001484a:	75 0c                	jne    c0014858 <CPU::detectFeatures()+0x83a>
c001484c:	57                   	push   edi
c001484d:	57                   	push   edi
c001484e:	68 18 17 02 c0       	push   0xc0021718
c0014853:	e9 19 01 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014858:	66 81 fa 40 03       	cmp    dx,0x340
c001485d:	74 ed                	je     c001484c <CPU::detectFeatures()+0x82e>
c001485f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014864:	75 0c                	jne    c0014872 <CPU::detectFeatures()+0x854>
c0014866:	56                   	push   esi
c0014867:	56                   	push   esi
c0014868:	68 1f 17 02 c0       	push   0xc002171f
c001486d:	e9 ff 00 00 00       	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014872:	83 f8 06             	cmp    eax,0x6
c0014875:	0f 84 45 ff ff ff    	je     c00147c0 <CPU::detectFeatures()+0x7a2>
c001487b:	83 f8 04             	cmp    eax,0x4
c001487e:	0f 84 4d ff ff ff    	je     c00147d1 <CPU::detectFeatures()+0x7b3>
c0014884:	83 f8 03             	cmp    eax,0x3
c0014887:	0f 85 74 01 00 00    	jne    c0014a01 <CPU::detectFeatures()+0x9e3>
c001488d:	51                   	push   ecx
c001488e:	51                   	push   ecx
c001488f:	68 28 17 02 c0       	push   0xc0021728
c0014894:	53                   	push   ebx
c0014895:	e8 3e bd ff ff       	call   c00105d8 <Device::setName(char const*)>
c001489a:	b1 c1                	mov    cl,0xc1
c001489c:	88 c8                	mov    al,cl
c001489e:	e6 22                	out    0x22,al
c00148a0:	e4 23                	in     al,0x23
c00148a2:	88 c2                	mov    dl,al
c00148a4:	88 c8                	mov    al,cl
c00148a6:	e6 22                	out    0x22,al
c00148a8:	88 d0                	mov    al,dl
c00148aa:	83 c8 10             	or     eax,0x10
c00148ad:	e6 23                	out    0x23,al
c00148af:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00148b6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00148b9:	89 d0                	mov    eax,edx
c00148bb:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00148c1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00148c5:	40                   	inc    eax
c00148c6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00148cc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00148d1:	e9 a1 00 00 00       	jmp    c0014977 <CPU::detectFeatures()+0x959>
c00148d6:	83 f8 06             	cmp    eax,0x6
c00148d9:	0f 84 e1 fe ff ff    	je     c00147c0 <CPU::detectFeatures()+0x7a2>
c00148df:	83 f8 04             	cmp    eax,0x4
c00148e2:	0f 84 e9 fe ff ff    	je     c00147d1 <CPU::detectFeatures()+0x7b3>
c00148e8:	83 f8 03             	cmp    eax,0x3
c00148eb:	0f 85 10 01 00 00    	jne    c0014a01 <CPU::detectFeatures()+0x9e3>
c00148f1:	52                   	push   edx
c00148f2:	52                   	push   edx
c00148f3:	68 33 17 02 c0       	push   0xc0021733
c00148f8:	eb 77                	jmp    c0014971 <CPU::detectFeatures()+0x953>
c00148fa:	83 f8 07             	cmp    eax,0x7
c00148fd:	75 09                	jne    c0014908 <CPU::detectFeatures()+0x8ea>
c00148ff:	50                   	push   eax
c0014900:	50                   	push   eax
c0014901:	68 3d 17 02 c0       	push   0xc002173d
c0014906:	eb 69                	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014908:	83 f8 0a             	cmp    eax,0xa
c001490b:	75 09                	jne    c0014916 <CPU::detectFeatures()+0x8f8>
c001490d:	50                   	push   eax
c001490e:	50                   	push   eax
c001490f:	68 48 17 02 c0       	push   0xc0021748
c0014914:	eb 5b                	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014916:	83 f8 0b             	cmp    eax,0xb
c0014919:	75 09                	jne    c0014924 <CPU::detectFeatures()+0x906>
c001491b:	50                   	push   eax
c001491c:	50                   	push   eax
c001491d:	68 50 17 02 c0       	push   0xc0021750
c0014922:	eb 4d                	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014924:	83 f8 08             	cmp    eax,0x8
c0014927:	75 09                	jne    c0014932 <CPU::detectFeatures()+0x914>
c0014929:	50                   	push   eax
c001492a:	50                   	push   eax
c001492b:	68 59 17 02 c0       	push   0xc0021759
c0014930:	eb 3f                	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014932:	83 f8 09             	cmp    eax,0x9
c0014935:	75 09                	jne    c0014940 <CPU::detectFeatures()+0x922>
c0014937:	50                   	push   eax
c0014938:	50                   	push   eax
c0014939:	68 61 17 02 c0       	push   0xc0021761
c001493e:	eb 31                	jmp    c0014971 <CPU::detectFeatures()+0x953>
c0014940:	83 f8 05             	cmp    eax,0x5
c0014943:	75 09                	jne    c001494e <CPU::detectFeatures()+0x930>
c0014945:	50                   	push   eax
c0014946:	50                   	push   eax
c0014947:	68 69 17 02 c0       	push   0xc0021769
c001494c:	eb 23                	jmp    c0014971 <CPU::detectFeatures()+0x953>
c001494e:	83 f8 0c             	cmp    eax,0xc
c0014951:	75 09                	jne    c001495c <CPU::detectFeatures()+0x93e>
c0014953:	55                   	push   ebp
c0014954:	55                   	push   ebp
c0014955:	68 77 17 02 c0       	push   0xc0021777
c001495a:	eb 15                	jmp    c0014971 <CPU::detectFeatures()+0x953>
c001495c:	83 f8 0d             	cmp    eax,0xd
c001495f:	75 09                	jne    c001496a <CPU::detectFeatures()+0x94c>
c0014961:	57                   	push   edi
c0014962:	57                   	push   edi
c0014963:	68 82 17 02 c0       	push   0xc0021782
c0014968:	eb 07                	jmp    c0014971 <CPU::detectFeatures()+0x953>
c001496a:	56                   	push   esi
c001496b:	56                   	push   esi
c001496c:	68 96 17 02 c0       	push   0xc0021796
c0014971:	53                   	push   ebx
c0014972:	e8 61 bc ff ff       	call   c00105d8 <Device::setName(char const*)>
c0014977:	83 c4 10             	add    esp,0x10
c001497a:	e9 82 00 00 00       	jmp    c0014a01 <CPU::detectFeatures()+0x9e3>
c001497f:	51                   	push   ecx
c0014980:	51                   	push   ecx
c0014981:	68 e2 15 02 c0       	push   0xc00215e2
c0014986:	57                   	push   edi
c0014987:	e8 1b bd fe ff       	call   c00006a7 <strcpy>
c001498c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014996:	e8 e4 b7 fe ff       	call   c000017f <is486>
c001499b:	83 c4 10             	add    esp,0x10
c001499e:	85 c0                	test   eax,eax
c00149a0:	74 2d                	je     c00149cf <CPU::detectFeatures()+0x9b1>
c00149a2:	52                   	push   edx
c00149a3:	52                   	push   edx
c00149a4:	68 a2 17 02 c0       	push   0xc00217a2
c00149a9:	53                   	push   ebx
c00149aa:	e8 29 bc ff ff       	call   c00105d8 <Device::setName(char const*)>
c00149af:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00149b6:	e8 dd a3 00 00       	call   c001ed98 <CPU::readCR0()>
c00149bb:	83 c4 10             	add    esp,0x10
c00149be:	83 e0 14             	and    eax,0x14
c00149c1:	83 f8 04             	cmp    eax,0x4
c00149c4:	75 1f                	jne    c00149e5 <CPU::detectFeatures()+0x9c7>
c00149c6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00149cd:	eb 32                	jmp    c0014a01 <CPU::detectFeatures()+0x9e3>
c00149cf:	50                   	push   eax
c00149d0:	50                   	push   eax
c00149d1:	68 ad 17 02 c0       	push   0xc00217ad
c00149d6:	53                   	push   ebx
c00149d7:	e8 fc bb ff ff       	call   c00105d8 <Device::setName(char const*)>
c00149dc:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00149e3:	eb d1                	jmp    c00149b6 <CPU::detectFeatures()+0x998>
c00149e5:	e8 70 b7 fe ff       	call   c000015a <hasLegacyFPU>
c00149ea:	83 e0 01             	and    eax,0x1
c00149ed:	8d 14 00             	lea    edx,[eax+eax*1]
c00149f0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00149f6:	83 e0 fd             	and    eax,0xfffffffd
c00149f9:	09 d0                	or     eax,edx
c00149fb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014a01:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014a08:	83 c4 4c             	add    esp,0x4c
c0014a0b:	5b                   	pop    ebx
c0014a0c:	5e                   	pop    esi
c0014a0d:	5f                   	pop    edi
c0014a0e:	5d                   	pop    ebp
c0014a0f:	c3                   	ret    

c0014a10 <CPU::setupSMEP()>:
c0014a10:	83 ec 0c             	sub    esp,0xc
c0014a13:	e8 4a a6 00 00       	call   c001f062 <CPU::readCR4()>
c0014a18:	0d 00 00 10 00       	or     eax,0x100000
c0014a1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a21:	83 c4 0c             	add    esp,0xc
c0014a24:	e9 54 a6 00 00       	jmp    c001f07d <CPU::writeCR4(unsigned long)>
c0014a29:	90                   	nop

c0014a2a <CPU::setupUMIP()>:
c0014a2a:	83 ec 0c             	sub    esp,0xc
c0014a2d:	e8 30 a6 00 00       	call   c001f062 <CPU::readCR4()>
c0014a32:	80 cc 08             	or     ah,0x8
c0014a35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a39:	83 c4 0c             	add    esp,0xc
c0014a3c:	e9 3c a6 00 00       	jmp    c001f07d <CPU::writeCR4(unsigned long)>
c0014a41:	90                   	nop

c0014a42 <CPU::setupTSC()>:
c0014a42:	83 ec 0c             	sub    esp,0xc
c0014a45:	e8 18 a6 00 00       	call   c001f062 <CPU::readCR4()>
c0014a4a:	83 c8 04             	or     eax,0x4
c0014a4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a51:	83 c4 0c             	add    esp,0xc
c0014a54:	e9 24 a6 00 00       	jmp    c001f07d <CPU::writeCR4(unsigned long)>
c0014a59:	90                   	nop

c0014a5a <CPU::setupLargePages()>:
c0014a5a:	83 ec 0c             	sub    esp,0xc
c0014a5d:	e8 00 a6 00 00       	call   c001f062 <CPU::readCR4()>
c0014a62:	83 c8 10             	or     eax,0x10
c0014a65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a69:	83 c4 0c             	add    esp,0xc
c0014a6c:	e9 0c a6 00 00       	jmp    c001f07d <CPU::writeCR4(unsigned long)>
c0014a71:	90                   	nop

c0014a72 <CPU::setupPAT()>:
c0014a72:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0014a77:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014a7e:	74 2c                	je     c0014aac <CPU::setupPAT()+0x3a>
c0014a80:	53                   	push   ebx
c0014a81:	83 ec 10             	sub    esp,0x10
c0014a84:	68 77 02 00 00       	push   0x277
c0014a89:	50                   	push   eax
c0014a8a:	e8 37 67 ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c0014a8f:	83 e2 f8             	and    edx,0xfffffff8
c0014a92:	83 ca 01             	or     edx,0x1
c0014a95:	52                   	push   edx
c0014a96:	50                   	push   eax
c0014a97:	68 77 02 00 00       	push   0x277
c0014a9c:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c0014aa2:	e8 4b 67 ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014aa7:	83 c4 28             	add    esp,0x28
c0014aaa:	5b                   	pop    ebx
c0014aab:	c3                   	ret    
c0014aac:	c3                   	ret    
c0014aad:	90                   	nop

c0014aae <CPU::setupMTRR()>:
c0014aae:	c3                   	ret    
c0014aaf:	90                   	nop

c0014ab0 <CPU::setupGlobalPages()>:
c0014ab0:	83 ec 0c             	sub    esp,0xc
c0014ab3:	e8 aa a5 00 00       	call   c001f062 <CPU::readCR4()>
c0014ab8:	0c 80                	or     al,0x80
c0014aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014abe:	83 c4 0c             	add    esp,0xc
c0014ac1:	e9 b7 a5 00 00       	jmp    c001f07d <CPU::writeCR4(unsigned long)>

c0014ac6 <CPU::allowUsermodeDataAccess()>:
c0014ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014aca:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014ad1:	74 03                	je     c0014ad6 <CPU::allowUsermodeDataAccess()+0x10>
c0014ad3:	0f 01 cb             	stac   
c0014ad6:	c3                   	ret    
c0014ad7:	90                   	nop

c0014ad8 <CPU::prohibitUsermodeDataAccess()>:
c0014ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014adc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014ae3:	74 03                	je     c0014ae8 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014ae5:	0f 01 ca             	clac   
c0014ae8:	c3                   	ret    
c0014ae9:	90                   	nop

c0014aea <CPU::setupSMAP()>:
c0014aea:	53                   	push   ebx
c0014aeb:	83 ec 08             	sub    esp,0x8
c0014aee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014af2:	e8 6b a5 00 00       	call   c001f062 <CPU::readCR4()>
c0014af7:	83 ec 0c             	sub    esp,0xc
c0014afa:	0d 00 00 20 00       	or     eax,0x200000
c0014aff:	50                   	push   eax
c0014b00:	e8 78 a5 00 00       	call   c001f07d <CPU::writeCR4(unsigned long)>
c0014b05:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014b09:	83 c4 18             	add    esp,0x18
c0014b0c:	5b                   	pop    ebx
c0014b0d:	eb c9                	jmp    c0014ad8 <CPU::prohibitUsermodeDataAccess()>
c0014b0f:	90                   	nop

c0014b10 <CPU::setupFeatures()>:
c0014b10:	53                   	push   ebx
c0014b11:	83 ec 08             	sub    esp,0x8
c0014b14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b18:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014b1f:	74 0c                	je     c0014b2d <CPU::setupFeatures()+0x1d>
c0014b21:	83 ec 0c             	sub    esp,0xc
c0014b24:	53                   	push   ebx
c0014b25:	e8 e6 fe ff ff       	call   c0014a10 <CPU::setupSMEP()>
c0014b2a:	83 c4 10             	add    esp,0x10
c0014b2d:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b34:	74 0c                	je     c0014b42 <CPU::setupFeatures()+0x32>
c0014b36:	83 ec 0c             	sub    esp,0xc
c0014b39:	53                   	push   ebx
c0014b3a:	e8 ab ff ff ff       	call   c0014aea <CPU::setupSMAP()>
c0014b3f:	83 c4 10             	add    esp,0x10
c0014b42:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b49:	74 0c                	je     c0014b57 <CPU::setupFeatures()+0x47>
c0014b4b:	83 ec 0c             	sub    esp,0xc
c0014b4e:	53                   	push   ebx
c0014b4f:	e8 d6 fe ff ff       	call   c0014a2a <CPU::setupUMIP()>
c0014b54:	83 c4 10             	add    esp,0x10
c0014b57:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014b5e:	74 0c                	je     c0014b6c <CPU::setupFeatures()+0x5c>
c0014b60:	83 ec 0c             	sub    esp,0xc
c0014b63:	53                   	push   ebx
c0014b64:	e8 d9 fe ff ff       	call   c0014a42 <CPU::setupTSC()>
c0014b69:	83 c4 10             	add    esp,0x10
c0014b6c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014b73:	74 0c                	je     c0014b81 <CPU::setupFeatures()+0x71>
c0014b75:	83 ec 0c             	sub    esp,0xc
c0014b78:	53                   	push   ebx
c0014b79:	e8 dc fe ff ff       	call   c0014a5a <CPU::setupLargePages()>
c0014b7e:	83 c4 10             	add    esp,0x10
c0014b81:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014b88:	74 0c                	je     c0014b96 <CPU::setupFeatures()+0x86>
c0014b8a:	83 ec 0c             	sub    esp,0xc
c0014b8d:	53                   	push   ebx
c0014b8e:	e8 1d ff ff ff       	call   c0014ab0 <CPU::setupGlobalPages()>
c0014b93:	83 c4 10             	add    esp,0x10
c0014b96:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014b9d:	74 0d                	je     c0014bac <CPU::setupFeatures()+0x9c>
c0014b9f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014ba3:	83 c4 08             	add    esp,0x8
c0014ba6:	5b                   	pop    ebx
c0014ba7:	e9 c6 fe ff ff       	jmp    c0014a72 <CPU::setupPAT()>
c0014bac:	83 c4 08             	add    esp,0x8
c0014baf:	5b                   	pop    ebx
c0014bb0:	c3                   	ret    
c0014bb1:	90                   	nop

c0014bb2 <CPU::open(int, int, void*)>:
c0014bb2:	57                   	push   edi
c0014bb3:	56                   	push   esi
c0014bb4:	53                   	push   ebx
c0014bb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014bb9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014bbd:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014bc3:	83 ec 0c             	sub    esp,0xc
c0014bc6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014bcc:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014bd2:	50                   	push   eax
c0014bd3:	e8 d2 68 ff ff       	call   c000b4aa <GDT::setup()>
c0014bd8:	83 c4 0c             	add    esp,0xc
c0014bdb:	6a 00                	push   0x0
c0014bdd:	68 ef be ad de       	push   0xdeadbeef
c0014be2:	57                   	push   edi
c0014be3:	e8 a4 8a ff ff       	call   c000d68c <TSS::setup(unsigned long, unsigned long)>
c0014be8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014beb:	e8 7c 8a ff ff       	call   c000d66c <TSS::flush()>
c0014bf0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014bf6:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bf9:	e8 06 6b ff ff       	call   c000b704 <IDT::setup()>
c0014bfe:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014c05:	e8 6a a4 00 00       	call   c001f074 <CPU::writeDR7(unsigned long)>
c0014c0a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014c14:	e8 af 75 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0014c19:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014c1f:	89 30                	mov    DWORD PTR [eax],esi
c0014c21:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014c27:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014c2a:	58                   	pop    eax
c0014c2b:	5a                   	pop    edx
c0014c2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014c32:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c36:	e8 37 9a ff ff       	call   c000e672 <VAS::setCPUSpecific(unsigned long)>
c0014c3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c3e:	e8 db f3 ff ff       	call   c001401e <CPU::detectFeatures()>
c0014c43:	e8 9a c7 ff ff       	call   c00113e2 <setupInterruptController()>
c0014c48:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014c4e:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c0014c53:	83 e0 10             	and    eax,0x10
c0014c56:	83 f8 01             	cmp    eax,0x1
c0014c59:	19 c0                	sbb    eax,eax
c0014c5b:	83 e0 46             	and    eax,0x46
c0014c5e:	83 c0 1e             	add    eax,0x1e
c0014c61:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c64:	e8 61 d9 ff ff       	call   c00125ca <setupTimer(int)>
c0014c69:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014c6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c72:	e8 99 fe ff ff       	call   c0014b10 <CPU::setupFeatures()>
c0014c77:	83 c4 10             	add    esp,0x10
c0014c7a:	31 c0                	xor    eax,eax
c0014c7c:	5b                   	pop    ebx
c0014c7d:	5e                   	pop    esi
c0014c7e:	5f                   	pop    edi
c0014c7f:	c3                   	ret    

c0014c80 <Krnl::panic(char const*)>:
c0014c80:	55                   	push   ebp
c0014c81:	89 e5                	mov    ebp,esp
c0014c83:	53                   	push   ebx
c0014c84:	83 ec 0c             	sub    esp,0xc
c0014c87:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014c8a:	fa                   	cli    
c0014c8b:	c6 05 70 41 02 c0 01 	mov    BYTE PTR ds:0xc0024170,0x1
c0014c92:	53                   	push   ebx
c0014c93:	c6 05 60 2b 02 c0 00 	mov    BYTE PTR ds:0xc0022b60,0x0
c0014c9a:	68 e4 17 02 c0       	push   0xc00217e4
c0014c9f:	e8 47 a3 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0014ca4:	58                   	pop    eax
c0014ca5:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014caa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cb0:	e8 18 82 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0014cb5:	83 c4 0c             	add    esp,0xc
c0014cb8:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014cbd:	6a 01                	push   0x1
c0014cbf:	6a 0f                	push   0xf
c0014cc1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cc7:	e8 40 7c ff ff       	call   c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014ccc:	5a                   	pop    edx
c0014ccd:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014cd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd8:	e8 91 84 ff ff       	call   c000d16e <VgaText::clearScreen()>
c0014cdd:	59                   	pop    ecx
c0014cde:	58                   	pop    eax
c0014cdf:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014ce4:	68 fd 17 02 c0       	push   0xc00217fd
c0014ce9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cef:	e8 f8 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014cf4:	58                   	pop    eax
c0014cf5:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014cfa:	5a                   	pop    edx
c0014cfb:	68 9c 18 02 c0       	push   0xc002189c
c0014d00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d06:	e8 e1 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d0b:	59                   	pop    ecx
c0014d0c:	58                   	pop    eax
c0014d0d:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014d12:	68 19 18 02 c0       	push   0xc0021819
c0014d17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d1d:	e8 ca 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d22:	58                   	pop    eax
c0014d23:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014d28:	5a                   	pop    edx
c0014d29:	53                   	push   ebx
c0014d2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d30:	e8 b7 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d35:	59                   	pop    ecx
c0014d36:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014d3b:	5b                   	pop    ebx
c0014d3c:	68 39 18 02 c0       	push   0xc0021839
c0014d41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d47:	e8 a0 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d4c:	58                   	pop    eax
c0014d4d:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014d52:	5a                   	pop    edx
c0014d53:	68 d8 18 02 c0       	push   0xc00218d8
c0014d58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d5e:	e8 89 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d63:	59                   	pop    ecx
c0014d64:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014d69:	5b                   	pop    ebx
c0014d6a:	68 19 18 02 c0       	push   0xc0021819
c0014d6f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d75:	e8 72 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d7a:	58                   	pop    eax
c0014d7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d80:	5a                   	pop    edx
c0014d81:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d84:	83 c0 0c             	add    eax,0xc
c0014d87:	50                   	push   eax
c0014d88:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014d8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d93:	e8 54 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d98:	59                   	pop    ecx
c0014d99:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014d9e:	5b                   	pop    ebx
c0014d9f:	68 38 18 02 c0       	push   0xc0021838
c0014da4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014daa:	e8 3d 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014daf:	58                   	pop    eax
c0014db0:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014db5:	5a                   	pop    edx
c0014db6:	68 04 19 02 c0       	push   0xc0021904
c0014dbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc1:	e8 26 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014dc6:	59                   	pop    ecx
c0014dc7:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014dcc:	5b                   	pop    ebx
c0014dcd:	68 44 19 02 c0       	push   0xc0021944
c0014dd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dd8:	e8 0f 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ddd:	58                   	pop    eax
c0014dde:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014de3:	5a                   	pop    edx
c0014de4:	68 24 18 02 c0       	push   0xc0021824
c0014de9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014def:	e8 f8 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014df4:	59                   	pop    ecx
c0014df5:	5b                   	pop    ebx
c0014df6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014df9:	68 3c 18 02 c0       	push   0xc002183c
c0014dfe:	e8 e8 a1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0014e03:	58                   	pop    eax
c0014e04:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e07:	5a                   	pop    edx
c0014e08:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014e0b:	68 45 18 02 c0       	push   0xc0021845
c0014e10:	e8 d6 a1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0014e15:	59                   	pop    ecx
c0014e16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e19:	5b                   	pop    ebx
c0014e1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014e1f:	68 5d 10 02 c0       	push   0xc002105d
c0014e24:	e8 c2 a1 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0014e29:	58                   	pop    eax
c0014e2a:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014e2f:	5a                   	pop    edx
c0014e30:	68 88 19 02 c0       	push   0xc0021988
c0014e35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e3b:	e8 ac 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e40:	59                   	pop    ecx
c0014e41:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014e46:	5b                   	pop    ebx
c0014e47:	68 4e 18 02 c0       	push   0xc002184e
c0014e4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e52:	e8 95 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e57:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014e5c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014e62:	e8 31 9f 00 00       	call   c001ed98 <CPU::readCR0()>
c0014e67:	5a                   	pop    edx
c0014e68:	59                   	pop    ecx
c0014e69:	50                   	push   eax
c0014e6a:	53                   	push   ebx
c0014e6b:	e8 a2 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014e70:	5b                   	pop    ebx
c0014e71:	58                   	pop    eax
c0014e72:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014e77:	68 58 18 02 c0       	push   0xc0021858
c0014e7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e82:	e8 65 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e87:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014e8c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014e92:	e8 ef a1 00 00       	call   c001f086 <CPU::readCR2()>
c0014e97:	5a                   	pop    edx
c0014e98:	59                   	pop    ecx
c0014e99:	50                   	push   eax
c0014e9a:	53                   	push   ebx
c0014e9b:	e8 72 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014ea0:	5b                   	pop    ebx
c0014ea1:	58                   	pop    eax
c0014ea2:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014ea7:	68 62 18 02 c0       	push   0xc0021862
c0014eac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb2:	e8 35 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014eb7:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014ebc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014ec2:	e8 5e 9b 00 00       	call   c001ea25 <CPU::readCR3()>
c0014ec7:	5a                   	pop    edx
c0014ec8:	59                   	pop    ecx
c0014ec9:	50                   	push   eax
c0014eca:	53                   	push   ebx
c0014ecb:	e8 42 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014ed0:	5b                   	pop    ebx
c0014ed1:	58                   	pop    eax
c0014ed2:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014ed7:	68 75 18 02 c0       	push   0xc0021875
c0014edc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee2:	e8 05 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ee7:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014eec:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014ef2:	e8 6b a1 00 00       	call   c001f062 <CPU::readCR4()>
c0014ef7:	5a                   	pop    edx
c0014ef8:	59                   	pop    ecx
c0014ef9:	50                   	push   eax
c0014efa:	53                   	push   ebx
c0014efb:	e8 12 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014f00:	5b                   	pop    ebx
c0014f01:	58                   	pop    eax
c0014f02:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014f07:	68 7f 18 02 c0       	push   0xc002187f
c0014f0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f12:	e8 d5 83 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014f17:	5a                   	pop    edx
c0014f18:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014f1d:	59                   	pop    ecx
c0014f1e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f24:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014f27:	50                   	push   eax
c0014f28:	e8 e5 83 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014f2d:	5b                   	pop    ebx
c0014f2e:	58                   	pop    eax
c0014f2f:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014f34:	68 96 18 02 c0       	push   0xc0021896
c0014f39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3f:	e8 a8 83 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014f44:	5a                   	pop    edx
c0014f45:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014f4a:	59                   	pop    ecx
c0014f4b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f51:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f54:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014f57:	50                   	push   eax
c0014f58:	e8 b5 83 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014f5d:	5b                   	pop    ebx
c0014f5e:	58                   	pop    eax
c0014f5f:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014f64:	68 96 18 02 c0       	push   0xc0021896
c0014f69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6f:	e8 78 83 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014f74:	59                   	pop    ecx
c0014f75:	a1 74 4b 02 c0       	mov    eax,ds:0xc0024b74
c0014f7a:	5b                   	pop    ebx
c0014f7b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f81:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f84:	8b 12                	mov    edx,DWORD PTR [edx]
c0014f86:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014f89:	50                   	push   eax
c0014f8a:	e8 83 83 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014f8f:	83 c4 10             	add    esp,0x10
c0014f92:	b2 fe                	mov    dl,0xfe
c0014f94:	e4 60                	in     al,0x60
c0014f96:	3c 1c                	cmp    al,0x1c
c0014f98:	74 04                	je     c0014f9e <Krnl::panic(char const*)+0x31e>
c0014f9a:	3c 5a                	cmp    al,0x5a
c0014f9c:	75 f6                	jne    c0014f94 <Krnl::panic(char const*)+0x314>
c0014f9e:	e4 64                	in     al,0x64
c0014fa0:	a8 02                	test   al,0x2
c0014fa2:	75 fa                	jne    c0014f9e <Krnl::panic(char const*)+0x31e>
c0014fa4:	88 d0                	mov    al,dl
c0014fa6:	e6 64                	out    0x64,al
c0014fa8:	fa                   	cli    
c0014fa9:	f4                   	hlt    
c0014faa:	eb e8                	jmp    c0014f94 <Krnl::panic(char const*)+0x314>

c0014fac <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014fac:	55                   	push   ebp
c0014fad:	57                   	push   edi
c0014fae:	56                   	push   esi
c0014faf:	53                   	push   ebx
c0014fb0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014fb6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014fbd:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014fbf:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014fc2:	80 fb 40             	cmp    bl,0x40
c0014fc5:	75 1b                	jne    c0014fe2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014fc7:	8a 16                	mov    dl,BYTE PTR [esi]
c0014fc9:	84 d2                	test   dl,dl
c0014fcb:	0f 84 f1 00 00 00    	je     c00150c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014fd1:	8d 46 01             	lea    eax,[esi+0x1]
c0014fd4:	80 fa 3a             	cmp    dl,0x3a
c0014fd7:	74 04                	je     c0014fdd <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014fd9:	89 c6                	mov    esi,eax
c0014fdb:	eb ea                	jmp    c0014fc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014fdd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014fe0:	89 c6                	mov    esi,eax
c0014fe2:	50                   	push   eax
c0014fe3:	6a 40                	push   0x40
c0014fe5:	6a 00                	push   0x0
c0014fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014feb:	50                   	push   eax
c0014fec:	e8 17 b6 fe ff       	call   c0000608 <memset>
c0014ff1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014ff8:	31 c0                	xor    eax,eax
c0014ffa:	83 c4 10             	add    esp,0x10
c0014ffd:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014fff:	84 c9                	test   cl,cl
c0015001:	0f 84 bb 00 00 00    	je     c00150c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015007:	3d c7 00 00 00       	cmp    eax,0xc7
c001500c:	0f 8f b0 00 00 00    	jg     c00150c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015012:	80 f9 0a             	cmp    cl,0xa
c0015015:	0f 85 98 00 00 00    	jne    c00150b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001501b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015020:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015024:	a8 df                	test   al,0xdf
c0015026:	0f 94 c1             	sete   cl
c0015029:	3c 23                	cmp    al,0x23
c001502b:	0f 94 c2             	sete   dl
c001502e:	08 d1                	or     cl,dl
c0015030:	75 4a                	jne    c001507c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015032:	8d 50 f7             	lea    edx,[eax-0x9]
c0015035:	80 fa 01             	cmp    dl,0x1
c0015038:	76 42                	jbe    c001507c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001503a:	3c 5b                	cmp    al,0x5b
c001503c:	75 42                	jne    c0015080 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001503e:	80 fb 40             	cmp    bl,0x40
c0015041:	75 39                	jne    c001507c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015043:	83 ec 0c             	sub    esp,0xc
c0015046:	8d 54 24 65          	lea    edx,[esp+0x65]
c001504a:	52                   	push   edx
c001504b:	e8 d5 b5 fe ff       	call   c0000625 <strlen>
c0015050:	83 c4 10             	add    esp,0x10
c0015053:	83 f8 3f             	cmp    eax,0x3f
c0015056:	77 6a                	ja     c00150c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015058:	50                   	push   eax
c0015059:	50                   	push   eax
c001505a:	8d 54 24 61          	lea    edx,[esp+0x61]
c001505e:	52                   	push   edx
c001505f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015063:	52                   	push   edx
c0015064:	e8 3e b6 fe ff       	call   c00006a7 <strcpy>
c0015069:	58                   	pop    eax
c001506a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001506e:	52                   	push   edx
c001506f:	e8 b1 b5 fe ff       	call   c0000625 <strlen>
c0015074:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015079:	83 c4 10             	add    esp,0x10
c001507c:	31 d2                	xor    edx,edx
c001507e:	eb 3a                	jmp    c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015080:	80 fb 40             	cmp    bl,0x40
c0015083:	74 06                	je     c001508b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015085:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015089:	eb 20                	jmp    c00150ab <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001508b:	50                   	push   eax
c001508c:	50                   	push   eax
c001508d:	55                   	push   ebp
c001508e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015092:	50                   	push   eax
c0015093:	e8 60 b6 fe ff       	call   c00006f8 <strcmp>
c0015098:	83 c4 10             	add    esp,0x10
c001509b:	85 c0                	test   eax,eax
c001509d:	75 dd                	jne    c001507c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001509f:	eb e4                	jmp    c0015085 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00150a1:	8d 50 01             	lea    edx,[eax+0x1]
c00150a4:	80 f9 3d             	cmp    cl,0x3d
c00150a7:	74 1d                	je     c00150c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00150a9:	89 d0                	mov    eax,edx
c00150ab:	8a 08                	mov    cl,BYTE PTR [eax]
c00150ad:	84 c9                	test   cl,cl
c00150af:	75 f0                	jne    c00150a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00150b1:	eb 0f                	jmp    c00150c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00150b3:	8d 50 01             	lea    edx,[eax+0x1]
c00150b6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00150ba:	47                   	inc    edi
c00150bb:	89 d0                	mov    eax,edx
c00150bd:	e9 3b ff ff ff       	jmp    c0014ffd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00150c2:	31 c0                	xor    eax,eax
c00150c4:	eb 33                	jmp    c00150f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00150c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00150ca:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00150cd:	50                   	push   eax
c00150ce:	50                   	push   eax
c00150cf:	8d 44 24 60          	lea    eax,[esp+0x60]
c00150d3:	50                   	push   eax
c00150d4:	56                   	push   esi
c00150d5:	e8 1e b6 fe ff       	call   c00006f8 <strcmp>
c00150da:	83 c4 10             	add    esp,0x10
c00150dd:	85 c0                	test   eax,eax
c00150df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150e3:	75 97                	jne    c001507c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00150e5:	51                   	push   ecx
c00150e6:	51                   	push   ecx
c00150e7:	52                   	push   edx
c00150e8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00150ef:	e8 b3 b5 fe ff       	call   c00006a7 <strcpy>
c00150f4:	83 c4 10             	add    esp,0x10
c00150f7:	b0 01                	mov    al,0x1
c00150f9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00150ff:	5b                   	pop    ebx
c0015100:	5e                   	pop    esi
c0015101:	5f                   	pop    edi
c0015102:	5d                   	pop    ebp
c0015103:	c3                   	ret    

c0015104 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015104:	57                   	push   edi
c0015105:	56                   	push   esi
c0015106:	53                   	push   ebx
c0015107:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001510d:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015114:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001511b:	53                   	push   ebx
c001511c:	e8 04 b5 fe ff       	call   c0000625 <strlen>
c0015121:	89 34 24             	mov    DWORD PTR [esp],esi
c0015124:	89 c7                	mov    edi,eax
c0015126:	e8 fa b4 fe ff       	call   c0000625 <strlen>
c001512b:	83 c4 10             	add    esp,0x10
c001512e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015132:	31 ff                	xor    edi,edi
c0015134:	3d ff 00 00 00       	cmp    eax,0xff
c0015139:	0f 87 18 01 00 00    	ja     c0015257 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001513f:	51                   	push   ecx
c0015140:	51                   	push   ecx
c0015141:	56                   	push   esi
c0015142:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015146:	56                   	push   esi
c0015147:	e8 5b b5 fe ff       	call   c00006a7 <strcpy>
c001514c:	58                   	pop    eax
c001514d:	5a                   	pop    edx
c001514e:	68 c5 1d 02 c0       	push   0xc0021dc5
c0015153:	56                   	push   esi
c0015154:	e8 05 b6 fe ff       	call   c000075e <strcat>
c0015159:	59                   	pop    ecx
c001515a:	58                   	pop    eax
c001515b:	53                   	push   ebx
c001515c:	56                   	push   esi
c001515d:	e8 fc b5 fe ff       	call   c000075e <strcat>
c0015162:	58                   	pop    eax
c0015163:	5a                   	pop    edx
c0015164:	68 ae 19 02 c0       	push   0xc00219ae
c0015169:	56                   	push   esi
c001516a:	e8 ef b5 fe ff       	call   c000075e <strcat>
c001516f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015176:	e8 81 9d ff ff       	call   c000eefc <operator new(unsigned long)>
c001517b:	83 c4 0c             	add    esp,0xc
c001517e:	89 c3                	mov    ebx,eax
c0015180:	ff 35 74 4b 02 c0    	push   DWORD PTR ds:0xc0024b74
c0015186:	56                   	push   esi
c0015187:	50                   	push   eax
c0015188:	e8 8d a3 ff ff       	call   c000f51a <File::File(char const*, Process*)>
c001518d:	59                   	pop    ecx
c001518e:	5e                   	pop    esi
c001518f:	6a 01                	push   0x1
c0015191:	53                   	push   ebx
c0015192:	e8 e7 a3 ff ff       	call   c000f57e <File::open(FileOpenMode)>
c0015197:	83 c4 10             	add    esp,0x10
c001519a:	85 c0                	test   eax,eax
c001519c:	74 08                	je     c00151a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c001519e:	83 ec 0c             	sub    esp,0xc
c00151a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151a3:	53                   	push   ebx
c00151a4:	eb 2e                	jmp    c00151d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c00151a6:	52                   	push   edx
c00151a7:	8d 44 24 07          	lea    eax,[esp+0x7]
c00151ab:	50                   	push   eax
c00151ac:	8d 44 24 10          	lea    eax,[esp+0x10]
c00151b0:	50                   	push   eax
c00151b1:	53                   	push   ebx
c00151b2:	e8 73 a6 ff ff       	call   c000f82a <File::stat(unsigned long long*, bool*)>
c00151b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151bb:	83 c4 10             	add    esp,0x10
c00151be:	89 c1                	mov    ecx,eax
c00151c0:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00151c4:	75 13                	jne    c00151d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c00151c6:	83 ec 0c             	sub    esp,0xc
c00151c9:	53                   	push   ebx
c00151ca:	e8 0d a4 ff ff       	call   c000f5dc <File::close()>
c00151cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151d7:	eb 7b                	jmp    c0015254 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c00151d9:	83 ec 0c             	sub    esp,0xc
c00151dc:	50                   	push   eax
c00151dd:	e8 3c 6a ff ff       	call   c000bc1e <malloc>
c00151e2:	89 c6                	mov    esi,eax
c00151e4:	58                   	pop    eax
c00151e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151e7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00151eb:	52                   	push   edx
c00151ec:	56                   	push   esi
c00151ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00151f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00151f5:	53                   	push   ebx
c00151f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00151f9:	83 c4 20             	add    esp,0x20
c00151fc:	85 c0                	test   eax,eax
c00151fe:	75 0a                	jne    c001520a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015204:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015208:	74 18                	je     c0015222 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c001520a:	83 ec 0c             	sub    esp,0xc
c001520d:	31 ff                	xor    edi,edi
c001520f:	53                   	push   ebx
c0015210:	e8 c7 a3 ff ff       	call   c000f5dc <File::close()>
c0015215:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015217:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001521a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001521d:	83 c4 10             	add    esp,0x10
c0015220:	eb 35                	jmp    c0015257 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015222:	83 ec 0c             	sub    esp,0xc
c0015225:	53                   	push   ebx
c0015226:	e8 b1 a3 ff ff       	call   c000f5dc <File::close()>
c001522b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001522d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015230:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015233:	83 c4 0c             	add    esp,0xc
c0015236:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001523d:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015244:	56                   	push   esi
c0015245:	e8 62 fd ff ff       	call   c0014fac <Reg::findLineFromLoadedData(char*, char*, char*)>
c001524a:	89 34 24             	mov    DWORD PTR [esp],esi
c001524d:	89 c7                	mov    edi,eax
c001524f:	e8 da 69 ff ff       	call   c000bc2e <free>
c0015254:	83 c4 10             	add    esp,0x10
c0015257:	81 c4 10 01 00 00    	add    esp,0x110
c001525d:	89 f8                	mov    eax,edi
c001525f:	5b                   	pop    ebx
c0015260:	5e                   	pop    esi
c0015261:	5f                   	pop    edi
c0015262:	c3                   	ret    

c0015263 <Reg::getLine(char*, char*, char*)>:
c0015263:	57                   	push   edi
c0015264:	56                   	push   esi
c0015265:	53                   	push   ebx
c0015266:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001526a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001526e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015272:	57                   	push   edi
c0015273:	56                   	push   esi
c0015274:	53                   	push   ebx
c0015275:	68 b3 19 02 c0       	push   0xc00219b3
c001527a:	e8 85 fe ff ff       	call   c0015104 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001527f:	83 c4 10             	add    esp,0x10
c0015282:	84 c0                	test   al,al
c0015284:	75 10                	jne    c0015296 <Reg::getLine(char*, char*, char*)+0x33>
c0015286:	57                   	push   edi
c0015287:	56                   	push   esi
c0015288:	53                   	push   ebx
c0015289:	68 d8 19 02 c0       	push   0xc00219d8
c001528e:	e8 71 fe ff ff       	call   c0015104 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015293:	83 c4 10             	add    esp,0x10
c0015296:	5b                   	pop    ebx
c0015297:	5e                   	pop    esi
c0015298:	5f                   	pop    edi
c0015299:	c3                   	ret    

c001529a <Reg::readInt(char*, char*, int*)>:
c001529a:	55                   	push   ebp
c001529b:	57                   	push   edi
c001529c:	56                   	push   esi
c001529d:	53                   	push   ebx
c001529e:	81 ec f0 00 00 00    	sub    esp,0xf0
c00152a4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00152a8:	57                   	push   edi
c00152a9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00152b0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00152b7:	e8 a7 ff ff ff       	call   c0015263 <Reg::getLine(char*, char*, char*)>
c00152bc:	83 c4 10             	add    esp,0x10
c00152bf:	84 c0                	test   al,al
c00152c1:	0f 84 b3 00 00 00    	je     c001537a <Reg::readInt(char*, char*, int*)+0xe0>
c00152c7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00152cb:	80 fa 2b             	cmp    dl,0x2b
c00152ce:	74 0c                	je     c00152dc <Reg::readInt(char*, char*, int*)+0x42>
c00152d0:	80 fa 2d             	cmp    dl,0x2d
c00152d3:	75 0e                	jne    c00152e3 <Reg::readInt(char*, char*, int*)+0x49>
c00152d5:	ba 01 00 00 00       	mov    edx,0x1
c00152da:	eb 0b                	jmp    c00152e7 <Reg::readInt(char*, char*, int*)+0x4d>
c00152dc:	ba 01 00 00 00       	mov    edx,0x1
c00152e1:	eb 02                	jmp    c00152e5 <Reg::readInt(char*, char*, int*)+0x4b>
c00152e3:	31 d2                	xor    edx,edx
c00152e5:	31 c0                	xor    eax,eax
c00152e7:	be 0a 00 00 00       	mov    esi,0xa
c00152ec:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00152f1:	75 20                	jne    c0015313 <Reg::readInt(char*, char*, int*)+0x79>
c00152f3:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00152f7:	80 f9 78             	cmp    cl,0x78
c00152fa:	75 0a                	jne    c0015306 <Reg::readInt(char*, char*, int*)+0x6c>
c00152fc:	83 c2 02             	add    edx,0x2
c00152ff:	be 10 00 00 00       	mov    esi,0x10
c0015304:	eb 0d                	jmp    c0015313 <Reg::readInt(char*, char*, int*)+0x79>
c0015306:	80 f9 62             	cmp    cl,0x62
c0015309:	75 08                	jne    c0015313 <Reg::readInt(char*, char*, int*)+0x79>
c001530b:	83 c2 02             	add    edx,0x2
c001530e:	be 02 00 00 00       	mov    esi,0x2
c0015313:	01 d7                	add    edi,edx
c0015315:	31 d2                	xor    edx,edx
c0015317:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015319:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001531d:	80 fb 0d             	cmp    bl,0xd
c0015320:	0f 94 c3             	sete   bl
c0015323:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015328:	0f 94 c1             	sete   cl
c001532b:	08 cb                	or     bl,cl
c001532d:	75 3a                	jne    c0015369 <Reg::readInt(char*, char*, int*)+0xcf>
c001532f:	0f af d6             	imul   edx,esi
c0015332:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015337:	83 fe 10             	cmp    esi,0x10
c001533a:	75 26                	jne    c0015362 <Reg::readInt(char*, char*, int*)+0xc8>
c001533c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015340:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015343:	89 e9                	mov    ecx,ebp
c0015345:	80 f9 05             	cmp    cl,0x5
c0015348:	77 06                	ja     c0015350 <Reg::readInt(char*, char*, int*)+0xb6>
c001534a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001534e:	eb 16                	jmp    c0015366 <Reg::readInt(char*, char*, int*)+0xcc>
c0015350:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015354:	83 e9 61             	sub    ecx,0x61
c0015357:	80 f9 05             	cmp    cl,0x5
c001535a:	77 06                	ja     c0015362 <Reg::readInt(char*, char*, int*)+0xc8>
c001535c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015360:	eb 04                	jmp    c0015366 <Reg::readInt(char*, char*, int*)+0xcc>
c0015362:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015366:	47                   	inc    edi
c0015367:	eb ae                	jmp    c0015317 <Reg::readInt(char*, char*, int*)+0x7d>
c0015369:	84 c0                	test   al,al
c001536b:	74 02                	je     c001536f <Reg::readInt(char*, char*, int*)+0xd5>
c001536d:	f7 da                	neg    edx
c001536f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015376:	89 10                	mov    DWORD PTR [eax],edx
c0015378:	88 d8                	mov    al,bl
c001537a:	81 c4 ec 00 00 00    	add    esp,0xec
c0015380:	5b                   	pop    ebx
c0015381:	5e                   	pop    esi
c0015382:	5f                   	pop    edi
c0015383:	5d                   	pop    ebp
c0015384:	c3                   	ret    

c0015385 <Reg::readString(char*, char*, char*, int)>:
c0015385:	57                   	push   edi
c0015386:	56                   	push   esi
c0015387:	53                   	push   ebx
c0015388:	81 ec d4 00 00 00    	sub    esp,0xd4
c001538e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015395:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015399:	57                   	push   edi
c001539a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00153a1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00153a8:	e8 b6 fe ff ff       	call   c0015263 <Reg::getLine(char*, char*, char*)>
c00153ad:	83 c4 10             	add    esp,0x10
c00153b0:	89 c6                	mov    esi,eax
c00153b2:	84 c0                	test   al,al
c00153b4:	74 44                	je     c00153fa <Reg::readString(char*, char*, char*, int)+0x75>
c00153b6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00153bd:	31 c0                	xor    eax,eax
c00153bf:	4a                   	dec    edx
c00153c0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00153c3:	84 c9                	test   cl,cl
c00153c5:	74 0f                	je     c00153d6 <Reg::readString(char*, char*, char*, int)+0x51>
c00153c7:	39 c2                	cmp    edx,eax
c00153c9:	7e 0b                	jle    c00153d6 <Reg::readString(char*, char*, char*, int)+0x51>
c00153cb:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00153ce:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00153d3:	40                   	inc    eax
c00153d4:	eb ea                	jmp    c00153c0 <Reg::readString(char*, char*, char*, int)+0x3b>
c00153d6:	83 ec 0c             	sub    esp,0xc
c00153d9:	53                   	push   ebx
c00153da:	e8 46 b2 fe ff       	call   c0000625 <strlen>
c00153df:	83 c4 10             	add    esp,0x10
c00153e2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00153e7:	75 11                	jne    c00153fa <Reg::readString(char*, char*, char*, int)+0x75>
c00153e9:	83 ec 0c             	sub    esp,0xc
c00153ec:	53                   	push   ebx
c00153ed:	e8 33 b2 fe ff       	call   c0000625 <strlen>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00153fa:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015400:	89 f0                	mov    eax,esi
c0015402:	5b                   	pop    ebx
c0015403:	5e                   	pop    esi
c0015404:	5f                   	pop    edi
c0015405:	c3                   	ret    

c0015406 <Reg::readBool(char*, char*, bool*)>:
c0015406:	83 ec 20             	sub    esp,0x20
c0015409:	8d 44 24 10          	lea    eax,[esp+0x10]
c001540d:	50                   	push   eax
c001540e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015412:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015416:	e8 7f fe ff ff       	call   c001529a <Reg::readInt(char*, char*, int*)>
c001541b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015420:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015424:	0f 95 02             	setne  BYTE PTR [edx]
c0015427:	83 c4 2c             	add    esp,0x2c
c001542a:	c3                   	ret    

c001542b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001542b:	53                   	push   ebx
c001542c:	83 ec 1c             	sub    esp,0x1c
c001542f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015433:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015437:	50                   	push   eax
c0015438:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001543c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015440:	e8 c1 ff ff ff       	call   c0015406 <Reg::readBool(char*, char*, bool*)>
c0015445:	83 c4 10             	add    esp,0x10
c0015448:	84 c0                	test   al,al
c001544a:	74 04                	je     c0015450 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001544c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015450:	88 d8                	mov    al,bl
c0015452:	83 c4 18             	add    esp,0x18
c0015455:	5b                   	pop    ebx
c0015456:	c3                   	ret    

c0015457 <Reg::readIntWithDefault(char*, char*, int)>:
c0015457:	53                   	push   ebx
c0015458:	83 ec 1c             	sub    esp,0x1c
c001545b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001545f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015463:	50                   	push   eax
c0015464:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015468:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001546c:	e8 29 fe ff ff       	call   c001529a <Reg::readInt(char*, char*, int*)>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	84 c0                	test   al,al
c0015476:	74 04                	je     c001547c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015478:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001547c:	89 d8                	mov    eax,ebx
c001547e:	83 c4 18             	add    esp,0x18
c0015481:	5b                   	pop    ebx
c0015482:	c3                   	ret    

c0015483 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015483:	56                   	push   esi
c0015484:	53                   	push   ebx
c0015485:	51                   	push   ecx
c0015486:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001548a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001548e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015492:	56                   	push   esi
c0015493:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001549b:	e8 e5 fe ff ff       	call   c0015385 <Reg::readString(char*, char*, char*, int)>
c00154a0:	83 c4 10             	add    esp,0x10
c00154a3:	84 c0                	test   al,al
c00154a5:	74 02                	je     c00154a9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00154a7:	89 f3                	mov    ebx,esi
c00154a9:	89 d8                	mov    eax,ebx
c00154ab:	5a                   	pop    edx
c00154ac:	5b                   	pop    ebx
c00154ad:	5e                   	pop    esi
c00154ae:	c3                   	ret    

c00154af <Sys::exit(regs*)>:
c00154af:	83 ec 18             	sub    esp,0x18
c00154b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00154b6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00154b9:	e8 04 33 00 00       	call   c00187c2 <terminateTask(int)>
c00154be:	83 c8 ff             	or     eax,0xffffffff
c00154c1:	83 c4 1c             	add    esp,0x1c
c00154c4:	89 c2                	mov    edx,eax
c00154c6:	c3                   	ret    

c00154c7 <Sys::loadDLL(regs*)>:
c00154c7:	56                   	push   esi
c00154c8:	53                   	push   ebx
c00154c9:	31 d2                	xor    edx,edx
c00154cb:	51                   	push   ecx
c00154cc:	b8 01 00 00 00       	mov    eax,0x1
c00154d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154d5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00154d9:	74 7d                	je     c0015558 <Sys::loadDLL(regs*)+0x91>
c00154db:	83 ec 0c             	sub    esp,0xc
c00154de:	68 14 01 00 00       	push   0x114
c00154e3:	e8 14 9a ff ff       	call   c000eefc <operator new(unsigned long)>
c00154e8:	83 c4 0c             	add    esp,0xc
c00154eb:	89 c3                	mov    ebx,eax
c00154ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154f2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00154f5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00154f8:	53                   	push   ebx
c00154f9:	e8 1c a0 ff ff       	call   c000f51a <File::File(char const*, Process*)>
c00154fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015501:	e8 e6 a2 ff ff       	call   c000f7ec <File::exists()>
c0015506:	83 c4 10             	add    esp,0x10
c0015509:	84 c0                	test   al,al
c001550b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001550d:	75 11                	jne    c0015520 <Sys::loadDLL(regs*)+0x59>
c001550f:	83 ec 0c             	sub    esp,0xc
c0015512:	53                   	push   ebx
c0015513:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	b8 03 00 00 00       	mov    eax,0x3
c001551e:	eb 36                	jmp    c0015556 <Sys::loadDLL(regs*)+0x8f>
c0015520:	83 ec 0c             	sub    esp,0xc
c0015523:	53                   	push   ebx
c0015524:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015527:	58                   	pop    eax
c0015528:	5a                   	pop    edx
c0015529:	6a 00                	push   0x0
c001552b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001552e:	e8 1b 21 00 00       	call   c001764e <Thr::loadDLL(char const*, bool)>
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	89 c1                	mov    ecx,eax
c0015538:	31 d2                	xor    edx,edx
c001553a:	b8 04 00 00 00       	mov    eax,0x4
c001553f:	85 c9                	test   ecx,ecx
c0015541:	74 15                	je     c0015558 <Sys::loadDLL(regs*)+0x91>
c0015543:	53                   	push   ebx
c0015544:	53                   	push   ebx
c0015545:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c001554b:	51                   	push   ecx
c001554c:	e8 50 22 00 00       	call   c00177a1 <Thr::executeDLL(unsigned long, void*)>
c0015551:	83 c4 10             	add    esp,0x10
c0015554:	31 c0                	xor    eax,eax
c0015556:	31 d2                	xor    edx,edx
c0015558:	59                   	pop    ecx
c0015559:	5b                   	pop    ebx
c001555a:	5e                   	pop    esi
c001555b:	c3                   	ret    

c001555c <Sys::read(regs*)>:
c001555c:	57                   	push   edi
c001555d:	56                   	push   esi
c001555e:	53                   	push   ebx
c001555f:	83 ec 10             	sub    esp,0x10
c0015562:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015566:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015569:	83 f8 02             	cmp    eax,0x2
c001556c:	77 10                	ja     c001557e <Sys::read(regs*)+0x22>
c001556e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015573:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015576:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001557c:	eb 0e                	jmp    c001558c <Sys::read(regs*)+0x30>
c001557e:	83 ec 0c             	sub    esp,0xc
c0015581:	50                   	push   eax
c0015582:	e8 66 86 ff ff       	call   c000dbed <getFromFileDescriptor(int)>
c0015587:	83 c4 10             	add    esp,0x10
c001558a:	89 c1                	mov    ecx,eax
c001558c:	83 c8 ff             	or     eax,0xffffffff
c001558f:	85 c9                	test   ecx,ecx
c0015591:	89 c2                	mov    edx,eax
c0015593:	74 28                	je     c00155bd <Sys::read(regs*)+0x61>
c0015595:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001559d:	31 ff                	xor    edi,edi
c001559f:	83 ec 0c             	sub    esp,0xc
c00155a2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00155a4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00155a8:	52                   	push   edx
c00155a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155ac:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00155af:	57                   	push   edi
c00155b0:	56                   	push   esi
c00155b1:	51                   	push   ecx
c00155b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00155b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00155b9:	83 c4 20             	add    esp,0x20
c00155bc:	99                   	cdq    
c00155bd:	83 c4 10             	add    esp,0x10
c00155c0:	5b                   	pop    ebx
c00155c1:	5e                   	pop    esi
c00155c2:	5f                   	pop    edi
c00155c3:	c3                   	ret    

c00155c4 <Sys::sbrk(regs*)>:
c00155c4:	56                   	push   esi
c00155c5:	53                   	push   ebx
c00155c6:	50                   	push   eax
c00155c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155d3:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00155d6:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00155dc:	85 db                	test   ebx,ebx
c00155de:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00155e1:	74 02                	je     c00155e5 <Sys::sbrk(regs*)+0x21>
c00155e3:	79 06                	jns    c00155eb <Sys::sbrk(regs*)+0x27>
c00155e5:	89 f0                	mov    eax,esi
c00155e7:	31 d2                	xor    edx,edx
c00155e9:	eb 2a                	jmp    c0015615 <Sys::sbrk(regs*)+0x51>
c00155eb:	83 c8 ff             	or     eax,0xffffffff
c00155ee:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00155f4:	89 c2                	mov    edx,eax
c00155f6:	77 1d                	ja     c0015615 <Sys::sbrk(regs*)+0x51>
c00155f8:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00155fe:	50                   	push   eax
c00155ff:	c1 ea 0c             	shr    edx,0xc
c0015602:	68 07 04 00 00       	push   0x407
c0015607:	52                   	push   edx
c0015608:	51                   	push   ecx
c0015609:	e8 94 8e ff ff       	call   c000e4a2 <VAS::allocatePages(int, int)>
c001560e:	89 f0                	mov    eax,esi
c0015610:	31 d2                	xor    edx,edx
c0015612:	83 c4 10             	add    esp,0x10
c0015615:	59                   	pop    ecx
c0015616:	5b                   	pop    ebx
c0015617:	5e                   	pop    esi
c0015618:	c3                   	ret    

c0015619 <Sys::write(regs*)>:
c0015619:	57                   	push   edi
c001561a:	56                   	push   esi
c001561b:	53                   	push   ebx
c001561c:	83 ec 18             	sub    esp,0x18
c001561f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015623:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015626:	68 f3 19 02 c0       	push   0xc00219f3
c001562b:	e8 bb 99 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0015637:	77 10                	ja     c0015649 <Sys::write(regs*)+0x30>
c0015639:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001563e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015641:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015647:	eb 1b                	jmp    c0015664 <Sys::write(regs*)+0x4b>
c0015649:	83 ec 0c             	sub    esp,0xc
c001564c:	68 12 1a 02 c0       	push   0xc0021a12
c0015651:	e8 95 99 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015656:	58                   	pop    eax
c0015657:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001565a:	e8 8e 85 ff ff       	call   c000dbed <getFromFileDescriptor(int)>
c001565f:	83 c4 10             	add    esp,0x10
c0015662:	89 c1                	mov    ecx,eax
c0015664:	83 c8 ff             	or     eax,0xffffffff
c0015667:	85 c9                	test   ecx,ecx
c0015669:	89 c2                	mov    edx,eax
c001566b:	74 28                	je     c0015695 <Sys::write(regs*)+0x7c>
c001566d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015675:	31 ff                	xor    edi,edi
c0015677:	83 ec 0c             	sub    esp,0xc
c001567a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001567c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015680:	52                   	push   edx
c0015681:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015684:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015687:	57                   	push   edi
c0015688:	56                   	push   esi
c0015689:	51                   	push   ecx
c001568a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001568d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015691:	83 c4 20             	add    esp,0x20
c0015694:	99                   	cdq    
c0015695:	83 c4 10             	add    esp,0x10
c0015698:	5b                   	pop    ebx
c0015699:	5e                   	pop    esi
c001569a:	5f                   	pop    edi
c001569b:	c3                   	ret    

c001569c <Sys::yield(regs*)>:
c001569c:	83 ec 0c             	sub    esp,0xc
c001569f:	e8 08 25 00 00       	call   c0017bac <lockScheduler()>
c00156a4:	e8 37 28 00 00       	call   c0017ee0 <schedule()>
c00156a9:	e8 00 25 00 00       	call   c0017bae <unlockScheduler()>
c00156ae:	31 c0                	xor    eax,eax
c00156b0:	31 d2                	xor    edx,edx
c00156b2:	83 c4 0c             	add    esp,0xc
c00156b5:	c3                   	ret    

c00156b6 <sysCallGetPID(regs*)>:
c00156b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156be:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c0:	99                   	cdq    
c00156c1:	c3                   	ret    

c00156c2 <sysCallSeekDir(regs*)>:
c00156c2:	31 c0                	xor    eax,eax
c00156c4:	31 d2                	xor    edx,edx
c00156c6:	c3                   	ret    

c00156c7 <sysCallTellDir(regs*)>:
c00156c7:	31 c0                	xor    eax,eax
c00156c9:	31 d2                	xor    edx,edx
c00156cb:	c3                   	ret    

c00156cc <sysCallVerify(regs*)>:
c00156cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156d0:	31 d2                	xor    edx,edx
c00156d2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156d5:	c3                   	ret    

c00156d6 <sysCallGetArgc(regs*)>:
c00156d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156de:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00156e4:	99                   	cdq    
c00156e5:	c3                   	ret    

c00156e6 <sysFormatDisk(regs*)>:
c00156e6:	56                   	push   esi
c00156e7:	53                   	push   ebx
c00156e8:	53                   	push   ebx
c00156e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00156ed:	8b 1d 88 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023888
c00156f3:	eb 25                	jmp    c001571a <sysFormatDisk(regs*)+0x34>
c00156f5:	83 ec 0c             	sub    esp,0xc
c00156f8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00156fb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00156fd:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015700:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015703:	50                   	push   eax
c0015704:	ff 34 85 20 3d 02 c0 	push   DWORD PTR [eax*4-0x3ffdc2e0]
c001570b:	53                   	push   ebx
c001570c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001570f:	83 c4 20             	add    esp,0x20
c0015712:	83 f8 08             	cmp    eax,0x8
c0015715:	75 12                	jne    c0015729 <sysFormatDisk(regs*)+0x43>
c0015717:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001571a:	85 db                	test   ebx,ebx
c001571c:	75 d7                	jne    c00156f5 <sysFormatDisk(regs*)+0xf>
c001571e:	59                   	pop    ecx
c001571f:	b8 03 00 00 00       	mov    eax,0x3
c0015724:	31 d2                	xor    edx,edx
c0015726:	5b                   	pop    ebx
c0015727:	5e                   	pop    esi
c0015728:	c3                   	ret    
c0015729:	85 c0                	test   eax,eax
c001572b:	74 1b                	je     c0015748 <sysFormatDisk(regs*)+0x62>
c001572d:	83 f8 09             	cmp    eax,0x9
c0015730:	74 0b                	je     c001573d <sysFormatDisk(regs*)+0x57>
c0015732:	59                   	pop    ecx
c0015733:	b8 02 00 00 00       	mov    eax,0x2
c0015738:	31 d2                	xor    edx,edx
c001573a:	5b                   	pop    ebx
c001573b:	5e                   	pop    esi
c001573c:	c3                   	ret    
c001573d:	59                   	pop    ecx
c001573e:	b8 01 00 00 00       	mov    eax,0x1
c0015743:	31 d2                	xor    edx,edx
c0015745:	5b                   	pop    ebx
c0015746:	5e                   	pop    esi
c0015747:	c3                   	ret    
c0015748:	59                   	pop    ecx
c0015749:	31 c0                	xor    eax,eax
c001574b:	31 d2                	xor    edx,edx
c001574d:	5b                   	pop    ebx
c001574e:	5e                   	pop    esi
c001574f:	c3                   	ret    

c0015750 <sysSetDiskVolumeLabel(regs*)>:
c0015750:	56                   	push   esi
c0015751:	53                   	push   ebx
c0015752:	53                   	push   ebx
c0015753:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015757:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001575a:	83 f8 19             	cmp    eax,0x19
c001575d:	77 29                	ja     c0015788 <sysSetDiskVolumeLabel(regs*)+0x38>
c001575f:	8b 0c 85 20 3d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc2e0]
c0015766:	85 c9                	test   ecx,ecx
c0015768:	74 1e                	je     c0015788 <sysSetDiskVolumeLabel(regs*)+0x38>
c001576a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001576d:	85 d2                	test   edx,edx
c001576f:	74 17                	je     c0015788 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015771:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015777:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015779:	52                   	push   edx
c001577a:	50                   	push   eax
c001577b:	51                   	push   ecx
c001577c:	53                   	push   ebx
c001577d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015780:	83 c4 10             	add    esp,0x10
c0015783:	99                   	cdq    
c0015784:	59                   	pop    ecx
c0015785:	5b                   	pop    ebx
c0015786:	5e                   	pop    esi
c0015787:	c3                   	ret    
c0015788:	59                   	pop    ecx
c0015789:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001578e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015793:	5b                   	pop    ebx
c0015794:	5e                   	pop    esi
c0015795:	c3                   	ret    

c0015796 <sysGetDiskVolumeLabel(regs*)>:
c0015796:	57                   	push   edi
c0015797:	56                   	push   esi
c0015798:	53                   	push   ebx
c0015799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001579d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00157a0:	83 fa 19             	cmp    edx,0x19
c00157a3:	77 34                	ja     c00157d9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157a5:	8b 0c 95 20 3d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc2e0]
c00157ac:	85 c9                	test   ecx,ecx
c00157ae:	74 29                	je     c00157d9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157b0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00157b3:	85 db                	test   ebx,ebx
c00157b5:	74 22                	je     c00157d9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157b7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157ba:	85 c0                	test   eax,eax
c00157bc:	74 1b                	je     c00157d9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157be:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00157c4:	83 ec 0c             	sub    esp,0xc
c00157c7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00157c9:	50                   	push   eax
c00157ca:	53                   	push   ebx
c00157cb:	52                   	push   edx
c00157cc:	51                   	push   ecx
c00157cd:	56                   	push   esi
c00157ce:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00157d1:	83 c4 20             	add    esp,0x20
c00157d4:	99                   	cdq    
c00157d5:	5b                   	pop    ebx
c00157d6:	5e                   	pop    esi
c00157d7:	5f                   	pop    edi
c00157d8:	c3                   	ret    
c00157d9:	5b                   	pop    ebx
c00157da:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157e4:	5e                   	pop    esi
c00157e5:	5f                   	pop    edi
c00157e6:	c3                   	ret    

c00157e7 <sysShutdown(regs*)>:
c00157e7:	83 ec 0c             	sub    esp,0xc
c00157ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157f1:	85 c0                	test   eax,eax
c00157f3:	74 18                	je     c001580d <sysShutdown(regs*)+0x26>
c00157f5:	83 f8 01             	cmp    eax,0x1
c00157f8:	74 38                	je     c0015832 <sysShutdown(regs*)+0x4b>
c00157fa:	83 f8 02             	cmp    eax,0x2
c00157fd:	74 24                	je     c0015823 <sysShutdown(regs*)+0x3c>
c00157ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015804:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015809:	83 c4 0c             	add    esp,0xc
c001580c:	c3                   	ret    
c001580d:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0015812:	8b 10                	mov    edx,DWORD PTR [eax]
c0015814:	6a 00                	push   0x0
c0015816:	6a 00                	push   0x0
c0015818:	6a 00                	push   0x0
c001581a:	50                   	push   eax
c001581b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001581e:	83 c4 10             	add    esp,0x10
c0015821:	eb dc                	jmp    c00157ff <sysShutdown(regs*)+0x18>
c0015823:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0015828:	8b 10                	mov    edx,DWORD PTR [eax]
c001582a:	6a 00                	push   0x0
c001582c:	6a 00                	push   0x0
c001582e:	6a 01                	push   0x1
c0015830:	eb e8                	jmp    c001581a <sysShutdown(regs*)+0x33>
c0015832:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c0015837:	85 c0                	test   eax,eax
c0015839:	74 02                	je     c001583d <sysShutdown(regs*)+0x56>
c001583b:	ff d0                	call   eax
c001583d:	31 c0                	xor    eax,eax
c001583f:	31 d2                	xor    edx,edx
c0015841:	83 c4 0c             	add    esp,0xc
c0015844:	c3                   	ret    

c0015845 <sysCallGetCwd(regs*)>:
c0015845:	83 ec 10             	sub    esp,0x10
c0015848:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001584c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001584f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015852:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015857:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001585a:	e8 2c a0 ff ff       	call   c000f88b <getcwd(Process*, char*, int)>
c001585f:	83 c4 1c             	add    esp,0x1c
c0015862:	99                   	cdq    
c0015863:	c3                   	ret    

c0015864 <sysCallSetCwd(regs*)>:
c0015864:	83 ec 14             	sub    esp,0x14
c0015867:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001586b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001586e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015873:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015876:	e8 3a a0 ff ff       	call   c000f8b5 <setcwd(Process*, char*)>
c001587b:	83 c4 1c             	add    esp,0x1c
c001587e:	99                   	cdq    
c001587f:	c3                   	ret    

c0015880 <sysCallRealpath(regs*)>:
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015887:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001588a:	85 d2                	test   edx,edx
c001588c:	74 07                	je     c0015895 <sysCallRealpath(regs*)+0x15>
c001588e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015891:	85 c0                	test   eax,eax
c0015893:	75 0b                	jne    c00158a0 <sysCallRealpath(regs*)+0x20>
c0015895:	b8 01 00 00 00       	mov    eax,0x1
c001589a:	31 d2                	xor    edx,edx
c001589c:	83 c4 0c             	add    esp,0xc
c001589f:	c3                   	ret    
c00158a0:	51                   	push   ecx
c00158a1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158a7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00158aa:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00158b0:	51                   	push   ecx
c00158b1:	52                   	push   edx
c00158b2:	50                   	push   eax
c00158b3:	e8 b8 9a ff ff       	call   c000f370 <standardiseFiles(char*, char const*, char const*)>
c00158b8:	83 c4 10             	add    esp,0x10
c00158bb:	31 c0                	xor    eax,eax
c00158bd:	31 d2                	xor    edx,edx
c00158bf:	83 c4 0c             	add    esp,0xc
c00158c2:	c3                   	ret    

c00158c3 <sysCallReadDir(regs*)>:
c00158c3:	53                   	push   ebx
c00158c4:	83 ec 18             	sub    esp,0x18
c00158c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00158cb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00158ce:	83 f8 02             	cmp    eax,0x2
c00158d1:	76 53                	jbe    c0015926 <sysCallReadDir(regs*)+0x63>
c00158d3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00158d6:	81 fa 00 ff ff 3f    	cmp    edx,0x3fffff00
c00158dc:	77 4f                	ja     c001592d <sysCallReadDir(regs*)+0x6a>
c00158de:	83 ec 0c             	sub    esp,0xc
c00158e1:	50                   	push   eax
c00158e2:	e8 06 83 ff ff       	call   c000dbed <getFromFileDescriptor(int)>
c00158e7:	83 c4 10             	add    esp,0x10
c00158ea:	85 c0                	test   eax,eax
c00158ec:	74 50                	je     c001593e <sysCallReadDir(regs*)+0x7b>
c00158ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00158f6:	83 ec 0c             	sub    esp,0xc
c00158f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00158fb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00158ff:	51                   	push   ecx
c0015900:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015903:	6a 00                	push   0x0
c0015905:	68 10 01 00 00       	push   0x110
c001590a:	50                   	push   eax
c001590b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001590e:	83 c4 20             	add    esp,0x20
c0015911:	85 c0                	test   eax,eax
c0015913:	74 38                	je     c001594d <sysCallReadDir(regs*)+0x8a>
c0015915:	83 f8 07             	cmp    eax,0x7
c0015918:	74 0c                	je     c0015926 <sysCallReadDir(regs*)+0x63>
c001591a:	b8 02 00 00 00       	mov    eax,0x2
c001591f:	31 d2                	xor    edx,edx
c0015921:	83 c4 18             	add    esp,0x18
c0015924:	5b                   	pop    ebx
c0015925:	c3                   	ret    
c0015926:	b8 01 00 00 00       	mov    eax,0x1
c001592b:	eb f2                	jmp    c001591f <sysCallReadDir(regs*)+0x5c>
c001592d:	83 ec 08             	sub    esp,0x8
c0015930:	52                   	push   edx
c0015931:	68 34 1a 02 c0       	push   0xc0021a34
c0015936:	e8 b0 96 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001593b:	83 c4 10             	add    esp,0x10
c001593e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015943:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015948:	83 c4 18             	add    esp,0x18
c001594b:	5b                   	pop    ebx
c001594c:	c3                   	ret    
c001594d:	31 c0                	xor    eax,eax
c001594f:	eb ce                	jmp    c001591f <sysCallReadDir(regs*)+0x5c>

c0015951 <sysCallIsATTY(regs*)>:
c0015951:	83 ec 0c             	sub    esp,0xc
c0015954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015958:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001595b:	83 f8 02             	cmp    eax,0x2
c001595e:	76 07                	jbe    c0015967 <sysCallIsATTY(regs*)+0x16>
c0015960:	3d 01 ff ff 3f       	cmp    eax,0x3fffff01
c0015965:	75 26                	jne    c001598d <sysCallIsATTY(regs*)+0x3c>
c0015967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001596c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001596f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015975:	85 c0                	test   eax,eax
c0015977:	74 24                	je     c001599d <sysCallIsATTY(regs*)+0x4c>
c0015979:	83 ec 0c             	sub    esp,0xc
c001597c:	8b 10                	mov    edx,DWORD PTR [eax]
c001597e:	50                   	push   eax
c001597f:	ff 12                	call   DWORD PTR [edx]
c0015981:	31 d2                	xor    edx,edx
c0015983:	0f b6 c0             	movzx  eax,al
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	83 c4 0c             	add    esp,0xc
c001598c:	c3                   	ret    
c001598d:	83 ec 0c             	sub    esp,0xc
c0015990:	50                   	push   eax
c0015991:	e8 57 82 ff ff       	call   c000dbed <getFromFileDescriptor(int)>
c0015996:	83 c4 10             	add    esp,0x10
c0015999:	85 c0                	test   eax,eax
c001599b:	75 dc                	jne    c0015979 <sysCallIsATTY(regs*)+0x28>
c001599d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159a7:	83 c4 0c             	add    esp,0xc
c00159aa:	c3                   	ret    

c00159ab <sysCallSeek(regs*)>:
c00159ab:	53                   	push   ebx
c00159ac:	83 ec 08             	sub    esp,0x8
c00159af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159b6:	83 f8 02             	cmp    eax,0x2
c00159b9:	76 4a                	jbe    c0015a05 <sysCallSeek(regs*)+0x5a>
c00159bb:	3d 00 ff ff 3f       	cmp    eax,0x3fffff00
c00159c0:	77 32                	ja     c00159f4 <sysCallSeek(regs*)+0x49>
c00159c2:	83 ec 0c             	sub    esp,0xc
c00159c5:	50                   	push   eax
c00159c6:	e8 22 82 ff ff       	call   c000dbed <getFromFileDescriptor(int)>
c00159cb:	83 c4 0c             	add    esp,0xc
c00159ce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00159d1:	31 db                	xor    ebx,ebx
c00159d3:	53                   	push   ebx
c00159d4:	51                   	push   ecx
c00159d5:	50                   	push   eax
c00159d6:	e8 61 9c ff ff       	call   c000f63c <File::seek(unsigned long long)>
c00159db:	83 c4 10             	add    esp,0x10
c00159de:	85 c0                	test   eax,eax
c00159e0:	0f 95 c0             	setne  al
c00159e3:	31 d2                	xor    edx,edx
c00159e5:	0f b6 c0             	movzx  eax,al
c00159e8:	f7 d8                	neg    eax
c00159ea:	83 d2 00             	adc    edx,0x0
c00159ed:	83 c4 08             	add    esp,0x8
c00159f0:	f7 da                	neg    edx
c00159f2:	5b                   	pop    ebx
c00159f3:	c3                   	ret    
c00159f4:	83 ec 08             	sub    esp,0x8
c00159f7:	50                   	push   eax
c00159f8:	68 f0 1a 02 c0       	push   0xc0021af0
c00159fd:	e8 e9 95 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015a02:	83 c4 10             	add    esp,0x10
c0015a05:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a0a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a0f:	83 c4 08             	add    esp,0x8
c0015a12:	5b                   	pop    ebx
c0015a13:	c3                   	ret    

c0015a14 <sysCallTell(regs*)>:
c0015a14:	53                   	push   ebx
c0015a15:	83 ec 08             	sub    esp,0x8
c0015a18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a1c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a1f:	83 f8 02             	cmp    eax,0x2
c0015a22:	76 5e                	jbe    c0015a82 <sysCallTell(regs*)+0x6e>
c0015a24:	3d 00 ff ff 3f       	cmp    eax,0x3fffff00
c0015a29:	77 2d                	ja     c0015a58 <sysCallTell(regs*)+0x44>
c0015a2b:	83 ec 0c             	sub    esp,0xc
c0015a2e:	50                   	push   eax
c0015a2f:	e8 b9 81 ff ff       	call   c000dbed <getFromFileDescriptor(int)>
c0015a34:	5a                   	pop    edx
c0015a35:	59                   	pop    ecx
c0015a36:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a39:	50                   	push   eax
c0015a3a:	e8 53 9c ff ff       	call   c000f692 <File::tell(unsigned long long*)>
c0015a3f:	83 c4 10             	add    esp,0x10
c0015a42:	85 c0                	test   eax,eax
c0015a44:	0f 95 c0             	setne  al
c0015a47:	31 d2                	xor    edx,edx
c0015a49:	0f b6 c0             	movzx  eax,al
c0015a4c:	f7 d8                	neg    eax
c0015a4e:	83 d2 00             	adc    edx,0x0
c0015a51:	83 c4 08             	add    esp,0x8
c0015a54:	f7 da                	neg    edx
c0015a56:	5b                   	pop    ebx
c0015a57:	c3                   	ret    
c0015a58:	83 ec 08             	sub    esp,0x8
c0015a5b:	50                   	push   eax
c0015a5c:	68 0a 1b 02 c0       	push   0xc0021b0a
c0015a61:	e8 85 95 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015a66:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015a69:	83 c4 10             	add    esp,0x10
c0015a6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a79:	31 d2                	xor    edx,edx
c0015a7b:	31 c0                	xor    eax,eax
c0015a7d:	83 c4 08             	add    esp,0x8
c0015a80:	5b                   	pop    ebx
c0015a81:	c3                   	ret    
c0015a82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a8c:	83 c4 08             	add    esp,0x8
c0015a8f:	5b                   	pop    ebx
c0015a90:	c3                   	ret    

c0015a91 <sysCallSizeFromFilename(regs*)>:
c0015a91:	57                   	push   edi
c0015a92:	56                   	push   esi
c0015a93:	53                   	push   ebx
c0015a94:	83 ec 10             	sub    esp,0x10
c0015a97:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015a9b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015a9e:	83 fb 02             	cmp    ebx,0x2
c0015aa1:	0f 86 8a 00 00 00    	jbe    c0015b31 <sysCallSizeFromFilename(regs*)+0xa0>
c0015aa7:	81 fb 00 ff ff 3f    	cmp    ebx,0x3fffff00
c0015aad:	77 56                	ja     c0015b05 <sysCallSizeFromFilename(regs*)+0x74>
c0015aaf:	83 ec 0c             	sub    esp,0xc
c0015ab2:	68 14 01 00 00       	push   0x114
c0015ab7:	e8 40 94 ff ff       	call   c000eefc <operator new(unsigned long)>
c0015abc:	83 c4 0c             	add    esp,0xc
c0015abf:	89 c7                	mov    edi,eax
c0015ac1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ac6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015ac9:	53                   	push   ebx
c0015aca:	57                   	push   edi
c0015acb:	e8 4a 9a ff ff       	call   c000f51a <File::File(char const*, Process*)>
c0015ad0:	83 c4 0c             	add    esp,0xc
c0015ad3:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015ad7:	50                   	push   eax
c0015ad8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015adb:	57                   	push   edi
c0015adc:	e8 49 9d ff ff       	call   c000f82a <File::stat(unsigned long long*, bool*)>
c0015ae1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015ae4:	89 c3                	mov    ebx,eax
c0015ae6:	8b 07                	mov    eax,DWORD PTR [edi]
c0015ae8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	31 c0                	xor    eax,eax
c0015af0:	85 db                	test   ebx,ebx
c0015af2:	0f 95 c0             	setne  al
c0015af5:	31 d2                	xor    edx,edx
c0015af7:	f7 d8                	neg    eax
c0015af9:	83 d2 00             	adc    edx,0x0
c0015afc:	83 c4 10             	add    esp,0x10
c0015aff:	f7 da                	neg    edx
c0015b01:	5b                   	pop    ebx
c0015b02:	5e                   	pop    esi
c0015b03:	5f                   	pop    edi
c0015b04:	c3                   	ret    
c0015b05:	83 ec 08             	sub    esp,0x8
c0015b08:	53                   	push   ebx
c0015b09:	68 24 1b 02 c0       	push   0xc0021b24
c0015b0e:	e8 d8 94 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015b13:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015b16:	83 c4 10             	add    esp,0x10
c0015b19:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015b1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015b26:	31 d2                	xor    edx,edx
c0015b28:	83 c4 10             	add    esp,0x10
c0015b2b:	31 c0                	xor    eax,eax
c0015b2d:	5b                   	pop    ebx
c0015b2e:	5e                   	pop    esi
c0015b2f:	5f                   	pop    edi
c0015b30:	c3                   	ret    
c0015b31:	83 c4 10             	add    esp,0x10
c0015b34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b39:	5b                   	pop    ebx
c0015b3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b3f:	5e                   	pop    esi
c0015b40:	5f                   	pop    edi
c0015b41:	c3                   	ret    

c0015b42 <sysCallSize(regs*)>:
c0015b42:	53                   	push   ebx
c0015b43:	83 ec 18             	sub    esp,0x18
c0015b46:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b4a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b4d:	83 f8 02             	cmp    eax,0x2
c0015b50:	76 64                	jbe    c0015bb6 <sysCallSize(regs*)+0x74>
c0015b52:	3d 00 ff ff 3f       	cmp    eax,0x3fffff00
c0015b57:	77 33                	ja     c0015b8c <sysCallSize(regs*)+0x4a>
c0015b59:	83 ec 0c             	sub    esp,0xc
c0015b5c:	50                   	push   eax
c0015b5d:	e8 8b 80 ff ff       	call   c000dbed <getFromFileDescriptor(int)>
c0015b62:	83 c4 0c             	add    esp,0xc
c0015b65:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015b69:	52                   	push   edx
c0015b6a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015b6d:	50                   	push   eax
c0015b6e:	e8 b7 9c ff ff       	call   c000f82a <File::stat(unsigned long long*, bool*)>
c0015b73:	83 c4 10             	add    esp,0x10
c0015b76:	85 c0                	test   eax,eax
c0015b78:	0f 95 c0             	setne  al
c0015b7b:	31 d2                	xor    edx,edx
c0015b7d:	0f b6 c0             	movzx  eax,al
c0015b80:	f7 d8                	neg    eax
c0015b82:	83 d2 00             	adc    edx,0x0
c0015b85:	83 c4 18             	add    esp,0x18
c0015b88:	f7 da                	neg    edx
c0015b8a:	5b                   	pop    ebx
c0015b8b:	c3                   	ret    
c0015b8c:	83 ec 08             	sub    esp,0x8
c0015b8f:	50                   	push   eax
c0015b90:	68 24 1b 02 c0       	push   0xc0021b24
c0015b95:	e8 51 94 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015b9a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015b9d:	83 c4 10             	add    esp,0x10
c0015ba0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ba6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015bad:	31 d2                	xor    edx,edx
c0015baf:	31 c0                	xor    eax,eax
c0015bb1:	83 c4 18             	add    esp,0x18
c0015bb4:	5b                   	pop    ebx
c0015bb5:	c3                   	ret    
c0015bb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bc0:	83 c4 18             	add    esp,0x18
c0015bc3:	5b                   	pop    ebx
c0015bc4:	c3                   	ret    

c0015bc5 <sysCallClose(regs*)>:
c0015bc5:	53                   	push   ebx
c0015bc6:	83 ec 08             	sub    esp,0x8
c0015bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bcd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015bd0:	83 f8 02             	cmp    eax,0x2
c0015bd3:	76 50                	jbe    c0015c25 <sysCallClose(regs*)+0x60>
c0015bd5:	3d 01 ff ff 3f       	cmp    eax,0x3fffff01
c0015bda:	74 58                	je     c0015c34 <sysCallClose(regs*)+0x6f>
c0015bdc:	3d 00 ff ff 3f       	cmp    eax,0x3fffff00
c0015be1:	74 60                	je     c0015c43 <sysCallClose(regs*)+0x7e>
c0015be3:	77 2f                	ja     c0015c14 <sysCallClose(regs*)+0x4f>
c0015be5:	83 ec 0c             	sub    esp,0xc
c0015be8:	50                   	push   eax
c0015be9:	e8 ff 7f ff ff       	call   c000dbed <getFromFileDescriptor(int)>
c0015bee:	89 c3                	mov    ebx,eax
c0015bf0:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bf3:	e8 e4 99 ff ff       	call   c000f5dc <File::close()>
c0015bf8:	83 c4 10             	add    esp,0x10
c0015bfb:	85 db                	test   ebx,ebx
c0015bfd:	74 0c                	je     c0015c0b <sysCallClose(regs*)+0x46>
c0015bff:	83 ec 0c             	sub    esp,0xc
c0015c02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c04:	53                   	push   ebx
c0015c05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	31 c0                	xor    eax,eax
c0015c0d:	31 d2                	xor    edx,edx
c0015c0f:	83 c4 08             	add    esp,0x8
c0015c12:	5b                   	pop    ebx
c0015c13:	c3                   	ret    
c0015c14:	83 ec 08             	sub    esp,0x8
c0015c17:	50                   	push   eax
c0015c18:	68 58 1a 02 c0       	push   0xc0021a58
c0015c1d:	e8 c9 93 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015c22:	83 c4 10             	add    esp,0x10
c0015c25:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c2a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c2f:	83 c4 08             	add    esp,0x8
c0015c32:	5b                   	pop    ebx
c0015c33:	c3                   	ret    
c0015c34:	83 ec 0c             	sub    esp,0xc
c0015c37:	68 3f 1b 02 c0       	push   0xc0021b3f
c0015c3c:	e8 aa 93 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015c41:	eb c5                	jmp    c0015c08 <sysCallClose(regs*)+0x43>
c0015c43:	83 ec 0c             	sub    esp,0xc
c0015c46:	68 4d 1b 02 c0       	push   0xc0021b4d
c0015c4b:	eb ef                	jmp    c0015c3c <sysCallClose(regs*)+0x77>

c0015c4d <sysCallOpenDir(regs*)>:
c0015c4d:	56                   	push   esi
c0015c4e:	53                   	push   ebx
c0015c4f:	53                   	push   ebx
c0015c50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c54:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015c57:	85 f6                	test   esi,esi
c0015c59:	74 51                	je     c0015cac <sysCallOpenDir(regs*)+0x5f>
c0015c5b:	83 ec 0c             	sub    esp,0xc
c0015c5e:	68 14 01 00 00       	push   0x114
c0015c63:	e8 94 92 ff ff       	call   c000eefc <operator new(unsigned long)>
c0015c68:	83 c4 0c             	add    esp,0xc
c0015c6b:	89 c6                	mov    esi,eax
c0015c6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c72:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c75:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c78:	56                   	push   esi
c0015c79:	e8 5e 9d ff ff       	call   c000f9dc <Directory::Directory(char const*, Process*)>
c0015c7e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015c81:	e8 ba 9d ff ff       	call   c000fa40 <Directory::open()>
c0015c86:	83 c4 10             	add    esp,0x10
c0015c89:	85 c0                	test   eax,eax
c0015c8b:	75 1f                	jne    c0015cac <sysCallOpenDir(regs*)+0x5f>
c0015c8d:	83 ec 0c             	sub    esp,0xc
c0015c90:	56                   	push   esi
c0015c91:	e8 ac 7c ff ff       	call   c000d942 <UnixFile::getFileDescriptor()>
c0015c96:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015c99:	83 c4 10             	add    esp,0x10
c0015c9c:	89 02                	mov    DWORD PTR [edx],eax
c0015c9e:	c1 f8 1f             	sar    eax,0x1f
c0015ca1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ca4:	31 c0                	xor    eax,eax
c0015ca6:	59                   	pop    ecx
c0015ca7:	31 d2                	xor    edx,edx
c0015ca9:	5b                   	pop    ebx
c0015caa:	5e                   	pop    esi
c0015cab:	c3                   	ret    
c0015cac:	59                   	pop    ecx
c0015cad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cb2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cb7:	5b                   	pop    ebx
c0015cb8:	5e                   	pop    esi
c0015cb9:	c3                   	ret    

c0015cba <sysCallMakeDir(regs*)>:
c0015cba:	56                   	push   esi
c0015cbb:	53                   	push   ebx
c0015cbc:	83 ec 10             	sub    esp,0x10
c0015cbf:	68 14 01 00 00       	push   0x114
c0015cc4:	e8 33 92 ff ff       	call   c000eefc <operator new(unsigned long)>
c0015cc9:	83 c4 0c             	add    esp,0xc
c0015ccc:	89 c3                	mov    ebx,eax
c0015cce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cd3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015cd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015cda:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015cdd:	53                   	push   ebx
c0015cde:	e8 f9 9c ff ff       	call   c000f9dc <Directory::Directory(char const*, Process*)>
c0015ce3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ce6:	e8 35 9f ff ff       	call   c000fc20 <Directory::create()>
c0015ceb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cee:	89 c6                	mov    esi,eax
c0015cf0:	e8 a7 9d ff ff       	call   c000fa9c <Directory::close()>
c0015cf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015cf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cfa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015cfd:	31 c0                	xor    eax,eax
c0015cff:	85 f6                	test   esi,esi
c0015d01:	0f 95 c0             	setne  al
c0015d04:	31 d2                	xor    edx,edx
c0015d06:	f7 d8                	neg    eax
c0015d08:	83 d2 00             	adc    edx,0x0
c0015d0b:	83 c4 14             	add    esp,0x14
c0015d0e:	f7 da                	neg    edx
c0015d10:	5b                   	pop    ebx
c0015d11:	5e                   	pop    esi
c0015d12:	c3                   	ret    

c0015d13 <sysCallCloseDir(regs*)>:
c0015d13:	53                   	push   ebx
c0015d14:	83 ec 08             	sub    esp,0x8
c0015d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d1e:	83 f8 02             	cmp    eax,0x2
c0015d21:	76 47                	jbe    c0015d6a <sysCallCloseDir(regs*)+0x57>
c0015d23:	3d 00 ff ff 3f       	cmp    eax,0x3fffff00
c0015d28:	77 2f                	ja     c0015d59 <sysCallCloseDir(regs*)+0x46>
c0015d2a:	83 ec 0c             	sub    esp,0xc
c0015d2d:	50                   	push   eax
c0015d2e:	e8 ba 7e ff ff       	call   c000dbed <getFromFileDescriptor(int)>
c0015d33:	89 c3                	mov    ebx,eax
c0015d35:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d38:	e8 5f 9d ff ff       	call   c000fa9c <Directory::close()>
c0015d3d:	83 c4 10             	add    esp,0x10
c0015d40:	85 db                	test   ebx,ebx
c0015d42:	74 0c                	je     c0015d50 <sysCallCloseDir(regs*)+0x3d>
c0015d44:	83 ec 0c             	sub    esp,0xc
c0015d47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d49:	53                   	push   ebx
c0015d4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d4d:	83 c4 10             	add    esp,0x10
c0015d50:	31 c0                	xor    eax,eax
c0015d52:	31 d2                	xor    edx,edx
c0015d54:	83 c4 08             	add    esp,0x8
c0015d57:	5b                   	pop    ebx
c0015d58:	c3                   	ret    
c0015d59:	83 ec 08             	sub    esp,0x8
c0015d5c:	50                   	push   eax
c0015d5d:	68 80 1a 02 c0       	push   0xc0021a80
c0015d62:	e8 84 92 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015d67:	83 c4 10             	add    esp,0x10
c0015d6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d74:	83 c4 08             	add    esp,0x8
c0015d77:	5b                   	pop    ebx
c0015d78:	c3                   	ret    

c0015d79 <sysCallWait(regs*)>:
c0015d79:	83 ec 10             	sub    esp,0x10
c0015d7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d80:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015d83:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015d86:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015d89:	e8 3e 24 00 00       	call   c00181cc <waitTask(int, int*, int)>
c0015d8e:	83 c4 1c             	add    esp,0x1c
c0015d91:	99                   	cdq    
c0015d92:	c3                   	ret    

c0015d93 <sysCallFork(regs*)>:
c0015d93:	83 ec 18             	sub    esp,0x18
c0015d96:	68 5b 1b 02 c0       	push   0xc0021b5b
c0015d9b:	e8 4b 92 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015da0:	58                   	pop    eax
c0015da1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015da5:	e8 f0 21 00 00       	call   c0017f9a <forkProcess(regs*)>
c0015daa:	83 c4 1c             	add    esp,0x1c
c0015dad:	99                   	cdq    
c0015dae:	c3                   	ret    

c0015daf <sysCallExecve(regs*)>:
c0015daf:	53                   	push   ebx
c0015db0:	81 ec 24 01 00 00    	sub    esp,0x124
c0015db6:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c0015dbd:	68 69 1b 02 c0       	push   0xc0021b69
c0015dc2:	e8 24 92 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0015dc7:	83 c4 0c             	add    esp,0xc
c0015dca:	68 00 01 00 00       	push   0x100
c0015dcf:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015dd3:	50                   	push   eax
c0015dd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dd9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015ddc:	e8 aa 9a ff ff       	call   c000f88b <getcwd(Process*, char*, int)>
c0015de1:	83 c4 0c             	add    esp,0xc
c0015de4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015de7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015dea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015ded:	e8 0e 25 00 00       	call   c0018300 <execveProcess(char const*, char* const*, char* const*)>
c0015df2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015df7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015dfc:	81 c4 28 01 00 00    	add    esp,0x128
c0015e02:	5b                   	pop    ebx
c0015e03:	c3                   	ret    

c0015e04 <sysCallRmdir(regs*)>:
c0015e04:	56                   	push   esi
c0015e05:	53                   	push   ebx
c0015e06:	83 ec 10             	sub    esp,0x10
c0015e09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e0d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e10:	68 14 01 00 00       	push   0x114
c0015e15:	e8 e2 90 ff ff       	call   c000eefc <operator new(unsigned long)>
c0015e1a:	83 c4 0c             	add    esp,0xc
c0015e1d:	89 c3                	mov    ebx,eax
c0015e1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e24:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e27:	56                   	push   esi
c0015e28:	53                   	push   ebx
c0015e29:	e8 ec 96 ff ff       	call   c000f51a <File::File(char const*, Process*)>
c0015e2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e31:	e8 c0 98 ff ff       	call   c000f6f6 <File::unlink()>
c0015e36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e39:	89 c6                	mov    esi,eax
c0015e3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e40:	31 c0                	xor    eax,eax
c0015e42:	85 f6                	test   esi,esi
c0015e44:	0f 95 c0             	setne  al
c0015e47:	31 d2                	xor    edx,edx
c0015e49:	f7 d8                	neg    eax
c0015e4b:	83 d2 00             	adc    edx,0x0
c0015e4e:	83 c4 14             	add    esp,0x14
c0015e51:	f7 da                	neg    edx
c0015e53:	5b                   	pop    ebx
c0015e54:	5e                   	pop    esi
c0015e55:	c3                   	ret    

c0015e56 <sysCallUnlink(regs*)>:
c0015e56:	56                   	push   esi
c0015e57:	53                   	push   ebx
c0015e58:	83 ec 10             	sub    esp,0x10
c0015e5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e5f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e62:	68 14 01 00 00       	push   0x114
c0015e67:	e8 90 90 ff ff       	call   c000eefc <operator new(unsigned long)>
c0015e6c:	83 c4 0c             	add    esp,0xc
c0015e6f:	89 c3                	mov    ebx,eax
c0015e71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e76:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e79:	56                   	push   esi
c0015e7a:	53                   	push   ebx
c0015e7b:	e8 9a 96 ff ff       	call   c000f51a <File::File(char const*, Process*)>
c0015e80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e83:	e8 6e 98 ff ff       	call   c000f6f6 <File::unlink()>
c0015e88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e8b:	89 c6                	mov    esi,eax
c0015e8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e92:	31 c0                	xor    eax,eax
c0015e94:	85 f6                	test   esi,esi
c0015e96:	0f 95 c0             	setne  al
c0015e99:	31 d2                	xor    edx,edx
c0015e9b:	f7 d8                	neg    eax
c0015e9d:	83 d2 00             	adc    edx,0x0
c0015ea0:	83 c4 14             	add    esp,0x14
c0015ea3:	f7 da                	neg    edx
c0015ea5:	5b                   	pop    ebx
c0015ea6:	5e                   	pop    esi
c0015ea7:	c3                   	ret    

c0015ea8 <sysCallGetArgv(regs*)>:
c0015ea8:	83 ec 0c             	sub    esp,0xc
c0015eab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015eaf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015eb2:	85 c0                	test   eax,eax
c0015eb4:	78 2b                	js     c0015ee1 <sysCallGetArgv(regs*)+0x39>
c0015eb6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015ebc:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015ebf:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015ec5:	7d 1a                	jge    c0015ee1 <sysCallGetArgv(regs*)+0x39>
c0015ec7:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015ece:	85 c0                	test   eax,eax
c0015ed0:	74 17                	je     c0015ee9 <sysCallGetArgv(regs*)+0x41>
c0015ed2:	83 ec 08             	sub    esp,0x8
c0015ed5:	50                   	push   eax
c0015ed6:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015ed9:	e8 c9 a7 fe ff       	call   c00006a7 <strcpy>
c0015ede:	83 c4 10             	add    esp,0x10
c0015ee1:	31 c0                	xor    eax,eax
c0015ee3:	31 d2                	xor    edx,edx
c0015ee5:	83 c4 0c             	add    esp,0xc
c0015ee8:	c3                   	ret    
c0015ee9:	b8 01 00 00 00       	mov    eax,0x1
c0015eee:	31 d2                	xor    edx,edx
c0015ef0:	83 c4 0c             	add    esp,0xc
c0015ef3:	c3                   	ret    

c0015ef4 <sysCallTTYName(regs*)>:
c0015ef4:	56                   	push   esi
c0015ef5:	53                   	push   ebx
c0015ef6:	53                   	push   ebx
c0015ef7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015efb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015efe:	85 c0                	test   eax,eax
c0015f00:	74 5f                	je     c0015f61 <sysCallTTYName(regs*)+0x6d>
c0015f02:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015f05:	83 f8 02             	cmp    eax,0x2
c0015f08:	77 3e                	ja     c0015f48 <sysCallTTYName(regs*)+0x54>
c0015f0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f12:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015f18:	85 db                	test   ebx,ebx
c0015f1a:	74 45                	je     c0015f61 <sysCallTTYName(regs*)+0x6d>
c0015f1c:	83 ec 0c             	sub    esp,0xc
c0015f1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f21:	53                   	push   ebx
c0015f22:	ff 10                	call   DWORD PTR [eax]
c0015f24:	83 c4 10             	add    esp,0x10
c0015f27:	84 c0                	test   al,al
c0015f29:	74 41                	je     c0015f6c <sysCallTTYName(regs*)+0x78>
c0015f2b:	83 ec 08             	sub    esp,0x8
c0015f2e:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015f34:	53                   	push   ebx
c0015f35:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015f38:	e8 6a a7 fe ff       	call   c00006a7 <strcpy>
c0015f3d:	83 c4 10             	add    esp,0x10
c0015f40:	31 c0                	xor    eax,eax
c0015f42:	59                   	pop    ecx
c0015f43:	31 d2                	xor    edx,edx
c0015f45:	5b                   	pop    ebx
c0015f46:	5e                   	pop    esi
c0015f47:	c3                   	ret    
c0015f48:	3d 01 ff ff 3f       	cmp    eax,0x3fffff01
c0015f4d:	74 bb                	je     c0015f0a <sysCallTTYName(regs*)+0x16>
c0015f4f:	83 ec 0c             	sub    esp,0xc
c0015f52:	50                   	push   eax
c0015f53:	e8 95 7c ff ff       	call   c000dbed <getFromFileDescriptor(int)>
c0015f58:	83 c4 10             	add    esp,0x10
c0015f5b:	89 c3                	mov    ebx,eax
c0015f5d:	85 db                	test   ebx,ebx
c0015f5f:	75 bb                	jne    c0015f1c <sysCallTTYName(regs*)+0x28>
c0015f61:	59                   	pop    ecx
c0015f62:	b8 01 00 00 00       	mov    eax,0x1
c0015f67:	31 d2                	xor    edx,edx
c0015f69:	5b                   	pop    ebx
c0015f6a:	5e                   	pop    esi
c0015f6b:	c3                   	ret    
c0015f6c:	59                   	pop    ecx
c0015f6d:	b8 02 00 00 00       	mov    eax,0x2
c0015f72:	31 d2                	xor    edx,edx
c0015f74:	5b                   	pop    ebx
c0015f75:	5e                   	pop    esi
c0015f76:	c3                   	ret    

c0015f77 <sysCallGetEnv(regs*)>:
c0015f77:	83 ec 0c             	sub    esp,0xc
c0015f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f7e:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015f81:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015f84:	85 c9                	test   ecx,ecx
c0015f86:	75 0c                	jne    c0015f94 <sysCallGetEnv(regs*)+0x1d>
c0015f88:	85 d2                	test   edx,edx
c0015f8a:	74 14                	je     c0015fa0 <sysCallGetEnv(regs*)+0x29>
c0015f8c:	31 c0                	xor    eax,eax
c0015f8e:	31 d2                	xor    edx,edx
c0015f90:	83 c4 0c             	add    esp,0xc
c0015f93:	c3                   	ret    
c0015f94:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015f97:	85 d2                	test   edx,edx
c0015f99:	74 1b                	je     c0015fb6 <sysCallGetEnv(regs*)+0x3f>
c0015f9b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015f9e:	eb ec                	jmp    c0015f8c <sysCallGetEnv(regs*)+0x15>
c0015fa0:	83 ec 0c             	sub    esp,0xc
c0015fa3:	68 a4 1a 02 c0       	push   0xc0021aa4
c0015fa8:	e8 78 a6 fe ff       	call   c0000625 <strlen>
c0015fad:	83 c4 10             	add    esp,0x10
c0015fb0:	31 d2                	xor    edx,edx
c0015fb2:	83 c4 0c             	add    esp,0xc
c0015fb5:	c3                   	ret    
c0015fb6:	83 ec 08             	sub    esp,0x8
c0015fb9:	68 a4 1a 02 c0       	push   0xc0021aa4
c0015fbe:	50                   	push   eax
c0015fbf:	e8 e3 a6 fe ff       	call   c00006a7 <strcpy>
c0015fc4:	83 c4 10             	add    esp,0x10
c0015fc7:	eb c3                	jmp    c0015f8c <sysCallGetEnv(regs*)+0x15>

c0015fc9 <sysCallUSleep(regs*)>:
c0015fc9:	83 ec 14             	sub    esp,0x14
c0015fcc:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015fd1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015fd5:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015fdc:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015fdf:	01 ca                	add    edx,ecx
c0015fe1:	52                   	push   edx
c0015fe2:	50                   	push   eax
c0015fe3:	e8 7d 22 00 00       	call   c0018265 <nanoSleep(unsigned long long)>
c0015fe8:	31 c0                	xor    eax,eax
c0015fea:	31 d2                	xor    edx,edx
c0015fec:	83 c4 1c             	add    esp,0x1c
c0015fef:	c3                   	ret    

c0015ff0 <sysCallSpawn(regs*)>:
c0015ff0:	56                   	push   esi
c0015ff1:	53                   	push   ebx
c0015ff2:	53                   	push   ebx
c0015ff3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ff7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015ffa:	85 f6                	test   esi,esi
c0015ffc:	75 08                	jne    c0016006 <sysCallSpawn(regs*)+0x16>
c0015ffe:	59                   	pop    ecx
c0015fff:	31 c0                	xor    eax,eax
c0016001:	31 d2                	xor    edx,edx
c0016003:	5b                   	pop    ebx
c0016004:	5e                   	pop    esi
c0016005:	c3                   	ret    
c0016006:	83 ec 0c             	sub    esp,0xc
c0016009:	68 79 1b 02 c0       	push   0xc0021b79
c001600e:	e8 d8 8f ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0016013:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c001601a:	e8 dd 8e ff ff       	call   c000eefc <operator new(unsigned long)>
c001601f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016022:	89 c6                	mov    esi,eax
c0016024:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016029:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001602c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001602f:	56                   	push   esi
c0016030:	e8 1f 18 00 00       	call   c0017854 <Process::Process(char const*, Process*, char**)>
c0016035:	83 c4 20             	add    esp,0x20
c0016038:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001603f:	75 bd                	jne    c0015ffe <sysCallSpawn(regs*)+0xe>
c0016041:	83 ec 0c             	sub    esp,0xc
c0016044:	68 84 1b 02 c0       	push   0xc0021b84
c0016049:	e8 9d 8f ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001604e:	89 34 24             	mov    DWORD PTR [esp],esi
c0016051:	e8 64 1d 00 00       	call   c0017dba <Process::createUserThread()>
c0016056:	8b 06                	mov    eax,DWORD PTR [esi]
c0016058:	83 c4 10             	add    esp,0x10
c001605b:	99                   	cdq    
c001605c:	59                   	pop    ecx
c001605d:	5b                   	pop    ebx
c001605e:	5e                   	pop    esi
c001605f:	c3                   	ret    

c0016060 <sysAppSettings(regs*)>:
c0016060:	53                   	push   ebx
c0016061:	83 ec 08             	sub    esp,0x8
c0016064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016068:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001606b:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0016071:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016076:	66 3d c0 09          	cmp    ax,0x9c0
c001607a:	75 2f                	jne    c00160ab <sysAppSettings(regs*)+0x4b>
c001607c:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016082:	83 e0 1f             	and    eax,0x1f
c0016085:	3c 01                	cmp    al,0x1
c0016087:	74 2e                	je     c00160b7 <sysAppSettings(regs*)+0x57>
c0016089:	3c 07                	cmp    al,0x7
c001608b:	0f 84 bd 00 00 00    	je     c001614e <sysAppSettings(regs*)+0xee>
c0016091:	84 c0                	test   al,al
c0016093:	0f 84 dc 00 00 00    	je     c0016175 <sysAppSettings(regs*)+0x115>
c0016099:	3c 08                	cmp    al,0x8
c001609b:	74 6d                	je     c001610a <sysAppSettings(regs*)+0xaa>
c001609d:	0f b6 c0             	movzx  eax,al
c00160a0:	83 c4 08             	add    esp,0x8
c00160a3:	05 e8 03 00 00       	add    eax,0x3e8
c00160a8:	5b                   	pop    ebx
c00160a9:	99                   	cdq    
c00160aa:	c3                   	ret    
c00160ab:	b8 01 00 00 00       	mov    eax,0x1
c00160b0:	31 d2                	xor    edx,edx
c00160b2:	83 c4 08             	add    esp,0x8
c00160b5:	5b                   	pop    ebx
c00160b6:	c3                   	ret    
c00160b7:	51                   	push   ecx
c00160b8:	68 00 01 00 00       	push   0x100
c00160bd:	6a 00                	push   0x0
c00160bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160c7:	83 c0 0c             	add    eax,0xc
c00160ca:	50                   	push   eax
c00160cb:	e8 38 a5 fe ff       	call   c0000608 <memset>
c00160d0:	83 c4 0c             	add    esp,0xc
c00160d3:	68 ff 00 00 00       	push   0xff
c00160d8:	53                   	push   ebx
c00160d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160e1:	83 c0 0c             	add    eax,0xc
c00160e4:	50                   	push   eax
c00160e5:	e8 e8 a4 fe ff       	call   c00005d2 <memcpy>
c00160ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160ef:	5b                   	pop    ebx
c00160f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160f3:	5a                   	pop    edx
c00160f4:	8d 50 0c             	lea    edx,[eax+0xc]
c00160f7:	52                   	push   edx
c00160f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00160fe:	e8 3d 6c ff ff       	call   c000cd40 <VgaText::setTitle(char*)>
c0016103:	83 c4 10             	add    esp,0x10
c0016106:	31 c0                	xor    eax,eax
c0016108:	eb a6                	jmp    c00160b0 <sysAppSettings(regs*)+0x50>
c001610a:	83 ec 08             	sub    esp,0x8
c001610d:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016113:	83 e0 0f             	and    eax,0xf
c0016116:	50                   	push   eax
c0016117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001611c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001611f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016125:	e8 06 6c ff ff       	call   c000cd30 <VgaText::setTitleColour(VgaColour)>
c001612a:	58                   	pop    eax
c001612b:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016131:	5a                   	pop    edx
c0016132:	c1 e8 04             	shr    eax,0x4
c0016135:	83 e0 0f             	and    eax,0xf
c0016138:	50                   	push   eax
c0016139:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001613e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016141:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016147:	e8 d4 6b ff ff       	call   c000cd20 <VgaText::setTitleTextColour(VgaColour)>
c001614c:	eb b5                	jmp    c0016103 <sysAppSettings(regs*)+0xa3>
c001614e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016153:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016156:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001615c:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016162:	c0 e8 06             	shr    al,0x6
c0016165:	83 e0 01             	and    eax,0x1
c0016168:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001616e:	31 c0                	xor    eax,eax
c0016170:	e9 3b ff ff ff       	jmp    c00160b0 <sysAppSettings(regs*)+0x50>
c0016175:	b8 02 00 00 00       	mov    eax,0x2
c001617a:	e9 31 ff ff ff       	jmp    c00160b0 <sysAppSettings(regs*)+0x50>

c001617f <sysSetFatAttrib(regs*)>:
c001617f:	57                   	push   edi
c0016180:	56                   	push   esi
c0016181:	53                   	push   ebx
c0016182:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016186:	83 ec 0c             	sub    esp,0xc
c0016189:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001618c:	68 14 01 00 00       	push   0x114
c0016191:	e8 66 8d ff ff       	call   c000eefc <operator new(unsigned long)>
c0016196:	83 c4 0c             	add    esp,0xc
c0016199:	89 c3                	mov    ebx,eax
c001619b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161a0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00161a3:	57                   	push   edi
c00161a4:	53                   	push   ebx
c00161a5:	e8 70 93 ff ff       	call   c000f51a <File::File(char const*, Process*)>
c00161aa:	83 c4 0c             	add    esp,0xc
c00161ad:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00161b0:	0f b6 d4             	movzx  edx,ah
c00161b3:	0f b6 c0             	movzx  eax,al
c00161b6:	52                   	push   edx
c00161b7:	50                   	push   eax
c00161b8:	53                   	push   ebx
c00161b9:	e8 d2 95 ff ff       	call   c000f790 <File::chfatattr(unsigned char, unsigned char)>
c00161be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161c1:	89 c6                	mov    esi,eax
c00161c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161c8:	83 c4 10             	add    esp,0x10
c00161cb:	31 c0                	xor    eax,eax
c00161cd:	5b                   	pop    ebx
c00161ce:	85 f6                	test   esi,esi
c00161d0:	5e                   	pop    esi
c00161d1:	0f 95 c0             	setne  al
c00161d4:	5f                   	pop    edi
c00161d5:	31 d2                	xor    edx,edx
c00161d7:	f7 d8                	neg    eax
c00161d9:	83 d2 00             	adc    edx,0x0
c00161dc:	f7 da                	neg    edx
c00161de:	c3                   	ret    

c00161df <sysPanic(regs*)>:
c00161df:	83 ec 18             	sub    esp,0x18
c00161e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161e6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00161e9:	e8 92 ea ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c00161ee:	c7 04 24 91 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b91
c00161f5:	e8 86 ea ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c00161fa:	b8 01 00 00 00       	mov    eax,0x1
c00161ff:	31 d2                	xor    edx,edx
c0016201:	83 c4 1c             	add    esp,0x1c
c0016204:	c3                   	ret    

c0016205 <sysPipe(regs*)>:
c0016205:	57                   	push   edi
c0016206:	56                   	push   esi
c0016207:	53                   	push   ebx
c0016208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001620c:	83 ec 0c             	sub    esp,0xc
c001620f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016212:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016215:	6a 20                	push   0x20
c0016217:	e8 e0 8c ff ff       	call   c000eefc <operator new(unsigned long)>
c001621c:	89 c3                	mov    ebx,eax
c001621e:	58                   	pop    eax
c001621f:	5a                   	pop    edx
c0016220:	68 00 50 00 00       	push   0x5000
c0016225:	53                   	push   ebx
c0016226:	e8 53 64 ff ff       	call   c000c67e <Pipe::Pipe(int)>
c001622b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001622e:	e8 0f 77 ff ff       	call   c000d942 <UnixFile::getFileDescriptor()>
c0016233:	89 07                	mov    DWORD PTR [edi],eax
c0016235:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016238:	e8 05 77 ff ff       	call   c000d942 <UnixFile::getFileDescriptor()>
c001623d:	83 c4 10             	add    esp,0x10
c0016240:	89 06                	mov    DWORD PTR [esi],eax
c0016242:	31 d2                	xor    edx,edx
c0016244:	5b                   	pop    ebx
c0016245:	31 c0                	xor    eax,eax
c0016247:	5e                   	pop    esi
c0016248:	5f                   	pop    edi
c0016249:	c3                   	ret    

c001624a <sysGetUnixTime(regs*)>:
c001624a:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c001624f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016255:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016259:	e9 84 9c ff ff       	jmp    c000fee2 <Clock::timeInSecondsLocal()>

c001625e <string_ends_with(char const*, char const*)>:
c001625e:	57                   	push   edi
c001625f:	56                   	push   esi
c0016260:	53                   	push   ebx
c0016261:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016265:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016269:	83 ec 0c             	sub    esp,0xc
c001626c:	53                   	push   ebx
c001626d:	e8 b3 a3 fe ff       	call   c0000625 <strlen>
c0016272:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016275:	89 c6                	mov    esi,eax
c0016277:	e8 a9 a3 fe ff       	call   c0000625 <strlen>
c001627c:	83 c4 10             	add    esp,0x10
c001627f:	39 c6                	cmp    esi,eax
c0016281:	7d 06                	jge    c0016289 <string_ends_with(char const*, char const*)+0x2b>
c0016283:	5b                   	pop    ebx
c0016284:	31 c0                	xor    eax,eax
c0016286:	5e                   	pop    esi
c0016287:	5f                   	pop    edi
c0016288:	c3                   	ret    
c0016289:	83 ec 08             	sub    esp,0x8
c001628c:	29 c6                	sub    esi,eax
c001628e:	57                   	push   edi
c001628f:	01 f3                	add    ebx,esi
c0016291:	53                   	push   ebx
c0016292:	e8 61 a4 fe ff       	call   c00006f8 <strcmp>
c0016297:	83 c4 10             	add    esp,0x10
c001629a:	85 c0                	test   eax,eax
c001629c:	5b                   	pop    ebx
c001629d:	0f 94 c0             	sete   al
c00162a0:	5e                   	pop    esi
c00162a1:	0f b6 c0             	movzx  eax,al
c00162a4:	5f                   	pop    edi
c00162a5:	c3                   	ret    

c00162a6 <sysCallOpen(regs*)>:
c00162a6:	56                   	push   esi
c00162a7:	53                   	push   ebx
c00162a8:	81 ec 04 01 00 00    	sub    esp,0x104
c00162ae:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00162b5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00162b8:	85 d2                	test   edx,edx
c00162ba:	0f 84 b0 00 00 00    	je     c0016370 <sysCallOpen(regs*)+0xca>
c00162c0:	50                   	push   eax
c00162c1:	68 a0 1b 02 c0       	push   0xc0021ba0
c00162c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162c9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00162cd:	56                   	push   esi
c00162ce:	e8 9d 90 ff ff       	call   c000f370 <standardiseFiles(char*, char const*, char const*)>
c00162d3:	89 34 24             	mov    DWORD PTR [esp],esi
c00162d6:	e8 4a a3 fe ff       	call   c0000625 <strlen>
c00162db:	83 c4 10             	add    esp,0x10
c00162de:	48                   	dec    eax
c00162df:	74 1d                	je     c00162fe <sysCallOpen(regs*)+0x58>
c00162e1:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00162e4:	eb 0f                	jmp    c00162f5 <sysCallOpen(regs*)+0x4f>
c00162e6:	80 fa 3a             	cmp    dl,0x3a
c00162e9:	74 0f                	je     c00162fa <sysCallOpen(regs*)+0x54>
c00162eb:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00162ef:	48                   	dec    eax
c00162f0:	74 0c                	je     c00162fe <sysCallOpen(regs*)+0x58>
c00162f2:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00162f5:	80 fa 2e             	cmp    dl,0x2e
c00162f8:	75 ec                	jne    c00162e6 <sysCallOpen(regs*)+0x40>
c00162fa:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00162fe:	83 ec 08             	sub    esp,0x8
c0016301:	68 a4 1b 02 c0       	push   0xc0021ba4
c0016306:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016309:	e8 50 ff ff ff       	call   c001625e <string_ends_with(char const*, char const*)>
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	85 c0                	test   eax,eax
c0016313:	75 2e                	jne    c0016343 <sysCallOpen(regs*)+0x9d>
c0016315:	83 ec 08             	sub    esp,0x8
c0016318:	68 b6 1b 02 c0       	push   0xc0021bb6
c001631d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016320:	e8 39 ff ff ff       	call   c001625e <string_ends_with(char const*, char const*)>
c0016325:	83 c4 10             	add    esp,0x10
c0016328:	85 c0                	test   eax,eax
c001632a:	75 17                	jne    c0016343 <sysCallOpen(regs*)+0x9d>
c001632c:	83 ec 08             	sub    esp,0x8
c001632f:	68 a5 1b 02 c0       	push   0xc0021ba5
c0016334:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016337:	e8 bc a3 fe ff       	call   c00006f8 <strcmp>
c001633c:	83 c4 10             	add    esp,0x10
c001633f:	85 c0                	test   eax,eax
c0016341:	75 40                	jne    c0016383 <sysCallOpen(regs*)+0xdd>
c0016343:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016346:	83 ec 0c             	sub    esp,0xc
c0016349:	c7 00 01 ff ff 3f    	mov    DWORD PTR [eax],0x3fffff01
c001634f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016356:	68 a9 1b 02 c0       	push   0xc0021ba9
c001635b:	e8 8b 8c ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0016360:	83 c4 10             	add    esp,0x10
c0016363:	81 c4 04 01 00 00    	add    esp,0x104
c0016369:	31 c0                	xor    eax,eax
c001636b:	31 d2                	xor    edx,edx
c001636d:	5b                   	pop    ebx
c001636e:	5e                   	pop    esi
c001636f:	c3                   	ret    
c0016370:	81 c4 04 01 00 00    	add    esp,0x104
c0016376:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001637b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016380:	5b                   	pop    ebx
c0016381:	5e                   	pop    esi
c0016382:	c3                   	ret    
c0016383:	83 ec 08             	sub    esp,0x8
c0016386:	68 a4 1b 02 c0       	push   0xc0021ba4
c001638b:	56                   	push   esi
c001638c:	e8 cd fe ff ff       	call   c001625e <string_ends_with(char const*, char const*)>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	85 c0                	test   eax,eax
c0016396:	75 ab                	jne    c0016343 <sysCallOpen(regs*)+0x9d>
c0016398:	83 ec 08             	sub    esp,0x8
c001639b:	68 bb 1b 02 c0       	push   0xc0021bbb
c00163a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163a3:	e8 b6 fe ff ff       	call   c001625e <string_ends_with(char const*, char const*)>
c00163a8:	83 c4 10             	add    esp,0x10
c00163ab:	85 c0                	test   eax,eax
c00163ad:	0f 85 d1 00 00 00    	jne    c0016484 <sysCallOpen(regs*)+0x1de>
c00163b3:	83 ec 08             	sub    esp,0x8
c00163b6:	68 c0 1b 02 c0       	push   0xc0021bc0
c00163bb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163be:	e8 9b fe ff ff       	call   c001625e <string_ends_with(char const*, char const*)>
c00163c3:	83 c4 10             	add    esp,0x10
c00163c6:	85 c0                	test   eax,eax
c00163c8:	0f 85 b6 00 00 00    	jne    c0016484 <sysCallOpen(regs*)+0x1de>
c00163ce:	83 ec 08             	sub    esp,0x8
c00163d1:	68 bc 1b 02 c0       	push   0xc0021bbc
c00163d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163d9:	e8 1a a3 fe ff       	call   c00006f8 <strcmp>
c00163de:	83 c4 10             	add    esp,0x10
c00163e1:	85 c0                	test   eax,eax
c00163e3:	0f 84 9b 00 00 00    	je     c0016484 <sysCallOpen(regs*)+0x1de>
c00163e9:	83 ec 08             	sub    esp,0x8
c00163ec:	68 bb 1b 02 c0       	push   0xc0021bbb
c00163f1:	56                   	push   esi
c00163f2:	e8 67 fe ff ff       	call   c001625e <string_ends_with(char const*, char const*)>
c00163f7:	83 c4 10             	add    esp,0x10
c00163fa:	85 c0                	test   eax,eax
c00163fc:	0f 85 82 00 00 00    	jne    c0016484 <sysCallOpen(regs*)+0x1de>
c0016402:	83 ec 0c             	sub    esp,0xc
c0016405:	68 14 01 00 00       	push   0x114
c001640a:	e8 ed 8a ff ff       	call   c000eefc <operator new(unsigned long)>
c001640f:	83 c4 0c             	add    esp,0xc
c0016412:	89 c6                	mov    esi,eax
c0016414:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016419:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001641c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001641f:	56                   	push   esi
c0016420:	e8 f5 90 ff ff       	call   c000f51a <File::File(char const*, Process*)>
c0016425:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016428:	83 c4 10             	add    esp,0x10
c001642b:	0f b6 c2             	movzx  eax,dl
c001642e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016431:	89 d0                	mov    eax,edx
c0016433:	83 e0 01             	and    eax,0x1
c0016436:	f6 c2 02             	test   dl,0x2
c0016439:	74 03                	je     c001643e <sysCallOpen(regs*)+0x198>
c001643b:	83 c8 02             	or     eax,0x2
c001643e:	f6 c2 04             	test   dl,0x4
c0016441:	74 03                	je     c0016446 <sysCallOpen(regs*)+0x1a0>
c0016443:	83 c8 04             	or     eax,0x4
c0016446:	f6 c2 08             	test   dl,0x8
c0016449:	74 03                	je     c001644e <sysCallOpen(regs*)+0x1a8>
c001644b:	83 c8 0a             	or     eax,0xa
c001644e:	83 e2 10             	and    edx,0x10
c0016451:	74 03                	je     c0016456 <sysCallOpen(regs*)+0x1b0>
c0016453:	83 c8 12             	or     eax,0x12
c0016456:	83 ec 08             	sub    esp,0x8
c0016459:	50                   	push   eax
c001645a:	56                   	push   esi
c001645b:	e8 1e 91 ff ff       	call   c000f57e <File::open(FileOpenMode)>
c0016460:	83 c4 10             	add    esp,0x10
c0016463:	85 c0                	test   eax,eax
c0016465:	0f 85 05 ff ff ff    	jne    c0016370 <sysCallOpen(regs*)+0xca>
c001646b:	83 ec 0c             	sub    esp,0xc
c001646e:	56                   	push   esi
c001646f:	e8 ce 74 ff ff       	call   c000d942 <UnixFile::getFileDescriptor()>
c0016474:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016477:	89 02                	mov    DWORD PTR [edx],eax
c0016479:	c1 f8 1f             	sar    eax,0x1f
c001647c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001647f:	e9 dc fe ff ff       	jmp    c0016360 <sysCallOpen(regs*)+0xba>
c0016484:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016487:	c7 00 00 ff ff 3f    	mov    DWORD PTR [eax],0x3fffff00
c001648d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016494:	e9 ca fe ff ff       	jmp    c0016363 <sysCallOpen(regs*)+0xbd>

c0016499 <setupSystemCalls()>:
c0016499:	c7 05 80 41 02 c0 9c 56 01 c0 	mov    DWORD PTR ds:0xc0024180,0xc001569c
c00164a3:	c7 05 84 41 02 c0 af 54 01 c0 	mov    DWORD PTR ds:0xc0024184,0xc00154af
c00164ad:	c7 05 88 41 02 c0 c4 55 01 c0 	mov    DWORD PTR ds:0xc0024188,0xc00155c4
c00164b7:	c7 05 8c 41 02 c0 19 56 01 c0 	mov    DWORD PTR ds:0xc002418c,0xc0015619
c00164c1:	c7 05 90 41 02 c0 5c 55 01 c0 	mov    DWORD PTR ds:0xc0024190,0xc001555c
c00164cb:	c7 05 94 41 02 c0 b6 56 01 c0 	mov    DWORD PTR ds:0xc0024194,0xc00156b6
c00164d5:	c7 05 98 41 02 c0 45 58 01 c0 	mov    DWORD PTR ds:0xc0024198,0xc0015845
c00164df:	c7 05 9c 41 02 c0 64 58 01 c0 	mov    DWORD PTR ds:0xc002419c,0xc0015864
c00164e9:	c7 05 a4 41 02 c0 c5 5b 01 c0 	mov    DWORD PTR ds:0xc00241a4,0xc0015bc5
c00164f3:	c7 05 a0 41 02 c0 a6 62 01 c0 	mov    DWORD PTR ds:0xc00241a0,0xc00162a6
c00164fd:	c7 05 a8 41 02 c0 4d 5c 01 c0 	mov    DWORD PTR ds:0xc00241a8,0xc0015c4d
c0016507:	c7 05 ac 41 02 c0 c3 58 01 c0 	mov    DWORD PTR ds:0xc00241ac,0xc00158c3
c0016511:	c7 05 b0 41 02 c0 c2 56 01 c0 	mov    DWORD PTR ds:0xc00241b0,0xc00156c2
c001651b:	c7 05 b4 41 02 c0 c7 56 01 c0 	mov    DWORD PTR ds:0xc00241b4,0xc00156c7
c0016525:	c7 05 b8 41 02 c0 ba 5c 01 c0 	mov    DWORD PTR ds:0xc00241b8,0xc0015cba
c001652f:	c7 05 bc 41 02 c0 13 5d 01 c0 	mov    DWORD PTR ds:0xc00241bc,0xc0015d13
c0016539:	c7 05 c0 41 02 c0 ab 59 01 c0 	mov    DWORD PTR ds:0xc00241c0,0xc00159ab
c0016543:	c7 05 c4 41 02 c0 14 5a 01 c0 	mov    DWORD PTR ds:0xc00241c4,0xc0015a14
c001654d:	c7 05 c8 41 02 c0 42 5b 01 c0 	mov    DWORD PTR ds:0xc00241c8,0xc0015b42
c0016557:	c7 05 cc 41 02 c0 cc 56 01 c0 	mov    DWORD PTR ds:0xc00241cc,0xc00156cc
c0016561:	c7 05 d0 41 02 c0 79 5d 01 c0 	mov    DWORD PTR ds:0xc00241d0,0xc0015d79
c001656b:	c7 05 d4 41 02 c0 93 5d 01 c0 	mov    DWORD PTR ds:0xc00241d4,0xc0015d93
c0016575:	c7 05 d8 41 02 c0 af 5d 01 c0 	mov    DWORD PTR ds:0xc00241d8,0xc0015daf
c001657f:	c7 05 dc 41 02 c0 04 5e 01 c0 	mov    DWORD PTR ds:0xc00241dc,0xc0015e04
c0016589:	c7 05 e0 41 02 c0 56 5e 01 c0 	mov    DWORD PTR ds:0xc00241e0,0xc0015e56
c0016593:	c7 05 e4 41 02 c0 d6 56 01 c0 	mov    DWORD PTR ds:0xc00241e4,0xc00156d6
c001659d:	c7 05 e8 41 02 c0 a8 5e 01 c0 	mov    DWORD PTR ds:0xc00241e8,0xc0015ea8
c00165a7:	c7 05 ec 41 02 c0 80 58 01 c0 	mov    DWORD PTR ds:0xc00241ec,0xc0015880
c00165b1:	c7 05 f0 41 02 c0 f4 5e 01 c0 	mov    DWORD PTR ds:0xc00241f0,0xc0015ef4
c00165bb:	c7 05 f4 41 02 c0 51 59 01 c0 	mov    DWORD PTR ds:0xc00241f4,0xc0015951
c00165c5:	c7 05 f8 41 02 c0 c9 5f 01 c0 	mov    DWORD PTR ds:0xc00241f8,0xc0015fc9
c00165cf:	c7 05 fc 41 02 c0 91 5a 01 c0 	mov    DWORD PTR ds:0xc00241fc,0xc0015a91
c00165d9:	c7 05 00 42 02 c0 f0 5f 01 c0 	mov    DWORD PTR ds:0xc0024200,0xc0015ff0
c00165e3:	c7 05 04 42 02 c0 77 5f 01 c0 	mov    DWORD PTR ds:0xc0024204,0xc0015f77
c00165ed:	c7 05 08 42 02 c0 60 60 01 c0 	mov    DWORD PTR ds:0xc0024208,0xc0016060
c00165f7:	c7 05 0c 42 02 c0 e6 56 01 c0 	mov    DWORD PTR ds:0xc002420c,0xc00156e6
c0016601:	c7 05 10 42 02 c0 50 57 01 c0 	mov    DWORD PTR ds:0xc0024210,0xc0015750
c001660b:	c7 05 14 42 02 c0 96 57 01 c0 	mov    DWORD PTR ds:0xc0024214,0xc0015796
c0016615:	c7 05 18 42 02 c0 7f 61 01 c0 	mov    DWORD PTR ds:0xc0024218,0xc001617f
c001661f:	c7 05 1c 42 02 c0 df 61 01 c0 	mov    DWORD PTR ds:0xc002421c,0xc00161df
c0016629:	c7 05 20 42 02 c0 e7 57 01 c0 	mov    DWORD PTR ds:0xc0024220,0xc00157e7
c0016633:	c7 05 24 42 02 c0 05 62 01 c0 	mov    DWORD PTR ds:0xc0024224,0xc0016205
c001663d:	c7 05 28 42 02 c0 4a 62 01 c0 	mov    DWORD PTR ds:0xc0024228,0xc001624a
c0016647:	c7 05 2c 42 02 c0 c7 54 01 c0 	mov    DWORD PTR ds:0xc002422c,0xc00154c7
c0016651:	c3                   	ret    

c0016652 <systemCall(regs*, void*)>:
c0016652:	53                   	push   ebx
c0016653:	83 ec 08             	sub    esp,0x8
c0016656:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001665a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001665d:	83 f8 7f             	cmp    eax,0x7f
c0016660:	77 16                	ja     c0016678 <systemCall(regs*, void*)+0x26>
c0016662:	8b 14 85 80 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbe80]
c0016669:	85 d2                	test   edx,edx
c001666b:	74 0b                	je     c0016678 <systemCall(regs*, void*)+0x26>
c001666d:	83 ec 0c             	sub    esp,0xc
c0016670:	53                   	push   ebx
c0016671:	ff d2                	call   edx
c0016673:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016676:	eb 0d                	jmp    c0016685 <systemCall(regs*, void*)+0x33>
c0016678:	52                   	push   edx
c0016679:	52                   	push   edx
c001667a:	50                   	push   eax
c001667b:	68 c5 1b 02 c0       	push   0xc0021bc5
c0016680:	e8 66 89 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0016685:	83 c4 10             	add    esp,0x10
c0016688:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001668d:	31 d2                	xor    edx,edx
c001668f:	83 c4 08             	add    esp,0x8
c0016692:	5b                   	pop    ebx
c0016693:	c3                   	ret    

c0016694 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016694:	55                   	push   ebp
c0016695:	89 e5                	mov    ebp,esp
c0016697:	57                   	push   edi
c0016698:	56                   	push   esi
c0016699:	53                   	push   ebx
c001669a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00166a0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00166a3:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00166a6:	85 c0                	test   eax,eax
c00166a8:	0f 95 c1             	setne  cl
c00166ab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00166af:	0f 94 c2             	sete   dl
c00166b2:	84 d1                	test   cl,dl
c00166b4:	74 26                	je     c00166dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00166b6:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00166bd:	74 1d                	je     c00166dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00166bf:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00166c2:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c00166c8:	89 d6                	mov    esi,edx
c00166ca:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00166d0:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c00166d6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00166d9:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c00166dc:	83 ec 0c             	sub    esp,0xc
c00166df:	05 ff 0f 00 00       	add    eax,0xfff
c00166e4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00166e7:	6a 01                	push   0x1
c00166e9:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00166ef:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00166f5:	e8 71 76 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c00166fa:	83 c4 10             	add    esp,0x10
c00166fd:	89 c6                	mov    esi,eax
c00166ff:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0016705:	0f 86 21 01 00 00    	jbe    c001682c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001670b:	c1 eb 0c             	shr    ebx,0xc
c001670e:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0016718:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001671e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016721:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016724:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001672a:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001672d:	29 d8                	sub    eax,ebx
c001672f:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0016735:	0f 83 f4 00 00 00    	jae    c001682f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001673b:	83 ec 0c             	sub    esp,0xc
c001673e:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0016744:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016747:	3d 00 10 00 00       	cmp    eax,0x1000
c001674c:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001674e:	52                   	push   edx
c001674f:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0016755:	52                   	push   edx
c0016756:	76 05                	jbe    c001675d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c0016758:	b8 00 10 00 00       	mov    eax,0x1000
c001675d:	31 d2                	xor    edx,edx
c001675f:	52                   	push   edx
c0016760:	50                   	push   eax
c0016761:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0016764:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016767:	83 c4 20             	add    esp,0x20
c001676a:	85 c0                	test   eax,eax
c001676c:	74 1f                	je     c001678d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001676e:	51                   	push   ecx
c001676f:	51                   	push   ecx
c0016770:	50                   	push   eax
c0016771:	68 d9 1b 02 c0       	push   0xc0021bd9
c0016776:	e8 70 88 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001677b:	89 34 24             	mov    DWORD PTR [esp],esi
c001677e:	e8 1e 79 ff ff       	call   c000e0a1 <Virt::freeKernelVirtualPages(unsigned long)>
c0016783:	83 c4 10             	add    esp,0x10
c0016786:	31 c0                	xor    eax,eax
c0016788:	e9 7c 01 00 00       	jmp    c0016909 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001678d:	e8 1a 14 00 00       	call   c0017bac <lockScheduler()>
c0016792:	e8 31 5a ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0016797:	6a 07                	push   0x7
c0016799:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001679f:	56                   	push   esi
c00167a0:	50                   	push   eax
c00167a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167a7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00167aa:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00167b0:	e8 ed 7b ff ff       	call   c000e3a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00167b5:	83 c4 0c             	add    esp,0xc
c00167b8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00167be:	6a 00                	push   0x0
c00167c0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167c6:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00167c9:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00167cf:	e8 2c 7a ff ff       	call   c000e200 <VAS::mapOtherVASIn(bool, VAS*)>
c00167d4:	58                   	pop    eax
c00167d5:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00167db:	5a                   	pop    edx
c00167dc:	68 07 04 00 00       	push   0x407
c00167e1:	53                   	push   ebx
c00167e2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00167e8:	50                   	push   eax
c00167e9:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00167ef:	6a 00                	push   0x0
c00167f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00167ff:	e8 9e 82 ff ff       	call   c000eaa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016804:	83 c4 1c             	add    esp,0x1c
c0016807:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001680d:	68 00 10 00 00       	push   0x1000
c0016812:	50                   	push   eax
c0016813:	56                   	push   esi
c0016814:	e8 b9 9d fe ff       	call   c00005d2 <memcpy>
c0016819:	e8 90 13 00 00       	call   c0017bae <unlockScheduler()>
c001681e:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0016824:	83 c4 10             	add    esp,0x10
c0016827:	e9 f5 fe ff ff       	jmp    c0016721 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001682c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001682f:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0016839:	0f 86 bc 00 00 00    	jbe    c00168fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001683f:	e8 68 13 00 00       	call   c0017bac <lockScheduler()>
c0016844:	51                   	push   ecx
c0016845:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001684b:	6a 00                	push   0x0
c001684d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016852:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016855:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001685b:	e8 a0 79 ff ff       	call   c000e200 <VAS::mapOtherVASIn(bool, VAS*)>
c0016860:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0016866:	83 c4 10             	add    esp,0x10
c0016869:	c1 e8 0c             	shr    eax,0xc
c001686c:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0016876:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001687c:	e8 47 59 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0016881:	6a 07                	push   0x7
c0016883:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0016889:	56                   	push   esi
c001688a:	50                   	push   eax
c001688b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016891:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016894:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001689a:	e8 03 7b ff ff       	call   c000e3a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001689f:	58                   	pop    eax
c00168a0:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00168a6:	5a                   	pop    edx
c00168a7:	68 07 04 00 00       	push   0x407
c00168ac:	53                   	push   ebx
c00168ad:	81 c3 00 10 00 00    	add    ebx,0x1000
c00168b3:	50                   	push   eax
c00168b4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00168ba:	6a 00                	push   0x0
c00168bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168c4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00168ca:	e8 d3 81 ff ff       	call   c000eaa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00168cf:	83 c4 1c             	add    esp,0x1c
c00168d2:	68 00 10 00 00       	push   0x1000
c00168d7:	6a 00                	push   0x0
c00168d9:	56                   	push   esi
c00168da:	e8 29 9d fe ff       	call   c0000608 <memset>
c00168df:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00168e5:	83 c4 10             	add    esp,0x10
c00168e8:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00168ee:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00168f4:	77 86                	ja     c001687c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c00168f6:	e8 b3 12 00 00       	call   c0017bae <unlockScheduler()>
c00168fb:	83 ec 0c             	sub    esp,0xc
c00168fe:	56                   	push   esi
c00168ff:	e8 9d 77 ff ff       	call   c000e0a1 <Virt::freeKernelVirtualPages(unsigned long)>
c0016904:	83 c4 10             	add    esp,0x10
c0016907:	b0 01                	mov    al,0x1
c0016909:	8d 65 f4             	lea    esp,[ebp-0xc]
c001690c:	5b                   	pop    ebx
c001690d:	5e                   	pop    esi
c001690e:	5f                   	pop    edi
c001690f:	5d                   	pop    ebp
c0016910:	c3                   	ret    

c0016911 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016911:	55                   	push   ebp
c0016912:	57                   	push   edi
c0016913:	56                   	push   esi
c0016914:	53                   	push   ebx
c0016915:	83 ec 48             	sub    esp,0x48
c0016918:	68 14 01 00 00       	push   0x114
c001691d:	e8 da 85 ff ff       	call   c000eefc <operator new(unsigned long)>
c0016922:	83 c4 0c             	add    esp,0xc
c0016925:	89 c6                	mov    esi,eax
c0016927:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001692b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001692f:	50                   	push   eax
c0016930:	e8 e5 8b ff ff       	call   c000f51a <File::File(char const*, Process*)>
c0016935:	58                   	pop    eax
c0016936:	5a                   	pop    edx
c0016937:	6a 01                	push   0x1
c0016939:	56                   	push   esi
c001693a:	e8 3f 8c ff ff       	call   c000f57e <File::open(FileOpenMode)>
c001693f:	83 c4 10             	add    esp,0x10
c0016942:	85 c0                	test   eax,eax
c0016944:	0f 85 47 01 00 00    	jne    c0016a91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001694a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016952:	83 ec 0c             	sub    esp,0xc
c0016955:	6a 34                	push   0x34
c0016957:	e8 c2 52 ff ff       	call   c000bc1e <malloc>
c001695c:	89 c3                	mov    ebx,eax
c001695e:	58                   	pop    eax
c001695f:	8b 06                	mov    eax,DWORD PTR [esi]
c0016961:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016965:	57                   	push   edi
c0016966:	53                   	push   ebx
c0016967:	6a 00                	push   0x0
c0016969:	6a 34                	push   0x34
c001696b:	56                   	push   esi
c001696c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001696f:	83 c4 20             	add    esp,0x20
c0016972:	85 c0                	test   eax,eax
c0016974:	0f 85 17 01 00 00    	jne    c0016a91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001697a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016980:	0f 85 0b 01 00 00    	jne    c0016a91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016986:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016989:	85 c0                	test   eax,eax
c001698b:	0f 84 00 01 00 00    	je     c0016a91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016991:	31 d2                	xor    edx,edx
c0016993:	55                   	push   ebp
c0016994:	52                   	push   edx
c0016995:	50                   	push   eax
c0016996:	56                   	push   esi
c0016997:	e8 a0 8c ff ff       	call   c000f63c <File::seek(unsigned long long)>
c001699c:	83 c4 10             	add    esp,0x10
c001699f:	85 c0                	test   eax,eax
c00169a1:	0f 85 ea 00 00 00    	jne    c0016a91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169a7:	83 ec 0c             	sub    esp,0xc
c00169aa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00169ad:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00169b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00169b5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00169b9:	0f af c2             	imul   eax,edx
c00169bc:	50                   	push   eax
c00169bd:	e8 5c 52 ff ff       	call   c000bc1e <malloc>
c00169c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00169c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00169c9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00169cf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00169d3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00169d7:	0f af c2             	imul   eax,edx
c00169da:	99                   	cdq    
c00169db:	52                   	push   edx
c00169dc:	50                   	push   eax
c00169dd:	56                   	push   esi
c00169de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169e1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00169e4:	83 c4 20             	add    esp,0x20
c00169e7:	85 c0                	test   eax,eax
c00169e9:	0f 84 a2 00 00 00    	je     c0016a91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169ef:	31 d2                	xor    edx,edx
c00169f1:	51                   	push   ecx
c00169f2:	52                   	push   edx
c00169f3:	50                   	push   eax
c00169f4:	56                   	push   esi
c00169f5:	e8 42 8c ff ff       	call   c000f63c <File::seek(unsigned long long)>
c00169fa:	83 c4 10             	add    esp,0x10
c00169fd:	85 c0                	test   eax,eax
c00169ff:	0f 85 8c 00 00 00    	jne    c0016a91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a05:	83 ec 0c             	sub    esp,0xc
c0016a08:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a0c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a10:	31 ed                	xor    ebp,ebp
c0016a12:	0f af c2             	imul   eax,edx
c0016a15:	50                   	push   eax
c0016a16:	e8 03 52 ff ff       	call   c000bc1e <malloc>
c0016a1b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016a1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a22:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a28:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a2c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a30:	0f af c2             	imul   eax,edx
c0016a33:	99                   	cdq    
c0016a34:	52                   	push   edx
c0016a35:	50                   	push   eax
c0016a36:	56                   	push   esi
c0016a37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a3a:	83 c4 20             	add    esp,0x20
c0016a3d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016a45:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016a49:	0f 86 80 00 00 00    	jbe    c0016acf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016a4f:	0f b7 fd             	movzx  edi,bp
c0016a52:	c1 e7 05             	shl    edi,0x5
c0016a55:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016a59:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016a5c:	75 6b                	jne    c0016ac9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016a5e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016a61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a65:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016a68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a6c:	52                   	push   edx
c0016a6d:	31 d2                	xor    edx,edx
c0016a6f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016a72:	52                   	push   edx
c0016a73:	50                   	push   eax
c0016a74:	56                   	push   esi
c0016a75:	e8 c2 8b ff ff       	call   c000f63c <File::seek(unsigned long long)>
c0016a7a:	83 c4 10             	add    esp,0x10
c0016a7d:	85 c0                	test   eax,eax
c0016a7f:	74 17                	je     c0016a98 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016a81:	83 ec 0c             	sub    esp,0xc
c0016a84:	68 04 1c 02 c0       	push   0xc0021c04
c0016a89:	e8 5d 85 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0016a8e:	83 c4 10             	add    esp,0x10
c0016a91:	31 c0                	xor    eax,eax
c0016a93:	e9 87 00 00 00       	jmp    c0016b1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016a98:	83 ec 0c             	sub    esp,0xc
c0016a9b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016a9e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016aa1:	50                   	push   eax
c0016aa2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016aa6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016aaa:	56                   	push   esi
c0016aab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016aaf:	e8 e0 fb ff ff       	call   c0016694 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016ab4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ab8:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016abc:	83 c4 20             	add    esp,0x20
c0016abf:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016ac3:	73 04                	jae    c0016ac9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016ac5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ac9:	45                   	inc    ebp
c0016aca:	e9 76 ff ff ff       	jmp    c0016a45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016acf:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016ad3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016ad7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016adb:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016ae1:	83 ec 0c             	sub    esp,0xc
c0016ae4:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016aea:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016aef:	05 00 10 00 00       	add    eax,0x1000
c0016af4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016af7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016afb:	e8 2e 51 ff ff       	call   c000bc2e <free>
c0016b00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b03:	e8 26 51 ff ff       	call   c000bc2e <free>
c0016b08:	58                   	pop    eax
c0016b09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b0d:	e8 1c 51 ff ff       	call   c000bc2e <free>
c0016b12:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b15:	e8 c2 8a ff ff       	call   c000f5dc <File::close()>
c0016b1a:	83 c4 10             	add    esp,0x10
c0016b1d:	b0 01                	mov    al,0x1
c0016b1f:	83 c4 3c             	add    esp,0x3c
c0016b22:	5b                   	pop    ebx
c0016b23:	5e                   	pop    esi
c0016b24:	5f                   	pop    edi
c0016b25:	5d                   	pop    ebp
c0016b26:	c3                   	ret    

c0016b27 <Thr::runtimeReferenceHelper()>:
c0016b27:	83 ec 18             	sub    esp,0x18
c0016b2a:	68 0c 1c 02 c0       	push   0xc0021c0c
c0016b2f:	e8 b7 84 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0016b34:	fa                   	cli    
c0016b35:	83 c4 10             	add    esp,0x10
c0016b38:	eb fe                	jmp    c0016b38 <Thr::runtimeReferenceHelper()+0x11>

c0016b3a <Thr::getAddressOfKernelSymbol(char const*)>:
c0016b3a:	57                   	push   edi
c0016b3b:	56                   	push   esi
c0016b3c:	53                   	push   ebx
c0016b3d:	31 db                	xor    ebx,ebx
c0016b3f:	39 1d 20 4b 02 c0    	cmp    DWORD PTR ds:0xc0024b20,ebx
c0016b45:	7e 3c                	jle    c0016b83 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016b47:	8b 34 9d a0 4a 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdb560]
c0016b4e:	31 ff                	xor    edi,edi
c0016b50:	39 3c 9d a0 49 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb660],edi
c0016b57:	7e 27                	jle    c0016b80 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016b59:	50                   	push   eax
c0016b5a:	50                   	push   eax
c0016b5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b61:	03 04 9d 20 4a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdb5e0]
c0016b68:	50                   	push   eax
c0016b69:	e8 8a 9b fe ff       	call   c00006f8 <strcmp>
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	85 c0                	test   eax,eax
c0016b73:	75 05                	jne    c0016b7a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016b75:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016b78:	eb 0b                	jmp    c0016b85 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016b7a:	83 c6 10             	add    esi,0x10
c0016b7d:	47                   	inc    edi
c0016b7e:	eb d0                	jmp    c0016b50 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016b80:	43                   	inc    ebx
c0016b81:	eb bc                	jmp    c0016b3f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016b83:	31 c0                	xor    eax,eax
c0016b85:	5b                   	pop    ebx
c0016b86:	5e                   	pop    esi
c0016b87:	5f                   	pop    edi
c0016b88:	c3                   	ret    

c0016b89 <Thr::loadKernelSymbolTable(char const*)>:
c0016b89:	55                   	push   ebp
c0016b8a:	57                   	push   edi
c0016b8b:	56                   	push   esi
c0016b8c:	53                   	push   ebx
c0016b8d:	83 ec 68             	sub    esp,0x68
c0016b90:	8b 35 74 4b 02 c0    	mov    esi,DWORD PTR ds:0xc0024b74
c0016b96:	68 14 01 00 00       	push   0x114
c0016b9b:	e8 5c 83 ff ff       	call   c000eefc <operator new(unsigned long)>
c0016ba0:	83 c4 0c             	add    esp,0xc
c0016ba3:	89 c3                	mov    ebx,eax
c0016ba5:	56                   	push   esi
c0016ba6:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016baa:	50                   	push   eax
c0016bab:	e8 6a 89 ff ff       	call   c000f51a <File::File(char const*, Process*)>
c0016bb0:	5e                   	pop    esi
c0016bb1:	5f                   	pop    edi
c0016bb2:	6a 01                	push   0x1
c0016bb4:	53                   	push   ebx
c0016bb5:	e8 c4 89 ff ff       	call   c000f57e <File::open(FileOpenMode)>
c0016bba:	83 c4 10             	add    esp,0x10
c0016bbd:	31 d2                	xor    edx,edx
c0016bbf:	85 c0                	test   eax,eax
c0016bc1:	0f 85 79 02 00 00    	jne    c0016e40 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016bc7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016bcf:	83 ec 0c             	sub    esp,0xc
c0016bd2:	6a 34                	push   0x34
c0016bd4:	e8 45 50 ff ff       	call   c000bc1e <malloc>
c0016bd9:	59                   	pop    ecx
c0016bda:	89 c7                	mov    edi,eax
c0016bdc:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016be0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016be2:	56                   	push   esi
c0016be3:	57                   	push   edi
c0016be4:	6a 00                	push   0x0
c0016be6:	6a 34                	push   0x34
c0016be8:	53                   	push   ebx
c0016be9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bec:	83 c4 20             	add    esp,0x20
c0016bef:	85 c0                	test   eax,eax
c0016bf1:	74 17                	je     c0016c0a <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016bf3:	83 ec 0c             	sub    esp,0xc
c0016bf6:	68 2e 1c 02 c0       	push   0xc0021c2e
c0016bfb:	e8 80 e0 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c0016c00:	83 c4 10             	add    esp,0x10
c0016c03:	31 d2                	xor    edx,edx
c0016c05:	e9 36 02 00 00       	jmp    c0016e40 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016c0a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016c10:	75 e1                	jne    c0016bf3 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c12:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016c15:	85 c0                	test   eax,eax
c0016c17:	74 da                	je     c0016bf3 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c19:	52                   	push   edx
c0016c1a:	31 d2                	xor    edx,edx
c0016c1c:	52                   	push   edx
c0016c1d:	50                   	push   eax
c0016c1e:	53                   	push   ebx
c0016c1f:	e8 18 8a ff ff       	call   c000f63c <File::seek(unsigned long long)>
c0016c24:	83 c4 10             	add    esp,0x10
c0016c27:	85 c0                	test   eax,eax
c0016c29:	75 c8                	jne    c0016bf3 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c2b:	83 ec 0c             	sub    esp,0xc
c0016c2e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c32:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c36:	31 ed                	xor    ebp,ebp
c0016c38:	0f af c2             	imul   eax,edx
c0016c3b:	50                   	push   eax
c0016c3c:	e8 dd 4f ff ff       	call   c000bc1e <malloc>
c0016c41:	89 34 24             	mov    DWORD PTR [esp],esi
c0016c44:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016c48:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016c4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c4e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c52:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c56:	0f af c2             	imul   eax,edx
c0016c59:	99                   	cdq    
c0016c5a:	52                   	push   edx
c0016c5b:	50                   	push   eax
c0016c5c:	53                   	push   ebx
c0016c5d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c60:	83 c4 20             	add    esp,0x20
c0016c63:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016c6b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c7b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016c83:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016c87:	0f 86 aa 00 00 00    	jbe    c0016d37 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016c8d:	0f b7 f5             	movzx  esi,bp
c0016c90:	6b f6 28             	imul   esi,esi,0x28
c0016c93:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0016c97:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016c9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c9e:	50                   	push   eax
c0016c9f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016ca3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016ca7:	8b 16                	mov    edx,DWORD PTR [esi]
c0016ca9:	6b c0 28             	imul   eax,eax,0x28
c0016cac:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016cb0:	89 d0                	mov    eax,edx
c0016cb2:	31 d2                	xor    edx,edx
c0016cb4:	52                   	push   edx
c0016cb5:	50                   	push   eax
c0016cb6:	53                   	push   ebx
c0016cb7:	e8 80 89 ff ff       	call   c000f63c <File::seek(unsigned long long)>
c0016cbc:	83 c4 0c             	add    esp,0xc
c0016cbf:	6a 20                	push   0x20
c0016cc1:	6a 00                	push   0x0
c0016cc3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016cc7:	52                   	push   edx
c0016cc8:	e8 3b 99 fe ff       	call   c0000608 <memset>
c0016ccd:	58                   	pop    eax
c0016cce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cd0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016cd4:	51                   	push   ecx
c0016cd5:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016cd9:	52                   	push   edx
c0016cda:	6a 00                	push   0x0
c0016cdc:	6a 1f                	push   0x1f
c0016cde:	53                   	push   ebx
c0016cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ce2:	83 c4 18             	add    esp,0x18
c0016ce5:	68 45 1c 02 c0       	push   0xc0021c45
c0016cea:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016cee:	52                   	push   edx
c0016cef:	e8 04 9a fe ff       	call   c00006f8 <strcmp>
c0016cf4:	83 c4 10             	add    esp,0x10
c0016cf7:	85 c0                	test   eax,eax
c0016cf9:	75 0f                	jne    c0016d0a <Thr::loadKernelSymbolTable(char const*)+0x181>
c0016cfb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016cfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d0a:	50                   	push   eax
c0016d0b:	50                   	push   eax
c0016d0c:	68 4d 1c 02 c0       	push   0xc0021c4d
c0016d11:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016d15:	50                   	push   eax
c0016d16:	e8 dd 99 fe ff       	call   c00006f8 <strcmp>
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	85 c0                	test   eax,eax
c0016d20:	75 0f                	jne    c0016d31 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016d22:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d2d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d31:	45                   	inc    ebp
c0016d32:	e9 4c ff ff ff       	jmp    c0016c83 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0016d37:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016d3c:	75 10                	jne    c0016d4e <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0016d3e:	83 ec 0c             	sub    esp,0xc
c0016d41:	68 55 1c 02 c0       	push   0xc0021c55
c0016d46:	e8 35 df ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016d53:	75 10                	jne    c0016d65 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016d55:	83 ec 0c             	sub    esp,0xc
c0016d58:	68 55 1c 02 c0       	push   0xc0021c55
c0016d5d:	e8 1e df ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c0016d62:	83 c4 10             	add    esp,0x10
c0016d65:	31 d2                	xor    edx,edx
c0016d67:	50                   	push   eax
c0016d68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d6c:	52                   	push   edx
c0016d6d:	50                   	push   eax
c0016d6e:	53                   	push   ebx
c0016d6f:	e8 c8 88 ff ff       	call   c000f63c <File::seek(unsigned long long)>
c0016d74:	5a                   	pop    edx
c0016d75:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d79:	e8 a0 4e ff ff       	call   c000bc1e <malloc>
c0016d7e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016d86:	89 c1                	mov    ecx,eax
c0016d88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d90:	5e                   	pop    esi
c0016d91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d93:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016d97:	55                   	push   ebp
c0016d98:	51                   	push   ecx
c0016d99:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016d9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016da1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016da5:	53                   	push   ebx
c0016da6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016da9:	83 c4 14             	add    esp,0x14
c0016dac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016db0:	e8 69 4e ff ff       	call   c000bc1e <malloc>
c0016db5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016db8:	89 c6                	mov    esi,eax
c0016dba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dbc:	56                   	push   esi
c0016dbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dc1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dc5:	53                   	push   ebx
c0016dc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016dc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016dcd:	8b 15 20 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b20
c0016dd3:	83 c4 1c             	add    esp,0x1c
c0016dd6:	c1 e8 04             	shr    eax,0x4
c0016dd9:	89 04 95 a0 49 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb660],eax
c0016de0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016de4:	31 d2                	xor    edx,edx
c0016de6:	52                   	push   edx
c0016de7:	50                   	push   eax
c0016de8:	53                   	push   ebx
c0016de9:	e8 4e 88 ff ff       	call   c000f63c <File::seek(unsigned long long)>
c0016dee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016df1:	31 d2                	xor    edx,edx
c0016df3:	56                   	push   esi
c0016df4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016df8:	52                   	push   edx
c0016df9:	50                   	push   eax
c0016dfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dfc:	53                   	push   ebx
c0016dfd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e00:	83 c4 14             	add    esp,0x14
c0016e03:	53                   	push   ebx
c0016e04:	e8 d3 87 ff ff       	call   c000f5dc <File::close()>
c0016e09:	5d                   	pop    ebp
c0016e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e0e:	e8 1b 4e ff ff       	call   c000bc2e <free>
c0016e13:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e16:	e8 13 4e ff ff       	call   c000bc2e <free>
c0016e1b:	a1 20 4b 02 c0       	mov    eax,ds:0xc0024b20
c0016e20:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016e24:	8d 50 01             	lea    edx,[eax+0x1]
c0016e27:	89 0c 85 a0 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb560],ecx
c0016e2e:	89 15 20 4b 02 c0    	mov    DWORD PTR ds:0xc0024b20,edx
c0016e34:	89 34 85 20 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb5e0],esi
c0016e3b:	83 c4 10             	add    esp,0x10
c0016e3e:	b2 01                	mov    dl,0x1
c0016e40:	83 c4 5c             	add    esp,0x5c
c0016e43:	88 d0                	mov    al,dl
c0016e45:	5b                   	pop    ebx
c0016e46:	5e                   	pop    esi
c0016e47:	5f                   	pop    edi
c0016e48:	5d                   	pop    ebp
c0016e49:	c3                   	ret    

c0016e4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016e4a:	55                   	push   ebp
c0016e4b:	57                   	push   edi
c0016e4c:	56                   	push   esi
c0016e4d:	53                   	push   ebx
c0016e4e:	81 ec 68 03 00 00    	sub    esp,0x368
c0016e54:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016e5b:	8b 1d 74 4b 02 c0    	mov    ebx,DWORD PTR ds:0xc0024b74
c0016e61:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0016e65:	68 14 01 00 00       	push   0x114
c0016e6a:	e8 8d 80 ff ff       	call   c000eefc <operator new(unsigned long)>
c0016e6f:	83 c4 0c             	add    esp,0xc
c0016e72:	89 c5                	mov    ebp,eax
c0016e74:	53                   	push   ebx
c0016e75:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016e7c:	50                   	push   eax
c0016e7d:	e8 98 86 ff ff       	call   c000f51a <File::File(char const*, Process*)>
c0016e82:	58                   	pop    eax
c0016e83:	5a                   	pop    edx
c0016e84:	6a 01                	push   0x1
c0016e86:	55                   	push   ebp
c0016e87:	e8 f2 86 ff ff       	call   c000f57e <File::open(FileOpenMode)>
c0016e8c:	83 c4 10             	add    esp,0x10
c0016e8f:	85 c0                	test   eax,eax
c0016e91:	0f 85 f2 06 00 00    	jne    c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016e97:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016e9f:	83 ec 0c             	sub    esp,0xc
c0016ea2:	6a 34                	push   0x34
c0016ea4:	e8 75 4d ff ff       	call   c000bc1e <malloc>
c0016ea9:	89 c7                	mov    edi,eax
c0016eab:	58                   	pop    eax
c0016eac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016eaf:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016eb3:	53                   	push   ebx
c0016eb4:	57                   	push   edi
c0016eb5:	6a 00                	push   0x0
c0016eb7:	6a 34                	push   0x34
c0016eb9:	55                   	push   ebp
c0016eba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ebd:	83 c4 20             	add    esp,0x20
c0016ec0:	85 c0                	test   eax,eax
c0016ec2:	0f 85 c1 06 00 00    	jne    c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ec8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016ece:	0f 85 b5 06 00 00    	jne    c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ed4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016ed7:	85 c0                	test   eax,eax
c0016ed9:	0f 84 aa 06 00 00    	je     c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016edf:	31 d2                	xor    edx,edx
c0016ee1:	56                   	push   esi
c0016ee2:	52                   	push   edx
c0016ee3:	50                   	push   eax
c0016ee4:	55                   	push   ebp
c0016ee5:	e8 52 87 ff ff       	call   c000f63c <File::seek(unsigned long long)>
c0016eea:	83 c4 10             	add    esp,0x10
c0016eed:	85 c0                	test   eax,eax
c0016eef:	0f 85 94 06 00 00    	jne    c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ef5:	83 ec 0c             	sub    esp,0xc
c0016ef8:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016efb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016eff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016f03:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f07:	0f af c2             	imul   eax,edx
c0016f0a:	50                   	push   eax
c0016f0b:	e8 0e 4d ff ff       	call   c000bc1e <malloc>
c0016f10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f17:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f1e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f22:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f26:	0f af c2             	imul   eax,edx
c0016f29:	99                   	cdq    
c0016f2a:	52                   	push   edx
c0016f2b:	50                   	push   eax
c0016f2c:	55                   	push   ebp
c0016f2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f30:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016f33:	83 c4 20             	add    esp,0x20
c0016f36:	85 c0                	test   eax,eax
c0016f38:	0f 84 4b 06 00 00    	je     c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f3e:	31 d2                	xor    edx,edx
c0016f40:	51                   	push   ecx
c0016f41:	52                   	push   edx
c0016f42:	50                   	push   eax
c0016f43:	55                   	push   ebp
c0016f44:	e8 f3 86 ff ff       	call   c000f63c <File::seek(unsigned long long)>
c0016f49:	83 c4 10             	add    esp,0x10
c0016f4c:	85 c0                	test   eax,eax
c0016f4e:	0f 85 35 06 00 00    	jne    c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f54:	83 ec 0c             	sub    esp,0xc
c0016f57:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016f5b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016f5f:	31 f6                	xor    esi,esi
c0016f61:	0f af c2             	imul   eax,edx
c0016f64:	50                   	push   eax
c0016f65:	e8 b4 4c ff ff       	call   c000bc1e <malloc>
c0016f6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016f71:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f78:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016f7c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016f80:	0f af c2             	imul   eax,edx
c0016f83:	99                   	cdq    
c0016f84:	52                   	push   edx
c0016f85:	50                   	push   eax
c0016f86:	55                   	push   ebp
c0016f87:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f8a:	83 c4 20             	add    esp,0x20
c0016f8d:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016f91:	0f 86 8a 00 00 00    	jbe    c0017021 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016f97:	0f b7 de             	movzx  ebx,si
c0016f9a:	c1 e3 05             	shl    ebx,0x5
c0016f9d:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016fa1:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016fa4:	75 75                	jne    c001701b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016fa6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016fa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016fad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fb4:	52                   	push   edx
c0016fb5:	31 d2                	xor    edx,edx
c0016fb7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016fba:	52                   	push   edx
c0016fbb:	50                   	push   eax
c0016fbc:	55                   	push   ebp
c0016fbd:	e8 7a 86 ff ff       	call   c000f63c <File::seek(unsigned long long)>
c0016fc2:	83 c4 10             	add    esp,0x10
c0016fc5:	85 c0                	test   eax,eax
c0016fc7:	0f 85 bc 05 00 00    	jne    c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016fcd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016fd4:	31 d2                	xor    edx,edx
c0016fd6:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0016fda:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016fdd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016fe1:	83 ec 0c             	sub    esp,0xc
c0016fe4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fe8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016fef:	50                   	push   eax
c0016ff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ff8:	52                   	push   edx
c0016ff9:	50                   	push   eax
c0016ffa:	55                   	push   ebp
c0016ffb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ffe:	83 c4 1c             	add    esp,0x1c
c0017001:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017004:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017007:	50                   	push   eax
c0017008:	6a 00                	push   0x0
c001700a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001700e:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0017012:	50                   	push   eax
c0017013:	e8 f0 95 fe ff       	call   c0000608 <memset>
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	46                   	inc    esi
c001701c:	e9 6c ff ff ff       	jmp    c0016f8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017021:	31 db                	xor    ebx,ebx
c0017023:	50                   	push   eax
c0017024:	68 00 01 00 00       	push   0x100
c0017029:	6a 00                	push   0x0
c001702b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001702f:	50                   	push   eax
c0017030:	e8 d3 95 fe ff       	call   c0000608 <memset>
c0017035:	83 c4 0c             	add    esp,0xc
c0017038:	68 00 01 00 00       	push   0x100
c001703d:	6a 00                	push   0x0
c001703f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017046:	50                   	push   eax
c0017047:	e8 bc 95 fe ff       	call   c0000608 <memset>
c001704c:	83 c4 10             	add    esp,0x10
c001704f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017057:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001705f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017067:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001706f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017077:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001707b:	0f 86 30 01 00 00    	jbe    c00171b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017081:	0f b7 f3             	movzx  esi,bx
c0017084:	6b f6 28             	imul   esi,esi,0x28
c0017087:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001708b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001708e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017092:	50                   	push   eax
c0017093:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017097:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001709b:	8b 06                	mov    eax,DWORD PTR [esi]
c001709d:	6b d2 28             	imul   edx,edx,0x28
c00170a0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00170a4:	31 d2                	xor    edx,edx
c00170a6:	52                   	push   edx
c00170a7:	50                   	push   eax
c00170a8:	55                   	push   ebp
c00170a9:	e8 8e 85 ff ff       	call   c000f63c <File::seek(unsigned long long)>
c00170ae:	83 c4 0c             	add    esp,0xc
c00170b1:	6a 20                	push   0x20
c00170b3:	6a 00                	push   0x0
c00170b5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00170bc:	51                   	push   ecx
c00170bd:	e8 46 95 fe ff       	call   c0000608 <memset>
c00170c2:	58                   	pop    eax
c00170c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00170c6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00170ca:	52                   	push   edx
c00170cb:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00170d2:	51                   	push   ecx
c00170d3:	6a 00                	push   0x0
c00170d5:	6a 1f                	push   0x1f
c00170d7:	55                   	push   ebp
c00170d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00170db:	83 c4 1c             	add    esp,0x1c
c00170de:	6a 09                	push   0x9
c00170e0:	68 6f 1c 02 c0       	push   0xc0021c6f
c00170e5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00170ec:	51                   	push   ecx
c00170ed:	e8 7d 94 fe ff       	call   c000056f <memcmp>
c00170f2:	83 c4 10             	add    esp,0x10
c00170f5:	85 c0                	test   eax,eax
c00170f7:	75 21                	jne    c001711a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00170f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170fd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017101:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017105:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017109:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001710c:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017113:	89 c8                	mov    eax,ecx
c0017115:	40                   	inc    eax
c0017116:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001711a:	50                   	push   eax
c001711b:	6a 09                	push   0x9
c001711d:	68 79 1c 02 c0       	push   0xc0021c79
c0017122:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017129:	50                   	push   eax
c001712a:	e8 40 94 fe ff       	call   c000056f <memcmp>
c001712f:	83 c4 10             	add    esp,0x10
c0017132:	85 c0                	test   eax,eax
c0017134:	75 21                	jne    c0017157 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001713a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001713e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017142:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017146:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017149:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017150:	89 c8                	mov    eax,ecx
c0017152:	40                   	inc    eax
c0017153:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017157:	50                   	push   eax
c0017158:	50                   	push   eax
c0017159:	68 45 1c 02 c0       	push   0xc0021c45
c001715e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017165:	50                   	push   eax
c0017166:	e8 8d 95 fe ff       	call   c00006f8 <strcmp>
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	85 c0                	test   eax,eax
c0017170:	75 0f                	jne    c0017181 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017172:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017179:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001717d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017181:	50                   	push   eax
c0017182:	50                   	push   eax
c0017183:	68 4d 1c 02 c0       	push   0xc0021c4d
c0017188:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001718f:	50                   	push   eax
c0017190:	e8 63 95 fe ff       	call   c00006f8 <strcmp>
c0017195:	83 c4 10             	add    esp,0x10
c0017198:	85 c0                	test   eax,eax
c001719a:	75 0f                	jne    c00171ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001719c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001719f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00171ab:	43                   	inc    ebx
c00171ac:	e9 c6 fe ff ff       	jmp    c0017077 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00171b1:	31 d2                	xor    edx,edx
c00171b3:	50                   	push   eax
c00171b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171b8:	52                   	push   edx
c00171b9:	50                   	push   eax
c00171ba:	55                   	push   ebp
c00171bb:	e8 7c 84 ff ff       	call   c000f63c <File::seek(unsigned long long)>
c00171c0:	5a                   	pop    edx
c00171c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171c5:	e8 54 4a ff ff       	call   c000bc1e <malloc>
c00171ca:	31 d2                	xor    edx,edx
c00171cc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00171d0:	59                   	pop    ecx
c00171d1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00171d4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00171d8:	53                   	push   ebx
c00171d9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171e1:	52                   	push   edx
c00171e2:	50                   	push   eax
c00171e3:	55                   	push   ebp
c00171e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171e7:	83 c4 14             	add    esp,0x14
c00171ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171ee:	e8 2b 4a ff ff       	call   c000bc1e <malloc>
c00171f3:	31 d2                	xor    edx,edx
c00171f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00171f9:	83 c4 0c             	add    esp,0xc
c00171fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017200:	52                   	push   edx
c0017201:	50                   	push   eax
c0017202:	55                   	push   ebp
c0017203:	e8 34 84 ff ff       	call   c000f63c <File::seek(unsigned long long)>
c0017208:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001720b:	31 d2                	xor    edx,edx
c001720d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017211:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017214:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017218:	52                   	push   edx
c0017219:	50                   	push   eax
c001721a:	55                   	push   ebp
c001721b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001721e:	83 c4 20             	add    esp,0x20
c0017221:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017229:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001722d:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017231:	0f 84 56 03 00 00    	je     c001758d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c0017237:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001723e:	31 d2                	xor    edx,edx
c0017240:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017244:	c1 e8 03             	shr    eax,0x3
c0017247:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001724b:	50                   	push   eax
c001724c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017250:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017254:	52                   	push   edx
c0017255:	50                   	push   eax
c0017256:	55                   	push   ebp
c0017257:	e8 e0 83 ff ff       	call   c000f63c <File::seek(unsigned long long)>
c001725c:	58                   	pop    eax
c001725d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017261:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017268:	e8 b1 49 ff ff       	call   c000bc1e <malloc>
c001726d:	31 d2                	xor    edx,edx
c001726f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017273:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017276:	58                   	pop    eax
c0017277:	8d 44 24 58          	lea    eax,[esp+0x58]
c001727b:	50                   	push   eax
c001727c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017280:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017284:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001728b:	52                   	push   edx
c001728c:	50                   	push   eax
c001728d:	55                   	push   ebp
c001728e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017291:	83 c4 20             	add    esp,0x20
c0017294:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001729c:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00172a0:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00172a4:	0f 8d c7 02 00 00    	jge    c0017571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c00172aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172b2:	31 db                	xor    ebx,ebx
c00172b4:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00172b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172bf:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00172c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172c7:	c1 e8 08             	shr    eax,0x8
c00172ca:	89 c6                	mov    esi,eax
c00172cc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172d0:	c1 e6 04             	shl    esi,0x4
c00172d3:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c00172d7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00172da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172de:	85 c0                	test   eax,eax
c00172e0:	0f 85 17 01 00 00    	jne    c00173fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00172e6:	83 ec 0c             	sub    esp,0xc
c00172e9:	b3 01                	mov    bl,0x1
c00172eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172ef:	03 06                	add    eax,DWORD PTR [esi]
c00172f1:	50                   	push   eax
c00172f2:	e8 43 f8 ff ff       	call   c0016b3a <Thr::getAddressOfKernelSymbol(char const*)>
c00172f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172fb:	83 c4 10             	add    esp,0x10
c00172fe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017303:	0f 85 f4 00 00 00    	jne    c00173fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0017309:	50                   	push   eax
c001730a:	50                   	push   eax
c001730b:	68 83 1c 02 c0       	push   0xc0021c83
c0017310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017314:	03 06                	add    eax,DWORD PTR [esi]
c0017316:	50                   	push   eax
c0017317:	e8 dc 93 fe ff       	call   c00006f8 <strcmp>
c001731c:	83 c4 10             	add    esp,0x10
c001731f:	85 c0                	test   eax,eax
c0017321:	75 0a                	jne    c001732d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c0017323:	b8 4c e7 01 c0       	mov    eax,0xc001e74c
c0017328:	e9 ca 00 00 00       	jmp    c00173f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001732d:	50                   	push   eax
c001732e:	50                   	push   eax
c001732f:	68 8d 1c 02 c0       	push   0xc0021c8d
c0017334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017338:	03 06                	add    eax,DWORD PTR [esi]
c001733a:	50                   	push   eax
c001733b:	e8 b8 93 fe ff       	call   c00006f8 <strcmp>
c0017340:	83 c4 10             	add    esp,0x10
c0017343:	85 c0                	test   eax,eax
c0017345:	75 0a                	jne    c0017351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c0017347:	b8 80 e4 01 c0       	mov    eax,0xc001e480
c001734c:	e9 a6 00 00 00       	jmp    c00173f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0017351:	53                   	push   ebx
c0017352:	53                   	push   ebx
c0017353:	68 96 1c 02 c0       	push   0xc0021c96
c0017358:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001735c:	03 06                	add    eax,DWORD PTR [esi]
c001735e:	50                   	push   eax
c001735f:	e8 94 93 fe ff       	call   c00006f8 <strcmp>
c0017364:	83 c4 10             	add    esp,0x10
c0017367:	85 c0                	test   eax,eax
c0017369:	75 0a                	jne    c0017375 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001736b:	b8 4c e8 01 c0       	mov    eax,0xc001e84c
c0017370:	e9 82 00 00 00       	jmp    c00173f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0017375:	51                   	push   ecx
c0017376:	51                   	push   ecx
c0017377:	68 a0 1c 02 c0       	push   0xc0021ca0
c001737c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017380:	03 06                	add    eax,DWORD PTR [esi]
c0017382:	50                   	push   eax
c0017383:	e8 70 93 fe ff       	call   c00006f8 <strcmp>
c0017388:	83 c4 10             	add    esp,0x10
c001738b:	85 c0                	test   eax,eax
c001738d:	74 63                	je     c00173f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001738f:	50                   	push   eax
c0017390:	50                   	push   eax
c0017391:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017395:	03 06                	add    eax,DWORD PTR [esi]
c0017397:	50                   	push   eax
c0017398:	68 a9 1c 02 c0       	push   0xc0021ca9
c001739d:	e8 49 7c ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c00173a2:	58                   	pop    eax
c00173a3:	5a                   	pop    edx
c00173a4:	68 c3 1c 02 c0       	push   0xc0021cc3
c00173a9:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00173b0:	53                   	push   ebx
c00173b1:	e8 f1 92 fe ff       	call   c00006a7 <strcpy>
c00173b6:	59                   	pop    ecx
c00173b7:	58                   	pop    eax
c00173b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173bc:	03 06                	add    eax,DWORD PTR [esi]
c00173be:	50                   	push   eax
c00173bf:	53                   	push   ebx
c00173c0:	e8 99 93 fe ff       	call   c000075e <strcat>
c00173c5:	58                   	pop    eax
c00173c6:	5a                   	pop    edx
c00173c7:	68 59 1d 02 c0       	push   0xc0021d59
c00173cc:	53                   	push   ebx
c00173cd:	e8 8c 93 fe ff       	call   c000075e <strcat>
c00173d2:	83 c4 10             	add    esp,0x10
c00173d5:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00173da:	0f 84 4b 01 00 00    	je     c001752b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00173e0:	83 ec 0c             	sub    esp,0xc
c00173e3:	53                   	push   ebx
c00173e4:	e8 97 d8 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c00173e9:	83 c4 10             	add    esp,0x10
c00173ec:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c00173f0:	eb 0b                	jmp    c00173fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00173f2:	b8 cc e5 01 c0       	mov    eax,0xc001e5cc
c00173f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173fb:	b3 01                	mov    bl,0x1
c00173fd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0017402:	0f 85 80 00 00 00    	jne    c0017488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c0017408:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001740f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017413:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017417:	01 ce                	add    esi,ecx
c0017419:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017421:	8b 06                	mov    eax,DWORD PTR [esi]
c0017423:	0f 94 c2             	sete   dl
c0017426:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001742e:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0017433:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0017437:	84 db                	test   bl,bl
c0017439:	74 31                	je     c001746c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001743b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001743f:	01 c3                	add    ebx,eax
c0017441:	84 d2                	test   dl,dl
c0017443:	75 0a                	jne    c001744f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c0017445:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017449:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001744d:	76 32                	jbe    c0017481 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001744f:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017454:	0f 84 d1 00 00 00    	je     c001752b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001745a:	83 ec 0c             	sub    esp,0xc
c001745d:	68 da 1c 02 c0       	push   0xc0021cda
c0017462:	e8 19 d8 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c0017467:	83 c4 10             	add    esp,0x10
c001746a:	eb 15                	jmp    c0017481 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001746c:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001746f:	84 d2                	test   dl,dl
c0017471:	75 0e                	jne    c0017481 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017473:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017477:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001747b:	77 04                	ja     c0017481 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001747d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017481:	89 1e                	mov    DWORD PTR [esi],ebx
c0017483:	e9 e0 00 00 00       	jmp    c0017568 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017488:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001748d:	75 6e                	jne    c00174fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001748f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017496:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001749a:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001749e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00174a6:	74 17                	je     c00174bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00174a8:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00174b0:	74 0d                	je     c00174bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00174b2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00174b6:	83 e8 04             	sub    eax,0x4
c00174b9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00174bd:	76 17                	jbe    c00174d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c00174bf:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00174c4:	74 65                	je     c001752b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00174c6:	83 ec 0c             	sub    esp,0xc
c00174c9:	68 f6 1c 02 c0       	push   0xc0021cf6
c00174ce:	e8 ad d7 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	8b 16                	mov    edx,DWORD PTR [esi]
c00174d8:	84 db                	test   bl,bl
c00174da:	74 13                	je     c00174ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c00174dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174e0:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00174e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00174eb:	01 d0                	add    eax,edx
c00174ed:	eb 06                	jmp    c00174f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00174ef:	89 d0                	mov    eax,edx
c00174f1:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00174f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00174f9:	89 06                	mov    DWORD PTR [esi],eax
c00174fb:	eb 6b                	jmp    c0017568 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c00174fd:	50                   	push   eax
c00174fe:	50                   	push   eax
c00174ff:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017504:	50                   	push   eax
c0017505:	68 12 1d 02 c0       	push   0xc0021d12
c001750a:	e8 dc 7a ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001750f:	83 c4 10             	add    esp,0x10
c0017512:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017517:	74 12                	je     c001752b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017519:	83 ec 0c             	sub    esp,0xc
c001751c:	68 1d 1d 02 c0       	push   0xc0021d1d
c0017521:	e8 5a d7 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c0017526:	83 c4 10             	add    esp,0x10
c0017529:	eb 3d                	jmp    c0017568 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001752b:	83 ec 0c             	sub    esp,0xc
c001752e:	55                   	push   ebp
c001752f:	e8 a8 80 ff ff       	call   c000f5dc <File::close()>
c0017534:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017537:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001753a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001753d:	59                   	pop    ecx
c001753e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017542:	e8 e7 46 ff ff       	call   c000bc2e <free>
c0017547:	5b                   	pop    ebx
c0017548:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001754c:	e8 dd 46 ff ff       	call   c000bc2e <free>
c0017551:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017554:	e8 d5 46 ff ff       	call   c000bc2e <free>
c0017559:	5e                   	pop    esi
c001755a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001755e:	e8 cb 46 ff ff       	call   c000bc2e <free>
c0017563:	83 c4 10             	add    esp,0x10
c0017566:	eb 21                	jmp    c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0017568:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001756c:	e9 2b fd ff ff       	jmp    c001729c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017571:	83 ec 0c             	sub    esp,0xc
c0017574:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017578:	e8 b1 46 ff ff       	call   c000bc2e <free>
c001757d:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0017581:	83 c4 10             	add    esp,0x10
c0017584:	e9 a0 fc ff ff       	jmp    c0017229 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017589:	31 c0                	xor    eax,eax
c001758b:	eb 33                	jmp    c00175c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001758d:	83 ec 0c             	sub    esp,0xc
c0017590:	55                   	push   ebp
c0017591:	e8 46 80 ff ff       	call   c000f5dc <File::close()>
c0017596:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017599:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001759c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001759f:	58                   	pop    eax
c00175a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175a4:	e8 85 46 ff ff       	call   c000bc2e <free>
c00175a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175ac:	e8 7d 46 ff ff       	call   c000bc2e <free>
c00175b1:	5a                   	pop    edx
c00175b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00175b6:	e8 73 46 ff ff       	call   c000bc2e <free>
c00175bb:	83 c4 10             	add    esp,0x10
c00175be:	b0 01                	mov    al,0x1
c00175c0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00175c6:	5b                   	pop    ebx
c00175c7:	5e                   	pop    esi
c00175c8:	5f                   	pop    edi
c00175c9:	5d                   	pop    ebp
c00175ca:	c3                   	ret    

c00175cb <Thr::getDriverBaseFromAddress(unsigned long)>:
c00175cb:	56                   	push   esi
c00175cc:	31 d2                	xor    edx,edx
c00175ce:	53                   	push   ebx
c00175cf:	8b 1d 80 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024380
c00175d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00175d9:	39 d3                	cmp    ebx,edx
c00175db:	7e 1b                	jle    c00175f8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00175dd:	8b 04 95 a0 45 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdba60]
c00175e4:	39 c8                	cmp    eax,ecx
c00175e6:	77 0d                	ja     c00175f5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00175e8:	8b 34 95 a0 43 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdbc60]
c00175ef:	01 c6                	add    esi,eax
c00175f1:	39 ce                	cmp    esi,ecx
c00175f3:	77 05                	ja     c00175fa <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00175f5:	42                   	inc    edx
c00175f6:	eb e1                	jmp    c00175d9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00175f8:	31 c0                	xor    eax,eax
c00175fa:	5b                   	pop    ebx
c00175fb:	5e                   	pop    esi
c00175fc:	c3                   	ret    

c00175fd <Thr::getDriverNameFromAddress(unsigned long)>:
c00175fd:	53                   	push   ebx
c00175fe:	31 c0                	xor    eax,eax
c0017600:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017604:	8b 1d 80 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024380
c001760a:	39 c3                	cmp    ebx,eax
c001760c:	7e 22                	jle    c0017630 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001760e:	8b 14 85 a0 45 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdba60]
c0017615:	39 ca                	cmp    edx,ecx
c0017617:	77 14                	ja     c001762d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017619:	03 14 85 a0 43 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdbc60]
c0017620:	39 ca                	cmp    edx,ecx
c0017622:	76 09                	jbe    c001762d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017624:	8b 04 85 a0 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb860]
c001762b:	eb 05                	jmp    c0017632 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001762d:	40                   	inc    eax
c001762e:	eb da                	jmp    c001760a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017630:	31 c0                	xor    eax,eax
c0017632:	5b                   	pop    ebx
c0017633:	c3                   	ret    

c0017634 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017634:	53                   	push   ebx
c0017635:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017639:	53                   	push   ebx
c001763a:	e8 8c ff ff ff       	call   c00175cb <Thr::getDriverBaseFromAddress(unsigned long)>
c001763f:	5a                   	pop    edx
c0017640:	31 d2                	xor    edx,edx
c0017642:	85 c0                	test   eax,eax
c0017644:	74 04                	je     c001764a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017646:	89 da                	mov    edx,ebx
c0017648:	29 c2                	sub    edx,eax
c001764a:	89 d0                	mov    eax,edx
c001764c:	5b                   	pop    ebx
c001764d:	c3                   	ret    

c001764e <Thr::loadDLL(char const*, bool)>:
c001764e:	55                   	push   ebp
c001764f:	57                   	push   edi
c0017650:	56                   	push   esi
c0017651:	53                   	push   ebx
c0017652:	81 ec 24 01 00 00    	sub    esp,0x124
c0017658:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c001765f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017666:	56                   	push   esi
c0017667:	68 35 1d 02 c0       	push   0xc0021d35
c001766c:	e8 7a 79 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0017671:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017678:	e8 7f 78 ff ff       	call   c000eefc <operator new(unsigned long)>
c001767d:	83 c4 0c             	add    esp,0xc
c0017680:	89 c3                	mov    ebx,eax
c0017682:	ff 35 74 4b 02 c0    	push   DWORD PTR ds:0xc0024b74
c0017688:	56                   	push   esi
c0017689:	50                   	push   eax
c001768a:	e8 8b 7e ff ff       	call   c000f51a <File::File(char const*, Process*)>
c001768f:	83 c4 0c             	add    esp,0xc
c0017692:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0017696:	50                   	push   eax
c0017697:	8d 44 24 10          	lea    eax,[esp+0x10]
c001769b:	50                   	push   eax
c001769c:	53                   	push   ebx
c001769d:	e8 88 81 ff ff       	call   c000f82a <File::stat(unsigned long long*, bool*)>
c00176a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00176aa:	83 c4 10             	add    esp,0x10
c00176ad:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00176b2:	75 0a                	jne    c00176be <Thr::loadDLL(char const*, bool)+0x70>
c00176b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176b8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00176bc:	75 3e                	jne    c00176fc <Thr::loadDLL(char const*, bool)+0xae>
c00176be:	89 f8                	mov    eax,edi
c00176c0:	31 db                	xor    ebx,ebx
c00176c2:	84 c0                	test   al,al
c00176c4:	0f 84 ca 00 00 00    	je     c0017794 <Thr::loadDLL(char const*, bool)+0x146>
c00176ca:	50                   	push   eax
c00176cb:	50                   	push   eax
c00176cc:	68 46 1d 02 c0       	push   0xc0021d46
c00176d1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00176d5:	53                   	push   ebx
c00176d6:	e8 cc 8f fe ff       	call   c00006a7 <strcpy>
c00176db:	58                   	pop    eax
c00176dc:	5a                   	pop    edx
c00176dd:	56                   	push   esi
c00176de:	53                   	push   ebx
c00176df:	e8 7a 90 fe ff       	call   c000075e <strcat>
c00176e4:	59                   	pop    ecx
c00176e5:	5d                   	pop    ebp
c00176e6:	68 59 1d 02 c0       	push   0xc0021d59
c00176eb:	53                   	push   ebx
c00176ec:	e8 6d 90 fe ff       	call   c000075e <strcat>
c00176f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176f4:	e8 87 d5 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c00176f9:	83 c4 10             	add    esp,0x10
c00176fc:	83 ec 0c             	sub    esp,0xc
c00176ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017703:	e8 16 45 ff ff       	call   c000bc1e <malloc>
c0017708:	89 34 24             	mov    DWORD PTR [esp],esi
c001770b:	89 c3                	mov    ebx,eax
c001770d:	e8 13 8f fe ff       	call   c0000625 <strlen>
c0017712:	8b 2d 80 43 02 c0    	mov    ebp,DWORD PTR ds:0xc0024380
c0017718:	40                   	inc    eax
c0017719:	89 04 24             	mov    DWORD PTR [esp],eax
c001771c:	e8 fd 44 ff ff       	call   c000bc1e <malloc>
c0017721:	89 04 ad a0 47 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb860],eax
c0017728:	58                   	pop    eax
c0017729:	a1 80 43 02 c0       	mov    eax,ds:0xc0024380
c001772e:	5a                   	pop    edx
c001772f:	56                   	push   esi
c0017730:	ff 34 85 a0 47 02 c0 	push   DWORD PTR [eax*4-0x3ffdb860]
c0017737:	e8 6b 8f fe ff       	call   c00006a7 <strcpy>
c001773c:	a1 80 43 02 c0       	mov    eax,ds:0xc0024380
c0017741:	8d 50 01             	lea    edx,[eax+0x1]
c0017744:	89 1c 85 a0 45 02 c0 	mov    DWORD PTR [eax*4-0x3ffdba60],ebx
c001774b:	89 15 80 43 02 c0    	mov    DWORD PTR ds:0xc0024380,edx
c0017751:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017755:	59                   	pop    ecx
c0017756:	89 14 85 a0 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc60],edx
c001775d:	5d                   	pop    ebp
c001775e:	53                   	push   ebx
c001775f:	68 5b 1d 02 c0       	push   0xc0021d5b
c0017764:	e8 82 78 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0017769:	83 c4 0c             	add    esp,0xc
c001776c:	6a 01                	push   0x1
c001776e:	53                   	push   ebx
c001776f:	56                   	push   esi
c0017770:	e8 d5 f6 ff ff       	call   c0016e4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017775:	83 c4 10             	add    esp,0x10
c0017778:	84 c0                	test   al,al
c001777a:	75 18                	jne    c0017794 <Thr::loadDLL(char const*, bool)+0x146>
c001777c:	31 db                	xor    ebx,ebx
c001777e:	89 f8                	mov    eax,edi
c0017780:	84 c0                	test   al,al
c0017782:	74 10                	je     c0017794 <Thr::loadDLL(char const*, bool)+0x146>
c0017784:	83 ec 0c             	sub    esp,0xc
c0017787:	68 7a 1d 02 c0       	push   0xc0021d7a
c001778c:	e8 ef d4 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c0017791:	83 c4 10             	add    esp,0x10
c0017794:	81 c4 1c 01 00 00    	add    esp,0x11c
c001779a:	89 d8                	mov    eax,ebx
c001779c:	5b                   	pop    ebx
c001779d:	5e                   	pop    esi
c001779e:	5f                   	pop    edi
c001779f:	5d                   	pop    ebp
c00177a0:	c3                   	ret    

c00177a1 <Thr::executeDLL(unsigned long, void*)>:
c00177a1:	56                   	push   esi
c00177a2:	53                   	push   ebx
c00177a3:	51                   	push   ecx
c00177a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00177ac:	85 db                	test   ebx,ebx
c00177ae:	75 10                	jne    c00177c0 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00177b0:	83 ec 0c             	sub    esp,0xc
c00177b3:	68 99 1d 02 c0       	push   0xc0021d99
c00177b8:	e8 c3 d4 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c00177bd:	83 c4 10             	add    esp,0x10
c00177c0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00177c4:	89 d8                	mov    eax,ebx
c00177c6:	5a                   	pop    edx
c00177c7:	5b                   	pop    ebx
c00177c8:	5e                   	pop    esi
c00177c9:	ff e0                	jmp    eax
c00177cb:	90                   	nop

c00177cc <changeTSS>:
c00177cc:	83 ec 0c             	sub    esp,0xc
c00177cf:	e8 a6 c7 ff ff       	call   c0013f7a <thisCPU()>
c00177d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00177da:	83 ec 08             	sub    esp,0x8
c00177dd:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00177e0:	05 7c 11 00 00       	add    eax,0x117c
c00177e5:	c1 e1 15             	shl    ecx,0x15
c00177e8:	ba 00 00 e8 01       	mov    edx,0x1e80000
c00177ed:	29 ca                	sub    edx,ecx
c00177ef:	52                   	push   edx
c00177f0:	50                   	push   eax
c00177f1:	e8 64 5e ff ff       	call   c000d65a <TSS::setESP(unsigned long)>
c00177f6:	83 c4 1c             	add    esp,0x1c
c00177f9:	c3                   	ret    

c00177fa <Process::addArgs(char**)>:
c00177fa:	57                   	push   edi
c00177fb:	56                   	push   esi
c00177fc:	53                   	push   ebx
c00177fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017801:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017805:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001780f:	85 ff                	test   edi,edi
c0017811:	74 3d                	je     c0017850 <Process::addArgs(char**)+0x56>
c0017813:	8b 07                	mov    eax,DWORD PTR [edi]
c0017815:	85 c0                	test   eax,eax
c0017817:	74 37                	je     c0017850 <Process::addArgs(char**)+0x56>
c0017819:	31 db                	xor    ebx,ebx
c001781b:	83 ec 0c             	sub    esp,0xc
c001781e:	50                   	push   eax
c001781f:	e8 01 8e fe ff       	call   c0000625 <strlen>
c0017824:	40                   	inc    eax
c0017825:	89 04 24             	mov    DWORD PTR [esp],eax
c0017828:	e8 f1 43 ff ff       	call   c000bc1e <malloc>
c001782d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c0017834:	5a                   	pop    edx
c0017835:	59                   	pop    ecx
c0017836:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017839:	43                   	inc    ebx
c001783a:	50                   	push   eax
c001783b:	e8 67 8e fe ff       	call   c00006a7 <strcpy>
c0017840:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c0017846:	83 c4 10             	add    esp,0x10
c0017849:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001784c:	85 c0                	test   eax,eax
c001784e:	75 cb                	jne    c001781b <Process::addArgs(char**)+0x21>
c0017850:	5b                   	pop    ebx
c0017851:	5e                   	pop    esi
c0017852:	5f                   	pop    edi
c0017853:	c3                   	ret    

c0017854 <Process::Process(char const*, Process*, char**)>:
c0017854:	56                   	push   esi
c0017855:	53                   	push   ebx
c0017856:	83 ec 14             	sub    esp,0x14
c0017859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001785d:	05 0c 02 00 00       	add    eax,0x20c
c0017862:	bb 07 00 00 00       	mov    ebx,0x7
c0017867:	89 c6                	mov    esi,eax
c0017869:	85 db                	test   ebx,ebx
c001786b:	78 12                	js     c001787f <Process::Process(char const*, Process*, char**)+0x2b>
c001786d:	83 ec 0c             	sub    esp,0xc
c0017870:	56                   	push   esi
c0017871:	e8 24 78 00 00       	call   c001f09a <ThreadControlBlock::ThreadControlBlock()>
c0017876:	83 c4 10             	add    esp,0x10
c0017879:	83 c6 63             	add    esi,0x63
c001787c:	4b                   	dec    ebx
c001787d:	eb ea                	jmp    c0017869 <Process::Process(char const*, Process*, char**)+0x15>
c001787f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017883:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001788a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001788e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017897:	a1 44 31 02 c0       	mov    eax,ds:0xc0023144
c001789c:	8d 50 01             	lea    edx,[eax+0x1]
c001789f:	89 15 44 31 02 c0    	mov    DWORD PTR ds:0xc0023144,edx
c00178a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178a9:	89 02                	mov    DWORD PTR [edx],eax
c00178ab:	83 ec 0c             	sub    esp,0xc
c00178ae:	6a 10                	push   0x10
c00178b0:	e8 47 76 ff ff       	call   c000eefc <operator new(unsigned long)>
c00178b5:	83 c4 10             	add    esp,0x10
c00178b8:	89 c3                	mov    ebx,eax
c00178ba:	83 ec 08             	sub    esp,0x8
c00178bd:	6a 00                	push   0x0
c00178bf:	53                   	push   ebx
c00178c0:	e8 cb 72 ff ff       	call   c000eb90 <VAS::VAS(bool)>
c00178c5:	83 c4 10             	add    esp,0x10
c00178c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178cc:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c00178d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d6:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00178e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178e8:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c00178ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00178f8:	85 c0                	test   eax,eax
c00178fa:	74 42                	je     c001793e <Process::Process(char const*, Process*, char**)+0xea>
c00178fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017900:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017906:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001790c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017910:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017920:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792a:	05 0c 01 00 00       	add    eax,0x10c
c001792f:	83 ec 08             	sub    esp,0x8
c0017932:	52                   	push   edx
c0017933:	50                   	push   eax
c0017934:	e8 6e 8d fe ff       	call   c00006a7 <strcpy>
c0017939:	83 c4 10             	add    esp,0x10
c001793c:	eb 5c                	jmp    c001799a <Process::Process(char const*, Process*, char**)+0x146>
c001793e:	83 ec 0c             	sub    esp,0xc
c0017941:	68 60 12 00 00       	push   0x1260
c0017946:	e8 b1 75 ff ff       	call   c000eefc <operator new(unsigned long)>
c001794b:	83 c4 10             	add    esp,0x10
c001794e:	89 c3                	mov    ebx,eax
c0017950:	83 ec 08             	sub    esp,0x8
c0017953:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017957:	53                   	push   ebx
c0017958:	e8 fb 59 ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c001795d:	83 c4 10             	add    esp,0x10
c0017960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017964:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001796a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001796e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017974:	83 ec 0c             	sub    esp,0xc
c0017977:	50                   	push   eax
c0017978:	e8 dc 4d ff ff       	call   c000c759 <addToTerminalCycle(VgaText*)>
c001797d:	83 c4 10             	add    esp,0x10
c0017980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017984:	05 0c 01 00 00       	add    eax,0x10c
c0017989:	83 ec 08             	sub    esp,0x8
c001798c:	68 c3 1d 02 c0       	push   0xc0021dc3
c0017991:	50                   	push   eax
c0017992:	e8 10 8d fe ff       	call   c00006a7 <strcpy>
c0017997:	83 c4 10             	add    esp,0x10
c001799a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799e:	83 c0 0c             	add    eax,0xc
c00179a1:	83 ec 08             	sub    esp,0x8
c00179a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179a8:	50                   	push   eax
c00179a9:	e8 f9 8c fe ff       	call   c00006a7 <strcpy>
c00179ae:	83 c4 10             	add    esp,0x10
c00179b1:	83 ec 08             	sub    esp,0x8
c00179b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00179b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179bc:	e8 39 fe ff ff       	call   c00177fa <Process::addArgs(char**)>
c00179c1:	83 c4 10             	add    esp,0x10
c00179c4:	83 ec 08             	sub    esp,0x8
c00179c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179cf:	e8 3d ef ff ff       	call   c0016911 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00179d4:	83 c4 10             	add    esp,0x10
c00179d7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00179df:	83 f0 01             	xor    eax,0x1
c00179e2:	88 c2                	mov    dl,al
c00179e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e8:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c00179ee:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179f3:	83 ec 08             	sub    esp,0x8
c00179f6:	50                   	push   eax
c00179f7:	68 d8 1e 02 c0       	push   0xc0021ed8
c00179fc:	e8 ea 75 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0017a01:	83 c4 10             	add    esp,0x10
c0017a04:	90                   	nop
c0017a05:	83 c4 14             	add    esp,0x14
c0017a08:	5b                   	pop    ebx
c0017a09:	5e                   	pop    esi
c0017a0a:	c3                   	ret    
c0017a0b:	90                   	nop

c0017a0c <Process::Process(bool, char const*, Process*, char**)>:
c0017a0c:	56                   	push   esi
c0017a0d:	53                   	push   ebx
c0017a0e:	83 ec 14             	sub    esp,0x14
c0017a11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a15:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017a19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1d:	05 0c 02 00 00       	add    eax,0x20c
c0017a22:	bb 07 00 00 00       	mov    ebx,0x7
c0017a27:	89 c6                	mov    esi,eax
c0017a29:	85 db                	test   ebx,ebx
c0017a2b:	78 12                	js     c0017a3f <Process::Process(bool, char const*, Process*, char**)+0x33>
c0017a2d:	83 ec 0c             	sub    esp,0xc
c0017a30:	56                   	push   esi
c0017a31:	e8 64 76 00 00       	call   c001f09a <ThreadControlBlock::ThreadControlBlock()>
c0017a36:	83 c4 10             	add    esp,0x10
c0017a39:	83 c6 63             	add    esi,0x63
c0017a3c:	4b                   	dec    ebx
c0017a3d:	eb ea                	jmp    c0017a29 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0017a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a43:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017a4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a4e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017a57:	a1 44 31 02 c0       	mov    eax,ds:0xc0023144
c0017a5c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a5f:	89 15 44 31 02 c0    	mov    DWORD PTR ds:0xc0023144,edx
c0017a65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a69:	89 02                	mov    DWORD PTR [edx],eax
c0017a6b:	83 ec 0c             	sub    esp,0xc
c0017a6e:	6a 10                	push   0x10
c0017a70:	e8 87 74 ff ff       	call   c000eefc <operator new(unsigned long)>
c0017a75:	83 c4 10             	add    esp,0x10
c0017a78:	89 c3                	mov    ebx,eax
c0017a7a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017a7f:	83 ec 08             	sub    esp,0x8
c0017a82:	50                   	push   eax
c0017a83:	53                   	push   ebx
c0017a84:	e8 07 71 ff ff       	call   c000eb90 <VAS::VAS(bool)>
c0017a89:	83 c4 10             	add    esp,0x10
c0017a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a90:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017aac:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017ab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017abc:	85 c0                	test   eax,eax
c0017abe:	74 42                	je     c0017b02 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0017ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017aca:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ad4:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017ada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ade:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017ae4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aee:	05 0c 01 00 00       	add    eax,0x10c
c0017af3:	83 ec 08             	sub    esp,0x8
c0017af6:	52                   	push   edx
c0017af7:	50                   	push   eax
c0017af8:	e8 aa 8b fe ff       	call   c00006a7 <strcpy>
c0017afd:	83 c4 10             	add    esp,0x10
c0017b00:	eb 5c                	jmp    c0017b5e <Process::Process(bool, char const*, Process*, char**)+0x152>
c0017b02:	83 ec 0c             	sub    esp,0xc
c0017b05:	68 60 12 00 00       	push   0x1260
c0017b0a:	e8 ed 73 ff ff       	call   c000eefc <operator new(unsigned long)>
c0017b0f:	83 c4 10             	add    esp,0x10
c0017b12:	89 c3                	mov    ebx,eax
c0017b14:	83 ec 08             	sub    esp,0x8
c0017b17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017b1b:	53                   	push   ebx
c0017b1c:	e8 37 58 ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c0017b21:	83 c4 10             	add    esp,0x10
c0017b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b28:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017b2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b32:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017b38:	83 ec 0c             	sub    esp,0xc
c0017b3b:	50                   	push   eax
c0017b3c:	e8 18 4c ff ff       	call   c000c759 <addToTerminalCycle(VgaText*)>
c0017b41:	83 c4 10             	add    esp,0x10
c0017b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b48:	05 0c 01 00 00       	add    eax,0x10c
c0017b4d:	83 ec 08             	sub    esp,0x8
c0017b50:	68 c3 1d 02 c0       	push   0xc0021dc3
c0017b55:	50                   	push   eax
c0017b56:	e8 4c 8b fe ff       	call   c00006a7 <strcpy>
c0017b5b:	83 c4 10             	add    esp,0x10
c0017b5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b62:	83 c0 0c             	add    eax,0xc
c0017b65:	83 ec 08             	sub    esp,0x8
c0017b68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017b6c:	50                   	push   eax
c0017b6d:	e8 35 8b fe ff       	call   c00006a7 <strcpy>
c0017b72:	83 c4 10             	add    esp,0x10
c0017b75:	83 ec 08             	sub    esp,0x8
c0017b78:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017b7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b80:	e8 75 fc ff ff       	call   c00177fa <Process::addArgs(char**)>
c0017b85:	83 c4 10             	add    esp,0x10
c0017b88:	90                   	nop
c0017b89:	83 c4 14             	add    esp,0x14
c0017b8c:	5b                   	pop    ebx
c0017b8d:	5e                   	pop    esi
c0017b8e:	c3                   	ret    

c0017b8f <disableIRQs()>:
c0017b8f:	fa                   	cli    
c0017b90:	ff 05 4c 4b 02 c0    	inc    DWORD PTR ds:0xc0024b4c
c0017b96:	c3                   	ret    

c0017b97 <getIRQNestingLevel()>:
c0017b97:	a1 4c 4b 02 c0       	mov    eax,ds:0xc0024b4c
c0017b9c:	c3                   	ret    

c0017b9d <enableIRQs()>:
c0017b9d:	a1 4c 4b 02 c0       	mov    eax,ds:0xc0024b4c
c0017ba2:	48                   	dec    eax
c0017ba3:	a3 4c 4b 02 c0       	mov    ds:0xc0024b4c,eax
c0017ba8:	75 01                	jne    c0017bab <enableIRQs()+0xe>
c0017baa:	fb                   	sti    
c0017bab:	c3                   	ret    

c0017bac <lockScheduler()>:
c0017bac:	eb e1                	jmp    c0017b8f <disableIRQs()>

c0017bae <unlockScheduler()>:
c0017bae:	eb ed                	jmp    c0017b9d <enableIRQs()>

c0017bb0 <userModeEntryPoint(void*)>:
c0017bb0:	83 ec 0c             	sub    esp,0xc
c0017bb3:	e8 f6 ff ff ff       	call   c0017bae <unlockScheduler()>
c0017bb8:	fb                   	sti    
c0017bb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017bc1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017bc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bcb:	83 c4 0c             	add    esp,0xc
c0017bce:	e9 13 86 fe ff       	jmp    c00001e6 <goToUsermode>

c0017bd3 <lockStuff()>:
c0017bd3:	e8 b7 ff ff ff       	call   c0017b8f <disableIRQs()>
c0017bd8:	ff 05 48 4b 02 c0    	inc    DWORD PTR ds:0xc0024b48
c0017bde:	c3                   	ret    

c0017bdf <taskStartupFunction>:
c0017bdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017be4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017be7:	c3                   	ret    

c0017be8 <updateTimeUsed()>:
c0017be8:	57                   	push   edi
c0017be9:	56                   	push   esi
c0017bea:	53                   	push   ebx
c0017beb:	e8 8a c3 ff ff       	call   c0013f7a <thisCPU()>
c0017bf0:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017bf7:	74 49                	je     c0017c42 <updateTimeUsed()+0x5a>
c0017bf9:	0f 31                	rdtsc  
c0017bfb:	89 c1                	mov    ecx,eax
c0017bfd:	a3 88 4b 02 c0       	mov    ds:0xc0024b88,eax
c0017c02:	2b 0d 78 4b 02 c0    	sub    ecx,DWORD PTR ds:0xc0024b78
c0017c08:	89 d3                	mov    ebx,edx
c0017c0a:	89 0d 80 4b 02 c0    	mov    DWORD PTR ds:0xc0024b80,ecx
c0017c10:	1b 1d 7c 4b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0024b7c
c0017c16:	a3 78 4b 02 c0       	mov    ds:0xc0024b78,eax
c0017c1b:	89 1d 84 4b 02 c0    	mov    DWORD PTR ds:0xc0024b84,ebx
c0017c21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c26:	89 15 8c 4b 02 c0    	mov    DWORD PTR ds:0xc0024b8c,edx
c0017c2c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0017c2f:	89 15 7c 4b 02 c0    	mov    DWORD PTR ds:0xc0024b7c,edx
c0017c35:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017c38:	01 f1                	add    ecx,esi
c0017c3a:	11 fb                	adc    ebx,edi
c0017c3c:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0017c3f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0017c42:	5b                   	pop    ebx
c0017c43:	5e                   	pop    esi
c0017c44:	5f                   	pop    edi
c0017c45:	c3                   	ret    

c0017c46 <switchToThread(ThreadControlBlock*)>:
c0017c46:	53                   	push   ebx
c0017c47:	83 ec 08             	sub    esp,0x8
c0017c4a:	a1 48 4b 02 c0       	mov    eax,ds:0xc0024b48
c0017c4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c53:	85 c0                	test   eax,eax
c0017c55:	75 30                	jne    c0017c87 <switchToThread(ThreadControlBlock*)+0x41>
c0017c57:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c0017c5a:	3c ff                	cmp    al,0xff
c0017c5c:	74 25                	je     c0017c83 <switchToThread(ThreadControlBlock*)+0x3d>
c0017c5e:	0f b6 d0             	movzx  edx,al
c0017c61:	b8 84 03 00 00       	mov    eax,0x384
c0017c66:	29 d0                	sub    eax,edx
c0017c68:	c1 e0 10             	shl    eax,0x10
c0017c6b:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017c6e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017c71:	e8 72 ff ff ff       	call   c0017be8 <updateTimeUsed()>
c0017c76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017c7a:	83 c4 08             	add    esp,0x8
c0017c7d:	5b                   	pop    ebx
c0017c7e:	e9 9c 85 fe ff       	jmp    c000021f <switchToThreadASM>
c0017c83:	31 c0                	xor    eax,eax
c0017c85:	eb e7                	jmp    c0017c6e <switchToThread(ThreadControlBlock*)+0x28>
c0017c87:	c7 05 44 4b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024b44,0x1
c0017c91:	83 c4 08             	add    esp,0x8
c0017c94:	5b                   	pop    ebx
c0017c95:	c3                   	ret    

c0017c96 <Semaphore::Semaphore(int)>:
c0017c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c9e:	89 10                	mov    DWORD PTR [eax],edx
c0017ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017caf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cba:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017cc1:	90                   	nop
c0017cc2:	c3                   	ret    
c0017cc3:	90                   	nop

c0017cc4 <Mutex::Mutex()>:
c0017cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cc8:	6a 01                	push   0x1
c0017cca:	50                   	push   eax
c0017ccb:	e8 c6 ff ff ff       	call   c0017c96 <Semaphore::Semaphore(int)>
c0017cd0:	83 c4 08             	add    esp,0x8
c0017cd3:	90                   	nop
c0017cd4:	c3                   	ret    
c0017cd5:	90                   	nop

c0017cd6 <Process::createThread(void (*)(void*), void*, int)>:
c0017cd6:	55                   	push   ebp
c0017cd7:	31 c9                	xor    ecx,ecx
c0017cd9:	57                   	push   edi
c0017cda:	56                   	push   esi
c0017cdb:	53                   	push   ebx
c0017cdc:	83 ec 1c             	sub    esp,0x1c
c0017cdf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017ce3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017cea:	89 f2                	mov    edx,esi
c0017cec:	0f b7 c2             	movzx  eax,dx
c0017cef:	83 e2 01             	and    edx,0x1
c0017cf2:	74 14                	je     c0017d08 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017cf4:	d1 f8                	sar    eax,1
c0017cf6:	41                   	inc    ecx
c0017cf7:	89 c2                	mov    edx,eax
c0017cf9:	83 f9 10             	cmp    ecx,0x10
c0017cfc:	75 ee                	jne    c0017cec <Process::createThread(void (*)(void*), void*, int)+0x16>
c0017cfe:	83 c4 1c             	add    esp,0x1c
c0017d01:	31 c0                	xor    eax,eax
c0017d03:	5b                   	pop    ebx
c0017d04:	5e                   	pop    esi
c0017d05:	5f                   	pop    edi
c0017d06:	5d                   	pop    ebp
c0017d07:	c3                   	ret    
c0017d08:	83 ec 08             	sub    esp,0x8
c0017d0b:	b8 01 00 00 00       	mov    eax,0x1
c0017d10:	d3 e0                	shl    eax,cl
c0017d12:	09 c6                	or     esi,eax
c0017d14:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017d1a:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017d21:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017d24:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017d27:	01 ce                	add    esi,ecx
c0017d29:	89 f0                	mov    eax,esi
c0017d2b:	c1 e0 05             	shl    eax,0x5
c0017d2e:	01 c6                	add    esi,eax
c0017d30:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017d33:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d39:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017d3f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d43:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017d49:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017d4f:	89 ca                	mov    edx,ecx
c0017d51:	f7 da                	neg    edx
c0017d53:	c1 e2 15             	shl    edx,0x15
c0017d56:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d5c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d62:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d66:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017d70:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017d7a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017d80:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017d8a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017d94:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0017d9b:	50                   	push   eax
c0017d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017da0:	68 68 4b 02 c0       	push   0xc0024b68
c0017da5:	e8 48 71 00 00       	call   c001eef2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017daa:	83 c4 10             	add    esp,0x10
c0017dad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017db1:	83 c4 1c             	add    esp,0x1c
c0017db4:	5b                   	pop    ebx
c0017db5:	5e                   	pop    esi
c0017db6:	5f                   	pop    edi
c0017db7:	5d                   	pop    ebp
c0017db8:	c3                   	ret    
c0017db9:	90                   	nop

c0017dba <Process::createUserThread()>:
c0017dba:	83 ec 0c             	sub    esp,0xc
c0017dbd:	68 80 00 00 00       	push   0x80
c0017dc2:	6a 00                	push   0x0
c0017dc4:	68 b0 7b 01 c0       	push   0xc0017bb0
c0017dc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dcd:	e8 04 ff ff ff       	call   c0017cd6 <Process::createThread(void (*)(void*), void*, int)>
c0017dd2:	83 c4 1c             	add    esp,0x1c
c0017dd5:	c3                   	ret    

c0017dd6 <setupMultitasking(void (*)())>:
c0017dd6:	56                   	push   esi
c0017dd7:	53                   	push   ebx
c0017dd8:	53                   	push   ebx
c0017dd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017ddd:	eb 10                	jmp    c0017def <setupMultitasking(void (*)())+0x19>
c0017ddf:	83 ec 0c             	sub    esp,0xc
c0017de2:	68 68 4b 02 c0       	push   0xc0024b68
c0017de7:	e8 58 70 00 00       	call   c001ee44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017dec:	83 c4 10             	add    esp,0x10
c0017def:	83 ec 0c             	sub    esp,0xc
c0017df2:	68 68 4b 02 c0       	push   0xc0024b68
c0017df7:	e8 2c 70 00 00       	call   c001ee28 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017dfc:	83 c4 10             	add    esp,0x10
c0017dff:	84 c0                	test   al,al
c0017e01:	74 dc                	je     c0017ddf <setupMultitasking(void (*)())+0x9>
c0017e03:	83 ec 0c             	sub    esp,0xc
c0017e06:	68 3b 07 00 00       	push   0x73b
c0017e0b:	e8 ec 70 ff ff       	call   c000eefc <operator new(unsigned long)>
c0017e10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e17:	89 c3                	mov    ebx,eax
c0017e19:	6a 00                	push   0x0
c0017e1b:	68 c7 1d 02 c0       	push   0xc0021dc7
c0017e20:	6a 01                	push   0x1
c0017e22:	50                   	push   eax
c0017e23:	e8 e4 fb ff ff       	call   c0017a0c <Process::Process(bool, char const*, Process*, char**)>
c0017e28:	83 c4 18             	add    esp,0x18
c0017e2b:	89 1d 74 4b 02 c0    	mov    DWORD PTR ds:0xc0024b74,ebx
c0017e31:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017e37:	68 00 1f 02 c0       	push   0xc0021f00
c0017e3c:	e8 aa 71 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0017e41:	58                   	pop    eax
c0017e42:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017e48:	e8 80 50 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0017e4d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017e55:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017e5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e5e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017e68:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e6e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017e74:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017e7e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017e88:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017e92:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017e98:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017e9e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017ea8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017eae:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017eb8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017ebe:	5a                   	pop    edx
c0017ebf:	59                   	pop    ecx
c0017ec0:	68 c3 1d 02 c0       	push   0xc0021dc3
c0017ec5:	50                   	push   eax
c0017ec6:	e8 dc 87 fe ff       	call   c00006a7 <strcpy>
c0017ecb:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017ed2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017ed6:	83 c4 14             	add    esp,0x14
c0017ed9:	5b                   	pop    ebx
c0017eda:	5e                   	pop    esi
c0017edb:	e9 31 83 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017ee0 <schedule()>:
c0017ee0:	a1 48 4b 02 c0       	mov    eax,ds:0xc0024b48
c0017ee5:	85 c0                	test   eax,eax
c0017ee7:	74 0b                	je     c0017ef4 <schedule()+0x14>
c0017ee9:	c7 05 44 4b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024b44,0x1
c0017ef3:	c3                   	ret    
c0017ef4:	53                   	push   ebx
c0017ef5:	83 ec 14             	sub    esp,0x14
c0017ef8:	68 68 4b 02 c0       	push   0xc0024b68
c0017efd:	e8 26 6f 00 00       	call   c001ee28 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f02:	83 c4 10             	add    esp,0x10
c0017f05:	84 c0                	test   al,al
c0017f07:	75 38                	jne    c0017f41 <schedule()+0x61>
c0017f09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f0e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f11:	4a                   	dec    edx
c0017f12:	74 32                	je     c0017f46 <schedule()+0x66>
c0017f14:	83 ec 0c             	sub    esp,0xc
c0017f17:	68 68 4b 02 c0       	push   0xc0024b68
c0017f1c:	e8 ff 6e 00 00       	call   c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f21:	c7 04 24 68 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b68
c0017f28:	89 c3                	mov    ebx,eax
c0017f2a:	e8 15 6f 00 00       	call   c001ee44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f2f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f39:	e8 08 fd ff ff       	call   c0017c46 <switchToThread(ThreadControlBlock*)>
c0017f3e:	83 c4 10             	add    esp,0x10
c0017f41:	83 c4 08             	add    esp,0x8
c0017f44:	5b                   	pop    ebx
c0017f45:	c3                   	ret    
c0017f46:	83 ec 08             	sub    esp,0x8
c0017f49:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f50:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f56:	68 68 4b 02 c0       	push   0xc0024b68
c0017f5b:	e8 92 6f 00 00       	call   c001eef2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f60:	83 c4 10             	add    esp,0x10
c0017f63:	eb af                	jmp    c0017f14 <schedule()+0x34>

c0017f65 <unlockStuff()>:
c0017f65:	a1 48 4b 02 c0       	mov    eax,ds:0xc0024b48
c0017f6a:	48                   	dec    eax
c0017f6b:	a3 48 4b 02 c0       	mov    ds:0xc0024b48,eax
c0017f70:	75 09                	jne    c0017f7b <unlockStuff()+0x16>
c0017f72:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c0017f77:	85 c0                	test   eax,eax
c0017f79:	75 05                	jne    c0017f80 <unlockStuff()+0x1b>
c0017f7b:	e9 1d fc ff ff       	jmp    c0017b9d <enableIRQs()>
c0017f80:	83 ec 0c             	sub    esp,0xc
c0017f83:	c7 05 44 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b44,0x0
c0017f8d:	e8 4e ff ff ff       	call   c0017ee0 <schedule()>
c0017f92:	83 c4 0c             	add    esp,0xc
c0017f95:	e9 03 fc ff ff       	jmp    c0017b9d <enableIRQs()>

c0017f9a <forkProcess(regs*)>:
c0017f9a:	56                   	push   esi
c0017f9b:	53                   	push   ebx
c0017f9c:	50                   	push   eax
c0017f9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fa2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fa5:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c0017fad:	0f 85 3e 01 00 00    	jne    c00180f1 <forkProcess(regs*)+0x157>
c0017fb3:	e8 1b fc ff ff       	call   c0017bd3 <lockStuff()>
c0017fb8:	83 ec 0c             	sub    esp,0xc
c0017fbb:	68 3b 07 00 00       	push   0x73b
c0017fc0:	e8 37 6f ff ff       	call   c000eefc <operator new(unsigned long)>
c0017fc5:	89 c3                	mov    ebx,eax
c0017fc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fcc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017fd6:	50                   	push   eax
c0017fd7:	83 c0 0c             	add    eax,0xc
c0017fda:	50                   	push   eax
c0017fdb:	6a 00                	push   0x0
c0017fdd:	53                   	push   ebx
c0017fde:	e8 29 fa ff ff       	call   c0017a0c <Process::Process(bool, char const*, Process*, char**)>
c0017fe3:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c0017fe9:	83 c4 20             	add    esp,0x20
c0017fec:	85 f6                	test   esi,esi
c0017fee:	74 16                	je     c0018006 <forkProcess(regs*)+0x6c>
c0017ff0:	83 ec 0c             	sub    esp,0xc
c0017ff3:	56                   	push   esi
c0017ff4:	e8 3d 62 ff ff       	call   c000e236 <VAS::~VAS()>
c0017ff9:	59                   	pop    ecx
c0017ffa:	58                   	pop    eax
c0017ffb:	6a 10                	push   0x10
c0017ffd:	56                   	push   esi
c0017ffe:	e8 08 6f ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c0018003:	83 c4 10             	add    esp,0x10
c0018006:	83 ec 0c             	sub    esp,0xc
c0018009:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c0018012:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018017:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001801a:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018020:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c0018026:	6a 10                	push   0x10
c0018028:	e8 cf 6e ff ff       	call   c000eefc <operator new(unsigned long)>
c001802d:	59                   	pop    ecx
c001802e:	89 c6                	mov    esi,eax
c0018030:	58                   	pop    eax
c0018031:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018036:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018039:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001803f:	56                   	push   esi
c0018040:	e8 13 67 ff ff       	call   c000e758 <VAS::VAS(VAS*)>
c0018045:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c001804b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001804e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018050:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018056:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001805b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001805e:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c0018064:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018069:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001806c:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c0018072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018077:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c001807a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018084:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c001808a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018090:	81 c3 0c 02 00 00    	add    ebx,0x20c
c0018096:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001809b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001809e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00180a5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00180a8:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c00180af:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00180b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00180bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180c2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00180c5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00180c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180cd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00180d0:	58                   	pop    eax
c00180d1:	5a                   	pop    edx
c00180d2:	53                   	push   ebx
c00180d3:	68 68 4b 02 c0       	push   0xc0024b68
c00180d8:	e8 15 6e 00 00       	call   c001eef2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00180dd:	e8 83 fe ff ff       	call   c0017f65 <unlockStuff()>
c00180e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00180ed:	5a                   	pop    edx
c00180ee:	5b                   	pop    ebx
c00180ef:	5e                   	pop    esi
c00180f0:	c3                   	ret    
c00180f1:	83 ec 0c             	sub    esp,0xc
c00180f4:	68 34 1f 02 c0       	push   0xc0021f34
c00180f9:	e8 ed 6e ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c00180fe:	83 c4 10             	add    esp,0x10
c0018101:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018106:	eb e5                	jmp    c00180ed <forkProcess(regs*)+0x153>

c0018108 <Semaphore::tryAcquire()>:
c0018108:	83 ec 0c             	sub    esp,0xc
c001810b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001810f:	e8 bf fa ff ff       	call   c0017bd3 <lockStuff()>
c0018114:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018117:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018119:	7c 0b                	jl     c0018126 <Semaphore::tryAcquire()+0x1e>
c001811b:	e8 45 fe ff ff       	call   c0017f65 <unlockStuff()>
c0018120:	31 c0                	xor    eax,eax
c0018122:	83 c4 0c             	add    esp,0xc
c0018125:	c3                   	ret    
c0018126:	42                   	inc    edx
c0018127:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001812a:	e8 36 fe ff ff       	call   c0017f65 <unlockStuff()>
c001812f:	b0 01                	mov    al,0x1
c0018131:	83 c4 0c             	add    esp,0xc
c0018134:	c3                   	ret    
c0018135:	90                   	nop

c0018136 <Semaphore::assertLocked(char const*)>:
c0018136:	83 ec 0c             	sub    esp,0xc
c0018139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001813d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018141:	e8 8d fa ff ff       	call   c0017bd3 <lockStuff()>
c0018146:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018148:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001814b:	7c 08                	jl     c0018155 <Semaphore::assertLocked(char const*)+0x1f>
c001814d:	83 c4 0c             	add    esp,0xc
c0018150:	e9 10 fe ff ff       	jmp    c0017f65 <unlockStuff()>
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	52                   	push   edx
c0018159:	e8 22 cb ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001815e:	83 c4 10             	add    esp,0x10
c0018161:	83 c4 0c             	add    esp,0xc
c0018164:	e9 fc fd ff ff       	jmp    c0017f65 <unlockStuff()>

c0018169 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018169:	83 ec 0c             	sub    esp,0xc
c001816c:	e8 26 fa ff ff       	call   c0017b97 <getIRQNestingLevel()>
c0018171:	83 ec 08             	sub    esp,0x8
c0018174:	50                   	push   eax
c0018175:	68 60 1f 02 c0       	push   0xc0021f60
c001817a:	e8 6c 6e ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001817f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018183:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018188:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001818b:	e8 50 fd ff ff       	call   c0017ee0 <schedule()>
c0018190:	e8 19 fa ff ff       	call   c0017bae <unlockScheduler()>
c0018195:	e8 fd f9 ff ff       	call   c0017b97 <getIRQNestingLevel()>
c001819a:	5a                   	pop    edx
c001819b:	59                   	pop    ecx
c001819c:	50                   	push   eax
c001819d:	68 94 1f 02 c0       	push   0xc0021f94
c00181a2:	e8 44 6e ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c00181a7:	83 c4 1c             	add    esp,0x1c
c00181aa:	c3                   	ret    

c00181ab <blockTask(TaskState)>:
c00181ab:	83 ec 0c             	sub    esp,0xc
c00181ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181b2:	e8 f5 f9 ff ff       	call   c0017bac <lockScheduler()>
c00181b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00181bf:	e8 1c fd ff ff       	call   c0017ee0 <schedule()>
c00181c4:	83 c4 0c             	add    esp,0xc
c00181c7:	e9 e2 f9 ff ff       	jmp    c0017bae <unlockScheduler()>

c00181cc <waitTask(int, int*, int)>:
c00181cc:	83 ec 18             	sub    esp,0x18
c00181cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181d8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00181db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181e4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c00181e7:	6a 07                	push   0x7
c00181e9:	e8 bd ff ff ff       	call   c00181ab <blockTask(TaskState)>
c00181ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181f3:	83 c4 10             	add    esp,0x10
c00181f6:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c00181f9:	85 d2                	test   edx,edx
c00181fb:	74 0a                	je     c0018207 <waitTask(int, int*, int)+0x3b>
c00181fd:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018200:	89 02                	mov    DWORD PTR [edx],eax
c0018202:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018207:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001820a:	83 c4 0c             	add    esp,0xc
c001820d:	c3                   	ret    

c001820e <nanoSleepUntil(unsigned long long)>:
c001820e:	83 ec 0c             	sub    esp,0xc
c0018211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018215:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018219:	3b 05 90 3d 02 c0    	cmp    eax,DWORD PTR ds:0xc0023d90
c001821f:	89 d1                	mov    ecx,edx
c0018221:	1b 0d 94 3d 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023d94
c0018227:	73 04                	jae    c001822d <nanoSleepUntil(unsigned long long)+0x1f>
c0018229:	83 c4 0c             	add    esp,0xc
c001822c:	c3                   	ret    
c001822d:	e8 a1 f9 ff ff       	call   c0017bd3 <lockStuff()>
c0018232:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018238:	83 ec 08             	sub    esp,0x8
c001823b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001823e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0018241:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018247:	68 5c 4b 02 c0       	push   0xc0024b5c
c001824c:	e8 a1 6c 00 00       	call   c001eef2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018251:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018258:	e8 4e ff ff ff       	call   c00181ab <blockTask(TaskState)>
c001825d:	83 c4 1c             	add    esp,0x1c
c0018260:	e9 00 fd ff ff       	jmp    c0017f65 <unlockStuff()>

c0018265 <nanoSleep(unsigned long long)>:
c0018265:	a1 90 3d 02 c0       	mov    eax,ds:0xc0023d90
c001826a:	8b 15 94 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d94
c0018270:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018274:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018278:	eb 94                	jmp    c001820e <nanoSleepUntil(unsigned long long)>

c001827a <sleep(unsigned long long)>:
c001827a:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018282:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018287:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001828b:	01 ca                	add    edx,ecx
c001828d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018291:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018295:	eb ce                	jmp    c0018265 <nanoSleep(unsigned long long)>
c0018297:	90                   	nop

c0018298 <Semaphore::acquire()>:
c0018298:	83 ec 0c             	sub    esp,0xc
c001829b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829f:	e8 2f f9 ff ff       	call   c0017bd3 <lockStuff()>
c00182a4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00182a7:	3b 10                	cmp    edx,DWORD PTR [eax]
c00182a9:	7d 0c                	jge    c00182b7 <Semaphore::acquire()+0x1f>
c00182ab:	42                   	inc    edx
c00182ac:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00182af:	83 c4 0c             	add    esp,0xc
c00182b2:	e9 ae fc ff ff       	jmp    c0017f65 <unlockStuff()>
c00182b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00182bd:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c00182c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00182c7:	85 d2                	test   edx,edx
c00182c9:	74 2a                	je     c00182f5 <Semaphore::acquire()+0x5d>
c00182cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00182ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00182d4:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c00182d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00182dd:	83 ec 0c             	sub    esp,0xc
c00182e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00182e3:	6a 05                	push   0x5
c00182e5:	e8 c1 fe ff ff       	call   c00181ab <blockTask(TaskState)>
c00182ea:	83 c4 10             	add    esp,0x10
c00182ed:	83 c4 0c             	add    esp,0xc
c00182f0:	e9 70 fc ff ff       	jmp    c0017f65 <unlockStuff()>
c00182f5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00182fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00182fe:	eb d7                	jmp    c00182d7 <Semaphore::acquire()+0x3f>

c0018300 <execveProcess(char const*, char* const*, char* const*)>:
c0018300:	56                   	push   esi
c0018301:	53                   	push   ebx
c0018302:	50                   	push   eax
c0018303:	e8 cb f8 ff ff       	call   c0017bd3 <lockStuff()>
c0018308:	83 ec 0c             	sub    esp,0xc
c001830b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018310:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018313:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c0018319:	68 3b 07 00 00       	push   0x73b
c001831e:	e8 d9 6b ff ff       	call   c000eefc <operator new(unsigned long)>
c0018323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018327:	89 c3                	mov    ebx,eax
c0018329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001832e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018331:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c0018337:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001833b:	53                   	push   ebx
c001833c:	e8 13 f5 ff ff       	call   c0017854 <Process::Process(char const*, Process*, char**)>
c0018341:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018346:	83 c4 20             	add    esp,0x20
c0018349:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001834c:	85 f6                	test   esi,esi
c001834e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018350:	89 03                	mov    DWORD PTR [ebx],eax
c0018352:	74 06                	je     c001835a <execveProcess(char const*, char* const*, char* const*)+0x5a>
c0018354:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c001835a:	83 ec 0c             	sub    esp,0xc
c001835d:	53                   	push   ebx
c001835e:	e8 57 fa ff ff       	call   c0017dba <Process::createUserThread()>
c0018363:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001836a:	e8 3c fe ff ff       	call   c00181ab <blockTask(TaskState)>
c001836f:	e8 f1 fb ff ff       	call   c0017f65 <unlockStuff()>
c0018374:	e8 33 f8 ff ff       	call   c0017bac <lockScheduler()>
c0018379:	e8 62 fb ff ff       	call   c0017ee0 <schedule()>
c001837e:	e8 2b f8 ff ff       	call   c0017bae <unlockScheduler()>
c0018383:	83 c4 14             	add    esp,0x14
c0018386:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001838b:	5b                   	pop    ebx
c001838c:	5e                   	pop    esi
c001838d:	c3                   	ret    

c001838e <taskReturned>:
c001838e:	83 ec 18             	sub    esp,0x18
c0018391:	68 c8 1f 02 c0       	push   0xc0021fc8
c0018396:	e8 e5 c8 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001839b:	83 c4 10             	add    esp,0x10
c001839e:	83 ec 0c             	sub    esp,0xc
c00183a1:	6a 02                	push   0x2
c00183a3:	e8 03 fe ff ff       	call   c00181ab <blockTask(TaskState)>
c00183a8:	e8 ff f7 ff ff       	call   c0017bac <lockScheduler()>
c00183ad:	e8 2e fb ff ff       	call   c0017ee0 <schedule()>
c00183b2:	e8 f7 f7 ff ff       	call   c0017bae <unlockScheduler()>
c00183b7:	83 c4 10             	add    esp,0x10
c00183ba:	eb e2                	jmp    c001839e <taskReturned+0x10>

c00183bc <unblockTask(ThreadControlBlock*)>:
c00183bc:	53                   	push   ebx
c00183bd:	83 ec 08             	sub    esp,0x8
c00183c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183c4:	e8 e3 f7 ff ff       	call   c0017bac <lockScheduler()>
c00183c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183cc:	85 c0                	test   eax,eax
c00183ce:	74 5c                	je     c001842c <unblockTask(ThreadControlBlock*)+0x70>
c00183d0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183d3:	48                   	dec    eax
c00183d4:	74 31                	je     c0018407 <unblockTask(ThreadControlBlock*)+0x4b>
c00183d6:	83 ec 0c             	sub    esp,0xc
c00183d9:	68 68 4b 02 c0       	push   0xc0024b68
c00183de:	e8 3d 6a 00 00       	call   c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183e3:	83 c4 10             	add    esp,0x10
c00183e6:	85 c0                	test   eax,eax
c00183e8:	75 17                	jne    c0018401 <unblockTask(ThreadControlBlock*)+0x45>
c00183ea:	eb 65                	jmp    c0018451 <unblockTask(ThreadControlBlock*)+0x95>
c00183ec:	83 ec 08             	sub    esp,0x8
c00183ef:	50                   	push   eax
c00183f0:	68 68 4b 02 c0       	push   0xc0024b68
c00183f5:	e8 36 6d 00 00       	call   c001f130 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00183fa:	83 c4 10             	add    esp,0x10
c00183fd:	85 c0                	test   eax,eax
c00183ff:	74 50                	je     c0018451 <unblockTask(ThreadControlBlock*)+0x95>
c0018401:	39 c3                	cmp    ebx,eax
c0018403:	75 e7                	jne    c00183ec <unblockTask(ThreadControlBlock*)+0x30>
c0018405:	eb 1c                	jmp    c0018423 <unblockTask(ThreadControlBlock*)+0x67>
c0018407:	83 ec 0c             	sub    esp,0xc
c001840a:	68 b8 20 02 c0       	push   0xc00220b8
c001840f:	e8 d7 6b ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018414:	c7 04 24 44 20 02 c0 	mov    DWORD PTR [esp],0xc0022044
c001841b:	e8 cb 6b ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	83 c4 08             	add    esp,0x8
c0018426:	5b                   	pop    ebx
c0018427:	e9 82 f7 ff ff       	jmp    c0017bae <unlockScheduler()>
c001842c:	83 ec 0c             	sub    esp,0xc
c001842f:	68 fc 1f 02 c0       	push   0xc0021ffc
c0018434:	e8 b2 6b ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018439:	c7 04 24 44 20 02 c0 	mov    DWORD PTR [esp],0xc0022044
c0018440:	e8 a6 6b ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018445:	83 c4 10             	add    esp,0x10
c0018448:	83 c4 08             	add    esp,0x8
c001844b:	5b                   	pop    ebx
c001844c:	e9 5d f7 ff ff       	jmp    c0017bae <unlockScheduler()>
c0018451:	83 ec 08             	sub    esp,0x8
c0018454:	53                   	push   ebx
c0018455:	68 68 4b 02 c0       	push   0xc0024b68
c001845a:	e8 93 6a 00 00       	call   c001eef2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001845f:	83 c4 10             	add    esp,0x10
c0018462:	83 c4 08             	add    esp,0x8
c0018465:	5b                   	pop    ebx
c0018466:	e9 43 f7 ff ff       	jmp    c0017bae <unlockScheduler()>

c001846b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001846b:	55                   	push   ebp
c001846c:	57                   	push   edi
c001846d:	56                   	push   esi
c001846e:	53                   	push   ebx
c001846f:	83 ec 1c             	sub    esp,0x1c
c0018472:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018476:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018479:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001847f:	85 c9                	test   ecx,ecx
c0018481:	7e 20                	jle    c00184a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0018483:	31 f6                	xor    esi,esi
c0018485:	83 ec 0c             	sub    esp,0xc
c0018488:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001848f:	46                   	inc    esi
c0018490:	e8 99 37 ff ff       	call   c000bc2e <free>
c0018495:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018498:	83 c4 10             	add    esp,0x10
c001849b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c00184a1:	7f e2                	jg     c0018485 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c00184a3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00184ad:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00184b2:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c00184b5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00184b8:	d3 c0                	rol    eax,cl
c00184ba:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c00184c1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00184c4:	89 f7                	mov    edi,esi
c00184c6:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c00184ce:	0f 85 4f 01 00 00    	jne    c0018623 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c00184d4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00184da:	85 c0                	test   eax,eax
c00184dc:	0f 84 aa 00 00 00    	je     c001858c <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c00184e2:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00184e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00184e9:	31 c9                	xor    ecx,ecx
c00184eb:	eb 10                	jmp    c00184fd <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c00184ed:	41                   	inc    ecx
c00184ee:	83 f9 10             	cmp    ecx,0x10
c00184f1:	0f 84 95 00 00 00    	je     c001858c <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c00184f7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00184fd:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018504:	d3 fa                	sar    edx,cl
c0018506:	83 e2 01             	and    edx,0x1
c0018509:	74 e2                	je     c00184ed <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001850b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001850e:	01 ca                	add    edx,ecx
c0018510:	89 d5                	mov    ebp,edx
c0018512:	c1 e5 05             	shl    ebp,0x5
c0018515:	01 ea                	add    edx,ebp
c0018517:	01 d0                	add    eax,edx
c0018519:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001851f:	83 fd 07             	cmp    ebp,0x7
c0018522:	75 c9                	jne    c00184ed <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018524:	05 40 02 00 00       	add    eax,0x240
c0018529:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001852c:	83 fd ff             	cmp    ebp,0xffffffff
c001852f:	0f 8c 08 01 00 00    	jl     c001863d <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c0018535:	0f 84 b9 01 00 00    	je     c00186f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001853b:	85 ed                	test   ebp,ebp
c001853d:	0f 84 a0 01 00 00    	je     c00186e3 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c0018543:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018545:	75 a6                	jne    c00184ed <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018547:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001854d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018551:	01 d0                	add    eax,edx
c0018553:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018557:	83 ec 0c             	sub    esp,0xc
c001855a:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018560:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018563:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018569:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018570:	50                   	push   eax
c0018571:	e8 46 fe ff ff       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c0018576:	83 c4 10             	add    esp,0x10
c0018579:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001857c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018580:	89 f7                	mov    edi,esi
c0018582:	41                   	inc    ecx
c0018583:	83 f9 10             	cmp    ecx,0x10
c0018586:	0f 85 6b ff ff ff    	jne    c00184f7 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001858c:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018592:	85 c0                	test   eax,eax
c0018594:	74 5d                	je     c00185f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018596:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001859c:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c00185a2:	74 4f                	je     c00185f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c00185a4:	83 ec 0c             	sub    esp,0xc
c00185a7:	68 68 4b 02 c0       	push   0xc0024b68
c00185ac:	e8 6f 68 00 00       	call   c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185b1:	c7 04 24 68 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b68
c00185b8:	89 c7                	mov    edi,eax
c00185ba:	e8 69 68 00 00       	call   c001ee28 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185bf:	83 c4 10             	add    esp,0x10
c00185c2:	84 c0                	test   al,al
c00185c4:	0f 84 e4 00 00 00    	je     c00186ae <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c00185ca:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00185cd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00185d3:	85 d2                	test   edx,edx
c00185d5:	74 0f                	je     c00185e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c00185d7:	83 ec 0c             	sub    esp,0xc
c00185da:	8b 02                	mov    eax,DWORD PTR [edx]
c00185dc:	52                   	push   edx
c00185dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00185e0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00185e3:	83 c4 10             	add    esp,0x10
c00185e6:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00185f0:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00185f3:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00185f9:	85 db                	test   ebx,ebx
c00185fb:	74 16                	je     c0018613 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c00185fd:	83 ec 0c             	sub    esp,0xc
c0018600:	53                   	push   ebx
c0018601:	e8 30 5c ff ff       	call   c000e236 <VAS::~VAS()>
c0018606:	58                   	pop    eax
c0018607:	5a                   	pop    edx
c0018608:	6a 10                	push   0x10
c001860a:	53                   	push   ebx
c001860b:	e8 fb 68 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c0018610:	83 c4 10             	add    esp,0x10
c0018613:	83 ec 0c             	sub    esp,0xc
c0018616:	68 ce 1d 02 c0       	push   0xc0021dce
c001861b:	e8 cb 69 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018620:	83 c4 10             	add    esp,0x10
c0018623:	83 ec 08             	sub    esp,0x8
c0018626:	68 3b 07 00 00       	push   0x73b
c001862b:	68 dc 1d 02 c0       	push   0xc0021ddc
c0018630:	e8 b6 69 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018635:	83 c4 2c             	add    esp,0x2c
c0018638:	5b                   	pop    ebx
c0018639:	5e                   	pop    esi
c001863a:	5f                   	pop    edi
c001863b:	5d                   	pop    ebp
c001863c:	c3                   	ret    
c001863d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018641:	83 ec 0c             	sub    esp,0xc
c0018644:	68 fc 20 02 c0       	push   0xc00220fc
c0018649:	e8 32 c6 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001864e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018651:	83 c4 10             	add    esp,0x10
c0018654:	89 f7                	mov    edi,esi
c0018656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001865a:	e9 8e fe ff ff       	jmp    c00184ed <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001865f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018665:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001866b:	75 1c                	jne    c0018689 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001866d:	83 ec 0c             	sub    esp,0xc
c0018670:	68 64 21 02 c0       	push   0xc0022164
c0018675:	e8 71 69 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001867a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018681:	e8 25 fb ff ff       	call   c00181ab <blockTask(TaskState)>
c0018686:	83 c4 10             	add    esp,0x10
c0018689:	83 ec 08             	sub    esp,0x8
c001868c:	56                   	push   esi
c001868d:	68 68 4b 02 c0       	push   0xc0024b68
c0018692:	e8 5b 68 00 00       	call   c001eef2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018697:	c7 04 24 68 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b68
c001869e:	e8 7d 67 00 00       	call   c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186a3:	83 c4 10             	add    esp,0x10
c00186a6:	39 f8                	cmp    eax,edi
c00186a8:	0f 84 1c ff ff ff    	je     c00185ca <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c00186ae:	83 ec 0c             	sub    esp,0xc
c00186b1:	68 68 4b 02 c0       	push   0xc0024b68
c00186b6:	e8 65 67 00 00       	call   c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186bb:	c7 04 24 68 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b68
c00186c2:	89 c6                	mov    esi,eax
c00186c4:	e8 7b 67 00 00       	call   c001ee44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186c9:	83 c4 10             	add    esp,0x10
c00186cc:	39 f3                	cmp    ebx,esi
c00186ce:	74 b9                	je     c0018689 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00186d0:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00186d3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00186d6:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c00186dc:	75 ab                	jne    c0018689 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00186de:	e9 7c ff ff ff       	jmp    c001865f <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00186e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186e7:	83 ec 0c             	sub    esp,0xc
c00186ea:	68 30 21 02 c0       	push   0xc0022130
c00186ef:	e9 55 ff ff ff       	jmp    c0018649 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c00186f4:	8b 36                	mov    esi,DWORD PTR [esi]
c00186f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186fa:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00186fd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018700:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c0018706:	01 d7                	add    edi,edx
c0018708:	89 f8                	mov    eax,edi
c001870a:	e9 44 fe ff ff       	jmp    c0018553 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001870f <cleanerTaskFunction(void*)>:
c001870f:	53                   	push   ebx
c0018710:	83 ec 08             	sub    esp,0x8
c0018713:	e8 96 f4 ff ff       	call   c0017bae <unlockScheduler()>
c0018718:	e8 8f f4 ff ff       	call   c0017bac <lockScheduler()>
c001871d:	80 3d 2c 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024b2c,0x0
c0018724:	0f 85 8e 00 00 00    	jne    c00187b8 <cleanerTaskFunction(void*)+0xa9>
c001872a:	83 ec 0c             	sub    esp,0xc
c001872d:	6a 02                	push   0x2
c001872f:	e8 35 fa ff ff       	call   c0018169 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018734:	83 c4 10             	add    esp,0x10
c0018737:	c6 05 2c 4b 02 c0 00 	mov    BYTE PTR ds:0xc0024b2c,0x0
c001873e:	e8 90 f4 ff ff       	call   c0017bd3 <lockStuff()>
c0018743:	e8 64 f4 ff ff       	call   c0017bac <lockScheduler()>
c0018748:	83 ec 0c             	sub    esp,0xc
c001874b:	68 50 4b 02 c0       	push   0xc0024b50
c0018750:	e8 d3 66 00 00       	call   c001ee28 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	84 c0                	test   al,al
c001875a:	75 40                	jne    c001879c <cleanerTaskFunction(void*)+0x8d>
c001875c:	83 ec 0c             	sub    esp,0xc
c001875f:	68 50 4b 02 c0       	push   0xc0024b50
c0018764:	e8 b7 66 00 00       	call   c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018769:	c7 04 24 50 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b50
c0018770:	89 c3                	mov    ebx,eax
c0018772:	e8 cd 66 00 00       	call   c001ee44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018777:	c7 04 24 f2 1d 02 c0 	mov    DWORD PTR [esp],0xc0021df2
c001877e:	e8 68 68 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018783:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018786:	e8 e0 fc ff ff       	call   c001846b <cleanupTerminatedTask(ThreadControlBlock*)>
c001878b:	c7 04 24 0b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e0b
c0018792:	e8 54 68 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018797:	83 c4 10             	add    esp,0x10
c001879a:	eb ac                	jmp    c0018748 <cleanerTaskFunction(void*)+0x39>
c001879c:	e8 0d f4 ff ff       	call   c0017bae <unlockScheduler()>
c00187a1:	e8 bf f7 ff ff       	call   c0017f65 <unlockStuff()>
c00187a6:	e8 01 f4 ff ff       	call   c0017bac <lockScheduler()>
c00187ab:	80 3d 2c 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024b2c,0x0
c00187b2:	0f 84 72 ff ff ff    	je     c001872a <cleanerTaskFunction(void*)+0x1b>
c00187b8:	e8 f1 f3 ff ff       	call   c0017bae <unlockScheduler()>
c00187bd:	e9 75 ff ff ff       	jmp    c0018737 <cleanerTaskFunction(void*)+0x28>

c00187c2 <terminateTask(int)>:
c00187c2:	83 ec 18             	sub    esp,0x18
c00187c5:	68 1e 1e 02 c0       	push   0xc0021e1e
c00187ca:	e8 1c 68 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c00187cf:	e8 ff f3 ff ff       	call   c0017bd3 <lockStuff()>
c00187d4:	e8 d3 f3 ff ff       	call   c0017bac <lockScheduler()>
c00187d9:	c7 04 24 38 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e38
c00187e0:	e8 06 68 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c00187e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187ee:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00187f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187f6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00187f9:	5a                   	pop    edx
c00187fa:	59                   	pop    ecx
c00187fb:	50                   	push   eax
c00187fc:	68 50 4b 02 c0       	push   0xc0024b50
c0018801:	e8 ec 66 00 00       	call   c001eef2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018806:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001880b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018812:	c7 04 24 52 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e52
c0018819:	e8 cd 67 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001881e:	83 c4 10             	add    esp,0x10
c0018821:	a1 28 4b 02 c0       	mov    eax,ds:0xc0024b28
c0018826:	85 c0                	test   eax,eax
c0018828:	74 5a                	je     c0018884 <terminateTask(int)+0xc2>
c001882a:	83 ec 0c             	sub    esp,0xc
c001882d:	68 6c 1e 02 c0       	push   0xc0021e6c
c0018832:	e8 b4 67 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018837:	58                   	pop    eax
c0018838:	c6 05 2c 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b2c,0x1
c001883f:	ff 35 28 4b 02 c0    	push   DWORD PTR ds:0xc0024b28
c0018845:	e8 72 fb ff ff       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c001884a:	c7 04 24 86 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e86
c0018851:	e8 95 67 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018856:	83 c4 10             	add    esp,0x10
c0018859:	e8 50 f3 ff ff       	call   c0017bae <unlockScheduler()>
c001885e:	e8 02 f7 ff ff       	call   c0017f65 <unlockStuff()>
c0018863:	83 ec 0c             	sub    esp,0xc
c0018866:	68 be 1e 02 c0       	push   0xc0021ebe
c001886b:	e8 7b 67 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018870:	83 c4 10             	add    esp,0x10
c0018873:	e8 34 f3 ff ff       	call   c0017bac <lockScheduler()>
c0018878:	e8 63 f6 ff ff       	call   c0017ee0 <schedule()>
c001887d:	e8 2c f3 ff ff       	call   c0017bae <unlockScheduler()>
c0018882:	eb ef                	jmp    c0018873 <terminateTask(int)+0xb1>
c0018884:	83 ec 0c             	sub    esp,0xc
c0018887:	68 a0 1e 02 c0       	push   0xc0021ea0
c001888c:	e8 5a 67 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0018891:	83 c4 10             	add    esp,0x10
c0018894:	eb c3                	jmp    c0018859 <terminateTask(int)+0x97>

c0018896 <Thr::terminateFromIRQ(int)>:
c0018896:	83 ec 18             	sub    esp,0x18
c0018899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001889d:	e8 20 ff ff ff       	call   c00187c2 <terminateTask(int)>

c00188a2 <Semaphore::release()>:
c00188a2:	83 ec 0c             	sub    esp,0xc
c00188a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188a9:	e8 25 f3 ff ff       	call   c0017bd3 <lockStuff()>
c00188ae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00188b1:	85 d2                	test   edx,edx
c00188b3:	74 1a                	je     c00188cf <Semaphore::release()+0x2d>
c00188b5:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00188b8:	83 ec 0c             	sub    esp,0xc
c00188bb:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00188be:	52                   	push   edx
c00188bf:	e8 f8 fa ff ff       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c00188c4:	83 c4 10             	add    esp,0x10
c00188c7:	83 c4 0c             	add    esp,0xc
c00188ca:	e9 96 f6 ff ff       	jmp    c0017f65 <unlockStuff()>
c00188cf:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c00188d2:	83 c4 0c             	add    esp,0xc
c00188d5:	e9 8b f6 ff ff       	jmp    c0017f65 <unlockStuff()>

c00188da <__static_initialization_and_destruction_0(int, int)>:
c00188da:	83 ec 0c             	sub    esp,0xc
c00188dd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00188e2:	0f 85 88 00 00 00    	jne    c0018970 <__static_initialization_and_destruction_0(int, int)+0x96>
c00188e8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00188f0:	75 7e                	jne    c0018970 <__static_initialization_and_destruction_0(int, int)+0x96>
c00188f2:	83 ec 0c             	sub    esp,0xc
c00188f5:	68 68 4b 02 c0       	push   0xc0024b68
c00188fa:	e8 d9 67 00 00       	call   c001f0d8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00188ff:	83 c4 10             	add    esp,0x10
c0018902:	83 ec 04             	sub    esp,0x4
c0018905:	68 50 2b 02 c0       	push   0xc0022b50
c001890a:	68 68 4b 02 c0       	push   0xc0024b68
c001890f:	68 98 f0 01 c0       	push   0xc001f098
c0018914:	e8 6e 65 ff ff       	call   c000ee87 <__cxa_atexit>
c0018919:	83 c4 10             	add    esp,0x10
c001891c:	83 ec 0c             	sub    esp,0xc
c001891f:	68 5c 4b 02 c0       	push   0xc0024b5c
c0018924:	e8 af 67 00 00       	call   c001f0d8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018929:	83 c4 10             	add    esp,0x10
c001892c:	83 ec 04             	sub    esp,0x4
c001892f:	68 50 2b 02 c0       	push   0xc0022b50
c0018934:	68 5c 4b 02 c0       	push   0xc0024b5c
c0018939:	68 98 f0 01 c0       	push   0xc001f098
c001893e:	e8 44 65 ff ff       	call   c000ee87 <__cxa_atexit>
c0018943:	83 c4 10             	add    esp,0x10
c0018946:	83 ec 0c             	sub    esp,0xc
c0018949:	68 50 4b 02 c0       	push   0xc0024b50
c001894e:	e8 85 67 00 00       	call   c001f0d8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018953:	83 c4 10             	add    esp,0x10
c0018956:	83 ec 04             	sub    esp,0x4
c0018959:	68 50 2b 02 c0       	push   0xc0022b50
c001895e:	68 50 4b 02 c0       	push   0xc0024b50
c0018963:	68 98 f0 01 c0       	push   0xc001f098
c0018968:	e8 1a 65 ff ff       	call   c000ee87 <__cxa_atexit>
c001896d:	83 c4 10             	add    esp,0x10
c0018970:	90                   	nop
c0018971:	83 c4 0c             	add    esp,0xc
c0018974:	c3                   	ret    

c0018975 <_GLOBAL__sub_I_kernelProcess>:
c0018975:	83 ec 0c             	sub    esp,0xc
c0018978:	83 ec 08             	sub    esp,0x8
c001897b:	68 ff ff 00 00       	push   0xffff
c0018980:	6a 01                	push   0x1
c0018982:	e8 53 ff ff ff       	call   c00188da <__static_initialization_and_destruction_0(int, int)>
c0018987:	83 c4 10             	add    esp,0x10
c001898a:	83 c4 0c             	add    esp,0xc
c001898d:	c3                   	ret    

c001898e <Vm::vm8086EntryPoint(void*)>:
c001898e:	83 ec 0c             	sub    esp,0xc
c0018991:	e8 18 f2 ff ff       	call   c0017bae <unlockScheduler()>
c0018996:	fb                   	sti    
c0018997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001899c:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c00189a0:	52                   	push   edx
c00189a1:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c00189a5:	52                   	push   edx
c00189a6:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00189aa:	52                   	push   edx
c00189ab:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00189af:	50                   	push   eax
c00189b0:	e8 00 78 fe ff       	call   c00001b5 <goToVM86>
c00189b5:	83 c4 1c             	add    esp,0x1c
c00189b8:	c3                   	ret    

c00189b9 <Vm::inbv(unsigned short)>:
c00189b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00189bd:	ec                   	in     al,dx
c00189be:	c3                   	ret    

c00189bf <Vm::outbv(unsigned short, unsigned char)>:
c00189bf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00189c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189c7:	ee                   	out    dx,al
c00189c8:	c3                   	ret    

c00189c9 <Vm::realToLinear(unsigned short, unsigned short)>:
c00189c9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00189ce:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00189d3:	c1 e0 04             	shl    eax,0x4
c00189d6:	01 d0                	add    eax,edx
c00189d8:	c3                   	ret    

c00189d9 <Vm::getSegment(unsigned int)>:
c00189d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189dd:	c1 e8 10             	shr    eax,0x10
c00189e0:	c3                   	ret    

c00189e1 <Vm::getOffset(unsigned int)>:
c00189e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189e5:	c3                   	ret    

c00189e6 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00189e6:	55                   	push   ebp
c00189e7:	57                   	push   edi
c00189e8:	56                   	push   esi
c00189e9:	53                   	push   ebx
c00189ea:	83 ec 2c             	sub    esp,0x2c
c00189ed:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00189f1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00189f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00189f9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00189fd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018a01:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0018a05:	e8 a2 f1 ff ff       	call   c0017bac <lockScheduler()>
c0018a0a:	68 80 00 00 00       	push   0x80
c0018a0f:	6a 00                	push   0x0
c0018a11:	68 8e 89 01 c0       	push   0xc001898e
c0018a16:	55                   	push   ebp
c0018a17:	e8 ba f2 ff ff       	call   c0017cd6 <Process::createThread(void (*)(void*), void*, int)>
c0018a1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a20:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018a24:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018a28:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018a2c:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018a30:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018a34:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018a3b:	e8 bc 64 ff ff       	call   c000eefc <operator new(unsigned long)>
c0018a40:	83 c4 0c             	add    esp,0xc
c0018a43:	89 c3                	mov    ebx,eax
c0018a45:	55                   	push   ebp
c0018a46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018a4a:	50                   	push   eax
c0018a4b:	e8 ca 6a ff ff       	call   c000f51a <File::File(char const*, Process*)>
c0018a50:	83 c4 0c             	add    esp,0xc
c0018a53:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018a57:	50                   	push   eax
c0018a58:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018a5c:	50                   	push   eax
c0018a5d:	53                   	push   ebx
c0018a5e:	e8 c7 6d ff ff       	call   c000f82a <File::stat(unsigned long long*, bool*)>
c0018a63:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018a67:	83 c4 10             	add    esp,0x10
c0018a6a:	84 d2                	test   dl,dl
c0018a6c:	74 1c                	je     c0018a8a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018a6e:	83 ec 0c             	sub    esp,0xc
c0018a71:	68 8c 21 02 c0       	push   0xc002218c
c0018a76:	e8 05 c2 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c0018a7b:	e8 2e f1 ff ff       	call   c0017bae <unlockScheduler()>
c0018a80:	83 c4 10             	add    esp,0x10
c0018a83:	31 d2                	xor    edx,edx
c0018a85:	e9 81 00 00 00       	jmp    c0018b0b <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018a8a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018a8e:	51                   	push   ecx
c0018a8f:	51                   	push   ecx
c0018a90:	6a 01                	push   0x1
c0018a92:	53                   	push   ebx
c0018a93:	e8 e6 6a ff ff       	call   c000f57e <File::open(FileOpenMode)>
c0018a98:	83 c4 10             	add    esp,0x10
c0018a9b:	85 c0                	test   eax,eax
c0018a9d:	74 1b                	je     c0018aba <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018a9f:	83 ec 0c             	sub    esp,0xc
c0018aa2:	68 a5 21 02 c0       	push   0xc00221a5
c0018aa7:	e8 d4 c1 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c0018aac:	e8 fd f0 ff ff       	call   c0017bae <unlockScheduler()>
c0018ab1:	83 c4 10             	add    esp,0x10
c0018ab4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018ab8:	eb 51                	jmp    c0018b0b <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018aba:	83 ec 0c             	sub    esp,0xc
c0018abd:	0f b7 ff             	movzx  edi,di
c0018ac0:	6a 07                	push   0x7
c0018ac2:	0f b7 f6             	movzx  esi,si
c0018ac5:	68 00 01 00 00       	push   0x100
c0018aca:	6a 00                	push   0x0
c0018acc:	6a 00                	push   0x0
c0018ace:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018ad4:	e8 b5 5b ff ff       	call   c000e68e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018ad9:	83 c4 18             	add    esp,0x18
c0018adc:	57                   	push   edi
c0018add:	56                   	push   esi
c0018ade:	e8 e6 fe ff ff       	call   c00189c9 <Vm::realToLinear(unsigned short, unsigned short)>
c0018ae3:	5a                   	pop    edx
c0018ae4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018ae6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018aea:	51                   	push   ecx
c0018aeb:	50                   	push   eax
c0018aec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018af0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018af4:	53                   	push   ebx
c0018af5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018af8:	83 c4 14             	add    esp,0x14
c0018afb:	53                   	push   ebx
c0018afc:	e8 db 6a ff ff       	call   c000f5dc <File::close()>
c0018b01:	e8 a8 f0 ff ff       	call   c0017bae <unlockScheduler()>
c0018b06:	83 c4 10             	add    esp,0x10
c0018b09:	b2 01                	mov    dl,0x1
c0018b0b:	83 c4 2c             	add    esp,0x2c
c0018b0e:	88 d0                	mov    al,dl
c0018b10:	5b                   	pop    ebx
c0018b11:	5e                   	pop    esi
c0018b12:	5f                   	pop    edi
c0018b13:	5d                   	pop    ebp
c0018b14:	c3                   	ret    

c0018b15 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018b15:	57                   	push   edi
c0018b16:	56                   	push   esi
c0018b17:	53                   	push   ebx
c0018b18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018b1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b20:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018b24:	83 e8 06             	sub    eax,0x6
c0018b27:	0f b7 c0             	movzx  eax,ax
c0018b2a:	50                   	push   eax
c0018b2b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018b30:	50                   	push   eax
c0018b31:	e8 93 fe ff ff       	call   c00189c9 <Vm::realToLinear(unsigned short, unsigned short)>
c0018b36:	5a                   	pop    edx
c0018b37:	5e                   	pop    esi
c0018b38:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018b3b:	8d 56 fa             	lea    edx,[esi-0x6]
c0018b3e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018b44:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018b47:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018b4a:	83 c2 02             	add    edx,0x2
c0018b4d:	66 89 10             	mov    WORD PTR [eax],dx
c0018b50:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018b53:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018b57:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018b5a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018b5e:	89 d6                	mov    esi,edx
c0018b60:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018b66:	66 81 e6 ff fd       	and    si,0xfdff
c0018b6b:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018b6f:	74 07                	je     c0018b78 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018b71:	89 d6                	mov    esi,edx
c0018b73:	66 81 ce 00 02       	or     si,0x200
c0018b78:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018b7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b81:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018b85:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018b8d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018b90:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018b98:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018b9b:	5b                   	pop    ebx
c0018b9c:	5e                   	pop    esi
c0018b9d:	5f                   	pop    edi
c0018b9e:	c3                   	ret    

c0018b9f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018b9f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018ba4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018ba9:	c1 e0 04             	shl    eax,0x4
c0018bac:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018baf:	c3                   	ret    

c0018bb0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018bb0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bb5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018bba:	c1 e0 04             	shl    eax,0x4
c0018bbd:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018bc1:	c3                   	ret    

c0018bc2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018bc2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bc7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018bcc:	c1 e0 04             	shl    eax,0x4
c0018bcf:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018bd2:	c3                   	ret    

c0018bd3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018bd3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bd8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018bdd:	c1 e0 04             	shl    eax,0x4
c0018be0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018be4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018be7:	c3                   	ret    

c0018be8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018be8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018bf2:	c1 e0 04             	shl    eax,0x4
c0018bf5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018bf9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018bfd:	c3                   	ret    

c0018bfe <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018bfe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c03:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c08:	c1 e0 04             	shl    eax,0x4
c0018c0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c0f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018c12:	c3                   	ret    

c0018c13 <Vm::faultHandler(regs*)>:
c0018c13:	55                   	push   ebp
c0018c14:	57                   	push   edi
c0018c15:	56                   	push   esi
c0018c16:	53                   	push   ebx
c0018c17:	83 ec 1c             	sub    esp,0x1c
c0018c1a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c1e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c21:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018c25:	0f b7 f0             	movzx  esi,ax
c0018c28:	52                   	push   edx
c0018c29:	0f b7 c0             	movzx  eax,ax
c0018c2c:	50                   	push   eax
c0018c2d:	e8 97 fd ff ff       	call   c00189c9 <Vm::realToLinear(unsigned short, unsigned short)>
c0018c32:	5a                   	pop    edx
c0018c33:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018c36:	59                   	pop    ecx
c0018c37:	89 c7                	mov    edi,eax
c0018c39:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018c3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c40:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c49:	0f b7 c5             	movzx  eax,bp
c0018c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c50:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018c54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018c58:	e8 6c fd ff ff       	call   c00189c9 <Vm::realToLinear(unsigned short, unsigned short)>
c0018c5d:	5a                   	pop    edx
c0018c5e:	59                   	pop    ecx
c0018c5f:	b1 06                	mov    cl,0x6
c0018c61:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018c66:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018c6b:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018c6e:	80 fa 9d             	cmp    dl,0x9d
c0018c71:	0f 84 1d 02 00 00    	je     c0018e94 <Vm::faultHandler(regs*)+0x281>
c0018c77:	0f 87 8e 00 00 00    	ja     c0018d0b <Vm::faultHandler(regs*)+0xf8>
c0018c7d:	80 fa 66             	cmp    dl,0x66
c0018c80:	0f 84 89 01 00 00    	je     c0018e0f <Vm::faultHandler(regs*)+0x1fc>
c0018c86:	77 44                	ja     c0018ccc <Vm::faultHandler(regs*)+0xb9>
c0018c88:	80 fa 36             	cmp    dl,0x36
c0018c8b:	0f 84 74 01 00 00    	je     c0018e05 <Vm::faultHandler(regs*)+0x1f2>
c0018c91:	77 1a                	ja     c0018cad <Vm::faultHandler(regs*)+0x9a>
c0018c93:	80 fa 26             	cmp    dl,0x26
c0018c96:	0f 84 4b 01 00 00    	je     c0018de7 <Vm::faultHandler(regs*)+0x1d4>
c0018c9c:	80 fa 2e             	cmp    dl,0x2e
c0018c9f:	0f 85 4a 05 00 00    	jne    c00191ef <Vm::faultHandler(regs*)+0x5dc>
c0018ca5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ca8:	31 c9                	xor    ecx,ecx
c0018caa:	47                   	inc    edi
c0018cab:	eb be                	jmp    c0018c6b <Vm::faultHandler(regs*)+0x58>
c0018cad:	80 fa 64             	cmp    dl,0x64
c0018cb0:	0f 84 3b 01 00 00    	je     c0018df1 <Vm::faultHandler(regs*)+0x1de>
c0018cb6:	0f 87 3f 01 00 00    	ja     c0018dfb <Vm::faultHandler(regs*)+0x1e8>
c0018cbc:	80 fa 3e             	cmp    dl,0x3e
c0018cbf:	0f 85 2a 05 00 00    	jne    c00191ef <Vm::faultHandler(regs*)+0x5dc>
c0018cc5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018cc8:	b1 01                	mov    cl,0x1
c0018cca:	eb de                	jmp    c0018caa <Vm::faultHandler(regs*)+0x97>
c0018ccc:	80 fa 6d             	cmp    dl,0x6d
c0018ccf:	0f 84 bf 02 00 00    	je     c0018f94 <Vm::faultHandler(regs*)+0x381>
c0018cd5:	77 17                	ja     c0018cee <Vm::faultHandler(regs*)+0xdb>
c0018cd7:	80 fa 67             	cmp    dl,0x67
c0018cda:	0f 84 3c 01 00 00    	je     c0018e1c <Vm::faultHandler(regs*)+0x209>
c0018ce0:	80 fa 6c             	cmp    dl,0x6c
c0018ce3:	0f 84 5d 02 00 00    	je     c0018f46 <Vm::faultHandler(regs*)+0x333>
c0018ce9:	e9 01 05 00 00       	jmp    c00191ef <Vm::faultHandler(regs*)+0x5dc>
c0018cee:	80 fa 6f             	cmp    dl,0x6f
c0018cf1:	0f 84 8b 03 00 00    	je     c0019082 <Vm::faultHandler(regs*)+0x46f>
c0018cf7:	0f 82 0f 03 00 00    	jb     c001900c <Vm::faultHandler(regs*)+0x3f9>
c0018cfd:	80 fa 9c             	cmp    dl,0x9c
c0018d00:	0f 84 23 01 00 00    	je     c0018e29 <Vm::faultHandler(regs*)+0x216>
c0018d06:	e9 e4 04 00 00       	jmp    c00191ef <Vm::faultHandler(regs*)+0x5dc>
c0018d0b:	80 fa ec             	cmp    dl,0xec
c0018d0e:	0f 84 7f 04 00 00    	je     c0019193 <Vm::faultHandler(regs*)+0x580>
c0018d14:	77 7b                	ja     c0018d91 <Vm::faultHandler(regs*)+0x17e>
c0018d16:	80 fa e4             	cmp    dl,0xe4
c0018d19:	0f 84 fe 03 00 00    	je     c001911d <Vm::faultHandler(regs*)+0x50a>
c0018d1f:	77 53                	ja     c0018d74 <Vm::faultHandler(regs*)+0x161>
c0018d21:	80 fa cd             	cmp    dl,0xcd
c0018d24:	0f 84 cd 01 00 00    	je     c0018ef7 <Vm::faultHandler(regs*)+0x2e4>
c0018d2a:	80 fa cf             	cmp    dl,0xcf
c0018d2d:	0f 85 bc 04 00 00    	jne    c00191ef <Vm::faultHandler(regs*)+0x5dc>
c0018d33:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018d36:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018d39:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018d3d:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018d40:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018d44:	81 ca 00 02 02 00    	or     edx,0x20200
c0018d4a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018d4d:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018d51:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018d57:	66 c1 e8 09          	shr    ax,0x9
c0018d5b:	83 e0 01             	and    eax,0x1
c0018d5e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018d61:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018d64:	83 c0 06             	add    eax,0x6
c0018d67:	25 ff ff 00 00       	and    eax,0xffff
c0018d6c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018d6f:	e9 77 04 00 00       	jmp    c00191eb <Vm::faultHandler(regs*)+0x5d8>
c0018d74:	80 fa e6             	cmp    dl,0xe6
c0018d77:	0f 84 ea 03 00 00    	je     c0019167 <Vm::faultHandler(regs*)+0x554>
c0018d7d:	0f 82 b6 03 00 00    	jb     c0019139 <Vm::faultHandler(regs*)+0x526>
c0018d83:	80 fa e7             	cmp    dl,0xe7
c0018d86:	0f 84 f2 03 00 00    	je     c001917e <Vm::faultHandler(regs*)+0x56b>
c0018d8c:	e9 5e 04 00 00       	jmp    c00191ef <Vm::faultHandler(regs*)+0x5dc>
c0018d91:	80 fa ef             	cmp    dl,0xef
c0018d94:	0f 84 3c 04 00 00    	je     c00191d6 <Vm::faultHandler(regs*)+0x5c3>
c0018d9a:	77 28                	ja     c0018dc4 <Vm::faultHandler(regs*)+0x1b1>
c0018d9c:	80 fa ed             	cmp    dl,0xed
c0018d9f:	0f 84 0a 04 00 00    	je     c00191af <Vm::faultHandler(regs*)+0x59c>
c0018da5:	80 fa ee             	cmp    dl,0xee
c0018da8:	0f 85 41 04 00 00    	jne    c00191ef <Vm::faultHandler(regs*)+0x5dc>
c0018dae:	50                   	push   eax
c0018daf:	50                   	push   eax
c0018db0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018db4:	50                   	push   eax
c0018db5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018db9:	50                   	push   eax
c0018dba:	e8 00 fc ff ff       	call   c00189bf <Vm::outbv(unsigned short, unsigned char)>
c0018dbf:	e9 0a 04 00 00       	jmp    c00191ce <Vm::faultHandler(regs*)+0x5bb>
c0018dc4:	80 fa fa             	cmp    dl,0xfa
c0018dc7:	0f 84 5d 01 00 00    	je     c0018f2a <Vm::faultHandler(regs*)+0x317>
c0018dcd:	80 fa fb             	cmp    dl,0xfb
c0018dd0:	0f 84 62 01 00 00    	je     c0018f38 <Vm::faultHandler(regs*)+0x325>
c0018dd6:	80 fa f3             	cmp    dl,0xf3
c0018dd9:	0f 85 10 04 00 00    	jne    c00191ef <Vm::faultHandler(regs*)+0x5dc>
c0018ddf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018de2:	e9 c3 fe ff ff       	jmp    c0018caa <Vm::faultHandler(regs*)+0x97>
c0018de7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018dea:	b1 02                	mov    cl,0x2
c0018dec:	e9 b9 fe ff ff       	jmp    c0018caa <Vm::faultHandler(regs*)+0x97>
c0018df1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018df4:	b1 03                	mov    cl,0x3
c0018df6:	e9 af fe ff ff       	jmp    c0018caa <Vm::faultHandler(regs*)+0x97>
c0018dfb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018dfe:	b1 04                	mov    cl,0x4
c0018e00:	e9 a5 fe ff ff       	jmp    c0018caa <Vm::faultHandler(regs*)+0x97>
c0018e05:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e08:	b1 05                	mov    cl,0x5
c0018e0a:	e9 9b fe ff ff       	jmp    c0018caa <Vm::faultHandler(regs*)+0x97>
c0018e0f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e12:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018e17:	e9 8e fe ff ff       	jmp    c0018caa <Vm::faultHandler(regs*)+0x97>
c0018e1c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e1f:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018e24:	e9 81 fe ff ff       	jmp    c0018caa <Vm::faultHandler(regs*)+0x97>
c0018e29:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018e2c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e30:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e35:	74 30                	je     c0018e67 <Vm::faultHandler(regs*)+0x254>
c0018e37:	83 e9 04             	sub    ecx,0x4
c0018e3a:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018e40:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018e46:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018e49:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018e4c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018e52:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018e56:	0f 84 8c 03 00 00    	je     c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c0018e5c:	80 ce 02             	or     dh,0x2
c0018e5f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018e62:	e9 81 03 00 00       	jmp    c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c0018e67:	83 e9 02             	sub    ecx,0x2
c0018e6a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018e70:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018e73:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018e77:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018e7d:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018e81:	74 05                	je     c0018e88 <Vm::faultHandler(regs*)+0x275>
c0018e83:	80 ce 02             	or     dh,0x2
c0018e86:	eb 03                	jmp    c0018e8b <Vm::faultHandler(regs*)+0x278>
c0018e88:	80 e6 fd             	and    dh,0xfd
c0018e8b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018e8f:	e9 54 03 00 00       	jmp    c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c0018e94:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e99:	74 2a                	je     c0018ec5 <Vm::faultHandler(regs*)+0x2b2>
c0018e9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e9d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018ea3:	81 ca 00 02 02 00    	or     edx,0x20200
c0018ea9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0018eae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018eb4:	c1 e8 09             	shr    eax,0x9
c0018eb7:	83 e0 01             	and    eax,0x1
c0018eba:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018ebd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018ec0:	83 c0 04             	add    eax,0x4
c0018ec3:	eb 25                	jmp    c0018eea <Vm::faultHandler(regs*)+0x2d7>
c0018ec5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018ec8:	81 ca 00 02 02 00    	or     edx,0x20200
c0018ece:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018ed1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018ed4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018eda:	66 c1 e8 09          	shr    ax,0x9
c0018ede:	83 e0 01             	and    eax,0x1
c0018ee1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018ee4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018ee7:	83 c0 02             	add    eax,0x2
c0018eea:	25 ff ff 00 00       	and    eax,0xffff
c0018eef:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018ef2:	e9 f1 02 00 00       	jmp    c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c0018ef7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018efb:	3c ff                	cmp    al,0xff
c0018efd:	75 10                	jne    c0018f0f <Vm::faultHandler(regs*)+0x2fc>
c0018eff:	83 ec 0c             	sub    esp,0xc
c0018f02:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018f05:	e8 8c f9 ff ff       	call   c0018896 <Thr::terminateFromIRQ(int)>
c0018f0a:	e9 c2 02 00 00       	jmp    c00191d1 <Vm::faultHandler(regs*)+0x5be>
c0018f0f:	83 ec 0c             	sub    esp,0xc
c0018f12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f1a:	57                   	push   edi
c0018f1b:	50                   	push   eax
c0018f1c:	53                   	push   ebx
c0018f1d:	e8 f3 fb ff ff       	call   c0018b15 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018f22:	83 c4 20             	add    esp,0x20
c0018f25:	e9 c1 02 00 00       	jmp    c00191eb <Vm::faultHandler(regs*)+0x5d8>
c0018f2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f2f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018f33:	e9 b0 02 00 00       	jmp    c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c0018f38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f3d:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018f41:	e9 a2 02 00 00       	jmp    c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c0018f46:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018f4b:	74 0d                	je     c0018f5a <Vm::faultHandler(regs*)+0x347>
c0018f4d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018f54:	0f 87 e9 02 00 00    	ja     c0019243 <Vm::faultHandler(regs*)+0x630>
c0018f5a:	83 ec 0c             	sub    esp,0xc
c0018f5d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018f60:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018f64:	50                   	push   eax
c0018f65:	e8 4f fa ff ff       	call   c00189b9 <Vm::inbv(unsigned short)>
c0018f6a:	83 c4 0c             	add    esp,0xc
c0018f6d:	0f b6 c0             	movzx  eax,al
c0018f70:	0f b7 c9             	movzx  ecx,cx
c0018f73:	50                   	push   eax
c0018f74:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018f78:	50                   	push   eax
c0018f79:	51                   	push   ecx
c0018f7a:	e8 54 fc ff ff       	call   c0018bd3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018f85:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018f89:	74 03                	je     c0018f8e <Vm::faultHandler(regs*)+0x37b>
c0018f8b:	48                   	dec    eax
c0018f8c:	eb 01                	jmp    c0018f8f <Vm::faultHandler(regs*)+0x37c>
c0018f8e:	40                   	inc    eax
c0018f8f:	0f b7 c0             	movzx  eax,ax
c0018f92:	eb 70                	jmp    c0019004 <Vm::faultHandler(regs*)+0x3f1>
c0018f94:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018f97:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018f9a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018f9f:	74 0c                	je     c0018fad <Vm::faultHandler(regs*)+0x39a>
c0018fa1:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018fa7:	0f 87 96 02 00 00    	ja     c0019243 <Vm::faultHandler(regs*)+0x630>
c0018fad:	0f b7 c9             	movzx  ecx,cx
c0018fb0:	0f b7 f6             	movzx  esi,si
c0018fb3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018fb6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018fbb:	74 20                	je     c0018fdd <Vm::faultHandler(regs*)+0x3ca>
c0018fbd:	ed                   	in     eax,dx
c0018fbe:	55                   	push   ebp
c0018fbf:	50                   	push   eax
c0018fc0:	51                   	push   ecx
c0018fc1:	56                   	push   esi
c0018fc2:	e8 37 fc ff ff       	call   c0018bfe <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018fcd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018fd1:	74 05                	je     c0018fd8 <Vm::faultHandler(regs*)+0x3c5>
c0018fd3:	83 e8 04             	sub    eax,0x4
c0018fd6:	eb 27                	jmp    c0018fff <Vm::faultHandler(regs*)+0x3ec>
c0018fd8:	83 c0 04             	add    eax,0x4
c0018fdb:	eb 22                	jmp    c0018fff <Vm::faultHandler(regs*)+0x3ec>
c0018fdd:	66 ed                	in     ax,dx
c0018fdf:	0f b7 c0             	movzx  eax,ax
c0018fe2:	57                   	push   edi
c0018fe3:	50                   	push   eax
c0018fe4:	51                   	push   ecx
c0018fe5:	56                   	push   esi
c0018fe6:	e8 fd fb ff ff       	call   c0018be8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018feb:	83 c4 10             	add    esp,0x10
c0018fee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018ff1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018ff5:	74 05                	je     c0018ffc <Vm::faultHandler(regs*)+0x3e9>
c0018ff7:	83 e8 02             	sub    eax,0x2
c0018ffa:	eb 03                	jmp    c0018fff <Vm::faultHandler(regs*)+0x3ec>
c0018ffc:	83 c0 02             	add    eax,0x2
c0018fff:	25 ff ff 00 00       	and    eax,0xffff
c0019004:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019007:	e9 dc 01 00 00       	jmp    c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c001900c:	49                   	dec    ecx
c001900d:	80 f9 05             	cmp    cl,0x5
c0019010:	77 24                	ja     c0019036 <Vm::faultHandler(regs*)+0x423>
c0019012:	0f b6 c9             	movzx  ecx,cl
c0019015:	ff 24 8d ec 21 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdde14]
c001901c:	0f b7 f5             	movzx  esi,bp
c001901f:	eb 15                	jmp    c0019036 <Vm::faultHandler(regs*)+0x423>
c0019021:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019025:	eb 0f                	jmp    c0019036 <Vm::faultHandler(regs*)+0x423>
c0019027:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001902b:	eb 09                	jmp    c0019036 <Vm::faultHandler(regs*)+0x423>
c001902d:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019031:	eb 03                	jmp    c0019036 <Vm::faultHandler(regs*)+0x423>
c0019033:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019036:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019039:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001903e:	74 0b                	je     c001904b <Vm::faultHandler(regs*)+0x438>
c0019040:	3d ff ff 00 00       	cmp    eax,0xffff
c0019045:	0f 87 f8 01 00 00    	ja     c0019243 <Vm::faultHandler(regs*)+0x630>
c001904b:	0f b7 c0             	movzx  eax,ax
c001904e:	52                   	push   edx
c001904f:	52                   	push   edx
c0019050:	50                   	push   eax
c0019051:	56                   	push   esi
c0019052:	e8 48 fb ff ff       	call   c0018b9f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019057:	59                   	pop    ecx
c0019058:	0f b6 c0             	movzx  eax,al
c001905b:	5e                   	pop    esi
c001905c:	50                   	push   eax
c001905d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019061:	50                   	push   eax
c0019062:	e8 58 f9 ff ff       	call   c00189bf <Vm::outbv(unsigned short, unsigned char)>
c0019067:	83 c4 10             	add    esp,0x10
c001906a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001906d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019071:	74 03                	je     c0019076 <Vm::faultHandler(regs*)+0x463>
c0019073:	48                   	dec    eax
c0019074:	eb 01                	jmp    c0019077 <Vm::faultHandler(regs*)+0x464>
c0019076:	40                   	inc    eax
c0019077:	0f b7 c0             	movzx  eax,ax
c001907a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001907d:	e9 66 01 00 00       	jmp    c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c0019082:	49                   	dec    ecx
c0019083:	80 f9 05             	cmp    cl,0x5
c0019086:	77 1f                	ja     c00190a7 <Vm::faultHandler(regs*)+0x494>
c0019088:	0f b6 c9             	movzx  ecx,cl
c001908b:	ff 24 8d 04 22 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdddfc]
c0019092:	89 ee                	mov    esi,ebp
c0019094:	eb 11                	jmp    c00190a7 <Vm::faultHandler(regs*)+0x494>
c0019096:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019099:	eb 0c                	jmp    c00190a7 <Vm::faultHandler(regs*)+0x494>
c001909b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001909e:	eb 07                	jmp    c00190a7 <Vm::faultHandler(regs*)+0x494>
c00190a0:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00190a3:	eb 02                	jmp    c00190a7 <Vm::faultHandler(regs*)+0x494>
c00190a5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00190a7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00190aa:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00190af:	74 0c                	je     c00190bd <Vm::faultHandler(regs*)+0x4aa>
c00190b1:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c00190b7:	0f 87 86 01 00 00    	ja     c0019243 <Vm::faultHandler(regs*)+0x630>
c00190bd:	0f b7 d6             	movzx  edx,si
c00190c0:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00190c3:	0f b7 c1             	movzx  eax,cx
c00190c6:	81 e7 00 04 00 00    	and    edi,0x400
c00190cc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00190cf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190d4:	74 1d                	je     c00190f3 <Vm::faultHandler(regs*)+0x4e0>
c00190d6:	55                   	push   ebp
c00190d7:	55                   	push   ebp
c00190d8:	50                   	push   eax
c00190d9:	52                   	push   edx
c00190da:	e8 e3 fa ff ff       	call   c0018bc2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00190df:	83 c4 10             	add    esp,0x10
c00190e2:	89 f2                	mov    edx,esi
c00190e4:	ef                   	out    dx,eax
c00190e5:	85 ff                	test   edi,edi
c00190e7:	74 05                	je     c00190ee <Vm::faultHandler(regs*)+0x4db>
c00190e9:	83 e9 04             	sub    ecx,0x4
c00190ec:	eb 21                	jmp    c001910f <Vm::faultHandler(regs*)+0x4fc>
c00190ee:	83 c1 04             	add    ecx,0x4
c00190f1:	eb 1c                	jmp    c001910f <Vm::faultHandler(regs*)+0x4fc>
c00190f3:	55                   	push   ebp
c00190f4:	55                   	push   ebp
c00190f5:	50                   	push   eax
c00190f6:	52                   	push   edx
c00190f7:	e8 b4 fa ff ff       	call   c0018bb0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00190fc:	83 c4 10             	add    esp,0x10
c00190ff:	89 f2                	mov    edx,esi
c0019101:	66 ef                	out    dx,ax
c0019103:	85 ff                	test   edi,edi
c0019105:	74 05                	je     c001910c <Vm::faultHandler(regs*)+0x4f9>
c0019107:	83 e9 02             	sub    ecx,0x2
c001910a:	eb 03                	jmp    c001910f <Vm::faultHandler(regs*)+0x4fc>
c001910c:	83 c1 02             	add    ecx,0x2
c001910f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019115:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019118:	e9 cb 00 00 00       	jmp    c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c001911d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019124:	83 ec 0c             	sub    esp,0xc
c0019127:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001912b:	50                   	push   eax
c001912c:	e8 88 f8 ff ff       	call   c00189b9 <Vm::inbv(unsigned short)>
c0019131:	0f b6 c0             	movzx  eax,al
c0019134:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019137:	eb 3f                	jmp    c0019178 <Vm::faultHandler(regs*)+0x565>
c0019139:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001913e:	74 07                	je     c0019147 <Vm::faultHandler(regs*)+0x534>
c0019140:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019144:	ed                   	in     eax,dx
c0019145:	eb 14                	jmp    c001915b <Vm::faultHandler(regs*)+0x548>
c0019147:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001914a:	66 31 c9             	xor    cx,cx
c001914d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019150:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019154:	66 ed                	in     ax,dx
c0019156:	0f b7 c0             	movzx  eax,ax
c0019159:	09 c8                	or     eax,ecx
c001915b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001915e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019162:	e9 84 00 00 00       	jmp    c00191eb <Vm::faultHandler(regs*)+0x5d8>
c0019167:	52                   	push   edx
c0019168:	52                   	push   edx
c0019169:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001916d:	50                   	push   eax
c001916e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019172:	50                   	push   eax
c0019173:	e8 47 f8 ff ff       	call   c00189bf <Vm::outbv(unsigned short, unsigned char)>
c0019178:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001917c:	eb 53                	jmp    c00191d1 <Vm::faultHandler(regs*)+0x5be>
c001917e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019181:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019185:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001918a:	74 03                	je     c001918f <Vm::faultHandler(regs*)+0x57c>
c001918c:	ef                   	out    dx,eax
c001918d:	eb cf                	jmp    c001915e <Vm::faultHandler(regs*)+0x54b>
c001918f:	66 ef                	out    dx,ax
c0019191:	eb cb                	jmp    c001915e <Vm::faultHandler(regs*)+0x54b>
c0019193:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001919a:	83 ec 0c             	sub    esp,0xc
c001919d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00191a1:	50                   	push   eax
c00191a2:	e8 12 f8 ff ff       	call   c00189b9 <Vm::inbv(unsigned short)>
c00191a7:	0f b6 c0             	movzx  eax,al
c00191aa:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00191ad:	eb 1f                	jmp    c00191ce <Vm::faultHandler(regs*)+0x5bb>
c00191af:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00191b2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191b7:	74 03                	je     c00191bc <Vm::faultHandler(regs*)+0x5a9>
c00191b9:	ed                   	in     eax,dx
c00191ba:	eb 0d                	jmp    c00191c9 <Vm::faultHandler(regs*)+0x5b6>
c00191bc:	66 ed                	in     ax,dx
c00191be:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00191c1:	0f b7 c0             	movzx  eax,ax
c00191c4:	66 31 d2             	xor    dx,dx
c00191c7:	09 d0                	or     eax,edx
c00191c9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00191cc:	eb 1a                	jmp    c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c00191ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00191d1:	83 c4 10             	add    esp,0x10
c00191d4:	eb 15                	jmp    c00191eb <Vm::faultHandler(regs*)+0x5d8>
c00191d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00191d9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00191dc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191e1:	74 03                	je     c00191e6 <Vm::faultHandler(regs*)+0x5d3>
c00191e3:	ef                   	out    dx,eax
c00191e4:	eb 02                	jmp    c00191e8 <Vm::faultHandler(regs*)+0x5d5>
c00191e6:	66 ef                	out    dx,ax
c00191e8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00191eb:	b0 01                	mov    al,0x1
c00191ed:	eb 56                	jmp    c0019245 <Vm::faultHandler(regs*)+0x632>
c00191ef:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c00191f3:	50                   	push   eax
c00191f4:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c00191f8:	50                   	push   eax
c00191f9:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c00191fd:	50                   	push   eax
c00191fe:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019202:	50                   	push   eax
c0019203:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019207:	50                   	push   eax
c0019208:	52                   	push   edx
c0019209:	52                   	push   edx
c001920a:	68 be 21 02 c0       	push   0xc00221be
c001920f:	e8 d7 5d ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0019214:	83 c4 20             	add    esp,0x20
c0019217:	83 ec 0c             	sub    esp,0xc
c001921a:	6a 60                	push   0x60
c001921c:	e8 98 f7 ff ff       	call   c00189b9 <Vm::inbv(unsigned short)>
c0019221:	83 c4 10             	add    esp,0x10
c0019224:	3c 1c                	cmp    al,0x1c
c0019226:	74 04                	je     c001922c <Vm::faultHandler(regs*)+0x619>
c0019228:	3c 5a                	cmp    al,0x5a
c001922a:	75 eb                	jne    c0019217 <Vm::faultHandler(regs*)+0x604>
c001922c:	3c 5a                	cmp    al,0x5a
c001922e:	74 04                	je     c0019234 <Vm::faultHandler(regs*)+0x621>
c0019230:	3c 1c                	cmp    al,0x1c
c0019232:	75 0f                	jne    c0019243 <Vm::faultHandler(regs*)+0x630>
c0019234:	83 ec 0c             	sub    esp,0xc
c0019237:	6a 60                	push   0x60
c0019239:	e8 7b f7 ff ff       	call   c00189b9 <Vm::inbv(unsigned short)>
c001923e:	83 c4 10             	add    esp,0x10
c0019241:	eb e9                	jmp    c001922c <Vm::faultHandler(regs*)+0x619>
c0019243:	31 c0                	xor    eax,eax
c0019245:	83 c4 1c             	add    esp,0x1c
c0019248:	5b                   	pop    ebx
c0019249:	5e                   	pop    esi
c001924a:	5f                   	pop    edi
c001924b:	5d                   	pop    ebp
c001924c:	c3                   	ret    
c001924d:	90                   	nop

c001924e <FAT::getName()>:
c001924e:	b8 1c 22 02 c0       	mov    eax,0xc002221c
c0019253:	c3                   	ret    

c0019254 <FAT::tell(void*, unsigned long long*)>:
c0019254:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019259:	75 06                	jne    c0019261 <FAT::tell(void*, unsigned long long*)+0xd>
c001925b:	b8 04 00 00 00       	mov    eax,0x4
c0019260:	c3                   	ret    
c0019261:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019266:	75 06                	jne    c001926e <FAT::tell(void*, unsigned long long*)+0x1a>
c0019268:	b8 04 00 00 00       	mov    eax,0x4
c001926d:	c3                   	ret    
c001926e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019272:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019275:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019278:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001927c:	89 01                	mov    DWORD PTR [ecx],eax
c001927e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019281:	b8 00 00 00 00       	mov    eax,0x0
c0019286:	c3                   	ret    
c0019287:	90                   	nop

c0019288 <FAT::stat(void*, unsigned long long*)>:
c0019288:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001928d:	75 06                	jne    c0019295 <FAT::stat(void*, unsigned long long*)+0xd>
c001928f:	b8 04 00 00 00       	mov    eax,0x4
c0019294:	c3                   	ret    
c0019295:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001929a:	75 06                	jne    c00192a2 <FAT::stat(void*, unsigned long long*)+0x1a>
c001929c:	b8 04 00 00 00       	mov    eax,0x4
c00192a1:	c3                   	ret    
c00192a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192a6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00192a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00192ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00192b0:	89 01                	mov    DWORD PTR [ecx],eax
c00192b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00192b5:	b8 00 00 00 00       	mov    eax,0x0
c00192ba:	c3                   	ret    
c00192bb:	90                   	nop

c00192bc <FAT::~FAT()>:
c00192bc:	83 ec 0c             	sub    esp,0xc
c00192bf:	ba a0 22 02 c0       	mov    edx,0xc00222a0
c00192c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192c8:	89 10                	mov    DWORD PTR [eax],edx
c00192ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192ce:	83 ec 0c             	sub    esp,0xc
c00192d1:	50                   	push   eax
c00192d2:	e8 3d 60 ff ff       	call   c000f314 <Filesystem::~Filesystem()>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	90                   	nop
c00192db:	83 c4 0c             	add    esp,0xc
c00192de:	c3                   	ret    
c00192df:	90                   	nop

c00192e0 <FAT::~FAT()>:
c00192e0:	83 ec 0c             	sub    esp,0xc
c00192e3:	83 ec 0c             	sub    esp,0xc
c00192e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192ea:	e8 cd ff ff ff       	call   c00192bc <FAT::~FAT()>
c00192ef:	83 c4 10             	add    esp,0x10
c00192f2:	83 ec 08             	sub    esp,0x8
c00192f5:	6a 08                	push   0x8
c00192f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192fb:	e8 0b 5c ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c0019300:	83 c4 10             	add    esp,0x10
c0019303:	83 c4 0c             	add    esp,0xc
c0019306:	c3                   	ret    
c0019307:	90                   	nop

c0019308 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019308:	83 ec 1c             	sub    esp,0x1c
c001930b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019312:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019317:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001931b:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c0019322:	83 f8 ff             	cmp    eax,0xffffffff
c0019325:	75 34                	jne    c001935b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019327:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001932b:	88 c2                	mov    dl,al
c001932d:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c0019332:	01 d0                	add    eax,edx
c0019334:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019338:	8b 15 a0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024ba0
c001933e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019342:	89 14 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],edx
c0019349:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c001934e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019352:	89 14 85 40 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3c0],edx
c0019359:	eb 17                	jmp    c0019372 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001935b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001935f:	88 c2                	mov    dl,al
c0019361:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019365:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c001936c:	01 d0                	add    eax,edx
c001936e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019372:	83 ec 04             	sub    esp,0x4
c0019375:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019379:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001937d:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019381:	50                   	push   eax
c0019382:	e8 de d6 fe ff       	call   c0006a65 <f_getlabel>
c0019387:	83 c4 10             	add    esp,0x10
c001938a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001938e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019393:	75 07                	jne    c001939c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019395:	b8 00 00 00 00       	mov    eax,0x0
c001939a:	eb 05                	jmp    c00193a1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001939c:	b8 01 00 00 00       	mov    eax,0x1
c00193a1:	83 c4 1c             	add    esp,0x1c
c00193a4:	c3                   	ret    
c00193a5:	90                   	nop

c00193a6 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00193a6:	57                   	push   edi
c00193a7:	83 ec 58             	sub    esp,0x58
c00193aa:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00193b2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00193b6:	b9 0f 00 00 00       	mov    ecx,0xf
c00193bb:	b8 00 00 00 00       	mov    eax,0x0
c00193c0:	fc                   	cld    
c00193c1:	89 d7                	mov    edi,edx
c00193c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00193c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00193c9:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c00193d0:	83 f8 ff             	cmp    eax,0xffffffff
c00193d3:	75 34                	jne    c0019409 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00193d5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00193d9:	88 c2                	mov    dl,al
c00193db:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c00193e0:	01 d0                	add    eax,edx
c00193e2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00193e6:	8b 15 a0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024ba0
c00193ec:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00193f0:	89 14 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],edx
c00193f7:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c00193fc:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019400:	89 14 85 40 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3c0],edx
c0019407:	eb 17                	jmp    c0019420 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019409:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001940d:	88 c2                	mov    dl,al
c001940f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019413:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c001941a:	01 d0                	add    eax,edx
c001941c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019420:	83 ec 08             	sub    esp,0x8
c0019423:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019427:	8d 44 24 18          	lea    eax,[esp+0x18]
c001942b:	50                   	push   eax
c001942c:	e8 2d 73 fe ff       	call   c000075e <strcat>
c0019431:	83 c4 10             	add    esp,0x10
c0019434:	83 ec 0c             	sub    esp,0xc
c0019437:	8d 44 24 18          	lea    eax,[esp+0x18]
c001943b:	50                   	push   eax
c001943c:	e8 12 d8 fe ff       	call   c0006c53 <f_setlabel>
c0019441:	83 c4 10             	add    esp,0x10
c0019444:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019448:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001944d:	75 07                	jne    c0019456 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001944f:	b8 00 00 00 00       	mov    eax,0x0
c0019454:	eb 05                	jmp    c001945b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019456:	b8 01 00 00 00       	mov    eax,0x1
c001945b:	83 c4 58             	add    esp,0x58
c001945e:	5f                   	pop    edi
c001945f:	c3                   	ret    

c0019460 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019460:	83 ec 2c             	sub    esp,0x2c
c0019463:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001946b:	83 ec 08             	sub    esp,0x8
c001946e:	68 40 22 02 c0       	push   0xc0022240
c0019473:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019477:	e8 7c 72 fe ff       	call   c00006f8 <strcmp>
c001947c:	83 c4 10             	add    esp,0x10
c001947f:	85 c0                	test   eax,eax
c0019481:	0f 94 c0             	sete   al
c0019484:	84 c0                	test   al,al
c0019486:	74 0d                	je     c0019495 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019488:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019490:	e9 a6 00 00 00       	jmp    c001953b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019495:	83 ec 08             	sub    esp,0x8
c0019498:	68 32 22 02 c0       	push   0xc0022232
c001949d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194a1:	e8 52 72 fe ff       	call   c00006f8 <strcmp>
c00194a6:	83 c4 10             	add    esp,0x10
c00194a9:	85 c0                	test   eax,eax
c00194ab:	0f 94 c0             	sete   al
c00194ae:	84 c0                	test   al,al
c00194b0:	74 0a                	je     c00194bc <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00194b2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00194ba:	eb 7f                	jmp    c001953b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194bc:	83 ec 08             	sub    esp,0x8
c00194bf:	68 38 22 02 c0       	push   0xc0022238
c00194c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194c8:	e8 2b 72 fe ff       	call   c00006f8 <strcmp>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	85 c0                	test   eax,eax
c00194d2:	0f 94 c0             	sete   al
c00194d5:	84 c0                	test   al,al
c00194d7:	74 0a                	je     c00194e3 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00194d9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00194e1:	eb 58                	jmp    c001953b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194e3:	83 ec 08             	sub    esp,0x8
c00194e6:	68 ac f7 01 c0       	push   0xc001f7ac
c00194eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194ef:	e8 04 72 fe ff       	call   c00006f8 <strcmp>
c00194f4:	83 c4 10             	add    esp,0x10
c00194f7:	85 c0                	test   eax,eax
c00194f9:	0f 94 c0             	sete   al
c00194fc:	84 c0                	test   al,al
c00194fe:	74 0a                	je     c001950a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019500:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019508:	eb 31                	jmp    c001953b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001950a:	83 ec 08             	sub    esp,0x8
c001950d:	68 3e 22 02 c0       	push   0xc002223e
c0019512:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019516:	e8 dd 71 fe ff       	call   c00006f8 <strcmp>
c001951b:	83 c4 10             	add    esp,0x10
c001951e:	85 c0                	test   eax,eax
c0019520:	0f 94 c0             	sete   al
c0019523:	84 c0                	test   al,al
c0019525:	74 0a                	je     c0019531 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019527:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001952f:	eb 0a                	jmp    c001953b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019531:	b8 08 00 00 00       	mov    eax,0x8
c0019536:	e9 04 01 00 00       	jmp    c001963f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001953b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019542:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019547:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001954b:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c0019552:	83 f8 ff             	cmp    eax,0xffffffff
c0019555:	75 34                	jne    c001958b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019557:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001955b:	88 c2                	mov    dl,al
c001955d:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c0019562:	01 d0                	add    eax,edx
c0019564:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019568:	8b 15 a0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024ba0
c001956e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019572:	89 14 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],edx
c0019579:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c001957e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019582:	89 14 85 40 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3c0],edx
c0019589:	eb 17                	jmp    c00195a2 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001958b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001958f:	88 c2                	mov    dl,al
c0019591:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019595:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c001959c:	01 d0                	add    eax,edx
c001959e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00195a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195a6:	88 04 24             	mov    BYTE PTR [esp],al
c00195a9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00195ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00195b9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00195be:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00195c6:	83 ec 0c             	sub    esp,0xc
c00195c9:	68 00 20 00 00       	push   0x2000
c00195ce:	e8 4b 26 ff ff       	call   c000bc1e <malloc>
c00195d3:	83 c4 10             	add    esp,0x10
c00195d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195da:	68 00 20 00 00       	push   0x2000
c00195df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00195e3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00195e7:	50                   	push   eax
c00195e8:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00195ec:	50                   	push   eax
c00195ed:	e8 ac da fe ff       	call   c000709e <f_mkfs>
c00195f2:	83 c4 10             	add    esp,0x10
c00195f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195fe:	75 07                	jne    c0019607 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019600:	b8 00 00 00 00       	mov    eax,0x0
c0019605:	eb 38                	jmp    c001963f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019607:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001960c:	75 17                	jne    c0019625 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001960e:	83 ec 0c             	sub    esp,0xc
c0019611:	68 70 22 02 c0       	push   0xc0022270
c0019616:	e8 d0 59 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001961b:	83 c4 10             	add    esp,0x10
c001961e:	b8 09 00 00 00       	mov    eax,0x9
c0019623:	eb 1a                	jmp    c001963f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019625:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019629:	83 ec 08             	sub    esp,0x8
c001962c:	50                   	push   eax
c001962d:	68 44 22 02 c0       	push   0xc0022244
c0019632:	e8 b4 59 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c0019637:	83 c4 10             	add    esp,0x10
c001963a:	b8 01 00 00 00       	mov    eax,0x1
c001963f:	83 c4 2c             	add    esp,0x2c
c0019642:	c3                   	ret    
c0019643:	90                   	nop

c0019644 <FAT::tryMount(LogicalDisk*, int)>:
c0019644:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001964a:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c001964f:	83 f8 14             	cmp    eax,0x14
c0019652:	75 17                	jne    c001966b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019654:	83 ec 0c             	sub    esp,0xc
c0019657:	68 56 22 02 c0       	push   0xc0022256
c001965c:	e8 1f b6 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c0019661:	83 c4 10             	add    esp,0x10
c0019664:	b0 00                	mov    al,0x0
c0019666:	e9 d7 01 00 00       	jmp    c0019842 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001966b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019672:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019678:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001967e:	3d 00 02 00 00       	cmp    eax,0x200
c0019683:	74 07                	je     c001968c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019685:	b0 00                	mov    al,0x0
c0019687:	e9 b6 01 00 00       	jmp    c0019842 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001968c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019694:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001969b:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c00196a2:	83 f8 ff             	cmp    eax,0xffffffff
c00196a5:	74 07                	je     c00196ae <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00196a7:	b0 01                	mov    al,0x1
c00196a9:	e9 94 01 00 00       	jmp    c0019842 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196ae:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00196b8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00196c0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00196c7:	88 c2                	mov    dl,al
c00196c9:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c00196ce:	01 d0                	add    eax,edx
c00196d0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00196d7:	8b 15 a0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024ba0
c00196dd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00196e4:	89 14 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],edx
c00196eb:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c00196f0:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00196f7:	89 14 85 40 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3c0],edx
c00196fe:	83 ec 0c             	sub    esp,0xc
c0019701:	68 54 02 00 00       	push   0x254
c0019706:	e8 13 25 ff ff       	call   c000bc1e <malloc>
c001970b:	83 c4 10             	add    esp,0x10
c001970e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019715:	83 ec 04             	sub    esp,0x4
c0019718:	6a 00                	push   0x0
c001971a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019721:	50                   	push   eax
c0019722:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019729:	e8 2e b5 fe ff       	call   c0004c5c <f_mount>
c001972e:	83 c4 10             	add    esp,0x10
c0019731:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019738:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019740:	74 19                	je     c001975b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019742:	83 ec 0c             	sub    esp,0xc
c0019745:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001974c:	e8 ed 24 ff ff       	call   c000bc3e <rfree>
c0019751:	83 c4 10             	add    esp,0x10
c0019754:	b0 00                	mov    al,0x0
c0019756:	e9 e7 00 00 00       	jmp    c0019842 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001975b:	83 ec 04             	sub    esp,0x4
c001975e:	68 00 01 00 00       	push   0x100
c0019763:	6a 00                	push   0x0
c0019765:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001976c:	50                   	push   eax
c001976d:	e8 96 6e fe ff       	call   c0000608 <memset>
c0019772:	83 c4 10             	add    esp,0x10
c0019775:	83 ec 08             	sub    esp,0x8
c0019778:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001977f:	50                   	push   eax
c0019780:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019787:	50                   	push   eax
c0019788:	e8 d1 6f fe ff       	call   c000075e <strcat>
c001978d:	83 c4 10             	add    esp,0x10
c0019790:	83 ec 08             	sub    esp,0x8
c0019793:	68 64 22 02 c0       	push   0xc0022264
c0019798:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001979f:	50                   	push   eax
c00197a0:	e8 b9 6f fe ff       	call   c000075e <strcat>
c00197a5:	83 c4 10             	add    esp,0x10
c00197a8:	83 ec 04             	sub    esp,0x4
c00197ab:	6a 01                	push   0x1
c00197ad:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00197b4:	50                   	push   eax
c00197b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00197b9:	50                   	push   eax
c00197ba:	e8 ff b4 fe ff       	call   c0004cbe <f_open>
c00197bf:	83 c4 10             	add    esp,0x10
c00197c2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00197c9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00197d0:	85 c0                	test   eax,eax
c00197d2:	74 0a                	je     c00197de <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00197d4:	78 2d                	js     c0019803 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00197d6:	83 e8 04             	sub    eax,0x4
c00197d9:	83 f8 01             	cmp    eax,0x1
c00197dc:	77 25                	ja     c0019803 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00197de:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00197e6:	83 ec 0c             	sub    esp,0xc
c00197e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00197ed:	50                   	push   eax
c00197ee:	e8 1d c0 fe ff       	call   c0005810 <f_close>
c00197f3:	83 c4 10             	add    esp,0x10
c00197f6:	90                   	nop
c00197f7:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00197ff:	74 3a                	je     c001983b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019801:	eb 2d                	jmp    c0019830 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019803:	83 ec 0c             	sub    esp,0xc
c0019806:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001980d:	e8 2c 24 ff ff       	call   c000bc3e <rfree>
c0019812:	83 c4 10             	add    esp,0x10
c0019815:	83 ec 04             	sub    esp,0x4
c0019818:	6a 00                	push   0x0
c001981a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019821:	50                   	push   eax
c0019822:	6a 00                	push   0x0
c0019824:	e8 33 b4 fe ff       	call   c0004c5c <f_mount>
c0019829:	83 c4 10             	add    esp,0x10
c001982c:	b0 00                	mov    al,0x0
c001982e:	eb 12                	jmp    c0019842 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019830:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c0019835:	40                   	inc    eax
c0019836:	a3 a0 4b 02 c0       	mov    ds:0xc0024ba0,eax
c001983b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019842:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019848:	c3                   	ret    
c0019849:	90                   	nop

c001984a <FAT::readDir(void*, unsigned long, void*, int*)>:
c001984a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019850:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019858:	74 0a                	je     c0019864 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001985a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019862:	75 0a                	jne    c001986e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0019864:	b8 04 00 00 00       	mov    eax,0x4
c0019869:	e9 db 00 00 00       	jmp    c0019949 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001986e:	83 ec 08             	sub    esp,0x8
c0019871:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019878:	50                   	push   eax
c0019879:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019880:	e8 95 c5 fe ff       	call   c0005e1a <f_readdir>
c0019885:	83 c4 10             	add    esp,0x10
c0019888:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001988f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019895:	83 ec 0c             	sub    esp,0xc
c0019898:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001989f:	83 c0 1a             	add    eax,0x1a
c00198a2:	50                   	push   eax
c00198a3:	e8 7d 6d fe ff       	call   c0000625 <strlen>
c00198a8:	83 c4 10             	add    esp,0x10
c00198ab:	ba 00 00 00 00       	mov    edx,0x0
c00198b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00198b4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00198b8:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00198bf:	0f b6 c0             	movzx  eax,al
c00198c2:	83 e0 10             	and    eax,0x10
c00198c5:	74 07                	je     c00198ce <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00198c7:	b8 02 00 00 00       	mov    eax,0x2
c00198cc:	eb 05                	jmp    c00198d3 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c00198ce:	b8 01 00 00 00       	mov    eax,0x1
c00198d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198d7:	83 ec 08             	sub    esp,0x8
c00198da:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00198e1:	83 c0 1a             	add    eax,0x1a
c00198e4:	50                   	push   eax
c00198e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00198e9:	83 c0 10             	add    eax,0x10
c00198ec:	50                   	push   eax
c00198ed:	e8 b5 6d fe ff       	call   c00006a7 <strcpy>
c00198f2:	83 c4 10             	add    esp,0x10
c00198f5:	83 ec 04             	sub    esp,0x4
c00198f8:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00198ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019903:	50                   	push   eax
c0019904:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001990b:	e8 c2 6c fe ff       	call   c00005d2 <memcpy>
c0019910:	83 c4 10             	add    esp,0x10
c0019913:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001991a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019920:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0019927:	84 c0                	test   al,al
c0019929:	75 07                	jne    c0019932 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001992b:	b8 07 00 00 00       	mov    eax,0x7
c0019930:	eb 17                	jmp    c0019949 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019932:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019939:	85 c0                	test   eax,eax
c001993b:	75 07                	jne    c0019944 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001993d:	b8 00 00 00 00       	mov    eax,0x0
c0019942:	eb 05                	jmp    c0019949 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019944:	b8 01 00 00 00       	mov    eax,0x1
c0019949:	81 c4 3c 02 00 00    	add    esp,0x23c
c001994f:	c3                   	ret    

c0019950 <FAT::read(void*, unsigned long, void*, int*)>:
c0019950:	83 ec 1c             	sub    esp,0x1c
c0019953:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019958:	74 07                	je     c0019961 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001995a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001995f:	75 07                	jne    c0019968 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019961:	b8 04 00 00 00       	mov    eax,0x4
c0019966:	eb 3d                	jmp    c00199a5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019968:	8d 44 24 08          	lea    eax,[esp+0x8]
c001996c:	50                   	push   eax
c001996d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019971:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019975:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019979:	e8 7c b7 fe ff       	call   c00050fa <f_read>
c001997e:	83 c4 10             	add    esp,0x10
c0019981:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019989:	89 c2                	mov    edx,eax
c001998b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001998f:	89 10                	mov    DWORD PTR [eax],edx
c0019991:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019995:	85 c0                	test   eax,eax
c0019997:	75 07                	jne    c00199a0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019999:	b8 00 00 00 00       	mov    eax,0x0
c001999e:	eb 05                	jmp    c00199a5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00199a0:	b8 01 00 00 00       	mov    eax,0x1
c00199a5:	83 c4 1c             	add    esp,0x1c
c00199a8:	c3                   	ret    
c00199a9:	90                   	nop

c00199aa <FAT::write(void*, unsigned long, void*, int*)>:
c00199aa:	83 ec 1c             	sub    esp,0x1c
c00199ad:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199b2:	74 07                	je     c00199bb <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00199b4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00199b9:	75 07                	jne    c00199c2 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00199bb:	b8 04 00 00 00       	mov    eax,0x4
c00199c0:	eb 3d                	jmp    c00199ff <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00199c2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199c6:	50                   	push   eax
c00199c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199d3:	e8 a2 b9 fe ff       	call   c000537a <f_write>
c00199d8:	83 c4 10             	add    esp,0x10
c00199db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199e3:	89 c2                	mov    edx,eax
c00199e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199e9:	89 10                	mov    DWORD PTR [eax],edx
c00199eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199ef:	85 c0                	test   eax,eax
c00199f1:	75 07                	jne    c00199fa <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00199f3:	b8 00 00 00 00       	mov    eax,0x0
c00199f8:	eb 05                	jmp    c00199ff <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00199fa:	b8 01 00 00 00       	mov    eax,0x1
c00199ff:	83 c4 1c             	add    esp,0x1c
c0019a02:	c3                   	ret    
c0019a03:	90                   	nop

c0019a04 <FAT::close(void*)>:
c0019a04:	83 ec 1c             	sub    esp,0x1c
c0019a07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a0c:	75 07                	jne    c0019a15 <FAT::close(void*)+0x11>
c0019a0e:	b8 04 00 00 00       	mov    eax,0x4
c0019a13:	eb 36                	jmp    c0019a4b <FAT::close(void*)+0x47>
c0019a15:	83 ec 0c             	sub    esp,0xc
c0019a18:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a1c:	e8 ef bd fe ff       	call   c0005810 <f_close>
c0019a21:	83 c4 10             	add    esp,0x10
c0019a24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a28:	83 ec 0c             	sub    esp,0xc
c0019a2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a2f:	e8 fa 21 ff ff       	call   c000bc2e <free>
c0019a34:	83 c4 10             	add    esp,0x10
c0019a37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a3b:	85 c0                	test   eax,eax
c0019a3d:	75 07                	jne    c0019a46 <FAT::close(void*)+0x42>
c0019a3f:	b8 00 00 00 00       	mov    eax,0x0
c0019a44:	eb 05                	jmp    c0019a4b <FAT::close(void*)+0x47>
c0019a46:	b8 01 00 00 00       	mov    eax,0x1
c0019a4b:	83 c4 1c             	add    esp,0x1c
c0019a4e:	c3                   	ret    
c0019a4f:	90                   	nop

c0019a50 <FAT::closeDir(void*)>:
c0019a50:	83 ec 1c             	sub    esp,0x1c
c0019a53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a58:	75 07                	jne    c0019a61 <FAT::closeDir(void*)+0x11>
c0019a5a:	b8 04 00 00 00       	mov    eax,0x4
c0019a5f:	eb 36                	jmp    c0019a97 <FAT::closeDir(void*)+0x47>
c0019a61:	83 ec 0c             	sub    esp,0xc
c0019a64:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a68:	e8 8b c3 fe ff       	call   c0005df8 <f_closedir>
c0019a6d:	83 c4 10             	add    esp,0x10
c0019a70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a74:	83 ec 0c             	sub    esp,0xc
c0019a77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a7b:	e8 ae 21 ff ff       	call   c000bc2e <free>
c0019a80:	83 c4 10             	add    esp,0x10
c0019a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a87:	85 c0                	test   eax,eax
c0019a89:	75 07                	jne    c0019a92 <FAT::closeDir(void*)+0x42>
c0019a8b:	b8 00 00 00 00       	mov    eax,0x0
c0019a90:	eb 05                	jmp    c0019a97 <FAT::closeDir(void*)+0x47>
c0019a92:	b8 01 00 00 00       	mov    eax,0x1
c0019a97:	83 c4 1c             	add    esp,0x1c
c0019a9a:	c3                   	ret    
c0019a9b:	90                   	nop

c0019a9c <FAT::seek(void*, unsigned long long)>:
c0019a9c:	83 ec 2c             	sub    esp,0x2c
c0019a9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019aa3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019aa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019aab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019aaf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019ab4:	75 07                	jne    c0019abd <FAT::seek(void*, unsigned long long)+0x21>
c0019ab6:	b8 04 00 00 00       	mov    eax,0x4
c0019abb:	eb 2f                	jmp    c0019aec <FAT::seek(void*, unsigned long long)+0x50>
c0019abd:	83 ec 04             	sub    esp,0x4
c0019ac0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019ac4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019ac8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019acc:	e8 6e bd fe ff       	call   c000583f <f_lseek>
c0019ad1:	83 c4 10             	add    esp,0x10
c0019ad4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019adc:	85 c0                	test   eax,eax
c0019ade:	75 07                	jne    c0019ae7 <FAT::seek(void*, unsigned long long)+0x4b>
c0019ae0:	b8 00 00 00 00       	mov    eax,0x0
c0019ae5:	eb 05                	jmp    c0019aec <FAT::seek(void*, unsigned long long)+0x50>
c0019ae7:	b8 01 00 00 00       	mov    eax,0x1
c0019aec:	83 c4 2c             	add    esp,0x2c
c0019aef:	c3                   	ret    

c0019af0 <fatWrapperReadDisk>:
c0019af0:	83 ec 1c             	sub    esp,0x1c
c0019af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019af7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019afb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019aff:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b0a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b0f:	8b 04 85 20 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2e0]
c0019b16:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b1a:	83 ec 0c             	sub    esp,0xc
c0019b1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b21:	52                   	push   edx
c0019b22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b2a:	50                   	push   eax
c0019b2b:	e8 3e 84 ff ff       	call   c0011f6e <LogicalDisk::read(unsigned long long, int, void*)>
c0019b30:	83 c4 20             	add    esp,0x20
c0019b33:	83 c4 1c             	add    esp,0x1c
c0019b36:	c3                   	ret    

c0019b37 <fatWrapperWriteDisk>:
c0019b37:	83 ec 1c             	sub    esp,0x1c
c0019b3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b3e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019b4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b51:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b56:	8b 04 85 20 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2e0]
c0019b5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b61:	83 ec 0c             	sub    esp,0xc
c0019b64:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b68:	52                   	push   edx
c0019b69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b71:	50                   	push   eax
c0019b72:	e8 63 84 ff ff       	call   c0011fda <LogicalDisk::write(unsigned long long, int, void*)>
c0019b77:	83 c4 20             	add    esp,0x20
c0019b7a:	83 c4 1c             	add    esp,0x1c
c0019b7d:	c3                   	ret    

c0019b7e <fatWrapperIoctl>:
c0019b7e:	53                   	push   ebx
c0019b7f:	83 ec 28             	sub    esp,0x28
c0019b82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019b8a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b8e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b92:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019b97:	75 31                	jne    c0019bca <fatWrapperIoctl+0x4c>
c0019b99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ba1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ba6:	8b 04 85 20 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2e0]
c0019bad:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bb3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019bb9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bbd:	66 89 02             	mov    WORD PTR [edx],ax
c0019bc0:	b8 00 00 00 00       	mov    eax,0x0
c0019bc5:	e9 b2 00 00 00       	jmp    c0019c7c <fatWrapperIoctl+0xfe>
c0019bca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019bcf:	75 6a                	jne    c0019c3b <fatWrapperIoctl+0xbd>
c0019bd1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bd5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019bd9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bde:	8b 04 85 20 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2e0]
c0019be5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019beb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019bf1:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019bf7:	89 c8                	mov    eax,ecx
c0019bf9:	89 da                	mov    edx,ebx
c0019bfb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019bff:	c1 e0 0a             	shl    eax,0xa
c0019c02:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c07:	8b 0c 8d 20 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2e0]
c0019c0e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c14:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c1a:	89 cb                	mov    ebx,ecx
c0019c1c:	c1 fb 1f             	sar    ebx,0x1f
c0019c1f:	53                   	push   ebx
c0019c20:	51                   	push   ecx
c0019c21:	52                   	push   edx
c0019c22:	50                   	push   eax
c0019c23:	e8 24 4b 00 00       	call   c001e74c <__udivdi3>
c0019c28:	83 c4 10             	add    esp,0x10
c0019c2b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019c2f:	89 01                	mov    DWORD PTR [ecx],eax
c0019c31:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019c34:	b8 00 00 00 00       	mov    eax,0x0
c0019c39:	eb 41                	jmp    c0019c7c <fatWrapperIoctl+0xfe>
c0019c3b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019c40:	75 07                	jne    c0019c49 <fatWrapperIoctl+0xcb>
c0019c42:	b8 00 00 00 00       	mov    eax,0x0
c0019c47:	eb 33                	jmp    c0019c7c <fatWrapperIoctl+0xfe>
c0019c49:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019c4e:	75 19                	jne    c0019c69 <fatWrapperIoctl+0xeb>
c0019c50:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c5c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c62:	b8 00 00 00 00       	mov    eax,0x0
c0019c67:	eb 13                	jmp    c0019c7c <fatWrapperIoctl+0xfe>
c0019c69:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019c6e:	75 07                	jne    c0019c77 <fatWrapperIoctl+0xf9>
c0019c70:	b8 00 00 00 00       	mov    eax,0x0
c0019c75:	eb 05                	jmp    c0019c7c <fatWrapperIoctl+0xfe>
c0019c77:	b8 04 00 00 00       	mov    eax,0x4
c0019c7c:	83 c4 28             	add    esp,0x28
c0019c7f:	5b                   	pop    ebx
c0019c80:	c3                   	ret    
c0019c81:	90                   	nop

c0019c82 <FAT::FAT()>:
c0019c82:	83 ec 1c             	sub    esp,0x1c
c0019c85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c89:	83 ec 0c             	sub    esp,0xc
c0019c8c:	50                   	push   eax
c0019c8d:	e8 5e 56 ff ff       	call   c000f2f0 <Filesystem::Filesystem()>
c0019c92:	83 c4 10             	add    esp,0x10
c0019c95:	ba a0 22 02 c0       	mov    edx,0xc00222a0
c0019c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c9e:	89 10                	mov    DWORD PTR [eax],edx
c0019ca0:	c7 05 a0 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ba0,0x0
c0019caa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cb2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019cb7:	7f 15                	jg     c0019cce <FAT::FAT()+0x4c>
c0019cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cbd:	c7 04 85 c0 4b 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdb440],0xffffffff
c0019cc8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019ccc:	eb e4                	jmp    c0019cb2 <FAT::FAT()+0x30>
c0019cce:	90                   	nop
c0019ccf:	83 c4 1c             	add    esp,0x1c
c0019cd2:	c3                   	ret    
c0019cd3:	90                   	nop

c0019cd4 <FAT::fixFilepath(char*)>:
c0019cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0019cda:	3c 40                	cmp    al,0x40
c0019cdc:	7e 2c                	jle    c0019d0a <FAT::fixFilepath(char*)+0x36>
c0019cde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ce2:	8a 00                	mov    al,BYTE PTR [eax]
c0019ce4:	83 e8 41             	sub    eax,0x41
c0019ce7:	88 c2                	mov    dl,al
c0019ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ced:	88 10                	mov    BYTE PTR [eax],dl
c0019cef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cf3:	8a 00                	mov    al,BYTE PTR [eax]
c0019cf5:	0f be c0             	movsx  eax,al
c0019cf8:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c0019cff:	83 c0 30             	add    eax,0x30
c0019d02:	88 c2                	mov    dl,al
c0019d04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d08:	88 10                	mov    BYTE PTR [eax],dl
c0019d0a:	90                   	nop
c0019d0b:	c3                   	ret    

c0019d0c <FAT::open(char const*, void**, FileOpenMode)>:
c0019d0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d1a:	74 0a                	je     c0019d26 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019d1c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d24:	75 0a                	jne    c0019d30 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019d26:	b8 04 00 00 00       	mov    eax,0x4
c0019d2b:	e9 fd 00 00 00       	jmp    c0019e2d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019d30:	83 ec 08             	sub    esp,0x8
c0019d33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d3e:	50                   	push   eax
c0019d3f:	e8 63 69 fe ff       	call   c00006a7 <strcpy>
c0019d44:	83 c4 10             	add    esp,0x10
c0019d47:	83 ec 08             	sub    esp,0x8
c0019d4a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d4e:	50                   	push   eax
c0019d4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d56:	e8 79 ff ff ff       	call   c0019cd4 <FAT::fixFilepath(char*)>
c0019d5b:	83 c4 10             	add    esp,0x10
c0019d5e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d66:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d6d:	83 e0 01             	and    eax,0x1
c0019d70:	74 08                	je     c0019d7a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019d72:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019d7a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d81:	83 e0 04             	and    eax,0x4
c0019d84:	74 10                	je     c0019d96 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019d86:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019d8e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019d96:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d9d:	83 e0 02             	and    eax,0x2
c0019da0:	74 08                	je     c0019daa <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019da2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019daa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019db1:	83 e0 08             	and    eax,0x8
c0019db4:	74 08                	je     c0019dbe <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019db6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019dbe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dc5:	83 e0 10             	and    eax,0x10
c0019dc8:	74 08                	je     c0019dd2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019dca:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019dd2:	83 ec 0c             	sub    esp,0xc
c0019dd5:	68 50 02 00 00       	push   0x250
c0019dda:	e8 3f 1e ff ff       	call   c000bc1e <malloc>
c0019ddf:	83 c4 10             	add    esp,0x10
c0019de2:	89 c2                	mov    edx,eax
c0019de4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019deb:	89 10                	mov    DWORD PTR [eax],edx
c0019ded:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019df5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dfe:	83 ec 04             	sub    esp,0x4
c0019e01:	52                   	push   edx
c0019e02:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e06:	52                   	push   edx
c0019e07:	50                   	push   eax
c0019e08:	e8 b1 ae fe ff       	call   c0004cbe <f_open>
c0019e0d:	83 c4 10             	add    esp,0x10
c0019e10:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e17:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e1f:	74 07                	je     c0019e28 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019e21:	b8 01 00 00 00       	mov    eax,0x1
c0019e26:	eb 05                	jmp    c0019e2d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019e28:	b8 00 00 00 00       	mov    eax,0x0
c0019e2d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e33:	c3                   	ret    

c0019e34 <FAT::openDir(char const*, void**)>:
c0019e34:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e3a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e42:	74 0a                	je     c0019e4e <FAT::openDir(char const*, void**)+0x1a>
c0019e44:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e4c:	75 07                	jne    c0019e55 <FAT::openDir(char const*, void**)+0x21>
c0019e4e:	b8 04 00 00 00       	mov    eax,0x4
c0019e53:	eb 7d                	jmp    c0019ed2 <FAT::openDir(char const*, void**)+0x9e>
c0019e55:	83 ec 08             	sub    esp,0x8
c0019e58:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e63:	50                   	push   eax
c0019e64:	e8 3e 68 fe ff       	call   c00006a7 <strcpy>
c0019e69:	83 c4 10             	add    esp,0x10
c0019e6c:	83 ec 08             	sub    esp,0x8
c0019e6f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e73:	50                   	push   eax
c0019e74:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e7b:	e8 54 fe ff ff       	call   c0019cd4 <FAT::fixFilepath(char*)>
c0019e80:	83 c4 10             	add    esp,0x10
c0019e83:	83 ec 0c             	sub    esp,0xc
c0019e86:	6a 4c                	push   0x4c
c0019e88:	e8 91 1d ff ff       	call   c000bc1e <malloc>
c0019e8d:	83 c4 10             	add    esp,0x10
c0019e90:	89 c2                	mov    edx,eax
c0019e92:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e99:	89 10                	mov    DWORD PTR [eax],edx
c0019e9b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ea2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ea4:	83 ec 08             	sub    esp,0x8
c0019ea7:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019eab:	52                   	push   edx
c0019eac:	50                   	push   eax
c0019ead:	e8 44 be fe ff       	call   c0005cf6 <f_opendir>
c0019eb2:	83 c4 10             	add    esp,0x10
c0019eb5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ebc:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019ec4:	74 07                	je     c0019ecd <FAT::openDir(char const*, void**)+0x99>
c0019ec6:	b8 01 00 00 00       	mov    eax,0x1
c0019ecb:	eb 05                	jmp    c0019ed2 <FAT::openDir(char const*, void**)+0x9e>
c0019ecd:	b8 00 00 00 00       	mov    eax,0x0
c0019ed2:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ed8:	c3                   	ret    
c0019ed9:	90                   	nop

c0019eda <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019eda:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019ee0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019ee8:	75 0a                	jne    c0019ef4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019eea:	b8 04 00 00 00       	mov    eax,0x4
c0019eef:	e9 c9 00 00 00       	jmp    c0019fbd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019ef4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019efc:	75 0a                	jne    c0019f08 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019efe:	b8 04 00 00 00       	mov    eax,0x4
c0019f03:	e9 b5 00 00 00       	jmp    c0019fbd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f08:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f10:	75 0a                	jne    c0019f1c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019f12:	b8 04 00 00 00       	mov    eax,0x4
c0019f17:	e9 a1 00 00 00       	jmp    c0019fbd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f1c:	83 ec 08             	sub    esp,0x8
c0019f1f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f26:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f2d:	50                   	push   eax
c0019f2e:	e8 74 67 fe ff       	call   c00006a7 <strcpy>
c0019f33:	83 c4 10             	add    esp,0x10
c0019f36:	83 ec 08             	sub    esp,0x8
c0019f39:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f40:	50                   	push   eax
c0019f41:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f48:	e8 87 fd ff ff       	call   c0019cd4 <FAT::fixFilepath(char*)>
c0019f4d:	83 c4 10             	add    esp,0x10
c0019f50:	83 ec 08             	sub    esp,0x8
c0019f53:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f57:	50                   	push   eax
c0019f58:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f5f:	50                   	push   eax
c0019f60:	e8 50 bf fe ff       	call   c0005eb5 <f_stat>
c0019f65:	83 c4 10             	add    esp,0x10
c0019f68:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f6f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f76:	85 c0                	test   eax,eax
c0019f78:	74 07                	je     c0019f81 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019f7a:	83 f8 04             	cmp    eax,0x4
c0019f7d:	74 32                	je     c0019fb1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019f7f:	eb 37                	jmp    c0019fb8 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019f81:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f85:	0f b6 c0             	movzx  eax,al
c0019f88:	83 e0 10             	and    eax,0x10
c0019f8b:	0f 95 c2             	setne  dl
c0019f8e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f95:	88 10                	mov    BYTE PTR [eax],dl
c0019f97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019f9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019f9e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019fa5:	89 01                	mov    DWORD PTR [ecx],eax
c0019fa7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019faa:	b8 00 00 00 00       	mov    eax,0x0
c0019faf:	eb 0c                	jmp    c0019fbd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019fb1:	b8 02 00 00 00       	mov    eax,0x2
c0019fb6:	eb 05                	jmp    c0019fbd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019fb8:	b8 01 00 00 00       	mov    eax,0x1
c0019fbd:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019fc3:	c3                   	ret    

c0019fc4 <FAT::unlink(char const*)>:
c0019fc4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019fca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019fd2:	75 07                	jne    c0019fdb <FAT::unlink(char const*)+0x17>
c0019fd4:	b8 04 00 00 00       	mov    eax,0x4
c0019fd9:	eb 5c                	jmp    c001a037 <FAT::unlink(char const*)+0x73>
c0019fdb:	83 ec 08             	sub    esp,0x8
c0019fde:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fe5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fe9:	50                   	push   eax
c0019fea:	e8 b8 66 fe ff       	call   c00006a7 <strcpy>
c0019fef:	83 c4 10             	add    esp,0x10
c0019ff2:	83 ec 08             	sub    esp,0x8
c0019ff5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ff9:	50                   	push   eax
c0019ffa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a001:	e8 ce fc ff ff       	call   c0019cd4 <FAT::fixFilepath(char*)>
c001a006:	83 c4 10             	add    esp,0x10
c001a009:	83 ec 0c             	sub    esp,0xc
c001a00c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a010:	50                   	push   eax
c001a011:	e8 f1 c1 fe ff       	call   c0006207 <f_unlink>
c001a016:	83 c4 10             	add    esp,0x10
c001a019:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a020:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a027:	85 c0                	test   eax,eax
c001a029:	75 07                	jne    c001a032 <FAT::unlink(char const*)+0x6e>
c001a02b:	b8 00 00 00 00       	mov    eax,0x0
c001a030:	eb 05                	jmp    c001a037 <FAT::unlink(char const*)+0x73>
c001a032:	b8 01 00 00 00       	mov    eax,0x1
c001a037:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a03d:	c3                   	ret    

c001a03e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a03e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a044:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a04b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a052:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a056:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a05a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a062:	75 0a                	jne    c001a06e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a064:	b8 04 00 00 00       	mov    eax,0x4
c001a069:	e9 1c 01 00 00       	jmp    c001a18a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a06e:	83 ec 08             	sub    esp,0x8
c001a071:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a078:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a07c:	50                   	push   eax
c001a07d:	e8 25 66 fe ff       	call   c00006a7 <strcpy>
c001a082:	83 c4 10             	add    esp,0x10
c001a085:	83 ec 08             	sub    esp,0x8
c001a088:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a08c:	50                   	push   eax
c001a08d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a094:	e8 3b fc ff ff       	call   c0019cd4 <FAT::fixFilepath(char*)>
c001a099:	83 c4 10             	add    esp,0x10
c001a09c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a0a4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a0ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0b1:	83 e0 01             	and    eax,0x1
c001a0b4:	74 08                	je     c001a0be <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001a0b6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a0be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0c3:	83 e0 02             	and    eax,0x2
c001a0c6:	74 08                	je     c001a0d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001a0c8:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a0d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0d5:	83 e0 04             	and    eax,0x4
c001a0d8:	74 08                	je     c001a0e2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001a0da:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a0e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0e7:	83 e0 08             	and    eax,0x8
c001a0ea:	74 08                	je     c001a0f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001a0ec:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a0f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0f9:	83 e0 01             	and    eax,0x1
c001a0fc:	74 08                	je     c001a106 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a0fe:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a106:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a10b:	83 e0 02             	and    eax,0x2
c001a10e:	74 08                	je     c001a118 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001a110:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a118:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a11d:	83 e0 04             	and    eax,0x4
c001a120:	74 08                	je     c001a12a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001a122:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a12a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a12f:	83 e0 08             	and    eax,0x8
c001a132:	74 08                	je     c001a13c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001a134:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a13c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a143:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a14a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a152:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a15a:	83 ec 04             	sub    esp,0x4
c001a15d:	52                   	push   edx
c001a15e:	50                   	push   eax
c001a15f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a163:	50                   	push   eax
c001a164:	e8 40 c7 fe ff       	call   c00068a9 <f_chmod>
c001a169:	83 c4 10             	add    esp,0x10
c001a16c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a173:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a17a:	85 c0                	test   eax,eax
c001a17c:	75 07                	jne    c001a185 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001a17e:	b8 00 00 00 00       	mov    eax,0x0
c001a183:	eb 05                	jmp    c001a18a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a185:	b8 01 00 00 00       	mov    eax,0x1
c001a18a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a190:	c3                   	ret    
c001a191:	90                   	nop

c001a192 <FAT::rename(char const*, char const*)>:
c001a192:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a198:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a1a0:	74 0a                	je     c001a1ac <FAT::rename(char const*, char const*)+0x1a>
c001a1a2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a1aa:	75 0a                	jne    c001a1b6 <FAT::rename(char const*, char const*)+0x24>
c001a1ac:	b8 04 00 00 00       	mov    eax,0x4
c001a1b1:	e9 98 00 00 00       	jmp    c001a24e <FAT::rename(char const*, char const*)+0xbc>
c001a1b6:	83 ec 08             	sub    esp,0x8
c001a1b9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1c0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a1c7:	50                   	push   eax
c001a1c8:	e8 da 64 fe ff       	call   c00006a7 <strcpy>
c001a1cd:	83 c4 10             	add    esp,0x10
c001a1d0:	83 ec 08             	sub    esp,0x8
c001a1d3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a1da:	50                   	push   eax
c001a1db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1e2:	e8 ed fa ff ff       	call   c0019cd4 <FAT::fixFilepath(char*)>
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	83 ec 08             	sub    esp,0x8
c001a1ed:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a1f4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a1f8:	50                   	push   eax
c001a1f9:	e8 a9 64 fe ff       	call   c00006a7 <strcpy>
c001a1fe:	83 c4 10             	add    esp,0x10
c001a201:	83 ec 08             	sub    esp,0x8
c001a204:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a208:	50                   	push   eax
c001a209:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a210:	e8 bf fa ff ff       	call   c0019cd4 <FAT::fixFilepath(char*)>
c001a215:	83 c4 10             	add    esp,0x10
c001a218:	83 ec 08             	sub    esp,0x8
c001a21b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a21f:	50                   	push   eax
c001a220:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a227:	50                   	push   eax
c001a228:	e8 89 c3 fe ff       	call   c00065b6 <f_rename>
c001a22d:	83 c4 10             	add    esp,0x10
c001a230:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a237:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a23e:	85 c0                	test   eax,eax
c001a240:	75 07                	jne    c001a249 <FAT::rename(char const*, char const*)+0xb7>
c001a242:	b8 00 00 00 00       	mov    eax,0x0
c001a247:	eb 05                	jmp    c001a24e <FAT::rename(char const*, char const*)+0xbc>
c001a249:	b8 01 00 00 00       	mov    eax,0x1
c001a24e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a254:	c3                   	ret    
c001a255:	90                   	nop

c001a256 <FAT::mkdir(char const*)>:
c001a256:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a25c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a264:	75 07                	jne    c001a26d <FAT::mkdir(char const*)+0x17>
c001a266:	b8 04 00 00 00       	mov    eax,0x4
c001a26b:	eb 5c                	jmp    c001a2c9 <FAT::mkdir(char const*)+0x73>
c001a26d:	83 ec 08             	sub    esp,0x8
c001a270:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a277:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a27b:	50                   	push   eax
c001a27c:	e8 26 64 fe ff       	call   c00006a7 <strcpy>
c001a281:	83 c4 10             	add    esp,0x10
c001a284:	83 ec 08             	sub    esp,0x8
c001a287:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a28b:	50                   	push   eax
c001a28c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a293:	e8 3c fa ff ff       	call   c0019cd4 <FAT::fixFilepath(char*)>
c001a298:	83 c4 10             	add    esp,0x10
c001a29b:	83 ec 0c             	sub    esp,0xc
c001a29e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2a2:	50                   	push   eax
c001a2a3:	e8 e2 c0 fe ff       	call   c000638a <f_mkdir>
c001a2a8:	83 c4 10             	add    esp,0x10
c001a2ab:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a2b2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a2b9:	85 c0                	test   eax,eax
c001a2bb:	75 07                	jne    c001a2c4 <FAT::mkdir(char const*)+0x6e>
c001a2bd:	b8 00 00 00 00       	mov    eax,0x0
c001a2c2:	eb 05                	jmp    c001a2c9 <FAT::mkdir(char const*)+0x73>
c001a2c4:	b8 01 00 00 00       	mov    eax,0x1
c001a2c9:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a2cf:	c3                   	ret    

c001a2d0 <FAT::exists(char const*)>:
c001a2d0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a2d6:	83 ec 08             	sub    esp,0x8
c001a2d9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a2e4:	50                   	push   eax
c001a2e5:	e8 bd 63 fe ff       	call   c00006a7 <strcpy>
c001a2ea:	83 c4 10             	add    esp,0x10
c001a2ed:	83 ec 08             	sub    esp,0x8
c001a2f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2f4:	50                   	push   eax
c001a2f5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2fc:	e8 d3 f9 ff ff       	call   c0019cd4 <FAT::fixFilepath(char*)>
c001a301:	83 c4 10             	add    esp,0x10
c001a304:	83 ec 08             	sub    esp,0x8
c001a307:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a30e:	50                   	push   eax
c001a30f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a313:	50                   	push   eax
c001a314:	e8 9c bb fe ff       	call   c0005eb5 <f_stat>
c001a319:	83 c4 10             	add    esp,0x10
c001a31c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a323:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a32a:	85 c0                	test   eax,eax
c001a32c:	75 04                	jne    c001a332 <FAT::exists(char const*)+0x62>
c001a32e:	b0 01                	mov    al,0x1
c001a330:	eb 02                	jmp    c001a334 <FAT::exists(char const*)+0x64>
c001a332:	b0 00                	mov    al,0x0
c001a334:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a33a:	c3                   	ret    
c001a33b:	90                   	nop

c001a33c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a33c:	b8 08 00 00 00       	mov    eax,0x8
c001a341:	c3                   	ret    

c001a342 <ISO9660::seek(void*, unsigned long long)>:
c001a342:	53                   	push   ebx
c001a343:	b8 04 00 00 00       	mov    eax,0x4
c001a348:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a34c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a350:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a354:	85 d2                	test   edx,edx
c001a356:	74 17                	je     c001a36f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a358:	89 c8                	mov    eax,ecx
c001a35a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001a35d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001a360:	b8 01 00 00 00       	mov    eax,0x1
c001a365:	73 08                	jae    c001a36f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a367:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001a36a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001a36d:	31 c0                	xor    eax,eax
c001a36f:	5b                   	pop    ebx
c001a370:	c3                   	ret    
c001a371:	90                   	nop

c001a372 <ISO9660::tell(void*, unsigned long long*)>:
c001a372:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a376:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a37a:	85 d2                	test   edx,edx
c001a37c:	74 12                	je     c001a390 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a37e:	85 c0                	test   eax,eax
c001a380:	74 0e                	je     c001a390 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a382:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a385:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a388:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a38b:	89 10                	mov    DWORD PTR [eax],edx
c001a38d:	31 c0                	xor    eax,eax
c001a38f:	c3                   	ret    
c001a390:	b8 04 00 00 00       	mov    eax,0x4
c001a395:	c3                   	ret    

c001a396 <ISO9660::getName()>:
c001a396:	b8 fc 22 02 c0       	mov    eax,0xc00222fc
c001a39b:	c3                   	ret    

c001a39c <ISO9660::stat(void*, unsigned long long*)>:
c001a39c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3a4:	85 d2                	test   edx,edx
c001a3a6:	74 12                	je     c001a3ba <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a3a8:	85 c0                	test   eax,eax
c001a3aa:	74 0e                	je     c001a3ba <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a3ac:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a3af:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a3b2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a3b5:	89 10                	mov    DWORD PTR [eax],edx
c001a3b7:	31 c0                	xor    eax,eax
c001a3b9:	c3                   	ret    
c001a3ba:	b8 04 00 00 00       	mov    eax,0x4
c001a3bf:	c3                   	ret    

c001a3c0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a3c0:	b8 01 00 00 00       	mov    eax,0x1
c001a3c5:	c3                   	ret    

c001a3c6 <ISO9660::unlink(char const*)>:
c001a3c6:	b8 01 00 00 00       	mov    eax,0x1
c001a3cb:	c3                   	ret    

c001a3cc <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a3cc:	b8 01 00 00 00       	mov    eax,0x1
c001a3d1:	c3                   	ret    

c001a3d2 <ISO9660::rename(char const*, char const*)>:
c001a3d2:	b8 01 00 00 00       	mov    eax,0x1
c001a3d7:	c3                   	ret    

c001a3d8 <ISO9660::mkdir(char const*)>:
c001a3d8:	b8 01 00 00 00       	mov    eax,0x1
c001a3dd:	c3                   	ret    

c001a3de <ISO9660::close(void*)>:
c001a3de:	83 ec 0c             	sub    esp,0xc
c001a3e1:	b8 04 00 00 00       	mov    eax,0x4
c001a3e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a3ea:	85 d2                	test   edx,edx
c001a3ec:	74 0e                	je     c001a3fc <ISO9660::close(void*)+0x1e>
c001a3ee:	83 ec 0c             	sub    esp,0xc
c001a3f1:	52                   	push   edx
c001a3f2:	e8 37 18 ff ff       	call   c000bc2e <free>
c001a3f7:	83 c4 10             	add    esp,0x10
c001a3fa:	31 c0                	xor    eax,eax
c001a3fc:	83 c4 0c             	add    esp,0xc
c001a3ff:	c3                   	ret    

c001a400 <ISO9660::closeDir(void*)>:
c001a400:	83 ec 0c             	sub    esp,0xc
c001a403:	b8 04 00 00 00       	mov    eax,0x4
c001a408:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a40c:	85 d2                	test   edx,edx
c001a40e:	74 0e                	je     c001a41e <ISO9660::closeDir(void*)+0x1e>
c001a410:	83 ec 0c             	sub    esp,0xc
c001a413:	52                   	push   edx
c001a414:	e8 15 18 ff ff       	call   c000bc2e <free>
c001a419:	83 c4 10             	add    esp,0x10
c001a41c:	31 c0                	xor    eax,eax
c001a41e:	83 c4 0c             	add    esp,0xc
c001a421:	c3                   	ret    

c001a422 <ISO9660::~ISO9660()>:
c001a422:	83 ec 0c             	sub    esp,0xc
c001a425:	ba 50 23 02 c0       	mov    edx,0xc0022350
c001a42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a42e:	89 10                	mov    DWORD PTR [eax],edx
c001a430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a434:	83 ec 0c             	sub    esp,0xc
c001a437:	50                   	push   eax
c001a438:	e8 d7 4e ff ff       	call   c000f314 <Filesystem::~Filesystem()>
c001a43d:	83 c4 10             	add    esp,0x10
c001a440:	90                   	nop
c001a441:	83 c4 0c             	add    esp,0xc
c001a444:	c3                   	ret    
c001a445:	90                   	nop

c001a446 <ISO9660::~ISO9660()>:
c001a446:	83 ec 0c             	sub    esp,0xc
c001a449:	83 ec 0c             	sub    esp,0xc
c001a44c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a450:	e8 cd ff ff ff       	call   c001a422 <ISO9660::~ISO9660()>
c001a455:	83 c4 10             	add    esp,0x10
c001a458:	83 ec 08             	sub    esp,0x8
c001a45b:	6a 08                	push   0x8
c001a45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a461:	e8 a5 4a ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001a466:	83 c4 10             	add    esp,0x10
c001a469:	83 c4 0c             	add    esp,0xc
c001a46c:	c3                   	ret    

c001a46d <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a46d:	55                   	push   ebp
c001a46e:	31 c9                	xor    ecx,ecx
c001a470:	57                   	push   edi
c001a471:	56                   	push   esi
c001a472:	53                   	push   ebx
c001a473:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a477:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a47b:	89 eb                	mov    ebx,ebp
c001a47d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a481:	39 ce                	cmp    esi,ecx
c001a483:	7e 17                	jle    c001a49c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a485:	31 d2                	xor    edx,edx
c001a487:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a48b:	7d 13                	jge    c001a4a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a48d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a491:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a494:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a497:	75 0d                	jne    c001a4a6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a499:	42                   	inc    edx
c001a49a:	eb eb                	jmp    c001a487 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a49c:	31 c0                	xor    eax,eax
c001a49e:	eb 0a                	jmp    c001a4aa <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a4a0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a4a4:	eb 04                	jmp    c001a4aa <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a4a6:	41                   	inc    ecx
c001a4a7:	43                   	inc    ebx
c001a4a8:	eb d7                	jmp    c001a481 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a4aa:	5b                   	pop    ebx
c001a4ab:	5e                   	pop    esi
c001a4ac:	5f                   	pop    edi
c001a4ad:	5d                   	pop    ebp
c001a4ae:	c3                   	ret    

c001a4af <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a4af:	56                   	push   esi
c001a4b0:	53                   	push   ebx
c001a4b1:	52                   	push   edx
c001a4b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a4ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4be:	39 0d a0 4c 02 c0    	cmp    DWORD PTR ds:0xc0024ca0,ecx
c001a4c4:	75 08                	jne    c001a4ce <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a4c6:	38 05 48 31 02 c0    	cmp    BYTE PTR ds:0xc0023148,al
c001a4cc:	74 2b                	je     c001a4f9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a4ce:	83 ec 0c             	sub    esp,0xc
c001a4d1:	a2 48 31 02 c0       	mov    ds:0xc0023148,al
c001a4d6:	68 c0 4c 02 c0       	push   0xc0024cc0
c001a4db:	0f be c0             	movsx  eax,al
c001a4de:	6a 01                	push   0x1
c001a4e0:	89 0d a0 4c 02 c0    	mov    DWORD PTR ds:0xc0024ca0,ecx
c001a4e6:	31 db                	xor    ebx,ebx
c001a4e8:	53                   	push   ebx
c001a4e9:	51                   	push   ecx
c001a4ea:	ff 34 85 1c 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc3e4]
c001a4f1:	e8 78 7a ff ff       	call   c0011f6e <LogicalDisk::read(unsigned long long, int, void*)>
c001a4f6:	83 c4 20             	add    esp,0x20
c001a4f9:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a501:	c7 44 24 14 c0 4c 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024cc0
c001a509:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a50d:	58                   	pop    eax
c001a50e:	5b                   	pop    ebx
c001a50f:	5e                   	pop    esi
c001a510:	e9 bd 60 fe ff       	jmp    c00005d2 <memcpy>
c001a515:	90                   	nop

c001a516 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a516:	81 ec 10 08 00 00    	sub    esp,0x810
c001a51c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a523:	83 c0 41             	add    eax,0x41
c001a526:	0f be c0             	movsx  eax,al
c001a529:	50                   	push   eax
c001a52a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a52e:	50                   	push   eax
c001a52f:	6a 10                	push   0x10
c001a531:	e8 79 ff ff ff       	call   c001a4af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a536:	83 c4 10             	add    esp,0x10
c001a539:	31 c0                	xor    eax,eax
c001a53b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a540:	75 1d                	jne    c001a55f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a542:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a547:	75 16                	jne    c001a55f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a549:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a54e:	75 0f                	jne    c001a55f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a550:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a555:	75 08                	jne    c001a55f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a557:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a55c:	0f 94 c0             	sete   al
c001a55f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a565:	c3                   	ret    

c001a566 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a566:	55                   	push   ebp
c001a567:	57                   	push   edi
c001a568:	56                   	push   esi
c001a569:	53                   	push   ebx
c001a56a:	81 ec 34 08 00 00    	sub    esp,0x834
c001a570:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a577:	55                   	push   ebp
c001a578:	68 17 23 02 c0       	push   0xc0022317
c001a57d:	e8 69 4a ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001a582:	83 c4 10             	add    esp,0x10
c001a585:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a58d:	0f 84 06 02 00 00    	je     c001a799 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a593:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a59b:	0f 84 f8 01 00 00    	je     c001a799 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a5a1:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a5a8:	b8 01 00 00 00       	mov    eax,0x1
c001a5ad:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a5b1:	0f 85 e7 01 00 00    	jne    c001a79e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a5b7:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a5ba:	31 d2                	xor    edx,edx
c001a5bc:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a5bf:	89 e9                	mov    ecx,ebp
c001a5c1:	89 d3                	mov    ebx,edx
c001a5c3:	01 f1                	add    ecx,esi
c001a5c5:	11 fb                	adc    ebx,edi
c001a5c7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a5cb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a5cf:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a5d6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a5d9:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a5dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a5e0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a5e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a5e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a5ec:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a5f0:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a5f4:	72 19                	jb     c001a60f <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a5f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a602:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a605:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a609:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a60d:	eb 13                	jmp    c001a622 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a60f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a617:	29 f0                	sub    eax,esi
c001a619:	19 fa                	sbb    edx,edi
c001a61b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a61e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a622:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a629:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a62c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a62e:	53                   	push   ebx
c001a62f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a633:	c1 e0 0b             	shl    eax,0xb
c001a636:	01 c6                	add    esi,eax
c001a638:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a63f:	11 d7                	adc    edi,edx
c001a641:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a645:	89 fa                	mov    edx,edi
c001a647:	50                   	push   eax
c001a648:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a64c:	50                   	push   eax
c001a64d:	89 f0                	mov    eax,esi
c001a64f:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a653:	50                   	push   eax
c001a654:	e8 56 fe ff ff       	call   c001a4af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a659:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a660:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a664:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a667:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a66b:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a671:	83 c4 10             	add    esp,0x10
c001a674:	b8 00 08 00 00       	mov    eax,0x800
c001a679:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a67d:	29 d0                	sub    eax,edx
c001a67f:	39 c1                	cmp    ecx,eax
c001a681:	83 db 00             	sbb    ebx,0x0
c001a684:	7d 19                	jge    c001a69f <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a686:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a68b:	75 16                	jne    c001a6a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a68d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a694:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a69a:	e9 f6 00 00 00       	jmp    c001a795 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a69f:	89 c5                	mov    ebp,eax
c001a6a1:	eb 03                	jmp    c001a6a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a6a3:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a6a6:	51                   	push   ecx
c001a6a7:	55                   	push   ebp
c001a6a8:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a6ac:	50                   	push   eax
c001a6ad:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a6b4:	e8 19 5f fe ff       	call   c00005d2 <memcpy>
c001a6b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6c1:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a6c8:	01 e8                	add    eax,ebp
c001a6ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6ce:	89 e8                	mov    eax,ebp
c001a6d0:	99                   	cdq    
c001a6d1:	01 ee                	add    esi,ebp
c001a6d3:	11 d7                	adc    edi,edx
c001a6d5:	29 e9                	sub    ecx,ebp
c001a6d7:	19 d3                	sbb    ebx,edx
c001a6d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a6dd:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a6e1:	83 c4 10             	add    esp,0x10
c001a6e4:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a6e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a6ec:	b8 00 00 00 00       	mov    eax,0x0
c001a6f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a6f5:	7d 3f                	jge    c001a736 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a6f7:	52                   	push   edx
c001a6f8:	89 fa                	mov    edx,edi
c001a6fa:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a701:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a705:	50                   	push   eax
c001a706:	89 f0                	mov    eax,esi
c001a708:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a70c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a710:	50                   	push   eax
c001a711:	e8 99 fd ff ff       	call   c001a4af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a716:	81 c6 00 08 00 00    	add    esi,0x800
c001a71c:	83 d7 00             	adc    edi,0x0
c001a71f:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a727:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a72f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a734:	eb ab                	jmp    c001a6e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a73a:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a73d:	74 34                	je     c001a773 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a73f:	89 fa                	mov    edx,edi
c001a741:	50                   	push   eax
c001a742:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a749:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a74d:	50                   	push   eax
c001a74e:	89 f0                	mov    eax,esi
c001a750:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a754:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a758:	55                   	push   ebp
c001a759:	50                   	push   eax
c001a75a:	e8 50 fd ff ff       	call   c001a4af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a75f:	83 c4 0c             	add    esp,0xc
c001a762:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a766:	55                   	push   ebp
c001a767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a76b:	e8 62 5e fe ff       	call   c00005d2 <memcpy>
c001a770:	83 c4 10             	add    esp,0x10
c001a773:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a77a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a77e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a782:	89 38                	mov    DWORD PTR [eax],edi
c001a784:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a78b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a78f:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a792:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a795:	31 c0                	xor    eax,eax
c001a797:	eb 05                	jmp    c001a79e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a799:	b8 04 00 00 00       	mov    eax,0x4
c001a79e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a7a4:	5b                   	pop    ebx
c001a7a5:	5e                   	pop    esi
c001a7a6:	5f                   	pop    edi
c001a7a7:	5d                   	pop    ebp
c001a7a8:	c3                   	ret    
c001a7a9:	90                   	nop

c001a7aa <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a7aa:	55                   	push   ebp
c001a7ab:	57                   	push   edi
c001a7ac:	56                   	push   esi
c001a7ad:	53                   	push   ebx
c001a7ae:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a7b4:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a7bb:	85 f6                	test   esi,esi
c001a7bd:	0f 84 64 02 00 00    	je     c001aa27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a7c3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a7cb:	0f 84 56 02 00 00    	je     c001aa27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a7d1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a7d4:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a7d7:	75 0a                	jne    c001a7e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a7d9:	b8 07 00 00 00       	mov    eax,0x7
c001a7de:	e9 49 02 00 00       	jmp    c001aa2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a7e3:	50                   	push   eax
c001a7e4:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a7e8:	50                   	push   eax
c001a7e9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a7f0:	53                   	push   ebx
c001a7f1:	8b 06                	mov    eax,DWORD PTR [esi]
c001a7f3:	c1 e0 0b             	shl    eax,0xb
c001a7f6:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a7f9:	c1 e8 0b             	shr    eax,0xb
c001a7fc:	50                   	push   eax
c001a7fd:	e8 ad fc ff ff       	call   c001a4af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a802:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a805:	83 c4 10             	add    esp,0x10
c001a808:	89 c1                	mov    ecx,eax
c001a80a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a80d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a813:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a816:	84 db                	test   bl,bl
c001a818:	0f 85 90 00 00 00    	jne    c001a8ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a81e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a824:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a82a:	29 c7                	sub    edi,eax
c001a82c:	89 fb                	mov    ebx,edi
c001a82e:	c1 fb 1f             	sar    ebx,0x1f
c001a831:	01 f8                	add    eax,edi
c001a833:	11 da                	adc    edx,ebx
c001a835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a839:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a83d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a840:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a843:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a846:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a849:	89 04 24             	mov    DWORD PTR [esp],eax
c001a84c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a850:	89 d8                	mov    eax,ebx
c001a852:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a855:	ba 00 00 00 00       	mov    edx,0x0
c001a85a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a85e:	b8 00 00 00 00       	mov    eax,0x0
c001a863:	73 0b                	jae    c001a870 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a865:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a868:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a86c:	29 f8                	sub    eax,edi
c001a86e:	19 da                	sbb    edx,ebx
c001a870:	89 d3                	mov    ebx,edx
c001a872:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a875:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a878:	09 c3                	or     ebx,eax
c001a87a:	0f 84 59 ff ff ff    	je     c001a7d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a880:	55                   	push   ebp
c001a881:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a885:	50                   	push   eax
c001a886:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a88d:	53                   	push   ebx
c001a88e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a890:	c1 e0 0b             	shl    eax,0xb
c001a893:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a897:	c1 e8 0b             	shr    eax,0xb
c001a89a:	50                   	push   eax
c001a89b:	e8 0f fc ff ff       	call   c001a4af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a8a0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a8a3:	83 c4 10             	add    esp,0x10
c001a8a6:	25 ff 07 00 00       	and    eax,0x7ff
c001a8ab:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a8ae:	57                   	push   edi
c001a8af:	6a 28                	push   0x28
c001a8b1:	6a 00                	push   0x0
c001a8b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8b7:	50                   	push   eax
c001a8b8:	e8 4b 5d fe ff       	call   c0000608 <memset>
c001a8bd:	31 d2                	xor    edx,edx
c001a8bf:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a8c2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a8c8:	89 f8                	mov    eax,edi
c001a8ca:	83 c0 21             	add    eax,0x21
c001a8cd:	83 d2 00             	adc    edx,0x0
c001a8d0:	89 c7                	mov    edi,eax
c001a8d2:	89 d5                	mov    ebp,edx
c001a8d4:	83 c4 10             	add    esp,0x10
c001a8d7:	31 c9                	xor    ecx,ecx
c001a8d9:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a8e0:	83 f9 28             	cmp    ecx,0x28
c001a8e3:	88 04 24             	mov    BYTE PTR [esp],al
c001a8e6:	0f 94 c2             	sete   dl
c001a8e9:	88 d0                	mov    al,dl
c001a8eb:	ba ff 07 00 00       	mov    edx,0x7ff
c001a8f0:	39 fa                	cmp    edx,edi
c001a8f2:	ba 00 00 00 00       	mov    edx,0x0
c001a8f7:	19 ea                	sbb    edx,ebp
c001a8f9:	0f 92 c2             	setb   dl
c001a8fc:	09 c2                	or     edx,eax
c001a8fe:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a902:	0f 94 c0             	sete   al
c001a905:	08 d0                	or     al,dl
c001a907:	75 16                	jne    c001a91f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a909:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a90d:	74 10                	je     c001a91f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a90f:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a912:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a916:	41                   	inc    ecx
c001a917:	83 c7 01             	add    edi,0x1
c001a91a:	83 d5 00             	adc    ebp,0x0
c001a91d:	eb ba                	jmp    c001a8d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a91f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a926:	83 ec 0c             	sub    esp,0xc
c001a929:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a92d:	57                   	push   edi
c001a92e:	e8 f2 5c fe ff       	call   c0000625 <strlen>
c001a933:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a93b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a93f:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a946:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a949:	5a                   	pop    edx
c001a94a:	25 ff 07 00 00       	and    eax,0x7ff
c001a94f:	01 c8                	add    eax,ecx
c001a951:	59                   	pop    ecx
c001a952:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a958:	83 e0 02             	and    eax,0x2
c001a95b:	3c 01                	cmp    al,0x1
c001a95d:	19 c0                	sbb    eax,eax
c001a95f:	83 c0 02             	add    eax,0x2
c001a962:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a966:	57                   	push   edi
c001a967:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a96b:	50                   	push   eax
c001a96c:	e8 36 5d fe ff       	call   c00006a7 <strcpy>
c001a971:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a975:	83 c4 10             	add    esp,0x10
c001a978:	84 c0                	test   al,al
c001a97a:	75 21                	jne    c001a99d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a97c:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a984:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a98c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a994:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a99b:	eb 28                	jmp    c001a9c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a99d:	fe c8                	dec    al
c001a99f:	75 24                	jne    c001a9c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a9a1:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a9a9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a9b1:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a9b9:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a9c0:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a9c5:	0f b6 fb             	movzx  edi,bl
c001a9c8:	31 db                	xor    ebx,ebx
c001a9ca:	50                   	push   eax
c001a9cb:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a9d2:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a9d6:	50                   	push   eax
c001a9d7:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a9de:	e8 ef 5b fe ff       	call   c00005d2 <memcpy>
c001a9e3:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a9ea:	89 f9                	mov    ecx,edi
c001a9ec:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a9f2:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a9f5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a9f8:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a9fb:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a9fe:	83 c4 10             	add    esp,0x10
c001aa01:	39 c7                	cmp    edi,eax
c001aa03:	89 df                	mov    edi,ebx
c001aa05:	19 d7                	sbb    edi,edx
c001aa07:	72 10                	jb     c001aa19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001aa09:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001aa10:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001aa17:	eb 0a                	jmp    c001aa23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001aa19:	29 c8                	sub    eax,ecx
c001aa1b:	19 da                	sbb    edx,ebx
c001aa1d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001aa20:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001aa23:	31 c0                	xor    eax,eax
c001aa25:	eb 05                	jmp    c001aa2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001aa27:	b8 04 00 00 00       	mov    eax,0x4
c001aa2c:	81 c4 5c 09 00 00    	add    esp,0x95c
c001aa32:	5b                   	pop    ebx
c001aa33:	5e                   	pop    esi
c001aa34:	5f                   	pop    edi
c001aa35:	5d                   	pop    ebp
c001aa36:	c3                   	ret    

c001aa37 <readRoot(unsigned int*, unsigned int*, char)>:
c001aa37:	81 ec 40 08 00 00    	sub    esp,0x840
c001aa3d:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001aa45:	50                   	push   eax
c001aa46:	8d 44 24 38          	lea    eax,[esp+0x38]
c001aa4a:	50                   	push   eax
c001aa4b:	6a 10                	push   0x10
c001aa4d:	e8 5d fa ff ff       	call   c001a4af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aa52:	83 c4 0c             	add    esp,0xc
c001aa55:	6a 22                	push   0x22
c001aa57:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001aa5e:	50                   	push   eax
c001aa5f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001aa63:	50                   	push   eax
c001aa64:	e8 69 5b fe ff       	call   c00005d2 <memcpy>
c001aa69:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001aa70:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aa74:	89 10                	mov    DWORD PTR [eax],edx
c001aa76:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001aa7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aa81:	89 10                	mov    DWORD PTR [eax],edx
c001aa83:	b0 01                	mov    al,0x1
c001aa85:	81 c4 4c 08 00 00    	add    esp,0x84c
c001aa8b:	c3                   	ret    

c001aa8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001aa8c:	55                   	push   ebp
c001aa8d:	57                   	push   edi
c001aa8e:	56                   	push   esi
c001aa8f:	53                   	push   ebx
c001aa90:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa96:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aa9d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001aaa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aaa8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001aaac:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001aab0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aab4:	75 03                	jne    c001aab9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001aab6:	83 c3 02             	add    ebx,0x2
c001aab9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001aabc:	75 03                	jne    c001aac1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001aabe:	43                   	inc    ebx
c001aabf:	eb f8                	jmp    c001aab9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001aac1:	51                   	push   ecx
c001aac2:	68 00 01 00 00       	push   0x100
c001aac7:	6a 00                	push   0x0
c001aac9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aacd:	50                   	push   eax
c001aace:	e8 35 5b fe ff       	call   c0000608 <memset>
c001aad3:	83 c4 10             	add    esp,0x10
c001aad6:	31 d2                	xor    edx,edx
c001aad8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001aadb:	84 c0                	test   al,al
c001aadd:	74 21                	je     c001ab00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001aadf:	3c 2f                	cmp    al,0x2f
c001aae1:	75 0b                	jne    c001aaee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001aae3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001aae7:	bd 01 00 00 00       	mov    ebp,0x1
c001aaec:	eb 14                	jmp    c001ab02 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001aaee:	8d 48 9f             	lea    ecx,[eax-0x61]
c001aaf1:	80 f9 19             	cmp    cl,0x19
c001aaf4:	77 03                	ja     c001aaf9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001aaf6:	83 e8 20             	sub    eax,0x20
c001aaf9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001aafd:	42                   	inc    edx
c001aafe:	eb d8                	jmp    c001aad8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001ab00:	31 ed                	xor    ebp,ebp
c001ab02:	83 ec 0c             	sub    esp,0xc
c001ab05:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001ab0c:	e8 0d 11 ff ff       	call   c000bc1e <malloc>
c001ab11:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001ab18:	89 c6                	mov    esi,eax
c001ab1a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001ab20:	c1 ef 0b             	shr    edi,0xb
c001ab23:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001ab2a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001ab2e:	83 c4 10             	add    esp,0x10
c001ab31:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001ab36:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ab3a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001ab41:	74 28                	je     c001ab6b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001ab43:	52                   	push   edx
c001ab44:	57                   	push   edi
c001ab45:	50                   	push   eax
c001ab46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab4a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab51:	e8 59 f9 ff ff       	call   c001a4af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab5a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001ab61:	05 00 08 00 00       	add    eax,0x800
c001ab66:	83 c4 10             	add    esp,0x10
c001ab69:	eb cb                	jmp    c001ab36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001ab6b:	83 ec 0c             	sub    esp,0xc
c001ab6e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ab72:	57                   	push   edi
c001ab73:	e8 ad 5a fe ff       	call   c0000625 <strlen>
c001ab78:	50                   	push   eax
c001ab79:	57                   	push   edi
c001ab7a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ab81:	56                   	push   esi
c001ab82:	e8 e6 f8 ff ff       	call   c001a46d <__memmem(unsigned char*, int, unsigned char*, int)>
c001ab87:	83 c4 20             	add    esp,0x20
c001ab8a:	85 c0                	test   eax,eax
c001ab8c:	75 13                	jne    c001aba1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001ab8e:	83 ec 0c             	sub    esp,0xc
c001ab91:	56                   	push   esi
c001ab92:	e8 97 10 ff ff       	call   c000bc2e <free>
c001ab97:	83 c4 10             	add    esp,0x10
c001ab9a:	31 c0                	xor    eax,eax
c001ab9c:	e9 b3 00 00 00       	jmp    c001ac54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001aba1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001aba5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001aba9:	c1 e7 08             	shl    edi,0x8
c001abac:	c1 e2 10             	shl    edx,0x10
c001abaf:	09 d7                	or     edi,edx
c001abb1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001abb5:	09 d7                	or     edi,edx
c001abb7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001abbb:	c1 e2 18             	shl    edx,0x18
c001abbe:	09 d7                	or     edi,edx
c001abc0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001abc4:	89 d1                	mov    ecx,edx
c001abc6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001abca:	c1 e1 08             	shl    ecx,0x8
c001abcd:	c1 e2 10             	shl    edx,0x10
c001abd0:	09 ca                	or     edx,ecx
c001abd2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001abd6:	09 ca                	or     edx,ecx
c001abd8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001abdc:	c1 e1 18             	shl    ecx,0x18
c001abdf:	09 ca                	or     edx,ecx
c001abe1:	89 e9                	mov    ecx,ebp
c001abe3:	84 c9                	test   cl,cl
c001abe5:	74 3c                	je     c001ac23 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001abe7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001abeb:	83 ec 0c             	sub    esp,0xc
c001abee:	56                   	push   esi
c001abef:	e8 3a 10 ff ff       	call   c000bc2e <free>
c001abf4:	83 c4 0c             	add    esp,0xc
c001abf7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001abfe:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ac03:	50                   	push   eax
c001ac04:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac0b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac16:	52                   	push   edx
c001ac17:	57                   	push   edi
c001ac18:	53                   	push   ebx
c001ac19:	e8 6e fe ff ff       	call   c001aa8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ac1e:	83 c4 20             	add    esp,0x20
c001ac21:	eb 31                	jmp    c001ac54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001ac23:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001ac26:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001ac2d:	d0 e8                	shr    al,1
c001ac2f:	89 3b                	mov    DWORD PTR [ebx],edi
c001ac31:	83 e0 01             	and    eax,0x1
c001ac34:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ac3b:	83 ec 0c             	sub    esp,0xc
c001ac3e:	89 13                	mov    DWORD PTR [ebx],edx
c001ac40:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001ac47:	89 03                	mov    DWORD PTR [ebx],eax
c001ac49:	56                   	push   esi
c001ac4a:	e8 df 0f ff ff       	call   c000bc2e <free>
c001ac4f:	83 c4 10             	add    esp,0x10
c001ac52:	b0 01                	mov    al,0x1
c001ac54:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ac5a:	5b                   	pop    ebx
c001ac5b:	5e                   	pop    esi
c001ac5c:	5f                   	pop    edi
c001ac5d:	5d                   	pop    ebp
c001ac5e:	c3                   	ret    

c001ac5f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001ac5f:	55                   	push   ebp
c001ac60:	57                   	push   edi
c001ac61:	56                   	push   esi
c001ac62:	53                   	push   ebx
c001ac63:	83 ec 20             	sub    esp,0x20
c001ac66:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac6a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ac6e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac7a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ac82:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001ac87:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001ac8d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001ac93:	57                   	push   edi
c001ac94:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac98:	50                   	push   eax
c001ac99:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac9d:	50                   	push   eax
c001ac9e:	e8 94 fd ff ff       	call   c001aa37 <readRoot(unsigned int*, unsigned int*, char)>
c001aca3:	5a                   	pop    edx
c001aca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aca8:	e8 78 59 fe ff       	call   c0000625 <strlen>
c001acad:	83 c4 10             	add    esp,0x10
c001acb0:	83 f8 03             	cmp    eax,0x3
c001acb3:	77 17                	ja     c001accc <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001acb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acb9:	89 03                	mov    DWORD PTR [ebx],eax
c001acbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acbf:	89 06                	mov    DWORD PTR [esi],eax
c001acc1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001acc8:	b0 01                	mov    al,0x1
c001acca:	eb 19                	jmp    c001ace5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001accc:	50                   	push   eax
c001accd:	55                   	push   ebp
c001acce:	57                   	push   edi
c001accf:	56                   	push   esi
c001acd0:	53                   	push   ebx
c001acd1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001acd5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001acd9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001acdd:	e8 aa fd ff ff       	call   c001aa8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ace2:	83 c4 20             	add    esp,0x20
c001ace5:	83 c4 1c             	add    esp,0x1c
c001ace8:	5b                   	pop    ebx
c001ace9:	5e                   	pop    esi
c001acea:	5f                   	pop    edi
c001aceb:	5d                   	pop    ebp
c001acec:	c3                   	ret    
c001aced:	90                   	nop

c001acee <ISO9660::open(char const*, void**, FileOpenMode)>:
c001acee:	57                   	push   edi
c001acef:	56                   	push   esi
c001acf0:	53                   	push   ebx
c001acf1:	83 ec 10             	sub    esp,0x10
c001acf4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001acf8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001acfc:	85 ff                	test   edi,edi
c001acfe:	74 7b                	je     c001ad7b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ad00:	85 f6                	test   esi,esi
c001ad02:	74 77                	je     c001ad7b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ad04:	83 ec 0c             	sub    esp,0xc
c001ad07:	6a 1c                	push   0x1c
c001ad09:	e8 10 0f ff ff       	call   c000bc1e <malloc>
c001ad0e:	89 07                	mov    DWORD PTR [edi],eax
c001ad10:	89 c3                	mov    ebx,eax
c001ad12:	58                   	pop    eax
c001ad13:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad17:	50                   	push   eax
c001ad18:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ad1b:	50                   	push   eax
c001ad1c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad20:	50                   	push   eax
c001ad21:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad25:	50                   	push   eax
c001ad26:	56                   	push   esi
c001ad27:	e8 33 ff ff ff       	call   c001ac5f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ad2c:	83 c4 20             	add    esp,0x20
c001ad2f:	84 c0                	test   al,al
c001ad31:	74 07                	je     c001ad3a <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ad33:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad38:	74 0b                	je     c001ad45 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ad3a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ad3e:	b8 01 00 00 00       	mov    eax,0x1
c001ad43:	eb 3b                	jmp    c001ad80 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ad45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad49:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ad4d:	89 03                	mov    DWORD PTR [ebx],eax
c001ad4f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ad56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad5a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ad61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ad68:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ad6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ad72:	8a 06                	mov    al,BYTE PTR [esi]
c001ad74:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ad77:	31 c0                	xor    eax,eax
c001ad79:	eb 05                	jmp    c001ad80 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ad7b:	b8 04 00 00 00       	mov    eax,0x4
c001ad80:	83 c4 10             	add    esp,0x10
c001ad83:	5b                   	pop    ebx
c001ad84:	5e                   	pop    esi
c001ad85:	5f                   	pop    edi
c001ad86:	c3                   	ret    
c001ad87:	90                   	nop

c001ad88 <ISO9660::exists(char const*)>:
c001ad88:	83 ec 28             	sub    esp,0x28
c001ad8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad8f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ad93:	52                   	push   edx
c001ad94:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001ad97:	52                   	push   edx
c001ad98:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ad9c:	52                   	push   edx
c001ad9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ada1:	52                   	push   edx
c001ada2:	50                   	push   eax
c001ada3:	e8 b7 fe ff ff       	call   c001ac5f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ada8:	83 c4 3c             	add    esp,0x3c
c001adab:	c3                   	ret    

c001adac <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001adac:	56                   	push   esi
c001adad:	53                   	push   ebx
c001adae:	83 ec 14             	sub    esp,0x14
c001adb1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001adb5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001adb9:	85 db                	test   ebx,ebx
c001adbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001adbf:	0f 94 c2             	sete   dl
c001adc2:	85 f6                	test   esi,esi
c001adc4:	0f 94 c0             	sete   al
c001adc7:	08 c2                	or     dl,al
c001adc9:	75 68                	jne    c001ae33 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001adcb:	85 c9                	test   ecx,ecx
c001adcd:	74 64                	je     c001ae33 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001adcf:	83 ec 0c             	sub    esp,0xc
c001add2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001add5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001add9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001addf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ade6:	50                   	push   eax
c001ade7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001adea:	50                   	push   eax
c001adeb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001adef:	50                   	push   eax
c001adf0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001adf4:	50                   	push   eax
c001adf5:	51                   	push   ecx
c001adf6:	e8 64 fe ff ff       	call   c001ac5f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001adfb:	83 c4 20             	add    esp,0x20
c001adfe:	ba 01 00 00 00       	mov    edx,0x1
c001ae03:	84 c0                	test   al,al
c001ae05:	74 31                	je     c001ae38 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae12:	89 03                	mov    DWORD PTR [ebx],eax
c001ae14:	ba 00 00 00 00       	mov    edx,0x0
c001ae19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae1d:	85 c0                	test   eax,eax
c001ae1f:	0f 95 06             	setne  BYTE PTR [esi]
c001ae22:	74 14                	je     c001ae38 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae24:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ae2a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae31:	eb 05                	jmp    c001ae38 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae33:	ba 04 00 00 00       	mov    edx,0x4
c001ae38:	83 c4 14             	add    esp,0x14
c001ae3b:	89 d0                	mov    eax,edx
c001ae3d:	5b                   	pop    ebx
c001ae3e:	5e                   	pop    esi
c001ae3f:	c3                   	ret    

c001ae40 <ISO9660::openDir(char const*, void**)>:
c001ae40:	57                   	push   edi
c001ae41:	56                   	push   esi
c001ae42:	53                   	push   ebx
c001ae43:	83 ec 10             	sub    esp,0x10
c001ae46:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ae4a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ae4e:	85 ff                	test   edi,edi
c001ae50:	0f 84 95 00 00 00    	je     c001aeeb <ISO9660::openDir(char const*, void**)+0xab>
c001ae56:	85 f6                	test   esi,esi
c001ae58:	0f 84 8d 00 00 00    	je     c001aeeb <ISO9660::openDir(char const*, void**)+0xab>
c001ae5e:	83 ec 0c             	sub    esp,0xc
c001ae61:	6a 1c                	push   0x1c
c001ae63:	e8 b6 0d ff ff       	call   c000bc1e <malloc>
c001ae68:	89 07                	mov    DWORD PTR [edi],eax
c001ae6a:	89 c3                	mov    ebx,eax
c001ae6c:	59                   	pop    ecx
c001ae6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae71:	50                   	push   eax
c001ae72:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ae75:	50                   	push   eax
c001ae76:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae7a:	50                   	push   eax
c001ae7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae7f:	50                   	push   eax
c001ae80:	56                   	push   esi
c001ae81:	e8 d9 fd ff ff       	call   c001ac5f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ae86:	83 c4 20             	add    esp,0x20
c001ae89:	84 c0                	test   al,al
c001ae8b:	74 07                	je     c001ae94 <ISO9660::openDir(char const*, void**)+0x54>
c001ae8d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae92:	75 21                	jne    c001aeb5 <ISO9660::openDir(char const*, void**)+0x75>
c001ae94:	0f b6 c0             	movzx  eax,al
c001ae97:	52                   	push   edx
c001ae98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ae9c:	50                   	push   eax
c001ae9d:	68 2a 23 02 c0       	push   0xc002232a
c001aea2:	e8 44 41 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001aea7:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001aeab:	83 c4 10             	add    esp,0x10
c001aeae:	b8 01 00 00 00       	mov    eax,0x1
c001aeb3:	eb 3b                	jmp    c001aef0 <ISO9660::openDir(char const*, void**)+0xb0>
c001aeb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeb9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001aebd:	89 03                	mov    DWORD PTR [ebx],eax
c001aebf:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001aec6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aeca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001aed1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aed8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001aedb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001aee2:	8a 06                	mov    al,BYTE PTR [esi]
c001aee4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001aee7:	31 c0                	xor    eax,eax
c001aee9:	eb 05                	jmp    c001aef0 <ISO9660::openDir(char const*, void**)+0xb0>
c001aeeb:	b8 04 00 00 00       	mov    eax,0x4
c001aef0:	83 c4 10             	add    esp,0x10
c001aef3:	5b                   	pop    ebx
c001aef4:	5e                   	pop    esi
c001aef5:	5f                   	pop    edi
c001aef6:	c3                   	ret    
c001aef7:	90                   	nop

c001aef8 <ISO9660::ISO9660()>:
c001aef8:	83 ec 0c             	sub    esp,0xc
c001aefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeff:	83 ec 0c             	sub    esp,0xc
c001af02:	50                   	push   eax
c001af03:	e8 e8 43 ff ff       	call   c000f2f0 <Filesystem::Filesystem()>
c001af08:	83 c4 10             	add    esp,0x10
c001af0b:	ba 50 23 02 c0       	mov    edx,0xc0022350
c001af10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af14:	89 10                	mov    DWORD PTR [eax],edx
c001af16:	90                   	nop
c001af17:	83 c4 0c             	add    esp,0xc
c001af1a:	c3                   	ret    
c001af1b:	90                   	nop

c001af1c <SoundChannel::~SoundChannel()>:
c001af1c:	83 ec 0c             	sub    esp,0xc
c001af1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af23:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af26:	83 ec 0c             	sub    esp,0xc
c001af29:	50                   	push   eax
c001af2a:	e8 ff 0c ff ff       	call   c000bc2e <free>
c001af2f:	83 c4 10             	add    esp,0x10
c001af32:	90                   	nop
c001af33:	83 c4 0c             	add    esp,0xc
c001af36:	c3                   	ret    
c001af37:	90                   	nop

c001af38 <SoundChannel::setSpeed(float)>:
c001af38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af3c:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001af40:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001af43:	c3                   	ret    

c001af44 <SoundChannel::getSpeed()>:
c001af44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af48:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001af4b:	c3                   	ret    

c001af4c <SoundChannel::setVolume(int)>:
c001af4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af50:	83 f8 64             	cmp    eax,0x64
c001af53:	7e 05                	jle    c001af5a <SoundChannel::setVolume(int)+0xe>
c001af55:	b8 64 00 00 00       	mov    eax,0x64
c001af5a:	85 c0                	test   eax,eax
c001af5c:	79 02                	jns    c001af60 <SoundChannel::setVolume(int)+0x14>
c001af5e:	31 c0                	xor    eax,eax
c001af60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001af64:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001af67:	c3                   	ret    

c001af68 <SoundChannel::getVolume()>:
c001af68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af6c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001af6f:	c3                   	ret    

c001af70 <SoundChannel::pause()>:
c001af70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af74:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001af78:	c3                   	ret    
c001af79:	90                   	nop

c001af7a <SoundChannel::SoundChannel(int, int, int, int)>:
c001af7a:	83 ec 1c             	sub    esp,0x1c
c001af7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af81:	e8 ea ff ff ff       	call   c001af70 <SoundChannel::pause()>
c001af86:	83 c4 04             	add    esp,0x4
c001af89:	6a 50                	push   0x50
c001af8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001af8f:	e8 b8 ff ff ff       	call   c001af4c <SoundChannel::setVolume(int)>
c001af94:	83 c4 08             	add    esp,0x8
c001af97:	d9 e8                	fld1   
c001af99:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001af9d:	d9 1c 24             	fstp   DWORD PTR [esp]
c001afa0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afa4:	e8 8f ff ff ff       	call   c001af38 <SoundChannel::setSpeed(float)>
c001afa9:	83 c4 08             	add    esp,0x8
c001afac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afb0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001afb4:	89 10                	mov    DWORD PTR [eax],edx
c001afb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001afc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001afc9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001afcc:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001afd1:	75 23                	jne    c001aff6 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001afd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afd7:	8b 10                	mov    edx,DWORD PTR [eax]
c001afd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afdd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001afe0:	0f af c2             	imul   eax,edx
c001afe3:	85 c0                	test   eax,eax
c001afe5:	79 03                	jns    c001afea <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001afe7:	83 c0 03             	add    eax,0x3
c001afea:	c1 f8 02             	sar    eax,0x2
c001afed:	05 a0 0f 00 00       	add    eax,0xfa0
c001aff2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001affa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001affe:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001b001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b005:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001b00c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b010:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001b017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b01b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b01e:	c1 e0 02             	shl    eax,0x2
c001b021:	83 ec 0c             	sub    esp,0xc
c001b024:	50                   	push   eax
c001b025:	e8 f4 0b ff ff       	call   c000bc1e <malloc>
c001b02a:	83 c4 10             	add    esp,0x10
c001b02d:	89 c2                	mov    edx,eax
c001b02f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b033:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b036:	83 ec 04             	sub    esp,0x4
c001b039:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b03d:	50                   	push   eax
c001b03e:	6a 01                	push   0x1
c001b040:	6a 04                	push   0x4
c001b042:	e8 04 d8 fe ff       	call   c000884b <src_new>
c001b047:	83 c4 10             	add    esp,0x10
c001b04a:	89 c2                	mov    edx,eax
c001b04c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b050:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b053:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b057:	85 c0                	test   eax,eax
c001b059:	74 10                	je     c001b06b <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001b05b:	83 ec 0c             	sub    esp,0xc
c001b05e:	68 ac 23 02 c0       	push   0xc00223ac
c001b063:	e8 18 9c ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001b068:	83 c4 10             	add    esp,0x10
c001b06b:	90                   	nop
c001b06c:	83 c4 1c             	add    esp,0x1c
c001b06f:	c3                   	ret    

c001b070 <SoundChannel::play()>:
c001b070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b074:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001b078:	c3                   	ret    
c001b079:	90                   	nop

c001b07a <SoundChannel::paused()>:
c001b07a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b07e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001b081:	c3                   	ret    

c001b082 <SoundChannel::getSampleRate()>:
c001b082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b086:	8b 00                	mov    eax,DWORD PTR [eax]
c001b088:	c3                   	ret    
c001b089:	90                   	nop

c001b08a <SoundChannel::getBits()>:
c001b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b08e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b091:	c3                   	ret    

c001b092 <SoundChannel::getBufferUsed()>:
c001b092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b096:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b099:	c3                   	ret    

c001b09a <SoundChannel::getBufferSize()>:
c001b09a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b09e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0a1:	c3                   	ret    

c001b0a2 <SoundChannel::unbuffer(float*, int, int)>:
c001b0a2:	53                   	push   ebx
c001b0a3:	83 ec 40             	sub    esp,0x40
c001b0a6:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001b0aa:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b0b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0b5:	db 03                	fild   DWORD PTR [ebx]
c001b0b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0bb:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001b0bf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b0c2:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001b0c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b0c9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001b0cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b0d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b0d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b0d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0dd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b0e1:	50                   	push   eax
c001b0e2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001b0e5:	e8 1b d4 fe ff       	call   c0008505 <src_process>
c001b0ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b0ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001b0f1:	83 c4 0c             	add    esp,0xc
c001b0f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b0f7:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001b0fa:	29 d0                	sub    eax,edx
c001b0fc:	c1 e0 02             	shl    eax,0x2
c001b0ff:	50                   	push   eax
c001b100:	8d 04 91             	lea    eax,[ecx+edx*4]
c001b103:	50                   	push   eax
c001b104:	51                   	push   ecx
c001b105:	e8 90 54 fe ff       	call   c000059a <memmove>
c001b10a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b10e:	83 c4 48             	add    esp,0x48
c001b111:	5b                   	pop    ebx
c001b112:	c3                   	ret    
c001b113:	90                   	nop

c001b114 <SoundChannel::buffer8(unsigned char*, int)>:
c001b114:	53                   	push   ebx
c001b115:	31 c0                	xor    eax,eax
c001b117:	83 ec 08             	sub    esp,0x8
c001b11a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b11e:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001b121:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001b124:	74 35                	je     c001b15b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b126:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001b12a:	7d 2f                	jge    c001b15b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b12c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b130:	d9 05 c8 23 02 c0    	fld    DWORD PTR ds:0xc00223c8
c001b136:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001b13a:	40                   	inc    eax
c001b13b:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001b140:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001b143:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001b147:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b14a:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001b14d:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001b150:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001b153:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b156:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001b159:	eb c9                	jmp    c001b124 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001b15b:	83 c4 08             	add    esp,0x8
c001b15e:	5b                   	pop    ebx
c001b15f:	c3                   	ret    

c001b160 <SoundDevice::SoundDevice(char const*)>:
c001b160:	83 ec 1c             	sub    esp,0x1c
c001b163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b167:	83 ec 08             	sub    esp,0x8
c001b16a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b16e:	50                   	push   eax
c001b16f:	e8 72 54 ff ff       	call   c00105e6 <Device::Device(char const*)>
c001b174:	83 c4 10             	add    esp,0x10
c001b177:	ba d4 23 02 c0       	mov    edx,0xc00223d4
c001b17c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b180:	89 10                	mov    DWORD PTR [eax],edx
c001b182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b186:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b194:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b19e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1a6:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b1ab:	7f 19                	jg     c001b1c6 <SoundDevice::SoundDevice(char const*)+0x66>
c001b1ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1b5:	83 c2 54             	add    edx,0x54
c001b1b8:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b1c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b1c4:	eb e0                	jmp    c001b1a6 <SoundDevice::SoundDevice(char const*)+0x46>
c001b1c6:	90                   	nop
c001b1c7:	83 c4 1c             	add    esp,0x1c
c001b1ca:	c3                   	ret    
c001b1cb:	90                   	nop

c001b1cc <SoundDevice::~SoundDevice()>:
c001b1cc:	53                   	push   ebx
c001b1cd:	83 ec 18             	sub    esp,0x18
c001b1d0:	ba d4 23 02 c0       	mov    edx,0xc00223d4
c001b1d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1d9:	89 10                	mov    DWORD PTR [eax],edx
c001b1db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1e3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b1e8:	7f 46                	jg     c001b230 <SoundDevice::~SoundDevice()+0x64>
c001b1ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1f2:	83 c2 54             	add    edx,0x54
c001b1f5:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001b1f9:	85 c0                	test   eax,eax
c001b1fb:	74 2d                	je     c001b22a <SoundDevice::~SoundDevice()+0x5e>
c001b1fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b201:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b205:	83 c2 54             	add    edx,0x54
c001b208:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001b20c:	85 db                	test   ebx,ebx
c001b20e:	74 1a                	je     c001b22a <SoundDevice::~SoundDevice()+0x5e>
c001b210:	83 ec 0c             	sub    esp,0xc
c001b213:	53                   	push   ebx
c001b214:	e8 03 fd ff ff       	call   c001af1c <SoundChannel::~SoundChannel()>
c001b219:	83 c4 10             	add    esp,0x10
c001b21c:	83 ec 08             	sub    esp,0x8
c001b21f:	6a 2c                	push   0x2c
c001b221:	53                   	push   ebx
c001b222:	e8 e4 3c ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001b227:	83 c4 10             	add    esp,0x10
c001b22a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b22e:	eb b3                	jmp    c001b1e3 <SoundDevice::~SoundDevice()+0x17>
c001b230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b234:	83 ec 0c             	sub    esp,0xc
c001b237:	50                   	push   eax
c001b238:	e8 5b 50 ff ff       	call   c0010298 <Device::~Device()>
c001b23d:	83 c4 10             	add    esp,0x10
c001b240:	90                   	nop
c001b241:	83 c4 18             	add    esp,0x18
c001b244:	5b                   	pop    ebx
c001b245:	c3                   	ret    

c001b246 <SoundDevice::~SoundDevice()>:
c001b246:	83 ec 0c             	sub    esp,0xc
c001b249:	83 ec 0c             	sub    esp,0xc
c001b24c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b250:	e8 77 ff ff ff       	call   c001b1cc <SoundDevice::~SoundDevice()>
c001b255:	83 c4 10             	add    esp,0x10
c001b258:	83 ec 08             	sub    esp,0x8
c001b25b:	68 e4 01 00 00       	push   0x1e4
c001b260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b264:	e8 a2 3c ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001b269:	83 c4 10             	add    esp,0x10
c001b26c:	83 c4 0c             	add    esp,0xc
c001b26f:	c3                   	ret    

c001b270 <SoundDevice::getFreeChannelNum()>:
c001b270:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b274:	31 c0                	xor    eax,eax
c001b276:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001b27e:	74 09                	je     c001b289 <SoundDevice::getFreeChannelNum()+0x19>
c001b280:	40                   	inc    eax
c001b281:	83 f8 20             	cmp    eax,0x20
c001b284:	75 f0                	jne    c001b276 <SoundDevice::getFreeChannelNum()+0x6>
c001b286:	83 c8 ff             	or     eax,0xffffffff
c001b289:	c3                   	ret    

c001b28a <SoundDevice::addChannel(SoundChannel*)>:
c001b28a:	56                   	push   esi
c001b28b:	53                   	push   ebx
c001b28c:	51                   	push   ecx
c001b28d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b291:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b295:	53                   	push   ebx
c001b296:	e8 d5 ff ff ff       	call   c001b270 <SoundDevice::getFreeChannelNum()>
c001b29b:	5a                   	pop    edx
c001b29c:	83 f8 ff             	cmp    eax,0xffffffff
c001b29f:	74 51                	je     c001b2f2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b2a1:	85 f6                	test   esi,esi
c001b2a3:	74 4d                	je     c001b2f2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b2a5:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001b2ac:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001b2b3:	75 30                	jne    c001b2e5 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001b2b5:	83 ec 0c             	sub    esp,0xc
c001b2b8:	56                   	push   esi
c001b2b9:	e8 c4 fd ff ff       	call   c001b082 <SoundChannel::getSampleRate()>
c001b2be:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001b2c4:	89 34 24             	mov    DWORD PTR [esp],esi
c001b2c7:	e8 be fd ff ff       	call   c001b08a <SoundChannel::getBits()>
c001b2cc:	83 c4 0c             	add    esp,0xc
c001b2cf:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001b2d5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2d7:	50                   	push   eax
c001b2d8:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001b2de:	53                   	push   ebx
c001b2df:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001b2e2:	83 c4 10             	add    esp,0x10
c001b2e5:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001b2eb:	b8 01 00 00 00       	mov    eax,0x1
c001b2f0:	eb 03                	jmp    c001b2f5 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001b2f2:	83 c8 ff             	or     eax,0xffffffff
c001b2f5:	5a                   	pop    edx
c001b2f6:	5b                   	pop    ebx
c001b2f7:	5e                   	pop    esi
c001b2f8:	c3                   	ret    
c001b2f9:	90                   	nop

c001b2fa <SoundDevice::removeChannel(int)>:
c001b2fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b302:	83 fa 1f             	cmp    edx,0x1f
c001b305:	77 23                	ja     c001b32a <SoundDevice::removeChannel(int)+0x30>
c001b307:	8d 14 90             	lea    edx,[eax+edx*4]
c001b30a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001b311:	74 17                	je     c001b32a <SoundDevice::removeChannel(int)+0x30>
c001b313:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001b31d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001b323:	75 05                	jne    c001b32a <SoundDevice::removeChannel(int)+0x30>
c001b325:	8b 00                	mov    eax,DWORD PTR [eax]
c001b327:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001b32a:	c3                   	ret    
c001b32b:	90                   	nop

c001b32c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001b32c:	56                   	push   esi
c001b32d:	53                   	push   ebx
c001b32e:	31 db                	xor    ebx,ebx
c001b330:	83 ec 14             	sub    esp,0x14
c001b333:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b337:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001b33b:	7d 55                	jge    c001b392 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001b33d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b341:	d9 e8                	fld1   
c001b343:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001b346:	d8 0d 04 24 02 c0    	fmul   DWORD PTR ds:0xc0022404
c001b34c:	d8 0d 08 24 02 c0    	fmul   DWORD PTR ds:0xc0022408
c001b352:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001b356:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b35a:	d8 15 0c 24 02 c0    	fcom   DWORD PTR ds:0xc002240c
c001b360:	df e0                	fnstsw ax
c001b362:	9e                   	sahf   
c001b363:	72 08                	jb     c001b36d <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001b365:	dd d8                	fstp   st(0)
c001b367:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001b36b:	eb 22                	jmp    c001b38f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b36d:	d9 ee                	fldz   
c001b36f:	d8 d9                	fcomp  st(1)
c001b371:	df e0                	fnstsw ax
c001b373:	9e                   	sahf   
c001b374:	72 08                	jb     c001b37e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001b376:	dd d8                	fstp   st(0)
c001b378:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001b37c:	eb 11                	jmp    c001b38f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b37e:	83 ec 10             	sub    esp,0x10
c001b381:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b384:	e8 13 36 00 00       	call   c001e99c <lrintf>
c001b389:	83 c4 10             	add    esp,0x10
c001b38c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001b38f:	43                   	inc    ebx
c001b390:	eb a5                	jmp    c001b337 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001b392:	83 c4 14             	add    esp,0x14
c001b395:	5b                   	pop    ebx
c001b396:	5e                   	pop    esi
c001b397:	c3                   	ret    

c001b398 <SoundDevice::getAudio(int, float*, float*)>:
c001b398:	55                   	push   ebp
c001b399:	57                   	push   edi
c001b39a:	56                   	push   esi
c001b39b:	53                   	push   ebx
c001b39c:	31 db                	xor    ebx,ebx
c001b39e:	83 ec 20             	sub    esp,0x20
c001b3a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b3a5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b3a9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b3ad:	c1 e0 02             	shl    eax,0x2
c001b3b0:	50                   	push   eax
c001b3b1:	6a 00                	push   0x0
c001b3b3:	55                   	push   ebp
c001b3b4:	e8 4f 52 fe ff       	call   c0000608 <memset>
c001b3b9:	83 c4 10             	add    esp,0x10
c001b3bc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b3c0:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001b3c7:	85 c0                	test   eax,eax
c001b3c9:	0f 84 94 00 00 00    	je     c001b463 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b3cf:	83 ec 0c             	sub    esp,0xc
c001b3d2:	50                   	push   eax
c001b3d3:	e8 a2 fc ff ff       	call   c001b07a <SoundChannel::paused()>
c001b3d8:	83 c4 10             	add    esp,0x10
c001b3db:	84 c0                	test   al,al
c001b3dd:	0f 85 80 00 00 00    	jne    c001b463 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b3e3:	83 ec 0c             	sub    esp,0xc
c001b3e6:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b3ed:	e8 76 fb ff ff       	call   c001af68 <SoundChannel::getVolume()>
c001b3f2:	83 c4 10             	add    esp,0x10
c001b3f5:	85 c0                	test   eax,eax
c001b3f7:	74 6a                	je     c001b463 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b3f9:	83 ec 0c             	sub    esp,0xc
c001b3fc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b403:	e8 60 fb ff ff       	call   c001af68 <SoundChannel::getVolume()>
c001b408:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b40c:	d9 05 10 24 02 c0    	fld    DWORD PTR ds:0xc0022410
c001b412:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b416:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b41a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b41e:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b424:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b428:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b42f:	e8 6e fc ff ff       	call   c001b0a2 <SoundChannel::unbuffer(float*, int, int)>
c001b434:	83 c4 20             	add    esp,0x20
c001b437:	31 d2                	xor    edx,edx
c001b439:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b43d:	39 c2                	cmp    edx,eax
c001b43f:	7d 1a                	jge    c001b45b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b441:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b445:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001b448:	d8 c9                	fmul   st,st(1)
c001b44a:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001b450:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001b454:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001b458:	42                   	inc    edx
c001b459:	eb e2                	jmp    c001b43d <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001b45b:	dd d8                	fstp   st(0)
c001b45d:	39 c7                	cmp    edi,eax
c001b45f:	7e 02                	jle    c001b463 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b461:	89 c7                	mov    edi,eax
c001b463:	43                   	inc    ebx
c001b464:	83 fb 20             	cmp    ebx,0x20
c001b467:	0f 85 53 ff ff ff    	jne    c001b3c0 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001b46d:	83 c4 1c             	add    esp,0x1c
c001b470:	89 f8                	mov    eax,edi
c001b472:	5b                   	pop    ebx
c001b473:	5e                   	pop    esi
c001b474:	5f                   	pop    edi
c001b475:	5d                   	pop    ebp
c001b476:	c3                   	ret    
c001b477:	90                   	nop

c001b478 <PCI::open(int, int, void*)>:
c001b478:	83 ec 18             	sub    esp,0x18
c001b47b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b47f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b481:	50                   	push   eax
c001b482:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b485:	31 c0                	xor    eax,eax
c001b487:	83 c4 1c             	add    esp,0x1c
c001b48a:	c3                   	ret    
c001b48b:	90                   	nop

c001b48c <PCI::close(int, int, void*)>:
c001b48c:	31 c0                	xor    eax,eax
c001b48e:	c3                   	ret    
c001b48f:	90                   	nop

c001b490 <PCI::PCI()>:
c001b490:	83 ec 0c             	sub    esp,0xc
c001b493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b497:	83 ec 08             	sub    esp,0x8
c001b49a:	68 14 24 02 c0       	push   0xc0022414
c001b49f:	50                   	push   eax
c001b4a0:	e8 cd 47 ff ff       	call   c000fc72 <Bus::Bus(char const*)>
c001b4a5:	83 c4 10             	add    esp,0x10
c001b4a8:	ba c0 24 02 c0       	mov    edx,0xc00224c0
c001b4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4b1:	89 10                	mov    DWORD PTR [eax],edx
c001b4b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b4bd:	0f b6 d0             	movzx  edx,al
c001b4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4c4:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b4d5:	0f b6 d0             	movzx  edx,al
c001b4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4dc:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b4eb:	8d 50 01             	lea    edx,[eax+0x1]
c001b4ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b4f2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b4f8:	0f b6 d0             	movzx  edx,al
c001b4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4ff:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b503:	83 c9 c0             	or     ecx,0xffffffc0
c001b506:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b50a:	90                   	nop
c001b50b:	83 c4 0c             	add    esp,0xc
c001b50e:	c3                   	ret    
c001b50f:	90                   	nop

c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b510:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b514:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b519:	89 ca                	mov    edx,ecx
c001b51b:	c1 e0 10             	shl    eax,0x10
c001b51e:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b524:	09 d0                	or     eax,edx
c001b526:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b52b:	c1 e2 08             	shl    edx,0x8
c001b52e:	09 d0                	or     eax,edx
c001b530:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b535:	c1 e2 0b             	shl    edx,0xb
c001b538:	09 d0                	or     eax,edx
c001b53a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b53f:	0d 00 00 00 80       	or     eax,0x80000000
c001b544:	ef                   	out    dx,eax
c001b545:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b54a:	ed                   	in     eax,dx
c001b54b:	83 e1 02             	and    ecx,0x2
c001b54e:	0f b6 c9             	movzx  ecx,cl
c001b551:	c1 e1 03             	shl    ecx,0x3
c001b554:	d3 e8                	shr    eax,cl
c001b556:	c3                   	ret    
c001b557:	90                   	nop

c001b558 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b558:	6a 00                	push   0x0
c001b55a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b55f:	50                   	push   eax
c001b560:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b565:	50                   	push   eax
c001b566:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b56b:	50                   	push   eax
c001b56c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b570:	e8 9b ff ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b575:	83 c4 14             	add    esp,0x14
c001b578:	c3                   	ret    
c001b579:	90                   	nop

c001b57a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b57a:	6a 0e                	push   0xe
c001b57c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b581:	50                   	push   eax
c001b582:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b587:	50                   	push   eax
c001b588:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b58d:	50                   	push   eax
c001b58e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b592:	e8 79 ff ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b597:	83 c4 14             	add    esp,0x14
c001b59a:	0f b6 c0             	movzx  eax,al
c001b59d:	c3                   	ret    

c001b59e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b59e:	55                   	push   ebp
c001b59f:	57                   	push   edi
c001b5a0:	56                   	push   esi
c001b5a1:	53                   	push   ebx
c001b5a2:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b5a7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b5ac:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b5b1:	6a 0a                	push   0xa
c001b5b3:	56                   	push   esi
c001b5b4:	55                   	push   ebp
c001b5b5:	57                   	push   edi
c001b5b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b5ba:	e8 51 ff ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5bf:	6a 0a                	push   0xa
c001b5c1:	89 c3                	mov    ebx,eax
c001b5c3:	56                   	push   esi
c001b5c4:	0f b6 db             	movzx  ebx,bl
c001b5c7:	55                   	push   ebp
c001b5c8:	57                   	push   edi
c001b5c9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b5cd:	e8 3e ff ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d2:	83 c4 28             	add    esp,0x28
c001b5d5:	25 00 ff 00 00       	and    eax,0xff00
c001b5da:	09 d8                	or     eax,ebx
c001b5dc:	5b                   	pop    ebx
c001b5dd:	5e                   	pop    esi
c001b5de:	5f                   	pop    edi
c001b5df:	5d                   	pop    ebp
c001b5e0:	c3                   	ret    
c001b5e1:	90                   	nop

c001b5e2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b5e2:	6a 08                	push   0x8
c001b5e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5e9:	50                   	push   eax
c001b5ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5ef:	50                   	push   eax
c001b5f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5f5:	50                   	push   eax
c001b5f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5fa:	e8 11 ff ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5ff:	83 c4 14             	add    esp,0x14
c001b602:	0f b6 c4             	movzx  eax,ah
c001b605:	c3                   	ret    

c001b606 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b606:	6a 08                	push   0x8
c001b608:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b60d:	50                   	push   eax
c001b60e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b613:	50                   	push   eax
c001b614:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b619:	50                   	push   eax
c001b61a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b61e:	e8 ed fe ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b623:	83 c4 14             	add    esp,0x14
c001b626:	c3                   	ret    
c001b627:	90                   	nop

c001b628 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b628:	6a 3c                	push   0x3c
c001b62a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b62f:	50                   	push   eax
c001b630:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b635:	50                   	push   eax
c001b636:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b63b:	50                   	push   eax
c001b63c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b640:	e8 cb fe ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b645:	83 c4 14             	add    esp,0x14
c001b648:	c3                   	ret    
c001b649:	90                   	nop

c001b64a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b64a:	6a 18                	push   0x18
c001b64c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b651:	50                   	push   eax
c001b652:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b657:	50                   	push   eax
c001b658:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b65d:	50                   	push   eax
c001b65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b662:	e8 a9 fe ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b667:	83 c4 14             	add    esp,0x14
c001b66a:	0f b6 c4             	movzx  eax,ah
c001b66d:	c3                   	ret    

c001b66e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b66e:	55                   	push   ebp
c001b66f:	57                   	push   edi
c001b670:	56                   	push   esi
c001b671:	53                   	push   ebx
c001b672:	50                   	push   eax
c001b673:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b677:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b67c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b681:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b686:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b68d:	8d 43 12             	lea    eax,[ebx+0x12]
c001b690:	83 c3 10             	add    ebx,0x10
c001b693:	0f b6 c0             	movzx  eax,al
c001b696:	0f b6 db             	movzx  ebx,bl
c001b699:	50                   	push   eax
c001b69a:	51                   	push   ecx
c001b69b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b69f:	57                   	push   edi
c001b6a0:	55                   	push   ebp
c001b6a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b6a5:	e8 66 fe ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6aa:	53                   	push   ebx
c001b6ab:	89 c6                	mov    esi,eax
c001b6ad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b6b1:	c1 e6 10             	shl    esi,0x10
c001b6b4:	51                   	push   ecx
c001b6b5:	57                   	push   edi
c001b6b6:	55                   	push   ebp
c001b6b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b6bb:	e8 50 fe ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6c0:	83 c4 2c             	add    esp,0x2c
c001b6c3:	0f b7 c0             	movzx  eax,ax
c001b6c6:	5b                   	pop    ebx
c001b6c7:	09 f0                	or     eax,esi
c001b6c9:	5e                   	pop    esi
c001b6ca:	5f                   	pop    edi
c001b6cb:	5d                   	pop    ebp
c001b6cc:	c3                   	ret    
c001b6cd:	90                   	nop

c001b6ce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b6ce:	53                   	push   ebx
c001b6cf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6d4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b6d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6dd:	c1 e1 10             	shl    ecx,0x10
c001b6e0:	25 fc 00 00 00       	and    eax,0xfc
c001b6e5:	09 c1                	or     ecx,eax
c001b6e7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b6ec:	c1 e0 08             	shl    eax,0x8
c001b6ef:	09 c1                	or     ecx,eax
c001b6f1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b6f6:	c1 e0 0b             	shl    eax,0xb
c001b6f9:	09 c1                	or     ecx,eax
c001b6fb:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b701:	89 c8                	mov    eax,ecx
c001b703:	ef                   	out    dx,eax
c001b704:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b709:	ed                   	in     eax,dx
c001b70a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b70f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b714:	74 0a                	je     c001b720 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b716:	0f b7 d8             	movzx  ebx,ax
c001b719:	89 d0                	mov    eax,edx
c001b71b:	c1 e0 10             	shl    eax,0x10
c001b71e:	eb 05                	jmp    c001b725 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b720:	66 31 c0             	xor    ax,ax
c001b723:	89 d3                	mov    ebx,edx
c001b725:	09 c3                	or     ebx,eax
c001b727:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b72c:	89 c8                	mov    eax,ecx
c001b72e:	ef                   	out    dx,eax
c001b72f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b734:	89 d8                	mov    eax,ebx
c001b736:	ef                   	out    dx,eax
c001b737:	5b                   	pop    ebx
c001b738:	c3                   	ret    
c001b739:	90                   	nop

c001b73a <PCI::checkBus(unsigned char)>:
c001b73a:	56                   	push   esi
c001b73b:	53                   	push   ebx
c001b73c:	31 db                	xor    ebx,ebx
c001b73e:	51                   	push   ecx
c001b73f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b744:	52                   	push   edx
c001b745:	53                   	push   ebx
c001b746:	43                   	inc    ebx
c001b747:	56                   	push   esi
c001b748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b74c:	e8 4d 03 00 00       	call   c001ba9e <PCI::checkDevice(unsigned char, unsigned char)>
c001b751:	83 c4 10             	add    esp,0x10
c001b754:	83 fb 20             	cmp    ebx,0x20
c001b757:	75 eb                	jne    c001b744 <PCI::checkBus(unsigned char)+0xa>
c001b759:	58                   	pop    eax
c001b75a:	5b                   	pop    ebx
c001b75b:	5e                   	pop    esi
c001b75c:	c3                   	ret    
c001b75d:	90                   	nop

c001b75e <PCI::foundDevice(PCIDeviceInfo)>:
c001b75e:	55                   	push   ebp
c001b75f:	57                   	push   edi
c001b760:	56                   	push   esi
c001b761:	53                   	push   ebx
c001b762:	83 ec 1c             	sub    esp,0x1c
c001b765:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b769:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b76f:	0f 84 51 01 00 00    	je     c001b8c6 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b775:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b779:	66 81 f9 06 04       	cmp    cx,0x406
c001b77e:	75 2c                	jne    c001b7ac <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b780:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b785:	50                   	push   eax
c001b786:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b78b:	50                   	push   eax
c001b78c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b791:	50                   	push   eax
c001b792:	56                   	push   esi
c001b793:	e8 b2 fe ff ff       	call   c001b64a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b798:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b79c:	0f b6 c0             	movzx  eax,al
c001b79f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b7a3:	83 c4 2c             	add    esp,0x2c
c001b7a6:	5b                   	pop    ebx
c001b7a7:	5e                   	pop    esi
c001b7a8:	5f                   	pop    edi
c001b7a9:	5d                   	pop    ebp
c001b7aa:	eb 8e                	jmp    c001b73a <PCI::checkBus(unsigned char)>
c001b7ac:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b7b0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b7b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b7ba:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b7be:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b7c2:	88 d3                	mov    bl,dl
c001b7c4:	85 c0                	test   eax,eax
c001b7c6:	74 33                	je     c001b7fb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b7c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b7cb:	85 d2                	test   edx,edx
c001b7cd:	74 28                	je     c001b7f7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b7cf:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b7d5:	31 ef                	xor    edi,ebp
c001b7d7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b7dd:	75 18                	jne    c001b7f7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b7df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b7e3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b7e9:	75 0c                	jne    c001b7f7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b7eb:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b7f1:	0f 84 cf 00 00 00    	je     c001b8c6 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b7f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7f9:	eb c9                	jmp    c001b7c4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b7fb:	66 81 f9 01 06       	cmp    cx,0x601
c001b800:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b804:	75 18                	jne    c001b81e <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b806:	83 ec 0c             	sub    esp,0xc
c001b809:	68 58 01 00 00       	push   0x158
c001b80e:	e8 e9 36 ff ff       	call   c000eefc <operator new(unsigned long)>
c001b813:	59                   	pop    ecx
c001b814:	89 c5                	mov    ebp,eax
c001b816:	5f                   	pop    edi
c001b817:	68 1c 24 02 c0       	push   0xc002241c
c001b81c:	eb 7d                	jmp    c001b89b <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b81e:	66 81 f9 01 01       	cmp    cx,0x101
c001b823:	75 60                	jne    c001b885 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b825:	83 ec 0c             	sub    esp,0xc
c001b828:	68 70 02 00 00       	push   0x270
c001b82d:	e8 ca 36 ff ff       	call   c000eefc <operator new(unsigned long)>
c001b832:	89 04 24             	mov    DWORD PTR [esp],eax
c001b835:	89 c5                	mov    ebp,eax
c001b837:	e8 26 03 00 00       	call   c001bb62 <IDE::IDE()>
c001b83c:	58                   	pop    eax
c001b83d:	5a                   	pop    edx
c001b83e:	55                   	push   ebp
c001b83f:	56                   	push   esi
c001b840:	e8 b1 4b ff ff       	call   c00103f6 <Device::addChild(Device*)>
c001b845:	83 ec 1c             	sub    esp,0x1c
c001b848:	b9 09 00 00 00       	mov    ecx,0x9
c001b84d:	fc                   	cld    
c001b84e:	89 e7                	mov    edi,esp
c001b850:	89 de                	mov    esi,ebx
c001b852:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b854:	55                   	push   ebp
c001b855:	e8 76 4a ff ff       	call   c00102d0 <Device::preOpenPCI(PCIDeviceInfo)>
c001b85a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b85d:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b861:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b869:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b871:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b879:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b87c:	83 c4 4c             	add    esp,0x4c
c001b87f:	5b                   	pop    ebx
c001b880:	5e                   	pop    esi
c001b881:	5f                   	pop    edi
c001b882:	5d                   	pop    ebp
c001b883:	ff e0                	jmp    eax
c001b885:	83 ec 0c             	sub    esp,0xc
c001b888:	68 58 01 00 00       	push   0x158
c001b88d:	e8 6a 36 ff ff       	call   c000eefc <operator new(unsigned long)>
c001b892:	59                   	pop    ecx
c001b893:	89 c5                	mov    ebp,eax
c001b895:	5f                   	pop    edi
c001b896:	68 3b 24 02 c0       	push   0xc002243b
c001b89b:	55                   	push   ebp
c001b89c:	e8 41 4e ff ff       	call   c00106e2 <DriverlessDevice::DriverlessDevice(char const*)>
c001b8a1:	58                   	pop    eax
c001b8a2:	5a                   	pop    edx
c001b8a3:	55                   	push   ebp
c001b8a4:	56                   	push   esi
c001b8a5:	e8 4c 4b ff ff       	call   c00103f6 <Device::addChild(Device*)>
c001b8aa:	b9 09 00 00 00       	mov    ecx,0x9
c001b8af:	fc                   	cld    
c001b8b0:	89 df                	mov    edi,ebx
c001b8b2:	89 de                	mov    esi,ebx
c001b8b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b8b6:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b8ba:	83 c4 2c             	add    esp,0x2c
c001b8bd:	5b                   	pop    ebx
c001b8be:	5e                   	pop    esi
c001b8bf:	5f                   	pop    edi
c001b8c0:	5d                   	pop    ebp
c001b8c1:	e9 0a 4a ff ff       	jmp    c00102d0 <Device::preOpenPCI(PCIDeviceInfo)>
c001b8c6:	83 c4 1c             	add    esp,0x1c
c001b8c9:	5b                   	pop    ebx
c001b8ca:	5e                   	pop    esi
c001b8cb:	5f                   	pop    edi
c001b8cc:	5d                   	pop    ebp
c001b8cd:	c3                   	ret    

c001b8ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b8ce:	55                   	push   ebp
c001b8cf:	57                   	push   edi
c001b8d0:	56                   	push   esi
c001b8d1:	53                   	push   ebx
c001b8d2:	83 ec 5c             	sub    esp,0x5c
c001b8d5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b8d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b8dd:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b8e1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b8e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b8ea:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b8ee:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b8f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b8f7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b8fc:	6a 0c                	push   0xc
c001b8fe:	55                   	push   ebp
c001b8ff:	53                   	push   ebx
c001b900:	57                   	push   edi
c001b901:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b908:	e8 03 fc ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b90d:	83 c4 0c             	add    esp,0xc
c001b910:	6a 00                	push   0x0
c001b912:	68 55 24 02 c0       	push   0xc0022455
c001b917:	e8 cf 36 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001b91c:	55                   	push   ebp
c001b91d:	53                   	push   ebx
c001b91e:	57                   	push   edi
c001b91f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b926:	e8 73 fc ff ff       	call   c001b59e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b92b:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b930:	83 c4 20             	add    esp,0x20
c001b933:	55                   	push   ebp
c001b934:	53                   	push   ebx
c001b935:	57                   	push   edi
c001b936:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b93a:	e8 e9 fc ff ff       	call   c001b628 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b93f:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b946:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b94a:	55                   	push   ebp
c001b94b:	53                   	push   ebx
c001b94c:	57                   	push   edi
c001b94d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b954:	e8 b7 fb ff ff       	call   c001b510 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b959:	0f b6 c4             	movzx  eax,ah
c001b95c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b960:	83 c4 18             	add    esp,0x18
c001b963:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b967:	68 69 24 02 c0       	push   0xc0022469
c001b96c:	e8 7a 36 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001b971:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b975:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b979:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c001b97e:	83 c4 10             	add    esp,0x10
c001b981:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b987:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b98e:	74 6c                	je     c001b9fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b990:	31 f6                	xor    esi,esi
c001b992:	8b 15 28 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023728
c001b998:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b99e:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b9a4:	7e 56                	jle    c001b9fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b9a6:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b9a9:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b9b0:	39 cb                	cmp    ebx,ecx
c001b9b2:	75 45                	jne    c001b9f9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b9b4:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b9bb:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b9bf:	75 38                	jne    c001b9f9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b9c1:	83 ec 0c             	sub    esp,0xc
c001b9c4:	68 78 24 02 c0       	push   0xc0022478
c001b9c9:	e8 1d 36 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001b9ce:	8b 15 28 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023728
c001b9d4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b9da:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b9e2:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b9e6:	52                   	push   edx
c001b9e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9eb:	53                   	push   ebx
c001b9ec:	68 9d 24 02 c0       	push   0xc002249d
c001b9f1:	e8 f5 35 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001b9f6:	83 c4 20             	add    esp,0x20
c001b9f9:	46                   	inc    esi
c001b9fa:	eb 96                	jmp    c001b992 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b9fc:	31 d2                	xor    edx,edx
c001b9fe:	83 ec 0c             	sub    esp,0xc
c001ba01:	55                   	push   ebp
c001ba02:	53                   	push   ebx
c001ba03:	57                   	push   edi
c001ba04:	52                   	push   edx
c001ba05:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ba09:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001ba10:	e8 59 fc ff ff       	call   c001b66e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba15:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001ba19:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba1d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ba21:	42                   	inc    edx
c001ba22:	83 c4 20             	add    esp,0x20
c001ba25:	83 fa 06             	cmp    edx,0x6
c001ba28:	75 d4                	jne    c001b9fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001ba2a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ba2e:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001ba32:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001ba36:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001ba3a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ba3e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ba42:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ba47:	86 e0                	xchg   al,ah
c001ba49:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001ba4e:	55                   	push   ebp
c001ba4f:	53                   	push   ebx
c001ba50:	57                   	push   edi
c001ba51:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001ba55:	e8 88 fb ff ff       	call   c001b5e2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ba5a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ba5e:	55                   	push   ebp
c001ba5f:	53                   	push   ebx
c001ba60:	57                   	push   edi
c001ba61:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001ba68:	e8 eb fa ff ff       	call   c001b558 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ba6d:	83 ec 0c             	sub    esp,0xc
c001ba70:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001ba75:	b9 09 00 00 00       	mov    ecx,0x9
c001ba7a:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001ba7e:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001ba82:	fc                   	cld    
c001ba83:	89 e7                	mov    edi,esp
c001ba85:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba87:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001ba8e:	e8 cb fc ff ff       	call   c001b75e <PCI::foundDevice(PCIDeviceInfo)>
c001ba93:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ba99:	5b                   	pop    ebx
c001ba9a:	5e                   	pop    esi
c001ba9b:	5f                   	pop    edi
c001ba9c:	5d                   	pop    ebp
c001ba9d:	c3                   	ret    

c001ba9e <PCI::checkDevice(unsigned char, unsigned char)>:
c001ba9e:	55                   	push   ebp
c001ba9f:	57                   	push   edi
c001baa0:	56                   	push   esi
c001baa1:	53                   	push   ebx
c001baa2:	83 ec 0c             	sub    esp,0xc
c001baa5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001baa9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001baae:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bab3:	6a 00                	push   0x0
c001bab5:	56                   	push   esi
c001bab6:	57                   	push   edi
c001bab7:	55                   	push   ebp
c001bab8:	e8 9b fa ff ff       	call   c001b558 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001babd:	6a 00                	push   0x0
c001babf:	56                   	push   esi
c001bac0:	57                   	push   edi
c001bac1:	55                   	push   ebp
c001bac2:	e8 07 fe ff ff       	call   c001b8ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bac7:	83 c4 20             	add    esp,0x20
c001baca:	6a 00                	push   0x0
c001bacc:	56                   	push   esi
c001bacd:	57                   	push   edi
c001bace:	55                   	push   ebp
c001bacf:	e8 a6 fa ff ff       	call   c001b57a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bad4:	83 c4 10             	add    esp,0x10
c001bad7:	84 c0                	test   al,al
c001bad9:	79 27                	jns    c001bb02 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001badb:	bb 01 00 00 00       	mov    ebx,0x1
c001bae0:	53                   	push   ebx
c001bae1:	56                   	push   esi
c001bae2:	57                   	push   edi
c001bae3:	55                   	push   ebp
c001bae4:	e8 6f fa ff ff       	call   c001b558 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bae9:	83 c4 10             	add    esp,0x10
c001baec:	66 40                	inc    ax
c001baee:	74 0c                	je     c001bafc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001baf0:	53                   	push   ebx
c001baf1:	56                   	push   esi
c001baf2:	57                   	push   edi
c001baf3:	55                   	push   ebp
c001baf4:	e8 d5 fd ff ff       	call   c001b8ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001baf9:	83 c4 10             	add    esp,0x10
c001bafc:	43                   	inc    ebx
c001bafd:	83 fb 08             	cmp    ebx,0x8
c001bb00:	75 de                	jne    c001bae0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bb02:	83 c4 0c             	add    esp,0xc
c001bb05:	5b                   	pop    ebx
c001bb06:	5e                   	pop    esi
c001bb07:	5f                   	pop    edi
c001bb08:	5d                   	pop    ebp
c001bb09:	c3                   	ret    

c001bb0a <PCI::detect()>:
c001bb0a:	56                   	push   esi
c001bb0b:	53                   	push   ebx
c001bb0c:	53                   	push   ebx
c001bb0d:	31 db                	xor    ebx,ebx
c001bb0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb13:	6a 00                	push   0x0
c001bb15:	6a 00                	push   0x0
c001bb17:	6a 00                	push   0x0
c001bb19:	56                   	push   esi
c001bb1a:	e8 5b fa ff ff       	call   c001b57a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bb1f:	83 c4 10             	add    esp,0x10
c001bb22:	a8 80                	test   al,0x80
c001bb24:	75 21                	jne    c001bb47 <PCI::detect()+0x3d>
c001bb26:	51                   	push   ecx
c001bb27:	51                   	push   ecx
c001bb28:	6a 00                	push   0x0
c001bb2a:	56                   	push   esi
c001bb2b:	e8 0a fc ff ff       	call   c001b73a <PCI::checkBus(unsigned char)>
c001bb30:	83 c4 10             	add    esp,0x10
c001bb33:	eb 24                	jmp    c001bb59 <PCI::detect()+0x4f>
c001bb35:	52                   	push   edx
c001bb36:	52                   	push   edx
c001bb37:	53                   	push   ebx
c001bb38:	43                   	inc    ebx
c001bb39:	56                   	push   esi
c001bb3a:	e8 fb fb ff ff       	call   c001b73a <PCI::checkBus(unsigned char)>
c001bb3f:	83 c4 10             	add    esp,0x10
c001bb42:	83 fb 08             	cmp    ebx,0x8
c001bb45:	74 12                	je     c001bb59 <PCI::detect()+0x4f>
c001bb47:	53                   	push   ebx
c001bb48:	6a 00                	push   0x0
c001bb4a:	6a 00                	push   0x0
c001bb4c:	56                   	push   esi
c001bb4d:	e8 06 fa ff ff       	call   c001b558 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb52:	83 c4 10             	add    esp,0x10
c001bb55:	66 40                	inc    ax
c001bb57:	74 dc                	je     c001bb35 <PCI::detect()+0x2b>
c001bb59:	58                   	pop    eax
c001bb5a:	5b                   	pop    ebx
c001bb5b:	5e                   	pop    esi
c001bb5c:	c3                   	ret    
c001bb5d:	90                   	nop

c001bb5e <IDE::close(int, int, void*)>:
c001bb5e:	83 c8 ff             	or     eax,0xffffffff
c001bb61:	c3                   	ret    

c001bb62 <IDE::IDE()>:
c001bb62:	83 ec 0c             	sub    esp,0xc
c001bb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb69:	83 ec 08             	sub    esp,0x8
c001bb6c:	68 e4 24 02 c0       	push   0xc00224e4
c001bb71:	50                   	push   eax
c001bb72:	e8 01 4c ff ff       	call   c0010778 <HardDiskController::HardDiskController(char const*)>
c001bb77:	83 c4 10             	add    esp,0x10
c001bb7a:	ba 24 27 02 c0       	mov    edx,0xc0022724
c001bb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb83:	89 10                	mov    DWORD PTR [eax],edx
c001bb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb89:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bb90:	90                   	nop
c001bb91:	83 c4 0c             	add    esp,0xc
c001bb94:	c3                   	ret    
c001bb95:	90                   	nop

c001bb96 <IDE::prepareInterrupt(unsigned char)>:
c001bb96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb9b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb9f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bba7:	c3                   	ret    

c001bba8 <selectDrive(unsigned char, unsigned char)>:
c001bba8:	c3                   	ret    
c001bba9:	90                   	nop

c001bbaa <IDE::getBase(unsigned char)>:
c001bbaa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bbaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbb3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bbbb:	c3                   	ret    

c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bbbc:	55                   	push   ebp
c001bbbd:	57                   	push   edi
c001bbbe:	56                   	push   esi
c001bbbf:	53                   	push   ebx
c001bbc0:	83 ec 1c             	sub    esp,0x1c
c001bbc3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bbc7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbcb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bbce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bbd2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bbd6:	80 f9 03             	cmp    cl,0x3
c001bbd9:	77 51                	ja     c001bc2c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bbdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbdf:	0f b6 f2             	movzx  esi,dl
c001bbe2:	0f b6 db             	movzx  ebx,bl
c001bbe5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bbe8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bbec:	83 ca 80             	or     edx,0xffffff80
c001bbef:	0f b6 d2             	movzx  edx,dl
c001bbf2:	52                   	push   edx
c001bbf3:	6a 0c                	push   0xc
c001bbf5:	56                   	push   esi
c001bbf6:	57                   	push   edi
c001bbf7:	e8 c0 ff ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbfc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bc01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc05:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bc09:	ee                   	out    dx,al
c001bc0a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bc0f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bc13:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bc17:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc1b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc23:	83 c4 2c             	add    esp,0x2c
c001bc26:	5b                   	pop    ebx
c001bc27:	5e                   	pop    esi
c001bc28:	5f                   	pop    edi
c001bc29:	5d                   	pop    ebp
c001bc2a:	eb 90                	jmp    c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc2c:	80 fb 07             	cmp    bl,0x7
c001bc2f:	77 12                	ja     c001bc43 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bc31:	0f b6 d2             	movzx  edx,dl
c001bc34:	0f b6 db             	movzx  ebx,bl
c001bc37:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bc3f:	89 da                	mov    edx,ebx
c001bc41:	eb 2f                	jmp    c001bc72 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc43:	80 fb 0d             	cmp    bl,0xd
c001bc46:	77 13                	ja     c001bc5b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bc48:	0f b6 d2             	movzx  edx,dl
c001bc4b:	0f b6 db             	movzx  ebx,bl
c001bc4e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bc55:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bc59:	eb 17                	jmp    c001bc72 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc5b:	80 fb 15             	cmp    bl,0x15
c001bc5e:	77 13                	ja     c001bc73 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bc60:	0f b6 d2             	movzx  edx,dl
c001bc63:	0f b6 db             	movzx  ebx,bl
c001bc66:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bc6e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bc72:	ee                   	out    dx,al
c001bc73:	83 c4 1c             	add    esp,0x1c
c001bc76:	5b                   	pop    ebx
c001bc77:	5e                   	pop    esi
c001bc78:	5f                   	pop    edi
c001bc79:	5d                   	pop    ebp
c001bc7a:	c3                   	ret    
c001bc7b:	90                   	nop

c001bc7c <IDE::read(unsigned char, unsigned char)>:
c001bc7c:	55                   	push   ebp
c001bc7d:	57                   	push   edi
c001bc7e:	56                   	push   esi
c001bc7f:	53                   	push   ebx
c001bc80:	83 ec 1c             	sub    esp,0x1c
c001bc83:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc87:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc8b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bc8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc92:	3c 03                	cmp    al,0x3
c001bc94:	77 43                	ja     c001bcd9 <IDE::read(unsigned char, unsigned char)+0x5d>
c001bc96:	0f b6 f2             	movzx  esi,dl
c001bc99:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bc9c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bca0:	83 c8 80             	or     eax,0xffffff80
c001bca3:	0f b6 c0             	movzx  eax,al
c001bca6:	50                   	push   eax
c001bca7:	6a 0c                	push   0xc
c001bca9:	56                   	push   esi
c001bcaa:	57                   	push   edi
c001bcab:	e8 0c ff ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcb0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bcb5:	0f b6 c3             	movzx  eax,bl
c001bcb8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bcbc:	ec                   	in     al,dx
c001bcbd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bcc1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bcc6:	52                   	push   edx
c001bcc7:	6a 0c                	push   0xc
c001bcc9:	56                   	push   esi
c001bcca:	57                   	push   edi
c001bccb:	e8 ec fe ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcd0:	83 c4 20             	add    esp,0x20
c001bcd3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bcd7:	eb 49                	jmp    c001bd22 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bcd9:	80 fb 07             	cmp    bl,0x7
c001bcdc:	77 12                	ja     c001bcf0 <IDE::read(unsigned char, unsigned char)+0x74>
c001bcde:	0f b6 d2             	movzx  edx,dl
c001bce1:	0f b6 c3             	movzx  eax,bl
c001bce4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bcec:	89 c2                	mov    edx,eax
c001bcee:	eb 31                	jmp    c001bd21 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bcf0:	80 fb 0d             	cmp    bl,0xd
c001bcf3:	77 13                	ja     c001bd08 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bcf5:	0f b6 d2             	movzx  edx,dl
c001bcf8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bcff:	0f b6 d3             	movzx  edx,bl
c001bd02:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bd06:	eb 19                	jmp    c001bd21 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bd08:	31 c0                	xor    eax,eax
c001bd0a:	80 fb 15             	cmp    bl,0x15
c001bd0d:	77 13                	ja     c001bd22 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bd0f:	0f b6 d2             	movzx  edx,dl
c001bd12:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bd1a:	0f b6 d3             	movzx  edx,bl
c001bd1d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bd21:	ec                   	in     al,dx
c001bd22:	83 c4 1c             	add    esp,0x1c
c001bd25:	5b                   	pop    ebx
c001bd26:	5e                   	pop    esi
c001bd27:	5f                   	pop    edi
c001bd28:	5d                   	pop    ebp
c001bd29:	c3                   	ret    

c001bd2a <IDE::waitInterrupt(unsigned char)>:
c001bd2a:	55                   	push   ebp
c001bd2b:	57                   	push   edi
c001bd2c:	56                   	push   esi
c001bd2d:	53                   	push   ebx
c001bd2e:	31 db                	xor    ebx,ebx
c001bd30:	83 ec 0c             	sub    esp,0xc
c001bd33:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd37:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bd3c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bd44:	89 e8                	mov    eax,ebp
c001bd46:	84 c0                	test   al,al
c001bd48:	75 34                	jne    c001bd7e <IDE::waitInterrupt(unsigned char)+0x54>
c001bd4a:	52                   	push   edx
c001bd4b:	6a 0c                	push   0xc
c001bd4d:	56                   	push   esi
c001bd4e:	57                   	push   edi
c001bd4f:	e8 28 ff ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001bd54:	83 c4 10             	add    esp,0x10
c001bd57:	a8 01                	test   al,0x1
c001bd59:	75 2b                	jne    c001bd86 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd5b:	f6 c3 04             	test   bl,0x4
c001bd5e:	75 16                	jne    c001bd76 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd60:	83 fb 32             	cmp    ebx,0x32
c001bd63:	7e 11                	jle    c001bd76 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd65:	50                   	push   eax
c001bd66:	50                   	push   eax
c001bd67:	6a 00                	push   0x0
c001bd69:	68 80 96 98 00       	push   0x989680
c001bd6e:	e8 f2 c4 ff ff       	call   c0018265 <nanoSleep(unsigned long long)>
c001bd73:	83 c4 10             	add    esp,0x10
c001bd76:	83 fb 3c             	cmp    ebx,0x3c
c001bd79:	74 0b                	je     c001bd86 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd7b:	43                   	inc    ebx
c001bd7c:	eb be                	jmp    c001bd3c <IDE::waitInterrupt(unsigned char)+0x12>
c001bd7e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bd86:	83 c4 0c             	add    esp,0xc
c001bd89:	89 e8                	mov    eax,ebp
c001bd8b:	5b                   	pop    ebx
c001bd8c:	5e                   	pop    esi
c001bd8d:	5f                   	pop    edi
c001bd8e:	5d                   	pop    ebp
c001bd8f:	c3                   	ret    

c001bd90 <ideChannel0IRQHandler(regs*, void*)>:
c001bd90:	83 ec 10             	sub    esp,0x10
c001bd93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd97:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bd9e:	6a 07                	push   0x7
c001bda0:	6a 00                	push   0x0
c001bda2:	50                   	push   eax
c001bda3:	e8 d4 fe ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001bda8:	83 c4 1c             	add    esp,0x1c
c001bdab:	c3                   	ret    

c001bdac <ideChannel1IRQHandler(regs*, void*)>:
c001bdac:	83 ec 10             	sub    esp,0x10
c001bdaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdb3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bdba:	6a 07                	push   0x7
c001bdbc:	6a 01                	push   0x1
c001bdbe:	50                   	push   eax
c001bdbf:	e8 b8 fe ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001bdc4:	83 c4 1c             	add    esp,0x1c
c001bdc7:	c3                   	ret    

c001bdc8 <IDE::enableIRQs(unsigned char, bool)>:
c001bdc8:	57                   	push   edi
c001bdc9:	56                   	push   esi
c001bdca:	be 04 00 00 00       	mov    esi,0x4
c001bdcf:	53                   	push   ebx
c001bdd0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bdd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bdd9:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bdde:	0f 94 c0             	sete   al
c001bde1:	d1 e0                	shl    eax,1
c001bde3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bdea:	0f b6 c0             	movzx  eax,al
c001bded:	50                   	push   eax
c001bdee:	6a 0c                	push   0xc
c001bdf0:	57                   	push   edi
c001bdf1:	53                   	push   ebx
c001bdf2:	e8 c5 fd ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdf7:	83 c4 10             	add    esp,0x10
c001bdfa:	50                   	push   eax
c001bdfb:	6a 0c                	push   0xc
c001bdfd:	57                   	push   edi
c001bdfe:	53                   	push   ebx
c001bdff:	e8 78 fe ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001be04:	83 c4 10             	add    esp,0x10
c001be07:	4e                   	dec    esi
c001be08:	75 f0                	jne    c001bdfa <IDE::enableIRQs(unsigned char, bool)+0x32>
c001be0a:	5b                   	pop    ebx
c001be0b:	5e                   	pop    esi
c001be0c:	5f                   	pop    edi
c001be0d:	c3                   	ret    

c001be0e <IDE::open(int, int, void*)>:
c001be0e:	55                   	push   ebp
c001be0f:	57                   	push   edi
c001be10:	56                   	push   esi
c001be11:	53                   	push   ebx
c001be12:	83 ec 1c             	sub    esp,0x1c
c001be15:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001be19:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001be22:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001be2b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001be32:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001be39:	0f 85 b0 02 00 00    	jne    c001c0ef <IDE::open(int, int, void*)+0x2e1>
c001be3f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001be45:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001be49:	83 e0 7f             	and    eax,0x7f
c001be4c:	3c 05                	cmp    al,0x5
c001be4e:	74 04                	je     c001be54 <IDE::open(int, int, void*)+0x46>
c001be50:	3c 0f                	cmp    al,0xf
c001be52:	75 32                	jne    c001be86 <IDE::open(int, int, void*)+0x78>
c001be54:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001be5a:	83 e0 fc             	and    eax,0xfffffffc
c001be5d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be64:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001be6a:	83 e0 fc             	and    eax,0xfffffffc
c001be6d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be74:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001be7a:	83 e0 fc             	and    eax,0xfffffffc
c001be7d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be84:	eb 14                	jmp    c001be9a <IDE::open(int, int, void*)+0x8c>
c001be86:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001be90:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001be9a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bea1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bea8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001beac:	89 c6                	mov    esi,eax
c001beae:	bf f8 0c 00 00       	mov    edi,0xcf8
c001beb3:	c1 e6 10             	shl    esi,0x10
c001beb6:	89 e8                	mov    eax,ebp
c001beb8:	89 fa                	mov    edx,edi
c001beba:	c1 e0 0b             	shl    eax,0xb
c001bebd:	09 f0                	or     eax,esi
c001bebf:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bec6:	c1 e6 08             	shl    esi,0x8
c001bec9:	09 c6                	or     esi,eax
c001becb:	89 f0                	mov    eax,esi
c001becd:	0d 08 00 00 80       	or     eax,0x80000008
c001bed2:	ef                   	out    dx,eax
c001bed3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bed8:	89 ca                	mov    edx,ecx
c001beda:	ed                   	in     eax,dx
c001bedb:	c1 e8 10             	shr    eax,0x10
c001bede:	3d ff ff 00 00       	cmp    eax,0xffff
c001bee3:	0f 84 f5 00 00 00    	je     c001bfde <IDE::open(int, int, void*)+0x1d0>
c001bee9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001beef:	89 fa                	mov    edx,edi
c001bef1:	89 f0                	mov    eax,esi
c001bef3:	ef                   	out    dx,eax
c001bef4:	b0 fe                	mov    al,0xfe
c001bef6:	89 ca                	mov    edx,ecx
c001bef8:	ee                   	out    dx,al
c001bef9:	89 f0                	mov    eax,esi
c001befb:	89 fa                	mov    edx,edi
c001befd:	ef                   	out    dx,eax
c001befe:	89 ca                	mov    edx,ecx
c001bf00:	ed                   	in     eax,dx
c001bf01:	3c fe                	cmp    al,0xfe
c001bf03:	0f 85 a9 00 00 00    	jne    c001bfb2 <IDE::open(int, int, void*)+0x1a4>
c001bf09:	8b 15 28 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023728
c001bf0f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bf16:	74 33                	je     c001bf4b <IDE::open(int, int, void*)+0x13d>
c001bf18:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bf1e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bf22:	40                   	inc    eax
c001bf23:	83 ec 0c             	sub    esp,0xc
c001bf26:	0f b6 c0             	movzx  eax,al
c001bf29:	50                   	push   eax
c001bf2a:	55                   	push   ebp
c001bf2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf2f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bf35:	51                   	push   ecx
c001bf36:	e8 05 76 ff ff       	call   c0013540 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bf3b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bf40:	83 c4 1c             	add    esp,0x1c
c001bf43:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf49:	eb 0a                	jmp    c001bf55 <IDE::open(int, int, void*)+0x147>
c001bf4b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bf55:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bf5c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bf63:	c1 e1 10             	shl    ecx,0x10
c001bf66:	c1 e0 08             	shl    eax,0x8
c001bf69:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bf6e:	09 c1                	or     ecx,eax
c001bf70:	89 fa                	mov    edx,edi
c001bf72:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bf79:	c1 e0 0b             	shl    eax,0xb
c001bf7c:	09 c1                	or     ecx,eax
c001bf7e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bf84:	89 c8                	mov    eax,ecx
c001bf86:	ef                   	out    dx,eax
c001bf87:	be fc 0c 00 00       	mov    esi,0xcfc
c001bf8c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bf92:	89 f2                	mov    edx,esi
c001bf94:	ee                   	out    dx,al
c001bf95:	89 c8                	mov    eax,ecx
c001bf97:	89 fa                	mov    edx,edi
c001bf99:	ef                   	out    dx,eax
c001bf9a:	89 f2                	mov    edx,esi
c001bf9c:	ed                   	in     eax,dx
c001bf9d:	0f b6 c0             	movzx  eax,al
c001bfa0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bfa6:	74 46                	je     c001bfee <IDE::open(int, int, void*)+0x1e0>
c001bfa8:	83 ec 0c             	sub    esp,0xc
c001bfab:	68 fc 24 02 c0       	push   0xc00224fc
c001bfb0:	eb 34                	jmp    c001bfe6 <IDE::open(int, int, void*)+0x1d8>
c001bfb2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bfbb:	75 17                	jne    c001bfd4 <IDE::open(int, int, void*)+0x1c6>
c001bfbd:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bfc2:	74 07                	je     c001bfcb <IDE::open(int, int, void*)+0x1bd>
c001bfc4:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bfc9:	75 09                	jne    c001bfd4 <IDE::open(int, int, void*)+0x1c6>
c001bfcb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bfd2:	eb 1a                	jmp    c001bfee <IDE::open(int, int, void*)+0x1e0>
c001bfd4:	83 ec 0c             	sub    esp,0xc
c001bfd7:	68 04 25 02 c0       	push   0xc0022504
c001bfdc:	eb 08                	jmp    c001bfe6 <IDE::open(int, int, void*)+0x1d8>
c001bfde:	83 ec 0c             	sub    esp,0xc
c001bfe1:	68 35 25 02 c0       	push   0xc0022535
c001bfe6:	e8 95 8c ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001bfeb:	83 c4 10             	add    esp,0x10
c001bfee:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bff5:	79 1a                	jns    c001c011 <IDE::open(int, int, void*)+0x203>
c001bff7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bffd:	83 e0 fc             	and    eax,0xfffffffc
c001c000:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c007:	83 c0 08             	add    eax,0x8
c001c00a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c011:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c017:	89 c2                	mov    edx,eax
c001c019:	83 e2 0f             	and    edx,0xf
c001c01c:	66 83 fa 08          	cmp    dx,0x8
c001c020:	75 0a                	jne    c001c02c <IDE::open(int, int, void*)+0x21e>
c001c022:	83 e8 02             	sub    eax,0x2
c001c025:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c02c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c032:	89 c2                	mov    edx,eax
c001c034:	83 e2 0f             	and    edx,0xf
c001c037:	66 83 fa 08          	cmp    dx,0x8
c001c03b:	75 0a                	jne    c001c047 <IDE::open(int, int, void*)+0x239>
c001c03d:	83 e8 02             	sub    eax,0x2
c001c040:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c047:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c04e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c055:	89 d0                	mov    eax,edx
c001c057:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c05a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c05e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c062:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c065:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c06a:	0f b6 c9             	movzx  ecx,cl
c001c06d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c074:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c077:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c07b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c07f:	8d 50 02             	lea    edx,[eax+0x2]
c001c082:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c087:	0f b6 d2             	movzx  edx,dl
c001c08a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c090:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c093:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c097:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c09b:	8d 48 03             	lea    ecx,[eax+0x3]
c001c09e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0a3:	0f b6 c9             	movzx  ecx,cl
c001c0a6:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c0ac:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c0af:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c0b3:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c0b7:	8d 50 04             	lea    edx,[eax+0x4]
c001c0ba:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c0c0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c0c5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c0cc:	66 85 f6             	test   si,si
c001c0cf:	74 3e                	je     c001c10f <IDE::open(int, int, void*)+0x301>
c001c0d1:	0f b6 d2             	movzx  edx,dl
c001c0d4:	83 c0 05             	add    eax,0x5
c001c0d7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0da:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0de:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c0e2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c0e8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0ed:	eb 20                	jmp    c001c10f <IDE::open(int, int, void*)+0x301>
c001c0ef:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0f9:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c103:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c10a:	e9 02 ff ff ff       	jmp    c001c011 <IDE::open(int, int, void*)+0x203>
c001c10f:	52                   	push   edx
c001c110:	52                   	push   edx
c001c111:	6a 00                	push   0x0
c001c113:	53                   	push   ebx
c001c114:	e8 7d fa ff ff       	call   c001bb96 <IDE::prepareInterrupt(unsigned char)>
c001c119:	59                   	pop    ecx
c001c11a:	5e                   	pop    esi
c001c11b:	6a 01                	push   0x1
c001c11d:	53                   	push   ebx
c001c11e:	e8 73 fa ff ff       	call   c001bb96 <IDE::prepareInterrupt(unsigned char)>
c001c123:	83 c4 0c             	add    esp,0xc
c001c126:	6a 00                	push   0x0
c001c128:	6a 00                	push   0x0
c001c12a:	53                   	push   ebx
c001c12b:	e8 98 fc ff ff       	call   c001bdc8 <IDE::enableIRQs(unsigned char, bool)>
c001c130:	83 c4 0c             	add    esp,0xc
c001c133:	6a 00                	push   0x0
c001c135:	6a 01                	push   0x1
c001c137:	53                   	push   ebx
c001c138:	e8 8b fc ff ff       	call   c001bdc8 <IDE::enableIRQs(unsigned char, bool)>
c001c13d:	83 c4 10             	add    esp,0x10
c001c140:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c147:	74 40                	je     c001c189 <IDE::open(int, int, void*)+0x37b>
c001c149:	83 ec 0c             	sub    esp,0xc
c001c14c:	68 5f 25 02 c0       	push   0xc002255f
c001c151:	e8 95 2e ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c156:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c159:	6a 01                	push   0x1
c001c15b:	68 90 bd 01 c0       	push   0xc001bd90
c001c160:	6a 0e                	push   0xe
c001c162:	53                   	push   ebx
c001c163:	e8 e2 41 ff ff       	call   c001034a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c168:	83 c4 14             	add    esp,0x14
c001c16b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c171:	53                   	push   ebx
c001c172:	6a 01                	push   0x1
c001c174:	68 ac bd 01 c0       	push   0xc001bdac
c001c179:	6a 0f                	push   0xf
c001c17b:	53                   	push   ebx
c001c17c:	e8 c9 41 ff ff       	call   c001034a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c181:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c187:	eb 4a                	jmp    c001c1d3 <IDE::open(int, int, void*)+0x3c5>
c001c189:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c193:	50                   	push   eax
c001c194:	6a 0f                	push   0xf
c001c196:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c19c:	68 7b 25 02 c0       	push   0xc002257b
c001c1a1:	e8 45 2e ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c1a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1a9:	6a 00                	push   0x0
c001c1ab:	68 90 bd 01 c0       	push   0xc001bd90
c001c1b0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c1b6:	53                   	push   ebx
c001c1b7:	e8 8e 41 ff ff       	call   c001034a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1bc:	83 c4 14             	add    esp,0x14
c001c1bf:	53                   	push   ebx
c001c1c0:	6a 00                	push   0x0
c001c1c2:	68 ac bd 01 c0       	push   0xc001bdac
c001c1c7:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c1cd:	53                   	push   ebx
c001c1ce:	e8 77 41 ff ff       	call   c001034a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1d5:	83 c4 20             	add    esp,0x20
c001c1d8:	83 ec 0c             	sub    esp,0xc
c001c1db:	53                   	push   ebx
c001c1dc:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c1df:	83 c4 0c             	add    esp,0xc
c001c1e2:	6a 07                	push   0x7
c001c1e4:	6a 00                	push   0x0
c001c1e6:	53                   	push   ebx
c001c1e7:	e8 90 fa ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c1ec:	83 c4 0c             	add    esp,0xc
c001c1ef:	6a 07                	push   0x7
c001c1f1:	6a 01                	push   0x1
c001c1f3:	53                   	push   ebx
c001c1f4:	e8 83 fa ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c1f9:	83 c4 0c             	add    esp,0xc
c001c1fc:	6a 01                	push   0x1
c001c1fe:	6a 00                	push   0x0
c001c200:	53                   	push   ebx
c001c201:	e8 c2 fb ff ff       	call   c001bdc8 <IDE::enableIRQs(unsigned char, bool)>
c001c206:	83 c4 0c             	add    esp,0xc
c001c209:	6a 01                	push   0x1
c001c20b:	6a 01                	push   0x1
c001c20d:	53                   	push   ebx
c001c20e:	e8 b5 fb ff ff       	call   c001bdc8 <IDE::enableIRQs(unsigned char, bool)>
c001c213:	83 c4 2c             	add    esp,0x2c
c001c216:	31 c0                	xor    eax,eax
c001c218:	5b                   	pop    ebx
c001c219:	5e                   	pop    esi
c001c21a:	5f                   	pop    edi
c001c21b:	5d                   	pop    ebp
c001c21c:	c3                   	ret    
c001c21d:	90                   	nop

c001c21e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c21e:	55                   	push   ebp
c001c21f:	57                   	push   edi
c001c220:	56                   	push   esi
c001c221:	53                   	push   ebx
c001c222:	83 ec 1c             	sub    esp,0x1c
c001c225:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c229:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c22d:	8d 50 f8             	lea    edx,[eax-0x8]
c001c230:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c234:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c238:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c23c:	80 fa 03             	cmp    dl,0x3
c001c23f:	77 5d                	ja     c001c29e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c241:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c245:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c249:	0f b6 db             	movzx  ebx,bl
c001c24c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c24f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c253:	83 ca 80             	or     edx,0xffffff80
c001c256:	0f b6 d2             	movzx  edx,dl
c001c259:	52                   	push   edx
c001c25a:	6a 0c                	push   0xc
c001c25c:	53                   	push   ebx
c001c25d:	56                   	push   esi
c001c25e:	e8 59 f9 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c263:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c268:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c26c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c270:	0f b6 c0             	movzx  eax,al
c001c273:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c277:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c279:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c27e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c282:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c286:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c28a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c292:	83 c4 2c             	add    esp,0x2c
c001c295:	5b                   	pop    ebx
c001c296:	5e                   	pop    esi
c001c297:	5f                   	pop    edi
c001c298:	5d                   	pop    ebp
c001c299:	e9 1e f9 ff ff       	jmp    c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c29e:	3c 07                	cmp    al,0x7
c001c2a0:	77 10                	ja     c001c2b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c2a2:	0f b6 db             	movzx  ebx,bl
c001c2a5:	0f b6 d0             	movzx  edx,al
c001c2a8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c2b0:	eb 2d                	jmp    c001c2df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c2b2:	3c 0d                	cmp    al,0xd
c001c2b4:	77 13                	ja     c001c2c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c2b6:	0f b6 db             	movzx  ebx,bl
c001c2b9:	0f b6 c0             	movzx  eax,al
c001c2bc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c2c3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c2c7:	eb 16                	jmp    c001c2df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c2c9:	3c 15                	cmp    al,0x15
c001c2cb:	77 14                	ja     c001c2e1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c2cd:	0f b6 db             	movzx  ebx,bl
c001c2d0:	0f b6 c0             	movzx  eax,al
c001c2d3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c2db:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c2df:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c2e1:	83 c4 1c             	add    esp,0x1c
c001c2e4:	5b                   	pop    ebx
c001c2e5:	5e                   	pop    esi
c001c2e6:	5f                   	pop    edi
c001c2e7:	5d                   	pop    ebp
c001c2e8:	c3                   	ret    
c001c2e9:	90                   	nop

c001c2ea <IDE::detect()>:
c001c2ea:	55                   	push   ebp
c001c2eb:	57                   	push   edi
c001c2ec:	56                   	push   esi
c001c2ed:	53                   	push   ebx
c001c2ee:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c2f4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c2fb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c302:	0f 85 be 02 00 00    	jne    c001c5c6 <IDE::detect()+0x2dc>
c001c308:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c30f:	31 f6                	xor    esi,esi
c001c311:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c319:	31 ed                	xor    ebp,ebp
c001c31b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c31f:	c1 e0 06             	shl    eax,0x6
c001c322:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c32a:	89 e8                	mov    eax,ebp
c001c32c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c330:	c1 e0 04             	shl    eax,0x4
c001c333:	83 c8 a0             	or     eax,0xffffffa0
c001c336:	0f b6 c0             	movzx  eax,al
c001c339:	50                   	push   eax
c001c33a:	6a 06                	push   0x6
c001c33c:	56                   	push   esi
c001c33d:	53                   	push   ebx
c001c33e:	e8 79 f8 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c343:	83 c4 0c             	add    esp,0xc
c001c346:	6a 0c                	push   0xc
c001c348:	56                   	push   esi
c001c349:	53                   	push   ebx
c001c34a:	e8 2d f9 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c34f:	83 c4 0c             	add    esp,0xc
c001c352:	6a 0c                	push   0xc
c001c354:	56                   	push   esi
c001c355:	53                   	push   ebx
c001c356:	e8 21 f9 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c35b:	83 c4 0c             	add    esp,0xc
c001c35e:	6a 0c                	push   0xc
c001c360:	56                   	push   esi
c001c361:	53                   	push   ebx
c001c362:	e8 15 f9 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c367:	83 c4 0c             	add    esp,0xc
c001c36a:	6a 0c                	push   0xc
c001c36c:	56                   	push   esi
c001c36d:	53                   	push   ebx
c001c36e:	e8 09 f9 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c373:	68 ec 00 00 00       	push   0xec
c001c378:	6a 07                	push   0x7
c001c37a:	56                   	push   esi
c001c37b:	53                   	push   ebx
c001c37c:	e8 3b f8 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c381:	83 c4 1c             	add    esp,0x1c
c001c384:	6a 0c                	push   0xc
c001c386:	56                   	push   esi
c001c387:	53                   	push   ebx
c001c388:	e8 ef f8 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c38d:	83 c4 0c             	add    esp,0xc
c001c390:	6a 0c                	push   0xc
c001c392:	56                   	push   esi
c001c393:	53                   	push   ebx
c001c394:	e8 e3 f8 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c399:	83 c4 0c             	add    esp,0xc
c001c39c:	6a 0c                	push   0xc
c001c39e:	56                   	push   esi
c001c39f:	53                   	push   ebx
c001c3a0:	e8 d7 f8 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c3a5:	83 c4 0c             	add    esp,0xc
c001c3a8:	6a 0c                	push   0xc
c001c3aa:	56                   	push   esi
c001c3ab:	53                   	push   ebx
c001c3ac:	e8 cb f8 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c3b1:	83 c4 0c             	add    esp,0xc
c001c3b4:	6a 0c                	push   0xc
c001c3b6:	56                   	push   esi
c001c3b7:	53                   	push   ebx
c001c3b8:	e8 bf f8 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c3bd:	83 c4 10             	add    esp,0x10
c001c3c0:	84 c0                	test   al,al
c001c3c2:	0f 84 8b 01 00 00    	je     c001c553 <IDE::detect()+0x269>
c001c3c8:	31 ff                	xor    edi,edi
c001c3ca:	50                   	push   eax
c001c3cb:	6a 0c                	push   0xc
c001c3cd:	56                   	push   esi
c001c3ce:	53                   	push   ebx
c001c3cf:	e8 a8 f8 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c3d4:	83 c4 10             	add    esp,0x10
c001c3d7:	a8 01                	test   al,0x1
c001c3d9:	0f 85 8e 01 00 00    	jne    c001c56d <IDE::detect()+0x283>
c001c3df:	84 c0                	test   al,al
c001c3e1:	78 04                	js     c001c3e7 <IDE::detect()+0xfd>
c001c3e3:	a8 08                	test   al,0x8
c001c3e5:	75 27                	jne    c001c40e <IDE::detect()+0x124>
c001c3e7:	47                   	inc    edi
c001c3e8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c3ee:	7e da                	jle    c001c3ca <IDE::detect()+0xe0>
c001c3f0:	50                   	push   eax
c001c3f1:	50                   	push   eax
c001c3f2:	6a 00                	push   0x0
c001c3f4:	68 40 4b 4c 00       	push   0x4c4b40
c001c3f9:	e8 67 be ff ff       	call   c0018265 <nanoSleep(unsigned long long)>
c001c3fe:	83 c4 10             	add    esp,0x10
c001c401:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c407:	75 c1                	jne    c001c3ca <IDE::detect()+0xe0>
c001c409:	e9 5f 01 00 00       	jmp    c001c56d <IDE::detect()+0x283>
c001c40e:	31 c9                	xor    ecx,ecx
c001c410:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c414:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c418:	83 ec 0c             	sub    esp,0xc
c001c41b:	68 80 00 00 00       	push   0x80
c001c420:	57                   	push   edi
c001c421:	6a 00                	push   0x0
c001c423:	56                   	push   esi
c001c424:	53                   	push   ebx
c001c425:	e8 f4 fd ff ff       	call   c001c21e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c42a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c42f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c433:	89 d1                	mov    ecx,edx
c001c435:	c1 e0 06             	shl    eax,0x6
c001c438:	01 d8                	add    eax,ebx
c001c43a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c441:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c448:	89 f2                	mov    edx,esi
c001c44a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c450:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c454:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c45a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c45e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c465:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c46d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c474:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c47c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c482:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c489:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c48f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c493:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c497:	83 c4 20             	add    esp,0x20
c001c49a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c49d:	83 c0 02             	add    eax,0x2
c001c4a0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c4a6:	83 c7 02             	add    edi,0x2
c001c4a9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c4ac:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c4b2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c4b6:	75 e2                	jne    c001c49a <IDE::detect()+0x1b0>
c001c4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4bc:	c1 e0 06             	shl    eax,0x6
c001c4bf:	01 d8                	add    eax,ebx
c001c4c1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c4c7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c4ce:	66 c1 ea 09          	shr    dx,0x9
c001c4d2:	83 e2 01             	and    edx,0x1
c001c4d5:	84 c9                	test   cl,cl
c001c4d7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c4dd:	75 2f                	jne    c001c50e <IDE::detect()+0x224>
c001c4df:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c4e5:	85 c0                	test   eax,eax
c001c4e7:	74 66                	je     c001c54f <IDE::detect()+0x265>
c001c4e9:	50                   	push   eax
c001c4ea:	55                   	push   ebp
c001c4eb:	56                   	push   esi
c001c4ec:	68 97 25 02 c0       	push   0xc0022597
c001c4f1:	e8 f5 2a ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c4f6:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c4fd:	e8 fa 29 ff ff       	call   c000eefc <operator new(unsigned long)>
c001c502:	89 c7                	mov    edi,eax
c001c504:	89 04 24             	mov    DWORD PTR [esp],eax
c001c507:	e8 e8 02 00 00       	call   c001c7f4 <ATA::ATA()>
c001c50c:	eb 28                	jmp    c001c536 <IDE::detect()+0x24c>
c001c50e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c514:	55                   	push   ebp
c001c515:	56                   	push   esi
c001c516:	68 c6 25 02 c0       	push   0xc00225c6
c001c51b:	e8 cb 2a ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c520:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c527:	e8 d0 29 ff ff       	call   c000eefc <operator new(unsigned long)>
c001c52c:	89 c7                	mov    edi,eax
c001c52e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c531:	e8 ee 08 00 00       	call   c001ce24 <ATAPI::ATAPI()>
c001c536:	5a                   	pop    edx
c001c537:	59                   	pop    ecx
c001c538:	57                   	push   edi
c001c539:	53                   	push   ebx
c001c53a:	e8 b7 3e ff ff       	call   c00103f6 <Device::addChild(Device*)>
c001c53f:	8b 07                	mov    eax,DWORD PTR [edi]
c001c541:	53                   	push   ebx
c001c542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c546:	6a 00                	push   0x0
c001c548:	57                   	push   edi
c001c549:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c54c:	83 c4 20             	add    esp,0x20
c001c54f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c553:	4d                   	dec    ebp
c001c554:	74 0a                	je     c001c560 <IDE::detect()+0x276>
c001c556:	bd 01 00 00 00       	mov    ebp,0x1
c001c55b:	e9 bb fd ff ff       	jmp    c001c31b <IDE::detect()+0x31>
c001c560:	4e                   	dec    esi
c001c561:	74 63                	je     c001c5c6 <IDE::detect()+0x2dc>
c001c563:	be 01 00 00 00       	mov    esi,0x1
c001c568:	e9 ac fd ff ff       	jmp    c001c319 <IDE::detect()+0x2f>
c001c56d:	50                   	push   eax
c001c56e:	6a 04                	push   0x4
c001c570:	56                   	push   esi
c001c571:	53                   	push   ebx
c001c572:	e8 05 f7 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c577:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c57b:	83 c4 0c             	add    esp,0xc
c001c57e:	6a 05                	push   0x5
c001c580:	56                   	push   esi
c001c581:	53                   	push   ebx
c001c582:	e8 f5 f6 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c587:	83 c4 10             	add    esp,0x10
c001c58a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c58e:	80 fa 14             	cmp    dl,0x14
c001c591:	75 04                	jne    c001c597 <IDE::detect()+0x2ad>
c001c593:	3c eb                	cmp    al,0xeb
c001c595:	eb 07                	jmp    c001c59e <IDE::detect()+0x2b4>
c001c597:	3c 96                	cmp    al,0x96
c001c599:	75 b8                	jne    c001c553 <IDE::detect()+0x269>
c001c59b:	80 fa 69             	cmp    dl,0x69
c001c59e:	75 b3                	jne    c001c553 <IDE::detect()+0x269>
c001c5a0:	68 a1 00 00 00       	push   0xa1
c001c5a5:	6a 07                	push   0x7
c001c5a7:	56                   	push   esi
c001c5a8:	53                   	push   ebx
c001c5a9:	e8 0e f6 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5ae:	5f                   	pop    edi
c001c5af:	58                   	pop    eax
c001c5b0:	6a 00                	push   0x0
c001c5b2:	68 40 42 0f 00       	push   0xf4240
c001c5b7:	e8 a9 bc ff ff       	call   c0018265 <nanoSleep(unsigned long long)>
c001c5bc:	83 c4 10             	add    esp,0x10
c001c5bf:	b1 01                	mov    cl,0x1
c001c5c1:	e9 4a fe ff ff       	jmp    c001c410 <IDE::detect()+0x126>
c001c5c6:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c5cc:	5b                   	pop    ebx
c001c5cd:	5e                   	pop    esi
c001c5ce:	5f                   	pop    edi
c001c5cf:	5d                   	pop    ebp
c001c5d0:	c3                   	ret    
c001c5d1:	90                   	nop

c001c5d2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c5d2:	55                   	push   ebp
c001c5d3:	57                   	push   edi
c001c5d4:	56                   	push   esi
c001c5d5:	53                   	push   ebx
c001c5d6:	83 ec 1c             	sub    esp,0x1c
c001c5d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c5e1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c5e5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c5e9:	88 c3                	mov    bl,al
c001c5eb:	84 c0                	test   al,al
c001c5ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5f1:	0f 84 67 01 00 00    	je     c001c75e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c5f7:	83 ec 0c             	sub    esp,0xc
c001c5fa:	68 f7 25 02 c0       	push   0xc00225f7
c001c5ff:	e8 e7 29 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c604:	83 c4 10             	add    esp,0x10
c001c607:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c60b:	3c 01                	cmp    al,0x1
c001c60d:	75 17                	jne    c001c626 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c60f:	83 ec 0c             	sub    esp,0xc
c001c612:	b3 13                	mov    bl,0x13
c001c614:	68 03 26 02 c0       	push   0xc0022603
c001c619:	e8 cd 29 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	e9 25 01 00 00       	jmp    c001c74b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c626:	3c 02                	cmp    al,0x2
c001c628:	0f 85 ef 00 00 00    	jne    c001c71d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c62e:	d1 e6                	shl    esi,1
c001c630:	09 ee                	or     esi,ebp
c001c632:	52                   	push   edx
c001c633:	89 f0                	mov    eax,esi
c001c635:	6a 01                	push   0x1
c001c637:	0f b6 f0             	movzx  esi,al
c001c63a:	c1 e6 06             	shl    esi,0x6
c001c63d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c645:	50                   	push   eax
c001c646:	57                   	push   edi
c001c647:	e8 30 f6 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c64c:	83 c4 10             	add    esp,0x10
c001c64f:	89 c6                	mov    esi,eax
c001c651:	a8 01                	test   al,0x1
c001c653:	74 12                	je     c001c667 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c655:	83 ec 0c             	sub    esp,0xc
c001c658:	b3 07                	mov    bl,0x7
c001c65a:	68 18 26 02 c0       	push   0xc0022618
c001c65f:	e8 87 29 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c664:	83 c4 10             	add    esp,0x10
c001c667:	f7 c6 02 00 00 00    	test   esi,0x2
c001c66d:	74 12                	je     c001c681 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c66f:	83 ec 0c             	sub    esp,0xc
c001c672:	b3 03                	mov    bl,0x3
c001c674:	68 36 26 02 c0       	push   0xc0022636
c001c679:	e8 6d 29 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c67e:	83 c4 10             	add    esp,0x10
c001c681:	f7 c6 04 00 00 00    	test   esi,0x4
c001c687:	74 12                	je     c001c69b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c689:	83 ec 0c             	sub    esp,0xc
c001c68c:	b3 14                	mov    bl,0x14
c001c68e:	68 56 26 02 c0       	push   0xc0022656
c001c693:	e8 53 29 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c698:	83 c4 10             	add    esp,0x10
c001c69b:	f7 c6 08 00 00 00    	test   esi,0x8
c001c6a1:	74 12                	je     c001c6b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c6a3:	83 ec 0c             	sub    esp,0xc
c001c6a6:	b3 03                	mov    bl,0x3
c001c6a8:	68 36 26 02 c0       	push   0xc0022636
c001c6ad:	e8 39 29 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c6b2:	83 c4 10             	add    esp,0x10
c001c6b5:	f7 c6 10 00 00 00    	test   esi,0x10
c001c6bb:	74 12                	je     c001c6cf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c6bd:	83 ec 0c             	sub    esp,0xc
c001c6c0:	b3 15                	mov    bl,0x15
c001c6c2:	68 6e 26 02 c0       	push   0xc002266e
c001c6c7:	e8 1f 29 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c6cc:	83 c4 10             	add    esp,0x10
c001c6cf:	f7 c6 20 00 00 00    	test   esi,0x20
c001c6d5:	74 12                	je     c001c6e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c6d7:	83 ec 0c             	sub    esp,0xc
c001c6da:	b3 03                	mov    bl,0x3
c001c6dc:	68 36 26 02 c0       	push   0xc0022636
c001c6e1:	e8 05 29 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c6e6:	83 c4 10             	add    esp,0x10
c001c6e9:	f7 c6 40 00 00 00    	test   esi,0x40
c001c6ef:	74 12                	je     c001c703 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c6f1:	83 ec 0c             	sub    esp,0xc
c001c6f4:	b3 16                	mov    bl,0x16
c001c6f6:	68 88 26 02 c0       	push   0xc0022688
c001c6fb:	e8 eb 28 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c700:	83 c4 10             	add    esp,0x10
c001c703:	89 f0                	mov    eax,esi
c001c705:	84 c0                	test   al,al
c001c707:	79 42                	jns    c001c74b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c709:	83 ec 0c             	sub    esp,0xc
c001c70c:	b3 0d                	mov    bl,0xd
c001c70e:	68 a9 26 02 c0       	push   0xc00226a9
c001c713:	e8 d3 28 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c718:	83 c4 10             	add    esp,0x10
c001c71b:	eb 2e                	jmp    c001c74b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c71d:	3c 03                	cmp    al,0x3
c001c71f:	75 14                	jne    c001c735 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c721:	83 ec 0c             	sub    esp,0xc
c001c724:	b3 17                	mov    bl,0x17
c001c726:	68 bd 26 02 c0       	push   0xc00226bd
c001c72b:	e8 bb 28 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c730:	83 c4 10             	add    esp,0x10
c001c733:	eb 16                	jmp    c001c74b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c735:	3c 04                	cmp    al,0x4
c001c737:	75 12                	jne    c001c74b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c739:	83 ec 0c             	sub    esp,0xc
c001c73c:	b3 08                	mov    bl,0x8
c001c73e:	68 d3 26 02 c0       	push   0xc00226d3
c001c743:	e8 a3 28 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c748:	83 c4 10             	add    esp,0x10
c001c74b:	50                   	push   eax
c001c74c:	50                   	push   eax
c001c74d:	0f b6 c3             	movzx  eax,bl
c001c750:	50                   	push   eax
c001c751:	68 eb 26 02 c0       	push   0xc00226eb
c001c756:	e8 90 28 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c75b:	83 c4 10             	add    esp,0x10
c001c75e:	83 c4 1c             	add    esp,0x1c
c001c761:	88 d8                	mov    al,bl
c001c763:	5b                   	pop    ebx
c001c764:	5e                   	pop    esi
c001c765:	5f                   	pop    edi
c001c766:	5d                   	pop    ebp
c001c767:	c3                   	ret    

c001c768 <IDE::polling(unsigned char, unsigned int)>:
c001c768:	57                   	push   edi
c001c769:	56                   	push   esi
c001c76a:	53                   	push   ebx
c001c76b:	bb 04 00 00 00       	mov    ebx,0x4
c001c770:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c774:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c779:	52                   	push   edx
c001c77a:	6a 0c                	push   0xc
c001c77c:	56                   	push   esi
c001c77d:	57                   	push   edi
c001c77e:	e8 f9 f4 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c783:	83 c4 10             	add    esp,0x10
c001c786:	4b                   	dec    ebx
c001c787:	75 f0                	jne    c001c779 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c789:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c78e:	50                   	push   eax
c001c78f:	6a 0c                	push   0xc
c001c791:	56                   	push   esi
c001c792:	57                   	push   edi
c001c793:	e8 e4 f4 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c798:	83 c4 10             	add    esp,0x10
c001c79b:	a8 01                	test   al,0x1
c001c79d:	74 12                	je     c001c7b1 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c79f:	83 ec 0c             	sub    esp,0xc
c001c7a2:	68 05 27 02 c0       	push   0xc0022705
c001c7a7:	e8 3f 28 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001c7ac:	83 c4 10             	add    esp,0x10
c001c7af:	eb 17                	jmp    c001c7c8 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c7b1:	a8 20                	test   al,0x20
c001c7b3:	75 0f                	jne    c001c7c4 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c7b5:	4b                   	dec    ebx
c001c7b6:	74 10                	je     c001c7c8 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c7b8:	84 c0                	test   al,al
c001c7ba:	78 d2                	js     c001c78e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c7bc:	a8 08                	test   al,0x8
c001c7be:	74 ce                	je     c001c78e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c7c0:	31 c0                	xor    eax,eax
c001c7c2:	eb 06                	jmp    c001c7ca <IDE::polling(unsigned char, unsigned int)+0x62>
c001c7c4:	b0 01                	mov    al,0x1
c001c7c6:	eb 02                	jmp    c001c7ca <IDE::polling(unsigned char, unsigned int)+0x62>
c001c7c8:	b0 02                	mov    al,0x2
c001c7ca:	5b                   	pop    ebx
c001c7cb:	5e                   	pop    esi
c001c7cc:	5f                   	pop    edi
c001c7cd:	c3                   	ret    

c001c7ce <ATA::close(int, int, void*)>:
c001c7ce:	83 ec 0c             	sub    esp,0xc
c001c7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7db:	85 c0                	test   eax,eax
c001c7dd:	74 0c                	je     c001c7eb <ATA::close(int, int, void*)+0x1d>
c001c7df:	83 ec 0c             	sub    esp,0xc
c001c7e2:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7e4:	50                   	push   eax
c001c7e5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7e8:	83 c4 10             	add    esp,0x10
c001c7eb:	31 c0                	xor    eax,eax
c001c7ed:	83 c4 0c             	add    esp,0xc
c001c7f0:	c3                   	ret    
c001c7f1:	90                   	nop

c001c7f2 <ATA::powerSaving(PowerSavingLevel)>:
c001c7f2:	c3                   	ret    
c001c7f3:	90                   	nop

c001c7f4 <ATA::ATA()>:
c001c7f4:	83 ec 0c             	sub    esp,0xc
c001c7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fb:	83 ec 04             	sub    esp,0x4
c001c7fe:	68 00 02 00 00       	push   0x200
c001c803:	68 48 27 02 c0       	push   0xc0022748
c001c808:	50                   	push   eax
c001c809:	e8 ee 3f ff ff       	call   c00107fc <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c80e:	83 c4 10             	add    esp,0x10
c001c811:	ba 74 27 02 c0       	mov    edx,0xc0022774
c001c816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81a:	89 10                	mov    DWORD PTR [eax],edx
c001c81c:	90                   	nop
c001c81d:	83 c4 0c             	add    esp,0xc
c001c820:	c3                   	ret    
c001c821:	90                   	nop

c001c822 <ATA::flush(bool)>:
c001c822:	53                   	push   ebx
c001c823:	83 ec 08             	sub    esp,0x8
c001c826:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c82b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c82f:	19 c0                	sbb    eax,eax
c001c831:	83 e0 fd             	and    eax,0xfffffffd
c001c834:	05 ea 00 00 00       	add    eax,0xea
c001c839:	50                   	push   eax
c001c83a:	6a 07                	push   0x7
c001c83c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c843:	50                   	push   eax
c001c844:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c84a:	e8 6d f3 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c84f:	83 c4 0c             	add    esp,0xc
c001c852:	6a 00                	push   0x0
c001c854:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c85b:	50                   	push   eax
c001c85c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c862:	e8 01 ff ff ff       	call   c001c768 <IDE::polling(unsigned char, unsigned int)>
c001c867:	83 c4 18             	add    esp,0x18
c001c86a:	5b                   	pop    ebx
c001c86b:	c3                   	ret    

c001c86c <ATA::readyForCommand()>:
c001c86c:	56                   	push   esi
c001c86d:	53                   	push   ebx
c001c86e:	31 db                	xor    ebx,ebx
c001c870:	50                   	push   eax
c001c871:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c875:	50                   	push   eax
c001c876:	6a 0c                	push   0xc
c001c878:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c87f:	50                   	push   eax
c001c880:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c886:	e8 f1 f3 ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001c88b:	83 c4 10             	add    esp,0x10
c001c88e:	a8 88                	test   al,0x88
c001c890:	74 23                	je     c001c8b5 <ATA::readyForCommand()+0x49>
c001c892:	43                   	inc    ebx
c001c893:	83 fb 63             	cmp    ebx,0x63
c001c896:	7e dd                	jle    c001c875 <ATA::readyForCommand()+0x9>
c001c898:	51                   	push   ecx
c001c899:	51                   	push   ecx
c001c89a:	6a 00                	push   0x0
c001c89c:	68 40 42 0f 00       	push   0xf4240
c001c8a1:	e8 bf b9 ff ff       	call   c0018265 <nanoSleep(unsigned long long)>
c001c8a6:	83 c4 10             	add    esp,0x10
c001c8a9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c8af:	75 c4                	jne    c001c875 <ATA::readyForCommand()+0x9>
c001c8b1:	31 c0                	xor    eax,eax
c001c8b3:	eb 02                	jmp    c001c8b7 <ATA::readyForCommand()+0x4b>
c001c8b5:	b0 01                	mov    al,0x1
c001c8b7:	5a                   	pop    edx
c001c8b8:	5b                   	pop    ebx
c001c8b9:	5e                   	pop    esi
c001c8ba:	c3                   	ret    
c001c8bb:	90                   	nop

c001c8bc <ATA::access(unsigned long long, int, void*, bool)>:
c001c8bc:	55                   	push   ebp
c001c8bd:	57                   	push   edi
c001c8be:	56                   	push   esi
c001c8bf:	53                   	push   ebx
c001c8c0:	83 ec 2c             	sub    esp,0x2c
c001c8c3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c8c7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c8cb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c8cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8d3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c8d7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c8db:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c8df:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c8e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8e9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c8ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8f3:	c1 e0 06             	shl    eax,0x6
c001c8f6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c8fe:	74 5d                	je     c001c95d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c900:	89 fa                	mov    edx,edi
c001c902:	89 f0                	mov    eax,esi
c001c904:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c908:	c1 ea 1c             	shr    edx,0x1c
c001c90b:	89 d1                	mov    ecx,edx
c001c90d:	09 c1                	or     ecx,eax
c001c90f:	74 25                	je     c001c936 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c911:	31 ed                	xor    ebp,ebp
c001c913:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c91a:	89 fa                	mov    edx,edi
c001c91c:	89 f0                	mov    eax,esi
c001c91e:	0f ad d0             	shrd   eax,edx,cl
c001c921:	d3 ea                	shr    edx,cl
c001c923:	f6 c1 20             	test   cl,0x20
c001c926:	74 02                	je     c001c92a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c928:	89 d0                	mov    eax,edx
c001c92a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c92e:	45                   	inc    ebp
c001c92f:	83 fd 06             	cmp    ebp,0x6
c001c932:	75 df                	jne    c001c913 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c934:	eb 76                	jmp    c001c9ac <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c936:	89 f0                	mov    eax,esi
c001c938:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c93d:	89 fa                	mov    edx,edi
c001c93f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c946:	0f ac d0 10          	shrd   eax,edx,0x10
c001c94a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c94f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c953:	c1 ee 18             	shr    esi,0x18
c001c956:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c95b:	eb 56                	jmp    c001c9b3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c95d:	6a 00                	push   0x0
c001c95f:	6a 3f                	push   0x3f
c001c961:	57                   	push   edi
c001c962:	56                   	push   esi
c001c963:	e8 e4 1e 00 00       	call   c001e84c <__umoddi3>
c001c968:	83 c4 10             	add    esp,0x10
c001c96b:	40                   	inc    eax
c001c96c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c970:	6a 00                	push   0x0
c001c972:	68 f0 03 00 00       	push   0x3f0
c001c977:	57                   	push   edi
c001c978:	56                   	push   esi
c001c979:	e8 ce 1d 00 00       	call   c001e74c <__udivdi3>
c001c97e:	83 c4 10             	add    esp,0x10
c001c981:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c986:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c98d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c992:	6a 00                	push   0x0
c001c994:	6a 3f                	push   0x3f
c001c996:	57                   	push   edi
c001c997:	56                   	push   esi
c001c998:	e8 af 1d 00 00       	call   c001e74c <__udivdi3>
c001c99d:	83 c4 10             	add    esp,0x10
c001c9a0:	89 c6                	mov    esi,eax
c001c9a2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c9a7:	83 e6 0f             	and    esi,0xf
c001c9aa:	eb 07                	jmp    c001c9b3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c9ac:	31 f6                	xor    esi,esi
c001c9ae:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c9b3:	bf 01 00 00 00       	mov    edi,0x1
c001c9b8:	50                   	push   eax
c001c9b9:	6a 00                	push   0x0
c001c9bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9c2:	50                   	push   eax
c001c9c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9c7:	e8 fc f3 ff ff       	call   c001bdc8 <IDE::enableIRQs(unsigned char, bool)>
c001c9cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9cf:	e8 98 fe ff ff       	call   c001c86c <ATA::readyForCommand()>
c001c9d4:	83 c4 10             	add    esp,0x10
c001c9d7:	84 c0                	test   al,al
c001c9d9:	0f 84 50 02 00 00    	je     c001cc2f <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c9df:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c9e5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c9eb:	c1 e0 04             	shl    eax,0x4
c001c9ee:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c9f5:	09 c6                	or     esi,eax
c001c9f7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c9fc:	75 05                	jne    c001ca03 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c9fe:	83 ce a0             	or     esi,0xffffffa0
c001ca01:	eb 03                	jmp    c001ca06 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ca03:	83 ce e0             	or     esi,0xffffffe0
c001ca06:	89 f0                	mov    eax,esi
c001ca08:	0f b6 f0             	movzx  esi,al
c001ca0b:	56                   	push   esi
c001ca0c:	6a 06                	push   0x6
c001ca0e:	51                   	push   ecx
c001ca0f:	52                   	push   edx
c001ca10:	e8 a7 f1 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca15:	83 c4 10             	add    esp,0x10
c001ca18:	6a 00                	push   0x0
c001ca1a:	6a 01                	push   0x1
c001ca1c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca23:	50                   	push   eax
c001ca24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca2a:	e8 8d f1 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca2f:	83 c4 10             	add    esp,0x10
c001ca32:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca37:	75 6e                	jne    c001caa7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ca39:	6a 00                	push   0x0
c001ca3b:	6a 08                	push   0x8
c001ca3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca44:	50                   	push   eax
c001ca45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca4b:	e8 6c f1 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca50:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca55:	50                   	push   eax
c001ca56:	6a 09                	push   0x9
c001ca58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca5f:	50                   	push   eax
c001ca60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca66:	e8 51 f1 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca6b:	83 c4 20             	add    esp,0x20
c001ca6e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca73:	50                   	push   eax
c001ca74:	6a 0a                	push   0xa
c001ca76:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca7d:	50                   	push   eax
c001ca7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca84:	e8 33 f1 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca89:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ca8e:	50                   	push   eax
c001ca8f:	6a 0b                	push   0xb
c001ca91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca98:	50                   	push   eax
c001ca99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca9f:	e8 18 f1 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa4:	83 c4 20             	add    esp,0x20
c001caa7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001caac:	50                   	push   eax
c001caad:	6a 02                	push   0x2
c001caaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab6:	50                   	push   eax
c001cab7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cabd:	e8 fa f0 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cac7:	50                   	push   eax
c001cac8:	6a 03                	push   0x3
c001caca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cad1:	50                   	push   eax
c001cad2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cad8:	e8 df f0 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cadd:	83 c4 20             	add    esp,0x20
c001cae0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cae5:	50                   	push   eax
c001cae6:	6a 04                	push   0x4
c001cae8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caef:	50                   	push   eax
c001caf0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caf6:	e8 c1 f0 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cafb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb00:	50                   	push   eax
c001cb01:	6a 05                	push   0x5
c001cb03:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb0a:	50                   	push   eax
c001cb0b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb11:	e8 a6 f0 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb16:	83 c4 20             	add    esp,0x20
c001cb19:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001cb1e:	0f 94 c0             	sete   al
c001cb21:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb26:	74 09                	je     c001cb31 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cb28:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001cb2f:	eb 07                	jmp    c001cb38 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001cb31:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cb38:	0f b6 c0             	movzx  eax,al
c001cb3b:	50                   	push   eax
c001cb3c:	6a 07                	push   0x7
c001cb3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb45:	50                   	push   eax
c001cb46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb4c:	e8 6b f0 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb51:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb55:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb59:	83 c4 10             	add    esp,0x10
c001cb5c:	85 f6                	test   esi,esi
c001cb5e:	0f 84 ac 00 00 00    	je     c001cc10 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cb64:	50                   	push   eax
c001cb65:	6a 01                	push   0x1
c001cb67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb6e:	50                   	push   eax
c001cb6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb75:	e8 ee fb ff ff       	call   c001c768 <IDE::polling(unsigned char, unsigned int)>
c001cb7a:	83 c4 10             	add    esp,0x10
c001cb7d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb83:	84 c0                	test   al,al
c001cb85:	74 20                	je     c001cba7 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cb87:	0f b6 f8             	movzx  edi,al
c001cb8a:	0f b6 d2             	movzx  edx,dl
c001cb8d:	57                   	push   edi
c001cb8e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb95:	50                   	push   eax
c001cb96:	52                   	push   edx
c001cb97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb9d:	e8 30 fa ff ff       	call   c001c5d2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cba2:	e9 85 00 00 00       	jmp    c001cc2c <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cba7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cbac:	74 41                	je     c001cbef <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cbae:	31 c9                	xor    ecx,ecx
c001cbb0:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cbb4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cbb8:	50                   	push   eax
c001cbb9:	50                   	push   eax
c001cbba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbc1:	50                   	push   eax
c001cbc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbc8:	e8 dd ef ff ff       	call   c001bbaa <IDE::getBase(unsigned char)>
c001cbcd:	89 c2                	mov    edx,eax
c001cbcf:	89 e8                	mov    eax,ebp
c001cbd1:	66 ef                	out    dx,ax
c001cbd3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	41                   	inc    ecx
c001cbdb:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cbe1:	75 cd                	jne    c001cbb0 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cbe3:	4e                   	dec    esi
c001cbe4:	81 c7 00 02 00 00    	add    edi,0x200
c001cbea:	e9 6d ff ff ff       	jmp    c001cb5c <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cbef:	0f b6 d2             	movzx  edx,dl
c001cbf2:	51                   	push   ecx
c001cbf3:	51                   	push   ecx
c001cbf4:	52                   	push   edx
c001cbf5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbfb:	e8 aa ef ff ff       	call   c001bbaa <IDE::getBase(unsigned char)>
c001cc00:	b9 00 01 00 00       	mov    ecx,0x100
c001cc05:	89 c2                	mov    edx,eax
c001cc07:	fc                   	cld    
c001cc08:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	eb d3                	jmp    c001cbe3 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cc10:	31 ff                	xor    edi,edi
c001cc12:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc17:	74 16                	je     c001cc2f <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cc19:	50                   	push   eax
c001cc1a:	50                   	push   eax
c001cc1b:	31 c0                	xor    eax,eax
c001cc1d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cc22:	0f 94 c0             	sete   al
c001cc25:	50                   	push   eax
c001cc26:	53                   	push   ebx
c001cc27:	e8 f6 fb ff ff       	call   c001c822 <ATA::flush(bool)>
c001cc2c:	83 c4 10             	add    esp,0x10
c001cc2f:	83 c4 2c             	add    esp,0x2c
c001cc32:	89 f8                	mov    eax,edi
c001cc34:	5b                   	pop    ebx
c001cc35:	5e                   	pop    esi
c001cc36:	5f                   	pop    edi
c001cc37:	5d                   	pop    ebp
c001cc38:	c3                   	ret    
c001cc39:	90                   	nop

c001cc3a <ATA::read(unsigned long long, int, void*)>:
c001cc3a:	57                   	push   edi
c001cc3b:	b8 04 00 00 00       	mov    eax,0x4
c001cc40:	56                   	push   esi
c001cc41:	53                   	push   ebx
c001cc42:	83 ec 10             	sub    esp,0x10
c001cc45:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc49:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc4d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc50:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc58:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc5e:	77 3b                	ja     c001cc9b <ATA::read(unsigned long long, int, void*)+0x61>
c001cc60:	b8 06 00 00 00       	mov    eax,0x6
c001cc65:	85 d2                	test   edx,edx
c001cc67:	74 32                	je     c001cc9b <ATA::read(unsigned long long, int, void*)+0x61>
c001cc69:	50                   	push   eax
c001cc6a:	50                   	push   eax
c001cc6b:	6a 00                	push   0x0
c001cc6d:	52                   	push   edx
c001cc6e:	53                   	push   ebx
c001cc6f:	57                   	push   edi
c001cc70:	56                   	push   esi
c001cc71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc75:	e8 42 fc ff ff       	call   c001c8bc <ATA::access(unsigned long long, int, void*, bool)>
c001cc7a:	83 c4 20             	add    esp,0x20
c001cc7d:	85 c0                	test   eax,eax
c001cc7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc83:	75 11                	jne    c001cc96 <ATA::read(unsigned long long, int, void*)+0x5c>
c001cc85:	01 1d c4 54 02 c0    	add    DWORD PTR ds:0xc00254c4,ebx
c001cc8b:	e8 e4 fe fe ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c001cc90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc94:	eb 05                	jmp    c001cc9b <ATA::read(unsigned long long, int, void*)+0x61>
c001cc96:	b8 01 00 00 00       	mov    eax,0x1
c001cc9b:	83 c4 10             	add    esp,0x10
c001cc9e:	5b                   	pop    ebx
c001cc9f:	5e                   	pop    esi
c001cca0:	5f                   	pop    edi
c001cca1:	c3                   	ret    

c001cca2 <ATA::write(unsigned long long, int, void*)>:
c001cca2:	57                   	push   edi
c001cca3:	b8 04 00 00 00       	mov    eax,0x4
c001cca8:	56                   	push   esi
c001cca9:	53                   	push   ebx
c001ccaa:	83 ec 10             	sub    esp,0x10
c001ccad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ccb1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ccb5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001ccb8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ccbc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccc0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001ccc6:	77 3b                	ja     c001cd03 <ATA::write(unsigned long long, int, void*)+0x61>
c001ccc8:	b8 06 00 00 00       	mov    eax,0x6
c001cccd:	85 d2                	test   edx,edx
c001cccf:	74 32                	je     c001cd03 <ATA::write(unsigned long long, int, void*)+0x61>
c001ccd1:	50                   	push   eax
c001ccd2:	50                   	push   eax
c001ccd3:	6a 01                	push   0x1
c001ccd5:	52                   	push   edx
c001ccd6:	53                   	push   ebx
c001ccd7:	57                   	push   edi
c001ccd8:	56                   	push   esi
c001ccd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccdd:	e8 da fb ff ff       	call   c001c8bc <ATA::access(unsigned long long, int, void*, bool)>
c001cce2:	83 c4 20             	add    esp,0x20
c001cce5:	85 c0                	test   eax,eax
c001cce7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cceb:	75 11                	jne    c001ccfe <ATA::write(unsigned long long, int, void*)+0x5c>
c001cced:	01 1d c0 54 02 c0    	add    DWORD PTR ds:0xc00254c0,ebx
c001ccf3:	e8 7c fe fe ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c001ccf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccfc:	eb 05                	jmp    c001cd03 <ATA::write(unsigned long long, int, void*)+0x61>
c001ccfe:	b8 01 00 00 00       	mov    eax,0x1
c001cd03:	83 c4 10             	add    esp,0x10
c001cd06:	5b                   	pop    ebx
c001cd07:	5e                   	pop    esi
c001cd08:	5f                   	pop    edi
c001cd09:	c3                   	ret    

c001cd0a <ATA::detectCHS()>:
c001cd0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd0e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cd14:	c1 e0 06             	shl    eax,0x6
c001cd17:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cd1d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cd27:	c7 44 24 04 57 27 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022757
c001cd2f:	e9 4c 7f ff ff       	jmp    c0014c80 <Krnl::panic(char const*)>

c001cd34 <ATA::open(int, int, void*)>:
c001cd34:	53                   	push   ebx
c001cd35:	83 ec 08             	sub    esp,0x8
c001cd38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd44:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cd4a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd50:	c1 e0 06             	shl    eax,0x6
c001cd53:	01 d0                	add    eax,edx
c001cd55:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cd5c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cd62:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cd69:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cd73:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cd79:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cd80:	75 0c                	jne    c001cd8e <ATA::open(int, int, void*)+0x5a>
c001cd82:	83 ec 0c             	sub    esp,0xc
c001cd85:	53                   	push   ebx
c001cd86:	e8 7f ff ff ff       	call   c001cd0a <ATA::detectCHS()>
c001cd8b:	83 c4 10             	add    esp,0x10
c001cd8e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd94:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd9a:	c1 e0 06             	shl    eax,0x6
c001cd9d:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cda4:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cdae:	d1 e8                	shr    eax,1
c001cdb0:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cdb6:	6a 04                	push   0x4
c001cdb8:	6a 0c                	push   0xc
c001cdba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdc1:	50                   	push   eax
c001cdc2:	52                   	push   edx
c001cdc3:	e8 f4 ed ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdc8:	90                   	nop
c001cdc9:	90                   	nop
c001cdca:	6a 00                	push   0x0
c001cdcc:	6a 0c                	push   0xc
c001cdce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdd5:	50                   	push   eax
c001cdd6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cddc:	e8 db ed ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cde1:	83 c4 14             	add    esp,0x14
c001cde4:	53                   	push   ebx
c001cde5:	e8 7a 3a ff ff       	call   c0010864 <PhysicalDisk::startCache()>
c001cdea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cded:	e8 80 53 ff ff       	call   c0012172 <createPartitionsForDisk(PhysicalDisk*)>
c001cdf2:	31 c0                	xor    eax,eax
c001cdf4:	83 c4 18             	add    esp,0x18
c001cdf7:	5b                   	pop    ebx
c001cdf8:	c3                   	ret    
c001cdf9:	90                   	nop

c001cdfa <ATAPI::write(unsigned long long, int, void*)>:
c001cdfa:	b8 03 00 00 00       	mov    eax,0x3
c001cdff:	c3                   	ret    

c001ce00 <ATAPI::close(int, int, void*)>:
c001ce00:	83 ec 0c             	sub    esp,0xc
c001ce03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ce0d:	85 c0                	test   eax,eax
c001ce0f:	74 0c                	je     c001ce1d <ATAPI::close(int, int, void*)+0x1d>
c001ce11:	83 ec 0c             	sub    esp,0xc
c001ce14:	8b 10                	mov    edx,DWORD PTR [eax]
c001ce16:	50                   	push   eax
c001ce17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ce1a:	83 c4 10             	add    esp,0x10
c001ce1d:	31 c0                	xor    eax,eax
c001ce1f:	83 c4 0c             	add    esp,0xc
c001ce22:	c3                   	ret    
c001ce23:	90                   	nop

c001ce24 <ATAPI::ATAPI()>:
c001ce24:	83 ec 0c             	sub    esp,0xc
c001ce27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce2b:	83 ec 04             	sub    esp,0x4
c001ce2e:	68 00 08 00 00       	push   0x800
c001ce33:	68 a0 27 02 c0       	push   0xc00227a0
c001ce38:	50                   	push   eax
c001ce39:	e8 be 39 ff ff       	call   c00107fc <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ce3e:	83 c4 10             	add    esp,0x10
c001ce41:	ba e0 27 02 c0       	mov    edx,0xc00227e0
c001ce46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce4a:	89 10                	mov    DWORD PTR [eax],edx
c001ce4c:	90                   	nop
c001ce4d:	83 c4 0c             	add    esp,0xc
c001ce50:	c3                   	ret    
c001ce51:	90                   	nop

c001ce52 <ATAPI::readyForCommand()>:
c001ce52:	56                   	push   esi
c001ce53:	53                   	push   ebx
c001ce54:	31 db                	xor    ebx,ebx
c001ce56:	50                   	push   eax
c001ce57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce5b:	50                   	push   eax
c001ce5c:	6a 0c                	push   0xc
c001ce5e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ce65:	50                   	push   eax
c001ce66:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ce6c:	e8 0b ee ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001ce71:	83 c4 10             	add    esp,0x10
c001ce74:	a8 88                	test   al,0x88
c001ce76:	74 23                	je     c001ce9b <ATAPI::readyForCommand()+0x49>
c001ce78:	43                   	inc    ebx
c001ce79:	83 fb 63             	cmp    ebx,0x63
c001ce7c:	7e dd                	jle    c001ce5b <ATAPI::readyForCommand()+0x9>
c001ce7e:	51                   	push   ecx
c001ce7f:	51                   	push   ecx
c001ce80:	6a 00                	push   0x0
c001ce82:	68 40 42 0f 00       	push   0xf4240
c001ce87:	e8 d9 b3 ff ff       	call   c0018265 <nanoSleep(unsigned long long)>
c001ce8c:	83 c4 10             	add    esp,0x10
c001ce8f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ce95:	75 c4                	jne    c001ce5b <ATAPI::readyForCommand()+0x9>
c001ce97:	31 c0                	xor    eax,eax
c001ce99:	eb 02                	jmp    c001ce9d <ATAPI::readyForCommand()+0x4b>
c001ce9b:	b0 01                	mov    al,0x1
c001ce9d:	5a                   	pop    edx
c001ce9e:	5b                   	pop    ebx
c001ce9f:	5e                   	pop    esi
c001cea0:	c3                   	ret    
c001cea1:	90                   	nop

c001cea2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cea2:	55                   	push   ebp
c001cea3:	57                   	push   edi
c001cea4:	56                   	push   esi
c001cea5:	53                   	push   ebx
c001cea6:	83 ec 20             	sub    esp,0x20
c001cea9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cead:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ceb1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ceb5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ceb9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cebd:	6a 01                	push   0x1
c001cebf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cec6:	50                   	push   eax
c001cec7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cecd:	e8 f6 ee ff ff       	call   c001bdc8 <IDE::enableIRQs(unsigned char, bool)>
c001ced2:	5e                   	pop    esi
c001ced3:	58                   	pop    eax
c001ced4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cedb:	50                   	push   eax
c001cedc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cee2:	e8 af ec ff ff       	call   c001bb96 <IDE::prepareInterrupt(unsigned char)>
c001cee7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ceea:	e8 63 ff ff ff       	call   c001ce52 <ATAPI::readyForCommand()>
c001ceef:	83 c4 10             	add    esp,0x10
c001cef2:	84 c0                	test   al,al
c001cef4:	75 0a                	jne    c001cf00 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cef6:	bb 01 00 00 00       	mov    ebx,0x1
c001cefb:	e9 57 02 00 00       	jmp    c001d157 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cf00:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cf06:	c1 e0 04             	shl    eax,0x4
c001cf09:	0f b6 c0             	movzx  eax,al
c001cf0c:	50                   	push   eax
c001cf0d:	6a 06                	push   0x6
c001cf0f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf16:	50                   	push   eax
c001cf17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf1d:	e8 9a ec ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf22:	6a 00                	push   0x0
c001cf24:	6a 01                	push   0x1
c001cf26:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf2d:	50                   	push   eax
c001cf2e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf34:	e8 83 ec ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf39:	83 c4 20             	add    esp,0x20
c001cf3c:	0f b6 c3             	movzx  eax,bl
c001cf3f:	0f b6 df             	movzx  ebx,bh
c001cf42:	50                   	push   eax
c001cf43:	6a 04                	push   0x4
c001cf45:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf4c:	50                   	push   eax
c001cf4d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf53:	e8 64 ec ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf58:	53                   	push   ebx
c001cf59:	6a 05                	push   0x5
c001cf5b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf62:	50                   	push   eax
c001cf63:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf69:	e8 4e ec ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf6e:	83 c4 20             	add    esp,0x20
c001cf71:	68 a0 00 00 00       	push   0xa0
c001cf76:	6a 07                	push   0x7
c001cf78:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf7f:	50                   	push   eax
c001cf80:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf86:	e8 31 ec ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf8b:	83 c4 0c             	add    esp,0xc
c001cf8e:	6a 01                	push   0x1
c001cf90:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf97:	50                   	push   eax
c001cf98:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf9e:	e8 c5 f7 ff ff       	call   c001c768 <IDE::polling(unsigned char, unsigned int)>
c001cfa3:	83 c4 10             	add    esp,0x10
c001cfa6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cfac:	84 c0                	test   al,al
c001cfae:	74 23                	je     c001cfd3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cfb0:	0f b6 d8             	movzx  ebx,al
c001cfb3:	0f b6 d2             	movzx  edx,dl
c001cfb6:	53                   	push   ebx
c001cfb7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cfbe:	50                   	push   eax
c001cfbf:	52                   	push   edx
c001cfc0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfc6:	e8 07 f6 ff ff       	call   c001c5d2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cfcb:	83 c4 10             	add    esp,0x10
c001cfce:	e9 84 01 00 00       	jmp    c001d157 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cfd3:	0f b6 d2             	movzx  edx,dl
c001cfd6:	53                   	push   ebx
c001cfd7:	53                   	push   ebx
c001cfd8:	52                   	push   edx
c001cfd9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfdf:	e8 c6 eb ff ff       	call   c001bbaa <IDE::getBase(unsigned char)>
c001cfe4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cfe8:	b9 06 00 00 00       	mov    ecx,0x6
c001cfed:	89 c2                	mov    edx,eax
c001cfef:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cff2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cff6:	83 c4 10             	add    esp,0x10
c001cff9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cfff:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d006:	85 db                	test   ebx,ebx
c001d008:	0f 84 ec 00 00 00    	je     c001d0fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d00e:	51                   	push   ecx
c001d00f:	51                   	push   ecx
c001d010:	52                   	push   edx
c001d011:	50                   	push   eax
c001d012:	e8 13 ed ff ff       	call   c001bd2a <IDE::waitInterrupt(unsigned char)>
c001d017:	83 c4 10             	add    esp,0x10
c001d01a:	84 c0                	test   al,al
c001d01c:	0f 84 d4 fe ff ff    	je     c001cef6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d022:	56                   	push   esi
c001d023:	56                   	push   esi
c001d024:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d02b:	50                   	push   eax
c001d02c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d032:	e8 5f eb ff ff       	call   c001bb96 <IDE::prepareInterrupt(unsigned char)>
c001d037:	83 c4 0c             	add    esp,0xc
c001d03a:	6a 04                	push   0x4
c001d03c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d043:	50                   	push   eax
c001d044:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d04a:	e8 2d ec ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001d04f:	83 c4 0c             	add    esp,0xc
c001d052:	89 c6                	mov    esi,eax
c001d054:	6a 05                	push   0x5
c001d056:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d05d:	50                   	push   eax
c001d05e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d064:	e8 13 ec ff ff       	call   c001bc7c <IDE::read(unsigned char, unsigned char)>
c001d069:	89 f1                	mov    ecx,esi
c001d06b:	0f b6 c0             	movzx  eax,al
c001d06e:	0f b6 f1             	movzx  esi,cl
c001d071:	c1 e0 08             	shl    eax,0x8
c001d074:	09 c6                	or     esi,eax
c001d076:	d1 fe                	sar    esi,1
c001d078:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d07c:	83 c4 10             	add    esp,0x10
c001d07f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d084:	74 41                	je     c001d0c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d086:	31 c9                	xor    ecx,ecx
c001d088:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d08e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d095:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d099:	75 0a                	jne    c001d0a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d09b:	01 c9                	add    ecx,ecx
c001d09d:	01 cd                	add    ebp,ecx
c001d09f:	4b                   	dec    ebx
c001d0a0:	e9 54 ff ff ff       	jmp    c001cff9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d0a5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d0aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d0ae:	51                   	push   ecx
c001d0af:	51                   	push   ecx
c001d0b0:	52                   	push   edx
c001d0b1:	50                   	push   eax
c001d0b2:	e8 f3 ea ff ff       	call   c001bbaa <IDE::getBase(unsigned char)>
c001d0b7:	89 c2                	mov    edx,eax
c001d0b9:	89 f0                	mov    eax,esi
c001d0bb:	66 ef                	out    dx,ax
c001d0bd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d0c1:	83 c4 10             	add    esp,0x10
c001d0c4:	41                   	inc    ecx
c001d0c5:	eb c1                	jmp    c001d088 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d0c7:	31 f6                	xor    esi,esi
c001d0c9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d0cf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d0d6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d0da:	75 06                	jne    c001d0e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d0dc:	01 f6                	add    esi,esi
c001d0de:	01 f5                	add    ebp,esi
c001d0e0:	eb bd                	jmp    c001d09f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d0e2:	51                   	push   ecx
c001d0e3:	51                   	push   ecx
c001d0e4:	52                   	push   edx
c001d0e5:	50                   	push   eax
c001d0e6:	e8 bf ea ff ff       	call   c001bbaa <IDE::getBase(unsigned char)>
c001d0eb:	89 c2                	mov    edx,eax
c001d0ed:	66 ed                	in     ax,dx
c001d0ef:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d0f4:	83 c4 10             	add    esp,0x10
c001d0f7:	46                   	inc    esi
c001d0f8:	eb cf                	jmp    c001d0c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d0fa:	51                   	push   ecx
c001d0fb:	51                   	push   ecx
c001d0fc:	52                   	push   edx
c001d0fd:	50                   	push   eax
c001d0fe:	e8 27 ec ff ff       	call   c001bd2a <IDE::waitInterrupt(unsigned char)>
c001d103:	83 c4 10             	add    esp,0x10
c001d106:	84 c0                	test   al,al
c001d108:	0f 84 e8 fd ff ff    	je     c001cef6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d10e:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d113:	52                   	push   edx
c001d114:	52                   	push   edx
c001d115:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d11c:	50                   	push   eax
c001d11d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d123:	e8 6e ea ff ff       	call   c001bb96 <IDE::prepareInterrupt(unsigned char)>
c001d128:	83 c4 10             	add    esp,0x10
c001d12b:	50                   	push   eax
c001d12c:	50                   	push   eax
c001d12d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d134:	50                   	push   eax
c001d135:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d13b:	e8 6a ea ff ff       	call   c001bbaa <IDE::getBase(unsigned char)>
c001d140:	8d 50 07             	lea    edx,[eax+0x7]
c001d143:	ec                   	in     al,dx
c001d144:	83 c4 10             	add    esp,0x10
c001d147:	a8 88                	test   al,0x88
c001d149:	74 0a                	je     c001d155 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d14b:	4b                   	dec    ebx
c001d14c:	75 dd                	jne    c001d12b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d14e:	bb 02 00 00 00       	mov    ebx,0x2
c001d153:	eb 02                	jmp    c001d157 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d155:	31 db                	xor    ebx,ebx
c001d157:	83 c4 1c             	add    esp,0x1c
c001d15a:	89 d8                	mov    eax,ebx
c001d15c:	5b                   	pop    ebx
c001d15d:	5e                   	pop    esi
c001d15e:	5f                   	pop    edi
c001d15f:	5d                   	pop    ebp
c001d160:	c3                   	ret    
c001d161:	90                   	nop

c001d162 <ATAPI::diskRemoved()>:
c001d162:	83 ec 18             	sub    esp,0x18
c001d165:	68 ab 27 02 c0       	push   0xc00227ab
c001d16a:	e8 7c 1e ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001d16f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d173:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d17a:	83 c4 1c             	add    esp,0x1c
c001d17d:	c3                   	ret    

c001d17e <ATAPI::eject()>:
c001d17e:	57                   	push   edi
c001d17f:	b9 03 00 00 00       	mov    ecx,0x3
c001d184:	53                   	push   ebx
c001d185:	83 ec 14             	sub    esp,0x14
c001d188:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d18c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d190:	fc                   	cld    
c001d191:	31 c0                	xor    eax,eax
c001d193:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d195:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d19a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d19f:	50                   	push   eax
c001d1a0:	50                   	push   eax
c001d1a1:	6a 00                	push   0x0
c001d1a3:	6a 00                	push   0x0
c001d1a5:	6a 00                	push   0x0
c001d1a7:	6a 02                	push   0x2
c001d1a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d1ad:	50                   	push   eax
c001d1ae:	53                   	push   ebx
c001d1af:	e8 ee fc ff ff       	call   c001cea2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d1b4:	83 c4 14             	add    esp,0x14
c001d1b7:	53                   	push   ebx
c001d1b8:	e8 a5 ff ff ff       	call   c001d162 <ATAPI::diskRemoved()>
c001d1bd:	83 c4 24             	add    esp,0x24
c001d1c0:	5b                   	pop    ebx
c001d1c1:	5f                   	pop    edi
c001d1c2:	c3                   	ret    
c001d1c3:	90                   	nop

c001d1c4 <ATAPI::diskInserted()>:
c001d1c4:	53                   	push   ebx
c001d1c5:	83 ec 14             	sub    esp,0x14
c001d1c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d1cc:	68 c1 27 02 c0       	push   0xc00227c1
c001d1d1:	e8 15 1e ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001d1d6:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d1dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1e0:	e8 7f 36 ff ff       	call   c0010864 <PhysicalDisk::startCache()>
c001d1e5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d1e9:	83 c4 18             	add    esp,0x18
c001d1ec:	5b                   	pop    ebx
c001d1ed:	e9 80 4f ff ff       	jmp    c0012172 <createPartitionsForDisk(PhysicalDisk*)>

c001d1f2 <ATAPI::detectMedia()>:
c001d1f2:	56                   	push   esi
c001d1f3:	53                   	push   ebx
c001d1f4:	83 ec 28             	sub    esp,0x28
c001d1f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d1fb:	6a 0c                	push   0xc
c001d1fd:	6a 00                	push   0x0
c001d1ff:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d203:	56                   	push   esi
c001d204:	e8 ff 33 fe ff       	call   c0000608 <memset>
c001d209:	58                   	pop    eax
c001d20a:	5a                   	pop    edx
c001d20b:	6a 00                	push   0x0
c001d20d:	6a 00                	push   0x0
c001d20f:	6a 00                	push   0x0
c001d211:	6a 00                	push   0x0
c001d213:	56                   	push   esi
c001d214:	53                   	push   ebx
c001d215:	e8 88 fc ff ff       	call   c001cea2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d21a:	83 c4 1c             	add    esp,0x1c
c001d21d:	6a 0c                	push   0xc
c001d21f:	6a 00                	push   0x0
c001d221:	56                   	push   esi
c001d222:	e8 e1 33 fe ff       	call   c0000608 <memset>
c001d227:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d22c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d231:	59                   	pop    ecx
c001d232:	58                   	pop    eax
c001d233:	6a 01                	push   0x1
c001d235:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d239:	50                   	push   eax
c001d23a:	6a 00                	push   0x0
c001d23c:	6a 12                	push   0x12
c001d23e:	56                   	push   esi
c001d23f:	53                   	push   ebx
c001d240:	e8 5d fc ff ff       	call   c001cea2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d245:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d249:	83 c4 20             	add    esp,0x20
c001d24c:	83 e0 7f             	and    eax,0x7f
c001d24f:	3c 70                	cmp    al,0x70
c001d251:	74 15                	je     c001d268 <ATAPI::detectMedia()+0x76>
c001d253:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d25a:	75 0c                	jne    c001d268 <ATAPI::detectMedia()+0x76>
c001d25c:	83 ec 0c             	sub    esp,0xc
c001d25f:	53                   	push   ebx
c001d260:	e8 5f ff ff ff       	call   c001d1c4 <ATAPI::diskInserted()>
c001d265:	83 c4 10             	add    esp,0x10
c001d268:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d26c:	83 e0 0f             	and    eax,0xf
c001d26f:	3c 02                	cmp    al,0x2
c001d271:	75 1b                	jne    c001d28e <ATAPI::detectMedia()+0x9c>
c001d273:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d278:	75 2d                	jne    c001d2a7 <ATAPI::detectMedia()+0xb5>
c001d27a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d281:	74 24                	je     c001d2a7 <ATAPI::detectMedia()+0xb5>
c001d283:	83 ec 0c             	sub    esp,0xc
c001d286:	53                   	push   ebx
c001d287:	e8 d6 fe ff ff       	call   c001d162 <ATAPI::diskRemoved()>
c001d28c:	eb 16                	jmp    c001d2a4 <ATAPI::detectMedia()+0xb2>
c001d28e:	84 c0                	test   al,al
c001d290:	75 15                	jne    c001d2a7 <ATAPI::detectMedia()+0xb5>
c001d292:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d299:	75 0c                	jne    c001d2a7 <ATAPI::detectMedia()+0xb5>
c001d29b:	83 ec 0c             	sub    esp,0xc
c001d29e:	53                   	push   ebx
c001d29f:	e8 20 ff ff ff       	call   c001d1c4 <ATAPI::diskInserted()>
c001d2a4:	83 c4 10             	add    esp,0x10
c001d2a7:	83 c4 24             	add    esp,0x24
c001d2aa:	5b                   	pop    ebx
c001d2ab:	5e                   	pop    esi
c001d2ac:	c3                   	ret    
c001d2ad:	90                   	nop

c001d2ae <ATAPI::open(int, int, void*)>:
c001d2ae:	53                   	push   ebx
c001d2af:	83 ec 08             	sub    esp,0x8
c001d2b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d2be:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d2c4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d2ca:	c1 e0 06             	shl    eax,0x6
c001d2cd:	01 d0                	add    eax,edx
c001d2cf:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d2d6:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d2dc:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d2e3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d2ed:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d2f3:	6a 04                	push   0x4
c001d2f5:	6a 0c                	push   0xc
c001d2f7:	51                   	push   ecx
c001d2f8:	52                   	push   edx
c001d2f9:	e8 be e8 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2fe:	90                   	nop
c001d2ff:	90                   	nop
c001d300:	6a 00                	push   0x0
c001d302:	6a 0c                	push   0xc
c001d304:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d30b:	50                   	push   eax
c001d30c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d312:	e8 a5 e8 ff ff       	call   c001bbbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d317:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d31e:	83 c4 14             	add    esp,0x14
c001d321:	53                   	push   ebx
c001d322:	e8 cb fe ff ff       	call   c001d1f2 <ATAPI::detectMedia()>
c001d327:	31 c0                	xor    eax,eax
c001d329:	83 c4 18             	add    esp,0x18
c001d32c:	5b                   	pop    ebx
c001d32d:	c3                   	ret    

c001d32e <ATAPI::read(unsigned long long, int, void*)>:
c001d32e:	55                   	push   ebp
c001d32f:	57                   	push   edi
c001d330:	56                   	push   esi
c001d331:	53                   	push   ebx
c001d332:	83 ec 1c             	sub    esp,0x1c
c001d335:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d339:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d33d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d341:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d348:	74 41                	je     c001d38b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d34a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d34e:	b9 03 00 00 00       	mov    ecx,0x3
c001d353:	fc                   	cld    
c001d354:	31 c0                	xor    eax,eax
c001d356:	86 fb                	xchg   bl,bh
c001d358:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d35a:	c1 c3 10             	rol    ebx,0x10
c001d35d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d362:	89 e8                	mov    eax,ebp
c001d364:	86 fb                	xchg   bl,bh
c001d366:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d36a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d36e:	50                   	push   eax
c001d36f:	50                   	push   eax
c001d370:	55                   	push   ebp
c001d371:	c1 e5 0b             	shl    ebp,0xb
c001d374:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d378:	6a 00                	push   0x0
c001d37a:	55                   	push   ebp
c001d37b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d37f:	50                   	push   eax
c001d380:	56                   	push   esi
c001d381:	e8 1c fb ff ff       	call   c001cea2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d386:	83 c4 20             	add    esp,0x20
c001d389:	eb 1a                	jmp    c001d3a5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d38b:	83 ec 0c             	sub    esp,0xc
c001d38e:	56                   	push   esi
c001d38f:	e8 5e fe ff ff       	call   c001d1f2 <ATAPI::detectMedia()>
c001d394:	83 c4 10             	add    esp,0x10
c001d397:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d39e:	75 aa                	jne    c001d34a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d3a0:	b8 02 00 00 00       	mov    eax,0x2
c001d3a5:	83 c4 1c             	add    esp,0x1c
c001d3a8:	5b                   	pop    ebx
c001d3a9:	5e                   	pop    esi
c001d3aa:	5f                   	pop    edi
c001d3ab:	5d                   	pop    ebp
c001d3ac:	c3                   	ret    
c001d3ad:	90                   	nop

c001d3ae <AVX::open(int, int, void*)>:
c001d3ae:	83 ec 0c             	sub    esp,0xc
c001d3b1:	e8 12 10 00 00       	call   c001e3c8 <avxInit>
c001d3b6:	b8 00 00 00 00       	mov    eax,0x0
c001d3bb:	83 c4 0c             	add    esp,0xc
c001d3be:	c3                   	ret    
c001d3bf:	90                   	nop

c001d3c0 <AVX::close(int, int, void*)>:
c001d3c0:	83 ec 0c             	sub    esp,0xc
c001d3c3:	e8 01 10 00 00       	call   c001e3c9 <avxClose>
c001d3c8:	b8 00 00 00 00       	mov    eax,0x0
c001d3cd:	83 c4 0c             	add    esp,0xc
c001d3d0:	c3                   	ret    
c001d3d1:	90                   	nop

c001d3d2 <AVX::available()>:
c001d3d2:	83 ec 0c             	sub    esp,0xc
c001d3d5:	e8 e6 0f 00 00       	call   c001e3c0 <avxDetect>
c001d3da:	85 c0                	test   eax,eax
c001d3dc:	0f 95 c0             	setne  al
c001d3df:	83 c4 0c             	add    esp,0xc
c001d3e2:	c3                   	ret    
c001d3e3:	90                   	nop

c001d3e4 <AVX::save(void*)>:
c001d3e4:	83 ec 0c             	sub    esp,0xc
c001d3e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3eb:	83 ec 0c             	sub    esp,0xc
c001d3ee:	50                   	push   eax
c001d3ef:	e8 d2 0f 00 00       	call   c001e3c6 <avxSave>
c001d3f4:	83 c4 10             	add    esp,0x10
c001d3f7:	90                   	nop
c001d3f8:	83 c4 0c             	add    esp,0xc
c001d3fb:	c3                   	ret    

c001d3fc <AVX::load(void*)>:
c001d3fc:	83 ec 0c             	sub    esp,0xc
c001d3ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d403:	83 ec 0c             	sub    esp,0xc
c001d406:	50                   	push   eax
c001d407:	e8 bb 0f 00 00       	call   c001e3c7 <avxLoad>
c001d40c:	83 c4 10             	add    esp,0x10
c001d40f:	90                   	nop
c001d410:	83 c4 0c             	add    esp,0xc
c001d413:	c3                   	ret    

c001d414 <AVX::AVX()>:
c001d414:	83 ec 0c             	sub    esp,0xc
c001d417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d41b:	83 ec 08             	sub    esp,0x8
c001d41e:	68 0c 28 02 c0       	push   0xc002280c
c001d423:	50                   	push   eax
c001d424:	e8 b1 34 ff ff       	call   c00108da <FPU::FPU(char const*)>
c001d429:	83 c4 10             	add    esp,0x10
c001d42c:	ba 1c 28 02 c0       	mov    edx,0xc002281c
c001d431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d435:	89 10                	mov    DWORD PTR [eax],edx
c001d437:	90                   	nop
c001d438:	83 c4 0c             	add    esp,0xc
c001d43b:	c3                   	ret    

c001d43c <MMX::available()>:
c001d43c:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c001d441:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d447:	83 e0 20             	and    eax,0x20
c001d44a:	84 c0                	test   al,al
c001d44c:	0f 95 c0             	setne  al
c001d44f:	c3                   	ret    

c001d450 <MMX::open(int, int, void*)>:
c001d450:	83 ec 0c             	sub    esp,0xc
c001d453:	e8 e4 0f 00 00       	call   c001e43c <x87Init>
c001d458:	b8 00 00 00 00       	mov    eax,0x0
c001d45d:	83 c4 0c             	add    esp,0xc
c001d460:	c3                   	ret    
c001d461:	90                   	nop

c001d462 <MMX::close(int, int, void*)>:
c001d462:	83 ec 0c             	sub    esp,0xc
c001d465:	e8 ec 0f 00 00       	call   c001e456 <x87Close>
c001d46a:	b8 00 00 00 00       	mov    eax,0x0
c001d46f:	83 c4 0c             	add    esp,0xc
c001d472:	c3                   	ret    
c001d473:	90                   	nop

c001d474 <MMX::save(void*)>:
c001d474:	83 ec 0c             	sub    esp,0xc
c001d477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d47b:	83 ec 0c             	sub    esp,0xc
c001d47e:	50                   	push   eax
c001d47f:	e8 ad 0f 00 00       	call   c001e431 <x87Save>
c001d484:	83 c4 10             	add    esp,0x10
c001d487:	90                   	nop
c001d488:	83 c4 0c             	add    esp,0xc
c001d48b:	c3                   	ret    

c001d48c <MMX::load(void*)>:
c001d48c:	83 ec 0c             	sub    esp,0xc
c001d48f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d493:	83 ec 0c             	sub    esp,0xc
c001d496:	50                   	push   eax
c001d497:	e8 9b 0f 00 00       	call   c001e437 <x87Load>
c001d49c:	83 c4 10             	add    esp,0x10
c001d49f:	90                   	nop
c001d4a0:	83 c4 0c             	add    esp,0xc
c001d4a3:	c3                   	ret    

c001d4a4 <MMX::MMX()>:
c001d4a4:	83 ec 0c             	sub    esp,0xc
c001d4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ab:	83 ec 08             	sub    esp,0x8
c001d4ae:	68 4c 28 02 c0       	push   0xc002284c
c001d4b3:	50                   	push   eax
c001d4b4:	e8 21 34 ff ff       	call   c00108da <FPU::FPU(char const*)>
c001d4b9:	83 c4 10             	add    esp,0x10
c001d4bc:	ba 5c 28 02 c0       	mov    edx,0xc002285c
c001d4c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4c5:	89 10                	mov    DWORD PTR [eax],edx
c001d4c7:	90                   	nop
c001d4c8:	83 c4 0c             	add    esp,0xc
c001d4cb:	c3                   	ret    

c001d4cc <SSE::open(int, int, void*)>:
c001d4cc:	83 ec 0c             	sub    esp,0xc
c001d4cf:	e8 23 0f 00 00       	call   c001e3f7 <sseInit>
c001d4d4:	b8 00 00 00 00       	mov    eax,0x0
c001d4d9:	83 c4 0c             	add    esp,0xc
c001d4dc:	c3                   	ret    
c001d4dd:	90                   	nop

c001d4de <SSE::close(int, int, void*)>:
c001d4de:	83 ec 0c             	sub    esp,0xc
c001d4e1:	e8 21 0f 00 00       	call   c001e407 <sseClose>
c001d4e6:	b8 00 00 00 00       	mov    eax,0x0
c001d4eb:	83 c4 0c             	add    esp,0xc
c001d4ee:	c3                   	ret    
c001d4ef:	90                   	nop

c001d4f0 <SSE::available()>:
c001d4f0:	83 ec 1c             	sub    esp,0x1c
c001d4f3:	e8 d8 0e 00 00       	call   c001e3d0 <sseDetect>
c001d4f8:	85 c0                	test   eax,eax
c001d4fa:	0f 95 c0             	setne  al
c001d4fd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d501:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d505:	83 c4 1c             	add    esp,0x1c
c001d508:	c3                   	ret    
c001d509:	90                   	nop

c001d50a <SSE::save(void*)>:
c001d50a:	83 ec 0c             	sub    esp,0xc
c001d50d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d511:	83 ec 0c             	sub    esp,0xc
c001d514:	50                   	push   eax
c001d515:	e8 d1 0e 00 00       	call   c001e3eb <sseSave>
c001d51a:	83 c4 10             	add    esp,0x10
c001d51d:	90                   	nop
c001d51e:	83 c4 0c             	add    esp,0xc
c001d521:	c3                   	ret    

c001d522 <SSE::load(void*)>:
c001d522:	83 ec 0c             	sub    esp,0xc
c001d525:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d529:	83 ec 0c             	sub    esp,0xc
c001d52c:	50                   	push   eax
c001d52d:	e8 bf 0e 00 00       	call   c001e3f1 <sseLoad>
c001d532:	83 c4 10             	add    esp,0x10
c001d535:	90                   	nop
c001d536:	83 c4 0c             	add    esp,0xc
c001d539:	c3                   	ret    

c001d53a <SSE::SSE()>:
c001d53a:	83 ec 0c             	sub    esp,0xc
c001d53d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d541:	83 ec 08             	sub    esp,0x8
c001d544:	68 8c 28 02 c0       	push   0xc002288c
c001d549:	50                   	push   eax
c001d54a:	e8 8b 33 ff ff       	call   c00108da <FPU::FPU(char const*)>
c001d54f:	83 c4 10             	add    esp,0x10
c001d552:	ba 9c 28 02 c0       	mov    edx,0xc002289c
c001d557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d55b:	89 10                	mov    DWORD PTR [eax],edx
c001d55d:	90                   	nop
c001d55e:	83 c4 0c             	add    esp,0xc
c001d561:	c3                   	ret    

c001d562 <x87::open(int, int, void*)>:
c001d562:	83 ec 0c             	sub    esp,0xc
c001d565:	e8 d2 0e 00 00       	call   c001e43c <x87Init>
c001d56a:	b8 00 00 00 00       	mov    eax,0x0
c001d56f:	83 c4 0c             	add    esp,0xc
c001d572:	c3                   	ret    
c001d573:	90                   	nop

c001d574 <x87::close(int, int, void*)>:
c001d574:	83 ec 0c             	sub    esp,0xc
c001d577:	e8 da 0e 00 00       	call   c001e456 <x87Close>
c001d57c:	b8 00 00 00 00       	mov    eax,0x0
c001d581:	83 c4 0c             	add    esp,0xc
c001d584:	c3                   	ret    
c001d585:	90                   	nop

c001d586 <x87::available()>:
c001d586:	83 ec 0c             	sub    esp,0xc
c001d589:	e8 88 0e 00 00       	call   c001e416 <x87Detect>
c001d58e:	85 c0                	test   eax,eax
c001d590:	0f 95 c0             	setne  al
c001d593:	83 c4 0c             	add    esp,0xc
c001d596:	c3                   	ret    
c001d597:	90                   	nop

c001d598 <x87::save(void*)>:
c001d598:	83 ec 0c             	sub    esp,0xc
c001d59b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d59f:	83 ec 0c             	sub    esp,0xc
c001d5a2:	50                   	push   eax
c001d5a3:	e8 89 0e 00 00       	call   c001e431 <x87Save>
c001d5a8:	83 c4 10             	add    esp,0x10
c001d5ab:	90                   	nop
c001d5ac:	83 c4 0c             	add    esp,0xc
c001d5af:	c3                   	ret    

c001d5b0 <x87::load(void*)>:
c001d5b0:	83 ec 0c             	sub    esp,0xc
c001d5b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5b7:	83 ec 0c             	sub    esp,0xc
c001d5ba:	50                   	push   eax
c001d5bb:	e8 77 0e 00 00       	call   c001e437 <x87Load>
c001d5c0:	83 c4 10             	add    esp,0x10
c001d5c3:	90                   	nop
c001d5c4:	83 c4 0c             	add    esp,0xc
c001d5c7:	c3                   	ret    

c001d5c8 <x87::x87()>:
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5cf:	83 ec 08             	sub    esp,0x8
c001d5d2:	68 cc 28 02 c0       	push   0xc00228cc
c001d5d7:	50                   	push   eax
c001d5d8:	e8 fd 32 ff ff       	call   c00108da <FPU::FPU(char const*)>
c001d5dd:	83 c4 10             	add    esp,0x10
c001d5e0:	ba dc 28 02 c0       	mov    edx,0xc00228dc
c001d5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e9:	89 10                	mov    DWORD PTR [eax],edx
c001d5eb:	90                   	nop
c001d5ec:	83 c4 0c             	add    esp,0xc
c001d5ef:	c3                   	ret    

c001d5f0 <APIC::disable()>:
c001d5f0:	90                   	nop
c001d5f1:	c3                   	ret    

c001d5f2 <APIC::close(int, int, void*)>:
c001d5f2:	55                   	push   ebp
c001d5f3:	89 e5                	mov    ebp,esp
c001d5f5:	83 ec 08             	sub    esp,0x8
c001d5f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5fd:	83 c0 3c             	add    eax,0x3c
c001d600:	8b 00                	mov    eax,DWORD PTR [eax]
c001d602:	83 ec 0c             	sub    esp,0xc
c001d605:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d608:	ff d0                	call   eax
c001d60a:	83 c4 10             	add    esp,0x10
c001d60d:	b8 00 00 00 00       	mov    eax,0x0
c001d612:	c9                   	leave  
c001d613:	c3                   	ret    

c001d614 <IOAPIC::close(int, int, void*)>:
c001d614:	b8 00 00 00 00       	mov    eax,0x0
c001d619:	c3                   	ret    

c001d61a <APIC::io_wait()>:
c001d61a:	eb 00                	jmp    c001d61c <APIC::io_wait()+0x2>
c001d61c:	eb 00                	jmp    c001d61e <APIC::io_wait()+0x4>
c001d61e:	90                   	nop
c001d61f:	c3                   	ret    

c001d620 <APIC::getBase()>:
c001d620:	55                   	push   ebp
c001d621:	89 e5                	mov    ebp,esp
c001d623:	83 ec 18             	sub    esp,0x18
c001d626:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c001d62b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d631:	83 e0 08             	and    eax,0x8
c001d634:	84 c0                	test   al,al
c001d636:	75 07                	jne    c001d63f <APIC::getBase()+0x1f>
c001d638:	b8 00 00 00 00       	mov    eax,0x0
c001d63d:	eb 21                	jmp    c001d660 <APIC::getBase()+0x40>
c001d63f:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c001d644:	83 ec 08             	sub    esp,0x8
c001d647:	6a 1b                	push   0x1b
c001d649:	50                   	push   eax
c001d64a:	e8 77 db fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001d64f:	83 c4 10             	add    esp,0x10
c001d652:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d655:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d658:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d65b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d660:	c9                   	leave  
c001d661:	c3                   	ret    

c001d662 <APIC::eoi(unsigned char)>:
c001d662:	55                   	push   ebp
c001d663:	89 e5                	mov    ebp,esp
c001d665:	83 ec 28             	sub    esp,0x28
c001d668:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d66b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d66e:	83 ec 0c             	sub    esp,0xc
c001d671:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d674:	e8 a7 ff ff ff       	call   c001d620 <APIC::getBase()>
c001d679:	83 c4 10             	add    esp,0x10
c001d67c:	05 b0 00 00 00       	add    eax,0xb0
c001d681:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d684:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d687:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d68d:	90                   	nop
c001d68e:	c9                   	leave  
c001d68f:	c3                   	ret    

c001d690 <APIC::open(int, int, void*)>:
c001d690:	55                   	push   ebp
c001d691:	89 e5                	mov    ebp,esp
c001d693:	57                   	push   edi
c001d694:	56                   	push   esi
c001d695:	53                   	push   ebx
c001d696:	83 ec 1c             	sub    esp,0x1c
c001d699:	83 ec 0c             	sub    esp,0xc
c001d69c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d69f:	e8 7c ff ff ff       	call   c001d620 <APIC::getBase()>
c001d6a4:	83 c4 10             	add    esp,0x10
c001d6a7:	05 f0 00 00 00       	add    eax,0xf0
c001d6ac:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d6af:	83 ec 0c             	sub    esp,0xc
c001d6b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6b5:	e8 66 ff ff ff       	call   c001d620 <APIC::getBase()>
c001d6ba:	83 c4 10             	add    esp,0x10
c001d6bd:	89 c2                	mov    edx,eax
c001d6bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6c2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d6c8:	0f b6 f8             	movzx  edi,al
c001d6cb:	89 d0                	mov    eax,edx
c001d6cd:	ba 00 00 00 00       	mov    edx,0x0
c001d6d2:	89 c1                	mov    ecx,eax
c001d6d4:	80 e5 ff             	and    ch,0xff
c001d6d7:	89 cb                	mov    ebx,ecx
c001d6d9:	0f b6 f2             	movzx  esi,dl
c001d6dc:	89 d8                	mov    eax,ebx
c001d6de:	89 f2                	mov    edx,esi
c001d6e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d6e3:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d6e6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d6ea:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d6ee:	83 e0 00             	and    eax,0x0
c001d6f1:	09 d0                	or     eax,edx
c001d6f3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d6f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6fa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d700:	8d 50 01             	lea    edx,[eax+0x1]
c001d703:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d706:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d70c:	0f b6 d0             	movzx  edx,al
c001d70f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d712:	83 c2 08             	add    edx,0x8
c001d715:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d719:	0f b6 c9             	movzx  ecx,cl
c001d71c:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d722:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d726:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d729:	8b 00                	mov    eax,DWORD PTR [eax]
c001d72b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d72e:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d735:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d738:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d73b:	89 10                	mov    DWORD PTR [eax],edx
c001d73d:	b8 00 00 00 00       	mov    eax,0x0
c001d742:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d745:	5b                   	pop    ebx
c001d746:	5e                   	pop    esi
c001d747:	5f                   	pop    edi
c001d748:	5d                   	pop    ebp
c001d749:	c3                   	ret    

c001d74a <IOAPIC::IOAPIC()>:
c001d74a:	83 ec 0c             	sub    esp,0xc
c001d74d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d751:	83 ec 08             	sub    esp,0x8
c001d754:	68 0c 29 02 c0       	push   0xc002290c
c001d759:	50                   	push   eax
c001d75a:	e8 87 2e ff ff       	call   c00105e6 <Device::Device(char const*)>
c001d75f:	83 c4 10             	add    esp,0x10
c001d762:	ba 34 2a 02 c0       	mov    edx,0xc0022a34
c001d767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d76b:	89 10                	mov    DWORD PTR [eax],edx
c001d76d:	90                   	nop
c001d76e:	83 c4 0c             	add    esp,0xc
c001d771:	c3                   	ret    

c001d772 <APIC::APIC()>:
c001d772:	53                   	push   ebx
c001d773:	83 ec 18             	sub    esp,0x18
c001d776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d77a:	83 ec 08             	sub    esp,0x8
c001d77d:	68 14 29 02 c0       	push   0xc0022914
c001d782:	50                   	push   eax
c001d783:	e8 a0 35 ff ff       	call   c0010d28 <InterruptController::InterruptController(char const*)>
c001d788:	83 c4 10             	add    esp,0x10
c001d78b:	ba ec 29 02 c0       	mov    edx,0xc00229ec
c001d790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d794:	89 10                	mov    DWORD PTR [eax],edx
c001d796:	a0 20 55 02 c0       	mov    al,ds:0xc0025520
c001d79b:	83 f0 01             	xor    eax,0x1
c001d79e:	84 c0                	test   al,al
c001d7a0:	0f 84 96 00 00 00    	je     c001d83c <APIC::APIC()+0xca>
c001d7a6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d7ab:	a0 d0 3f 02 c0       	mov    al,ds:0xc0023fd0
c001d7b0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d7b4:	73 7f                	jae    c001d835 <APIC::APIC()+0xc3>
c001d7b6:	83 ec 0c             	sub    esp,0xc
c001d7b9:	68 68 01 00 00       	push   0x168
c001d7be:	e8 39 17 ff ff       	call   c000eefc <operator new(unsigned long)>
c001d7c3:	83 c4 10             	add    esp,0x10
c001d7c6:	89 c3                	mov    ebx,eax
c001d7c8:	83 ec 0c             	sub    esp,0xc
c001d7cb:	53                   	push   ebx
c001d7cc:	e8 79 ff ff ff       	call   c001d74a <IOAPIC::IOAPIC()>
c001d7d1:	83 c4 10             	add    esp,0x10
c001d7d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d7d8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d7dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7e1:	89 14 85 00 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdab00],edx
c001d7e8:	a1 e0 54 02 c0       	mov    eax,ds:0xc00254e0
c001d7ed:	40                   	inc    eax
c001d7ee:	a3 e0 54 02 c0       	mov    ds:0xc00254e0,eax
c001d7f3:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c001d7f8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d7fe:	83 ec 08             	sub    esp,0x8
c001d801:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d805:	50                   	push   eax
c001d806:	e8 eb 2b ff ff       	call   c00103f6 <Device::addChild(Device*)>
c001d80b:	83 c4 10             	add    esp,0x10
c001d80e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d812:	8b 00                	mov    eax,DWORD PTR [eax]
c001d814:	83 c0 08             	add    eax,0x8
c001d817:	8b 00                	mov    eax,DWORD PTR [eax]
c001d819:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d81e:	6a 00                	push   0x0
c001d820:	6a 00                	push   0x0
c001d822:	52                   	push   edx
c001d823:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d827:	ff d0                	call   eax
c001d829:	83 c4 10             	add    esp,0x10
c001d82c:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d830:	e9 76 ff ff ff       	jmp    c001d7ab <APIC::APIC()+0x39>
c001d835:	c6 05 20 55 02 c0 01 	mov    BYTE PTR ds:0xc0025520,0x1
c001d83c:	90                   	nop
c001d83d:	83 c4 18             	add    esp,0x18
c001d840:	5b                   	pop    ebx
c001d841:	c3                   	ret    

c001d842 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d842:	55                   	push   ebp
c001d843:	89 e5                	mov    ebp,esp
c001d845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d848:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d84e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d851:	72 1d                	jb     c001d870 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d856:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d85c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d85f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d865:	01 d0                	add    eax,edx
c001d867:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d86a:	73 04                	jae    c001d870 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d86c:	b0 01                	mov    al,0x1
c001d86e:	eb 02                	jmp    c001d872 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d870:	b0 00                	mov    al,0x0
c001d872:	5d                   	pop    ebp
c001d873:	c3                   	ret    

c001d874 <IOAPIC::read(int)>:
c001d874:	55                   	push   ebp
c001d875:	89 e5                	mov    ebp,esp
c001d877:	83 ec 10             	sub    esp,0x10
c001d87a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d87d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d883:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d886:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d889:	0f b6 d0             	movzx  edx,al
c001d88c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d88f:	89 10                	mov    DWORD PTR [eax],edx
c001d891:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d894:	83 c0 10             	add    eax,0x10
c001d897:	8b 00                	mov    eax,DWORD PTR [eax]
c001d899:	c9                   	leave  
c001d89a:	c3                   	ret    
c001d89b:	90                   	nop

c001d89c <IOAPIC::open(int, int, void*)>:
c001d89c:	55                   	push   ebp
c001d89d:	89 e5                	mov    ebp,esp
c001d89f:	57                   	push   edi
c001d8a0:	56                   	push   esi
c001d8a1:	53                   	push   ebx
c001d8a2:	83 ec 0c             	sub    esp,0xc
c001d8a5:	83 ec 0c             	sub    esp,0xc
c001d8a8:	68 3f 29 02 c0       	push   0xc002293f
c001d8ad:	e8 39 17 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001d8b2:	83 c4 10             	add    esp,0x10
c001d8b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d8bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d8c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d8ca:	8b 14 85 00 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc000]
c001d8d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8d4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d8da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8dd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d8e3:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c001d8ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ed:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d8f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8f6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d8fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d905:	0f b6 f8             	movzx  edi,al
c001d908:	89 d0                	mov    eax,edx
c001d90a:	ba 00 00 00 00       	mov    edx,0x0
c001d90f:	89 c1                	mov    ecx,eax
c001d911:	80 e5 ff             	and    ch,0xff
c001d914:	89 cb                	mov    ebx,ecx
c001d916:	0f b6 f2             	movzx  esi,dl
c001d919:	89 d8                	mov    eax,ebx
c001d91b:	89 f2                	mov    edx,esi
c001d91d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d920:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d923:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d927:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d92b:	83 e0 00             	and    eax,0x0
c001d92e:	09 d0                	or     eax,edx
c001d930:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d937:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d93d:	8d 50 01             	lea    edx,[eax+0x1]
c001d940:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d943:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d949:	0f b6 d0             	movzx  edx,al
c001d94c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d94f:	83 c2 08             	add    edx,0x8
c001d952:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d956:	0f b6 c9             	movzx  ecx,cl
c001d959:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d95f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d963:	83 ec 08             	sub    esp,0x8
c001d966:	6a 01                	push   0x1
c001d968:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d96b:	e8 04 ff ff ff       	call   c001d874 <IOAPIC::read(int)>
c001d970:	83 c4 10             	add    esp,0x10
c001d973:	c1 f8 10             	sar    eax,0x10
c001d976:	0f b6 c0             	movzx  eax,al
c001d979:	8d 50 01             	lea    edx,[eax+0x1]
c001d97c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d97f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d985:	b8 00 00 00 00       	mov    eax,0x0
c001d98a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d98d:	5b                   	pop    ebx
c001d98e:	5e                   	pop    esi
c001d98f:	5f                   	pop    edi
c001d990:	5d                   	pop    ebp
c001d991:	c3                   	ret    

c001d992 <IOAPIC::write(int, int)>:
c001d992:	55                   	push   ebp
c001d993:	89 e5                	mov    ebp,esp
c001d995:	83 ec 10             	sub    esp,0x10
c001d998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d99b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d9a1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9a7:	0f b6 d0             	movzx  edx,al
c001d9aa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9ad:	89 10                	mov    DWORD PTR [eax],edx
c001d9af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9b2:	8d 50 10             	lea    edx,[eax+0x10]
c001d9b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d9b8:	89 02                	mov    DWORD PTR [edx],eax
c001d9ba:	90                   	nop
c001d9bb:	c9                   	leave  
c001d9bc:	c3                   	ret    
c001d9bd:	90                   	nop

c001d9be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d9be:	55                   	push   ebp
c001d9bf:	89 e5                	mov    ebp,esp
c001d9c1:	83 ec 20             	sub    esp,0x20
c001d9c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9c7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d9ca:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d9cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d9d0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d9d3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d9d6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d9d9:	88 d0                	mov    al,dl
c001d9db:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d9de:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d9e2:	83 c0 08             	add    eax,0x8
c001d9e5:	01 c0                	add    eax,eax
c001d9e7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9ea:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d9ee:	83 c0 08             	add    eax,0x8
c001d9f1:	01 c0                	add    eax,eax
c001d9f3:	40                   	inc    eax
c001d9f4:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d9f7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d9fa:	50                   	push   eax
c001d9fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9fe:	e8 71 fe ff ff       	call   c001d874 <IOAPIC::read(int)>
c001da03:	83 c4 08             	add    esp,0x8
c001da06:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001da09:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001da10:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001da13:	c1 e0 18             	shl    eax,0x18
c001da16:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001da19:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001da1c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001da1f:	52                   	push   edx
c001da20:	50                   	push   eax
c001da21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da24:	e8 69 ff ff ff       	call   c001d992 <IOAPIC::write(int, int)>
c001da29:	83 c4 0c             	add    esp,0xc
c001da2c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da2f:	50                   	push   eax
c001da30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da33:	e8 3c fe ff ff       	call   c001d874 <IOAPIC::read(int)>
c001da38:	83 c4 08             	add    esp,0x8
c001da3b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001da3e:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001da45:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001da4c:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001da53:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001da5a:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001da5e:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001da61:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001da64:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da67:	52                   	push   edx
c001da68:	50                   	push   eax
c001da69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da6c:	e8 21 ff ff ff       	call   c001d992 <IOAPIC::write(int, int)>
c001da71:	83 c4 0c             	add    esp,0xc
c001da74:	90                   	nop
c001da75:	c9                   	leave  
c001da76:	c3                   	ret    
c001da77:	90                   	nop

c001da78 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001da78:	55                   	push   ebp
c001da79:	89 e5                	mov    ebp,esp
c001da7b:	56                   	push   esi
c001da7c:	53                   	push   ebx
c001da7d:	83 ec 20             	sub    esp,0x20
c001da80:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001da83:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001da86:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001da8a:	74 28                	je     c001dab4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da8c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001da90:	7f 12                	jg     c001daa4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001da92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da95:	05 80 2e 02 c0       	add    eax,0xc0022e80
c001da9a:	8a 00                	mov    al,BYTE PTR [eax]
c001da9c:	0f b6 c0             	movzx  eax,al
c001da9f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001daa2:	eb 10                	jmp    c001dab4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001daa4:	83 ec 0c             	sub    esp,0xc
c001daa7:	68 50 29 02 c0       	push   0xc0022950
c001daac:	e8 cf 71 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001dab1:	83 c4 10             	add    esp,0x10
c001dab4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001dab8:	a1 e0 54 02 c0       	mov    eax,ds:0xc00254e0
c001dabd:	83 ec 08             	sub    esp,0x8
c001dac0:	50                   	push   eax
c001dac1:	68 88 29 02 c0       	push   0xc0022988
c001dac6:	e8 20 15 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001dacb:	83 c4 10             	add    esp,0x10
c001dace:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dad5:	a1 e0 54 02 c0       	mov    eax,ds:0xc00254e0
c001dada:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dadd:	7d 58                	jge    c001db37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001dadf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dae2:	8b 04 85 00 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdab00]
c001dae9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001daec:	83 ec 08             	sub    esp,0x8
c001daef:	52                   	push   edx
c001daf0:	50                   	push   eax
c001daf1:	e8 4c fd ff ff       	call   c001d842 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001daf6:	83 c4 10             	add    esp,0x10
c001daf9:	84 c0                	test   al,al
c001dafb:	74 35                	je     c001db32 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001dafd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db00:	8b 1c 85 00 55 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdab00]
c001db07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db0a:	83 c0 20             	add    eax,0x20
c001db0d:	0f b6 f0             	movzx  esi,al
c001db10:	e8 62 64 ff ff       	call   c0013f77 <getCPUNumber()>
c001db15:	99                   	cdq    
c001db16:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001db19:	0f b6 c9             	movzx  ecx,cl
c001db1c:	83 ec 0c             	sub    esp,0xc
c001db1f:	56                   	push   esi
c001db20:	52                   	push   edx
c001db21:	50                   	push   eax
c001db22:	51                   	push   ecx
c001db23:	53                   	push   ebx
c001db24:	e8 95 fe ff ff       	call   c001d9be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001db29:	83 c4 20             	add    esp,0x20
c001db2c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001db30:	eb 05                	jmp    c001db37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001db32:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001db35:	eb 9e                	jmp    c001dad5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001db37:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001db3a:	83 f0 01             	xor    eax,0x1
c001db3d:	84 c0                	test   al,al
c001db3f:	74 10                	je     c001db51 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001db41:	83 ec 0c             	sub    esp,0xc
c001db44:	68 9f 29 02 c0       	push   0xc002299f
c001db49:	e8 32 71 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001db4e:	83 c4 10             	add    esp,0x10
c001db51:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001db55:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001db5c:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001db60:	7f 65                	jg     c001dbc7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001db62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db65:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db68:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db6f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db72:	01 ca                	add    edx,ecx
c001db74:	83 c2 54             	add    edx,0x54
c001db77:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001db7b:	85 c0                	test   eax,eax
c001db7d:	75 43                	jne    c001dbc2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001db7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db82:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db85:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db8c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db8f:	01 ca                	add    edx,ecx
c001db91:	8d 4a 54             	lea    ecx,[edx+0x54]
c001db94:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001db97:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dba1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dba8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbab:	01 ca                	add    edx,ecx
c001dbad:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001dbb3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dbb6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dbba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dbbd:	83 e8 20             	sub    eax,0x20
c001dbc0:	eb 1a                	jmp    c001dbdc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001dbc2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001dbc5:	eb 95                	jmp    c001db5c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001dbc7:	83 ec 0c             	sub    esp,0xc
c001dbca:	68 ac 29 02 c0       	push   0xc00229ac
c001dbcf:	e8 ac 70 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001dbd4:	83 c4 10             	add    esp,0x10
c001dbd7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dbdc:	8d 65 f8             	lea    esp,[ebp-0x8]
c001dbdf:	5b                   	pop    ebx
c001dbe0:	5e                   	pop    esi
c001dbe1:	5d                   	pop    ebp
c001dbe2:	c3                   	ret    
c001dbe3:	90                   	nop

c001dbe4 <PIC::disable()>:
c001dbe4:	55                   	push   ebp
c001dbe5:	89 e5                	mov    ebp,esp
c001dbe7:	83 ec 10             	sub    esp,0x10
c001dbea:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001dbf0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001dbf4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dbf7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dbfb:	ee                   	out    dx,al
c001dbfc:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001dc02:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dc06:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dc09:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001dc0d:	ee                   	out    dx,al
c001dc0e:	90                   	nop
c001dc0f:	c9                   	leave  
c001dc10:	c3                   	ret    
c001dc11:	90                   	nop

c001dc12 <PIC::close(int, int, void*)>:
c001dc12:	55                   	push   ebp
c001dc13:	89 e5                	mov    ebp,esp
c001dc15:	83 ec 08             	sub    esp,0x8
c001dc18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc1d:	83 c0 3c             	add    eax,0x3c
c001dc20:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc22:	83 ec 0c             	sub    esp,0xc
c001dc25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc28:	ff d0                	call   eax
c001dc2a:	83 c4 10             	add    esp,0x10
c001dc2d:	b8 00 00 00 00       	mov    eax,0x0
c001dc32:	c9                   	leave  
c001dc33:	c3                   	ret    

c001dc34 <PIC::PIC()>:
c001dc34:	83 ec 0c             	sub    esp,0xc
c001dc37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc3b:	83 ec 08             	sub    esp,0x8
c001dc3e:	68 58 2a 02 c0       	push   0xc0022a58
c001dc43:	50                   	push   eax
c001dc44:	e8 df 30 ff ff       	call   c0010d28 <InterruptController::InterruptController(char const*)>
c001dc49:	83 c4 10             	add    esp,0x10
c001dc4c:	ba 84 2a 02 c0       	mov    edx,0xc0022a84
c001dc51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc55:	89 10                	mov    DWORD PTR [eax],edx
c001dc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc61:	0f b6 d0             	movzx  edx,al
c001dc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc68:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dc6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc79:	0f b6 d0             	movzx  edx,al
c001dc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc80:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dc85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc8f:	8d 50 01             	lea    edx,[eax+0x1]
c001dc92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc96:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc9c:	0f b6 d0             	movzx  edx,al
c001dc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dca7:	83 e1 3f             	and    ecx,0x3f
c001dcaa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcb8:	0f b6 d0             	movzx  edx,al
c001dcbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcbf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcd0:	0f b6 d0             	movzx  edx,al
c001dcd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dce6:	8d 50 01             	lea    edx,[eax+0x1]
c001dce9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dced:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dcf3:	0f b6 d0             	movzx  edx,al
c001dcf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcfa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dcfe:	83 e1 3f             	and    ecx,0x3f
c001dd01:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd05:	90                   	nop
c001dd06:	83 c4 0c             	add    esp,0xc
c001dd09:	c3                   	ret    

c001dd0a <PIC::ioWait()>:
c001dd0a:	eb 00                	jmp    c001dd0c <PIC::ioWait()+0x2>
c001dd0c:	eb 00                	jmp    c001dd0e <PIC::ioWait()+0x4>
c001dd0e:	90                   	nop
c001dd0f:	c3                   	ret    

c001dd10 <PIC::getIRQReg(int)>:
c001dd10:	55                   	push   ebp
c001dd11:	89 e5                	mov    ebp,esp
c001dd13:	83 ec 10             	sub    esp,0x10
c001dd16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd19:	0f b6 c0             	movzx  eax,al
c001dd1c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dd22:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dd25:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dd28:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dd2c:	ee                   	out    dx,al
c001dd2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd30:	0f b6 c0             	movzx  eax,al
c001dd33:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd39:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dd3c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd3f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd43:	ee                   	out    dx,al
c001dd44:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dd4a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dd4e:	89 c2                	mov    edx,eax
c001dd50:	ec                   	in     al,dx
c001dd51:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dd54:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd57:	0f b6 c0             	movzx  eax,al
c001dd5a:	c1 e0 08             	shl    eax,0x8
c001dd5d:	89 c1                	mov    ecx,eax
c001dd5f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dd65:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dd69:	89 c2                	mov    edx,eax
c001dd6b:	ec                   	in     al,dx
c001dd6c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dd6f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dd72:	0f b6 c0             	movzx  eax,al
c001dd75:	09 c8                	or     eax,ecx
c001dd77:	c9                   	leave  
c001dd78:	c3                   	ret    
c001dd79:	90                   	nop

c001dd7a <PIC::eoi(unsigned char)>:
c001dd7a:	55                   	push   ebp
c001dd7b:	89 e5                	mov    ebp,esp
c001dd7d:	83 ec 14             	sub    esp,0x14
c001dd80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd83:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dd86:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd8a:	75 1e                	jne    c001ddaa <PIC::eoi(unsigned char)+0x30>
c001dd8c:	6a 0b                	push   0xb
c001dd8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd91:	e8 7a ff ff ff       	call   c001dd10 <PIC::getIRQReg(int)>
c001dd96:	83 c4 08             	add    esp,0x8
c001dd99:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dd9d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dda1:	25 80 00 00 00       	and    eax,0x80
c001dda6:	85 c0                	test   eax,eax
c001dda8:	74 5f                	je     c001de09 <PIC::eoi(unsigned char)+0x8f>
c001ddaa:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001ddae:	75 2d                	jne    c001dddd <PIC::eoi(unsigned char)+0x63>
c001ddb0:	6a 0b                	push   0xb
c001ddb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddb5:	e8 56 ff ff ff       	call   c001dd10 <PIC::getIRQReg(int)>
c001ddba:	83 c4 08             	add    esp,0x8
c001ddbd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001ddc1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ddc4:	66 85 c0             	test   ax,ax
c001ddc7:	78 14                	js     c001dddd <PIC::eoi(unsigned char)+0x63>
c001ddc9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001ddcf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001ddd3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ddd6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001ddda:	ee                   	out    dx,al
c001dddb:	eb 2d                	jmp    c001de0a <PIC::eoi(unsigned char)+0x90>
c001dddd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dde1:	76 12                	jbe    c001ddf5 <PIC::eoi(unsigned char)+0x7b>
c001dde3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dde9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001dded:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ddf0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ddf4:	ee                   	out    dx,al
c001ddf5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001ddfb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001ddff:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001de02:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001de06:	ee                   	out    dx,al
c001de07:	eb 01                	jmp    c001de0a <PIC::eoi(unsigned char)+0x90>
c001de09:	90                   	nop
c001de0a:	c9                   	leave  
c001de0b:	c3                   	ret    

c001de0c <PIC::remap()>:
c001de0c:	55                   	push   ebp
c001de0d:	89 e5                	mov    ebp,esp
c001de0f:	83 ec 48             	sub    esp,0x48
c001de12:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001de19:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001de20:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001de26:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001de29:	89 c2                	mov    edx,eax
c001de2b:	ec                   	in     al,dx
c001de2c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001de2f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001de32:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001de35:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001de3b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001de3e:	89 c2                	mov    edx,eax
c001de40:	ec                   	in     al,dx
c001de41:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001de44:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001de47:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001de4a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001de50:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001de54:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001de57:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001de5a:	ee                   	out    dx,al
c001de5b:	83 ec 0c             	sub    esp,0xc
c001de5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de61:	e8 a4 fe ff ff       	call   c001dd0a <PIC::ioWait()>
c001de66:	83 c4 10             	add    esp,0x10
c001de69:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001de6f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001de73:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001de76:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001de79:	ee                   	out    dx,al
c001de7a:	83 ec 0c             	sub    esp,0xc
c001de7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de80:	e8 85 fe ff ff       	call   c001dd0a <PIC::ioWait()>
c001de85:	83 c4 10             	add    esp,0x10
c001de88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001de8b:	0f b6 c0             	movzx  eax,al
c001de8e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001de94:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001de97:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001de9a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001de9d:	ee                   	out    dx,al
c001de9e:	83 ec 0c             	sub    esp,0xc
c001dea1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dea4:	e8 61 fe ff ff       	call   c001dd0a <PIC::ioWait()>
c001dea9:	83 c4 10             	add    esp,0x10
c001deac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001deaf:	0f b6 c0             	movzx  eax,al
c001deb2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001deb8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001debb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001debe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001dec1:	ee                   	out    dx,al
c001dec2:	83 ec 0c             	sub    esp,0xc
c001dec5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dec8:	e8 3d fe ff ff       	call   c001dd0a <PIC::ioWait()>
c001decd:	83 c4 10             	add    esp,0x10
c001ded0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ded6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001deda:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001dedd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001dee0:	ee                   	out    dx,al
c001dee1:	83 ec 0c             	sub    esp,0xc
c001dee4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dee7:	e8 1e fe ff ff       	call   c001dd0a <PIC::ioWait()>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001def5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001def9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001defc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001deff:	ee                   	out    dx,al
c001df00:	83 ec 0c             	sub    esp,0xc
c001df03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df06:	e8 ff fd ff ff       	call   c001dd0a <PIC::ioWait()>
c001df0b:	83 c4 10             	add    esp,0x10
c001df0e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001df14:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001df18:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001df1b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001df1e:	ee                   	out    dx,al
c001df1f:	83 ec 0c             	sub    esp,0xc
c001df22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df25:	e8 e0 fd ff ff       	call   c001dd0a <PIC::ioWait()>
c001df2a:	83 c4 10             	add    esp,0x10
c001df2d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001df33:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001df37:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001df3a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001df3d:	ee                   	out    dx,al
c001df3e:	83 ec 0c             	sub    esp,0xc
c001df41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df44:	e8 c1 fd ff ff       	call   c001dd0a <PIC::ioWait()>
c001df49:	83 c4 10             	add    esp,0x10
c001df4c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001df50:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001df56:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001df59:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001df5c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df5f:	ee                   	out    dx,al
c001df60:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001df64:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001df6a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001df6d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001df70:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001df73:	ee                   	out    dx,al
c001df74:	90                   	nop
c001df75:	c9                   	leave  
c001df76:	c3                   	ret    
c001df77:	90                   	nop

c001df78 <PIC::open(int, int, void*)>:
c001df78:	55                   	push   ebp
c001df79:	89 e5                	mov    ebp,esp
c001df7b:	83 ec 18             	sub    esp,0x18
c001df7e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001df84:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001df88:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001df8b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001df8f:	ee                   	out    dx,al
c001df90:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001df96:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001df9a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001df9d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dfa1:	ee                   	out    dx,al
c001dfa2:	83 ec 0c             	sub    esp,0xc
c001dfa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfa8:	e8 5f fe ff ff       	call   c001de0c <PIC::remap()>
c001dfad:	83 c4 10             	add    esp,0x10
c001dfb0:	b8 00 00 00 00       	mov    eax,0x0
c001dfb5:	c9                   	leave  
c001dfb6:	c3                   	ret    
c001dfb7:	90                   	nop

c001dfb8 <APICTimer::close(int, int, void*)>:
c001dfb8:	b8 00 00 00 00       	mov    eax,0x0
c001dfbd:	c3                   	ret    

c001dfbe <apicTimerHandler(regs*, void*)>:
c001dfbe:	83 ec 0c             	sub    esp,0xc
c001dfc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfc7:	99                   	cdq    
c001dfc8:	52                   	push   edx
c001dfc9:	50                   	push   eax
c001dfca:	6a 00                	push   0x0
c001dfcc:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dfd1:	e8 76 07 00 00       	call   c001e74c <__udivdi3>
c001dfd6:	83 c4 10             	add    esp,0x10
c001dfd9:	83 ec 08             	sub    esp,0x8
c001dfdc:	52                   	push   edx
c001dfdd:	50                   	push   eax
c001dfde:	e8 b0 44 ff ff       	call   c0012493 <timerHandler(unsigned long long)>
c001dfe3:	83 c4 10             	add    esp,0x10
c001dfe6:	90                   	nop
c001dfe7:	83 c4 0c             	add    esp,0xc
c001dfea:	c3                   	ret    
c001dfeb:	90                   	nop

c001dfec <APICTimer::write(int)>:
c001dfec:	53                   	push   ebx
c001dfed:	83 ec 28             	sub    esp,0x28
c001dff0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dff4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dff8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dffe:	e8 77 5f ff ff       	call   c0013f7a <thisCPU()>
c001e003:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e009:	83 ec 0c             	sub    esp,0xc
c001e00c:	50                   	push   eax
c001e00d:	e8 0e f6 ff ff       	call   c001d620 <APIC::getBase()>
c001e012:	83 c4 10             	add    esp,0x10
c001e015:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e019:	a1 90 3d 02 c0       	mov    eax,ds:0xc0023d90
c001e01e:	8b 15 94 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d94
c001e024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e028:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e02c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e030:	05 e0 03 00 00       	add    eax,0x3e0
c001e035:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e03b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e03f:	05 80 03 00 00       	add    eax,0x380
c001e044:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e04a:	fb                   	sti    
c001e04b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e04f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e053:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e058:	83 d2 00             	adc    edx,0x0
c001e05b:	89 c1                	mov    ecx,eax
c001e05d:	89 d3                	mov    ebx,edx
c001e05f:	a1 90 3d 02 c0       	mov    eax,ds:0xc0023d90
c001e064:	8b 15 94 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d94
c001e06a:	39 c8                	cmp    eax,ecx
c001e06c:	89 d0                	mov    eax,edx
c001e06e:	19 d8                	sbb    eax,ebx
c001e070:	73 02                	jae    c001e074 <APICTimer::write(int)+0x88>
c001e072:	eb d7                	jmp    c001e04b <APICTimer::write(int)+0x5f>
c001e074:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e078:	05 20 03 00 00       	add    eax,0x320
c001e07d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e087:	05 90 03 00 00       	add    eax,0x390
c001e08c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e08e:	f7 d0                	not    eax
c001e090:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e094:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e098:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e09c:	ba 00 00 00 00       	mov    edx,0x0
c001e0a1:	f7 f3                	div    ebx
c001e0a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e0a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e0b1:	0d 00 00 02 00       	or     eax,0x20000
c001e0b6:	89 c2                	mov    edx,eax
c001e0b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0bc:	05 20 03 00 00       	add    eax,0x320
c001e0c1:	89 10                	mov    DWORD PTR [eax],edx
c001e0c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0c7:	05 e0 03 00 00       	add    eax,0x3e0
c001e0cc:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e0d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0d6:	05 80 03 00 00       	add    eax,0x380
c001e0db:	89 c2                	mov    edx,eax
c001e0dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e0e1:	89 02                	mov    DWORD PTR [edx],eax
c001e0e3:	90                   	nop
c001e0e4:	83 c4 28             	add    esp,0x28
c001e0e7:	5b                   	pop    ebx
c001e0e8:	c3                   	ret    
c001e0e9:	90                   	nop

c001e0ea <APICTimer::open(int, int, void*)>:
c001e0ea:	57                   	push   edi
c001e0eb:	56                   	push   esi
c001e0ec:	53                   	push   ebx
c001e0ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0f3:	83 c0 24             	add    eax,0x24
c001e0f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0f8:	83 ec 08             	sub    esp,0x8
c001e0fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e103:	ff d0                	call   eax
c001e105:	83 c4 10             	add    esp,0x10
c001e108:	e8 6d 5e ff ff       	call   c0013f7a <thisCPU()>
c001e10d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e113:	83 ec 0c             	sub    esp,0xc
c001e116:	50                   	push   eax
c001e117:	e8 04 f5 ff ff       	call   c001d620 <APIC::getBase()>
c001e11c:	83 c4 10             	add    esp,0x10
c001e11f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e129:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e12f:	0f b6 f8             	movzx  edi,al
c001e132:	89 d0                	mov    eax,edx
c001e134:	ba 00 00 00 00       	mov    edx,0x0
c001e139:	89 c1                	mov    ecx,eax
c001e13b:	80 e5 ff             	and    ch,0xff
c001e13e:	89 cb                	mov    ebx,ecx
c001e140:	0f b6 f2             	movzx  esi,dl
c001e143:	89 d8                	mov    eax,ebx
c001e145:	89 f2                	mov    edx,esi
c001e147:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e14b:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e14e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e152:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e156:	83 e0 00             	and    eax,0x0
c001e159:	09 d0                	or     eax,edx
c001e15b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e163:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e169:	8d 50 01             	lea    edx,[eax+0x1]
c001e16c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e170:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e176:	0f b6 d0             	movzx  edx,al
c001e179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17d:	83 c2 08             	add    edx,0x8
c001e180:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e184:	0f b6 c9             	movzx  ecx,cl
c001e187:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e18d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e195:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e199:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1a7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e1ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1b1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e1b7:	83 ec 0c             	sub    esp,0xc
c001e1ba:	51                   	push   ecx
c001e1bb:	6a 01                	push   0x1
c001e1bd:	68 be df 01 c0       	push   0xc001dfbe
c001e1c2:	52                   	push   edx
c001e1c3:	50                   	push   eax
c001e1c4:	e8 81 21 ff ff       	call   c001034a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e1c9:	83 c4 20             	add    esp,0x20
c001e1cc:	89 c2                	mov    edx,eax
c001e1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e1d8:	b8 00 00 00 00       	mov    eax,0x0
c001e1dd:	5b                   	pop    ebx
c001e1de:	5e                   	pop    esi
c001e1df:	5f                   	pop    edi
c001e1e0:	c3                   	ret    
c001e1e1:	90                   	nop

c001e1e2 <APICTimer::APICTimer()>:
c001e1e2:	83 ec 0c             	sub    esp,0xc
c001e1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e9:	83 ec 08             	sub    esp,0x8
c001e1ec:	68 c4 2a 02 c0       	push   0xc0022ac4
c001e1f1:	50                   	push   eax
c001e1f2:	e8 0d 42 ff ff       	call   c0012404 <Timer::Timer(char const*)>
c001e1f7:	83 c4 10             	add    esp,0x10
c001e1fa:	ba d8 2a 02 c0       	mov    edx,0xc0022ad8
c001e1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e203:	89 10                	mov    DWORD PTR [eax],edx
c001e205:	90                   	nop
c001e206:	83 c4 0c             	add    esp,0xc
c001e209:	c3                   	ret    

c001e20a <PIT::write(int)>:
c001e20a:	83 ec 10             	sub    esp,0x10
c001e20d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e211:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e215:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e21b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e21f:	a3 24 55 02 c0       	mov    ds:0xc0025524,eax
c001e224:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e229:	99                   	cdq    
c001e22a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e22e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e232:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e239:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e23e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e242:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e247:	ee                   	out    dx,al
c001e248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e24c:	0f b6 c0             	movzx  eax,al
c001e24f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e256:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e25a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e25e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e263:	ee                   	out    dx,al
c001e264:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e268:	c1 f8 08             	sar    eax,0x8
c001e26b:	0f b6 c0             	movzx  eax,al
c001e26e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e275:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e279:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e27d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e282:	ee                   	out    dx,al
c001e283:	90                   	nop
c001e284:	83 c4 10             	add    esp,0x10
c001e287:	c3                   	ret    

c001e288 <pitHandler(regs*, void*)>:
c001e288:	83 ec 0c             	sub    esp,0xc
c001e28b:	a1 24 55 02 c0       	mov    eax,ds:0xc0025524
c001e290:	99                   	cdq    
c001e291:	52                   	push   edx
c001e292:	50                   	push   eax
c001e293:	6a 00                	push   0x0
c001e295:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e29a:	e8 ad 04 00 00       	call   c001e74c <__udivdi3>
c001e29f:	83 c4 10             	add    esp,0x10
c001e2a2:	83 ec 08             	sub    esp,0x8
c001e2a5:	52                   	push   edx
c001e2a6:	50                   	push   eax
c001e2a7:	e8 e7 41 ff ff       	call   c0012493 <timerHandler(unsigned long long)>
c001e2ac:	83 c4 10             	add    esp,0x10
c001e2af:	90                   	nop
c001e2b0:	83 c4 0c             	add    esp,0xc
c001e2b3:	c3                   	ret    

c001e2b4 <PIT::open(int, int, void*)>:
c001e2b4:	83 ec 0c             	sub    esp,0xc
c001e2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2bd:	83 c0 24             	add    eax,0x24
c001e2c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2c2:	83 ec 08             	sub    esp,0x8
c001e2c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2cd:	ff d0                	call   eax
c001e2cf:	83 c4 10             	add    esp,0x10
c001e2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d6:	83 ec 0c             	sub    esp,0xc
c001e2d9:	6a 00                	push   0x0
c001e2db:	6a 01                	push   0x1
c001e2dd:	68 88 e2 01 c0       	push   0xc001e288
c001e2e2:	6a 00                	push   0x0
c001e2e4:	50                   	push   eax
c001e2e5:	e8 60 20 ff ff       	call   c001034a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e2ea:	83 c4 20             	add    esp,0x20
c001e2ed:	89 c2                	mov    edx,eax
c001e2ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e2f9:	b8 00 00 00 00       	mov    eax,0x0
c001e2fe:	83 c4 0c             	add    esp,0xc
c001e301:	c3                   	ret    

c001e302 <PIT::close(int, int, void*)>:
c001e302:	83 ec 0c             	sub    esp,0xc
c001e305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e309:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e317:	6a 01                	push   0x1
c001e319:	68 88 e2 01 c0       	push   0xc001e288
c001e31e:	6a 00                	push   0x0
c001e320:	50                   	push   eax
c001e321:	e8 82 20 ff ff       	call   c00103a8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e326:	83 c4 10             	add    esp,0x10
c001e329:	b8 00 00 00 00       	mov    eax,0x0
c001e32e:	83 c4 0c             	add    esp,0xc
c001e331:	c3                   	ret    

c001e332 <PIT::PIT()>:
c001e332:	83 ec 0c             	sub    esp,0xc
c001e335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e339:	83 ec 08             	sub    esp,0x8
c001e33c:	68 00 2b 02 c0       	push   0xc0022b00
c001e341:	50                   	push   eax
c001e342:	e8 bd 40 ff ff       	call   c0012404 <Timer::Timer(char const*)>
c001e347:	83 c4 10             	add    esp,0x10
c001e34a:	ba 28 2b 02 c0       	mov    edx,0xc0022b28
c001e34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e353:	89 10                	mov    DWORD PTR [eax],edx
c001e355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e359:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e35f:	0f b6 d0             	movzx  edx,al
c001e362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e366:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e371:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e377:	0f b6 d0             	movzx  edx,al
c001e37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e387:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e38d:	8d 50 01             	lea    edx,[eax+0x1]
c001e390:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e394:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e39a:	0f b6 d0             	movzx  edx,al
c001e39d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e3a5:	83 e1 3f             	and    ecx,0x3f
c001e3a8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e3ac:	90                   	nop
c001e3ad:	83 c4 0c             	add    esp,0xc
c001e3b0:	c3                   	ret    
c001e3b1:	66 90                	xchg   ax,ax
c001e3b3:	66 90                	xchg   ax,ax
c001e3b5:	66 90                	xchg   ax,ax
c001e3b7:	66 90                	xchg   ax,ax
c001e3b9:	66 90                	xchg   ax,ax
c001e3bb:	66 90                	xchg   ax,ax
c001e3bd:	66 90                	xchg   ax,ax
c001e3bf:	90                   	nop

c001e3c0 <avxDetect>:
c001e3c0:	b8 00 00 00 00       	mov    eax,0x0
c001e3c5:	c3                   	ret    

c001e3c6 <avxSave>:
c001e3c6:	c3                   	ret    

c001e3c7 <avxLoad>:
c001e3c7:	c3                   	ret    

c001e3c8 <avxInit>:
c001e3c8:	c3                   	ret    

c001e3c9 <avxClose>:
c001e3c9:	c3                   	ret    
c001e3ca:	66 90                	xchg   ax,ax
c001e3cc:	66 90                	xchg   ax,ax
c001e3ce:	66 90                	xchg   ax,ax

c001e3d0 <sseDetect>:
c001e3d0:	b8 01 00 00 00       	mov    eax,0x1
c001e3d5:	0f a2                	cpuid  
c001e3d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e3dd:	74 06                	je     c001e3e5 <sseDetect.noSSE>
c001e3df:	b8 01 00 00 00       	mov    eax,0x1
c001e3e4:	c3                   	ret    

c001e3e5 <sseDetect.noSSE>:
c001e3e5:	b8 00 00 00 00       	mov    eax,0x0
c001e3ea:	c3                   	ret    

c001e3eb <sseSave>:
c001e3eb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e3f0:	c3                   	ret    

c001e3f1 <sseLoad>:
c001e3f1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e3f6:	c3                   	ret    

c001e3f7 <sseInit>:
c001e3f7:	e8 40 00 00 00       	call   c001e43c <x87Init>
c001e3fc:	0f 20 e0             	mov    eax,cr4
c001e3ff:	66 0d 00 06          	or     ax,0x600
c001e403:	0f 22 e0             	mov    cr4,eax
c001e406:	c3                   	ret    

c001e407 <sseClose>:
c001e407:	c3                   	ret    
c001e408:	66 90                	xchg   ax,ax
c001e40a:	66 90                	xchg   ax,ax
c001e40c:	66 90                	xchg   ax,ax
c001e40e:	66 90                	xchg   ax,ax

c001e410 <value_37F>:
c001e410:	7f 03                	jg     c001e415 <value_37A+0x1>

c001e412 <value_37E>:
c001e412:	7e 03                	jle    c001e417 <x87Detect+0x1>

c001e414 <value_37A>:
c001e414:	7a 03                	jp     c001e419 <x87Detect+0x3>

c001e416 <x87Detect>:
c001e416:	b8 01 00 00 00       	mov    eax,0x1
c001e41b:	0f a2                	cpuid  
c001e41d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e423:	74 06                	je     c001e42b <x87Detect.nox87>
c001e425:	b8 01 00 00 00       	mov    eax,0x1
c001e42a:	c3                   	ret    

c001e42b <x87Detect.nox87>:
c001e42b:	b8 00 00 00 00       	mov    eax,0x0
c001e430:	c3                   	ret    

c001e431 <x87Save>:
c001e431:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e436:	c3                   	ret    

c001e437 <x87Load>:
c001e437:	dd 64 24 08          	frstor [esp+0x8]
c001e43b:	c3                   	ret    

c001e43c <x87Init>:
c001e43c:	9b db e3             	finit  
c001e43f:	0f 20 c0             	mov    eax,cr0
c001e442:	66 25 fb ff          	and    ax,0xfffb
c001e446:	66 0d 22 00          	or     ax,0x22
c001e44a:	0f 22 c0             	mov    cr0,eax
c001e44d:	0f 06                	clts   
c001e44f:	d9 2d 14 e4 01 c0    	fldcw  WORD PTR ds:0xc001e414
c001e455:	c3                   	ret    

c001e456 <x87Close>:
c001e456:	c3                   	ret    
c001e457:	90                   	nop

c001e458 <__do_global_ctors_aux>:
c001e458:	a1 38 f5 01 c0       	mov    eax,ds:0xc001f538
c001e45d:	83 f8 ff             	cmp    eax,0xffffffff
c001e460:	74 1a                	je     c001e47c <__do_global_ctors_aux+0x24>
c001e462:	55                   	push   ebp
c001e463:	89 e5                	mov    ebp,esp
c001e465:	53                   	push   ebx
c001e466:	52                   	push   edx
c001e467:	bb 38 f5 01 c0       	mov    ebx,0xc001f538
c001e46c:	ff d0                	call   eax
c001e46e:	83 eb 04             	sub    ebx,0x4
c001e471:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e473:	83 f8 ff             	cmp    eax,0xffffffff
c001e476:	75 f4                	jne    c001e46c <__do_global_ctors_aux+0x14>
c001e478:	58                   	pop    eax
c001e479:	5b                   	pop    ebx
c001e47a:	5d                   	pop    ebp
c001e47b:	c3                   	ret    
c001e47c:	c3                   	ret    
c001e47d:	66 90                	xchg   ax,ax
c001e47f:	90                   	nop

c001e480 <__divdi3>:
c001e480:	55                   	push   ebp
c001e481:	57                   	push   edi
c001e482:	56                   	push   esi
c001e483:	53                   	push   ebx
c001e484:	83 ec 1c             	sub    esp,0x1c
c001e487:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e48b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e48f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e492:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e496:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e49a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e49e:	85 db                	test   ebx,ebx
c001e4a0:	0f 88 8e 00 00 00    	js     c001e534 <__divdi3+0xb4>
c001e4a6:	89 dd                	mov    ebp,ebx
c001e4a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e4b0:	89 d3                	mov    ebx,edx
c001e4b2:	85 d2                	test   edx,edx
c001e4b4:	79 0d                	jns    c001e4c3 <__divdi3+0x43>
c001e4b6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e4ba:	f7 d8                	neg    eax
c001e4bc:	83 d2 00             	adc    edx,0x0
c001e4bf:	f7 da                	neg    edx
c001e4c1:	89 d3                	mov    ebx,edx
c001e4c3:	89 c7                	mov    edi,eax
c001e4c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e4c8:	85 db                	test   ebx,ebx
c001e4ca:	75 48                	jne    c001e514 <__divdi3+0x94>
c001e4cc:	39 ef                	cmp    edi,ebp
c001e4ce:	76 24                	jbe    c001e4f4 <__divdi3+0x74>
c001e4d0:	89 ea                	mov    edx,ebp
c001e4d2:	f7 f7                	div    edi
c001e4d4:	89 c1                	mov    ecx,eax
c001e4d6:	31 f6                	xor    esi,esi
c001e4d8:	89 c8                	mov    eax,ecx
c001e4da:	89 f2                	mov    edx,esi
c001e4dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4e0:	85 c9                	test   ecx,ecx
c001e4e2:	74 07                	je     c001e4eb <__divdi3+0x6b>
c001e4e4:	f7 d8                	neg    eax
c001e4e6:	83 d2 00             	adc    edx,0x0
c001e4e9:	f7 da                	neg    edx
c001e4eb:	83 c4 1c             	add    esp,0x1c
c001e4ee:	5b                   	pop    ebx
c001e4ef:	5e                   	pop    esi
c001e4f0:	5f                   	pop    edi
c001e4f1:	5d                   	pop    ebp
c001e4f2:	c3                   	ret    
c001e4f3:	90                   	nop
c001e4f4:	85 ff                	test   edi,edi
c001e4f6:	75 0b                	jne    c001e503 <__divdi3+0x83>
c001e4f8:	b8 01 00 00 00       	mov    eax,0x1
c001e4fd:	31 d2                	xor    edx,edx
c001e4ff:	f7 f3                	div    ebx
c001e501:	89 c7                	mov    edi,eax
c001e503:	31 d2                	xor    edx,edx
c001e505:	89 e8                	mov    eax,ebp
c001e507:	f7 f7                	div    edi
c001e509:	89 c6                	mov    esi,eax
c001e50b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e50e:	f7 f7                	div    edi
c001e510:	89 c1                	mov    ecx,eax
c001e512:	eb c4                	jmp    c001e4d8 <__divdi3+0x58>
c001e514:	39 eb                	cmp    ebx,ebp
c001e516:	77 3c                	ja     c001e554 <__divdi3+0xd4>
c001e518:	0f bd f3             	bsr    esi,ebx
c001e51b:	83 f6 1f             	xor    esi,0x1f
c001e51e:	75 40                	jne    c001e560 <__divdi3+0xe0>
c001e520:	39 eb                	cmp    ebx,ebp
c001e522:	72 09                	jb     c001e52d <__divdi3+0xad>
c001e524:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e527:	0f 87 97 00 00 00    	ja     c001e5c4 <__divdi3+0x144>
c001e52d:	b9 01 00 00 00       	mov    ecx,0x1
c001e532:	eb a4                	jmp    c001e4d8 <__divdi3+0x58>
c001e534:	f7 d9                	neg    ecx
c001e536:	83 d3 00             	adc    ebx,0x0
c001e539:	f7 db                	neg    ebx
c001e53b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e53e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e542:	89 dd                	mov    ebp,ebx
c001e544:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e54c:	e9 5f ff ff ff       	jmp    c001e4b0 <__divdi3+0x30>
c001e551:	8d 76 00             	lea    esi,[esi+0x0]
c001e554:	31 f6                	xor    esi,esi
c001e556:	31 c9                	xor    ecx,ecx
c001e558:	e9 7b ff ff ff       	jmp    c001e4d8 <__divdi3+0x58>
c001e55d:	8d 76 00             	lea    esi,[esi+0x0]
c001e560:	b8 20 00 00 00       	mov    eax,0x20
c001e565:	29 f0                	sub    eax,esi
c001e567:	89 f1                	mov    ecx,esi
c001e569:	d3 e3                	shl    ebx,cl
c001e56b:	89 fa                	mov    edx,edi
c001e56d:	88 c1                	mov    cl,al
c001e56f:	d3 ea                	shr    edx,cl
c001e571:	09 da                	or     edx,ebx
c001e573:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e577:	89 f1                	mov    ecx,esi
c001e579:	d3 e7                	shl    edi,cl
c001e57b:	89 eb                	mov    ebx,ebp
c001e57d:	88 c1                	mov    cl,al
c001e57f:	d3 eb                	shr    ebx,cl
c001e581:	89 f1                	mov    ecx,esi
c001e583:	d3 e5                	shl    ebp,cl
c001e585:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e588:	88 c1                	mov    cl,al
c001e58a:	d3 ea                	shr    edx,cl
c001e58c:	09 d5                	or     ebp,edx
c001e58e:	89 e8                	mov    eax,ebp
c001e590:	89 da                	mov    edx,ebx
c001e592:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e596:	89 d3                	mov    ebx,edx
c001e598:	89 c5                	mov    ebp,eax
c001e59a:	f7 e7                	mul    edi
c001e59c:	39 d3                	cmp    ebx,edx
c001e59e:	72 18                	jb     c001e5b8 <__divdi3+0x138>
c001e5a0:	74 0a                	je     c001e5ac <__divdi3+0x12c>
c001e5a2:	89 e9                	mov    ecx,ebp
c001e5a4:	31 f6                	xor    esi,esi
c001e5a6:	e9 2d ff ff ff       	jmp    c001e4d8 <__divdi3+0x58>
c001e5ab:	90                   	nop
c001e5ac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e5af:	89 f1                	mov    ecx,esi
c001e5b1:	d3 e7                	shl    edi,cl
c001e5b3:	39 c7                	cmp    edi,eax
c001e5b5:	73 eb                	jae    c001e5a2 <__divdi3+0x122>
c001e5b7:	90                   	nop
c001e5b8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e5bb:	31 f6                	xor    esi,esi
c001e5bd:	e9 16 ff ff ff       	jmp    c001e4d8 <__divdi3+0x58>
c001e5c2:	66 90                	xchg   ax,ax
c001e5c4:	31 c9                	xor    ecx,ecx
c001e5c6:	e9 0d ff ff ff       	jmp    c001e4d8 <__divdi3+0x58>
c001e5cb:	90                   	nop

c001e5cc <__moddi3>:
c001e5cc:	55                   	push   ebp
c001e5cd:	57                   	push   edi
c001e5ce:	56                   	push   esi
c001e5cf:	53                   	push   ebx
c001e5d0:	83 ec 2c             	sub    esp,0x2c
c001e5d3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e5d7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e5db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e5df:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e5e3:	85 db                	test   ebx,ebx
c001e5e5:	0f 88 85 00 00 00    	js     c001e670 <__moddi3+0xa4>
c001e5eb:	89 de                	mov    esi,ebx
c001e5ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e5f5:	89 d7                	mov    edi,edx
c001e5f7:	85 d2                	test   edx,edx
c001e5f9:	79 09                	jns    c001e604 <__moddi3+0x38>
c001e5fb:	f7 d8                	neg    eax
c001e5fd:	83 d2 00             	adc    edx,0x0
c001e600:	f7 da                	neg    edx
c001e602:	89 d7                	mov    edi,edx
c001e604:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e608:	89 cd                	mov    ebp,ecx
c001e60a:	85 ff                	test   edi,edi
c001e60c:	75 52                	jne    c001e660 <__moddi3+0x94>
c001e60e:	89 c3                	mov    ebx,eax
c001e610:	39 f0                	cmp    eax,esi
c001e612:	76 24                	jbe    c001e638 <__moddi3+0x6c>
c001e614:	89 c8                	mov    eax,ecx
c001e616:	89 f2                	mov    edx,esi
c001e618:	f7 f3                	div    ebx
c001e61a:	89 d6                	mov    esi,edx
c001e61c:	89 f0                	mov    eax,esi
c001e61e:	31 d2                	xor    edx,edx
c001e620:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e624:	85 c9                	test   ecx,ecx
c001e626:	74 07                	je     c001e62f <__moddi3+0x63>
c001e628:	f7 d8                	neg    eax
c001e62a:	83 d2 00             	adc    edx,0x0
c001e62d:	f7 da                	neg    edx
c001e62f:	83 c4 2c             	add    esp,0x2c
c001e632:	5b                   	pop    ebx
c001e633:	5e                   	pop    esi
c001e634:	5f                   	pop    edi
c001e635:	5d                   	pop    ebp
c001e636:	c3                   	ret    
c001e637:	90                   	nop
c001e638:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e63c:	85 db                	test   ebx,ebx
c001e63e:	75 0d                	jne    c001e64d <__moddi3+0x81>
c001e640:	b8 01 00 00 00       	mov    eax,0x1
c001e645:	31 d2                	xor    edx,edx
c001e647:	f7 f7                	div    edi
c001e649:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e64d:	89 f0                	mov    eax,esi
c001e64f:	31 d2                	xor    edx,edx
c001e651:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e655:	f7 f7                	div    edi
c001e657:	89 e8                	mov    eax,ebp
c001e659:	f7 f7                	div    edi
c001e65b:	89 d6                	mov    esi,edx
c001e65d:	eb bd                	jmp    c001e61c <__moddi3+0x50>
c001e65f:	90                   	nop
c001e660:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e664:	39 f7                	cmp    edi,esi
c001e666:	76 20                	jbe    c001e688 <__moddi3+0xbc>
c001e668:	89 c8                	mov    eax,ecx
c001e66a:	89 f2                	mov    edx,esi
c001e66c:	eb b2                	jmp    c001e620 <__moddi3+0x54>
c001e66e:	66 90                	xchg   ax,ax
c001e670:	f7 d9                	neg    ecx
c001e672:	83 d3 00             	adc    ebx,0x0
c001e675:	f7 db                	neg    ebx
c001e677:	89 de                	mov    esi,ebx
c001e679:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e681:	e9 6f ff ff ff       	jmp    c001e5f5 <__moddi3+0x29>
c001e686:	66 90                	xchg   ax,ax
c001e688:	0f bd c7             	bsr    eax,edi
c001e68b:	83 f0 1f             	xor    eax,0x1f
c001e68e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e692:	75 24                	jne    c001e6b8 <__moddi3+0xec>
c001e694:	39 f7                	cmp    edi,esi
c001e696:	72 06                	jb     c001e69e <__moddi3+0xd2>
c001e698:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e69c:	77 0c                	ja     c001e6aa <__moddi3+0xde>
c001e69e:	89 e9                	mov    ecx,ebp
c001e6a0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e6a4:	19 fe                	sbb    esi,edi
c001e6a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e6aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6ae:	89 f2                	mov    edx,esi
c001e6b0:	e9 6b ff ff ff       	jmp    c001e620 <__moddi3+0x54>
c001e6b5:	8d 76 00             	lea    esi,[esi+0x0]
c001e6b8:	b8 20 00 00 00       	mov    eax,0x20
c001e6bd:	89 c2                	mov    edx,eax
c001e6bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e6c3:	29 da                	sub    edx,ebx
c001e6c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e6c9:	88 d9                	mov    cl,bl
c001e6cb:	d3 e7                	shl    edi,cl
c001e6cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6d1:	88 d1                	mov    cl,dl
c001e6d3:	d3 e8                	shr    eax,cl
c001e6d5:	09 c7                	or     edi,eax
c001e6d7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e6db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e6df:	89 d8                	mov    eax,ebx
c001e6e1:	88 d9                	mov    cl,bl
c001e6e3:	d3 e7                	shl    edi,cl
c001e6e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6e9:	89 f3                	mov    ebx,esi
c001e6eb:	88 d1                	mov    cl,dl
c001e6ed:	d3 eb                	shr    ebx,cl
c001e6ef:	89 c7                	mov    edi,eax
c001e6f1:	88 c1                	mov    cl,al
c001e6f3:	d3 e6                	shl    esi,cl
c001e6f5:	89 e8                	mov    eax,ebp
c001e6f7:	88 d1                	mov    cl,dl
c001e6f9:	d3 e8                	shr    eax,cl
c001e6fb:	09 f0                	or     eax,esi
c001e6fd:	89 f9                	mov    ecx,edi
c001e6ff:	d3 e5                	shl    ebp,cl
c001e701:	89 da                	mov    edx,ebx
c001e703:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e707:	89 d3                	mov    ebx,edx
c001e709:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e70d:	89 c6                	mov    esi,eax
c001e70f:	89 d1                	mov    ecx,edx
c001e711:	39 d3                	cmp    ebx,edx
c001e713:	72 27                	jb     c001e73c <__moddi3+0x170>
c001e715:	74 21                	je     c001e738 <__moddi3+0x16c>
c001e717:	29 f5                	sub    ebp,esi
c001e719:	19 cb                	sbb    ebx,ecx
c001e71b:	89 de                	mov    esi,ebx
c001e71d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e721:	d3 e6                	shl    esi,cl
c001e723:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e727:	89 f9                	mov    ecx,edi
c001e729:	d3 ed                	shr    ebp,cl
c001e72b:	09 ee                	or     esi,ebp
c001e72d:	89 f0                	mov    eax,esi
c001e72f:	d3 eb                	shr    ebx,cl
c001e731:	89 da                	mov    edx,ebx
c001e733:	e9 e8 fe ff ff       	jmp    c001e620 <__moddi3+0x54>
c001e738:	39 c5                	cmp    ebp,eax
c001e73a:	73 db                	jae    c001e717 <__moddi3+0x14b>
c001e73c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e740:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e744:	89 d1                	mov    ecx,edx
c001e746:	89 c6                	mov    esi,eax
c001e748:	eb cd                	jmp    c001e717 <__moddi3+0x14b>
c001e74a:	66 90                	xchg   ax,ax

c001e74c <__udivdi3>:
c001e74c:	55                   	push   ebp
c001e74d:	57                   	push   edi
c001e74e:	56                   	push   esi
c001e74f:	53                   	push   ebx
c001e750:	83 ec 1c             	sub    esp,0x1c
c001e753:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e757:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e75b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e75f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e763:	85 d2                	test   edx,edx
c001e765:	75 41                	jne    c001e7a8 <__udivdi3+0x5c>
c001e767:	39 f7                	cmp    edi,esi
c001e769:	76 15                	jbe    c001e780 <__udivdi3+0x34>
c001e76b:	89 e8                	mov    eax,ebp
c001e76d:	89 f2                	mov    edx,esi
c001e76f:	f7 f7                	div    edi
c001e771:	31 db                	xor    ebx,ebx
c001e773:	89 da                	mov    edx,ebx
c001e775:	83 c4 1c             	add    esp,0x1c
c001e778:	5b                   	pop    ebx
c001e779:	5e                   	pop    esi
c001e77a:	5f                   	pop    edi
c001e77b:	5d                   	pop    ebp
c001e77c:	c3                   	ret    
c001e77d:	8d 76 00             	lea    esi,[esi+0x0]
c001e780:	89 f9                	mov    ecx,edi
c001e782:	85 ff                	test   edi,edi
c001e784:	75 0b                	jne    c001e791 <__udivdi3+0x45>
c001e786:	b8 01 00 00 00       	mov    eax,0x1
c001e78b:	31 d2                	xor    edx,edx
c001e78d:	f7 f7                	div    edi
c001e78f:	89 c1                	mov    ecx,eax
c001e791:	31 d2                	xor    edx,edx
c001e793:	89 f0                	mov    eax,esi
c001e795:	f7 f1                	div    ecx
c001e797:	89 c3                	mov    ebx,eax
c001e799:	89 e8                	mov    eax,ebp
c001e79b:	f7 f1                	div    ecx
c001e79d:	89 da                	mov    edx,ebx
c001e79f:	83 c4 1c             	add    esp,0x1c
c001e7a2:	5b                   	pop    ebx
c001e7a3:	5e                   	pop    esi
c001e7a4:	5f                   	pop    edi
c001e7a5:	5d                   	pop    ebp
c001e7a6:	c3                   	ret    
c001e7a7:	90                   	nop
c001e7a8:	39 f2                	cmp    edx,esi
c001e7aa:	77 1c                	ja     c001e7c8 <__udivdi3+0x7c>
c001e7ac:	0f bd da             	bsr    ebx,edx
c001e7af:	83 f3 1f             	xor    ebx,0x1f
c001e7b2:	75 24                	jne    c001e7d8 <__udivdi3+0x8c>
c001e7b4:	39 f2                	cmp    edx,esi
c001e7b6:	72 08                	jb     c001e7c0 <__udivdi3+0x74>
c001e7b8:	39 ef                	cmp    edi,ebp
c001e7ba:	0f 87 84 00 00 00    	ja     c001e844 <__udivdi3+0xf8>
c001e7c0:	b8 01 00 00 00       	mov    eax,0x1
c001e7c5:	eb ac                	jmp    c001e773 <__udivdi3+0x27>
c001e7c7:	90                   	nop
c001e7c8:	31 db                	xor    ebx,ebx
c001e7ca:	31 c0                	xor    eax,eax
c001e7cc:	89 da                	mov    edx,ebx
c001e7ce:	83 c4 1c             	add    esp,0x1c
c001e7d1:	5b                   	pop    ebx
c001e7d2:	5e                   	pop    esi
c001e7d3:	5f                   	pop    edi
c001e7d4:	5d                   	pop    ebp
c001e7d5:	c3                   	ret    
c001e7d6:	66 90                	xchg   ax,ax
c001e7d8:	b8 20 00 00 00       	mov    eax,0x20
c001e7dd:	29 d8                	sub    eax,ebx
c001e7df:	88 d9                	mov    cl,bl
c001e7e1:	d3 e2                	shl    edx,cl
c001e7e3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7e7:	89 fa                	mov    edx,edi
c001e7e9:	88 c1                	mov    cl,al
c001e7eb:	d3 ea                	shr    edx,cl
c001e7ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7f1:	09 d1                	or     ecx,edx
c001e7f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7f7:	88 d9                	mov    cl,bl
c001e7f9:	d3 e7                	shl    edi,cl
c001e7fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7ff:	89 f7                	mov    edi,esi
c001e801:	88 c1                	mov    cl,al
c001e803:	d3 ef                	shr    edi,cl
c001e805:	88 d9                	mov    cl,bl
c001e807:	d3 e6                	shl    esi,cl
c001e809:	89 ea                	mov    edx,ebp
c001e80b:	88 c1                	mov    cl,al
c001e80d:	d3 ea                	shr    edx,cl
c001e80f:	09 d6                	or     esi,edx
c001e811:	89 f0                	mov    eax,esi
c001e813:	89 fa                	mov    edx,edi
c001e815:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e819:	89 d7                	mov    edi,edx
c001e81b:	89 c6                	mov    esi,eax
c001e81d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e821:	39 d7                	cmp    edi,edx
c001e823:	72 13                	jb     c001e838 <__udivdi3+0xec>
c001e825:	74 09                	je     c001e830 <__udivdi3+0xe4>
c001e827:	89 f0                	mov    eax,esi
c001e829:	31 db                	xor    ebx,ebx
c001e82b:	e9 43 ff ff ff       	jmp    c001e773 <__udivdi3+0x27>
c001e830:	88 d9                	mov    cl,bl
c001e832:	d3 e5                	shl    ebp,cl
c001e834:	39 c5                	cmp    ebp,eax
c001e836:	73 ef                	jae    c001e827 <__udivdi3+0xdb>
c001e838:	8d 46 ff             	lea    eax,[esi-0x1]
c001e83b:	31 db                	xor    ebx,ebx
c001e83d:	e9 31 ff ff ff       	jmp    c001e773 <__udivdi3+0x27>
c001e842:	66 90                	xchg   ax,ax
c001e844:	31 c0                	xor    eax,eax
c001e846:	e9 28 ff ff ff       	jmp    c001e773 <__udivdi3+0x27>
c001e84b:	90                   	nop

c001e84c <__umoddi3>:
c001e84c:	55                   	push   ebp
c001e84d:	57                   	push   edi
c001e84e:	56                   	push   esi
c001e84f:	53                   	push   ebx
c001e850:	83 ec 1c             	sub    esp,0x1c
c001e853:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e857:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e85b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e85f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e863:	89 da                	mov    edx,ebx
c001e865:	85 c0                	test   eax,eax
c001e867:	75 37                	jne    c001e8a0 <__umoddi3+0x54>
c001e869:	39 df                	cmp    edi,ebx
c001e86b:	76 13                	jbe    c001e880 <__umoddi3+0x34>
c001e86d:	89 f0                	mov    eax,esi
c001e86f:	f7 f7                	div    edi
c001e871:	89 d0                	mov    eax,edx
c001e873:	31 d2                	xor    edx,edx
c001e875:	83 c4 1c             	add    esp,0x1c
c001e878:	5b                   	pop    ebx
c001e879:	5e                   	pop    esi
c001e87a:	5f                   	pop    edi
c001e87b:	5d                   	pop    ebp
c001e87c:	c3                   	ret    
c001e87d:	8d 76 00             	lea    esi,[esi+0x0]
c001e880:	89 fd                	mov    ebp,edi
c001e882:	85 ff                	test   edi,edi
c001e884:	75 0b                	jne    c001e891 <__umoddi3+0x45>
c001e886:	b8 01 00 00 00       	mov    eax,0x1
c001e88b:	31 d2                	xor    edx,edx
c001e88d:	f7 f7                	div    edi
c001e88f:	89 c5                	mov    ebp,eax
c001e891:	89 d8                	mov    eax,ebx
c001e893:	31 d2                	xor    edx,edx
c001e895:	f7 f5                	div    ebp
c001e897:	89 f0                	mov    eax,esi
c001e899:	f7 f5                	div    ebp
c001e89b:	89 d0                	mov    eax,edx
c001e89d:	eb d4                	jmp    c001e873 <__umoddi3+0x27>
c001e89f:	90                   	nop
c001e8a0:	89 f1                	mov    ecx,esi
c001e8a2:	39 d8                	cmp    eax,ebx
c001e8a4:	76 0a                	jbe    c001e8b0 <__umoddi3+0x64>
c001e8a6:	89 f0                	mov    eax,esi
c001e8a8:	83 c4 1c             	add    esp,0x1c
c001e8ab:	5b                   	pop    ebx
c001e8ac:	5e                   	pop    esi
c001e8ad:	5f                   	pop    edi
c001e8ae:	5d                   	pop    ebp
c001e8af:	c3                   	ret    
c001e8b0:	0f bd e8             	bsr    ebp,eax
c001e8b3:	83 f5 1f             	xor    ebp,0x1f
c001e8b6:	75 1c                	jne    c001e8d4 <__umoddi3+0x88>
c001e8b8:	39 d8                	cmp    eax,ebx
c001e8ba:	72 04                	jb     c001e8c0 <__umoddi3+0x74>
c001e8bc:	39 f7                	cmp    edi,esi
c001e8be:	77 08                	ja     c001e8c8 <__umoddi3+0x7c>
c001e8c0:	89 da                	mov    edx,ebx
c001e8c2:	29 fe                	sub    esi,edi
c001e8c4:	19 c2                	sbb    edx,eax
c001e8c6:	89 f1                	mov    ecx,esi
c001e8c8:	89 c8                	mov    eax,ecx
c001e8ca:	83 c4 1c             	add    esp,0x1c
c001e8cd:	5b                   	pop    ebx
c001e8ce:	5e                   	pop    esi
c001e8cf:	5f                   	pop    edi
c001e8d0:	5d                   	pop    ebp
c001e8d1:	c3                   	ret    
c001e8d2:	66 90                	xchg   ax,ax
c001e8d4:	ba 20 00 00 00       	mov    edx,0x20
c001e8d9:	29 ea                	sub    edx,ebp
c001e8db:	89 e9                	mov    ecx,ebp
c001e8dd:	d3 e0                	shl    eax,cl
c001e8df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8e3:	89 f8                	mov    eax,edi
c001e8e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e8e9:	88 d1                	mov    cl,dl
c001e8eb:	d3 e8                	shr    eax,cl
c001e8ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e8f1:	09 c1                	or     ecx,eax
c001e8f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e8f7:	89 e9                	mov    ecx,ebp
c001e8f9:	d3 e7                	shl    edi,cl
c001e8fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e8ff:	89 d8                	mov    eax,ebx
c001e901:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e905:	88 d1                	mov    cl,dl
c001e907:	d3 e8                	shr    eax,cl
c001e909:	89 c7                	mov    edi,eax
c001e90b:	89 e9                	mov    ecx,ebp
c001e90d:	d3 e3                	shl    ebx,cl
c001e90f:	89 f0                	mov    eax,esi
c001e911:	88 d1                	mov    cl,dl
c001e913:	d3 e8                	shr    eax,cl
c001e915:	09 d8                	or     eax,ebx
c001e917:	89 e9                	mov    ecx,ebp
c001e919:	d3 e6                	shl    esi,cl
c001e91b:	89 f3                	mov    ebx,esi
c001e91d:	89 fa                	mov    edx,edi
c001e91f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e923:	89 d1                	mov    ecx,edx
c001e925:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e929:	89 c6                	mov    esi,eax
c001e92b:	89 d7                	mov    edi,edx
c001e92d:	39 d1                	cmp    ecx,edx
c001e92f:	72 27                	jb     c001e958 <__umoddi3+0x10c>
c001e931:	74 21                	je     c001e954 <__umoddi3+0x108>
c001e933:	89 ca                	mov    edx,ecx
c001e935:	29 f3                	sub    ebx,esi
c001e937:	19 fa                	sbb    edx,edi
c001e939:	89 d0                	mov    eax,edx
c001e93b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e93f:	d3 e0                	shl    eax,cl
c001e941:	89 e9                	mov    ecx,ebp
c001e943:	d3 eb                	shr    ebx,cl
c001e945:	09 d8                	or     eax,ebx
c001e947:	d3 ea                	shr    edx,cl
c001e949:	83 c4 1c             	add    esp,0x1c
c001e94c:	5b                   	pop    ebx
c001e94d:	5e                   	pop    esi
c001e94e:	5f                   	pop    edi
c001e94f:	5d                   	pop    ebp
c001e950:	c3                   	ret    
c001e951:	8d 76 00             	lea    esi,[esi+0x0]
c001e954:	39 c3                	cmp    ebx,eax
c001e956:	73 db                	jae    c001e933 <__umoddi3+0xe7>
c001e958:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e95c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e960:	89 d7                	mov    edi,edx
c001e962:	89 c6                	mov    esi,eax
c001e964:	eb cd                	jmp    c001e933 <__umoddi3+0xe7>
c001e966:	66 90                	xchg   ax,ax
c001e968:	66 90                	xchg   ax,ax
c001e96a:	66 90                	xchg   ax,ax
c001e96c:	66 90                	xchg   ax,ax
c001e96e:	66 90                	xchg   ax,ax

c001e970 <fabs>:
c001e970:	83 ec 0c             	sub    esp,0xc
c001e973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e977:	89 04 24             	mov    DWORD PTR [esp],eax
c001e97a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e97e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e983:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e987:	dd 04 24             	fld    QWORD PTR [esp]
c001e98a:	83 c4 0c             	add    esp,0xc
c001e98d:	c3                   	ret    
c001e98e:	66 90                	xchg   ax,ax

c001e990 <lrint>:
c001e990:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e994:	83 ec 04             	sub    esp,0x4
c001e997:	db 1c 24             	fistp  DWORD PTR [esp]
c001e99a:	58                   	pop    eax
c001e99b:	c3                   	ret    

c001e99c <lrintf>:
c001e99c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e9a0:	83 ec 04             	sub    esp,0x4
c001e9a3:	db 1c 24             	fistp  DWORD PTR [esp]
c001e9a6:	58                   	pop    eax
c001e9a7:	c3                   	ret    

Disassembly of section .init:

c001e9a8 <_init>:
c001e9a8:	55                   	push   ebp
c001e9a9:	89 e5                	mov    ebp,esp
c001e9ab:	e8 68 17 fe ff       	call   c0000118 <frame_dummy>
c001e9b0:	e8 a3 fa ff ff       	call   c001e458 <__do_global_ctors_aux>
c001e9b5:	5d                   	pop    ebp
c001e9b6:	c3                   	ret    

Disassembly of section .fini:

c001e9b7 <_fini>:
c001e9b7:	55                   	push   ebp
c001e9b8:	89 e5                	mov    ebp,esp
c001e9ba:	e8 e9 16 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e9bf:	5d                   	pop    ebp
c001e9c0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e9c2 <Computer::~Computer()>:
c001e9c2:	83 ec 0c             	sub    esp,0xc
c001e9c5:	ba 98 03 02 c0       	mov    edx,0xc0020398
c001e9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ce:	89 10                	mov    DWORD PTR [eax],edx
c001e9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d4:	83 ec 0c             	sub    esp,0xc
c001e9d7:	50                   	push   eax
c001e9d8:	e8 bb 18 ff ff       	call   c0010298 <Device::~Device()>
c001e9dd:	83 c4 10             	add    esp,0x10
c001e9e0:	90                   	nop
c001e9e1:	83 c4 0c             	add    esp,0xc
c001e9e4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e9e6 <Computer::~Computer()>:
c001e9e6:	83 ec 0c             	sub    esp,0xc
c001e9e9:	83 ec 0c             	sub    esp,0xc
c001e9ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9f0:	e8 cd ff ff ff       	call   c001e9c2 <Computer::~Computer()>
c001e9f5:	83 c4 10             	add    esp,0x10
c001e9f8:	83 ec 08             	sub    esp,0x8
c001e9fb:	68 ec 01 00 00       	push   0x1ec
c001ea00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea04:	e8 02 05 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001ea09:	83 c4 10             	add    esp,0x10
c001ea0c:	83 c4 0c             	add    esp,0xc
c001ea0f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ea10 <idleCommon()>:
c001ea10:	83 ec 0c             	sub    esp,0xc
c001ea13:	e8 94 91 ff ff       	call   c0017bac <lockScheduler()>
c001ea18:	e8 c3 94 ff ff       	call   c0017ee0 <schedule()>
c001ea1d:	83 c4 0c             	add    esp,0xc
c001ea20:	e9 89 91 ff ff       	jmp    c0017bae <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001ea25 <CPU::readCR3()>:
c001ea25:	83 ec 10             	sub    esp,0x10
c001ea28:	0f 20 d8             	mov    eax,cr3
c001ea2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea33:	83 c4 10             	add    esp,0x10
c001ea36:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001ea37 <CPU::writeCR3(unsigned long)>:
c001ea37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea3b:	0f 22 d8             	mov    cr3,eax
c001ea3e:	90                   	nop
c001ea3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ea40 <LinkedList<UnixFile>::~LinkedList()>:
c001ea40:	90                   	nop
c001ea41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ea42 <LinkedList<UnixFile>::LinkedList()>:
c001ea42:	83 ec 0c             	sub    esp,0xc
c001ea45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea85:	83 ec 0c             	sub    esp,0xc
c001ea88:	68 31 06 02 c0       	push   0xc0020631
c001ea8d:	e8 59 05 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001ea92:	83 c4 10             	add    esp,0x10
c001ea95:	90                   	nop
c001ea96:	83 c4 0c             	add    esp,0xc
c001ea99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ea9a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ea9a:	83 ec 0c             	sub    esp,0xc
c001ea9d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eaa2:	75 10                	jne    c001eab4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001eaa4:	83 ec 0c             	sub    esp,0xc
c001eaa7:	68 4c 06 02 c0       	push   0xc002064c
c001eaac:	e8 cf 61 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001eab1:	83 c4 10             	add    esp,0x10
c001eab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaba:	85 c0                	test   eax,eax
c001eabc:	74 34                	je     c001eaf2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001eabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eac5:	85 c0                	test   eax,eax
c001eac7:	74 29                	je     c001eaf2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001eac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eacd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ead0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ead4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ead7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eadb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eadf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eae9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eaf0:	eb 65                	jmp    c001eb57 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaf8:	85 c0                	test   eax,eax
c001eafa:	75 4b                	jne    c001eb47 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb03:	85 c0                	test   eax,eax
c001eb05:	75 40                	jne    c001eb47 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb0f:	89 10                	mov    DWORD PTR [eax],edx
c001eb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb15:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb19:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb23:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb31:	85 c0                	test   eax,eax
c001eb33:	74 22                	je     c001eb57 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb35:	83 ec 0c             	sub    esp,0xc
c001eb38:	68 6e 06 02 c0       	push   0xc002066e
c001eb3d:	e8 3e 61 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001eb42:	83 c4 10             	add    esp,0x10
c001eb45:	eb 10                	jmp    c001eb57 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb47:	83 ec 0c             	sub    esp,0xc
c001eb4a:	68 78 06 02 c0       	push   0xc0020678
c001eb4f:	e8 2c 61 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001eb54:	83 c4 10             	add    esp,0x10
c001eb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb5e:	8d 50 01             	lea    edx,[eax+0x1]
c001eb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb65:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb68:	90                   	nop
c001eb69:	83 c4 0c             	add    esp,0xc
c001eb6c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001eb6e <LinkedList<UnixFile>::getFirstElement()>:
c001eb6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb72:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001eb76 <LinkedList<UnixFile>::removeFirst()>:
c001eb76:	83 ec 0c             	sub    esp,0xc
c001eb79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7d:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb7f:	85 c0                	test   eax,eax
c001eb81:	75 12                	jne    c001eb95 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001eb83:	83 ec 0c             	sub    esp,0xc
c001eb86:	68 84 06 02 c0       	push   0xc0020684
c001eb8b:	e8 f0 60 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001eb90:	83 c4 10             	add    esp,0x10
c001eb93:	eb 7e                	jmp    c001ec13 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001eb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb9f:	85 c0                	test   eax,eax
c001eba1:	74 10                	je     c001ebb3 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001eba3:	83 ec 0c             	sub    esp,0xc
c001eba6:	68 cf 06 02 c0       	push   0xc00206cf
c001ebab:	e8 d0 60 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001ebb0:	83 c4 10             	add    esp,0x10
c001ebb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebbc:	85 c0                	test   eax,eax
c001ebbe:	75 33                	jne    c001ebf3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ebc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebdc:	83 f8 01             	cmp    eax,0x1
c001ebdf:	74 21                	je     c001ec02 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ebe1:	83 ec 0c             	sub    esp,0xc
c001ebe4:	68 a8 06 02 c0       	push   0xc00206a8
c001ebe9:	e8 92 60 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001ebee:	83 c4 10             	add    esp,0x10
c001ebf1:	eb 0f                	jmp    c001ec02 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ebf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ebfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec00:	89 10                	mov    DWORD PTR [eax],edx
c001ec02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec06:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec09:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec10:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec13:	83 c4 0c             	add    esp,0xc
c001ec16:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ec18 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ec18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec1f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ec20 <DriverlessDevice::~DriverlessDevice()>:
c001ec20:	ba e4 0d 02 c0       	mov    edx,0xc0020de4
c001ec25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec29:	89 10                	mov    DWORD PTR [eax],edx
c001ec2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec2f:	50                   	push   eax
c001ec30:	e8 63 16 ff ff       	call   c0010298 <Device::~Device()>
c001ec35:	83 c4 04             	add    esp,0x4
c001ec38:	90                   	nop
c001ec39:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ec3a <DriverlessDevice::~DriverlessDevice()>:
c001ec3a:	83 ec 0c             	sub    esp,0xc
c001ec3d:	83 ec 0c             	sub    esp,0xc
c001ec40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec44:	e8 d7 ff ff ff       	call   c001ec20 <DriverlessDevice::~DriverlessDevice()>
c001ec49:	83 c4 10             	add    esp,0x10
c001ec4c:	83 ec 08             	sub    esp,0x8
c001ec4f:	68 58 01 00 00       	push   0x158
c001ec54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec58:	e8 ae 02 ff ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001ec5d:	83 c4 10             	add    esp,0x10
c001ec60:	83 c4 0c             	add    esp,0xc
c001ec63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ec64 <LinkedList<Device>::addElement(Device*)>:
c001ec64:	83 ec 0c             	sub    esp,0xc
c001ec67:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec6c:	75 10                	jne    c001ec7e <LinkedList<Device>::addElement(Device*)+0x1a>
c001ec6e:	83 ec 0c             	sub    esp,0xc
c001ec71:	68 4c 06 02 c0       	push   0xc002064c
c001ec76:	e8 05 60 ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001ec7b:	83 c4 10             	add    esp,0x10
c001ec7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec82:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec84:	85 c0                	test   eax,eax
c001ec86:	74 3a                	je     c001ecc2 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ec88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec8f:	85 c0                	test   eax,eax
c001ec91:	74 2f                	je     c001ecc2 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ec93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec9e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecb6:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ecc0:	eb 68                	jmp    c001ed2a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ecc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecc8:	85 c0                	test   eax,eax
c001ecca:	75 4e                	jne    c001ed1a <LinkedList<Device>::addElement(Device*)+0xb6>
c001eccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecd3:	85 c0                	test   eax,eax
c001ecd5:	75 43                	jne    c001ed1a <LinkedList<Device>::addElement(Device*)+0xb6>
c001ecd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecdf:	89 10                	mov    DWORD PTR [eax],edx
c001ece1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ece9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecf3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ecfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed04:	85 c0                	test   eax,eax
c001ed06:	74 22                	je     c001ed2a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed08:	83 ec 0c             	sub    esp,0xc
c001ed0b:	68 6e 06 02 c0       	push   0xc002066e
c001ed10:	e8 6b 5f ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001ed15:	83 c4 10             	add    esp,0x10
c001ed18:	eb 10                	jmp    c001ed2a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed1a:	83 ec 0c             	sub    esp,0xc
c001ed1d:	68 78 06 02 c0       	push   0xc0020678
c001ed22:	e8 59 5f ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001ed27:	83 c4 10             	add    esp,0x10
c001ed2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed31:	8d 50 01             	lea    edx,[eax+0x1]
c001ed34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed38:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed3b:	90                   	nop
c001ed3c:	83 c4 0c             	add    esp,0xc
c001ed3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ed40 <LinkedList<Device>::LinkedList()>:
c001ed40:	83 ec 0c             	sub    esp,0xc
c001ed43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed83:	83 ec 0c             	sub    esp,0xc
c001ed86:	68 31 06 02 c0       	push   0xc0020631
c001ed8b:	e8 5b 02 ff ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001ed90:	83 c4 10             	add    esp,0x10
c001ed93:	90                   	nop
c001ed94:	83 c4 0c             	add    esp,0xc
c001ed97:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001ed98 <CPU::readCR0()>:
c001ed98:	83 ec 10             	sub    esp,0x10
c001ed9b:	0f 20 c0             	mov    eax,cr0
c001ed9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eda2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eda6:	83 c4 10             	add    esp,0x10
c001eda9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001edaa <CPU::writeCR0(unsigned long)>:
c001edaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edae:	0f 22 c0             	mov    cr0,eax
c001edb1:	90                   	nop
c001edb2:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001edb3 <CPU::readDR0()>:
c001edb3:	83 ec 10             	sub    esp,0x10
c001edb6:	0f 21 c0             	mov    eax,db0
c001edb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edc1:	83 c4 10             	add    esp,0x10
c001edc4:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001edc5 <CPU::readDR1()>:
c001edc5:	83 ec 10             	sub    esp,0x10
c001edc8:	0f 21 c8             	mov    eax,db1
c001edcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edd3:	83 c4 10             	add    esp,0x10
c001edd6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001edd7 <CPU::readDR2()>:
c001edd7:	83 ec 10             	sub    esp,0x10
c001edda:	0f 21 d0             	mov    eax,db2
c001eddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ede1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ede5:	83 c4 10             	add    esp,0x10
c001ede8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ede9 <CPU::readDR3()>:
c001ede9:	83 ec 10             	sub    esp,0x10
c001edec:	0f 21 d8             	mov    eax,db3
c001edef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edf7:	83 c4 10             	add    esp,0x10
c001edfa:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001edfb <CPU::readDR6()>:
c001edfb:	83 ec 10             	sub    esp,0x10
c001edfe:	0f 21 f0             	mov    eax,db6
c001ee01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee09:	83 c4 10             	add    esp,0x10
c001ee0c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ee0d <CPU::readDR7()>:
c001ee0d:	83 ec 10             	sub    esp,0x10
c001ee10:	0f 21 f8             	mov    eax,db7
c001ee13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee1b:	83 c4 10             	add    esp,0x10
c001ee1e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ee20 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ee20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee26:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ee28 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ee28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee2e:	85 c0                	test   eax,eax
c001ee30:	75 0e                	jne    c001ee40 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ee32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee39:	85 c0                	test   eax,eax
c001ee3b:	75 03                	jne    c001ee40 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ee3d:	b0 01                	mov    al,0x1
c001ee3f:	c3                   	ret    
c001ee40:	b0 00                	mov    al,0x0
c001ee42:	90                   	nop
c001ee43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ee44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee4d:	85 c0                	test   eax,eax
c001ee4f:	75 15                	jne    c001ee66 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001ee51:	83 ec 0c             	sub    esp,0xc
c001ee54:	68 84 06 02 c0       	push   0xc0020684
c001ee59:	e8 22 5e ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001ee5e:	83 c4 10             	add    esp,0x10
c001ee61:	e9 88 00 00 00       	jmp    c001eeee <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001ee66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee6d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ee70:	85 c0                	test   eax,eax
c001ee72:	0f 95 c0             	setne  al
c001ee75:	84 c0                	test   al,al
c001ee77:	74 10                	je     c001ee89 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001ee79:	83 ec 0c             	sub    esp,0xc
c001ee7c:	68 cf 06 02 c0       	push   0xc00206cf
c001ee81:	e8 fa 5d ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001ee86:	83 c4 10             	add    esp,0x10
c001ee89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ee92:	85 c0                	test   eax,eax
c001ee94:	0f 94 c0             	sete   al
c001ee97:	84 c0                	test   al,al
c001ee99:	74 33                	je     c001eece <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001ee9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeb7:	83 f8 01             	cmp    eax,0x1
c001eeba:	74 21                	je     c001eedd <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eebc:	83 ec 0c             	sub    esp,0xc
c001eebf:	68 a8 06 02 c0       	push   0xc00206a8
c001eec4:	e8 b7 5d ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001eec9:	83 c4 10             	add    esp,0x10
c001eecc:	eb 0f                	jmp    c001eedd <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed2:	8b 00                	mov    eax,DWORD PTR [eax]
c001eed4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001eed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eedb:	89 10                	mov    DWORD PTR [eax],edx
c001eedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eee4:	8d 50 ff             	lea    edx,[eax-0x1]
c001eee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeeb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eeee:	83 c4 0c             	add    esp,0xc
c001eef1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001eef2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001eef2:	83 ec 0c             	sub    esp,0xc
c001eef5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eefa:	75 10                	jne    c001ef0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001eefc:	83 ec 0c             	sub    esp,0xc
c001eeff:	68 4c 06 02 c0       	push   0xc002064c
c001ef04:	e8 77 5d ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001ef09:	83 c4 10             	add    esp,0x10
c001ef0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef12:	85 c0                	test   eax,eax
c001ef14:	74 34                	je     c001ef4a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ef16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef1d:	85 c0                	test   eax,eax
c001ef1f:	74 29                	je     c001ef4a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ef21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef2c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ef2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef41:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef48:	eb 65                	jmp    c001efaf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ef4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef50:	85 c0                	test   eax,eax
c001ef52:	75 4b                	jne    c001ef9f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ef54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef5b:	85 c0                	test   eax,eax
c001ef5d:	75 40                	jne    c001ef9f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ef5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef67:	89 10                	mov    DWORD PTR [eax],edx
c001ef69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef7b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef86:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef89:	85 c0                	test   eax,eax
c001ef8b:	74 22                	je     c001efaf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ef8d:	83 ec 0c             	sub    esp,0xc
c001ef90:	68 6e 06 02 c0       	push   0xc002066e
c001ef95:	e8 e6 5c ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001ef9a:	83 c4 10             	add    esp,0x10
c001ef9d:	eb 10                	jmp    c001efaf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ef9f:	83 ec 0c             	sub    esp,0xc
c001efa2:	68 78 06 02 c0       	push   0xc0020678
c001efa7:	e8 d4 5c ff ff       	call   c0014c80 <Krnl::panic(char const*)>
c001efac:	83 c4 10             	add    esp,0x10
c001efaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efb6:	8d 50 01             	lea    edx,[eax+0x1]
c001efb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001efc0:	90                   	nop
c001efc1:	83 c4 0c             	add    esp,0xc
c001efc4:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001efc6 <ACPI::~ACPI()>:
c001efc6:	83 ec 0c             	sub    esp,0xc
c001efc9:	ba 70 15 02 c0       	mov    edx,0xc0021570
c001efce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd2:	89 10                	mov    DWORD PTR [eax],edx
c001efd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd8:	83 ec 0c             	sub    esp,0xc
c001efdb:	50                   	push   eax
c001efdc:	e8 b7 12 ff ff       	call   c0010298 <Device::~Device()>
c001efe1:	83 c4 10             	add    esp,0x10
c001efe4:	90                   	nop
c001efe5:	83 c4 0c             	add    esp,0xc
c001efe8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001efea <ACPI::~ACPI()>:
c001efea:	83 ec 0c             	sub    esp,0xc
c001efed:	83 ec 0c             	sub    esp,0xc
c001eff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff4:	e8 cd ff ff ff       	call   c001efc6 <ACPI::~ACPI()>
c001eff9:	83 c4 10             	add    esp,0x10
c001effc:	83 ec 08             	sub    esp,0x8
c001efff:	68 68 22 00 00       	push   0x2268
c001f004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f008:	e8 fe fe fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f00d:	83 c4 10             	add    esp,0x10
c001f010:	83 c4 0c             	add    esp,0xc
c001f013:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f014 <CPU::~CPU()>:
c001f014:	83 ec 0c             	sub    esp,0xc
c001f017:	ba c0 17 02 c0       	mov    edx,0xc00217c0
c001f01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f020:	89 10                	mov    DWORD PTR [eax],edx
c001f022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f026:	83 ec 0c             	sub    esp,0xc
c001f029:	50                   	push   eax
c001f02a:	e8 69 12 ff ff       	call   c0010298 <Device::~Device()>
c001f02f:	83 c4 10             	add    esp,0x10
c001f032:	90                   	nop
c001f033:	83 c4 0c             	add    esp,0xc
c001f036:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f038 <CPU::~CPU()>:
c001f038:	83 ec 0c             	sub    esp,0xc
c001f03b:	83 ec 0c             	sub    esp,0xc
c001f03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f042:	e8 cd ff ff ff       	call   c001f014 <CPU::~CPU()>
c001f047:	83 c4 10             	add    esp,0x10
c001f04a:	83 ec 08             	sub    esp,0x8
c001f04d:	68 98 11 00 00       	push   0x1198
c001f052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f056:	e8 b0 fe fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f05b:	83 c4 10             	add    esp,0x10
c001f05e:	83 c4 0c             	add    esp,0xc
c001f061:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001f062 <CPU::readCR4()>:
c001f062:	83 ec 10             	sub    esp,0x10
c001f065:	0f 20 e0             	mov    eax,cr4
c001f068:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f06c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f070:	83 c4 10             	add    esp,0x10
c001f073:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f074 <CPU::writeDR7(unsigned long)>:
c001f074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f078:	0f 23 f8             	mov    db7,eax
c001f07b:	90                   	nop
c001f07c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f07d <CPU::writeCR4(unsigned long)>:
c001f07d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f081:	0f 22 e0             	mov    cr4,eax
c001f084:	90                   	nop
c001f085:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001f086 <CPU::readCR2()>:
c001f086:	83 ec 10             	sub    esp,0x10
c001f089:	0f 20 d0             	mov    eax,cr2
c001f08c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f094:	83 c4 10             	add    esp,0x10
c001f097:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f098 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f098:	90                   	nop
c001f099:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f09a <ThreadControlBlock::ThreadControlBlock()>:
c001f09a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f09e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f0a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0a9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f0b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0b4:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f0bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0bf:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001f0c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ca:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f0ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0d2:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001f0d6:	90                   	nop
c001f0d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f0d8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f0d8:	83 ec 0c             	sub    esp,0xc
c001f0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f109:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f114:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f11b:	83 ec 0c             	sub    esp,0xc
c001f11e:	68 31 06 02 c0       	push   0xc0020631
c001f123:	e8 c3 fe fe ff       	call   c000efeb <Dbg::kprintf(char const*, ...)>
c001f128:	83 c4 10             	add    esp,0x10
c001f12b:	90                   	nop
c001f12c:	83 c4 0c             	add    esp,0xc
c001f12f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f130 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f130:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f134:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f137:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f138 <PCI::~PCI()>:
c001f138:	83 ec 0c             	sub    esp,0xc
c001f13b:	ba c0 24 02 c0       	mov    edx,0xc00224c0
c001f140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f144:	89 10                	mov    DWORD PTR [eax],edx
c001f146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14a:	83 ec 0c             	sub    esp,0xc
c001f14d:	50                   	push   eax
c001f14e:	e8 55 0b ff ff       	call   c000fca8 <Bus::~Bus()>
c001f153:	83 c4 10             	add    esp,0x10
c001f156:	90                   	nop
c001f157:	83 c4 0c             	add    esp,0xc
c001f15a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f15c <PCI::~PCI()>:
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	83 ec 0c             	sub    esp,0xc
c001f162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f166:	e8 cd ff ff ff       	call   c001f138 <PCI::~PCI()>
c001f16b:	83 c4 10             	add    esp,0x10
c001f16e:	83 ec 08             	sub    esp,0x8
c001f171:	68 58 01 00 00       	push   0x158
c001f176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f17a:	e8 8c fd fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f17f:	83 c4 10             	add    esp,0x10
c001f182:	83 c4 0c             	add    esp,0xc
c001f185:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f186 <IDE::~IDE()>:
c001f186:	83 ec 0c             	sub    esp,0xc
c001f189:	ba 24 27 02 c0       	mov    edx,0xc0022724
c001f18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f192:	89 10                	mov    DWORD PTR [eax],edx
c001f194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f198:	83 ec 0c             	sub    esp,0xc
c001f19b:	50                   	push   eax
c001f19c:	e8 0d 16 ff ff       	call   c00107ae <HardDiskController::~HardDiskController()>
c001f1a1:	83 c4 10             	add    esp,0x10
c001f1a4:	90                   	nop
c001f1a5:	83 c4 0c             	add    esp,0xc
c001f1a8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f1aa <IDE::~IDE()>:
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	83 ec 0c             	sub    esp,0xc
c001f1b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1b4:	e8 cd ff ff ff       	call   c001f186 <IDE::~IDE()>
c001f1b9:	83 c4 10             	add    esp,0x10
c001f1bc:	83 ec 08             	sub    esp,0x8
c001f1bf:	68 70 02 00 00       	push   0x270
c001f1c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c8:	e8 3e fd fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f1cd:	83 c4 10             	add    esp,0x10
c001f1d0:	83 c4 0c             	add    esp,0xc
c001f1d3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f1d4 <ATA::~ATA()>:
c001f1d4:	83 ec 0c             	sub    esp,0xc
c001f1d7:	ba 74 27 02 c0       	mov    edx,0xc0022774
c001f1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e0:	89 10                	mov    DWORD PTR [eax],edx
c001f1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e6:	83 ec 0c             	sub    esp,0xc
c001f1e9:	50                   	push   eax
c001f1ea:	e8 9d 16 ff ff       	call   c001088c <PhysicalDisk::~PhysicalDisk()>
c001f1ef:	83 c4 10             	add    esp,0x10
c001f1f2:	90                   	nop
c001f1f3:	83 c4 0c             	add    esp,0xc
c001f1f6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f1f8 <ATA::~ATA()>:
c001f1f8:	83 ec 0c             	sub    esp,0xc
c001f1fb:	83 ec 0c             	sub    esp,0xc
c001f1fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f202:	e8 cd ff ff ff       	call   c001f1d4 <ATA::~ATA()>
c001f207:	83 c4 10             	add    esp,0x10
c001f20a:	83 ec 08             	sub    esp,0x8
c001f20d:	68 7c 01 00 00       	push   0x17c
c001f212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f216:	e8 f0 fc fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f21b:	83 c4 10             	add    esp,0x10
c001f21e:	83 c4 0c             	add    esp,0xc
c001f221:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f222 <ATAPI::~ATAPI()>:
c001f222:	83 ec 0c             	sub    esp,0xc
c001f225:	ba e0 27 02 c0       	mov    edx,0xc00227e0
c001f22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f22e:	89 10                	mov    DWORD PTR [eax],edx
c001f230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f234:	83 ec 0c             	sub    esp,0xc
c001f237:	50                   	push   eax
c001f238:	e8 4f 16 ff ff       	call   c001088c <PhysicalDisk::~PhysicalDisk()>
c001f23d:	83 c4 10             	add    esp,0x10
c001f240:	90                   	nop
c001f241:	83 c4 0c             	add    esp,0xc
c001f244:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f246 <ATAPI::~ATAPI()>:
c001f246:	83 ec 0c             	sub    esp,0xc
c001f249:	83 ec 0c             	sub    esp,0xc
c001f24c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f250:	e8 cd ff ff ff       	call   c001f222 <ATAPI::~ATAPI()>
c001f255:	83 c4 10             	add    esp,0x10
c001f258:	83 ec 08             	sub    esp,0x8
c001f25b:	68 80 01 00 00       	push   0x180
c001f260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f264:	e8 a2 fc fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f269:	83 c4 10             	add    esp,0x10
c001f26c:	83 c4 0c             	add    esp,0xc
c001f26f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f270 <AVX::~AVX()>:
c001f270:	83 ec 0c             	sub    esp,0xc
c001f273:	ba 1c 28 02 c0       	mov    edx,0xc002281c
c001f278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27c:	89 10                	mov    DWORD PTR [eax],edx
c001f27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f282:	83 ec 0c             	sub    esp,0xc
c001f285:	50                   	push   eax
c001f286:	e8 85 16 ff ff       	call   c0010910 <FPU::~FPU()>
c001f28b:	83 c4 10             	add    esp,0x10
c001f28e:	90                   	nop
c001f28f:	83 c4 0c             	add    esp,0xc
c001f292:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f294 <AVX::~AVX()>:
c001f294:	83 ec 0c             	sub    esp,0xc
c001f297:	83 ec 0c             	sub    esp,0xc
c001f29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f29e:	e8 cd ff ff ff       	call   c001f270 <AVX::~AVX()>
c001f2a3:	83 c4 10             	add    esp,0x10
c001f2a6:	83 ec 08             	sub    esp,0x8
c001f2a9:	68 58 01 00 00       	push   0x158
c001f2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b2:	e8 54 fc fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f2b7:	83 c4 10             	add    esp,0x10
c001f2ba:	83 c4 0c             	add    esp,0xc
c001f2bd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f2be <MMX::~MMX()>:
c001f2be:	83 ec 0c             	sub    esp,0xc
c001f2c1:	ba 5c 28 02 c0       	mov    edx,0xc002285c
c001f2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ca:	89 10                	mov    DWORD PTR [eax],edx
c001f2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d0:	83 ec 0c             	sub    esp,0xc
c001f2d3:	50                   	push   eax
c001f2d4:	e8 37 16 ff ff       	call   c0010910 <FPU::~FPU()>
c001f2d9:	83 c4 10             	add    esp,0x10
c001f2dc:	90                   	nop
c001f2dd:	83 c4 0c             	add    esp,0xc
c001f2e0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f2e2 <MMX::~MMX()>:
c001f2e2:	83 ec 0c             	sub    esp,0xc
c001f2e5:	83 ec 0c             	sub    esp,0xc
c001f2e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ec:	e8 cd ff ff ff       	call   c001f2be <MMX::~MMX()>
c001f2f1:	83 c4 10             	add    esp,0x10
c001f2f4:	83 ec 08             	sub    esp,0x8
c001f2f7:	68 58 01 00 00       	push   0x158
c001f2fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f300:	e8 06 fc fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f305:	83 c4 10             	add    esp,0x10
c001f308:	83 c4 0c             	add    esp,0xc
c001f30b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f30c <SSE::~SSE()>:
c001f30c:	83 ec 0c             	sub    esp,0xc
c001f30f:	ba 9c 28 02 c0       	mov    edx,0xc002289c
c001f314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f318:	89 10                	mov    DWORD PTR [eax],edx
c001f31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f31e:	83 ec 0c             	sub    esp,0xc
c001f321:	50                   	push   eax
c001f322:	e8 e9 15 ff ff       	call   c0010910 <FPU::~FPU()>
c001f327:	83 c4 10             	add    esp,0x10
c001f32a:	90                   	nop
c001f32b:	83 c4 0c             	add    esp,0xc
c001f32e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f330 <SSE::~SSE()>:
c001f330:	83 ec 0c             	sub    esp,0xc
c001f333:	83 ec 0c             	sub    esp,0xc
c001f336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f33a:	e8 cd ff ff ff       	call   c001f30c <SSE::~SSE()>
c001f33f:	83 c4 10             	add    esp,0x10
c001f342:	83 ec 08             	sub    esp,0x8
c001f345:	68 58 01 00 00       	push   0x158
c001f34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f34e:	e8 b8 fb fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f353:	83 c4 10             	add    esp,0x10
c001f356:	83 c4 0c             	add    esp,0xc
c001f359:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f35a <x87::~x87()>:
c001f35a:	83 ec 0c             	sub    esp,0xc
c001f35d:	ba dc 28 02 c0       	mov    edx,0xc00228dc
c001f362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f366:	89 10                	mov    DWORD PTR [eax],edx
c001f368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f36c:	83 ec 0c             	sub    esp,0xc
c001f36f:	50                   	push   eax
c001f370:	e8 9b 15 ff ff       	call   c0010910 <FPU::~FPU()>
c001f375:	83 c4 10             	add    esp,0x10
c001f378:	90                   	nop
c001f379:	83 c4 0c             	add    esp,0xc
c001f37c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f37e <x87::~x87()>:
c001f37e:	83 ec 0c             	sub    esp,0xc
c001f381:	83 ec 0c             	sub    esp,0xc
c001f384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f388:	e8 cd ff ff ff       	call   c001f35a <x87::~x87()>
c001f38d:	83 c4 10             	add    esp,0x10
c001f390:	83 ec 08             	sub    esp,0x8
c001f393:	68 58 01 00 00       	push   0x158
c001f398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f39c:	e8 6a fb fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f3a1:	83 c4 10             	add    esp,0x10
c001f3a4:	83 c4 0c             	add    esp,0xc
c001f3a7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f3a8 <IOAPIC::~IOAPIC()>:
c001f3a8:	83 ec 0c             	sub    esp,0xc
c001f3ab:	ba 34 2a 02 c0       	mov    edx,0xc0022a34
c001f3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b4:	89 10                	mov    DWORD PTR [eax],edx
c001f3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ba:	83 ec 0c             	sub    esp,0xc
c001f3bd:	50                   	push   eax
c001f3be:	e8 d5 0e ff ff       	call   c0010298 <Device::~Device()>
c001f3c3:	83 c4 10             	add    esp,0x10
c001f3c6:	90                   	nop
c001f3c7:	83 c4 0c             	add    esp,0xc
c001f3ca:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f3cc <IOAPIC::~IOAPIC()>:
c001f3cc:	83 ec 0c             	sub    esp,0xc
c001f3cf:	83 ec 0c             	sub    esp,0xc
c001f3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3d6:	e8 cd ff ff ff       	call   c001f3a8 <IOAPIC::~IOAPIC()>
c001f3db:	83 c4 10             	add    esp,0x10
c001f3de:	83 ec 08             	sub    esp,0x8
c001f3e1:	68 68 01 00 00       	push   0x168
c001f3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3ea:	e8 1c fb fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f3ef:	83 c4 10             	add    esp,0x10
c001f3f2:	83 c4 0c             	add    esp,0xc
c001f3f5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f3f6 <APIC::~APIC()>:
c001f3f6:	83 ec 0c             	sub    esp,0xc
c001f3f9:	ba ec 29 02 c0       	mov    edx,0xc00229ec
c001f3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f402:	89 10                	mov    DWORD PTR [eax],edx
c001f404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f408:	83 ec 0c             	sub    esp,0xc
c001f40b:	50                   	push   eax
c001f40c:	e8 bd 19 ff ff       	call   c0010dce <InterruptController::~InterruptController()>
c001f411:	83 c4 10             	add    esp,0x10
c001f414:	90                   	nop
c001f415:	83 c4 0c             	add    esp,0xc
c001f418:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f41a <APIC::~APIC()>:
c001f41a:	83 ec 0c             	sub    esp,0xc
c001f41d:	83 ec 0c             	sub    esp,0xc
c001f420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f424:	e8 cd ff ff ff       	call   c001f3f6 <APIC::~APIC()>
c001f429:	83 c4 10             	add    esp,0x10
c001f42c:	83 ec 08             	sub    esp,0x8
c001f42f:	68 58 21 00 00       	push   0x2158
c001f434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f438:	e8 ce fa fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f43d:	83 c4 10             	add    esp,0x10
c001f440:	83 c4 0c             	add    esp,0xc
c001f443:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f444 <PIC::~PIC()>:
c001f444:	83 ec 0c             	sub    esp,0xc
c001f447:	ba 84 2a 02 c0       	mov    edx,0xc0022a84
c001f44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f450:	89 10                	mov    DWORD PTR [eax],edx
c001f452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f456:	83 ec 0c             	sub    esp,0xc
c001f459:	50                   	push   eax
c001f45a:	e8 6f 19 ff ff       	call   c0010dce <InterruptController::~InterruptController()>
c001f45f:	83 c4 10             	add    esp,0x10
c001f462:	90                   	nop
c001f463:	83 c4 0c             	add    esp,0xc
c001f466:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f468 <PIC::~PIC()>:
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	83 ec 0c             	sub    esp,0xc
c001f46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f472:	e8 cd ff ff ff       	call   c001f444 <PIC::~PIC()>
c001f477:	83 c4 10             	add    esp,0x10
c001f47a:	83 ec 08             	sub    esp,0x8
c001f47d:	68 58 21 00 00       	push   0x2158
c001f482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f486:	e8 80 fa fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f48b:	83 c4 10             	add    esp,0x10
c001f48e:	83 c4 0c             	add    esp,0xc
c001f491:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f492 <APICTimer::~APICTimer()>:
c001f492:	83 ec 0c             	sub    esp,0xc
c001f495:	ba d8 2a 02 c0       	mov    edx,0xc0022ad8
c001f49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49e:	89 10                	mov    DWORD PTR [eax],edx
c001f4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a4:	83 ec 0c             	sub    esp,0xc
c001f4a7:	50                   	push   eax
c001f4a8:	e8 8d 2f ff ff       	call   c001243a <Timer::~Timer()>
c001f4ad:	83 c4 10             	add    esp,0x10
c001f4b0:	90                   	nop
c001f4b1:	83 c4 0c             	add    esp,0xc
c001f4b4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f4b6 <APICTimer::~APICTimer()>:
c001f4b6:	83 ec 0c             	sub    esp,0xc
c001f4b9:	83 ec 0c             	sub    esp,0xc
c001f4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4c0:	e8 cd ff ff ff       	call   c001f492 <APICTimer::~APICTimer()>
c001f4c5:	83 c4 10             	add    esp,0x10
c001f4c8:	83 ec 08             	sub    esp,0x8
c001f4cb:	68 60 01 00 00       	push   0x160
c001f4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4d4:	e8 32 fa fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f4d9:	83 c4 10             	add    esp,0x10
c001f4dc:	83 c4 0c             	add    esp,0xc
c001f4df:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f4e0 <PIT::~PIT()>:
c001f4e0:	83 ec 0c             	sub    esp,0xc
c001f4e3:	ba 28 2b 02 c0       	mov    edx,0xc0022b28
c001f4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ec:	89 10                	mov    DWORD PTR [eax],edx
c001f4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f2:	83 ec 0c             	sub    esp,0xc
c001f4f5:	50                   	push   eax
c001f4f6:	e8 3f 2f ff ff       	call   c001243a <Timer::~Timer()>
c001f4fb:	83 c4 10             	add    esp,0x10
c001f4fe:	90                   	nop
c001f4ff:	83 c4 0c             	add    esp,0xc
c001f502:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f504 <PIT::~PIT()>:
c001f504:	83 ec 0c             	sub    esp,0xc
c001f507:	83 ec 0c             	sub    esp,0xc
c001f50a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f50e:	e8 cd ff ff ff       	call   c001f4e0 <PIT::~PIT()>
c001f513:	83 c4 10             	add    esp,0x10
c001f516:	83 ec 08             	sub    esp,0x8
c001f519:	68 5c 01 00 00       	push   0x15c
c001f51e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f522:	e8 e4 f9 fe ff       	call   c000ef0b <operator delete(void*, unsigned long)>
c001f527:	83 c4 10             	add    esp,0x10
c001f52a:	83 c4 0c             	add    esp,0xc
c001f52d:	c3                   	ret    
